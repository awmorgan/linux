All defined functions:

File ././include/linux/highmem-internal.h:
227:	static void __kunmap_atomic(const void *);

File ./arch/arm64/include/asm/arch_timer.h:
65:	static u64 arch_timer_read_cntpct_el0(void);
77:	static u64 arch_timer_read_cntvct_el0(void);

File ./arch/arm64/include/asm/archrandom.h:
15:	static bool smccc_probe_trng(void);

File ./arch/arm64/include/asm/cpufeature.h:
393:	static bool cpucap_multi_entry_cap_matches(const struct arm64_cpu_capabilities *, int);

File ./arch/arm64/include/asm/daifflags.h:
127:	static void local_daif_inherit(struct pt_regs *);
22:	static void local_daif_mask(void);
67:	static void local_daif_restore(unsigned long);

File ./arch/arm64/include/asm/irqflags.h:
81:	static int arch_irqs_disabled_flags(unsigned long);
27:	static void arch_local_irq_enable(void);
120:	static void arch_local_irq_restore(unsigned long);
101:	static unsigned long arch_local_irq_save(void);
66:	static unsigned long arch_local_save_flags(void);

File ./arch/arm64/include/asm/mte.h:
160:	static void mte_disable_tco_entry(struct task_struct *);

File ./arch/arm64/include/asm/percpu.h:
32:	static unsigned long __kern_my_cpu_offset(void);

File ./arch/arm64/include/asm/pgalloc.h:
49:	static void p4d_populate(struct mm_struct *, p4d_t *, pud_t *);
28:	static void pud_populate(struct mm_struct *, pud_t *, pmd_t *);

File ./arch/arm64/include/asm/pgtable.h:
531:	static void set_pmd_at(struct mm_struct *, unsigned long, pmd_t *, pmd_t);

File ./arch/arm64/include/asm/preempt.h:
45:	static void __preempt_count_add(int);
52:	static void __preempt_count_sub(int);
11:	static int preempt_count(void);

File ./arch/arm64/include/asm/ptrace.h:
367:	static unsigned long instruction_pointer(struct pt_regs *);

File ./arch/arm64/include/asm/stacktrace.h:
25:	static struct stack_info stackinfo_get_irq(void);
42:	static struct stack_info stackinfo_get_task(const struct task_struct *);

File ./arch/arm64/include/asm/tlbflush.h:
281:	static void __flush_tlb_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, bool, int);
246:	static void flush_tlb_mm(struct mm_struct *);
363:	static void flush_tlb_range(struct vm_area_struct *, unsigned long, unsigned long);

File ./arch/arm64/include/asm/uaccess.h:
436:	static unsigned long __clear_user(void *, unsigned long);
38:	static int access_ok(const void *, unsigned long);

File ./arch/arm64/include/asm/virt.h:
113:	static bool is_kernel_in_hyp_mode(void);

File ./include/asm-generic/pgalloc.h:
99:	static void pte_free(struct mm_struct *, struct page *);

File ./include/asm-generic/tlb.h:
532:	static void tlb_end_vma(struct mmu_gather *, struct vm_area_struct *);
448:	static void tlb_flush_mmu_tlbonly(struct mmu_gather *);

File ./include/crypto/sha1_base.h:
21:	static int sha1_base_init(struct shash_desc *);

File ./include/crypto/sha256_base.h:
22:	static int sha224_base_init(struct shash_desc *);
30:	static int sha256_base_init(struct shash_desc *);

File ./include/crypto/sha512_base.h:
22:	static int sha384_base_init(struct shash_desc *);
39:	static int sha512_base_init(struct shash_desc *);

File ./include/crypto/sm3_base.h:
21:	static int sm3_base_init(struct shash_desc *);

File ./include/linux/backing-dev-defs.h:
254:	static void wb_put(struct bdi_writeback *);

File ./include/linux/bottom_half.h:
31:	static void local_bh_enable(void);

File ./include/linux/bpf.h:
1795:	static void bpf_disable_instrumentation(void);
1801:	static void bpf_enable_instrumentation(void);
2526:	static struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *);
2531:	static void bpf_map_offload_map_free(struct bpf_map *);
2535:	static int bpf_prog_test_run_syscall(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
2712:	static u32 bpf_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
2758:	static u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
2773:	static u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
272:	static const char *btf_field_type_name(enum btf_field_type);
396:	static void copy_map_value(struct bpf_map *, void *, void *);

File ./include/linux/bpfptr.h:
57:	static int copy_from_bpfptr(void *, bpfptr_t, size_t);
49:	static int copy_from_bpfptr_offset(void *, bpfptr_t, size_t, size_t);
62:	static int copy_to_bpfptr_offset(bpfptr_t, size_t, const void *, size_t);
68:	static void *kvmemdup_bpfptr(bpfptr_t, size_t);

File ./include/linux/btf.h:
453:	static int btf_id_cmp_func(const void *, const void *);
549:	static bool btf_type_is_struct_ptr(struct btf *, const struct btf_type *);

File ./include/linux/capability.h:
262:	static bool bpf_capable(void);
257:	static bool perfmon_capable(void);

File ./include/linux/cgroup-defs.h:
749:	static void cgroup_threadgroup_change_begin(struct task_struct *);
760:	static void cgroup_threadgroup_change_end(struct task_struct *);

File ./include/linux/cgroup.h:
811:	static void put_cgroup_ns(struct cgroup_namespace *);

File ./include/linux/cgroup_refcnt.h:
8:	static void css_get(struct cgroup_subsys_state *);
76:	static void css_put(struct cgroup_subsys_state *);
61:	static bool css_tryget_online(struct cgroup_subsys_state *);

File ./include/linux/clk.h:
1083:	static void clk_disable_unprepare(struct clk *);
1068:	static int clk_prepare_enable(struct clk *);

File ./include/linux/configfs.h:
100:	static void config_group_put(struct config_group *);

File ./include/linux/cred.h:
281:	static void put_cred(const struct cred *);

File ./include/linux/dcache.h:
348:	static void dont_mount(struct dentry *);

File ./include/linux/devm-helpers.h:
29:	static void devm_delayed_work_drop(void *);
54:	static void devm_work_drop(void *);

File ./include/linux/dma-mapping.h:
459:	static int dma_coerce_mask_and_coherent(struct device *, u64);
327:	static dma_addr_t dma_map_single_attrs(struct device *, void *, size_t, enum dma_data_direction, unsigned long);

File ./include/linux/fs.h:
2329:	static bool HAS_UNMAPPED_ID(struct user_namespace *, struct inode *);
1807:	static void __sb_end_write(struct super_block *, int);
2628:	static int break_lease(struct inode *, unsigned int);
2948:	static void file_end_write(struct file *);
2934:	static void file_start_write(struct file *);
1780:	static bool fsuidgid_has_mapping(struct super_block *, struct user_namespace *);
2882:	static ssize_t generic_write_sync(struct kiocb *, ssize_t);
1697:	static vfsgid_t i_gid_into_vfsgid(struct user_namespace *, const struct inode *);
1645:	static vfsuid_t i_uid_into_vfsuid(struct user_namespace *, const struct inode *);
1839:	static void sb_end_write(struct super_block *);
2656:	static int try_break_deleg(struct inode *, struct inode **);

File ./include/linux/fs_struct.h:
27:	static void get_fs_root(struct fs_struct *, struct path *);

File ./include/linux/fsnotify.h:
254:	static void d_delete_notify(struct inode *, struct dentry *);
356:	static void fsnotify_change(struct dentry *, unsigned int);

File ./include/linux/gfp.h:
241:	static struct folio *__folio_alloc_node(gfp_t, unsigned int, int);
254:	static struct page *alloc_pages_node(int, gfp_t, unsigned int);

File ./include/linux/hid.h:
1017:	static void hid_map_usage(struct hid_input *, struct hid_usage *, unsigned long **, int *, __u8, unsigned int);
1074:	static void hid_map_usage_clear(struct hid_input *, struct hid_usage *, unsigned long **, int *, __u8, __u16);

File ./include/linux/highmem.h:
272:	static void zero_user_segments(struct page *, unsigned int, unsigned int, unsigned int, unsigned int);

File ./include/linux/hugetlb.h:
1192:	static bool hugetlb_pmd_shared(pte_t *);

File ./include/linux/hugetlb_cgroup.h:
119:	static void hugetlb_cgroup_put_rsvd_cgroup(struct hugetlb_cgroup *);

File ./include/linux/ipc_namespace.h:
135:	static struct ipc_namespace *get_ipc_ns(struct ipc_namespace *);

File ./include/linux/jhash.h:
70:	static u32 jhash(const void *, u32, u32);

File ./include/linux/kref.h:
43:	static void kref_get(struct kref *);
62:	static int kref_put(struct kref *, void (*)(struct kref *));

File ./include/linux/list_bl.h:
151:	static void hlist_bl_unlock(struct hlist_bl_head *);

File ./include/linux/memcontrol.h:
550:	static bool PageMemcgKmem(struct page *);
1086:	static void count_memcg_event_mm(struct mm_struct *, enum vm_event_item);
511:	static struct mem_cgroup *get_mem_cgroup_from_objcg(struct obj_cgroup *);
792:	static void obj_cgroup_put(struct obj_cgroup *);

File ./include/linux/mempolicy.h:
78:	static void mpol_cond_put(struct mempolicy *);

File ./include/linux/mm.h:
2180:	static void add_mm_counter(struct mm_struct *, int, long);
1039:	static unsigned long compound_nr(struct page *);
717:	static unsigned int compound_order(struct page *);
1247:	static void folio_put(struct folio *);
1267:	static void folio_put_refs(struct folio *, int);
1218:	static void get_page(struct page *);
2202:	static int mm_counter_file(struct page *);
877:	static int page_mapcount(struct page *);
942:	static bool page_mapped(struct page *);
2407:	static pud_t *pud_alloc(struct mm_struct *, p4d_t *, unsigned long);
1309:	static void put_page(struct page *);
2725:	static void show_mem(unsigned int, nodemask_t *);
1076:	static int thp_nr_pages(struct page *);

File ./include/linux/mmzone.h:
1863:	static int pfn_valid(unsigned long);

File ./include/linux/page-flags.h:
845:	static int PageTransHuge(struct page *);
726:	static int PageUptodate(struct page *);
249:	static unsigned long _compound_head(const struct page *);

File ./include/linux/page_idle.h:
123:	static bool page_is_young(struct page *);
133:	static bool test_and_clear_page_young(struct page *);

File ./include/linux/pagemap.h:
899:	static bool folio_trylock(struct folio *);
952:	static void lock_page(struct page *);
907:	static int trylock_page(struct page *);

File ./include/linux/percpu-refcount.h:
349:	static void percpu_ref_put(struct percpu_ref *);

File ./include/linux/percpu-rwsem.h:
97:	static void percpu_up_read(struct percpu_rw_semaphore *);

File ./include/linux/perf_event.h:
1466:	static int perf_allow_kernel(struct perf_event_attr *);

File ./include/linux/pid.h:
84:	static struct pid *get_pid(struct pid *);

File ./include/linux/posix_acl.h:
55:	static void posix_acl_release(struct posix_acl *);

File ./include/linux/ptrace.h:
170:	static void ptrace_event_pid(int, struct pid *);
200:	static void ptrace_init_task(struct task_struct *, bool);

File ./include/linux/radix-tree.h:
258:	static void radix_tree_preload_end(void);

File ./include/linux/rcupdate.h:
114:	static void call_rcu_hurry(struct callback_head *, rcu_callback_t);
791:	static void rcu_read_unlock(void);
873:	static void rcu_read_unlock_sched(void);

File ./include/linux/refcount.h:
265:	static void refcount_inc(refcount_t *);

File ./include/linux/regset.h:
253:	static int user_regset_copyin(unsigned int *, unsigned int *, const void **, const void **, void *, const int, const int);

File ./include/linux/rmap.h:
491:	static int page_mkclean(struct page *);
113:	static void put_anon_vma(struct anon_vma *);

File ./include/linux/sched/clock.h:
48:	static u64 local_clock(void);

File ./include/linux/sched/task.h:
108:	static struct task_struct *get_task_struct(struct task_struct *);
116:	static void put_task_struct(struct task_struct *);

File ./include/linux/sched/topology.h:
53:	static int cpu_core_flags(void);
60:	static int cpu_numa_flags(void);
39:	static int cpu_smt_flags(void);

File ./include/linux/sched/user.h:
49:	static struct user_struct *get_uid(struct user_struct *);

File ./include/linux/security.h:
1268:	static int security_msg_queue_associate(struct kern_ipc_perm *, int);
1326:	static int security_sem_associate(struct kern_ipc_perm *, int);
1301:	static int security_shm_associate(struct kern_ipc_perm *, int);

File ./include/linux/serial_core.h:
1011:	static int uart_handle_break(struct uart_port *);

File ./include/linux/static_call.h:
286:	static long __static_call_return0(void);

File ./include/linux/swapops.h:
462:	static struct page *pfn_swap_entry_to_page(swp_entry_t);

File ./include/linux/time64.h:
80:	static struct timespec64 timespec64_sub(struct timespec64, struct timespec64);

File ./include/linux/time_namespace.h:
36:	static struct time_namespace *get_time_ns(struct time_namespace *);

File ./include/linux/timekeeping.h:
93:	static ktime_t ktime_get_boottime(void);
162:	static u64 ktime_get_boottime_ns(void);
106:	static ktime_t ktime_get_clocktai(void);
167:	static u64 ktime_get_clocktai_ns(void);
77:	static ktime_t ktime_get_real(void);
157:	static u64 ktime_get_real_ns(void);

File ./include/linux/topology.h:
243:	static const struct cpumask *cpu_cpu_mask(int);
237:	static const struct cpumask *cpu_smt_mask(int);

File ./include/linux/tty.h:
401:	static struct tty_struct *tty_kref_get(struct tty_struct *);

File ./include/linux/vmstat.h:
69:	static void count_vm_event(enum vm_event_item);
79:	static void count_vm_events(enum vm_event_item, long);
166:	static void node_page_state_add(long, struct pglist_data *, enum node_stat_item);
159:	static void zone_page_state_add(long, struct zone *, enum zone_stat_item);
442:	static void zone_stat_sub_folio(struct folio *, enum zone_stat_item);

File ./include/linux/workqueue.h:
562:	static bool schedule_work(struct work_struct *);

File ./include/linux/writeback.h:
199:	static void wait_on_inode(struct inode *);

File ./include/linux/xarray.h:
774:	static int xa_insert(struct xarray *, unsigned long, void *, gfp_t);
1669:	static void *xas_next_entry(struct xa_state *, unsigned long);

File ./include/linux/zutil.h:
78:	static uLong zlib_adler32(uLong, const Byte *, uInt);

File arch/arm64/kernel/alternative.c:
295:	void alt_cb_patch_nops(struct alt_instr *, __le32 *, __le32 *, int);
40:	bool alternative_is_applied(u16);
255:	void apply_alternatives_all(void);
269:	void apply_boot_alternatives(void);
142:	static void __apply_alternatives(const struct alt_region *, bool, unsigned long *);
232:	static int __apply_alternatives_multi_stop(void *);
199:	static void apply_alternatives_vdso(void);
104:	static void patch_alternative(struct alt_instr *, __le32 *, __le32 *, int);

File arch/arm64/kernel/cacheinfo.c:
20:	int cache_line_size(void);
46:	int init_cache_level(unsigned int);
85:	int populate_cache_leaves(unsigned int);

File arch/arm64/kernel/cpu_errata.c:
126:	static void cpu_clear_bf16_from_user_emulation(const struct arm64_cpu_capabilities *);
119:	static void cpu_enable_cache_maint_trap(const struct arm64_cpu_capabilities *);
91:	static void cpu_enable_trap_ctr_access(const struct arm64_cpu_capabilities *);
111:	static bool has_cortex_a76_erratum_1463225(const struct arm64_cpu_capabilities *, int);
59:	static bool has_mismatched_cache_type(const struct arm64_cpu_capabilities *, int);
202:	static bool has_neoverse_n1_erratum_1542419(const struct arm64_cpu_capabilities *, int);
18:	static bool is_affected_midr_range(const struct arm64_cpu_capabilities *, int);
37:	static bool is_affected_midr_range_list(const struct arm64_cpu_capabilities *, int);
45:	static bool is_kryo_midr(const struct arm64_cpu_capabilities *, int);
184:	static bool needs_tx2_tvm_workaround(const struct arm64_cpu_capabilities *, int);

File arch/arm64/kernel/cpu_ops.c:
115:	const struct cpu_operations *get_cpu_ops(int);
99:	int init_cpu_ops(int);
55:	static const char *cpu_read_enable_method(int);

File arch/arm64/kernel/cpufeature.c:
1339:	u64 __read_sysreg_by_encoding(u32);
3478:	enum mitigation_state arm64_get_meltdown_state(void);
3207:	void check_local_cpu_capabilities(void);
3276:	unsigned long cpu_get_elf_hwcap(void);
3286:	unsigned long cpu_get_elf_hwcap2(void);
1892:	bool cpu_has_amu_feat(int);
3270:	bool cpu_have_feature(unsigned int);
3265:	void cpu_set_feature(unsigned int);
3489:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
3449:	int do_emulate_mrs(struct pt_regs *, u32, u32);
136:	void dump_cpu_features(void);
759:	struct arm64_ftr_reg *get_arm64_ftr_reg(u32);
1897:	int get_cpu_with_amu_feat(void);
986:	void init_cpu_features(struct cpuinfo_arm64 *);
1597:	bool kaslr_requires_kpti(void);
1322:	u64 read_sanitised_ftr_reg(u32);
3303:	void setup_cpu_features(void);
1453:	const struct cpumask *system_32bit_el0_cpumask(void);
3235:	bool this_cpu_has_cap(unsigned int);
3462:	bool try_emulate_mrs(struct pt_regs *, u32);
1189:	void update_cpu_features(int, struct cpuinfo_arm64 *, struct cpuinfo_arm64 *);
1471:	static ssize_t aarch32_el0_show(struct device *, struct device_attribute *, char *);
1480:	static int aarch32_el0_sysfs_init(void);
2054:	static void bti_enable(const struct arm64_cpu_capabilities *);
1063:	static int check_update_ftr_reg(u32, int, u64, u64);
1902:	static void cpu_amu_enable(const struct arm64_cpu_capabilities *);
1974:	static void cpu_clear_disr(const struct arm64_cpu_capabilities *);
1945:	static void cpu_copy_el2regs(const struct arm64_cpu_capabilities *);
1546:	static void cpu_emulate_effective_ctr(const struct arm64_cpu_capabilities *);
3383:	static void cpu_enable_cnp(const struct arm64_cpu_capabilities *);
2108:	static void cpu_enable_dit(const struct arm64_cpu_capabilities *);
2030:	static void cpu_enable_e0pd(const struct arm64_cpu_capabilities *);
1842:	static void cpu_enable_hw_dbm(const struct arm64_cpu_capabilities *);
2069:	static void cpu_enable_mte(const struct arm64_cpu_capabilities *);
2958:	static int cpu_enable_non_boot_scope_capabilities(void *);
1960:	static void cpu_enable_pan(const struct arm64_cpu_capabilities *);
2103:	static void cpu_trap_el0_impdef(const struct arm64_cpu_capabilities *);
2982:	static void enable_cpu_capabilities(u16);
3331:	static int enable_mismatched_32bit_el0(unsigned int);
1489:	static bool has_32bit_el0(const struct arm64_cpu_capabilities *, int);
1982:	static bool has_address_auth_cpucap(const struct arm64_cpu_capabilities *, int);
2008:	static bool has_address_auth_metacap(const struct arm64_cpu_capabilities *, int);
1401:	static bool has_always(const struct arm64_cpu_capabilities *, int);
1915:	static bool has_amu(const struct arm64_cpu_capabilities *, int);
1558:	static bool has_cache_dic(const struct arm64_cpu_capabilities *, int);
1533:	static bool has_cache_idc(const struct arm64_cpu_capabilities *, int);
1447:	static bool has_cpuid_feature(const struct arm64_cpu_capabilities *, int);
2018:	static bool has_generic_auth(const struct arm64_cpu_capabilities *, int);
1848:	static bool has_hw_dbm(const struct arm64_cpu_capabilities *, int);
1525:	static bool has_no_fpsimd(const struct arm64_cpu_capabilities *, int);
1515:	static bool has_no_hw_prefetch(const struct arm64_cpu_capabilities *, int);
1572:	static bool has_useable_cnp(const struct arm64_cpu_capabilities *, int);
1500:	static bool has_useable_gicv3_cpuif(const struct arm64_cpu_capabilities *, int);
1427:	static bool has_user_cpuid_feature(const struct arm64_cpu_capabilities *, int);
961:	static void init_32bit_cpu_features(struct cpuinfo_32bit *);
3369:	static int init_32bit_el0_mask(void);
865:	static void init_cpu_ftr_reg(u32, u64);
939:	static void init_cpu_hwcaps_indirect_list_from_array(const struct arm64_cpu_capabilities *);
1724:	static void kpti_install_ng_mappings(const struct arm64_cpu_capabilities *);
1717:	static phys_addr_t kpti_ng_pgd_alloc(int);
1464:	static int parse_32bit_el0_param(char *);
1795:	static int parse_kpti(char *);
1940:	static bool runs_at_el2(const struct arm64_cpu_capabilities *, int);
723:	static int search_cmp_ftr_reg(const void *, const void *);
2923:	static void setup_elf_hwcaps(const struct arm64_cpu_capabilities *);
809:	static void sort_ftr_regs(void);
1631:	static bool unmap_kernel_at_el0(const struct arm64_cpu_capabilities *, int);
2932:	static void update_cpu_capabilities(u16);
3030:	static void verify_local_cpu_caps(u16);

File arch/arm64/kernel/cpuinfo.c:
456:	void cpuinfo_store_boot_cpu(void);
449:	void cpuinfo_store_cpu(void);
411:	static void __cpuinfo_store_cpu(struct cpuinfo_arm64 *);
233:	static void *c_next(struct seq_file *, void *, loff_t *);
161:	static int c_show(struct seq_file *, void *);
228:	static void *c_start(struct seq_file *, loff_t *);
239:	static void c_stop(struct seq_file *, void *);
328:	static int cpuid_cpu_offline(unsigned int);
305:	static int cpuid_cpu_online(unsigned int);
344:	static int cpuinfo_regs_init(void);
280:	static ssize_t midr_el1_show(struct kobject *, struct kobj_attribute *, char *);
281:	static ssize_t revidr_el1_show(struct kobject *, struct kobj_attribute *, char *);
282:	static ssize_t smidr_el1_show(struct kobject *, struct kobj_attribute *, char *);

File arch/arm64/kernel/debug-monitors.c:
342:	int aarch32_break_handler(struct pt_regs *);
28:	u8 debug_monitors_arch(void);
381:	void debug_traps_init(void);
101:	void disable_debug_monitors(enum dbg_active_el);
80:	void enable_debug_monitors(enum dbg_active_el);
434:	int kernel_active_single_step(void);
426:	void kernel_disable_single_step(void);
417:	void kernel_enable_single_step(struct pt_regs *);
292:	void register_kernel_break_hook(struct break_hook *);
189:	void register_kernel_step_hook(struct step_hook *);
282:	void register_user_break_hook(struct break_hook *);
179:	void register_user_step_hook(struct step_hook *);
297:	void unregister_kernel_break_hook(struct break_hook *);
194:	void unregister_kernel_step_hook(struct step_hook *);
287:	void unregister_user_break_hook(struct break_hook *);
184:	void unregister_user_step_hook(struct step_hook *);
451:	void user_disable_single_step(struct task_struct *);
442:	void user_enable_single_step(struct task_struct *);
401:	void user_fastforward_single_step(struct task_struct *);
407:	void user_regs_reset_single_step(struct user_pt_regs *, struct task_struct *);
390:	void user_rewind_single_step(struct task_struct *);
325:	static int brk_handler(unsigned long, unsigned long, struct pt_regs *);
125:	static int clear_os_lock(unsigned int);
58:	static int create_debug_debugfs_entry(void);
133:	static int debug_monitors_init(void);
65:	static int early_debug_disable(char *);
241:	static int single_step_handler(unsigned long, unsigned long, struct pt_regs *);

File arch/arm64/kernel/elfcore.c:
115:	size_t elf_core_extra_data_size(struct coredump_params *);
78:	Elf64_Half elf_core_extra_phdrs(struct coredump_params *);
127:	int elf_core_write_extra_data(struct coredump_params *);
90:	int elf_core_write_extra_phdrs(struct coredump_params *, loff_t);

File arch/arm64/kernel/entry-common.c:
147:	void asm_exit_to_user_mode(struct pt_regs *);
839:	void el0t_32_error_handler(struct pt_regs *);
838:	void el0t_32_fiq_handler(struct pt_regs *);
837:	void el0t_32_irq_handler(struct pt_regs *);
836:	void el0t_32_sync_handler(struct pt_regs *);
755:	void el0t_64_error_handler(struct pt_regs *);
737:	void el0t_64_fiq_handler(struct pt_regs *);
727:	void el0t_64_irq_handler(struct pt_regs *);
649:	void el0t_64_sync_handler(struct pt_regs *);
499:	void el1h_64_error_handler(struct pt_regs *);
494:	void el1h_64_fiq_handler(struct pt_regs *);
489:	void el1h_64_irq_handler(struct pt_regs *);
420:	void el1h_64_sync_handler(struct pt_regs *);
359:	void el1t_64_error_handler(struct pt_regs *);
358:	void el1t_64_fiq_handler(struct pt_regs *);
357:	void el1t_64_irq_handler(struct pt_regs *);
356:	void el1t_64_sync_handler(struct pt_regs *);
742:	static void __el0_error_handler_common(struct pt_regs *);
732:	static void __el0_fiq_handler_common(struct pt_regs *);
722:	static void __el0_irq_handler_common(struct pt_regs *);
284:	static void __panic_unhandled(struct pt_regs *, const char *, unsigned long);
197:	static void arm64_enter_el1_dbg(struct pt_regs *);
157:	static void arm64_enter_nmi(struct pt_regs *);
212:	static void arm64_exit_el1_dbg(struct pt_regs *);
175:	static void arm64_exit_nmi(struct pt_regs *);
309:	static void cortex_a76_erratum_1463225_svc_handler(void);
268:	static void do_interrupt_handler(struct pt_regs *, void (*)(struct pt_regs *));
606:	static void el0_bti(struct pt_regs *);
509:	static void el0_da(struct pt_regs *, unsigned long);
622:	static void el0_dbg(struct pt_regs *, unsigned long);
641:	static void el0_fpac(struct pt_regs *, unsigned long);
537:	static void el0_fpsimd_acc(struct pt_regs *, unsigned long);
561:	static void el0_fpsimd_exc(struct pt_regs *, unsigned long);
519:	static void el0_ia(struct pt_regs *, unsigned long);
705:	static void el0_interrupt(struct pt_regs *, void (*)(struct pt_regs *));
614:	static void el0_inv(struct pt_regs *, unsigned long);
577:	static void el0_pc(struct pt_regs *, unsigned long);
553:	static void el0_sme_acc(struct pt_regs *, unsigned long);
590:	static void el0_sp(struct pt_regs *, unsigned long);
633:	static void el0_svc(struct pt_regs *);
545:	static void el0_sve_acc(struct pt_regs *, unsigned long);
569:	static void el0_sys(struct pt_regs *, unsigned long);
598:	static void el0_undef(struct pt_regs *, unsigned long);
361:	static void el1_abort(struct pt_regs *, unsigned long);
392:	static void el1_bti(struct pt_regs *, unsigned long);
401:	static void el1_dbg(struct pt_regs *, unsigned long);
411:	static void el1_fpac(struct pt_regs *, unsigned long);
478:	static void el1_interrupt(struct pt_regs *, void (*)(struct pt_regs *));
372:	static void el1_pc(struct pt_regs *, unsigned long);
383:	static void el1_undef(struct pt_regs *, unsigned long);
56:	static void enter_from_kernel_mode(struct pt_regs *);
91:	static void exit_to_kernel_mode(struct pt_regs *);

File arch/arm64/kernel/fpsimd.c:
1516:	void do_fpsimd_acc(unsigned long, struct pt_regs *);
1525:	void do_fpsimd_exc(unsigned long, struct pt_regs *);
1472:	void do_sme_acc(unsigned long, struct pt_regs *);
1430:	void do_sve_acc(unsigned long, struct pt_regs *);
1305:	void fa64_kernel_enable(const struct arm64_cpu_capabilities *);
1741:	void fpsimd_bind_state_to_cpu(struct cpu_fp_state *);
1820:	void fpsimd_flush_task_state(struct task_struct *);
1609:	void fpsimd_flush_thread(void);
784:	void fpsimd_force_sync_to_sve(struct task_struct *);
1680:	void fpsimd_kvm_prepare(void);
1655:	void fpsimd_preserve_current_state(void);
1249:	void fpsimd_release_task(struct task_struct *);
1757:	void fpsimd_restore_current_state(void);
1861:	void fpsimd_save_and_flush_cpu_state(void);
1670:	void fpsimd_signal_preserve_current_state(void);
797:	void fpsimd_sync_to_sve(struct task_struct *);
1547:	void fpsimd_thread_switch(struct task_struct *);
1790:	void fpsimd_update_current_state(const struct user_fpsimd_state *);
1891:	void kernel_neon_begin(void);
1917:	void kernel_neon_end(void);
1319:	u64 read_smcr_features(void);
1160:	u64 read_zcr_features(void);
1268:	void sme_alloc(struct task_struct *);
995:	int sme_get_current_vl(void);
1286:	void sme_kernel_enable(const struct arm64_cpu_capabilities *);
976:	int sme_set_current_vl(unsigned long);
1343:	void sme_setup(void);
761:	void sve_alloc(struct task_struct *, bool);
966:	int sve_get_current_vl(void);
1147:	void sve_kernel_enable(const struct arm64_cpu_capabilities *);
947:	int sve_set_current_vl(unsigned long);
1180:	void sve_setup(void);
739:	size_t sve_state_size(const struct task_struct *);
830:	void sve_sync_from_fpsimd_zeropad(struct task_struct *);
812:	void sve_sync_to_fpsimd(struct task_struct *);
276:	unsigned int task_get_vl(const struct task_struct *, enum vec_type);
287:	unsigned int task_get_vl_onexec(const struct task_struct *, enum vec_type);
281:	void task_set_vl(struct task_struct *, enum vec_type, unsigned long);
293:	void task_set_vl_onexec(struct task_struct *, enum vec_type, unsigned long);
1039:	void vec_init_vq_map(enum vec_type);
845:	int vec_set_vector_length(struct task_struct *, enum vec_type, unsigned long, unsigned long);
1051:	void vec_update_vq_map(enum vec_type);
1066:	int vec_verify_vq_map(enum vec_type);
531:	static unsigned int find_supported_vector_length(enum vec_type, unsigned int);
1707:	static void fpsimd_bind_task_to_cpu(void);
2083:	static int fpsimd_cpu_dead(unsigned int);
1574:	static void fpsimd_flush_thread_vl(enum vec_type);
2102:	static int fpsimd_init(void);
459:	static void fpsimd_save(void);
239:	static void get_cpu_fpsimd_context(void);
262:	static void put_cpu_fpsimd_context(void);
617:	static int sme_sysctl_init(void);
593:	static int sve_sysctl_init(void);
380:	static void task_fpsimd_load(void);
1004:	static void vec_probe_vqs(struct vl_info *, unsigned long *);
556:	static int vec_proc_do_default_vl(struct ctl_table *, int, void *, size_t *, loff_t *);

File arch/arm64/kernel/hw_breakpoint.c:
351:	int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl, int *, int *, int *);
335:	int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *);
288:	int arch_install_hw_breakpoint(struct perf_event *);
293:	void arch_uninstall_hw_breakpoint(struct perf_event *);
507:	int hw_breakpoint_arch_parse(struct perf_event *, const struct perf_event_attr *, struct arch_hw_breakpoint *);
1027:	int hw_breakpoint_exceptions_notify(struct notifier_block *, unsigned long, void *);
1020:	void hw_breakpoint_pmu_read(struct perf_event *);
42:	int hw_breakpoint_slots(int);
909:	void hw_breakpoint_thread_switch(struct task_struct *);
851:	int reinstall_suspended_bps(struct pt_regs *);
987:	static int arch_hw_breakpoint_init(void);
620:	static int breakpoint_handler(unsigned long, unsigned long, struct pt_regs *);
222:	static int hw_breakpoint_control(struct perf_event *, enum hw_breakpoint_ops);
941:	static int hw_breakpoint_reset(unsigned int);
105:	static u64 read_wb_reg(int, int);
580:	static void toggle_bp_registers(int, enum dbg_active_el, int);
754:	static int watchpoint_handler(unsigned long, unsigned long, struct pt_regs *);
122:	static void write_wb_reg(int, int, u64);

File arch/arm64/kernel/idle.c:
38:	void arch_cpu_idle(void);
23:	void cpu_do_idle(void);

File arch/arm64/kernel/idreg-override.c:
300:	void init_feature_override(u64);
235:	static void __parse_cmdline(const char *, bool);
180:	static int find_field(const char *, const struct ftr_set_desc *, int, u64 *);
265:	static const u8 *get_bootargs_cmdline(void);
195:	static void match_options(const char *);
37:	static bool mmfr1_vh_filter(u64);
286:	static void parse_cmdline(void);
58:	static bool pfr0_sve_filter(u64);
82:	static bool pfr1_sme_filter(u64);

File arch/arm64/kernel/io.c:
15:	void __memcpy_fromio(void *, const volatile void *, size_t);
43:	void __memcpy_toio(volatile void *, const void *, size_t);
71:	void __memset_io(volatile void *, int, size_t);

File arch/arm64/kernel/irq.c:
83:	void do_softirq_own_stack(void);
122:	void init_IRQ(void);
112:	int set_handle_fiq(void (*)(struct pt_regs *));
102:	int set_handle_irq(void (*)(struct pt_regs *));
78:	static void ____do_softirq(struct pt_regs *);
94:	static void default_handle_fiq(struct pt_regs *);
89:	static void default_handle_irq(struct pt_regs *);

File arch/arm64/kernel/jump_label.c:
13:	void arch_jump_label_transform(struct jump_entry *, enum jump_label_type);

File arch/arm64/kernel/mte.c:
395:	long get_mte_ctrl(struct task_struct *);
81:	int memcmp_pages(struct page *, struct page *);
292:	void mte_cpu_setup(void);
607:	size_t mte_probe_user_range(const char *, size_t);
521:	int mte_ptrace_copy_tags(struct task_struct *, long, unsigned long, unsigned long);
335:	void mte_suspend_enter(void);
351:	void mte_suspend_exit(void);
57:	void mte_sync_tags(pte_t, pte_t);
257:	void mte_thread_init_user(void);
270:	void mte_thread_switch(struct task_struct *);
359:	long set_mte_ctrl(struct task_struct *, unsigned long);
549:	static ssize_t mte_tcf_preferred_show(struct device *, struct device_attribute *, char *);
564:	static ssize_t mte_tcf_preferred_store(struct device *, struct device_attribute *, const char *, size_t);
587:	static int register_mte_tcf_preferred_sysctl(void);

File arch/arm64/kernel/paravirt.c:
156:	int pv_time_init(void);
140:	static bool has_pv_steal_clock(void);
30:	static u64 native_steal_clock(int);
53:	static u64 para_steal_clock(int);
44:	static int parse_no_stealacc(char *);
78:	static int stolen_time_cpu_down_prepare(unsigned int);
94:	static int stolen_time_cpu_online(unsigned int);

File arch/arm64/kernel/patching.c:
136:	int aarch64_insn_patch_text(void **, u32 *, int);
91:	int aarch64_insn_patch_text_nosync(void *, u32);
57:	int aarch64_insn_read(void *, u32 *);
86:	int aarch64_insn_write(void *, u32);
115:	static int aarch64_insn_patch_text_cb(void *);

File arch/arm64/kernel/perf_callchain.c:
141:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
102:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
152:	unsigned long perf_instruction_pointer(struct pt_regs *);
160:	unsigned long perf_misc_flags(struct pt_regs *);
135:	static bool callchain_trace(void *, unsigned long);

File arch/arm64/kernel/perf_regs.c:
101:	void perf_get_regs_user(struct perf_regs *, struct pt_regs *);
93:	u64 perf_reg_abi(struct task_struct *);
80:	int perf_reg_validate(u64);
30:	u64 perf_reg_value(struct pt_regs *, int);

File arch/arm64/kernel/pointer_auth.c:
93:	int ptrauth_get_enabled_keys(struct task_struct *);
11:	int ptrauth_prctl_reset_keys(struct task_struct *, unsigned long);
67:	int ptrauth_set_enabled_keys(struct task_struct *, unsigned long, unsigned long);

File arch/arm64/kernel/process.c:
576:	unsigned long __get_wchan(struct task_struct *);
200:	void __show_regs(struct pt_regs *);
522:	struct task_struct *__switch_to(struct task_struct *, struct task_struct *);
593:	unsigned long arch_align_stack(unsigned long);
72:	void arch_cpu_idle_dead(void);
287:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
740:	int arch_elf_adjust_prot(int, const struct arch_elf_state *, bool, bool);
282:	void arch_release_task_struct(struct task_struct *);
625:	void arch_setup_new_exec(void);
344:	int copy_thread(struct task_struct *, const struct kernel_clone_args *);
274:	void flush_thread(void);
694:	long get_tagged_addr_ctrl(struct task_struct *);
97:	void machine_halt(void);
110:	void machine_power_off(void);
126:	void machine_restart(char *);
87:	void machine_shutdown(void);
664:	long set_tagged_addr_ctrl(struct task_struct *, unsigned long);
243:	void show_regs(struct pt_regs *);
418:	void tls_preserve_current_state(void);
506:	void update_sctlr_el1(u64);
565:	static bool get_wchan_cb(void *, unsigned long);
729:	static int tagged_addr_init(void);

File arch/arm64/kernel/proton-pack.c:
795:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
751:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
819:	enum mitigation_state arm64_get_spectre_bhb_state(void);
215:	enum mitigation_state arm64_get_spectre_v2_state(void);
461:	enum mitigation_state arm64_get_spectre_v4_state(void);
446:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
61:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
124:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
202:	bool has_spectre_v2(const struct arm64_cpu_capabilities *, int);
325:	bool has_spectre_v3a(const struct arm64_cpu_capabilities *, int);
511:	bool has_spectre_v4(const struct arm64_cpu_capabilities *, int);
945:	bool is_spectre_bhb_affected(const struct arm64_cpu_capabilities *, int);
588:	void smccc_patch_fw_mitigation_conduit(struct alt_instr *, __le32 *, __le32 *, int);
993:	void spectre_bhb_enable_mitigation(const struct arm64_cpu_capabilities *);
836:	u8 spectre_bhb_loop_affected(int);
1136:	void spectre_bhb_patch_clearbhb(struct alt_instr *, __le32 *, __le32 *, int);
1078:	void spectre_bhb_patch_fw_mitigation_enabled(struct alt_instr *, __le32 *, __le32 *, int);
1089:	void spectre_bhb_patch_loop_iter(struct alt_instr *, __le32 *, __le32 *, int);
1067:	void spectre_bhb_patch_loop_mitigation_enable(struct alt_instr *, __le32 *, __le32 *, int);
1110:	void spectre_bhb_patch_wa3(struct alt_instr *, __le32 *, __le32 *, int);
305:	void spectre_v2_enable_mitigation(const struct arm64_cpu_capabilities *);
337:	void spectre_v3a_enable_mitigation(const struct arm64_cpu_capabilities *);
631:	void spectre_v4_enable_mitigation(const struct arm64_cpu_capabilities *);
654:	void spectre_v4_enable_task_mitigation(struct task_struct *);
568:	void spectre_v4_patch_fw_mitigation_enable(struct alt_instr *, __le32 *, __le32 *, int);
524:	bool try_emulate_el1_ssbs(struct pt_regs *, u32);
1150:	void unpriv_ebpf_notify(int);
243:	static void call_hvc_arch_workaround_1(void);
237:	static void call_smc_arch_workaround_1(void);
907:	static bool is_spectre_bhb_fw_affected(int);
986:	static int parse_spectre_bhb_param(char *);
85:	static int parse_spectre_v2_param(char *);
394:	static int parse_spectre_v4_param(char *);
249:	static void qcom_link_stack_sanitisation(void);
886:	static enum mitigation_state spectre_bhb_get_cpu_fw_mitigation_state(void);
434:	static bool spectre_v4_mitigations_dynamic(void);
422:	static bool spectre_v4_mitigations_off(void);
965:	static void this_cpu_set_vectors(enum arm64_bp_harden_el1_vectors);

File arch/arm64/kernel/psci.c:
39:	static int cpu_psci_cpu_boot(unsigned int);
50:	static bool cpu_psci_cpu_can_disable(unsigned int);
68:	static void cpu_psci_cpu_die(unsigned int);
55:	static int cpu_psci_cpu_disable(unsigned int);
24:	static int cpu_psci_cpu_init(unsigned int);
80:	static int cpu_psci_cpu_kill(unsigned int);
29:	static int cpu_psci_cpu_prepare(unsigned int);

File arch/arm64/kernel/ptrace.c:
2057:	long arch_ptrace(struct task_struct *, long, unsigned long, unsigned long);
206:	void flush_ptrace_hw_breakpoint(struct task_struct *);
155:	void ptrace_disable(struct task_struct *);
226:	void ptrace_hw_copy_thread(struct task_struct *);
136:	unsigned long regs_get_kernel_stack_nth(struct pt_regs *, unsigned int);
102:	int regs_query_register_offset(const char *);
2118:	int syscall_trace_enter(struct pt_regs *);
2141:	void syscall_trace_exit(struct pt_regs *);
2040:	const struct user_regset_view *task_user_regset_view(struct task_struct *);
2226:	int valid_user_regs(struct user_pt_regs *, struct task_struct *);
580:	static int fpr_active(struct task_struct *, const struct user_regset *);
603:	static int fpr_get(struct task_struct *, const struct user_regset *, struct membuf);
642:	static int fpr_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
554:	static int gpr_get(struct task_struct *, const struct user_regset *, struct membuf);
562:	static int gpr_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
473:	static int hw_break_get(struct task_struct *, const struct user_regset *, struct membuf);
505:	static int hw_break_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1165:	static int pac_enabled_keys_get(struct task_struct *, const struct user_regset *, struct membuf);
1177:	static int pac_enabled_keys_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1144:	static int pac_mask_get(struct task_struct *, const struct user_regset *, struct membuf);
411:	static struct perf_event *ptrace_hbp_get_initialised_bp(unsigned int, struct task_struct *, unsigned long);
169:	static void ptrace_hbptriggered(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
986:	static int ssve_get(struct task_struct *, const struct user_regset *, struct membuf);
996:	static int ssve_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
833:	static int sve_get(struct task_struct *, const struct user_regset *, struct membuf);
781:	static int sve_get_common(struct task_struct *, const struct user_regset *, struct membuf, enum vec_type);
970:	static int sve_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
843:	static int sve_set_common(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *, enum vec_type);
700:	static int system_call_get(struct task_struct *, const struct user_regset *, struct membuf);
707:	static int system_call_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1320:	static int tagged_addr_ctrl_get(struct task_struct *, const struct user_regset *, struct membuf);
1332:	static int tagged_addr_ctrl_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
661:	static int tls_get(struct task_struct *, const struct user_regset *, struct membuf);
678:	static int tls_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1008:	static int za_get(struct task_struct *, const struct user_regset *, struct membuf);
1057:	static int za_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);

File arch/arm64/kernel/return_address.c:
35:	void *return_address(unsigned int);
21:	static bool save_return_addr(void *, unsigned long);

File arch/arm64/kernel/setup.c:
97:	bool arch_match_cpu_phys_id(int, u64);
287:	u64 cpu_logical_map(unsigned int);
175:	void early_fdt_map(u64);
170:	void *get_early_fdt_ptr(void);
292:	void setup_arch(char **);
88:	void smp_setup_processor_id(void);
425:	static int arm64_panic_block_dump(struct notifier_block *, unsigned long, void *);
438:	static int register_arm64_panic_block(void);
219:	static void request_standard_resources(void);
257:	static int reserve_memblock_reserved_regions(void);
183:	static void setup_machine_fdt(phys_addr_t);
109:	static void smp_build_mpidr_hash(void);
398:	static int topology_init(void);

File arch/arm64/kernel/signal.c:
680:	long __arm64_sys_rt_sigreturn(const struct pt_regs *);
1113:	void do_notify_resume(struct pt_regs *, unsigned long);
1155:	void minsigstksz_setup(void);
720:	static int setup_sigframe_layout(struct rt_sigframe_user_layout *, bool);

File arch/arm64/kernel/smp.c:
339:	void __cpu_die(unsigned int);
293:	int __cpu_disable(void);
113:	int __cpu_up(unsigned int, struct task_struct *);
813:	void arch_irq_work_raise(void);
795:	void arch_send_call_function_ipi_mask(const struct cpumask *);
800:	void arch_send_call_function_single_ipi(int);
779:	int arch_show_interrupts(struct seq_file *, int);
364:	void cpu_die(void);
401:	void cpu_die_early(void);
1093:	bool cpus_are_stuck_in_kernel(void);
833:	void panic_smp_self_stop(void);
196:	void secondary_start_kernel(void);
956:	void set_smp_ipi_range(int, int);
436:	void smp_cpus_done(unsigned int);
686:	void smp_init_cpus(void);
445:	void smp_prepare_boot_cpu(void);
719:	void smp_prepare_cpus(unsigned int);
980:	void smp_send_reschedule(int);
1003:	void smp_send_stop(void);
986:	void tick_broadcast(const struct cpumask *);
421:	static void hyp_mode_check(void);
920:	static irqreturn_t ipi_handler(int, void *);
932:	static void ipi_setup(int);
475:	static bool is_mpidr_duplicate(unsigned int, u64);
628:	static void of_parse_and_init_cpus(void);
489:	static int smp_cpu_setup(int);

File arch/arm64/kernel/smp_spin_table.c:
107:	static int smp_spin_table_cpu_boot(unsigned int);
43:	static int smp_spin_table_cpu_init(unsigned int);
66:	static int smp_spin_table_cpu_prepare(unsigned int);

File arch/arm64/kernel/stacktrace.c:
198:	void arch_stack_walk(stack_trace_consume_fn, void *, struct task_struct *, struct pt_regs *);
143:	void dump_backtrace(struct pt_regs *, struct task_struct *, const char *);
163:	void show_stack(struct task_struct *, unsigned long *, const char *);
136:	static bool dump_backtrace_entry(void *, unsigned long);
121:	static void unwind(struct unwind_state *, stack_trace_consume_fn, void *);

File arch/arm64/kernel/sys.c:
31:	long __arm64_sys_arm64_personality(const struct pt_regs *);
21:	long __arm64_sys_mmap(const struct pt_regs *);
41:	long __arm64_sys_ni_syscall(const struct pt_regs *);

File arch/arm64/kernel/syscall.c:
194:	void do_el0_svc(struct pt_regs *);
41:	static void invoke_syscall(struct pt_regs *, unsigned int, unsigned int, const syscall_fn_t *);

File arch/arm64/kernel/time.c:
45:	unsigned long profile_pc(struct pt_regs *);
55:	void time_init(void);
35:	static bool profile_pc_cb(void *, unsigned long);

File arch/arm64/kernel/topology.c:
90:	void update_freq_counters_refs(void);
238:	static int init_amu_fie(void);

File arch/arm64/kernel/traps.c:
265:	void arm64_force_sig_fault(int, int, unsigned long, const char *);
275:	void arm64_force_sig_mceerr(int, unsigned long, short, const char *);
282:	void arm64_force_sig_ptrace_errno_trap(int, unsigned long, const char *);
906:	bool arm64_is_fatal_ras_serror(struct pt_regs *, unsigned long);
289:	void arm64_notify_die(const char *, struct pt_regs *, int, int, unsigned long, unsigned long);
439:	void arm64_notify_segfault(unsigned long);
891:	void arm64_serror_panic(struct pt_regs *, unsigned long);
359:	void arm64_skip_faulting_instruction(struct pt_regs *, unsigned long);
845:	void bad_el0_sync(struct pt_regs *, int, unsigned long);
210:	void die(const char *, struct pt_regs *, long);
488:	void do_el0_bti(struct pt_regs *);
498:	void do_el0_fpac(struct pt_regs *, unsigned long);
772:	void do_el0_sys(unsigned long, struct pt_regs *);
453:	void do_el0_undef(struct pt_regs *, unsigned long);
493:	void do_el1_bti(struct pt_regs *, unsigned long);
503:	void do_el1_fpac(struct pt_regs *, unsigned long);
474:	void do_el1_undef(struct pt_regs *, unsigned long);
938:	void do_serror(struct pt_regs *, unsigned long);
1084:	int early_brk64(unsigned long, unsigned long, struct pt_regs *);
836:	const char *esr_get_class_string(unsigned long);
407:	void force_signal_inject(int, int, unsigned long, unsigned long);
947:	int is_valid_bugaddr(unsigned long);
1098:	void trap_init(void);
131:	static bool __check_al(unsigned long);
64:	static bool __check_cc(unsigned long);
59:	static bool __check_cs(unsigned long);
49:	static bool __check_eq(unsigned long);
101:	static bool __check_ge(unsigned long);
113:	static bool __check_gt(unsigned long);
89:	static bool __check_hi(unsigned long);
122:	static bool __check_le(unsigned long);
95:	static bool __check_ls(unsigned long);
107:	static bool __check_lt(unsigned long);
69:	static bool __check_mi(unsigned long);
54:	static bool __check_ne(unsigned long);
74:	static bool __check_pl(unsigned long);
84:	static bool __check_vc(unsigned long);
79:	static bool __check_vs(unsigned long);
241:	static void arm64_show_signal(int, const char *);
959:	static int bug_handler(struct pt_regs *, unsigned long);
594:	static void cntfrq_read_handler(unsigned long, struct pt_regs *);
586:	static void cntvct_read_handler(unsigned long, struct pt_regs *);
567:	static void ctr_read_handler(unsigned long, struct pt_regs *);
602:	static void mrs_handler(unsigned long, struct pt_regs *);
1016:	static int reserved_fault_handler(struct pt_regs *, unsigned long);
527:	static void user_cache_maint_handler(unsigned long, struct pt_regs *);
613:	static void wfi_handler(unsigned long, struct pt_regs *);

File arch/arm64/kernel/vdso.c:
120:	struct vdso_data *arch_get_vdso_data(void *);
441:	int arch_setup_additional_pages(struct linux_binprm *, int);
132:	int vdso_join_timens(struct task_struct *, struct time_namespace *);
86:	static int __vdso_init(enum vdso_abi);
432:	static int vdso_init(void);
78:	static int vdso_mremap(const struct vm_special_mapping *, struct vm_area_struct *);
156:	static vm_fault_t vvar_fault(const struct vm_special_mapping *, struct vm_area_struct *, struct vm_fault *);

File arch/arm64/lib/csum.c:
132:	__sum16 csum_ipv6_magic(const struct in6_addr *, const struct in6_addr *, __u32, __u8, __wsum);
21:	unsigned int do_csum(const unsigned char *, int);

File arch/arm64/lib/delay.c:
53:	void __const_udelay(unsigned long);
26:	void __delay(unsigned long);
65:	void __ndelay(unsigned long);
59:	void __udelay(unsigned long);

File arch/arm64/lib/insn.c:
1282:	u32 aarch32_insn_extract_reg_num(u32, int);
1274:	bool aarch32_insn_is_wide(u32);
1295:	u32 aarch32_insn_mcr_extract_crm(u32);
1289:	u32 aarch32_insn_mcr_extract_opc2(u32);
1206:	s32 aarch64_get_branch_offset(u32);
1253:	s32 aarch64_insn_adrp_get_offset(u32);
1259:	u32 aarch64_insn_adrp_set_offset(u32, s32);
88:	u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type, u32);
146:	u32 aarch64_insn_decode_register(enum aarch64_insn_register_type, u32);
112:	u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type, u32, u64);
1269:	u32 aarch64_insn_extract_system_reg(u32);
724:	u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_adsb_type);
895:	u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_adsb_type);
1172:	u32 aarch64_insn_gen_adr(unsigned long, unsigned long, enum aarch64_insn_register, enum aarch64_insn_adr_type);
608:	u32 aarch64_insn_gen_atomic_ld_op(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_mem_atomic_op, enum aarch64_insn_mem_order_type);
785:	u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register, enum aarch64_insn_register, int, int, enum aarch64_insn_variant, enum aarch64_insn_bitfield_type);
261:	u32 aarch64_insn_gen_branch_imm(unsigned long, unsigned long, enum aarch64_insn_branch_type);
353:	u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register, enum aarch64_insn_branch_type);
690:	u32 aarch64_insn_gen_cas(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_mem_order_type);
292:	u32 aarch64_insn_gen_comp_branch_imm(unsigned long, unsigned long, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_branch_type);
333:	u32 aarch64_insn_gen_cond_branch_imm(unsigned long, unsigned long, enum aarch64_insn_condition);
953:	u32 aarch64_insn_gen_data1(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data1_type);
996:	u32 aarch64_insn_gen_data2(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data2_type);
1046:	u32 aarch64_insn_gen_data3(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data3_type);
1468:	u32 aarch64_insn_gen_dmb(enum aarch64_insn_mb_type);
1436:	u32 aarch64_insn_gen_extr(enum aarch64_insn_variant, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, u8);
451:	u32 aarch64_insn_gen_load_literal(unsigned long, unsigned long, enum aarch64_insn_register, bool);
537:	u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
407:	u32 aarch64_insn_gen_load_store_imm(enum aarch64_insn_register, enum aarch64_insn_register, unsigned int, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
473:	u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_ldst_type);
376:	u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
1405:	u32 aarch64_insn_gen_logical_immediate(enum aarch64_insn_logic_type, enum aarch64_insn_variant, enum aarch64_insn_register, enum aarch64_insn_register, u64);
1089:	u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_logic_type);
1163:	u32 aarch64_insn_gen_move_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant);
840:	u32 aarch64_insn_gen_movewide(enum aarch64_insn_register, int, int, enum aarch64_insn_variant, enum aarch64_insn_movewide_type);
1234:	u32 aarch64_set_branch_offset(u32, s32);

File arch/arm64/mm/context.c:
273:	unsigned long arm64_mm_context_get(struct mm_struct *);
319:	void arm64_mm_context_put(struct mm_struct *);
215:	void check_and_switch_context(struct mm_struct *);
349:	void cpu_do_switch_mm(phys_addr_t, struct mm_struct *);
339:	void post_ttbr_update_workaround(void);
64:	void verify_cpu_asid_bits(void);
401:	static int asids_init(void);
374:	static int asids_update_limit(void);
158:	static u64 new_context(struct mm_struct *);

File arch/arm64/mm/copypage.c:
17:	void copy_highpage(struct page *, struct page *);
34:	void copy_user_highpage(struct page *, struct page *, unsigned long, struct vm_area_struct *);

File arch/arm64/mm/dma-mapping.c:
35:	void arch_dma_prep_coherent(struct page *, size_t);
64:	void arch_setup_dma_ops(struct device *, u64, u64, const struct iommu_ops *, bool);
24:	void arch_sync_dma_for_cpu(phys_addr_t, size_t, enum dma_data_direction);
16:	void arch_sync_dma_for_device(phys_addr_t, size_t, enum dma_data_direction);

File arch/arm64/mm/extable.c:
59:	bool fixup_exception(struct pt_regs *);

File arch/arm64/mm/fault.c:
928:	struct page *alloc_zeroed_user_highpage_movable(struct vm_area_struct *, unsigned long);
906:	void do_debug_exception(unsigned long, unsigned long, struct pt_regs *);
826:	void do_mem_abort(unsigned long, unsigned long, struct pt_regs *);
846:	void do_sp_pc_abort(unsigned long, unsigned long, struct pt_regs *);
872:	void hook_debug_fault_code(int, int (*)(unsigned long, unsigned long, struct pt_regs *), int, int, const char *);
198:	int ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
944:	void tag_clear_highpage(struct page *);
362:	static void __do_kernel_fault(unsigned long, unsigned long, struct pt_regs *);
701:	static int do_alignment_fault(unsigned long, unsigned long, struct pt_regs *);
711:	static int do_bad(unsigned long, unsigned long, struct pt_regs *);
464:	static void do_bad_area(unsigned long, unsigned long, struct pt_regs *);
529:	static int do_page_fault(unsigned long, unsigned long, struct pt_regs *);
716:	static int do_sea(unsigned long, unsigned long, struct pt_regs *);
746:	static int do_tag_check_fault(unsigned long, unsigned long, struct pt_regs *);
688:	static int do_translation_fault(unsigned long, unsigned long, struct pt_regs *);
89:	static void mem_abort_decode(unsigned long);
407:	static void set_thread_esr(unsigned long, unsigned long);
122:	static void show_pte(unsigned long);

File arch/arm64/mm/flush.c:
51:	void __sync_icache_dcache(pte_t);
43:	void copy_to_user_page(struct vm_area_struct *, struct page *, unsigned long, void *, const void *, unsigned long);
76:	void flush_dcache_page(struct page *);
17:	void sync_icache_aliases(unsigned long, unsigned long);

File arch/arm64/mm/hugetlbpage.c:
76:	bool arch_hugetlb_migration_supported(struct hstate *);
558:	bool arch_hugetlb_valid_size(unsigned long);
396:	pte_t arch_make_huge_pte(pte_t, unsigned int, vm_flags_t);
39:	void arm64_hugetlb_cma_reserve(void);
287:	pte_t *huge_pte_alloc(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long);
412:	void huge_pte_clear(struct mm_struct *, unsigned long, pte_t *, unsigned long);
332:	pte_t *huge_pte_offset(struct mm_struct *, unsigned long, unsigned long);
531:	pte_t huge_ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
151:	pte_t huge_ptep_get(pte_t *);
424:	pte_t huge_ptep_get_and_clear(struct mm_struct *, unsigned long, pte_t *);
578:	void huge_ptep_modify_prot_commit(struct vm_area_struct *, unsigned long, pte_t *, pte_t, pte_t);
563:	pte_t huge_ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
468:	int huge_ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
504:	void huge_ptep_set_wrprotect(struct mm_struct *, unsigned long, pte_t *);
374:	unsigned long hugetlb_mask_last_page(struct hstate *);
89:	int pmd_huge(pmd_t);
94:	int pud_huge(pud_t);
251:	void set_huge_pte_at(struct mm_struct *, unsigned long, pte_t *, pte_t);
545:	static int hugetlbpage_init(void);

File arch/arm64/mm/init.c:
285:	void arm64_memblock_init(void);
417:	void bootmem_init(void);
516:	void dump_mem_limit(void);
503:	void free_initmem(void);
471:	void mem_init(void);
256:	int pfn_is_map_memory(unsigned long);
273:	static int early_mem(char *);
219:	static phys_addr_t max_zone_phys(unsigned int);
232:	static void zone_sizes_init(void);

File arch/arm64/mm/ioremap.c:
29:	bool arch_memremap_can_ram_remap(resource_size_t, size_t, unsigned long);
24:	void early_ioremap_init(void);
6:	bool ioremap_allowed(phys_addr_t, size_t, unsigned long);

File arch/arm64/mm/mmap.c:
60:	int valid_mmap_phys_addr_range(unsigned long, size_t);
41:	int valid_phys_addr_range(phys_addr_t, size_t);
80:	pgprot_t vm_get_page_prot(unsigned long);
65:	static int adjust_protection_map(void);

File arch/arm64/mm/mmu.c:
1264:	void __set_fixmap(enum fixed_addresses, phys_addr_t, pgprot_t);
461:	void create_pgd_mapping(struct mm_struct *, phys_addr_t, unsigned long, phys_addr_t, pgprot_t, bool);
1207:	void early_fixmap_init(void);
1282:	void *fixmap_remap_fdt(phys_addr_t, int *, pgprot_t);
499:	void mark_linear_text_alias_ro(void);
609:	void mark_rodata_ro(void);
794:	void paging_init(void);
97:	pgprot_t phys_mem_access_prot(struct file *, unsigned long, unsigned long, pgprot_t);
1371:	int pmd_clear_huge(pmd_t *);
1379:	int pmd_free_pte_page(pmd_t *, unsigned long);
1349:	int pmd_set_huge(pmd_t *, phys_addr_t, pgprot_t);
1649:	void ptep_modify_prot_commit(struct vm_area_struct *, unsigned long, pte_t *, pte_t, pte_t);
1634:	pte_t ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
1363:	int pud_clear_huge(pud_t *);
1398:	int pud_free_pmd_page(pud_t *, unsigned long);
1335:	int pud_set_huge(pud_t *, phys_addr_t, pgprot_t);
81:	void set_swapper_pgd(pgd_t *, pgd_t);
1146:	int vmemmap_check_pmd(pmd_t *, int, unsigned long, unsigned long);
1153:	int vmemmap_populate(unsigned long, unsigned long, int, struct vmem_altmap *);
1140:	void vmemmap_set_pmd(pmd_t *, void *, int, unsigned long, unsigned long);
367:	static void __create_pgd_mapping_locked(pgd_t *, phys_addr_t, unsigned long, phys_addr_t, pgprot_t, phys_addr_t (*)(int), int);
492:	static void __map_memblock(pgd_t *, phys_addr_t, phys_addr_t, pgprot_t, int);
414:	static phys_addr_t __pgd_pgtable_alloc(int);
764:	static void create_idmap(void);
449:	static void create_mapping_noalloc(phys_addr_t, unsigned long, phys_addr_t, pgprot_t);
108:	static phys_addr_t early_pgtable_alloc(int);
511:	static int enable_crash_mem_map(char *);
650:	static int map_entry_trampoline(void);
699:	static void map_kernel(pgd_t *);
624:	static void map_kernel_segment(pgd_t *, void *, void *, pgprot_t, struct vm_struct *, int, unsigned long);
524:	static void map_mem(pgd_t *);
424:	static phys_addr_t pgd_pgtable_alloc(int);
476:	static void update_mapping_prot(phys_addr_t, unsigned long, phys_addr_t, pgprot_t);

File arch/arm64/mm/mteswap.c:
12:	void *mte_allocate_tag_storage(void);
18:	void mte_free_tag_storage(char *);
62:	void mte_invalidate_tags(int, unsigned long);
70:	void mte_invalidate_tags_area(int);
49:	void mte_restore_tags(swp_entry_t, struct page *);
23:	int mte_save_tags(struct page *);

File arch/arm64/mm/pageattr.c:
22:	bool can_set_direct_map(void);
211:	bool kernel_page_present(struct page *);
178:	int set_direct_map_default_noflush(struct page *);
163:	int set_direct_map_invalid_noflush(struct page *);
137:	int set_memory_nx(unsigned long, int);
123:	int set_memory_ro(unsigned long, int);
130:	int set_memory_rw(unsigned long, int);
151:	int set_memory_valid(unsigned long, int, int);
144:	int set_memory_x(unsigned long, int);
64:	static int change_memory_common(unsigned long, int, pgprot_t, pgprot_t);
33:	static int change_page_range(pte_t *, unsigned long, void *);

File arch/arm64/mm/pgd.c:
20:	pgd_t *pgd_alloc(struct mm_struct *);
30:	void pgd_free(struct mm_struct *, pgd_t *);
38:	void pgtable_cache_init(void);

File block/badblocks.c:
431:	void ack_all_badblocks(struct badblocks *);
53:	int badblocks_check(struct badblocks *, sector_t, int, sector_t *, int *);
330:	int badblocks_clear(struct badblocks *, sector_t, int);
591:	void badblocks_exit(struct badblocks *);
573:	int badblocks_init(struct badblocks *, int);
162:	int badblocks_set(struct badblocks *, sector_t, int, int);
465:	ssize_t badblocks_show(struct badblocks *, char *, int);
515:	ssize_t badblocks_store(struct badblocks *, const char *, size_t, int);
579:	int devm_init_badblocks(struct device *, struct badblocks *);

File block/bdev.c:
43:	struct block_device *I_BDEV(struct inode *);
1001:	int __invalidate_device(struct block_device *, bool);
650:	void bd_abort_claiming(struct block_device *, void *);
573:	int bd_prepare_to_claim(struct block_device *, void *);
508:	void bdev_add(struct block_device *, dev_t);
480:	struct block_device *bdev_alloc(struct gendisk *, u8);
462:	void bdev_cache_init(void);
323:	int bdev_read_page(struct block_device *, sector_t, struct page *);
1081:	void bdev_statx_dioalign(struct inode *, struct kstat *);
360:	int bdev_write_page(struct block_device *, sector_t, struct page *, struct writeback_control *);
786:	struct block_device *blkdev_get_by_dev(dev_t, fmode_t, void *);
876:	struct block_device *blkdev_get_by_path(const char *, fmode_t, void *);
736:	struct block_device *blkdev_get_no_open(dev_t);
897:	void blkdev_put(struct block_device *, fmode_t);
760:	void blkdev_put_no_open(struct block_device *);
238:	int freeze_bdev(struct block_device *);
214:	int fsync_bdev(struct block_device *);
80:	void invalidate_bdev(struct block_device *);
972:	int lookup_bdev(const char *, dev_t *);
516:	long nr_blockdev_pages(void);
172:	int sb_min_blocksize(struct super_block *, int);
159:	int sb_set_blocksize(struct super_block *, int);
138:	int set_blocksize(struct block_device *, int);
1022:	void sync_bdevs(bool);
194:	int sync_blockdev(struct block_device *);
182:	int sync_blockdev_nowait(struct block_device *);
202:	int sync_blockdev_range(struct block_device *, loff_t, loff_t);
276:	int thaw_bdev(struct block_device *);
96:	int truncate_bdev_range(struct block_device *, fmode_t, loff_t, loff_t);
623:	static void bd_finish_claiming(struct block_device *, void *);
443:	static int bd_init_fs_context(struct fs_context *);
543:	static bool bd_may_claim(struct block_device *, struct block_device *, void *);
392:	static struct inode *bdev_alloc_inode(struct super_block *);
428:	static void bdev_evict_inode(struct inode *);
402:	static void bdev_free_inode(struct inode *);
658:	static void blkdev_flush_mapping(struct block_device *);
666:	static int blkdev_get_whole(struct block_device *, fmode_t);
421:	static void init_once(void *);

File block/bio-integrity.c:
346:	bool __bio_integrity_endio(struct bio *);
123:	int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);
371:	void bio_integrity_advance(struct bio *, unsigned int);
48:	struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);
404:	int bio_integrity_clone(struct bio *, struct bio *, gfp_t);
101:	void bio_integrity_free(struct bio *);
449:	void bio_integrity_init(void);
199:	bool bio_integrity_prep(struct bio *);
387:	void bio_integrity_trim(struct bio *);
425:	int bioset_integrity_create(struct bio_set *, int);
443:	void bioset_integrity_free(struct bio_set *);
20:	void blk_flush_integrity(void);
156:	static blk_status_t bio_integrity_process(struct bio *, struct bvec_iter *, integrity_processing_fn *);
317:	static void bio_integrity_verify_fn(struct work_struct *);

File block/bio.c:
1108:	void __bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
1394:	void __bio_advance(struct bio *, unsigned int);
1171:	void __bio_release_pages(struct bio *, bool);
1163:	bool bio_add_folio(struct bio *, struct folio *, size_t, size_t);
1001:	int bio_add_hw_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int, unsigned int, bool *);
1135:	int bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
1056:	int bio_add_pc_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int);
1081:	int bio_add_zone_append_page(struct bio *, struct page *, unsigned int, unsigned int);
493:	struct bio *bio_alloc_bioset(struct block_device *, unsigned short, blk_opf_t, gfp_t, struct bio_set *);
845:	struct bio *bio_alloc_clone(struct block_device *, struct bio *, gfp_t, struct bio_set *);
339:	void bio_chain(struct bio *, struct bio *);
1529:	void bio_check_pages_dirty(struct bio *);
1433:	void bio_copy_data(struct bio *, struct bio *);
1404:	void bio_copy_data_iter(struct bio *, struct bvec_iter *, struct bio *, struct bvec_iter *);
1583:	void bio_endio(struct bio *);
1442:	void bio_free_pages(struct bio *);
247:	void bio_init(struct bio *, struct block_device *, struct bio_vec *, unsigned short, blk_opf_t);
876:	int bio_init_clone(struct block_device *, struct bio *, struct bio *, gfp_t);
1184:	void bio_iov_bvec_set(struct bio *, struct iov_iter *);
1336:	int bio_iov_iter_get_pages(struct bio *, struct iov_iter *);
600:	struct bio *bio_kmalloc(unsigned short, gfp_t);
798:	void bio_put(struct bio *);
301:	void bio_reset(struct bio *, struct block_device *, blk_opf_t);
1481:	void bio_set_pages_dirty(struct bio *);
1633:	struct bio *bio_split(struct bio *, int, gfp_t, struct bio_set *);
1672:	void bio_trim(struct bio *, sector_t, sector_t);
215:	void bio_uninit(struct bio *);
1707:	void bioset_exit(struct bio_set *);
1745:	int bioset_init(struct bio_set *, unsigned int, unsigned int, int);
1694:	int biovec_init_pool(mempool_t *, int);
349:	struct bio *blk_next_bio(struct bio *, struct block_device *, unsigned int, blk_opf_t, gfp_t);
184:	struct bio_vec *bvec_alloc(mempool_t *, unsigned short *, gfp_t);
164:	void bvec_free(mempool_t *, struct bio_vec *, unsigned short);
682:	void guard_bio_eod(struct bio *);
1370:	int submit_bio_wait(struct bio *);
610:	void zero_fill_bio(struct bio *);
720:	static void bio_alloc_cache_prune(struct bio_alloc_cache *, unsigned int);
363:	static void bio_alloc_rescue(struct work_struct *);
323:	static void bio_chain_endio(struct bio *);
730:	static int bio_cpu_dead(unsigned int, struct hlist_node *);
1512:	static void bio_dirty_fn(struct work_struct *);
230:	static void bio_free(struct bio *);
630:	static void bio_truncate(struct bio *, unsigned int);
50:	static struct biovec_slab *biovec_slab(unsigned short);
1791:	static int init_bio(void);
380:	static void punt_bios_to_rescuer(struct bio_set *);
1354:	static void submit_bio_wait_endio(struct bio *);

File block/blk-cgroup.c:
1657:	bool __blkcg_punt_bio_submit(struct bio *);
616:	u64 __blkg_prfill_u64(struct seq_file *, struct blkg_policy_data *, u64);
1959:	void bio_associate_blkg(struct bio *);
1935:	void bio_associate_blkg_from_css(struct bio *, struct cgroup_subsys_state *);
215:	struct cgroup_subsys_state *bio_blkcg_css(struct bio *);
1981:	void bio_clone_blkg_association(struct bio *, struct bio *);
1997:	void blk_cgroup_bio_start(struct bio *);
2040:	bool blk_cgroup_congested(void);
1395:	int blkcg_activate_policy(struct request_queue *, const struct blkcg_policy *);
1885:	void blkcg_add_delay(struct blkcg_gq *, u64, u64);
639:	struct block_device *blkcg_conf_open_bdev(char **);
1502:	void blkcg_deactivate_policy(struct request_queue *, const struct blkcg_policy *);
1323:	void blkcg_exit_disk(struct gendisk *);
1048:	struct list_head *blkcg_get_cgwb_list(struct cgroup_subsys_state *);
1268:	int blkcg_init_disk(struct gendisk *);
1805:	void blkcg_maybe_throttle_current(void);
1124:	void blkcg_pin_online(struct cgroup_subsys_state *);
1556:	int blkcg_policy_register(struct blkcg_policy *);
1630:	void blkcg_policy_unregister(struct blkcg_policy *);
585:	void blkcg_print_blkgs(struct seq_file *, struct blkcg *, u64 (*)(struct seq_file *, struct blkg_policy_data *, int), const struct blkcg_policy *, int, bool);
1855:	void blkcg_schedule_throttle(struct gendisk *, bool);
1138:	void blkcg_unpin_online(struct cgroup_subsys_state *);
807:	void blkg_conf_finish(struct blkg_conf_ctx *);
678:	int blkg_conf_prep(struct blkcg *, const struct blkcg_policy *, char *, struct blkg_conf_ctx *);
560:	const char *blkg_dev_name(struct blkcg_gq *);
153:	static void __blkg_release(struct callback_head *);
1330:	static void blkcg_bind(struct cgroup_subsys_state *);
1187:	static struct cgroup_subsys_state *blkcg_css_alloc(struct cgroup_subsys_state *);
1167:	static void blkcg_css_free(struct cgroup_subsys_state *);
1158:	static void blkcg_css_offline(struct cgroup_subsys_state *);
1254:	static int blkcg_css_online(struct cgroup_subsys_state *);
1350:	static void blkcg_exit(struct task_struct *);
2056:	static int blkcg_init(void);
1011:	static int blkcg_print_stat(struct seq_file *, void *);
524:	static int blkcg_reset_stats(struct cgroup_subsys_state *, struct cftype *, u64);
861:	static void blkcg_rstat_flush(struct cgroup_subsys_state *, int);
242:	static struct blkcg_gq *blkg_alloc(struct blkcg *, struct gendisk *, gfp_t);
181:	static void blkg_async_bio_workfn(struct work_struct *);
304:	static struct blkcg_gq *blkg_create(struct blkcg *, struct gendisk *, struct blkcg_gq *);
453:	static void blkg_destroy(struct blkcg_gq *);
117:	static void blkg_free_workfn(struct work_struct *);
174:	static void blkg_release(struct percpu_ref *);

File block/blk-core.c:
340:	int __bio_queue_enter(struct request_queue *, struct bio *);
1132:	void __blk_flush_plug(struct blk_plug *, bool);
972:	void bdev_end_io_acct(struct block_device *, enum req_op, unsigned long);
942:	unsigned long bdev_start_io_acct(struct block_device *, unsigned int, enum req_op, unsigned long);
987:	void bio_end_io_acct_remapped(struct bio *, unsigned long, struct block_device *);
854:	int bio_poll(struct bio *, struct io_comp_batch *, unsigned int);
965:	unsigned long bio_start_io_acct(struct bio *);
398:	struct request_queue *blk_alloc_queue(int);
1107:	struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn, void *, int);
244:	void blk_clear_pm_only(struct request_queue *);
1179:	int blk_dev_init(void);
1158:	void blk_finish_plug(struct blk_plug *);
465:	bool blk_get_queue(struct request_queue *);
1167:	void blk_io_schedule(void);
1013:	int blk_lld_busy(struct request_queue *);
137:	const char *blk_op_str(enum req_op);
287:	void blk_put_queue(struct request_queue *);
313:	int blk_queue_enter(struct request_queue *, blk_mq_req_flags_t);
374:	void blk_queue_exit(struct request_queue *);
90:	void blk_queue_flag_clear(unsigned int, struct request_queue *);
79:	void blk_queue_flag_set(unsigned int, struct request_queue *);
104:	bool blk_queue_flag_test_and_set(unsigned int, struct request_queue *);
294:	void blk_queue_start_drain(struct request_queue *);
238:	void blk_set_pm_only(struct request_queue *);
1084:	void blk_start_plug(struct blk_plug *);
1035:	void blk_start_plug_nr_ios(struct blk_plug *, unsigned short);
190:	int blk_status_to_errno(blk_status_t);
200:	const char *blk_status_to_str(blk_status_t);
227:	void blk_sync_queue(struct request_queue *);
177:	blk_status_t errno_to_blk_status(int);
891:	int iocb_bio_iopoll(struct kiocb *, struct io_comp_batch *, unsigned int);
1028:	int kblockd_mod_delayed_work_on(int, struct delayed_work *, unsigned long);
1022:	int kblockd_schedule_work(struct work_struct *);
826:	void submit_bio(struct bio *);
710:	void submit_bio_noacct(struct bio *);
685:	void submit_bio_noacct_nocheck(struct bio *);
927:	void update_io_ticks(struct block_device *, unsigned long, bool);
255:	static void blk_free_queue_rcu(struct callback_head *);
379:	static void blk_queue_usage_counter_release(struct percpu_ref *);
387:	static void blk_rq_timed_out_timer(struct timer_list *);
394:	static void blk_timeout_work(struct work_struct *);

File block/blk-flush.c:
471:	struct blk_flush_queue *blk_alloc_flush_queue(int, int, gfp_t);
500:	void blk_free_flush_queue(struct blk_flush_queue *);
393:	void blk_insert_flush(struct request *);
528:	void blk_mq_hctx_set_fq_lock_class(struct blk_mq_hw_ctx *, struct lock_class_key *);
462:	int blkdev_issue_flush(struct block_device *);
275:	bool is_flush_rq(struct request *);
170:	static void blk_flush_complete_seq(struct request *, struct blk_flush_queue *, unsigned int, blk_status_t);
220:	static enum rq_end_io_ret flush_end_io(struct request *, blk_status_t);
358:	static enum rq_end_io_ret mq_flush_data_end_io(struct request *, blk_status_t);

File block/blk-ia-ranges.c:
264:	struct blk_independent_access_ranges *disk_alloc_independent_access_ranges(struct gendisk *, int);
108:	int disk_register_independent_access_ranges(struct gendisk *);
287:	void disk_set_independent_access_ranges(struct gendisk *, struct blk_independent_access_ranges *);
152:	void disk_unregister_independent_access_ranges(struct gendisk *);
22:	static ssize_t blk_ia_range_nr_sectors_show(struct blk_independent_access_range *, char *);
15:	static ssize_t blk_ia_range_sector_show(struct blk_independent_access_range *, char *);
74:	static void blk_ia_range_sysfs_nop_release(struct kobject *);
50:	static ssize_t blk_ia_range_sysfs_show(struct kobject *, struct attribute *, char *);
89:	static void blk_ia_ranges_sysfs_release(struct kobject *);

File block/blk-integrity.c:
441:	int blk_integrity_add(struct gendisk *);
121:	int blk_integrity_compare(struct gendisk *, struct gendisk *);
452:	void blk_integrity_del(struct gendisk *);
187:	bool blk_integrity_merge_bio(struct request_queue *, struct request *, struct bio *);
164:	bool blk_integrity_merge_rq(struct request_queue *, struct request *, struct request *);
397:	void blk_integrity_register(struct gendisk *, struct blk_integrity *);
427:	void blk_integrity_unregister(struct gendisk *);
27:	int blk_rq_count_integrity_sg(struct request_queue *, struct bio *);
68:	int blk_rq_map_integrity_sg(struct request_queue *, struct bio *, struct scatterlist *);
373:	static void blk_integrity_nop_complete(struct request *, unsigned int);
364:	static blk_status_t blk_integrity_nop_fn(struct blk_integrity_iter *);
369:	static void blk_integrity_nop_prepare(struct request *);
221:	static ssize_t integrity_attr_show(struct kobject *, struct attribute *, char *);
232:	static ssize_t integrity_attr_store(struct kobject *, struct attribute *, const char *, size_t);
305:	static ssize_t integrity_device_show(struct blk_integrity *, char *);
248:	static ssize_t integrity_format_show(struct blk_integrity *, char *);
300:	static ssize_t integrity_generate_show(struct blk_integrity *, char *);
286:	static ssize_t integrity_generate_store(struct blk_integrity *, const char *, size_t);
261:	static ssize_t integrity_interval_show(struct blk_integrity *, char *);
256:	static ssize_t integrity_tag_size_show(struct blk_integrity *, char *);
281:	static ssize_t integrity_verify_show(struct blk_integrity *, char *);
267:	static ssize_t integrity_verify_store(struct blk_integrity *, const char *, size_t);

File block/blk-ioc.c:
300:	int __copy_io(unsigned long, struct task_struct *);
218:	void exit_io_context(struct task_struct *);
209:	void put_io_context(struct io_context *);
255:	int set_task_ioprio(struct task_struct *, int);
451:	static int blk_ioc_init(void);

File block/blk-lib.c:
38:	int __blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t, struct bio **);
218:	int __blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, struct bio **, unsigned int);
97:	int blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t);
303:	int blkdev_issue_secure_erase(struct block_device *, sector_t, sector_t, gfp_t);
252:	int blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, unsigned int);
168:	static int __blkdev_issue_zero_pages(struct block_device *, sector_t, sector_t, gfp_t, struct bio **);

File block/blk-map.c:
531:	int blk_rq_append_bio(struct request *, struct bio *);
777:	int blk_rq_map_kern(struct request_queue *, struct request *, void *, unsigned int, gfp_t);
681:	int blk_rq_map_user(struct request_queue *, struct request *, struct rq_map_data *, void *, unsigned long, gfp_t);
696:	int blk_rq_map_user_io(struct request *, struct rq_map_data *, void *, unsigned long, gfp_t, bool, int, bool, int);
626:	int blk_rq_map_user_iov(struct request_queue *, struct request *, struct rq_map_data *, const struct iov_iter *, gfp_t);
741:	int blk_rq_unmap_user(struct bio *);
436:	static void bio_copy_kern_endio(struct bio *);
443:	static void bio_copy_kern_endio_read(struct bio *);
366:	static void bio_map_kern_endio(struct bio *);

File block/blk-merge.c:
353:	struct bio *__bio_split_to_limits(struct bio *, const struct queue_limits *, unsigned int *);
566:	int __blk_rq_map_sg(struct request_queue *, struct request *, struct scatterlist *, struct scatterlist **);
400:	struct bio *bio_split_to_limits(struct bio *);
1076:	bool blk_attempt_plug_merge(struct request_queue *, struct bio *, unsigned int);
891:	bool blk_attempt_req_merge(struct request_queue *, struct request *, struct request *);
1108:	bool blk_bio_list_merge(struct request_queue *, struct list_head *, struct bio *, unsigned int);
1133:	bool blk_mq_sched_try_merge(struct request_queue *, struct bio *, unsigned int, struct request **);
411:	unsigned int blk_recalc_rq_segments(struct request *);
897:	bool blk_rq_merge_ok(struct request *, struct bio *);
739:	void blk_rq_set_mixed_merge(struct request *);
927:	enum elv_merge blk_try_merge(struct request *, struct bio *);
642:	int ll_back_merge_fn(struct request *, struct bio *, unsigned int);
784:	static struct request *attempt_merge(struct request_queue *, struct request *, struct request *);
954:	static enum bio_merge_status bio_attempt_back_merge(struct request *, struct bio *, unsigned int);
1004:	static enum bio_merge_status bio_attempt_discard_merge(struct request_queue *, struct request *, struct bio *);
978:	static enum bio_merge_status bio_attempt_front_merge(struct request *, struct bio *, unsigned int);
52:	static bool bio_will_gap(struct request_queue *, struct request *, struct bio *, struct bio *);
938:	static void blk_account_io_merge_bio(struct request *);
760:	static void blk_account_io_merge_request(struct request *);
1029:	static enum bio_merge_status blk_attempt_bio_merge(struct request_queue *, struct request *, struct bio *, unsigned int, bool);
697:	static int ll_merge_requests_fn(struct request_queue *, struct request *, struct request *);
679:	static bool req_attempt_discard_merge(struct request_queue *, struct request *, struct request *);

File block/blk-mq-cpumap.c:
84:	int blk_mq_hw_queue_to_node(struct blk_mq_queue_map *, unsigned int);
35:	void blk_mq_map_queues(struct blk_mq_queue_map *);

File block/blk-mq-sched.c:
34:	void __blk_mq_sched_restart(struct blk_mq_hw_ctx *);
642:	void blk_mq_exit_sched(struct request_queue *, struct elevator_queue *);
559:	int blk_mq_init_sched(struct request_queue *, struct elevator_type *);
345:	bool blk_mq_sched_bio_merge(struct request_queue *, struct bio *, unsigned int);
325:	void blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
625:	void blk_mq_sched_free_rqs(struct request_queue *);
408:	void blk_mq_sched_insert_request(struct request *, bool, bool, bool);
461:	void blk_mq_sched_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *, bool);
25:	void blk_mq_sched_mark_restart_hctx(struct blk_mq_hw_ctx *);
381:	bool blk_mq_sched_try_insert_merge(struct request_queue *, struct request *, struct list_head *);
273:	static int __blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
218:	static int blk_mq_do_dispatch_ctx(struct blk_mq_hw_ctx *);
181:	static int blk_mq_do_dispatch_sched(struct blk_mq_hw_ctx *);
50:	static int sched_rq_cmp(void *, const struct list_head *, const struct list_head *);

File block/blk-mq-sysfs.c:
213:	void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *);
218:	void blk_mq_sysfs_deinit(struct request_queue *);
230:	void blk_mq_sysfs_init(struct request_queue *);
245:	int blk_mq_sysfs_register(struct gendisk *);
315:	int blk_mq_sysfs_register_hctxs(struct request_queue *);
282:	void blk_mq_sysfs_unregister(struct gendisk *);
299:	void blk_mq_sysfs_unregister_hctxs(struct request_queue *);
26:	static void blk_mq_ctx_sysfs_release(struct kobject *);
107:	static ssize_t blk_mq_hw_sysfs_cpus_show(struct blk_mq_hw_ctx *, char *);
101:	static ssize_t blk_mq_hw_sysfs_nr_reserved_tags_show(struct blk_mq_hw_ctx *, char *);
95:	static ssize_t blk_mq_hw_sysfs_nr_tags_show(struct blk_mq_hw_ctx *, char *);
34:	static void blk_mq_hw_sysfs_release(struct kobject *);
52:	static ssize_t blk_mq_hw_sysfs_show(struct kobject *, struct attribute *, char *);
73:	static ssize_t blk_mq_hw_sysfs_store(struct kobject *, struct attribute *, const char *, size_t);
184:	static int blk_mq_register_hctx(struct blk_mq_hw_ctx *);
18:	static void blk_mq_sysfs_release(struct kobject *);

File block/blk-mq-tag.c:
40:	void __blk_mq_tag_busy(struct blk_mq_hw_ctx *);
75:	void __blk_mq_tag_idle(struct blk_mq_hw_ctx *);
410:	void blk_mq_all_tag_iter(struct blk_mq_tags *, busy_tag_iter_fn *, void *);
587:	void blk_mq_free_tags(struct blk_mq_tags *);
126:	unsigned int blk_mq_get_tag(struct blk_mq_alloc_data *);
111:	unsigned long blk_mq_get_tags(struct blk_mq_alloc_data *, int, unsigned int *);
539:	int blk_mq_init_bitmaps(struct sbitmap_queue *, struct sbitmap_queue *, unsigned int, unsigned int, int, int);
559:	struct blk_mq_tags *blk_mq_init_tags(unsigned int, unsigned int, int, int);
218:	void blk_mq_put_tag(struct blk_mq_tags *, struct blk_mq_ctx *, unsigned int);
231:	void blk_mq_put_tags(struct blk_mq_tags *, int *, int);
489:	void blk_mq_queue_tag_busy_iter(struct request_queue *, busy_tag_iter_fn *, void *);
646:	void blk_mq_tag_resize_shared_tags(struct blk_mq_tag_set *, unsigned int);
594:	int blk_mq_tag_update_depth(struct blk_mq_hw_ctx *, struct blk_mq_tags **, unsigned int, bool);
653:	void blk_mq_tag_update_sched_shared_tags(struct request_queue *);
64:	void blk_mq_tag_wakeup_all(struct blk_mq_tags *, bool);
429:	void blk_mq_tagset_busy_iter(struct blk_mq_tag_set *, busy_tag_iter_fn *, void *);
461:	void blk_mq_tagset_wait_completed_request(struct blk_mq_tag_set *);
671:	u32 blk_mq_unique_tag(struct request *);
98:	static int __blk_mq_get_tag(struct blk_mq_alloc_data *, struct sbitmap_queue *);
445:	static bool blk_mq_tagset_count_completed_rqs(struct request *, void *);
305:	static void bt_for_each(struct blk_mq_hw_ctx *, struct request_queue *, struct sbitmap_queue *, busy_tag_iter_fn *, void *, bool);
373:	static void bt_tags_for_each(struct blk_mq_tags *, struct sbitmap_queue *, busy_tag_iter_fn *, void *, unsigned int);

File block/blk-mq-virtio.c:
24:	void blk_mq_virtio_map_queues(struct blk_mq_queue_map *, struct virtio_device *, int);

File block/blk-mq.c:
4095:	struct gendisk *__blk_mq_alloc_disk(struct blk_mq_tag_set *, void *, struct lock_class_key *);
1036:	void __blk_mq_end_request(struct request *, blk_status_t);
1784:	bool __blk_mq_get_driver_tag(struct blk_mq_hw_ctx *, struct request *);
2493:	void __blk_mq_insert_request(struct blk_mq_hw_ctx *, struct request *, bool);
220:	void __blk_mq_unfreeze_queue(struct request_queue *, bool);
758:	void blk_dump_rq_flags(struct request *, char *);
1385:	blk_status_t blk_execute_rq(struct request *, bool);
1322:	void blk_execute_rq_nowait(struct request *, bool);
197:	void blk_freeze_queue(struct request_queue *);
164:	void blk_freeze_queue_start(struct request_queue *);
1484:	void blk_mq_add_to_requeue_list(struct request *, bool, bool);
4116:	struct gendisk *blk_mq_alloc_disk_for_queue(struct request_queue *, struct lock_class_key *);
3760:	struct blk_mq_tags *blk_mq_alloc_map_and_rqs(struct blk_mq_tag_set *, unsigned int, unsigned int);
603:	struct request *blk_mq_alloc_request(struct request_queue *, blk_opf_t, blk_mq_req_flags_t);
636:	struct request *blk_mq_alloc_request_hctx(struct request_queue *, blk_opf_t, blk_mq_req_flags_t, unsigned int);
4525:	int blk_mq_alloc_sq_tag_set(struct blk_mq_tag_set *, const struct blk_mq_ops *, unsigned int, unsigned int);
4424:	int blk_mq_alloc_tag_set(struct blk_mq_tag_set *);
4945:	void blk_mq_cancel_work_sync(struct request_queue *);
1233:	void blk_mq_complete_request(struct request *);
1200:	bool blk_mq_complete_request_remote(struct request *);
1515:	void blk_mq_delay_kick_requeue_list(struct request_queue *, unsigned long);
2266:	void blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, unsigned long);
2356:	void blk_mq_delay_run_hw_queues(struct request_queue *, unsigned long);
1745:	struct request *blk_mq_dequeue_from_ctx(struct blk_mq_hw_ctx *, struct blk_mq_ctx *);
4078:	void blk_mq_destroy_queue(struct request_queue *);
2007:	bool blk_mq_dispatch_rq_list(struct blk_mq_hw_ctx *, struct list_head *, unsigned int);
1051:	void blk_mq_end_request(struct request *, blk_status_t);
1077:	void blk_mq_end_request_batch(struct io_comp_batch *);
4281:	void blk_mq_exit_queue(struct request_queue *);
1709:	void blk_mq_flush_busy_ctxs(struct blk_mq_hw_ctx *, struct list_head *);
2761:	void blk_mq_flush_plug_list(struct blk_plug *, bool);
3795:	void blk_mq_free_map_and_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
750:	void blk_mq_free_plug_rqs(struct blk_plug *);
727:	void blk_mq_free_request(struct request *);
3266:	void blk_mq_free_rq_map(struct blk_mq_tags *);
3225:	void blk_mq_free_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
4540:	void blk_mq_free_tag_set(struct blk_mq_tag_set *);
210:	void blk_mq_freeze_queue(struct request_queue *);
178:	void blk_mq_freeze_queue_wait(struct request_queue *);
184:	int blk_mq_freeze_queue_wait_timeout(struct request_queue *, unsigned long);
144:	unsigned int blk_mq_in_flight(struct request_queue *, struct block_device *);
154:	void blk_mq_in_flight_rw(struct request_queue *, struct block_device *, unsigned int *);
4218:	int blk_mq_init_allocated_queue(struct blk_mq_tag_set *, struct request_queue *);
4062:	struct request_queue *blk_mq_init_queue(struct blk_mq_tag_set *);
2529:	void blk_mq_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *);
1509:	void blk_mq_kick_requeue_list(struct request_queue *);
4928:	int blk_mq_poll(struct request_queue *, blk_qc_t, struct io_comp_batch *, unsigned int);
1590:	void blk_mq_put_rq_ref(struct request *);
1540:	bool blk_mq_queue_inflight(struct request_queue *);
282:	void blk_mq_quiesce_queue(struct request_queue *);
244:	void blk_mq_quiesce_queue_nowait(struct request_queue *);
318:	void blk_mq_quiesce_tagset(struct blk_mq_tag_set *);
4021:	void blk_mq_release(struct request_queue *);
2513:	void blk_mq_request_bypass_insert(struct request *, bool, bool);
1436:	void blk_mq_requeue_request(struct request *, bool);
4939:	unsigned int blk_mq_rq_cpu(struct request *);
2281:	void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *, bool);
2328:	void blk_mq_run_hw_queues(struct request_queue *, bool);
2423:	void blk_mq_start_hw_queue(struct blk_mq_hw_ctx *);
2431:	void blk_mq_start_hw_queues(struct request_queue *);
1248:	void blk_mq_start_request(struct request *);
2441:	void blk_mq_start_stopped_hw_queue(struct blk_mq_hw_ctx *, bool);
2451:	void blk_mq_start_stopped_hw_queues(struct request_queue *, bool);
2396:	void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *);
2413:	void blk_mq_stop_hw_queues(struct request_queue *);
2948:	void blk_mq_submit_bio(struct bio *);
2804:	void blk_mq_try_issue_list_directly(struct blk_mq_hw_ctx *, struct list_head *);
234:	void blk_mq_unfreeze_queue(struct request_queue *);
298:	void blk_mq_unquiesce_queue(struct request_queue *);
332:	void blk_mq_unquiesce_tagset(struct blk_mq_tag_set *);
4762:	void blk_mq_update_nr_hw_queues(struct blk_mq_tag_set *, int);
4566:	int blk_mq_update_nr_requests(struct request_queue *, unsigned int);
264:	void blk_mq_wait_quiesce_done(struct blk_mq_tag_set *);
345:	void blk_mq_wake_waiters(struct request_queue *);
355:	void blk_rq_init(struct request_queue *, struct request *);
1355:	bool blk_rq_is_poll(struct request *);
3163:	void blk_steal_bios(struct bio_list *, struct request *);
891:	bool blk_update_request(struct request *, blk_status_t, unsigned int);
471:	static struct request *__blk_mq_alloc_requests(struct blk_mq_alloc_data *);
1145:	static void __blk_mq_complete_request_remote(void *);
2242:	static void __blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, bool, unsigned long);
1025:	static void __blk_mq_end_request_acct(struct request *, u64);
1421:	static void __blk_mq_requeue_request(struct request *);
2166:	static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *);
2612:	static blk_status_t __blk_mq_try_issue_directly(struct blk_mq_hw_ctx *, struct request *, bool, bool);
797:	static void blk_account_io_completion(struct request *, unsigned int);
1287:	static void blk_add_rq_to_plug(struct blk_plug *, struct request *);
1134:	static void blk_done_softirq(struct softirq_action *);
1346:	static enum rq_end_io_ret blk_end_sync_rq(struct request *, blk_status_t);
4130:	static struct blk_mq_hw_ctx *blk_mq_alloc_and_init_hctx(struct blk_mq_tag_set *, struct request_queue *, int, int);
4328:	static int blk_mq_alloc_set_map_and_rqs(struct blk_mq_tag_set *);
1600:	static bool blk_mq_check_expired(struct request *, void *);
132:	static bool blk_mq_check_inflight(struct request *, void *);
1798:	static int blk_mq_dispatch_wake(wait_queue_entry_t *, unsigned int, int, void *);
3588:	static void blk_mq_exit_hctx(struct request_queue *, struct blk_mq_tag_set *, struct blk_mq_hw_ctx *, unsigned int);
1061:	static void blk_mq_flush_tag_batch(struct blk_mq_hw_ctx *, int *, int);
1618:	static bool blk_mq_handle_expired(struct request *, void *);
3437:	static bool blk_mq_has_request(struct request *, void *);
3517:	static int blk_mq_hctx_notify_dead(unsigned int, struct hlist_node *);
3469:	static int blk_mq_hctx_notify_offline(unsigned int, struct hlist_node *);
3502:	static int blk_mq_hctx_notify_online(unsigned int, struct hlist_node *);
4956:	static int blk_mq_init(void);
3814:	static void blk_mq_map_swqueue(struct request_queue *);
2684:	static void blk_mq_plug_issue_direct(struct blk_plug *, bool);
52:	static int blk_mq_poll_stats_bkt(const struct request *);
4791:	static void blk_mq_poll_stats_fn(struct blk_stat_callback *);
4164:	static void blk_mq_realloc_hw_ctxs(struct blk_mq_tag_set *, struct request_queue *);
1447:	static void blk_mq_requeue_work(struct work_struct *);
372:	static struct request *blk_mq_rq_ctx_init(struct blk_mq_alloc_data *, struct blk_mq_tags *, unsigned int, u64);
1523:	static bool blk_mq_rq_inflight(struct request *, void *);
2461:	static void blk_mq_run_work_fn(struct work_struct *);
1627:	static void blk_mq_timeout_work(struct work_struct *);
2667:	static void blk_mq_try_issue_directly(struct blk_mq_hw_ctx *, struct request *);
4358:	static void blk_mq_update_queue_map(struct blk_mq_tag_set *);
3936:	static void blk_mq_update_tag_set_shared(struct blk_mq_tag_set *, bool);
808:	static void blk_print_req_error(struct request *, blk_status_t);
1139:	static int blk_softirq_cpu_dead(unsigned int);

File block/blk-rq-qos.c:
26:	void __rq_qos_cleanup(struct rq_qos *, struct bio *);
35:	void __rq_qos_done(struct rq_qos *, struct request *);
89:	void __rq_qos_done_bio(struct rq_qos *, struct bio *);
44:	void __rq_qos_issue(struct rq_qos *, struct request *);
80:	void __rq_qos_merge(struct rq_qos *, struct request *, struct bio *);
98:	void __rq_qos_queue_depth_changed(struct rq_qos *);
53:	void __rq_qos_requeue(struct rq_qos *, struct request *);
62:	void __rq_qos_throttle(struct rq_qos *, struct bio *);
71:	void __rq_qos_track(struct rq_qos *, struct request *, struct bio *);
110:	bool rq_depth_calc_max_depth(struct rq_depth *);
177:	bool rq_depth_scale_down(struct rq_depth *, bool);
158:	bool rq_depth_scale_up(struct rq_depth *);
289:	void rq_qos_exit(struct request_queue *);
243:	void rq_qos_wait(struct rq_wait *, void *, acquire_inflight_cb_t *, cleanup_cb_t *);
21:	bool rq_wait_inc_below(struct rq_wait *, unsigned int);
206:	static int rq_qos_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File block/blk-settings.c:
955:	int bdev_alignment_offset(struct block_device *);
968:	unsigned int bdev_discard_alignment(struct block_device *);
410:	void blk_limits_io_min(struct queue_limits *, unsigned int);
455:	void blk_limits_io_opt(struct queue_limits *, unsigned int);
377:	void blk_queue_alignment_offset(struct request_queue *, unsigned int);
97:	void blk_queue_bounce_limit(struct request_queue *, enum blk_bounce);
863:	bool blk_queue_can_use_dma_map_merging(struct request_queue *, struct device *);
161:	void blk_queue_chunk_sectors(struct request_queue *, unsigned int);
775:	void blk_queue_dma_alignment(struct request_queue *, int);
436:	void blk_queue_io_min(struct request_queue *, unsigned int);
474:	void blk_queue_io_opt(struct request_queue *, unsigned int);
303:	void blk_queue_logical_block_size(struct request_queue *, unsigned int);
172:	void blk_queue_max_discard_sectors(struct request_queue *, unsigned int);
262:	void blk_queue_max_discard_segments(struct request_queue *, unsigned short);
122:	void blk_queue_max_hw_sectors(struct request_queue *, unsigned int);
185:	void blk_queue_max_secure_erase_sectors(struct request_queue *, unsigned int);
278:	void blk_queue_max_segment_size(struct request_queue *, unsigned int);
241:	void blk_queue_max_segments(struct request_queue *, unsigned short);
198:	void blk_queue_max_write_zeroes_sectors(struct request_queue *, unsigned int);
210:	void blk_queue_max_zone_append_sectors(struct request_queue *, unsigned int);
332:	void blk_queue_physical_block_size(struct request_queue *, unsigned int);
849:	void blk_queue_required_elevator_features(struct request_queue *, unsigned int);
21:	void blk_queue_rq_timeout(struct request_queue *, unsigned int);
733:	void blk_queue_segment_boundary(struct request_queue *, unsigned long);
795:	void blk_queue_update_dma_alignment(struct request_queue *, int);
721:	void blk_queue_update_dma_pad(struct request_queue *, unsigned int);
750:	void blk_queue_virt_boundary(struct request_queue *, unsigned long);
825:	void blk_queue_write_cache(struct request_queue *, bool, bool);
353:	void blk_queue_zone_write_granularity(struct request_queue *, unsigned int);
34:	void blk_set_default_limits(struct queue_limits *);
810:	void blk_set_queue_depth(struct request_queue *, unsigned int);
71:	void blk_set_stacking_limits(struct queue_limits *);
547:	int blk_stack_limits(struct queue_limits *, struct queue_limits *, sector_t);
909:	void disk_set_zoned(struct gendisk *, enum blk_zoned_model);
697:	void disk_stack_limits(struct gendisk *, struct block_device *, sector_t);
385:	void disk_update_readahead(struct gendisk *);

File block/blk-stat.c:
209:	struct blk_queue_stats *blk_alloc_queue_stats(void);
224:	void blk_free_queue_stats(struct blk_queue_stats *);
43:	void blk_rq_stat_add(struct blk_rq_stat *, u64);
21:	void blk_rq_stat_init(struct blk_rq_stat *);
29:	void blk_rq_stat_sum(struct blk_rq_stat *, struct blk_rq_stat *);
51:	void blk_stat_add(struct request *, u64);
136:	void blk_stat_add_callback(struct request_queue *, struct blk_stat_callback *);
103:	struct blk_stat_callback *blk_stat_alloc_callback(void (*)(struct blk_stat_callback *), int (*)(const struct request *), unsigned int, void *);
187:	void blk_stat_disable_accounting(struct request_queue *);
198:	void blk_stat_enable_accounting(struct request_queue *);
181:	void blk_stat_free_callback(struct blk_stat_callback *);
157:	void blk_stat_remove_callback(struct request_queue *, struct blk_stat_callback *);
234:	bool blk_stats_alloc_enable(struct request_queue *);
171:	static void blk_stat_free_callback_rcu(struct callback_head *);
80:	static void blk_stat_timer_fn(struct timer_list *);

File block/blk-sysfs.c:
781:	int blk_register_queue(struct gendisk *);
866:	void blk_unregister_queue(struct gendisk *);
753:	static void blk_queue_release(struct kobject *);
710:	static ssize_t queue_attr_show(struct kobject *, struct attribute *, char *);
726:	static ssize_t queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
683:	static umode_t queue_attr_visible(struct kobject *, struct attribute *, int);
154:	static ssize_t queue_chunk_sectors_show(struct request_queue *, char *);
558:	static ssize_t queue_dax_show(struct request_queue *, char *);
169:	static ssize_t queue_discard_granularity_show(struct request_queue *, char *);
174:	static ssize_t queue_discard_max_hw_show(struct request_queue *, char *);
181:	static ssize_t queue_discard_max_show(struct request_queue *, char *);
187:	static ssize_t queue_discard_max_store(struct request_queue *, const char *, size_t);
210:	static ssize_t queue_discard_zeroes_data_show(struct request_queue *, char *);
277:	static ssize_t queue_dma_alignment_show(struct request_queue *, char *);
553:	static ssize_t queue_fua_show(struct request_queue *, char *);
159:	static ssize_t queue_io_min_show(struct request_queue *, char *);
164:	static ssize_t queue_io_opt_show(struct request_queue *, char *);
448:	static ssize_t queue_io_timeout_show(struct request_queue *, char *);
453:	static ssize_t queue_io_timeout_store(struct request_queue *, const char *, size_t);
310:	static ssize_t queue_iostats_show(struct request_queue *, char *);
310:	static ssize_t queue_iostats_store(struct request_queue *, const char *, size_t);
144:	static ssize_t queue_logical_block_size_show(struct request_queue *, char *);
336:	static ssize_t queue_max_active_zones_show(struct request_queue *, char *);
128:	static ssize_t queue_max_discard_segments_show(struct request_queue *, char *);
265:	static ssize_t queue_max_hw_sectors_show(struct request_queue *, char *);
134:	static ssize_t queue_max_integrity_segments_show(struct request_queue *, char *);
331:	static ssize_t queue_max_open_zones_show(struct request_queue *, char *);
116:	static ssize_t queue_max_sectors_show(struct request_queue *, char *);
240:	static ssize_t queue_max_sectors_store(struct request_queue *, const char *, size_t);
139:	static ssize_t queue_max_segment_size_show(struct request_queue *, char *);
123:	static ssize_t queue_max_segments_show(struct request_queue *, char *);
341:	static ssize_t queue_nomerges_show(struct request_queue *, char *);
347:	static ssize_t queue_nomerges_store(struct request_queue *, const char *, size_t);
308:	static ssize_t queue_nonrot_show(struct request_queue *, char *);
308:	static ssize_t queue_nonrot_store(struct request_queue *, const char *, size_t);
326:	static ssize_t queue_nr_zones_show(struct request_queue *, char *);
149:	static ssize_t queue_physical_block_size_show(struct request_queue *, char *);
399:	static ssize_t queue_poll_delay_show(struct request_queue *, char *);
411:	static ssize_t queue_poll_delay_store(struct request_queue *, const char *, size_t);
433:	static ssize_t queue_poll_show(struct request_queue *, char *);
438:	static ssize_t queue_poll_store(struct request_queue *, const char *, size_t);
91:	static ssize_t queue_ra_show(struct request_queue *, char *);
102:	static ssize_t queue_ra_store(struct request_queue *, const char *, size_t);
309:	static ssize_t queue_random_show(struct request_queue *, char *);
309:	static ssize_t queue_random_store(struct request_queue *, const char *, size_t);
63:	static ssize_t queue_requests_show(struct request_queue *, char *);
69:	static ssize_t queue_requests_store(struct request_queue *, const char *, size_t);
366:	static ssize_t queue_rq_affinity_show(struct request_queue *, char *);
375:	static ssize_t queue_rq_affinity_store(struct request_queue *, const char *, size_t);
311:	static ssize_t queue_stable_writes_show(struct request_queue *, char *);
311:	static ssize_t queue_stable_writes_store(struct request_queue *, const char *, size_t);
272:	static ssize_t queue_virt_boundary_mask_show(struct request_queue *, char *);
468:	static ssize_t queue_wb_lat_show(struct request_queue *, char *);
479:	static ssize_t queue_wb_lat_store(struct request_queue *, const char *, size_t);
523:	static ssize_t queue_wc_show(struct request_queue *, char *);
531:	static ssize_t queue_wc_store(struct request_queue *, const char *, size_t);
215:	static ssize_t queue_write_same_max_show(struct request_queue *, char *);
220:	static ssize_t queue_write_zeroes_max_show(struct request_queue *, char *);
232:	static ssize_t queue_zone_append_max_show(struct request_queue *, char *);
226:	static ssize_t queue_zone_write_granularity_show(struct request_queue *, char *);
314:	static ssize_t queue_zoned_show(struct request_queue *, char *);

File block/blk-timeout.c:
79:	void blk_abort_request(struct request *);
128:	void blk_add_timer(struct request *);
109:	unsigned long blk_rq_timeout(unsigned long);
93:	static int blk_timeout_init(void);

File block/blk.h:
41:	static bool blk_try_enter_queue(struct request_queue *, bool);

File block/bsg-lib.c:
189:	void bsg_job_done(struct bsg_job *, int, unsigned int);
175:	int bsg_job_get(struct bsg_job *);
169:	void bsg_job_put(struct bsg_job *);
320:	void bsg_remove_queue(struct request_queue *);
361:	struct request_queue *bsg_setup_queue(struct device *, const char *, bsg_job_fn *, bsg_timeout_fn *, int);
205:	static void bsg_complete(struct request *);
312:	static void bsg_exit_rq(struct blk_mq_tag_set *, struct request *, unsigned int);
301:	static int bsg_init_rq(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
272:	static blk_status_t bsg_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
335:	static enum blk_eh_timer_return bsg_timeout(struct request *);
28:	static int bsg_transport_sg_io_fn(struct request_queue *, struct sg_io_v4 *, fmode_t, unsigned int);

File block/bsg.c:
187:	struct bsg_device *bsg_register_queue(struct request_queue *, struct device *, const char *, bsg_sg_io_fn *);
176:	void bsg_unregister_queue(struct bsg_device *);
168:	static void bsg_device_release(struct device *);
238:	static char *bsg_devnode(const struct device *, umode_t *);
243:	static int bsg_init(void);
102:	static long bsg_ioctl(struct file *, unsigned int, unsigned long);
72:	static int bsg_open(struct inode *, struct file *);
79:	static int bsg_release(struct inode *, struct file *);

File block/disk-events.c:
275:	bool bdev_check_media_change(struct block_device *);
472:	void disk_add_events(struct gendisk *);
447:	int disk_alloc_events(struct gendisk *);
73:	void disk_block_events(struct gendisk *);
488:	void disk_del_events(struct gendisk *);
151:	void disk_flush_events(struct gendisk *, unsigned int);
303:	bool disk_force_media_change(struct gendisk *, unsigned int);
499:	void disk_release_events(struct gendisk *);
133:	void disk_unblock_events(struct gendisk *);
98:	static void __disk_unblock_events(struct gendisk *, bool);
184:	static void disk_check_events(struct disk_events *, unsigned int *);
366:	static ssize_t disk_events_async_show(struct device *, struct device_attribute *, char *);
372:	static ssize_t disk_events_poll_msecs_show(struct device *, struct device_attribute *, char *);
383:	static ssize_t disk_events_poll_msecs_store(struct device *, struct device_attribute *, const char *, size_t);
416:	static int disk_events_set_dfl_poll_msecs(const char *, const struct kernel_param *);
356:	static ssize_t disk_events_show(struct device *, struct device_attribute *, char *);
322:	static void disk_events_workfn(struct work_struct *);

File block/elevator.c:
131:	struct elevator_queue *elevator_alloc(struct request_queue *, struct elevator_type *);
694:	void elevator_disable(struct request_queue *);
159:	void elevator_exit(struct request_queue *);
609:	void elevator_init_mq(struct request_queue *);
657:	int elevator_switch(struct request_queue *, struct elevator_type *);
332:	bool elv_attempt_insert_merge(struct request_queue *, struct request *, struct list_head *);
74:	bool elv_bio_merge_ok(struct request *, struct bio *);
406:	struct request *elv_former_request(struct request_queue *, struct request *);
761:	ssize_t elv_iosched_show(struct request_queue *, char *);
745:	ssize_t elv_iosched_store(struct request_queue *, const char *, size_t);
396:	struct request *elv_latter_request(struct request_queue *, struct request *);
276:	enum elv_merge elv_merge(struct request_queue *, struct request **, struct bio *);
384:	void elv_merge_requests(struct request_queue *, struct request *, struct request *);
370:	void elv_merged_request(struct request_queue *, struct request *, enum elv_merge);
227:	void elv_rb_add(struct rb_root *, struct request *);
248:	void elv_rb_del(struct rb_root *, struct request *);
256:	struct request *elv_rb_find(struct rb_root *, sector_t);
790:	struct request *elv_rb_former_request(struct request_queue *, struct request *);
802:	struct request *elv_rb_latter_request(struct request_queue *, struct request *);
500:	int elv_register(struct elevator_type *);
463:	int elv_register_queue(struct request_queue *, bool);
186:	void elv_rqhash_add(struct request_queue *, struct request *);
179:	void elv_rqhash_del(struct request_queue *, struct request *);
202:	struct request *elv_rqhash_find(struct request_queue *, sector_t);
196:	void elv_rqhash_reposition(struct request_queue *, struct request *);
536:	void elv_unregister(struct elevator_type *);
488:	void elv_unregister_queue(struct request_queue *);
150:	static void elevator_release(struct kobject *);
814:	static int elevator_setup(char *);
419:	static ssize_t elv_attr_show(struct kobject *, struct attribute *, char *);
436:	static ssize_t elv_attr_store(struct kobject *, struct attribute *, const char *, size_t);

File block/fops.c:
170:	static ssize_t __blkdev_direct_IO(struct kiocb *, struct iov_iter *, unsigned int);
130:	static void blkdev_bio_end_io(struct bio *);
269:	static void blkdev_bio_end_io_async(struct bio *);
488:	static int blkdev_close(struct inode *, struct file *);
358:	static ssize_t blkdev_direct_IO(struct kiocb *, struct iov_iter *);
603:	static long blkdev_fallocate(struct file *, int, loff_t, loff_t);
436:	static int blkdev_fsync(struct file *, loff_t, loff_t, int);
26:	static int blkdev_get_block(struct inode *, sector_t, struct buffer_head *, int);
684:	static int blkdev_init(void);
425:	static loff_t blkdev_llseek(struct file *, loff_t, int);
458:	static int blkdev_open(struct inode *, struct file *);
379:	static int blkdev_read_folio(struct file *, struct folio *);
542:	static ssize_t blkdev_read_iter(struct kiocb *, struct iov_iter *);
384:	static void blkdev_readahead(struct readahead_control *);
389:	static int blkdev_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
395:	static int blkdev_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
503:	static ssize_t blkdev_write_iter(struct kiocb *, struct iov_iter *);
374:	static int blkdev_writepage(struct page *, struct writeback_control *);

File block/genhd.c:
1359:	struct gendisk *__alloc_disk_node(struct request_queue *, int, struct lock_class_key *);
1418:	struct gendisk *__blk_alloc_disk(int, struct lock_class_key *);
218:	int __register_blkdev(unsigned int, const char *, void (*)(dev_t));
311:	int blk_alloc_ext_minor(void);
321:	void blk_free_ext_minor(unsigned int);
1330:	dev_t blk_lookup_devt(const char *, int);
559:	void blk_mark_disk_dead(struct gendisk *);
725:	void blk_request_module(dev_t);
180:	void blkdev_show(struct seq_file *, off_t);
590:	void del_gendisk(struct gendisk *);
390:	int device_add_disk(struct device *, struct gendisk *, const struct attribute_group **);
359:	int disk_scan_partitions(struct gendisk *, fmode_t, void *);
338:	void disk_uevent(struct gendisk *, enum kobject_action);
1489:	void inc_diskseq(struct gendisk *);
689:	void invalidate_disk(struct gendisk *);
1316:	dev_t part_devt(struct gendisk *, u8);
1001:	ssize_t part_inflight_show(struct device *, struct device_attribute *, char *);
946:	ssize_t part_size_show(struct device *, struct device_attribute *, char *);
952:	ssize_t part_stat_show(struct device *, struct device_attribute *, char *);
751:	void printk_all_partitions(void);
1450:	void put_disk(struct gendisk *);
58:	void set_capacity(struct gendisk *, sector_t);
73:	bool set_capacity_and_notify(struct gendisk *, sector_t);
1476:	void set_disk_ro(struct gendisk *, bool);
287:	void unregister_blkdev(unsigned int, const char *);
1204:	static char *block_devnode(struct device *, umode_t *, kuid_t *, kgid_t *);
1192:	static int block_uevent(const struct device *, struct kobj_uevent_env *);
1024:	static ssize_t disk_alignment_offset_show(struct device *, struct device_attribute *, char *);
700:	static ssize_t disk_badblocks_show(struct device *, struct device_attribute *, char *);
712:	static ssize_t disk_badblocks_store(struct device *, struct device_attribute *, const char *, size_t);
1016:	static ssize_t disk_capability_show(struct device *, struct device_attribute *, char *);
1033:	static ssize_t disk_discard_alignment_show(struct device *, struct device_attribute *, char *);
911:	static ssize_t disk_ext_range_show(struct device *, struct device_attribute *, char *);
929:	static ssize_t disk_hidden_show(struct device *, struct device_attribute *, char *);
903:	static ssize_t disk_range_show(struct device *, struct device_attribute *, char *);
1155:	static void disk_release(struct device *);
920:	static ssize_t disk_removable_show(struct device *, struct device_attribute *, char *);
938:	static ssize_t disk_ro_show(struct device *, struct device_attribute *, char *);
820:	static void *disk_seqf_next(struct seq_file *, void *, loff_t *);
799:	static void *disk_seqf_start(struct seq_file *, loff_t *);
832:	static void disk_seqf_stop(struct seq_file *, void *);
1118:	static umode_t disk_visible(struct kobject *, struct attribute *, int);
1042:	static ssize_t diskseq_show(struct device *, struct device_attribute *, char *);
1229:	static int diskstats_show(struct seq_file *, void *);
883:	static int genhd_device_init(void);
104:	static void part_stat_read_all(struct block_device *, struct disk_stats *);
1307:	static int proc_genhd_init(void);
854:	static int show_partition(struct seq_file *, void *);
844:	static void *show_partition_start(struct seq_file *, loff_t *);

File block/ioctl.c:
560:	long blkdev_ioctl(struct file *, unsigned int, unsigned long);
311:	static int blkdev_pr_preempt(struct block_device *, struct pr_preempt *, bool);

File block/ioprio.c:
209:	long __arm64_sys_ioprio_get(const struct pt_regs *);
68:	long __arm64_sys_ioprio_set(const struct pt_regs *);
148:	int __get_task_ioprio(struct task_struct *);
33:	int ioprio_check_cap(int);

File block/kyber-iosched.c:
228:	static int calculate_percentile(struct kyber_queue_data *, unsigned int, unsigned int, unsigned int);
569:	static bool kyber_bio_merge(struct request_queue *, struct bio *, unsigned int);
640:	static void kyber_completed_request(struct request *, u64);
455:	static void kyber_depth_updated(struct blk_mq_hw_ctx *);
755:	static struct request *kyber_dispatch_cur_domain(struct kyber_queue_data *, struct kyber_hctx_data *, struct blk_mq_hw_ctx *);
804:	static struct request *kyber_dispatch_request(struct blk_mq_hw_ctx *);
696:	static int kyber_domain_wake(wait_queue_entry_t *, unsigned int, int, void *);
1046:	static void kyber_exit(void);
521:	static void kyber_exit_hctx(struct blk_mq_hw_ctx *, unsigned int);
432:	static void kyber_exit_sched(struct elevator_queue *);
615:	static void kyber_finish_request(struct request *);
707:	static int kyber_get_domain_token(struct kyber_queue_data *, struct kyber_hctx_data *, struct blk_mq_hw_ctx *);
850:	static bool kyber_has_work(struct blk_mq_hw_ctx *);
1041:	static int kyber_init(void);
466:	static int kyber_init_hctx(struct blk_mq_hw_ctx *, unsigned int);
407:	static int kyber_init_sched(struct request_queue *, struct elevator_type *);
592:	static void kyber_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
556:	static void kyber_limit_depth(blk_opf_t, struct blk_mq_alloc_data *);
587:	static void kyber_prepare_request(struct request *);
888:	static ssize_t kyber_read_lat_show(struct elevator_queue *, char *);
888:	static ssize_t kyber_read_lat_store(struct elevator_queue *, const char *, size_t);
279:	static void kyber_timer_fn(struct timer_list *);
889:	static ssize_t kyber_write_lat_show(struct elevator_queue *, char *);
889:	static ssize_t kyber_write_lat_store(struct elevator_queue *, const char *, size_t);

File block/mq-deadline.c:
423:	static struct request *__dd_dispatch_request(struct deadline_data *, struct dd_per_prio *, unsigned long);
750:	static bool dd_bio_merge(struct request_queue *, struct bio *, unsigned int);
620:	static void dd_depth_updated(struct blk_mq_hw_ctx *);
572:	static struct request *dd_dispatch_request(struct blk_mq_hw_ctx *);
638:	static void dd_exit_sched(struct elevator_queue *);
878:	static void dd_finish_request(struct request *);
915:	static bool dd_has_work(struct blk_mq_hw_ctx *);
632:	static int dd_init_hctx(struct blk_mq_hw_ctx *, unsigned int);
667:	static int dd_init_sched(struct request_queue *, struct elevator_type *);
827:	static void dd_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
604:	static void dd_limit_depth(blk_opf_t, struct blk_mq_alloc_data *);
220:	static void dd_merged_requests(struct request_queue *, struct request *, struct request *);
845:	static void dd_prepare_request(struct request *);
718:	static int dd_request_merge(struct request_queue *, struct request **, struct bio *);
200:	static void dd_request_merged(struct request_queue *, struct request *, enum elv_merge);
943:	static ssize_t deadline_async_depth_show(struct elevator_queue *, char *);
973:	static ssize_t deadline_async_depth_store(struct elevator_queue *, const char *, size_t);
1237:	static void deadline_exit(void);
944:	static ssize_t deadline_fifo_batch_show(struct elevator_queue *, char *);
974:	static ssize_t deadline_fifo_batch_store(struct elevator_queue *, const char *, size_t);
942:	static ssize_t deadline_front_merges_show(struct elevator_queue *, char *);
972:	static ssize_t deadline_front_merges_store(struct elevator_queue *, const char *, size_t);
1232:	static int deadline_init(void);
940:	static ssize_t deadline_prio_aging_expire_show(struct elevator_queue *, char *);
970:	static ssize_t deadline_prio_aging_expire_store(struct elevator_queue *, const char *, size_t);
938:	static ssize_t deadline_read_expire_show(struct elevator_queue *, char *);
968:	static ssize_t deadline_read_expire_store(struct elevator_queue *, const char *, size_t);
939:	static ssize_t deadline_write_expire_show(struct elevator_queue *, char *);
969:	static ssize_t deadline_write_expire_store(struct elevator_queue *, const char *, size_t);
941:	static ssize_t deadline_writes_starved_show(struct elevator_queue *, char *);
971:	static ssize_t deadline_writes_starved_store(struct elevator_queue *, const char *, size_t);

File block/partitions/check.h:
31:	static void put_dev_sector(Sector);

File block/partitions/core.c:
444:	int bdev_add_partition(struct gendisk *, int, sector_t, sector_t);
469:	int bdev_del_partition(struct gendisk *, int);
655:	int bdev_disk_changed(struct gendisk *, bool);
490:	int bdev_resize_partition(struct gendisk *, int, sector_t, sector_t);
530:	void blk_drop_partitions(struct gendisk *);
707:	void *read_part_sector(struct parsed_partitions *, sector_t, Sector *);
305:	static struct block_device *add_partition(struct gendisk *, int, sector_t, sector_t, int, struct partition_meta_info *);
274:	static void delete_partition(struct block_device *);
517:	static bool disk_unlock_native_capacity(struct gendisk *);
199:	static ssize_t part_alignment_offset_show(struct device *, struct device_attribute *, char *);
205:	static ssize_t part_discard_alignment_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t part_partition_show(struct device *, struct device_attribute *, char *);
251:	static void part_release(struct device *);
193:	static ssize_t part_ro_show(struct device *, struct device_attribute *, char *);
187:	static ssize_t part_start_show(struct device *, struct device_attribute *, char *);
257:	static int part_uevent(struct device *, struct kobj_uevent_env *);
294:	static ssize_t whole_disk_show(struct device *, struct device_attribute *, char *);

File block/partitions/efi.c:
713:	int efi_partition(struct parsed_partitions *);
271:	static gpt_entry *alloc_read_gpt_entries(struct parsed_partitions *, gpt_header *);
99:	static int force_gpt_fn(char *);
335:	static int is_gpt_valid(struct parsed_partitions *, u64, gpt_header **, gpt_entry **);
235:	static size_t read_lba(struct parsed_partitions *, u64, u8 *, size_t);

File block/partitions/msdos.c:
581:	int msdos_partition(struct parsed_partitions *);
409:	static void parse_freebsd(struct parsed_partitions *, sector_t, sector_t, int);
529:	static void parse_minix(struct parsed_partitions *, sector_t, sector_t, int);
417:	static void parse_netbsd(struct parsed_partitions *, sector_t, sector_t, int);
425:	static void parse_openbsd(struct parsed_partitions *, sector_t, sector_t, int);
250:	static void parse_solaris_x86(struct parsed_partitions *, sector_t, sector_t, int);
483:	static void parse_unixware(struct parsed_partitions *, sector_t, sector_t, int);

File crypto/acompress.c:
120:	struct acomp_req *acomp_request_alloc(struct crypto_acomp *);
133:	void acomp_request_free(struct acomp_req *);
105:	struct crypto_acomp *crypto_alloc_acomp(const char *, u32, u32);
112:	struct crypto_acomp *crypto_alloc_acomp_node(const char *, u32, u32, int);
150:	int crypto_register_acomp(struct acomp_alg *);
168:	int crypto_register_acomps(struct acomp_alg *, int);
162:	void crypto_unregister_acomp(struct acomp_alg *);
188:	void crypto_unregister_acomps(struct acomp_alg *, int);
52:	static void crypto_acomp_exit_tfm(struct crypto_tfm *);
82:	static unsigned int crypto_acomp_extsize(struct crypto_alg *);
60:	static int crypto_acomp_init_tfm(struct crypto_tfm *);
38:	static int crypto_acomp_report(struct sk_buff *, struct crypto_alg *);
47:	static void crypto_acomp_show(struct seq_file *, struct crypto_alg *);

File crypto/aead.c:
286:	int aead_register_instance(struct crypto_template *, struct aead_instance *);
100:	int crypto_aead_decrypt(struct aead_request *);
83:	int crypto_aead_encrypt(struct aead_request *);
64:	int crypto_aead_setauthsize(struct crypto_aead *, unsigned int);
43:	int crypto_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
214:	struct crypto_aead *crypto_alloc_aead(const char *, u32, u32);
205:	int crypto_grab_aead(struct crypto_aead_spawn *, struct crypto_instance *, const char *, u32, u32);
238:	int crypto_register_aead(struct aead_alg *);
257:	int crypto_register_aeads(struct aead_alg *, int);
251:	void crypto_unregister_aead(struct aead_alg *);
277:	void crypto_unregister_aeads(struct aead_alg *, int);
119:	static void crypto_aead_exit_tfm(struct crypto_tfm *);
184:	static void crypto_aead_free_instance(struct crypto_instance *);
127:	static int crypto_aead_init_tfm(struct crypto_tfm *);
163:	static int crypto_aead_report(struct sk_buff *, struct crypto_alg *);
171:	static void crypto_aead_show(struct seq_file *, struct crypto_alg *);

File crypto/aes_generic.c:
1136:	int crypto_aes_set_key(struct crypto_tfm *, const u8 *, unsigned int);
1309:	static void aes_fini(void);
1304:	static int aes_init(void);
1246:	static void crypto_aes_decrypt(struct crypto_tfm *, u8 *, const u8 *);
1176:	static void crypto_aes_encrypt(struct crypto_tfm *, u8 *, const u8 *);

File crypto/ahash.c:
632:	int ahash_register_instance(struct crypto_template *, struct ahash_instance *);
368:	int crypto_ahash_digest(struct ahash_request *);
340:	int crypto_ahash_final(struct ahash_request *);
354:	int crypto_ahash_finup(struct ahash_request *);
172:	int crypto_ahash_setkey(struct crypto_ahash *, const u8 *, unsigned int);
555:	struct crypto_ahash *crypto_alloc_ahash(const char *, u32, u32);
546:	int crypto_grab_ahash(struct crypto_ahash_spawn *, struct crypto_instance *, const char *, u32, u32);
562:	int crypto_has_ahash(const char *, u32, u32);
648:	bool crypto_hash_alg_has_setkey(struct hash_alg_common *);
79:	int crypto_hash_walk_done(struct crypto_hash_walk *, int);
119:	int crypto_hash_walk_first(struct ahash_request *, struct crypto_hash_walk *);
584:	int crypto_register_ahash(struct ahash_alg *);
603:	int crypto_register_ahashes(struct ahash_alg *, int);
597:	void crypto_unregister_ahash(struct ahash_alg *);
623:	void crypto_unregister_ahashes(struct ahash_alg *, int);
431:	static int ahash_def_finup(struct ahash_request *);
413:	static void ahash_def_finup_done1(struct crypto_async_request *, int);
385:	static void ahash_def_finup_done2(struct crypto_async_request *, int);
157:	static int ahash_nosetkey(struct crypto_ahash *, const u8 *, unsigned int);
285:	static void ahash_op_unaligned_done(struct crypto_async_request *, int);
447:	static void crypto_ahash_exit_tfm(struct crypto_tfm *);
484:	static unsigned int crypto_ahash_extsize(struct crypto_alg *);
492:	static void crypto_ahash_free_instance(struct crypto_instance *);
455:	static int crypto_ahash_init_tfm(struct crypto_tfm *);
328:	static int crypto_ahash_op(struct ahash_request *, int (*)(struct ahash_request *));
514:	static int crypto_ahash_report(struct sk_buff *, struct crypto_alg *);
522:	static void crypto_ahash_show(struct seq_file *, struct crypto_alg *);

File crypto/akcipher.c:
155:	int akcipher_register_instance(struct crypto_template *, struct akcipher_instance *);
102:	struct crypto_akcipher *crypto_alloc_akcipher(const char *, u32, u32);
93:	int crypto_grab_akcipher(struct crypto_akcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
129:	int crypto_register_akcipher(struct akcipher_alg *);
149:	void crypto_unregister_akcipher(struct akcipher_alg *);
118:	static int akcipher_default_op(struct akcipher_request *);
123:	static int akcipher_default_set_key(struct crypto_akcipher *, const void *, unsigned int);
50:	static void crypto_akcipher_exit_tfm(struct crypto_tfm *);
72:	static void crypto_akcipher_free_instance(struct crypto_instance *);
58:	static int crypto_akcipher_init_tfm(struct crypto_tfm *);
36:	static int crypto_akcipher_report(struct sk_buff *, struct crypto_alg *);
45:	static void crypto_akcipher_show(struct seq_file *, struct crypto_alg *);

File crypto/algapi.c:
1019:	unsigned int crypto_alg_extsize(struct crypto_alg *);
362:	void crypto_alg_tested(const char *, int);
896:	const char *crypto_attr_alg_name(struct rtattr *);
880:	int crypto_check_attr_type(struct rtattr **, u32, u32 *);
969:	struct crypto_async_request *crypto_dequeue_request(struct crypto_queue *);
747:	void crypto_drop_spawn(struct crypto_spawn *);
938:	int crypto_enqueue_request(struct crypto_queue *, struct crypto_async_request *);
961:	void crypto_enqueue_request_head(struct crypto_queue *, struct crypto_async_request *);
846:	struct crypto_attr_type *crypto_get_attr_type(struct rtattr **);
711:	int crypto_grab_spawn(struct crypto_spawn *, struct crypto_instance *, const char *, u32, u32);
1001:	void crypto_inc(u8 *, unsigned int);
929:	void crypto_init_queue(struct crypto_queue *, unsigned int);
914:	int crypto_inst_setname(struct crypto_instance *, const char *, struct crypto_alg *);
630:	struct crypto_template *crypto_lookup_template(const char *);
442:	int crypto_register_alg(struct crypto_alg *);
504:	int crypto_register_algs(struct crypto_alg *, int);
637:	int crypto_register_instance(struct crypto_template *, struct crypto_instance *);
834:	int crypto_register_notifier(struct notifier_block *);
533:	int crypto_register_template(struct crypto_template *);
555:	int crypto_register_templates(struct crypto_template *, int);
430:	void crypto_remove_final(struct list_head *);
145:	void crypto_remove_spawns(struct crypto_alg *, struct list_head *, struct crypto_alg *);
787:	struct crypto_tfm *crypto_spawn_tfm(struct crypto_spawn *, u32, u32);
813:	void *crypto_spawn_tfm2(struct crypto_spawn *);
1026:	int crypto_type_has_alg(const char *, const struct crypto_type *, u32, u32);
484:	void crypto_unregister_alg(struct crypto_alg *);
524:	void crypto_unregister_algs(struct crypto_alg *, int);
696:	void crypto_unregister_instance(struct crypto_instance *);
840:	int crypto_unregister_notifier(struct notifier_block *);
573:	void crypto_unregister_template(struct crypto_template *);
602:	void crypto_unregister_templates(struct crypto_template *, int);
305:	static struct crypto_larval *__crypto_register_alg(struct crypto_alg *, struct list_head *);
225:	static void crypto_alg_finish_registration(struct crypto_alg *, bool, struct list_head *);
1302:	static void crypto_algapi_exit(void);
1295:	static int crypto_algapi_init(void);
77:	static void crypto_destroy_instance(struct crypto_alg *);
762:	static struct crypto_alg *crypto_spawn_alg(struct crypto_spawn *);

File crypto/algboss.c:
245:	static void cryptomgr_exit(void);
240:	static int cryptomgr_init(void);
221:	static int cryptomgr_notify(struct notifier_block *, unsigned long, void *);
50:	static int cryptomgr_probe(void *);

File crypto/api.c:
398:	struct crypto_tfm *__crypto_alloc_tfm(struct crypto_alg *, u32, u32);
315:	struct crypto_alg *crypto_alg_mod_lookup(const char *, u32, u32);
456:	struct crypto_tfm *crypto_alloc_base(const char *, u32, u32);
571:	void *crypto_alloc_tfm_node(const char *, const struct crypto_type *, u32, u32, int);
490:	void *crypto_create_tfm_node(struct crypto_alg *, const struct crypto_type *, int);
615:	void crypto_destroy_tfm(void *, struct crypto_tfm *);
533:	struct crypto_alg *crypto_find_alg(const char *, const struct crypto_type *, u32, u32);
632:	int crypto_has_alg(const char *, u32, u32);
106:	struct crypto_larval *crypto_larval_alloc(const char *, u32, u32);
155:	void crypto_larval_kill(struct crypto_alg *);
41:	struct crypto_alg *crypto_mod_get(struct crypto_alg *);
47:	void crypto_mod_put(struct crypto_alg *);
301:	int crypto_probing_notify(unsigned long, void *);
646:	void crypto_req_done(struct crypto_async_request *, int);
390:	void crypto_shoot_alg(struct crypto_alg *);
167:	void crypto_wait_for_test(struct crypto_larval *);
56:	static struct crypto_alg *__crypto_alg_lookup(const char *, u32, u32);
234:	static struct crypto_alg *crypto_alg_lookup(const char *, u32, u32);
96:	static void crypto_larval_destroy(struct crypto_alg *);
202:	static struct crypto_alg *crypto_larval_wait(struct crypto_alg *);

File crypto/authenc.c:
46:	int crypto_authenc_extractkeys(struct crypto_authenc_keys *, const u8 *, unsigned int);
112:	static void authenc_geniv_ahash_done(struct crypto_async_request *, int);
264:	static void authenc_verify_ahash_done(struct crypto_async_request *, int);
372:	static int crypto_authenc_create(struct crypto_template *, struct rtattr **);
278:	static int crypto_authenc_decrypt(struct aead_request *);
229:	static int crypto_authenc_decrypt_tail(struct aead_request *, unsigned int);
192:	static int crypto_authenc_encrypt(struct aead_request *);
163:	static void crypto_authenc_encrypt_done(struct crypto_async_request *, int);
354:	static void crypto_authenc_exit_tfm(struct crypto_aead *);
363:	static void crypto_authenc_free(struct aead_instance *);
307:	static int crypto_authenc_init_tfm(struct crypto_aead *);
459:	static void crypto_authenc_module_exit(void);
454:	static int crypto_authenc_module_init(void);
84:	static int crypto_authenc_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/authencesn.c:
110:	static void authenc_esn_geniv_ahash_done(struct crypto_async_request *, int);
261:	static void authenc_esn_verify_ahash_done(struct crypto_async_request *, int);
390:	static int crypto_authenc_esn_create(struct crypto_template *, struct rtattr **);
270:	static int crypto_authenc_esn_decrypt(struct aead_request *);
219:	static int crypto_authenc_esn_decrypt_tail(struct aead_request *, unsigned int);
181:	static int crypto_authenc_esn_encrypt(struct aead_request *);
156:	static void crypto_authenc_esn_encrypt_done(struct crypto_async_request *, int);
372:	static void crypto_authenc_esn_exit_tfm(struct crypto_aead *);
381:	static void crypto_authenc_esn_free(struct aead_instance *);
119:	static int crypto_authenc_esn_genicv(struct aead_request *, unsigned int);
322:	static int crypto_authenc_esn_init_tfm(struct crypto_aead *);
474:	static void crypto_authenc_esn_module_exit(void);
469:	static int crypto_authenc_esn_module_init(void);
49:	static int crypto_authenc_esn_setauthsize(struct crypto_aead *, unsigned int);
58:	static int crypto_authenc_esn_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/cbc.c:
174:	static int crypto_cbc_create(struct crypto_template *, struct rtattr **);
155:	static int crypto_cbc_decrypt(struct skcipher_request *);
73:	static int crypto_cbc_encrypt(struct skcipher_request *);
213:	static void crypto_cbc_module_exit(void);
208:	static int crypto_cbc_module_init(void);

File crypto/cipher.c:
87:	void crypto_cipher_decrypt_one(struct crypto_cipher *, u8 *, const u8 *);
80:	void crypto_cipher_encrypt_one(struct crypto_cipher *, u8 *, const u8 *);
43:	int crypto_cipher_setkey(struct crypto_cipher *, const u8 *, unsigned int);

File crypto/compress.c:
12:	int crypto_comp_compress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);
23:	int crypto_comp_decompress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);

File crypto/crc32c_generic.c:
114:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
92:	static int chksum_final(struct shash_desc *, u8 *);
106:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
57:	static int chksum_init(struct shash_desc *);
72:	static int chksum_setkey(struct crypto_shash *, const u8 *, unsigned int);
83:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
122:	static int crc32c_cra_init(struct crypto_tfm *);
156:	static void crc32c_mod_fini(void);
151:	static int crc32c_mod_init(void);

File crypto/crct10dif_common.c:
70:	__u16 crc_t10dif_generic(__u16, const unsigned char *, size_t);

File crypto/crct10dif_generic.c:
82:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
60:	static int chksum_final(struct shash_desc *, u8 *);
74:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	static int chksum_init(struct shash_desc *);
51:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
110:	static void crct10dif_mod_fini(void);
105:	static int crct10dif_mod_init(void);

File crypto/crypto_null.c:
153:	struct crypto_sync_skcipher *crypto_get_default_null_skcipher(void);
177:	void crypto_put_default_null_skcipher(void);
214:	static void crypto_null_mod_fini(void);
188:	static int crypto_null_mod_init(void);
27:	static int null_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
71:	static void null_crypt(struct crypto_tfm *, u8 *, const u8 *);
53:	static int null_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
48:	static int null_final(struct shash_desc *, u8 *);
59:	static int null_hash_setkey(struct crypto_shash *, const u8 *, unsigned int);
37:	static int null_init(struct shash_desc *);
67:	static int null_setkey(struct crypto_tfm *, const u8 *, unsigned int);
76:	static int null_skcipher_crypt(struct skcipher_request *);
63:	static int null_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
42:	static int null_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/ctr.c:
127:	static int crypto_ctr_create(struct crypto_template *, struct rtattr **);
99:	static int crypto_ctr_crypt(struct skcipher_request *);
349:	static void crypto_ctr_module_exit(void);
343:	static int crypto_ctr_module_init(void);
257:	static int crypto_rfc3686_create(struct crypto_template *, struct rtattr **);
190:	static int crypto_rfc3686_crypt(struct skcipher_request *);
242:	static void crypto_rfc3686_exit_tfm(struct crypto_skcipher *);
249:	static void crypto_rfc3686_free(struct skcipher_instance *);
218:	static int crypto_rfc3686_init_tfm(struct crypto_skcipher *);
169:	static int crypto_rfc3686_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File crypto/ecb.c:
62:	static int crypto_ecb_create(struct crypto_template *, struct rtattr **);
53:	static int crypto_ecb_decrypt(struct skcipher_request *);
44:	static int crypto_ecb_encrypt(struct skcipher_request *);
94:	static void crypto_ecb_module_exit(void);
89:	static int crypto_ecb_module_init(void);

File crypto/geniv.c:
153:	void aead_exit_geniv(struct crypto_aead *);
41:	struct aead_instance *aead_geniv_alloc(struct crypto_template *, struct rtattr **);
109:	int aead_init_geniv(struct crypto_aead *);
35:	static void aead_geniv_free(struct aead_instance *);
27:	static int aead_geniv_setauthsize(struct crypto_aead *, unsigned int);
19:	static int aead_geniv_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/hmac.c:
169:	static int hmac_create(struct crypto_template *, struct rtattr **);
163:	static void hmac_exit_tfm(struct crypto_shash *);
87:	static int hmac_export(struct shash_desc *, void *);
117:	static int hmac_final(struct shash_desc *, u8 *);
130:	static int hmac_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
94:	static int hmac_import(struct shash_desc *, const void *);
104:	static int hmac_init(struct shash_desc *);
145:	static int hmac_init_tfm(struct crypto_shash *);
253:	static void hmac_module_exit(void);
248:	static int hmac_module_init(void);
41:	static int hmac_setkey(struct crypto_shash *, const u8 *, unsigned int);
109:	static int hmac_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/internal.h:
140:	static void crypto_alg_put(struct crypto_alg *);

File crypto/kpp.c:
92:	struct crypto_kpp *crypto_alloc_kpp(const char *, u32, u32);
98:	int crypto_grab_kpp(struct crypto_kpp_spawn *, struct crypto_instance *, const char *, u32, u32);
107:	int crypto_has_kpp(const char *, u32, u32);
122:	int crypto_register_kpp(struct kpp_alg *);
131:	void crypto_unregister_kpp(struct kpp_alg *);
137:	int kpp_register_instance(struct crypto_template *, struct kpp_instance *);
49:	static void crypto_kpp_exit_tfm(struct crypto_tfm *);
71:	static void crypto_kpp_free_instance(struct crypto_instance *);
57:	static int crypto_kpp_init_tfm(struct crypto_tfm *);
35:	static int crypto_kpp_report(struct sk_buff *, struct crypto_alg *);
44:	static void crypto_kpp_show(struct seq_file *, struct crypto_alg *);

File crypto/md5.c:
202:	static int md5_export(struct shash_desc *, void *);
174:	static int md5_final(struct shash_desc *, u8 *);
210:	static int md5_import(struct shash_desc *, const void *);
129:	static int md5_init(struct shash_desc *);
240:	static void md5_mod_fini(void);
235:	static int md5_mod_init(void);
40:	static void md5_transform(__u32 *, const __u32 *);
142:	static int md5_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/proc.c:
97:	void crypto_exit_proc(void);
92:	void crypto_init_proc(void);
26:	static void *c_next(struct seq_file *, void *, loff_t *);
36:	static int c_show(struct seq_file *, void *);
20:	static void *c_start(struct seq_file *, loff_t *);
31:	static void c_stop(struct seq_file *, void *);

File crypto/rng.c:
110:	struct crypto_rng *crypto_alloc_rng(const char *, u32, u32);
116:	int crypto_get_default_rng(void);
147:	void crypto_put_default_rng(void);
177:	int crypto_register_rng(struct rng_alg *);
198:	int crypto_register_rngs(struct rng_alg *, int);
31:	int crypto_rng_reset(struct crypto_rng *, const u8 *, unsigned int);
192:	void crypto_unregister_rng(struct rng_alg *);
218:	void crypto_unregister_rngs(struct rng_alg *, int);
57:	static int crypto_rng_init_tfm(struct crypto_tfm *);
83:	static int crypto_rng_report(struct sk_buff *, struct crypto_alg *);
91:	static void crypto_rng_show(struct seq_file *, struct crypto_alg *);

File crypto/scatterwalk.c:
26:	void scatterwalk_copychunks(void *, struct scatter_walk *, size_t, int);
72:	struct scatterlist *scatterwalk_ffwd(struct scatterlist *, struct scatterlist *, unsigned int);
55:	void scatterwalk_map_and_copy(void *, struct scatterlist *, unsigned int, unsigned int, int);

File crypto/scompress.c:
213:	struct acomp_req *crypto_acomp_scomp_alloc_ctx(struct acomp_req *);
232:	void crypto_acomp_scomp_free_ctx(struct acomp_req *);
186:	int crypto_init_scomp_ops_async(struct crypto_tfm *);
257:	int crypto_register_scomp(struct scomp_alg *);
275:	int crypto_register_scomps(struct scomp_alg *, int);
269:	void crypto_unregister_scomp(struct scomp_alg *);
295:	void crypto_unregister_scomps(struct scomp_alg *, int);
174:	static void crypto_exit_scomp_ops_async(struct crypto_tfm *);
108:	static int crypto_scomp_init_tfm(struct crypto_tfm *);
54:	static int crypto_scomp_report(struct sk_buff *, struct crypto_alg *);
63:	static void crypto_scomp_show(struct seq_file *, struct crypto_alg *);
120:	static int scomp_acomp_comp_decomp(struct acomp_req *, int);
164:	static int scomp_acomp_compress(struct acomp_req *);
169:	static int scomp_acomp_decompress(struct acomp_req *);

File crypto/sha1_generic.c:
55:	int crypto_sha1_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	int crypto_sha1_update(struct shash_desc *, const u8 *, unsigned int);
49:	static int sha1_final(struct shash_desc *, u8 *);
84:	static void sha1_generic_mod_fini(void);
79:	static int sha1_generic_mod_init(void);

File crypto/sha256_generic.c:
53:	int crypto_sha256_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
36:	int crypto_sha256_update(struct shash_desc *, const u8 *, unsigned int);
44:	static int crypto_sha256_final(struct shash_desc *, u8 *);
96:	static void sha256_generic_mod_fini(void);
91:	static int sha256_generic_mod_init(void);

File crypto/sha3_generic.c:
213:	int crypto_sha3_final(struct shash_desc *, u8 *);
161:	int crypto_sha3_init(struct shash_desc *);
175:	int crypto_sha3_update(struct shash_desc *, const u8 *, unsigned int);
150:	static void keccakf(u64 *);
287:	static void sha3_generic_mod_fini(void);
282:	static int sha3_generic_mod_init(void);

File crypto/sha512_generic.c:
170:	int crypto_sha512_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
157:	int crypto_sha512_update(struct shash_desc *, const u8 *, unsigned int);
164:	static int sha512_final(struct shash_desc *, u8 *);
148:	static void sha512_generic_block_fn(struct sha512_state *, const u8 *, int);
213:	static void sha512_generic_mod_fini(void);
208:	static int sha512_generic_mod_init(void);

File crypto/shash.c:
507:	struct crypto_shash *crypto_alloc_shash(const char *, u32, u32);
498:	int crypto_grab_shash(struct crypto_shash_spawn *, struct crypto_instance *, const char *, u32, u32);
514:	int crypto_has_shash(const char *, u32, u32);
367:	int crypto_init_shash_ops_async(struct crypto_tfm *);
554:	int crypto_register_shash(struct shash_alg *);
573:	int crypto_register_shashes(struct shash_alg *, int);
194:	int crypto_shash_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
153:	int crypto_shash_final(struct shash_desc *, u8 *);
173:	int crypto_shash_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
59:	int crypto_shash_setkey(struct crypto_shash *, const u8 *, unsigned int);
211:	int crypto_shash_tfm_digest(struct crypto_shash *, const u8 *, unsigned int, u8 *);
111:	int crypto_shash_update(struct shash_desc *, const u8 *, unsigned int);
567:	void crypto_unregister_shash(struct shash_alg *);
593:	void crypto_unregister_shashes(struct shash_alg *, int);
311:	int shash_ahash_digest(struct ahash_request *, struct shash_desc *);
280:	int shash_ahash_finup(struct ahash_request *, struct shash_desc *);
257:	int shash_ahash_update(struct ahash_request *, struct shash_desc *);
618:	void shash_free_singlespawn_instance(struct shash_instance *);
25:	int shash_no_setkey(struct crypto_shash *, const u8 *, unsigned int);
602:	int shash_register_instance(struct crypto_template *, struct shash_instance *);
360:	static void crypto_exit_shash_ops_async(struct crypto_tfm *);
406:	static void crypto_shash_exit_tfm(struct crypto_tfm *);
444:	static void crypto_shash_free_instance(struct crypto_instance *);
414:	static int crypto_shash_init_tfm(struct crypto_tfm *);
467:	static int crypto_shash_report(struct sk_buff *, struct crypto_alg *);
475:	static void crypto_shash_show(struct seq_file *, struct crypto_alg *);
335:	static int shash_async_digest(struct ahash_request *);
345:	static int shash_async_export(struct ahash_request *, void *);
275:	static int shash_async_final(struct ahash_request *);
301:	static int shash_async_finup(struct ahash_request *);
350:	static int shash_async_import(struct ahash_request *, const void *);
247:	static int shash_async_init(struct ahash_request *);
239:	static int shash_async_setkey(struct crypto_ahash *, const u8 *, unsigned int);
270:	static int shash_async_update(struct ahash_request *);
227:	static int shash_default_export(struct shash_desc *, void *);
233:	static int shash_default_import(struct shash_desc *, const void *);
187:	static int shash_digest_unaligned(struct shash_desc *, const u8 *, unsigned int, u8 *);
166:	static int shash_finup_unaligned(struct shash_desc *, const u8 *, unsigned int, u8 *);

File crypto/skcipher.c:
753:	struct crypto_skcipher *crypto_alloc_skcipher(const char *, u32, u32);
760:	struct crypto_sync_skcipher *crypto_alloc_sync_skcipher(const char *, u32, u32);
744:	int crypto_grab_skcipher(struct crypto_skcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
784:	int crypto_has_skcipher(const char *, u32, u32);
810:	int crypto_register_skcipher(struct skcipher_alg *);
829:	int crypto_register_skciphers(struct skcipher_alg *, int);
636:	int crypto_skcipher_decrypt(struct skcipher_request *);
619:	int crypto_skcipher_encrypt(struct skcipher_request *);
594:	int crypto_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
823:	void crypto_unregister_skcipher(struct skcipher_alg *);
849:	void crypto_unregister_skciphers(struct skcipher_alg *, int);
929:	struct skcipher_instance *skcipher_alloc_instance_simple(struct crypto_template *, struct rtattr **);
858:	int skcipher_register_instance(struct crypto_template *, struct skcipher_instance *);
556:	int skcipher_walk_aead_decrypt(struct skcipher_walk *, struct aead_request *, bool);
547:	int skcipher_walk_aead_encrypt(struct skcipher_walk *, struct aead_request *, bool);
494:	int skcipher_walk_async(struct skcipher_walk *, struct skcipher_request *);
182:	void skcipher_walk_complete(struct skcipher_walk *, int);
105:	int skcipher_walk_done(struct skcipher_walk *, int);
477:	int skcipher_walk_virt(struct skcipher_walk *, struct skcipher_request *, bool);
653:	static void crypto_skcipher_exit_tfm(struct crypto_tfm *);
677:	static void crypto_skcipher_free_instance(struct crypto_instance *);
661:	static int crypto_skcipher_init_tfm(struct crypto_tfm *);
724:	static int crypto_skcipher_report(struct sk_buff *, struct crypto_alg *);
687:	static void crypto_skcipher_show(struct seq_file *, struct crypto_alg *);
94:	static int skcipher_done_slow(struct skcipher_walk *, unsigned int);
900:	static void skcipher_exit_tfm_simple(struct crypto_skcipher *);
907:	static void skcipher_free_instance_simple(struct skcipher_instance *);
885:	static int skcipher_init_tfm_simple(struct crypto_skcipher *);
286:	static int skcipher_next_copy(struct skcipher_walk *);
225:	static int skcipher_next_slow(struct skcipher_walk *, unsigned int);
874:	static int skcipher_setkey_simple(struct crypto_skcipher *, const u8 *, unsigned int);
505:	static int skcipher_walk_aead_common(struct skcipher_walk *, struct aead_request *, bool);
344:	static int skcipher_walk_next(struct skcipher_walk *);
449:	static int skcipher_walk_skcipher(struct skcipher_walk *, struct skcipher_request *);

File crypto/sm3.c:
215:	void sm3_final(struct sm3_state *, u8 *);
178:	void sm3_update(struct sm3_state *, const u8 *, unsigned int);
169:	static void sm3_block(struct sm3_state *, const u8 *, int, u32 *);

File crypto/sm3_generic.c:
37:	static int crypto_sm3_final(struct shash_desc *, u8 *);
43:	static int crypto_sm3_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
30:	static int crypto_sm3_update(struct shash_desc *, const u8 *, unsigned int);
75:	static void sm3_generic_mod_fini(void);
70:	static int sm3_generic_mod_init(void);

File crypto/sm4.c:
160:	void sm4_crypt_block(const u32 *, u8 *, const u8 *);
119:	int sm4_expandkey(struct sm4_ctx *, const u8 *, unsigned int);

File crypto/sm4_generic.c:
50:	static void sm4_decrypt(struct crypto_tfm *, u8 *, const u8 *);
41:	static void sm4_encrypt(struct crypto_tfm *, u8 *, const u8 *);
81:	static void sm4_fini(void);
76:	static int sm4_init(void);
31:	static int sm4_setkey(struct crypto_tfm *, const u8 *, unsigned int);

File crypto/testmgr.c:
63:	int alg_test(const char *, const char *, u32, u32);

File crypto/xts.c:
339:	static int xts_create(struct crypto_template *, struct rtattr **);
143:	static void xts_cts_done(struct crypto_async_request *, int);
159:	static int xts_cts_final(struct skcipher_request *, int (*)(struct skcipher_request *));
278:	static int xts_decrypt(struct skcipher_request *);
219:	static void xts_decrypt_done(struct crypto_async_request *, int);
261:	static int xts_encrypt(struct skcipher_request *);
199:	static void xts_encrypt_done(struct crypto_async_request *, int);
323:	static void xts_exit_tfm(struct crypto_skcipher *);
331:	static void xts_free_instance(struct skcipher_instance *);
295:	static int xts_init_tfm(struct crypto_skcipher *);
457:	static void xts_module_exit(void);
452:	static int xts_module_init(void);
41:	static int xts_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
82:	static int xts_xor_tweak(struct skcipher_request *, bool, bool);

File drivers/amba/bus.c:
546:	int amba_device_add(struct amba_device *, struct resource *);
598:	struct amba_device *amba_device_alloc(const char *, resource_size_t, size_t);
637:	void amba_device_put(struct amba_device *);
624:	int amba_device_register(struct amba_device *, struct resource *);
654:	void amba_device_unregister(struct amba_device *);
502:	int amba_driver_register(struct amba_driver *);
521:	void amba_driver_unregister(struct amba_driver *);
688:	void amba_release_regions(struct amba_device *);
665:	int amba_request_regions(struct amba_device *, const char *);
527:	static void amba_device_release(struct device *);
375:	static void amba_dma_cleanup(struct device *);
353:	static int amba_dma_configure(struct device *);
451:	static int amba_init(void);
207:	static int amba_match(struct device *, struct device_driver *);
277:	static int amba_probe(struct device *);
133:	static int amba_read_periphid(struct amba_device *);
322:	static void amba_remove(struct device *);
341:	static void amba_shutdown(struct device *);
477:	static int amba_stub_drv_init(void);
238:	static int amba_uevent(struct device *, struct kobj_uevent_env *);
84:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
96:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
120:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
121:	static ssize_t resource_show(struct device *, struct device_attribute *, char *);

File drivers/base/arch_numa.c:
335:	int __node_distance(int, int);
467:	void arch_numa_init(void);
126:	void early_map_cpu_to_node(unsigned int, int);
77:	void numa_add_cpu(unsigned int);
201:	int numa_add_memblk(int, u64, u64);
87:	void numa_clear_node(unsigned int);
255:	void numa_free_distance(void);
82:	void numa_remove_cpu(unsigned int);
308:	void numa_set_distance(int, int, int);
121:	void numa_store_cpu_info(unsigned int);
157:	void setup_per_cpu_areas(void);
421:	static int dummy_numa_init(void);
147:	static int early_cpu_to_node(int);
273:	static int numa_alloc_distance(void);
376:	static int numa_init(int (*)(void));
27:	static int numa_parse_early_param(char *);
343:	static int numa_register_nodes(void);
152:	static int pcpu_cpu_distance(unsigned int, unsigned int);
219:	static void setup_node_data(int, u64, u64);
100:	static void setup_node_to_cpumask_map(void);

File drivers/base/arch_topology.c:
719:	const struct cpumask *cpu_clustergroup_mask(int);
692:	const struct cpumask *cpu_coregroup_mask(int);
826:	void init_cpu_topology(void);
820:	int parse_acpi_topology(void);
804:	void remove_cpu_topology(unsigned int);
788:	void reset_cpu_topology(void);
845:	void store_cpu_topology(unsigned int);
90:	void topology_clear_scale_freq_source(enum scale_freq_source, const struct cpumask *);
271:	void topology_normalize_cpu_scale(void);
297:	bool topology_parse_cpu_capacity(struct device_node *, int);
36:	bool topology_scale_freq_invariant(void);
119:	void topology_scale_freq_tick(void);
156:	void topology_set_cpu_scale(unsigned int, unsigned long);
130:	void topology_set_freq_scale(const struct cpumask *, unsigned long, unsigned long);
59:	void topology_set_scale_freq_source(struct scale_freq_data *, const struct cpumask *);
244:	int topology_update_cpu_topology(void);
177:	void topology_update_thermal_pressure(const struct cpumask *, unsigned long);
732:	void update_siblings_masks(unsigned int);
772:	static void clear_cpu_topology(int);
209:	static ssize_t cpu_capacity_show(struct device *, struct device_attribute *, char *);
263:	static int free_raw_capacity(void);
479:	static int get_cpu_for_node(struct device_node *);
548:	static int parse_cluster(struct device_node *, int, int, int);
499:	static int parse_core(struct device_node *, int, int, int);
642:	static int parse_dt_topology(void);
616:	static int parse_socket(struct device_node *);
223:	static int register_cpu_capacity_sysctl(void);

File drivers/base/attribute_container.c:
417:	int attribute_container_add_attrs(struct device *);
452:	int attribute_container_add_class_device(struct device *);
472:	int attribute_container_add_class_device_adapter(struct attribute_container *, struct device *, struct device *);
141:	void attribute_container_add_device(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
514:	void attribute_container_class_device_del(struct device *);
54:	struct attribute_container *attribute_container_classdev_to_container(struct device *);
353:	void attribute_container_device_trigger(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
297:	int attribute_container_device_trigger_safe(struct device *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
530:	struct device *attribute_container_find_class_device(struct attribute_container *, struct device *);
73:	int attribute_container_register(struct attribute_container *);
486:	void attribute_container_remove_attrs(struct device *);
206:	void attribute_container_remove_device(struct device *, void (*)(struct attribute_container *, struct device *, struct device *));
394:	void attribute_container_trigger(struct device *, int (*)(struct attribute_container *, struct device *));
93:	int attribute_container_unregister(struct attribute_container *);
112:	static void attribute_container_release(struct device *);
240:	static int do_attribute_container_device_trigger_safe(struct device *, struct attribute_container *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
31:	static void internal_container_klist_get(struct klist_node *);
38:	static void internal_container_klist_put(struct klist_node *);

File drivers/base/bus.c:
441:	int bus_add_device(struct device *);
590:	int bus_add_driver(struct device_driver *);
131:	int bus_create_file(struct bus_type *, struct bus_attribute *);
322:	struct device *bus_find_device(struct bus_type *, struct device *, const void *, int (*)(struct device *, const void *));
288:	int bus_for_each_dev(struct bus_type *, struct device *, void *, int (*)(struct device *, void *));
414:	int bus_for_each_drv(struct bus_type *, struct device_driver *, void *, int (*)(struct device_driver *, void *));
900:	struct klist *bus_get_device_klist(struct bus_type *);
894:	struct kset *bus_get_kset(struct bus_type *);
478:	void bus_probe_device(struct device *);
783:	int bus_register(struct bus_type *);
882:	int bus_register_notifier(struct bus_type *, struct notifier_block *);
506:	void bus_remove_device(struct device *);
666:	void bus_remove_driver(struct device_driver *);
143:	void bus_remove_file(struct bus_type *, struct bus_attribute *);
707:	int bus_rescan_devices(struct bus_type *);
933:	void bus_sort_breadthfirst(struct bus_type *, int (*)(const struct device *, const struct device *));
868:	void bus_unregister(struct bus_type *);
888:	int bus_unregister_notifier(struct bus_type *, struct notifier_block *);
1169:	int buses_init(void);
722:	int device_reprobe(struct device *);
1015:	void subsys_dev_iter_exit(struct subsys_dev_iter *);
968:	void subsys_dev_iter_init(struct subsys_dev_iter *, struct bus_type *, struct device *, const struct device_type *);
992:	struct device *subsys_dev_iter_next(struct subsys_dev_iter *);
352:	struct device *subsys_find_device_by_id(struct bus_type *, unsigned int, struct device *);
1021:	int subsys_interface_register(struct subsys_interface *);
1048:	void subsys_interface_unregister(struct subsys_interface *);
1138:	int subsys_system_register(struct bus_type *, const struct attribute_group **);
1156:	int subsys_virtual_register(struct bus_type *, const struct attribute_group **);
555:	static int add_probe_files(struct bus_type *);
205:	static ssize_t bind_store(struct device_driver *, const char *, size_t);
102:	static ssize_t bus_attr_show(struct kobject *, struct attribute *, char *);
114:	static ssize_t bus_attr_store(struct kobject *, struct attribute *, const char *, size_t);
152:	static void bus_release(struct kobject *);
166:	static int bus_uevent_filter(const struct kobject *);
758:	static ssize_t bus_uevent_store(struct bus_type *, const char *, size_t);
86:	static void driver_release(struct kobject *);
226:	static ssize_t drivers_autoprobe_show(struct bus_type *, char *);
231:	static ssize_t drivers_autoprobe_store(struct bus_type *, const char *, size_t);
241:	static ssize_t drivers_probe_store(struct bus_type *, const char *, size_t);
57:	static ssize_t drv_attr_show(struct kobject *, struct attribute *, char *);
69:	static ssize_t drv_attr_store(struct kobject *, struct attribute *, const char *, size_t);
742:	static void klist_devices_get(struct klist_node *);
750:	static void klist_devices_put(struct klist_node *);
570:	static void remove_probe_files(struct bus_type *);
1078:	static int subsys_register(struct bus_type *, const struct attribute_group **, struct kobject *);
1073:	static void system_root_device_release(struct device *);
576:	static ssize_t uevent_store(struct device_driver *, const char *, size_t);
182:	static ssize_t unbind_store(struct device_driver *, const char *, size_t);

File drivers/base/cacheinfo.c:
592:	const struct attribute_group *cache_get_priv_group(struct cacheinfo *);
236:	int cache_setup_acpi(unsigned int);
345:	int detect_cache_attributes(unsigned int);
31:	struct cpu_cacheinfo *get_cpu_cacheinfo(unsigned int);
335:	int init_cache_level(unsigned int);
67:	bool last_level_cache_is_shared(unsigned int, unsigned int);
54:	bool last_level_cache_is_valid(unsigned int);
340:	int populate_cache_leaves(unsigned int);
470:	static ssize_t allocation_policy_show(struct device *, struct device_attribute *, char *);
533:	static umode_t cache_default_attrs_is_visible(struct kobject *, struct attribute *, int);
692:	static int cacheinfo_cpu_online(unsigned int);
704:	static int cacheinfo_cpu_pre_down(unsigned int);
713:	static int cacheinfo_sysfs_init(void);
416:	static ssize_t coherency_line_size_show(struct device *, struct device_attribute *, char *);
613:	static void cpu_cache_sysfs_exit(unsigned int);
323:	static void free_cache_attributes(unsigned int);
414:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
415:	static ssize_t level_show(struct device *, struct device_attribute *, char *);
417:	static ssize_t number_of_sets_show(struct device *, struct device_attribute *, char *);
418:	static ssize_t physical_line_partition_show(struct device *, struct device_attribute *, char *);
438:	static ssize_t shared_cpu_list_show(struct device *, struct device_attribute *, char *);
429:	static ssize_t shared_cpu_map_show(struct device *, struct device_attribute *, char *);
421:	static ssize_t size_show(struct device *, struct device_attribute *, char *);
447:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
419:	static ssize_t ways_of_associativity_show(struct device *, struct device_attribute *, char *);
489:	static ssize_t write_policy_show(struct device *, struct device_attribute *, char *);

File drivers/base/class.c:
231:	struct class *__class_create(struct module *, const char *, struct lock_class_key *);
153:	int __class_register(struct class *, struct lock_class_key *);
536:	int class_compat_create_link(struct class_compat *, struct device *, struct device *);
502:	struct class_compat *class_compat_register(const char *);
569:	void class_compat_remove_link(struct class_compat *, struct device *, struct device *);
522:	void class_compat_unregister(struct class_compat *);
88:	int class_create_file_ns(struct class *, const struct class_attribute *, const void *);
266:	void class_destroy(struct class *);
333:	void class_dev_iter_exit(struct class_dev_iter *);
286:	void class_dev_iter_init(struct class_dev_iter *, struct class *, struct device *, const struct device_type *);
310:	struct device *class_dev_iter_next(struct class_dev_iter *);
404:	struct device *class_find_device(struct class *, struct device *, const void *, int (*)(struct device *, const void *));
357:	int class_for_each_device(struct class *, struct device *, void *, int (*)(struct device *, void *));
432:	int class_interface_register(struct class_interface *);
458:	void class_interface_unregister(struct class_interface *);
101:	void class_remove_file_ns(struct class *, const struct class_attribute *, const void *);
204:	void class_unregister(struct class *);
578:	int classes_init(void);
480:	ssize_t show_class_attr_string(struct class *, struct class_attribute *, char *);
25:	static ssize_t class_attr_show(struct kobject *, struct attribute *, char *);
37:	static ssize_t class_attr_store(struct kobject *, struct attribute *, const char *, size_t);
65:	static const struct kobj_ns_type_operations *class_child_ns_type(const struct kobject *);
211:	static void class_create_release(struct class *);
49:	static void class_release(struct kobject *);
127:	static void klist_class_dev_get(struct klist_node *);
134:	static void klist_class_dev_put(struct klist_node *);

File drivers/base/component.c:
787:	int component_add(struct device *, const struct component_ops *);
762:	int component_add_typed(struct device *, const struct component_ops *, int);
677:	int component_bind_all(struct device *, void *);
323:	int component_compare_dev(struct device *, void *);
338:	int component_compare_dev_name(struct device *, void *);
296:	int component_compare_of(struct device *, void *);
802:	void component_del(struct device *, const struct component_ops *);
512:	int component_master_add_with_match(struct device *, const struct component_master_ops *, struct component_match *);
557:	void component_master_del(struct device *, const struct component_master_ops *);
445:	void component_match_add_release(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), void *);
472:	void component_match_add_typed(struct device *, struct component_match **, int (*)(struct device *, int, void *), void *);
309:	void component_release_of(struct device *, void *);
594:	void component_unbind_all(struct device *, void *);
711:	static int __component_add(struct device *, const struct component_ops *, int);
381:	static void __component_match_add(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), int (*)(struct device *, int, void *), void *);
344:	static void devm_component_match_release(struct device *, void *);
227:	static int try_to_bring_up_aggregate_device(struct aggregate_device *, struct component *);

File drivers/base/container.c:
34:	void container_dev_init(void);
20:	static int container_offline(struct device *);
15:	static int trivial_online(struct device *);

File drivers/base/core.c:
4061:	struct device *__root_device_register(const char *, struct module *);
4762:	void _dev_alert(const struct device *, const char *, ...);
4763:	void _dev_crit(const struct device *, const char *, ...);
4761:	void _dev_emerg(const struct device *, const char *, ...);
4764:	void _dev_err(const struct device *, const char *, ...);
4767:	void _dev_info(const struct device *, const char *, ...);
4766:	void _dev_notice(const struct device *, const char *, ...);
4727:	void _dev_printk(const char *, const struct device *, const char *, ...);
4765:	void _dev_warn(const struct device *, const char *, ...);
2173:	const char *dev_driver_string(const struct device *);
4803:	int dev_err_probe(const struct device *, int, const char *, ...);
4702:	int dev_printk_emit(int, const struct device *, const char *, ...);
3261:	int dev_set_name(struct device *, const char *, ...);
4691:	int dev_vprintk_emit(int, const struct device *, const char *, va_list);
3360:	int device_add(struct device *);
2571:	int device_add_groups(struct device *, const struct attribute_group **);
4508:	int device_change_owner(struct device *, kuid_t, kgid_t);
4191:	struct device *device_create(struct class *, struct device *, dev_t, void *, const char *, ...);
2879:	int device_create_bin_file(struct device *, const struct bin_attribute *);
2825:	int device_create_file(struct device *, const struct device_attribute *);
4232:	struct device *device_create_with_groups(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, ...);
3621:	void device_del(struct device *);
4257:	void device_destroy(struct class *, dev_t);
3911:	struct device *device_find_any_child(struct device *);
3851:	struct device *device_find_child(struct device *, void *, int (*)(struct device *, void *));
3879:	struct device *device_find_child_by_name(struct device *, const char *);
3786:	int device_for_each_child(struct device *, void *, int (*)(struct device *, void *));
3816:	int device_for_each_child_reverse(struct device *, void *, int (*)(struct device *, void *));
3742:	const char *device_get_devnode(struct device *, umode_t *, kuid_t *, kgid_t *, const char **);
2938:	void device_initialize(struct device *);
283:	int device_is_dependent(struct device *, void *);
698:	struct device_link *device_link_add(struct device *, struct device *, u32);
928:	void device_link_del(struct device_link *);
944:	void device_link_remove(void *, struct device *);
1493:	bool device_links_busy(struct device *);
1003:	int device_links_check_suppliers(struct device *);
1259:	void device_links_driver_bound(struct device *);
1448:	void device_links_driver_cleanup(struct device *);
1227:	void device_links_force_bind(struct device *);
1411:	void device_links_no_driver(struct device *);
198:	int device_links_read_lock(void);
208:	int device_links_read_lock_held(void);
203:	void device_links_read_unlock(int);
1145:	void device_links_supplier_sync_state_pause(void);
1152:	void device_links_supplier_sync_state_resume(void);
1533:	void device_links_unbind_consumers(struct device *);
4939:	int device_match_acpi_dev(struct device *, const void *);
4945:	int device_match_acpi_handle(struct device *, const void *);
4951:	int device_match_any(struct device *, const void *);
4933:	int device_match_devt(struct device *, const void *);
4927:	int device_match_fwnode(struct device *, const void *);
4915:	int device_match_name(struct device *, const void *);
4921:	int device_match_of_node(struct device *, const void *);
4367:	int device_move(struct device *, struct device *, enum dpm_order);
3965:	int device_offline(struct device *);
4003:	int device_online(struct device *);
393:	void device_pm_move_to_tail(struct device *);
3557:	int device_register(struct device *);
2894:	void device_remove_bin_file(struct device *, const struct bin_attribute *);
2849:	void device_remove_file(struct device *, const struct device_attribute *);
2864:	bool device_remove_file_self(struct device *, const struct device_attribute *);
2577:	void device_remove_groups(struct device *, const struct attribute_group **);
4308:	int device_rename(struct device *, const char *);
4908:	void device_set_node(struct device *, struct fwnode_handle *);
4900:	void device_set_of_node_from_dev(struct device *, const struct device *);
2291:	ssize_t device_show_bool(struct device *, struct device_attribute *, char *);
2269:	ssize_t device_show_int(struct device *, struct device_attribute *, char *);
2240:	ssize_t device_show_ulong(struct device *, struct device_attribute *, char *);
4573:	void device_shutdown(void);
2279:	ssize_t device_store_bool(struct device *, struct device_attribute *, const char *, size_t);
2249:	ssize_t device_store_int(struct device *, struct device_attribute *, const char *, size_t);
2223:	ssize_t device_store_ulong(struct device *, struct device_attribute *, const char *, size_t);
3695:	void device_unregister(struct device *);
3917:	int devices_init(void);
2810:	void devices_kset_move_last(struct device *);
2617:	int devm_device_add_group(struct device *, const struct attribute_group *);
2652:	int devm_device_add_groups(struct device *, const struct attribute_group **);
1694:	void fw_devlink_drivers_done(void);
1636:	u32 fw_devlink_get_flags(void);
1646:	bool fw_devlink_is_strict(void);
168:	void fw_devlink_purge_absent_suppliers(struct fwnode_handle *);
77:	int fwnode_link_add(struct fwnode_handle *, struct fwnode_handle *);
162:	void fwnode_links_purge(struct fwnode_handle *);
3572:	struct device *get_device(struct device *);
3590:	bool kill_device(struct device *);
2112:	void lock_device_hotplug(void);
2122:	int lock_device_hotplug_sysfs(void);
3582:	void put_device(struct device *);
4108:	void root_device_unregister(struct device *);
4844:	void set_primary_fwnode(struct device *, struct fwnode_handle *);
4880:	void set_secondary_fwnode(struct device *, struct fwnode_handle *);
2117:	void unlock_device_hotplug(void);
2964:	struct kobject *virtual_device_parent(struct device *);
1736:	void wait_for_init_devices_probe(void);
4717:	static void __dev_printk(const char *, const struct device *, struct va_format *);
2031:	static void __fw_devlink_link_to_suppliers(struct device *, struct fwnode_handle *);
439:	static ssize_t auto_remove_on_show(struct device *, struct device_attribute *, char *);
2989:	static const struct kobj_ns_type_operations *class_dir_child_ns_type(const struct kobject *);
2982:	static void class_dir_release(struct kobject *);
2188:	static ssize_t dev_attr_show(struct kobject *, struct attribute *, char *);
2204:	static ssize_t dev_attr_store(struct kobject *, struct attribute *, const char *, size_t);
2764:	static ssize_t dev_show(struct device *, struct device_attribute *, char *);
2390:	static int dev_uevent(struct kobject *, struct kobj_uevent_env *);
2365:	static int dev_uevent_filter(const struct kobject *);
2379:	static const char *dev_uevent_name(const struct kobject *);
2675:	static int device_add_attrs(struct device *);
3943:	static int device_check_offline(struct device *, void *);
4127:	static struct device *device_create_groups_vargs(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, va_list);
4120:	static void device_create_release(struct device *);
3296:	static int device_create_sys_dev_entry(struct device *);
2349:	static void device_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
1193:	static void device_link_drop_managed(struct device_link *);
315:	static void device_link_init_status(struct device_link *, struct device *, struct device *);
909:	static void device_link_put_kref(struct device_link *);
484:	static void device_link_release_fn(struct work_struct *);
2338:	static const void *device_namespace(const struct kobject *);
2308:	static void device_release(struct kobject *);
2742:	static void device_remove_attrs(struct device *);
3238:	static void device_remove_class_symlinks(struct device *);
359:	static int device_reorder_to_tail(struct device *, void *);
2795:	static void devices_kset_move_after(struct device *, struct device *);
2779:	static void devices_kset_move_before(struct device *, struct device *);
530:	static int devlink_add_symlinks(struct device *, struct class_interface *);
617:	static int devlink_class_init(void);
509:	static void devlink_dev_release(struct device *);
580:	static void devlink_remove_symlinks(struct device *, struct class_interface *);
2589:	static void devm_attr_group_remove(struct device *, void *);
2598:	static void devm_attr_groups_remove(struct device *, void *);
1833:	static int fw_devlink_create_devlink(struct device *, struct fwnode_handle *, u32);
2087:	static void fw_devlink_link_device(struct device *);
1684:	static int fw_devlink_no_driver(struct device *, void *);
1660:	static void fw_devlink_parse_fwtree(struct fwnode_handle *);
1786:	static int fw_devlink_relax_cycle(struct device *, void *);
1611:	static int fw_devlink_setup(char *);
1630:	static int fw_devlink_strict_setup(char *);
1759:	static void fw_devlink_unblock_consumers(struct device *);
3026:	static struct kobject *get_device_parent(struct device *, struct device *);
2902:	static void klist_children_get(struct klist_node *);
2910:	static void klist_children_put(struct klist_node *);
2521:	static ssize_t online_show(struct device *, struct device_attribute *, char *);
2532:	static ssize_t online_store(struct device *, struct device_attribute *, const char *, size_t);
2552:	static ssize_t removable_show(struct device *, struct device_attribute *, char *);
4034:	static void root_device_release(struct device *);
456:	static ssize_t runtime_pm_show(struct device *, struct device_attribute *, char *);
406:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
465:	static ssize_t sync_state_only_show(struct device *, struct device_attribute *, char *);
1180:	static int sync_state_resume_initcall(void);
2462:	static ssize_t uevent_show(struct device *, struct device_attribute *, char *);
2505:	static ssize_t uevent_store(struct device *, struct device_attribute *, const char *, size_t);
1200:	static ssize_t waiting_for_supplier_show(struct device *, struct device_attribute *, char *);

File drivers/base/cpu.c:
622:	void cpu_dev_init(void);
440:	struct device *cpu_device_create(struct device *, void *, const struct attribute_group **, const char *, ...);
487:	bool cpu_is_hotpluggable(unsigned int);
555:	ssize_t cpu_show_itlb_multihit(struct device *, struct device_attribute *, char *);
536:	ssize_t cpu_show_l1tf(struct device *, struct device_attribute *, char *);
542:	ssize_t cpu_show_mds(struct device *, struct device_attribute *, char *);
512:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
567:	ssize_t cpu_show_mmio_stale_data(struct device *, struct device_attribute *, char *);
573:	ssize_t cpu_show_retbleed(struct device *, struct device_attribute *, char *);
530:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
518:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
524:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
561:	ssize_t cpu_show_srbds(struct device *, struct device_attribute *, char *);
548:	ssize_t cpu_show_tsx_async_abort(struct device *, struct device_attribute *, char *);
391:	struct device *get_cpu_device(unsigned int);
359:	int register_cpu(struct cpu *, int);
75:	void unregister_cpu(struct cpu *);
296:	static void cpu_device_release(struct device *);
611:	static void cpu_register_vulnerabilities(void);
28:	static int cpu_subsys_match(struct device *, struct device_driver *);
70:	static int cpu_subsys_offline(struct device *);
47:	static int cpu_subsys_online(struct device *);
339:	static int cpu_uevent(struct device *, struct kobj_uevent_env *);
400:	static void device_create_release(struct device *);
316:	static ssize_t print_cpu_modalias(struct device *, struct device_attribute *, char *);
268:	static ssize_t print_cpus_isolated(struct device *, struct device_attribute *, char *);
228:	static ssize_t print_cpus_kernel_max(struct device *, struct device_attribute *, char *);
238:	static ssize_t print_cpus_offline(struct device *, struct device_attribute *, char *);
206:	static ssize_t show_cpus_attr(struct device *, struct device_attribute *, char *);

File drivers/base/dd.c:
323:	void deferred_probe_extend_timeout(void);
1049:	int device_attach(struct device *);
496:	int device_bind_driver(struct device *);
203:	void device_block_probing(void);
1100:	int device_driver_attach(struct device_driver *, struct device *);
1313:	void device_driver_detach(struct device *);
1055:	void device_initial_probe(struct device *);
388:	bool device_is_bound(struct device *);
1295:	void device_release_driver(struct device *);
1272:	void device_release_driver_internal(struct device *, struct device_driver *, struct device *);
227:	void device_set_deferred_probe_reason(const struct device *, struct va_format *);
216:	void device_unblock_probing(void);
1209:	int driver_attach(struct device_driver *);
132:	void driver_deferred_probe_add(struct device *);
290:	int driver_deferred_probe_check_state(struct device *);
145:	void driver_deferred_probe_del(struct device *);
175:	void driver_deferred_probe_trigger(void);
1322:	void driver_detach(struct device_driver *);
732:	int driver_probe_done(void);
746:	void wait_for_device_probe(void);
978:	static int __device_attach(struct device *, bool);
942:	static void __device_attach_async_helper(void *, async_cookie_t);
899:	static int __device_attach_driver(struct device_driver *, void *);
1134:	static int __driver_attach(struct device *, void *);
1117:	static void __driver_attach_async_helper(void *, async_cookie_t);
423:	static ssize_t coredump_store(struct device *, struct device_attribute *, const char *, size_t);
373:	static void deferred_probe_exit(void);
344:	static int deferred_probe_initcall(void);
267:	static int deferred_probe_timeout_setup(char *);
306:	static void deferred_probe_timeout_work_func(struct work_struct *);
81:	static void deferred_probe_work_func(struct work_struct *);
542:	static void device_remove(struct device *);
393:	static void driver_bound(struct device *);
802:	static int driver_probe_device(struct device_driver *, struct device *);
434:	static int driver_sysfs_add(struct device *);
584:	static int really_probe(struct device *, struct device_driver *);
834:	static int save_async_options(char *);
515:	static ssize_t state_synced_show(struct device *, struct device_attribute *, char *);

File drivers/base/devcoredump.c:
323:	void dev_coredumpm(struct device *, struct module *, void *, size_t, gfp_t, ssize_t (*)(char *, loff_t, size_t, void *, size_t), void (*)(void *));
407:	void dev_coredumpsg(struct device *, struct scatterlist *, size_t, gfp_t);
256:	void dev_coredumpv(struct device *, void *, size_t, gfp_t);
111:	static ssize_t devcd_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
121:	static ssize_t devcd_data_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
101:	static void devcd_del(struct work_struct *);
82:	static void devcd_dev_release(struct device *);
157:	static int devcd_free(struct device *, void *);
278:	static void devcd_free_sgtable(void *);
241:	static void devcd_freev(void *);
263:	static int devcd_match_failing(struct device *, const void *);
293:	static ssize_t devcd_read_from_sgtable(char *, loff_t, size_t, void *, size_t);
235:	static ssize_t devcd_readv(char *, loff_t, size_t, void *, size_t);
421:	static void devcoredump_exit(void);
415:	static int devcoredump_init(void);
170:	static ssize_t disabled_show(struct class *, struct class_attribute *, char *);
200:	static ssize_t disabled_store(struct class *, struct class_attribute *, const char *, size_t);

File drivers/base/devres.c:
1191:	void *__devm_alloc_percpu(struct device *, size_t, size_t);
162:	void *__devres_alloc_node(dr_release_t, size_t, gfp_t, int, const char *);
733:	int devm_add_action(struct device *, void (*)(void *), void *);
1155:	void devm_free_pages(struct device *, unsigned long);
1222:	void devm_free_percpu(struct device *, void *);
1121:	unsigned long devm_get_free_pages(struct device *, gfp_t, unsigned int);
1030:	char *devm_kasprintf(struct device *, gfp_t, const char *, ...);
1050:	void devm_kfree(struct device *, const void *);
820:	void *devm_kmalloc(struct device *, size_t, gfp_t);
1076:	void *devm_kmemdup(struct device *, const void *, size_t, gfp_t);
858:	void *devm_krealloc(struct device *, void *, size_t, gfp_t);
949:	char *devm_kstrdup(struct device *, const char *, gfp_t);
978:	const char *devm_kstrdup_const(struct device *, const char *, gfp_t);
998:	char *devm_kvasprintf(struct device *, gfp_t, const char *, va_list);
781:	void devm_release_action(struct device *, void (*)(void *), void *);
759:	void devm_remove_action(struct device *, void (*)(void *), void *);
243:	void devres_add(struct device *, void *);
609:	void devres_close_group(struct device *, void *);
390:	int devres_destroy(struct device *, dr_release_t, dr_match_t, void *);
286:	void *devres_find(struct device *, dr_release_t, dr_match_t, void *);
190:	void devres_for_each_res(struct device *, dr_release_t, dr_match_t, void *, void (*)(struct device *, void *, void *), void *);
223:	void devres_free(void *);
316:	void *devres_get(struct device *, void *, dr_match_t, void *);
552:	void *devres_open_group(struct device *, void *, gfp_t);
420:	int devres_release(struct device *, dr_release_t, dr_match_t, void *);
517:	int devres_release_all(struct device *);
668:	int devres_release_group(struct device *, void *);
352:	void *devres_remove(struct device *, dr_release_t, dr_match_t, void *);
635:	void devres_remove_group(struct device *, void *);
717:	static void devm_action_release(struct device *, void *);
797:	static void devm_kmalloc_release(struct device *, void *);
1101:	static void devm_pages_release(struct device *, void *);
1164:	static void devm_percpu_release(struct device *, void *);
83:	static void group_close_release(struct device *, void *);
78:	static void group_open_release(struct device *, void *);
435:	static int remove_nodes(struct device *, struct list_head *, struct list_head *, struct list_head *);

File drivers/base/devtmpfs.c:
121:	int devtmpfs_create_node(struct device *);
148:	int devtmpfs_delete_node(struct device *);
456:	int devtmpfs_init(void);
367:	int devtmpfs_mount(void);
419:	static int devtmpfs_setup(void *);
396:	static void devtmpfs_work_loop(void);
441:	static int devtmpfsd(void *);
55:	static int mount_param(char *);
64:	static struct dentry *public_dev_mount(struct file_system_type *, int, const char *, void *);

File drivers/base/driver.c:
202:	int driver_add_groups(struct device_driver *, const struct attribute_group **);
176:	int driver_create_file(struct device_driver *, const struct driver_attribute *);
290:	struct device_driver *driver_find(const char *, struct bus_type *);
151:	struct device *driver_find_device(struct device_driver *, struct device *, const void *, int (*)(struct device *, const void *));
117:	int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));
222:	int driver_register(struct device_driver *);
194:	void driver_remove_file(struct device_driver *, const struct driver_attribute *);
208:	void driver_remove_groups(struct device_driver *, const struct attribute_group **);
48:	int driver_set_override(struct device *, const char **, const char *, size_t);
267:	void driver_unregister(struct device_driver *);

File drivers/base/firmware.c:
20:	int firmware_init(void);

File drivers/base/firmware_loader/builtin/main.c:
95:	bool firmware_is_builtin(const struct firmware *);
47:	bool firmware_request_builtin(struct firmware *, const char *);
86:	bool firmware_request_builtin_buf(struct firmware *, const char *, void *, size_t);

File drivers/base/firmware_loader/fallback.c:
220:	int firmware_fallback_sysfs(struct firmware *, const char *, struct device *, u32, int);
24:	void fw_fallback_set_cache_timeout(void);
31:	void fw_fallback_set_default_timeout(void);
49:	void kill_pending_fw_fallback_reqs(bool);

File drivers/base/firmware_loader/fallback_table.c:
51:	int register_firmware_config_sysctl(void);
62:	void unregister_firmware_config_sysctl(void);

File drivers/base/firmware_loader/main.c:
167:	int alloc_lookup_fw_priv(const char *, struct firmware_cache *, struct fw_priv **, void *, size_t, size_t, u32);
681:	int assign_fw(struct firmware *, struct device *);
998:	int firmware_request_cache(struct device *, const char *);
923:	int firmware_request_nowarn(const struct firmware **, const char *, struct device *);
972:	int firmware_request_platform(const struct firmware **, const char *, struct device *);
224:	void free_fw_priv(struct fw_priv *);
238:	void fw_free_paged_buf(struct fw_priv *);
257:	int fw_grow_paged_buf(struct fw_priv *, int);
233:	bool fw_is_paged_buf(struct fw_priv *);
290:	int fw_map_paged_buf(struct fw_priv *);
97:	void fw_state_init(struct fw_priv *);
1077:	void release_firmware(const struct firmware *);
896:	int request_firmware(const struct firmware **, const char *, struct device *);
948:	int request_firmware_direct(const struct firmware **, const char *, struct device *);
1026:	int request_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t);
1139:	int request_firmware_nowait(struct module *, bool, const char *, struct device *, gfp_t, void *, void (*)(const struct firmware *, void *));
1055:	int request_partial_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t, size_t);
796:	static int _request_firmware(const struct firmware **, const char *, struct device *, void *, size_t, size_t, u32);
1591:	static void firmware_class_exit(void);
1569:	static int firmware_class_init(void);
1553:	static int fw_shutdown_notify(struct notifier_block *, unsigned long, void *);
1098:	static void request_firmware_work_func(struct work_struct *);

File drivers/base/firmware_loader/sysfs.c:
15:	void __fw_load_abort(struct fw_priv *);
396:	struct fw_sysfs *fw_create_instance(struct firmware *, const char *, struct device *, u32);
111:	int register_sysfs_loader(void);
120:	void unregister_sysfs_loader(void);
261:	static ssize_t firmware_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
318:	static ssize_t firmware_data_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
126:	static ssize_t firmware_loading_show(struct device *, struct device_attribute *, char *);
153:	static ssize_t firmware_loading_store(struct device *, struct device_attribute *, const char *, size_t);
79:	static int firmware_uevent(const struct device *, struct kobj_uevent_env *);
92:	static void fw_dev_release(struct device *);
28:	static ssize_t timeout_show(struct class *, struct class_attribute *, char *);
47:	static ssize_t timeout_store(struct class *, struct class_attribute *, const char *, size_t);

File drivers/base/init.c:
21:	void driver_init(void);

File drivers/base/map.c:
95:	struct kobject *kobj_lookup(struct kobj_map *, dev_t, int *);
32:	int kobj_map(struct kobj_map *, dev_t, unsigned long, struct module *, kobj_probe_t *, int (*)(dev_t, void *), void *);
135:	struct kobj_map *kobj_map_init(kobj_probe_t *, struct mutex *);
68:	void kobj_unmap(struct kobj_map *, dev_t, unsigned long);

File drivers/base/node.c:
858:	int __register_one_node(int);
946:	void node_dev_init(void);
645:	int register_cpu_under_node(unsigned int, unsigned int);
681:	int register_memory_node_under_compute_node(unsigned int, unsigned int, unsigned int);
718:	int unregister_cpu_under_node(unsigned int, unsigned int);
631:	void unregister_node(struct node *);
881:	void unregister_one_node(int);
51:	static ssize_t cpulist_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
30:	static ssize_t cpumap_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
124:	static void node_access_release(struct device *);
593:	static void node_device_release(struct device *);
129:	static struct node_access_nodes *node_init_node_access(struct node *, unsigned int);
543:	static ssize_t node_read_distance(struct device *, struct device_attribute *, char *);
370:	static ssize_t node_read_meminfo(struct device *, struct device_attribute *, char *);
489:	static ssize_t node_read_numastat(struct device *, struct device_attribute *, char *);
509:	static ssize_t node_read_vmstat(struct device *, struct device_attribute *, char *);
899:	static ssize_t show_node_state(struct device *, struct device_attribute *, char *);

File drivers/base/platform-msi.c:
269:	struct irq_domain *__platform_msi_create_device_domain(struct device *, unsigned int, bool, irq_write_msi_msg_t, const struct irq_domain_ops *, void *);
122:	struct irq_domain *platform_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
344:	int platform_msi_device_domain_alloc(struct irq_domain *, unsigned int, unsigned int);
321:	void platform_msi_device_domain_free(struct irq_domain *, unsigned int, unsigned int);
207:	int platform_msi_domain_alloc_irqs(struct device *, unsigned int, irq_write_msi_msg_t);
228:	void platform_msi_domain_free_irqs(struct device *);
243:	void *platform_msi_get_host_data(struct irq_domain *);
143:	static int platform_msi_alloc_priv_data(struct device *, unsigned int, irq_write_msi_msg_t);
52:	static int platform_msi_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
46:	static void platform_msi_set_desc(msi_alloc_info_t *, struct msi_desc *);
83:	static void platform_msi_write_msg(struct irq_data *, struct msi_msg *);

File drivers/base/platform.c:
972:	struct platform_device *__platform_create_bundle(struct platform_driver *, int (*)(struct platform_device *), struct resource *, unsigned int, const void *, size_t, struct module *);
906:	int __platform_driver_probe(struct platform_driver *, int (*)(struct platform_device *), struct module *);
861:	int __platform_driver_register(struct platform_driver *, struct module *);
1027:	int __platform_register_drivers(struct platform_driver * const *, unsigned int, struct module *);
99:	void *devm_platform_get_and_ioremap_resource(struct platform_device *, unsigned int, struct resource **);
334:	int devm_platform_get_irqs_affinity(struct platform_device *, struct irq_affinity *, unsigned int, unsigned int, int **);
122:	void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
142:	void *devm_platform_ioremap_resource_byname(struct platform_device *, const char *);
1509:	void early_platform_cleanup(void);
503:	int platform_add_devices(struct platform_device **, int);
1511:	int platform_bus_init(void);
656:	int platform_device_add(struct platform_device *);
632:	int platform_device_add_data(struct platform_device *, const void *, size_t);
604:	int platform_device_add_resources(struct platform_device *, const struct resource *, unsigned int);
576:	struct platform_device *platform_device_alloc(const char *, int);
746:	void platform_device_del(struct platform_device *);
548:	void platform_device_put(struct platform_device *);
775:	int platform_device_register(struct platform_device *);
806:	struct platform_device *platform_device_register_full(const struct platform_device_info *);
791:	void platform_device_unregister(struct platform_device *);
875:	void platform_driver_unregister(struct platform_driver *);
1501:	struct device *platform_find_device_by_driver(struct device *, const struct device_driver *);
259:	int platform_get_irq(struct platform_device *, unsigned int);
469:	int platform_get_irq_byname(struct platform_device *, const char *);
491:	int platform_get_irq_byname_optional(struct platform_device *, const char *);
171:	int platform_get_irq_optional(struct platform_device *, unsigned int);
70:	struct resource *platform_get_mem_or_io(struct platform_device *, unsigned int);
55:	struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
419:	struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);
278:	int platform_irq_count(struct platform_device *);
1065:	void platform_unregister_drivers(struct platform_driver * const *, unsigned int);
438:	static int __platform_get_irq_byname(struct platform_device *, const char *);
1490:	static int __platform_match(struct device *, const void *);
306:	static void devm_platform_get_irqs_affinity_release(struct device *, void *);
1264:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
1277:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
1239:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
1257:	static ssize_t numa_node_show(struct device *, struct device_attribute *, char *);
1299:	static umode_t platform_dev_attrs_visible(struct kobject *, struct attribute *, int);
555:	static void platform_device_release(struct device *);
1463:	static void platform_dma_cleanup(struct device *);
1441:	static int platform_dma_configure(struct device *);
1331:	static int platform_match(struct device *, struct device_driver *);
1375:	static int platform_probe(struct device *);
881:	static int platform_probe_fail(struct platform_device *);
1414:	static void platform_remove(struct device *);
1428:	static void platform_shutdown(struct device *);
1356:	static int platform_uevent(struct device *, struct kobj_uevent_env *);

File drivers/base/power/clock_ops.c:
796:	void pm_clk_add_notifier(struct bus_type *, struct pm_clk_notifier_block *);
750:	static int pm_clk_notify(struct notifier_block *, unsigned long, void *);

File drivers/base/property.c:
20:	struct fwnode_handle *__dev_fwnode(struct device *);
27:	const struct fwnode_handle *__dev_fwnode_const(const struct device *);
875:	bool device_dma_supported(const struct device *);
863:	unsigned int device_get_child_node_count(const struct device *);
881:	enum dev_dma_attr device_get_dma_attr(const struct device *);
1217:	const void *device_get_match_data(const struct device *);
804:	struct fwnode_handle *device_get_named_child_node(const struct device *, const char *);
767:	struct fwnode_handle *device_get_next_child_node(const struct device *, struct fwnode_handle *);
926:	int device_get_phy_mode(struct device *);
245:	int device_property_match_string(struct device *, const char *, const char *);
41:	bool device_property_present(struct device *, const char *);
223:	int device_property_read_string(struct device *, const char *, const char **);
201:	int device_property_read_string_array(struct device *, const char *, const char **, size_t);
117:	int device_property_read_u16_array(struct device *, const char *, u16 *, size_t);
145:	int device_property_read_u32_array(struct device *, const char *, u32 *, size_t);
173:	int device_property_read_u64_array(struct device *, const char *, u64 *, size_t);
89:	int device_property_read_u8_array(struct device *, const char *, u8 *, size_t);
1299:	void *fwnode_connection_find_match(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t);
1336:	int fwnode_connection_find_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);
656:	unsigned int fwnode_count_parents(const struct fwnode_handle *);
847:	bool fwnode_device_is_available(const struct fwnode_handle *);
553:	struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *, const char *, unsigned int);
572:	const char *fwnode_get_name(const struct fwnode_handle *);
585:	const char *fwnode_get_name_prefix(const struct fwnode_handle *);
792:	struct fwnode_handle *fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
744:	struct fwnode_handle *fwnode_get_next_available_child_node(const struct fwnode_handle *, struct fwnode_handle *);
730:	struct fwnode_handle *fwnode_get_next_child_node(const struct fwnode_handle *, struct fwnode_handle *);
614:	struct fwnode_handle *fwnode_get_next_parent(struct fwnode_handle *);
635:	struct device *fwnode_get_next_parent_dev(struct fwnode_handle *);
680:	struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *, unsigned int);
597:	struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *);
898:	int fwnode_get_phy_mode(struct fwnode_handle *);
1128:	struct fwnode_handle *fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *, u32, u32, unsigned long);
1183:	unsigned int fwnode_graph_get_endpoint_count(struct fwnode_handle *, unsigned long);
997:	struct fwnode_handle *fwnode_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
1036:	struct fwnode_handle *fwnode_graph_get_port_parent(const struct fwnode_handle *);
1089:	struct fwnode_handle *fwnode_graph_get_remote_endpoint(const struct fwnode_handle *);
1076:	struct fwnode_handle *fwnode_graph_get_remote_port(const struct fwnode_handle *);
1056:	struct fwnode_handle *fwnode_graph_get_remote_port_parent(const struct fwnode_handle *);
1208:	int fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
817:	struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *);
834:	void fwnode_handle_put(struct fwnode_handle *);
939:	void *fwnode_iomap(struct fwnode_handle *, int);
953:	int fwnode_irq_get(const struct fwnode_handle *, unsigned int);
973:	int fwnode_irq_get_byname(const struct fwnode_handle *, const char *);
705:	bool fwnode_is_ancestor_of(struct fwnode_handle *, struct fwnode_handle *);
519:	int fwnode_property_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
466:	int fwnode_property_match_string(const struct fwnode_handle *, const char *, const char *);
52:	bool fwnode_property_present(const struct fwnode_handle *, const char *);
442:	int fwnode_property_read_string(const struct fwnode_handle *, const char *, const char **);
408:	int fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
321:	int fwnode_property_read_u16_array(const struct fwnode_handle *, const char *, u16 *, size_t);
350:	int fwnode_property_read_u32_array(const struct fwnode_handle *, const char *, u32 *, size_t);
379:	int fwnode_property_read_u64_array(const struct fwnode_handle *, const char *, u64 *, size_t);
292:	int fwnode_property_read_u8_array(const struct fwnode_handle *, const char *, u8 *, size_t);
1257:	static unsigned int fwnode_devcon_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);
1223:	static unsigned int fwnode_graph_devcon_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);

File drivers/base/regmap/regcache-flat.c:
46:	static int regcache_flat_exit(struct regmap *);
21:	static int regcache_flat_init(struct regmap *);
54:	static int regcache_flat_read(struct regmap *, unsigned int, unsigned int *);
65:	static int regcache_flat_write(struct regmap *, unsigned int, unsigned int);

File drivers/base/regmap/regcache-rbtree.c:
505:	static int regcache_rbtree_drop(struct regmap *, unsigned int, unsigned int);
213:	static int regcache_rbtree_exit(struct regmap *);
184:	static int regcache_rbtree_init(struct regmap *);
242:	static int regcache_rbtree_read(struct regmap *, unsigned int, unsigned int *);
464:	static int regcache_rbtree_sync(struct regmap *, unsigned int, unsigned int);
368:	static int regcache_rbtree_write(struct regmap *, unsigned int, unsigned int);

File drivers/base/regmap/regcache.c:
545:	void regcache_cache_bypass(struct regmap *, bool);
501:	void regcache_cache_only(struct regmap *, bool);
469:	int regcache_drop_region(struct regmap *, unsigned int, unsigned int);
212:	void regcache_exit(struct regmap *);
601:	unsigned int regcache_get_val(struct regmap *, const void *, unsigned int);
115:	int regcache_init(struct regmap *, const struct regmap_config *);
650:	int regcache_lookup_reg(struct regmap *, unsigned int);
525:	void regcache_mark_dirty(struct regmap *);
239:	int regcache_read(struct regmap *, unsigned int, unsigned int *);
555:	bool regcache_set_val(struct regmap *, void *, unsigned int, unsigned int);
345:	int regcache_sync(struct regmap *);
781:	int regcache_sync_block(struct regmap *, void *, unsigned long *, unsigned int, unsigned int, unsigned int);
414:	int regcache_sync_region(struct regmap *, unsigned int, unsigned int);
270:	int regcache_write(struct regmap *, unsigned int, unsigned int);
642:	static int regcache_default_cmp(const void *, const void *);
300:	static int regcache_default_sync(struct regmap *, unsigned int, unsigned int);
26:	static int regcache_hw_init(struct regmap *);

File drivers/base/regmap/regmap-i2c.c:
384:	struct regmap *__devm_regmap_init_i2c(struct i2c_client *, const struct regmap_config *, struct lock_class_key *, const char *);
369:	struct regmap *__regmap_init_i2c(struct i2c_client *, const struct regmap_config *, struct lock_class_key *, const char *);
306:	static const struct regmap_bus *regmap_get_i2c_bus(struct i2c_client *, const struct regmap_config *);
138:	static int regmap_i2c_gather_write(void *, const void *, size_t, const void *, size_t);
172:	static int regmap_i2c_read(void *, const void *, size_t, void *, size_t);
222:	static int regmap_i2c_smbus_i2c_read(void *, const void *, size_t, void *, size_t);
263:	static int regmap_i2c_smbus_i2c_read_reg16(void *, const void *, size_t, void *, size_t);
208:	static int regmap_i2c_smbus_i2c_write(void *, const void *, size_t);
249:	static int regmap_i2c_smbus_i2c_write_reg16(void *, const void *, size_t);
123:	static int regmap_i2c_write(void *, const void *, size_t);
15:	static int regmap_smbus_byte_reg_read(void *, unsigned int, unsigned int *);
34:	static int regmap_smbus_byte_reg_write(void *, unsigned int, unsigned int);
87:	static int regmap_smbus_word_read_swapped(void *, unsigned int, unsigned int *);
51:	static int regmap_smbus_word_reg_read(void *, unsigned int, unsigned int *);
70:	static int regmap_smbus_word_reg_write(void *, unsigned int, unsigned int);
106:	static int regmap_smbus_word_write_swapped(void *, unsigned int, unsigned int);

File drivers/base/regmap/regmap-irq.c:
1248:	int devm_regmap_add_irq_chip(struct device *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1203:	int devm_regmap_add_irq_chip_fwnode(struct device *, struct fwnode_handle *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1268:	void devm_regmap_del_irq_chip(struct device *, int, struct regmap_irq_chip_data *);
1108:	int regmap_add_irq_chip(struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
723:	int regmap_add_irq_chip_fwnode(struct fwnode_handle *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1125:	void regmap_del_irq_chip(int, struct regmap_irq_chip_data *);
1289:	int regmap_irq_chip_get_base(struct regmap_irq_chip_data *);
1324:	struct irq_domain *regmap_irq_get_domain(struct regmap_irq_chip_data *);
630:	unsigned int regmap_irq_get_irq_reg_linear(struct regmap_irq_chip_data *, unsigned int, int);
1304:	int regmap_irq_get_virq(struct regmap_irq_chip_data *, int);
663:	int regmap_irq_set_type_config_simple(unsigned int **, unsigned int, const struct regmap_irq *, int);
1174:	static int devm_regmap_irq_chip_match(struct device *, void *, void *);
1167:	static void devm_regmap_irq_chip_release(struct device *, void *);
274:	static void regmap_irq_disable(struct irq_data *);
245:	static void regmap_irq_enable(struct irq_data *);
76:	static void regmap_irq_lock(struct irq_data *);
602:	static int regmap_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
283:	static int regmap_irq_set_type(struct irq_data *, unsigned int);
345:	static int regmap_irq_set_wake(struct irq_data *, unsigned int);
83:	static void regmap_irq_sync_unlock(struct irq_data *);
413:	static irqreturn_t regmap_irq_thread(int, void *);

File drivers/base/regmap/regmap-mmio.c:
596:	struct regmap *__devm_regmap_init_mmio_clk(struct device *, const char *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
579:	struct regmap *__regmap_init_mmio_clk(struct device *, const char *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
614:	int regmap_mmio_attach_clk(struct regmap *, struct clk *);
625:	void regmap_mmio_detach_clk(struct regmap *);
409:	static void regmap_mmio_free_context(void *);
431:	static struct regmap_mmio_context *regmap_mmio_gen_context(struct device *, const char *, void *, const struct regmap_config *);
289:	static unsigned int regmap_mmio_ioread16be(struct regmap_mmio_context *, unsigned int);
277:	static unsigned int regmap_mmio_ioread16le(struct regmap_mmio_context *, unsigned int);
319:	static unsigned int regmap_mmio_ioread32be(struct regmap_mmio_context *, unsigned int);
307:	static unsigned int regmap_mmio_ioread32le(struct regmap_mmio_context *, unsigned int);
259:	static unsigned int regmap_mmio_ioread8(struct regmap_mmio_context *, unsigned int);
112:	static void regmap_mmio_iowrite16be(struct regmap_mmio_context *, unsigned int, unsigned int);
99:	static void regmap_mmio_iowrite16le(struct regmap_mmio_context *, unsigned int, unsigned int);
145:	static void regmap_mmio_iowrite32be(struct regmap_mmio_context *, unsigned int, unsigned int);
132:	static void regmap_mmio_iowrite32le(struct regmap_mmio_context *, unsigned int, unsigned int);
79:	static void regmap_mmio_iowrite8(struct regmap_mmio_context *, unsigned int, unsigned int);
344:	static int regmap_mmio_noinc_read(void *, unsigned int, void *, size_t);
170:	static int regmap_mmio_noinc_write(void *, unsigned int, const void *, size_t);
325:	static int regmap_mmio_read(void *, unsigned int, unsigned int *);
283:	static unsigned int regmap_mmio_read16be(struct regmap_mmio_context *, unsigned int);
265:	static unsigned int regmap_mmio_read16le(struct regmap_mmio_context *, unsigned int);
271:	static unsigned int regmap_mmio_read16le_relaxed(struct regmap_mmio_context *, unsigned int);
313:	static unsigned int regmap_mmio_read32be(struct regmap_mmio_context *, unsigned int);
295:	static unsigned int regmap_mmio_read32le(struct regmap_mmio_context *, unsigned int);
301:	static unsigned int regmap_mmio_read32le_relaxed(struct regmap_mmio_context *, unsigned int);
247:	static unsigned int regmap_mmio_read8(struct regmap_mmio_context *, unsigned int);
253:	static unsigned int regmap_mmio_read8_relaxed(struct regmap_mmio_context *, unsigned int);
151:	static int regmap_mmio_write(void *, unsigned int, unsigned int);
105:	static void regmap_mmio_write16be(struct regmap_mmio_context *, unsigned int, unsigned int);
85:	static void regmap_mmio_write16le(struct regmap_mmio_context *, unsigned int, unsigned int);
92:	static void regmap_mmio_write16le_relaxed(struct regmap_mmio_context *, unsigned int, unsigned int);
138:	static void regmap_mmio_write32be(struct regmap_mmio_context *, unsigned int, unsigned int);
118:	static void regmap_mmio_write32le(struct regmap_mmio_context *, unsigned int, unsigned int);
125:	static void regmap_mmio_write32le_relaxed(struct regmap_mmio_context *, unsigned int, unsigned int);
65:	static void regmap_mmio_write8(struct regmap_mmio_context *, unsigned int, unsigned int);
72:	static void regmap_mmio_write8_relaxed(struct regmap_mmio_context *, unsigned int, unsigned int);

File drivers/base/regmap/regmap.c:
1267:	struct regmap *__devm_regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
718:	struct regmap *__regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
2058:	int _regmap_raw_write(struct regmap *, unsigned int, const void *, size_t, bool);
1970:	int _regmap_write(struct regmap *, unsigned int, unsigned int);
1592:	struct regmap *dev_get_regmap(struct device *, const char *);
1318:	struct regmap_field *devm_regmap_field_alloc(struct device *, struct regmap *, struct reg_field);
1381:	int devm_regmap_field_bulk_alloc(struct device *, struct regmap *, struct regmap_field **, const struct reg_field *, int);
1426:	void devm_regmap_field_bulk_free(struct device *, struct regmap_field *);
1444:	void devm_regmap_field_free(struct device *, struct regmap_field *);
3361:	int regmap_async_complete(struct regmap *);
3320:	void regmap_async_complete_cb(struct regmap_async *, int);
627:	int regmap_attach_dev(struct device *, struct regmap *, const struct regmap_config *);
3154:	int regmap_bulk_read(struct regmap *, unsigned int, void *, size_t);
2391:	int regmap_bulk_write(struct regmap *, unsigned int, const void *, size_t);
104:	bool regmap_cached(struct regmap *, unsigned int);
1883:	bool regmap_can_raw_write(struct regmap *);
74:	bool regmap_check_range_table(struct regmap *, unsigned int, const struct regmap_access_table *);
1535:	void regmap_exit(struct regmap *);
1461:	struct regmap_field *regmap_field_alloc(struct regmap *, struct reg_field);
1346:	int regmap_field_bulk_alloc(struct regmap *, struct regmap_field **, const struct reg_field *, int);
1409:	void regmap_field_bulk_free(struct regmap_field *);
1481:	void regmap_field_free(struct regmap_field *);
3094:	int regmap_field_read(struct regmap_field *, unsigned int *);
2334:	int regmap_field_test_bits(struct regmap_field *, unsigned int);
2312:	int regmap_field_update_bits_base(struct regmap_field *, unsigned int, unsigned int, bool *, bool, bool);
3120:	int regmap_fields_read(struct regmap_field *, unsigned int, unsigned int *);
2361:	int regmap_fields_update_bits_base(struct regmap_field *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
1610:	struct device *regmap_get_device(struct regmap *);
3469:	int regmap_get_max_register(struct regmap *);
1894:	size_t regmap_get_raw_read_max(struct regmap *);
1905:	size_t regmap_get_raw_write_max(struct regmap *);
3483:	int regmap_get_reg_stride(struct regmap *);
3452:	int regmap_get_val_bytes(struct regmap *);
679:	enum regmap_endian regmap_get_val_endian(struct device *, const struct regmap_bus *, const struct regmap_config *);
3496:	bool regmap_might_sleep(struct regmap *);
2704:	int regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, int);
2737:	int regmap_multi_reg_write_bypassed(struct regmap *, const struct reg_sequence *, int);
3028:	int regmap_noinc_read(struct regmap *, unsigned int, void *, size_t);
2246:	int regmap_noinc_write(struct regmap *, unsigned int, const void *, size_t);
3502:	int regmap_parse_val(struct regmap *, const void *, unsigned int *);
164:	bool regmap_precious(struct regmap *, unsigned int);
2934:	int regmap_raw_read(struct regmap *, unsigned int, void *, size_t);
2112:	int regmap_raw_write(struct regmap *, unsigned int, const void *, size_t);
2781:	int regmap_raw_write_async(struct regmap *, unsigned int, const void *, size_t);
2906:	int regmap_read(struct regmap *, unsigned int, unsigned int *);
127:	bool regmap_readable(struct regmap *, unsigned int);
189:	bool regmap_readable_noinc(struct regmap *, unsigned int);
60:	bool regmap_reg_in_ranges(unsigned int, const struct regmap_range *, unsigned int);
3402:	int regmap_register_patch(struct regmap *, const struct reg_sequence *, int);
1501:	int regmap_reinit_cache(struct regmap *, const struct regmap_config *);
3308:	int regmap_test_bits(struct regmap *, unsigned int, unsigned int);
3277:	int regmap_update_bits_base(struct regmap *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
147:	bool regmap_volatile(struct regmap *, unsigned int);
2010:	int regmap_write(struct regmap *, unsigned int, unsigned int);
2037:	int regmap_write_async(struct regmap *, unsigned int, unsigned int);
90:	bool regmap_writeable(struct regmap *, unsigned int);
178:	bool regmap_writeable_noinc(struct regmap *, unsigned int);
1911:	static int _regmap_bus_formatted_write(void *, unsigned int, unsigned int);
1948:	static int _regmap_bus_raw_write(void *, unsigned int, unsigned int);
2846:	static int _regmap_bus_read(void *, unsigned int, unsigned int *);
2838:	static int _regmap_bus_reg_read(void *, unsigned int, unsigned int *);
1940:	static int _regmap_bus_reg_write(void *, unsigned int, unsigned int);
2606:	static int _regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, size_t);
2466:	static int _regmap_raw_multi_reg_write(struct regmap *, const struct reg_sequence *, size_t);
2805:	static int _regmap_raw_read(struct regmap *, unsigned int, void *, unsigned int, bool);
1679:	static int _regmap_raw_write_impl(struct regmap *, unsigned int, const void *, size_t, bool);
2864:	static int _regmap_read(struct regmap *, unsigned int, unsigned int *);
1616:	static int _regmap_select_page(struct regmap *, unsigned int *, struct regmap_range_node *, unsigned int);
1565:	static int dev_get_regmap_match(struct device *, void *, void *);
542:	static void dev_get_regmap_release(struct device *, void *);
1262:	static void devm_regmap_release(struct device *, void *);
256:	static void regmap_format_10_14_write(struct regmap *, unsigned int, unsigned int);
212:	static void regmap_format_12_20_write(struct regmap *, unsigned int, unsigned int);
273:	static void regmap_format_16_be(void *, unsigned int, unsigned int);
278:	static void regmap_format_16_le(void *, unsigned int, unsigned int);
283:	static void regmap_format_16_native(void *, unsigned int, unsigned int);
291:	static void regmap_format_24_be(void *, unsigned int, unsigned int);
224:	static void regmap_format_2_6_write(struct regmap *, unsigned int, unsigned int);
296:	static void regmap_format_32_be(void *, unsigned int, unsigned int);
301:	static void regmap_format_32_le(void *, unsigned int, unsigned int);
306:	static void regmap_format_32_native(void *, unsigned int, unsigned int);
232:	static void regmap_format_4_12_write(struct regmap *, unsigned int, unsigned int);
315:	static void regmap_format_64_be(void *, unsigned int, unsigned int);
320:	static void regmap_format_64_le(void *, unsigned int, unsigned int);
325:	static void regmap_format_64_native(void *, unsigned int, unsigned int);
246:	static void regmap_format_7_17_write(struct regmap *, unsigned int, unsigned int);
239:	static void regmap_format_7_9_write(struct regmap *, unsigned int, unsigned int);
266:	static void regmap_format_8(void *, unsigned int, unsigned int);
3514:	static int regmap_initcall(void);
448:	static void regmap_lock_hwlock(void *);
455:	static void regmap_lock_hwlock_irq(void *);
462:	static void regmap_lock_hwlock_irqsave(void *);
496:	static void regmap_lock_mutex(void *);
525:	static void regmap_lock_raw_spinlock(void *);
508:	static void regmap_lock_spinlock(void *);
491:	static void regmap_lock_unlock_none(void *);
2132:	static int regmap_noinc_readwrite(struct regmap *, unsigned int, void *, unsigned int, bool);
345:	static unsigned int regmap_parse_16_be(const void *);
355:	static void regmap_parse_16_be_inplace(void *);
350:	static unsigned int regmap_parse_16_le(const void *);
362:	static void regmap_parse_16_le_inplace(void *);
369:	static unsigned int regmap_parse_16_native(const void *);
377:	static unsigned int regmap_parse_24_be(const void *);
382:	static unsigned int regmap_parse_32_be(const void *);
392:	static void regmap_parse_32_be_inplace(void *);
387:	static unsigned int regmap_parse_32_le(const void *);
399:	static void regmap_parse_32_le_inplace(void *);
406:	static unsigned int regmap_parse_32_native(const void *);
415:	static unsigned int regmap_parse_64_be(const void *);
425:	static void regmap_parse_64_be_inplace(void *);
420:	static unsigned int regmap_parse_64_le(const void *);
432:	static void regmap_parse_64_le_inplace(void *);
439:	static unsigned int regmap_parse_64_native(const void *);
338:	static unsigned int regmap_parse_8(const void *);
334:	static void regmap_parse_inplace_noop(void *);
470:	static void regmap_unlock_hwlock(void *);
477:	static void regmap_unlock_hwlock_irq(void *);
484:	static void regmap_unlock_hwlock_irqrestore(void *);
502:	static void regmap_unlock_mutex(void *);
535:	static void regmap_unlock_raw_spinlock(void *);
518:	static void regmap_unlock_spinlock(void *);

File drivers/base/soc.c:
241:	const struct soc_device_attribute *soc_device_match(const struct soc_device_attribute *);
114:	struct soc_device *soc_device_register(struct soc_device_attribute *);
40:	struct device *soc_device_to_device(struct soc_device *);
172:	void soc_device_unregister(struct soc_device *);
45:	static umode_t soc_attribute_mode(struct kobject *, struct attribute *, int);
179:	static int soc_bus_register(void);
194:	static int soc_device_match_attr(const struct soc_device_attribute *, const struct soc_device_attribute *);
216:	static int soc_device_match_one(struct device *, void *);
67:	static ssize_t soc_info_show(struct device *, struct device_attribute *, char *);
103:	static void soc_release(struct device *);

File drivers/base/swnode.c:
1023:	int device_add_software_node(struct device *, const struct software_node *);
1096:	int device_create_managed_software_node(struct device *, const struct property_entry *, const struct software_node *);
1064:	void device_remove_software_node(struct device *);
975:	struct fwnode_handle *fwnode_create_software_node(const struct property_entry *, const struct fwnode_handle *);
1003:	void fwnode_remove_software_node(struct fwnode_handle *);
39:	bool is_software_node(const struct fwnode_handle *);
312:	struct property_entry *property_entries_dup(const struct property_entry *);
349:	void property_entries_free(const struct property_entry *);
693:	const struct software_node *software_node_find_by_name(const struct software_node *, const char *);
98:	struct fwnode_handle *software_node_fwnode(const struct software_node *);
1120:	void software_node_notify(struct device *);
1142:	void software_node_notify_remove(struct device *);
946:	int software_node_register(const struct software_node *);
893:	int software_node_register_node_group(const struct software_node **);
832:	int software_node_register_nodes(const struct software_node *);
964:	void software_node_unregister(const struct software_node *);
926:	void software_node_unregister_node_group(const struct software_node **);
871:	void software_node_unregister_nodes(const struct software_node *);
90:	const struct software_node *to_software_node(const struct fwnode_handle *);
160:	static int property_entry_read_int_array(const struct property_entry *, const char *, unsigned int, void *, size_t);
1169:	static void software_node_exit(void);
366:	static struct fwnode_handle *software_node_get(struct fwnode_handle *);
412:	static const char *software_node_get_name(const struct fwnode_handle *);
420:	static const char *software_node_get_name_prefix(const struct fwnode_handle *);
474:	static struct fwnode_handle *software_node_get_named_child_node(const struct fwnode_handle *, const char *);
452:	static struct fwnode_handle *software_node_get_next_child(const struct fwnode_handle *, struct fwnode_handle *);
441:	static struct fwnode_handle *software_node_get_parent(const struct fwnode_handle *);
493:	static int software_node_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
574:	static struct fwnode_handle *software_node_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
628:	static struct fwnode_handle *software_node_graph_get_port_parent(struct fwnode_handle *);
609:	static struct fwnode_handle *software_node_graph_get_remote_endpoint(const struct fwnode_handle *);
640:	static int software_node_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
1160:	static int software_node_init(void);
382:	static bool software_node_property_present(const struct fwnode_handle *, const char *);
375:	static void software_node_put(struct fwnode_handle *);
390:	static int software_node_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);
401:	static int software_node_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
745:	static void software_node_release(struct kobject *);
554:	static struct fwnode_handle *swnode_graph_find_next_port(const struct fwnode_handle *, struct fwnode_handle *);
769:	static struct fwnode_handle *swnode_register(const struct software_node *, struct swnode *, unsigned int);

File drivers/base/syscore.c:
21:	void register_syscore_ops(struct syscore_ops *);
114:	void syscore_shutdown(void);
33:	void unregister_syscore_ops(struct syscore_ops *);

File drivers/base/topology.c:
77:	static ssize_t cluster_cpus_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
77:	static ssize_t cluster_cpus_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
54:	static ssize_t cluster_id_show(struct device *, struct device_attribute *, char *);
68:	static ssize_t core_cpus_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
68:	static ssize_t core_cpus_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
58:	static ssize_t core_id_show(struct device *, struct device_attribute *, char *);
72:	static ssize_t core_siblings_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
72:	static ssize_t core_siblings_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
88:	static ssize_t package_cpus_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
88:	static ssize_t package_cpus_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
45:	static ssize_t physical_package_id_show(struct device *, struct device_attribute *, char *);
61:	static ssize_t ppin_show(struct device *, struct device_attribute *, char *);
64:	static ssize_t thread_siblings_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
64:	static ssize_t thread_siblings_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
172:	static int topology_add_dev(unsigned int);
155:	static umode_t topology_is_visible(struct kobject *, struct attribute *, int);
179:	static int topology_remove_dev(unsigned int);
187:	static int topology_sysfs_init(void);

File drivers/base/transport_class.c:
91:	int anon_transport_class_register(struct anon_transport_class *);
113:	void anon_transport_class_unregister(struct anon_transport_class *);
179:	int transport_add_device(struct device *);
51:	int transport_class_register(struct transport_class *);
65:	void transport_class_unregister(struct transport_class *);
212:	void transport_configure_device(struct device *);
280:	void transport_destroy_device(struct device *);
251:	void transport_remove_device(struct device *);
148:	void transport_setup_device(struct device *);
71:	static int anon_transport_dummy_function(struct transport_container *, struct device *, struct device *);
154:	static int transport_add_class_device(struct attribute_container *, struct device *, struct device *);
187:	static int transport_configure(struct attribute_container *, struct device *, struct device *);
257:	static void transport_destroy_classdev(struct attribute_container *, struct device *, struct device *);
218:	static int transport_remove_classdev(struct attribute_container *, struct device *, struct device *);
120:	static int transport_setup_classdev(struct attribute_container *, struct device *, struct device *);

File drivers/bus/simple-pm-bus.c:
91:	static void simple_pm_bus_driver_exit(void);
91:	static int simple_pm_bus_driver_init(void);
16:	static int simple_pm_bus_probe(struct platform_device *);
57:	static int simple_pm_bus_remove(struct platform_device *);

File drivers/char/hw_random/arm_smccc_trng.c:
119:	static void smccc_trng_driver_exit(void);
119:	static int smccc_trng_driver_init(void);
97:	static int smccc_trng_probe(struct platform_device *);
62:	static int smccc_trng_read(struct hwrng *, void *, size_t, bool);

File drivers/char/hw_random/core.c:
647:	int devm_hwrng_register(struct device *, struct hwrng *);
668:	void devm_hwrng_unregister(struct device *, struct hwrng *);
674:	long hwrng_msleep(struct hwrng *, unsigned int);
536:	int hwrng_register(struct hwrng *);
596:	void hwrng_unregister(struct hwrng *);
65:	static void add_early_randomness(struct hwrng *);
637:	static int devm_hwrng_match(struct device *, void *, void *);
632:	static void devm_hwrng_release(struct device *, void *);
304:	static int enable_best_rng(void);
493:	static int hwrng_fillfn(void *);
706:	static void hwrng_modexit(void);
682:	static int hwrng_modinit(void);
384:	static ssize_t rng_available_show(struct device *, struct device_attribute *, char *);
367:	static ssize_t rng_current_show(struct device *, struct device_attribute *, char *);
331:	static ssize_t rng_current_store(struct device *, struct device_attribute *, const char *, size_t);
181:	static int rng_dev_open(struct inode *, struct file *);
210:	static ssize_t rng_dev_read(struct file *, char *, size_t, loff_t *);
412:	static ssize_t rng_quality_show(struct device *, struct device_attribute *, char *);
432:	static ssize_t rng_quality_store(struct device *, struct device_attribute *, const char *, size_t);
405:	static ssize_t rng_selected_show(struct device *, struct device_attribute *, char *);
88:	static int set_current_rng(struct hwrng *);
483:	static void unregister_miscdev(void);

File drivers/char/hw_random/omap-rng.c:
251:	static int eip76_rng_init(struct omap_rng_dev *);
377:	static int of_get_omap_rng_device_details(struct omap_rng_dev *, struct platform_device *);
233:	static void omap2_rng_cleanup(struct omap_rng_dev *);
222:	static u32 omap2_rng_data_present(struct omap_rng_dev *);
227:	static int omap2_rng_init(struct omap_rng_dev *);
308:	static void omap4_rng_cleanup(struct omap_rng_dev *);
246:	static u32 omap4_rng_data_present(struct omap_rng_dev *);
283:	static int omap4_rng_init(struct omap_rng_dev *);
317:	static irqreturn_t omap4_rng_irq(int, void *);
213:	static void omap_rng_cleanup(struct hwrng *);
175:	static int omap_rng_do_read(struct hwrng *, void *, size_t, bool);
568:	static void omap_rng_driver_exit(void);
568:	static int omap_rng_driver_init(void);
205:	static int omap_rng_init(struct hwrng *);
425:	static int omap_rng_probe(struct platform_device *);
514:	static int omap_rng_remove(struct platform_device *);

File drivers/char/ipmi/ipmi_bt_sm.c:
679:	static void bt_cleanup(struct si_sm_data *);
617:	static int bt_detect(struct si_sm_data *);
450:	static enum si_sm_result bt_event(struct si_sm_data *, long);
247:	static int bt_get_result(struct si_sm_data *, unsigned char *, unsigned int);
173:	static unsigned int bt_init_data(struct si_sm_data *, struct si_sm_io *);
683:	static int bt_size(void);
202:	static int bt_start_transaction(struct si_sm_data *, unsigned char *, unsigned int);
294:	static void drain_BMC2HOST(struct si_sm_data *);
384:	static enum si_sm_result error_recovery(struct si_sm_data *, unsigned char, unsigned char);
278:	static void reset_flags(struct si_sm_data *);
144:	static char *status2txt(unsigned char);

File drivers/char/ipmi/ipmi_devintf.c:
892:	static void cleanup_ipmi(void);
39:	static void file_receive_handler(struct ipmi_recv_msg *, void *);
140:	static int handle_send_req(struct ipmi_user *, struct ipmi_req *, int, unsigned int);
854:	static int init_ipmi_devintf(void);
75:	static int ipmi_fasync(int, struct file *, int);
294:	static long ipmi_ioctl(struct file *, unsigned int, unsigned long);
812:	static void ipmi_new_smi(int, struct device *);
87:	static int ipmi_open(struct inode *, struct file *);
57:	static __poll_t ipmi_poll(struct file *, poll_table *);
122:	static int ipmi_release(struct inode *, struct file *);
830:	static void ipmi_smi_gone(int);

File drivers/char/ipmi/ipmi_kcs_sm.c:
236:	static int check_obf(struct si_sm_data *, unsigned char, long);
302:	static int get_kcs_result(struct si_sm_data *, unsigned char *, unsigned int);
143:	static unsigned int init_kcs_data(struct si_sm_data *, struct si_sm_io *);
530:	static void kcs_cleanup(struct si_sm_data *);
516:	static int kcs_detect(struct si_sm_data *);
336:	static enum si_sm_result kcs_event(struct si_sm_data *, long);
511:	static int kcs_size(void);
207:	static void read_next_byte(struct si_sm_data *);
269:	static int start_kcs_transaction(struct si_sm_data *, unsigned char *, unsigned int);

File drivers/char/ipmi/ipmi_msghandler.c:
1776:	unsigned char ipmb_checksum(unsigned char *, int);
3550:	int ipmi_add_smi(struct module *, const struct ipmi_smi_handlers *, void *, struct device *, unsigned char);
903:	unsigned int ipmi_addr_length(int);
653:	const char *ipmi_addr_src_to_str(enum ipmi_addr_src);
5136:	struct ipmi_smi_msg *ipmi_alloc_smi_msg(void);
1204:	int ipmi_create_user(unsigned int, const struct ipmi_user_hndl *, void *, struct ipmi_user **);
1401:	int ipmi_destroy_user(struct ipmi_user *);
5171:	void ipmi_free_recv_msg(struct ipmi_recv_msg *);
1521:	int ipmi_get_maintenance_mode(struct ipmi_user *);
1499:	int ipmi_get_my_LUN(struct ipmi_user *, unsigned int, unsigned char *);
1455:	int ipmi_get_my_address(struct ipmi_user *, unsigned int, unsigned char *);
1292:	int ipmi_get_smi_info(int, struct ipmi_smi_info *);
1411:	int ipmi_get_version(struct ipmi_user *, unsigned char *, unsigned char *);
3503:	void ipmi_poll_interface(struct ipmi_user *);
1685:	int ipmi_register_for_cmd(struct ipmi_user *, unsigned char, unsigned char, unsigned int);
2409:	int ipmi_request_settime(struct ipmi_user *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, int, int, unsigned int);
2448:	int ipmi_request_supply_msgs(struct ipmi_user *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, void *, struct ipmi_recv_msg *, int);
1588:	int ipmi_set_gets_events(struct ipmi_user *, bool);
1546:	int ipmi_set_maintenance_mode(struct ipmi_user *, int);
1477:	int ipmi_set_my_LUN(struct ipmi_user *, unsigned int, unsigned char);
1433:	int ipmi_set_my_address(struct ipmi_user *, unsigned int, unsigned char);
4861:	void ipmi_smi_msg_received(struct ipmi_smi *, struct ipmi_smi_msg *);
4896:	void ipmi_smi_watchdog_pretimeout(struct ipmi_smi *);
739:	int ipmi_smi_watcher_register(struct ipmi_smi_watcher *);
773:	int ipmi_smi_watcher_unregister(struct ipmi_smi_watcher *);
1730:	int ipmi_unregister_for_cmd(struct ipmi_user *, unsigned char, unsigned char, unsigned int);
3761:	void ipmi_unregister_smi(struct ipmi_smi *);
854:	int ipmi_validate_addr(struct ipmi_addr *, int);
2604:	static int __bmc_get_device_id(struct ipmi_smi *, struct bmc_device *, struct ipmi_device_id *, bool *, guid_t *, int);
2964:	static int __find_bmc_guid(struct device *, const void *);
3002:	static int __find_bmc_prod_dev_id(struct device *, const void *);
3075:	static void __ipmi_bmc_unregister(struct ipmi_smi *);
3450:	static int __scan_channels(struct ipmi_smi *, struct ipmi_device_id *);
1326:	static void _ipmi_destroy_user(struct ipmi_user *);
2826:	static ssize_t add_dev_support_show(struct device *, struct device_attribute *, char *);
2875:	static ssize_t aux_firmware_rev_show(struct device *, struct device_attribute *, char *);
2927:	static umode_t bmc_dev_attr_is_visible(struct kobject *, struct attribute *, int);
2487:	static void bmc_device_id_handler(struct ipmi_smi *, struct ipmi_recv_msg *);
786:	static void call_smi_watchers(int, struct device *);
3379:	static void channel_handler(struct ipmi_smi *, struct ipmi_recv_msg *);
3049:	static void cleanup_bmc_work(struct work_struct *);
5528:	static void cleanup_ipmi(void);
4375:	static void copy_event_into_recv_msg(struct ipmi_recv_msg *, struct ipmi_smi_msg *);
922:	static int deliver_response(struct ipmi_smi *, struct ipmi_recv_msg *);
5239:	static void device_id_fetcher(struct ipmi_smi *, struct ipmi_recv_msg *);
2744:	static ssize_t device_id_show(struct device *, struct device_attribute *, char *);
5186:	static void dummy_recv_done_handler(struct ipmi_recv_msg *);
5181:	static void dummy_smi_done_handler(struct ipmi_smi_msg *);
5226:	static void event_receiver_fetcher(struct ipmi_smi *, struct ipmi_recv_msg *);
2791:	static ssize_t firmware_revision_show(struct device *, struct device_attribute *, char *);
1787:	static void format_ipmb_msg(struct ipmi_smi_msg *, struct kernel_ipmi_msg *, struct ipmi_ipmb_addr *, long, unsigned char, int, unsigned char, unsigned char);
1829:	static void format_lan_msg(struct ipmi_smi_msg *, struct kernel_ipmi_msg *, struct ipmi_lan_addr *, long, unsigned char, unsigned char);
5150:	static void free_recv_msg(struct ipmi_recv_msg *);
5128:	static void free_smi_msg(struct ipmi_smi_msg *);
1195:	static void free_user_work(struct work_struct *);
3293:	static void guid_handler(struct ipmi_smi *, struct ipmi_recv_msg *);
2895:	static ssize_t guid_show(struct device *, struct device_attribute *, char *);
3875:	static int handle_ipmb_get_msg_cmd(struct ipmi_smi *, struct ipmi_smi_msg *);
3812:	static int handle_ipmb_get_msg_rsp(struct ipmi_smi *, struct ipmi_smi_msg *);
4175:	static int handle_lan_get_msg_cmd(struct ipmi_smi *, struct ipmi_smi_msg *);
4108:	static int handle_lan_get_msg_rsp(struct ipmi_smi *, struct ipmi_smi_msg *);
4757:	static void handle_new_recv_msgs(struct ipmi_smi *);
4274:	static int handle_oem_get_msg_cmd(struct ipmi_smi *, struct ipmi_smi_msg *);
4530:	static int handle_one_recv_msg(struct ipmi_smi *, struct ipmi_smi_msg *);
2117:	static int i_ipmi_req_ipmb_direct(struct ipmi_smi *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, struct ipmi_smi_msg *, struct ipmi_recv_msg *, unsigned char);
2169:	static int i_ipmi_req_lan(struct ipmi_smi *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, struct ipmi_smi_msg *, struct ipmi_recv_msg *, unsigned char, int, unsigned int);
2293:	static int i_ipmi_request(struct ipmi_user *, struct ipmi_smi *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, void *, struct ipmi_recv_msg *, int, unsigned char, unsigned char, int, unsigned int);
1160:	static int intf_err_seq(struct ipmi_smi *, long, unsigned int);
1098:	static int intf_find_seq(struct ipmi_smi *, unsigned char, short, unsigned char, unsigned char, struct ipmi_addr *, struct ipmi_recv_msg **);
731:	static void intf_free(struct kref *);
1044:	static int intf_next_seq(struct ipmi_smi *, struct ipmi_recv_msg *, unsigned long, int, int, unsigned char *, long *);
1132:	static int intf_start_seq_timer(struct ipmi_smi *, long);
5478:	static int ipmi_init_msghandler(void);
5515:	static int ipmi_init_msghandler_mod(void);
5194:	static void ipmi_panic_request_and_wait(struct ipmi_smi *, struct ipmi_addr *, struct kernel_ipmi_msg *);
5090:	static void ipmi_timeout(struct timer_list *);
2808:	static ssize_t ipmi_version_show(struct device *, struct device_attribute *, char *);
2843:	static ssize_t manufacturer_id_show(struct device *, struct device_attribute *, char *);
3520:	static ssize_t nr_msgs_show(struct device *, struct device_attribute *, char *);
3509:	static ssize_t nr_users_show(struct device *, struct device_attribute *, char *);
5402:	static int panic_event(struct notifier_block *, unsigned long, void *);
89:	static int panic_op_read_handler(char *, const struct kernel_param *);
74:	static int panic_op_write_handler(const char *, const struct kernel_param *);
2859:	static ssize_t product_id_show(struct device *, struct device_attribute *, char *);
2760:	static ssize_t provides_device_sdrs_show(struct device *, struct device_attribute *, char *);
3539:	static void redo_bmc_reg(struct work_struct *);
3044:	static void release_bmc_device(struct device *);
2776:	static ssize_t revision_show(struct device *, struct device_attribute *, char *);
981:	static void smi_add_watch(struct ipmi_smi *, unsigned int);
4815:	static void smi_recv_tasklet(struct tasklet_struct *);

File drivers/char/ipmi/ipmi_plat_data.c:
11:	struct platform_device *ipmi_platform_add(const char *, unsigned int, struct ipmi_plat_data *);

File drivers/char/ipmi/ipmi_si_hardcode.c:
93:	void ipmi_hardcode_init(void);
127:	void ipmi_si_hardcode_exit(void);
136:	int ipmi_si_hardcode_match(int, unsigned long);
59:	static void ipmi_hardcode_init_one(const char *, unsigned int, unsigned long, enum ipmi_addr_space);

File drivers/char/ipmi/ipmi_si_hotmod.c:
234:	void ipmi_si_hotmod_exit(void);
185:	static int hotmod_handler(const char *, const struct kernel_param *);

File drivers/char/ipmi/ipmi_si_intf.c:
1236:	void ipmi_irq_finish_setup(struct si_sm_io *);
1244:	void ipmi_irq_start_cleanup(struct si_sm_io *);
1867:	int ipmi_si_add_smi(struct si_sm_io *);
1117:	irqreturn_t ipmi_si_irq_handler(int, void *);
2253:	struct device *ipmi_si_remove_by_data(int, enum si_type, unsigned long);
2239:	void ipmi_si_remove_by_dev(struct device *);
1257:	int ipmi_std_irq_setup(struct si_sm_io *);
446:	static struct ipmi_smi_msg *alloc_msg_handle_irq(struct smi_info *);
1636:	static ssize_t attentions_show(struct device *, struct device_attribute *, char *);
1828:	static void check_for_broken_irqs(struct smi_info *);
870:	static void check_start_timer_thread(struct smi_info *);
2276:	static void cleanup_ipmi_si(void);
2229:	static void cleanup_one_si(struct smi_info *);
1639:	static ssize_t complete_transactions_show(struct device *, struct device_attribute *, char *);
1773:	static int dell_poweredge_bt_xaction_handler(struct notifier_block *, unsigned long, void *);
1640:	static ssize_t events_show(struct device *, struct device_attribute *, char *);
1637:	static ssize_t flag_fetches_show(struct device *, struct device_attribute *, char *);
883:	static void flush_messages(void *);
1359:	static int get_global_enables(struct smi_info *, u8 *);
1184:	static int get_smi_info(void *, struct ipmi_smi_info *);
461:	static void handle_flags(struct smi_info *);
1638:	static ssize_t hosed_count_show(struct device *, struct device_attribute *, char *);
1634:	static ssize_t idles_show(struct device *, struct device_attribute *, char *);
1642:	static ssize_t incoming_messages_show(struct device *, struct device_attribute *, char *);
2088:	static int init_ipmi_si(void);
1621:	static ssize_t interrupts_enabled_show(struct device *, struct device_attribute *, char *);
1635:	static ssize_t interrupts_show(struct device *, struct device_attribute *, char *);
975:	static int ipmi_thread(void *);
1633:	static ssize_t long_timeouts_show(struct device *, struct device_attribute *, char *);
1692:	static int oem_data_avail_to_receive_msg_avail(struct smi_info *);
1644:	static ssize_t params_show(struct device *, struct device_attribute *, char *);
1031:	static void poll(void *);
1049:	static void request_events(void *);
899:	static void sender(void *, struct ipmi_smi_msg *);
1406:	static int set_global_enables(struct smi_info *, u8);
1196:	static void set_maintenance_mode(void *, bool);
1059:	static void set_need_watch(void *, unsigned int);
930:	static void set_run_to_completion(void *, bool);
1818:	static void setup_oem_data_handler(struct smi_info *);
1632:	static ssize_t short_timeouts_show(struct device *, struct device_attribute *, char *);
2170:	static void shutdown_smi(void *);
749:	static enum si_sm_result smi_event_handler(struct smi_info *, int);
1139:	static int smi_start_processing(void *, struct ipmi_smi *);
1073:	static void smi_timeout(struct timer_list *);
376:	static void start_clear_flags(struct smi_info *);
1251:	static void std_irq_cleanup(struct si_sm_io *);
1525:	static int try_enable_event_buffer(struct smi_info *);
1940:	static int try_smi_init(struct smi_info *);
1611:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1641:	static ssize_t watchdog_pretimeouts_show(struct device *, struct device_attribute *, char *);

File drivers/char/ipmi/ipmi_si_mem_io.c:
76:	int ipmi_si_mem_setup(struct si_sm_io *);
6:	static unsigned char intf_mem_inb(const struct si_sm_io *, unsigned int);
31:	static unsigned char intf_mem_inl(const struct si_sm_io *, unsigned int);
18:	static unsigned char intf_mem_inw(const struct si_sm_io *, unsigned int);
12:	static void intf_mem_outb(const struct si_sm_io *, unsigned int, unsigned char);
38:	static void intf_mem_outl(const struct si_sm_io *, unsigned int, unsigned char);
25:	static void intf_mem_outw(const struct si_sm_io *, unsigned int, unsigned char);
68:	static void mem_cleanup(struct si_sm_io *);
45:	static unsigned char mem_inq(const struct si_sm_io *, unsigned int);
51:	static void mem_outq(const struct si_sm_io *, unsigned int, unsigned char);

File drivers/char/ipmi/ipmi_si_platform.c:
427:	void ipmi_remove_platform_device_by_name(char *);
458:	void ipmi_si_platform_init(void);
467:	void ipmi_si_platform_shutdown(void);
401:	static int ipmi_probe(struct platform_device *);
412:	static int ipmi_remove(struct platform_device *);
419:	static int pdev_match_name(struct device *, const void *);

File drivers/char/ipmi/ipmi_si_port_io.c:
63:	int ipmi_si_port_setup(struct si_sm_io *);
51:	static void port_cleanup(struct si_sm_io *);
6:	static unsigned char port_inb(const struct si_sm_io *, unsigned int);
36:	static unsigned char port_inl(const struct si_sm_io *, unsigned int);
21:	static unsigned char port_inw(const struct si_sm_io *, unsigned int);
13:	static void port_outb(const struct si_sm_io *, unsigned int, unsigned char);
43:	static void port_outl(const struct si_sm_io *, unsigned int, unsigned char);
28:	static void port_outw(const struct si_sm_io *, unsigned int, unsigned char);

File drivers/char/ipmi/ipmi_smic_sm.c:
104:	static unsigned int init_smic_data(struct si_sm_data *, struct si_sm_io *);
568:	static void smic_cleanup(struct si_sm_data *);
554:	static int smic_detect(struct si_sm_data *);
320:	static enum si_sm_result smic_event(struct si_sm_data *, long);
154:	static int smic_get_result(struct si_sm_data *, unsigned char *, unsigned int);
572:	static int smic_size(void);
215:	static void start_error_recovery(struct si_sm_data *, char *);
121:	static int start_smic_transaction(struct si_sm_data *, unsigned char *, unsigned int);

File drivers/char/mem.c:
271:	int phys_mem_access_prot_allowed(struct file *, unsigned long, unsigned long, pgprot_t *);
758:	static int chr_dev_init(void);
550:	static unsigned long get_unmapped_area_zero(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
749:	static char *mem_devnode(const struct device *, umode_t *);
596:	static loff_t memory_lseek(struct file *, loff_t, int);
722:	static int memory_open(struct inode *, struct file *);
362:	static int mmap_mem(struct file *, struct vm_area_struct *);
539:	static int mmap_zero(struct file *, struct vm_area_struct *);
583:	static loff_t null_lseek(struct file *, loff_t, int);
622:	static int open_port(struct inode *, struct file *);
471:	static int pipe_to_null(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
459:	static ssize_t read_iter_null(struct kiocb *, struct iov_iter *);
488:	static ssize_t read_iter_zero(struct kiocb *, struct iov_iter *);
111:	static ssize_t read_mem(struct file *, char *, size_t, loff_t *);
447:	static ssize_t read_null(struct file *, char *, size_t, loff_t *);
512:	static ssize_t read_zero(struct file *, char *, size_t, loff_t *);
477:	static ssize_t splice_write_null(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
483:	static int uring_cmd_null(struct io_uring_cmd *, unsigned int);
572:	static ssize_t write_full(struct file *, const char *, size_t, loff_t *);
464:	static ssize_t write_iter_null(struct kiocb *, struct iov_iter *);
198:	static ssize_t write_mem(struct file *, const char *, size_t, loff_t *);
453:	static ssize_t write_null(struct file *, const char *, size_t, loff_t *);

File drivers/char/misc.c:
259:	void misc_deregister(struct miscdevice *);
197:	int misc_register(struct miscdevice *);
272:	static char *misc_devnode(const struct device *, umode_t *);
283:	static int misc_init(void);
122:	static int misc_open(struct inode *, struct file *);
95:	static void *misc_seq_next(struct seq_file *, void *, loff_t *);
105:	static int misc_seq_show(struct seq_file *, void *);
89:	static void *misc_seq_start(struct seq_file *, loff_t *);
100:	static void misc_seq_stop(struct seq_file *, void *);

File drivers/char/random.c:
1364:	long __arm64_sys_getrandom(const struct pt_regs *);
535:	u32 __get_random_u32_below(u32);
952:	void add_bootloader_randomness(const void *, size_t);
917:	void add_device_randomness(const void *, size_t);
1209:	void add_disk_randomness(struct gendisk *);
934:	void add_hwgenerator_randomness(const void *, size_t, size_t, bool);
1193:	void add_input_randomness(unsigned int, unsigned int, unsigned int);
1088:	void add_interrupt_randomness(int);
152:	int execute_with_initialized_rng(struct notifier_block *);
414:	void get_random_bytes(void *, size_t);
531:	u16 get_random_u16(void);
532:	u32 get_random_u32(void);
533:	u64 get_random_u64(void);
530:	u8 get_random_u8(void);
1218:	void rand_initialize_disk(struct gendisk *);
882:	void random_init(void);
841:	void random_init_early(const char *);
1034:	int random_online_cpu(unsigned int);
575:	int random_prepare_cpu(unsigned int);
108:	bool rng_is_initialized(void);
132:	int wait_for_random_bytes(void);
703:	static void _credit_init_bits(size_t);
375:	static void _get_random_bytes(void *, size_t);
1127:	static void add_timer_randomness(struct timer_rand_state *, unsigned int);
294:	static void crng_fast_key_erasure(u8 *, u32 *, u8 *, size_t);
317:	static void crng_make_state(u32 *, u8 *, size_t);
249:	static void crng_reseed(struct work_struct *);
114:	static void crng_set_ready(struct work_struct *);
1252:	static void entropy_timer(struct timer_list *);
651:	static void extract_entropy(void *, size_t);
421:	static ssize_t get_random_bytes_user(struct iov_iter *);
1052:	static void mix_interrupt_randomness(struct timer_list *);
638:	static void mix_pool_bytes(const void *, size_t);
803:	static int parse_trust_bootloader(char *);
799:	static int parse_trust_cpu(char *);
1640:	static int proc_do_rointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1609:	static int proc_do_uuid(struct ctl_table *, int, void *, size_t *, loff_t *);
1536:	static int random_fasync(int, struct file *, int);
1472:	static long random_ioctl(struct file *, unsigned int, unsigned long);
1394:	static __poll_t random_poll(struct file *, poll_table *);
1457:	static ssize_t random_read_iter(struct kiocb *, struct iov_iter *);
1693:	static int random_sysctls_init(void);
1428:	static ssize_t random_write_iter(struct kiocb *, struct iov_iter *);
1266:	static void try_to_generate_entropy(void);
1433:	static ssize_t urandom_read_iter(struct kiocb *, struct iov_iter *);
1400:	static ssize_t write_pool_user(struct iov_iter *);

File drivers/char/tpm/eventlog/common.c:
103:	void tpm_bios_log_setup(struct tpm_chip *);
169:	void tpm_bios_log_teardown(struct tpm_chip *);

File drivers/char/tpm/eventlog/of.c:
20:	int tpm_read_log_of(struct tpm_chip *);

File drivers/char/tpm/eventlog/tpm1.c:
252:	static int tpm1_ascii_bios_measurements_show(struct seq_file *, void *);
223:	static int tpm1_binary_bios_measurements_show(struct seq_file *, void *);
108:	static void *tpm1_bios_measurements_next(struct seq_file *, void *, loff_t *);
70:	static void *tpm1_bios_measurements_start(struct seq_file *, loff_t *);
139:	static void tpm1_bios_measurements_stop(struct seq_file *, void *);

File drivers/char/tpm/eventlog/tpm2.c:
36:	static size_t calc_tpm2_event_size(struct tcg_pcr_event2_head *, struct tcg_pcr_event *);
128:	static int tpm2_binary_bios_measurements_show(struct seq_file *, void *);
85:	static void *tpm2_bios_measurements_next(struct seq_file *, void *, loff_t *);
42:	static void *tpm2_bios_measurements_start(struct seq_file *, loff_t *);
124:	static void tpm2_bios_measurements_stop(struct seq_file *, void *);

File drivers/char/tpm/tpm-chip.c:
313:	struct tpm_chip *tpm_chip_alloc(struct device *, const struct tpm_class_ops *);
562:	int tpm_chip_register(struct tpm_chip *);
100:	int tpm_chip_start(struct tpm_chip *);
133:	void tpm_chip_stop(struct tpm_chip *);
625:	void tpm_chip_unregister(struct tpm_chip *);
196:	struct tpm_chip *tpm_default_chip(void);
235:	struct tpm_chip *tpm_find_get_ops(struct tpm_chip *);
184:	void tpm_put_ops(struct tpm_chip *);
152:	int tpm_try_get_ops(struct tpm_chip *);
388:	struct tpm_chip *tpmm_chip_alloc(struct device *, const struct tpm_class_ops *);
488:	static int tpm_add_legacy_sysfs(struct tpm_chip *);
286:	static int tpm_class_shutdown(struct device *);
262:	static void tpm_dev_release(struct device *);
515:	static int tpm_hwrng_read(struct hwrng *, void *, size_t, bool);
376:	static void tpm_put_device(void *);

File drivers/char/tpm/tpm-dev-common.c:
110:	void tpm_common_open(struct file *, struct tpm_chip *, struct file_priv *, struct tpm_space *);
237:	__poll_t tpm_common_poll(struct file *, poll_table *);
125:	ssize_t tpm_common_read(struct file *, char *, size_t, loff_t *);
262:	void tpm_common_release(struct file *, struct file_priv *);
165:	ssize_t tpm_common_write(struct file *, const char *, size_t, loff_t *);
278:	void tpm_dev_common_exit(void);
271:	int tpm_dev_common_init(void);
55:	static void tpm_dev_async_work(struct work_struct *);
24:	static ssize_t tpm_dev_transmit(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
97:	static void tpm_timeout_work(struct work_struct *);
87:	static void user_reader_timeout(struct timer_list *);

File drivers/char/tpm/tpm-dev.c:
18:	static int tpm_open(struct inode *, struct file *);
49:	static int tpm_release(struct inode *, struct file *);

File drivers/char/tpm/tpm-interface.c:
370:	int tpm_auto_startup(struct tpm_chip *);
52:	unsigned long tpm_calc_ordinal_duration(struct tpm_chip *, u32);
444:	int tpm_get_random(struct tpm_chip *, u8 *, size_t);
239:	int tpm_get_timeouts(struct tpm_chip *);
260:	int tpm_is_tpm2(struct tpm_chip *);
314:	int tpm_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
284:	int tpm_pcr_read(struct tpm_chip *, u32, struct tpm_digest *);
425:	int tpm_pm_resume(struct device *);
389:	int tpm_pm_suspend(struct device *);
353:	int tpm_send(struct tpm_chip *, void *, size_t);
153:	ssize_t tpm_transmit(struct tpm_chip *, u8 *, size_t);
213:	ssize_t tpm_transmit_cmd(struct tpm_chip *, struct tpm_buf *, size_t, const char *);
506:	static void tpm_exit(void);
465:	static int tpm_init(void);

File drivers/char/tpm/tpm-sysfs.c:
477:	void tpm_sysfs_add_device(struct tpm_chip *);
139:	static ssize_t active_show(struct device *, struct device_attribute *, char *);
256:	static ssize_t cancel_store(struct device *, struct device_attribute *, const char *, size_t);
205:	static ssize_t caps_show(struct device *, struct device_attribute *, char *);
270:	static ssize_t durations_show(struct device *, struct device_attribute *, char *);
117:	static ssize_t enabled_show(struct device *, struct device_attribute *, char *);
161:	static ssize_t owned_show(struct device *, struct device_attribute *, char *);
348:	static ssize_t pcr_value_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t pcrs_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t pubek_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t temp_deactivated_show(struct device *, struct device_attribute *, char *);
287:	static ssize_t timeouts_show(struct device *, struct device_attribute *, char *);
302:	static ssize_t tpm_version_major_show(struct device *, struct device_attribute *, char *);

File drivers/char/tpm/tpm1-cmd.c:
704:	int tpm1_auto_startup(struct tpm_chip *);
291:	unsigned long tpm1_calc_ordinal_duration(struct tpm_chip *, u32);
642:	int tpm1_do_selftest(struct tpm_chip *);
800:	int tpm1_get_pcr_allocation(struct tpm_chip *);
530:	int tpm1_get_random(struct tpm_chip *, u8 *, size_t);
342:	int tpm1_get_timeouts(struct tpm_chip *);
482:	ssize_t tpm1_getcap(struct tpm_chip *, u32, cap_t *, const char *, size_t);
463:	int tpm1_pcr_extend(struct tpm_chip *, u32, const u8 *, const char *);
584:	int tpm1_pcr_read(struct tpm_chip *, u32, u8 *);
742:	int tpm1_pm_suspend(struct tpm_chip *, u32);

File drivers/char/tpm/tpm2-cmd.c:
732:	int tpm2_auto_startup(struct tpm_chip *);
128:	unsigned long tpm2_calc_ordinal_duration(struct tpm_chip *, u32);
778:	int tpm2_find_cc(struct tpm_chip *, u32);
348:	void tpm2_flush_context(struct tpm_chip *, u32);
627:	int tpm2_get_cc_attrs_tbl(struct tpm_chip *);
548:	ssize_t tpm2_get_pcr_allocation(struct tpm_chip *);
288:	int tpm2_get_random(struct tpm_chip *, u8 *, size_t);
25:	int tpm2_get_timeouts(struct tpm_chip *);
386:	ssize_t tpm2_get_tpm_pt(struct tpm_chip *, u32, u32 *, const char *);
235:	int tpm2_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
161:	int tpm2_pcr_read(struct tpm_chip *, u32, struct tpm_digest *, u16 *);
492:	int tpm2_probe(struct tpm_chip *);
429:	void tpm2_shutdown(struct tpm_chip *, u16);
455:	static int tpm2_do_selftest(struct tpm_chip *);

File drivers/char/tpm/tpm2-space.c:
534:	int tpm2_commit_space(struct tpm_chip *, struct tpm_space *, void *, size_t *);
59:	void tpm2_del_space(struct tpm_chip *, struct tpm_space *);
164:	void tpm2_flush_space(struct tpm_chip *);
41:	int tpm2_init_space(struct tpm_space *, unsigned int);
300:	int tpm2_prepare_space(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
603:	int tpm_devs_add(struct tpm_chip *);
593:	void tpm_devs_remove(struct tpm_chip *);
71:	static int tpm2_load_context(struct tpm_chip *, u8 *, unsigned int *, u32 *);
122:	static int tpm2_save_context(struct tpm_chip *, u32, u8 *, unsigned int, unsigned int *);
581:	static void tpm_devs_release(struct device *);

File drivers/char/tpm/tpm_i2c_infineon.c:
92:	static int iic_tpm_read(u8, u8 *, size_t);
204:	static int iic_tpm_write_generic(u8, u8 *, size_t, unsigned int, unsigned int, u8);
436:	static int recv_data(struct tpm_chip *, u8 *, size_t);
344:	static int request_locality(struct tpm_chip *, int);
729:	static void tpm_tis_i2c_driver_exit(void);
729:	static int tpm_tis_i2c_driver_init(void);
684:	static int tpm_tis_i2c_probe(struct i2c_client *, const struct i2c_device_id *);
382:	static void tpm_tis_i2c_ready(struct tpm_chip *);
468:	static int tpm_tis_i2c_recv(struct tpm_chip *, u8 *, size_t);
709:	static void tpm_tis_i2c_remove(struct i2c_client *);
596:	static bool tpm_tis_i2c_req_canceled(struct tpm_chip *, u8);
517:	static int tpm_tis_i2c_send(struct tpm_chip *, u8 *, size_t);
365:	static u8 tpm_tis_i2c_status(struct tpm_chip *);
413:	static int wait_for_stat(struct tpm_chip *, u8, unsigned long, int *);

File drivers/char/tpm/tpm_tis.c:
409:	static void cleanup_tis(void);
379:	static int init_tis(void);
156:	static int tpm_tcg_read_bytes(struct tpm_tis_data *, u32, u16, u8 *, enum tpm_tis_io_mode);
181:	static int tpm_tcg_write_bytes(struct tpm_tis_data *, u32, u16, const u8 *, enum tpm_tis_io_mode);
303:	static int tpm_tis_plat_probe(struct platform_device *);
327:	static int tpm_tis_plat_remove(struct platform_device *);

File drivers/char/tpm/tpm_tis_core.c:
940:	int tpm_tis_core_init(struct device *, struct tpm_tis_data *, int, const struct tpm_tis_phy_ops *, acpi_handle);
850:	void tpm_tis_remove(struct tpm_chip *);
417:	static void disable_interrupts(struct tpm_chip *);
633:	static int probe_itpm(struct tpm_chip *);
257:	static int recv_data(struct tpm_chip *, u8 *, size_t);
139:	static int release_locality(struct tpm_chip *, int);
148:	static int request_locality(struct tpm_chip *, int);
700:	static irqreturn_t tis_int_handler(int, void *);
881:	static void tpm_tis_clkrun_enable(struct tpm_chip *, bool);
828:	static void tpm_tis_probe_irq(struct tpm_chip *, u32);
760:	static int tpm_tis_probe_irq_single(struct tpm_chip *, u32, int, int);
224:	static void tpm_tis_ready(struct tpm_chip *);
286:	static int tpm_tis_recv(struct tpm_chip *, u8 *, size_t);
681:	static bool tpm_tis_req_canceled(struct tpm_chip *, u8);
482:	static int tpm_tis_send(struct tpm_chip *, u8 *, size_t);
349:	static int tpm_tis_send_data(struct tpm_chip *, const u8 *, size_t);
443:	static int tpm_tis_send_main(struct tpm_chip *, const u8 *, size_t);
189:	static u8 tpm_tis_status(struct tpm_chip *);
518:	static void tpm_tis_update_durations(struct tpm_chip *, unsigned long *);
594:	static void tpm_tis_update_timeouts(struct tpm_chip *, unsigned long *);
47:	static int wait_for_tpm_stat(struct tpm_chip *, u8, unsigned long, wait_queue_head_t *, bool);

File drivers/char/tpm/tpm_tis_i2c_cr50.c:
793:	static void cr50_i2c_driver_exit(void);
793:	static int cr50_i2c_driver_init(void);
71:	static irqreturn_t tpm_cr50_i2c_int_handler(int, void *);
632:	static bool tpm_cr50_i2c_is_firmware_power_managed(struct device *);
681:	static int tpm_cr50_i2c_probe(struct i2c_client *);
187:	static int tpm_cr50_i2c_read(struct tpm_chip *, u8, u8 *, size_t);
766:	static void tpm_cr50_i2c_remove(struct i2c_client *);
627:	static bool tpm_cr50_i2c_req_canceled(struct tpm_chip *, u8);
452:	static int tpm_cr50_i2c_tis_recv(struct tpm_chip *, u8 *, size_t);
541:	static int tpm_cr50_i2c_tis_send(struct tpm_chip *, u8 *, size_t);
389:	static void tpm_cr50_i2c_tis_set_ready(struct tpm_chip *);
373:	static u8 tpm_cr50_i2c_tis_status(struct tpm_chip *);
151:	static int tpm_cr50_i2c_transfer_message(struct device *, struct i2c_adapter *, struct i2c_msg *);
246:	static int tpm_cr50_i2c_write(struct tpm_chip *, u8, u8 *, size_t);
317:	static void tpm_cr50_release_locality(struct tpm_chip *, bool);
340:	static int tpm_cr50_request_locality(struct tpm_chip *);

File drivers/char/tpm/tpmrm-dev.c:
13:	static int tpmrm_open(struct inode *, struct file *);
35:	static int tpmrm_release(struct inode *, struct file *);

File drivers/char/virtio_console.c:
1212:	int virtio_cons_early_init(int (*)(u32, const char *, int));
540:	static ssize_t __send_control_msg(struct ports_device *, u32, unsigned int, unsigned int);
597:	static ssize_t __send_to_port(struct port *, struct scatterlist *, int, size_t, void *, bool);
1354:	static int add_port(struct ports_device *, u32);
405:	static struct port_buffer *alloc_buf(struct virtio_device *, size_t, int);
1799:	static void config_intr(struct virtio_device *);
1809:	static void config_work_handler(struct work_struct *);
1791:	static void control_intr(struct virtqueue *);
1695:	static void control_work_handler(struct work_struct *);
499:	static void discard_port_data(struct port *);
1322:	static int fill_queue(struct virtqueue *, spinlock_t *);
655:	static ssize_t fill_readbuf(struct port *, char *, size_t, bool);
350:	static void free_buf(struct port_buffer *, bool);
1140:	static int get_chars(u32, char *, int);
1746:	static void in_intr(struct virtqueue *);
1218:	static int init_port_console(struct port *);
1175:	static int notifier_add_vio(struct hvc_struct *, int);
1189:	static void notifier_del_vio(struct hvc_struct *, int);
1733:	static void out_intr(struct virtqueue *);
857:	static int pipe_to_sg(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
1075:	static int port_fops_fasync(int, struct file *, int);
1021:	static int port_fops_open(struct inode *, struct file *);
962:	static __poll_t port_fops_poll(struct file *, poll_table *);
730:	static ssize_t port_fops_read(struct file *, char *, size_t, loff_t *);
987:	static int port_fops_release(struct inode *, struct file *);
901:	static ssize_t port_fops_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
797:	static ssize_t port_fops_write(struct file *, const char *, size_t, loff_t *);
1109:	static int put_chars(u32, const char *, int);
383:	static void reclaim_dma_bufs(void);
1271:	static ssize_t show_port_name(struct device *, struct device_attribute *, char *);
1506:	static void unplug_port(struct port *);
1996:	static int virtcons_probe(struct virtio_device *);
1945:	static void virtcons_remove(struct virtio_device *);
2279:	static void virtio_console_fini(void);
2244:	static int virtio_console_init(void);
777:	static int wait_port_writable(struct port *, bool);
698:	static bool will_read_block(struct port *);
707:	static bool will_write_block(struct port *);

File drivers/clk/clk-bd718x7.c:
42:	static void bd71837_clk_disable(struct clk_hw *);
52:	static int bd71837_clk_enable(struct clk_hw *);
161:	static void bd71837_clk_exit(void);
161:	static int bd71837_clk_init(void);
59:	static int bd71837_clk_is_enabled(struct clk_hw *);
79:	static int bd71837_clk_probe(struct platform_device *);

File drivers/clk/clk-bulk.c:
211:	void clk_bulk_disable(int, const struct clk_bulk_data *);
227:	int clk_bulk_enable(int, const struct clk_bulk_data *);
114:	int clk_bulk_get(struct device *, int, struct clk_bulk_data *);
139:	int clk_bulk_get_all(struct device *, struct clk_bulk_data **);
121:	int clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
176:	int clk_bulk_prepare(int, const struct clk_bulk_data *);
72:	void clk_bulk_put(int, struct clk_bulk_data *);
128:	void clk_bulk_put_all(int, struct clk_bulk_data *);
161:	void clk_bulk_unprepare(int, const struct clk_bulk_data *);

File drivers/clk/clk-composite.c:
351:	struct clk_hw *clk_hw_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
365:	struct clk_hw *clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
431:	void clk_hw_unregister_composite(struct clk_hw *);
380:	struct clk *clk_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
398:	struct clk *clk_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
416:	void clk_unregister_composite(struct clk *);
476:	struct clk_hw *devm_clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
234:	static struct clk_hw *__clk_hw_register_composite(struct device *, const char *, const char * const *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
68:	static int clk_composite_determine_rate(struct clk_hw *, struct clk_rate_request *);
223:	static void clk_composite_disable(struct clk_hw *);
212:	static int clk_composite_enable(struct clk_hw *);
11:	static u8 clk_composite_get_parent(struct clk_hw *);
201:	static int clk_composite_is_enabled(struct clk_hw *);
33:	static unsigned long clk_composite_recalc_rate(struct clk_hw *, unsigned long);
150:	static long clk_composite_round_rate(struct clk_hw *, unsigned long, unsigned long *);
22:	static int clk_composite_set_parent(struct clk_hw *, u8);
162:	static int clk_composite_set_rate(struct clk_hw *, unsigned long, unsigned long);
174:	static int clk_composite_set_rate_and_parent(struct clk_hw *, unsigned long, unsigned long, u8);
442:	static void devm_clk_hw_release_composite(struct device *, void *);

File drivers/clk/clk-conf.c:
131:	int of_clk_set_defaults(struct device_node *, bool);

File drivers/clk/clk-cs2000-cp.c:
340:	static int __cs2000_set_rate(struct cs2000_priv *, int, unsigned long, unsigned long);
410:	static void cs2000_disable(struct clk_hw *);
630:	static void cs2000_driver_exit(void);
630:	static int cs2000_driver_init(void);
390:	static int cs2000_enable(struct clk_hw *);
419:	static u8 cs2000_get_parent(struct clk_hw *);
571:	static int cs2000_probe(struct i2c_client *);
78:	static bool cs2000_readable_reg(struct device *, unsigned int);
296:	static unsigned long cs2000_recalc_rate(struct clk_hw *, unsigned long);
560:	static void cs2000_remove(struct i2c_client *);
308:	static long cs2000_round_rate(struct clk_hw *, unsigned long, unsigned long *);
372:	static int cs2000_set_rate(struct clk_hw *, unsigned long, unsigned long);
88:	static bool cs2000_volatile_reg(struct device *, unsigned int);
83:	static bool cs2000_writeable_reg(struct device *, unsigned int);

File drivers/clk/clk-devres.c:
140:	int devm_clk_bulk_get(struct device *, int, struct clk_bulk_data *);
161:	int devm_clk_bulk_get_all(struct device *, struct clk_bulk_data **);
147:	int devm_clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
63:	struct clk *devm_clk_get(struct device *, const char *);
75:	struct clk *devm_clk_get_enabled(struct device *, const char *);
82:	struct clk *devm_clk_get_optional(struct device *, const char *);
95:	struct clk *devm_clk_get_optional_enabled(struct device *, const char *);
88:	struct clk *devm_clk_get_optional_prepared(struct device *, const char *);
69:	struct clk *devm_clk_get_prepared(struct device *, const char *);
195:	void devm_clk_put(struct device *, struct clk *);
205:	struct clk *devm_get_clk_from_child(struct device *, struct device_node *, const char *);
107:	static void devm_clk_bulk_release(struct device *, void *);
154:	static void devm_clk_bulk_release_all(struct device *, void *);
185:	static int devm_clk_match(struct device *, void *, void *);
12:	static void devm_clk_release(struct device *, void *);

File drivers/clk/clk-divider.c:
537:	struct clk_hw *__clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
663:	struct clk_hw *__devm_clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
647:	void clk_hw_unregister_divider(struct clk_hw *);
610:	struct clk *clk_register_divider_table(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
627:	void clk_unregister_divider(struct clk *);
346:	int divider_determine_rate(struct clk_hw *, struct clk_rate_request *, const struct clk_div_table *, u8, unsigned long);
470:	int divider_get_val(unsigned long, unsigned long, const struct clk_div_table *, u8, unsigned long);
130:	unsigned long divider_recalc_rate(struct clk_hw *, unsigned long, unsigned int, const struct clk_div_table *, unsigned long, unsigned long);
361:	int divider_ro_determine_rate(struct clk_hw *, struct clk_rate_request *, const struct clk_div_table *, u8, unsigned long, unsigned int);
406:	long divider_ro_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long, unsigned int);
384:	long divider_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long);
449:	static int clk_divider_determine_rate(struct clk_hw *, struct clk_rate_request *);
149:	static unsigned long clk_divider_recalc_rate(struct clk_hw *, unsigned long);
428:	static long clk_divider_round_rate(struct clk_hw *, unsigned long, unsigned long *);
487:	static int clk_divider_set_rate(struct clk_hw *, unsigned long, unsigned long);
658:	static void devm_clk_hw_release_divider(struct device *, void *);

File drivers/clk/clk-fixed-factor.c:
191:	struct clk_hw *clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
181:	struct clk_hw *clk_hw_register_fixed_factor_parent_hw(struct device *, const char *, const struct clk_hw *, unsigned long, unsigned int, unsigned int);
227:	void clk_hw_unregister_fixed_factor(struct clk_hw *);
200:	struct clk *clk_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
214:	void clk_unregister_fixed_factor(struct clk *);
238:	struct clk_hw *devm_clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
150:	struct clk_hw *devm_clk_hw_register_fixed_factor_index(struct device *, const char *, unsigned int, unsigned long, unsigned int, unsigned int);
172:	struct clk_hw *devm_clk_hw_register_fixed_factor_parent_hw(struct device *, const char *, const struct clk_hw *, unsigned long, unsigned int, unsigned int);
293:	void of_fixed_factor_clk_setup(struct device_node *);
80:	static struct clk_hw *__clk_hw_register_fixed_factor(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, int, unsigned long, unsigned int, unsigned int, bool);
248:	static struct clk_hw *_of_fixed_factor_clk_setup(struct device_node *);
22:	static unsigned long clk_factor_recalc_rate(struct clk_hw *, unsigned long);
33:	static long clk_factor_round_rate(struct clk_hw *, unsigned long, unsigned long *);
48:	static int clk_factor_set_rate(struct clk_hw *, unsigned long, unsigned long);
67:	static void devm_clk_hw_register_fixed_factor_release(struct device *, void *);
341:	static int of_fixed_factor_clk_driver_init(void);
310:	static int of_fixed_factor_clk_probe(struct platform_device *);
300:	static int of_fixed_factor_clk_remove(struct platform_device *);

File drivers/clk/clk-fixed-rate.c:
64:	struct clk_hw *__clk_hw_register_fixed_rate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
148:	void clk_hw_unregister_fixed_rate(struct clk_hw *);
121:	struct clk *clk_register_fixed_rate(struct device *, const char *, const char *, unsigned long, unsigned long);
135:	void clk_unregister_fixed_rate(struct clk *);
193:	void of_fixed_clk_setup(struct device_node *);
160:	static struct clk_hw *_of_fixed_clk_setup(struct device_node *);
35:	static unsigned long clk_fixed_rate_recalc_accuracy(struct clk_hw *, unsigned long);
29:	static unsigned long clk_fixed_rate_recalc_rate(struct clk_hw *, unsigned long);
52:	static void devm_clk_hw_register_fixed_rate_release(struct device *, void *);
239:	static int of_fixed_clk_driver_init(void);
209:	static int of_fixed_clk_probe(struct platform_device *);
199:	static int of_fixed_clk_remove(struct platform_device *);

File drivers/clk/clk-fractional-divider.c:
116:	void clk_fractional_divider_general_approximation(struct clk_hw *, unsigned long, unsigned long *, unsigned long *, unsigned long *);
240:	struct clk_hw *clk_hw_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
298:	void clk_hw_unregister_fractional_divider(struct clk_hw *);
282:	struct clk *clk_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
100:	static unsigned long clk_fd_recalc_rate(struct clk_hw *, unsigned long);
142:	static long clk_fd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
163:	static int clk_fd_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-gate.c:
127:	struct clk_hw *__clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
232:	struct clk_hw *__devm_clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
103:	int clk_gate_is_enabled(struct clk_hw *);
216:	void clk_hw_unregister_gate(struct clk_hw *);
185:	struct clk *clk_register_gate(struct device *, const char *, const char *, unsigned long, void *, u8, u8, spinlock_t *);
200:	void clk_unregister_gate(struct clk *);
98:	static void clk_gate_disable(struct clk_hw *);
91:	static int clk_gate_enable(struct clk_hw *);
56:	static void clk_gate_endisable(struct clk_hw *, int);
227:	static void devm_clk_hw_release_gate(struct device *, void *);

File drivers/clk/clk-gpio.c:
249:	static int gpio_clk_driver_init(void);
193:	static int gpio_clk_driver_probe(struct platform_device *);

File drivers/clk/clk-multiplier.c:
41:	static unsigned long clk_multiplier_recalc_rate(struct clk_hw *, unsigned long);
115:	static long clk_multiplier_round_rate(struct clk_hw *, unsigned long, unsigned long *);
125:	static int clk_multiplier_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-mux.c:
149:	struct clk_hw *__clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
215:	struct clk_hw *__devm_clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
276:	void clk_hw_unregister_mux(struct clk_hw *);
70:	unsigned int clk_mux_index_to_val(const u32 *, unsigned int, u8);
43:	int clk_mux_val_to_index(struct clk_hw *, const u32 *, unsigned int, unsigned int);
244:	struct clk *clk_register_mux_table(struct device *, const char *, const char * const *, u8, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
260:	void clk_unregister_mux(struct clk *);
129:	static int clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
88:	static u8 clk_mux_get_parent(struct clk_hw *);
99:	static int clk_mux_set_parent(struct clk_hw *, u8);
210:	static void devm_clk_hw_release_mux(struct device *, void *);

File drivers/clk/clk-renesas-pcie.c:
377:	static void rs9_driver_exit(void);
377:	static int rs9_driver_init(void);
261:	static struct clk_hw *rs9_of_clk_get(struct of_phandle_args *, void *);
269:	static int rs9_probe(struct i2c_client *);
110:	static int rs9_regmap_i2c_read(void *, unsigned int, unsigned int *);
93:	static int rs9_regmap_i2c_write(void *, unsigned int, unsigned int);
235:	static void rs9_update_config(struct rs9_driver_data *);

File drivers/clk/clk-rk808.c:
78:	static struct clk_hw *of_clk_rk808_get(struct of_phandle_args *, void *);
50:	static int rk808_clkout2_is_prepared(struct clk_hw *);
40:	static int rk808_clkout2_prepare(struct clk_hw *);
45:	static void rk808_clkout2_unprepare(struct clk_hw *);
206:	static void rk808_clkout_driver_exit(void);
206:	static int rk808_clkout_driver_init(void);
153:	static int rk808_clkout_probe(struct platform_device *);
23:	static unsigned long rk808_clkout_recalc_rate(struct clk_hw *, unsigned long);
113:	static int rk817_clkout2_is_prepared(struct clk_hw *);
103:	static int rk817_clkout2_prepare(struct clk_hw *);
108:	static void rk817_clkout2_unprepare(struct clk_hw *);

File drivers/clk/clk-s2mps11.c:
271:	static void s2mps11_clk_driver_exit(void);
271:	static int s2mps11_clk_driver_init(void);
54:	static int s2mps11_clk_is_prepared(struct clk_hw *);
37:	static int s2mps11_clk_prepare(struct clk_hw *);
120:	static int s2mps11_clk_probe(struct platform_device *);
68:	static unsigned long s2mps11_clk_recalc_rate(struct clk_hw *, unsigned long);
205:	static int s2mps11_clk_remove(struct platform_device *);
46:	static void s2mps11_clk_unprepare(struct clk_hw *);

File drivers/clk/clk-scmi.c:
98:	static void scmi_clk_atomic_disable(struct clk_hw *);
91:	static int scmi_clk_atomic_enable(struct clk_hw *);
84:	static void scmi_clk_disable(struct clk_hw *);
77:	static int scmi_clk_enable(struct clk_hw *);
27:	static unsigned long scmi_clk_recalc_rate(struct clk_hw *, unsigned long);
40:	static long scmi_clk_round_rate(struct clk_hw *, unsigned long, unsigned long *);
69:	static int scmi_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
262:	static void scmi_clocks_driver_exit(void);
262:	static int scmi_clocks_driver_init(void);
169:	static int scmi_clocks_probe(struct scmi_device *);

File drivers/clk/clk-versaclock5.c:
671:	static unsigned char vc5_clk_out_get_parent(struct clk_hw *);
596:	static int vc5_clk_out_prepare(struct clk_hw *);
705:	static int vc5_clk_out_set_parent(struct clk_hw *, u8);
661:	static void vc5_clk_out_unprepare(struct clk_hw *);
287:	static unsigned long vc5_dbl_recalc_rate(struct clk_hw *, unsigned long);
305:	static long vc5_dbl_round_rate(struct clk_hw *, unsigned long, unsigned long *);
314:	static int vc5_dbl_set_rate(struct clk_hw *, unsigned long, unsigned long);
1295:	static void vc5_driver_exit(void);
1295:	static int vc5_driver_init(void);
495:	static unsigned long vc5_fod_recalc_rate(struct clk_hw *, unsigned long);
523:	static long vc5_fod_round_rate(struct clk_hw *, unsigned long, unsigned long *);
555:	static int vc5_fod_set_rate(struct clk_hw *, unsigned long, unsigned long);
902:	static int vc5_get_output_config(struct i2c_client *, struct vc5_out_data *);
227:	static unsigned char vc5_mux_get_parent(struct clk_hw *);
252:	static int vc5_mux_set_parent(struct clk_hw *, u8);
733:	static struct clk_hw *vc5_of_clk_get(struct of_phandle_args *, void *);
337:	static unsigned long vc5_pfd_recalc_rate(struct clk_hw *, unsigned long);
364:	static long vc5_pfd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
384:	static int vc5_pfd_set_rate(struct clk_hw *, unsigned long, unsigned long);
428:	static unsigned long vc5_pll_recalc_rate(struct clk_hw *, unsigned long);
445:	static long vc5_pll_round_rate(struct clk_hw *, unsigned long, unsigned long *);
473:	static int vc5_pll_set_rate(struct clk_hw *, unsigned long, unsigned long);
942:	static int vc5_probe(struct i2c_client *);
203:	static bool vc5_regmap_is_writeable(struct device *, unsigned int);
1178:	static void vc5_remove(struct i2c_client *);
847:	static int vc5_update_cap_load(struct device_node *, struct vc5_driver_data *);

File drivers/clk/clk-xgene.c:
483:	static void xgene_clk_disable(struct clk_hw *);
443:	static int xgene_clk_enable(struct clk_hw *);
513:	static int xgene_clk_is_enabled(struct clk_hw *);
58:	static int xgene_clk_pll_is_enabled(struct clk_hw *);
70:	static unsigned long xgene_clk_pll_recalc_rate(struct clk_hw *, unsigned long);
236:	static unsigned long xgene_clk_pmd_recalc_rate(struct clk_hw *, unsigned long);
273:	static long xgene_clk_pmd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
292:	static int xgene_clk_pmd_set_rate(struct clk_hw *, unsigned long, unsigned long);
532:	static unsigned long xgene_clk_recalc_rate(struct clk_hw *, unsigned long);
596:	static long xgene_clk_round_rate(struct clk_hw *, unsigned long, unsigned long *);
556:	static int xgene_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
665:	static void xgene_devclk_init(struct device_node *);
198:	static void xgene_pcppllclk_init(struct device_node *);
169:	static void xgene_pllclk_init(struct device_node *, enum xgene_pll_type);
377:	static void xgene_pmdclk_init(struct device_node *);
193:	static void xgene_socpllclk_init(struct device_node *);

File drivers/clk/clk.c:
1590:	int __clk_determine_rate(struct clk_hw *, struct clk_rate_request *);
462:	unsigned int __clk_get_enable_count(struct clk *);
269:	struct clk_hw *__clk_get_hw(struct clk *);
257:	const char *__clk_get_name(const struct clk *);
521:	bool __clk_is_enabled(struct clk *);
672:	struct clk *__clk_lookup(const char *);
750:	int __clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
757:	int __clk_mux_determine_rate_closest(struct clk_hw *, struct clk_rate_request *);
4518:	void __clk_put(struct clk *);
1089:	void clk_disable(struct clk *);
1254:	int clk_enable(struct clk *);
1156:	void clk_gate_restore_context(struct clk_hw *);
1760:	long clk_get_accuracy(struct clk *);
2650:	struct clk *clk_get_parent(struct clk *);
2920:	int clk_get_phase(struct clk *);
1846:	unsigned long clk_get_rate(struct clk *);
3092:	int clk_get_scaled_duty_cycle(struct clk *, unsigned int);
2702:	bool clk_has_parent(const struct clk *, const struct clk *);
3954:	struct clk *clk_hw_create_clk(struct device *, struct clk_hw *, const char *, const char *);
1526:	void clk_hw_forward_rate_request(const struct clk_hw *, const struct clk_rate_request *, const struct clk_hw *, struct clk_rate_request *, unsigned long);
3991:	struct clk *clk_hw_get_clk(struct clk_hw *, const char *);
497:	unsigned long clk_hw_get_flags(const struct clk_hw *);
263:	const char *clk_hw_get_name(const struct clk_hw *);
275:	unsigned int clk_hw_get_num_parents(const struct clk_hw *);
281:	struct clk_hw *clk_hw_get_parent(const struct clk_hw *);
452:	struct clk_hw *clk_hw_get_parent_by_index(const struct clk_hw *, unsigned int);
1911:	int clk_hw_get_parent_index(struct clk_hw *);
483:	unsigned long clk_hw_get_rate(const struct clk_hw *);
706:	void clk_hw_get_rate_range(struct clk_hw *, unsigned long *, unsigned long *);
1504:	void clk_hw_init_rate_request(const struct clk_hw *, struct clk_rate_request *, unsigned long);
515:	bool clk_hw_is_enabled(const struct clk_hw *);
503:	bool clk_hw_is_prepared(const struct clk_hw *);
509:	bool clk_hw_rate_is_protected(const struct clk_hw *);
4229:	int clk_hw_register(struct device *, struct clk_hw *);
2684:	void clk_hw_reparent(struct clk_hw *, struct clk_hw *);
1616:	unsigned long clk_hw_round_rate(struct clk_hw *, unsigned long);
2777:	int clk_hw_set_parent(struct clk_hw *, struct clk_hw *);
731:	void clk_hw_set_rate_range(struct clk_hw *, unsigned long, unsigned long);
4394:	void clk_hw_unregister(struct clk_hw *);
1278:	bool clk_is_enabled_when_prepared(struct clk *);
3112:	bool clk_is_match(const struct clk *, const struct clk *);
586:	int clk_mux_determine_rate_flags(struct clk_hw *, struct clk_rate_request *, unsigned long);
4577:	int clk_notifier_register(struct clk *, struct notifier_block *);
4625:	int clk_notifier_unregister(struct clk *, struct notifier_block *);
1032:	int clk_prepare(struct clk *);
886:	int clk_rate_exclusive_get(struct clk *);
820:	void clk_rate_exclusive_put(struct clk *);
4213:	struct clk *clk_register(struct device *, struct clk_hw *);
1229:	void clk_restore_context(void);
1644:	long clk_round_rate(struct clk *, unsigned long);
1202:	int clk_save_context(void);
3036:	int clk_set_duty_cycle(struct clk *, unsigned int, unsigned int);
2633:	int clk_set_max_rate(struct clk *, unsigned long);
2615:	int clk_set_min_rate(struct clk *, unsigned long);
2800:	int clk_set_parent(struct clk *, struct clk *);
2869:	int clk_set_phase(struct clk *, int);
2441:	int clk_set_rate(struct clk *, unsigned long);
2484:	int clk_set_rate_exclusive(struct clk *, unsigned long);
2591:	int clk_set_rate_range(struct clk *, unsigned long, unsigned long);
951:	void clk_unprepare(struct clk *);
4332:	void clk_unregister(struct clk *);
4486:	struct clk *devm_clk_hw_get_clk(struct device *, struct clk_hw *, const char *);
4450:	int devm_clk_hw_register(struct device *, struct clk_hw *);
4669:	int devm_clk_notifier_register(struct device *, struct clk *, struct notifier_block *);
4420:	struct clk *devm_clk_register(struct device *, struct clk_hw *);
4893:	int devm_of_clk_add_hw_provider(struct device *, struct clk_hw *(*)(struct of_phandle_args *, void *), void *);
4819:	int of_clk_add_hw_provider(struct device_node *, struct clk_hw *(*)(struct of_phandle_args *, void *), void *);
4777:	int of_clk_add_provider(struct device_node *, struct clk *(*)(struct of_phandle_args *, void *), void *);
4923:	void of_clk_del_provider(struct device_node *);
5279:	int of_clk_detect_critical(struct device_node *, int, unsigned long *);
5097:	struct clk *of_clk_get(struct device_node *, int);
5112:	struct clk *of_clk_get_by_name(struct device_node *, const char *);
5063:	struct clk *of_clk_get_from_provider(struct of_phandle_args *);
5071:	struct clk_hw *of_clk_get_hw(struct device_node *, int, const char *);
5127:	unsigned int of_clk_get_parent_count(const struct device_node *);
5139:	const char *of_clk_get_parent_name(const struct device_node *, int);
4755:	struct clk_hw *of_clk_hw_onecell_get(struct of_phandle_args *, void *);
4247:	int of_clk_hw_register(struct device_node *, struct clk_hw *);
4734:	struct clk_hw *of_clk_hw_simple_get(struct of_phandle_args *, void *);
5304:	void of_clk_init(const struct of_device_id *);
5208:	int of_clk_parent_fill(struct device_node *, const char **, unsigned int);
4740:	struct clk *of_clk_src_onecell_get(struct of_phandle_args *, void *);
4727:	struct clk *of_clk_src_simple_get(struct of_phandle_args *, void *);
287:	static struct clk_core *__clk_lookup_subtree(const char *, struct clk_core *);
1723:	static void __clk_recalc_accuracies(struct clk_core *);
1800:	static void __clk_recalc_rates(struct clk_core *, bool, unsigned long);
4095:	static struct clk *__clk_register(struct device *, struct device_node *, struct clk_hw *);
2007:	static void __clk_set_parent_after(struct clk_core *, struct clk_core *, struct clk_core *);
1961:	static struct clk_core *__clk_set_parent_before(struct clk_core *, struct clk_core *);
2073:	static int __clk_speculate_rates(struct clk_core *, unsigned long);
2127:	static struct clk_core *clk_calc_new_rates(struct clk_core *, unsigned long);
2104:	static void clk_calc_subtree(struct clk_core *, unsigned long, struct clk_core *, u8);
2252:	static void clk_change_rate(struct clk_core *);
1041:	static void clk_core_disable(struct clk_core *);
1068:	static void clk_core_disable_lock(struct clk_core *);
1098:	static int clk_core_enable(struct clk_core *);
1134:	static int clk_core_enable_lock(struct clk_core *);
4300:	static void clk_core_evict_parent_cache_subtree(struct clk_core *, const struct clk_core *);
568:	static void clk_core_forward_rate_req(struct clk_core *, const struct clk_rate_request *, struct clk_core *, struct clk_rate_request *, unsigned long);
385:	static struct clk_core *clk_core_get(struct clk_core *, u8);
439:	static struct clk_core *clk_core_get_parent_by_index(struct clk_core *, u8);
3887:	static void clk_core_link_consumer(struct clk_core *, struct clk *);
960:	static int clk_core_prepare(struct clk_core *);
1009:	static int clk_core_prepare_lock(struct clk_core *);
841:	static void clk_core_rate_protect(struct clk_core *);
766:	static void clk_core_rate_unprotect(struct clk_core *);
4694:	static void clk_core_reparent_orphans(void);
3641:	static void clk_core_reparent_orphans_nolock(void);
1184:	static void clk_core_restore_context(struct clk_core *);
1545:	static int clk_core_round_rate_nolock(struct clk_core *, struct clk_rate_request *);
1167:	static int clk_core_save_context(struct clk_core *);
2987:	static int clk_core_set_duty_cycle_nolock(struct clk_core *, struct clk_duty *);
2712:	static int clk_core_set_parent_nolock(struct clk_core *, struct clk_core *);
2371:	static int clk_core_set_rate_nolock(struct clk_core *, unsigned long);
900:	static void clk_core_unprepare(struct clk_core *);
933:	static void clk_core_unprepare_lock(struct clk_core *);
2944:	static int clk_core_update_duty_cycle_nolock(struct clk_core *);
1925:	static void clk_core_update_orphan_status(struct clk_core *, bool);
1389:	static int clk_disable_unused(void);
1335:	static void clk_disable_unused_subtree(struct clk_core *);
1861:	static int clk_fetch_parent_index(struct clk_core *, struct clk_core *);
1382:	static int clk_ignore_unused_setup(char *);
4275:	static void clk_nodrv_disable_unprepare(struct clk_hw *);
4270:	static int clk_nodrv_prepare_enable(struct clk_hw *);
4286:	static int clk_nodrv_set_parent(struct clk_hw *, u8);
4280:	static int clk_nodrv_set_rate(struct clk_hw *, unsigned long, unsigned long);
2214:	static struct clk_core *clk_propagate_rate_change(struct clk_core *, unsigned long);
2512:	static int clk_set_rate_range_nolock(struct clk *, unsigned long, unsigned long);
1305:	static void clk_unprepare_unused_subtree(struct clk_core *);
4405:	static void devm_clk_hw_unregister_cb(struct device *, void *);
4662:	static void devm_clk_notifier_release(struct device *, void *);
4471:	static void devm_clk_release(struct device *, void *);
4400:	static void devm_clk_unregister_cb(struct device *, void *);
4855:	static void devm_of_clk_release_provider(struct device *, void *);

File drivers/clk/clkdev.c:
239:	int clk_add_alias(const char *, const char *, const char *, struct device *);
72:	struct clk_hw *clk_find_hw(const char *, const char *);
100:	struct clk *clk_get(struct device *, const char *);
94:	struct clk *clk_get_sys(const char *, const char *);
340:	int clk_hw_register_clkdev(struct clk_hw *, const char *, const char *);
115:	void clk_put(struct clk *);
313:	int clk_register_clkdev(struct clk *, const char *, const char *);
128:	void clkdev_add(struct clk_lookup *);
136:	void clkdev_add_table(struct clk_lookup *, size_t);
202:	struct clk_lookup *clkdev_create(struct clk *, const char *, const char *, ...);
259:	void clkdev_drop(struct clk_lookup *);
225:	struct clk_lookup *clkdev_hw_create(struct clk_hw *, const char *, const char *, ...);
369:	int devm_clk_hw_register_clkdev(struct device *, struct clk_hw *, const char *, const char *);
268:	static struct clk_lookup *__clk_register_clkdev(struct clk_hw *, const char *, const char *, ...);
349:	static void devm_clkdev_release(void *);
157:	static struct clk_lookup *vclkdev_alloc(struct clk_hw *, const char *, const char *, va_list);

File drivers/clk/keystone/sci-clk.c:
354:	static int _cmp_sci_clk(const void *, const void *);
498:	static int _cmp_sci_clk_list(void *, const struct list_head *, const struct list_head *);
167:	static int sci_clk_determine_rate(struct clk_hw *, struct clk_rate_request *);
377:	static struct clk_hw *sci_clk_get(struct of_phandle_args *, void *);
226:	static u8 sci_clk_get_parent(struct clk_hw *);
111:	static int sci_clk_is_prepared(struct clk_hw *);
72:	static int sci_clk_prepare(struct clk_hw *);
138:	static unsigned long sci_clk_recalc_rate(struct clk_hw *, unsigned long);
253:	static int sci_clk_set_parent(struct clk_hw *, u8);
210:	static int sci_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
91:	static void sci_clk_unprepare(struct clk_hw *);
707:	static void ti_sci_clk_driver_exit(void);
707:	static int ti_sci_clk_driver_init(void);
641:	static int ti_sci_clk_probe(struct platform_device *);
692:	static int ti_sci_clk_remove(struct platform_device *);

File drivers/clk/keystone/syscon-clk.c:
39:	static void ti_syscon_gate_clk_disable(struct clk_hw *);
193:	static void ti_syscon_gate_clk_driver_exit(void);
193:	static int ti_syscon_gate_clk_driver_init(void);
31:	static int ti_syscon_gate_clk_enable(struct clk_hw *);
46:	static int ti_syscon_gate_clk_is_enabled(struct clk_hw *);
92:	static int ti_syscon_gate_clk_probe(struct platform_device *);

File drivers/clocksource/arm_arch_timer.c:
1053:	bool arch_timer_evtstrm_available(void);
1070:	struct arch_timer_kvm_info *arch_timer_get_kvm_info(void);
1048:	u32 arch_timer_get_rate(void);
1754:	int kvm_arch_ptp_get_crosststamp(u64 *, struct timespec64 *, struct clocksource **);
827:	static void __arch_timer_setup(unsigned int, struct clock_event_device *);
199:	static u64 arch_counter_get_cntpct(void);
194:	static u64 arch_counter_get_cntpct_stable(void);
209:	static u64 arch_counter_get_cntvct(void);
1063:	static u64 arch_counter_get_cntvct_mem(void);
204:	static u64 arch_counter_get_cntvct_stable(void);
223:	static u64 arch_counter_read(struct clocksource *);
228:	static u64 arch_counter_read_cc(const struct cyclecounter *);
1075:	static void arch_counter_register(unsigned int);
1030:	static void arch_timer_banner(unsigned int);
592:	static void arch_timer_check_ool_workaround(enum arch_timer_erratum_match_type, void *);
1319:	static int arch_timer_common_init(void);
1130:	static int arch_timer_dying_cpu(unsigned int);
670:	static irqreturn_t arch_timer_handler_phys(int, void *);
677:	static irqreturn_t arch_timer_handler_phys_mem(int, void *);
663:	static irqreturn_t arch_timer_handler_virt(int, void *);
684:	static irqreturn_t arch_timer_handler_virt_mem(int, void *);
1450:	static struct arch_timer_mem_frame *arch_timer_mem_find_best_frame(struct arch_timer_mem *);
1431:	static u32 arch_timer_mem_frame_get_cntfrq(struct arch_timer_mem_frame *);
1501:	static int arch_timer_mem_frame_register(struct arch_timer_mem_frame *);
1538:	static int arch_timer_mem_of_init(struct device_node *);
1253:	static int arch_timer_mem_register(void *, unsigned int);
1292:	static bool arch_timer_needs_of_probing(void);
1016:	static void arch_timer_of_configure_rate(u32, struct device_node *);
1365:	static int arch_timer_of_init(struct device_node *);
1183:	static int arch_timer_register(void);
749:	static int arch_timer_set_next_event_phys(unsigned long, struct clock_event_device *);
796:	static int arch_timer_set_next_event_phys_mem(unsigned long, struct clock_event_device *);
742:	static int arch_timer_set_next_event_virt(unsigned long, struct clock_event_device *);
789:	static int arch_timer_set_next_event_virt_mem(unsigned long, struct clock_event_device *);
708:	static int arch_timer_shutdown_phys(struct clock_event_device *);
718:	static int arch_timer_shutdown_phys_mem(struct clock_event_device *);
703:	static int arch_timer_shutdown_virt(struct clock_event_device *);
713:	static int arch_timer_shutdown_virt_mem(struct clock_event_device *);
977:	static int arch_timer_starting_cpu(unsigned int);
341:	static u64 arm64_858921_read_cntpct_el0(void);
350:	static u64 arm64_858921_read_cntvct_el0(void);
99:	static int early_evtstrm_cfg(char *);
431:	static int erratum_set_next_event_phys(unsigned long, struct clock_event_device *);
424:	static int erratum_set_next_event_virt(unsigned long, struct clock_event_device *);
270:	static u64 fsl_a008585_read_cntpct_el0(void);
275:	static u64 fsl_a008585_read_cntvct_el0(void);
306:	static u64 hisi_161010101_read_cntpct_el0(void);
311:	static u64 hisi_161010101_read_cntvct_el0(void);

File drivers/clocksource/dummy_timer.c:
31:	static int dummy_timer_register(void);
16:	static int dummy_timer_starting_cpu(unsigned int);

File drivers/clocksource/timer-of.c:
220:	void timer_of_cleanup(struct timer_of *);
168:	int timer_of_init(struct device_node *, struct timer_of *);
154:	static int timer_of_base_init(struct device_node *, struct of_timer_base *);
94:	static void timer_of_clk_exit(struct of_timer_clk *);
110:	static int timer_of_clk_init(struct device_node *, struct of_timer_clk *);
22:	static void timer_of_irq_exit(struct of_timer_irq *);
50:	static int timer_of_irq_init(struct device_node *, struct of_timer_irq *);

File drivers/clocksource/timer-probe.c:
16:	void timer_probe(void);

File drivers/clocksource/timer-ti-dm.c:
719:	u32 omap_dm_timer_modify_idlect_mask(__u32);
499:	static struct dmtimer *_omap_dm_timer_request(int, void *);
463:	static void omap_dm_timer_disable(struct omap_dm_timer *);
1283:	static void omap_dm_timer_driver_exit(void);
1283:	static int omap_dm_timer_driver_init(void);
452:	static void omap_dm_timer_enable(struct omap_dm_timer *);
633:	static int omap_dm_timer_free(struct omap_dm_timer *);
710:	static struct clk *omap_dm_timer_get_fclk(struct omap_dm_timer *);
659:	static int omap_dm_timer_get_irq(struct omap_dm_timer *);
863:	static int omap_dm_timer_get_pwm_status(struct omap_dm_timer *);
1073:	static int omap_dm_timer_probe(struct platform_device *);
1003:	static unsigned int omap_dm_timer_read_counter(struct omap_dm_timer *);
974:	static unsigned int omap_dm_timer_read_status(struct omap_dm_timer *);
1180:	static int omap_dm_timer_remove(struct platform_device *);
583:	static struct omap_dm_timer *omap_dm_timer_request(void);
619:	static struct omap_dm_timer *omap_dm_timer_request_by_node(struct device_node *);
594:	static struct omap_dm_timer *omap_dm_timer_request_specific(int);
946:	static int omap_dm_timer_set_int_disable(struct omap_dm_timer *, u32);
916:	static int omap_dm_timer_set_int_enable(struct omap_dm_timer *, unsigned int);
776:	static int omap_dm_timer_set_load(struct omap_dm_timer *, unsigned int);
799:	static int omap_dm_timer_set_match(struct omap_dm_timer *, int, unsigned int);
886:	static int omap_dm_timer_set_prescaler(struct omap_dm_timer *, int);
829:	static int omap_dm_timer_set_pwm(struct omap_dm_timer *, int, int, int, int);
394:	static int omap_dm_timer_set_source(struct omap_dm_timer *, int);
728:	static int omap_dm_timer_start(struct omap_dm_timer *);
754:	static int omap_dm_timer_stop(struct omap_dm_timer *);
1016:	static int omap_dm_timer_write_counter(struct omap_dm_timer *, unsigned int);
990:	static int omap_dm_timer_write_status(struct omap_dm_timer *, unsigned int);
325:	static int omap_timer_context_notifier(struct notifier_block *, unsigned long, void *);

File drivers/dma-buf/dma-buf.c:
980:	struct dma_buf_attachment *dma_buf_attach(struct dma_buf *, struct device *);
1396:	int dma_buf_begin_cpu_access(struct dma_buf *, enum dma_data_direction);
1006:	void dma_buf_detach(struct dma_buf *, struct dma_buf_attachment *);
894:	struct dma_buf_attachment *dma_buf_dynamic_attach(struct dma_buf *, struct device *, const struct dma_buf_attach_ops *, void *);
1432:	int dma_buf_end_cpu_access(struct dma_buf *, enum dma_data_direction);
613:	struct dma_buf *dma_buf_export(const struct dma_buf_export_info *);
705:	int dma_buf_fd(struct dma_buf *, int);
730:	struct dma_buf *dma_buf_get(int);
1103:	struct sg_table *dma_buf_map_attachment(struct dma_buf_attachment *, enum dma_data_direction);
1180:	struct sg_table *dma_buf_map_attachment_unlocked(struct dma_buf_attachment *, enum dma_data_direction);
1463:	int dma_buf_mmap(struct dma_buf *, struct vm_area_struct *, unsigned long);
1263:	void dma_buf_move_notify(struct dma_buf *);
1045:	int dma_buf_pin(struct dma_buf_attachment *);
758:	void dma_buf_put(struct dma_buf *);
1208:	void dma_buf_unmap_attachment(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
1240:	void dma_buf_unmap_attachment_unlocked(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
1069:	void dma_buf_unpin(struct dma_buf_attachment *);
1512:	int dma_buf_vmap(struct dma_buf *, struct iosys_map *);
1559:	int dma_buf_vmap_unlocked(struct dma_buf *, struct iosys_map *);
1581:	void dma_buf_vunmap(struct dma_buf *, struct iosys_map *);
1605:	void dma_buf_vunmap_unlocked(struct dma_buf *, struct iosys_map *);
1739:	static void dma_buf_deinit(void);
90:	static int dma_buf_file_release(struct inode *, struct file *);
114:	static int dma_buf_fs_init_context(struct fs_context *);
1720:	static int dma_buf_init(void);
445:	static long dma_buf_ioctl(struct file *, unsigned int, unsigned long);
157:	static loff_t dma_buf_llseek(struct file *, loff_t, int);
131:	static int dma_buf_mmap_internal(struct file *, struct vm_area_struct *);
242:	static __poll_t dma_buf_poll(struct file *, poll_table *);
223:	static bool dma_buf_poll_add_cb(struct dma_resv *, bool, struct dma_buf_poll_cb_t *);
208:	static void dma_buf_poll_cb(struct dma_fence *, struct dma_fence_cb *);
61:	static void dma_buf_release(struct dentry *);
500:	static void dma_buf_show_fdinfo(struct seq_file *, struct file *);
45:	static char *dmabuffs_dname(struct dentry *, char *, int);

File drivers/dma-buf/dma-fence-array.c:
154:	struct dma_fence_array *dma_fence_array_create(int, struct dma_fence **, u64, unsigned int, bool);
225:	struct dma_fence *dma_fence_array_first(struct dma_fence *);
243:	struct dma_fence *dma_fence_array_next(struct dma_fence *, unsigned int);
208:	bool dma_fence_match_context(struct dma_fence *, u64);
55:	static void dma_fence_array_cb_func(struct dma_fence *, struct dma_fence_cb *);
70:	static bool dma_fence_array_enable_signaling(struct dma_fence *);
18:	static const char *dma_fence_array_get_driver_name(struct dma_fence *);
23:	static const char *dma_fence_array_get_timeline_name(struct dma_fence *);
114:	static void dma_fence_array_release(struct dma_fence *);
103:	static bool dma_fence_array_signaled(struct dma_fence *);
45:	static void irq_dma_fence_array_work(struct irq_work *);

File drivers/dma-buf/dma-fence-chain.c:
90:	int dma_fence_chain_find_seqno(struct dma_fence **, uint64_t);
229:	void dma_fence_chain_init(struct dma_fence_chain *, struct dma_fence *, struct dma_fence *, uint64_t);
39:	struct dma_fence *dma_fence_chain_walk(struct dma_fence *);
135:	static void dma_fence_chain_cb(struct dma_fence *, struct dma_fence_cb *);
145:	static bool dma_fence_chain_enable_signaling(struct dma_fence *);
112:	static const char *dma_fence_chain_get_driver_name(struct dma_fence *);
21:	static struct dma_fence *dma_fence_chain_get_prev(struct dma_fence_chain *);
117:	static const char *dma_fence_chain_get_timeline_name(struct dma_fence *);
122:	static void dma_fence_chain_irq_work(struct irq_work *);
178:	static void dma_fence_chain_release(struct dma_fence *);
164:	static bool dma_fence_chain_signaled(struct dma_fence *);

File drivers/dma-buf/dma-fence-unwrap.c:
63:	struct dma_fence *__dma_fence_unwrap_merge(unsigned int, struct dma_fence **, struct dma_fence_unwrap *);
33:	struct dma_fence *dma_fence_unwrap_first(struct dma_fence *, struct dma_fence_unwrap *);
48:	struct dma_fence *dma_fence_unwrap_next(struct dma_fence_unwrap *);

File drivers/dma-buf/dma-fence.c:
642:	int dma_fence_add_callback(struct dma_fence *, struct dma_fence_cb *, dma_fence_func_t);
156:	struct dma_fence *dma_fence_allocate_private_stub(void);
186:	u64 dma_fence_context_alloc(unsigned int);
760:	long dma_fence_default_wait(struct dma_fence *, bool, long);
922:	void dma_fence_describe(struct dma_fence *, struct seq_file *);
610:	void dma_fence_enable_sw_signaling(struct dma_fence *);
572:	void dma_fence_free(struct dma_fence *);
684:	int dma_fence_get_status(struct dma_fence *);
131:	struct dma_fence *dma_fence_get_stub(void);
947:	void dma_fence_init(struct dma_fence *, const struct dma_fence_ops *, spinlock_t *, u64, u64);
530:	void dma_fence_release(struct kref *);
716:	bool dma_fence_remove_callback(struct dma_fence *, struct dma_fence_cb *);
460:	int dma_fence_signal(struct dma_fence *);
441:	int dma_fence_signal_locked(struct dma_fence *);
409:	int dma_fence_signal_timestamp(struct dma_fence *, ktime_t);
366:	int dma_fence_signal_timestamp_locked(struct dma_fence *, ktime_t);
847:	long dma_fence_wait_any_timeout(struct dma_fence **, uint32_t, bool, long, uint32_t *);
500:	long dma_fence_wait_timeout(struct dma_fence *, bool, long);
578:	static bool __dma_fence_enable_signaling(struct dma_fence *);
739:	static void dma_fence_default_wait_cb(struct dma_fence *, struct dma_fence_cb *);
114:	static const char *dma_fence_stub_get_name(struct dma_fence *);

File drivers/dma-buf/dma-resv.c:
280:	void dma_resv_add_fence(struct dma_resv *, struct dma_fence *, enum dma_resv_usage);
513:	int dma_resv_copy_fences(struct dma_resv *, struct dma_resv *);
724:	void dma_resv_describe(struct dma_resv *, struct seq_file *);
150:	void dma_resv_fini(struct dma_resv *);
561:	int dma_resv_get_fences(struct dma_resv *, enum dma_resv_usage, unsigned int *, struct dma_fence ***);
614:	int dma_resv_get_singleton(struct dma_resv *, enum dma_resv_usage, struct dma_fence **);
138:	void dma_resv_init(struct dma_resv *);
463:	struct dma_fence *dma_resv_iter_first(struct dma_resv_iter *);
412:	struct dma_fence *dma_resv_iter_first_unlocked(struct dma_resv_iter *);
485:	struct dma_fence *dma_resv_iter_next(struct dma_resv_iter *);
435:	struct dma_fence *dma_resv_iter_next_unlocked(struct dma_resv_iter *);
335:	void dma_resv_replace_fences(struct dma_resv *, uint64_t, struct dma_fence *, enum dma_resv_usage);
182:	int dma_resv_reserve_fences(struct dma_resv *, unsigned int);
701:	bool dma_resv_test_signaled(struct dma_resv *, enum dma_resv_usage);
665:	long dma_resv_wait_timeout(struct dma_resv *, enum dma_resv_usage, bool, unsigned long);
370:	static void dma_resv_iter_walk_unlocked(struct dma_resv_iter *);
118:	static void dma_resv_list_free(struct dma_resv_list *);

File drivers/dma-buf/sync_file.c:
65:	struct sync_file *sync_file_create(struct dma_fence *);
103:	struct dma_fence *sync_file_get_fence(int);
132:	char *sync_file_get_name(struct sync_file *, char *, int);
47:	static void fence_check_cb_func(struct dma_fence *, struct dma_fence_cb *);
353:	static long sync_file_ioctl(struct file *, unsigned int, unsigned long);
191:	static __poll_t sync_file_poll(struct file *, poll_table *);
179:	static int sync_file_release(struct inode *, struct file *);

File drivers/extcon/devres.c:
65:	struct extcon_dev *devm_extcon_dev_allocate(struct device *, const unsigned int *);
97:	void devm_extcon_dev_free(struct device *, struct extcon_dev *);
118:	int devm_extcon_dev_register(struct device *, struct extcon_dev *);
148:	void devm_extcon_dev_unregister(struct device *, struct extcon_dev *);
172:	int devm_extcon_register_notifier(struct device *, struct extcon_dev *, unsigned int, struct notifier_block *);
228:	int devm_extcon_register_notifier_all(struct device *, struct extcon_dev *, struct notifier_block *);
206:	void devm_extcon_unregister_notifier(struct device *, struct extcon_dev *, unsigned int, struct notifier_block *);
260:	void devm_extcon_unregister_notifier_all(struct device *, struct extcon_dev *, struct notifier_block *);
11:	static int devm_extcon_dev_match(struct device *, void *, void *);
45:	static void devm_extcon_dev_notifier_all_unreg(struct device *, void *);
38:	static void devm_extcon_dev_notifier_unreg(struct device *, void *);
21:	static void devm_extcon_dev_release(struct device *, void *);
27:	static void devm_extcon_dev_unreg(struct device *, void *);

File drivers/extcon/extcon.c:
1045:	struct extcon_dev *extcon_dev_allocate(const unsigned int *);
1066:	void extcon_dev_free(struct extcon_dev *);
1086:	int extcon_dev_register(struct extcon_dev *);
1298:	void extcon_dev_unregister(struct extcon_dev *);
1346:	struct extcon_dev *extcon_find_edev_by_node(struct device_node *);
1368:	struct extcon_dev *extcon_get_edev_by_phandle(struct device *, int);
1415:	const char *extcon_get_edev_name(struct extcon_dev *);
871:	struct extcon_dev *extcon_get_extcon_dev(const char *);
614:	int extcon_get_property(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value *);
784:	int extcon_get_property_capability(struct extcon_dev *, unsigned int, unsigned int);
500:	int extcon_get_state(struct extcon_dev *, const unsigned int);
903:	int extcon_register_notifier(struct extcon_dev *, unsigned int, struct notifier_block *);
965:	int extcon_register_notifier_all(struct extcon_dev *, struct notifier_block *);
693:	int extcon_set_property(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value);
818:	int extcon_set_property_capability(struct extcon_dev *, unsigned int, unsigned int);
761:	int extcon_set_property_sync(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value);
533:	int extcon_set_state(struct extcon_dev *, unsigned int, bool);
588:	int extcon_set_state_sync(struct extcon_dev *, unsigned int, bool);
419:	int extcon_sync(struct extcon_dev *, unsigned int);
932:	int extcon_unregister_notifier(struct extcon_dev *, unsigned int, struct notifier_block *);
989:	int extcon_unregister_notifier_all(struct extcon_dev *, struct notifier_block *);
386:	static ssize_t cable_name_show(struct device *, struct device_attribute *, char *);
397:	static ssize_t cable_state_show(struct device *, struct device_attribute *, char *);
1030:	static void dummy_sysfs_dev_release(struct device *);
1427:	static void extcon_class_exit(void);
1421:	static int extcon_class_init(void);
1025:	static void extcon_dev_release(struct device *);
377:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
358:	static ssize_t state_show(struct device *, struct device_attribute *, char *);

File drivers/firmware/arm_scmi/base.c:
428:	int scmi_base_register(void);
428:	void scmi_base_unregister(void);
321:	static void *scmi_base_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
172:	static int scmi_base_implementation_list_get(const struct scmi_protocol_handle *, u8 *);
139:	static int scmi_base_implementation_version_get(const struct scmi_protocol_handle *);
373:	static int scmi_base_protocol_init(const struct scmi_protocol_handle *);
309:	static int scmi_base_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
97:	static int scmi_base_vendor_id_get(const struct scmi_protocol_handle *, bool);

File drivers/firmware/arm_scmi/bus.c:
301:	void scmi_bus_exit(void);
290:	int scmi_bus_init(void);
63:	struct scmi_device *scmi_child_dev_find(struct device *, int, const char *);
168:	struct scmi_device *scmi_device_create(struct device_node *, struct device *, int, const char *);
211:	void scmi_device_destroy(struct scmi_device *);
219:	void scmi_device_link_add(struct device *, struct device *);
130:	int scmi_driver_register(struct scmi_driver *, struct module *, const char *);
155:	void scmi_driver_unregister(struct scmi_driver *);
79:	const struct scmi_protocol *scmi_protocol_get(int);
94:	void scmi_protocol_put(int);
235:	int scmi_protocol_register(const struct scmi_protocol *);
265:	void scmi_protocol_unregister(const struct scmi_protocol *);
228:	void scmi_set_handle(struct scmi_device *);
277:	static int __scmi_devices_unregister(struct device *, void *);
41:	static int scmi_dev_match(struct device *, struct device_driver *);
103:	static int scmi_dev_probe(struct device *);
114:	static void scmi_dev_remove(struct device *);
162:	static void scmi_device_release(struct device *);
54:	static int scmi_match_by_id_table(struct device *, void *);

File drivers/firmware/arm_scmi/clock.c:
619:	int scmi_clock_register(void);
619:	void scmi_clock_unregister(void);
202:	static void iter_clk_describe_prepare_message(void *, const unsigned int, const void *);
254:	static int iter_clk_describe_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
215:	static int iter_clk_describe_update_state(struct scmi_iterator_state *, const void *, void *);
184:	static int rate_cmp_func(const void *, const void *);
515:	static void *scmi_clk_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
537:	static int scmi_clk_get_num_sources(const struct scmi_protocol_handle *);
498:	static int scmi_clk_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
443:	static int scmi_clock_count_get(const struct scmi_protocol_handle *);
426:	static int scmi_clock_disable(const struct scmi_protocol_handle *, u32);
437:	static int scmi_clock_disable_atomic(const struct scmi_protocol_handle *, u32);
421:	static int scmi_clock_enable(const struct scmi_protocol_handle *, u32);
431:	static int scmi_clock_enable_atomic(const struct scmi_protocol_handle *, u32);
451:	static const struct scmi_clock_info *scmi_clock_info_get(const struct scmi_protocol_handle *, u32);
573:	static int scmi_clock_protocol_init(const struct scmi_protocol_handle *);
328:	static int scmi_clock_rate_get(const struct scmi_protocol_handle *, u32, u64 *);
349:	static int scmi_clock_rate_set(const struct scmi_protocol_handle *, u32, u64);

File drivers/firmware/arm_scmi/driver.c:
2484:	void scmi_free_channel(struct scmi_chan_info *, struct idr *, int);
1850:	struct scmi_handle *scmi_handle_get(struct device *);
1881:	int scmi_handle_put(const struct scmi_handle *);
207:	void *scmi_notification_instance_data_get(const struct scmi_handle *);
197:	void scmi_notification_instance_data_set(const struct scmi_handle *, void *);
1611:	int scmi_protocol_acquire(const struct scmi_handle *, u8);
2190:	int scmi_protocol_device_request(const struct scmi_device_id *);
2321:	void scmi_protocol_device_unrequest(const struct scmi_device_id *);
1624:	void scmi_protocol_release(const struct scmi_handle *, u8);
1473:	struct scmi_revision_info *scmi_revision_area_get(const struct scmi_protocol_handle *);
741:	void scmi_rx_callback(struct scmi_chan_info *, u32, void *);
1656:	void scmi_setup_protocol_implemented(const struct scmi_protocol_handle *, u8 *);
1897:	static int __scmi_xfer_info_init(struct scmi_info *, struct scmi_xfers_info *);
415:	static void __scmi_xfer_put(struct scmi_xfers_info *, struct scmi_xfer *);
877:	static int do_xfer(const struct scmi_protocol_handle *, struct scmi_xfer *);
983:	static int do_xfer_with_response(const struct scmi_protocol_handle *, struct scmi_xfer *);
2530:	static ssize_t firmware_version_show(struct device *, struct device_attribute *, char *);
2520:	static ssize_t protocol_version_show(struct device *, struct device_attribute *, char *);
948:	static void reset_rx_to_maxsz(const struct scmi_protocol_handle *, struct scmi_xfer *);
1990:	static int scmi_chan_setup(struct scmi_info *, struct device *, int, bool);
1151:	static int scmi_common_extended_name_get(const struct scmi_protocol_handle *, u8, u32, char *, size_t);
1428:	static void scmi_common_fastchannel_db_ring(struct scmi_fc_db_info *);
1313:	static void scmi_common_fastchannel_init(const struct scmi_protocol_handle *, u8, u32, u32, u32, void **, struct scmi_fc_db_info **);
1769:	static int scmi_devm_protocol_acquire(struct scmi_device *, u8);
1736:	static const void *scmi_devm_protocol_get(struct scmi_device *, u8, struct scmi_protocol_handle **);
1781:	static int scmi_devm_protocol_match(struct device *, void *, void *);
1800:	static void scmi_devm_protocol_put(struct scmi_device *, u8);
1686:	static void scmi_devm_release_protocol(struct device *, void *);
2674:	static void scmi_driver_exit(void);
2644:	static int scmi_driver_init(void);
2079:	static struct scmi_device *scmi_get_protocol_device(struct device_node *, struct scmi_info *, int, const char *);
1576:	static struct scmi_protocol_instance *scmi_get_protocol_instance(const struct scmi_handle *, u8);
1119:	static void *scmi_get_protocol_priv(const struct scmi_protocol_handle *);
1819:	static bool scmi_is_transport_atomic(const struct scmi_handle *, unsigned int *);
1205:	static void *scmi_iterator_init(const struct scmi_protocol_handle *, struct scmi_iterator_ops *, unsigned int, u8, size_t, void *);
1234:	static int scmi_iterator_run(void *);
2365:	static int scmi_probe(struct platform_device *);
2489:	static int scmi_remove(struct platform_device *);
1102:	static int scmi_set_protocol_priv(const struct scmi_protocol_handle *, void *);
2639:	static void scmi_transports_exit(void);
2634:	static int scmi_transports_init(void);
774:	static bool scmi_xfer_done_no_timeout(struct scmi_chan_info *, struct scmi_xfer *, ktime_t);
2548:	static ssize_t sub_vendor_id_show(struct device *, struct device_attribute *, char *);
2539:	static ssize_t vendor_id_show(struct device *, struct device_attribute *, char *);
1074:	static int version_get(const struct scmi_protocol_handle *, u32 *);
1030:	static int xfer_get_init(const struct scmi_protocol_handle *, u8, size_t, size_t, struct scmi_xfer **);
765:	static void xfer_put(const struct scmi_protocol_handle *, struct scmi_xfer *);

File drivers/firmware/arm_scmi/mailbox.c:
49:	static bool mailbox_chan_available(struct device *, int);
111:	static int mailbox_chan_free(int, void *, void *);
55:	static int mailbox_chan_setup(struct scmi_chan_info *, struct device *, bool);
173:	static void mailbox_clear_channel(struct scmi_chan_info *);
165:	static void mailbox_fetch_notification(struct scmi_chan_info *, size_t, struct scmi_xfer *);
157:	static void mailbox_fetch_response(struct scmi_chan_info *, struct scmi_xfer *);
143:	static void mailbox_mark_txdone(struct scmi_chan_info *, int, struct scmi_xfer *);
181:	static bool mailbox_poll_done(struct scmi_chan_info *, struct scmi_xfer *);
128:	static int mailbox_send_message(struct scmi_chan_info *, struct scmi_xfer *);
42:	static void rx_callback(struct mbox_client *, void *);
35:	static void tx_prepare(struct mbox_client *, void *);

File drivers/firmware/arm_scmi/notify.c:
839:	void scmi_deregister_protocol_events(const struct scmi_handle *, u8);
1699:	void scmi_notification_exit(struct scmi_handle *);
1646:	int scmi_notification_init(struct scmi_handle *);
578:	int scmi_notify(const struct scmi_handle *, u8, u8, const void *, size_t, ktime_t);
748:	int scmi_register_protocol_events(const struct scmi_handle *, u8, const struct scmi_protocol_handle *, const struct scmi_protocol_events *);
1047:	static struct scmi_event_handler *__scmi_event_handler_get_ops(struct scmi_notify_instance *, u32, bool);
1498:	static int scmi_devm_notifier_match(struct device *, void *, void *);
1463:	static int scmi_devm_notifier_register(struct scmi_device *, u8, u8, const u32 *, struct notifier_block *);
1531:	static int scmi_devm_notifier_unregister(struct scmi_device *, u8, u8, const u32 *, struct notifier_block *);
1439:	static void scmi_devm_release_notifier(struct device *, void *);
1299:	static int scmi_event_handler_enable_events(struct scmi_event_handler *);
536:	static void scmi_events_dispatcher(struct work_struct *);
636:	static void scmi_kfifo_free(void *);
385:	static void scmi_lookup_and_call_event_chain(struct scmi_notify_instance *, u32, void *);
1342:	static int scmi_notifier_register(const struct scmi_handle *, u8, u8, const u32 *, struct notifier_block *);
1389:	static int scmi_notifier_unregister(const struct scmi_handle *, u8, u8, const u32 *, struct notifier_block *);
1567:	static void scmi_protocols_late_init(struct work_struct *);
1250:	static void scmi_put_handler(struct scmi_notify_instance *, struct scmi_event_handler *);
1235:	static bool scmi_put_handler_unlocked(struct scmi_notify_instance *, struct scmi_event_handler *);

File drivers/firmware/arm_scmi/perf.c:
854:	int scmi_perf_register(void);
854:	void scmi_perf_unregister(void);
257:	static void iter_perf_levels_prepare_message(void *, unsigned int, const void *);
281:	static int iter_perf_levels_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
269:	static int iter_perf_levels_update_state(struct scmi_iterator_state *, const void *, void *);
245:	static int opp_cmp_func(const void *, const void *);
559:	static int scmi_dev_domain_id(struct device *);
570:	static int scmi_dvfs_device_opps_add(const struct scmi_protocol_handle *, struct device *);
642:	static int scmi_dvfs_est_power_get(const struct scmi_protocol_handle *, u32, unsigned long *, unsigned long *);
627:	static int scmi_dvfs_freq_get(const struct scmi_protocol_handle *, u32, unsigned long *, bool);
618:	static int scmi_dvfs_freq_set(const struct scmi_protocol_handle *, u32, unsigned long, bool);
603:	static int scmi_dvfs_transition_latency_get(const struct scmi_protocol_handle *, struct device *);
670:	static bool scmi_fast_switch_possible(const struct scmi_protocol_handle *, struct device *);
721:	static void *scmi_perf_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
769:	static int scmi_perf_get_num_sources(const struct scmi_protocol_handle *);
490:	static int scmi_perf_level_get(const struct scmi_protocol_handle *, u32, u32 *, bool);
449:	static int scmi_perf_level_set(const struct scmi_protocol_handle *, u32, u32, bool);
408:	static int scmi_perf_limits_get(const struct scmi_protocol_handle *, u32, u32 *, u32 *);
359:	static int scmi_perf_limits_set(const struct scmi_protocol_handle *, u32, u32, u32);
805:	static int scmi_perf_protocol_init(const struct scmi_protocol_handle *);
704:	static int scmi_perf_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
682:	static enum scmi_power_scale scmi_power_scale_get(const struct scmi_protocol_handle *);

File drivers/firmware/arm_scmi/power.c:
342:	int scmi_power_register(void);
342:	void scmi_power_unregister(void);
245:	static void *scmi_power_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
265:	static int scmi_power_get_num_sources(const struct scmi_protocol_handle *);
193:	static const char *scmi_power_name_get(const struct scmi_protocol_handle *, u32);
185:	static int scmi_power_num_domains_get(const struct scmi_protocol_handle *);
297:	static int scmi_power_protocol_init(const struct scmi_protocol_handle *);
231:	static int scmi_power_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
165:	static int scmi_power_state_get(const struct scmi_protocol_handle *, u32, u32 *);
143:	static int scmi_power_state_set(const struct scmi_protocol_handle *, u32, u32);

File drivers/firmware/arm_scmi/powercap.c:
866:	int scmi_powercap_register(void);
866:	void scmi_powercap_unregister(void);
316:	static int scmi_powercap_cap_get(const struct scmi_protocol_handle *, u32, u32 *);
378:	static int scmi_powercap_cap_set(const struct scmi_protocol_handle *, u32, u32, bool);
285:	static const struct scmi_powercap_info *scmi_powercap_dom_info_get(const struct scmi_protocol_handle *, u32);
715:	static void *scmi_powercap_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
764:	static int scmi_powercap_get_num_sources(const struct scmi_protocol_handle *);
490:	static int scmi_powercap_measurements_get(const struct scmi_protocol_handle *, u32, u32 *, u32 *);
521:	static int scmi_powercap_measurements_threshold_get(const struct scmi_protocol_handle *, u32, u32 *, u32 *);
538:	static int scmi_powercap_measurements_threshold_set(const struct scmi_protocol_handle *, u32, u32, u32);
609:	static int scmi_powercap_notify(const struct scmi_protocol_handle *, u32, int, bool);
277:	static int scmi_powercap_num_domains_get(const struct scmi_protocol_handle *);
424:	static int scmi_powercap_pai_get(const struct scmi_protocol_handle *, u32, u32 *);
467:	static int scmi_powercap_pai_set(const struct scmi_protocol_handle *, u32, u32);
805:	static int scmi_powercap_protocol_init(const struct scmi_protocol_handle *);
677:	static int scmi_powercap_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);

File drivers/firmware/arm_scmi/reset.c:
356:	int scmi_reset_register(void);
356:	void scmi_reset_unregister(void);
204:	static int scmi_reset_domain_assert(const struct scmi_protocol_handle *, u32);
211:	static int scmi_reset_domain_deassert(const struct scmi_protocol_handle *, u32);
196:	static int scmi_reset_domain_reset(const struct scmi_protocol_handle *, u32);
261:	static void *scmi_reset_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
281:	static int scmi_reset_get_num_sources(const struct scmi_protocol_handle *);
153:	static int scmi_reset_latency_get(const struct scmi_protocol_handle *, u32);
144:	static const char *scmi_reset_name_get(const struct scmi_protocol_handle *, u32);
136:	static int scmi_reset_num_domains_get(const struct scmi_protocol_handle *);
312:	static int scmi_reset_protocol_init(const struct scmi_protocol_handle *);
247:	static int scmi_reset_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);

File drivers/firmware/arm_scmi/scmi_pm_domain.c:
50:	static int scmi_pd_power_off(struct generic_pm_domain *);
45:	static int scmi_pd_power_on(struct generic_pm_domain *);
55:	static int scmi_pm_domain_probe(struct scmi_device *);
120:	static void scmi_pm_domain_remove(struct scmi_device *);
149:	static void scmi_power_domain_driver_exit(void);
149:	static int scmi_power_domain_driver_init(void);

File drivers/firmware/arm_scmi/sensors.c:
1152:	int scmi_sensors_register(void);
1152:	void scmi_sensors_unregister(void);
366:	static void iter_axes_desc_prepare_message(void *, const unsigned int, const void *);
394:	static int iter_axes_desc_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
379:	static int iter_axes_desc_update_state(struct scmi_iterator_state *, const void *, void *);
448:	static int iter_axes_extended_name_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
433:	static int iter_axes_extended_name_update_state(struct scmi_iterator_state *, const void *, void *);
261:	static void iter_intervals_prepare_message(void *, unsigned int, const void *);
324:	static int iter_intervals_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
274:	static int iter_intervals_update_state(struct scmi_iterator_state *, const void *, void *);
548:	static void iter_sens_descr_prepare_message(void *, unsigned int, const void *);
570:	static int iter_sens_descr_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
557:	static int iter_sens_descr_update_state(struct scmi_iterator_state *, const void *, void *);
760:	static int scmi_sensor_config_get(const struct scmi_protocol_handle *, u32, u32 *);
788:	static int scmi_sensor_config_set(const struct scmi_protocol_handle *, u32, u32);
971:	static int scmi_sensor_count_get(const struct scmi_protocol_handle *);
1013:	static void *scmi_sensor_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
1073:	static int scmi_sensor_get_num_sources(const struct scmi_protocol_handle *);
961:	static const struct scmi_sensor_info *scmi_sensor_info_get(const struct scmi_protocol_handle *, u32);
834:	static int scmi_sensor_reading_get(const struct scmi_protocol_handle *, u32, u64 *);
901:	static int scmi_sensor_reading_get_timestamped(const struct scmi_protocol_handle *, u32, u8, struct scmi_sensor_reading *);
988:	static int scmi_sensor_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
735:	static int scmi_sensor_trip_point_config(const struct scmi_protocol_handle *, u32, u8, u64);
1111:	static int scmi_sensors_protocol_init(const struct scmi_protocol_handle *);

File drivers/firmware/arm_scmi/shmem.c:
106:	void shmem_clear_channel(struct scmi_shared_mem *);
94:	void shmem_fetch_notification(struct scmi_shared_mem *, size_t, struct scmi_xfer *);
81:	void shmem_fetch_response(struct scmi_shared_mem *, struct scmi_xfer *);
111:	bool shmem_poll_done(struct scmi_shared_mem *, struct scmi_xfer *);
76:	u32 shmem_read_header(struct scmi_shared_mem *);
35:	void shmem_tx_prepare(struct scmi_shared_mem *, struct scmi_xfer *, struct scmi_chan_info *);

File drivers/firmware/arm_scmi/smc.c:
55:	static bool smc_chan_available(struct device *, int);
166:	static int smc_chan_free(int, void *, void *);
100:	static int smc_chan_setup(struct scmi_chan_info *, struct device *, bool);
204:	static void smc_fetch_response(struct scmi_chan_info *, struct scmi_xfer *);
212:	static void smc_mark_txdone(struct scmi_chan_info *, int, struct scmi_xfer *);
45:	static irqreturn_t smc_msg_done_isr(int, void *);
179:	static int smc_send_message(struct scmi_chan_info *, struct scmi_xfer *);

File drivers/firmware/arm_scmi/system.c:
158:	int scmi_system_register(void);
158:	void scmi_system_unregister(void);
72:	static void *scmi_system_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
126:	static int scmi_system_protocol_init(const struct scmi_protocol_handle *);
59:	static int scmi_system_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);

File drivers/firmware/arm_scmi/voltage.c:
445:	int scmi_voltage_register(void);
445:	void scmi_voltage_unregister(void);
126:	static void iter_volt_levels_prepare_message(void *, unsigned int, const void *);
162:	static int iter_volt_levels_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
137:	static int iter_volt_levels_update_state(struct scmi_iterator_state *, const void *, void *);
309:	static int scmi_voltage_config_get(const struct scmi_protocol_handle *, u32, u32 *);
283:	static int scmi_voltage_config_set(const struct scmi_protocol_handle *, u32, u32);
384:	static int scmi_voltage_domains_num_get(const struct scmi_protocol_handle *);
373:	static const struct scmi_voltage_info *scmi_voltage_info_get(const struct scmi_protocol_handle *, u32);
365:	static int scmi_voltage_level_get(const struct scmi_protocol_handle *, u32, s32 *);
316:	static int scmi_voltage_level_set(const struct scmi_protocol_handle *, u32, enum scmi_voltage_level_mode, s32);
400:	static int scmi_voltage_protocol_init(const struct scmi_protocol_handle *);

File drivers/firmware/psci/psci.c:
65:	struct psci_0_1_function_ids get_psci_0_1_function_ids(void);
732:	int psci_dt_init(void);
88:	bool psci_has_osi_support(void);
102:	bool psci_power_state_is_valid(u32);
158:	int psci_set_osi_mode(bool);
54:	bool psci_tos_resident_on(int);
111:	static unsigned long __invoke_psci_fn_hvc(unsigned long, unsigned long, unsigned long, unsigned long);
121:	static unsigned long __invoke_psci_fn_smc(unsigned long, unsigned long, unsigned long, unsigned long);
280:	static int get_set_conduit_method(const struct device_node *);
200:	static int psci_0_1_cpu_off(u32);
218:	static int psci_0_1_cpu_on(unsigned long, unsigned long);
180:	static int psci_0_1_cpu_suspend(u32, unsigned long);
148:	static u32 psci_0_1_get_version(void);
671:	static int psci_0_1_init(const struct device_node *);
236:	static int psci_0_1_migrate(unsigned long);
205:	static int psci_0_2_cpu_off(u32);
223:	static int psci_0_2_cpu_on(unsigned long, unsigned long);
186:	static int psci_0_2_cpu_suspend(u32, unsigned long);
153:	static u32 psci_0_2_get_version(void);
650:	static int psci_0_2_init(const struct device_node *);
241:	static int psci_0_2_migrate(unsigned long);
593:	static void psci_0_2_set_functions(void);
707:	static int psci_1_0_init(const struct device_node *);
246:	static int psci_affinity_info(unsigned long, unsigned long);
532:	static void psci_init_migrate(void);
568:	static void psci_init_smccc(void);
253:	static int psci_migrate_info_type(void);
615:	static int psci_probe(void);
325:	static void psci_sys_poweroff(void);
302:	static int psci_sys_reset(struct notifier_block *, unsigned long, void *);

File drivers/firmware/smccc/kvm_guest.c:
44:	bool kvm_arm_hyp_service_available(u32);
15:	void kvm_init_hyp_services(void);

File drivers/firmware/smccc/smccc.c:
32:	enum arm_smccc_conduit arm_smccc_1_1_get_conduit(void);
41:	u32 arm_smccc_get_version(void);
21:	void arm_smccc_version_init(u32, enum arm_smccc_conduit);
47:	static int smccc_devices_init(void);

File drivers/firmware/ti_sci.c:
3058:	const struct ti_sci_handle *devm_ti_sci_get_by_phandle(struct device *, const char *);
2976:	const struct ti_sci_handle *devm_ti_sci_get_handle(struct device *);
3227:	struct ti_sci_resource *devm_ti_sci_get_of_resource(const struct ti_sci_handle *, struct device *, u32, char *);
3265:	struct ti_sci_resource *devm_ti_sci_get_resource(const struct ti_sci_handle *, struct device *, u32, u32);
3010:	const struct ti_sci_handle *ti_sci_get_by_phandle(struct device_node *, const char *);
3086:	u16 ti_sci_get_free_resource(struct ti_sci_resource *);
2887:	const struct ti_sci_handle *ti_sci_get_handle(struct device *);
3144:	u32 ti_sci_get_num_resources(struct ti_sci_resource *);
2935:	int ti_sci_put_handle(const struct ti_sci_handle *);
3118:	void ti_sci_release_resource(struct ti_sci_resource *, u16);
3167:	static struct ti_sci_resource *devm_ti_sci_get_resource_sets(const struct ti_sci_handle *, struct device *, u32, u32 *, u32);
2954:	static void devm_ti_sci_release(struct device *, void *);
1615:	static int ti_sci_cmd_clk_get_freq(const struct ti_sci_handle *, u32, u32, u64 *);
1472:	static int ti_sci_cmd_clk_get_match_freq(const struct ti_sci_handle *, u32, u32, u64, u64, u64, u64 *);
1394:	static int ti_sci_cmd_clk_get_num_parents(const struct ti_sci_handle *, u32, u32, u32 *);
1325:	static int ti_sci_cmd_clk_get_parent(const struct ti_sci_handle *, u32, u32, u32 *);
1163:	static int ti_sci_cmd_clk_is_auto(const struct ti_sci_handle *, u32, u32, bool *);
1225:	static int ti_sci_cmd_clk_is_off(const struct ti_sci_handle *, u32, u32, bool *, bool *);
1192:	static int ti_sci_cmd_clk_is_on(const struct ti_sci_handle *, u32, u32, bool *, bool *);
1549:	static int ti_sci_cmd_clk_set_freq(const struct ti_sci_handle *, u32, u32, u64, u64, u64);
1257:	static int ti_sci_cmd_clk_set_parent(const struct ti_sci_handle *, u32, u32, u32);
1669:	static int ti_sci_cmd_core_reboot(const struct ti_sci_handle *);
754:	static int ti_sci_cmd_dev_get_clcnt(const struct ti_sci_handle *, u32, u32 *);
768:	static int ti_sci_cmd_dev_is_idle(const struct ti_sci_handle *, u32, bool *);
826:	static int ti_sci_cmd_dev_is_on(const struct ti_sci_handle *, u32, bool *, bool *);
795:	static int ti_sci_cmd_dev_is_stop(const struct ti_sci_handle *, u32, bool *, bool *);
856:	static int ti_sci_cmd_dev_is_trans(const struct ti_sci_handle *, u32, bool *);
738:	static int ti_sci_cmd_dev_is_valid(const struct ti_sci_handle *, u32);
2056:	static int ti_sci_cmd_free_event_map(const struct ti_sci_handle *, u16, u16, u16, u16, u16, u8);
2034:	static int ti_sci_cmd_free_irq(const struct ti_sci_handle *, u16, u16, u16, u16);
1098:	static int ti_sci_cmd_get_clock(const struct ti_sci_handle *, u32, u32, bool, bool, bool);
1022:	static int ti_sci_cmd_get_clock_state(const struct ti_sci_handle *, u32, u32, u8 *, u8 *);
648:	static int ti_sci_cmd_get_device(const struct ti_sci_handle *, u32);
667:	static int ti_sci_cmd_get_device_exclusive(const struct ti_sci_handle *, u32);
938:	static int ti_sci_cmd_get_device_resets(const struct ti_sci_handle *, u32, u32 *);
1800:	static int ti_sci_cmd_get_resource_range(const struct ti_sci_handle *, u32, u8, struct ti_sci_resource_desc *);
1823:	static int ti_sci_cmd_get_resource_range_from_shost(const struct ti_sci_handle *, u32, u8, u8, struct ti_sci_resource_desc *);
460:	static int ti_sci_cmd_get_revision(struct ti_sci_info *);
1124:	static int ti_sci_cmd_idle_clock(const struct ti_sci_handle *, u32, u32);
686:	static int ti_sci_cmd_idle_device(const struct ti_sci_handle *, u32);
705:	static int ti_sci_cmd_idle_device_exclusive(const struct ti_sci_handle *, u32);
2745:	static int ti_sci_cmd_proc_get_status(const struct ti_sci_handle *, u8, u64 *, u32 *, u32 *, u32 *);
2572:	static int ti_sci_cmd_proc_handover(const struct ti_sci_handle *, u8, u8);
2517:	static int ti_sci_cmd_proc_release(const struct ti_sci_handle *, u8);
2465:	static int ti_sci_cmd_proc_request(const struct ti_sci_handle *, u8);
2628:	static int ti_sci_cmd_proc_set_config(const struct ti_sci_handle *, u8, u64, u32, u32);
2690:	static int ti_sci_cmd_proc_set_control(const struct ti_sci_handle *, u8, u32, u32);
1144:	static int ti_sci_cmd_put_clock(const struct ti_sci_handle *, u32, u32);
724:	static int ti_sci_cmd_put_device(const struct ti_sci_handle *, u32);
2141:	static int ti_sci_cmd_rm_psil_pair(const struct ti_sci_handle *, u32, u32, u32);
2197:	static int ti_sci_cmd_rm_psil_unpair(const struct ti_sci_handle *, u32, u32, u32);
2079:	static int ti_sci_cmd_rm_ring_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_ring_cfg *);
2326:	static int ti_sci_cmd_rm_udmap_rx_ch_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_udmap_rx_ch_cfg *);
2395:	static int ti_sci_cmd_rm_udmap_rx_flow_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_udmap_flow_cfg *);
2254:	static int ti_sci_cmd_rm_udmap_tx_ch_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_udmap_tx_ch_cfg *);
883:	static int ti_sci_cmd_set_device_resets(const struct ti_sci_handle *, u32, u32);
2008:	static int ti_sci_cmd_set_event_map(const struct ti_sci_handle *, u16, u16, u16, u16, u16, u8);
1986:	static int ti_sci_cmd_set_irq(const struct ti_sci_handle *, u16, u16, u16, u16);
407:	static int ti_sci_do_xfer(struct ti_sci_info *, struct ti_sci_xfer *);
3522:	static void ti_sci_driver_exit(void);
3522:	static int ti_sci_driver_init(void);
577:	static int ti_sci_get_device_state(const struct ti_sci_handle *, u32, u32 *, u32 *, u8 *, u8 *);
304:	static struct ti_sci_xfer *ti_sci_get_one_xfer(struct ti_sci_info *, u16, u32, size_t, size_t);
1729:	static int ti_sci_get_resource_range(const struct ti_sci_handle *, u32, u8, u8, struct ti_sci_resource_desc *);
1849:	static int ti_sci_manage_irq(const struct ti_sci_handle *, u32, u16, u16, u16, u16, u16, u16, u16, u8, u8, u16);
3340:	static int ti_sci_probe(struct platform_device *);
3482:	static int ti_sci_remove(struct platform_device *);
244:	static void ti_sci_rx_callback(struct mbox_client *, void *);
957:	static int ti_sci_set_clock_state(const struct ti_sci_handle *, u32, u32, u32, u8);
520:	static int ti_sci_set_device_state(const struct ti_sci_handle *, u32, u32, u8);
2804:	static void ti_sci_setup_ops(struct ti_sci_info *);
3272:	static int tisci_reboot_handler(struct notifier_block *, unsigned long, void *);

File drivers/hid/hid-core.c:
2858:	int __hid_register_driver(struct hid_driver *, struct module *, const char *);
1926:	int __hid_request(struct hid_device *, struct hid_report *, enum hid_class_request);
2702:	int hid_add_device(struct hid_device *);
1859:	u8 *hid_alloc_report_buf(struct hid_report *, gfp_t);
2774:	struct hid_device *hid_allocate_device(void);
2890:	int hid_check_keys_pressed(struct hid_device *);
2547:	bool hid_compare_device_paths(struct hid_device *, struct hid_device *, char);
2148:	int hid_connect(struct hid_device *, unsigned int);
2820:	void hid_destroy_device(struct hid_device *);
2251:	void hid_disconnect(struct hid_device *);
1380:	__u32 hid_field_extract(const struct hid_device *, u8 *, unsigned int, unsigned int);
2343:	void hid_hw_close(struct hid_device *);
2315:	int hid_hw_open(struct hid_device *);
2404:	int hid_hw_output_report(struct hid_device *, __u8 *, size_t);
2383:	int hid_hw_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, enum hid_report_type, enum hid_class_request);
2359:	void hid_hw_request(struct hid_device *, struct hid_report *, enum hid_class_request);
2273:	int hid_hw_start(struct hid_device *, unsigned int);
2300:	void hid_hw_stop(struct hid_device *);
2025:	int hid_input_report(struct hid_device *, enum hid_report_type, u8 *, u32, int);
2511:	const struct hid_device_id *hid_match_device(struct hid_device *, struct hid_driver *);
2086:	const struct hid_device_id *hid_match_id(const struct hid_device *, const struct hid_device_id *);
2077:	bool hid_match_one_id(const struct hid_device *, const struct hid_device_id *);
1195:	int hid_open_report(struct hid_device *);
1843:	void hid_output_report(struct hid_report *, __u8 *);
942:	int hid_parse_report(struct hid_device *, __u8 *, unsigned int);
57:	struct hid_report *hid_register_report(struct hid_device *, enum hid_report_type, unsigned int, unsigned int);
1960:	int hid_report_raw_event(struct hid_device *, enum hid_report_type, u8 *, u32, int);
1878:	int hid_set_field(struct hid_field *, unsigned int, __s32);
1158:	void hid_setup_resolution_multiplier(struct hid_device *);
1329:	s32 hid_snto32(__u32, unsigned int);
2881:	void hid_unregister_driver(struct hid_driver *);
969:	struct hid_report *hid_validate_values(struct hid_device *, enum hid_report_type, unsigned int, unsigned int, unsigned int);
2853:	static int __bus_removed_driver(struct device_driver *, void *);
2841:	static int __hid_bus_driver_added(struct device_driver *, void *);
2828:	static int __hid_bus_reprobe_drivers(struct device *, void *);
260:	static int hid_add_field(struct hid_parser *, unsigned int, unsigned int);
2529:	static int hid_bus_match(struct device *, struct device_driver *);
673:	static void hid_close_report(struct hid_device *);
2560:	static int hid_device_probe(struct device *);
706:	static void hid_device_release(struct device *);
2621:	static void hid_device_remove(struct device *);
2935:	static void hid_exit(void);
2908:	static int hid_init(void);
1616:	static void hid_input_array_field(struct hid_device *, struct hid_field *, int);
370:	static int hid_parser_global(struct hid_parser *, struct hid_item *);
476:	static int hid_parser_local(struct hid_parser *, struct hid_item *);
607:	static int hid_parser_main(struct hid_parser *, struct hid_item *);
646:	static int hid_parser_reserved(struct hid_parser *, struct hid_item *);
1510:	static void hid_process_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32, int);
831:	static int hid_scan_main(struct hid_parser *, struct hid_item *);
872:	static int hid_scan_report(struct hid_device *);
2667:	static int hid_uevent(struct device *, struct kobj_uevent_env *);
2643:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
2459:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
2110:	static ssize_t read_report_descriptor(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
2129:	static ssize_t show_country(struct device *, struct device_attribute *, char *);

File drivers/hid/hid-input.c:
246:	__s32 hidinput_calc_abs_res(const struct hid_field *, __u16);
2194:	int hidinput_connect(struct hid_device *, unsigned int);
1707:	unsigned int hidinput_count_leds(struct hid_device *);
2297:	void hidinput_disconnect(struct hid_device *);
1687:	struct hid_field *hidinput_get_led_field(struct hid_device *);
1454:	void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
1658:	void hidinput_report_event(struct hid_device *, struct hid_report *);
1426:	static void hid_report_release_tool(struct hid_report *, struct input_dev *, unsigned int);
1444:	static void hid_report_set_tool(struct hid_report *, struct input_dev *, unsigned int);
1808:	static void hidinput_close(struct input_dev *);
645:	static void hidinput_configure_usage(struct hid_input *, struct hid_field *, struct hid_usage *, unsigned int);
177:	static int hidinput_getkeycode(struct input_dev *, struct input_keymap_entry *);
1394:	static void hidinput_handle_scroll(struct hid_usage *, struct input_dev *, __s32);
1777:	static int hidinput_input_event(struct input_dev *, unsigned int, unsigned int, int);
1729:	static void hidinput_led_worker(struct work_struct *);
160:	static struct hid_usage *hidinput_locate_usage(struct hid_device *, const struct input_keymap_entry *, unsigned int *);
1801:	static int hidinput_open(struct input_dev *);
198:	static int hidinput_setkeycode(struct input_dev *, const struct input_keymap_entry *, unsigned int *);

File drivers/hid/hid-quirks.c:
959:	bool hid_ignore(struct hid_device *);
1266:	unsigned long hid_lookup_quirk(const struct hid_device *);
1220:	void hid_quirks_exit(__u16);
1181:	int hid_quirks_init(char **, __u16, int);

File drivers/i2c/busses/i2c-cadence.c:
1009:	static int cdns_i2c_calc_divs(unsigned long *, unsigned long, unsigned int *, unsigned int *);
1113:	static int cdns_i2c_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
1392:	static void cdns_i2c_drv_exit(void);
1392:	static int cdns_i2c_drv_init(void);
932:	static u32 cdns_i2c_func(struct i2c_adapter *);
549:	static irqreturn_t cdns_i2c_isr(int, void *);
818:	static int cdns_i2c_master_xfer(struct i2c_adapter *, struct i2c_msg *, int);
1245:	static int cdns_i2c_probe(struct platform_device *);
1367:	static int cdns_i2c_remove(struct platform_device *);
946:	static int cdns_reg_slave(struct i2c_client *);
971:	static int cdns_unreg_slave(struct i2c_client *);

File drivers/i2c/busses/i2c-designware-common.c:
442:	void __i2c_dw_disable(struct dw_i2c_dev *);
503:	int i2c_dw_acquire_lock(struct dw_i2c_dev *);
317:	void i2c_dw_adjust_bus_speed(struct dw_i2c_dev *);
468:	unsigned long i2c_dw_clk_rate(struct dw_i2c_dev *);
612:	void i2c_dw_disable(struct dw_i2c_dev *);
605:	u32 i2c_dw_func(struct i2c_adapter *);
549:	int i2c_dw_handle_tx_abort(struct dw_i2c_dev *);
126:	int i2c_dw_init_regmap(struct dw_i2c_dev *);
479:	int i2c_dw_prepare_clk(struct dw_i2c_dev *, bool);
519:	void i2c_dw_release_lock(struct dw_i2c_dev *);
335:	u32 i2c_dw_scl_hcnt(u32, u32, u32, int, int);
375:	u32 i2c_dw_scl_lcnt(u32, u32, u32, int);
572:	int i2c_dw_set_fifo_size(struct dw_i2c_dev *);
392:	int i2c_dw_set_sda_hold(struct dw_i2c_dev *);
191:	int i2c_dw_validate_speed(struct dw_i2c_dev *);
528:	int i2c_dw_wait_bus_not_busy(struct dw_i2c_dev *);
62:	static int dw_reg_read(void *, unsigned int, unsigned int *);
80:	static int dw_reg_read_swab(void *, unsigned int, unsigned int *);
98:	static int dw_reg_read_word(void *, unsigned int, unsigned int *);
71:	static int dw_reg_write(void *, unsigned int, unsigned int);
89:	static int dw_reg_write_swab(void *, unsigned int, unsigned int);
108:	static int dw_reg_write_word(void *, unsigned int, unsigned int);

File drivers/i2c/busses/i2c-designware-core.h:
358:	static int i2c_dw_probe(struct dw_i2c_dev *);

File drivers/i2c/busses/i2c-designware-master.c:
780:	void i2c_dw_configure_master(struct dw_i2c_dev *);
864:	int i2c_dw_probe_master(struct dw_i2c_dev *);
850:	static int amd_i2c_adap_quirk(struct dw_i2c_dev *);
255:	static int i2c_dw_check_stopbit(struct dw_i2c_dev *);
175:	static int i2c_dw_init_master(struct dw_i2c_dev *);
714:	static irqreturn_t i2c_dw_isr(int, void *);
551:	static int i2c_dw_xfer(struct i2c_adapter *, struct i2c_msg *, int);
210:	static void i2c_dw_xfer_init(struct dw_i2c_dev *);

File drivers/i2c/busses/i2c-designware-platdrv.c:
73:	static int bt1_i2c_read(void *, unsigned int, unsigned int *);
90:	static int bt1_i2c_write(void *, unsigned int, unsigned int);
500:	static void dw_i2c_exit_driver(void);
494:	static int dw_i2c_init_driver(void);
265:	static int dw_i2c_plat_probe(struct platform_device *);
388:	static int dw_i2c_plat_remove(struct platform_device *);
38:	static u32 i2c_dw_get_clk_rate_khz(struct dw_i2c_dev *);
127:	static int mscc_twi_set_sda_hold_time(struct dw_i2c_dev *);

File drivers/i2c/busses/i2c-omap.c:
278:	static void __omap_i2c_init(struct omap_i2c_dev *);
1604:	static void omap_i2c_exit_driver(void);
848:	static u32 omap_i2c_func(struct i2c_adapter *);
1280:	static int omap_i2c_get_scl(struct i2c_adapter *);
1290:	static int omap_i2c_get_sda(struct i2c_adapter *);
1598:	static int omap_i2c_init_driver(void);
1053:	static irqreturn_t omap_i2c_isr(int, void *);
1202:	static irqreturn_t omap_i2c_isr_thread(int, void *);
1313:	static void omap_i2c_prepare_recovery(struct i2c_adapter *);
1354:	static int omap_i2c_probe(struct platform_device *);
1522:	static int omap_i2c_remove(struct platform_device *);
309:	static int omap_i2c_reset(struct omap_i2c_dev *);
1300:	static void omap_i2c_set_scl(struct i2c_adapter *, int);
1020:	static int omap_i2c_transmit_data(struct omap_i2c_dev *, u8, bool);
1330:	static void omap_i2c_unprepare_recovery(struct i2c_adapter *);
501:	static int omap_i2c_wait_for_bb(struct omap_i2c_dev *);
792:	static int omap_i2c_xfer_common(struct i2c_adapter *, struct i2c_msg *, int, bool);
1069:	static int omap_i2c_xfer_data(struct omap_i2c_dev *);
836:	static int omap_i2c_xfer_irq(struct i2c_adapter *, struct i2c_msg *, int);
842:	static int omap_i2c_xfer_polling(struct i2c_adapter *, struct i2c_msg *, int);

File drivers/i2c/busses/i2c-rk3x.c:
872:	static void rk3x_i2c_adapt_div(struct rk3x_i2c *, unsigned long);
924:	static int rk3x_i2c_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
1400:	static void rk3x_i2c_driver_exit(void);
1400:	static int rk3x_i2c_driver_init(void);
337:	static void rk3x_i2c_fill_transmit_buf(struct rk3x_i2c *);
1152:	static u32 rk3x_i2c_func(struct i2c_adapter *);
478:	static irqreturn_t rk3x_i2c_irq(int, void *);
1231:	static int rk3x_i2c_probe(struct platform_device *);
1375:	static int rk3x_i2c_remove(struct platform_device *);
563:	static int rk3x_i2c_v0_calc_timings(unsigned long, struct i2c_timings *, struct rk3x_i2c_calced_timings *);
742:	static int rk3x_i2c_v1_calc_timings(unsigned long, struct i2c_timings *, struct rk3x_i2c_calced_timings *);
1131:	static int rk3x_i2c_xfer(struct i2c_adapter *, struct i2c_msg *, int);
1057:	static int rk3x_i2c_xfer_common(struct i2c_adapter *, struct i2c_msg *, int, bool);
1137:	static int rk3x_i2c_xfer_polling(struct i2c_adapter *, struct i2c_msg *, int);

File drivers/i2c/i2c-boardinfo.c:
51:	int i2c_register_board_info(int, const struct i2c_board_info *, unsigned int);

File drivers/i2c/i2c-core-base.c:
2074:	int __i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
1752:	int devm_i2c_add_adapter(struct device *, struct i2c_adapter *);
1075:	struct i2c_client *devm_i2c_new_dummy_device(struct device *, struct i2c_adapter *, u16);
1145:	unsigned int i2c_adapter_depth(struct i2c_adapter *);
1559:	int i2c_add_adapter(struct i2c_adapter *);
1608:	int i2c_add_numbered_adapter(struct i2c_adapter *);
747:	int i2c_check_7bit_addr_validity_strict(unsigned short);
2245:	const struct i2c_device_id *i2c_client_get_device_id(const struct i2c_client *);
1917:	void i2c_clients_command(struct i2c_adapter *, unsigned int, void *);
1663:	void i2c_del_adapter(struct i2c_adapter *);
1886:	void i2c_del_driver(struct i2c_driver *);
874:	int i2c_dev_irq_from_resources(const struct resource *, unsigned int);
1821:	int i2c_for_each_dev(void *, int (*)(struct device *, void *));
80:	const char *i2c_freq_mode_string(u32);
200:	int i2c_generic_scl_recovery(struct i2c_adapter *);
2453:	struct i2c_adapter *i2c_get_adapter(int);
2215:	int i2c_get_device_id(const struct i2c_client *, struct i2c_device_identity *);
2496:	u8 *i2c_get_dma_safe_msg_buf(struct i2c_msg *, unsigned int);
1410:	int i2c_handle_smbus_host_notify(struct i2c_adapter *, unsigned short);
101:	const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *, const struct i2c_client *);
1116:	struct i2c_client *i2c_new_ancillary_device(struct i2c_client *, const char *, u16);
917:	struct i2c_client *i2c_new_client_device(struct i2c_adapter *, const struct i2c_board_info *);
1050:	struct i2c_client *i2c_new_dummy_device(struct i2c_adapter *, u16);
2412:	struct i2c_client *i2c_new_scanned_device(struct i2c_adapter *, struct i2c_board_info *, const unsigned short *, int (*)(struct i2c_adapter *, unsigned short));
1792:	void i2c_parse_fw_timings(struct device *, struct i2c_timings *, bool);
2404:	int i2c_probe_func_quick_read(struct i2c_adapter *, unsigned short);
2473:	void i2c_put_adapter(struct i2c_adapter *);
2524:	void i2c_put_dma_safe_msg_buf(u8 *, struct i2c_msg *, bool);
271:	int i2c_recover_bus(struct i2c_adapter *);
1845:	int i2c_register_driver(struct module *, struct i2c_driver *);
2141:	int i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
2187:	int i2c_transfer_buffer_flags(const struct i2c_client *, char *, int, u16);
69:	int i2c_transfer_trace_reg(void);
75:	void i2c_transfer_trace_unreg(void);
998:	void i2c_unregister_device(struct i2c_client *);
1307:	struct i2c_adapter *i2c_verify_adapter(struct device *);
703:	struct i2c_client *i2c_verify_client(struct device *);
764:	static int __i2c_check_addr_busy(struct device *, void *);
1343:	static int __process_new_adapter(struct device_driver *, void *);
1833:	static int __process_new_driver(struct device *, void *);
1649:	static int __process_removed_adapter(struct device_driver *, void *);
1874:	static int __process_removed_driver(struct device *, void *);
1634:	static int __unregister_client(struct device *, void *);
1642:	static int __unregister_dummy(struct device *, void *);
1238:	static ssize_t delete_device_store(struct device *, struct device_attribute *, const char *, size_t);
1738:	static void devm_i2c_del_adapter(void *);
1060:	static void devm_i2c_release_dummy(void *);
1021:	static int dummy_probe(struct i2c_client *);
156:	static int get_scl_gpio_value(struct i2c_adapter *);
166:	static int get_sda_gpio_value(struct i2c_adapter *);
1139:	static void i2c_adapter_dev_release(struct device *);
824:	static void i2c_adapter_lock_bus(struct i2c_adapter *, unsigned int);
836:	static int i2c_adapter_trylock_bus(struct i2c_adapter *, unsigned int);
848:	static void i2c_adapter_unlock_bus(struct i2c_adapter *, unsigned int);
790:	static int i2c_check_mux_children(struct device *, void *);
775:	static int i2c_check_mux_parents(struct i2c_adapter *, int);
638:	static void i2c_client_dev_release(struct device *);
1902:	static int i2c_cmd(struct device *, void *);
2271:	static int i2c_default_probe(struct i2c_adapter *, unsigned short);
116:	static int i2c_device_match(struct device *, struct device_driver *);
466:	static int i2c_device_probe(struct device *);
600:	static void i2c_device_remove(struct device *);
624:	static void i2c_device_shutdown(struct device *);
139:	static int i2c_device_uevent(struct device *, struct kobj_uevent_env *);
1334:	static int i2c_do_add_adapter(struct i2c_driver *, struct i2c_adapter *);
1972:	static void i2c_exit(void);
1369:	static int i2c_host_notify_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1927:	static int i2c_init(void);
1427:	static int i2c_register_adapter(struct i2c_adapter *);
652:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
644:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
1170:	static ssize_t new_device_store(struct device *, struct device_attribute *, const char *, size_t);
161:	static void set_scl_gpio_value(struct i2c_adapter *, int);

File drivers/i2c/i2c-core-of.c:
212:	const struct of_device_id *i2c_of_match_device(const struct of_device_id *, struct i2c_client *);
146:	struct i2c_adapter *of_find_i2c_adapter_by_node(struct device_node *);
128:	struct i2c_client *of_find_i2c_device_by_node(struct device_node *);
165:	struct i2c_adapter *of_get_i2c_adapter_by_node(struct device_node *);
22:	int of_i2c_get_board_info(struct device *, struct device_node *, struct i2c_board_info *);
85:	void of_i2c_register_devices(struct i2c_adapter *);
116:	static int of_dev_or_parent_node_match(struct device *, const void *);

File drivers/i2c/i2c-core-slave.c:
109:	bool i2c_detect_slave_mode(struct device *);
85:	int i2c_slave_event(struct i2c_client *, enum i2c_slave_event, u8 *);
20:	int i2c_slave_register(struct i2c_client *, i2c_slave_cb_t);
60:	int i2c_slave_unregister(struct i2c_client *);

File drivers/i2c/i2c-core-smbus.c:
553:	s32 __i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
693:	struct i2c_client *i2c_new_smbus_alert_device(struct i2c_adapter *, struct i2c_smbus_alert_setup *);
49:	u8 i2c_smbus_pec(u8, u8 *, size_t);
224:	s32 i2c_smbus_read_block_data(const struct i2c_client *, u8, u8 *);
102:	s32 i2c_smbus_read_byte(const struct i2c_client *);
137:	s32 i2c_smbus_read_byte_data(const struct i2c_client *, u8);
267:	s32 i2c_smbus_read_i2c_block_data(const struct i2c_client *, u8, u8, u8 *);
640:	s32 i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *, u8, u8, u8 *);
177:	s32 i2c_smbus_read_word_data(const struct i2c_client *, u8);
251:	s32 i2c_smbus_write_block_data(const struct i2c_client *, u8, u8, const u8 *);
122:	s32 i2c_smbus_write_byte(const struct i2c_client *, u8);
158:	s32 i2c_smbus_write_byte_data(const struct i2c_client *, u8, u8);
287:	s32 i2c_smbus_write_i2c_block_data(const struct i2c_client *, u8, u8, const u8 *);
198:	s32 i2c_smbus_write_word_data(const struct i2c_client *, u8, u16);
535:	s32 i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
60:	static u8 i2c_smbus_msg_pec(u8, struct i2c_msg *);

File drivers/i2c/i2c-dev.c:
768:	static void i2c_dev_exit(void);
732:	static int i2c_dev_init(void);
649:	static int i2cdev_attach_adapter(struct device *, void *);
180:	static int i2cdev_check(struct device *, void *);
204:	static int i2cdev_check_mux_children(struct device *, void *);
191:	static int i2cdev_check_mux_parents(struct i2c_adapter *, int);
688:	static int i2cdev_detach_adapter(struct device *, void *);
641:	static void i2cdev_dev_release(struct device *);
392:	static long i2cdev_ioctl(struct file *, unsigned int, unsigned long);
235:	static int i2cdev_ioctl_rdwr(struct i2c_client *, unsigned int, struct i2c_msg *);
311:	static int i2cdev_ioctl_smbus(struct i2c_client *, u8, u8, u32, union i2c_smbus_data *);
707:	static int i2cdev_notifier_call(struct notifier_block *, unsigned long, void *);
585:	static int i2cdev_open(struct inode *, struct file *);
134:	static ssize_t i2cdev_read(struct file *, char *, size_t, loff_t *);
615:	static int i2cdev_release(struct inode *, struct file *);
159:	static ssize_t i2cdev_write(struct file *, const char *, size_t, loff_t *);
98:	static ssize_t name_show(struct device *, struct device_attribute *, char *);

File drivers/i2c/i2c-mux.c:
283:	int i2c_mux_add_adapter(struct i2c_mux_core *, u32, u32, unsigned int);
239:	struct i2c_mux_core *i2c_mux_alloc(struct i2c_adapter *, struct device *, int, int, u32, int (*)(struct i2c_mux_core *, u32), int (*)(struct i2c_mux_core *, u32));
441:	void i2c_mux_del_adapters(struct i2c_mux_core *);
213:	struct i2c_adapter *i2c_root_adapter(struct device *);
39:	static int __i2c_mux_master_xfer(struct i2c_adapter *, struct i2c_msg *, int);
77:	static int __i2c_mux_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
122:	static u32 i2c_mux_functionality(struct i2c_adapter *);
143:	static void i2c_mux_lock_bus(struct i2c_adapter *, unsigned int);
58:	static int i2c_mux_master_xfer(struct i2c_adapter *, struct i2c_msg *, int);
99:	static int i2c_mux_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
154:	static int i2c_mux_trylock_bus(struct i2c_adapter *, unsigned int);
169:	static void i2c_mux_unlock_bus(struct i2c_adapter *, unsigned int);
179:	static void i2c_parent_lock_bus(struct i2c_adapter *, unsigned int);
189:	static int i2c_parent_trylock_bus(struct i2c_adapter *, unsigned int);
203:	static void i2c_parent_unlock_bus(struct i2c_adapter *, unsigned int);

File drivers/input/ff-core.c:
302:	int input_ff_create(struct input_dev *, unsigned int);
362:	void input_ff_destroy(struct input_dev *);
208:	int input_ff_erase(struct input_dev *, int, struct file *);
258:	int input_ff_event(struct input_dev *, unsigned int, unsigned int, int);
233:	int input_ff_flush(struct input_dev *, struct file *);
89:	int input_ff_upload(struct input_dev *, struct ff_effect *, struct file *);
169:	static int erase_effect(struct input_dev *, int, struct file *);

File drivers/input/ff-memless.c:
507:	int input_ff_create_memless(struct input_dev *, void *, int (*)(struct input_dev *, void *, struct ff_effect *));
149:	static int apply_envelope(struct ml_effect_state *, int, struct ff_envelope *);
400:	static void ml_effect_timer(struct timer_list *);
485:	static void ml_ff_destroy(struct ff_device *);
432:	static int ml_ff_playback(struct input_dev *, int, int);
416:	static void ml_ff_set_gain(struct input_dev *, u16);
462:	static int ml_ff_upload(struct input_dev *, struct ff_effect *, struct ff_effect *);
387:	static void ml_play_effects(struct ml_device *);
109:	static void ml_schedule_timer(struct ml_device *);

File drivers/input/input-compat.c:
99:	int input_event_from_user(const char *, struct input_event *);
108:	int input_event_to_user(char *, const struct input_event *);
117:	int input_ff_effect_from_user(const char *, size_t, struct ff_effect *);

File drivers/input/input-mt.c:
480:	int input_mt_assign_slots(struct input_dev *, int *, const struct input_mt_pos *, int, int);
111:	void input_mt_destroy_slots(struct input_dev *);
280:	void input_mt_drop_unused(struct input_dev *);
515:	int input_mt_get_slot_by_key(struct input_dev *, int);
39:	int input_mt_init_slots(struct input_dev *, unsigned int, unsigned int);
303:	void input_mt_release_slots(struct input_dev *);
175:	void input_mt_report_finger_count(struct input_dev *, int);
196:	void input_mt_report_pointer_emulation(struct input_dev *, bool);
135:	bool input_mt_report_slot_state(struct input_dev *, unsigned int, bool);
330:	void input_mt_sync_frame(struct input_dev *);

File drivers/input/input-poller.c:
46:	void input_dev_poller_finalize(struct input_dev_poller *);
54:	void input_dev_poller_start(struct input_dev_poller *);
63:	void input_dev_poller_stop(struct input_dev_poller *);
126:	int input_get_poll_interval(struct input_dev *);
119:	void input_set_max_poll_interval(struct input_dev *, unsigned int);
112:	void input_set_min_poll_interval(struct input_dev *, unsigned int);
105:	void input_set_poll_interval(struct input_dev *, unsigned int);
68:	int input_setup_polling(struct input_dev *, void (*)(struct input_dev *));
137:	static ssize_t input_dev_get_poll_interval(struct device *, struct device_attribute *, char *);
183:	static ssize_t input_dev_get_poll_max(struct device *, struct device_attribute *, char *);
193:	static ssize_t input_dev_get_poll_min(struct device *, struct device_attribute *, char *);
37:	static void input_dev_poller_work(struct work_struct *);
146:	static ssize_t input_dev_set_poll_interval(struct device *, struct device_attribute *, const char *, size_t);
203:	static umode_t input_poller_attrs_visible(struct kobject *, struct attribute *, int);

File drivers/input/input.c:
2002:	struct input_dev *devm_input_allocate_device(struct device *);
477:	void input_alloc_absinfo(struct input_dev *);
1937:	struct input_dev *input_allocate_device(void);
697:	void input_close_device(struct input_handle *);
528:	void input_copy_abs(struct input_dev *, unsigned int, const struct input_dev *, unsigned int);
2290:	bool input_device_enabled(struct input_dev *);
2282:	void input_enable_softrepeat(struct input_dev *, int, int);
424:	void input_event(struct input_dev *, unsigned int, unsigned int, int);
673:	int input_flush_device(struct input_handle *, struct file *);
2042:	void input_free_device(struct input_dev *);
2654:	void input_free_minor(unsigned int);
931:	int input_get_keycode(struct input_dev *, struct input_keymap_entry *);
2624:	int input_get_new_minor(int, unsigned int, bool);
2084:	ktime_t *input_get_timestamp(struct input_dev *);
560:	int input_grab_device(struct input_handle *);
391:	void input_handle_event(struct input_dev *, unsigned int, unsigned int, int);
2515:	int input_handler_for_each_handle(struct input_handler *, void *, int (*)(struct input_handle *, void *));
449:	void input_inject_event(struct input_handle *, unsigned int, unsigned int, int);
1001:	bool input_match_device_id(const struct input_dev *, const struct input_device_id *);
626:	int input_open_device(struct input_handle *);
2321:	int input_register_device(struct input_dev *);
2546:	int input_register_handle(struct input_handle *);
2455:	int input_register_handler(struct input_handler *);
609:	void input_release_device(struct input_handle *);
1758:	void input_reset_device(struct input_dev *);
789:	int input_scancode_to_scalar(const struct input_keymap_entry *, unsigned int *);
495:	void input_set_abs_params(struct input_dev *, unsigned int, int, int, int, int);
2104:	void input_set_capability(struct input_dev *, unsigned int, unsigned int);
952:	int input_set_keycode(struct input_dev *, const struct input_keymap_entry *);
2069:	void input_set_timestamp(struct input_dev *, ktime_t);
2428:	void input_unregister_device(struct input_dev *);
2596:	void input_unregister_handle(struct input_handle *);
2485:	void input_unregister_handler(struct input_handler *);
2214:	static void __input_unregister_device(struct input_dev *);
1967:	static int devm_input_device_match(struct device *, void *, void *);
1974:	static void devm_input_device_release(struct device *, void *);
2236:	static void devm_input_device_unregister(struct device *, void *);
1452:	static ssize_t inhibited_show(struct device *, struct device_attribute *, char *);
1461:	static ssize_t inhibited_store(struct device *, struct device_attribute *, const char *, size_t);
1623:	static int input_add_uevent_bm_var(struct kobj_uevent_env *, const char *, unsigned long *, int);
1641:	static int input_add_uevent_modalias_var(struct kobj_uevent_env *, struct input_dev *);
833:	static int input_default_getkeycode(struct input_dev *, struct input_keymap_entry *);
861:	static int input_default_setkeycode(struct input_dev *, const struct input_keymap_entry *, unsigned int *);
1605:	static void input_dev_release(struct device *);
729:	static bool input_dev_release_keys(struct input_dev *);
1572:	static ssize_t input_dev_show_cap_abs(struct device *, struct device_attribute *, char *);
1569:	static ssize_t input_dev_show_cap_ev(struct device *, struct device_attribute *, char *);
1576:	static ssize_t input_dev_show_cap_ff(struct device *, struct device_attribute *, char *);
1570:	static ssize_t input_dev_show_cap_key(struct device *, struct device_attribute *, char *);
1574:	static ssize_t input_dev_show_cap_led(struct device *, struct device_attribute *, char *);
1573:	static ssize_t input_dev_show_cap_msc(struct device *, struct device_attribute *, char *);
1571:	static ssize_t input_dev_show_cap_rel(struct device *, struct device_attribute *, char *);
1575:	static ssize_t input_dev_show_cap_snd(struct device *, struct device_attribute *, char *);
1577:	static ssize_t input_dev_show_cap_sw(struct device *, struct device_attribute *, char *);
1509:	static ssize_t input_dev_show_id_bustype(struct device *, struct device_attribute *, char *);
1511:	static ssize_t input_dev_show_id_product(struct device *, struct device_attribute *, char *);
1510:	static ssize_t input_dev_show_id_vendor(struct device *, struct device_attribute *, char *);
1512:	static ssize_t input_dev_show_id_version(struct device *, struct device_attribute *, char *);
1422:	static ssize_t input_dev_show_modalias(struct device *, struct device_attribute *, char *);
1370:	static ssize_t input_dev_show_name(struct device *, struct device_attribute *, char *);
1371:	static ssize_t input_dev_show_phys(struct device *, struct device_attribute *, char *);
1438:	static ssize_t input_dev_show_properties(struct device *, struct device_attribute *, char *);
1372:	static ssize_t input_dev_show_uniq(struct device *, struct device_attribute *, char *);
1736:	static void input_dev_toggle(struct input_dev *, bool);
1680:	static int input_dev_uevent(struct device *, struct kobj_uevent_env *);
1154:	static void *input_devices_seq_next(struct seq_file *, void *, loff_t *);
1193:	static int input_devices_seq_show(struct seq_file *, void *);
1135:	static void *input_devices_seq_start(struct seq_file *, loff_t *);
1917:	static char *input_devnode(const struct device *, umode_t *);
348:	static void input_event_dispose(struct input_dev *, int, unsigned int, unsigned int, int);
2688:	static void input_exit(void);
1278:	static void *input_handlers_seq_next(struct seq_file *, void *, loff_t *);
1286:	static int input_handlers_seq_show(struct seq_file *, void *);
1258:	static void *input_handlers_seq_start(struct seq_file *, loff_t *);
2660:	static int input_init(void);
141:	static void input_pass_values(struct input_dev *, struct input_value *, unsigned int);
1527:	static int input_print_bitmap(char *, int, unsigned long *, int, int);
1387:	static int input_print_modalias(char *, int, struct input_dev *, int);
1245:	static int input_proc_devices_open(struct inode *, struct file *);
1116:	static __poll_t input_proc_devices_poll(struct file *, poll_table *);
1345:	static void input_proc_exit(void);
1308:	static int input_proc_handlers_open(struct inode *, struct file *);
1320:	static int input_proc_init(void);
2251:	static void input_repeat_key(struct timer_list *);
1167:	static void input_seq_print_bitmap(struct seq_file *, const char *, unsigned long *, int);
1159:	static void input_seq_stop(struct seq_file *, void *);

File drivers/input/keyboard/atkbd.c:
312:	static umode_t atkbd_attr_is_visible(struct kobject *, struct attribute *, int);
1397:	static ssize_t atkbd_attr_set_helper(struct device *, const char *, size_t, ssize_t (*)(struct atkbd *, const char *, size_t));
910:	static void atkbd_cleanup(struct serio *);
1213:	static int atkbd_connect(struct serio *, struct serio_driver *);
923:	static void atkbd_disconnect(struct serio *);
275:	static ssize_t atkbd_do_set_extra(struct device *, struct device_attribute *, const char *, size_t);
276:	static ssize_t atkbd_do_set_force_release(struct device *, struct device_attribute *, const char *, size_t);
277:	static ssize_t atkbd_do_set_scroll(struct device *, struct device_attribute *, const char *, size_t);
278:	static ssize_t atkbd_do_set_set(struct device *, struct device_attribute *, const char *, size_t);
280:	static ssize_t atkbd_do_set_softraw(struct device *, struct device_attribute *, const char *, size_t);
279:	static ssize_t atkbd_do_set_softrepeat(struct device *, struct device_attribute *, const char *, size_t);
292:	static ssize_t atkbd_do_show_err_count(struct device *, struct device_attribute *, char *);
275:	static ssize_t atkbd_do_show_extra(struct device *, struct device_attribute *, char *);
276:	static ssize_t atkbd_do_show_force_release(struct device *, struct device_attribute *, char *);
293:	static ssize_t atkbd_do_show_function_row_physmap(struct device *, struct device_attribute *, char *);
277:	static ssize_t atkbd_do_show_scroll(struct device *, struct device_attribute *, char *);
278:	static ssize_t atkbd_do_show_set(struct device *, struct device_attribute *, char *);
280:	static ssize_t atkbd_do_show_softraw(struct device *, struct device_attribute *, char *);
279:	static ssize_t atkbd_do_show_softrepeat(struct device *, struct device_attribute *, char *);
668:	static int atkbd_event(struct input_dev *, unsigned int, unsigned int, int);
619:	static void atkbd_event_work(struct work_struct *);
1893:	static void atkbd_exit(void);
1886:	static int atkbd_init(void);
399:	static irqreturn_t atkbd_interrupt(struct serio *, unsigned char, unsigned int);
753:	static int atkbd_probe(struct atkbd *);
1296:	static int atkbd_reconnect(struct serio *);
820:	static int atkbd_select_set(struct atkbd *, int, int);
1120:	static void atkbd_set_device_attrs(struct atkbd *);
1422:	static ssize_t atkbd_set_extra(struct atkbd *, const char *, size_t);
1064:	static void atkbd_set_keycode_table(struct atkbd *);
588:	static int atkbd_set_leds(struct atkbd *);
1510:	static ssize_t atkbd_set_scroll(struct atkbd *, const char *, size_t);
1558:	static ssize_t atkbd_set_set(struct atkbd *, const char *, size_t);
1667:	static ssize_t atkbd_set_softraw(struct atkbd *, const char *, size_t);
1613:	static ssize_t atkbd_set_softrepeat(struct atkbd *, const char *, size_t);

File drivers/input/matrix-keymap.c:
150:	int matrix_keypad_build_keymap(const struct matrix_keymap_data *, const char *, unsigned int, unsigned int, unsigned short *, struct input_dev *);
52:	int matrix_keypad_parse_properties(struct device *, unsigned int *, unsigned int *);

File drivers/input/mouse/alps.c:
3173:	int alps_detect(struct psmouse *, bool);
3038:	int alps_init(struct psmouse *);
1750:	static int __alps_command_mode_write_reg(struct psmouse *, u8);
1743:	static int alps_command_mode_read_reg(struct psmouse *, int);
1706:	static int alps_command_mode_set_addr(struct psmouse *, int);
1759:	static int alps_command_mode_write_reg(struct psmouse *, int, u8);
688:	static int alps_decode_dolphin(struct alps_fields *, unsigned char *, struct psmouse *);
1026:	static int alps_decode_packet_v7(struct alps_fields *, unsigned char *, struct psmouse *);
634:	static int alps_decode_pinnacle(struct alps_fields *, unsigned char *, struct psmouse *);
660:	static int alps_decode_rushmore(struct alps_fields *, unsigned char *, struct psmouse *);
1177:	static int alps_decode_ss4_v2(struct alps_fields *, unsigned char *, struct psmouse *);
2968:	static void alps_disconnect(struct psmouse *);
1806:	static int alps_enter_command_mode(struct psmouse *);
1577:	static void alps_flush_packet(struct timer_list *);
2288:	static int alps_get_v3_v7_resolution(struct psmouse *, int);
2647:	static int alps_hw_init_dolphin_v1(struct psmouse *);
2327:	static int alps_hw_init_rushmore_v3(struct psmouse *);
2693:	static int alps_hw_init_ss4_v2(struct psmouse *);
2017:	static int alps_hw_init_v1_v2(struct psmouse *);
2217:	static int alps_hw_init_v3(struct psmouse *);
2388:	static int alps_hw_init_v4(struct psmouse *);
2065:	static int alps_hw_init_v6(struct psmouse *);
2664:	static int alps_hw_init_v7(struct psmouse *);
2882:	static int alps_identify(struct psmouse *, struct alps_data *);
2849:	static const struct alps_protocol_info *alps_match_table(unsigned char *, unsigned char *);
1872:	static int alps_monitor_mode_send_word(struct psmouse *, u16);
1836:	static int alps_passthrough_mode_v2(struct psmouse *, bool);
2092:	static int alps_passthrough_mode_v3(struct psmouse *, int, bool);
1987:	static int alps_poll(struct psmouse *);
392:	static int alps_process_bitmap(struct alps_data *, struct alps_fields *);
1606:	static psmouse_ret_t alps_process_byte(struct psmouse *);
1314:	static void alps_process_packet_ss4_v2(struct psmouse *);
248:	static void alps_process_packet_v1_v2(struct psmouse *);
803:	static void alps_process_packet_v3(struct psmouse *);
889:	static void alps_process_packet_v4(struct psmouse *);
823:	static void alps_process_packet_v6(struct psmouse *);
1138:	static void alps_process_packet_v7(struct psmouse *);
725:	static void alps_process_touchpad_packet_v3_v5(struct psmouse *);
2956:	static int alps_reconnect(struct psmouse *);
1399:	static void alps_register_bare_ps2_mouse(struct work_struct *);
221:	static void alps_report_buttons(struct input_dev *, struct input_dev *, int, int, int);
510:	static void alps_report_mt_data(struct psmouse *, int);
524:	static void alps_report_semi_mt_data(struct psmouse *, int);
1767:	static int alps_rpt_cmd(struct psmouse *, int, int, unsigned char *);
2989:	static void alps_set_abs_params_mt_common(struct alps_data *, struct input_dev *);
3002:	static void alps_set_abs_params_semi_mt(struct alps_data *, struct input_dev *);
3026:	static void alps_set_abs_params_ss4_v2(struct alps_data *, struct input_dev *);
2981:	static void alps_set_abs_params_st(struct alps_data *, struct input_dev *);
3013:	static void alps_set_abs_params_v7(struct alps_data *, struct input_dev *);
2722:	static int alps_set_protocol(struct psmouse *, struct alps_data *, const struct alps_protocol_info *);
2152:	static int alps_setup_trackstick_v3(struct psmouse *, int);
2051:	static int alps_trackstick_enter_extended_mode_v3_v6(struct psmouse *);

File drivers/input/mouse/byd.c:
435:	int byd_detect(struct psmouse *, bool);
464:	int byd_init(struct psmouse *);
252:	static void byd_clear_touch(struct timer_list *);
424:	static void byd_disconnect(struct psmouse *);
273:	static psmouse_ret_t byd_process_byte(struct psmouse *);
398:	static int byd_reconnect(struct psmouse *);
236:	static void byd_report_input(struct psmouse *);

File drivers/input/mouse/cypress_ps2.c:
201:	int cypress_detect(struct psmouse *, bool);
658:	int cypress_init(struct psmouse *);
628:	static void cypress_disconnect(struct psmouse *);
513:	static void cypress_process_packet(struct psmouse *, bool);
600:	static psmouse_ret_t cypress_protocol_handler(struct psmouse *);
60:	static int cypress_ps2_ext_cmd(struct psmouse *, unsigned short, unsigned char);
635:	static int cypress_reconnect(struct psmouse *);
356:	static void cypress_reset(struct psmouse *);
169:	static int cypress_send_ext_cmd(struct psmouse *, unsigned char, unsigned char *);
612:	static void cypress_set_rate(struct psmouse *, unsigned int);

File drivers/input/mouse/focaltech.c:
35:	int focaltech_detect(struct psmouse *, bool);
406:	int focaltech_init(struct psmouse *);
299:	static void focaltech_disconnect(struct psmouse *);
251:	static psmouse_ret_t focaltech_process_byte(struct psmouse *);
306:	static int focaltech_reconnect(struct psmouse *);
293:	static void focaltech_reset(struct psmouse *);
395:	static void focaltech_set_rate(struct psmouse *, unsigned int);
389:	static void focaltech_set_resolution(struct psmouse *, unsigned int);
400:	static void focaltech_set_scale(struct psmouse *, enum psmouse_scale);
265:	static int focaltech_switch_protocol(struct psmouse *);

File drivers/input/mouse/logips2pp.c:
357:	int ps2pp_detect(struct psmouse *, bool);
158:	static ssize_t ps2pp_attr_set_smartscroll(struct psmouse *, void *, const char *, size_t);
152:	static ssize_t ps2pp_attr_show_smartscroll(struct psmouse *, void *, char *);
201:	static void ps2pp_disconnect(struct psmouse *);
41:	static psmouse_ret_t ps2pp_process_byte(struct psmouse *);
185:	static void ps2pp_set_resolution(struct psmouse *, unsigned int);
136:	static void ps2pp_set_smartscroll(struct psmouse *, bool);

File drivers/input/mouse/psmouse-base.c:
1298:	int psmouse_activate(struct psmouse *);
1806:	ssize_t psmouse_attr_set_helper(struct device *, struct device_attribute *, const char *, size_t);
1792:	ssize_t psmouse_attr_show_helper(struct device *, struct device_attribute *, char *);
1314:	int psmouse_deactivate(struct psmouse *);
513:	bool psmouse_matches_pnp_id(struct psmouse *, const char * const *);
147:	psmouse_ret_t psmouse_process_byte(struct psmouse *);
237:	void psmouse_queue_work(struct psmouse *, struct delayed_work *, unsigned long);
119:	void psmouse_report_standard_buttons(struct input_dev *, u8);
126:	void psmouse_report_standard_motion(struct input_dev *, u8 *);
137:	void psmouse_report_standard_packet(struct input_dev *, u8 *);
433:	int psmouse_reset(struct psmouse *);
451:	void psmouse_set_resolution(struct psmouse *, unsigned int);
259:	void psmouse_set_state(struct psmouse *, enum psmouse_state);
1677:	static int __psmouse_reconnect(struct serio *, bool);
710:	static int cortron_detect(struct psmouse *, bool);
543:	static int genius_detect(struct psmouse *, bool);
608:	static int im_explorer_detect(struct psmouse *, bool);
575:	static int intellimouse_detect(struct psmouse *, bool);
688:	static int ps2bare_detect(struct psmouse *, bool);
1884:	static ssize_t psmouse_attr_set_protocol(struct psmouse *, void *, const char *, size_t);
1983:	static ssize_t psmouse_attr_set_rate(struct psmouse *, void *, const char *, size_t);
1996:	static ssize_t psmouse_attr_set_resolution(struct psmouse *, void *, const char *, size_t);
1879:	static ssize_t psmouse_attr_show_protocol(struct psmouse *, void *, char *);
1429:	static void psmouse_cleanup(struct serio *);
1578:	static int psmouse_connect(struct serio *, struct serio_driver *);
1477:	static void psmouse_disconnect(struct serio *);
995:	static bool psmouse_do_detect(int (*)(struct psmouse *, bool), struct psmouse *, bool, bool);
2066:	static void psmouse_exit(void);
1045:	static int psmouse_extensions(struct psmouse *, unsigned int, bool);
1754:	static int psmouse_fast_reconnect(struct serio *);
2027:	static int psmouse_get_maxproto(char *, const struct kernel_param *);
270:	static int psmouse_handle_byte(struct psmouse *);
2034:	static int psmouse_init(void);
1283:	static void psmouse_initialize(struct psmouse *);
336:	static irqreturn_t psmouse_interrupt(struct serio *, u8, unsigned int);
493:	static int psmouse_poll(struct psmouse *);
1749:	static int psmouse_reconnect(struct serio *);
1332:	static void psmouse_resync(struct work_struct *);
1864:	static ssize_t psmouse_set_int_attr(struct psmouse *, void *, const char *, size_t);
2010:	static int psmouse_set_maxproto(const char *, const struct kernel_param *);
467:	static void psmouse_set_rate(struct psmouse *, unsigned int);
483:	static void psmouse_set_scale(struct psmouse *, enum psmouse_scale);
1857:	static ssize_t psmouse_show_int_attr(struct psmouse *, void *, char *);
1518:	static int psmouse_switch_protocol(struct psmouse *, const struct psmouse_protocol *);
1010:	static bool psmouse_try_protocol(struct psmouse *, enum psmouse_type, unsigned int *, bool, bool);
654:	static int thinking_detect(struct psmouse *, bool);

File drivers/input/mouse/psmouse-smbus.c:
218:	void psmouse_smbus_cleanup(struct psmouse *);
234:	int psmouse_smbus_init(struct psmouse *, const struct i2c_board_info *, const void *, size_t, bool, bool);
324:	void psmouse_smbus_module_exit(void);
306:	int psmouse_smbus_module_init(void);
194:	static int psmouse_smbus_create_companion(struct device *, void *);
170:	static void psmouse_smbus_disconnect(struct psmouse *);
92:	static int psmouse_smbus_notifier_call(struct notifier_block *, unsigned long, void *);
116:	static psmouse_ret_t psmouse_smbus_process_byte(struct psmouse *);
121:	static int psmouse_smbus_reconnect(struct psmouse *);
136:	static void psmouse_smbus_remove_i2c_device(struct work_struct *);

File drivers/input/mouse/synaptics.c:
96:	int synaptics_detect(struct psmouse *, bool);
1858:	int synaptics_init(struct psmouse *);
1679:	int synaptics_init_absolute(struct psmouse *);
1684:	int synaptics_init_relative(struct psmouse *);
1819:	int synaptics_init_smbus(struct psmouse *);
1549:	void synaptics_module_init(void);
118:	void synaptics_reset(struct psmouse *);
1235:	static void set_abs_position_params(struct input_dev *, struct synaptics_device_info *, int, int);
1195:	static enum synaptics_pkt_type synaptics_detect_pkt_type(struct psmouse *);
1404:	static void synaptics_disconnect(struct psmouse *);
1556:	static int synaptics_init_ps2(struct psmouse *, struct synaptics_device_info *, bool);
1209:	static psmouse_ret_t synaptics_process_byte(struct psmouse *);
688:	static void synaptics_pt_activate(struct psmouse *);
706:	static void synaptics_pt_create(struct psmouse *);
646:	static int synaptics_pt_start(struct serio *);
658:	static void synaptics_pt_stop(struct serio *);
629:	static int synaptics_pt_write(struct serio *, u8);
420:	static int synaptics_query_hardware(struct psmouse *, struct synaptics_device_info *);
1424:	static int synaptics_reconnect(struct psmouse *);
967:	static void synaptics_report_buttons(struct psmouse *, const struct synaptics_hw_state *);
362:	static int synaptics_resolution(struct psmouse *, struct synaptics_device_info *);
207:	static int synaptics_send_cmd(struct psmouse *, u8, u8 *);
1370:	static ssize_t synaptics_set_disable_gesture(struct psmouse *, void *, const char *, size_t);
579:	static int synaptics_set_mode(struct psmouse *);
611:	static void synaptics_set_rate(struct psmouse *, unsigned int);
1362:	static ssize_t synaptics_show_disable_gesture(struct psmouse *, void *, char *);

File drivers/input/mouse/trackpoint.c:
396:	int trackpoint_detect(struct psmouse *, bool);
367:	static void trackpoint_disconnect(struct psmouse *);
214:	static umode_t trackpoint_is_attr_visible(struct kobject *, struct attribute *, int);
33:	static int trackpoint_power_on_reset(struct ps2dev *);
376:	static int trackpoint_reconnect(struct psmouse *);
146:	static ssize_t trackpoint_set_bit_attr(struct psmouse *, void *, const char *, size_t);
117:	static ssize_t trackpoint_set_int_attr(struct psmouse *, void *, const char *, size_t);
104:	static ssize_t trackpoint_show_int_attr(struct psmouse *, void *, char *);
303:	static int trackpoint_sync(struct psmouse *, bool);

File drivers/input/serio/libps2.c:
227:	int __ps2_command(struct ps2dev *, u8 *, unsigned int);
102:	void ps2_begin_command(struct ps2dev *);
483:	void ps2_cmd_aborted(struct ps2dev *);
330:	int ps2_command(struct ps2dev *, u8 *, unsigned int);
123:	void ps2_drain(struct ps2dev *, size_t, unsigned int);
110:	void ps2_end_command(struct ps2dev *);
393:	bool ps2_handle_ack(struct ps2dev *, u8);
463:	bool ps2_handle_response(struct ps2dev *, u8);
379:	void ps2_init(struct ps2dev *, struct serio *);
150:	bool ps2_is_keyboard_id(u8);
87:	int ps2_sendbyte(struct ps2dev *, u8, unsigned int);
350:	int ps2_sliced_command(struct ps2dev *, u8);
171:	static int ps2_adjust_timeout(struct ps2dev *, unsigned int, unsigned int);
26:	static int ps2_do_sendbyte(struct ps2dev *, u8, unsigned int, unsigned int);

File drivers/input/serio/serio.c:
810:	int __serio_register_driver(struct serio_driver *, struct module *, const char *);
692:	void __serio_register_port(struct serio *, struct module *);
980:	void serio_close(struct serio *);
989:	irqreturn_t serio_interrupt(struct serio *, unsigned char, unsigned int);
967:	int serio_open(struct serio *, struct serio_driver *);
682:	void serio_reconnect(struct serio *);
676:	void serio_rescan(struct serio *);
714:	void serio_unregister_child_port(struct serio *);
849:	void serio_unregister_driver(struct serio_driver *);
702:	void serio_unregister_port(struct serio *);
739:	static ssize_t bind_mode_show(struct device_driver *, char *);
745:	static ssize_t bind_mode_store(struct device_driver *, const char *, size_t);
732:	static ssize_t description_show(struct device_driver *, char *);
379:	static ssize_t drvctl_store(struct device *, struct device_attribute *, const char *, size_t);
373:	static ssize_t extra_show(struct device *, struct device_attribute *, char *);
433:	static ssize_t firmware_id_show(struct device *, struct device_attribute *, char *);
367:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
347:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
361:	static ssize_t proto_show(struct device *, struct device_attribute *, char *);
880:	static int serio_bus_match(struct device *, struct device_driver *);
550:	static void serio_destroy_port(struct serio *);
62:	static void serio_disconnect_driver(struct serio *);
770:	static int serio_driver_probe(struct device *);
778:	static void serio_driver_remove(struct device *);
1037:	static void serio_exit(void);
196:	static void serio_handle_event(struct work_struct *);
1024:	static int serio_init(void);
237:	static int serio_queue_event(void *, struct module *, enum serio_event_type);
583:	static int serio_reconnect_port(struct serio *);
483:	static void serio_release_port(struct device *);
416:	static ssize_t serio_set_bind_mode(struct device *, struct device_attribute *, const char *, size_t);
410:	static ssize_t serio_show_bind_mode(struct device *, struct device_attribute *, char *);
341:	static ssize_t serio_show_description(struct device *, struct device_attribute *, char *);
793:	static void serio_shutdown(struct device *);
898:	static int serio_uevent(struct device *, struct kobj_uevent_env *);
355:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/input/touchscreen.c:
65:	void touchscreen_parse_properties(struct input_dev *, bool, struct touchscreen_properties *);
195:	void touchscreen_report_pos(struct input_dev *, const struct touchscreen_properties *, unsigned int, unsigned int, bool);
173:	void touchscreen_set_mt_pos(struct input_mt_pos *, const struct touchscreen_properties *, unsigned int, unsigned int);

File drivers/input/touchscreen/atmel_mxt_ts.c:
660:	static int __mxt_read_reg(struct i2c_client *, u16, u16, void *);
700:	static int __mxt_write_reg(struct i2c_client *, u16, u16, const void *);
1234:	static int mxt_acquire_irq(struct mxt_data *);
551:	static int mxt_check_bootloader(struct mxt_data *, unsigned int, bool);
2185:	static void mxt_config_cb(const struct firmware *, void *);
3385:	static void mxt_driver_exit(void);
3385:	static int mxt_driver_init(void);
1673:	static void mxt_free_object_table(struct mxt_data *);
2759:	static ssize_t mxt_fw_version_show(struct device *, struct device_attribute *, char *);
2769:	static ssize_t mxt_hw_version_show(struct device *, struct device_attribute *, char *);
2272:	static int mxt_init_t7_power_cfg(struct mxt_data *);
2191:	static int mxt_initialize(struct mxt_data *);
3073:	static void mxt_input_close(struct input_dev *);
3064:	static int mxt_input_open(struct input_dev *);
1182:	static irqreturn_t mxt_interrupt(int, void *);
2796:	static ssize_t mxt_object_show(struct device *, struct device_attribute *, char *);
3132:	static int mxt_probe(struct i2c_client *);
506:	static int mxt_probe_bootloader(struct mxt_data *, bool);
1002:	static int mxt_proc_message(struct mxt_data *, u8 *);
3287:	static void mxt_remove(struct i2c_client *);
1249:	static int mxt_soft_reset(struct mxt_data *);
1202:	static int mxt_t6_command(struct mxt_data *, u16, u8, bool);
2983:	static ssize_t mxt_update_fw_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/input/touchscreen/edt-ft5x06.c:
573:	static ssize_t crc_errors_show(struct device *, struct device_attribute *, char *);
1126:	static void edt_ft5x06_disable_regulators(void *);
319:	static int edt_ft5x06_register_read(struct edt_ft5x06_ts_data *, u8);
290:	static int edt_ft5x06_register_write(struct edt_ft5x06_ts_data *, u8, u8);
387:	static ssize_t edt_ft5x06_setting_show(struct device *, struct device_attribute *, char *);
454:	static ssize_t edt_ft5x06_setting_store(struct device *, struct device_attribute *, const char *, size_t);
1511:	static void edt_ft5x06_ts_driver_exit(void);
1511:	static int edt_ft5x06_ts_driver_init(void);
197:	static irqreturn_t edt_ft5x06_ts_isr(int, void *);
1134:	static int edt_ft5x06_ts_probe(struct i2c_client *);
145:	static int edt_ft5x06_ts_readwrite(struct i2c_client *, u16, u8 *, u16, u8 *);
1349:	static void edt_ft5x06_ts_remove(struct i2c_client *);
549:	static ssize_t fw_version_show(struct device *, struct device_attribute *, char *);
561:	static ssize_t header_errors_show(struct device *, struct device_attribute *, char *);
538:	static ssize_t model_show(struct device *, struct device_attribute *, char *);

File drivers/input/touchscreen/elants_i2c.c:
1181:	static ssize_t calibrate_store(struct device *, struct device_attribute *, const char *, size_t);
298:	static int elants_i2c_calibrate(struct elants_data *);
1686:	static void elants_i2c_driver_exit(void);
1686:	static int elants_i2c_driver_init(void);
1047:	static void elants_i2c_event(struct elants_data *, u8 *, size_t);
224:	static int elants_i2c_execute_command(struct i2c_client *, const u8 *, size_t, u8 *, size_t, int, const char *);
603:	static int elants_i2c_initialize(struct elants_data *);
1065:	static irqreturn_t elants_i2c_irq(int, void *);
1362:	static void elants_i2c_power_off(void *);
1411:	static int elants_i2c_probe(struct i2c_client *);
1272:	static ssize_t elants_version_attribute_show(struct device *, struct device_attribute *, char *);
1229:	static ssize_t show_calibration_count(struct device *, struct device_attribute *, char *);
1218:	static ssize_t show_iap_mode(struct device *, struct device_attribute *, char *);
1199:	static ssize_t write_update_fw(struct device *, struct device_attribute *, const char *, size_t);

File drivers/input/vivaldi-fmap.c:
19:	ssize_t vivaldi_function_row_physmap_show(const struct vivaldi_data *, char *);

File drivers/irqchip/irq-gic-common.c:
41:	int gic_configure_irq(unsigned int, unsigned int, void *, void (*)(void));
120:	void gic_cpu_config(void *, int, void (*)(void));
87:	void gic_dist_config(void *, int, void (*)(void));
15:	void gic_enable_of_quirks(const struct device_node *, const struct gic_quirk *, void *);
27:	void gic_enable_quirks(u32, const struct gic_quirk *, void *);

File drivers/irqchip/irq-gic-v3-its-platform-msi.c:
41:	int iort_pmsi_get_dev_id(struct device *, u32 *);
157:	static int its_pmsi_init(void);
86:	static int its_pmsi_init_one(struct fwnode_handle *, const char *);
142:	static void its_pmsi_of_init(void);
46:	static int its_pmsi_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);

File drivers/irqchip/irq-gic-v3-its.c:
5219:	int its_cpu_init(void);
5548:	int its_init(struct fwnode_handle *, struct rdists *, struct irq_domain *);
5525:	int its_lpi_memreserve_init(void);
2976:	static int allocate_lpi_tables(void);
2074:	static int free_lpi_range(u32, u32);
2196:	static bool gic_check_reserved_range(phys_addr_t, unsigned long);
3265:	static bool its_alloc_table_entry(struct its_node *, struct its_baser *, u32);
996:	static struct its_cmd_block *its_allocate_entry(struct its_node *);
2940:	static struct page *its_allocate_pending_table(gfp_t);
2177:	static struct page *its_allocate_prop_table(gfp_t);
722:	static struct its_collection *its_build_clear_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
668:	static struct its_collection *its_build_discard_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
704:	static struct its_collection *its_build_int_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
686:	static struct its_collection *its_build_inv_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
740:	static struct its_collection *its_build_invall_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
940:	static struct its_vpe *its_build_invdb_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
615:	static struct its_collection *its_build_mapc_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
594:	static struct its_collection *its_build_mapd_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
629:	static struct its_collection *its_build_mapti_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
649:	static struct its_collection *its_build_movi_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
922:	static struct its_vpe *its_build_vclear_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
904:	static struct its_vpe *its_build_vint_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
886:	static struct its_vpe *its_build_vinv_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
752:	static struct its_vpe *its_build_vinvall_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
764:	static struct its_vpe *its_build_vmapp_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
817:	static struct its_vpe *its_build_vmapti_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
840:	static struct its_vpe *its_build_vmovi_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
863:	static struct its_vpe *its_build_vmovp_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
955:	static struct its_vpe *its_build_vsgi_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
3038:	static u64 its_clear_vpend_valid(void *, u64, u64);
4967:	static int its_compute_its_list_map(struct resource *, void *);
3183:	static void its_cpu_init_collection(struct its_node *);
3363:	static struct its_device *its_create_device(struct its_node *, u32, int, bool);
4628:	static bool its_enable_quirk_cavium_22375(void *);
4640:	static bool its_enable_quirk_cavium_23144(void *);
4701:	static bool its_enable_quirk_hip07_161600802(void *);
4649:	static bool its_enable_quirk_qdf2400_e0065(void *);
4674:	static bool its_enable_quirk_socionext_synquacer(void *);
4595:	static int its_force_quiescent(void *);
2515:	static void its_free_tables(struct its_node *);
1692:	static void its_irq_compose_msi_msg(struct irq_data *, struct msi_msg *);
3585:	static int its_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
3548:	static int its_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
3605:	static void its_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
3616:	static void its_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
1685:	static u64 its_irq_get_msi_base(struct its_device *);
4660:	static u64 its_irq_get_msi_base_pre_its(struct its_device *);
1733:	static int its_irq_retrigger(struct irq_data *);
1708:	static int its_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
1952:	static int its_irq_set_vcpu_affinity(struct irq_data *, void *);
2130:	static unsigned long *its_lpi_alloc(int, u32 *, int *);
2107:	static int its_lpi_init(u32);
4871:	static void *its_map_one(struct resource *, int *);
1512:	static void its_mask_irq(struct irq_data *);
3461:	static int its_msi_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
5303:	static int its_of_probe(struct device_node *);
5005:	static int its_probe_one(struct resource *, struct fwnode_handle *, int);
5282:	static int its_reset_one(struct resource *);
4806:	static void its_restore_enable(void);
4770:	static int its_save_disable(void);
1573:	static int its_select_cpu(struct irq_data *, const struct cpumask *);
1141:	static void its_send_single_command(struct its_node *, its_cmd_builder_t, struct its_cmd_desc *);
1154:	static void its_send_single_vcommand(struct its_node *, its_cmd_vbuilder_t, struct its_cmd_desc *);
1645:	static int its_set_affinity(struct irq_data *, const struct cpumask *, bool);
2231:	static int its_setup_lpi_prop_table(void);
4246:	static int its_sgi_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
4356:	static int its_sgi_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
4326:	static int its_sgi_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
4364:	static void its_sgi_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
4349:	static void its_sgi_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
4195:	static void its_sgi_mask_irq(struct irq_data *);
4211:	static int its_sgi_set_affinity(struct irq_data *, const struct cpumask *, bool);
4224:	static int its_sgi_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
4299:	static int its_sgi_set_vcpu_affinity(struct irq_data *, void *);
4203:	static void its_sgi_unmask_irq(struct irq_data *);
1520:	static void its_unmask_irq(struct irq_data *);
4054:	static void its_vpe_4_1_mask_irq(struct irq_data *);
4139:	static int its_vpe_4_1_set_vcpu_affinity(struct irq_data *, void *);
4060:	static void its_vpe_4_1_unmask_irq(struct irq_data *);
3725:	static void its_vpe_db_proxy_map_locked(struct its_vpe *);
4528:	static int its_vpe_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
4469:	static int its_vpe_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
4558:	static void its_vpe_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
4442:	static void its_vpe_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
3958:	static void its_vpe_mask_irq(struct irq_data *);
4006:	static int its_vpe_retrigger(struct irq_data *);
3940:	static void its_vpe_send_inv(struct irq_data *);
3778:	static int its_vpe_set_affinity(struct irq_data *, const struct cpumask *, bool);
3977:	static int its_vpe_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
3900:	static int its_vpe_set_vcpu_affinity(struct irq_data *, void *);
3970:	static void its_vpe_unmask_irq(struct irq_data *);
1047:	static int its_wait_for_range_completion(struct its_node *, u64, struct its_cmd_block *);
1465:	static void lpi_update_config(struct irq_data *, u8, u8);
1394:	static void lpi_write_config(struct irq_data *, u8, u8);

File drivers/irqchip/irq-gic-v3-mbi.c:
262:	int mbi_init(struct fwnode_handle *, struct irq_domain *);
231:	static int mbi_allocate_domains(struct irq_domain *);
202:	static void mbi_compose_mbi_msg(struct irq_data *, struct msi_msg *);
84:	static int mbi_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
130:	static void mbi_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);

File drivers/irqchip/irq-gic-v3.c:
149:	static enum gic_intid_range __get_intid_range(irq_hw_number_t);
1186:	static void gic_cpu_init(void);
832:	static void gic_dist_init(void);
226:	static void gic_dist_wait_for_rwp(void);
1693:	static bool gic_enable_quirk_cavium_38539(void *);
1702:	static bool gic_enable_quirk_hip06_07(void *);
1684:	static bool gic_enable_quirk_msm8996(void *);
561:	static void gic_eoi_irq(struct irq_data *);
567:	static void gic_eoimode1_eoi_irq(struct irq_data *);
379:	static void gic_eoimode1_mask_irq(struct irq_data *);
786:	static void gic_handle_irq(struct pt_regs *);
1820:	static int gic_init_bases(void *, struct redist_region *, u32, u64, struct fwnode_handle *);
1275:	static void gic_ipi_send_mask(struct irq_data *, const struct cpumask *);
1555:	static int gic_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1576:	static void gic_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
1609:	static int gic_irq_domain_select(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token);
1482:	static int gic_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
438:	static int gic_irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
491:	static int gic_irq_nmi_setup(struct irq_data *);
528:	static void gic_irq_nmi_teardown(struct irq_data *);
405:	static int gic_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
614:	static int gic_irq_set_vcpu_affinity(struct irq_data *, void *);
370:	static void gic_mask_irq(struct irq_data *);
2070:	static int gic_of_init(struct device_node *, struct device_node *);
2054:	static void *gic_of_iomap(struct device_node *, int, const char *, struct resource *);
2020:	static void gic_of_setup_kvm_info(struct device_node *);
354:	static void gic_poke_irq(struct irq_data *, u32);
1923:	static void gic_populate_ppi_partitions(struct device_node *);
232:	static void gic_redist_wait_for_rwp(void);
1370:	static int gic_retrigger(struct irq_data *);
1322:	static int gic_set_affinity(struct irq_data *, const struct cpumask *, bool);
578:	static int gic_set_type(struct irq_data *, unsigned int);
1300:	static void gic_smp_init(void);
1219:	static int gic_starting_cpu(unsigned int);
394:	static void gic_unmask_irq(struct irq_data *);
1173:	static int gicv3_nolpi_cfg(char *);
1646:	static int partition_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);

File drivers/irqchip/irq-gic-v4.c:
93:	bool gic_cpuif_has_vsgi(void);
159:	int its_alloc_vcpu_irqs(struct its_vm *);
286:	int its_commit_vpe(struct its_vpe *);
223:	void its_free_vcpu_irqs(struct its_vm *);
335:	int its_get_vlpi(int, struct its_vlpi_map *);
378:	int its_init_v4(struct irq_domain *, const struct irq_domain_ops *, const struct irq_domain_ops *);
303:	int its_invall_vpe(struct its_vpe *);
236:	int its_make_vpe_non_resident(struct its_vpe *, bool);
263:	int its_make_vpe_resident(struct its_vpe *, bool, bool);
312:	int its_map_vlpi(int, struct its_vlpi_map *);
353:	int its_prop_update_vlpi(int, u8, bool);
365:	int its_prop_update_vsgi(int, u8, bool);
347:	int its_unmap_vlpi(int);

File drivers/irqchip/irq-gic.c:
411:	void gic_cascade_irq(unsigned int, unsigned int);
530:	int gic_cpu_if_down(unsigned int);
1302:	void gic_init(void *, void *);
1520:	int gic_of_init(struct device_node *, struct device_node *);
1468:	int gic_of_init_child(struct device *, struct gic_chip_data **, int);
1273:	static int __gic_init_bases(struct gic_chip_data *, struct fwnode_handle *);
490:	static int gic_cpu_init(struct gic_chip_data *);
1418:	static bool gic_enable_rmw_access(void *);
221:	static void gic_eoi_irq(struct irq_data *);
231:	static void gic_eoimode1_eoi_irq(struct irq_data *);
201:	static void gic_eoimode1_mask_irq(struct irq_data *);
418:	static u8 gic_get_cpumask(struct gic_chip_data *);
377:	static void gic_handle_cascade_irq(struct irq_desc *);
337:	static void gic_handle_irq(struct pt_regs *);
1177:	static int gic_init_bases(struct gic_chip_data *, struct fwnode_handle *);
823:	static void gic_ipi_send_mask(struct irq_data *, const struct cpumask *);
1145:	static int gic_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1057:	static int gic_irq_domain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1090:	static int gic_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1086:	static void gic_irq_domain_unmap(struct irq_domain *, unsigned int);
271:	static int gic_irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
401:	static void gic_irq_print_chip(struct irq_data *, struct seq_file *);
245:	static int gic_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
319:	static int gic_irq_set_vcpu_affinity(struct irq_data *, void *);
196:	static void gic_mask_irq(struct irq_data *);
1442:	static int gic_of_setup(struct gic_chip_data *, struct device_node *);
1495:	static void gic_of_setup_kvm_info(struct device_node *);
332:	static int gic_retrigger(struct irq_data *);
796:	static int gic_set_affinity(struct irq_data *, const struct cpumask *, bool);
294:	static int gic_set_type(struct irq_data *, unsigned int);
859:	static void gic_smp_init(void);
853:	static int gic_starting_cpu(unsigned int);
1319:	static void gic_teardown(struct gic_chip_data *);
216:	static void gic_unmask_irq(struct irq_data *);
1334:	static int gicv2_force_probe_cfg(char *);

File drivers/irqchip/irq-partition-percpu.c:
194:	struct partition_desc *partition_create_desc(struct fwnode_handle *, struct partition_affinity *, int, int, const struct irq_domain_ops *);
235:	struct irq_domain *partition_get_domain(struct partition_desc *);
174:	int partition_translate_id(struct partition_desc *, void *);
135:	static int partition_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
162:	static void partition_domain_free(struct irq_domain *, unsigned int, unsigned int);
113:	static void partition_handle_irq(struct irq_desc *);
68:	static int partition_irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
31:	static void partition_irq_mask(struct irq_data *);
95:	static void partition_irq_print_chip(struct irq_data *, struct seq_file *);
53:	static int partition_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
83:	static int partition_irq_set_type(struct irq_data *, unsigned int);
42:	static void partition_irq_unmask(struct irq_data *);

File drivers/irqchip/irq-ti-sci-inta.c:
492:	static void ti_sci_inta_ack_irq(struct irq_data *);
570:	static int ti_sci_inta_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
742:	static void ti_sci_inta_irq_domain_driver_exit(void);
742:	static int ti_sci_inta_irq_domain_driver_init(void);
551:	static void ti_sci_inta_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
647:	static int ti_sci_inta_irq_domain_probe(struct platform_device *);
145:	static void ti_sci_inta_irq_handler(struct irq_desc *);
474:	static void ti_sci_inta_mask_irq(struct irq_data *);
592:	static void ti_sci_inta_msi_set_desc(msi_alloc_info_t *, struct msi_desc *);
443:	static void ti_sci_inta_release_resources(struct irq_data *);
423:	static int ti_sci_inta_request_resources(struct irq_data *);
502:	static int ti_sci_inta_set_affinity(struct irq_data *, const struct cpumask *, bool);
517:	static int ti_sci_inta_set_type(struct irq_data *, unsigned int);
483:	static void ti_sci_inta_unmask_irq(struct irq_data *);

File drivers/irqchip/irq-ti-sci-intr.c:
194:	static int ti_sci_intr_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
301:	static void ti_sci_intr_irq_domain_driver_exit(void);
301:	static int ti_sci_intr_irq_domain_driver_init(void);
108:	static void ti_sci_intr_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
224:	static int ti_sci_intr_irq_domain_probe(struct platform_device *);
57:	static int ti_sci_intr_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);

File drivers/irqchip/irqchip.c:
29:	void irqchip_init(void);
35:	int platform_irqchip_probe(struct platform_device *);

File drivers/mailbox/arm_mhu.c:
171:	static void arm_mhu_driver_exit(void);
171:	static int arm_mhu_driver_init(void);
57:	static bool mhu_last_tx_done(struct mbox_chan *);
109:	static int mhu_probe(struct amba_device *, const struct amba_id *);
40:	static irqreturn_t mhu_rx_interrupt(int, void *);
65:	static int mhu_send_data(struct mbox_chan *, void *);
95:	static void mhu_shutdown(struct mbox_chan *);
75:	static int mhu_startup(struct mbox_chan *);

File drivers/mailbox/arm_mhu_db.c:
348:	static void arm_mhu_db_driver_exit(void);
348:	static int arm_mhu_db_driver_init(void);
138:	static bool mhu_db_last_tx_done(struct mbox_chan *);
124:	static irqreturn_t mhu_db_mbox_rx_handler(int, void *);
187:	static struct mbox_chan *mhu_db_mbox_xlate(struct mbox_controller *, const struct of_phandle_args *);
248:	static int mhu_db_probe(struct amba_device *, const struct amba_id *);
149:	static int mhu_db_send_data(struct mbox_chan *, void *);
166:	static void mhu_db_shutdown(struct mbox_chan *);
160:	static int mhu_db_startup(struct mbox_chan *);

File drivers/mailbox/mailbox.c:
586:	int devm_mbox_controller_register(struct device *, struct mbox_controller *);
620:	void devm_mbox_controller_unregister(struct device *, struct mbox_controller *);
158:	void mbox_chan_received_data(struct mbox_chan *, void *);
176:	void mbox_chan_txdone(struct mbox_chan *, int);
223:	bool mbox_client_peek_data(struct mbox_chan *);
197:	void mbox_client_txdone(struct mbox_chan *, int);
484:	int mbox_controller_register(struct mbox_controller *);
536:	void mbox_controller_unregister(struct mbox_controller *);
305:	int mbox_flush(struct mbox_chan *, unsigned long);
444:	void mbox_free_channel(struct mbox_chan *);
337:	struct mbox_chan *mbox_request_channel(struct mbox_client *, int);
408:	struct mbox_chan *mbox_request_channel_byname(struct mbox_client *, const char *);
256:	int mbox_send_message(struct mbox_chan *, void *);
557:	static void __devm_mbox_controller_unregister(struct device *, void *);
564:	static int devm_mbox_controller_match(struct device *, void *, void *);
53:	static void msg_submit(struct mbox_chan *);
467:	static struct mbox_chan *of_mbox_index_xlate(struct mbox_controller *, const struct of_phandle_args *);
117:	static enum hrtimer_restart txdone_hrtimer(struct hrtimer *);

File drivers/mailbox/platform_mhu.c:
180:	static void platform_mhu_driver_exit(void);
180:	static int platform_mhu_driver_init(void);
63:	static bool platform_mhu_last_tx_done(struct mbox_chan *);
115:	static int platform_mhu_probe(struct platform_device *);
46:	static irqreturn_t platform_mhu_rx_interrupt(int, void *);
71:	static int platform_mhu_send_data(struct mbox_chan *, void *);
101:	static void platform_mhu_shutdown(struct mbox_chan *);
81:	static int platform_mhu_startup(struct mbox_chan *);

File drivers/mailbox/ti-msgmgr.c:
933:	static void ti_msgmgr_driver_exit(void);
933:	static int ti_msgmgr_driver_init(void);
345:	static bool ti_msgmgr_last_tx_done(struct mbox_chan *);
567:	static struct mbox_chan *ti_msgmgr_of_xlate(struct mbox_controller *, const struct of_phandle_args *);
804:	static int ti_msgmgr_probe(struct platform_device *);
318:	static bool ti_msgmgr_queue_peek_data(struct mbox_chan *);
272:	static irqreturn_t ti_msgmgr_queue_rx_interrupt(int, void *);
631:	static int ti_msgmgr_queue_setup(int, struct device *, struct device_node *, struct ti_msgmgr_inst *, const struct ti_msgmgr_desc *, const struct ti_msgmgr_valid_queue_desc *, struct ti_queue_inst *, struct mbox_chan *);
549:	static void ti_msgmgr_queue_shutdown(struct mbox_chan *);
503:	static int ti_msgmgr_queue_startup(struct mbox_chan *);
390:	static int ti_msgmgr_send_data(struct mbox_chan *, void *);

File drivers/mfd/axp20x-i2c.c:
107:	static void axp20x_i2c_driver_exit(void);
107:	static int axp20x_i2c_driver_init(void);
25:	static int axp20x_i2c_probe(struct i2c_client *);
52:	static void axp20x_i2c_remove(struct i2c_client *);

File drivers/mfd/axp20x.c:
949:	int axp20x_device_probe(struct axp20x_dev *);
1016:	void axp20x_device_remove(struct axp20x_dev *);
841:	int axp20x_match_device(struct axp20x_dev *);
829:	static void axp20x_power_off(void);

File drivers/mfd/bd9571mwv.c:
284:	static void bd9571mwv_driver_exit(void);
284:	static int bd9571mwv_driver_init(void);
207:	static int bd9571mwv_probe(struct i2c_client *);

File drivers/mfd/hi6421-pmic-core.c:
124:	static void hi6421_pmic_driver_exit(void);
124:	static int hi6421_pmic_driver_init(void);
50:	static int hi6421_pmic_probe(struct platform_device *);

File drivers/mfd/max77620.c:
704:	static int max77620_driver_init(void);
231:	static int max77620_irq_global_mask(void *);
244:	static int max77620_irq_global_unmask(void *);
488:	static void max77620_pm_power_off(void);
497:	static int max77620_probe(struct i2c_client *);

File drivers/mfd/mfd-core.c:
437:	int devm_mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
342:	int mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
49:	int mfd_cell_disable(struct platform_device *);
36:	int mfd_cell_enable(struct platform_device *);
407:	void mfd_remove_devices(struct device *);
399:	void mfd_remove_devices_late(struct device *);
415:	static void devm_mfd_dev_release(struct device *, void *);
367:	static int mfd_remove_devices_fn(struct device *, void *);

File drivers/mfd/mt6358-irq.c:
228:	int mt6358_irq_init(struct mt6397_chip *);
181:	static irqreturn_t mt6358_irq_handler(int, void *);
85:	static void pmic_irq_disable(struct irq_data *);
210:	static int pmic_irq_domain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
76:	static void pmic_irq_enable(struct irq_data *);
94:	static void pmic_irq_lock(struct irq_data *);
101:	static void pmic_irq_sync_unlock(struct irq_data *);

File drivers/mfd/mt6360-core.c:
628:	static void mt6360_driver_exit(void);
628:	static int mt6360_driver_init(void);
509:	static bool mt6360_is_readwrite_reg(struct device *, unsigned int);
534:	static int mt6360_probe(struct i2c_client *);
399:	static int mt6360_regmap_read(void *, const void *, size_t, void *, size_t);
456:	static int mt6360_regmap_write(void *, const void *, size_t);

File drivers/mfd/mt6397-core.c:
385:	static void mt6397_driver_exit(void);
385:	static int mt6397_driver_init(void);
291:	static int mt6397_probe(struct platform_device *);

File drivers/mfd/mt6397-irq.c:
160:	int mt6397_irq_init(struct mt6397_chip *);
39:	static void mt6397_irq_disable(struct irq_data *);
113:	static int mt6397_irq_domain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
48:	static void mt6397_irq_enable(struct irq_data *);
80:	static void mt6397_irq_handle_reg(struct mt6397_chip *, int, int);
20:	static void mt6397_irq_lock(struct irq_data *);
130:	static int mt6397_irq_pm_notifier(struct notifier_block *, unsigned long, void *);
27:	static void mt6397_irq_sync_unlock(struct irq_data *);
103:	static irqreturn_t mt6397_irq_thread(int, void *);

File drivers/mfd/rk808.c:
874:	static void rk808_i2c_driver_exit(void);
874:	static int rk808_i2c_driver_init(void);
30:	static bool rk808_is_volatile_reg(struct device *, unsigned int);
552:	static void rk808_pm_power_off(void);
649:	static int rk808_probe(struct i2c_client *);
800:	static void rk808_remove(struct i2c_client *);
584:	static int rk808_restart_notify(struct notifier_block *, unsigned long, void *);
58:	static bool rk817_is_volatile_reg(struct device *, unsigned int);
612:	static void rk8xx_shutdown(struct i2c_client *);

File drivers/mfd/rohm-bd718x7.c:
222:	static void bd718xx_i2c_exit(void);
214:	static int bd718xx_i2c_init(void);
129:	static int bd718xx_i2c_probe(struct i2c_client *);

File drivers/mfd/sec-core.c:
125:	static bool s2mpa01_volatile(struct device *, unsigned int);
137:	static bool s2mps11_volatile(struct device *, unsigned int);
149:	static bool s2mpu02_volatile(struct device *, unsigned int);
161:	static bool s5m8763_volatile(struct device *, unsigned int);
502:	static void sec_pmic_driver_exit(void);
502:	static int sec_pmic_driver_init(void);
308:	static int sec_pmic_probe(struct i2c_client *);
430:	static void sec_pmic_shutdown(struct i2c_client *);

File drivers/mfd/sec-irq.c:
438:	int sec_irq_init(struct sec_pmic_dev *);

File drivers/mfd/syscon.c:
176:	struct regmap *device_node_to_regmap(struct device_node *);
182:	struct regmap *syscon_node_to_regmap(struct device_node *);
191:	struct regmap *syscon_regmap_lookup_by_compatible(const char *);
207:	struct regmap *syscon_regmap_lookup_by_phandle(struct device_node *, const char *);
228:	struct regmap *syscon_regmap_lookup_by_phandle_args(struct device_node *, const char *, int, unsigned int *);
262:	struct regmap *syscon_regmap_lookup_by_phandle_optional(struct device_node *, const char *);
152:	static struct regmap *device_node_get_regmap(struct device_node *, bool);
325:	static int syscon_init(void);
275:	static int syscon_probe(struct platform_device *);

File drivers/mfd/wm8994-core.c:
689:	static void wm8994_i2c_driver_exit(void);
689:	static int wm8994_i2c_driver_init(void);
624:	static int wm8994_i2c_probe(struct i2c_client *);
658:	static void wm8994_i2c_remove(struct i2c_client *);

File drivers/mfd/wm8994-irq.c:
255:	void wm8994_irq_exit(struct wm8994 *);
180:	int wm8994_irq_init(struct wm8994 *);

File drivers/mfd/wm8994-regmap.c:
764:	static bool wm1811_readable_register(struct device *, unsigned int);
1192:	static bool wm1811_volatile_register(struct device *, unsigned int);
1065:	static bool wm8958_readable_register(struct device *, unsigned int);
1207:	static bool wm8958_volatile_register(struct device *, unsigned int);
1011:	static bool wm8994_readable_register(struct device *, unsigned int);
1175:	static bool wm8994_volatile_register(struct device *, unsigned int);

File drivers/misc/eeprom/at24.c:
853:	static void at24_exit(void);
841:	static int at24_init(void);
584:	static int at24_probe(struct i2c_client *);
418:	static int at24_read(void *, unsigned int, void *, size_t);
143:	static void at24_read_post_vaio(unsigned int, char *, size_t);
794:	static void at24_remove(struct i2c_client *);
465:	static int at24_write(void *, unsigned int, void *, size_t);

File drivers/mux/core.c:
237:	struct mux_chip *devm_mux_chip_alloc(struct device *, unsigned int, size_t);
276:	int devm_mux_chip_register(struct device *, struct mux_chip *);
654:	struct mux_control *devm_mux_control_get(struct device *, const char *);
729:	struct mux_state *devm_mux_state_get(struct device *, const char *);
94:	struct mux_chip *mux_chip_alloc(struct device *, unsigned int, size_t);
211:	void mux_chip_free(struct mux_chip *);
165:	int mux_chip_register(struct mux_chip *);
199:	void mux_chip_unregister(struct mux_chip *);
480:	int mux_control_deselect(struct mux_control *);
621:	struct mux_control *mux_control_get(struct device *, const char *);
633:	void mux_control_put(struct mux_control *);
368:	int mux_control_select_delay(struct mux_control *, unsigned int, unsigned int);
305:	unsigned int mux_control_states(struct mux_control *);
428:	int mux_control_try_select_delay(struct mux_control *, unsigned int, unsigned int);
506:	int mux_state_deselect(struct mux_state *);
406:	int mux_state_select_delay(struct mux_state *, unsigned int);
462:	int mux_state_try_select_delay(struct mux_state *, unsigned int);
260:	static void devm_mux_chip_reg_release(struct device *, void *);
220:	static void devm_mux_chip_release(struct device *, void *);
639:	static void devm_mux_control_release(struct device *, void *);
714:	static void devm_mux_state_release(struct device *, void *);
65:	static void mux_chip_release(struct device *);
59:	static void mux_exit(void);
531:	static struct mux_control *mux_get(struct device *, const char *, unsigned int *);
53:	static int mux_init(void);

File drivers/mux/mmio.c:
138:	static void mux_mmio_driver_exit(void);
138:	static int mux_mmio_driver_init(void);
36:	static int mux_mmio_probe(struct platform_device *);
18:	static int mux_mmio_set(struct mux_control *, int);

File drivers/nvmem/core.c:
1314:	struct nvmem_cell *devm_nvmem_cell_get(struct device *, const char *);
1351:	void devm_nvmem_cell_put(struct device *, struct nvmem_cell *);
1105:	struct nvmem_device *devm_nvmem_device_get(struct device *, const char *);
1073:	void devm_nvmem_device_put(struct device *, struct nvmem_device *);
926:	struct nvmem_device *devm_nvmem_register(struct device *, const struct nvmem_config *);
1900:	void nvmem_add_cell_lookups(struct nvmem_cell_lookup *, size_t);
1873:	void nvmem_add_cell_table(struct nvmem_cell_table *);
1281:	struct nvmem_cell *nvmem_cell_get(struct device *, const char *);
1367:	void nvmem_cell_put(struct nvmem_cell *);
1450:	void *nvmem_cell_read(struct nvmem_cell *, size_t *);
1621:	int nvmem_cell_read_u16(struct device *, const char *, u16 *);
1636:	int nvmem_cell_read_u32(struct device *, const char *, u32 *);
1651:	int nvmem_cell_read_u64(struct device *, const char *, u64 *);
1606:	int nvmem_cell_read_u8(struct device *, const char *, u8 *);
1699:	int nvmem_cell_read_variable_le_u32(struct device *, const char *, u32 *);
1730:	int nvmem_cell_read_variable_le_u64(struct device *, const char *, u64 *);
1562:	int nvmem_cell_write(struct nvmem_cell *, void *, size_t);
1918:	void nvmem_del_cell_lookups(struct nvmem_cell_lookup *, size_t);
1886:	void nvmem_del_cell_table(struct nvmem_cell_table *);
1936:	const char *nvmem_dev_name(struct nvmem_device *);
1762:	ssize_t nvmem_device_cell_read(struct nvmem_device *, struct nvmem_cell_info *, void *);
1793:	int nvmem_device_cell_write(struct nvmem_device *, struct nvmem_cell_info *, void *);
1044:	struct nvmem_device *nvmem_device_find(void *, int (*)(struct device *, const void *));
1019:	struct nvmem_device *nvmem_device_get(struct device *, const char *);
1089:	void nvmem_device_put(struct nvmem_device *);
1821:	int nvmem_device_read(struct nvmem_device *, unsigned int, size_t, void *);
1849:	int nvmem_device_write(struct nvmem_device *, unsigned int, size_t, void *);
752:	struct nvmem_device *nvmem_register(const struct nvmem_config *);
559:	int nvmem_register_notifier(struct notifier_block *);
903:	void nvmem_unregister(struct nvmem_device *);
572:	int nvmem_unregister_notifier(struct notifier_block *);
1224:	struct nvmem_cell *of_nvmem_cell_get(struct device_node *, const char *);
989:	struct nvmem_device *of_nvmem_device_get(struct device_node *, const char *);
1526:	static int __nvmem_cell_entry_write(struct nvmem_cell_entry *, void *, size_t);
1412:	static int __nvmem_cell_read(struct nvmem_device *, struct nvmem_cell_entry *, void *, size_t *, const char *);
210:	static ssize_t bin_attr_nvmem_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
250:	static ssize_t bin_attr_nvmem_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1334:	static int devm_nvmem_cell_match(struct device *, void *, void *);
1299:	static void devm_nvmem_cell_release(struct device *, void *);
1051:	static int devm_nvmem_device_match(struct device *, void *, void *);
1061:	static void devm_nvmem_device_release(struct device *, void *);
910:	static void devm_nvmem_unregister(void *);
100:	static int nvmem_access_with_keepouts(struct nvmem_device *, unsigned int, void *, size_t, int);
512:	static int nvmem_add_cells(struct nvmem_device *, const struct nvmem_cell_info *, int);
683:	static int nvmem_add_cells_from_of(struct nvmem_device *);
578:	static int nvmem_add_cells_from_table(struct nvmem_device *);
309:	static umode_t nvmem_bin_attr_is_visible(struct kobject *, struct bin_attribute *, int);
1569:	static int nvmem_cell_read_common(struct device *, const char *, void *, size_t);
1657:	static const void *nvmem_cell_read_variable_common(struct device *, const char *, size_t, size_t *);
443:	static void nvmem_device_remove_all_cells(const struct nvmem_device *);
1947:	static void nvmem_exit(void);
1942:	static int nvmem_init(void);
164:	static int nvmem_reg_read(struct nvmem_device *, unsigned int, void *, size_t);
415:	static void nvmem_release(struct device *);
359:	static int nvmem_sysfs_setup_compat(struct nvmem_device *, const struct nvmem_config *);
195:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/of/address.c:
629:	const __be32 *__of_get_address(struct device_node *, int, int, u64 *, unsigned int *);
583:	struct device_node *__of_get_dma_parent(const struct device_node *);
846:	int of_address_to_resource(struct device_node *, int, struct resource *);
1019:	phys_addr_t of_dma_get_max_cpu_address(struct device_node *);
933:	int of_dma_get_range(struct device_node *, const struct bus_dma_region **);
1062:	bool of_dma_is_coherent(struct device_node *);
888:	void *of_io_request_and_map(struct device_node *, int, const char *);
860:	void *of_iomap(struct device_node *, int);
198:	int of_pci_address_to_resource(struct device_node *, int, struct resource *);
703:	int of_pci_dma_range_parser_init(struct of_pci_range_parser *, struct device_node *);
696:	int of_pci_range_parser_init(struct of_pci_range_parser *, struct device_node *);
711:	struct of_pci_range *of_pci_range_parser_one(struct of_pci_range_parser *, struct of_pci_range *);
224:	int of_pci_range_to_resource(struct of_pci_range *, struct device_node *, struct resource *);
566:	u64 of_translate_address(struct device_node *, const __be32 *);
612:	u64 of_translate_dma_address(struct device_node *, const __be32 *);
473:	static u64 __of_translate_address(struct device_node *, struct device_node *(*)(const struct device_node *), const __be32 *, const char *, struct device_node **);
61:	static void of_bus_default_count_cells(struct device_node *, int *, int *);
98:	static unsigned int of_bus_default_get_flags(const __be32 *);
70:	static u64 of_bus_default_map(__be32 *, const __be32 *, int, int, int);
86:	static int of_bus_default_translate(__be32 *, u64, int);
275:	static void of_bus_isa_count_cells(struct device_node *, int *, int *);
310:	static unsigned int of_bus_isa_get_flags(const __be32 *);
284:	static u64 of_bus_isa_map(__be32 *, const __be32 *, int, int, int);
270:	static int of_bus_isa_match(struct device_node *);
305:	static int of_bus_isa_translate(__be32 *, u64, int);
675:	static int parser_init(struct of_pci_range_parser *, struct device_node *, const char *);

File drivers/of/base.c:
1720:	int __of_add_property(struct device_node *, struct property *);
225:	struct device_node *__of_find_all_nodes(struct device_node *);
925:	struct device_node *__of_find_node_by_full_path(struct device_node *, const char *);
907:	struct device_node *__of_find_node_by_path(struct device_node *, const char *);
268:	const void *__of_get_property(const struct device_node *, const char *, int *);
1423:	int __of_parse_phandle_with_args(const struct device_node *, const char *, const char *, int, int, struct of_phandle_args *);
151:	void __of_phandle_cache_inv_entry(phandle);
1766:	int __of_remove_property(struct device_node *, struct property *);
1821:	int __of_update_property(struct device_node *, struct property *, struct property **);
367:	bool arch_find_n_match_cpu_physical_id(struct device_node *, int, unsigned int *);
325:	bool arch_match_cpu_phys_id(int, u64);
1743:	int of_add_property(struct device_node *, struct property *);
2004:	int of_alias_get_highest_id(const char *);
1976:	int of_alias_get_id(struct device_node *, const char *);
1903:	void of_alias_scan(void *(*)(u64, u64));
89:	int of_bus_n_addr_cells(struct device_node *);
110:	int of_bus_n_size_cells(struct device_node *);
2034:	bool of_console_check(struct device_node *, char *, int);
166:	void of_core_init(void);
1678:	int of_count_phandle_with_args(const struct device_node *, const char *, const char *);
422:	int of_cpu_node_to_id(struct device_node *);
564:	int of_device_compatible_match(const struct device_node *, const char * const *);
640:	bool of_device_is_available(const struct device_node *);
687:	bool of_device_is_big_endian(const struct device_node *);
547:	int of_device_is_compatible(const struct device_node *, const char *);
250:	struct device_node *of_find_all_nodes(struct device_node *);
1077:	struct device_node *of_find_compatible_node(struct device_node *, const char *, const char *);
2086:	int of_find_last_cache_level(unsigned int);
1184:	struct device_node *of_find_matching_node_and_match(struct device_node *, const struct of_device_id *, const struct of_device_id **);
2055:	struct device_node *of_find_next_cache_node(const struct device_node *);
1019:	struct device_node *of_find_node_by_name(struct device_node *, const char *);
1244:	struct device_node *of_find_node_by_phandle(phandle);
1047:	struct device_node *of_find_node_by_type(struct device_node *, const char *);
961:	struct device_node *of_find_node_opts_by_path(const char *, const char **);
1106:	struct device_node *of_find_node_with_property(struct device_node *, const char *);
210:	struct property *of_find_property(const struct device_node *, const char *, int *);
895:	struct device_node *of_get_child_by_name(const struct device_node *, const char *);
870:	struct device_node *of_get_compatible_child(const struct device_node *, const char *);
297:	u64 of_get_cpu_hwid(struct device_node *, unsigned int);
402:	struct device_node *of_get_cpu_node(int, unsigned int *);
455:	struct device_node *of_get_cpu_state_node(struct device_node *, int);
794:	struct device_node *of_get_next_available_child(const struct device_node *, struct device_node *);
773:	struct device_node *of_get_next_child(const struct device_node *, struct device_node *);
828:	struct device_node *of_get_next_cpu_node(struct device_node *);
731:	struct device_node *of_get_next_parent(struct device_node *);
705:	struct device_node *of_get_parent(const struct device_node *);
280:	const void *of_get_property(const struct device_node *, const char *, int *);
590:	int of_machine_is_compatible(const char *);
2122:	int of_map_id(struct device_node *, u32, const char *, const char *, struct device_node **, u32 *);
1158:	const struct of_device_id *of_match_node(const struct of_device_id *, const struct device_node *);
1223:	int of_modalias_node(struct device_node *, char *, int);
101:	int of_n_addr_cells(struct device_node *);
122:	int of_n_size_cells(struct device_node *);
58:	bool of_node_name_eq(const struct device_node *, const char *);
73:	bool of_node_name_prefix(const struct device_node *, const char *);
132:	int of_node_to_nid(struct device_node *);
1521:	int of_parse_phandle_with_args_map(const struct device_node *, const char *, const char *, int, struct of_phandle_args *);
1406:	int of_phandle_iterator_args(struct of_phandle_iterator *, uint32_t *, int);
1288:	int of_phandle_iterator_init(struct of_phandle_iterator *, const struct device_node *, const char *, const char *, int);
1321:	int of_phandle_iterator_next(struct of_phandle_iterator *);
1276:	void of_print_phandle_args(const char *, const struct of_phandle_args *);
1795:	int of_remove_property(struct device_node *, struct property *);
1856:	int of_update_property(struct device_node *, struct property *);
506:	static int __of_device_is_compatible(const struct device_node *, const char *, const char *, const char *);

File drivers/of/device.c:
37:	int of_device_add(struct platform_device *);
239:	const void *of_device_get_match_data(const struct device *);
319:	ssize_t of_device_modalias(struct device *, char *, ssize_t);
226:	int of_device_register(struct platform_device *);
290:	int of_device_request_module(struct device *);
338:	void of_device_uevent(const struct device *, struct kobj_uevent_env *);
375:	int of_device_uevent_modalias(struct device *, struct kobj_uevent_env *);
233:	void of_device_unregister(struct platform_device *);
114:	int of_dma_configure_id(struct device *, struct device_node *, bool, const u32 *);
28:	const struct of_device_id *of_match_device(const struct of_device_id *, const struct device *);
251:	static ssize_t of_device_get_modalias(struct device *, char *, ssize_t);

File drivers/of/fdt.c:
365:	void *__unflatten_device_tree(const void *, struct device_node *, struct device_node **, void *(*)(u64, u64), bool);
1085:	u64 dt_mem_next_cell(int, const __be32 **);
1218:	void early_init_dt_add_memory_arch(u64, u64);
977:	void early_init_dt_check_for_usable_mem_range(void);
1307:	bool early_init_dt_scan(void *);
1151:	int early_init_dt_scan_chosen(char *);
1009:	int early_init_dt_scan_chosen_stdout(void);
1096:	int early_init_dt_scan_memory(void);
1288:	void early_init_dt_scan_nodes(void);
1060:	int early_init_dt_scan_root(void);
1271:	bool early_init_dt_verify(void *);
654:	void early_init_fdt_reserve_self(void);
630:	void early_init_fdt_scan_reserved_mem(void);
43:	void of_fdt_limit_memory(int);
454:	void *of_fdt_unflatten_tree(const unsigned long *, struct device_node *, struct device_node **);
827:	const char *of_flat_dt_get_machine_name(void);
794:	int of_flat_dt_is_compatible(unsigned long, const char *);
847:	const void *of_flat_dt_match_machine(const void *, const void *(*)(const char * const **));
822:	uint32_t of_get_flat_dt_phandle(unsigned long);
751:	const void *of_get_flat_dt_prop(unsigned long, const char *, int *);
740:	unsigned long of_get_flat_dt_root(void);
732:	int of_get_flat_dt_subnode_by_name(unsigned long, const char *);
673:	int of_scan_flat_dt(int (*)(unsigned long, const char *, int, void *), void *);
703:	int of_scan_flat_dt_subnodes(unsigned long, int (*)(unsigned long, const char *, void *), void *);
1349:	void unflatten_and_copy_device_tree(void);
1327:	void unflatten_device_tree(void);
548:	static int __reserved_mem_check_root(unsigned long);
500:	static int __reserved_mem_reserve_reg(unsigned long, const char *);
1260:	static void *early_init_dt_alloc_memory_arch(u64, u64);
906:	static void early_init_dt_check_for_initrd(unsigned long);
479:	static int early_init_dt_reserve_memory(phys_addr_t, phys_addr_t, bool);
569:	static int fdt_scan_reserved_mem(void);
83:	static bool of_fdt_device_is_available(const void *, unsigned long);
767:	static int of_fdt_is_compatible(const void *, unsigned long, const char *);
1379:	static int of_fdt_raw_init(void);
1371:	static ssize_t of_fdt_raw_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
802:	static int of_flat_dt_match(unsigned long, const char * const *);
108:	static void populate_properties(const void *, int, void **, struct device_node *, const char *, bool);
251:	static void reverse_nodes(struct device_node *);
284:	static int unflatten_dt_nodes(const void *, void *, struct device_node *, struct device_node **);

File drivers/of/fdt_address.c:
246:	u64 of_flat_dt_translate_address(unsigned long);
48:	static void fdt_bus_default_count_cells(const void *, int, int *, int *);
70:	static u64 fdt_bus_default_map(__be32 *, const __be32 *, int, int, int);
87:	static int fdt_bus_default_translate(__be32 *, u64, int);
163:	static u64 fdt_translate_address(const void *, int);
109:	static int fdt_translate_one(const void *, int, const struct of_bus *, const struct of_bus *, __be32 *, int, int, int, const char *);

File drivers/of/irq.c:
36:	unsigned int irq_of_parse_and_map(struct device_node *, int);
476:	int of_irq_count(struct device_node *);
54:	struct device_node *of_irq_find_parent(struct device_node *);
430:	int of_irq_get(struct device_node *, int);
457:	int of_irq_get_byname(struct device_node *, const char *);
522:	void of_irq_init(const struct of_device_id *);
329:	int of_irq_parse_one(struct device_node *, int, struct of_phandle_args *);
113:	int of_irq_parse_raw(const __be32 *, struct of_phandle_args *);
392:	int of_irq_to_resource(struct device_node *, int, struct resource *);
495:	int of_irq_to_resource_table(struct device_node *, struct resource *, int);
740:	void of_msi_configure(struct device *, struct device_node *);
698:	struct irq_domain *of_msi_get_domain(struct device *, struct device_node *, enum irq_domain_bus_token);
678:	struct irq_domain *of_msi_map_get_device_domain(struct device *, u32, u32);
662:	u32 of_msi_map_id(struct device *, struct device_node *, u32);

File drivers/of/kobj.c:
63:	int __of_add_property_sysfs(struct device_node *, struct property *);
115:	int __of_attach_node_sysfs(struct device_node *);
149:	void __of_detach_node_sysfs(struct device_node *);
96:	void __of_remove_property_sysfs(struct device_node *, struct property *);
87:	void __of_sysfs_remove_bin_file(struct device_node *, struct property *);
103:	void __of_update_property_sysfs(struct device_node *, struct property *, struct property *);
14:	int of_node_is_attached(const struct device_node *);
31:	static ssize_t of_node_property_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
21:	static void of_node_release(struct kobject *);
40:	static const char *safe_name(struct kobject *, const char *);

File drivers/of/of_numa.c:
140:	int of_node_to_nid(struct device_node *);
177:	int of_numa_init(void);
23:	static void of_numa_parse_cpu_nodes(void);
126:	static int of_numa_parse_distance_map(void);
77:	static int of_numa_parse_distance_map_v1(struct device_node *);
42:	static int of_numa_parse_memory_nodes(void);

File drivers/of/of_reserved_mem.c:
252:	void fdt_init_reserved_mem(void);
60:	void fdt_reserved_mem_save_node(unsigned long, const char *, phys_addr_t, phys_addr_t);
329:	int of_reserved_mem_device_init_by_idx(struct device *, struct device_node *, int);
386:	int of_reserved_mem_device_init_by_name(struct device *, struct device_node *, const char *);
403:	void of_reserved_mem_device_release(struct device *);
433:	struct reserved_mem *of_reserved_mem_lookup(struct device_node *);
83:	static int __reserved_mem_alloc_size(unsigned long, const char *, phys_addr_t *, phys_addr_t *);
176:	static int __reserved_mem_init_node(struct reserved_mem *);
222:	static void __rmem_check_for_overlap(void);
199:	static int __rmem_cmp(const void *, const void *);
33:	static int early_init_dt_alloc_reserved_memory_arch(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, bool, phys_addr_t *);

File drivers/of/platform.c:
714:	void devm_of_platform_depopulate(struct device *);
668:	int devm_of_platform_populate(struct device *);
112:	struct platform_device *of_device_alloc(struct device_node *, const char *, struct device *);
48:	struct platform_device *of_find_device_by_node(struct device_node *);
413:	int of_platform_bus_probe(struct device_node *, const struct of_device_id *, struct device *);
496:	int of_platform_default_populate(struct device_node *, const struct of_dev_auxdata *, struct device *);
645:	void of_platform_depopulate(struct device *);
210:	struct platform_device *of_platform_device_create(struct device_node *, const char *, struct device *);
612:	int of_platform_device_destroy(struct device *, void *);
464:	int of_platform_populate(struct device_node *, const struct of_device_id *, const struct of_dev_auxdata *, struct device *);
693:	static int devm_of_platform_match(struct device *, void *, void *);
654:	static void devm_of_platform_populate_release(struct device *, void *);
74:	static void of_device_make_bus_id(struct device *);
342:	static int of_platform_bus_create(struct device_node *, const struct of_device_id *, const struct of_dev_auxdata *, struct device *, bool);
516:	static int of_platform_default_populate_init(void);
166:	static struct platform_device *of_platform_device_create_pdata(struct device_node *, const char *, void *, struct device *);
605:	static int of_platform_sync_state_init(void);

File drivers/of/property.c:
711:	struct device_node *of_graph_get_endpoint_by_regs(const struct device_node *, int, int);
814:	int of_graph_get_endpoint_count(const struct device_node *);
642:	struct device_node *of_graph_get_next_endpoint(const struct device_node *, struct device_node *);
610:	struct device_node *of_graph_get_port_by_id(struct device_node *, u32);
749:	struct device_node *of_graph_get_port_parent(struct device_node *);
735:	struct device_node *of_graph_get_remote_endpoint(const struct device_node *);
835:	struct device_node *of_graph_get_remote_node(const struct device_node *, u32, u32);
802:	struct device_node *of_graph_get_remote_port(const struct device_node *);
779:	struct device_node *of_graph_get_remote_port_parent(const struct device_node *);
41:	bool of_graph_is_present(const struct device_node *);
578:	int of_graph_parse_endpoint(const struct device_node *, struct of_endpoint *);
553:	const char *of_prop_next_string(struct property *, const char *);
530:	const __be32 *of_prop_next_u32(struct property *, const __be32 *, u32 *);
71:	int of_property_count_elems_of_size(const struct device_node *, const char *, int);
464:	int of_property_match_string(const struct device_node *, const char *, const char *);
440:	int of_property_read_string(const struct device_node *, const char *, const char **);
503:	int of_property_read_string_helper(const struct device_node *, const char *, const char **, size_t, int);
144:	int of_property_read_u32_index(const struct device_node *, const char *, u32, u32 *);
356:	int of_property_read_u64(const struct device_node *, const char *, u64 *);
178:	int of_property_read_u64_index(const struct device_node *, const char *, u32, u64 *);
268:	int of_property_read_variable_u16_array(const struct device_node *, const char *, u16 *, size_t, size_t);
315:	int of_property_read_variable_u32_array(const struct device_node *, const char *, u32 *, size_t, size_t);
393:	int of_property_read_variable_u64_array(const struct device_node *, const char *, u64 *, size_t, size_t);
218:	int of_property_read_variable_u8_array(const struct device_node *, const char *, u8 *, size_t, size_t);
1488:	static int of_fwnode_add_links(struct fwnode_handle *);
879:	static bool of_fwnode_device_dma_supported(const struct fwnode_handle *);
885:	static enum dev_dma_attr of_fwnode_device_get_dma_attr(const struct fwnode_handle *);
1059:	static const void *of_fwnode_device_get_match_data(const struct fwnode_handle *, const struct device *);
874:	static bool of_fwnode_device_is_available(const struct fwnode_handle *);
864:	static struct fwnode_handle *of_fwnode_get(struct fwnode_handle *);
936:	static const char *of_fwnode_get_name(const struct fwnode_handle *);
941:	static const char *of_fwnode_get_name_prefix(const struct fwnode_handle *);
965:	static struct fwnode_handle *of_fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
957:	static struct fwnode_handle *of_fwnode_get_next_child_node(const struct fwnode_handle *, struct fwnode_handle *);
951:	static struct fwnode_handle *of_fwnode_get_parent(const struct fwnode_handle *);
979:	static int of_fwnode_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
1011:	static struct fwnode_handle *of_fwnode_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
1026:	static struct fwnode_handle *of_fwnode_graph_get_port_parent(struct fwnode_handle *);
1019:	static struct fwnode_handle *of_fwnode_graph_get_remote_endpoint(const struct fwnode_handle *);
1042:	static int of_fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
1473:	static void *of_fwnode_iomap(struct fwnode_handle *, int);
1482:	static int of_fwnode_irq_get(const struct fwnode_handle *, unsigned int);
893:	static bool of_fwnode_property_present(const struct fwnode_handle *, const char *);
899:	static int of_fwnode_property_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);
925:	static int of_fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
869:	static void of_fwnode_put(struct fwnode_handle *);
1326:	static struct device_node *parse_backlight(struct device_node *, const char *, int);
1300:	static struct device_node *parse_clocks(struct device_node *, const char *, int);
1306:	static struct device_node *parse_dmas(struct device_node *, const char *, int);
1309:	static struct device_node *parse_extcon(struct device_node *, const char *, int);
1328:	static struct device_node *parse_gpio(struct device_node *, const char *, int);
1349:	static struct device_node *parse_gpio_compat(struct device_node *, const char *, int);
1330:	static struct device_node *parse_gpios(struct device_node *, const char *, int);
1308:	static struct device_node *parse_hwlocks(struct device_node *, const char *, int);
1301:	static struct device_node *parse_interconnects(struct device_node *, const char *, int);
1305:	static struct device_node *parse_interrupt_parent(struct device_node *, const char *, int);
1371:	static struct device_node *parse_interrupts(struct device_node *, const char *, int);
1304:	static struct device_node *parse_io_channels(struct device_node *, const char *, int);
1340:	static struct device_node *parse_iommu_maps(struct device_node *, const char *, int);
1302:	static struct device_node *parse_iommus(struct device_node *, const char *, int);
1325:	static struct device_node *parse_leds(struct device_node *, const char *, int);
1303:	static struct device_node *parse_mboxes(struct device_node *, const char *, int);
1310:	static struct device_node *parse_nvmem_cells(struct device_node *, const char *, int);
1311:	static struct device_node *parse_phys(struct device_node *, const char *, int);
1313:	static struct device_node *parse_pinctrl0(struct device_node *, const char *, int);
1314:	static struct device_node *parse_pinctrl1(struct device_node *, const char *, int);
1315:	static struct device_node *parse_pinctrl2(struct device_node *, const char *, int);
1316:	static struct device_node *parse_pinctrl3(struct device_node *, const char *, int);
1317:	static struct device_node *parse_pinctrl4(struct device_node *, const char *, int);
1318:	static struct device_node *parse_pinctrl5(struct device_node *, const char *, int);
1319:	static struct device_node *parse_pinctrl6(struct device_node *, const char *, int);
1320:	static struct device_node *parse_pinctrl7(struct device_node *, const char *, int);
1321:	static struct device_node *parse_pinctrl8(struct device_node *, const char *, int);
1307:	static struct device_node *parse_power_domains(struct device_node *, const char *, int);
1323:	static struct device_node *parse_pwms(struct device_node *, const char *, int);
1327:	static struct device_node *parse_regulators(struct device_node *, const char *, int);
1322:	static struct device_node *parse_remote_endpoint(struct device_node *, const char *, int);
1324:	static struct device_node *parse_resets(struct device_node *, const char *, int);
1312:	static struct device_node *parse_wakeup_parent(struct device_node *, const char *, int);

File drivers/pci/of.c:
619:	int of_pci_get_max_link_speed(struct device_node *);
647:	u32 of_pci_get_slot_power_limit(struct device_node *, u8 *, u8 *);

File drivers/phy/cadence/phy-cadence-torrent.c:
431:	static int cdns_regmap_read(void *, unsigned int, unsigned int *);
421:	static int cdns_regmap_write(void *, unsigned int, unsigned int);
2481:	static int cdns_torrent_clk(struct cdns_torrent_phy *);
1657:	static void cdns_torrent_derived_refclk_disable(struct clk_hw *);
1647:	static int cdns_torrent_derived_refclk_enable(struct clk_hw *);
1665:	static int cdns_torrent_derived_refclk_is_enabled(struct clk_hw *);
4717:	static void cdns_torrent_phy_driver_exit(void);
4717:	static int cdns_torrent_phy_driver_init(void);
2525:	static int cdns_torrent_phy_probe(struct platform_device *);
2780:	static int cdns_torrent_phy_remove(struct platform_device *);
1740:	static void cdns_torrent_received_refclk_disable(struct clk_hw *);
1731:	static int cdns_torrent_received_refclk_enable(struct clk_hw *);
1747:	static int cdns_torrent_received_refclk_is_enabled(struct clk_hw *);
1825:	static void cdns_torrent_refclk_driver_disable(struct clk_hw *);
1814:	static int cdns_torrent_refclk_driver_enable(struct clk_hw *);
1842:	static u8 cdns_torrent_refclk_driver_get_parent(struct clk_hw *);
1832:	static int cdns_torrent_refclk_driver_is_enabled(struct clk_hw *);
1851:	static int cdns_torrent_refclk_driver_set_parent(struct clk_hw *, u8);

File drivers/phy/phy-core.c:
1145:	struct phy_provider *__devm_of_phy_provider_register(struct device *, struct device_node *, struct module *, struct phy *(*)(struct device *, struct of_phandle_args *));
1082:	struct phy_provider *__of_phy_provider_register(struct device *, struct device_node *, struct module *, struct phy *(*)(struct device *, struct of_phandle_args *));
854:	struct phy *devm_of_phy_get(struct device *, struct device_node *, const char *);
894:	struct phy *devm_of_phy_get_by_index(struct device *, struct device_node *, int);
1196:	void devm_of_phy_provider_unregister(struct device *, struct phy_provider *);
1013:	struct phy *devm_phy_create(struct device *, struct device_node *, const struct phy_ops *);
1055:	void devm_phy_destroy(struct device *, struct phy *);
800:	struct phy *devm_phy_get(struct device *, const char *);
833:	struct phy *devm_phy_optional_get(struct device *, const char *);
679:	void devm_phy_put(struct device *, struct phy *);
615:	struct phy *of_phy_get(struct device_node *, const char *);
1175:	void of_phy_provider_unregister(struct phy_provider *);
642:	void of_phy_put(struct phy *);
701:	struct phy *of_phy_simple_xlate(struct device *, struct of_phandle_args *);
475:	int phy_calibrate(struct phy *);
501:	int phy_configure(struct phy *, union phy_configure_opts *);
937:	struct phy *phy_create(struct device *, struct device_node *, const struct phy_ops *);
64:	int phy_create_lookup(struct phy *, const char *, const char *);
1040:	void phy_destroy(struct phy *);
283:	int phy_exit(struct phy *);
732:	struct phy *phy_get(struct device *, const char *);
243:	int phy_init(struct phy *);
779:	struct phy *phy_optional_get(struct device *, const char *);
208:	void phy_pm_runtime_allow(struct phy *);
220:	void phy_pm_runtime_forbid(struct phy *);
148:	int phy_pm_runtime_get(struct phy *);
166:	int phy_pm_runtime_get_sync(struct phy *);
184:	int phy_pm_runtime_put(struct phy *);
196:	int phy_pm_runtime_put_sync(struct phy *);
370:	int phy_power_off(struct phy *);
320:	int phy_power_on(struct phy *);
664:	void phy_put(struct device *, struct phy *);
96:	void phy_remove_lookup(struct phy *, const char *, const char *);
444:	int phy_reset(struct phy *);
414:	int phy_set_media(struct phy *, enum phy_media);
397:	int phy_set_mode_ext(struct phy *, enum phy_mode, int);
429:	int phy_set_speed(struct phy *, int);
535:	int phy_validate(struct phy *, enum phy_mode, int, union phy_configure_opts *);
565:	static struct phy *_of_phy_get(struct device_node *, int);
42:	static void devm_phy_consume(struct device *, void *);
49:	static int devm_phy_match(struct device *, void *, void *);
35:	static void devm_phy_provider_release(struct device *, void *);
28:	static void devm_phy_release(struct device *, void *);
1225:	static int phy_core_init(void);
1214:	static void phy_release(struct device *);

File drivers/phy/ti/phy-am654-serdes.c:
567:	static u8 serdes_am654_clk_mux_get_parent(struct clk_hw *);
581:	static int serdes_am654_clk_mux_set_parent(struct clk_hw *, u8);
864:	static void serdes_am654_driver_exit(void);
864:	static int serdes_am654_driver_init(void);
454:	static int serdes_am654_init(struct phy *);
324:	static int serdes_am654_power_off(struct phy *);
301:	static int serdes_am654_power_on(struct phy *);
752:	static int serdes_am654_probe(struct platform_device *);
488:	static void serdes_am654_release(struct phy *);
845:	static int serdes_am654_remove(struct platform_device *);
468:	static int serdes_am654_reset(struct phy *);
497:	static struct phy *serdes_am654_xlate(struct device *, struct of_phandle_args *);

File drivers/phy/ti/phy-j721e-wiz.c:
905:	static unsigned long wiz_clk_div_recalc_rate(struct clk_hw *, unsigned long);
917:	static long wiz_clk_div_round_rate(struct clk_hw *, unsigned long, unsigned long *);
925:	static int wiz_clk_div_set_rate(struct clk_hw *, unsigned long, unsigned long);
764:	static u8 wiz_clk_mux_get_parent(struct clk_hw *);
774:	static int wiz_clk_mux_set_parent(struct clk_hw *, u8);
993:	static void wiz_clock_cleanup(struct wiz *, struct device_node *);
1619:	static void wiz_driver_exit(void);
1619:	static int wiz_driver_init(void);
697:	static void wiz_phy_en_refclk_disable(struct clk_hw *);
687:	static int wiz_phy_en_refclk_enable(struct clk_hw *);
705:	static int wiz_phy_en_refclk_is_enabled(struct clk_hw *);
1195:	static int wiz_phy_reset_assert(struct reset_controller_dev *, unsigned long);
1230:	static int wiz_phy_reset_deassert(struct reset_controller_dev *, unsigned long);
1396:	static int wiz_probe(struct platform_device *);
1593:	static int wiz_remove(struct platform_device *);

File drivers/power/reset/brcmstb-reboot.c:
141:	static int brcmstb_reboot_init(void);
92:	static int brcmstb_reboot_probe(struct platform_device *);
35:	static int brcmstb_restart_handler(struct notifier_block *, unsigned long, void *);

File drivers/power/reset/reboot-mode.c:
146:	int devm_reboot_mode_register(struct device *, struct reboot_mode_driver *);
184:	void devm_reboot_mode_unregister(struct device *, struct reboot_mode_driver *);
62:	int reboot_mode_register(struct reboot_mode_driver *);
121:	int reboot_mode_unregister(struct reboot_mode_driver *);
169:	static int devm_reboot_mode_match(struct device *, void *, void *);
134:	static void devm_reboot_mode_release(struct device *, void *);
42:	static int reboot_mode_notify(struct notifier_block *, unsigned long, void *);

File drivers/power/reset/syscon-reboot-mode.c:
82:	static void syscon_reboot_mode_driver_exit(void);
82:	static int syscon_reboot_mode_driver_init(void);
39:	static int syscon_reboot_mode_probe(struct platform_device *);
23:	static int syscon_reboot_mode_write(struct reboot_mode_driver *, unsigned int);

File drivers/power/reset/syscon-reboot.c:
100:	static int syscon_reboot_driver_init(void);
42:	static int syscon_reboot_probe(struct platform_device *);
26:	static int syscon_restart_handle(struct notifier_block *, unsigned long, void *);

File drivers/power/reset/xgene-reboot.c:
91:	static int xgene_reboot_init(void);
47:	static int xgene_reboot_probe(struct platform_device *);
30:	static int xgene_restart_handler(struct notifier_block *, unsigned long, void *);

File drivers/power/supply/bq27xxx_battery.c:
2085:	int bq27xxx_battery_setup(struct bq27xxx_device_info *);
2128:	void bq27xxx_battery_teardown(struct bq27xxx_device_info *);
1764:	void bq27xxx_battery_update(struct bq27xxx_device_info *);
1912:	static int bq27xxx_battery_capacity_level(struct bq27xxx_device_info *, union power_supply_propval *);
1320:	static int bq27xxx_battery_cfgupdate_priv(struct bq27xxx_device_info *, bool);
1833:	static int bq27xxx_battery_current_and_status(struct bq27xxx_device_info *, union power_supply_propval *, union power_supply_propval *);
1980:	static int bq27xxx_battery_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
1806:	static void bq27xxx_battery_poll(struct work_struct *);
1890:	static int bq27xxx_battery_pwr_avg(struct bq27xxx_device_info *, union power_supply_propval *);
1231:	static int bq27xxx_battery_read_dm_block(struct bq27xxx_device_info *, struct bq27xxx_dm_buf *);
1573:	static int bq27xxx_battery_read_nac(struct bq27xxx_device_info *);
1582:	static int bq27xxx_battery_read_rc(struct bq27xxx_device_info *);
1271:	static void bq27xxx_battery_update_dm_block(struct bq27xxx_device_info *, struct bq27xxx_dm_buf *, enum bq27xxx_dm_reg_id, unsigned int);
1953:	static int bq27xxx_battery_voltage(struct bq27xxx_device_info *, union power_supply_propval *);
1366:	static int bq27xxx_battery_write_dm_block(struct bq27xxx_device_info *, struct bq27xxx_dm_buf *);
2077:	static void bq27xxx_external_power_changed(struct power_supply *);
1075:	static int poll_interval_param_set(const char *, const struct kernel_param *);

File drivers/power/supply/bq27xxx_battery_i2c.c:
95:	static int bq27xxx_battery_i2c_bulk_read(struct bq27xxx_device_info *, u8, u8 *, int);
112:	static int bq27xxx_battery_i2c_bulk_write(struct bq27xxx_device_info *, u8, u8 *, int);
302:	static void bq27xxx_battery_i2c_driver_exit(void);
302:	static int bq27xxx_battery_i2c_driver_init(void);
139:	static int bq27xxx_battery_i2c_probe(struct i2c_client *);
28:	static int bq27xxx_battery_i2c_read(struct bq27xxx_device_info *, u8, bool);
208:	static void bq27xxx_battery_i2c_remove(struct i2c_client *);
63:	static int bq27xxx_battery_i2c_write(struct bq27xxx_device_info *, u8, int, bool);
19:	static irqreturn_t bq27xxx_battery_irq_handler_thread(int, void *);

File drivers/power/supply/max17042_battery.c:
502:	static void max17042_external_power_changed(struct power_supply *);
230:	static int max17042_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
1226:	static void max17042_i2c_driver_exit(void);
1226:	static int max17042_i2c_driver_init(void);
892:	static void max17042_init_worker(struct work_struct *);
1034:	static int max17042_probe(struct i2c_client *);
485:	static int max17042_property_is_writeable(struct power_supply *, enum power_supply_property);
439:	static int max17042_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
869:	static irqreturn_t max17042_thread_handler(int, void *);

File drivers/power/supply/power_supply_core.c:
545:	struct power_supply *devm_power_supply_get_by_phandle(struct device *, const char *);
1470:	struct power_supply *devm_power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1506:	struct power_supply *devm_power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
328:	int power_supply_am_i_supplied(struct power_supply *);
1013:	int power_supply_batinfo_ocv2cap(struct power_supply_battery_info *, int, int);
1027:	bool power_supply_battery_bti_in_range(struct power_supply_battery_info *, int);
116:	void power_supply_changed(struct power_supply *);
1085:	void power_supply_external_power_changed(struct power_supply *);
986:	struct power_supply_battery_ocv_table *power_supply_find_ocv2cap_table(struct power_supply_battery_info *, int, int *);
569:	int power_supply_get_battery_info(struct power_supply *, struct power_supply_battery_info **);
455:	struct power_supply *power_supply_get_by_name(const char *);
504:	struct power_supply *power_supply_get_by_phandle(struct device_node *, const char *);
1550:	void *power_supply_get_drvdata(struct power_supply *);
939:	struct power_supply_maintenance_charge_table *power_supply_get_maintenance_charging_setting(struct power_supply_battery_info *, int);
1049:	int power_supply_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
397:	int power_supply_get_property_from_supplier(struct power_supply *, enum power_supply_property, union power_supply_propval *);
360:	int power_supply_is_system_supplied(void);
960:	int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table *, int, int);
1095:	int power_supply_powers(struct power_supply *, struct device *);
1074:	int power_supply_property_is_writeable(struct power_supply *, enum power_supply_property);
477:	void power_supply_put(struct power_supply *);
818:	void power_supply_put_battery_info(struct power_supply *, struct power_supply_battery_info *);
1108:	int power_supply_reg_notifier(struct notifier_block *);
1417:	struct power_supply *power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1440:	struct power_supply *power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
423:	int power_supply_set_battery_charged(struct power_supply *);
1063:	int power_supply_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
849:	int power_supply_temp2resist_simple(struct power_supply_resistance_temp_table *, int, int);
1114:	void power_supply_unreg_notifier(struct notifier_block *);
1534:	void power_supply_unregister(struct power_supply *);
887:	int power_supply_vbat2ri(struct power_supply_battery_info *, int, bool);
312:	static int __power_supply_am_i_supplied(struct device *, void *);
65:	static int __power_supply_changed_work(struct device *, void *);
199:	static int __power_supply_find_supply_from_node(struct device *, void *);
385:	static int __power_supply_get_supplier_property(struct device *, void *);
345:	static int __power_supply_is_system_supplied(struct device *, void *);
160:	static int __power_supply_populate_supplied_from(struct device *, void *);
1287:	static struct power_supply *__power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *, bool);
529:	static void devm_power_supply_put(struct device *, void *);
1448:	static void devm_power_supply_release(struct device *, void *);
78:	static void power_supply_changed_work(struct work_struct *);
1569:	static void power_supply_class_exit(void);
1556:	static int power_supply_class_init(void);
140:	static void power_supply_deferred_register_work(struct work_struct *);
1101:	static void power_supply_dev_release(struct device *);
436:	static int power_supply_match_device_by_name(struct device *, const void *);
487:	static int power_supply_match_device_node(struct device *, const void *);
1137:	static int power_supply_read_temp(struct thermal_zone_device *, int *);
1208:	static int ps_get_cur_charge_cntl_limit(struct thermal_cooling_device *, unsigned long *);
1190:	static int ps_get_max_charge_cntl_limit(struct thermal_cooling_device *, unsigned long *);
1226:	static int ps_set_cur_charge_cntl_limit(struct thermal_cooling_device *, unsigned long);
1247:	static int psy_register_cooler(struct power_supply *);
1160:	static int psy_register_thermal(struct power_supply *);

File drivers/power/supply/power_supply_sysfs.c:
532:	int power_supply_charge_behaviour_parse(unsigned int, const char *);
497:	ssize_t power_supply_charge_behaviour_show(struct device *, unsigned int, enum power_supply_charge_behaviour, char *);
404:	void power_supply_init_attrs(struct device_type *);
461:	int power_supply_uevent(const struct device *, struct kobj_uevent_env *);
356:	static umode_t power_supply_attr_is_visible(struct kobject *, struct attribute *, int);
272:	static ssize_t power_supply_show_property(struct device *, struct device_attribute *, char *);
318:	static ssize_t power_supply_store_property(struct device *, struct device_attribute *, const char *, size_t);

File drivers/power/supply/sbs-battery.c:
1055:	static void sbs_alert(struct i2c_client *, enum i2c_alert_protocol, unsigned int);
506:	static bool sbs_bat_needs_calibration(struct i2c_client *);
1287:	static void sbs_battery_driver_exit(void);
1287:	static int sbs_battery_driver_init(void);
1072:	static void sbs_delayed_work(struct work_struct *);
1061:	static void sbs_external_power_changed(struct power_supply *);
575:	static int sbs_get_battery_presence_and_health(struct i2c_client *, enum power_supply_property, union power_supply_propval *);
824:	static int sbs_get_battery_serial_number(struct i2c_client *, union power_supply_propval *);
839:	static int sbs_get_chemistry(struct sbs_info *, union power_supply_propval *);
692:	static const char *sbs_get_constant_string(struct sbs_info *, enum power_supply_property);
905:	static int sbs_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
677:	static int sbs_get_property_index(struct i2c_client *, enum power_supply_property);
1115:	static int sbs_probe(struct i2c_client *);
770:	static enum sbs_capacity_mode sbs_set_capacity_mode(struct i2c_client *, enum sbs_capacity_mode);
266:	static int sbs_update_presence(struct sbs_info *, bool);

File drivers/ras/ras.c:
24:	void log_arm_hw_error(struct cper_sec_proc_arm *);
17:	void log_non_standard_event(const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
47:	static int parse_ras_param(char *);
29:	static int ras_init(void);

File drivers/remoteproc/remoteproc_core.c:
2331:	int devm_rproc_add(struct device *, struct rproc *);
2602:	struct rproc *devm_rproc_alloc(struct device *, const char *, const struct rproc_ops *, const char *, int);
2268:	int rproc_add(struct rproc *);
890:	void rproc_add_carveout(struct rproc *, struct rproc_mem_entry *);
436:	void rproc_add_rvdev(struct rproc *, struct rproc_vdev *);
2631:	void rproc_add_subdev(struct rproc *, struct rproc_subdev *);
2442:	struct rproc *rproc_alloc(struct device *, const char *, const struct rproc_ops *, const char *, int);
325:	int rproc_alloc_vring(struct rproc_vdev *, int);
1907:	int rproc_boot(struct rproc *);
193:	void *rproc_da_to_va(struct rproc *, u64, size_t, bool *);
2555:	int rproc_del(struct rproc *);
2052:	int rproc_detach(struct rproc *);
252:	struct rproc_mem_entry *rproc_find_carveout_by_name(struct rproc *, const char *, ...);
2518:	void rproc_free(struct rproc *);
410:	void rproc_free_vring(struct rproc_vring *);
2654:	struct rproc *rproc_get_by_child(struct device *);
2111:	struct rproc *rproc_get_by_phandle(phandle);
914:	struct rproc_mem_entry *rproc_mem_entry_init(struct device *, void *, dma_addr_t, size_t, u32, int (*)(struct rproc *, struct rproc_mem_entry *), int (*)(struct rproc *, struct rproc_mem_entry *), const char *, ...);
996:	int rproc_of_parse_firmware(struct device *, int, const char **);
960:	struct rproc_mem_entry *rproc_of_resm_mem_entry_init(struct device *, u32, size_t, u32, const char *, ...);
386:	int rproc_parse_vring(struct rproc_vdev *, struct fw_rsc_vdev *, int);
2533:	void rproc_put(struct rproc *);
442:	void rproc_remove_rvdev(struct rproc_vdev *);
2642:	void rproc_remove_subdev(struct rproc *, struct rproc_subdev *);
2676:	void rproc_report_crash(struct rproc *, enum rproc_crash_type);
1219:	void rproc_resource_cleanup(struct rproc *);
2166:	int rproc_set_firmware(struct rproc *, const char *);
1987:	int rproc_shutdown(struct rproc *);
1830:	int rproc_trigger_recovery(struct rproc *);
146:	phys_addr_t rproc_va_to_pa(void *);
1330:	static int __rproc_attach(struct rproc *);
1744:	static int __rproc_detach(struct rproc *);
2584:	static void devm_rproc_free(struct device *, void *);
2316:	static void devm_rproc_remove(void *);
2754:	static void remoteproc_exit(void);
2736:	static int remoteproc_init(void);
683:	static int rproc_alloc_carveout(struct rproc *, struct rproc_mem_entry *);
1152:	static int rproc_alloc_registered_carveouts(struct rproc *);
1779:	static int rproc_attach_recovery(struct rproc *);
1670:	static void rproc_auto_boot_callback(const struct firmware *, void *);
1790:	static int rproc_boot_recovery(struct rproc *);
1862:	static void rproc_crash_handler_work(struct work_struct *);
2731:	static void rproc_exit_panic(void);
822:	static int rproc_handle_carveout(struct rproc *, void *, int, int);
619:	static int rproc_handle_devmem(struct rproc *, void *, int, int);
1018:	static int rproc_handle_resources(struct rproc *, rproc_handle_resource_t *);
545:	static int rproc_handle_trace(struct rproc *, void *, int, int);
475:	static int rproc_handle_vdev(struct rproc *, void *, int, int);
2693:	static int rproc_panic_handler(struct notifier_block *, unsigned long, void *);
791:	static int rproc_release_carveout(struct rproc *, struct rproc_mem_entry *);
1265:	static int rproc_start(struct rproc *, const struct firmware *);
1705:	static int rproc_stop(struct rproc *, bool);
2352:	static void rproc_type_release(struct device *);

File drivers/remoteproc/remoteproc_coredump.c:
234:	void rproc_coredump(struct rproc *);
78:	int rproc_coredump_add_custom_segment(struct rproc *, dma_addr_t, size_t, void (*)(struct rproc *, struct rproc_dump_segment *, void *, size_t, size_t), void *);
47:	int rproc_coredump_add_segment(struct rproc *, dma_addr_t, size_t);
26:	void rproc_coredump_cleanup(struct rproc *);
113:	int rproc_coredump_set_elf_info(struct rproc *, u8, u16);
343:	void rproc_coredump_using_sections(struct rproc *);
125:	static void rproc_coredump_free(void *);
176:	static ssize_t rproc_coredump_read(char *, loff_t, size_t, void *, size_t);

File drivers/remoteproc/remoteproc_debugfs.c:
398:	void rproc_create_debug_dir(struct rproc *);
386:	struct dentry *rproc_create_trace_file(const char *, struct rproc *, struct rproc_debug_trace *);
393:	void rproc_delete_debug_dir(struct rproc *);
427:	void rproc_exit_debugfs(void);
421:	void rproc_init_debugfs(void);
381:	void rproc_remove_trace_file(struct dentry *);

File drivers/remoteproc/remoteproc_elf_loader.c:
372:	struct resource_table *rproc_elf_find_loaded_rsc_table(struct rproc *, const struct firmware *);
128:	u64 rproc_elf_get_boot_addr(struct rproc *, const struct firmware *);
326:	int rproc_elf_load_rsc_table(struct rproc *, const struct firmware *);
160:	int rproc_elf_load_segments(struct rproc *, const struct firmware *);
37:	int rproc_elf_sanity_check(struct rproc *, const struct firmware *);
248:	static const void *find_table(struct device *, const struct firmware *);

File drivers/remoteproc/remoteproc_sysfs.c:
272:	void rproc_exit_sysfs(void);
262:	int rproc_init_sysfs(void);
80:	static ssize_t coredump_show(struct device *, struct device_attribute *, char *);
104:	static ssize_t coredump_store(struct device *, struct device_attribute *, const char *, size_t);
131:	static ssize_t firmware_show(struct device *, struct device_attribute *, char *);
149:	static ssize_t firmware_store(struct device *, struct device_attribute *, const char *, size_t);
213:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
13:	static ssize_t recovery_show(struct device *, struct device_attribute *, char *);
45:	static ssize_t recovery_store(struct device *, struct device_attribute *, const char *, size_t);
222:	static umode_t rproc_is_visible(struct kobject *, struct attribute *, int);
178:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t state_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/remoteproc/remoteproc_virtio.c:
89:	irqreturn_t rproc_vq_interrupt(struct rproc *, int);
465:	static int rproc_remove_virtio_dev(struct device *, void *);
473:	static int rproc_vdev_do_start(struct rproc_subdev *);
480:	static void rproc_vdev_do_stop(struct rproc_subdev *, bool);
178:	static void rproc_virtio_del_vqs(struct virtio_device *);
347:	static void rproc_virtio_dev_release(struct device *);
603:	static int rproc_virtio_driver_init(void);
266:	static int rproc_virtio_finalize_features(struct virtio_device *);
183:	static int rproc_virtio_find_vqs(struct virtio_device *, unsigned int, struct virtqueue **, vq_callback_t **, const char * const *, const bool *, struct irq_affinity *);
291:	static void rproc_virtio_get(struct virtio_device *, unsigned int, void *, unsigned int);
246:	static u64 rproc_virtio_get_features(struct virtio_device *);
213:	static u8 rproc_virtio_get_status(struct virtio_device *);
65:	static bool rproc_virtio_notify(struct virtqueue *);
491:	static int rproc_virtio_probe(struct platform_device *);
572:	static int rproc_virtio_remove(struct platform_device *);
234:	static void rproc_virtio_reset(struct virtio_device *);
309:	static void rproc_virtio_set(struct virtio_device *, unsigned int, const void *, unsigned int);
223:	static void rproc_virtio_set_status(struct virtio_device *, u8);

File drivers/soc/ti/k3-ringacc.c:
1463:	struct k3_ringacc *k3_ringacc_dmarings_init(struct platform_device *, struct k3_ringacc_init_data *);
633:	u32 k3_ringacc_get_ring_id(struct k3_ring *);
651:	int k3_ringacc_get_ring_irq_num(struct k3_ring *);
642:	u32 k3_ringacc_get_tisci_dev_id(struct k3_ring *);
332:	struct k3_ring *k3_ringacc_request_ring(struct k3_ringacc *, int, u32);
428:	int k3_ringacc_request_rings_pair(struct k3_ringacc *, int, int, struct k3_ring **, struct k3_ring **);
776:	int k3_ringacc_ring_cfg(struct k3_ring *, struct k3_ring_cfg *);
577:	int k3_ringacc_ring_free(struct k3_ring *);
889:	u32 k3_ringacc_ring_get_free(struct k3_ring *);
901:	u32 k3_ringacc_ring_get_occ(struct k3_ring *);
880:	u32 k3_ringacc_ring_get_size(struct k3_ring *);
910:	u32 k3_ringacc_ring_is_full(struct k3_ring *);
1228:	int k3_ringacc_ring_pop(struct k3_ring *, void *);
1251:	int k3_ringacc_ring_pop_tail(struct k3_ring *, void *);
1188:	int k3_ringacc_ring_push(struct k3_ring *, void *);
1208:	int k3_ringacc_ring_push_head(struct k3_ring *, void *);
473:	void k3_ringacc_ring_reset(struct k3_ring *);
502:	void k3_ringacc_ring_reset_dma(struct k3_ring *, u32);
1274:	struct k3_ringacc *of_k3_ringacc_get_by_phandle(struct device_node *, const char *);
1092:	static int k3_dmaring_fwd_pop(struct k3_ring *, void *);
1122:	static int k3_dmaring_reverse_pop(struct k3_ring *, void *);
1575:	static void k3_ringacc_driver_exit(void);
1575:	static int k3_ringacc_driver_init(void);
1358:	static int k3_ringacc_init(struct platform_device *, struct k3_ringacc *);
1524:	static int k3_ringacc_probe(struct platform_device *);
1556:	static int k3_ringacc_remove(struct platform_device *);
665:	static int k3_ringacc_ring_cfg_sci(struct k3_ring *);
999:	static int k3_ringacc_ring_pop_head_proxy(struct k3_ring *, void *);
1070:	static int k3_ringacc_ring_pop_io(struct k3_ring *, void *);
1171:	static int k3_ringacc_ring_pop_mem(struct k3_ring *, void *);
1076:	static int k3_ringacc_ring_pop_tail_io(struct k3_ring *, void *);
1005:	static int k3_ringacc_ring_pop_tail_proxy(struct k3_ring *, void *);
1058:	static int k3_ringacc_ring_push_head_io(struct k3_ring *, void *);
987:	static int k3_ringacc_ring_push_head_proxy(struct k3_ring *, void *);
1064:	static int k3_ringacc_ring_push_io(struct k3_ring *, void *);
1148:	static int k3_ringacc_ring_push_mem(struct k3_ring *, void *);
993:	static int k3_ringacc_ring_push_tail_proxy(struct k3_ring *, void *);

File drivers/soc/ti/k3-socinfo.c:
153:	static int k3_chipinfo_init(void);
64:	static int k3_chipinfo_probe(struct platform_device *);

File drivers/soc/ti/ti_sci_inta_msi.c:
47:	struct irq_domain *ti_sci_inta_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
92:	int ti_sci_inta_msi_domain_alloc_irqs(struct device *, struct ti_sci_resource *);
24:	static void ti_sci_inta_msi_compose_msi_msg(struct irq_data *, struct msi_msg *);
18:	static void ti_sci_inta_msi_write_msg(struct irq_data *, struct msi_msg *);

File drivers/thermal/gov_step_wise.c:
159:	static int step_wise_throttle(struct thermal_zone_device *, int);

File drivers/thermal/thermal_core.c:
409:	void __thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
1030:	struct thermal_cooling_device *devm_thermal_of_cooling_device_register(struct device *, struct device_node *, char *, void *, const struct thermal_cooling_device_ops *);
529:	int for_each_thermal_cooling_device(int (*)(struct thermal_cooling_device *, void *), void *);
512:	int for_each_thermal_governor(int (*)(struct thermal_governor *, void *), void *);
546:	int for_each_thermal_zone(int (*)(struct thermal_zone_device *, void *), void *);
224:	int thermal_build_list_of_policies(char *);
975:	struct thermal_cooling_device *thermal_cooling_device_register(const char *, void *, const struct thermal_cooling_device_ops *);
1072:	void thermal_cooling_device_unregister(struct thermal_cooling_device *);
998:	struct thermal_cooling_device *thermal_of_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
117:	int thermal_register_governor(struct thermal_governor *);
171:	void thermal_unregister_governor(struct thermal_governor *);
611:	int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *, unsigned long, unsigned long, unsigned int);
317:	void thermal_zone_device_critical(struct thermal_zone_device *);
481:	int thermal_zone_device_disable(struct thermal_zone_device *);
475:	int thermal_zone_device_enable(struct thermal_zone_device *);
487:	int thermal_zone_device_is_enabled(struct thermal_zone_device *);
1352:	struct thermal_zone_device *thermal_zone_device_register(const char *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
1195:	struct thermal_zone_device *thermal_zone_device_register_with_trips(const char *, struct thermal_trip *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
197:	int thermal_zone_device_set_policy(struct thermal_zone_device *, char *);
1367:	void thermal_zone_device_unregister(struct thermal_zone_device *);
494:	void thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
563:	struct thermal_zone_device *thermal_zone_get_by_id(int);
1439:	struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *);
731:	int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *);
51:	static struct thermal_governor *__find_governor(const char *);
875:	static struct thermal_cooling_device *__thermal_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
820:	static void bind_cdev(struct thermal_cooling_device *);
1122:	static void bind_tz(struct thermal_zone_device *);
1006:	static void thermal_cooling_device_release(struct device *, void *);
1498:	static int thermal_init(void);
250:	static int thermal_register_governors(void);
763:	static void thermal_release(struct device *);
95:	static int thermal_set_governor(struct thermal_zone_device *, struct thermal_governor *);
504:	static void thermal_zone_device_check(struct work_struct *);

File drivers/thermal/thermal_helpers.c:
221:	void __thermal_cdev_update(struct thermal_cooling_device *);
81:	int __thermal_zone_get_temp(struct thermal_zone_device *, int *);
165:	void __thermal_zone_set_trips(struct thermal_zone_device *);
44:	struct thermal_instance *get_thermal_instance(struct thermal_zone_device *, struct thermal_cooling_device *, int);
26:	int get_tz_trend(struct thermal_zone_device *, int);
248:	void thermal_cdev_update(struct thermal_cooling_device *);
280:	int thermal_zone_get_offset(struct thermal_zone_device *);
265:	int thermal_zone_get_slope(struct thermal_zone_device *);
124:	int thermal_zone_get_temp(struct thermal_zone_device *, int *);

File drivers/thermal/thermal_of.c:
697:	struct thermal_zone_device *devm_thermal_of_zone_register(struct device *, int, void *, const struct thermal_zone_device_ops *);
733:	void devm_thermal_of_zone_unregister(struct device *, struct thermal_zone_device *);
32:	int of_thermal_get_ntrips(struct thermal_zone_device *);
68:	const struct thermal_trip *of_thermal_get_trip_points(struct thermal_zone_device *);
48:	bool of_thermal_is_trip_valid(struct thermal_zone_device *, int);
587:	struct thermal_zone_device *thermal_of_zone_register(struct device_node *, int, void *, const struct thermal_zone_device_ops *);
553:	void thermal_of_zone_unregister(struct thermal_zone_device *);
434:	static int __thermal_of_bind(struct device_node *, int, int, struct thermal_zone_device *, struct thermal_cooling_device *);
403:	static int __thermal_of_unbind(struct device_node *, int, int, struct thermal_zone_device *, struct thermal_cooling_device *);
676:	static int devm_thermal_of_zone_match(struct device *, void *, void *);
671:	static void devm_thermal_of_zone_release(struct device *, void *);
119:	static int of_thermal_get_crit_temp(struct thermal_zone_device *, int *);
96:	static int of_thermal_get_trip_hyst(struct thermal_zone_device *, int, int *);
85:	static int of_thermal_get_trip_temp(struct thermal_zone_device *, int, int *);
74:	static int of_thermal_get_trip_type(struct thermal_zone_device *, int, enum thermal_trip_type *);
107:	static int of_thermal_set_trip_hyst(struct thermal_zone_device *, int, int);
533:	static int thermal_of_bind(struct thermal_zone_device *, struct thermal_cooling_device *);
502:	static int thermal_of_for_each_cooling_maps(struct thermal_zone_device *, struct thermal_cooling_device *, int (*)(struct device_node *, int, int, struct thermal_zone_device *, struct thermal_cooling_device *));
539:	static int thermal_of_unbind(struct thermal_zone_device *, struct thermal_cooling_device *);

File drivers/thermal/thermal_sysfs.c:
924:	void thermal_cooling_device_destroy_sysfs(struct thermal_cooling_device *);
918:	void thermal_cooling_device_setup_sysfs(struct thermal_cooling_device *);
587:	int thermal_zone_create_device_groups(struct thermal_zone_device *, int);
619:	void thermal_zone_destroy_device_groups(struct thermal_zone_device *);
931:	ssize_t trip_point_show(struct device *, struct device_attribute *, char *);
942:	ssize_t weight_show(struct device *, struct device_attribute *, char *);
951:	ssize_t weight_store(struct device *, struct device_attribute *, const char *, size_t);
298:	static ssize_t available_policies_show(struct device *, struct device_attribute *, char *);
632:	static ssize_t cdev_type_show(struct device *, struct device_attribute *, char *);
647:	static ssize_t cur_state_show(struct device *, struct device_attribute *, char *);
661:	static ssize_t cur_state_store(struct device *, struct device_attribute *, const char *, size_t);
306:	static ssize_t emul_temp_store(struct device *, struct device_attribute *, const char *, size_t);
405:	static ssize_t integral_cutoff_show(struct device *, struct device_attribute *, char *);
405:	static ssize_t integral_cutoff_store(struct device *, struct device_attribute *, const char *, size_t);
404:	static ssize_t k_d_show(struct device *, struct device_attribute *, char *);
404:	static ssize_t k_d_store(struct device *, struct device_attribute *, const char *, size_t);
403:	static ssize_t k_i_show(struct device *, struct device_attribute *, char *);
403:	static ssize_t k_i_store(struct device *, struct device_attribute *, const char *, size_t);
401:	static ssize_t k_po_show(struct device *, struct device_attribute *, char *);
401:	static ssize_t k_po_store(struct device *, struct device_attribute *, const char *, size_t);
402:	static ssize_t k_pu_show(struct device *, struct device_attribute *, char *);
402:	static ssize_t k_pu_store(struct device *, struct device_attribute *, const char *, size_t);
639:	static ssize_t max_state_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t mode_show(struct device *, struct device_attribute *, char *);
62:	static ssize_t mode_store(struct device *, struct device_attribute *, const char *, size_t);
407:	static ssize_t offset_show(struct device *, struct device_attribute *, char *);
407:	static ssize_t offset_store(struct device *, struct device_attribute *, const char *, size_t);
290:	static ssize_t policy_show(struct device *, struct device_attribute *, char *);
273:	static ssize_t policy_store(struct device *, struct device_attribute *, const char *, size_t);
406:	static ssize_t slope_show(struct device *, struct device_attribute *, char *);
406:	static ssize_t slope_store(struct device *, struct device_attribute *, const char *, size_t);
340:	static ssize_t sustainable_power_show(struct device *, struct device_attribute *, char *);
352:	static ssize_t sustainable_power_store(struct device *, struct device_attribute *, const char *, size_t);
35:	static ssize_t temp_show(struct device *, struct device_attribute *, char *);
247:	static ssize_t trip_point_hyst_show(struct device *, struct device_attribute *, char *);
207:	static ssize_t trip_point_hyst_store(struct device *, struct device_attribute *, const char *, size_t);
178:	static ssize_t trip_point_temp_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t trip_point_type_show(struct device *, struct device_attribute *, char *);
27:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/tty/hvc/hvc_console.c:
778:	void __hvc_resize(struct hvc_struct *, struct winsize);
911:	struct hvc_struct *hvc_alloc(uint32_t, int, const struct hv_ops *, int);
285:	int hvc_instantiate(uint32_t, int, const struct hv_ops *);
313:	void hvc_kick(void);
762:	int hvc_poll(struct hvc_struct *);
979:	int hvc_remove(struct hvc_struct *);
632:	static int __hvc_poll(struct hvc_struct *, bool);
599:	static unsigned int hvc_chars_in_buffer(struct tty_struct *);
432:	static void hvc_cleanup(struct tty_struct *);
389:	static void hvc_close(struct tty_struct *, struct file *);
197:	static struct tty_driver *hvc_console_device(struct console *, int *);
241:	static int hvc_console_init(void);
151:	static void hvc_console_print(struct console *, const char *, unsigned int);
206:	static int hvc_console_setup(struct console *, char *);
90:	static struct hvc_struct *hvc_get_by_index(int);
439:	static void hvc_hangup(struct tty_struct *);
325:	static int hvc_install(struct tty_driver *, struct tty_struct *);
347:	static int hvc_open(struct tty_struct *, struct file *);
249:	static void hvc_port_destruct(struct tty_port *);
563:	static void hvc_set_winsz(struct work_struct *);
836:	static int hvc_tiocmget(struct tty_struct *);
845:	static int hvc_tiocmset(struct tty_struct *, unsigned int, unsigned int);
320:	static void hvc_unthrottle(struct tty_struct *);
499:	static int hvc_write(struct tty_struct *, const unsigned char *, int);
589:	static unsigned int hvc_write_room(struct tty_struct *);
790:	static int khvcd(void *);

File drivers/tty/n_null.c:
18:	static void n_null_close(struct tty_struct *);
58:	static void n_null_exit(void);
52:	static int n_null_init(void);
13:	static int n_null_open(struct tty_struct *);
22:	static ssize_t n_null_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
35:	static void n_null_receivebuf(struct tty_struct *, const unsigned char *, const char *, int);
29:	static ssize_t n_null_write(struct tty_struct *, struct file *, const unsigned char *, size_t);

File drivers/tty/n_tty.c:
2512:	void n_tty_inherit_ops(struct tty_ldisc_ops *);
2519:	void n_tty_init(void);
614:	static size_t __process_echoes(struct tty_struct *);
1980:	static bool canon_copy_from_read_buf(struct tty_struct *, unsigned char **, size_t *);
760:	static void commit_echoes(struct tty_struct *);
424:	static int do_output_char(unsigned char, struct tty_struct *, int);
920:	static void echo_char(unsigned char, struct tty_struct *);
1100:	static void isig(int, struct tty_struct *);
271:	static void n_tty_check_unthrottle(struct tty_struct *);
1853:	static void n_tty_close(struct tty_struct *);
368:	static void n_tty_flush_buffer(struct tty_struct *);
2465:	static int n_tty_ioctl(struct tty_struct *, unsigned int, unsigned long);
202:	static void n_tty_kick_worker(struct tty_struct *);
1484:	static void n_tty_lookahead_flow_ctrl(struct tty_struct *, const unsigned char *, const unsigned char *, unsigned int);
1874:	static int n_tty_open(struct tty_struct *);
2419:	static __poll_t n_tty_poll(struct tty_struct *, struct file *, poll_table *);
2121:	static ssize_t n_tty_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
1737:	static void n_tty_receive_buf(struct tty_struct *, const unsigned char *, const char *, int);
1743:	static int n_tty_receive_buf2(struct tty_struct *, const unsigned char *, const char *, int);
1542:	static void n_tty_receive_buf_closing(struct tty_struct *, const unsigned char *, const char *, int, bool);
1668:	static int n_tty_receive_buf_common(struct tty_struct *, const unsigned char *, const char *, int, int);
1555:	static void n_tty_receive_buf_standard(struct tty_struct *, const unsigned char *, const char *, int, bool);
1406:	static void n_tty_receive_char(struct tty_struct *, unsigned char);
1448:	static void n_tty_receive_char_flagged(struct tty_struct *, unsigned char, char);
1248:	static bool n_tty_receive_char_flow_ctrl(struct tty_struct *, unsigned char, bool);
1216:	static void n_tty_receive_signal_char(struct tty_struct *, int, unsigned char);
1761:	static void n_tty_set_termios(struct tty_struct *, const struct ktermios *);
2318:	static ssize_t n_tty_write(struct tty_struct *, struct file *, const unsigned char *, size_t);
241:	static void n_tty_write_wakeup(struct tty_struct *);

File drivers/tty/pty.c:
602:	int ptm_open_peer(struct file *, struct tty_struct *, int);
529:	static void legacy_pty_init(void);
688:	static struct tty_struct *ptm_unix98_lookup(struct tty_driver *, struct file *, int);
790:	static int ptmx_open(struct inode *, struct file *);
705:	static struct tty_struct *pts_unix98_lookup(struct tty_driver *, struct file *, int);
453:	static int pty_bsd_ioctl(struct tty_struct *, unsigned int, unsigned long);
431:	static void pty_cleanup(struct tty_struct *);
47:	static void pty_close(struct tty_struct *, struct file *);
359:	static int pty_common_install(struct tty_driver *, struct tty_struct *, bool);
204:	static void pty_flush_buffer(struct tty_struct *);
941:	static int pty_init(void);
439:	static int pty_install(struct tty_driver *, struct tty_struct *);
220:	static int pty_open(struct tty_struct *, struct file *);
444:	static void pty_remove(struct tty_driver *, struct tty_struct *);
283:	static int pty_resize(struct tty_struct *, struct winsize *);
242:	static void pty_set_termios(struct tty_struct *, const struct ktermios *);
740:	static void pty_show_fdinfo(struct tty_struct *, struct seq_file *);
322:	static void pty_start(struct tty_struct *);
335:	static void pty_stop(struct tty_struct *);
719:	static int pty_unix98_install(struct tty_driver *, struct tty_struct *);
642:	static int pty_unix98_ioctl(struct tty_struct *, unsigned int, unsigned long);
725:	static void pty_unix98_remove(struct tty_driver *, struct tty_struct *);
93:	static void pty_unthrottle(struct tty_struct *);
111:	static int pty_write(struct tty_struct *, const unsigned char *, int);
129:	static unsigned int pty_write_room(struct tty_struct *);
873:	static void unix98_pty_init(void);

File drivers/tty/serdev/core.c:
839:	int __serdev_device_driver_register(struct serdev_device_driver *, struct module *);
193:	int devm_serdev_device_open(struct device *, struct serdev_device *);
770:	int serdev_controller_add(struct serdev_controller *);
476:	struct serdev_controller *serdev_controller_alloc(struct device *, size_t);
820:	void serdev_controller_remove(struct serdev_controller *);
102:	int serdev_device_add(struct serdev_device *);
447:	struct serdev_device *serdev_device_alloc(struct serdev_controller *);
175:	void serdev_device_close(struct serdev_device *);
386:	int serdev_device_get_tiocm(struct serdev_device *);
147:	int serdev_device_open(struct serdev_device *);
138:	void serdev_device_remove(struct serdev_device *);
340:	unsigned int serdev_device_set_baudrate(struct serdev_device *, unsigned int);
352:	void serdev_device_set_flow_control(struct serdev_device *, bool);
363:	int serdev_device_set_parity(struct serdev_device *, enum serdev_parity);
397:	int serdev_device_set_tiocm(struct serdev_device *, int, int);
375:	void serdev_device_wait_until_sent(struct serdev_device *, long);
270:	int serdev_device_write(struct serdev_device *, const unsigned char *, size_t, long);
236:	int serdev_device_write_buf(struct serdev_device *, const unsigned char *, size_t);
318:	void serdev_device_write_flush(struct serdev_device *);
329:	int serdev_device_write_room(struct serdev_device *);
215:	void serdev_device_write_wakeup(struct serdev_device *);
188:	static void devm_serdev_device_release(struct device *, void *);
26:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
75:	static void serdev_ctrl_release(struct device *);
86:	static int serdev_device_match(struct device *, struct device_driver *);
58:	static void serdev_device_release(struct device *);
45:	static int serdev_device_uevent(struct device *, struct kobj_uevent_env *);
408:	static int serdev_drv_probe(struct device *);
424:	static void serdev_drv_remove(struct device *);
851:	static void serdev_exit(void);
858:	static int serdev_init(void);
805:	static int serdev_remove_device(struct device *, void *);

File drivers/tty/serdev/serdev-ttyport.c:
264:	struct device *serdev_tty_port_register(struct tty_port *, struct device *, struct tty_driver *, int);
304:	int serdev_tty_port_unregister(struct tty_port *);
154:	static void ttyport_close(struct serdev_controller *);
228:	static int ttyport_get_tiocm(struct serdev_controller *);
105:	static int ttyport_open(struct serdev_controller *);
25:	static int ttyport_receive_buf(struct tty_port *, const unsigned char *, const unsigned char *, size_t);
169:	static unsigned int ttyport_set_baudrate(struct serdev_controller *, unsigned int);
183:	static void ttyport_set_flow_control(struct serdev_controller *, bool);
197:	static int ttyport_set_parity(struct serdev_controller *, enum serdev_parity);
239:	static int ttyport_set_tiocm(struct serdev_controller *, unsigned int, unsigned int);
220:	static void ttyport_wait_until_sent(struct serdev_controller *, long);
77:	static int ttyport_write_buf(struct serdev_controller *, const unsigned char *, size_t);
89:	static void ttyport_write_flush(struct serdev_controller *);
97:	static int ttyport_write_room(struct serdev_controller *);
48:	static void ttyport_write_wakeup(struct tty_port *);

File drivers/tty/serial/8250/8250.h:
373:	static int serial8250_rx_dma(struct uart_8250_port *);
369:	static int serial8250_tx_dma(struct uart_8250_port *);

File drivers/tty/serial/8250/8250_core.c:
713:	int early_serial_setup(struct uart_port *);
407:	struct uart_8250_port *serial8250_get_port(int);
982:	int serial8250_register_8250_port(const struct uart_8250_port *);
779:	void serial8250_resume_port(int);
416:	void serial8250_set_isa_configurator(void (*)(int, struct uart_port *, u32 *));
755:	void serial8250_suspend_port(int);
1141:	void serial8250_unregister_port(int);
1283:	static void s8250_options(void);
256:	static void serial8250_backup_timeout(struct timer_list *);
1227:	static void serial8250_exit(void);
1170:	static int serial8250_init(void);
109:	static irqreturn_t serial8250_interrupt(int, void *);
491:	static void serial8250_isa_init_ports(void);
804:	static int serial8250_probe(struct platform_device *);
554:	static void serial8250_register_ports(struct uart_driver *, struct device *);
853:	static int serial8250_remove(struct platform_device *);
880:	static int serial8250_resume(struct platform_device *);
866:	static int serial8250_suspend(struct platform_device *, pm_message_t);
248:	static void serial8250_timeout(struct timer_list *);
954:	static void serial_8250_overrun_backoff_work(struct work_struct *);
609:	static int univ8250_console_exit(struct console *);
682:	static int univ8250_console_init(void);
635:	static int univ8250_console_match(struct console *, char *, int, char *);
587:	static int univ8250_console_setup(struct console *, char *);
579:	static void univ8250_console_write(struct console *, const char *, unsigned int);
337:	static void univ8250_release_irq(struct uart_8250_port *);
327:	static int univ8250_setup_irq(struct uart_8250_port *);
302:	static void univ8250_setup_timer(struct uart_8250_port *);

File drivers/tty/serial/8250/8250_dw.c:
104:	static void dw8250_check_lcr(struct uart_port *, int);
501:	static void dw8250_clk_disable_unprepare(void *);
315:	static int dw8250_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
300:	static void dw8250_clk_work_cb(struct work_struct *);
341:	static void dw8250_do_pm(struct uart_port *, unsigned int, unsigned int);
400:	static bool dw8250_fallback_dma_filter(struct dma_chan *, void *);
245:	static int dw8250_handle_irq(struct uart_port *);
405:	static bool dw8250_idma_filter(struct dma_chan *, void *);
813:	static void dw8250_platform_driver_exit(void);
813:	static int dw8250_platform_driver_init(void);
433:	static void dw8250_prepare_rx_dma(struct uart_8250_port *);
420:	static void dw8250_prepare_tx_dma(struct uart_8250_port *);
511:	static int dw8250_probe(struct platform_device *);
446:	static void dw8250_quirks(struct uart_port *, struct dw8250_data *);
684:	static int dw8250_remove(struct platform_device *);
506:	static void dw8250_reset_control_assert(void *);
179:	static unsigned int dw8250_serial_in(struct uart_port *, int);
220:	static unsigned int dw8250_serial_in32(struct uart_port *, int);
237:	static unsigned int dw8250_serial_in32be(struct uart_port *, int);
187:	static unsigned int dw8250_serial_inq(struct uart_port *, int);
160:	static void dw8250_serial_out(struct uart_port *, int, int);
210:	static void dw8250_serial_out32(struct uart_port *, int, int);
227:	static void dw8250_serial_out32be(struct uart_port *, int, int);
170:	static void dw8250_serial_out38x(struct uart_port *, int, int);
196:	static void dw8250_serial_outq(struct uart_port *, int, int);
376:	static void dw8250_set_ldisc(struct uart_port *, struct ktermios *);
352:	static void dw8250_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);

File drivers/tty/serial/8250/8250_dwlib.c:
95:	void dw8250_do_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
242:	void dw8250_setup_port(struct uart_port *);
75:	static unsigned int dw8250_get_divisor(struct uart_port *, unsigned int, unsigned int *);
180:	static int dw8250_rs485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
88:	static void dw8250_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);

File drivers/tty/serial/8250/8250_early.c:
155:	int early_serial8250_setup(struct earlycon_device *, const char *);
184:	static int early_omap8250_setup(struct earlycon_device *, const char *);
101:	static void early_serial8250_write(struct console *, const char *, unsigned int);
132:	static void init_port(struct earlycon_device *);
37:	static unsigned int serial8250_early_in(struct uart_port *, int);
60:	static void serial8250_early_out(struct uart_port *, int, int);
87:	static void serial_putc(struct uart_port *, unsigned char);

File drivers/tty/serial/8250/8250_fsl.c:
26:	int fsl8250_handle_irq(struct uart_port *);

File drivers/tty/serial/8250/8250_of.c:
353:	static void of_platform_serial_driver_exit(void);
353:	static int of_platform_serial_driver_init(void);
197:	static int of_platform_serial_probe(struct platform_device *);
263:	static int of_platform_serial_remove(struct platform_device *);

File drivers/tty/serial/8250/8250_omap.c:
1733:	static int omap8250_console_fixup(void);
617:	static irqreturn_t omap8250_irq(int, void *);
1302:	static int omap8250_no_handle_irq(struct uart_port *);
1789:	static void omap8250_platform_driver_exit(void);
1789:	static int omap8250_platform_driver_init(void);
1349:	static int omap8250_probe(struct platform_device *);
1539:	static int omap8250_remove(struct platform_device *);
807:	static int omap8250_rs485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
195:	static void omap8250_set_mctrl(struct uart_port *, unsigned int);
605:	static void omap8250_uart_qos_work(struct work_struct *);
519:	static void omap_8250_pm(struct uart_port *, unsigned int, unsigned int);
367:	static void omap_8250_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
736:	static void omap_8250_shutdown(struct uart_port *);
671:	static int omap_8250_startup(struct uart_port *);
770:	static void omap_8250_throttle(struct uart_port *);
786:	static void omap_8250_unthrottle(struct uart_port *);

File drivers/tty/serial/8250/8250_port.c:
556:	void serial8250_clear_and_reinit_fifos(struct uart_8250_port *);
3508:	int serial8250_console_exit(struct uart_port *);
3482:	int serial8250_console_setup(struct uart_port *, char *, bool);
3380:	void serial8250_console_write(struct uart_8250_port *, const char *, unsigned int);
2015:	unsigned int serial8250_do_get_mctrl(struct uart_port *);
2925:	void serial8250_do_pm(struct uart_port *, unsigned int, unsigned int);
2628:	void serial8250_do_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);
2898:	void serial8250_do_set_ldisc(struct uart_port *, struct ktermios *);
2040:	void serial8250_do_set_mctrl(struct uart_port *, unsigned int);
2751:	void serial8250_do_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2466:	void serial8250_do_shutdown(struct uart_port *);
2177:	int serial8250_do_startup(struct uart_port *);
669:	int serial8250_em485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
639:	void serial8250_em485_destroy(struct uart_8250_port *);
1598:	void serial8250_em485_start_tx(struct uart_8250_port *);
1437:	void serial8250_em485_stop_tx(struct uart_8250_port *);
1914:	int serial8250_handle_irq(struct uart_port *, unsigned int);
3267:	void serial8250_init_port(struct uart_8250_port *);
1871:	unsigned int serial8250_modem_status(struct uart_8250_port *);
1725:	void serial8250_read_char(struct uart_8250_port *, u16);
563:	void serial8250_rpm_get(struct uart_8250_port *);
698:	void serial8250_rpm_get_tx(struct uart_8250_port *);
571:	void serial8250_rpm_put(struct uart_8250_port *);
712:	void serial8250_rpm_put_tx(struct uart_8250_port *);
1794:	u16 serial8250_rx_chars(struct uart_8250_port *, u16);
3279:	void serial8250_set_defaults(struct uart_8250_port *);
1811:	void serial8250_tx_chars(struct uart_8250_port *);
2699:	void serial8250_update_uartclk(struct uart_port *, unsigned int);
1506:	static void __stop_tx(struct uart_8250_port *);
319:	static int default_serial_dl_read(struct uart_8250_port *);
329:	static void default_serial_dl_write(struct uart_8250_port *, int);
395:	static unsigned int hub6_serial_in(struct uart_port *, int);
402:	static void hub6_serial_out(struct uart_port *, int, int);
457:	static unsigned int io_serial_in(struct uart_port *, int);
463:	static void io_serial_out(struct uart_port *, int, int);
427:	static unsigned int mem16_serial_in(struct uart_port *, int);
421:	static void mem16_serial_out(struct uart_port *, int, int);
439:	static unsigned int mem32_serial_in(struct uart_port *, int);
433:	static void mem32_serial_out(struct uart_port *, int, int);
451:	static unsigned int mem32be_serial_in(struct uart_port *, int);
445:	static void mem32be_serial_out(struct uart_port *, int, int);
409:	static unsigned int mem_serial_in(struct uart_port *, int);
415:	static void mem_serial_out(struct uart_port *, int, int);
3097:	static ssize_t rx_trig_bytes_show(struct device *, struct device_attribute *, char *);
3143:	static ssize_t rx_trig_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
2064:	static void serial8250_break_ctl(struct uart_port *, int);
3183:	static void serial8250_config_port(struct uart_port *, int);
3308:	static void serial8250_console_putchar(struct uart_port *, unsigned char);
1959:	static int serial8250_default_handle_irq(struct uart_port *);
1649:	static enum hrtimer_restart serial8250_em485_handle_start_tx(struct hrtimer *);
1461:	static enum hrtimer_restart serial8250_em485_handle_stop_tx(struct hrtimer *);
1708:	static void serial8250_enable_ms(struct uart_port *);
2033:	static unsigned int serial8250_get_mctrl(struct uart_port *);
2935:	static void serial8250_pm(struct uart_port *, unsigned int, unsigned int);
3033:	static void serial8250_release_port(struct uart_port *);
3040:	static int serial8250_request_port(struct uart_port *);
2962:	static int serial8250_request_std_resource(struct uart_8250_port *);
2917:	static void serial8250_set_ldisc(struct uart_port *, struct ktermios *);
2053:	static void serial8250_set_mctrl(struct uart_port *, unsigned int);
2889:	static void serial8250_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2521:	static void serial8250_shutdown(struct uart_port *);
1666:	static void serial8250_start_tx(struct uart_port *);
2459:	static int serial8250_startup(struct uart_port *);
1418:	static void serial8250_stop_rx(struct uart_port *);
1546:	static void serial8250_stop_tx(struct uart_port *);
1684:	static void serial8250_throttle(struct uart_port *);
1998:	static unsigned int serial8250_tx_empty(struct uart_port *);
1980:	static int serial8250_tx_threshold_handle_irq(struct uart_port *);
3231:	static const char *serial8250_type(struct uart_port *);
1689:	static void serial8250_unthrottle(struct uart_port *);
3221:	static int serial8250_verify_port(struct uart_port *, struct serial_struct *);
838:	static int size_fifo(struct uart_8250_port *);
2100:	static void wait_for_xmitr(struct uart_8250_port *, int);

File drivers/tty/serial/amba-pl011.c:
121:	static unsigned int get_fifosize_arm(struct amba_device *);
199:	static unsigned int get_fifosize_st(struct amba_device *);
1652:	static void pl011_break_ctl(struct uart_port *, int);
2205:	static void pl011_config_port(struct uart_port *, int);
2467:	static int pl011_console_match(struct console *, char *, int, char *);
2307:	static void pl011_console_putchar(struct uart_port *, unsigned char);
2399:	static int pl011_console_setup(struct console *, char *);
2318:	static void pl011_console_write(struct console *, const char *, unsigned int);
2601:	static int pl011_early_console_setup(struct earlycon_device *, const char *);
2551:	static void pl011_early_write(struct console *, const char *, unsigned int);
1800:	static void pl011_enable_interrupts(struct uart_amba_port *);
1381:	static void pl011_enable_ms(struct uart_port *);
3004:	static void pl011_exit(void);
1604:	static unsigned int pl011_get_mctrl(struct uart_port *);
1727:	static int pl011_hwinit(struct uart_port *);
2995:	static int pl011_init(void);
1550:	static irqreturn_t pl011_int(int, void *);
2786:	static int pl011_probe(struct amba_device *, const struct amba_id *);
2539:	static void pl011_putc(struct uart_port *, unsigned char);
2752:	static int pl011_register_port(struct uart_amba_port *);
2840:	static void pl011_remove(struct amba_device *);
2228:	static int pl011_rs485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
1286:	static void pl011_rs485_tx_stop(struct uart_amba_port *);
1623:	static void pl011_set_mctrl(struct uart_port *, unsigned int);
2043:	static void pl011_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2723:	static int pl011_setup_port(struct device *, struct uart_amba_port *, struct resource *, int);
1962:	static void pl011_shutdown(struct uart_port *);
1351:	static void pl011_start_tx(struct uart_port *);
1846:	static int pl011_startup(struct uart_port *);
1360:	static void pl011_stop_rx(struct uart_port *);
1327:	static void pl011_stop_tx(struct uart_port *);
1372:	static void pl011_throttle_rx(struct uart_port *);
1464:	static bool pl011_tx_chars(struct uart_amba_port *, bool);
1592:	static unsigned int pl011_tx_empty(struct uart_port *);
2195:	static const char *pl011_type(struct uart_port *);
2684:	static void pl011_unregister_port(struct uart_amba_port *);
1830:	static void pl011_unthrottle_rx(struct uart_port *);
2214:	static int pl011_verify_port(struct uart_port *, struct serial_struct *);
2626:	static int qdf2400_e44_early_console_setup(struct earlycon_device *, const char *);
2532:	static void qdf2400_e44_early_write(struct console *, const char *, unsigned int);
2523:	static void qdf2400_e44_putc(struct uart_port *, unsigned char);
2278:	static unsigned int sbsa_uart_get_mctrl(struct uart_port *);
2872:	static int sbsa_uart_probe(struct platform_device *);
2934:	static int sbsa_uart_remove(struct platform_device *);
2274:	static void sbsa_uart_set_mctrl(struct uart_port *, unsigned int);
2175:	static void sbsa_uart_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
1997:	static void sbsa_uart_shutdown(struct uart_port *);
1893:	static int sbsa_uart_startup(struct uart_port *);

File drivers/tty/serial/earlycon.c:
246:	int of_setup_earlycon(const struct earlycon_id *, unsigned long, const char *);
176:	int setup_earlycon(char *);
55:	static void earlycon_init(struct earlycon_device *, const char *);
74:	static void earlycon_print_info(struct earlycon_device *);
223:	static int param_setup_earlycon(char *);
93:	static int parse_options(struct earlycon_device *, char *);
132:	static int register_earlycon(char *, const struct earlycon_id *);

File drivers/tty/serial/fsl_linflexuart.c:
310:	static void linflex_break_ctl(struct uart_port *, int);
529:	static void linflex_config_port(struct uart_port *, int);
555:	static void linflex_console_putchar(struct uart_port *, unsigned char);
692:	static int linflex_console_setup(struct console *, char *);
640:	static void linflex_console_write(struct console *, const char *, unsigned int);
778:	static int linflex_early_console_setup(struct earlycon_device *, const char *);
580:	static void linflex_earlycon_putchar(struct uart_port *, unsigned char);
770:	static void linflex_earlycon_write(struct console *, const char *, unsigned int);
301:	static unsigned int linflex_get_mctrl(struct uart_port *);
276:	static irqreturn_t linflex_int(int, void *);
806:	static int linflex_probe(struct platform_device *);
518:	static void linflex_release_port(struct uart_port *);
854:	static int linflex_remove(struct platform_device *);
523:	static int linflex_request_port(struct uart_port *);
910:	static void linflex_serial_exit(void);
895:	static int linflex_serial_init(void);
306:	static void linflex_set_mctrl(struct uart_port *, unsigned int);
402:	static void linflex_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
314:	static void linflex_setup_watermark(struct uart_port *);
384:	static void linflex_shutdown(struct uart_port *);
191:	static void linflex_start_tx(struct uart_port *);
367:	static int linflex_startup(struct uart_port *);
152:	static void linflex_stop_rx(struct uart_port *);
143:	static void linflex_stop_tx(struct uart_port *);
292:	static unsigned int linflex_tx_empty(struct uart_port *);
513:	static const char *linflex_type(struct uart_port *);

File drivers/tty/serial/fsl_lpuart.c:
1965:	static void __lpuart32_serial_setbrg(struct uart_port *, unsigned int, bool, bool);
378:	static int __lpuart_enable_clks(struct lpuart_port *, bool);
1463:	static void lpuart32_break_ctl(struct uart_port *, int);
1369:	static int lpuart32_config_rs485(struct uart_port *, struct ktermios *, struct serial_rs485 *);
2416:	static void lpuart32_console_get_options(struct lpuart_port *, int *, int *, int *);
2296:	static void lpuart32_console_putchar(struct uart_port *, unsigned char);
2333:	static void lpuart32_console_write(struct console *, const char *, unsigned int);
2542:	static int lpuart32_early_console_setup(struct earlycon_device *, const char *);
2525:	static void lpuart32_early_write(struct console *, const char *, unsigned int);
1411:	static unsigned int lpuart32_get_mctrl(struct uart_port *);
2579:	static int lpuart32_imx_early_console_setup(struct earlycon_device *, const char *);
1033:	static irqreturn_t lpuart32_int(int, void *);
1437:	static void lpuart32_set_mctrl(struct uart_port *, unsigned int);
2051:	static void lpuart32_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
1518:	static void lpuart32_setup_watermark(struct lpuart_port *);
1790:	static void lpuart32_shutdown(struct uart_port *);
781:	static void lpuart32_start_tx(struct uart_port *);
1716:	static int lpuart32_startup(struct uart_port *);
437:	static void lpuart32_stop_rx(struct uart_port *);
420:	static void lpuart32_stop_tx(struct uart_port *);
728:	static void lpuart32_transmit_buffer(struct lpuart_port *);
829:	static unsigned int lpuart32_tx_empty(struct uart_port *);
1451:	static void lpuart_break_ctl(struct uart_port *, int);
2212:	static void lpuart_config_port(struct uart_port *, int);
1339:	static int lpuart_config_rs485(struct uart_port *, struct ktermios *, struct serial_rs485 *);
2367:	static void lpuart_console_get_options(struct lpuart_port *, int *, int *, int *);
2290:	static void lpuart_console_putchar(struct uart_port *, unsigned char);
2461:	static int lpuart_console_setup(struct console *, char *);
2303:	static void lpuart_console_write(struct console *, const char *, unsigned int);
1094:	static void lpuart_copy_rx_to_tty(struct lpuart_port *);
1236:	static void lpuart_dma_rx_complete(void *);
1748:	static void lpuart_dma_shutdown(struct lpuart_port *);
445:	static void lpuart_dma_tx(struct lpuart_port *);
498:	static void lpuart_dma_tx_complete(void *);
2532:	static int lpuart_early_console_setup(struct earlycon_device *, const char *);
2518:	static void lpuart_early_write(struct console *, const char *, unsigned int);
574:	static void lpuart_flush_buffer(struct uart_port *);
1399:	static unsigned int lpuart_get_mctrl(struct uart_port *);
1008:	static irqreturn_t lpuart_int(int, void *);
2668:	static int lpuart_probe(struct platform_device *);
2201:	static void lpuart_release_port(struct uart_port *);
2790:	static int lpuart_remove(struct platform_device *);
2206:	static int lpuart_request_port(struct uart_port *);
1612:	static void lpuart_rx_dma_startup(struct lpuart_port *);
3064:	static void lpuart_serial_exit(void);
3050:	static int lpuart_serial_init(void);
1423:	static void lpuart_set_mctrl(struct uart_port *, unsigned int);
1811:	static void lpuart_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
1475:	static void lpuart_setup_watermark(struct lpuart_port *);
1771:	static void lpuart_shutdown(struct uart_port *);
1250:	static int lpuart_start_rx_dma(struct lpuart_port *);
763:	static void lpuart_start_tx(struct uart_port *);
1661:	static int lpuart_startup(struct uart_port *);
429:	static void lpuart_stop_rx(struct uart_port *);
411:	static void lpuart_stop_tx(struct uart_port *);
1243:	static void lpuart_timer_func(struct timer_list *);
718:	static void lpuart_transmit_buffer(struct lpuart_port *);
1580:	static void lpuart_tx_dma_startup(struct lpuart_port *);
813:	static unsigned int lpuart_tx_empty(struct uart_port *);
2196:	static const char *lpuart_type(struct uart_port *);
799:	static void lpuart_uart_pm(struct uart_port *, unsigned int, unsigned int);
2218:	static int lpuart_verify_port(struct uart_port *, struct serial_struct *);
2555:	static int ls1028a_early_console_setup(struct earlycon_device *, const char *);

File drivers/tty/serial/serial_core.c:
3053:	int uart_add_one_port(struct uart_driver *, struct uart_port *);
2811:	struct tty_driver *uart_console_device(struct console *, int *);
2075:	void uart_console_write(struct uart_port *, const char *, unsigned int, void (*)(struct uart_port *, unsigned char));
377:	unsigned int uart_get_baud_rate(struct uart_port *, struct ktermios *, const struct ktermios *, unsigned int, unsigned int);
2100:	struct uart_port *uart_get_console(struct uart_port *, int, struct console *);
472:	unsigned int uart_get_divisor(struct uart_port *, unsigned int);
3412:	int uart_get_rs485_mode(struct uart_port *);
3300:	void uart_handle_cts_change(struct uart_port *, unsigned int);
3265:	void uart_handle_dcd_change(struct uart_port *, unsigned int);
3336:	void uart_insert_char(struct uart_port *, unsigned int, unsigned int, unsigned int, unsigned int);
3233:	bool uart_match_port(const struct uart_port *, const struct uart_port *);
2135:	int uart_parse_earlycon(char *, unsigned char *, resource_size_t *, char **);
2190:	void uart_parse_options(const char *, int *, int *, int *, int *);
2725:	int uart_register_driver(struct uart_driver *);
3155:	int uart_remove_one_port(struct uart_driver *, struct uart_port *);
2392:	int uart_resume_port(struct uart_driver *, struct uart_port *);
2220:	int uart_set_options(struct uart_port *, struct console *, int, int, int, int);
2315:	int uart_suspend_port(struct uart_driver *, struct uart_port *);
2796:	void uart_unregister_driver(struct uart_driver *);
344:	void uart_update_timeout(struct uart_port *, unsigned int, unsigned int);
111:	void uart_write_wakeup(struct uart_port *);
665:	void uart_xchar_out(struct uart_port *, int);
2893:	static ssize_t close_delay_show(struct device *, struct device_attribute *, char *);
2903:	static ssize_t closing_wait_show(struct device *, struct device_attribute *, char *);
2953:	static ssize_t console_show(struct device *, struct device_attribute *, char *);
2970:	static ssize_t console_store(struct device *, struct device_attribute *, const char *, size_t);
2913:	static ssize_t custom_divisor_show(struct device *, struct device_attribute *, char *);
2873:	static ssize_t flags_show(struct device *, struct device_attribute *, char *);
2923:	static ssize_t io_type_show(struct device *, struct device_attribute *, char *);
2933:	static ssize_t iomem_base_show(struct device *, struct device_attribute *, char *);
2943:	static ssize_t iomem_reg_shift_show(struct device *, struct device_attribute *, char *);
2863:	static ssize_t irq_show(struct device *, struct device_attribute *, char *);
2839:	static ssize_t line_show(struct device *, struct device_attribute *, char *);
2849:	static ssize_t port_show(struct device *, struct device_attribute *, char *);
2305:	static int serial_match_port(struct device *, void *);
2829:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1104:	static int uart_break_ctl(struct tty_struct *, int);
1864:	static int uart_carrier_raised(struct tty_port *);
489:	static void uart_change_speed(struct tty_struct *, struct uart_state *, const struct ktermios *);
619:	static unsigned int uart_chars_in_buffer(struct tty_struct *);
1683:	static void uart_close(struct tty_struct *, struct file *);
1889:	static void uart_dtr_rts(struct tty_port *, int);
632:	static void uart_flush_buffer(struct tty_struct *);
558:	static void uart_flush_chars(struct tty_struct *);
1255:	static int uart_get_icount(struct tty_struct *, struct serial_icounter_struct *);
757:	static int uart_get_info(struct tty_port *, struct serial_struct *);
797:	static int uart_get_info_user(struct tty_struct *, struct serial_struct *);
1458:	static int uart_get_iso7816_config(struct uart_port *, struct serial_iso7816 *);
1037:	static int uart_get_lsr_info(struct tty_struct *, struct uart_state *, unsigned int *);
1404:	static int uart_get_rs485_config(struct uart_port *, struct serial_rs485 *);
1811:	static void uart_hangup(struct tty_struct *);
1901:	static int uart_install(struct tty_driver *, struct tty_struct *);
1514:	static int uart_ioctl(struct tty_struct *, unsigned int, unsigned long);
1921:	static int uart_open(struct tty_struct *, struct file *);
1933:	static int uart_port_activate(struct tty_port *, struct tty_struct *);
2048:	static int uart_proc_show(struct seq_file *, void *);
534:	static int uart_put_char(struct tty_struct *, unsigned char);
1349:	static void uart_sanitize_serial_rs485(struct uart_port *, struct serial_rs485 *);
1317:	static void uart_sanitize_serial_rs485_delays(struct uart_port *, struct serial_rs485 *);
677:	static void uart_send_xchar(struct tty_struct *, char);
1010:	static int uart_set_info_user(struct tty_struct *, struct serial_struct *);
1477:	static int uart_set_iso7816_config(struct uart_port *, struct serial_iso7816 *);
1604:	static void uart_set_ldisc(struct tty_struct *);
1420:	static int uart_set_rs485_config(struct tty_struct *, struct uart_port *, struct serial_rs485 *);
1620:	static void uart_set_termios(struct tty_struct *, const struct ktermios *);
279:	static void uart_shutdown(struct tty_struct *, struct uart_state *);
144:	static void uart_start(struct tty_struct *);
256:	static int uart_startup(struct tty_struct *, struct uart_state *, int);
123:	static void uart_stop(struct tty_struct *);
699:	static void uart_throttle(struct tty_struct *);
1059:	static int uart_tiocmget(struct tty_struct *);
1083:	static int uart_tiocmset(struct tty_struct *, unsigned int, unsigned int);
1704:	static void uart_tty_port_shutdown(struct tty_port *);
728:	static void uart_unthrottle(struct tty_struct *);
1743:	static void uart_wait_until_sent(struct tty_struct *, int);
563:	static int uart_write(struct tty_struct *, const unsigned char *, int);
606:	static unsigned int uart_write_room(struct tty_struct *);
2819:	static ssize_t uartclk_show(struct device *, struct device_attribute *, char *);
2883:	static ssize_t xmit_fifo_size_show(struct device *, struct device_attribute *, char *);

File drivers/tty/serial/xilinx_uartps.c:
1174:	static int cdns_early_console_setup(struct earlycon_device *, const char *);
1166:	static void cdns_early_write(struct console *, const char *, unsigned int);
650:	static void cdns_uart_break_ctl(struct uart_port *, int);
479:	static int cdns_uart_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
985:	static void cdns_uart_config_port(struct uart_port *, int);
1132:	static void cdns_uart_console_putchar(struct uart_port *, unsigned char);
1270:	static int cdns_uart_console_setup(struct console *, char *);
1224:	static void cdns_uart_console_write(struct console *, const char *, unsigned int);
1716:	static void cdns_uart_exit(void);
997:	static unsigned int cdns_uart_get_mctrl(struct uart_port *);
313:	static void cdns_uart_handle_tx(void *);
1710:	static int cdns_uart_init(void);
344:	static irqreturn_t cdns_uart_isr(int, void *);
1087:	static void cdns_uart_pm(struct uart_port *, unsigned int, unsigned int);
1464:	static int cdns_uart_probe(struct platform_device *);
973:	static void cdns_uart_release_port(struct uart_port *);
1669:	static int cdns_uart_remove(struct platform_device *);
950:	static int cdns_uart_request_port(struct uart_port *);
445:	static unsigned int cdns_uart_set_baud_rate(struct uart_port *, unsigned int);
1019:	static void cdns_uart_set_mctrl(struct uart_port *, unsigned int);
677:	static void cdns_uart_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
887:	static void cdns_uart_shutdown(struct uart_port *);
571:	static void cdns_uart_start_tx(struct uart_port *);
806:	static int cdns_uart_startup(struct uart_port *);
616:	static void cdns_uart_stop_rx(struct uart_port *);
602:	static void cdns_uart_stop_tx(struct uart_port *);
635:	static unsigned int cdns_uart_tx_empty(struct uart_port *);
914:	static const char *cdns_uart_type(struct uart_port *);
926:	static int cdns_uart_verify_port(struct uart_port *, struct serial_struct *);

File drivers/tty/tty_baudrate.c:
211:	void tty_encode_baud_rate(struct tty_struct *, speed_t, speed_t);
58:	speed_t tty_termios_baud_rate(const struct ktermios *);
129:	void tty_termios_encode_baud_rate(struct ktermios *, speed_t, speed_t);
88:	speed_t tty_termios_input_baud_rate(const struct ktermios *);

File drivers/tty/tty_buffer.c:
393:	int __tty_insert_flip_char(struct tty_port *, unsigned char, char);
690:	bool tty_buffer_cancel_work(struct tty_port *);
222:	void tty_buffer_flush(struct tty_struct *, struct tty_ldisc *);
695:	void tty_buffer_flush_work(struct tty_port *);
120:	void tty_buffer_free_all(struct tty_port *);
646:	void tty_buffer_init(struct tty_port *);
52:	void tty_buffer_lock_exclusive(struct tty_port *);
301:	int tty_buffer_request_room(struct tty_port *, size_t);
685:	bool tty_buffer_restart_work(struct tty_port *);
670:	int tty_buffer_set_limit(struct tty_port *, int);
680:	void tty_buffer_set_lock_subclass(struct tty_port *);
94:	unsigned int tty_buffer_space_avail(struct tty_port *);
69:	void tty_buffer_unlock_exclusive(struct tty_port *);
599:	void tty_flip_buffer_push(struct tty_port *);
622:	int tty_insert_flip_string_and_push_buffer(struct tty_port *, const unsigned char *, size_t);
319:	int tty_insert_flip_string_fixed_flag(struct tty_port *, const unsigned char *, char, size_t);
358:	int tty_insert_flip_string_flags(struct tty_port *, const unsigned char *, const char *, size_t);
453:	int tty_ldisc_receive_buf(struct tty_ldisc *, const unsigned char *, const char *, int);
424:	int tty_prepare_flip_string(struct tty_port *, unsigned char **, size_t);
262:	static int __tty_buffer_request_room(struct tty_port *, size_t, bool);
532:	static void flush_to_ldisc(struct work_struct *);

File drivers/tty/tty_io.c:
2999:	void __do_SAK(struct tty_struct *);
783:	void __start_tty(struct tty_struct *);
750:	void __stop_tty(struct tty_struct *);
3313:	struct tty_driver *__tty_alloc_driver(unsigned int, struct module *, unsigned long);
3084:	struct tty_struct *alloc_tty_struct(struct tty_driver *, int);
3589:	void console_sysfs_notify(void);
3058:	void do_SAK(struct tty_struct *);
1113:	ssize_t redirected_tty_write(struct kiocb *, struct iov_iter *);
804:	void start_tty(struct tty_struct *);
773:	void stop_tty(struct tty_struct *);
195:	void tty_add_file(struct tty_struct *, struct file *);
181:	int tty_alloc_file(struct file *);
3496:	void tty_default_fops(struct file_operations *);
336:	int tty_dev_name_to_number(const char *, dev_t *);
3490:	dev_t tty_devnum(struct tty_struct *);
2325:	int tty_do_resize(struct tty_struct *, struct winsize *);
3403:	void tty_driver_kref_put(struct tty_driver *);
251:	const char *tty_driver_name(const struct tty_struct *);
214:	void tty_free_file(struct file *);
2569:	int tty_get_icount(struct tty_struct *, struct serial_icounter_struct *);
683:	void tty_hangup(struct tty_struct *);
744:	int tty_hung_up_p(struct file *);
3637:	int tty_init(void);
1390:	struct tty_struct *tty_init_dev(struct tty_driver *, int);
1247:	void tty_init_termios(struct tty_struct *);
2651:	long tty_ioctl(struct file *, unsigned int, unsigned long);
1652:	void tty_kclose(struct tty_struct *);
1998:	struct tty_struct *tty_kopen_exclusive(dev_t);
2013:	struct tty_struct *tty_kopen_shared(dev_t);
1560:	void tty_kref_put(struct tty_struct *);
243:	const char *tty_name(const struct tty_struct *);
3136:	int tty_put_char(struct tty_struct *, unsigned char);
3181:	struct device *tty_register_device(struct tty_driver *, unsigned int, struct device *);
3213:	struct device *tty_register_device_attr(struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
3415:	int tty_register_driver(struct tty_driver *);
1721:	int tty_release(struct inode *, struct file *);
1682:	void tty_release_struct(struct tty_struct *, int);
1468:	void tty_save_termios(struct tty_struct *);
1145:	int tty_send_xchar(struct tty_struct *, char);
1277:	int tty_standard_install(struct tty_driver *, struct tty_struct *);
3293:	void tty_unregister_device(struct tty_driver *, unsigned int);
3480:	void tty_unregister_driver(struct tty_driver *);
698:	void tty_vhangup(struct tty_struct *);
711:	void tty_vhangup_self(void);
732:	void tty_vhangup_session(struct tty_struct *);
516:	void tty_wakeup(struct tty_struct *);
1058:	void tty_write_message(struct tty_struct *, char *);
578:	static void __tty_hangup(struct tty_struct *, int);
272:	static int check_tty_count(struct tty_struct *, const char *);
3045:	static void do_SAK_work(struct work_struct *);
668:	static void do_tty_hangup(struct work_struct *);
1070:	static ssize_t file_tty_write(struct file *, struct kiocb *, struct iov_iter *);
446:	static long hung_up_tty_compat_ioctl(struct file *, unsigned int, unsigned long);
452:	static int hung_up_tty_fasync(int, struct file *, int);
440:	static long hung_up_tty_ioctl(struct file *, unsigned int, unsigned long);
435:	static __poll_t hung_up_tty_poll(struct file *, poll_table *);
424:	static ssize_t hung_up_tty_read(struct kiocb *, struct iov_iter *);
429:	static ssize_t hung_up_tty_write(struct kiocb *, struct iov_iter *);
1520:	static void release_one_tty(struct work_struct *);
1580:	static void release_tty(struct tty_struct *, int);
2469:	static int send_break(struct tty_struct *, unsigned int);
3525:	static ssize_t show_cons_active(struct device *, struct device_attribute *, char *);
2973:	static int this_tty(const void *, struct file *, unsigned int);
2382:	static int tioccons(struct file *);
2445:	static int tiocgetd(struct tty_struct *, int *);
2306:	static int tiocgwinsz(struct tty_struct *, struct winsize *);
2422:	static int tiocsetd(struct tty_struct *, int *);
2272:	static int tiocsti(struct tty_struct *, char *);
2361:	static int tiocswinsz(struct tty_struct *, struct winsize *);
3511:	static int tty_class_init(void);
3188:	static void tty_device_create_release(struct device *);
3501:	static char *tty_devnode(const struct device *, umode_t *);
2245:	static int tty_fasync(int, struct file *, int);
1950:	static struct tty_struct *tty_kopen(dev_t, int);
1911:	static struct tty_driver *tty_lookup_driver(dev_t, struct file *, int *);
2110:	static int tty_open(struct inode *, struct file *);
2192:	static __poll_t tty_poll(struct file *, poll_table *);
906:	static ssize_t tty_read(struct kiocb *, struct iov_iter *);
1332:	static int tty_reopen(struct tty_struct *);
457:	static void tty_show_fdinfo(struct seq_file *, struct file *);
2581:	static int tty_tiocgicount(struct tty_struct *, void *);
2622:	static int tty_tiocgserial(struct tty_struct *, struct serial_struct *);
2506:	static int tty_tiocmget(struct tty_struct *, int *);
2612:	static int tty_tiocsserial(struct tty_struct *, struct serial_struct *);
1108:	static ssize_t tty_write(struct kiocb *, struct iov_iter *);

File drivers/tty/tty_ioctl.c:
402:	int kernel_termios_to_user_termio(struct termio *, struct ktermios *);
422:	int kernel_termios_to_user_termios(struct termios2 *, struct ktermios *);
432:	int kernel_termios_to_user_termios_1(struct termios *, struct ktermios *);
934:	int n_tty_ioctl_helper(struct tty_struct *, unsigned int, unsigned long);
58:	unsigned int tty_chars_in_buffer(struct tty_struct *);
93:	void tty_driver_flush_buffer(struct tty_struct *);
290:	unsigned char tty_get_char_size(unsigned int);
315:	unsigned char tty_get_frame_size(unsigned int);
763:	int tty_mode_ioctl(struct tty_struct *, unsigned int, unsigned long);
919:	int tty_perform_flush(struct tty_struct *, unsigned long);
341:	int tty_set_termios(struct tty_struct *, struct ktermios *);
253:	void tty_termios_copy_hw(struct ktermios *, const struct ktermios *);
273:	int tty_termios_hw_change(const struct ktermios *, const struct ktermios *);
137:	int tty_throttle_safe(struct tty_struct *);
113:	void tty_unthrottle(struct tty_struct *);
168:	int tty_unthrottle_safe(struct tty_struct *);
198:	void tty_wait_until_sent(struct tty_struct *, long);
77:	unsigned int tty_write_room(struct tty_struct *);
382:	int user_termio_to_kernel_termios(struct ktermios *, struct termio *);
417:	int user_termios_to_kernel_termios(struct ktermios *, struct termios2 *);
427:	int user_termios_to_kernel_termios_1(struct ktermios *, struct termios *);
893:	static int __tty_perform_flush(struct tty_struct *, unsigned long);
465:	static int set_termios(struct tty_struct *, void *, int);

File drivers/tty/tty_jobctrl.c:
33:	int __tty_check_change(struct tty_struct *, int);
265:	void disassociate_ctty(int);
160:	struct tty_struct *get_current_tty(void);
333:	void no_tty(void);
75:	void proc_clear_tty(struct task_struct *);
175:	void session_clear_tty(struct pid *);
69:	int tty_check_change(struct tty_struct *);
416:	struct pid *tty_get_pgrp(struct tty_struct *);
567:	long tty_jobctrl_ioctl(struct tty_struct *, struct tty_struct *, struct file *, unsigned int, unsigned long);
132:	void tty_open_proc_set_tty(struct file *, struct tty_struct *);
196:	int tty_signal_session_leader(struct tty_struct *, int);
98:	static void __proc_set_tty(struct tty_struct *);
436:	static struct pid *session_of_pgrp(struct pid *);

File drivers/tty/tty_ldisc.c:
813:	void tty_ldisc_deinit(struct tty_struct *);
280:	void tty_ldisc_deref(struct tty_ldisc *);
385:	void tty_ldisc_flush(struct tty_struct *);
685:	void tty_ldisc_hangup(struct tty_struct *, bool);
796:	int tty_ldisc_init(struct tty_struct *);
305:	int tty_ldisc_lock(struct tty_struct *, unsigned long);
260:	struct tty_ldisc *tty_ldisc_ref(struct tty_struct *);
240:	struct tty_ldisc *tty_ldisc_ref_wait(struct tty_struct *);
642:	int tty_ldisc_reinit(struct tty_struct *, int);
766:	void tty_ldisc_release(struct tty_struct *);
738:	int tty_ldisc_setup(struct tty_struct *, struct tty_struct *);
321:	void tty_ldisc_unlock(struct tty_struct *);
58:	int tty_register_ldisc(struct tty_ldisc_ops *);
520:	int tty_set_ldisc(struct tty_struct *, int);
84:	void tty_unregister_ldisc(struct tty_ldisc_ops *);
468:	static int tty_ldisc_failto(struct tty_struct *, int);
140:	static struct tty_ldisc *tty_ldisc_get(struct tty_struct *, int);
600:	static void tty_ldisc_kill(struct tty_struct *);
179:	static void tty_ldisc_put(struct tty_ldisc *);
492:	static void tty_ldisc_restore(struct tty_struct *, struct tty_ldisc *);
193:	static void *tty_ldiscs_seq_next(struct seq_file *, void *, loff_t *);
203:	static int tty_ldiscs_seq_show(struct seq_file *, void *);
188:	static void *tty_ldiscs_seq_start(struct seq_file *, loff_t *);
199:	static void tty_ldiscs_seq_stop(struct seq_file *, void *);

File drivers/tty/tty_ldsem.c:
57:	void __init_ldsem(struct ld_semaphore *, const char *, struct lock_class_key *);
337:	int ldsem_down_read(struct ld_semaphore *, long);
346:	int ldsem_down_read_trylock(struct ld_semaphore *);
363:	int ldsem_down_write(struct ld_semaphore *, long);
372:	int ldsem_down_write_trylock(struct ld_semaphore *);
389:	void ldsem_up_read(struct ld_semaphore *);
403:	void ldsem_up_write(struct ld_semaphore *);
74:	static void __ldsem_wake_readers(struct ld_semaphore *);

File drivers/tty/tty_mutex.c:
15:	void tty_lock(struct tty_struct *);
22:	int tty_lock_interruptible(struct tty_struct *);
40:	void tty_lock_slave(struct tty_struct *);
52:	void tty_set_lock_subclass(struct tty_struct *);
33:	void tty_unlock(struct tty_struct *);
46:	void tty_unlock_slave(struct tty_struct *);

File drivers/tty/tty_port.c:
245:	int tty_port_alloc_xmit_buf(struct tty_port *);
510:	int tty_port_block_til_ready(struct tty_port *, struct tty_struct *, struct file *);
447:	int tty_port_carrier_raised(struct tty_port *);
715:	void tty_port_close(struct tty_port *, struct tty_struct *, struct file *);
681:	void tty_port_close_end(struct tty_port *, struct tty_struct *);
625:	int tty_port_close_start(struct tty_port *, struct tty_struct *, struct file *);
279:	void tty_port_destroy(struct tty_port *);
261:	void tty_port_free_xmit_buf(struct tty_port *);
394:	void tty_port_hangup(struct tty_port *);
92:	void tty_port_init(struct tty_port *);
738:	int tty_port_install(struct tty_port *, struct tty_driver *, struct tty_struct *);
119:	void tty_port_link_device(struct tty_port *, struct tty_driver *, unsigned int);
478:	void tty_port_lower_dtr_rts(struct tty_port *);
765:	int tty_port_open(struct tty_port *, struct tty_struct *, struct file *);
308:	void tty_port_put(struct tty_port *);
463:	void tty_port_raise_dtr_rts(struct tty_port *);
139:	struct device *tty_port_register_device(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
160:	struct device *tty_port_register_device_attr(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
183:	struct device *tty_port_register_device_attr_serdev(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
213:	struct device *tty_port_register_device_serdev(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
322:	struct tty_struct *tty_port_tty_get(struct tty_port *);
419:	void tty_port_tty_hangup(struct tty_port *, bool);
342:	void tty_port_tty_set(struct tty_port *, struct tty_struct *);
433:	void tty_port_tty_wakeup(struct tty_port *);
232:	void tty_port_unregister_device(struct tty_port *, struct tty_driver *, unsigned int);
46:	static void tty_port_default_lookahead_buf(struct tty_port *, const unsigned char *, const unsigned char *, unsigned int);
23:	static int tty_port_default_receive_buf(struct tty_port *, const unsigned char *, const unsigned char *, size_t);
66:	static void tty_port_default_wakeup(struct tty_port *);

File drivers/tty/vt/consolemap.c:
572:	int con_clear_unimap(struct vc_data *);
763:	int con_copy_unimap(struct vc_data *, struct vc_data *);
453:	void con_free_unimap(struct vc_data *);
402:	int con_get_trans_new(ushort *);
371:	int con_get_trans_old(unsigned char *);
785:	int con_get_unimap(struct vc_data *, ushort, ushort *, struct unipair *);
706:	int con_set_default_unimap(struct vc_data *);
388:	int con_set_trans_new(ushort *);
352:	int con_set_trans_old(unsigned char *);
638:	int con_set_unimap(struct vc_data *, ushort, struct unipair *);
908:	void console_map_init(void);
847:	u32 conv_8bit_to_uni(unsigned char);
853:	int conv_uni_to_8bit(u32);
863:	int conv_uni_to_pc(struct vc_data *, long);
300:	u16 inverse_translate(const struct vc_data *, u16, bool);
287:	unsigned short *set_translate(enum translation_map, struct vc_data *);
426:	static void con_release_unimap(struct uni_pagedict *);
467:	static int con_unify_unimap(struct vc_data *, struct uni_pagedict *);
226:	static void set_inverse_transl(struct vc_data *, struct uni_pagedict *, enum translation_map);
327:	static void update_user_maps(void);

File drivers/tty/vt/keyboard.c:
1653:	int kbd_init(void);
312:	int kbd_rate(struct kbd_repeat *);
276:	void kd_mksound(unsigned int, unsigned int);
163:	int register_keyboard_notifier(struct notifier_block *);
1150:	void setledstate(struct kbd_struct *, unsigned int);
169:	int unregister_keyboard_notifier(struct notifier_block *);
2283:	void vt_clr_kbd_mode_bit(unsigned int, int);
1691:	int vt_do_diacrit(unsigned int, void *, int);
1901:	int vt_do_kbkeycode_ioctl(int, struct kbkeycode *, int);
2060:	int vt_do_kdgkb_ioctl(int, struct kbsentry *, int);
2178:	int vt_do_kdgkbmeta(unsigned int);
2154:	int vt_do_kdgkbmode(unsigned int);
2022:	int vt_do_kdsk_ioctl(int, struct kbentry *, int, unsigned int);
1880:	int vt_do_kdskbmeta(unsigned int, unsigned int);
1840:	int vt_do_kdskbmode(unsigned int, unsigned int);
2112:	int vt_do_kdskled(unsigned int, int, unsigned long, int);
2249:	int vt_get_kbd_mode_bit(unsigned int, int);
1181:	int vt_get_leds(unsigned int, int);
2206:	int vt_get_shift_state(void);
1222:	void vt_kbd_con_start(unsigned int);
1239:	void vt_kbd_con_stop(unsigned int);
2219:	void vt_reset_keyboard(unsigned int);
2191:	void vt_reset_unicode(unsigned int);
2264:	void vt_set_kbd_mode_bit(unsigned int, int);
1203:	void vt_set_led_state(unsigned int, int);
414:	void vt_set_leds_compute_shiftstate(void);
337:	static void applkey(struct vc_data *, int, char);
392:	static void do_compute_shiftstate(void);
638:	static void fn_SAK(struct vc_data *);
545:	static void fn_bare_num(struct vc_data *);
617:	static void fn_boot_it(struct vc_data *);
497:	static void fn_caps_on(struct vc_data *);
489:	static void fn_caps_toggle(struct vc_data *);
622:	static void fn_compose(struct vc_data *);
557:	static void fn_dec_console(struct vc_data *);
471:	static void fn_enter(struct vc_data *);
513:	static void fn_hold(struct vc_data *);
574:	static void fn_inc_console(struct vc_data *);
551:	static void fn_lastcons(struct vc_data *);
644:	static void fn_null(struct vc_data *);
531:	static void fn_num(struct vc_data *);
602:	static void fn_scroll_back(struct vc_data *);
597:	static void fn_scroll_forw(struct vc_data *);
591:	static void fn_send_intr(struct vc_data *);
607:	static void fn_show_mem(struct vc_data *);
505:	static void fn_show_ptregs(struct vc_data *);
612:	static void fn_show_state(struct vc_data *);
627:	static void fn_spawn_con(struct vc_data *);
190:	static int getkeycode_helper(struct input_handle *, void *);
438:	static unsigned int handle_diacr(struct vc_data *, unsigned int);
905:	static void k_ascii(struct vc_data *, unsigned char, char);
978:	static void k_brl(struct vc_data *, unsigned char, char);
758:	static void k_cons(struct vc_data *, unsigned char, char);
783:	static void k_cur(struct vc_data *, unsigned char, char);
723:	static void k_dead(struct vc_data *, unsigned char, char);
715:	static void k_dead2(struct vc_data *, unsigned char, char);
766:	static void k_fn(struct vc_data *, unsigned char, char);
652:	static void k_ignore(struct vc_data *, unsigned char, char);
929:	static void k_lock(struct vc_data *, unsigned char, char);
670:	static void k_lowercase(struct vc_data *, unsigned char, char);
893:	static void k_meta(struct vc_data *, unsigned char, char);
793:	static void k_pad(struct vc_data *, unsigned char, char);
710:	static void k_self(struct vc_data *, unsigned char, char);
852:	static void k_shift(struct vc_data *, unsigned char, char);
937:	static void k_slock(struct vc_data *, unsigned char, char);
656:	static void k_spec(struct vc_data *, unsigned char, char);
675:	static void k_unicode(struct vc_data *, unsigned int, char);
1255:	static void kbd_bh(struct tasklet_struct *);
1575:	static int kbd_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
1606:	static void kbd_disconnect(struct input_handle *);
1533:	static void kbd_event(struct input_handle *, unsigned int, unsigned int, int);
1552:	static bool kbd_match(struct input_handler *, struct input_dev *);
291:	static int kbd_rate_helper(struct input_handle *, void *);
1617:	static void kbd_start(struct input_handle *);
1113:	static int kbd_update_leds_helper(struct input_handle *, void *);
267:	static void kd_nosound(struct timer_list *);
249:	static int kd_sound_helper(struct input_handle *, void *);
217:	static int setkeycode_helper(struct input_handle *, void *);
352:	static void to_utf8(struct vc_data *, uint);

File drivers/tty/vt/selection.c:
81:	void clear_selection(void);
375:	int paste_selection(struct tty_struct *);
119:	int sel_loadlut(char *);
354:	int set_selection_kernel(struct tiocl_selection *, struct tty_struct *);
178:	int set_selection_user(const struct tiocl_selection *, struct tty_struct *);
91:	bool vc_is_sel(struct vc_data *);

File drivers/tty/vt/vc_screen.c:
802:	int vcs_init(void);
785:	void vcs_make_sysfs(int);
795:	void vcs_remove_sysfs(int);
729:	static int vcs_fasync(int, struct file *, int);
228:	static loff_t vcs_lseek(struct file *, loff_t, int);
85:	static int vcs_notifier(struct notifier_block *, unsigned long, void *);
746:	static int vcs_open(struct inode *, struct file *);
706:	static __poll_t vcs_poll(struct file *, poll_table *);
126:	static struct vcs_poll_data *vcs_poll_data_get(struct file *);
365:	static ssize_t vcs_read(struct file *, char *, size_t, loff_t *);
764:	static int vcs_release(struct inode *, struct file *);
591:	static ssize_t vcs_write(struct file *, const char *, size_t, loff_t *);

File drivers/tty/vt/vt.c:
973:	void clear_buffer_attributes(struct vc_data *);
805:	void complement_pos(struct vc_data *, int);
4029:	int con_debug_enter(struct vc_data *);
4085:	int con_debug_leave(void);
4709:	int con_font_op(struct vc_data *, struct console_font_op *);
4544:	int con_get_cmap(unsigned char *);
3986:	int con_is_bound(const struct consw *);
4009:	bool con_is_visible(const struct vc_data *);
4515:	int con_set_cmap(unsigned char *);
4344:	void do_blank_screen(int);
4260:	int do_take_over_console(const struct consw *, int, int, int);
3732:	int do_unbind_con_driver(const struct consw *, int, int, int);
4405:	void do_unblank_screen(int);
4183:	int do_unregister_con_driver(const struct consw *);
4758:	void getconsxy(const struct vc_data *, unsigned char *);
4284:	void give_up_console(const struct consw *);
756:	void invert_screen(struct vc_data *, int, int, bool);
1865:	void mouse_report(struct tty_struct *, int, int, int);
1876:	int mouse_reporting(void);
4470:	void poke_blanked_console(void);
4765:	void putconsxy(struct vc_data *, unsigned char * const);
984:	void redraw_screen(struct vc_data *, int);
249:	int register_vt_notifier(struct notifier_block *);
4563:	void reset_palette(struct vc_data *);
310:	void schedule_console_callback(void);
4730:	u16 screen_glyph(const struct vc_data *, int);
4741:	u32 screen_glyph_unicode(const struct vc_data *, int);
4752:	unsigned short *screen_pos(const struct vc_data *, int, bool);
1489:	void scrollback(struct vc_data *);
1494:	void scrollfront(struct vc_data *, int);
3013:	int set_console(int);
3184:	int tioclinux(struct tty_struct *, unsigned long);
255:	int unregister_vt_notifier(struct notifier_block *);
688:	void update_region(struct vc_data *, unsigned long, int);
1108:	int vc_allocate(unsigned int);
1048:	int vc_cons_allocated(unsigned int);
1388:	struct vc_data *vc_deallocate(unsigned int);
1360:	int vc_resize(struct vc_data *, unsigned int, unsigned int);
4793:	void vc_scrolldelta_helper(struct vc_data *, int, unsigned int, void *, unsigned int);
501:	int vc_uniscr_check(struct vc_data *);
547:	void vc_uniscr_copy_line(const struct vc_data *, void *, bool, unsigned int, unsigned int, unsigned int);
4772:	u16 vcs_scr_readw(const struct vc_data *, const u16 *);
4788:	void vcs_scr_updated(struct vc_data *);
4779:	void vcs_scr_writew(struct vc_data *, u16, u16 *);
3062:	int vt_kmsg_redirect(int);
3587:	int vty_init(const struct file_operations *);
869:	static void add_softcursor(struct vc_data *);
4464:	static void blank_screen_t(struct timer_list *);
3436:	static void con_cleanup(struct tty_struct *);
3422:	static void con_close(struct tty_struct *, struct file *);
4220:	static void con_driver_unregister_callback(struct work_struct *);
3357:	static void con_flush_chars(struct tty_struct *);
3482:	static int con_init(void);
3375:	static int con_install(struct tty_driver *, struct tty_struct *);
3415:	static int con_open(struct tty_struct *, struct file *);
3301:	static int con_put_char(struct tty_struct *, unsigned char);
620:	static void con_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
3427:	static void con_shutdown(struct tty_struct *);
3346:	static void con_start(struct tty_struct *);
3332:	static void con_stop(struct tty_struct *);
3318:	static void con_throttle(struct tty_struct *);
3322:	static void con_unthrottle(struct tty_struct *);
3291:	static int con_write(struct tty_struct *, const unsigned char *, int);
3306:	static unsigned int con_write_room(struct tty_struct *);
2978:	static void console_callback(struct work_struct *);
1530:	static void cr(struct vc_data *);
1552:	static void csi_J(struct vc_data *, int);
1589:	static void csi_K(struct vc_data *, int);
2028:	static void csi_L(struct vc_data *, unsigned int);
2049:	static void csi_M(struct vc_data *, unsigned int);
2039:	static void csi_P(struct vc_data *, unsigned int);
1619:	static void csi_X(struct vc_data *, unsigned int);
1731:	static void csi_m(struct vc_data *);
1839:	static void cursor_report(struct vc_data *, struct tty_struct *);
3629:	static int do_bind_con_driver(const struct consw *, int, int, int);
2894:	static int do_con_write(struct tty_struct *, const unsigned char *, int);
644:	static void do_update_region(struct vc_data *, unsigned long, int);
1484:	static void gotoxay(struct vc_data *, int, int);
1452:	static void gotoxy(struct vc_data *, int, int);
902:	static void hide_cursor(struct vc_data *);
840:	static void insert_char(struct vc_data *, unsigned int);
1501:	static void lf(struct vc_data *);
2082:	static void reset_terminal(struct vc_data *, int);
1857:	static void respond_ID(struct tty_struct *);
2066:	static void restore_cur(struct vc_data *);
1687:	static void rgb_background(struct vc_data *, const struct rgb *);
1665:	static void rgb_foreground(struct vc_data *, const struct rgb *);
1516:	static void ri(struct vc_data *);
1882:	static void set_mode(struct vc_data *, int);
925:	static void set_origin(struct vc_data *);
4502:	static void set_palette(struct vc_data *);
4333:	static int set_vesa_blanking(char *);
1953:	static void setterm_command(struct vc_data *);
3931:	static ssize_t show_bind(struct device *, struct device_attribute *, char *);
3944:	static ssize_t show_name(struct device *, struct device_attribute *, char *);
3573:	static ssize_t show_tty_active(struct device *, struct device_attribute *, char *);
1850:	static void status_report(struct tty_struct *);
3913:	static ssize_t store_bind(struct device *, struct device_attribute *, const char *, size_t);
2579:	static int ucs_cmp(const void *, const void *);
4454:	static void unblank_screen(void);
745:	static void update_attr(struct vc_data *);
1195:	static int vc_do_resize(struct tty_struct *, struct vc_data *, unsigned int, unsigned int);
3450:	static void vc_init(struct vc_data *, unsigned int, unsigned int, int);
1089:	static void vc_port_destruct(struct tty_port *);
2130:	static void vc_setGx(struct vc_data *, unsigned int, int);
1703:	static int vc_t416_color(struct vc_data *, int, void (*)(struct vc_data *, const struct rgb *));
3153:	static struct tty_driver *vt_console_device(struct console *, int *);
3078:	static void vt_console_print(struct console *, const char *, unsigned int);
1377:	static int vt_resize(struct tty_struct *, struct winsize *);
4291:	static int vtconsole_class_init(void);

File drivers/tty/vt/vt_ioctl.c:
1203:	void change_console(struct vc_data *);
1317:	void pm_set_vt_switch(int);
963:	void reset_vc(struct vc_data *);
978:	void vc_SAK(struct work_struct *);
111:	void vt_event_post(unsigned int, unsigned int, unsigned int);
736:	int vt_ioctl(struct tty_struct *, unsigned int, unsigned long);
1274:	int vt_move_to_console(unsigned int, int);
217:	int vt_waitactive(int);
1129:	static void complete_change_console(struct vc_data *);
630:	static int vt_disallocate(unsigned int);
649:	static void vt_disallocate_all(void);
189:	static int vt_event_wait_ioctl(struct vt_event *);
252:	static int vt_kdsetmode(struct vc_data *, unsigned long);
555:	static int vt_reldisp(struct vc_data *, unsigned int);
668:	static int vt_resizex(struct vc_data *, struct vt_consize *);
591:	static int vt_setactivate(struct vt_setactivate *);

File drivers/usb/cdns3/cdns3-plat.c:
331:	static void cdns3_driver_exit(void);
331:	static int cdns3_driver_init(void);
52:	static int cdns3_plat_probe(struct platform_device *);
178:	static int cdns3_plat_remove(struct platform_device *);
40:	static void set_phy_power_off(struct cdns *);
25:	static int set_phy_power_on(struct cdns *);

File drivers/usb/cdns3/cdns3-ti.c:
231:	static void cdns_ti_driver_exit(void);
231:	static int cdns_ti_driver_init(void);
87:	static int cdns_ti_probe(struct platform_device *);
202:	static int cdns_ti_remove(struct platform_device *);
193:	static int cdns_ti_remove_core(struct device *, void *);

File drivers/usb/cdns3/core.c:
297:	int cdns_hw_role_switch(struct cdns *);
427:	int cdns_init(struct cdns *);
497:	int cdns_remove(struct cdns *);
262:	static int cdns_idle_role_start(struct cdns *);
267:	static void cdns_idle_role_stop(struct cdns *);
341:	static enum usb_role cdns_role_get(struct usb_role_switch *);
357:	static int cdns_role_set(struct usb_role_switch *, enum usb_role);
28:	static int cdns_role_start(struct cdns *, enum usb_role);
405:	static irqreturn_t cdns_wakeup_irq(int, void *);

File drivers/usb/cdns3/drd.c:
106:	void cdns_clear_vbus(struct cdns *);
475:	int cdns_drd_exit(struct cdns *);
260:	void cdns_drd_gadget_off(struct cdns *);
228:	int cdns_drd_gadget_on(struct cdns *);
207:	void cdns_drd_host_off(struct cdns *);
178:	int cdns_drd_host_on(struct cdns *);
384:	int cdns_drd_init(struct cdns *);
309:	int cdns_drd_update_mode(struct cdns *);
86:	int cdns_get_id(struct cdns *);
96:	int cdns_get_vbus(struct cdns *);
142:	bool cdns_is_device(struct cdns *);
132:	bool cdns_is_host(struct cdns *);
484:	bool cdns_power_is_lost(struct cdns *);
119:	void cdns_set_vbus(struct cdns *);
349:	static irqreturn_t cdns_drd_irq(int, void *);
332:	static irqreturn_t cdns_drd_thread_irq(int, void *);

File drivers/usb/cdns3/gadget-export.h:
30:	static int cdns3_gadget_init(struct cdns *);

File drivers/usb/cdns3/host.c:
127:	int cdns_host_init(struct cdns *);
60:	static int __cdns_host_init(struct cdns *);
119:	static void cdns_host_exit(struct cdns *);
27:	static void xhci_cdns3_plat_start(struct usb_hcd *);
48:	static int xhci_cdns3_resume_quirk(struct usb_hcd *);

File drivers/usb/common/common.c:
276:	enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *, int);
328:	bool of_usb_host_tpl_support(struct device_node *);
342:	int of_usb_update_otg_caps(struct device_node *, struct usb_otg_caps *);
231:	unsigned int usb_decode_interval(const struct usb_endpoint_descriptor *, enum usb_device_speed);
34:	const char *usb_ep_type_string(int);
190:	enum usb_dr_mode usb_get_dr_mode(struct device *);
107:	enum usb_device_speed usb_get_maximum_speed(struct device *);
134:	enum usb_ssp_rate usb_get_maximum_ssp_rate(struct device *);
210:	enum usb_dr_mode usb_get_role_switch_default_mode(struct device *);
400:	struct device *usb_of_get_companion_dev(struct device *);
43:	const char *usb_otg_state_string(enum usb_otg_state);
91:	const char *usb_speed_string(enum usb_device_speed);
154:	const char *usb_state_string(enum usb_device_state);
426:	static void usb_common_exit(void);
419:	static int usb_common_init(void);

File drivers/usb/core/buffer.c:
115:	void *hcd_buffer_alloc(struct usb_bus *, size_t, gfp_t, dma_addr_t *);
65:	int hcd_buffer_create(struct usb_hcd *);
97:	void hcd_buffer_destroy(struct usb_hcd *);
144:	void hcd_buffer_free(struct usb_bus *, size_t, void *, dma_addr_t);
33:	void usb_init_pool_max(void);

File drivers/usb/core/config.c:
825:	void usb_destroy_configuration(struct usb_device *);
978:	int usb_get_bos_descriptor(struct usb_device *);
861:	int usb_get_configuration(struct usb_device *);
959:	void usb_release_bos_descriptor(struct usb_device *);
484:	void usb_release_interface_cache(struct kref *);

File drivers/usb/core/devices.c:
390:	static ssize_t usb_device_dump(char **, size_t *, loff_t *, loff_t *, struct usb_device *, struct usb_bus *, int, int, int);
510:	static ssize_t usb_device_read(struct file *, char *, size_t, loff_t *);

File drivers/usb/core/devio.c:
2906:	void usb_devio_cleanup(void);
2880:	int usb_devio_init(void);
748:	void usbfs_notify_resume(struct usb_device *);
743:	void usbfs_notify_suspend(struct usb_device *);
613:	static void async_completed(struct urb *);
869:	static int check_ctrlrecip(struct usb_dev_state *, unsigned int, unsigned int, unsigned int);
770:	static int claimintf(struct usb_dev_state *, unsigned int);
186:	static void dec_usb_memory_use_count(struct usb_memory *, int *);
653:	static void destroy_async(struct usb_dev_state *, struct list_head *);
707:	static void driver_disconnect(struct usb_interface *);
701:	static int driver_probe(struct usb_interface *, const struct usb_device_id *);
737:	static int driver_resume(struct usb_interface *);
732:	static int driver_suspend(struct usb_interface *, pm_message_t);
406:	static void free_async(struct async *);
937:	static int parse_usbdevfs_streams(struct usb_dev_state *, struct usbdevfs_streams *, unsigned int *, unsigned int *, struct usb_host_endpoint ***, struct usb_interface **);
2031:	static int processcompl(struct async *, void **);
524:	static void snoop_urb_data(struct urb *, unsigned int);
2802:	static long usbdev_ioctl(struct file *, unsigned int, unsigned long);
229:	static int usbdev_mmap(struct file *, struct vm_area_struct *);
2861:	static int usbdev_notify(struct notifier_block *, unsigned long, void *);
1023:	static int usbdev_open(struct inode *, struct file *);
2813:	static __poll_t usbdev_poll(struct file *, struct poll_table_struct *);
301:	static ssize_t usbdev_read(struct file *, char *, size_t, loff_t *);
1080:	static int usbdev_release(struct inode *, struct file *);
217:	static void usbdev_vm_close(struct vm_area_struct *);
207:	static void usbdev_vm_open(struct vm_area_struct *);
1118:	static void usbfs_blocking_completion(struct urb *);

File drivers/usb/core/driver.c:
1096:	void usb_deregister(struct usb_driver *);
1018:	void usb_deregister_device_driver(struct usb_device_driver *);
824:	const struct usb_device_id *usb_device_match_id(struct usb_device *, const struct usb_device_id *);
839:	bool usb_driver_applicable(struct usb_device *, struct usb_device_driver *);
535:	int usb_driver_claim_interface(struct usb_driver *, struct usb_interface *, void *);
609:	void usb_driver_release_interface(struct usb_driver *, struct usb_interface *);
1113:	void usb_forced_unbind_intf(struct usb_interface *);
638:	int usb_match_device(struct usb_device *, const struct usb_device_id *);
802:	const struct usb_device_id *usb_match_id(struct usb_interface *, const struct usb_device_id *);
709:	int usb_match_one_id(struct usb_interface *, const struct usb_device_id *);
674:	int usb_match_one_id_intf(struct usb_device *, struct usb_host_interface *, const struct usb_device_id *);
975:	int usb_register_device_driver(struct usb_device_driver *, struct module *);
1043:	int usb_register_driver(struct usb_driver *, struct module *, const char *);
114:	ssize_t usb_show_dynids(struct usb_dynids *, char *);
42:	ssize_t usb_store_new_id(struct usb_dynids *, const struct usb_device_id *, struct device_driver *, const char *, size_t);
1200:	void usb_unbind_and_rebind_marked_interfaces(struct usb_device *);
943:	static int __usb_bus_reprobe_drivers(struct device *, void *);
131:	static ssize_t new_id_show(struct device_driver *, char *);
138:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
178:	static ssize_t remove_id_show(struct device_driver *, char *);
150:	static ssize_t remove_id_store(struct device_driver *, const char *, size_t);
855:	static int usb_device_match(struct device *, struct device_driver *);
249:	static int usb_probe_device(struct device *);
318:	static int usb_probe_interface(struct device *);
902:	static int usb_uevent(struct device *, struct kobj_uevent_env *);
303:	static int usb_unbind_device(struct device *);
428:	static int usb_unbind_interface(struct device *);

File drivers/usb/core/endpoint.c:
149:	int usb_create_ep_devs(struct device *, struct usb_host_endpoint *, struct usb_device *);
183:	void usb_remove_ep_devs(struct usb_host_endpoint *);
47:	static ssize_t bEndpointAddress_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t bInterval_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t bLength_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t bmAttributes_show(struct device *, struct device_attribute *, char *);
102:	static ssize_t direction_show(struct device *, struct device_attribute *, char *);
137:	static void ep_device_release(struct device *);
83:	static ssize_t interval_show(struct device *, struct device_attribute *, char *);
59:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t wMaxPacketSize_show(struct device *, struct device_attribute *, char *);

File drivers/usb/core/file.c:
230:	void usb_deregister_dev(struct usb_interface *, struct usb_class_driver *);
132:	void usb_major_cleanup(void);
120:	int usb_major_init(void);
156:	int usb_register_dev(struct usb_interface *, struct usb_class_driver *);
65:	static char *usb_devnode(const struct device *, umode_t *);
34:	static int usb_open(struct inode *, struct file *);

File drivers/usb/core/generic.c:
56:	int usb_choose_configuration(struct usb_device *);
253:	void usb_generic_driver_disconnect(struct usb_device *);
226:	int usb_generic_driver_probe(struct usb_device *);
198:	static int __check_for_non_generic_match(struct device_driver *, void *);
211:	static bool usb_generic_driver_match(struct usb_device *);

File drivers/usb/core/hcd.c:
2567:	struct usb_hcd *__usb_create_hcd(const struct hc_driver *, struct device *, struct device *, const char *, struct usb_hcd *);
2811:	int usb_add_hcd(struct usb_hcd *, unsigned int, unsigned long);
2036:	int usb_alloc_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
1094:	long usb_calc_bus_time(int, int, int, int);
2668:	struct usb_hcd *usb_create_hcd(const struct hc_driver *, struct device *, const char *);
2645:	struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *, struct device *, const char *, struct usb_hcd *);
2086:	int usb_free_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, gfp_t);
2702:	struct usb_hcd *usb_get_hcd(struct usb_hcd *);
2515:	void usb_hc_died(struct usb_hcd *);
1862:	int usb_hcd_alloc_bandwidth(struct usb_device *, struct usb_host_config *, struct usb_host_interface *, struct usb_host_interface *);
1211:	int usb_hcd_check_unlink_urb(struct usb_hcd *, struct urb *, int);
1984:	void usb_hcd_disable_endpoint(struct usb_device *, struct usb_host_endpoint *);
1068:	void usb_hcd_end_port_resume(struct usb_bus *, int);
2725:	int usb_hcd_find_raw_port_number(struct usb_hcd *, int);
1783:	void usb_hcd_flush_endpoint(struct usb_device *, struct usb_host_endpoint *);
2129:	int usb_hcd_get_frame_number(struct usb_device *);
1744:	void usb_hcd_giveback_urb(struct usb_hcd *, struct urb *, int);
2474:	irqreturn_t usb_hcd_irq(int, void *);
2717:	int usb_hcd_is_primary_hcd(struct usb_hcd *);
1153:	int usb_hcd_link_urb_to_ep(struct usb_hcd *, struct urb *);
1407:	int usb_hcd_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
3100:	void usb_hcd_platform_shutdown(struct platform_device *);
752:	void usb_hcd_poll_rh_status(struct usb_hcd *);
2003:	void usb_hcd_reset_endpoint(struct usb_device *, struct usb_host_endpoint *);
3112:	int usb_hcd_setup_local_mem(struct usb_hcd *, phys_addr_t, dma_addr_t, size_t);
1046:	void usb_hcd_start_port_resume(struct usb_bus *, int);
1529:	int usb_hcd_submit_urb(struct urb *, gfp_t);
2120:	void usb_hcd_synchronize_unlinks(struct usb_device *);
1611:	int usb_hcd_unlink_urb(struct urb *, int);
1244:	void usb_hcd_unlink_urb_from_ep(struct usb_hcd *, struct urb *);
1360:	void usb_hcd_unmap_urb_for_dma(struct usb_hcd *, struct urb *);
1332:	void usb_hcd_unmap_urb_setup_for_dma(struct usb_hcd *, struct urb *);
2710:	void usb_put_hcd(struct usb_hcd *);
3032:	void usb_remove_hcd(struct usb_hcd *);
1644:	static void __usb_hcd_giveback_urb(struct urb *);
2493:	static void hcd_died_work(struct work_struct *);
982:	static int register_root_hub(struct usb_hcd *);
803:	static void rh_timer_func(struct timer_list *);
1589:	static int unlink1(struct usb_hcd *, struct urb *, int);
1688:	static void usb_giveback_urb_bh(struct tasklet_struct *);
2733:	static int usb_hcd_request_irqs(struct usb_hcd *, unsigned int, unsigned long);
2787:	static void usb_stop_hcd(struct usb_hcd *);

File drivers/usb/core/hub.c:
4582:	int hub_port_debounce(struct usb_hub *, int, bool);
2644:	int usb_authorize_device(struct usb_device *);
431:	int usb_clear_port_feature(struct usb_device *, int, int);
2629:	int usb_deauthorize_device(struct usb_device *);
2011:	bool usb_device_is_owned(struct usb_device *);
148:	int usb_device_supports_lpm(struct usb_device *);
4485:	int usb_disable_lpm(struct usb_device *);
4503:	int usb_disable_ltm(struct usb_device *);
2208:	void usb_disconnect(struct usb_device **);
4491:	void usb_enable_lpm(struct usb_device *);
4509:	void usb_enable_ltm(struct usb_device *);
4625:	void usb_ep0_reinit(struct usb_device *);
6285:	void usb_hub_adjust_deviceremovable(struct usb_device *, struct usb_hub_descriptor *);
1966:	int usb_hub_claim_port(struct usb_device *, unsigned int, struct usb_dev_state *);
5918:	void usb_hub_cleanup(void);
869:	int usb_hub_clear_tt_buffer(struct urb *);
6274:	struct usb_device *usb_hub_find_child(struct usb_device *, int);
5893:	int usb_hub_init(void);
620:	int usb_hub_port_status(struct usb_hub *, int, u16 *, u16 *);
1998:	void usb_hub_release_all_ports(struct usb_device *, struct usb_dev_state *);
1982:	int usb_hub_release_port(struct usb_device *, unsigned int, struct usb_dev_state *);
835:	int usb_hub_set_port_power(struct usb_device *, struct usb_hub *, int, bool);
141:	struct usb_hub *usb_hub_to_struct_hub(struct usb_device *);
684:	void usb_kick_hub_wq(struct usb_device *);
2523:	int usb_new_device(struct usb_device *);
4560:	int usb_port_disable(struct usb_device *);
3130:	int usb_port_is_power_on(struct usb_hub *, unsigned int);
6254:	void usb_queue_reset_device(struct usb_interface *);
999:	int usb_remove_device(struct usb_device *);
6131:	int usb_reset_device(struct usb_device *);
2056:	void usb_set_device_state(struct usb_device *, enum usb_device_state);
4494:	int usb_unlocked_disable_lpm(struct usb_device *);
4500:	void usb_unlocked_enable_lpm(struct usb_device *);
700:	void usb_wakeup_notification(struct usb_device *, unsigned int);
5146:	static int descriptors_changed(struct usb_device *, struct usb_device_descriptor *, struct usb_host_bos *);
2701:	static enum usb_ssp_rate get_port_ssp_rate(struct usb_device *, u32);
1028:	static void hub_activate(struct usb_hub *, enum hub_activation_type);
1715:	static void hub_disconnect(struct usb_interface *);
5715:	static void hub_event(struct work_struct *);
591:	static int hub_ext_port_status(struct usb_hub *, int, int, u16 *, u16 *, u32 *);
936:	static int hub_hub_status(struct usb_hub *, u16 *, u16 *);
1301:	static void hub_init_func2(struct work_struct *);
1308:	static void hub_init_func3(struct work_struct *);
1910:	static int hub_ioctl(struct usb_interface *, unsigned int, void *);
722:	static void hub_irq(struct urb *);
4530:	static int hub_port_disable(struct usb_hub *, int, int);
4718:	static int hub_port_init(struct usb_hub *, struct usb_device *, int, int);
2946:	static int hub_port_reset(struct usb_hub *, int, struct usb_device *, unsigned int, bool);
1367:	static int hub_post_reset(struct usb_interface *);
5099:	static unsigned int hub_power_remaining(struct usb_hub *);
1356:	static int hub_pre_reset(struct usb_interface *);
1783:	static int hub_probe(struct usb_interface *, const struct usb_device_id *);
1319:	static void hub_quiesce(struct usb_hub *, enum hub_quiescing_type);
627:	static void hub_resubmit_irq_urb(struct usb_hub *);
649:	static void hub_retry_irq_urb(struct timer_list *);
786:	static void hub_tt_work(struct work_struct *);
657:	static void kick_hub_wq(struct usb_hub *);
481:	static void led_work(struct work_struct *);
2021:	static void recursively_mark_NOTATTACHED(struct usb_device *);
318:	static void usb_set_lpm_parameters(struct usb_device *);

File drivers/usb/core/message.c:
2285:	int cdc_parse_cdc_header(struct usb_cdc_parsed_header *, struct usb_interface *, u8 *, int);
1811:	void usb_authorize_interface(struct usb_interface *);
363:	int usb_bulk_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1018:	char *usb_cache_string(struct usb_device *, int);
1209:	int usb_clear_halt(struct usb_device *, int);
136:	int usb_control_msg(struct usb_device *, unsigned int, __u8, __u8, __u16, __u16, void *, __u16, int);
263:	int usb_control_msg_recv(struct usb_device *, __u8, __u8, __u8, __u16, __u16, void *, __u16, int, gfp_t);
198:	int usb_control_msg_send(struct usb_device *, __u8, __u8, __u8, __u16, __u16, const void *, __u16, int, gfp_t);
1789:	void usb_deauthorize_interface(struct usb_interface *);
1394:	void usb_disable_device(struct usb_device *, int);
1284:	void usb_disable_endpoint(struct usb_device *, unsigned int, bool);
1343:	void usb_disable_interface(struct usb_device *, struct usb_interface *, bool);
2249:	int usb_driver_set_configuration(struct usb_device *, int);
1455:	void usb_enable_endpoint(struct usb_device *, struct usb_host_endpoint *, bool);
1479:	void usb_enable_interface(struct usb_device *, struct usb_interface *, bool);
780:	int usb_get_descriptor(struct usb_device *, unsigned char, unsigned char, void *, int);
1061:	int usb_get_device_descriptor(struct usb_device *, unsigned int);
1128:	int usb_get_status(struct usb_device *, int, int, int, void *);
324:	int usb_interrupt_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1693:	int usb_reset_configuration(struct usb_device *);
1319:	void usb_reset_endpoint(struct usb_device *, unsigned int);
1958:	int usb_set_configuration(struct usb_device *, int);
1528:	int usb_set_interface(struct usb_device *, int, int);
1086:	int usb_set_isoch_delay(struct usb_device *);
720:	void usb_sg_cancel(struct usb_sg_request *);
501:	int usb_sg_init(struct usb_sg_request *, struct usb_device *, unsigned int, unsigned int, struct scatterlist *, int, size_t, gfp_t);
650:	void usb_sg_wait(struct usb_sg_request *);
967:	int usb_string(struct usb_device *, int, char *, size_t);
1896:	static void __usb_queue_reset_device(struct work_struct *);
2196:	static void driver_set_config_work(struct work_struct *);
404:	static void sg_complete(struct urb *);
34:	static void usb_api_blocking_completion(struct urb *);
1361:	static void usb_disable_device_endpoints(struct usb_device *, int);
832:	static int usb_get_string(struct usb_device *, unsigned short, unsigned char, void *, int);
1822:	static int usb_if_uevent(struct device *, struct kobj_uevent_env *);
1772:	static void usb_release_interface(struct device *);
49:	static int usb_start_wait_urb(struct urb *, int, int *);
872:	static int usb_string_sub(struct usb_device *, unsigned int, unsigned int, unsigned char *);

File drivers/usb/core/notify.c:
60:	void usb_notify_add_bus(struct usb_bus *);
49:	void usb_notify_add_device(struct usb_device *);
65:	void usb_notify_remove_bus(struct usb_bus *);
54:	void usb_notify_remove_device(struct usb_device *);
29:	void usb_register_notify(struct notifier_block *);
42:	void usb_unregister_notify(struct notifier_block *);

File drivers/usb/core/of.c:
25:	struct device_node *usb_of_get_device_node(struct usb_device *, int);
92:	struct device_node *usb_of_get_interface_node(struct usb_device *, u8, u8);
57:	bool usb_of_has_combined_node(struct usb_device *);

File drivers/usb/core/phy.c:
49:	struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *);
154:	int usb_phy_roothub_calibrate(struct usb_phy_roothub *);
105:	int usb_phy_roothub_exit(struct usb_phy_roothub *);
78:	int usb_phy_roothub_init(struct usb_phy_roothub *);
202:	void usb_phy_roothub_power_off(struct usb_phy_roothub *);
175:	int usb_phy_roothub_power_on(struct usb_phy_roothub *);
227:	int usb_phy_roothub_resume(struct device *, struct usb_phy_roothub *);
126:	int usb_phy_roothub_set_mode(struct usb_phy_roothub *, enum phy_mode);
214:	int usb_phy_roothub_suspend(struct device *, struct usb_phy_roothub *);

File drivers/usb/core/port.c:
669:	int usb_hub_create_port_device(struct usb_hub *, int);
759:	void usb_hub_remove_port_device(struct usb_hub *, int);
138:	static ssize_t connect_type_show(struct device *, struct device_attribute *, char *);
643:	static int connector_bind(struct device *, struct device *, void *);
658:	static void connector_unbind(struct device *, struct device *, void *);
47:	static ssize_t disable_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t disable_store(struct device *, struct device_attribute *, const char *, size_t);
21:	static ssize_t early_stop_show(struct device *, struct device_attribute *, char *);
29:	static ssize_t early_stop_store(struct device *, struct device_attribute *, const char *, size_t);
502:	static void link_peers_report(struct usb_port *, struct usb_port *);
129:	static ssize_t location_show(struct device *, struct device_attribute *, char *);
557:	static int match_location(struct usb_device *, void *);
163:	static ssize_t over_current_count_show(struct device *, struct device_attribute *, char *);
172:	static ssize_t quirks_show(struct device *, struct device_attribute *, char *);
180:	static ssize_t quirks_store(struct device *, struct device_attribute *, const char *, size_t);
194:	static ssize_t usb3_lpm_permit_show(struct device *, struct device_attribute *, char *);
215:	static ssize_t usb3_lpm_permit_store(struct device *, struct device_attribute *, const char *, size_t);
294:	static void usb_port_device_release(struct device *);
406:	static void usb_port_shutdown(struct device *);

File drivers/usb/core/quirks.c:
709:	void usb_detect_interface_quirks(struct usb_device *);
681:	void usb_detect_quirks(struct usb_device *);
579:	bool usb_endpoint_is_ignored(struct usb_device *, struct usb_host_interface *, struct usb_endpoint_descriptor *);
722:	void usb_release_quirk_list(void);
28:	static int quirks_param_set(const char *, const struct kernel_param *);
639:	static u32 usb_detect_static_quirks(struct usb_device *, const struct usb_device_id *);

File drivers/usb/core/sysfs.c:
1021:	int usb_create_sysfs_dev_files(struct usb_device *);
1241:	void usb_create_sysfs_intf_files(struct usb_interface *);
1050:	void usb_remove_sysfs_dev_files(struct usb_device *);
1258:	void usb_remove_sysfs_intf_files(struct usb_interface *);
914:	static ssize_t authorized_default_show(struct device *, struct device_attribute *, char *);
925:	static ssize_t authorized_default_store(struct device *, struct device_attribute *, const char *, size_t);
727:	static ssize_t authorized_show(struct device *, struct device_attribute *, char *);
739:	static ssize_t authorized_store(struct device *, struct device_attribute *, const char *, size_t);
265:	static ssize_t avoid_reset_quirk_show(struct device *, struct device_attribute *, char *);
274:	static ssize_t avoid_reset_quirk_store(struct device *, struct device_attribute *, const char *, size_t);
1095:	static ssize_t bAlternateSetting_show(struct device *, struct device_attribute *, char *);
91:	static ssize_t bConfigurationValue_show(struct device *, struct device_attribute *, char *);
93:	static ssize_t bConfigurationValue_store(struct device *, struct device_attribute *, const char *, size_t);
719:	static ssize_t bDeviceClass_show(struct device *, struct device_attribute *, char *);
721:	static ssize_t bDeviceProtocol_show(struct device *, struct device_attribute *, char *);
720:	static ssize_t bDeviceSubClass_show(struct device *, struct device_attribute *, char *);
1097:	static ssize_t bInterfaceClass_show(struct device *, struct device_attribute *, char *);
1094:	static ssize_t bInterfaceNumber_show(struct device *, struct device_attribute *, char *);
1099:	static ssize_t bInterfaceProtocol_show(struct device *, struct device_attribute *, char *);
1098:	static ssize_t bInterfaceSubClass_show(struct device *, struct device_attribute *, char *);
723:	static ssize_t bMaxPacketSize0_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t bMaxPower_show(struct device *, struct device_attribute *, char *);
722:	static ssize_t bNumConfigurations_show(struct device *, struct device_attribute *, char *);
1096:	static ssize_t bNumEndpoints_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t bNumInterfaces_show(struct device *, struct device_attribute *, char *);
705:	static ssize_t bcdDevice_show(struct device *, struct device_attribute *, char *);
50:	static ssize_t bmAttributes_show(struct device *, struct device_attribute *, char *);
203:	static ssize_t busnum_show(struct device *, struct device_attribute *, char *);
71:	static ssize_t configuration_show(struct device *, struct device_attribute *, char *);
829:	static umode_t dev_string_attrs_are_visible(struct kobject *, struct attribute *, int);
213:	static ssize_t devnum_show(struct device *, struct device_attribute *, char *);
223:	static ssize_t devpath_show(struct device *, struct device_attribute *, char *);
113:	static ssize_t devspec_show(struct device *, struct device_attribute *, char *);
1075:	static ssize_t iad_bFirstInterface_show(struct device *, struct device_attribute *, char *);
1077:	static ssize_t iad_bFunctionClass_show(struct device *, struct device_attribute *, char *);
1079:	static ssize_t iad_bFunctionProtocol_show(struct device *, struct device_attribute *, char *);
1078:	static ssize_t iad_bFunctionSubClass_show(struct device *, struct device_attribute *, char *);
1076:	static ssize_t iad_bInterfaceCount_show(struct device *, struct device_attribute *, char *);
704:	static ssize_t idProduct_show(struct device *, struct device_attribute *, char *);
703:	static ssize_t idVendor_show(struct device *, struct device_attribute *, char *);
955:	static ssize_t interface_authorized_default_show(struct device *, struct device_attribute *, char *);
971:	static ssize_t interface_authorized_default_store(struct device *, struct device_attribute *, const char *, size_t);
1163:	static ssize_t interface_authorized_show(struct device *, struct device_attribute *, char *);
1174:	static ssize_t interface_authorized_store(struct device *, struct device_attribute *, const char *, size_t);
1101:	static ssize_t interface_show(struct device *, struct device_attribute *, char *);
1219:	static umode_t intf_assoc_attrs_are_visible(struct kobject *, struct attribute *, int);
305:	static ssize_t ltm_capable_show(struct device *, struct device_attribute *, char *);
142:	static ssize_t manufacturer_show(struct device *, struct device_attribute *, char *);
245:	static ssize_t maxchild_show(struct device *, struct device_attribute *, char *);
1115:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
141:	static ssize_t product_show(struct device *, struct device_attribute *, char *);
255:	static ssize_t quirks_show(struct device *, struct device_attribute *, char *);
862:	static ssize_t read_descriptors(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
759:	static ssize_t remove_store(struct device *, struct device_attribute *, const char *, size_t);
183:	static ssize_t rx_lanes_show(struct device *, struct device_attribute *, char *);
143:	static ssize_t serial_show(struct device *, struct device_attribute *, char *);
145:	static ssize_t speed_show(struct device *, struct device_attribute *, char *);
1142:	static ssize_t supports_autosuspend_show(struct device *, struct device_attribute *, char *);
193:	static ssize_t tx_lanes_show(struct device *, struct device_attribute *, char *);
295:	static ssize_t urbnum_show(struct device *, struct device_attribute *, char *);
233:	static ssize_t version_show(struct device *, struct device_attribute *, char *);

File drivers/usb/core/urb.c:
71:	struct urb *usb_alloc_urb(int, gfp_t);
1048:	int usb_anchor_empty(struct usb_anchor *);
953:	void usb_anchor_resume_wakeups(struct usb_anchor *);
939:	void usb_anchor_suspend_wakeups(struct usb_anchor *);
127:	void usb_anchor_urb(struct urb *, struct usb_anchor *);
803:	void usb_block_urb(struct urb *);
94:	void usb_free_urb(struct urb *);
993:	struct urb *usb_get_from_anchor(struct usb_anchor *);
111:	struct urb *usb_get_urb(struct urb *);
44:	void usb_init_urb(struct urb *);
823:	void usb_kill_anchored_urbs(struct usb_anchor *);
714:	void usb_kill_urb(struct urb *);
204:	int usb_pipe_type_check(struct usb_device *, unsigned int);
861:	void usb_poison_anchored_urbs(struct usb_anchor *);
761:	void usb_poison_urb(struct urb *);
1020:	void usb_scuttle_anchored_urbs(struct usb_anchor *);
368:	int usb_submit_urb(struct urb *, gfp_t);
165:	void usb_unanchor_urb(struct urb *);
920:	void usb_unlink_anchored_urbs(struct usb_anchor *);
675:	int usb_unlink_urb(struct urb *);
895:	void usb_unpoison_anchored_urbs(struct usb_anchor *);
782:	void usb_unpoison_urb(struct urb *);
225:	int usb_urb_ep_type_check(const struct urb *);
974:	int usb_wait_anchor_empty_timeout(struct usb_anchor *, unsigned int);
150:	static void __usb_unanchor_urb(struct urb *, struct usb_anchor *);

File drivers/usb/core/usb.c:
880:	int __usb_get_extra_descriptor(char *, unsigned int, unsigned char, void **, size_t);
932:	void *usb_alloc_coherent(struct usb_device *, size_t, gfp_t, dma_addr_t *);
574:	struct usb_device *usb_alloc_dev(struct usb_device *, struct usb_bus *, unsigned int);
307:	struct usb_host_interface *usb_altnum_to_altsetting(const struct usb_interface *, unsigned int);
58:	int usb_disabled(void);
220:	struct usb_host_interface *usb_find_alt_setting(struct usb_host_config *, unsigned int, unsigned int);
134:	int usb_find_common_endpoints(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
180:	int usb_find_common_endpoints_reverse(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
351:	struct usb_interface *usb_find_interface(struct usb_driver *, int);
393:	int usb_for_each_dev(void *, int (*)(struct usb_device *, void *));
952:	void usb_free_coherent(struct usb_device *, size_t, void *, dma_addr_t);
868:	int usb_get_current_frame_number(struct usb_device *);
698:	struct usb_device *usb_get_dev(struct usb_device *);
736:	struct usb_interface *usb_get_intf(struct usb_interface *);
271:	struct usb_interface *usb_ifnum_to_if(const struct usb_device *, unsigned int);
773:	struct device *usb_intf_get_dma_device(struct usb_interface *);
821:	int usb_lock_device_for_reset(struct usb_device *, const struct usb_interface *);
713:	void usb_put_dev(struct usb_device *);
752:	void usb_put_intf(struct usb_interface *);
373:	static int __each_dev(struct device *, void *);
326:	static int __find_interface(struct device *, const void *);
966:	static int usb_bus_notify(struct notifier_block *, unsigned long, void *);
426:	static int usb_dev_uevent(struct device *, struct kobj_uevent_env *);
508:	static char *usb_devnode(struct device *, umode_t *, kuid_t *, kgid_t *);
1062:	static void usb_exit(void);
1007:	static int usb_init(void);
408:	static void usb_release_dev(struct device *);

File drivers/usb/host/xhci-dbg.c:
22:	void xhci_dbg_trace(struct xhci_hcd *, void (*)(struct va_format *), const char *, ...);
13:	char *xhci_get_slot_state(struct xhci_hcd *, struct xhci_container_ctx *);

File drivers/usb/host/xhci-debugfs.h:
126:	static void xhci_debugfs_remove_root(void);

File drivers/usb/host/xhci-ext-caps.c:
84:	int xhci_ext_cap_init(struct xhci_hcd *);
23:	static void xhci_intel_unregister_pdev(void *);

File drivers/usb/host/xhci-hub.c:
460:	int xhci_find_slot_id_by_port(struct usb_hcd *, struct xhci_hcd *, u16);
655:	struct xhci_hub *xhci_get_rhub(struct usb_hcd *);
1196:	int xhci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
1635:	int xhci_hub_status_data(struct usb_hcd *, char *);
444:	u32 xhci_port_state_to_neutral(u32);
562:	void xhci_ring_device(struct xhci_hcd *, int);
783:	void xhci_set_link_state(struct xhci_hcd *, struct xhci_port *, u32);
827:	void xhci_test_and_clear_bit(struct xhci_hcd *, struct xhci_port *, u32);
720:	static int xhci_enter_test_mode(struct xhci_hcd *, u16, u16, unsigned long *);
764:	static int xhci_exit_test_mode(struct xhci_hcd *);
669:	static void xhci_set_port_power(struct xhci_hcd *, struct usb_hcd *, u16, bool, unsigned long *);
800:	static void xhci_set_remote_wake_mask(struct xhci_hcd *, struct xhci_port *, u16);
489:	static int xhci_stop_device(struct xhci_hcd *, int, int);

File drivers/usb/host/xhci-mem.c:
1733:	struct xhci_command *xhci_alloc_command(struct xhci_hcd *, bool, gfp_t);
1759:	struct xhci_command *xhci_alloc_command_with_ctx(struct xhci_hcd *, bool, gfp_t);
468:	struct xhci_container_ctx *xhci_alloc_container_ctx(struct xhci_hcd *, int, gfp_t);
1792:	int xhci_alloc_erst(struct xhci_hcd *, struct xhci_ring *, struct xhci_erst *, gfp_t);
603:	struct xhci_stream_info *xhci_alloc_stream_info(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, gfp_t);
820:	int xhci_alloc_tt_info(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_tt *, gfp_t);
964:	int xhci_alloc_virt_device(struct xhci_hcd *, int, struct usb_device *, gfp_t);
1534:	void xhci_clear_endpoint_bw_info(struct xhci_bw_info *);
1037:	void xhci_copy_ep0_dequeue_into_input_ctx(struct xhci_hcd *, struct usb_device *);
584:	struct xhci_ring *xhci_dma_to_transfer_ring(struct xhci_virt_ep *, u64);
1602:	void xhci_endpoint_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *, unsigned int);
1416:	int xhci_endpoint_init(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_host_endpoint *, gfp_t);
1515:	void xhci_endpoint_zero(struct xhci_hcd *, struct xhci_virt_device *, struct usb_host_endpoint *);
1783:	void xhci_free_command(struct xhci_hcd *, struct xhci_command *);
494:	void xhci_free_container_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
411:	void xhci_free_endpoint_ring(struct xhci_hcd *, struct xhci_virt_device *, unsigned int);
1822:	void xhci_free_erst(struct xhci_hcd *, struct xhci_erst *);
758:	void xhci_free_stream_info(struct xhci_hcd *, struct xhci_stream_info *);
865:	void xhci_free_virt_device(struct xhci_hcd *, int);
522:	struct xhci_ep_ctx *xhci_get_ep_ctx(struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
503:	struct xhci_input_control_ctx *xhci_get_input_control_ctx(struct xhci_container_ctx *);
512:	struct xhci_slot_ctx *xhci_get_slot_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
296:	void xhci_initialize_ring_info(struct xhci_ring *, unsigned int);
1835:	void xhci_mem_cleanup(struct xhci_hcd *);
2378:	int xhci_mem_init(struct xhci_hcd *, gfp_t);
371:	struct xhci_ring *xhci_ring_alloc(struct xhci_hcd *, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
423:	int xhci_ring_expansion(struct xhci_hcd *, struct xhci_ring *, unsigned int, gfp_t);
280:	void xhci_ring_free(struct xhci_hcd *, struct xhci_ring *);
1088:	int xhci_setup_addressable_virt_dev(struct xhci_hcd *, struct usb_device *);
745:	void xhci_setup_no_streams_ep_input_ctx(struct xhci_ep_ctx *, struct xhci_virt_ep *);
721:	void xhci_setup_streams_ep_input_ctx(struct xhci_hcd *, struct xhci_ep_ctx *, struct xhci_stream_info *);
1628:	void xhci_slot_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *);
1544:	void xhci_update_bw_info(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_input_control_ctx *, struct xhci_virt_device *);
1778:	void xhci_urb_free_priv(struct urb_priv *);
1645:	static int scratchpad_alloc(struct xhci_hcd *, gfp_t);
321:	static int xhci_alloc_segments_for_ring(struct xhci_hcd *, struct xhci_segment **, struct xhci_segment **, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
928:	static void xhci_free_virt_devices_depth_first(struct xhci_hcd *, int);
28:	static struct xhci_segment *xhci_segment_alloc(struct xhci_hcd *, unsigned int, unsigned int, gfp_t);
2090:	static void xhci_set_hc_event_deq(struct xhci_hcd *);
2272:	static int xhci_setup_port_arrays(struct xhci_hcd *, gfp_t);
1932:	static int xhci_test_trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, struct xhci_segment *, char *, int);
219:	static int xhci_update_stream_segment_mapping(struct xarray *, struct xhci_ring *, struct xhci_segment *, struct xhci_segment *, gfp_t);

File drivers/usb/host/xhci-mvebu.h:
22:	static int xhci_mvebu_a3700_init_quirk(struct usb_hcd *);
17:	static int xhci_mvebu_mbus_init_quirk(struct usb_hcd *);

File drivers/usb/host/xhci-plat.c:
536:	static void xhci_plat_exit(void);
529:	static int xhci_plat_init(void);
176:	static int xhci_plat_probe(struct platform_device *);
77:	static void xhci_plat_quirks(struct device *, struct xhci_hcd *);
390:	static int xhci_plat_remove(struct platform_device *);
90:	static int xhci_plat_setup(struct usb_hcd *);
102:	static int xhci_plat_start(struct usb_hcd *);

File drivers/usb/host/xhci-rcar.h:
24:	static int xhci_rcar_init_quirk(struct usb_hcd *);
29:	static int xhci_rcar_resume_quirk(struct usb_hcd *);
20:	static void xhci_rcar_start(struct usb_hcd *);

File drivers/usb/host/xhci-ring.c:
3281:	unsigned int count_trbs(u64, u64);
158:	void inc_deq(struct xhci_hcd *, struct xhci_ring *);
2020:	struct xhci_segment *trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, bool);
1555:	void xhci_cleanup_command_queue(struct xhci_hcd *);
1563:	void xhci_handle_command_timeout(struct work_struct *);
1220:	void xhci_hc_died(struct xhci_hcd *);
3015:	irqreturn_t xhci_irq(struct usb_hcd *);
2124:	int xhci_is_vendor_info_code(struct xhci_hcd *, unsigned int);
3103:	irqreturn_t xhci_msi_irq(int, void *);
4305:	int xhci_queue_address_device(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, enum xhci_setup_dev);
3519:	int xhci_queue_bulk_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4330:	int xhci_queue_configure_endpoint(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3680:	int xhci_queue_ctrl_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4341:	int xhci_queue_evaluate_context(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3391:	int xhci_queue_intr_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4170:	int xhci_queue_isoc_tx_prepare(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4321:	int xhci_queue_reset_device(struct xhci_hcd *, struct xhci_command *, u32);
4366:	int xhci_queue_reset_ep(struct xhci_hcd *, struct xhci_command *, int, unsigned int, enum xhci_ep_reset_type);
4297:	int xhci_queue_slot_control(struct xhci_hcd *, struct xhci_command *, u32, u32);
4354:	int xhci_queue_stop_endpoint(struct xhci_hcd *, struct xhci_command *, int, unsigned int, int);
4314:	int xhci_queue_vendor_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32);
301:	void xhci_ring_cmd_db(struct xhci_hcd *);
478:	void xhci_ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
426:	void xhci_ring_ep_doorbell(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
69:	dma_addr_t xhci_trb_virt_to_dma(struct xhci_segment *, union xhci_trb *);
529:	struct xhci_ring *xhci_triad_to_transfer_ring(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
2138:	static int finish_td(struct xhci_hcd *, struct xhci_virt_ep *, struct xhci_ring *, struct xhci_td *, u32);
1641:	static void handle_cmd_completion(struct xhci_hcd *, struct xhci_event_cmd *);
3140:	static int prepare_ring(struct xhci_hcd *, struct xhci_ring *, u32, unsigned int, gfp_t);
3232:	static int prepare_transfer(struct xhci_hcd *, struct xhci_virt_device *, unsigned int, unsigned int, unsigned int, struct urb *, unsigned int, gfp_t);
4255:	static int queue_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32, bool);
3117:	static void queue_trb(struct xhci_hcd *, struct xhci_ring *, bool, u32, u32, u32, u32);
453:	static void ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
485:	static struct xhci_virt_ep *xhci_get_virt_ep(struct xhci_hcd *, unsigned int, unsigned int);
1467:	static void xhci_handle_cmd_config_ep(struct xhci_hcd *, int, u32);
1059:	static void xhci_handle_cmd_stop_ep(struct xhci_hcd *, int, union xhci_trb *, u32);
898:	static int xhci_handle_halted_endpoint(struct xhci_hcd *, struct xhci_virt_ep *, struct xhci_td *, enum xhci_ep_reset_type);
331:	static void xhci_handle_stopped_cmd_ring(struct xhci_hcd *, struct xhci_command *);
948:	static int xhci_invalidate_cancelled_tds(struct xhci_virt_ep *);
1145:	static void xhci_kill_ring_urbs(struct xhci_hcd *, struct xhci_ring *);
801:	static int xhci_td_cleanup(struct xhci_hcd *, struct xhci_td *, struct xhci_ring *, int);
767:	static void xhci_unmap_td_bounce_buffer(struct xhci_hcd *, struct xhci_ring *, struct xhci_td *);
2979:	static void xhci_update_erst_dequeue(struct xhci_hcd *, union xhci_trb *);

File drivers/usb/host/xhci-trace.h:
38:	static void trace_xhci_dbg_address(struct va_format *);
58:	static void trace_xhci_dbg_cancel_urb(struct va_format *);
43:	static void trace_xhci_dbg_context_change(struct va_format *);
63:	static void trace_xhci_dbg_init(struct va_format *);
48:	static void trace_xhci_dbg_quirks(struct va_format *);
53:	static void trace_xhci_dbg_reset_ep(struct va_format *);
68:	static void trace_xhci_dbg_ring_expansion(struct va_format *);

File drivers/usb/host/xhci.c:
2003:	int xhci_add_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
4082:	int xhci_alloc_dev(struct usb_hcd *, struct usb_device *);
3039:	int xhci_check_bandwidth(struct usb_hcd *, struct usb_device *);
4011:	int xhci_disable_slot(struct xhci_hcd *, u32);
1920:	int xhci_drop_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
4371:	int xhci_find_raw_port_number(struct usb_hcd *, int);
3770:	void xhci_free_device_endpoint_resources(struct xhci_hcd *, struct xhci_virt_device *, bool);
5295:	int xhci_gen_setup(struct usb_hcd *, xhci_get_quirks_t);
1477:	unsigned int xhci_get_endpoint_index(struct usb_endpoint_descriptor *);
110:	int xhci_halt(struct xhci_hcd *);
68:	int xhci_handshake(void *, u32, u32, u64);
5497:	void xhci_init_driver(struct hc_driver *, const struct xhci_driver_overrides *);
1514:	unsigned int xhci_last_valid_endpoint(u32);
86:	void xhci_quiesce(struct xhci_hcd *);
170:	int xhci_reset(struct xhci_hcd *, u64);
3138:	void xhci_reset_bandwidth(struct usb_hcd *, struct usb_device *);
662:	int xhci_run(struct usb_hcd *);
793:	void xhci_shutdown(struct usb_hcd *);
133:	int xhci_start(struct xhci_hcd *);
5135:	int xhci_update_hub_device(struct usb_hcd *, struct usb_device *, struct usb_tt *, gfp_t);
2806:	void xhci_update_tt_active_eps(struct xhci_hcd *, struct xhci_virt_device *, int);
2732:	static void xhci_add_ep_to_interval_table(struct xhci_hcd *, struct xhci_bw_info *, struct xhci_interval_bw_table *, struct usb_device *, struct xhci_virt_ep *, struct xhci_tt_bw_info *);
4355:	static int xhci_address_device(struct usb_hcd *, struct usb_device *);
3511:	static int xhci_alloc_streams(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
1569:	static int xhci_check_maxpacket(struct xhci_hcd *, unsigned int, unsigned int, struct urb *, gfp_t);
5409:	static void xhci_clear_tt_buffer_complete(struct usb_hcd *, struct usb_host_endpoint *);
2919:	static int xhci_configure_endpoint(struct xhci_hcd *, struct usb_device *, struct xhci_command *, bool, bool);
5123:	static int xhci_disable_usb3_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3810:	static int xhci_discover_or_reset_device(struct usb_hcd *, struct usb_device *);
2668:	static void xhci_drop_ep_from_interval_table(struct xhci_hcd *, struct xhci_bw_info *, struct xhci_interval_bw_table *, struct usb_device *, struct xhci_virt_ep *, struct xhci_tt_bw_info *);
4360:	static int xhci_enable_device(struct usb_hcd *, struct usb_device *);
5117:	static int xhci_enable_usb3_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3175:	static void xhci_endpoint_disable(struct usb_hcd *, struct usb_host_endpoint *);
3227:	static void xhci_endpoint_reset(struct usb_hcd *, struct usb_host_endpoint *);
3972:	static void xhci_free_dev(struct usb_hcd *, struct usb_device *);
2312:	static void xhci_free_host_resources(struct xhci_hcd *, struct xhci_input_control_ctx *);
3678:	static int xhci_free_streams(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, gfp_t);
5237:	static int xhci_get_frame(struct usb_hcd *);
5562:	static void xhci_hcd_fini(void);
5529:	static int xhci_hcd_init(void);
5257:	static void xhci_hcd_init_usb3_data(struct xhci_hcd *, struct usb_hcd *);
1434:	static int xhci_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
614:	static int xhci_run_finished(struct xhci_hcd *);
5106:	static int xhci_set_usb2_hardware_lpm(struct usb_hcd *, struct usb_device *, int);
4171:	static int xhci_setup_device(struct usb_hcd *, struct usb_device *, enum xhci_setup_dev);
732:	static void xhci_stop(struct usb_hcd *);
1451:	static void xhci_unmap_urb_for_dma(struct usb_hcd *, struct urb *);
5112:	static int xhci_update_device(struct usb_hcd *, struct usb_device *);
1786:	static int xhci_urb_dequeue(struct usb_hcd *, struct urb *, int);
1643:	static int xhci_urb_enqueue(struct usb_hcd *, struct urb *, gfp_t);

File drivers/usb/host/xhci.h:
1982:	static bool xhci_hcd_is_usb3(struct usb_hcd *);

File drivers/usb/phy/of.c:
28:	enum usb_phy_interface of_usb_get_phy_mode(struct device_node *);

File drivers/usb/phy/phy-generic.c:
135:	int usb_gen_phy_init(struct usb_phy *);
157:	void usb_gen_phy_shutdown(struct usb_phy *);
206:	int usb_phy_gen_create_phy(struct device *, struct usb_phy_generic *);
33:	struct platform_device *usb_phy_generic_register(void);
40:	void usb_phy_generic_unregister(struct platform_device *);
101:	static irqreturn_t nop_gpio_vbus_thread(int, void *);
192:	static int nop_set_host(struct usb_otg *, struct usb_bus *);
173:	static int nop_set_peripheral(struct usb_otg *, struct usb_gadget *);
46:	static int nop_set_suspend(struct usb_phy *, int);
364:	static void usb_phy_generic_exit(void);
358:	static int usb_phy_generic_init(void);
286:	static int usb_phy_generic_probe(struct platform_device *);
333:	static int usb_phy_generic_remove(struct platform_device *);

File drivers/usb/phy/phy-ulpi-viewport.c:
29:	static int ulpi_viewport_read(struct usb_phy *, u32);
47:	static int ulpi_viewport_write(struct usb_phy *, u32, u32);

File drivers/usb/phy/phy-ulpi.c:
282:	struct usb_phy *devm_otg_ulpi_create(struct device *, struct usb_phy_io_ops *, unsigned int);
259:	struct usb_phy *otg_ulpi_create(struct usb_phy_io_ops *, unsigned int);
168:	static int ulpi_init(struct usb_phy *);
199:	static int ulpi_set_host(struct usb_otg *, struct usb_bus *);
225:	static int ulpi_set_vbus(struct usb_otg *, bool);

File drivers/usb/phy/phy.c:
464:	struct usb_phy *devm_usb_get_phy(struct device *, enum usb_phy_type);
535:	struct usb_phy *devm_usb_get_phy_by_node(struct device *, struct device_node *, struct notifier_block *);
594:	struct usb_phy *devm_usb_get_phy_by_phandle(struct device *, const char *, u8);
627:	void devm_usb_put_phy(struct device *, struct usb_phy *);
664:	int usb_add_phy(struct usb_phy *, enum usb_phy_type);
715:	int usb_add_phy_dev(struct usb_phy *);
493:	struct usb_phy *usb_get_phy(enum usb_phy_type);
280:	void usb_phy_get_charger_current(struct usb_phy *, unsigned int *, unsigned int *);
231:	void usb_phy_set_charger_current(struct usb_phy *, unsigned int);
317:	void usb_phy_set_charger_state(struct usb_phy *, enum usb_charger_state);
766:	void usb_phy_set_event(struct usb_phy *, unsigned long);
644:	void usb_put_phy(struct usb_phy *);
748:	void usb_remove_phy(struct usb_phy *);
177:	static void __usb_phy_get_charger_type(struct usb_phy *);
349:	static int devm_usb_phy_match(struct device *, void *, void *);
333:	static void devm_usb_phy_release(struct device *, void *);
340:	static void devm_usb_phy_release2(struct device *, void *);
364:	static int usb_add_extcon(struct usb_phy *);
208:	static int usb_phy_get_charger_type(struct notifier_block *, unsigned long, void *);
123:	static void usb_phy_notify_charger_work(struct work_struct *);
148:	static int usb_phy_uevent(struct device *, struct kobj_uevent_env *);

File drivers/usb/roles/class.c:
149:	struct usb_role_switch *fwnode_usb_role_switch_get(struct fwnode_handle *);
220:	const char *usb_role_string(enum usb_role);
187:	struct usb_role_switch *usb_role_switch_find_by_fwnode(const struct fwnode_handle *);
126:	struct usb_role_switch *usb_role_switch_get(struct device *);
388:	void *usb_role_switch_get_drvdata(struct usb_role_switch *);
70:	enum usb_role usb_role_switch_get_role(struct usb_role_switch *);
170:	void usb_role_switch_put(struct usb_role_switch *);
318:	struct usb_role_switch *usb_role_switch_register(struct device *, const struct usb_role_switch_desc *);
378:	void usb_role_switch_set_drvdata(struct usb_role_switch *, void *);
42:	int usb_role_switch_set_role(struct usb_role_switch *, enum usb_role);
366:	void usb_role_switch_unregister(struct usb_role_switch *);
230:	static ssize_t role_show(struct device *, struct device_attribute *, char *);
238:	static ssize_t role_store(struct device *, struct device_attribute *, const char *, size_t);
203:	static umode_t usb_role_switch_is_visible(struct kobject *, struct attribute *, int);
90:	static void *usb_role_switch_match(const struct fwnode_handle *, const char *, void *);
289:	static void usb_role_switch_release(struct device *);
278:	static int usb_role_switch_uevent(struct device *, struct kobj_uevent_env *);
401:	static void usb_roles_exit(void);
394:	static int usb_roles_init(void);

File drivers/video/console/dummycon.c:
89:	static int dummycon_blank(struct vc_data *, int, int);
111:	static void dummycon_clear(struct vc_data *, int, int, int, int);
113:	static void dummycon_cursor(struct vc_data *, int);
110:	static void dummycon_deinit(struct vc_data *);
100:	static void dummycon_init(struct vc_data *, int);
86:	static void dummycon_putc(struct vc_data *, int, int, int);
87:	static void dummycon_putcs(struct vc_data *, const unsigned short *, int, int, int);
115:	static bool dummycon_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
95:	static const char *dummycon_startup(void);
122:	static int dummycon_switch(struct vc_data *);

File drivers/virtio/virtio.c:
473:	bool is_virtio_device(struct device *);
418:	int register_virtio_device(struct virtio_device *);
352:	int register_virtio_driver(struct virtio_driver *);
479:	void unregister_virtio_device(struct virtio_device *);
361:	void unregister_virtio_driver(struct virtio_driver *);
163:	void virtio_add_status(struct virtio_device *, unsigned int);
106:	void virtio_check_driver_offered_feature(const struct virtio_device *, unsigned int);
136:	void virtio_config_changed(struct virtio_device *);
220:	void virtio_reset_device(struct virtio_device *);
14:	static ssize_t device_show(struct device *, struct device_attribute *, char *);
47:	static ssize_t features_show(struct device *, struct device_attribute *, char *);
38:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
30:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
22:	static ssize_t vendor_show(struct device *, struct device_attribute *, char *);
85:	static int virtio_dev_match(struct device *, struct device_driver *);
237:	static int virtio_dev_probe(struct device *);
325:	static void virtio_dev_remove(struct device *);
563:	static void virtio_exit(void);
556:	static int virtio_init(void);
98:	static int virtio_uevent(struct device *, struct kobj_uevent_env *);

File drivers/virtio/virtio_anchor.c:
5:	bool virtio_require_restricted_mem_acc(struct virtio_device *);
11:	static bool virtio_no_restricted_mem_acc(struct virtio_device *);

File drivers/virtio/virtio_ring.c:
2803:	void __virtio_unbreak_device(struct virtio_device *);
2748:	void __virtqueue_break(struct virtqueue *);
2760:	void __virtqueue_unbreak(struct virtqueue *);
2781:	void virtio_break_device(struct virtio_device *);
288:	size_t virtio_max_dma_size(struct virtio_device *);
2170:	int virtqueue_add_inbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
2193:	int virtqueue_add_inbuf_ctx(struct virtqueue *, struct scatterlist *, unsigned int, void *, void *, gfp_t);
2148:	int virtqueue_add_outbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
2114:	int virtqueue_add_sgs(struct virtqueue *, struct scatterlist **, unsigned int, unsigned int, void *, gfp_t);
2423:	void *virtqueue_detach_unused_buf(struct virtqueue *);
2308:	void virtqueue_disable_cb(struct virtqueue *);
2382:	bool virtqueue_enable_cb(struct virtqueue *);
2403:	bool virtqueue_enable_cb_delayed(struct virtqueue *);
2337:	unsigned int virtqueue_enable_cb_prepare(struct virtqueue *);
2831:	dma_addr_t virtqueue_get_avail_addr(struct virtqueue *);
2294:	void *virtqueue_get_buf(struct virtqueue *, unsigned int *);
2284:	void *virtqueue_get_buf_ctx(struct virtqueue *, unsigned int *, void **);
2818:	dma_addr_t virtqueue_get_desc_addr(struct virtqueue *);
2845:	dma_addr_t virtqueue_get_used_addr(struct virtqueue *);
2860:	const struct vring *virtqueue_get_vring(struct virtqueue *);
2736:	unsigned int virtqueue_get_vring_size(struct virtqueue *);
2769:	bool virtqueue_is_broken(struct virtqueue *);
2259:	bool virtqueue_kick(struct virtqueue *);
2214:	bool virtqueue_kick_prepare(struct virtqueue *);
2231:	bool virtqueue_notify(struct virtqueue *);
2358:	bool virtqueue_poll(struct virtqueue *, unsigned int);
2584:	int virtqueue_resize(struct virtqueue *, u32, void (*)(struct virtqueue *, void *));
2536:	struct virtqueue *vring_create_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2688:	void vring_del_virtqueue(struct virtqueue *);
2445:	irqreturn_t vring_interrupt(int, void *);
2630:	struct virtqueue *vring_new_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, void *, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2703:	void vring_transport_features(struct virtio_device *);
2477:	static struct virtqueue *__vring_new_virtqueue(unsigned int, struct vring_virtqueue_split *, struct virtio_device *, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
1544:	static void detach_buf_packed(struct vring_virtqueue *, unsigned int, void **);
731:	static void detach_buf_split(struct vring_virtqueue *, unsigned int, void **);
2083:	static int virtqueue_add(struct virtqueue *, struct scatterlist **, unsigned int, unsigned int, unsigned int, void *, void *, gfp_t);
2048:	static int virtqueue_resize_packed(struct virtqueue *, u32);
1126:	static int virtqueue_resize_split(struct virtqueue *, u32);
1865:	static int vring_alloc_queue_packed(struct vring_virtqueue_packed *, struct virtio_device *, u32);
1045:	static int vring_alloc_queue_split(struct vring_virtqueue_split *, struct virtio_device *, u32, unsigned int, bool);
2652:	static void vring_free(struct virtqueue *);
1843:	static void vring_free_packed(struct vring_virtqueue_packed *, struct virtio_device *);
376:	static dma_addr_t vring_map_single(const struct vring_virtqueue *, void *, size_t, enum dma_data_direction);
1173:	static void vring_unmap_extra_packed(const struct vring_virtqueue *, struct vring_desc_extra *);

File fs/aio.c:
2142:	long __arm64_sys_io_cancel(const struct pt_regs *);
1404:	long __arm64_sys_io_destroy(const struct pt_regs *);
2218:	long __arm64_sys_io_getevents(const struct pt_regs *);
2243:	long __arm64_sys_io_pgetevents(const struct pt_regs *);
1335:	long __arm64_sys_io_setup(const struct pt_regs *);
2048:	long __arm64_sys_io_submit(const struct pt_regs *);
886:	void exit_aio(struct mm_struct *);
588:	void kiocb_set_cancel_fn(struct kiocb *, kiocb_cancel_fn *);
1444:	static void aio_complete_rw(struct kiocb *, long);
328:	static void aio_free_ring(struct kioctx *);
1606:	static void aio_fsync_work(struct work_struct *);
279:	static int aio_init_fs_context(struct fs_context *);
403:	static int aio_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
1736:	static int aio_poll_cancel(struct kiocb *);
1690:	static void aio_poll_complete_work(struct work_struct *);
1637:	static void aio_poll_put_work(struct work_struct *);
1843:	static void aio_poll_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
1753:	static int aio_poll_wake(struct wait_queue_entry *, unsigned int, int, void *);
1468:	static int aio_prep_rw(struct kiocb *, const struct iocb *);
1538:	static int aio_read(struct kiocb *, const struct iocb *, bool, bool);
1276:	static bool aio_read_events(struct kioctx *, long, long, struct io_event *, long *);
391:	static int aio_ring_mmap(struct file *, struct vm_area_struct *);
354:	static int aio_ring_mremap(struct vm_area_struct *);
291:	static int aio_setup(void);
1565:	static int aio_write(struct kiocb *, const struct iocb *, bool, bool);
2185:	static long do_io_getevents(aio_context_t, long, long, struct io_event *, struct timespec64 *);
609:	static void free_ioctx(struct work_struct *);
622:	static void free_ioctx_reqs(struct percpu_ref *);
640:	static void free_ioctx_users(struct percpu_ref *);
1098:	static void iocb_destroy(struct aio_kiocb *);
1184:	static void iocb_put(struct aio_kiocb *);
842:	static int kill_ioctx(struct mm_struct *, struct kioctx *, struct ctx_rq_wait *);
1070:	static struct kioctx *lookup_ioctx(unsigned long);
979:	static void refill_reqs_available(struct kioctx *, unsigned int, unsigned int);

File fs/anon_inodes.c:
226:	int anon_inode_getfd(const char *, const struct file_operations *, void *, int);
249:	int anon_inode_getfd_secure(const char *, const struct file_operations *, void *, int, const struct inode *);
143:	struct file *anon_inode_getfile(const char *, const struct file_operations *, void *, int);
171:	struct file *anon_inode_getfile_secure(const char *, const struct file_operations *, void *, int, const struct inode *);
180:	static int __anon_inode_getfd(const char *, const struct file_operations *, void *, int, const struct inode *, bool);
257:	static int anon_inode_init(void);
33:	static char *anon_inodefs_dname(struct dentry *, char *, int);
43:	static int anon_inodefs_init_fs_context(struct fs_context *);

File fs/attr.c:
247:	int inode_newsize_ok(const struct inode *, loff_t);
325:	int may_setattr(struct user_namespace *, struct inode *, unsigned int);
380:	int notify_change(struct user_namespace *, struct dentry *, struct iattr *, struct inode **);
302:	void setattr_copy(struct user_namespace *, struct inode *, const struct iattr *);
164:	int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
36:	int setattr_should_drop_sgid(struct user_namespace *, const struct inode *);
66:	int setattr_should_drop_suidgid(struct user_namespace *, struct inode *);

File fs/bad_inode.c:
246:	void iget_failed(struct inode *);
233:	bool is_bad_inode(struct inode *);
207:	void make_bad_inode(struct inode *);
20:	static int bad_file_open(struct inode *, struct file *);
142:	static int bad_inode_atomic_open(struct inode *, struct dentry *, struct file *, unsigned int, umode_t);
30:	static int bad_inode_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
129:	static int bad_inode_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64);
124:	static struct posix_acl *bad_inode_get_acl(struct inode *, int, bool);
117:	static const char *bad_inode_get_link(struct dentry *, struct inode *, struct delayed_call *);
98:	static int bad_inode_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
43:	static int bad_inode_link(struct dentry *, struct inode *, struct dentry *);
111:	static ssize_t bad_inode_listxattr(struct dentry *, char *, size_t);
37:	static struct dentry *bad_inode_lookup(struct inode *, struct dentry *, unsigned int);
61:	static int bad_inode_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
72:	static int bad_inode_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
92:	static int bad_inode_permission(struct user_namespace *, struct inode *, int);
86:	static int bad_inode_readlink(struct dentry *, char *, int);
78:	static int bad_inode_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
67:	static int bad_inode_rmdir(struct inode *, struct dentry *);
156:	static int bad_inode_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
105:	static int bad_inode_setattr(struct user_namespace *, struct dentry *, struct iattr *);
54:	static int bad_inode_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
149:	static int bad_inode_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
49:	static int bad_inode_unlink(struct inode *, struct dentry *);
136:	static int bad_inode_update_time(struct inode *, struct timespec64 *, int);

File fs/binfmt_elf.c:
174:	static int create_elf_tables(struct linux_binprm *, const struct elf64_hdr *, unsigned long, unsigned long, unsigned long);
2021:	static int elf_core_dump(struct coredump_params *);
365:	static unsigned long elf_map(struct file *, unsigned long, const struct elf64_phdr *, int, int, unsigned long);
2164:	static void exit_elf_binfmt(void);
2158:	static int init_elf_binfmt(void);
818:	static int load_elf_binary(struct linux_binprm *);
586:	static unsigned long load_elf_interp(struct elf64_hdr *, struct file *, unsigned long, struct elf64_phdr *, struct arch_elf_state *);
461:	static struct elf64_phdr *load_elf_phdrs(const struct elf64_hdr *, struct file *);
432:	static unsigned long maximum_alignment(struct elf64_phdr *, int);
136:	static int padzero(unsigned long);
761:	static int parse_elf_properties(struct file *, const struct elf64_phdr *, struct arch_elf_state *);
112:	static int set_brk(unsigned long, unsigned long, int);
404:	static unsigned long total_mapping_size(const struct elf64_phdr *, int);
1473:	static int writenote(struct memelfnote *, struct coredump_params *);

File fs/binfmt_script.c:
151:	static void exit_script_binfmt(void);
145:	static int init_script_binfmt(void);
34:	static int load_script(struct linux_binprm *);

File fs/buffer.c:
1153:	void __bforget(struct buffer_head *);
2964:	int __bh_read(struct buffer_head *, blk_opf_t, bool);
2992:	void __bh_read_batch(int, struct buffer_head **, blk_opf_t, bool);
2038:	int __block_write_begin(struct page *, loff_t, unsigned int, get_block_t *);
1953:	int __block_write_begin_int(struct folio *, loff_t, unsigned int, get_block_t *, const struct iomap *);
1694:	int __block_write_full_page(struct inode *, struct page *, get_block_t *, struct writeback_control *, bh_end_io_t *);
1364:	struct buffer_head *__bread_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
1341:	void __breadahead(struct block_device *, sector_t, unsigned int);
1139:	void __brelse(struct buffer_head *);
1301:	struct buffer_head *__find_get_block(struct block_device *, sector_t, unsigned int);
1326:	struct buffer_head *__getblk_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
67:	void __lock_buffer(struct buffer_head *);
2729:	int __sync_dirty_buffer(struct buffer_head *, blk_opf_t);
120:	void __wait_on_buffer(struct buffer_head *);
2897:	struct buffer_head *alloc_buffer_head(gfp_t);
811:	struct buffer_head *alloc_page_buffers(struct page *, unsigned long, bool);
2944:	int bh_uptodate_or_lock(struct buffer_head *);
2460:	int block_commit_write(struct page *, unsigned int, unsigned int);
616:	bool block_dirty_folio(struct address_space *, struct folio *);
1483:	void block_invalidate_folio(struct folio *, size_t, size_t);
2196:	bool block_is_partially_uptodate(struct folio *, size_t, size_t);
2486:	int block_page_mkwrite(struct vm_area_struct *, struct vm_fault *, get_block_t *);
2239:	int block_read_full_folio(struct folio *, get_block_t *);
2525:	int block_truncate_page(struct address_space *, loff_t, get_block_t *);
2091:	int block_write_begin(struct address_space *, loff_t, unsigned int, struct page **, get_block_t *);
2114:	int block_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2602:	int block_write_full_page(struct page *, get_block_t *, struct writeback_control *);
86:	void buffer_check_dirty_writeback(struct folio *, bool *, bool *);
3021:	void buffer_init(void);
1588:	void clean_bdev_aliases(struct block_device *, sector_t, sector_t);
2436:	int cont_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **, get_block_t *, loff_t *);
1538:	void create_empty_buffers(struct page *, unsigned long, unsigned long);
524:	void emergency_thaw_bdev(struct super_block *);
342:	void end_buffer_async_write(struct buffer_head *, int);
157:	void end_buffer_read_sync(struct buffer_head *, int);
164:	void end_buffer_write_sync(struct buffer_head *, int);
2912:	void free_buffer_head(struct buffer_head *);
2635:	sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);
2335:	int generic_cont_expand_simple(struct inode *, loff_t);
2150:	int generic_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1397:	bool has_bh_in_lru(int, void *);
484:	int inode_has_buffers(struct inode *);
1410:	void invalidate_bh_lrus(void);
1420:	void invalidate_bh_lrus_cpu(void);
758:	void invalidate_inode_buffers(struct inode *);
418:	void mark_buffer_async_write(struct buffer_head *);
1079:	void mark_buffer_dirty(struct buffer_head *);
570:	void mark_buffer_dirty_inode(struct buffer_head *, struct inode *);
1114:	void mark_buffer_write_io_error(struct buffer_head *);
1861:	void page_zero_new_buffers(struct page *, unsigned int, unsigned int);
779:	int remove_inode_buffers(struct inode *);
1430:	void set_bh_page(struct buffer_head *, struct page *, unsigned long);
2705:	void submit_bh(blk_opf_t, struct buffer_head *);
2756:	int sync_dirty_buffer(struct buffer_head *);
541:	int sync_mapping_buffers(struct address_space *);
60:	void touch_buffer(struct buffer_head *);
2815:	bool try_to_free_buffers(struct folio *);
73:	void unlock_buffer(struct buffer_head *);
559:	void write_boundary_block(struct block_device *, sector_t, unsigned int);
2711:	void write_dirty_buffer(struct buffer_head *, blk_opf_t);
2046:	static int __block_commit_write(struct inode *, struct page *, unsigned int, unsigned int);
2923:	static int buffer_exit_cpu_dead(unsigned int);
2789:	static bool drop_buffers(struct folio *, struct buffer_head **);
2648:	static void end_bio_bh_io_sync(struct bio *);
244:	static void end_buffer_async_read(struct buffer_head *, int);
320:	static void end_buffer_async_read_io(struct buffer_head *, int);
891:	static sector_t init_page_buffers(struct page *, struct block_device *, sector_t, int);
1389:	static void invalidate_bh_lru(void *);
2884:	static void recalc_bh_state(void);
2659:	static void submit_bh_wbc(blk_opf_t, struct buffer_head *, struct writeback_control *);

File fs/char_dev.c:
268:	int __register_chrdev(unsigned int, unsigned int, unsigned int, const char *, const struct file_operations *);
335:	void __unregister_chrdev(unsigned int, unsigned int, unsigned int, const char *);
236:	int alloc_chrdev_region(dev_t *, unsigned int, unsigned int, const char *);
426:	void cd_forget(struct inode *);
479:	int cdev_add(struct cdev *, dev_t, unsigned int);
640:	struct cdev *cdev_alloc(void);
601:	void cdev_del(struct cdev *);
544:	int cdev_device_add(struct cdev *, struct device *);
578:	void cdev_device_del(struct cdev *, struct device *);
658:	void cdev_init(struct cdev *, const struct file_operations *);
361:	void cdev_put(struct cdev *);
515:	void cdev_set_parent(struct cdev *, struct kobject *);
674:	void chrdev_init(void);
51:	void chrdev_show(struct seq_file *, off_t);
200:	int register_chrdev_region(dev_t, unsigned int, const char *);
311:	void unregister_chrdev_region(dev_t, unsigned int);
97:	static struct char_device_struct *__register_chrdev_region(unsigned int, unsigned int, int, const char *);
666:	static struct kobject *base_probe(dev_t, int *, void *);
608:	static void cdev_default_release(struct kobject *);
617:	static void cdev_dynamic_release(struct kobject *);
373:	static int chrdev_open(struct inode *, struct file *);
463:	static int exact_lock(dev_t, void *);
457:	static struct kobject *exact_match(dev_t, int *, void *);

File fs/configfs/dir.c:
362:	int configfs_create_link(struct configfs_dirent *, struct dentry *, struct dentry *, char *);
1108:	int configfs_depend_item(struct configfs_subsystem *, struct config_item *);
1190:	int configfs_depend_item_unlocked(struct configfs_subsystem *, struct config_item *);
351:	int configfs_dirent_is_ready(struct configfs_dirent *);
242:	int configfs_make_dirent(struct configfs_dirent *, struct dentry *, void *, umode_t, int, struct configfs_fragment *);
1817:	struct config_group *configfs_register_default_group(struct config_group *, const char *, const struct config_item_type *);
1728:	int configfs_register_group(struct config_group *, struct config_group *);
1849:	int configfs_register_subsystem(struct configfs_subsystem *);
709:	void configfs_remove_default_groups(struct config_group *);
1158:	void configfs_undepend_item(struct config_item *);
1842:	void configfs_unregister_default_group(struct config_group *);
1773:	void configfs_unregister_group(struct config_group *);
1909:	void configfs_unregister_subsystem(struct configfs_subsystem *);
178:	struct configfs_fragment *get_fragment(struct configfs_fragment *);
172:	void put_fragment(struct configfs_fragment *);
920:	static void client_drop_item(struct config_item *, struct config_item *);
846:	static int configfs_attach_group(struct config_item *, struct config_item *, struct dentry *, struct configfs_fragment *);
811:	static int configfs_attach_item(struct config_item *, struct config_item *, struct dentry *, struct configfs_fragment *);
45:	static void configfs_d_iput(struct dentry *, struct inode *);
1034:	static int configfs_depend_prep(struct dentry *, struct config_item *);
492:	static int configfs_detach_prep(struct dentry *, struct dentry **);
539:	static void configfs_detach_rollback(struct dentry *);
1586:	static int configfs_dir_close(struct inode *, struct file *);
1669:	static loff_t configfs_dir_lseek(struct file *, loff_t, int);
1562:	static int configfs_dir_open(struct inode *, struct file *);
331:	static void configfs_dir_set_ready(struct configfs_dirent *);
430:	static struct dentry *configfs_lookup(struct inode *, struct dentry *, unsigned int);
1254:	static int configfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
188:	static struct configfs_dirent *configfs_new_dirent(struct configfs_dirent *, void *, int, struct configfs_fragment *);
1608:	static int configfs_readdir(struct file *, struct dir_context *);
416:	static void configfs_remove_dir(struct config_item *);
260:	static void configfs_remove_dirent(struct dentry *);
1438:	static int configfs_rmdir(struct inode *, struct dentry *);
660:	static int create_default_group(struct config_group *, struct config_group *, struct configfs_fragment *);
551:	static void detach_attrs(struct config_item *);
616:	static void detach_groups(struct config_group *);
777:	static void link_group(struct config_group *, struct config_group *);
744:	static void link_obj(struct config_item *, struct config_item *);
766:	static void unlink_group(struct config_group *);
725:	static void unlink_obj(struct config_item *);

File fs/configfs/file.c:
468:	int configfs_create_bin_file(struct config_item *, const struct configfs_bin_attribute *);
447:	int configfs_create_file(struct config_item *, const struct configfs_attribute *);
290:	static int __configfs_open_file(struct inode *, struct file *, int);
106:	static ssize_t configfs_bin_read_iter(struct kiocb *, struct iov_iter *);
236:	static ssize_t configfs_bin_write_iter(struct kiocb *, struct iov_iter *);
396:	static int configfs_open_bin_file(struct inode *, struct file *);
391:	static int configfs_open_file(struct inode *, struct file *);
80:	static ssize_t configfs_read_iter(struct kiocb *, struct iov_iter *);
379:	static int configfs_release(struct inode *, struct file *);
401:	static int configfs_release_bin_file(struct inode *, struct file *);
220:	static ssize_t configfs_write_iter(struct kiocb *, struct iov_iter *);

File fs/configfs/inode.c:
157:	struct inode *configfs_create(struct dentry *, umode_t);
205:	void configfs_drop_dentry(struct configfs_dirent *, struct dentry *);
183:	const unsigned char *configfs_get_name(struct configfs_dirent *);
221:	void configfs_hash_and_remove(struct dentry *, const char *);
105:	struct inode *configfs_new_inode(umode_t, struct configfs_dirent *, struct super_block *);
35:	int configfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);

File fs/configfs/item.c:
174:	struct config_item *config_group_find_item(struct config_group *, const char *);
157:	void config_group_init(struct config_group *);
92:	void config_group_init_type_name(struct config_group *, const char *, const struct config_item_type *);
101:	struct config_item *config_item_get(struct config_item *);
109:	struct config_item *config_item_get_unless_zero(struct config_item *);
82:	void config_item_init_type_name(struct config_item *, const char *, const struct config_item_type *);
146:	void config_item_put(struct config_item *);
49:	int config_item_set_name(struct config_item *, const char *, ...);
135:	static void config_item_release(struct kref *);

File fs/configfs/mount.c:
50:	int configfs_is_root(struct config_item *);
122:	struct dentry *configfs_pin_fs(void);
129:	void configfs_release_fs(void);
164:	static void configfs_exit(void);
63:	static int configfs_fill_super(struct super_block *, struct fs_context *);
30:	static void configfs_free_inode(struct inode *);
99:	static int configfs_get_tree(struct fs_context *);
135:	static int configfs_init(void);
108:	static int configfs_init_fs_context(struct fs_context *);

File fs/configfs/symlink.c:
140:	int configfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
220:	int configfs_unlink(struct inode *, struct dentry *);

File fs/coredump.c:
517:	void do_coredump(const kernel_siginfo_t *);
927:	int dump_align(struct coredump_params *, int);
841:	int dump_emit(struct coredump_params *, const void *, int);
858:	void dump_skip(struct coredump_params *, size_t);
852:	void dump_skip_to(struct coredump_params *, unsigned long);
898:	int dump_user_range(struct coredump_params *, unsigned long, unsigned long);
940:	void validate_coredump_safety(void);
821:	static int __dump_skip(struct coredump_params *, size_t);
124:	static int cn_esc_printf(struct core_name *, const char *, ...);
161:	static int cn_print_exe_file(struct core_name *, bool);
111:	static int cn_printf(struct core_name *, const char *, ...);
87:	static int cn_vprintf(struct core_name *, const char *, va_list);
454:	static bool dump_interrupted(void);
1145:	static bool dump_vma_snapshot(struct coredump_params *);
1127:	static void free_vma_snapshot(struct coredump_params *);
987:	static int init_fs_coredump_sysctls(void);
952:	static int proc_dostring_coredump(struct ctl_table *, int, void *, size_t *, loff_t *);
499:	static int umh_pipe_setup(struct subprocess_info *, struct cred *);
465:	static void wait_for_dump_helpers(struct file *);

File fs/d_path.c:
411:	long __arm64_sys_getcwd(const struct pt_regs *);
214:	char *__d_path(const struct path *, const struct path *, char *, int);
226:	char *d_absolute_path(const struct path *, char *, int);
264:	char *d_path(const struct path *, char *, int);
370:	char *dentry_path(const struct dentry *, char *, int);
361:	char *dentry_path_raw(const struct dentry *, char *, int);
300:	char *dynamic_dname(char *, int, const char *, ...);
317:	char *simple_dname(struct dentry *, char *, int);
330:	static char *__dentry_path(const struct dentry *, struct prepend_buffer *);
56:	static bool prepend(struct prepend_buffer *, const char *, int);
155:	static int prepend_path(const struct path *, const struct path *, struct prepend_buffer *);

File fs/dcache.c:
504:	void __d_drop(struct dentry *);
2453:	struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
2344:	struct dentry *__d_lookup_rcu(const struct dentry *, const struct qstr *, unsigned int *);
2765:	void __d_lookup_unhash_wake(struct dentry *);
2811:	void d_add(struct dentry *, struct inode *);
2213:	struct dentry *d_add_ci(struct dentry *, struct inode *, struct qstr *);
1847:	struct dentry *d_alloc(struct dentry *, const struct qstr *);
1866:	struct dentry *d_alloc_anon(struct super_block *);
1872:	struct dentry *d_alloc_cursor(struct dentry *);
1905:	struct dentry *d_alloc_name(struct dentry *, const char *);
2631:	struct dentry *d_alloc_parallel(struct dentry *, const struct qstr *, wait_queue_head_t *);
1897:	struct dentry *d_alloc_pseudo(struct super_block *, const struct qstr *);
3064:	struct dentry *d_ancestor(struct dentry *, struct dentry *);
2554:	void d_delete(struct dentry *);
532:	void d_drop(struct dentry *);
2832:	struct dentry *d_exact_alias(struct dentry *, struct inode *);
3042:	void d_exchange(struct dentry *, struct dentry *);
1060:	struct dentry *d_find_alias(struct inode *);
1077:	struct dentry *d_find_alias_rcu(struct inode *);
1016:	struct dentry *d_find_any_alias(struct inode *);
3245:	void d_genocide(struct dentry *);
2516:	struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
2030:	void d_instantiate(struct dentry *, struct inode *);
2119:	struct dentry *d_instantiate_anon(struct dentry *, struct inode *);
2048:	void d_instantiate_new(struct dentry *, struct inode *);
1722:	void d_invalidate(struct dentry *);
2423:	struct dentry *d_lookup(const struct dentry *, const struct qstr *);
2064:	struct dentry *d_make_root(struct inode *);
691:	void d_mark_dontcache(struct inode *);
3029:	void d_move(struct dentry *, struct dentry *);
2170:	struct dentry *d_obtain_alias(struct inode *);
2191:	struct dentry *d_obtain_root(struct inode *);
1102:	void d_prune_aliases(struct inode *);
2590:	void d_rehash(struct dentry *);
2259:	bool d_same_name(const struct dentry *, const struct dentry *, const struct qstr *);
1915:	void d_set_d_op(struct dentry *, const struct dentry_operations *);
1953:	void d_set_fallthru(struct dentry *);
1501:	int d_set_mounted(struct dentry *);
3136:	struct dentry *d_splice_alias(struct inode *, struct dentry *);
3252:	void d_tmpfile(struct file *, struct inode *);
956:	struct dentry *dget_parent(struct dentry *);
894:	void dput(struct dentry *);
932:	void dput_to_list(struct dentry *, struct list_head *);
3203:	bool is_subdir(struct dentry *, struct dentry *);
1481:	int path_has_submounts(const struct path *);
1275:	long prune_dcache_sb(struct super_block *, struct shrink_control *);
328:	void release_dentry_name_snapshot(struct name_snapshot *);
1691:	void shrink_dcache_for_umount(struct super_block *);
1619:	void shrink_dcache_parent(struct dentry *);
1314:	void shrink_dcache_sb(struct super_block *);
1177:	void shrink_dentry_list(struct list_head *);
313:	void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
3344:	void vfs_caches_init(void);
3333:	void vfs_caches_init_early(void);
486:	static void ___d_drop(struct dentry *);
2775:	static void __d_add(struct dentry *, struct inode *);
1763:	static struct dentry *__d_alloc(struct super_block *, const struct qstr *);
294:	static void __d_free(struct callback_head *);
301:	static void __d_free_external(struct callback_head *);
1996:	static void __d_instantiate(struct dentry *, struct inode *);
2079:	static struct dentry *__d_instantiate_anon(struct dentry *, struct inode *, bool);
2277:	static struct dentry *__d_lookup_rcu_op_compare(const struct dentry *, const struct qstr *, unsigned int *);
2746:	static wait_queue_head_t *__d_lookup_unhash(struct dentry *);
2939:	static void __d_move(struct dentry *, struct dentry *, bool);
2125:	static struct dentry *__d_obtain_alias(struct inode *, bool);
2574:	static void __d_rehash(struct dentry *);
3084:	static int __d_unalias(struct inode *, struct dentry *, struct dentry *);
578:	static void __dentry_kill(struct dentry *);
918:	static void __dput_to_list(struct dentry *, struct list_head *);
625:	static struct dentry *__lock_parent(struct dentry *);
3230:	static enum d_walk_ret d_genocide_kill(void *, struct dentry *);
424:	static void d_lru_add(struct dentry *);
434:	static void d_lru_del(struct dentry *);
1348:	static void d_walk(struct dentry *, void *, enum d_walk_ret (*)(void *, struct dentry *));
3301:	static void dcache_init(void);
3280:	static void dcache_init_early(void);
711:	static struct dentry *dentry_kill(struct dentry *);
1205:	static enum lru_status dentry_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
1286:	static enum lru_status dentry_lru_isolate_shrink(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
384:	static void dentry_unlink_inode(struct dentry *);
1680:	static void do_one_tree(struct dentry *);
1707:	static enum d_walk_ret find_submount(void *, struct dentry *);
197:	static int init_fs_dcache_sysctls(void);
653:	static struct dentry *lock_parent(struct dentry *);
1459:	static enum d_walk_ret path_check_mount(void *, struct dentry *);
177:	static int proc_nr_dentry(struct ctl_table *, int, void *, size_t *, loff_t *);
663:	static bool retain_dentry(struct dentry *);
1553:	static enum d_walk_ret select_collect(void *, struct dentry *);
1582:	static enum d_walk_ret select_collect2(void *, struct dentry *);
3271:	static int set_dhash_entries(char *);
1136:	static bool shrink_lock_dentry(struct dentry *);
2598:	static unsigned int start_dir_add(struct inode *);
1657:	static enum d_walk_ret umount_check(void *, struct dentry *);

File fs/devpts/inode.c:
199:	struct pts_fs_info *devpts_acquire(struct file *);
605:	void *devpts_get_priv(struct dentry *);
547:	void devpts_kill_index(struct pts_fs_info *, int);
168:	struct vfsmount *devpts_mntget(struct file *, struct pts_fs_info *);
530:	int devpts_new_index(struct pts_fs_info *);
618:	void devpts_pty_kill(struct dentry *);
562:	struct dentry *devpts_pty_new(struct pts_fs_info *, int, void *);
231:	void devpts_release(struct pts_fs_info *);
445:	static int devpts_fill_super(struct super_block *, void *, int);
508:	static void devpts_kill_sb(struct super_block *);
502:	static struct dentry *devpts_mount(struct file_system_type *, int, const char *, void *);
384:	static int devpts_remount(struct super_block *, int *, char *);
403:	static int devpts_show_options(struct seq_file *, struct dentry *);
629:	static int init_devpts_fs(void);
246:	static int parse_mount_options(char *, int, struct pts_mount_opts *);

File fs/direct-io.c:
1122:	ssize_t __blockdev_direct_IO(struct kiocb *, struct inode *, struct block_device *, struct iov_iter *, get_block_t *, dio_iodone_t *, dio_submit_t *, int);
567:	int sb_init_dio_done_wq(struct super_block *);
317:	static void dio_aio_complete_work(struct work_struct *);
329:	static void dio_bio_end_aio(struct bio *);
376:	static void dio_bio_end_io(struct bio *);
234:	static ssize_t dio_complete(struct dio *, ssize_t, unsigned int);
1341:	static int dio_init(void);
680:	static int dio_new_bio(struct dio *, struct dio_submit *, sector_t, struct buffer_head *);
737:	static int dio_send_cur_page(struct dio *, struct dio_submit *, struct buffer_head *);
869:	static void dio_zero_block(struct dio *, struct dio_submit *, int, struct buffer_head *);
802:	static int submit_page_section(struct dio *, struct dio_submit *, struct page *, unsigned int, unsigned int, sector_t, struct buffer_head *);

File fs/drop_caches.c:
50:	int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
18:	static void drop_pagecache_sb(struct super_block *, void *);

File fs/eventfd.c:
463:	long __arm64_sys_eventfd(const struct pt_regs *);
458:	long __arm64_sys_eventfd2(const struct pt_regs *);
188:	void eventfd_ctx_do_read(struct eventfd_ctx *, __u64 *);
380:	struct eventfd_ctx *eventfd_ctx_fdget(int);
401:	struct eventfd_ctx *eventfd_ctx_fileget(struct file *);
115:	void eventfd_ctx_put(struct eventfd_ctx *);
210:	int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *, wait_queue_entry_t *, __u64 *);
355:	struct file *eventfd_fget(int);
88:	__u64 eventfd_signal(struct eventfd_ctx *, __u64);
46:	__u64 eventfd_signal_mask(struct eventfd_ctx *, __u64, unsigned int);
414:	static int do_eventfd(unsigned int, int);
130:	static __poll_t eventfd_poll(struct file *, poll_table *);
226:	static ssize_t eventfd_read(struct kiocb *, struct iov_iter *);
121:	static int eventfd_release(struct inode *, struct file *);
322:	static void eventfd_show_fdinfo(struct seq_file *, struct file *);
272:	static ssize_t eventfd_write(struct file *, const char *, size_t, loff_t *);

File fs/eventpoll.c:
2037:	long __arm64_sys_epoll_create(const struct pt_regs *);
2032:	long __arm64_sys_epoll_create1(const struct pt_regs *);
2207:	long __arm64_sys_epoll_ctl(const struct pt_regs *);
2299:	long __arm64_sys_epoll_pwait(const struct pt_regs *);
2310:	long __arm64_sys_epoll_pwait2(const struct pt_regs *);
2265:	long __arm64_sys_epoll_wait(const struct pt_regs *);
2057:	int do_epoll_ctl(int, int, int, struct epoll_event *, bool);
905:	void eventpoll_release_file(struct file *);
804:	static __poll_t __ep_eventpoll_poll(struct file *, poll_table *, int);
1989:	static int do_epoll_create(int);
2223:	static int do_epoll_wait(int, struct epoll_event *, int, struct timespec64 *);
1758:	static int ep_autoremove_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
1395:	static void ep_destroy_wakeup_source(struct epitem *);
629:	static void ep_done_scan(struct eventpoll *, struct list_head *);
861:	static __poll_t ep_eventpoll_poll(struct file *, poll_table *);
792:	static int ep_eventpoll_release(struct inode *, struct file *);
740:	static void ep_free(struct eventpoll *);
1446:	static int ep_insert(struct eventpoll *, const struct epoll_event *, struct file *, int, int);
1920:	static int ep_loop_check_proc(struct eventpoll *, int);
1567:	static int ep_modify(struct eventpoll *, struct epitem *, const struct epoll_event *);
1136:	static int ep_poll_callback(wait_queue_entry_t *, unsigned int, int, void *);
1241:	static void ep_ptable_queue_proc(struct file *, wait_queue_head_t *, poll_table *);
688:	static int ep_remove(struct eventpoll *, struct epitem *);
867:	static void ep_show_fdinfo(struct seq_file *, struct file *);
678:	static void epi_rcu_free(struct callback_head *);
2045:	static int epoll_mutex_lock(struct mutex *, int, bool);
2387:	static int eventpoll_init(void);
1325:	static int reverse_path_check_proc(struct hlist_head *, int);

File fs/exec.c:
2101:	long __arm64_sys_execve(const struct pt_regs *);
2109:	long __arm64_sys_execveat(const struct pt_regs *);
1212:	char *__get_task_comm(char *, size_t, struct task_struct *);
85:	void __register_binfmt(struct linux_binfmt *, int);
1227:	void __set_task_comm(struct task_struct *, const char *, bool);
1242:	int begin_new_exec(struct linux_binprm *);
1541:	int bprm_change_interp(const char *, struct linux_binprm *);
613:	int copy_string_kernel(const char *, struct linux_binprm *);
1456:	void finalize_exec(struct linux_binprm *);
1965:	int kernel_execve(const char *, const char * const *, const char * const *);
947:	struct file *open_exec(const char *);
109:	bool path_noexec(const struct path *);
1673:	int remove_arg_zero(struct linux_binprm *);
2077:	void set_binfmt(struct linux_binfmt *);
2093:	void set_dumpable(struct mm_struct *, int);
746:	int setup_arg_pages(struct linux_binprm *, unsigned long, int);
1436:	void setup_new_exec(struct linux_binprm *);
95:	void unregister_binfmt(struct linux_binfmt *);
1414:	void would_dump(struct linux_binprm *, struct file *);
186:	static void acct_arg_size(struct linux_binprm *, unsigned long);
1508:	static struct linux_binprm *alloc_bprm(int, struct filename *);
1808:	static int bprm_execve(struct linux_binprm *, int, struct filename *, int);
518:	static int copy_strings(int, struct user_arg_ptr, struct linux_binprm *);
1880:	static int do_execveat_common(int, struct filename *, struct user_arg_ptr, struct user_arg_ptr, int);
900:	static struct file *do_open_execat(int, struct filename *, int);
976:	static int exec_mmap(struct mm_struct *);
1484:	static void free_bprm(struct linux_binprm *);
198:	static struct page *get_arg_page(struct linux_binprm *, unsigned long, int);
2165:	static int init_fs_exec_sysctls(void);
2142:	static int proc_dointvec_minmax_coredump(struct ctl_table *, int, void *, size_t *, loff_t *);
1183:	static int unshare_sighand(struct task_struct *);

File fs/exportfs/expfs.c:
568:	struct dentry *exportfs_decode_fh(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
420:	struct dentry *exportfs_decode_fh_raw(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
396:	int exportfs_encode_fh(struct dentry *, struct fid *, int *, int);
384:	int exportfs_encode_inode_fh(struct inode *, struct fid *, int *, struct inode *);
27:	static int exportfs_get_name(struct vfsmount *, struct dentry *, char *, struct dentry *);
251:	static bool filldir_one(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
43:	static struct dentry *find_acceptable_alias(struct dentry *, int (*)(void *, struct dentry *), void *);
212:	static int reconnect_path(struct vfsmount *, struct dentry *, char *);

File fs/fat/cache.c:
358:	int fat_bmap(struct inode *, sector_t, sector_t *, unsigned long *, int, bool);
57:	void fat_cache_destroy(void);
46:	int fat_cache_init(void);
204:	void fat_cache_inval_inode(struct inode *);
225:	int fat_get_cluster(struct inode *, int, int *, int *);
310:	int fat_get_mapped_cluster(struct inode *, sector_t, sector_t, unsigned long *, sector_t *);
134:	static void fat_cache_add(struct inode *, struct fat_cache_id *);
39:	static void init_once(void *);

File fs/fat/dir.c:
1281:	int fat_add_entries(struct inode *, void *, int, struct fat_slot_info *);
1133:	int fat_alloc_new_dir(struct inode *, struct timespec64 *);
905:	int fat_dir_empty(struct inode *);
890:	int fat_get_dotdot_entry(struct inode *, struct buffer_head **, struct msdos_dir_entry **);
1029:	int fat_remove_entries(struct inode *, struct fat_slot_info *);
951:	int fat_scan(struct inode *, const unsigned char *, struct fat_slot_info *);
975:	int fat_scan_logstart(struct inode *, int, struct fat_slot_info *);
463:	int fat_search_long(struct inode *, const unsigned char *, int, struct fat_slot_info *);
930:	int fat_subdirs(struct inode *);
553:	static int __fat_readdir(struct inode *, struct file *, struct dir_context *, int, struct fat_ioctl_filldir_callback *);
994:	static int __fat_remove_entries(struct inode *, loff_t, int);
787:	static long fat_dir_ioctl(struct file *, unsigned int, unsigned long);
116:	static int fat_get_entry(struct inode *, loff_t *, struct buffer_head **, struct msdos_dir_entry **);
759:	static bool fat_ioctl_filldir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
279:	static int fat_parse_long(struct inode *, loff_t *, struct buffer_head **, struct msdos_dir_entry **, wchar_t **, unsigned char *);
349:	static int fat_parse_short(struct super_block *, const struct msdos_dir_entry *, unsigned char *, int);
702:	static int fat_readdir(struct file *, struct dir_context *);
234:	static int fat_shortname2uni(struct nls_table *, unsigned char *, int, wchar_t *, unsigned short, int);
1081:	static int fat_zeroed_cluster(struct inode *, sector_t, int, struct buffer_head **, int);

File fs/fat/fat.h:
235:	static unsigned char fat_checksum(const __u8 *);

File fs/fat/fatent.c:
466:	int fat_alloc_clusters(struct inode *, int *, int);
716:	int fat_count_free_clusters(struct super_block *);
289:	void fat_ent_access_init(struct super_block *);
349:	int fat_ent_read(struct inode *, struct fat_entry *, int);
410:	int fat_ent_write(struct inode *, struct fat_entry *, int, int);
554:	int fat_free_clusters(struct inode *, int);
762:	int fat_trim_fs(struct inode *, struct fstrim_range *);
23:	static void fat12_ent_blocknr(struct super_block *, int, int *, sector_t *);
69:	static int fat12_ent_bread(struct super_block *, struct fat_entry *, int, sector_t);
120:	static int fat12_ent_get(struct fat_entry *);
195:	static int fat12_ent_next(struct fat_entry *);
156:	static void fat12_ent_put(struct fat_entry *, int);
43:	static void fat12_ent_set_ptr(struct fat_entry *, int);
138:	static int fat16_ent_get(struct fat_entry *);
228:	static int fat16_ent_next(struct fat_entry *);
178:	static void fat16_ent_put(struct fat_entry *, int);
57:	static void fat16_ent_set_ptr(struct fat_entry *, int);
147:	static int fat32_ent_get(struct fat_entry *);
240:	static int fat32_ent_next(struct fat_entry *);
187:	static void fat32_ent_put(struct fat_entry *, int);
63:	static void fat32_ent_set_ptr(struct fat_entry *, int);
33:	static void fat_ent_blocknr(struct super_block *, int, int *, sector_t *);
102:	static int fat_ent_bread(struct super_block *, struct fat_entry *, int, sector_t);
683:	static void fat_ent_reada(struct super_block *, struct fatent_ra *, struct fat_entry *);
376:	static int fat_mirror_bhs(struct super_block *, struct buffer_head **, int);
755:	static int fat_trim_clusters(struct super_block *, u32, u32);

File fs/fat/file.c:
186:	int fat_file_fsync(struct file *, loff_t, loff_t, int);
156:	long fat_generic_ioctl(struct file *, unsigned int, unsigned long);
398:	int fat_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
480:	int fat_setattr(struct user_namespace *, struct dentry *, struct iattr *);
379:	void fat_truncate_blocks(struct inode *, loff_t);
217:	static int fat_cont_expand(struct inode *, loff_t);
260:	static long fat_fallocate(struct file *, int, loff_t, loff_t);
175:	static int fat_file_release(struct inode *, struct file *);

File fs/fat/inode.c:
104:	int fat_add_cluster(struct inode *);
401:	void fat_attach(struct inode *, loff_t);
334:	int fat_block_truncate_page(struct inode *, loff_t);
588:	struct inode *fat_build_inode(struct super_block *, struct msdos_dir_entry *, loff_t);
430:	void fat_detach(struct inode *);
512:	int fat_fill_inode(struct inode *, struct msdos_dir_entry *);
1599:	int fat_fill_super(struct super_block *, void *, int, int, void (*)(struct super_block *));
1927:	int fat_flush_inodes(struct super_block *, struct inode *, struct inode *);
446:	struct inode *fat_iget(struct super_block *, loff_t);
919:	int fat_sync_inode(struct inode *);
846:	static int __fat_write_inode(struct inode *, int);
315:	static sector_t _fat_bmap(struct address_space *, sector_t);
719:	static void delayed_free(struct callback_head *);
1961:	static void exit_fat_fs(void);
742:	static struct inode *fat_alloc_inode(struct super_block *);
792:	static void fat_destroy_inodecache(void);
255:	static ssize_t fat_direct_IO(struct kiocb *, struct iov_iter *);
648:	static void fat_evict_inode(struct inode *);
762:	static void fat_free_inode(struct inode *);
183:	static int fat_get_block(struct inode *, sector_t, struct buffer_head *, int);
290:	static int fat_get_block_bmap(struct inode *, sector_t, struct buffer_head *, int);
728:	static void fat_put_super(struct super_block *);
203:	static int fat_read_folio(struct file *, struct folio *);
1382:	static int fat_read_root(struct inode *);
208:	static void fat_readahead(struct readahead_control *);
802:	static int fat_remount(struct super_block *, int *, char *);
663:	static void fat_set_state(struct super_block *, unsigned int, unsigned int);
939:	static int fat_show_options(struct seq_file *, struct dentry *);
821:	static int fat_statfs(struct dentry *, struct kstatfs *);
223:	static int fat_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
238:	static int fat_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
903:	static int fat_write_inode(struct inode *, struct writeback_control *);
197:	static int fat_writepages(struct address_space *, struct writeback_control *);
1942:	static int init_fat_fs(void);
767:	static void init_once(void *);

File fs/fat/misc.c:
21:	void __fat_fs_error(struct super_block *, int, const char *, ...);
54:	void _fat_msg(struct super_block *, const char *, const char *, ...);
107:	int fat_chain_add(struct inode *, int, int);
68:	int fat_clusters_flush(struct super_block *);
364:	int fat_sync_bhs(struct buffer_head **, int);
204:	void fat_time_fat2unix(struct msdos_sb_info *, struct timespec64 *, __le16, __le16, u8);
243:	void fat_time_unix2fat(struct msdos_sb_info *, struct timespec64 *, __le16 *, __le16 *, u8 *);
287:	struct timespec64 fat_truncate_atime(const struct msdos_sb_info *, const struct timespec64 *);
304:	struct timespec64 fat_truncate_mtime(const struct msdos_sb_info *, const struct timespec64 *);
314:	int fat_truncate_time(struct inode *, struct timespec64 *, int);
341:	int fat_update_time(struct inode *, struct timespec64 *, int);

File fs/fat/namei_vfat.c:
1224:	static void exit_vfat_fs(void);
1219:	static int init_vfat_fs(void);
1189:	static void setup(struct super_block *);
656:	static int vfat_add_entry(struct inode *, const struct qstr *, int, int, struct timespec64 *, struct fat_slot_info *);
174:	static int vfat_cmp(const struct dentry *, unsigned int, const char *, const struct qstr *);
155:	static int vfat_cmpi(const struct dentry *, unsigned int, const char *, const struct qstr *);
759:	static int vfat_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
1198:	static int vfat_fill_super(struct super_block *, void *, int);
122:	static int vfat_hash(const struct dentry *, struct qstr *);
134:	static int vfat_hashi(const struct dentry *, struct qstr *);
701:	static struct dentry *vfat_lookup(struct inode *, struct dentry *, unsigned int);
847:	static int vfat_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
1203:	static struct dentry *vfat_mount(struct file_system_type *, int, const char *, void *);
1161:	static int vfat_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
56:	static int vfat_revalidate(struct dentry *, unsigned int);
67:	static int vfat_revalidate_ci(struct dentry *, unsigned int);
790:	static int vfat_rmdir(struct inode *, struct dentry *);
821:	static int vfat_unlink(struct inode *, struct dentry *);

File fs/fat/nfs.c:
56:	static struct inode *__fat_nfs_get_inode(struct super_block *, u64, u32, loff_t);
100:	static int fat_encode_fh_nostale(struct inode *, __u32 *, int *, struct inode *);
142:	static struct dentry *fat_fh_to_dentry(struct super_block *, struct fid *, int, int);
149:	static struct dentry *fat_fh_to_dentry_nostale(struct super_block *, struct fid *, int, int);
180:	static struct dentry *fat_fh_to_parent(struct super_block *, struct fid *, int, int);
187:	static struct dentry *fat_fh_to_parent_nostale(struct super_block *, struct fid *, int, int);
262:	static struct dentry *fat_get_parent(struct dentry *);
92:	static struct inode *fat_nfs_get_inode(struct super_block *, u64, u32);

File fs/fcntl.c:
439:	long __arm64_sys_fcntl(const struct pt_regs *);
106:	void __f_setown(struct file *, struct pid *, enum pid_type, int);
145:	void f_delown(struct file *);
150:	pid_t f_getown(struct file *);
114:	int f_setown(struct file *, unsigned long, int);
888:	struct fasync_struct *fasync_alloc(void);
898:	void fasync_free(struct fasync_struct *);
973:	int fasync_helper(int, struct file *, int, struct fasync_struct **);
910:	struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
862:	int fasync_remove_entry(struct file *, struct fasync_struct **);
1010:	void kill_fasync(struct fasync_struct **, int, int);
771:	void send_sigio(struct fown_struct *, int, int);
809:	int send_sigurg(struct fown_struct *);
88:	static void f_modown(struct file *, struct pid *, enum pid_type, int);
847:	static void fasync_free_rcu(struct callback_head *);
1023:	static int fcntl_init(void);
715:	static void send_sigio_to_task(struct task_struct *, struct fown_struct *, int, int, enum pid_type);

File fs/fhandle.c:
93:	long __arm64_sys_name_to_handle_at(const struct pt_regs *);
256:	long __arm64_sys_open_by_handle_at(const struct pt_regs *);
134:	static int vfs_dentry_acceptable(void *, struct dentry *);

File fs/file.c:
1269:	long __arm64_sys_dup(const struct pt_regs *);
1254:	long __arm64_sys_dup2(const struct pt_regs *);
1249:	long __arm64_sys_dup3(const struct pt_regs *);
796:	struct file *__close_fd_get_file(unsigned int);
729:	int __close_range(unsigned int, unsigned int, unsigned int);
1052:	void __f_unlock_pos(struct file *);
1027:	unsigned long __fdget(unsigned int);
1038:	unsigned long __fdget_pos(unsigned int);
1033:	unsigned long __fdget_raw(unsigned int);
557:	int __get_unused_fd_flags(unsigned int, unsigned long);
1169:	int __receive_fd(struct file *, int *, unsigned int);
653:	int close_fd(unsigned int);
805:	struct file *close_fd_get_file(unsigned int);
817:	void do_close_on_exec(struct files_struct *);
316:	struct files_struct *dup_fd(struct files_struct *, unsigned int, int *);
456:	void exit_files(struct task_struct *);
1284:	int f_dupfd(unsigned int, struct file *, unsigned int);
602:	void fd_install(unsigned int, struct file *);
924:	struct file *fget(unsigned int);
930:	struct file *fget_raw(unsigned int);
936:	struct file *fget_task(struct task_struct *, unsigned int);
1076:	bool get_close_on_exec(unsigned int);
562:	int get_unused_fd_flags(unsigned int);
1298:	int iterate_fd(struct files_struct *, unsigned int, int (*)(const void *, struct file *, unsigned int), const void *);
444:	void put_files_struct(struct files_struct *);
576:	void put_unused_fd(unsigned int);
1209:	int receive_fd(struct file *, unsigned int);
1195:	int receive_fd_replace(int, struct file *, unsigned int);
1132:	int replace_fd(unsigned int, struct file *, unsigned int);
1063:	void set_close_on_exec(unsigned int, int);
948:	struct file *task_lookup_fd_rcu(struct task_struct *, unsigned int);
963:	struct file *task_lookup_next_fd_rcu(struct task_struct *, unsigned int *);
907:	static struct file *__fget_files(struct files_struct *, unsigned int, fmode_t);
34:	static void __free_fdtable(struct fdtable *);
499:	static int alloc_fd(unsigned int, unsigned int, unsigned int);
105:	static struct fdtable *alloc_fdtable(unsigned int);
1088:	static int do_dup2(struct files_struct *, struct file *, unsigned int, unsigned int);
214:	static int expand_files(struct files_struct *, unsigned int);
41:	static void free_fdtable_rcu(struct callback_head *);
1215:	static int ksys_dup3(unsigned int, unsigned int, int);
301:	static unsigned int sane_fdtable_size(struct fdtable *, unsigned int);

File fs/file_table.c:
398:	void __fput_sync(struct file *);
170:	struct file *alloc_empty_file(int, const struct cred *);
207:	struct file *alloc_empty_file_noaccount(int, const struct cred *);
281:	struct file *alloc_file_clone(struct file *, int, const struct file_operations *);
254:	struct file *alloc_file_pseudo(struct inode *, struct vfsmount *, const char *, int, const struct file_operations *);
410:	void files_init(void);
421:	void files_maxfiles_init(void);
361:	void flush_delayed_fput(void);
369:	void fput(struct file *);
73:	unsigned long get_max_files(void);
346:	static void ____fput(struct callback_head *);
294:	static void __fput(struct file *);
224:	static struct file *alloc_file(const struct path *, int, const struct file_operations *);
337:	static void delayed_fput(struct work_struct *);
46:	static void file_free_rcu(struct callback_head *);
120:	static int init_fs_stat_sysctls(void);
84:	static int proc_nr_files(struct ctl_table *, int, void *, size_t *, loff_t *);

File fs/filesystems.c:
191:	long __arm64_sys_sysfs(const struct pt_regs *);
38:	struct file_system_type *get_filesystem(struct file_system_type *);
273:	struct file_system_type *get_fs_type(const char *);
212:	int list_bdev_fs_names(char *, size_t);
44:	void put_filesystem(struct file_system_type *);
72:	int register_filesystem(struct file_system_type *);
108:	int unregister_filesystem(struct file_system_type *);
237:	static int filesystems_proc_show(struct seq_file *, void *);
253:	static int proc_filesystems_init(void);

File fs/fs-writeback.c:
240:	void __inode_attach_wb(struct inode *, struct page *);
2387:	void __mark_inode_dirty(struct inode *, int);
1016:	int cgroup_writeback_by_id(u64, int, enum wb_reason, struct wb_completion *);
1097:	void cgroup_writeback_umount(void);
624:	bool cleanup_offline_cgwb(struct bdi_writeback *);
2349:	int dirtytime_interval_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1235:	void inode_io_list_del(struct inode *);
1481:	void inode_wait_for_writeback(struct inode *);
1272:	void sb_clear_inode_writeback(struct inode *);
1254:	void sb_mark_inode_writeback(struct inode *);
2768:	int sync_inode_metadata(struct inode *, int);
2699:	void sync_inodes_sb(struct super_block *);
2682:	void try_to_writeback_inodes_sb(struct super_block *, enum wb_reason);
2293:	void wakeup_flusher_threads(enum wb_reason);
2282:	void wakeup_flusher_threads_bdi(struct backing_dev_info *, enum wb_reason);
1222:	void wb_start_background_writeback(struct bdi_writeback *);
189:	void wb_wait_for_completion(struct wb_completion *);
2229:	void wb_workfn(struct work_struct *);
859:	void wbc_account_cgroup_owner(struct writeback_control *, struct page *, size_t);
693:	void wbc_attach_and_unlock_inode(struct writeback_control *, struct inode *);
763:	void wbc_detach_inode(struct writeback_control *);
2742:	int write_inode_now(struct inode *, int);
2669:	void writeback_inodes_sb(struct super_block *, enum wb_reason);
2652:	void writeback_inodes_sb_nr(struct super_block *, unsigned long, enum wb_reason);
2270:	static void __wakeup_flusher_threads_bdi(struct backing_dev_info *, enum wb_reason);
1941:	static long __writeback_inodes_wb(struct bdi_writeback *, struct wb_writeback_work *);
1587:	static int __writeback_single_inode(struct inode *, struct writeback_control *);
938:	static void bdi_split_work_to_wbs(struct backing_dev_info *, struct wb_writeback_work *, bool);
1115:	static int cgroup_writeback_init(void);
279:	static void inode_cgwb_move_to_attached(struct inode *, struct bdi_writeback *);
118:	static bool inode_io_list_move_locked(struct inode *, struct bdi_writeback *, struct list_head *);
560:	static void inode_switch_wbs(struct inode *, int);
466:	static void inode_switch_wbs_work_fn(struct work_struct *);
303:	static struct bdi_writeback *locked_inode_to_wb_and_lock_list(struct inode *);
1365:	static int move_expired_inodes(struct list_head *, struct list_head *, unsigned long);
1427:	static void queue_io(struct bdi_writeback *, struct wb_writeback_work *, unsigned long);
1296:	static void redirty_tail_locked(struct inode *, struct bdi_writeback *);
1331:	static void requeue_io(struct inode *, struct bdi_writeback *);
2342:	static int start_dirtytime_writeback(void);
2326:	static void wakeup_dirtytime_writeback(struct work_struct *);
160:	static void wb_queue_work(struct bdi_writeback *, struct wb_writeback_work *);
2012:	static long wb_writeback(struct bdi_writeback *, struct wb_writeback_work *);
1975:	static long writeback_inodes_wb(struct bdi_writeback *, long, enum wb_reason);
1796:	static long writeback_sb_inodes(struct super_block *, struct bdi_writeback *, struct wb_writeback_work *);
1681:	static int writeback_single_inode(struct inode *, struct writeback_control *);

File fs/fs_context.c:
325:	void fc_drop_locked(struct fs_context *);
699:	int finish_clean_context(struct fs_context *);
301:	struct fs_context *fs_context_for_mount(struct file_system_type *, unsigned int);
309:	struct fs_context *fs_context_for_reconfigure(struct dentry *, unsigned int, unsigned int);
318:	struct fs_context *fs_context_for_submount(struct file_system_type *, struct dentry *);
201:	int generic_parse_monolithic(struct fs_context *, void *);
385:	void logfc(struct fc_log *, const char *, char, const char *, ...);
659:	int parse_monolithic_mount_data(struct fs_context *, void *);
457:	void put_fs_context(struct fs_context *);
683:	void vfs_clean_context(struct fs_context *);
339:	struct fs_context *vfs_dup_fs_context(struct fs_context *);
127:	int vfs_parse_fs_param(struct fs_context *, struct fs_parameter *);
94:	int vfs_parse_fs_param_source(struct fs_context *, struct fs_parameter *);
166:	int vfs_parse_fs_string(struct fs_context *, const char *, const char *, size_t);
247:	static struct fs_context *alloc_fs_context(struct file_system_type *, struct dentry *, unsigned int, unsigned int, enum fs_context_purpose);
499:	static int legacy_fs_context_dup(struct fs_context *, struct fs_context *);
485:	static void legacy_fs_context_free(struct fs_context *);
604:	static int legacy_get_tree(struct fs_context *);
650:	static int legacy_init_fs_context(struct fs_context *);
582:	static int legacy_parse_monolithic(struct fs_context *, void *);
525:	static int legacy_parse_param(struct fs_context *, struct fs_parameter *);
625:	static int legacy_reconfigure(struct fs_context *);

File fs/fs_parser.c:
103:	int __fs_parse(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
144:	int fs_lookup_param(struct fs_context *, struct fs_parameter *, bool, unsigned int, struct path *);
279:	int fs_param_is_blob(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
311:	int fs_param_is_blockdev(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
197:	int fs_param_is_bool(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
253:	int fs_param_is_enum(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
288:	int fs_param_is_fd(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
318:	int fs_param_is_path(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
227:	int fs_param_is_s32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
269:	int fs_param_is_string(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
213:	int fs_param_is_u32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
240:	int fs_param_is_u64(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
41:	int lookup_constant(const struct constant_table *, const char *, int);

File fs/fs_pin.c:
85:	void group_pin_kill(struct hlist_head *);
71:	void mnt_pin_kill(struct mount *);
22:	void pin_insert(struct fs_pin *, struct vfsmount *);
30:	void pin_kill(struct fs_pin *);
10:	void pin_remove(struct fs_pin *);

File fs/fs_struct.c:
58:	void chroot_fs_refs(const struct path *, const struct path *);
112:	struct fs_struct *copy_fs_struct(struct fs_struct *);
156:	int current_umask(void);
95:	void exit_fs(struct task_struct *);
88:	void free_fs_struct(struct fs_struct *);
34:	void set_fs_pwd(struct fs_struct *, const struct path *);
15:	void set_fs_root(struct fs_struct *, const struct path *);
133:	int unshare_fs_struct(void);

File fs/fs_types.c:
37:	unsigned char fs_ftype_to_dtype(unsigned int);
101:	unsigned char fs_umode_to_dtype(umode_t);
77:	unsigned char fs_umode_to_ftype(umode_t);

File fs/fsopen.c:
314:	long __arm64_sys_fsconfig(const struct pt_regs *);
115:	long __arm64_sys_fsopen(const struct pt_regs *);
158:	long __arm64_sys_fspick(const struct pt_regs *);
24:	static ssize_t fscontext_read(struct file *, char *, size_t, loff_t *);
67:	static int fscontext_release(struct inode *, struct file *);

File fs/hugetlbfs/inode.c:
235:	unsigned long generic_hugetlb_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1576:	struct file *hugetlb_file_setup(const char *, size_t, vm_flags_t, int, int);
277:	static unsigned long hugetlb_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
523:	static void hugetlb_vmdelete_list(struct rb_root_cached *, unsigned long, unsigned long, zap_flags_t);
1233:	static struct inode *hugetlbfs_alloc_inode(struct super_block *);
1046:	static int hugetlbfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
1265:	static void hugetlbfs_destroy_inode(struct inode *);
1117:	static int hugetlbfs_error_remove_page(struct address_space *, struct page *);
656:	static void hugetlbfs_evict_inode(struct inode *);
769:	static long hugetlbfs_fallocate(struct file *, int, loff_t, loff_t);
119:	static int hugetlbfs_file_mmap(struct file *, struct vm_area_struct *);
1454:	static int hugetlbfs_fill_super(struct super_block *, struct fs_context *);
1260:	static void hugetlbfs_free_inode(struct inode *);
1514:	static void hugetlbfs_fs_context_free(struct fs_context *);
961:	static struct inode *hugetlbfs_get_inode(struct super_block *, struct inode *, umode_t, dev_t);
1506:	static int hugetlbfs_get_tree(struct fs_context *);
1221:	static void hugetlbfs_inc_free_inodes(struct hugetlbfs_sb_info *);
1525:	static int hugetlbfs_init_fs_context(struct fs_context *);
1090:	static int hugetlbfs_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
1036:	static int hugetlbfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
1022:	static int hugetlbfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
1349:	static int hugetlbfs_parse_param(struct fs_context *, struct fs_parameter *);
1192:	static void hugetlbfs_put_super(struct super_block *);
289:	static ssize_t hugetlbfs_read_iter(struct kiocb *, struct iov_iter *);
901:	static int hugetlbfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
1126:	static int hugetlbfs_show_options(struct seq_file *, struct dentry *);
1163:	static int hugetlbfs_statfs(struct dentry *, struct kstatfs *);
1067:	static int hugetlbfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
1053:	static int hugetlbfs_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
357:	static int hugetlbfs_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
365:	static int hugetlbfs_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
693:	static void hugetlbfs_zero_partial_page(struct hstate *, struct address_space *, loff_t, loff_t);
1649:	static int init_hugetlbfs_fs(void);
1280:	static void init_once(void *);
1629:	static struct vfsmount *mount_one_hugetlbfs(struct hstate *);
616:	static void remove_inode_hugepages(struct inode *, loff_t, loff_t);

File fs/init.c:
44:	int init_chdir(const char *);
100:	int init_chmod(const char *, umode_t);
82:	int init_chown(const char *, uid_t, gid_t, int);
59:	int init_chroot(const char *);
260:	int init_dup(struct file *);
113:	int init_eaccess(const char *);
166:	int init_link(const char *, const char *);
223:	int init_mkdir(const char *, umode_t);
141:	int init_mknod(const char *, umode_t, unsigned int);
16:	int init_mount(const char *, const char *, const char *, unsigned long, void *);
242:	int init_rmdir(const char *);
126:	int init_stat(const char *, struct kstat *, int);
201:	int init_symlink(const char *, const char *);
30:	int init_umount(const char *, int);
218:	int init_unlink(const char *);
247:	int init_utimes(char *, struct timespec64 *);

File fs/inode.c:
280:	void __destroy_inode(struct inode *);
440:	void __iget(struct inode *);
526:	void __insert_inode_hash(struct inode *, unsigned long);
544:	void __remove_inode_hash(struct inode *);
404:	void address_space_init_once(struct address_space *);
1885:	bool atime_needs_update(const struct path *, struct inode *);
1793:	int bmap(struct inode *, sector_t *);
603:	void clear_inode(struct inode *);
345:	void clear_nlink(struct inode *);
2444:	struct timespec64 current_time(struct inode *);
1956:	int dentry_needs_remove_privs(struct user_namespace *, struct dentry *);
1093:	void discard_new_inode(struct inode *);
328:	void drop_nlink(struct inode *);
554:	void dump_mapping(const struct address_space *);
711:	void evict_inodes(struct super_block *);
2144:	int file_modified(struct file *);
2023:	int file_remove_privs(struct file *);
2078:	int file_update_time(struct file *);
1608:	struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
1522:	struct inode *find_inode_nowait(struct super_block *, unsigned long, int (*)(struct inode *, unsigned long, void *), void *);
1570:	struct inode *find_inode_rcu(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
238:	void free_inode_nonrcu(struct inode *);
1691:	int generic_delete_inode(struct inode *);
1838:	int generic_update_time(struct inode *, struct timespec64 *, int);
982:	unsigned int get_next_ino(void);
93:	long get_nr_dirty_inodes(void);
1234:	struct inode *iget5_locked(struct super_block *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
1267:	struct inode *iget_locked(struct super_block *, unsigned long);
1386:	struct inode *igrab(struct inode *);
448:	void ihold(struct inode *);
1477:	struct inode *ilookup(struct super_block *, unsigned long);
1452:	struct inode *ilookup5(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
1421:	struct inode *ilookup5_nowait(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
2471:	bool in_group_or_capable(struct user_namespace *, const struct inode *, vfsgid_t);
384:	void inc_nlink(struct inode *);
2260:	void init_special_inode(struct inode *, umode_t, dev_t);
476:	void inode_add_lru(struct inode *);
2366:	void inode_dio_wait(struct inode *);
2234:	void inode_init(void);
156:	int inode_init_always(struct super_block *, struct inode *);
2214:	void inode_init_early(void);
416:	void inode_init_once(struct inode *);
2293:	void inode_init_owner(struct user_namespace *, struct inode *, const struct inode *, umode_t);
1161:	struct inode *inode_insert5(struct inode *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
2167:	int inode_needs_sync(struct inode *);
2397:	void inode_nohighmem(struct inode *);
2323:	bool inode_owner_or_capable(struct user_namespace *, const struct inode *);
491:	void inode_sb_list_add(struct inode *);
2389:	void inode_set_flags(struct inode *, unsigned int, unsigned int);
1868:	int inode_update_time(struct inode *, struct timespec64 *, int);
1627:	int insert_inode_locked(struct inode *);
1674:	int insert_inode_locked4(struct inode *, unsigned long, int (*)(struct inode *, void *), void *);
761:	int invalidate_inodes(struct super_block *, bool);
1759:	void iput(struct inode *);
1361:	ino_t iunique(struct super_block *, ino_t);
2161:	int kiocb_modified(struct kiocb *);
1115:	void lock_two_nondirectories(struct inode *, struct inode *);
2495:	umode_t mode_strip_sgid(struct user_namespace *, const struct inode *, umode_t);
1040:	struct inode *new_inode(struct super_block *);
1016:	struct inode *new_inode_pseudo(struct super_block *);
889:	long prune_icache_sb(struct super_block *, struct shrink_control *);
362:	void set_nlink(struct inode *, unsigned int);
2412:	struct timespec64 timestamp_truncate(struct timespec64, struct inode *);
1920:	void touch_atime(const struct path *);
1081:	void unlock_new_inode(struct inode *);
1132:	void unlock_two_nondirectories(struct inode *, struct inode *);
1988:	static int __file_remove_privs(struct file *, unsigned int);
2049:	static int __file_update_time(struct file *, struct timespec64 *, int);
454:	static void __inode_add_lru(struct inode *, bool);
302:	static void destroy_inode(struct inode *);
643:	static void evict(struct inode *);
2107:	static int file_modified_flags(struct file *, int);
904:	static struct inode *find_inode(struct super_block *, struct hlist_head *, int (*)(struct inode *, void *), void *);
937:	static struct inode *find_inode_fast(struct super_block *, struct hlist_head *, unsigned long);
244:	static void i_callback(struct callback_head *);
135:	static int init_fs_inode_sysctls(void);
430:	static void init_once(void *);
815:	static enum lru_status inode_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
143:	static int no_open(struct inode *, struct file *);
109:	static int proc_nr_inodes(struct ctl_table *, int, void *, size_t *, loff_t *);
2202:	static int set_ihash_entries(char *);

File fs/ioctl.c:
856:	long __arm64_sys_ioctl(const struct pt_regs *);
543:	int copy_fsxattr_to_user(const struct fileattr *, struct fsxattr *);
115:	int fiemap_fill_next_extent(struct fiemap_extent_info *, u64, u64, u64, u32);
167:	int fiemap_prep(struct inode *, struct fiemap_extent_info *, u64, u64 *, u32);
494:	void fileattr_fill_flags(struct fileattr *, u32);
464:	void fileattr_fill_xflags(struct fileattr *, u32);
525:	int vfs_fileattr_get(struct dentry *, struct fileattr *);
668:	int vfs_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
44:	long vfs_ioctl(struct file *, unsigned int, unsigned long);
269:	static int ioctl_preallocate(struct file *, int, void *);

File fs/kernel_read_file.c:
35:	ssize_t kernel_read_file(struct file *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
174:	ssize_t kernel_read_file_from_fd(int, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
127:	ssize_t kernel_read_file_from_path(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
147:	ssize_t kernel_read_file_from_path_initns(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);

File fs/kernfs/dir.c:
1369:	void kernfs_activate(struct kernfs_node *);
746:	int kernfs_add_one(struct kernfs_node *);
1514:	void kernfs_break_active_protection(struct kernfs_node *);
1023:	struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, void *, const void *);
1057:	struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *, const char *);
934:	struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *, unsigned int, void *);
989:	void kernfs_destroy_root(struct kernfs_root *);
696:	struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *, u64);
885:	struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *, const char *, const void *);
522:	void kernfs_get(struct kernfs_node *);
433:	struct kernfs_node *kernfs_get_active(struct kernfs_node *);
295:	struct kernfs_node *kernfs_get_parent(struct kernfs_node *);
197:	int kernfs_name(struct kernfs_node *, char *, size_t);
669:	struct kernfs_node *kernfs_new_node(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
593:	struct kernfs_node *kernfs_node_from_dentry(struct dentry *);
224:	int kernfs_path_from_node(struct kernfs_node *, struct kernfs_node *, char *, size_t);
537:	void kernfs_put(struct kernfs_node *);
453:	void kernfs_put_active(struct kernfs_node *);
1486:	void kernfs_remove(struct kernfs_node *);
1644:	int kernfs_remove_by_name_ns(struct kernfs_node *, const char *, const void *);
1582:	bool kernfs_remove_self(struct kernfs_node *);
1683:	int kernfs_rename_ns(struct kernfs_node *, struct kernfs_node *, const char *, const void *);
1006:	struct kernfs_node *kernfs_root_to_node(struct kernfs_root *);
1395:	void kernfs_show(struct kernfs_node *, bool);
1538:	void kernfs_unbreak_active_protection(struct kernfs_node *);
911:	struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *, const char *, const void *);
243:	void pr_cont_kernfs_name(struct kernfs_node *);
261:	void pr_cont_kernfs_path(struct kernfs_node *);
600:	static struct kernfs_node *__kernfs_new_node(struct kernfs_root *, struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
1418:	static void __kernfs_remove(struct kernfs_node *);
1760:	static int kernfs_dir_fop_release(struct inode *, struct file *);
1766:	static struct kernfs_node *kernfs_dir_pos(const void *, struct kernfs_node *, loff_t, struct kernfs_node *);
1083:	static int kernfs_dop_revalidate(struct dentry *, unsigned int);
477:	static void kernfs_drain(struct kernfs_node *);
810:	static struct kernfs_node *kernfs_find_ns(struct kernfs_node *, const unsigned char *, const void *);
1816:	static int kernfs_fop_readdir(struct file *, struct dir_context *);
1160:	static struct dentry *kernfs_iop_lookup(struct inode *, struct dentry *, unsigned int);
1203:	static int kernfs_iop_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
1241:	static int kernfs_iop_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1223:	static int kernfs_iop_rmdir(struct inode *, struct dentry *);
364:	static int kernfs_link_sibling(struct kernfs_node *);

File fs/kernfs/file.c:
1033:	struct kernfs_node *__kernfs_create_file(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, loff_t, const struct kernfs_ops *, void *, const void *, struct lock_class_key *);
832:	void kernfs_drain_open_files(struct kernfs_node *);
876:	__poll_t kernfs_generic_poll(struct kernfs_open_file *, poll_table *);
975:	void kernfs_notify(struct kernfs_node *);
813:	bool kernfs_should_drain_open_files(struct kernfs_node *);
488:	static int kernfs_fop_mmap(struct file *, struct vm_area_struct *);
639:	static int kernfs_fop_open(struct inode *, struct file *);
888:	static __poll_t kernfs_fop_poll(struct file *, poll_table *);
276:	static ssize_t kernfs_fop_read_iter(struct kiocb *, struct iov_iter *);
792:	static int kernfs_fop_release(struct inode *, struct file *);
293:	static ssize_t kernfs_fop_write_iter(struct kiocb *, struct iov_iter *);
906:	static void kernfs_notify_workfn(struct work_struct *);
169:	static void *kernfs_seq_next(struct seq_file *, void *, loff_t *);
199:	static int kernfs_seq_show(struct seq_file *, void *);
145:	static void *kernfs_seq_start(struct seq_file *, loff_t *);
190:	static void kernfs_seq_stop(struct seq_file *, void *);
605:	static void kernfs_unlink_open_file(struct kernfs_node *, struct kernfs_open_file *, bool);
411:	static int kernfs_vma_access(struct vm_area_struct *, unsigned long, void *, int, int);
369:	static vm_fault_t kernfs_vma_fault(struct vm_fault *);
454:	static struct mempolicy *kernfs_vma_get_policy(struct vm_area_struct *, unsigned long);
352:	static void kernfs_vma_open(struct vm_area_struct *);
389:	static vm_fault_t kernfs_vma_page_mkwrite(struct vm_fault *);
433:	static int kernfs_vma_set_policy(struct vm_area_struct *, struct mempolicy *);

File fs/kernfs/inode.c:
68:	int __kernfs_setattr(struct kernfs_node *, const struct iattr *);
266:	void kernfs_evict_inode(struct inode *);
248:	struct inode *kernfs_get_inode(struct super_block *, struct kernfs_node *);
184:	int kernfs_iop_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
139:	ssize_t kernfs_iop_listxattr(struct dentry *, char *, size_t);
275:	int kernfs_iop_permission(struct user_namespace *, struct inode *, int);
110:	int kernfs_iop_setattr(struct user_namespace *, struct dentry *, struct iattr *);
99:	int kernfs_setattr(struct kernfs_node *, const struct iattr *);
296:	int kernfs_xattr_get(struct kernfs_node *, const char *, void *, size_t);
306:	int kernfs_xattr_set(struct kernfs_node *, const char *, const void *, size_t, int);
27:	static struct kernfs_iattrs *__kernfs_iattrs(struct kernfs_node *, int);
393:	static int kernfs_vfs_user_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
316:	static int kernfs_vfs_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
326:	static int kernfs_vfs_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/kernfs/mount.c:
363:	void kernfs_free_fs_context(struct fs_context *);
321:	int kernfs_get_tree(struct fs_context *);
411:	void kernfs_init(void);
378:	void kernfs_kill_sb(struct super_block *);
198:	struct dentry *kernfs_node_dentry(struct kernfs_node *, struct super_block *);
159:	struct kernfs_root *kernfs_root_from_sb(struct super_block *);
303:	const void *kernfs_super_ns(struct super_block *);
72:	static struct dentry *__kernfs_fh_to_dentry(struct super_block *, struct fid *, int, int, bool);
57:	static int kernfs_encode_fh(struct inode *, __u32 *, int *, struct inode *);
124:	static struct dentry *kernfs_fh_to_dentry(struct super_block *, struct fid *, int, int);
131:	static struct dentry *kernfs_fh_to_parent(struct super_block *, struct fid *, int, int);
138:	static struct dentry *kernfs_get_parent_dentry(struct dentry *);
403:	static void kernfs_lock_init(void);
289:	static int kernfs_set_super(struct super_block *, struct fs_context *);
25:	static int kernfs_sop_show_options(struct seq_file *, struct dentry *);
35:	static int kernfs_sop_show_path(struct seq_file *, struct dentry *);
281:	static int kernfs_test_super(struct super_block *, struct fs_context *);

File fs/kernfs/symlink.c:
25:	struct kernfs_node *kernfs_create_link(struct kernfs_node *, const char *, struct kernfs_node *);
126:	static const char *kernfs_iop_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/libfs.c:
1125:	int __generic_file_fsync(struct file *, loff_t, loff_t, int);
1237:	struct inode *alloc_anon_inode(struct super_block *);
55:	int always_delete_dentry(const struct dentry *);
89:	int dcache_dir_close(struct inode *, struct file *);
138:	loff_t dcache_dir_lseek(struct file *, loff_t, int);
81:	int dcache_dir_open(struct inode *, struct file *);
189:	int dcache_readdir(struct file *, struct dir_context *);
1189:	int generic_check_addressable(unsigned int, u64);
1060:	struct dentry *generic_fh_to_dentry(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1093:	struct dentry *generic_fh_to_parent(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1167:	int generic_file_fsync(struct file *, loff_t, loff_t, int);
226:	ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
1512:	void generic_set_encrypted_ci_d_ops(struct dentry *);
370:	struct pseudo_fs_context *init_pseudo(struct fs_context *, unsigned long);
1558:	bool inode_maybe_inc_iversion(struct inode *, bool);
1382:	bool is_empty_dir_inode(struct inode *);
1231:	void kfree_link(void *);
1366:	void make_empty_dir_inode(struct inode *);
827:	ssize_t memory_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
1218:	ssize_t noop_direct_IO(struct kiocb *, struct iov_iter *);
1212:	int noop_fsync(struct file *, loff_t, loff_t, int);
930:	int simple_attr_open(struct inode *, struct file *, int (*)(void *, u64 *), int (*)(void *, u64), const char *);
960:	ssize_t simple_attr_read(struct file *, char *, size_t, loff_t *);
952:	int simple_attr_release(struct inode *, struct file *);
1034:	ssize_t simple_attr_write(struct file *, const char *, size_t, loff_t *);
1041:	ssize_t simple_attr_write_signed(struct file *, const char *, size_t, loff_t *);
408:	int simple_empty(struct dentry *);
644:	int simple_fill_super(struct super_block *, unsigned long, const struct tree_descr *);
1298:	const char *simple_get_link(struct dentry *, struct inode *, struct delayed_call *);
31:	int simple_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
395:	int simple_link(struct dentry *, struct inode *, struct dentry *);
70:	struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int);
1277:	int simple_nosetlease(struct file *, long, struct file_lock **, void **);
387:	int simple_open(struct inode *, struct file *);
710:	int simple_pin_fs(struct file_system_type *, struct vfsmount **, int *);
757:	ssize_t simple_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
269:	void simple_recursive_removal(struct dentry *, void (*)(struct dentry *));
731:	void simple_release_fs(struct vfsmount **, int *);
476:	int simple_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
452:	int simple_rename_exchange(struct inode *, struct dentry *, struct inode *, struct dentry *);
440:	int simple_rmdir(struct inode *, struct dentry *);
525:	int simple_setattr(struct user_namespace *, struct dentry *, struct iattr *);
42:	int simple_statfs(struct dentry *, struct kstatfs *);
867:	char *simple_transaction_get(struct file *, const char *, size_t);
899:	ssize_t simple_transaction_read(struct file *, char *, size_t, loff_t *);
909:	int simple_transaction_release(struct inode *, struct file *);
852:	void simple_transaction_set(struct file *, size_t);
429:	int simple_unlink(struct inode *, struct dentry *);
552:	int simple_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
792:	ssize_t simple_write_to_buffer(void *, size_t, loff_t *, const void *, size_t);
1318:	static int empty_dir_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1333:	static ssize_t empty_dir_listxattr(struct dentry *, char *, size_t);
1346:	static loff_t empty_dir_llseek(struct file *, loff_t, int);
1313:	static struct dentry *empty_dir_lookup(struct inode *, struct dentry *, unsigned int);
1352:	static int empty_dir_readdir(struct file *, struct dir_context *);
1327:	static int empty_dir_setattr(struct user_namespace *, struct dentry *, struct iattr *);
320:	static int pseudo_fs_fill_super(struct super_block *, struct fs_context *);
356:	static void pseudo_fs_free(struct fs_context *);
351:	static int pseudo_fs_get_tree(struct fs_context *);
103:	static struct dentry *scan_positives(struct dentry *, struct list_head *, loff_t, struct dentry *);
998:	static ssize_t simple_attr_write_xsigned(struct file *, const char *, size_t, loff_t *, bool);
543:	static int simple_read_folio(struct file *, struct folio *);
598:	static int simple_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);

File fs/locks.c:
2084:	long __arm64_sys_flock(const struct pt_regs *);
1471:	int __break_lease(struct inode *, unsigned int, unsigned int);
1629:	int fcntl_getlease(struct file *);
2224:	int fcntl_getlk(struct file *, unsigned int, struct flock *);
2014:	int fcntl_setlease(unsigned int, struct file *, long);
2349:	int fcntl_setlk(unsigned int, struct file *, unsigned int, struct flock *);
1861:	int generic_setlease(struct file *, long, struct file_lock **, void **);
1585:	void lease_get_mtime(struct inode *, struct timespec64 *);
1373:	int lease_modify(struct file_lock *, int, struct list_head *);
1914:	int lease_register_notifier(struct notifier_block *);
1920:	void lease_unregister_notifier(struct notifier_block *);
268:	struct file_lock *locks_alloc_lock(void);
361:	void locks_copy_conflock(struct file_lock *, struct file_lock *);
380:	void locks_copy_lock(struct file_lock *, struct file_lock *);
694:	int locks_delete_block(struct file_lock *);
332:	void locks_free_lock(struct file_lock *);
248:	void locks_free_lock_context(struct inode *);
351:	void locks_init_lock(struct file_lock *);
2052:	int locks_lock_inode_wait(struct inode *, struct file_lock *);
312:	bool locks_owner_has_blockers(struct file_lock_context *, fl_owner_t);
279:	void locks_release_private(struct file_lock *);
2635:	void locks_remove_file(struct file *);
2554:	void locks_remove_posix(struct file *, fl_owner_t);
1330:	int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
886:	void posix_test_lock(struct file *, struct file_lock *);
2861:	void show_fd_locks(struct seq_file *, struct file *, struct files_struct *);
2666:	int vfs_cancel_lock(struct file *, struct file_lock *);
2682:	bool vfs_inode_has_locks(struct inode *);
2297:	int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
1968:	int vfs_setlease(struct file *, long, struct file_lock **, void **);
2147:	int vfs_test_lock(struct file *, struct file_lock *);
754:	static void __locks_insert_block(struct file_lock *, struct file_lock *, bool (*)(struct file_lock *, struct file_lock *));
2307:	static int do_lock_file_wait(struct file *, unsigned int, struct file_lock *);
2921:	static int filelock_init(void);
1006:	static int flock_lock_inode(struct inode *, struct file_lock *);
873:	static bool flock_locks_conflict(struct file_lock *, struct file_lock *);
116:	static int init_fs_locks_sysctls(void);
569:	static struct file_lock *lease_alloc(struct file *, long);
519:	static bool lease_break_callback(struct file_lock *);
526:	static void lease_setup(struct file_lock *, void **);
1421:	static bool leases_conflict(struct file_lock *, struct file_lock *);
2707:	static void lock_get_status(struct seq_file *, struct file_lock *, loff_t, char *, int);
215:	static void locks_check_ctx_lists(struct inode *);
829:	static void locks_delete_lock_ctx(struct file_lock *, struct list_head *);
340:	static void locks_dispose_list(struct list_head *);
205:	static void locks_dump_ctx_list(struct list_head *, char *);
2890:	static void *locks_next(struct seq_file *, void *, loff_t *);
2797:	static int locks_show(struct seq_file *, void *);
2879:	static void *locks_start(struct seq_file *, loff_t *);
2898:	static void locks_stop(struct seq_file *, void *);
821:	static void locks_unlink_lock_ctx(struct file_lock *);
796:	static void locks_wake_up_blocks(struct file_lock *);
1078:	static int posix_lock_inode(struct inode *, struct file_lock *, struct file_lock *);
2188:	static int posix_lock_to_flock(struct flock *, struct file_lock *);
854:	static bool posix_locks_conflict(struct file_lock *, struct file_lock *);
2912:	static int proc_locks_init(void);
1405:	static void time_out_leases(struct inode *, struct list_head *);

File fs/mpage.c:
443:	void clean_page_buffers(struct page *);
371:	int mpage_read_folio(struct folio *, get_block_t *);
349:	void mpage_readahead(struct readahead_control *, get_block_t *);
654:	int mpage_writepages(struct address_space *, struct writeback_control *, get_block_t *);
448:	static int __mpage_writepage(struct page *, struct writeback_control *, void *);
413:	static void clean_buffers(struct page *, unsigned int);
133:	static struct bio *do_mpage_readpage(struct mpage_readpage_args *);
46:	static void mpage_end_io(struct bio *);

File fs/namei.c:
4632:	long __arm64_sys_link(const struct pt_regs *);
4625:	long __arm64_sys_linkat(const struct pt_regs *);
4079:	long __arm64_sys_mkdir(const struct pt_regs *);
4074:	long __arm64_sys_mkdirat(const struct pt_regs *);
3996:	long __arm64_sys_mknod(const struct pt_regs *);
3990:	long __arm64_sys_mknodat(const struct pt_regs *);
4974:	long __arm64_sys_rename(const struct pt_regs *);
4967:	long __arm64_sys_renameat(const struct pt_regs *);
4960:	long __arm64_sys_renameat2(const struct pt_regs *);
4199:	long __arm64_sys_rmdir(const struct pt_regs *);
4450:	long __arm64_sys_symlink(const struct pt_regs *);
4444:	long __arm64_sys_symlinkat(const struct pt_regs *);
4366:	long __arm64_sys_unlink(const struct pt_regs *);
4356:	long __arm64_sys_unlinkat(const struct pt_regs *);
2883:	int __check_sticky(struct user_namespace *, struct inode *, struct inode *);
3750:	struct file *do_file_open_root(const struct path *, const char *, const struct open_flags *);
3733:	struct file *do_filp_open(int, struct filename *, const struct open_flags *);
4553:	int do_linkat(int, struct filename *, int, struct filename *, int);
4043:	int do_mkdirat(int, struct filename *, umode_t);
4818:	int do_renameat2(int, struct filename *, int, struct filename *, unsigned int);
4139:	int do_rmdir(int, struct filename *);
4408:	int do_symlinkat(struct filename *, int, struct filename *);
4280:	int do_unlinkat(int, struct filename *);
3854:	void done_path_create(struct path *, struct dentry *);
2495:	int filename_lookup(int, struct filename *, unsigned int, struct path *, struct path *);
1461:	int follow_down(struct path *);
1440:	int follow_down_one(struct path *);
1267:	int follow_up(struct path *);
2108:	unsigned int full_name_hash(const void *, const char *, unsigned int);
396:	int generic_permission(struct user_namespace *, struct inode *, int);
216:	struct filename *getname(const char *);
129:	struct filename *getname_flags(const char *, int, int *);
222:	struct filename *getname_kernel(const char *);
208:	struct filename *getname_uflags(const char *, int);
2129:	u64 hashlen_string(const void *, const char *);
500:	int inode_permission(struct user_namespace *, struct inode *, int);
2590:	int kern_path(const char *, unsigned int, struct path *);
3843:	struct dentry *kern_path_create(int, const char *, struct path *, unsigned int);
2581:	struct dentry *kern_path_locked(const char *, struct path *);
2985:	struct dentry *lock_rename(struct dentry *, struct dentry *);
2727:	struct dentry *lookup_one(struct user_namespace *, const char *, struct dentry *, int);
2698:	struct dentry *lookup_one_len(const char *, struct dentry *, int);
2823:	struct dentry *lookup_one_len_unlocked(const char *, struct dentry *, int);
2797:	struct dentry *lookup_one_positive_unlocked(struct user_namespace *, const char *, struct dentry *, int);
2758:	struct dentry *lookup_one_unlocked(struct user_namespace *, const char *, struct dentry *, int);
2838:	struct dentry *lookup_positive_unlocked(const char *, struct dentry *, int);
1181:	int may_linkat(struct user_namespace *, const struct path *);
3143:	bool may_open_dev(const struct path *);
989:	int nd_jump_link(const struct path *);
5062:	const char *page_get_link(struct dentry *, struct inode *, struct delayed_call *);
5091:	void page_put_link(void *);
5097:	int page_readlink(struct dentry *, char *, int);
5108:	int page_symlink(struct inode *, const char *, int);
543:	void path_get(const struct path *);
2846:	int path_pts(struct path *);
556:	void path_put(const struct path *);
257:	void putname(struct filename *);
4980:	int readlink_copy(char *, int, const char *);
2672:	struct dentry *try_lookup_one_len(const char *, struct dentry *, int);
3016:	void unlock_rename(struct dentry *, struct dentry *);
2872:	int user_path_at_empty(int, const char *, unsigned int, struct path *, int *);
3863:	struct dentry *user_path_create(int, const char *, struct path *, unsigned int);
3101:	int vfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
5047:	const char *vfs_get_link(struct dentry *, struct delayed_call *);
4481:	int vfs_link(struct dentry *, struct user_namespace *, struct inode *, struct dentry *, struct inode **);
4016:	int vfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
3890:	int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
3122:	int vfs_mkobj(struct dentry *, umode_t, int (*)(struct dentry *, umode_t, void *), void *);
2609:	int vfs_path_lookup(struct dentry *, struct vfsmount *, const char *, unsigned int, struct path *);
5005:	int vfs_readlink(struct dentry *, char *, int);
4682:	int vfs_rename(struct renamedata *);
4098:	int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
4386:	int vfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
3638:	struct file *vfs_tmpfile_open(struct user_namespace *, const struct path *, umode_t, int, const struct cred *);
4229:	int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *, struct inode **);
1583:	static struct dentry *__lookup_hash(const struct qstr *, struct dentry *, unsigned int);
1658:	static struct dentry *__lookup_slow(const struct qstr *, struct dentry *, unsigned int);
1372:	static int __traverse_mounts(struct path *, unsigned int, bool *, int *, unsigned int);
290:	static int check_acl(struct user_namespace *, struct inode *, int);
1310:	static bool choose_mountpoint(struct mount *, const struct path *, struct path *);
1290:	static bool choose_mountpoint_rcu(struct mount *, const struct path *, struct path *, unsigned int *);
871:	static int complete_walk(struct nameidata *);
3939:	static int do_mknodat(int, struct filename *, umode_t, unsigned int);
3682:	static int do_o_path(struct nameidata *, unsigned int, struct file *);
3657:	static int do_tmpfile(struct nameidata *, unsigned int, const struct open_flags *, struct file *);
658:	static void drop_links(struct nameidata *);
3776:	static struct dentry *filename_create(int, struct filename *, struct path *, unsigned int);
2534:	static int filename_parentat(int, struct filename *, unsigned int, struct path *, struct qstr *, int *);
1938:	static const char *handle_dots(struct nameidata *, int);
2453:	static int handle_lookup_down(struct nameidata *);
1071:	static int init_fs_namei_sysctls(void);
718:	static bool legitimize_links(struct nameidata *);
712:	static bool legitimize_path(struct nameidata *, struct path *, unsigned int);
2238:	static int link_path_walk(const char *, struct nameidata *);
1609:	static struct dentry *lookup_fast(struct nameidata *);
2625:	static int lookup_one_common(struct user_namespace *, const char *, struct dentry *, int, struct qstr *);
1695:	static struct dentry *lookup_slow(const struct qstr *, struct dentry *, unsigned int);
2916:	static int may_delete(struct user_namespace *, struct inode *, struct dentry *, bool);
3149:	static int may_open(struct user_namespace *, const struct path *, int, int);
628:	static bool nd_alloc_stack(struct nameidata *);
953:	static int nd_jump_root(struct nameidata *);
2341:	static const char *path_init(struct nameidata *, unsigned int);
2462:	static int path_lookupat(struct nameidata *, unsigned int, struct path *);
3694:	static struct file *path_openat(struct nameidata *, const struct open_flags *, unsigned int);
2517:	static int path_parentat(struct nameidata *, unsigned int, struct path *);
1746:	static const char *pick_link(struct nameidata *, struct path *, struct inode *, int);
1017:	static void put_link(struct nameidata *);
926:	static int set_root(struct nameidata *);
1826:	static const char *step_into(struct nameidata *, int, struct dentry *);
675:	static void terminate_walk(struct nameidata *);
768:	static bool try_to_unlazy(struct nameidata *);
804:	static bool try_to_unlazy_next(struct nameidata *, struct dentry *);
3586:	static int vfs_tmpfile(struct user_namespace *, const struct path *, struct file *, umode_t);
1976:	static const char *walk_component(struct nameidata *, int);

File fs/namespace.c:
3742:	long __arm64_sys_fsmount(const struct pt_regs *);
3674:	long __arm64_sys_mount(const struct pt_regs *);
4437:	long __arm64_sys_mount_setattr(const struct pt_regs *);
3871:	long __arm64_sys_move_mount(const struct pt_regs *);
2609:	long __arm64_sys_open_tree(const struct pt_regs *);
3974:	long __arm64_sys_pivot_root(const struct pt_regs *);
1933:	long __arm64_sys_umount(const struct pt_regs *);
1839:	void __detach_mounts(struct dentry *);
852:	bool __is_local_mountpoint(struct dentry *);
734:	int __legitimize_mnt(struct vfsmount *, unsigned int);
779:	struct mount *__lookup_mnt(struct vfsmount *, struct dentry *);
568:	void __mnt_drop_write(struct vfsmount *);
590:	void __mnt_drop_write_file(struct file *);
384:	bool __mnt_is_readonly(struct vfsmount *);
449:	int __mnt_want_write(struct vfsmount *);
525:	int __mnt_want_write_file(struct file *);
2116:	struct vfsmount *clone_private_mount(const struct path *);
2047:	struct vfsmount *collect_mounts(const struct path *);
3557:	struct mnt_namespace *copy_mnt_ns(unsigned long, struct mnt_namespace *, struct user_namespace *, struct fs_struct *);
1980:	struct mount *copy_tree(struct mount *, struct dentry *, int);
2217:	int count_mounts(struct mnt_namespace *, struct mount *);
4602:	bool current_chrooted(void);
2065:	void dissolve_on_fput(struct vfsmount *);
3479:	long do_mount(const char *, const char *, const char *, unsigned long, void *);
2083:	void drop_collected_mounts(struct vfsmount *);
1147:	struct vfsmount *fc_mount(struct fs_context *);
3153:	int finish_automount(struct vfsmount *, const struct path *);
1962:	struct ns_common *from_mnt_ns(struct mnt_namespace *);
3929:	bool is_path_reachable(struct mount *, struct dentry *, const struct path *);
2148:	int iterate_mounts(int (*)(struct vfsmount *, void *), void *, struct vfsmount *);
4558:	struct vfsmount *kern_mount(struct file_system_type *);
4573:	void kern_unmount(struct vfsmount *);
4584:	void kern_unmount_array(struct vfsmount **, unsigned int);
806:	struct vfsmount *lookup_mnt(const struct path *);
3243:	void mark_mounts_for_expiry(struct list_head *);
1868:	bool may_mount(void);
1571:	int may_umount(struct vfsmount *);
1534:	int may_umount_tree(struct vfsmount *);
1045:	void mnt_change_mountpoint(struct mount *, struct mountpoint *, struct mount *);
1430:	struct vfsmount *mnt_clone_internal(const struct path *);
1516:	void mnt_cursor_del(struct mnt_namespace *, struct mount *);
583:	void mnt_drop_write(struct vfsmount *);
596:	void mnt_drop_write_file(struct file *);
197:	int mnt_get_count(struct mount *);
227:	struct user_namespace *mnt_idmap_owner(const struct mnt_idmap *);
4515:	void mnt_init(void);
4718:	bool mnt_may_suid(struct vfsmount *);
174:	void mnt_release_group_id(struct mount *);
3228:	void mnt_set_expiry(struct vfsmount *, struct list_head *);
1015:	void mnt_set_mountpoint(struct mount *, struct mountpoint *, struct mount *);
247:	struct user_namespace *mnt_user_ns(const struct vfsmount *);
504:	int mnt_want_write(struct vfsmount *);
548:	int mnt_want_write_file(struct file *);
1392:	struct vfsmount *mntget(struct vfsmount *);
1380:	void mntput(struct vfsmount *);
3637:	struct dentry *mount_subtree(struct vfsmount *, const char *);
4597:	bool our_mnt(struct vfsmount *);
1411:	bool path_is_mountpoint(const struct path *);
3939:	bool path_is_under(const struct path *, const struct path *);
3400:	int path_mount(const char *, struct path *, const char *, unsigned long, void *);
1900:	int path_umount(struct path *, int);
4550:	void put_mnt_ns(struct mnt_namespace *);
685:	int sb_prepare_remount_readonly(struct super_block *);
1120:	struct vfsmount *vfs_create_mount(struct fs_context *);
1158:	struct vfsmount *vfs_kern_mount(struct file_system_type *, int, const char *, void *);
1189:	struct vfsmount *vfs_submount(const struct dentry *, struct file_system_type *, const char *, void *);
1296:	static void __cleanup_mnt(struct callback_head *);
2497:	static struct mount *__do_loopback(struct path *, int);
941:	static void __put_mountpoint(struct mountpoint *, struct list_head *);
3521:	static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *, bool);
311:	static struct mount *alloc_vfsmnt(const char *);
1037:	static void attach_mnt(struct mount *, struct mount *, struct mountpoint *);
2303:	static int attach_recursive_mnt(struct mount *, struct mount *, struct mountpoint *, bool);
2839:	static bool check_for_nsfs_mounts(struct mount *);
1271:	static void cleanup_mnt(struct mount *);
1203:	static struct mount *clone_mnt(struct mount *, struct dentry *, int);
1063:	static void commit_tree(struct mount *);
728:	static void delayed_free_vfsmnt(struct callback_head *);
1302:	static void delayed_mntput(struct work_struct *);
2465:	static int do_change_type(struct path *, int);
2927:	static int do_move_mount(struct path *, struct path *);
3009:	static int do_move_mount_old(struct path *, const char *);
3104:	static int do_new_mount(struct path *, const char *, int, int, const char *, void *);
3503:	static void free_mnt_ns(struct mnt_namespace *);
718:	static void free_vfsmnt(struct mount *);
887:	static struct mountpoint *get_mountpoint(struct dentry *);
2433:	static int graft_tree(struct mount *, struct mount *, struct mountpoint *);
4823:	static int init_fs_namespace_sysctls(void);
4485:	static void init_mount_tree(void);
2200:	static int invent_group_ids(struct mount *, bool);
2163:	static void lock_mnt_tree(struct mount *);
2392:	static struct mountpoint *lock_mount(struct path *);
1479:	static void *m_next(struct seq_file *, void *, loff_t *);
1502:	static int m_show(struct seq_file *, void *);
1460:	static void *m_start(struct seq_file *, loff_t *);
1488:	static void m_stop(struct seq_file *, void *);
183:	static void mnt_add_count(struct mount *, int);
2714:	static void mnt_warn_timestamp_expiry(struct path *, struct vfsmount *);
4731:	static struct ns_common *mntns_get(struct task_struct *);
4752:	static int mntns_install(struct nsset *, struct ns_common *);
4796:	static struct user_namespace *mntns_owner(struct ns_common *);
4747:	static void mntns_put(struct ns_common *);
1312:	static void mntput_no_expire(struct mount *);
4695:	static bool mount_too_revealing(const struct super_block *, int *);
1585:	static void namespace_unlock(void);
956:	static void put_mountpoint(struct mountpoint *);
48:	static int set_mhash_entries(char *);
2707:	static void set_mount_attributes(struct mount *, unsigned int);
58:	static int set_mphash_entries(char *);
2823:	static int tree_contains_unbindable(struct mount *);
1007:	static void umount_mnt(struct mount *);
1654:	static void umount_tree(struct mount *, enum umount_tree_flags);
991:	static struct mountpoint *unhash_mnt(struct mount *);
2421:	static void unlock_mount(struct mountpoint *);

File fs/nls/nls_base.c:
235:	int __register_nls(struct nls_table *, struct module *);
291:	struct nls_table *load_nls(char *);
532:	struct nls_table *load_nls_default(void);
296:	void unload_nls(struct nls_table *);
258:	int unregister_nls(struct nls_table *);
186:	int utf16s_to_utf8s(const wchar_t *, int, enum utf16_endian, u8 *, int);
86:	int utf32_to_utf8(unicode_t, u8 *, int);
55:	int utf8_to_utf32(const u8 *, int, unicode_t *);
132:	int utf8s_to_utf16s(const u8 *, int, enum utf16_endian, wchar_t *, int);
515:	static int char2uni(const unsigned char *, int, wchar_t *);
498:	static int uni2char(wchar_t, unsigned char *, int);

File fs/nls/nls_cp437.c:
358:	static int char2uni(const unsigned char *, int, wchar_t *);
379:	static void exit_nls_cp437(void);
374:	static int init_nls_cp437(void);
341:	static int uni2char(wchar_t, unsigned char *, int);

File fs/nls/nls_iso8859-1.c:
228:	static int char2uni(const unsigned char *, int, wchar_t *);
249:	static void exit_nls_iso8859_1(void);
244:	static int init_nls_iso8859_1(void);
211:	static int uni2char(wchar_t, unsigned char *, int);

File fs/nsfs.c:
217:	int ns_get_name(char *, size_t, struct task_struct *, const struct proc_ns_operations *);
136:	int ns_get_path(struct path *, struct task_struct *, const struct proc_ns_operations *);
109:	int ns_get_path_cb(struct path *, ns_get_path_helper_t *, void *);
263:	bool ns_match(const struct ns_common *, dev_t, ino_t);
300:	void nsfs_init(void);
147:	int open_related_ns(struct ns_common *, struct ns_common *(*)(struct ns_common *));
237:	struct file *proc_ns_fget(int);
232:	bool proc_ns_file(const struct file *);
58:	static int __ns_get_path(struct path *, struct ns_common *);
26:	static char *ns_dname(struct dentry *, char *, int);
188:	static long ns_ioctl(struct file *, unsigned int, unsigned long);
35:	static void ns_prune_dentry(struct dentry *);
51:	static void nsfs_evict(struct inode *);
284:	static int nsfs_init_fs_context(struct fs_context *);
269:	static int nsfs_show_path(struct seq_file *, struct dentry *);

File fs/open.c:
503:	long __arm64_sys_access(const struct pt_regs *);
508:	long __arm64_sys_chdir(const struct pt_regs *);
661:	long __arm64_sys_chmod(const struct pt_regs *);
785:	long __arm64_sys_chown(const struct pt_regs *);
556:	long __arm64_sys_chroot(const struct pt_regs *);
1437:	long __arm64_sys_close(const struct pt_regs *);
1462:	long __arm64_sys_close_range(const struct pt_regs *);
1396:	long __arm64_sys_creat(const struct pt_regs *);
492:	long __arm64_sys_faccessat(const struct pt_regs *);
497:	long __arm64_sys_faccessat2(const struct pt_regs *);
352:	long __arm64_sys_fallocate(const struct pt_regs *);
534:	long __arm64_sys_fchdir(const struct pt_regs *);
625:	long __arm64_sys_fchmod(const struct pt_regs *);
655:	long __arm64_sys_fchmodat(const struct pt_regs *);
821:	long __arm64_sys_fchown(const struct pt_regs *);
779:	long __arm64_sys_fchownat(const struct pt_regs *);
202:	long __arm64_sys_ftruncate(const struct pt_regs *);
790:	long __arm64_sys_lchown(const struct pt_regs *);
1330:	long __arm64_sys_open(const struct pt_regs *);
1337:	long __arm64_sys_openat(const struct pt_regs *);
1345:	long __arm64_sys_openat2(const struct pt_regs *);
144:	long __arm64_sys_truncate(const struct pt_regs *);
1472:	long __arm64_sys_vhangup(const struct pt_regs *);
1118:	int build_open_flags(const struct open_how *, struct open_flags *);
1102:	struct open_how build_open_how(int, umode_t);
589:	int chmod_common(const struct path *, umode_t);
702:	int chown_common(const struct path *, uid_t, gid_t);
1056:	struct file *dentry_create(const struct path *, int, umode_t, const struct cred *);
1016:	struct file *dentry_open(const struct path *, int, const struct cred *);
747:	int do_fchownat(int, const char *, uid_t, gid_t, int);
156:	long do_sys_ftruncate(unsigned int, loff_t, int);
1323:	long do_sys_open(int, const char *, int, umode_t);
122:	long do_sys_truncate(const char *, loff_t);
39:	int do_truncate(struct user_namespace *, struct dentry *, loff_t, unsigned int, struct file *);
1248:	struct file *file_open_name(struct filename *, int, umode_t);
1282:	struct file *file_open_root(const struct path *, const char *, int, umode_t);
998:	char *file_path(struct file *, char *, int);
1410:	int filp_close(struct file *, fl_owner_t);
1269:	struct file *filp_open(const char *, int, umode_t);
991:	int finish_no_open(struct file *, struct dentry *);
967:	int finish_open(struct file *, struct dentry *, int (*)(struct inode *, struct file *));
1487:	int generic_file_open(struct inode *, struct file *);
340:	int ksys_fallocate(int, int, loff_t, loff_t);
809:	int ksys_fchown(unsigned int, uid_t, gid_t);
1502:	int nonseekable_open(struct inode *, struct file *);
1081:	struct file *open_with_fake_path(const struct path *, int, struct inode *, const struct cred *);
1520:	int stream_open(struct inode *, struct file *);
243:	int vfs_fallocate(struct file *, int, loff_t, loff_t);
619:	int vfs_fchmod(struct file *, umode_t);
796:	int vfs_fchown(struct file *, uid_t, gid_t);
1010:	int vfs_open(const struct path *, struct file *);
70:	long vfs_truncate(const struct path *, loff_t);
826:	static int do_dentry_open(struct file *, struct inode *, int (*)(struct inode *, struct file *));
420:	static long do_faccessat(int, const char *, int, int);
1294:	static long do_sys_openat2(int, const char *, struct open_how *);

File fs/pipe.c:
1031:	long __arm64_sys_pipe(const struct pt_regs *);
1026:	long __arm64_sys_pipe2(const struct pt_regs *);
757:	unsigned long account_pipe_buffers(struct user_struct *, unsigned long, unsigned long);
782:	struct pipe_inode_info *alloc_pipe_info(void);
911:	int create_pipe_files(struct file **, int);
989:	int do_pipe_flags(int *, int);
830:	void free_pipe_info(struct pipe_inode_info *);
193:	bool generic_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
207:	void generic_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
165:	bool generic_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1372:	struct pipe_inode_info *get_pipe_info(struct file *, bool);
111:	void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);
1385:	long pipe_fcntl(struct file *, unsigned int, unsigned long);
777:	bool pipe_is_unprivileged_user(void);
85:	void pipe_lock(struct pipe_inode_info *);
1253:	int pipe_resize_ring(struct pipe_inode_info *, unsigned int);
94:	void pipe_unlock(struct pipe_inode_info *);
1045:	void pipe_wait_readable(struct pipe_inode_info *);
1052:	void pipe_wait_writable(struct pipe_inode_info *);
1234:	unsigned int round_pipe_size(unsigned long);
770:	bool too_many_pipe_buffers_hard(unsigned long);
763:	bool too_many_pipe_buffers_soft(unsigned long);
954:	static int __do_pipe_flags(int *, struct file **, int);
125:	static void anon_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
141:	static bool anon_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1004:	static int do_pipe2(int *, int);
1441:	static int do_proc_dopipe_max_size_conv(unsigned long *, unsigned int *, int, void *);
1093:	static int fifo_open(struct inode *, struct file *);
1494:	static int init_pipe_fs(void);
739:	static int pipe_fasync(int, struct file *, int);
607:	static long pipe_ioctl(struct file *, unsigned int, unsigned long);
649:	static __poll_t pipe_poll(struct file *, poll_table *);
231:	static ssize_t pipe_read(struct kiocb *, struct iov_iter *);
715:	static int pipe_release(struct inode *, struct file *);
416:	static ssize_t pipe_write(struct kiocb *, struct iov_iter *);
861:	static char *pipefs_dname(struct dentry *, char *, int);
1424:	static int pipefs_init_fs_context(struct fs_context *);
1461:	static int proc_dopipe_max_size(struct ctl_table *, int, void *, size_t *, loff_t *);
1071:	static int wait_for_partner(struct pipe_inode_info *, unsigned int *);

File fs/pnode.c:
122:	void change_mnt_propagation(struct mount *, int);
60:	int get_dominating_id(struct mount *, const struct path *);
288:	int propagate_mnt(struct mount *, struct mountpoint *, struct mount *, struct hlist_head *);
369:	int propagate_mount_busy(struct mount *, int);
412:	void propagate_mount_unlock(struct mount *);
535:	int propagate_umount(struct list_head *);
225:	static int propagate_one(struct mount *);

File fs/posix_acl.c:
574:	int __posix_acl_chmod(struct posix_acl **, gfp_t, umode_t);
556:	int __posix_acl_create(struct posix_acl **, gfp_t, umode_t *);
1253:	ssize_t do_get_acl(struct mnt_idmap *, struct dentry *, const char *, void *, size_t);
1232:	int do_set_acl(struct mnt_idmap *, struct dentry *, const char *, const void *, size_t);
107:	void forget_all_cached_acls(struct inode *);
101:	void forget_cached_acl(struct inode *, int);
46:	struct posix_acl *get_cached_acl(struct inode *, int);
65:	struct posix_acl *get_cached_acl_rcu(struct inode *, int);
182:	struct posix_acl *get_inode_acl(struct inode *, int);
203:	struct posix_acl *posix_acl_alloc(int, gfp_t);
605:	int posix_acl_chmod(struct user_namespace *, struct dentry *, umode_t);
218:	struct posix_acl *posix_acl_clone(const struct posix_acl *, gfp_t);
634:	int posix_acl_create(struct inode *, umode_t *, struct posix_acl **, struct posix_acl **);
306:	int posix_acl_equiv_mode(const struct posix_acl *, umode_t *);
352:	struct posix_acl *posix_acl_from_mode(umode_t, gfp_t);
774:	struct posix_acl *posix_acl_from_xattr(struct user_namespace *, const void *, size_t);
192:	void posix_acl_init(struct posix_acl *, int);
375:	int posix_acl_permission(struct user_namespace *, struct inode *, const struct posix_acl *, int);
834:	int posix_acl_to_xattr(struct user_namespace *, const struct posix_acl *, void *, size_t);
706:	int posix_acl_update_mode(struct user_namespace *, struct inode *, umode_t *, struct posix_acl **);
237:	int posix_acl_valid(struct user_namespace *, const struct posix_acl *);
81:	void set_cached_acl(struct inode *, int, struct posix_acl *);
937:	int set_posix_acl(struct user_namespace *, struct dentry *, int, struct posix_acl *);
1001:	int simple_acl_create(struct inode *, struct inode *);
981:	int simple_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
1133:	struct posix_acl *vfs_get_acl(struct user_namespace *, struct dentry *, const char *);
1177:	int vfs_remove_acl(struct user_namespace *, struct dentry *, const char *);
1054:	int vfs_set_acl(struct user_namespace *, struct dentry *, const char *, struct posix_acl *);
114:	static struct posix_acl *__get_acl(struct user_namespace *, struct dentry *, struct inode *, int);
453:	static int posix_acl_create_masq(struct posix_acl *, umode_t *);
962:	static bool posix_acl_xattr_list(struct dentry *);

File fs/proc/array.c:
664:	int proc_pid_statm(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
431:	int proc_pid_status(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
98:	void proc_task_name(struct seq_file *, struct task_struct *, bool);
658:	int proc_tgid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
652:	int proc_tid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
224:	void render_sigset_t(struct seq_file *, const char *, sigset_t *);
457:	static int do_task_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *, int);

File fs/proc/base.c:
904:	loff_t mem_lseek(struct file *, loff_t, int);
2034:	int pid_delete_dentry(const struct dentry *);
1962:	int pid_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1995:	void pid_update_inode(struct task_struct *, struct inode *);
2063:	bool proc_fill_cache(struct file *, struct dir_context *, const char *, unsigned int, instantiate_t *, struct task_struct *, const void *);
3407:	void proc_flush_pid(struct pid *);
796:	struct mm_struct *proc_mem_open(struct inode *, unsigned int);
1875:	void proc_pid_evict_inode(struct proc_inode *);
3433:	struct dentry *proc_pid_lookup(struct dentry *, unsigned int);
1888:	struct inode *proc_pid_make_inode(struct super_block *, struct task_struct *, umode_t);
3502:	int proc_pid_readdir(struct file *, struct dir_context *);
688:	int proc_setattr(struct user_namespace *, struct dentry *, struct iattr *);
3923:	void set_proc_pid_nlink(void);
1817:	void task_dump_owner(struct task_struct *, umode_t, kuid_t *, kgid_t *);
3366:	struct pid *tgid_pidfd_to_pid(const struct file *);
1060:	static int __set_oom_adj(struct file *, int, bool);
1011:	static int auxv_open(struct inode *, struct file *);
1016:	static ssize_t auxv_read(struct file *, char *, size_t, loff_t *);
1709:	static int comm_open(struct inode *, struct file *);
1692:	static int comm_show(struct seq_file *, void *);
1664:	static ssize_t comm_write(struct file *, const char *, size_t, loff_t *);
936:	static int environ_open(struct inode *, struct file *);
941:	static ssize_t environ_read(struct file *, char *, size_t, loff_t *);
2141:	static int map_files_d_revalidate(struct dentry *, unsigned int);
2192:	static int map_files_get_link(struct dentry *, struct path *);
827:	static int mem_open(struct inode *, struct file *);
892:	static ssize_t mem_read(struct file *, char *, size_t, loff_t *);
920:	static int mem_release(struct inode *, struct file *);
837:	static ssize_t mem_rw(struct file *, char *, size_t, loff_t *, int);
898:	static ssize_t mem_write(struct file *, const char *, size_t, loff_t *);
3476:	static struct tgid_iter next_tgid(struct pid_namespace *, struct tgid_iter);
1038:	static ssize_t oom_adj_read(struct file *, char *, size_t, loff_t *);
1153:	static ssize_t oom_adj_write(struct file *, const char *, size_t, loff_t *);
1197:	static ssize_t oom_score_adj_read(struct file *, char *, size_t, loff_t *);
1213:	static ssize_t oom_score_adj_write(struct file *, const char *, size_t, loff_t *);
2008:	static int pid_revalidate(struct dentry *, unsigned int);
2900:	static ssize_t proc_coredump_filter_read(struct file *, char *, size_t, loff_t *);
2927:	static ssize_t proc_coredump_filter_write(struct file *, const char *, size_t, loff_t *);
185:	static int proc_cwd_link(struct dentry *, struct path *);
1722:	static int proc_exe_link(struct dentry *, struct path *);
3082:	static int proc_gid_map_open(struct inode *, struct file *);
3037:	static int proc_id_map_open(struct inode *, struct file *, const struct seq_operations *);
3069:	static int proc_id_map_release(struct inode *, struct file *);
2245:	static const char *proc_map_files_get_link(struct dentry *, struct inode *, struct delayed_call *);
2265:	static struct dentry *proc_map_files_instantiate(struct dentry *, struct task_struct *, const void *);
2288:	static struct dentry *proc_map_files_lookup(struct inode *, struct dentry *, unsigned int);
2344:	static int proc_map_files_readdir(struct file *, struct dir_context *);
549:	static int proc_oom_score(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
357:	static ssize_t proc_pid_cmdline_read(struct file *, char *, size_t, loff_t *);
1741:	static const char *proc_pid_get_link(struct dentry *, struct inode *, struct delayed_call *);
3412:	static struct dentry *proc_pid_instantiate(struct dentry *, struct task_struct *, const void *);
595:	static int proc_pid_limits(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
730:	static int proc_pid_permission(struct user_namespace *, struct inode *, int);
3168:	static int proc_pid_personality(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1788:	static int proc_pid_readlink(struct dentry *, char *, int);
427:	static int proc_pid_stack(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
639:	static int proc_pid_syscall(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
385:	static int proc_pid_wchan(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
2636:	static struct dentry *proc_pident_instantiate(struct dentry *, struct task_struct *, const void *);
2660:	static struct dentry *proc_pident_lookup(struct inode *, struct dentry *, const struct pid_entry *, const struct pid_entry *);
2688:	static int proc_pident_readdir(struct file *, struct dir_context *, const struct pid_entry *, unsigned int);
3087:	static int proc_projid_map_open(struct inode *, struct file *);
202:	static int proc_root_link(struct dentry *, struct path *);
3116:	static int proc_setgroups_open(struct inode *, struct file *);
3150:	static int proc_setgroups_release(struct inode *, struct file *);
783:	static int proc_single_open(struct inode *, struct file *);
765:	static int proc_single_show(struct seq_file *, void *);
3894:	static int proc_task_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
3717:	static struct dentry *proc_task_instantiate(struct dentry *, struct task_struct *, const void *);
3737:	static struct dentry *proc_task_lookup(struct inode *, struct dentry *, unsigned int);
3852:	static int proc_task_readdir(struct file *, struct dir_context *);
3374:	static struct dentry *proc_tgid_base_lookup(struct inode *, struct dentry *, unsigned int);
3354:	static int proc_tgid_base_readdir(struct file *, struct dir_context *);
3698:	static struct dentry *proc_tid_base_lookup(struct inode *, struct dentry *, unsigned int);
3692:	static int proc_tid_base_readdir(struct file *, struct dir_context *);
3560:	static int proc_tid_comm_permission(struct user_namespace *, struct inode *, int);
3077:	static int proc_uid_map_open(struct inode *, struct file *);
1539:	static int sched_autogroup_open(struct inode *, struct file *);
1491:	static int sched_autogroup_show(struct seq_file *, void *);
1507:	static ssize_t sched_autogroup_write(struct file *, const char *, size_t, loff_t *);
1472:	static int sched_open(struct inode *, struct file *);
1439:	static int sched_show(struct seq_file *, void *);
1456:	static ssize_t sched_write(struct file *, const char *, size_t, loff_t *);
1650:	static int timens_offsets_open(struct inode *, struct file *);
1563:	static int timens_offsets_show(struct seq_file *, void *);
1577:	static ssize_t timens_offsets_write(struct file *, const char *, size_t, loff_t *);
2623:	static int timerslack_ns_open(struct inode *, struct file *);
2589:	static int timerslack_ns_show(struct seq_file *, void *);
2544:	static ssize_t timerslack_ns_write(struct file *, const char *, size_t, loff_t *);

File fs/proc/cmdline.c:
8:	static int cmdline_proc_show(struct seq_file *, void *);
15:	static int proc_cmdline_init(void);

File fs/proc/consoles.c:
88:	static void *c_next(struct seq_file *, void *, loff_t *);
70:	static void *c_start(struct seq_file *, loff_t *);
96:	static void c_stop(struct seq_file *, void *);
108:	static int proc_consoles_init(void);
15:	static int show_console_dev(struct seq_file *, void *);

File fs/proc/cpuinfo.c:
10:	static int cpuinfo_open(struct inode *, struct file *);
23:	static int proc_cpuinfo_init(void);

File fs/proc/devices.c:
36:	static void *devinfo_next(struct seq_file *, void *, loff_t *);
9:	static int devinfo_show(struct seq_file *, void *);
29:	static void *devinfo_start(struct seq_file *, loff_t *);
44:	static void devinfo_stop(struct seq_file *, void *);
56:	static int proc_devices_init(void);

File fs/proc/fd.c:
328:	int proc_fd_permission(struct user_namespace *, struct inode *, int);
347:	static int proc_fd_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
196:	static struct dentry *proc_fd_instantiate(struct dentry *, struct task_struct *, const void *);
168:	static int proc_fd_link(struct dentry *, struct path *);
373:	static struct dentry *proc_fdinfo_instantiate(struct dentry *, struct task_struct *, const void *);
318:	static struct dentry *proc_lookupfd(struct inode *, struct dentry *, unsigned int);
220:	static struct dentry *proc_lookupfd_common(struct inode *, struct dentry *, instantiate_t *);
395:	static struct dentry *proc_lookupfdinfo(struct inode *, struct dentry *, unsigned int);
406:	static int proc_open_fdinfo(struct inode *, struct file *);
307:	static int proc_readfd(struct file *, struct dir_context *);
242:	static int proc_readfd_common(struct file *, struct dir_context *, instantiate_t *);
400:	static int proc_readfdinfo(struct file *, struct dir_context *);
93:	static int seq_fdinfo_open(struct inode *, struct file *);
22:	static int seq_show(struct seq_file *, void *);
138:	static int tid_fd_revalidate(struct dentry *, unsigned int);

File fs/proc/generic.c:
482:	struct proc_dir_entry *_proc_mkdir(const char *, umode_t, struct proc_dir_entry *, void *, bool);
37:	void pde_free(struct proc_dir_entry *);
675:	void pde_put(struct proc_dir_entry *);
202:	int proc_alloc_inum(unsigned int *);
582:	struct proc_dir_entry *proc_create(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *);
567:	struct proc_dir_entry *proc_create_data(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *, void *);
525:	struct proc_dir_entry *proc_create_mount_point(const char *);
541:	struct proc_dir_entry *proc_create_reg(const char *, umode_t, struct proc_dir_entry **, void *);
616:	struct proc_dir_entry *proc_create_seq_private(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, unsigned int, void *);
647:	struct proc_dir_entry *proc_create_single_data(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
215:	void proc_free_inum(unsigned int);
783:	void *proc_get_parent_data(const struct inode *);
264:	struct dentry *proc_lookup(struct inode *, struct dentry *, unsigned int);
244:	struct dentry *proc_lookup_de(struct inode *, struct dentry *, struct proc_dir_entry *);
518:	struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
504:	struct proc_dir_entry *proc_mkdir_data(const char *, umode_t, struct proc_dir_entry *, void *);
511:	struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t, struct proc_dir_entry *);
325:	int proc_readdir(struct file *, struct dir_context *);
284:	int proc_readdir_de(struct file *, struct dir_context *, struct proc_dir_entry *);
367:	struct proc_dir_entry *proc_register(struct proc_dir_entry *, struct proc_dir_entry *);
790:	void proc_remove(struct proc_dir_entry *);
662:	void proc_set_size(struct proc_dir_entry *, loff_t);
668:	void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
802:	ssize_t proc_simple_write(struct file *, const char *, size_t, loff_t *);
459:	struct proc_dir_entry *proc_symlink(const char *, struct proc_dir_entry *, const char *);
686:	void remove_proc_entry(const char *, struct proc_dir_entry *);
725:	int remove_proc_subtree(const char *, struct proc_dir_entry *);
392:	static struct proc_dir_entry *__proc_create(struct proc_dir_entry **, const char *, umode_t, nlink_t);
163:	static int __xlate_proc_name(const char *, struct proc_dir_entry **, const char **);
137:	static int proc_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
230:	static int proc_misc_d_delete(const struct dentry *);
220:	static int proc_misc_d_revalidate(struct dentry *, unsigned int);
347:	static int proc_net_d_revalidate(struct dentry *, unsigned int);
118:	static int proc_notify_change(struct user_namespace *, struct dentry *, struct iattr *);
590:	static int proc_seq_open(struct inode *, struct file *);
599:	static int proc_seq_release(struct inode *, struct file *);
632:	static int proc_single_open(struct inode *, struct file *);

File fs/proc/inode.c:
261:	void proc_entry_rundown(struct proc_dir_entry *);
652:	struct inode *proc_get_inode(struct super_block *, struct proc_dir_entry *);
93:	void proc_init_kmemcache(void);
111:	void proc_invalidate_siblings_dcache(struct hlist_head *, spinlock_t *);
224:	static void close_pdeo(struct proc_dir_entry *, struct pde_opener *);
86:	static void init_once(void *);
63:	static struct inode *proc_alloc_inode(struct super_block *);
31:	static void proc_evict_inode(struct inode *);
81:	static void proc_free_inode(struct inode *);
637:	static const char *proc_get_link(struct dentry *, struct inode *, struct delayed_call *);
632:	static void proc_put_link(void *);
473:	static unsigned long proc_reg_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
281:	static loff_t proc_reg_llseek(struct file *, loff_t, int);
441:	static int proc_reg_mmap(struct file *, struct vm_area_struct *);
489:	static int proc_reg_open(struct inode *, struct file *);
368:	static __poll_t proc_reg_poll(struct file *, struct poll_table_struct *);
320:	static ssize_t proc_reg_read(struct file *, char *, size_t, loff_t *);
295:	static ssize_t proc_reg_read_iter(struct kiocb *, struct iov_iter *);
552:	static int proc_reg_release(struct inode *, struct file *);
392:	static long proc_reg_unlocked_ioctl(struct file *, unsigned int, unsigned long);
344:	static ssize_t proc_reg_write(struct file *, const char *, size_t, loff_t *);
179:	static int proc_show_options(struct seq_file *, struct dentry *);

File fs/proc/interrupts.c:
17:	static void *int_seq_next(struct seq_file *, void *, loff_t *);
12:	static void *int_seq_start(struct seq_file *, loff_t *);
25:	static void int_seq_stop(struct seq_file *, void *);
37:	static int proc_interrupts_init(void);

File fs/proc/kmsg.c:
20:	static int kmsg_open(struct inode *, struct file *);
40:	static __poll_t kmsg_poll(struct file *, poll_table *);
31:	static ssize_t kmsg_read(struct file *, char *, size_t, loff_t *);
25:	static int kmsg_release(struct inode *, struct file *);
58:	static int proc_kmsg_init(void);

File fs/proc/loadavg.c:
14:	static int loadavg_proc_show(struct seq_file *, void *);
29:	static int proc_loadavg_init(void);

File fs/proc/meminfo.c:
22:	void arch_report_meminfo(struct seq_file *);
32:	static int meminfo_proc_show(struct seq_file *, void *);
165:	static int proc_meminfo_init(void);

File fs/proc/namespaces.c:
151:	static struct dentry *proc_ns_dir_lookup(struct inode *, struct dentry *, unsigned int);
118:	static int proc_ns_dir_readdir(struct file *, struct dir_context *);
42:	static const char *proc_ns_get_link(struct dentry *, struct inode *, struct delayed_call *);
98:	static struct dentry *proc_ns_instantiate(struct dentry *, struct task_struct *, const void *);
71:	static int proc_ns_readlink(struct dentry *, char *, int);

File fs/proc/page.c:
110:	u64 stable_page_flags(struct page *);
279:	static ssize_t kpagecgroup_read(struct file *, char *, size_t, loff_t *);
45:	static ssize_t kpagecount_read(struct file *, char *, size_t, loff_t *);
230:	static ssize_t kpageflags_read(struct file *, char *, size_t, loff_t *);
334:	static int proc_page_init(void);

File fs/proc/proc_sysctl.c:
1653:	int __register_sysctl_base(struct ctl_table *);
1426:	void __register_sysctl_init(const char *, struct ctl_table *, const char *);
1557:	struct ctl_table_header *__register_sysctl_paths(struct ctl_table_set *, const struct ctl_path *, struct ctl_table *);
1322:	struct ctl_table_header *__register_sysctl_table(struct ctl_table_set *, const char *, struct ctl_table *);
1909:	void do_sysctl_args(void);
496:	void proc_sys_evict_inode(struct inode *, struct ctl_table_header *);
1766:	int proc_sys_init(void);
67:	void proc_sys_poll_notify(struct ctl_table_poll *);
1399:	struct ctl_table_header *register_sysctl(const char *, struct ctl_table *);
45:	struct ctl_table_header *register_sysctl_mount_point(const char *);
1628:	struct ctl_table_header *register_sysctl_paths(const struct ctl_path *, struct ctl_table *);
1645:	struct ctl_table_header *register_sysctl_table(struct ctl_table *);
1761:	void retire_sysctl_set(struct ctl_table_set *);
1752:	void setup_sysctl_set(struct ctl_table_set *, struct ctl_table_root *, int (*)(struct ctl_table_set *));
1722:	void unregister_sysctl_table(struct ctl_table_header *);
1451:	static int count_subheaders(struct ctl_table *);
1696:	static void drop_sysctl_table(struct ctl_table_header *);
1211:	static bool get_links(struct ctl_dir *, struct ctl_table *, struct ctl_table_root *);
230:	static int insert_header(struct ctl_dir *, struct ctl_table_header *);
557:	static ssize_t proc_sys_call_handler(struct kiocb *, struct iov_iter *, int);
923:	static int proc_sys_compare(const struct dentry *, unsigned int, const char *, const struct qstr *);
903:	static int proc_sys_delete(const struct dentry *);
682:	static bool proc_sys_fill_cache(struct file *, struct dir_context *, struct ctl_table_header *, struct ctl_table *);
848:	static int proc_sys_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
731:	static bool proc_sys_link_fill_cache(struct file *, struct dir_context *, struct ctl_table_header *, struct ctl_table *);
513:	static struct dentry *proc_sys_lookup(struct inode *, struct dentry *, unsigned int);
445:	static struct inode *proc_sys_make_inode(struct super_block *, struct ctl_table_header *, struct ctl_table *);
633:	static int proc_sys_open(struct inode *, struct file *);
801:	static int proc_sys_permission(struct user_namespace *, struct inode *, int);
650:	static __poll_t proc_sys_poll(struct file *, poll_table *);
623:	static ssize_t proc_sys_read(struct kiocb *, struct iov_iter *);
772:	static int proc_sys_readdir(struct file *, struct dir_context *);
896:	static int proc_sys_revalidate(struct dentry *, unsigned int);
830:	static int proc_sys_setattr(struct user_namespace *, struct dentry *, struct iattr *);
628:	static ssize_t proc_sys_write(struct kiocb *, struct iov_iter *);
1814:	static int process_sysctl_arg(char *, char *, const char *, void *);
1662:	static void put_links(struct ctl_table_header *);
1470:	static int register_leaf_sysctl_tables(const char *, char *, struct ctl_table_header ***, struct ctl_table_set *, struct ctl_table *);
1096:	static int sysctl_err(const char *, struct ctl_table *, char *, ...);
1063:	static int sysctl_follow_link(struct ctl_table_header **, struct ctl_table **);
102:	static void sysctl_print_dir(struct ctl_dir *);
1050:	static struct ctl_dir *xlate_dir(struct ctl_table_set *, struct ctl_dir *);

File fs/proc/proc_tty.c:
163:	void proc_tty_init(void);
131:	void proc_tty_register_driver(struct tty_driver *);
147:	void proc_tty_unregister_driver(struct tty_driver *);
67:	static int show_tty_driver(struct seq_file *, void *);
26:	static void show_tty_range(struct seq_file *, struct tty_driver *, dev_t, int);
110:	static void *t_next(struct seq_file *, void *, loff_t *);
104:	static void *t_start(struct seq_file *, loff_t *);
115:	static void t_stop(struct seq_file *, void *);

File fs/proc/root.c:
285:	void proc_root_init(void);
159:	static int proc_fill_super(struct super_block *, struct fs_context *);
229:	static void proc_fs_context_free(struct fs_context *);
224:	static int proc_get_tree(struct fs_context *);
244:	static int proc_init_fs_context(struct fs_context *);
260:	static void proc_kill_sb(struct super_block *);
112:	static int proc_parse_param(struct fs_context *, struct fs_parameter *);
213:	static int proc_reconfigure(struct fs_context *);
313:	static int proc_root_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
322:	static struct dentry *proc_root_lookup(struct inode *, struct dentry *, unsigned int);
330:	static int proc_root_readdir(struct file *, struct dir_context *);

File fs/proc/self.c:
70:	void proc_self_init(void);
36:	int proc_setup_self(struct super_block *);
11:	static const char *proc_self_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/proc/softirqs.c:
29:	static int proc_softirqs_init(void);
11:	static int show_softirqs(struct seq_file *, void *);

File fs/proc/stat.c:
49:	u64 get_idle_time(struct kernel_cpustat *, int);
237:	static int proc_stat_init(void);
108:	static int show_stat(struct seq_file *, void *);
220:	static int stat_open(struct inode *, struct file *);

File fs/proc/task_mmu.c:
30:	void task_mem(struct seq_file *, struct mm_struct *);
87:	unsigned long task_statm(struct mm_struct *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
82:	unsigned long task_vsize(struct mm_struct *);
818:	static void __show_smap(struct seq_file *, const struct mem_size_stats *, bool);
1166:	static int clear_refs_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1225:	static int clear_refs_test_walk(unsigned long, unsigned long, struct mm_walk *);
1252:	static ssize_t clear_refs_write(struct file *, const char *, size_t, loff_t *);
1904:	static int gather_hugetlb_stats(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
1866:	static int gather_pte_stats(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1790:	static void gather_stats(struct page *, struct numa_maps *, int, unsigned long);
177:	static void *m_next(struct seq_file *, void *, loff_t *);
141:	static void *m_start(struct seq_file *, loff_t *);
186:	static void m_stop(struct seq_file *, void *);
1570:	static int pagemap_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
1744:	static int pagemap_open(struct inode *, struct file *);
1466:	static int pagemap_pmd_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1372:	static int pagemap_pte_hole(unsigned long, unsigned long, int, struct mm_walk *);
1655:	static ssize_t pagemap_read(struct file *, char *, size_t, loff_t *);
1755:	static int pagemap_release(struct inode *, struct file *);
368:	static int pid_maps_open(struct inode *, struct file *);
2021:	static int pid_numa_maps_open(struct inode *, struct file *);
1013:	static int pid_smaps_open(struct inode *, struct file *);
221:	static int proc_map_release(struct inode *, struct file *);
355:	static int show_map(struct seq_file *, void *);
275:	static void show_map_vma(struct seq_file *, struct vm_area_struct *);
1937:	static int show_numa_map(struct seq_file *, void *);
857:	static int show_smap(struct seq_file *, void *);
885:	static int show_smaps_rollup(struct seq_file *, void *);
254:	static void show_vma_header_prefix(struct seq_file *, unsigned long, unsigned long, vm_flags_t, unsigned long long, dev_t, unsigned long);
454:	static void smaps_account(struct mem_size_stats *, struct page *, bool, bool, bool, bool, bool);
731:	static int smaps_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
424:	static void smaps_page_accumulate(struct mem_size_stats *, struct page *, unsigned long, unsigned long, bool, bool, bool);
507:	static int smaps_pte_hole(unsigned long, unsigned long, int, struct mm_walk *);
620:	static int smaps_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1018:	static int smaps_rollup_open(struct inode *, struct file *);
1047:	static int smaps_rollup_release(struct inode *, struct file *);

File fs/proc/thread_self.c:
36:	int proc_setup_thread_self(struct super_block *);
70:	void proc_thread_self_init(void);
11:	static const char *proc_thread_self_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/proc/uptime.c:
41:	static int proc_uptime_init(void);
12:	static int uptime_proc_show(struct seq_file *, void *);

File fs/proc/util.c:
4:	unsigned int name_to_int(const struct qstr *);

File fs/proc/version.c:
19:	static int proc_version_init(void);
10:	static int version_proc_show(struct seq_file *, void *);

File fs/proc_namespace.c:
314:	static int mountinfo_open(struct inode *, struct file *);
309:	static int mounts_open(struct inode *, struct file *);
242:	static int mounts_open_common(struct inode *, struct file *, int (*)(struct seq_file *, struct vfsmount *));
21:	static __poll_t mounts_poll(struct file *, poll_table *);
299:	static int mounts_release(struct inode *, struct file *);
319:	static int mountstats_open(struct inode *, struct file *);
64:	static void show_mnt_opts(struct seq_file *, struct vfsmount *);
135:	static int show_mountinfo(struct seq_file *, struct vfsmount *);
101:	static int show_vfsmnt(struct seq_file *, struct vfsmount *);
197:	static int show_vfsstat(struct seq_file *, struct vfsmount *);

File fs/ramfs/file-mmu.c:
34:	static unsigned long ramfs_mmu_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

File fs/ramfs/inode.c:
57:	struct inode *ramfs_get_inode(struct super_block *, const struct inode *, umode_t, dev_t);
267:	int ramfs_init_fs_context(struct fs_context *);
295:	static int init_ramfs_fs(void);
122:	static int ramfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
231:	static int ramfs_fill_super(struct super_block *, struct fs_context *);
256:	static void ramfs_free_fc(struct fs_context *);
251:	static int ramfs_get_tree(struct fs_context *);
281:	static void ramfs_kill_sb(struct super_block *);
113:	static int ramfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
98:	static int ramfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
200:	static int ramfs_parse_param(struct fs_context *, struct fs_parameter *);
176:	static int ramfs_show_options(struct seq_file *, struct dentry *);
128:	static int ramfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
148:	static int ramfs_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);

File fs/read_write.c:
1559:	long __arm64_sys_copy_file_range(const struct pt_regs *);
311:	long __arm64_sys_lseek(const struct pt_regs *);
672:	long __arm64_sys_pread64(const struct pt_regs *);
1053:	long __arm64_sys_preadv(const struct pt_regs *);
1061:	long __arm64_sys_preadv2(const struct pt_regs *);
706:	long __arm64_sys_pwrite64(const struct pt_regs *);
1073:	long __arm64_sys_pwritev(const struct pt_regs *);
1081:	long __arm64_sys_pwritev2(const struct pt_regs *);
621:	long __arm64_sys_read(const struct pt_regs *);
1041:	long __arm64_sys_readv(const struct pt_regs *);
1290:	long __arm64_sys_sendfile(const struct pt_regs *);
1309:	long __arm64_sys_sendfile64(const struct pt_regs *);
646:	long __arm64_sys_write(const struct pt_regs *);
1047:	long __arm64_sys_writev(const struct pt_regs *);
404:	ssize_t __kernel_read(struct file *, void *, size_t, loff_t *);
529:	ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
499:	ssize_t __kernel_write_iter(struct file *, struct iov_iter *, loff_t *);
230:	loff_t default_llseek(struct file *, loff_t, int);
162:	loff_t fixed_size_llseek(struct file *, loff_t, int, loff_t);
1387:	ssize_t generic_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
144:	loff_t generic_file_llseek(struct file *, loff_t, int);
86:	loff_t generic_file_llseek_size(struct file *, loff_t, int, loff_t, loff_t);
1704:	int generic_file_rw_checks(struct file *, struct file *);
1630:	int generic_write_check_limits(struct file *, loff_t, loff_t *);
1686:	ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
1656:	int generic_write_checks_count(struct kiocb *, loff_t *);
439:	ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
548:	ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
652:	ssize_t ksys_pread64(unsigned int, char *, size_t, loff_t);
686:	ssize_t ksys_pwrite64(unsigned int, const char *, size_t, loff_t);
602:	ssize_t ksys_read(unsigned int, char *, size_t);
626:	ssize_t ksys_write(unsigned int, const char *, size_t);
181:	loff_t no_seek_end_llseek(struct file *, loff_t, int);
201:	loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
224:	loff_t noop_llseek(struct file *, loff_t, int);
355:	int rw_verify_area(int, struct file *, const loff_t *, size_t);
1476:	ssize_t vfs_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
805:	ssize_t vfs_iocb_iter_read(struct file *, struct kiocb *, struct iov_iter *);
869:	ssize_t vfs_iocb_iter_write(struct file *, struct kiocb *, struct iov_iter *);
833:	ssize_t vfs_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
897:	ssize_t vfs_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
285:	loff_t vfs_llseek(struct file *, loff_t, int);
450:	ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
54:	loff_t vfs_setpos(struct file *, loff_t, loff_t);
564:	ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
777:	static ssize_t do_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
842:	static ssize_t do_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
995:	static ssize_t do_preadv(unsigned long, const struct iovec *, unsigned long, loff_t, rwf_t);
1018:	static ssize_t do_pwritev(unsigned long, const struct iovec *, unsigned long, loff_t, rwf_t);
941:	static ssize_t do_readv(unsigned long, const struct iovec *, unsigned long, rwf_t);
1181:	static ssize_t do_sendfile(int, int, loff_t *, size_t, loff_t);
965:	static ssize_t do_writev(unsigned long, const struct iovec *, unsigned long, rwf_t);
396:	static int warn_unsupported(struct file *, const char *);

File fs/readdir.c:
271:	long __arm64_sys_getdents(const struct pt_regs *);
354:	long __arm64_sys_getdents64(const struct pt_regs *);
40:	int iterate_dir(struct file *, struct dir_context *);
222:	static bool filldir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
310:	static bool filldir64(struct dir_context *, const char *, int, loff_t, u64, unsigned int);

File fs/remap_range.c:
268:	int __generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int, const struct iomap_ops *);
367:	loff_t do_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
358:	int generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int);
404:	loff_t vfs_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
491:	int vfs_dedupe_file_range(struct file *, struct file_dedupe_range *);
436:	loff_t vfs_dedupe_file_range_one(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
124:	static int generic_remap_check_len(struct inode *, struct inode *, loff_t, loff_t *, unsigned int);
183:	static int vfs_dedupe_file_range_compare(struct file *, loff_t, struct file *, loff_t, loff_t, bool *);

File fs/select.c:
1068:	long __arm64_sys_poll(const struct pt_regs *);
1101:	long __arm64_sys_ppoll(const struct pt_regs *);
795:	long __arm64_sys_pselect6(const struct pt_regs *);
726:	long __arm64_sys_select(const struct pt_regs *);
625:	int core_sys_select(int, fd_set *, fd_set *, fd_set *, struct timespec64 *);
139:	void poll_freewait(struct poll_wqueues *);
122:	void poll_initwait(struct poll_wqueues *);
274:	int poll_select_set_timeout(struct timespec64 *, time64_t, long);
76:	u64 select_estimate_accuracy(struct timespec64 *);
222:	static void __pollwait(struct file *, wait_queue_head_t *, poll_table *);
1047:	static long do_restart_poll(struct restart_block *);
974:	static int do_sys_poll(struct pollfd *, unsigned int, struct timespec64 *);
298:	static int poll_select_finish(struct timespec64 *, void *, enum poll_time_type, int);
211:	static int pollwake(wait_queue_entry_t *, unsigned int, int, void *);

File fs/seq_file.c:
630:	void *__seq_open_private(struct file *, const struct seq_operations *, int);
440:	char *mangle_path(char *, const char *, const char *);
412:	void seq_bprintf(struct seq_file *, const char *, const u32 *);
537:	int seq_dentry(struct seq_file *, struct dentry *, const char *);
374:	void seq_escape_mem(struct seq_file *, const char *, size_t, unsigned int, const char *);
1147:	void seq_file_init(void);
498:	int seq_file_path(struct seq_file *, struct file *, const char *);
864:	void seq_hex_dump(struct seq_file *, const char *, int, int, int, const void *, size_t, bool);
1009:	struct hlist_node *seq_hlist_next(void *, struct hlist_head *, loff_t *);
1126:	struct hlist_node *seq_hlist_next_percpu(void *, struct hlist_head *, int *, loff_t *);
1079:	struct hlist_node *seq_hlist_next_rcu(void *, struct hlist_head *, loff_t *);
973:	struct hlist_node *seq_hlist_start(struct hlist_head *, loff_t);
992:	struct hlist_node *seq_hlist_start_head(struct hlist_head *, loff_t);
1057:	struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *, loff_t);
1102:	struct hlist_node *seq_hlist_start_percpu(struct hlist_head *, int *, loff_t);
1033:	struct hlist_node *seq_hlist_start_rcu(struct hlist_head *, loff_t);
924:	struct list_head *seq_list_next(void *, struct list_head *, loff_t *);
955:	struct list_head *seq_list_next_rcu(void *, struct list_head *, loff_t *);
903:	struct list_head *seq_list_start(struct list_head *, loff_t);
915:	struct list_head *seq_list_start_head(struct list_head *, loff_t);
946:	struct list_head *seq_list_start_head_rcu(struct list_head *, loff_t);
934:	struct list_head *seq_list_start_rcu(struct list_head *, loff_t);
308:	loff_t seq_lseek(struct file *, loff_t, int);
57:	int seq_open(struct file *, const struct seq_operations *);
656:	int seq_open_private(struct file *, const struct seq_operations *, int);
847:	void seq_pad(struct seq_file *, char);
470:	int seq_path(struct seq_file *, const struct path *, const char *);
507:	int seq_path_root(struct seq_file *, const struct path *, const struct path *, const char *);
401:	void seq_printf(struct seq_file *, const char *, ...);
783:	void seq_put_decimal_ll(struct seq_file *, const char *, long long);
730:	void seq_put_decimal_ull(struct seq_file *, const char *, unsigned long long);
698:	void seq_put_decimal_ull_width(struct seq_file *, const char *, unsigned long long, unsigned int);
749:	void seq_put_hex_ll(struct seq_file *, const char *, unsigned long long, unsigned int);
663:	void seq_putc(struct seq_file *, char);
672:	void seq_puts(struct seq_file *, const char *);
151:	ssize_t seq_read(struct file *, char *, size_t, loff_t *);
171:	ssize_t seq_read_iter(struct kiocb *, struct iov_iter *);
352:	int seq_release(struct inode *, struct file *);
620:	int seq_release_private(struct inode *, struct file *);
386:	void seq_vprintf(struct seq_file *, const char *, va_list);
830:	int seq_write(struct seq_file *, const void *, size_t);
572:	int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
593:	int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
611:	int single_release(struct inode *, struct file *);
557:	void *single_start(struct seq_file *, loff_t *);
562:	static void *single_next(struct seq_file *, void *, loff_t *);
568:	static void single_stop(struct seq_file *, void *);
90:	static int traverse(struct seq_file *, loff_t);

File fs/signalfd.c:
314:	long __arm64_sys_signalfd(const struct pt_regs *);
302:	long __arm64_sys_signalfd4(const struct pt_regs *);
36:	void signalfd_cleanup(struct sighand_struct *);
253:	static int do_signalfd4(int, sigset_t *, int);
51:	static __poll_t signalfd_poll(struct file *, poll_table *);
202:	static ssize_t signalfd_read(struct file *, char *, size_t, loff_t *);
45:	static int signalfd_release(struct inode *, struct file *);
232:	static void signalfd_show_fdinfo(struct seq_file *, struct file *);

File fs/splice.c:
1328:	long __arm64_sys_splice(const struct pt_regs *);
1694:	long __arm64_sys_tee(const struct pt_regs *);
1292:	long __arm64_sys_vmsplice(const struct pt_regs *);
549:	ssize_t __splice_from_pipe(struct pipe_inode_info *, struct splice_desc *, splice_actor *);
230:	ssize_t add_to_pipe(struct pipe_inode_info *, struct pipe_buffer *);
1023:	long do_splice(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
951:	long do_splice_direct(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
1661:	long do_tee(struct file *, struct file *, size_t, unsigned int);
298:	ssize_t generic_file_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
740:	ssize_t generic_splice_sendpage(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
615:	ssize_t iter_file_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
809:	ssize_t splice_direct_to_actor(struct file *, struct splice_desc *, splice_direct_actor *);
1003:	long splice_file_to_pipe(struct file *, struct pipe_inode_info *, loff_t *, size_t, unsigned int);
581:	ssize_t splice_from_pipe(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int, splice_actor *);
256:	int splice_grow_spd(const struct pipe_inode_info *, struct splice_pipe_desc *);
276:	void splice_shrink_spd(struct splice_pipe_desc *);
182:	ssize_t splice_to_pipe(struct pipe_inode_info *, struct splice_pipe_desc *);
926:	static int direct_splice_actor(struct pipe_inode_info *, struct splice_desc *);
1395:	static int opipe_prep(struct pipe_inode_info *, unsigned int);
102:	static int page_cache_pipe_buf_confirm(struct pipe_inode_info *, struct pipe_buffer *);
91:	static void page_cache_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
46:	static bool page_cache_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
345:	static int pipe_to_sendpage(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
1198:	static int pipe_to_user(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
468:	static int splice_from_pipe_next(struct pipe_inode_info *, struct splice_desc *);
147:	static bool user_page_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);

File fs/stack.c:
63:	void fsstack_copy_attr_all(struct inode *, const struct inode *);
11:	void fsstack_copy_inode_size(struct inode *, struct inode *);

File fs/stat.c:
447:	long __arm64_sys_newfstat(const struct pt_regs *);
434:	long __arm64_sys_newfstatat(const struct pt_regs *);
420:	long __arm64_sys_newlstat(const struct pt_regs *);
409:	long __arm64_sys_newstat(const struct pt_regs *);
501:	long __arm64_sys_readlink(const struct pt_regs *);
495:	long __arm64_sys_readlinkat(const struct pt_regs *);
664:	long __arm64_sys_statx(const struct pt_regs *);
767:	void __inode_add_bytes(struct inode *, loff_t);
788:	void __inode_sub_bytes(struct inode *, loff_t);
635:	int do_statx(int, struct filename *, unsigned int, unsigned int, struct statx *);
74:	void generic_fill_statx_attr(struct inode *, struct kstat *);
44:	void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
191:	int getname_statx_lookup_flags(int);
779:	void inode_add_bytes(struct inode *, loff_t);
810:	loff_t inode_get_bytes(struct inode *);
822:	void inode_set_bytes(struct inode *, loff_t);
801:	void inode_sub_bytes(struct inode *, loff_t);
178:	int vfs_fstat(int, struct kstat *);
262:	int vfs_fstatat(int, const char *, struct kstat *, int);
156:	int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
97:	int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
370:	static int cp_new_stat(struct kstat *, struct stat *);
599:	static int cp_statx(const struct kstat *, struct statx *);
459:	static int do_readlinkat(int, const char *, char *, int);
220:	static int vfs_statx(int, struct filename *, int, struct kstat *, u32);

File fs/statfs.c:
213:	long __arm64_sys_fstatfs(const struct pt_regs *);
222:	long __arm64_sys_fstatfs64(const struct pt_regs *);
192:	long __arm64_sys_statfs(const struct pt_regs *);
201:	long __arm64_sys_statfs64(const struct pt_regs *);
248:	long __arm64_sys_ustat(const struct pt_regs *);
115:	int fd_statfs(int, struct kstatfs *);
97:	int user_statfs(const char *, struct kstatfs *);
72:	int vfs_get_fsid(struct dentry *, __kernel_fsid_t *);
86:	int vfs_statfs(const struct path *, struct kstatfs *);

File fs/super.c:
327:	void deactivate_locked_super(struct super_block *);
359:	void deactivate_super(struct super_block *);
666:	void drop_super(struct super_block *);
674:	void drop_super_exclusive(struct super_block *);
993:	void emergency_remount(void);
1027:	void emergency_thaw_all(void);
1071:	void free_anon_bdev(dev_t);
1650:	int freeze_super(struct super_block *);
468:	void generic_shutdown_super(struct super_block *);
818:	struct super_block *get_active_super(struct block_device *);
1051:	int get_anon_bdev(dev_t *);
780:	struct super_block *get_super(struct block_device *);
1215:	int get_tree_bdev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1177:	int get_tree_keyed(struct fs_context *, int (*)(struct super_block *, struct fs_context *), void *);
1153:	int get_tree_nodev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1161:	int get_tree_single(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1169:	int get_tree_single_reconf(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
711:	void iterate_supers(void (*)(struct super_block *, void *), void *);
746:	void iterate_supers_type(struct file_system_type *, void (*)(struct super_block *, void *), void *);
1083:	void kill_anon_super(struct super_block *);
1380:	void kill_block_super(struct super_block *);
1091:	void kill_litter_super(struct super_block *);
1303:	struct dentry *mount_bdev(struct file_system_type *, int, const char *, void *, int (*)(struct super_block *, void *, int));
515:	bool mount_capable(struct fs_context *);
1395:	struct dentry *mount_nodev(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
1445:	struct dentry *mount_single(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
308:	void put_super(struct super_block *);
1415:	int reconfigure_single(struct super_block *, int, void *);
880:	int reconfigure_super(struct fs_context *);
441:	void retire_super(struct super_block *);
1077:	int set_anon_super(struct super_block *, void *);
1099:	int set_anon_super_fc(struct super_block *, struct fs_context *);
606:	struct super_block *sget(struct file_system_type *, int (*)(struct super_block *, void *), int (*)(struct super_block *, void *), int, void *);
541:	struct super_block *sget_fc(struct fs_context *, int (*)(struct super_block *, struct fs_context *), int (*)(struct super_block *, struct fs_context *));
1566:	int super_setup_bdi(struct super_block *);
1537:	int super_setup_bdi_name(struct super_block *, char *, ...);
1761:	int thaw_super(struct super_block *);
413:	bool trylock_super(struct super_block *);
841:	struct super_block *user_get_super(dev_t, bool);
1478:	int vfs_get_tree(struct fs_context *);
681:	static void __iterate_supers(void (*)(struct super_block *));
286:	static void __put_super(struct super_block *);
199:	static struct super_block *alloc_super(struct file_system_type *, int, struct user_namespace *);
1440:	static int compare_single(struct super_block *, void *);
167:	static void destroy_super_rcu(struct callback_head *);
156:	static void destroy_super_work(struct work_struct *);
175:	static void destroy_unused_super(struct super_block *);
986:	static void do_emergency_remount(struct work_struct *);
968:	static void do_emergency_remount_callback(struct super_block *);
1015:	static void do_thaw_all(struct work_struct *);
1004:	static void do_thaw_all_callback(struct super_block *);
382:	static int grab_super(struct super_block *);
1189:	static int set_bdev_super(struct super_block *, void *);
1200:	static int set_bdev_super_fc(struct super_block *, struct fs_context *);
117:	static unsigned long super_cache_count(struct shrinker *, struct shrink_control *);
60:	static unsigned long super_cache_scan(struct shrinker *, struct shrink_control *);
1298:	static int test_bdev_super(struct super_block *, void *);
1205:	static int test_bdev_super_fc(struct super_block *, struct fs_context *);
1105:	static int test_keyed_super(struct super_block *, struct fs_context *);
1110:	static int test_single_super(struct super_block *, struct fs_context *);
1720:	static int thaw_super_locked(struct super_block *);
1115:	static int vfs_get_super(struct fs_context *, bool, int (*)(struct super_block *, struct fs_context *), int (*)(struct super_block *, struct fs_context *));

File fs/sync.c:
223:	long __arm64_sys_fdatasync(const struct pt_regs *);
218:	long __arm64_sys_fsync(const struct pt_regs *);
111:	long __arm64_sys_sync(const struct pt_regs *);
370:	long __arm64_sys_sync_file_range(const struct pt_regs *);
387:	long __arm64_sys_sync_file_range2(const struct pt_regs *);
149:	long __arm64_sys_syncfs(const struct pt_regs *);
135:	void emergency_sync(void);
97:	void ksys_sync(void);
355:	int ksys_sync_file_range(int, loff_t, loff_t, unsigned int);
228:	int sync_file_range(struct file *, loff_t, loff_t, unsigned int);
30:	int sync_filesystem(struct super_block *);
200:	int vfs_fsync(struct file *, int);
180:	int vfs_fsync_range(struct file *, loff_t, loff_t, int);
117:	static void do_sync_work(struct work_struct *);
80:	static void sync_fs_one_sb(struct super_block *, void *);
74:	static void sync_inodes_one_sb(struct super_block *, void *);

File fs/sysfs/dir.c:
40:	int sysfs_create_dir_ns(struct kobject *, const void *);
134:	int sysfs_create_mount_point(struct kobject *, const char *);
117:	int sysfs_move_dir_ns(struct kobject *, struct kobject *, const void *);
79:	void sysfs_remove_dir(struct kobject *);
155:	void sysfs_remove_mount_point(struct kobject *, const char *);
105:	int sysfs_rename_dir_ns(struct kobject *, const char *, const void *);
21:	void sysfs_warn_dup(struct kernfs_node *, const char *);

File fs/sysfs/file.c:
304:	int sysfs_add_bin_file_mode_ns(struct kernfs_node *, const struct bin_attribute *, umode_t, kuid_t, kgid_t, const void *);
254:	int sysfs_add_file_mode_ns(struct kernfs_node *, const struct attribute *, umode_t, kuid_t, kgid_t, const void *);
379:	int sysfs_add_file_to_group(struct kobject *, const struct attribute *, const char *);
444:	struct kernfs_node *sysfs_break_active_protection(struct kobject *, const struct attribute *);
691:	int sysfs_change_owner(struct kobject *, kuid_t, kgid_t);
413:	int sysfs_chmod_file(struct kobject *, const struct attribute *, umode_t);
558:	int sysfs_create_bin_file(struct kobject *, const struct bin_attribute *);
345:	int sysfs_create_file_ns(struct kobject *, const struct attribute *, const void *);
359:	int sysfs_create_files(struct kobject *, const struct attribute * const *);
729:	int sysfs_emit(char *, const char *, ...);
757:	int sysfs_emit_at(char *, int, const char *, ...);
649:	int sysfs_file_change_owner(struct kobject *, const char *, kuid_t, kgid_t);
610:	int sysfs_link_change_owner(struct kobject *, struct kobject *, const char *, kuid_t, kgid_t);
180:	void sysfs_notify(struct kobject *, const char *, const char *);
578:	void sysfs_remove_bin_file(struct kobject *, const struct bin_attribute *);
534:	void sysfs_remove_file_from_group(struct kobject *, const struct attribute *, const char *);
486:	void sysfs_remove_file_ns(struct kobject *, const struct attribute *, const void *);
502:	bool sysfs_remove_file_self(struct kobject *, const struct attribute *);
519:	void sysfs_remove_files(struct kobject *, const struct attribute * const *);
468:	void sysfs_unbreak_active_protection(struct kernfs_node *);
161:	static int sysfs_kf_bin_mmap(struct kernfs_open_file *, struct vm_area_struct *);
170:	static int sysfs_kf_bin_open(struct kernfs_open_file *);
77:	static ssize_t sysfs_kf_bin_read(struct kernfs_open_file *, char *, size_t, loff_t);
140:	static ssize_t sysfs_kf_bin_write(struct kernfs_open_file *, char *, size_t, loff_t);
101:	static ssize_t sysfs_kf_read(struct kernfs_open_file *, char *, size_t, loff_t);
40:	static int sysfs_kf_seq_show(struct seq_file *, void *);
127:	static ssize_t sysfs_kf_write(struct kernfs_open_file *, char *, size_t, loff_t);

File fs/sysfs/group.c:
426:	int compat_only_sysfs_link_entry_to_kobj(struct kobject *, struct kobject *, const char *, const char *);
381:	int sysfs_add_link_to_group(struct kobject *, const char *, struct kobject *, const char *);
171:	int sysfs_create_group(struct kobject *, const struct attribute_group *);
211:	int sysfs_create_groups(struct kobject *, const struct attribute_group **);
516:	int sysfs_group_change_owner(struct kobject *, const struct attribute_group *, kuid_t, kgid_t);
559:	int sysfs_groups_change_owner(struct kobject *, const struct attribute_group **, kuid_t, kgid_t);
325:	int sysfs_merge_group(struct kobject *, const struct attribute_group *);
269:	void sysfs_remove_group(struct kobject *, const struct attribute_group *);
304:	void sysfs_remove_groups(struct kobject *, const struct attribute_group **);
404:	void sysfs_remove_link_from_group(struct kobject *, const char *, const char *);
359:	void sysfs_unmerge_group(struct kobject *, const struct attribute_group *);
254:	int sysfs_update_group(struct kobject *, const struct attribute_group *);
229:	int sysfs_update_groups(struct kobject *, const struct attribute_group **);
107:	static int internal_create_group(struct kobject *, int, const struct attribute_group *);

File fs/sysfs/mount.c:
97:	int sysfs_init(void);
40:	static void sysfs_fs_context_free(struct fs_context *);
26:	static int sysfs_get_tree(struct fs_context *);
55:	static int sysfs_init_fs_context(struct fs_context *);
82:	static void sysfs_kill_sb(struct super_block *);

File fs/sysfs/symlink.c:
89:	int sysfs_create_link(struct kobject *, struct kobject *, const char *);
105:	int sysfs_create_link_nowarn(struct kobject *, struct kobject *, const char *);
61:	int sysfs_create_link_sd(struct kernfs_node *, struct kobject *, const char *);
121:	void sysfs_delete_link(struct kobject *, struct kobject *, const char *);
143:	void sysfs_remove_link(struct kobject *, const char *);
166:	int sysfs_rename_link_ns(struct kobject *, struct kobject *, const char *, const char *, const void *);
20:	static int sysfs_do_create_link_sd(struct kernfs_node *, struct kobject *, const char *, int);

File fs/timerfd.c:
406:	long __arm64_sys_timerfd_create(const struct pt_regs *);
576:	long __arm64_sys_timerfd_gettime(const struct pt_regs *);
558:	long __arm64_sys_timerfd_settime(const struct pt_regs *);
97:	void timerfd_clock_was_set(void);
129:	void timerfd_resume(void);
82:	static enum alarmtimer_restart timerfd_alarmproc(struct alarm *, ktime_t);
249:	static __poll_t timerfd_poll(struct file *, poll_table *);
265:	static ssize_t timerfd_read(struct file *, char *, size_t, loff_t *);
235:	static int timerfd_release(struct inode *, struct file *);
118:	static void timerfd_resume_work(struct work_struct *);
321:	static void timerfd_show(struct seq_file *, struct file *);
74:	static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *);

File fs/utimes.c:
147:	long __arm64_sys_utimensat(const struct pt_regs *);
139:	long do_utimes(int, const char *, struct timespec64 *, int);
19:	int vfs_utimes(const struct path *, struct timespec64 *);

File fs/xattr.c:
788:	long __arm64_sys_fgetxattr(const struct pt_regs *);
865:	long __arm64_sys_flistxattr(const struct pt_regs *);
934:	long __arm64_sys_fremovexattr(const struct pt_regs *);
676:	long __arm64_sys_fsetxattr(const struct pt_regs *);
776:	long __arm64_sys_getxattr(const struct pt_regs *);
782:	long __arm64_sys_lgetxattr(const struct pt_regs *);
853:	long __arm64_sys_listxattr(const struct pt_regs *);
859:	long __arm64_sys_llistxattr(const struct pt_regs *);
928:	long __arm64_sys_lremovexattr(const struct pt_regs *);
669:	long __arm64_sys_lsetxattr(const struct pt_regs *);
922:	long __arm64_sys_removexattr(const struct pt_regs *);
662:	long __arm64_sys_setxattr(const struct pt_regs *);
412:	ssize_t __vfs_getxattr(struct dentry *, struct inode *, const char *, void *, size_t);
483:	int __vfs_removexattr(struct user_namespace *, struct dentry *, const char *);
513:	int __vfs_removexattr_locked(struct user_namespace *, struct dentry *, const char *, struct inode **);
186:	int __vfs_setxattr(struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
277:	int __vfs_setxattr_locked(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int, struct inode **);
224:	int __vfs_setxattr_noperm(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int);
700:	ssize_t do_getxattr(struct mnt_idmap *, struct dentry *, struct xattr_ctx *);
601:	int do_setxattr(struct mnt_idmap *, struct dentry *, struct xattr_ctx *);
957:	ssize_t generic_listxattr(struct dentry *, char *, size_t);
97:	int may_write_xattr(struct user_namespace *, struct inode *);
572:	int setxattr_copy(const char *, struct xattr_ctx *);
1349:	void simple_xattr_add(struct simple_xattrs *, struct simple_xattr *);
1038:	struct simple_xattr *simple_xattr_alloc(const void *, size_t);
1109:	int simple_xattr_get(struct simple_xattrs *, const char *, void *, size_t);
1281:	ssize_t simple_xattr_list(struct inode *, struct simple_xattrs *, char *, size_t);
1158:	int simple_xattr_set(struct simple_xattrs *, const char *, const void *, size_t, int, ssize_t *);
1376:	void simple_xattrs_free(struct simple_xattrs *);
1363:	void simple_xattrs_init(struct simple_xattrs *);
430:	ssize_t vfs_getxattr(struct user_namespace *, struct dentry *, const char *, void *, size_t);
377:	int vfs_getxattr_alloc(struct user_namespace *, struct dentry *, const char *, char **, size_t, gfp_t);
463:	ssize_t vfs_listxattr(struct dentry *, char *, size_t);
545:	int vfs_removexattr(struct user_namespace *, struct dentry *, const char *);
306:	int vfs_setxattr(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int);
1005:	const char *xattr_full_name(const struct xattr_handler *, const char *);
162:	int xattr_supported_namespace(struct inode *, const char *);
807:	static ssize_t listxattr(struct dentry *, char *, size_t);
757:	static ssize_t path_getxattr(const char *, const char *, void *, size_t, unsigned int);
900:	static int path_removexattr(const char *, const char *, unsigned int);
637:	static int path_setxattr(const char *, const char *, const void *, size_t, int, unsigned int);
882:	static long removexattr(struct mnt_idmap *, struct dentry *, const char *);
613:	static long setxattr(struct mnt_idmap *, struct dentry *, const char *, const void *, size_t, int);
113:	static int xattr_permission(struct user_namespace *, struct inode *, const char *, int);

File init/calibrate.c:
275:	void calibrate_delay(void);
261:	unsigned long calibrate_delay_is_known(void);
271:	void calibration_delay_done(void);
17:	static int lpj_setup(char *);

File init/do_mounts.c:
666:	void init_rootfs(void);
394:	void mount_block_root(char *, int);
566:	void mount_root(void);
277:	dev_t name_to_dev_t(const char *);
600:	void prepare_namespace(void);
357:	static int do_mount_root(const char *, const char *, const int, const void *);
526:	static bool fs_is_nodev(char *);
323:	static int fs_names_setup(char *);
37:	static int load_ramdisk(char *);
160:	static int match_dev_by_label(struct device *, const void *);
76:	static int match_dev_by_uuid(struct device *, const void *);
539:	static int mount_nodev_root(void);
44:	static int readonly(char *);
52:	static int readwrite(char *);
316:	static int root_data_setup(char *);
330:	static int root_delay_setup(char *);
297:	static int root_dev_setup(char *);
652:	static int rootfs_init_fs_context(struct fs_context *);
305:	static int rootwait_setup(char *);
341:	static int split_fs_names(char *, size_t, char *);

File init/do_mounts.h:
17:	static int create_dev(char *, dev_t);

File init/do_mounts_initrd.c:
136:	bool initrd_load(void);
68:	static int early_initrd(char *);
51:	static int early_initrdmem(char *);
35:	static int kernel_do_mounts_initrd_sysctls_init(void);
43:	static int no_initrd(char *);

File init/initramfs.c:
629:	void free_initrd_mem(unsigned long, unsigned long);
584:	void reserve_initrd_mem(void);
737:	void wait_for_initramfs(void);
335:	static void clean_path(char *, umode_t);
150:	static void dir_add(const char *, time64_t);
164:	static void dir_utime(void);
267:	static int do_collect(void);
407:	static int do_copy(void);
281:	static int do_header(void);
363:	static int do_name(void);
696:	static void do_populate_rootfs(void *, async_cookie_t);
326:	static int do_reset(void);
314:	static int do_skip(void);
261:	static int do_start(void);
429:	static int do_symlink(void);
56:	static void error(char *);
90:	static char *find_link(int, int, int, umode_t, char *);
462:	static long flush_buffer(void *, unsigned long);
118:	static void free_hash(void);
572:	static int initramfs_async_setup(char *);
563:	static int keepinitrd_setup(char *);
348:	static int maybe_link(void);
62:	static void panic_show_mem(const char *, ...);
192:	static void parse_header(char *);
753:	static int populate_rootfs(void);
553:	static int retain_initrd_param(char *);
489:	static char *unpack_to_rootfs(char *, unsigned long);
24:	static ssize_t xwrite(struct file *, const unsigned char *, size_t, loff_t *);

File init/main.c:
892:	void arch_call_rest_init(void);
775:	void arch_post_acpi_subsys_init(void);
1589:	void console_on_rootfs(void);
1296:	int do_one_initcall(initcall_t);
1508:	void free_initmem(void);
787:	void mem_encrypt_init(void);
754:	void parse_early_options(char *);
761:	void parse_early_param(void);
791:	void pgtable_cache_init(void);
789:	void poking_init(void);
686:	void rest_init(void);
777:	void smp_setup_processor_id(void);
940:	void start_kernel(void);
782:	void thread_stack_cache_init(void);
793:	void trap_init(void);
238:	static int debug_kernel(char *);
1408:	static void do_basic_setup(void);
736:	static int do_early_param(char *, char *, const char *, void *);
1367:	static void do_initcall_level(int, char *);
1382:	static void do_initcalls(void);
874:	static int early_randomize_kstack_offset(char *);
273:	static void *get_boot_config_from_initrd(size_t *);
1361:	static int ignore_unknown_bootoption(char *, char *, const char *, void *);
578:	static int init_setup(char *);
1178:	static int initcall_blacklist(char *);
1206:	static bool initcall_blacklisted(initcall_t);
1513:	static int kernel_init(void *);
1603:	static void kernel_init_freeable(void);
253:	static int loglevel(char *);
834:	static void mm_init(void);
202:	static bool obsolete_checksetup(char *);
897:	static void print_unknown_bootoptions(void);
244:	static int quiet_kernel(char *);
595:	static int rdinit_setup(char *);
494:	static void repair_env_string(char *, char *);
807:	static void report_meminit(void);
1426:	static int run_init_process(const char *);
1464:	static int set_debug_rodata(char *);
509:	static int set_init_arg(char *, char *, const char *, void *);
188:	static int set_reset_devices(char *);
619:	static void setup_command_line(char *);
1257:	static void trace_initcall_finish_cb(void *, initcall_t, int);
1248:	static void trace_initcall_start_cb(void *, initcall_t);
534:	static int unknown_bootoption(char *, char *, const char *, void *);
481:	static int warn_bootconfig(char *);

File init/version.c:
20:	static int early_hostname(char *);

File io_uring/advise.c:
78:	int io_fadvise(struct io_kiocb *, unsigned int);
65:	int io_fadvise_prep(struct io_kiocb *, const struct io_uring_sqe *);
48:	int io_madvise(struct io_kiocb *, unsigned int);
31:	int io_madvise_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/cancel.c:
201:	void init_hash_table(struct io_hash_table *, unsigned int);
165:	int io_async_cancel(struct io_kiocb *, unsigned int);
108:	int io_async_cancel_prep(struct io_kiocb *, const struct io_uring_sqe *);
233:	int io_sync_cancel(struct io_ring_ctx *, void *);
81:	int io_try_cancel(struct io_uring_task *, struct io_cancel_data *, unsigned int);
130:	static int __io_async_cancel(struct io_cancel_data *, struct io_uring_task *, unsigned int);
30:	static bool io_cancel_cb(struct io_wq_work *, void *);

File io_uring/epoll.c:
50:	int io_epoll_ctl(struct io_kiocb *, unsigned int);
24:	int io_epoll_ctl_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/fdinfo.c:
209:	void io_uring_show_fdinfo(struct seq_file *, struct file *);
51:	static void __io_uring_show_fdinfo(struct io_ring_ctx *, struct seq_file *);
19:	static int io_uring_show_cred(struct seq_file *, unsigned int, const struct cred *);

File io_uring/filetable.c:
107:	int __io_fixed_fd_install(struct io_ring_ctx *, struct file *, unsigned int);
36:	bool io_alloc_file_tables(struct io_file_table *, unsigned int);
131:	int io_fixed_fd_install(struct io_kiocb *, unsigned int, struct file *, unsigned int);
146:	int io_fixed_fd_remove(struct io_ring_ctx *, unsigned int);
52:	void io_free_file_tables(struct io_file_table *);
176:	int io_register_file_alloc_range(struct io_ring_ctx *, struct io_uring_file_index_range *);

File io_uring/filetable.h:
33:	static void io_file_bitmap_set(struct io_file_table *, int);

File io_uring/fs.c:
287:	void io_link_cleanup(struct io_kiocb *);
271:	int io_linkat(struct io_kiocb *, unsigned int);
241:	int io_linkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
176:	int io_mkdirat(struct io_kiocb *, unsigned int);
191:	void io_mkdirat_cleanup(struct io_kiocb *);
154:	int io_mkdirat_prep(struct io_kiocb *, const struct io_uring_sqe *);
80:	int io_renameat(struct io_kiocb *, unsigned int);
96:	void io_renameat_cleanup(struct io_kiocb *);
50:	int io_renameat_prep(struct io_kiocb *, const struct io_uring_sqe *);
226:	int io_symlinkat(struct io_kiocb *, unsigned int);
198:	int io_symlinkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
129:	int io_unlinkat(struct io_kiocb *, unsigned int);
147:	void io_unlinkat_cleanup(struct io_kiocb *);
104:	int io_unlinkat_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/io-wq.c:
1072:	enum io_wq_cancel io_wq_cancel_cb(struct io_wq *, work_cancel_fn *, void *, bool);
1343:	int io_wq_cpu_affinity(struct io_wq *, struct cpumask *);
1135:	struct io_wq *io_wq_create(unsigned int, struct io_wq_data *);
956:	void io_wq_enqueue(struct io_wq *, struct io_wq_work *);
1219:	void io_wq_exit_start(struct io_wq *);
967:	void io_wq_hash_work(struct io_wq_work *, void *);
1364:	int io_wq_max_workers(struct io_wq *, int *);
1290:	void io_wq_put_and_exit(struct io_wq *);
668:	void io_wq_worker_running(struct task_struct *);
686:	void io_wq_worker_sleeping(struct task_struct *);
793:	static bool create_io_worker(struct io_wq *, struct io_wqe *, int);
320:	static void create_worker_cb(struct callback_head *);
742:	static void create_worker_cont(struct callback_head *);
1024:	static bool io_acct_cancel_pending_work(struct io_wqe *, struct io_wqe_acct *, struct io_cb_cancel_data *);
701:	static void io_init_new_worker(struct io_wqe *, struct io_worker *, struct task_struct *);
348:	static bool io_queue_worker_create(struct io_worker *, struct io_wqe_acct *, task_work_func_t);
1209:	static bool io_task_work_match(struct callback_head *, void *);
199:	static bool io_task_worker_match(struct callback_head *, void *);
184:	static void io_worker_cancel_cb(struct io_worker *);
539:	static void io_worker_handle_work(struct io_worker *);
178:	static void io_worker_ref_put(struct io_wq *);
784:	static void io_workqueue_create(struct work_struct *);
1224:	static void io_wq_cancel_tw_create(struct io_wq *);
1336:	static int io_wq_cpu_offline(unsigned int, struct hlist_node *);
1329:	static int io_wq_cpu_online(unsigned int, struct hlist_node *);
838:	static bool io_wq_for_each_worker(struct io_wqe *, bool (*)(struct io_worker *, void *), void *);
1406:	static int io_wq_init(void);
717:	static bool io_wq_work_match_all(struct io_wq_work *, void *);
898:	static bool io_wq_work_match_item(struct io_wq_work *, void *);
1303:	static bool io_wq_worker_affinity(struct io_worker *, void *);
988:	static bool io_wq_worker_cancel(struct io_worker *, void *);
859:	static bool io_wq_worker_wake(struct io_worker *, void *);
259:	static bool io_wqe_activate_free_worker(struct io_wqe *, struct io_wqe_acct *);
395:	static void io_wqe_dec_running(struct io_worker *);
903:	static void io_wqe_enqueue(struct io_wqe *, struct io_wq_work *);
1116:	static int io_wqe_hash_wake(struct wait_queue_entry *, unsigned int, int, void *);
613:	static int io_wqe_worker(void *);

File io_uring/io_uring.c:
3275:	long __arm64_sys_io_uring_enter(const struct pt_regs *);
4174:	long __arm64_sys_io_uring_register(const struct pt_regs *);
3730:	long __arm64_sys_io_uring_setup(const struct pt_regs *);
1022:	bool __io_alloc_req_refill(struct io_ring_ctx *);
573:	void __io_commit_cqring_flush(struct io_ring_ctx *);
783:	struct io_uring_cqe *__io_get_cqe(struct io_ring_ctx *, bool);
696:	void __io_put_task(struct task_struct *, int);
1262:	void __io_req_task_work_add(struct io_kiocb *, bool);
1299:	int __io_run_local_work(struct io_ring_ctx *, bool *);
3155:	void __io_uring_cancel(bool);
1709:	bool io_alloc_async_data(struct io_kiocb *);
893:	bool io_aux_cqe(struct io_ring_ctx *, bool, u64, s32, u32, bool);
621:	void io_cq_unlock_post(struct io_ring_ctx *);
1954:	struct file *io_file_get_fixed(struct io_kiocb *, int, unsigned int);
1697:	unsigned int io_file_get_flags(struct file *);
1977:	struct file *io_file_get_normal(struct io_kiocb *, int);
1395:	void io_free_batch_list(struct io_ring_ctx *, struct io_wq_work_node *);
1073:	void io_free_req(struct io_kiocb *);
3424:	bool io_is_uring_fops(struct file *);
201:	bool io_match_task_safe(struct io_kiocb *, struct task_struct *, bool);
1874:	int io_poll_issue(struct io_kiocb *, bool *);
888:	bool io_post_aux_cqe(struct io_ring_ctx *, u64, s32, u32);
453:	void io_queue_iowq(struct io_kiocb *, bool *);
1387:	void io_queue_next(struct io_kiocb *);
963:	void io_req_complete_post(struct io_kiocb *, unsigned int);
767:	bool io_req_cqe_overflow(struct io_kiocb *);
980:	void io_req_defer_failed(struct io_kiocb *, s32);
1720:	int io_req_prep_async(struct io_kiocb *);
1595:	void io_req_task_complete(struct io_kiocb *, bool *);
1381:	void io_req_task_queue(struct io_kiocb *);
1374:	void io_req_task_queue_fail(struct io_kiocb *, int);
1364:	void io_req_task_submit(struct io_kiocb *, bool *);
1341:	int io_run_local_work(struct io_ring_ctx *);
2459:	int io_run_task_work_sig(struct io_ring_ctx *);
2364:	int io_submit_sqes(struct io_ring_ctx *, unsigned int);
706:	void io_task_refs_refill(struct io_uring_task *);
3082:	void io_uring_cancel_generic(bool, struct io_sq_data *);
156:	struct sock *io_uring_get_socket(struct file *);
1881:	struct io_wq_work *io_wq_free_work(struct io_wq_work *);
1889:	void io_wq_submit_work(struct io_wq_work *);
1185:	void tctx_task_work(struct callback_head *);
397:	static void __io_arm_ltimeout(struct io_kiocb *);
649:	static void __io_cqring_overflow_flush(struct io_ring_ctx *);
849:	static void __io_flush_post_cqes(struct io_ring_ctx *);
874:	static bool __io_post_aux_cqe(struct io_ring_ctx *, u64, s32, u32, bool);
376:	static struct io_kiocb *__io_prep_linked_timeout(struct io_kiocb *);
927:	static void __io_req_complete_post(struct io_kiocb *);
1113:	static void ctx_flush_and_put(struct io_ring_ctx *, bool *);
1127:	static unsigned int handle_tw_list(struct llist_node *, struct io_ring_ctx **, bool *, struct llist_node *);
261:	static int io_alloc_hash_table(struct io_hash_table *, unsigned int);
3429:	static int io_allocate_scq_urings(struct io_ring_ctx *, struct io_uring_params *);
1823:	static bool io_assign_file(struct io_kiocb *, unsigned int);
2835:	static bool io_cancel_ctx_cb(struct io_wq_work *, void *);
2974:	static bool io_cancel_defer_files(struct io_ring_ctx *, struct task_struct *, bool);
2966:	static bool io_cancel_task_cb(struct io_wq_work *, void *);
2066:	static bool io_check_restriction(struct io_ring_ctx *, struct io_kiocb *, unsigned int);
1790:	static void io_clean_op(struct io_kiocb *);
727:	static bool io_cqring_event_overflow(struct io_ring_ctx *, u64, s32, u32, u64, u64);
631:	static void io_cqring_overflow_kill(struct io_ring_ctx *);
1749:	static void io_drain_req(struct io_kiocb *);
495:	static void io_eventfd_ops(struct callback_head *);
2629:	static int io_eventfd_register(struct io_ring_ctx *, void *, unsigned int);
513:	static void io_eventfd_signal(struct io_ring_ctx *);
2667:	static int io_eventfd_unregister(struct io_ring_ctx *);
242:	static void io_fallback_req_func(struct work_struct *);
1220:	static void io_fallback_tw(struct io_uring_task *);
820:	static bool io_fill_cqe_aux(struct io_ring_ctx *, u64, s32, u32);
1505:	static void io_iopoll_try_reap_events(struct io_ring_ctx *);
1836:	static int io_issue_sqe(struct io_kiocb *, unsigned int);
2577:	static void io_mem_free(void *);
1285:	static void io_move_task_work_from_local(struct io_ring_ctx *);
408:	static void io_prep_async_work(struct io_kiocb *);
3736:	static int io_probe(struct io_ring_ctx *, void *, unsigned int);
1989:	static void io_queue_async(struct io_kiocb *, int);
480:	static void io_queue_deferred(struct io_ring_ctx *);
2035:	static void io_queue_sqe_fallback(struct io_kiocb *);
3880:	static int io_register_iowq_aff(struct io_ring_ctx *, void *, unsigned int);
3925:	static int io_register_iowq_max_workers(struct io_ring_ctx *, void *);
3793:	static int io_register_restrictions(struct io_ring_ctx *, void *, unsigned int);
2684:	static void io_req_caches_free(struct io_ring_ctx *);
1358:	static void io_req_task_cancel(struct io_kiocb *, bool *);
275:	static struct io_ring_ctx *io_ring_ctx_alloc(struct io_uring_params *);
2702:	static void io_ring_ctx_free(struct io_ring_ctx *);
235:	static void io_ring_ctx_ref_free(struct percpu_ref *);
2922:	static void io_ring_ctx_wait_and_kill(struct io_ring_ctx *);
2842:	static void io_ring_exit_work(struct work_struct *);
2197:	static int io_submit_fail_init(const struct io_uring_sqe *, struct io_kiocb *, int);
169:	static void io_submit_flush_completions(struct io_ring_ctx *);
2818:	static void io_tctx_exit_cb(struct callback_head *);
3915:	static int io_unregister_iowq_aff(struct io_ring_ctx *);
2799:	static int io_unregister_personality(struct io_ring_ctx *, unsigned int);
3522:	static int io_uring_create(unsigned int, struct io_uring_params *, struct io_uring_params *);
715:	static void io_uring_drop_tctx_refs(struct task_struct *);
4203:	static int io_uring_init(void);
3474:	static int io_uring_install_fd(struct io_ring_ctx *, struct file *);
3189:	static int io_uring_mmap(struct file *, struct vm_area_struct *);
2765:	static __poll_t io_uring_poll(struct file *, poll_table *);
2952:	static int io_uring_release(struct inode *, struct file *);
3001:	static bool io_uring_try_cancel_iowq(struct io_ring_ctx *);
3025:	static bool io_uring_try_cancel_requests(struct io_ring_ctx *, struct task_struct *, bool);
2443:	static int io_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File io_uring/io_uring.h:
264:	static int io_run_task_work(void);

File io_uring/kbuf.c:
77:	unsigned int __io_put_kbuf(struct io_kiocb *, unsigned int);
171:	void *io_buffer_select(struct io_kiocb *, size_t *, unsigned int);
246:	void io_destroy_buffers(struct io_ring_ctx *);
50:	void io_kbuf_recycle_legacy(struct io_kiocb *, unsigned int);
421:	int io_provide_buffers(struct io_kiocb *, unsigned int);
316:	int io_provide_buffers_prep(struct io_kiocb *, const struct io_uring_sqe *);
466:	int io_register_pbuf_ring(struct io_ring_ctx *, void *);
292:	int io_remove_buffers(struct io_kiocb *, unsigned int);
273:	int io_remove_buffers_prep(struct io_kiocb *, const struct io_uring_sqe *);
525:	int io_unregister_pbuf_ring(struct io_ring_ctx *, void *);
40:	static int io_buffer_add_list(struct io_ring_ctx *, struct io_buffer_list *, unsigned int);
191:	static int io_init_bl_list(struct io_ring_ctx *);

File io_uring/msg_ring.c:
250:	int io_msg_ring(struct io_kiocb *, unsigned int);
50:	void io_msg_ring_cleanup(struct io_kiocb *);
230:	int io_msg_ring_prep(struct io_kiocb *, const struct io_uring_sqe *);
33:	static int io_double_lock_ctx(struct io_ring_ctx *, unsigned int);
68:	static int io_msg_exec_remote(struct io_kiocb *, task_work_func_t);
84:	static void io_msg_tw_complete(struct callback_head *);
193:	static void io_msg_tw_fd_complete(struct callback_head *);

File io_uring/nop.c:
21:	int io_nop(struct io_kiocb *, unsigned int);
13:	int io_nop_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/notif.c:
65:	struct io_kiocb *io_alloc_notif(struct io_ring_ctx *);
51:	void io_notif_set_extended(struct io_kiocb *);
12:	static void io_notif_complete_tw_ext(struct io_kiocb *, bool *);
27:	static void io_tx_ubuf_callback(struct sk_buff *, struct ubuf_info *, bool);
37:	static void io_tx_ubuf_callback_ext(struct sk_buff *, struct ubuf_info *, bool);

File io_uring/opdef.c:
536:	const char *io_uring_get_opcode(u8);
543:	void io_uring_optable_init(void);
43:	static int io_eopnotsupp_prep(struct io_kiocb *, const struct io_uring_sqe *);
37:	static int io_no_issue(struct io_kiocb *, unsigned int);

File io_uring/openclose.c:
176:	int __io_close_fixed(struct io_ring_ctx *, unsigned int, unsigned int);
212:	int io_close(struct io_kiocb *, unsigned int);
195:	int io_close_prep(struct io_kiocb *, const struct io_uring_sqe *);
168:	void io_open_cleanup(struct io_kiocb *);
163:	int io_openat(struct io_kiocb *, unsigned int);
96:	int io_openat2(struct io_kiocb *, unsigned int);
77:	int io_openat2_prep(struct io_kiocb *, const struct io_uring_sqe *);
67:	int io_openat_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/poll.c:
1029:	void io_apoll_cache_free(struct io_cache_entry *);
679:	int io_arm_poll_handler(struct io_kiocb *, unsigned int);
936:	int io_poll_add(struct io_kiocb *, unsigned int);
919:	int io_poll_add_prep(struct io_kiocb *, const struct io_uring_sqe *);
857:	int io_poll_cancel(struct io_ring_ctx *, struct io_cancel_data *, unsigned int);
959:	int io_poll_remove(struct io_kiocb *, unsigned int);
758:	bool io_poll_remove_all(struct io_ring_ctx *, struct task_struct *, bool);
889:	int io_poll_remove_prep(struct io_kiocb *, const struct io_uring_sqe *);
563:	static int __io_arm_poll_handler(struct io_kiocb *, struct io_poll *, struct io_poll_table *, __poll_t, unsigned int);
839:	static int __io_poll_cancel(struct io_ring_ctx *, struct io_cancel_data *, struct io_hash_table *);
477:	static void __io_queue_proc(struct io_poll *, struct io_poll_table *, struct wait_queue_head *, struct io_poll **);
644:	static void io_async_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
543:	static bool io_poll_can_finish_inline(struct io_kiocb *, struct io_poll_table *);
380:	static void io_poll_cancel_req(struct io_kiocb *);
828:	static int io_poll_disarm(struct io_kiocb *);
452:	static bool io_poll_double_prepare(struct io_kiocb *);
68:	static bool io_poll_get_ownership_slowpath(struct io_kiocb *);
533:	static void io_poll_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
729:	static bool io_poll_remove_all_table(struct task_struct *, struct io_hash_table *, bool);
190:	static void io_poll_remove_entries(struct io_kiocb *);
327:	static void io_poll_task_func(struct io_kiocb *, bool *);
414:	static int io_poll_wake(struct wait_queue_entry *, unsigned int, int, void *);
389:	static int io_pollfree_wake(struct io_kiocb *, struct io_poll *);

File io_uring/refs.h:
20:	static bool req_ref_put_and_test(struct io_kiocb *);

File io_uring/rsrc.c:
45:	int __io_account_mem(struct user_struct *, unsigned long);
829:	int __io_scm_file_account(struct io_ring_ctx *, struct file *);
1038:	void __io_sqe_buffers_unregister(struct io_ring_ctx *);
773:	void __io_sqe_files_unregister(struct io_ring_ctx *);
727:	int io_files_update(struct io_kiocb *, unsigned int);
671:	int io_files_update_prep(struct io_kiocb *, const struct io_uring_sqe *);
1324:	int io_import_fixed(int, struct iov_iter *, struct io_mapped_ubuf *, u64, size_t);
1140:	struct page **io_pin_pages(unsigned long, unsigned long, int *);
756:	int io_queue_rsrc_removal(struct io_rsrc_data *, unsigned int, struct io_rsrc_node *, void *);
610:	int io_register_files_update(struct io_ring_ctx *, void *, unsigned int);
639:	int io_register_rsrc(struct io_ring_ctx *, void *, unsigned int, unsigned int);
625:	int io_register_rsrc_update(struct io_ring_ctx *, void *, unsigned int, unsigned int);
221:	void io_rsrc_node_destroy(struct io_rsrc_node *);
283:	void io_rsrc_node_switch(struct io_ring_ctx *, struct io_rsrc_data *);
311:	int io_rsrc_node_switch_start(struct io_ring_ctx *);
207:	void io_rsrc_put_tw(struct callback_head *);
189:	void io_rsrc_put_work(struct work_struct *);
36:	void io_rsrc_refs_drop(struct io_ring_ctx *);
154:	void io_rsrc_refs_refill(struct io_ring_ctx *);
1265:	int io_sqe_buffers_register(struct io_ring_ctx *, void *, unsigned int, u64 *);
1051:	int io_sqe_buffers_unregister(struct io_ring_ctx *);
952:	int io_sqe_files_register(struct io_ring_ctx *, void *, unsigned int, u64 *);
802:	int io_sqe_files_unregister(struct io_ring_ctx *);
215:	void io_wait_rsrc_data(struct io_rsrc_data *);
588:	static int __io_register_rsrc_update(struct io_ring_ctx *, unsigned int, struct io_uring_rsrc_update2 *, unsigned int);
385:	static void **io_alloc_page_table(size_t);
139:	static void io_buffer_unmap(struct io_ring_ctx *, struct io_mapped_ubuf **);
90:	static int io_copy_iov(struct io_ring_ctx *, struct iovec *, void *, unsigned int);
367:	static void io_free_page_table(void **, size_t);
1032:	static void io_rsrc_buf_put(struct io_ring_ctx *, struct io_rsrc_put *);
408:	static int io_rsrc_data_alloc(struct io_ring_ctx *, rsrc_put_fn *, u64 *, unsigned int, struct io_rsrc_data **);
376:	static void io_rsrc_data_free(struct io_rsrc_data *);
884:	static void io_rsrc_file_put(struct io_ring_ctx *, struct io_rsrc_put *);
227:	static void io_rsrc_node_ref_zero(struct percpu_ref *);
319:	static int io_rsrc_ref_quiesce(struct io_rsrc_data *, struct io_ring_ctx *);
1201:	static int io_sqe_buffer_register(struct io_ring_ctx *, struct iovec *, struct io_mapped_ubuf **, struct page **);

File io_uring/rw.c:
999:	int io_do_iopoll(struct io_ring_ctx *, bool);
76:	int io_prep_rw(struct io_kiocb *, const struct io_uring_sqe *);
702:	int io_read(struct io_kiocb *, unsigned int);
555:	int io_readv_prep_async(struct io_kiocb *);
125:	void io_readv_writev_cleanup(struct io_kiocb *);
991:	void io_rw_fail(struct io_kiocb *);
850:	int io_write(struct io_kiocb *, unsigned int);
560:	int io_writev_prep_async(struct io_kiocb *);
575:	static int io_async_buf_func(struct wait_queue_entry *, unsigned int, int, void *);
298:	static void io_complete_rw(struct kiocb *, long);
310:	static void io_complete_rw_iopoll(struct kiocb *, long);
408:	static int io_import_iovec(int, struct io_kiocb *, struct iovec **, struct io_rw_state *, unsigned int);
286:	static void io_req_rw_complete(struct io_kiocb *, bool *);
656:	static int io_rw_init_file(struct io_kiocb *, fmode_t);
187:	static bool io_rw_should_reissue(struct io_kiocb *);
516:	static int io_setup_async_rw(struct io_kiocb *, const struct iovec *, struct io_rw_state *, bool);
329:	static int kiocb_done(struct io_kiocb *, ssize_t, unsigned int);
223:	static void kiocb_end_write(struct io_kiocb *);
429:	static ssize_t loop_rw_iter(int, struct io_rw *, struct iov_iter *);

File io_uring/splice.c:
88:	int io_splice(struct io_kiocb *, unsigned int);
79:	int io_splice_prep(struct io_kiocb *, const struct io_uring_sqe *);
47:	int io_tee(struct io_kiocb *, unsigned int);
40:	int io_tee_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/sqpoll.c:
67:	void io_put_sq_data(struct io_sq_data *);
333:	int io_sq_offload_create(struct io_ring_ctx *, struct io_uring_params *);
87:	void io_sq_thread_finish(struct io_ring_ctx *);
42:	void io_sq_thread_park(struct io_sq_data *);
54:	void io_sq_thread_stop(struct io_sq_data *);
27:	void io_sq_thread_unpark(struct io_sq_data *);
315:	int io_sqpoll_wait_sq(struct io_ring_ctx *);
221:	static int io_sq_thread(void *);

File io_uring/statx.c:
54:	int io_statx(struct io_kiocb *, unsigned int);
67:	void io_statx_cleanup(struct io_kiocb *);
23:	int io_statx_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/sync.c:
97:	int io_fallocate(struct io_kiocb *, unsigned int);
84:	int io_fallocate_prep(struct io_kiocb *, const struct io_uring_sqe *);
68:	int io_fsync(struct io_kiocb *, unsigned int);
52:	int io_fsync_prep(struct io_kiocb *, const struct io_uring_sqe *);
25:	int io_sfr_prep(struct io_kiocb *, const struct io_uring_sqe *);
38:	int io_sync_file_range(struct io_kiocb *, unsigned int);

File io_uring/tctx.c:
94:	int __io_uring_add_tctx_node(struct io_ring_ctx *);
136:	int __io_uring_add_tctx_node_from_submit(struct io_ring_ctx *);
47:	void __io_uring_free(struct task_struct *);
244:	int io_ringfd_register(struct io_ring_ctx *, void *, unsigned int);
303:	int io_ringfd_unregister(struct io_ring_ctx *, void *, unsigned int);
60:	int io_uring_alloc_task_context(struct task_struct *, struct io_ring_ctx *);
178:	void io_uring_clean_tctx(struct io_uring_task *);
155:	void io_uring_del_tctx_node(unsigned long);
198:	void io_uring_unreg_ringfd(void);

File io_uring/timeout.c:
178:	struct io_kiocb *__io_disarm_linked_timeout(struct io_kiocb *, struct io_kiocb *);
152:	void io_disarm_next(struct io_kiocb *);
71:	void io_flush_timeouts(struct io_ring_ctx *);
619:	bool io_kill_timeouts(struct io_ring_ctx *, struct task_struct *, bool);
521:	int io_link_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *);
577:	void io_queue_linked_timeout(struct io_kiocb *);
526:	int io_timeout(struct io_kiocb *, unsigned int);
253:	int io_timeout_cancel(struct io_ring_ctx *, struct io_cancel_data *);
516:	int io_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *);
429:	int io_timeout_remove(struct io_kiocb *, unsigned int);
389:	int io_timeout_remove_prep(struct io_kiocb *, const struct io_uring_sqe *);
458:	static int __io_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *, bool);
120:	static void io_fail_links(struct io_kiocb *);
52:	static bool io_kill_timeout(struct io_kiocb *, int);
293:	static enum hrtimer_restart io_link_timeout_fn(struct hrtimer *);
268:	static void io_req_task_link_timeout(struct io_kiocb *, bool *);
104:	static void io_req_tw_fail_links(struct io_kiocb *, bool *);
196:	static enum hrtimer_restart io_timeout_fn(struct hrtimer *);

File io_uring/uring_cmd.c:
104:	int io_uring_cmd(struct io_kiocb *, unsigned int);
22:	void io_uring_cmd_complete_in_task(struct io_uring_cmd *, void (*)(struct io_uring_cmd *));
45:	void io_uring_cmd_done(struct io_uring_cmd *, ssize_t, ssize_t);
151:	int io_uring_cmd_import_fixed(u64, unsigned long, int, struct iov_iter *, void *);
77:	int io_uring_cmd_prep(struct io_kiocb *, const struct io_uring_sqe *);
63:	int io_uring_cmd_prep_async(struct io_kiocb *);
15:	static void io_uring_cmd_work(struct io_kiocb *, bool *);

File io_uring/xattr.c:
107:	int io_fgetxattr(struct io_kiocb *, unsigned int);
81:	int io_fgetxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
221:	int io_fsetxattr(struct io_kiocb *, unsigned int);
201:	int io_fsetxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
123:	int io_getxattr(struct io_kiocb *, unsigned int);
86:	int io_getxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
233:	int io_setxattr(struct io_kiocb *, unsigned int);
180:	int io_setxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
25:	void io_xattr_cleanup(struct io_kiocb *);
44:	static int __io_getxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);

File ipc/ipc_sysctl.c:
273:	void retire_ipc_sysctls(struct ipc_namespace *);
214:	bool setup_ipc_sysctls(struct ipc_namespace *);
294:	static int ipc_mni_extend(char *);
193:	static int ipc_permissions(struct ctl_table_header *, struct ctl_table *);
283:	static int ipc_sysctl_init(void);
35:	static int proc_ipc_auto_msgmni(struct ctl_table *, int, void *, size_t *, loff_t *);
19:	static int proc_ipc_dointvec_minmax_orphans(struct ctl_table *, int, void *, size_t *, loff_t *);
50:	static int proc_ipc_sem_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
188:	static int set_is_seen(struct ctl_table_set *);
183:	static struct ctl_table_set *set_lookup(struct ctl_table_root *);

File ipc/msg.c:
640:	long __arm64_sys_msgctl(const struct pt_regs *);
315:	long __arm64_sys_msgget(const struct pt_regs *);
1270:	long __arm64_sys_msgrcv(const struct pt_regs *);
971:	long __arm64_sys_msgsnd(const struct pt_regs *);
298:	long ksys_msgget(key_t, int);
1264:	long ksys_msgrcv(int, struct msgbuf *, size_t, long, int);
961:	long ksys_msgsnd(int, struct msgbuf *, size_t, int);
1330:	void msg_exit_ns(struct ipc_namespace *);
1369:	void msg_init(void);
1306:	int msg_init_ns(struct ipc_namespace *);
273:	static void freeque(struct ipc_namespace *, struct kern_ipc_perm *);
128:	static void msg_rcu_free(struct callback_head *);
401:	static int msgctl_down(struct ipc_namespace *, int, int, struct ipc64_perm *, int);
144:	static int newque(struct ipc_namespace *, struct ipc_params *);
1341:	static int sysvipc_msg_proc_show(struct seq_file *, void *);

File ipc/msgutil.c:
145:	struct msg_msg *copy_msg(struct msg_msg *, struct msg_msg *);
169:	void free_msg(struct msg_msg *);
84:	struct msg_msg *load_msg(const void *, size_t);
150:	int store_msg(void *, struct msg_msg *, size_t);

File ipc/namespace.c:
92:	struct ipc_namespace *copy_ipcs(unsigned long, struct user_namespace *, struct ipc_namespace *);
108:	void free_ipcs(struct ipc_namespace *, struct ipc_ids *, void (*)(struct ipc_namespace *, struct kern_ipc_perm *));
181:	void put_ipc_ns(struct ipc_namespace *);
151:	static void free_ipc(struct work_struct *);
197:	static struct ns_common *ipcns_get(struct task_struct *);
216:	static int ipcns_install(struct nsset *, struct ns_common *);
229:	static struct user_namespace *ipcns_owner(struct ns_common *);
211:	static void ipcns_put(struct ns_common *);

File ipc/sem.c:
1705:	long __arm64_sys_semctl(const struct pt_regs *);
624:	long __arm64_sys_semget(const struct pt_regs *);
2298:	long __arm64_sys_semop(const struct pt_regs *);
2270:	long __arm64_sys_semtimedop(const struct pt_regs *);
1985:	long __do_semtimedop(int, struct sembuf *, unsigned int, const struct timespec64 *, struct ipc_namespace *);
2308:	int copy_semundo(unsigned long, struct task_struct *);
2337:	void exit_sem(struct task_struct *);
602:	long ksys_semget(key_t, int, int);
2258:	long ksys_semtimedop(int, struct sembuf *, unsigned int, const struct __kernel_timespec *);
260:	void sem_exit_ns(struct ipc_namespace *);
268:	void sem_init(void);
249:	void sem_init_ns(struct ipc_namespace *);
2224:	static long do_semtimedop(int, struct sembuf *, unsigned int, const struct timespec64 *);
1029:	static void do_smart_update(struct sem_array *, struct sembuf *, int, int, struct wake_q_head *);
893:	static int do_smart_wakeup_zero(struct sem_array *, struct sembuf *, int, struct wake_q_head *);
1143:	static void freeary(struct ipc_namespace *, struct kern_ipc_perm *);
1881:	static struct sem_undo *lookup_undo(struct sem_undo_list *, int);
313:	static void merge_queues(struct sem_array *);
531:	static int newary(struct ipc_namespace *, struct ipc_params *);
719:	static int perform_atomic_semop(struct sem_array *, struct sem_queue *);
646:	static int perform_atomic_semop_slow(struct sem_array *, struct sem_queue *);
389:	static int sem_lock(struct sem_array *, struct sembuf *, int);
499:	static void sem_lock_and_putref(struct sem_array *);
591:	static int sem_more_checks(struct kern_ipc_perm *, struct ipc_params *);
323:	static void sem_rcu_free(struct callback_head *);
460:	static void sem_unlock(struct sem_array *, int);
2451:	static int sysvipc_sem_proc_show(struct seq_file *, void *);
949:	static int update_queue(struct sem_array *, int, struct wake_q_head *);
854:	static int wake_const_ops(struct sem_array *, int, struct wake_q_head *);

File ipc/shm.c:
1696:	long __arm64_sys_shmat(const struct pt_regs *);
1299:	long __arm64_sys_shmctl(const struct pt_regs *);
1837:	long __arm64_sys_shmdt(const struct pt_regs *);
850:	long __arm64_sys_shmget(const struct pt_regs *);
1522:	long do_shmat(int, char *, int, ulong *, unsigned long);
439:	void exit_shm(struct task_struct *);
681:	bool is_file_shm_hugepages(struct file *);
1731:	long ksys_shmdt(char *);
831:	long ksys_shmget(key_t, size_t, int);
430:	void shm_destroy_orphaned(struct ipc_namespace *);
139:	void shm_exit_ns(struct ipc_namespace *);
155:	void shm_init(void);
108:	void shm_init_ns(struct ipc_namespace *);
368:	static void __shm_close(struct shm_file_data *);
278:	static int __shm_open(struct shm_file_data *);
122:	static void do_shm_rmid(struct ipc_namespace *, struct kern_ipc_perm *);
147:	static int ipc_ns_init(void);
705:	static int newseg(struct ipc_namespace *, struct ipc_params *);
395:	static void shm_close(struct vm_area_struct *);
328:	static void shm_destroy(struct ipc_namespace *, struct shmid_kernel *);
639:	static long shm_fallocate(struct file *, int, loff_t, loff_t);
534:	static vm_fault_t shm_fault(struct vm_fault *);
630:	static int shm_fsync(struct file *, loff_t, loff_t, int);
576:	static struct mempolicy *shm_get_policy(struct vm_area_struct *, unsigned long);
649:	static unsigned long shm_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
542:	static int shm_may_split(struct vm_area_struct *, unsigned long);
592:	static int shm_mmap(struct file *, struct vm_area_struct *);
820:	static int shm_more_checks(struct kern_ipc_perm *, struct ipc_params *);
301:	static void shm_open(struct vm_area_struct *);
553:	static unsigned long shm_pagesize(struct vm_area_struct *);
228:	static void shm_rcu_free(struct callback_head *);
619:	static int shm_release(struct inode *, struct file *);
565:	static int shm_set_policy(struct vm_area_struct *, struct mempolicy *);
408:	static int shm_try_destroy_orphaned(int, void *, void *);
1843:	static int sysvipc_shm_proc_show(struct seq_file *, void *);

File ipc/util.c:
606:	void ipc64_perm_to_ipc_perm(struct ipc64_perm *, struct ipc_perm *);
278:	int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);
115:	void ipc_init_ids(struct ipc_ids *);
138:	void ipc_init_proc_interface(const char *, const char *, int, int (*)(struct seq_file *, void *));
650:	struct kern_ipc_perm *ipc_obtain_object_check(struct ipc_ids *, int);
627:	struct kern_ipc_perm *ipc_obtain_object_idr(struct ipc_ids *, int);
528:	bool ipc_rcu_getref(struct kern_ipc_perm *);
533:	void ipc_rcu_putref(struct kern_ipc_perm *, void (*)(struct callback_head *));
497:	void ipc_rmid(struct ipc_ids *, struct kern_ipc_perm *);
779:	struct pid_namespace *ipc_seq_pid_ns(struct seq_file *);
522:	void ipc_set_key_private(struct ipc_ids *, struct kern_ipc_perm *);
687:	int ipc_update_perm(struct ipc64_perm *, struct kern_ipc_perm *);
722:	struct kern_ipc_perm *ipcctl_obtain_check(struct ipc_namespace *, struct ipc_ids *, int, int, struct ipc64_perm *, int);
673:	int ipcget(struct ipc_namespace *, struct ipc_ids *, const struct ipc_ops *, struct ipc_params *);
553:	int ipcperms(struct ipc_namespace *, struct kern_ipc_perm *, short);
587:	void kernel_to_ipc64_perm(struct kern_ipc_perm *, struct ipc64_perm *);
90:	static int ipc_init(void);
447:	static void ipc_kht_remove(struct ipc_ids *, struct kern_ipc_perm *);
467:	static int ipc_search_maxidx(struct ipc_ids *, int);
819:	static void *sysvipc_proc_next(struct seq_file *, void *, loff_t *);
900:	static int sysvipc_proc_open(struct inode *, struct file *);
915:	static int sysvipc_proc_release(struct inode *, struct file *);
880:	static int sysvipc_proc_show(struct seq_file *, void *);
838:	static void *sysvipc_proc_start(struct seq_file *, loff_t *);
864:	static void sysvipc_proc_stop(struct seq_file *, void *);

File kernel/acct.c:
292:	long __arm64_sys_acct(const struct pt_regs *);
553:	void acct_collect(long, int);
316:	void acct_exit_ns(struct pid_namespace *);
608:	void acct_process(void);
189:	static void acct_pin_kill(struct fs_pin *);
202:	static void close_work(struct work_struct *);
492:	static void do_acct_process(struct bsd_acct_struct *);
90:	static int kernel_acct_sysctls_init(void);
593:	static void slow_acct_process(struct pid_namespace *);

File kernel/async.c:
228:	async_cookie_t async_schedule_node(async_func_t, void *, int);
165:	async_cookie_t async_schedule_node_domain(async_func_t, void *, int, struct async_domain *);
288:	void async_synchronize_cookie(async_cookie_t);
267:	void async_synchronize_cookie_domain(async_cookie_t, struct async_domain *);
239:	void async_synchronize_full(void);
252:	void async_synchronize_full_domain(struct async_domain *);
299:	bool current_is_async(void);
115:	static void async_run_entry_fn(struct work_struct *);

File kernel/bpf/arraymap.c:
52:	int array_map_alloc_check(union bpf_attr *);
798:	int bpf_fd_array_map_lookup_elem(struct bpf_map *, void *, u32 *);
818:	int bpf_fd_array_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
263:	int bpf_percpu_array_copy(struct bpf_map *, void *, void *);
349:	int bpf_percpu_array_update(struct bpf_map *, void *, void *, u64);
589:	static int __bpf_array_map_seq_show(struct seq_file *, void *);
1177:	static void __bpf_event_entry_free(struct callback_head *);
80:	static struct bpf_map *array_map_alloc(union bpf_attr *);
488:	static int array_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
389:	static int array_map_delete_elem(struct bpf_map *, void *);
174:	static int array_map_direct_value_addr(const struct bpf_map *, u64 *, u32);
188:	static int array_map_direct_value_meta(const struct bpf_map *, u64, u32 *);
413:	static void array_map_free(struct bpf_map *);
399:	static void array_map_free_timers(struct bpf_map *);
205:	static int array_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
291:	static int array_map_get_next_key(struct bpf_map *, void *, void *);
163:	static void *array_map_lookup_elem(struct bpf_map *, void *);
536:	static bool array_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
520:	static int array_map_mmap(struct bpf_map *, struct vm_area_struct *);
444:	static void array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
310:	static int array_map_update_elem(struct bpf_map *, void *, void *, u64);
1298:	static struct bpf_map *array_of_map_alloc(union bpf_attr *);
1317:	static void array_of_map_free(struct bpf_map *);
1337:	static int array_of_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
1327:	static void *array_of_map_lookup_elem(struct bpf_map *, void *);
570:	static void *bpf_array_map_seq_next(struct seq_file *, void *, loff_t *);
629:	static int bpf_array_map_seq_show(struct seq_file *, void *);
551:	static void *bpf_array_map_seq_start(struct seq_file *, loff_t *);
634:	static void bpf_array_map_seq_stop(struct seq_file *, void *);
689:	static int bpf_for_each_array_elem(struct bpf_map *, bpf_callback_t, void *, u64);
667:	static void bpf_iter_fini_array_map(void *);
640:	static int bpf_iter_init_array_map(void *, struct bpf_iter_aux_info *);
1277:	static void cgroup_fd_array_free(struct bpf_map *);
1264:	static void *cgroup_fd_array_get_ptr(struct bpf_map *, struct file *, int);
1271:	static void cgroup_fd_array_put_ptr(void *);
769:	static int fd_array_map_alloc_check(union bpf_attr *);
850:	static int fd_array_map_delete_elem(struct bpf_map *, void *);
792:	static void *fd_array_map_lookup_elem(struct bpf_map *, void *);
238:	static void *percpu_array_map_lookup_elem(struct bpf_map *, void *);
249:	static void *percpu_array_map_lookup_percpu_elem(struct bpf_map *, void *, u32);
465:	static void percpu_array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1191:	static void *perf_event_fd_array_get_ptr(struct bpf_map *, struct file *, int);
1241:	static void perf_event_fd_array_map_free(struct bpf_map *);
1217:	static void perf_event_fd_array_put_ptr(void *);
1222:	static void perf_event_fd_array_release(struct bpf_map *, struct file *);
1100:	static struct bpf_map *prog_array_map_alloc(union bpf_attr *);
1092:	static void prog_array_map_clear(struct bpf_map *);
1084:	static void prog_array_map_clear_deferred(struct work_struct *);
1125:	static void prog_array_map_free(struct bpf_map *);
991:	static void prog_array_map_poke_run(struct bpf_map *, u32, struct bpf_prog *, struct bpf_prog *);
940:	static int prog_array_map_poke_track(struct bpf_map *, struct bpf_prog_aux *);
973:	static void prog_array_map_poke_untrack(struct bpf_map *, struct bpf_prog_aux *);
912:	static void prog_array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
876:	static void *prog_fd_array_get_ptr(struct bpf_map *, struct file *, int);
892:	static void prog_fd_array_put_ptr(void *);
897:	static u32 prog_fd_array_sys_lookup_elem(void *);

File kernel/bpf/bloom_filter.c:
91:	static struct bpf_map *bloom_map_alloc(union bpf_attr *);
187:	static int bloom_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
81:	static int bloom_map_delete_elem(struct bpf_map *, void *);
166:	static void bloom_map_free(struct bpf_map *);
86:	static int bloom_map_get_next_key(struct bpf_map *, void *, void *);
174:	static void *bloom_map_lookup_elem(struct bpf_map *, void *);
44:	static int bloom_map_peek_elem(struct bpf_map *, void *);
76:	static int bloom_map_pop_elem(struct bpf_map *, void *);
59:	static int bloom_map_push_elem(struct bpf_map *, void *, u64);
180:	static int bloom_map_update_elem(struct bpf_map *, void *, void *, u64);
30:	static u32 hash(struct bpf_bloom_filter *, void *, u32, u32);

File kernel/bpf/bpf_cgrp_storage.c:
198:	u64 bpf_cgrp_storage_delete(u64, u64, u64, u64, u64);
46:	void bpf_cgrp_storage_free(struct cgroup *);
168:	u64 bpf_cgrp_storage_get(u64, u64, u64, u64, u64);
135:	static int bpf_cgrp_storage_delete_elem(struct bpf_map *, void *);
85:	static void *bpf_cgrp_storage_lookup_elem(struct bpf_map *, void *);
28:	static bool bpf_cgrp_storage_trylock(void);
103:	static int bpf_cgrp_storage_update_elem(struct bpf_map *, void *, void *, u64);
157:	static struct bpf_map *cgroup_storage_map_alloc(union bpf_attr *);
162:	static void cgroup_storage_map_free(struct bpf_map *);
39:	static struct bpf_local_storage **cgroup_storage_ptr(void *);
152:	static int notsupp_get_next_key(struct bpf_map *, void *, void *);

File kernel/bpf/bpf_iter.c:
728:	u64 bpf_for_each_map_elem(u64, u64, u64, u64, u64);
373:	const struct bpf_func_proto *bpf_iter_get_func_proto(enum bpf_func_id, const struct bpf_prog *);
672:	struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *, bool);
507:	int bpf_iter_link_attach(const union bpf_attr *, bpfptr_t, struct bpf_prog *);
636:	int bpf_iter_new_fd(struct bpf_link *);
339:	bool bpf_iter_prog_supported(struct bpf_prog *);
296:	int bpf_iter_reg_target(const struct bpf_iter_reg *);
695:	int bpf_iter_run_prog(struct bpf_prog *, void *);
314:	void bpf_iter_unreg_target(const struct bpf_iter_reg *);
502:	bool bpf_link_is_iter(struct bpf_link *);
744:	u64 bpf_loop(u64, u64, u64, u64, u64);
403:	static void bpf_iter_link_dealloc(struct bpf_link *);
454:	static int bpf_iter_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
394:	static void bpf_iter_link_release(struct bpf_link *);
411:	static int bpf_iter_link_replace(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
438:	static void bpf_iter_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
94:	static ssize_t bpf_seq_read(struct file *, char *, size_t, loff_t *);
256:	static int iter_open(struct inode *, struct file *);
263:	static int iter_release(struct inode *, struct file *);
591:	static int prepare_seq_file(struct file *, struct bpf_iter_link *, const struct bpf_iter_seq_info *);

File kernel/bpf/bpf_local_storage.c:
302:	int bpf_local_storage_alloc(void *, struct bpf_local_storage_map *, struct bpf_local_storage_elem *, gfp_t);
87:	void bpf_local_storage_free_rcu(struct callback_head *);
247:	struct bpf_local_storage_data *bpf_local_storage_lookup(struct bpf_local_storage *, struct bpf_local_storage_map *, bool);
640:	struct bpf_map *bpf_local_storage_map_alloc(union bpf_attr *, struct bpf_local_storage_cache *);
536:	int bpf_local_storage_map_alloc_check(union bpf_attr *);
589:	int bpf_local_storage_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
653:	void bpf_local_storage_map_free(struct bpf_map *, struct bpf_local_storage_cache *, int *);
606:	bool bpf_local_storage_unlink_nolock(struct bpf_local_storage *);
372:	struct bpf_local_storage_data *bpf_local_storage_update(void *, struct bpf_local_storage_map *, void *, u64, gfp_t);
65:	struct bpf_local_storage_elem *bpf_selem_alloc(struct bpf_local_storage_map *, void *, void *, bool, gfp_t);
223:	void bpf_selem_link_map(struct bpf_local_storage_map *, struct bpf_local_storage_elem *);
198:	void bpf_selem_link_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *);
235:	void bpf_selem_unlink(struct bpf_local_storage_elem *, bool);
205:	void bpf_selem_unlink_map(struct bpf_local_storage_elem *);
101:	static void bpf_selem_free_rcu(struct callback_head *);
116:	static bool bpf_selem_unlink_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *, bool, bool);

File kernel/bpf/bpf_lru_list.c:
689:	void bpf_lru_destroy(struct bpf_lru *);
646:	int bpf_lru_init(struct bpf_lru *, bool, u32, del_from_htab_func, void *);
494:	struct bpf_lru_node *bpf_lru_pop_free(struct bpf_lru *, u32);
608:	void bpf_lru_populate(struct bpf_lru *, void *, u32, u32, u32);
551:	void bpf_lru_push_free(struct bpf_lru *, struct bpf_lru_node *);
237:	static void __bpf_lru_list_rotate(struct bpf_lru *, struct bpf_lru_list *);
255:	static unsigned int __bpf_lru_list_shrink(struct bpf_lru *, struct bpf_lru_list *, unsigned int, struct list_head *, enum bpf_lru_list_type);

File kernel/bpf/bpf_task_storage.c:
293:	u64 bpf_task_storage_delete(u64, u64, u64, u64, u64);
272:	u64 bpf_task_storage_delete_recur(u64, u64, u64, u64, u64);
72:	void bpf_task_storage_free(struct task_struct *);
256:	u64 bpf_task_storage_get(u64, u64, u64, u64, u64);
237:	u64 bpf_task_storage_get_recur(u64, u64, u64, u64, u64);
183:	static int bpf_pid_task_storage_delete_elem(struct bpf_map *, void *);
97:	static void *bpf_pid_task_storage_lookup_elem(struct bpf_map *, void *);
130:	static int bpf_pid_task_storage_update_elem(struct bpf_map *, void *, void *, u64);
38:	static bool bpf_task_storage_trylock(void);
312:	static int notsupp_get_next_key(struct bpf_map *, void *, void *);
317:	static struct bpf_map *task_storage_map_alloc(union bpf_attr *);
322:	static void task_storage_map_free(struct bpf_map *);
49:	static struct bpf_local_storage **task_storage_ptr(void *);

File kernel/bpf/btf.c:
7417:	u64 bpf_btf_find_by_name_kind(u64, u64, u64, u64, u64);
8145:	int bpf_core_apply(struct bpf_core_ctx *, const struct bpf_core_relo *, int, void *);
7838:	size_t bpf_core_essential_name_len(const char *);
7814:	int bpf_core_types_are_compat(const struct btf *, __u32, const struct btf *, __u32);
7823:	int bpf_core_types_match(const struct btf *, u32, const struct btf *, u32);
5776:	struct btf *bpf_prog_get_target_btf(const struct bpf_prog *);
3722:	int btf_check_and_fixup_fields(const struct btf *, struct btf_record *);
6756:	int btf_check_subprog_arg_match(struct bpf_verifier_env *, int, struct bpf_reg_state *);
6799:	int btf_check_subprog_call(struct bpf_verifier_env *, int, struct bpf_reg_state *);
6624:	int btf_check_type_match(struct bpf_verifier_log *, const struct bpf_prog *, struct btf *, const struct btf_type *);
5842:	bool btf_ctx_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
6436:	int btf_distill_func_proto(struct bpf_verifier_log *, struct btf *, const struct btf_type *, const char *, struct btf_func_model *);
512:	s32 btf_find_by_name_kind(const struct btf *, const char *, u8);
7661:	s32 btf_find_dtor_kfunc(struct btf *, u32);
5337:	struct btf_struct_meta *btf_find_struct_meta(const struct btf *, u32);
1679:	void btf_get(struct btf *);
7094:	struct btf *btf_get_by_fd(int);
7176:	int btf_get_fd_by_id(u32);
7116:	int btf_get_info_by_fd(const struct btf *, const union bpf_attr *, union bpf_attr *);
5537:	const struct btf_member *btf_get_prog_ctx_type(struct bpf_verifier_log *, const struct btf *, const struct btf_type *, enum bpf_prog_type, int);
7202:	bool btf_is_kernel(const struct btf *);
7207:	bool btf_is_module(const struct btf *);
7597:	u32 *btf_kfunc_id_set_contains(const struct btf *, enum bpf_prog_type, u32);
7612:	u32 *btf_kfunc_is_modify_return(const struct btf *, u32);
844:	bool btf_member_is_reg_int(const struct btf *, const struct btf_type *, const struct btf_member *, u32, u32);
800:	const char *btf_name_by_offset(const struct btf *, u32);
7063:	int btf_new_fd(const union bpf_attr *, bpfptr_t);
500:	u32 btf_nr_types(const struct btf *);
7197:	u32 btf_obj_id(const struct btf *);
3809:	struct btf_field_offs *btf_parse_field_offs(struct btf_record *);
3639:	struct btf_record *btf_parse_fields(const struct btf *, const struct btf_type *, u32, u32);
5632:	struct btf *btf_parse_vmlinux(void);
6837:	int btf_prepare_func_args(struct bpf_verifier_env *, int, struct bpf_reg_state *);
1684:	void btf_put(struct btf *);
1914:	const struct btf_type *btf_resolve_size(const struct btf *, const struct btf_type *, u32 *);
6286:	int btf_struct_access(struct bpf_verifier_log *, const struct bpf_reg_state *, int, int, enum bpf_access_type, u32 *, enum bpf_type_flag *);
6374:	bool btf_struct_ids_match(struct bpf_verifier_log *, const struct btf *, u32, int, const struct btf *, u32, bool);
7357:	struct module *btf_try_get_module(const struct btf *);
805:	const struct btf_type *btf_type_by_id(const struct btf *, u32);
1944:	const struct btf_type *btf_type_id_size(const struct btf *, u32 *, u32 *);
463:	bool btf_type_is_void(const struct btf_type *);
604:	const struct btf_type *btf_type_resolve_func_ptr(const struct btf *, u32, u32 *);
592:	const struct btf_type *btf_type_resolve_ptr(const struct btf *, u32, u32 *);
6979:	void btf_type_seq_show(const struct btf *, u32, void *, struct seq_file *);
6965:	int btf_type_seq_show_flags(const struct btf *, u32, void *, struct seq_file *, u64);
576:	const struct btf_type *btf_type_skip_modifiers(const struct btf *, u32, u32 *);
7015:	int btf_type_snprintf_show(const struct btf *, u32, void *, char *, int, u64);
319:	const char *btf_type_str(const struct btf_type *);
6364:	bool btf_types_are_same(const struct btf *, u32, const struct btf *, u32);
5609:	int get_kern_ctx_btf_id(struct bpf_verifier_log *, enum bpf_prog_type);
7655:	int register_btf_fmodret_id_set(const struct btf_kfunc_id_set *);
7716:	int register_btf_id_dtor_kfuncs(const struct btf_id_dtor_kfunc *, u32, struct module *);
7644:	int register_btf_kfunc_id_set(enum bpf_prog_type, const struct btf_kfunc_id_set *);
2932:	static void __btf_array_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1844:	static const struct btf_type *__btf_resolve_size(const struct btf *, const struct btf_type *, u32 *, const struct btf_type **, u32 *, u32 *, u32 *);
3838:	static void __btf_struct_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1364:	static void __btf_verifier_log(struct bpf_verifier_log *, const char *, ...);
1388:	static void __btf_verifier_log_type(struct btf_verifier_env *, const struct btf_type *, bool, const char *, ...);
6413:	static int __get_type_size(struct btf *, u32, const struct btf_type **);
7883:	static void __print_cand_cache(struct bpf_verifier_log *, struct bpf_cand_cache **, int);
7617:	static int __register_btf_kfunc_id_set(enum btf_kfunc_hook, const struct btf_kfunc_id_set *);
7037:	static void bpf_btf_show_fdinfo(struct seq_file *, struct file *);
8007:	static struct bpf_cand_cache *bpf_core_add_cands(struct bpf_cand_cache *, const struct btf *, int);
532:	static s32 bpf_find_btf_id(const char *, u32, struct btf **);
1574:	static int btf_alloc_id(struct btf *);
2776:	static int btf_array_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2805:	static s32 btf_array_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2923:	static void btf_array_log(struct btf_verifier_env *, const struct btf_type *);
2858:	static int btf_array_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2985:	static void btf_array_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4916:	static int btf_check_all_metas(struct btf_verifier_env *);
6647:	static int btf_check_func_arg_match(struct bpf_verifier_env *, const struct btf *, u32, struct bpf_reg_state *, bool, bool);
5118:	static int btf_check_sec_info(struct btf_verifier_env *, u32);
5348:	static int btf_check_type_tags(struct btf_verifier_env *, struct btf *, int);
4399:	static s32 btf_datasec_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4511:	static void btf_datasec_log(struct btf_verifier_env *, const struct btf_type *);
4472:	static int btf_datasec_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
4517:	static void btf_datasec_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4625:	static s32 btf_decl_tag_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4714:	static void btf_decl_tag_log(struct btf_verifier_env *, const struct btf_type *);
4668:	static int btf_decl_tag_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
1997:	static int btf_df_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
1987:	static int btf_df_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2029:	static int btf_df_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2036:	static void btf_df_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4096:	static s32 btf_enum64_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4156:	static void btf_enum64_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
3953:	static int btf_enum_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3928:	static int btf_enum_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3988:	static s32 btf_enum_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4047:	static void btf_enum_log(struct btf_verifier_env *, const struct btf_type *);
4053:	static void btf_enum_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
3783:	static int btf_field_offs_cmp(const void *, const void *, const void *);
3795:	static void btf_field_offs_swap(void *, void *, int, const void *);
3248:	static int btf_find_kptr(const struct btf *, const struct btf_type *, u32, int, struct btf_field_info *);
3308:	static int btf_find_list_head(const struct btf *, const struct btf_type *, const struct btf_type *, int, u32, int, struct btf_field_info *);
4575:	static int btf_float_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
4550:	static s32 btf_float_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4610:	static void btf_float_log(struct btf_verifier_env *, const struct btf_type *);
1660:	static void btf_free(struct btf *);
1610:	static void btf_free_kfunc_set_tab(struct btf *);
1672:	static void btf_free_rcu(struct callback_head *);
1652:	static void btf_free_struct_meta_tab(struct btf *);
4286:	static s32 btf_func_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4199:	static s32 btf_func_proto_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4227:	static void btf_func_proto_log(struct btf_verifier_env *, const struct btf_type *);
4311:	static int btf_func_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2735:	static s32 btf_fwd_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2761:	static void btf_fwd_type_log(struct btf_verifier_env *, const struct btf_type *);
2010:	static int btf_generic_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3343:	static int btf_get_field_type(const char *, u32, u32 *, int *, int *);
2213:	static void btf_int128_print(struct btf_show *, void *);
2081:	static int btf_int_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2043:	static int btf_int_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2137:	static s32 btf_int_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2201:	static void btf_int_log(struct btf_verifier_env *, const struct btf_type *);
2323:	static void btf_int_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2427:	static int btf_modifier_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2402:	static int btf_modifier_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2526:	static int btf_modifier_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2671:	static void btf_modifier_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
5171:	static int btf_parse_hdr(struct btf_verifier_env *);
5242:	static struct btf_struct_metas *btf_parse_struct_metas(struct bpf_verifier_log *, struct btf *);
5051:	static int btf_parse_type_sec(struct btf_verifier_env *);
2452:	static int btf_ptr_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2614:	static int btf_ptr_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2693:	static void btf_ptr_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2478:	static int btf_ref_type_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2711:	static void btf_ref_type_log(struct btf_verifier_env *, const struct btf_type *);
7045:	static int btf_release(struct inode *, struct file *);
4984:	static int btf_resolve(struct btf_verifier_env *, const struct btf_type *, u32);
5110:	static int btf_sec_info_cmp(const void *, const void *);
6959:	static void btf_seq_show(struct btf_show *, const char *, va_list);
1096:	static void btf_show(struct btf_show *, const char *, ...);
905:	static const char *btf_show_name(struct btf_show *);
1267:	static void *btf_show_start_type(struct btf_show *, const struct btf_type *, u32, void *);
6993:	static void btf_snprintf_show(struct btf_show *, const char *, va_list);
3027:	static int btf_struct_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3052:	static s32 btf_struct_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3204:	static void btf_struct_log(struct btf_verifier_env *, const struct btf_type *);
3133:	static int btf_struct_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
3885:	static void btf_struct_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
6042:	static int btf_struct_walk(struct bpf_verifier_log *, const struct btf *, const struct btf_type *, int, int, u32 *, enum bpf_type_flag *);
4335:	static s32 btf_var_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4383:	static void btf_var_log(struct btf_verifier_env *, const struct btf_type *);
2568:	static int btf_var_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2684:	static void btf_var_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1374:	static void btf_verifier_log(struct btf_verifier_env *, const char *, ...);
1432:	static void btf_verifier_log_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const char *, ...);
1478:	static void btf_verifier_log_vsi(struct btf_verifier_env *, const struct btf_type *, const struct btf_var_secinfo *, const char *, ...);
1769:	static int env_stack_push(struct btf_verifier_env *, const struct btf_type *, u32);
1734:	static bool env_type_is_resolve_sink(const struct btf_verifier_env *, const struct btf_type *);
7915:	static u32 hash_cands(struct bpf_cand_cache *);
5786:	static bool is_int_ptr(struct btf *, const struct btf_type *);
7937:	static struct bpf_cand_cache *populate_cand_cache(struct bpf_cand_cache *, struct bpf_cand_cache **, int);

File kernel/bpf/cgroup.c:
1520:	int __cgroup_bpf_check_dev_permission(short, u32, u32, short, enum cgroup_bpf_attach_type);
1437:	int __cgroup_bpf_run_filter_sk(struct sock *, enum cgroup_bpf_attach_type);
1356:	int __cgroup_bpf_run_filter_skb(struct sock *, struct sk_buff *, enum cgroup_bpf_attach_type);
1462:	int __cgroup_bpf_run_filter_sock_addr(struct sock *, struct sockaddr *, enum cgroup_bpf_attach_type, void *, u32 *);
1509:	int __cgroup_bpf_run_filter_sock_ops(struct sock *, struct bpf_sock_ops_kern *, enum cgroup_bpf_attach_type);
1681:	int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *, struct ctl_table *, int, char **, size_t *, loff_t *, enum cgroup_bpf_attach_type);
110:	unsigned int __cgroup_bpf_run_lsm_current(const void *, const struct bpf_insn *);
66:	unsigned int __cgroup_bpf_run_lsm_sock(const void *, const struct bpf_insn *);
88:	unsigned int __cgroup_bpf_run_lsm_socket(const void *, const struct bpf_insn *);
1540:	u64 bpf_get_local_storage(u64, u64, u64, u64, u64);
1571:	u64 bpf_get_retval(u64, u64, u64, u64, u64);
1585:	u64 bpf_set_retval(u64, u64, u64, u64, u64);
2071:	u64 bpf_sysctl_get_current_value(u64, u64, u64, u64, u64);
2014:	u64 bpf_sysctl_get_name(u64, u64, u64, u64, u64);
2086:	u64 bpf_sysctl_get_new_value(u64, u64, u64, u64, u64);
2106:	u64 bpf_sysctl_set_new_value(u64, u64, u64, u64, u64);
461:	int cgroup_bpf_inherit(struct cgroup *);
1273:	int cgroup_bpf_link_attach(const union bpf_attr *, struct bpf_prog *);
192:	void cgroup_bpf_offline(struct cgroup *);
1129:	int cgroup_bpf_prog_attach(const union bpf_attr *, enum bpf_prog_type, struct bpf_prog *);
1158:	int cgroup_bpf_prog_detach(const union bpf_attr *, enum bpf_prog_type);
1317:	int cgroup_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
2481:	const struct bpf_func_proto *cgroup_common_func_proto(enum bpf_func_id, const struct bpf_prog *);
2523:	const struct bpf_func_proto *cgroup_current_func_proto(enum bpf_func_id, const struct bpf_prog *);
949:	static int __cgroup_bpf_detach(struct cgroup *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type);
1213:	static void bpf_cgroup_link_dealloc(struct bpf_link *);
1221:	static int bpf_cgroup_link_detach(struct bpf_link *);
1247:	static int bpf_cgroup_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
1180:	static void bpf_cgroup_link_release(struct bpf_link *);
1228:	static void bpf_cgroup_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
2384:	static u32 cg_sockopt_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
2277:	static const struct bpf_func_proto *cg_sockopt_func_proto(enum bpf_func_id, const struct bpf_prog *);
2460:	static int cg_sockopt_get_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
2317:	static bool cg_sockopt_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
724:	static int cgroup_bpf_attach(struct cgroup *, struct bpf_prog *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type, u32);
275:	static void cgroup_bpf_release(struct work_struct *);
332:	static void cgroup_bpf_release_fn(struct percpu_ref *);
826:	static int cgroup_bpf_replace(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
1602:	static const struct bpf_func_proto *cgroup_dev_func_proto(enum bpf_func_id, const struct bpf_prog *);
1622:	static bool cgroup_dev_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
401:	static int compute_effective_progs(struct cgroup *, enum cgroup_bpf_attach_type, struct bpf_prog_array **);
2189:	static u32 sysctl_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
1983:	static ssize_t sysctl_cpy_dir(const struct ctl_dir *, char **, size_t *);
2132:	static const struct bpf_func_proto *sysctl_func_proto(enum bpf_func_id, const struct bpf_prog *);
2162:	static bool sysctl_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
504:	static int update_effective_progs(struct cgroup *, enum cgroup_bpf_attach_type);

File kernel/bpf/cgroup_iter.c:
272:	int bpf_iter_cgroup(struct bpf_iter_meta *, struct cgroup *);
290:	static int bpf_cgroup_iter_init(void);
194:	static int bpf_iter_attach_cgroup(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
264:	static int bpf_iter_cgroup_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
232:	static void bpf_iter_cgroup_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
227:	static void bpf_iter_detach_cgroup(struct bpf_iter_aux_info *);
180:	static void cgroup_iter_seq_fini(void *);
162:	static int cgroup_iter_seq_init(void *, struct bpf_iter_aux_info *);
101:	static void *cgroup_iter_seq_next(struct seq_file *, void *, loff_t *);
147:	static int cgroup_iter_seq_show(struct seq_file *, void *);
57:	static void *cgroup_iter_seq_start(struct seq_file *, loff_t *);
88:	static void cgroup_iter_seq_stop(struct seq_file *, void *);

File kernel/bpf/core.c:
1465:	u64 __bpf_call_base(u64, u64, u64, u64, u64);
2519:	void __bpf_free_used_btfs(struct bpf_prog_aux *, struct btf_mod_pair *, u32);
2499:	void __bpf_free_used_maps(struct bpf_prog_aux *, struct bpf_map **, u32);
264:	void __bpf_prog_free(struct bpf_prog *);
2742:	void *bpf_arch_text_copy(void *, void *, size_t);
2747:	int bpf_arch_text_invalidate(void *, size_t);
2736:	int bpf_arch_text_poke(void *, enum bpf_text_poke_type, void *, void *);
2665:	u64 bpf_event_output(struct bpf_map *, u64, void *, u64, void *, u64, bpf_ctx_copy_t);
2617:	u64 bpf_get_raw_cpu_id(u64, u64, u64, u64, u64);
2654:	const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
2659:	const struct bpf_func_proto *bpf_get_trace_vprintk_proto(void);
2698:	bool bpf_helper_changes_pkt_data(void *);
2686:	struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *);
71:	void *bpf_internal_load_pointer_neg_helper(const struct sk_buff *, int, unsigned int);
2694:	void bpf_jit_compile(struct bpf_prog *);
2711:	bool bpf_jit_needs_zext(void);
2722:	bool bpf_jit_supports_kfunc_call(void);
2717:	bool bpf_jit_supports_subprog_tailcalls(void);
1608:	bool bpf_opcode_in_insntable(u8);
2069:	void bpf_patch_call_args(struct bpf_insn *, u32);
453:	struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *, u32, const struct bpf_insn *, u32);
1630:	u64 bpf_probe_read_kernel(void *, u32, const void *);
127:	struct bpf_prog *bpf_prog_alloc(unsigned int, gfp_t);
155:	int bpf_prog_alloc_jited_linfo(struct bpf_prog *);
88:	struct bpf_prog *bpf_prog_alloc_no_stats(unsigned int, gfp_t);
2235:	struct bpf_prog_array *bpf_prog_array_alloc(u32, gfp_t);
2408:	int bpf_prog_array_copy(struct bpf_prog_array *, struct bpf_prog *, struct bpf_prog *, u64, struct bpf_prog_array **);
2479:	int bpf_prog_array_copy_info(struct bpf_prog_array *, u32 *, u32, u32 *);
2315:	int bpf_prog_array_copy_to_user(struct bpf_prog_array *, __u32 *, u32);
2341:	void bpf_prog_array_delete_safe(struct bpf_prog_array *, struct bpf_prog *);
2368:	int bpf_prog_array_delete_safe_at(struct bpf_prog_array *, int);
2246:	void bpf_prog_array_free(struct bpf_prog_array *);
2267:	void bpf_prog_array_free_sleepable(struct bpf_prog_array *);
2285:	bool bpf_prog_array_is_empty(struct bpf_prog_array *);
2274:	int bpf_prog_array_length(struct bpf_prog_array *);
2388:	int bpf_prog_array_update_at(struct bpf_prog_array *, int, struct bpf_prog *);
277:	int bpf_prog_calc_tag(struct bpf_prog *);
205:	void bpf_prog_fill_jited_linfo(struct bpf_prog *, const u32 *);
2580:	void bpf_prog_free(struct bpf_prog *);
169:	void bpf_prog_jit_attempt_done(struct bpf_prog *);
534:	void bpf_prog_kallsyms_del_all(struct bpf_prog *);
2090:	bool bpf_prog_map_compatible(struct bpf_map *, const struct bpf_prog *);
234:	struct bpf_prog *bpf_prog_realloc(struct bpf_prog *, unsigned int, gfp_t);
2163:	struct bpf_prog *bpf_prog_select_runtime(struct bpf_prog *, int *);
514:	int bpf_remove_insns(struct bpf_prog *, u32, u32);
2594:	void bpf_user_rnd_init_once(void);
2599:	u64 bpf_user_rnd_u32(u64, u64, u64, u64, u64);
2730:	int skb_copy_bits(const struct sk_buff *, int, void *, int);
1645:	static u64 ___bpf_prog_run(u64 *, const struct bpf_insn *);
2253:	static void __bpf_prog_array_free_sleepable_cb(struct callback_head *);
2216:	static unsigned int __bpf_prog_ret1(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run128(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run160(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run192(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run224(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run256(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run288(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run32(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run320(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run352(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run384(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run416(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run448(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run480(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run512(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run64(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run96(const void *, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args128(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args160(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args192(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args224(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args256(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args288(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args32(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args320(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args352(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args384(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args416(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args448(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args480(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args512(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args64(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args96(u64, u64, u64, u64, u64, const struct bpf_insn *);
386:	static int bpf_adj_branches(struct bpf_prog *, u32, s32, s32, const bool);
2753:	static int bpf_global_ma_init(void);
2541:	static void bpf_prog_free_deferred(struct work_struct *);

File kernel/bpf/disasm.c:
54:	const char *func_id_name(int);
131:	void print_bpf_insn(const struct bpf_insn_cbs *, const struct bpf_insn *, bool);
16:	static const char *__func_get_name(const struct bpf_insn_cbs *, const struct bpf_insn *, char *, size_t);
43:	static const char *__func_imm_name(const struct bpf_insn_cbs *, const struct bpf_insn *, u64, char *, size_t);

File kernel/bpf/hashtab.c:
2419:	int bpf_fd_htab_map_lookup_elem(struct bpf_map *, void *, u32 *);
2439:	int bpf_fd_htab_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
2273:	int bpf_percpu_hash_copy(struct bpf_map *, void *, void *);
2305:	int bpf_percpu_hash_update(struct bpf_map *, void *, void *, u64);
2024:	static int __bpf_hash_map_seq_show(struct seq_file *, struct htab_elem *);
1286:	static int __htab_lru_percpu_map_update_elem(struct bpf_map *, void *, void *, u64, bool);
1642:	static int __htab_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *, bool, bool, bool);
1547:	static int __htab_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, bool, bool, u64);
653:	static void *__htab_map_lookup_elem(struct bpf_map *, void *);
1231:	static int __htab_percpu_map_update_elem(struct bpf_map *, void *, void *, u64, bool);
371:	static int alloc_extra_elems(struct bpf_htab *);
965:	static struct htab_elem *alloc_htab_elem(struct bpf_htab *, void *, void *, u32, u32, bool, bool, struct htab_elem *);
2122:	static int bpf_for_each_hash_elem(struct bpf_map *, bpf_callback_t, void *, u64);
1946:	static struct htab_elem *bpf_hash_map_seq_find_next(struct bpf_iter_seq_hash_map_info *, struct htab_elem *);
2015:	static void *bpf_hash_map_seq_next(struct seq_file *, void *, loff_t *);
2063:	static int bpf_hash_map_seq_show(struct seq_file *, void *);
2001:	static void *bpf_hash_map_seq_start(struct seq_file *, loff_t *);
2068:	static void bpf_hash_map_seq_stop(struct seq_file *, void *);
2100:	static void bpf_iter_fini_hash_map(void *);
2076:	static int bpf_iter_init_hash_map(void *, struct bpf_iter_aux_info *);
2390:	static int fd_htab_map_alloc_check(union bpf_attr *);
903:	static void free_htab_elem(struct bpf_htab *, struct htab_elem *);
1403:	static int htab_lru_map_delete_elem(struct bpf_map *, void *);
770:	static bool htab_lru_map_delete_node(void *, struct bpf_lru_node *);
734:	static int htab_lru_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
1929:	static int htab_lru_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1626:	static int htab_lru_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1921:	static int htab_lru_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
724:	static void *htab_lru_map_lookup_elem(struct bpf_map *, void *);
729:	static void *htab_lru_map_lookup_elem_sys(struct bpf_map *, void *);
1164:	static int htab_lru_map_update_elem(struct bpf_map *, void *, void *, u64);
1912:	static int htab_lru_percpu_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1633:	static int htab_lru_percpu_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1903:	static int htab_lru_percpu_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
2245:	static void *htab_lru_percpu_map_lookup_elem(struct bpf_map *, void *);
2257:	static void *htab_lru_percpu_map_lookup_percpu_elem(struct bpf_map *, void *, u32);
1359:	static int htab_lru_percpu_map_update_elem(struct bpf_map *, void *, void *, u64);
456:	static struct bpf_map *htab_map_alloc(union bpf_attr *);
395:	static int htab_map_alloc_check(union bpf_attr *);
1367:	static int htab_map_delete_elem(struct bpf_map *, void *);
1493:	static void htab_map_free(struct bpf_map *);
1479:	static void htab_map_free_timers(struct bpf_map *);
695:	static int htab_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
801:	static int htab_map_get_next_key(struct bpf_map *, void *, void *);
597:	static u32 htab_map_hash(const void *, u32, u32);
1894:	static int htab_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1611:	static int htab_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1886:	static int htab_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
674:	static void *htab_map_lookup_elem(struct bpf_map *, void *);
1526:	static void htab_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1062:	static int htab_map_update_elem(struct bpf_map *, void *, void *, u64);
2457:	static struct bpf_map *htab_of_map_alloc(union bpf_attr *);
2504:	static void htab_of_map_free(struct bpf_map *);
2486:	static int htab_of_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
2476:	static void *htab_of_map_lookup_elem(struct bpf_map *, void *);
1877:	static int htab_percpu_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1618:	static int htab_percpu_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1869:	static int htab_percpu_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
2221:	static void *htab_percpu_map_lookup_elem(struct bpf_map *, void *);
2231:	static void *htab_percpu_map_lookup_percpu_elem(struct bpf_map *, void *, u32);
2323:	static void htab_percpu_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1353:	static int htab_percpu_map_update_elem(struct bpf_map *, void *, void *, u64);
170:	static void htab_unlock_bucket(const struct bpf_htab *, struct bucket *, u32, unsigned long);
630:	static struct htab_elem *lookup_nulls_elem_raw(struct hlist_nulls_head *, u32, void *, u32, u32);
934:	static void pcpu_init_value(struct bpf_htab *, void *, void *, bool);
361:	static void prealloc_destroy(struct bpf_htab *);

File kernel/bpf/helpers.c:
1585:	const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id);
787:	void bpf_bprintf_cleanup(void);
809:	int bpf_bprintf_prepare(char *, u32, const u64 *, u32 **, u32);
2024:	void *bpf_cast_to_kern_ctx(void *);
1933:	struct cgroup *bpf_cgroup_acquire(struct cgroup *);
1992:	struct cgroup *bpf_cgroup_ancestor(struct cgroup *, int);
1945:	struct cgroup *bpf_cgroup_kptr_get(struct cgroup **);
1977:	void bpf_cgroup_release(struct cgroup *);
648:	u64 bpf_copy_from_user(u64, u64, u64, u64, u64);
671:	u64 bpf_copy_from_user_task(u64, u64, u64, u64, u64);
1422:	int bpf_dynptr_check_size(u32);
1550:	u64 bpf_dynptr_data(u64, u64, u64, u64, u64);
1451:	u64 bpf_dynptr_from_mem(u64, u64, u64, u64, u64);
1417:	u32 bpf_dynptr_get_size(const struct bpf_dynptr_kern *);
1427:	void bpf_dynptr_init(struct bpf_dynptr_kern *, void *, enum bpf_dynptr_type, u32, u32);
1486:	u64 bpf_dynptr_read(u64, u64, u64, u64, u64);
1436:	void bpf_dynptr_set_null(struct bpf_dynptr_kern *);
1518:	u64 bpf_dynptr_write(u64, u64, u64, u64, u64);
628:	u64 bpf_event_output_data(u64, u64, u64, u64, u64);
414:	u64 bpf_get_current_ancestor_cgroup_id(u64, u64, u64, u64, u64);
395:	u64 bpf_get_current_cgroup_id(u64, u64, u64, u64, u64);
252:	u64 bpf_get_current_comm(u64, u64, u64, u64, u64);
216:	u64 bpf_get_current_pid_tgid(u64, u64, u64, u64, u64);
232:	u64 bpf_get_current_uid_gid(u64, u64, u64, u64, u64);
579:	u64 bpf_get_ns_current_pid_tgid(u64, u64, u64, u64, u64);
158:	u64 bpf_get_numa_node_id(u64, u64, u64, u64, u64);
147:	u64 bpf_get_smp_processor_id(u64, u64, u64, u64, u64);
383:	u64 bpf_jiffies64(u64, u64, u64, u64, u64);
1378:	u64 bpf_kptr_xchg(u64, u64, u64, u64, u64);
181:	u64 bpf_ktime_get_boot_ns(u64, u64, u64, u64, u64);
193:	u64 bpf_ktime_get_coarse_ns(u64, u64, u64, u64, u64);
169:	u64 bpf_ktime_get_ns(u64, u64, u64, u64, u64);
204:	u64 bpf_ktime_get_tai_ns(u64, u64, u64, u64, u64);
1723:	void bpf_list_head_free(const struct btf_field *, void *, struct bpf_spin_lock *);
1831:	struct bpf_list_node *bpf_list_pop_back(struct bpf_list_head *);
1826:	struct bpf_list_node *bpf_list_pop_front(struct bpf_list_head *);
1808:	void bpf_list_push_back(struct bpf_list_head *, struct bpf_list_node *);
1803:	void bpf_list_push_front(struct bpf_list_head *, struct bpf_list_node *);
69:	u64 bpf_map_delete_elem(u64, u64, u64, u64, u64);
36:	u64 bpf_map_lookup_elem(u64, u64, u64, u64, u64);
125:	u64 bpf_map_lookup_percpu_elem(u64, u64, u64, u64, u64);
112:	u64 bpf_map_peek_elem(u64, u64, u64, u64, u64);
99:	u64 bpf_map_pop_elem(u64, u64, u64, u64, u64);
84:	u64 bpf_map_push_elem(u64, u64, u64, u64, u64);
51:	u64 bpf_map_update_elem(u64, u64, u64, u64, u64);
1782:	void bpf_obj_drop_impl(void *, void *);
1768:	void *bpf_obj_new_impl(u64, void *);
705:	u64 bpf_per_cpu_ptr(u64, u64, u64, u64, u64);
2034:	void bpf_rcu_read_lock(void);
2039:	void bpf_rcu_read_unlock(void);
2029:	void *bpf_rdonly_cast(void *, u32);
1028:	u64 bpf_snprintf(u64, u64, u64, u64, u64);
330:	u64 bpf_spin_lock(u64, u64, u64, u64, u64);
353:	u64 bpf_spin_unlock(u64, u64, u64, u64, u64);
565:	u64 bpf_strncmp(u64, u64, u64, u64, u64);
512:	u64 bpf_strtol(u64, u64, u64, u64, u64);
537:	u64 bpf_strtoul(u64, u64, u64, u64, u64);
1842:	struct task_struct *bpf_task_acquire(struct task_struct *);
1853:	struct task_struct *bpf_task_acquire_not_zero(struct task_struct *);
2011:	struct task_struct *bpf_task_from_pid(s32);
1905:	struct task_struct *bpf_task_kptr_get(struct task_struct **);
1918:	void bpf_task_release(struct task_struct *);
721:	u64 bpf_this_cpu_ptr(u64, u64, u64, u64, u64);
1293:	u64 bpf_timer_cancel(u64, u64, u64, u64, u64);
1334:	void bpf_timer_cancel_and_free(void *);
1139:	u64 bpf_timer_init(u64, u64, u64, u64, u64);
1199:	u64 bpf_timer_set_callback(u64, u64, u64, u64, u64);
1252:	u64 bpf_timer_start(u64, u64, u64, u64, u64);
367:	void copy_map_value_locked(struct bpf_map *, void *, void *, bool);
439:	static int __bpf_strtoull(const char *, size_t, u64, unsigned long long *, bool *);
1100:	static enum hrtimer_restart bpf_timer_cb(struct hrtimer *);
2095:	static int kfunc_init(void);

File kernel/bpf/inode.c:
530:	int bpf_obj_get_user(const char *, int);
481:	int bpf_obj_pin_user(u32, const char *);
586:	struct bpf_prog *bpf_prog_get_type_path(const char *, enum bpf_prog_type);
743:	static int bpf_fill_super(struct super_block *, struct fs_context *);
769:	static void bpf_free_fc(struct fs_context *);
613:	static void bpf_free_inode(struct inode *);
764:	static int bpf_get_tree(struct fs_context *);
806:	static int bpf_init(void);
783:	static int bpf_init_fs_context(struct fs_context *);
373:	static struct dentry *bpf_lookup(struct inode *, struct dentry *, unsigned int);
155:	static int bpf_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
363:	static int bpf_mklink(struct dentry *, umode_t, void *);
354:	static int bpf_mkmap(struct dentry *, umode_t, void *);
331:	static int bpf_mkobj_ops(struct dentry *, umode_t, void *, const struct inode_operations *, const struct file_operations *);
348:	static int bpf_mkprog(struct dentry *, umode_t, void *);
644:	static int bpf_parse_param(struct fs_context *, struct fs_parameter *);
604:	static int bpf_show_options(struct seq_file *, struct dentry *);
385:	static int bpf_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
274:	static int bpffs_map_open(struct inode *, struct file *);
297:	static int bpffs_map_release(struct inode *, struct file *);
322:	static int bpffs_obj_open(struct inode *, struct file *);
216:	static void *map_seq_next(struct seq_file *, void *, loff_t *);
252:	static int map_seq_show(struct seq_file *, void *);
240:	static void *map_seq_start(struct seq_file *, loff_t *);
248:	static void map_seq_stop(struct seq_file *, void *);

File kernel/bpf/link_iter.c:
42:	int bpf_iter_bpf_link(struct bpf_iter_meta *, struct bpf_link *);
101:	static int bpf_link_iter_init(void);
27:	static void *bpf_link_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_link_seq_show(struct seq_file *, void *);
13:	static void *bpf_link_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_link_seq_stop(struct seq_file *, void *);

File kernel/bpf/local_storage.c:
492:	struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *, enum bpf_cgroup_storage_type);
463:	int bpf_cgroup_storage_assign(struct bpf_prog_aux *, struct bpf_map *);
551:	void bpf_cgroup_storage_free(struct bpf_cgroup_storage *);
567:	void bpf_cgroup_storage_link(struct bpf_cgroup_storage *, struct cgroup *, enum bpf_attach_type);
588:	void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *);
182:	int bpf_percpu_cgroup_storage_copy(struct bpf_map *, void *, void *);
211:	int bpf_percpu_cgroup_storage_update(struct bpf_map *, void *, void *, u64);
67:	struct bpf_cgroup_storage *cgroup_storage_lookup(struct bpf_cgroup_storage_map *, void *, bool);
356:	static int cgroup_storage_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
351:	static int cgroup_storage_delete_elem(struct bpf_map *, void *);
245:	static int cgroup_storage_get_next_key(struct bpf_map *, void *, void *);
132:	static void *cgroup_storage_lookup_elem(struct bpf_map *, void *);
285:	static struct bpf_map *cgroup_storage_map_alloc(union bpf_attr *);
330:	static void cgroup_storage_map_free(struct bpf_map *);
414:	static void cgroup_storage_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
144:	static int cgroup_storage_update_elem(struct bpf_map *, void *, void *, u64);
542:	static void free_percpu_cgroup_storage_rcu(struct callback_head *);
533:	static void free_shared_cgroup_storage_rcu(struct callback_head *);

File kernel/bpf/lpm_trie.c:
165:	static size_t longest_prefix_match(const struct lpm_trie *, const struct lpm_trie_node *, const struct bpf_lpm_trie_key *);
543:	static struct bpf_map *trie_alloc(union bpf_attr *);
713:	static int trie_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
434:	static int trie_delete_elem(struct bpf_map *, void *);
576:	static void trie_free(struct bpf_map *);
615:	static int trie_get_next_key(struct bpf_map *, void *, void *);
228:	static void *trie_lookup_elem(struct bpf_map *, void *);
303:	static int trie_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/map_in_map.c:
119:	void *bpf_map_fd_get_ptr(struct bpf_map *, struct file *, int);
141:	void bpf_map_fd_put_ptr(void *);
149:	u32 bpf_map_fd_sys_lookup_elem(void *);
10:	struct bpf_map *bpf_map_meta_alloc(int);
108:	bool bpf_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
100:	void bpf_map_meta_free(struct bpf_map *);

File kernel/bpf/map_iter.c:
42:	int bpf_iter_bpf_map(struct bpf_iter_meta *, struct bpf_map *);
165:	int bpf_iter_bpf_map_elem(struct bpf_iter_meta *, struct bpf_map *, void *, void *);
158:	int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
152:	void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
101:	static int bpf_iter_attach_map(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
147:	static void bpf_iter_detach_map(struct bpf_iter_aux_info *);
183:	static int bpf_map_iter_init(void);
27:	static void *bpf_map_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_map_seq_show(struct seq_file *, void *);
13:	static void *bpf_map_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_map_seq_stop(struct seq_file *, void *);

File kernel/bpf/memalloc.c:
633:	void *bpf_mem_alloc(struct bpf_mem_alloc *, size_t);
517:	void bpf_mem_alloc_destroy(struct bpf_mem_alloc *);
377:	int bpf_mem_alloc_init(struct bpf_mem_alloc *, int, bool);
663:	void *bpf_mem_cache_alloc(struct bpf_mem_alloc *);
671:	void bpf_mem_cache_free(struct bpf_mem_alloc *, void *);
649:	void bpf_mem_free(struct bpf_mem_alloc *, void *);
238:	static void __free_rcu_tasks_trace(struct callback_head *);
164:	static void alloc_bulk(struct bpf_mem_cache *, int, int);
310:	static void bpf_mem_refill(struct irq_work *);
489:	static void destroy_mem_alloc(struct bpf_mem_alloc *, int);
434:	static void drain_mem_cache(struct bpf_mem_cache *);
481:	static void free_mem_alloc_deferred(struct work_struct *);
565:	static void *unit_alloc(struct bpf_mem_cache *);
601:	static void unit_free(struct bpf_mem_cache *, void *);

File kernel/bpf/percpu_freelist.c:
184:	struct pcpu_freelist_node *__pcpu_freelist_pop(struct pcpu_freelist *);
80:	void __pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);
25:	void pcpu_freelist_destroy(struct pcpu_freelist *);
6:	int pcpu_freelist_init(struct pcpu_freelist *);
191:	struct pcpu_freelist_node *pcpu_freelist_pop(struct pcpu_freelist *);
99:	void pcpu_freelist_populate(struct pcpu_freelist *, void *, u32, u32);
89:	void pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);

File kernel/bpf/prog_iter.c:
42:	int bpf_iter_bpf_prog(struct bpf_iter_meta *, struct bpf_prog *);
101:	static int bpf_prog_iter_init(void);
27:	static void *bpf_prog_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_prog_seq_show(struct seq_file *, void *);
13:	static void *bpf_prog_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_prog_seq_stop(struct seq_file *, void *);

File kernel/bpf/queue_stack_maps.c:
159:	static int queue_map_peek_elem(struct bpf_map *, void *);
171:	static int queue_map_pop_elem(struct bpf_map *, void *);
68:	static struct bpf_map *queue_stack_map_alloc(union bpf_attr *);
47:	static int queue_stack_map_alloc_check(union bpf_attr *);
237:	static int queue_stack_map_delete_elem(struct bpf_map *, void *);
91:	static void queue_stack_map_free(struct bpf_map *);
243:	static int queue_stack_map_get_next_key(struct bpf_map *, void *, void *);
224:	static void *queue_stack_map_lookup_elem(struct bpf_map *, void *);
183:	static int queue_stack_map_push_elem(struct bpf_map *, void *, u64);
230:	static int queue_stack_map_update_elem(struct bpf_map *, void *, void *, u64);
165:	static int stack_map_peek_elem(struct bpf_map *, void *);
177:	static int stack_map_pop_elem(struct bpf_map *, void *);

File kernel/bpf/ringbuf.c:
497:	u64 bpf_ringbuf_discard(u64, u64, u64, u64, u64);
624:	u64 bpf_ringbuf_discard_dynptr(u64, u64, u64, u64, u64);
510:	u64 bpf_ringbuf_output(u64, u64, u64, u64, u64);
538:	u64 bpf_ringbuf_query(u64, u64, u64, u64, u64);
437:	u64 bpf_ringbuf_reserve(u64, u64, u64, u64, u64);
565:	u64 bpf_ringbuf_reserve_dynptr(u64, u64, u64, u64, u64);
484:	u64 bpf_ringbuf_submit(u64, u64, u64, u64, u64);
605:	u64 bpf_ringbuf_submit_dynptr(u64, u64, u64, u64, u64);
712:	u64 bpf_user_ringbuf_drain(u64, u64, u64, u64, u64);
391:	static void *__bpf_ringbuf_reserve(struct bpf_ringbuf *, u64);
163:	static struct bpf_ringbuf *bpf_ringbuf_alloc(size_t, int);
156:	static void bpf_ringbuf_notify(struct irq_work *);
183:	static struct bpf_map *ringbuf_map_alloc(union bpf_attr *);
250:	static int ringbuf_map_delete_elem(struct bpf_map *, void *);
230:	static void ringbuf_map_free(struct bpf_map *);
255:	static int ringbuf_map_get_next_key(struct bpf_map *, void *, void *);
239:	static void *ringbuf_map_lookup_elem(struct bpf_map *, void *);
261:	static int ringbuf_map_mmap_kern(struct bpf_map *, struct vm_area_struct *);
279:	static int ringbuf_map_mmap_user(struct bpf_map *, struct vm_area_struct *);
313:	static __poll_t ringbuf_map_poll_kern(struct bpf_map *, struct file *, struct poll_table_struct *);
326:	static __poll_t ringbuf_map_poll_user(struct bpf_map *, struct file *, struct poll_table_struct *);
244:	static int ringbuf_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/stackmap.c:
455:	u64 bpf_get_stack(u64, u64, u64, u64, u64);
499:	u64 bpf_get_stack_pe(u64, u64, u64, u64, u64);
283:	u64 bpf_get_stackid(u64, u64, u64, u64, u64);
331:	u64 bpf_get_stackid_pe(u64, u64, u64, u64, u64);
471:	u64 bpf_get_task_stack(u64, u64, u64, u64, u64);
569:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
388:	static long __bpf_get_stack(struct pt_regs *, struct task_struct *, struct perf_callchain_entry *, void *, u32, u64);
213:	static long __bpf_get_stackid(struct bpf_map *, struct perf_callchain_entry *, u64);
45:	static int prealloc_elems_and_freelist(struct bpf_stack_map *);
70:	static struct bpf_map *stack_map_alloc(union bpf_attr *);
628:	static int stack_map_delete_elem(struct bpf_map *, void *);
647:	static void stack_map_free(struct bpf_map *);
127:	static void stack_map_get_build_id_offset(struct bpf_stack_build_id *, u64 *, u32, bool);
592:	static int stack_map_get_next_key(struct bpf_map *, void *, void *);
563:	static void *stack_map_lookup_elem(struct bpf_map *, void *);
621:	static int stack_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/syscall.c:
5071:	long __arm64_sys_bpf(const struct pt_regs *);
1217:	struct bpf_map *__bpf_map_get(struct fd);
80:	int bpf_check_uarg_tail_zero(bpfptr_t, size_t, size_t);
934:	int bpf_get_file_flag(int);
5189:	u64 bpf_kallsyms_lookup_name(u64, u64, u64, u64, u64);
4710:	struct bpf_link *bpf_link_by_id(u32);
2708:	void bpf_link_cleanup(struct bpf_link_primer *);
4732:	struct bpf_link *bpf_link_get_curr_or_next(u32 *);
2881:	struct bpf_link *bpf_link_get_from_fd(u32);
2716:	void bpf_link_inc(struct bpf_link *);
2681:	void bpf_link_init(struct bpf_link *, enum bpf_link_type, const struct bpf_link_ops *, struct bpf_prog *);
2876:	int bpf_link_new_fd(struct bpf_link *);
2834:	int bpf_link_prime(struct bpf_link *, struct bpf_link_primer *);
2744:	void bpf_link_put(struct bpf_link *);
2864:	int bpf_link_settle(struct bpf_link_primer *);
473:	void *bpf_map_alloc_percpu(const struct bpf_map *, size_t, size_t, gfp_t);
337:	void *bpf_map_area_alloc(u64, int);
347:	void bpf_map_area_free(void *);
342:	void *bpf_map_area_mmapable_alloc(u64, int);
393:	void bpf_map_free_id(struct bpf_map *, bool);
551:	void bpf_map_free_record(struct bpf_map *);
1242:	struct bpf_map *bpf_map_get(u32);
3668:	struct bpf_map *bpf_map_get_curr_or_next(u32 *);
1258:	struct bpf_map *bpf_map_get_with_uref(u32);
1229:	void bpf_map_inc(struct bpf_map *);
1287:	struct bpf_map *bpf_map_inc_not_zero(struct bpf_map *);
1235:	void bpf_map_inc_with_uref(struct bpf_map *);
364:	void bpf_map_init_from_attr(struct bpf_map *, union bpf_attr *);
444:	void *bpf_map_kmalloc_node(const struct bpf_map *, size_t, gfp_t, int);
459:	void *bpf_map_kzalloc(const struct bpf_map *, size_t, gfp_t);
922:	int bpf_map_new_fd(struct bpf_map *, int);
725:	void bpf_map_put(struct bpf_map *);
731:	void bpf_map_put_with_uref(struct bpf_map *);
149:	bool bpf_map_write_active(const struct bpf_map *);
638:	void bpf_obj_free_fields(const struct btf_record *, void *);
631:	void bpf_obj_free_timer(const struct btf_record *, void *);
956:	int bpf_obj_name_cpy(char *, const char *, unsigned int);
2202:	void bpf_prog_add(struct bpf_prog *, int);
3708:	struct bpf_prog *bpf_prog_by_id(u32);
2004:	void bpf_prog_free_id(struct bpf_prog *);
2274:	struct bpf_prog *bpf_prog_get(u32);
3687:	struct bpf_prog *bpf_prog_get_curr_or_next(u32 *);
2239:	bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);
2279:	struct bpf_prog *bpf_prog_get_type_dev(u32, enum bpf_prog_type, bool);
2219:	void bpf_prog_inc(struct bpf_prog *);
2100:	void bpf_prog_inc_misses_counter(struct bpf_prog *);
2226:	struct bpf_prog *bpf_prog_inc_not_zero(struct bpf_prog *);
2178:	int bpf_prog_new_fd(struct bpf_prog *);
2080:	void bpf_prog_put(struct bpf_prog *);
2208:	void bpf_prog_sub(struct bpf_prog *, int);
1297:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
5088:	u64 bpf_sys_bpf(u64, u64, u64, u64, u64);
5172:	u64 bpf_sys_close(u64, u64, u64, u64, u64);
557:	struct btf_record *btf_record_dup(const struct btf_record *);
602:	bool btf_record_equal(const struct btf_record *, const struct btf_record *);
509:	struct btf_field *btf_record_find(const struct btf_record *, u32, enum btf_field_type);
522:	void btf_record_free(struct btf_record *);
1577:	int generic_map_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1690:	int generic_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1631:	int generic_map_update_batch(struct bpf_map *, struct file *, const union bpf_attr *, union bpf_attr *);
5115:	int kern_sys_bpf(int, union bpf_attr *, unsigned int);
977:	int map_check_no_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
5167:	const struct bpf_func_proto *tracing_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
5272:	void unpriv_ebpf_notify(int);
2033:	static void __bpf_prog_put_noref(struct bpf_prog *, bool);
2022:	static void __bpf_prog_put_rcu(struct callback_head *);
4915:	static int __sys_bpf(int, bpfptr_t, unsigned int);
3398:	static enum bpf_prog_type attach_type_to_prog_type(enum bpf_attach_type);
4333:	static int bpf_btf_get_fd_by_id(const union bpf_attr *);
4320:	static int bpf_btf_load(const union bpf_attr *, bpfptr_t);
812:	static ssize_t bpf_dummy_read(struct file *, char *, size_t, loff_t *);
821:	static ssize_t bpf_dummy_write(struct file *, const char *, size_t, loff_t *);
4812:	static int bpf_enable_stats(union bpf_attr *);
3814:	static struct bpf_insn *bpf_insn_prepare_dump(const struct bpf_prog *, const struct cred *);
4832:	static int bpf_iter_create(union bpf_attr *);
4753:	static int bpf_link_get_fd_by_id(const union bpf_attr *);
2734:	static void bpf_link_put_deferred(struct work_struct *);
2758:	static int bpf_link_release(struct inode *, struct file *);
2778:	static void bpf_link_show_fdinfo(struct seq_file *, struct file *);
375:	static int bpf_map_alloc_id(struct bpf_map *);
235:	static int bpf_map_copy_value(struct bpf_map *, void *, void *, __u64);
4476:	static int bpf_map_do_batch(const union bpf_attr *, union bpf_attr *, int);
677:	static void bpf_map_free_deferred(struct work_struct *);
3750:	static int bpf_map_get_fd_by_id(const union bpf_attr *);
436:	static struct mem_cgroup *bpf_map_get_memcg(const struct bpf_map *);
853:	static int bpf_map_mmap(struct file *, struct vm_area_struct *);
840:	static void bpf_map_mmap_close(struct vm_area_struct *);
831:	static void bpf_map_mmap_open(struct vm_area_struct *);
901:	static __poll_t bpf_map_poll(struct file *, struct poll_table_struct *);
737:	static int bpf_map_release(struct inode *, struct file *);
774:	static void bpf_map_show_fdinfo(struct seq_file *, struct file *);
178:	static int bpf_map_update_value(struct bpf_map *, struct file *, void *, void *, __u64);
154:	static u32 bpf_map_value_size(const struct bpf_map *);
2671:	static int bpf_obj_get(const union bpf_attr *);
4286:	static int bpf_obj_get_info_by_fd(const union bpf_attr *, union bpf_attr *);
3642:	static int bpf_obj_get_next_id(const union bpf_attr *, union bpf_attr *, struct idr *, spinlock_t *);
2663:	static int bpf_obj_pin(const union bpf_attr *);
3235:	static int bpf_perf_link_attach(const union bpf_attr *, struct bpf_prog *);
3223:	static void bpf_perf_link_dealloc(struct bpf_link *);
3214:	static void bpf_perf_link_release(struct bpf_link *);
1985:	static int bpf_prog_alloc_id(struct bpf_prog *);
3465:	static int bpf_prog_attach(const union bpf_attr *);
4855:	static int bpf_prog_bind_map(union bpf_attr *);
3526:	static int bpf_prog_detach(const union bpf_attr *);
3725:	static int bpf_prog_get_fd_by_id(const union bpf_attr *);
2467:	static int bpf_prog_load(union bpf_attr *, bpfptr_t);
2318:	static int bpf_prog_load_check_attach(enum bpf_prog_type, enum bpf_attach_type, struct btf *, u32, struct bpf_prog *);
2053:	static void bpf_prog_put_deferred(struct work_struct *);
3559:	static int bpf_prog_query(const union bpf_attr *, union bpf_attr *);
2086:	static int bpf_prog_release(struct inode *, struct file *);
2139:	static void bpf_prog_show_fdinfo(struct seq_file *, struct file *);
3612:	static int bpf_prog_test_run(const union bpf_attr *, union bpf_attr *);
3286:	static int bpf_raw_tp_link_attach(struct bpf_prog *, const char *);
3148:	static void bpf_raw_tp_link_dealloc(struct bpf_link *);
3167:	static int bpf_raw_tp_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
3139:	static void bpf_raw_tp_link_release(struct bpf_link *);
3156:	static void bpf_raw_tp_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
3356:	static int bpf_raw_tracepoint_open(const union bpf_attr *);
5241:	static int bpf_stats_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4778:	static int bpf_stats_release(struct inode *, struct file *);
5319:	static int bpf_syscall_sysctl_init(void);
4393:	static int bpf_task_fd_query(const union bpf_attr *, union bpf_attr *);
4344:	static int bpf_task_fd_query_copy(const union bpf_attr *, union bpf_attr *, u32, u32, const char *, u64, u64);
2916:	static void bpf_tracing_link_dealloc(struct bpf_link *);
2935:	static int bpf_tracing_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
2901:	static void bpf_tracing_link_release(struct bpf_link *);
2924:	static void bpf_tracing_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
2956:	static int bpf_tracing_prog_attach(struct bpf_prog *, int, u32, u64);
5276:	static int bpf_unpriv_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
498:	static int btf_field_cmp(const void *, const void *);
4522:	static int link_create(union bpf_attr *, bpfptr_t);
4684:	static int link_detach(union bpf_attr *);
4631:	static int link_update(union bpf_attr *);
985:	static int map_check_btf(struct bpf_map *, const struct btf *, u32, u32);
1089:	static int map_create(union bpf_attr *);
1458:	static int map_delete_elem(union bpf_attr *, bpfptr_t);
1885:	static int map_freeze(const union bpf_attr *);
1513:	static int map_get_next_key(union bpf_attr *);
1792:	static int map_lookup_and_delete_elem(union bpf_attr *);
1327:	static int map_lookup_elem(union bpf_attr *);
1402:	static int map_update_elem(union bpf_attr *, bpfptr_t);
5215:	static const struct bpf_func_proto *syscall_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
5076:	static bool syscall_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);

File kernel/bpf/task_iter.c:
780:	u64 bpf_find_vma(u64, u64, u64, u64, u64);
194:	int bpf_iter_task(struct bpf_iter_meta *, struct task_struct *);
368:	int bpf_iter_task_file(struct bpf_iter_meta *, struct task_struct *, u32, struct file *);
632:	int bpf_iter_task_vma(struct bpf_iter_meta *, struct task_struct *, struct vm_area_struct *);
226:	static int bpf_iter_attach_task(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
696:	static int bpf_iter_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
711:	static void bpf_iter_task_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
828:	static void do_mmap_read_unlock(struct irq_work *);
421:	static void fini_seq_pidns(void *);
410:	static int init_seq_pidns(void *, struct bpf_iter_aux_info *);
279:	static struct file *task_file_seq_get_next(struct bpf_iter_seq_task_file_info *);
351:	static void *task_file_seq_next(struct seq_file *, void *, loff_t *);
392:	static int task_file_seq_show(struct seq_file *, void *);
338:	static void *task_file_seq_start(struct seq_file *, loff_t *);
397:	static void task_file_seq_stop(struct seq_file *, void *);
839:	static int task_iter_init(void);
109:	static struct task_struct *task_seq_get_next(struct bpf_iter_seq_task_common *, u32 *, bool);
174:	static void *task_seq_next(struct seq_file *, void *, loff_t *);
213:	static int task_seq_show(struct seq_file *, void *);
160:	static void *task_seq_start(struct seq_file *, loff_t *);
218:	static void task_seq_stop(struct seq_file *, void *);
455:	static struct vm_area_struct *task_vma_seq_get_next(struct bpf_iter_seq_task_vma_info *);
618:	static void *task_vma_seq_next(struct seq_file *, void *, loff_t *);
653:	static int task_vma_seq_show(struct seq_file *, void *);
606:	static void *task_vma_seq_start(struct seq_file *, loff_t *);
658:	static void task_vma_seq_stop(struct seq_file *, void *);

File kernel/bpf/tnum.c:
62:	struct tnum tnum_add(struct tnum, struct tnum);
86:	struct tnum tnum_and(struct tnum, struct tnum);
47:	struct tnum tnum_arshift(struct tnum, u8, u8);
153:	struct tnum tnum_cast(struct tnum, u8);
206:	struct tnum tnum_clear_subreg(struct tnum);
16:	struct tnum tnum_const(u64);
211:	struct tnum tnum_const_subreg(struct tnum, u32);
167:	bool tnum_in(struct tnum, struct tnum);
144:	struct tnum tnum_intersect(struct tnum, struct tnum);
160:	bool tnum_is_aligned(struct tnum, u64);
37:	struct tnum tnum_lshift(struct tnum, u8);
122:	struct tnum tnum_mul(struct tnum, struct tnum);
96:	struct tnum tnum_or(struct tnum, struct tnum);
21:	struct tnum tnum_range(u64, u64);
42:	struct tnum tnum_rshift(struct tnum, u8);
181:	int tnum_sbin(char *, size_t, struct tnum);
175:	int tnum_strn(char *, size_t, struct tnum);
74:	struct tnum tnum_sub(struct tnum, struct tnum);
201:	struct tnum tnum_subreg(struct tnum);
105:	struct tnum tnum_xor(struct tnum, struct tnum);

File kernel/bpf/verifier.c:
16846:	int bpf_check(struct bpf_prog **, union bpf_attr *, bpfptr_t);
16495:	int bpf_check_attach_target(struct bpf_verifier_log *, const struct bpf_prog *, const struct bpf_prog *, u32, struct bpf_attach_target_info *);
2058:	void bpf_free_kfunc_btf_tab(struct bpf_kfunc_btf_tab *);
16835:	struct btf *bpf_get_btf_vmlinux(void);
2231:	const struct btf_func_model *bpf_jit_find_kfunc_model(const struct bpf_prog *, const struct bpf_insn *);
362:	void bpf_log(struct bpf_verifier_log *, const char *, ...);
2225:	bool bpf_prog_has_kfunc_call(const struct bpf_prog *);
335:	void bpf_verifier_log_write(struct bpf_verifier_env *, const char *, ...);
294:	void bpf_verifier_vlog(struct bpf_verifier_log *, const char *, va_list);
6297:	int check_func_arg_reg_off(struct bpf_verifier_env *, const struct bpf_reg_state *, int, enum bpf_arg_type);
5668:	int check_mem_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, u32);
3938:	int check_ptr_off_reg(struct bpf_verifier_env *, const struct bpf_reg_state *, int);
7254:	int map_set_for_each_callback_args(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *);
3171:	int mark_chain_precision(struct bpf_verifier_env *, int);
5944:	int process_dynptr_func(struct bpf_verifier_env *, int, enum bpf_arg_type, struct bpf_call_arg_meta *);
8351:	static bool __btf_type_is_scalar_struct(struct bpf_verifier_env *, const struct btf *, const struct btf_type *, int);
7122:	static int __check_func_call(struct bpf_verifier_env *, struct bpf_insn *, int *, int, set_callee_state_fn);
3815:	static int __check_mem_access(struct bpf_verifier_env *, int, int, int, u32, bool);
3906:	static int __check_ptr_off_reg(struct bpf_verifier_env *, const struct bpf_reg_state *, int, bool);
2983:	static int __mark_chain_precision(struct bpf_verifier_env *, int, int, int);
1405:	static void __mark_reg_known(struct bpf_reg_state *, u64);
1162:	static int acquire_reference_state(struct bpf_verifier_env *, int);
1920:	static int add_subprog(struct bpf_verifier_env *, int);
9738:	static int adjust_ptr_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *, const struct bpf_reg_state *, const struct bpf_reg_state *);
10696:	static int adjust_reg_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *);
4743:	static int bpf_map_direct_read(struct bpf_map *, int, int, u64 *);
14644:	static struct bpf_prog *bpf_patch_insn_data(struct bpf_verifier_env *, u32, const struct bpf_insn *, u32);
16754:	static int check_attach_btf_id(struct bpf_verifier_env *);
7630:	static int check_bpf_snprintf_call(struct bpf_verifier_env *, struct bpf_reg_state *);
4666:	static int check_buffer_access(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, int, bool, u32 *);
12480:	static int check_cfg(struct bpf_verifier_env *);
4219:	static int check_ctx_access(struct bpf_verifier_env *, int, int, int, enum bpf_access_type, enum bpf_reg_type *, struct btf **, u32 *);
7295:	static int check_func_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
7667:	static int check_get_func_ip(struct bpf_verifier_env *);
7723:	static int check_helper_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
5523:	static int check_helper_mem_access(struct bpf_verifier_env *, int, int, bool, struct bpf_call_arg_meta *);
9082:	static int check_kfunc_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
11904:	static int check_ld_imm(struct bpf_verifier_env *, struct bpf_insn *);
4072:	static int check_map_access(struct bpf_verifier_env *, u32, int, int, bool, enum bpf_access_src);
6705:	static int check_map_func_compatibility(struct bpf_verifier_env *, struct bpf_map *, int);
4016:	static int check_map_kptr_access(struct bpf_verifier_env *, u32, int, int, struct btf_field *);
14279:	static int check_map_prog_compatibility(struct bpf_verifier_env *, struct bpf_map *, struct bpf_prog *);
5043:	static int check_mem_access(struct bpf_verifier_env *, int, u32, int, int, enum bpf_access_type, int, bool);
3851:	static int check_mem_region_access(struct bpf_verifier_env *, u32, int, int, u32, bool);
5613:	static int check_mem_size_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, bool, struct bpf_call_arg_meta *);
16490:	static int check_non_sleepable_error_inject(u32);
4176:	static int check_packet_access(struct bpf_verifier_env *, u32, int, int, bool);
14135:	static int check_pseudo_btf_id(struct bpf_verifier_env *, struct bpf_insn *, struct bpf_insn_aux_data *);
4429:	static int check_ptr_alignment(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, bool);
4773:	static int check_ptr_to_btf_access(struct bpf_verifier_env *, struct bpf_reg_state *, int, int, int, enum bpf_access_type, int);
4891:	static int check_ptr_to_map_access(struct bpf_verifier_env *, struct bpf_reg_state *, int, int, int, enum bpf_access_type, int);
7611:	static int check_reference_leak(struct bpf_verifier_env *);
2524:	static int check_reg_arg(struct bpf_verifier_env *, u32, enum reg_arg_type);
9380:	static bool check_reg_sane_offset(struct bpf_verifier_env *, const struct bpf_reg_state *, enum bpf_reg_type);
12105:	static int check_return_code(struct bpf_verifier_env *);
4267:	static int check_sock_access(struct bpf_verifier_env *, int, u32, int, int, enum bpf_access_type);
4978:	static int check_stack_access_within_bounds(struct bpf_verifier_env *, int, int, int, enum bpf_access_src, enum bpf_access_type);
5395:	static int check_stack_range_initialized(struct bpf_verifier_env *, int, int, int, bool, enum bpf_access_src, struct bpf_call_arg_meta *);
3708:	static int check_stack_read(struct bpf_verifier_env *, int, int, int, int);
3769:	static int check_stack_write(struct bpf_verifier_env *, int, int, int, int, int);
4650:	static int check_tp_buffer_access(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, int);
7038:	static void clear_all_pkt_pointers(struct bpf_verifier_env *);
7101:	static void clear_caller_saved_regs(struct bpf_verifier_env *, struct bpf_reg_state *);
1902:	static int cmp_subprogs(const void *, const void *);
4695:	static void coerce_reg_to_size(struct bpf_reg_state *, int);
1107:	static int copy_reference_state(struct bpf_func_state *, const struct bpf_func_state *);
1246:	static int copy_verifier_state(struct bpf_verifier_state *, const struct bpf_verifier_state *);
2621:	static const char *disasm_kfunc_name(void *, const struct bpf_insn *);
13745:	static int do_check(struct bpf_verifier_env *);
16252:	static int do_check_common(struct bpf_verifier_env *, int);
16350:	static int do_check_subprogs(struct bpf_verifier_env *);
7507:	static void do_refine_retval_range(struct bpf_reg_state *, int, int, struct bpf_call_arg_meta *);
11661:	static void find_equal_scalars(struct bpf_verifier_state *, struct bpf_reg_state *);
10955:	static void find_good_pkt_pointers(struct bpf_verifier_state *, struct bpf_reg_state *, enum bpf_reg_type, bool);
2070:	static struct btf *find_kfunc_desc_btf(struct bpf_verifier_env *, s16);
1908:	static int find_subprog(struct bpf_verifier_env *, int);
1201:	static void free_func_state(struct bpf_func_state *);
543:	static bool helper_multiple_ref_obj_use(enum bpf_func_id, const struct bpf_map *);
1836:	static void init_func_state(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int);
489:	static bool is_acquire_function(enum bpf_func_id, const struct bpf_map *);
11187:	static int is_branch_taken(struct bpf_reg_state *, u64, u8, bool);
8260:	static bool is_kfunc_arg_mem_size(const struct btf *, const struct btf_param *, const struct bpf_reg_state *);
11236:	static int is_pkt_ptr_branch_taken(struct bpf_reg_state *, struct bpf_reg_state *, u8);
509:	static bool is_ptr_cast_function(enum bpf_func_id);
668:	static const char *kernel_type_name(const struct btf *, u32);
1978:	static int kfunc_btf_cmp_by_off(const void *, const void *);
1969:	static int kfunc_desc_cmp_by_id_off(const void *, const void *);
2201:	static int kfunc_desc_cmp_by_imm(const void *, const void *);
3944:	static int map_kptr_match_type(struct bpf_verifier_env *, struct btf_field *, struct bpf_reg_state *, u32);
2837:	static void mark_all_scalars_precise(struct bpf_verifier_env *, struct bpf_verifier_state *);
8155:	static void mark_btf_func_reg_size(struct bpf_verifier_env *, u32, size_t);
1799:	static void mark_btf_ld_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, enum bpf_reg_type, struct btf *, u32, enum bpf_type_flag);
1462:	static void mark_ptr_not_null_reg(struct bpf_reg_state *);
11536:	static void mark_ptr_or_null_regs(struct bpf_verifier_state *, u32, bool);
1436:	static void mark_reg_known_zero(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
1786:	static void mark_reg_not_init(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
2341:	static int mark_reg_read(struct bpf_verifier_env *, const struct bpf_reg_state *, struct bpf_reg_state *, u8);
3503:	static void mark_reg_stack_read(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int);
1766:	static void mark_reg_unknown(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
750:	static int mark_stack_slots_dynptr(struct bpf_verifier_env *, struct bpf_reg_state *, enum bpf_arg_type, int);
6667:	static bool may_update_sockmap(struct bpf_verifier_env *, int);
1305:	static int pop_stack(struct bpf_verifier_env *, int *, int *, bool);
7444:	static int prepare_func_exit(struct bpf_verifier_env *, int *);
1035:	static void print_insn_state(struct bpf_verifier_env *, const struct bpf_func_state *);
890:	static void print_verifier_state(struct bpf_verifier_env *, const struct bpf_func_state *, bool);
8533:	static int process_kf_arg_ptr_to_btf_id(struct bpf_verifier_env *, struct bpf_reg_state *, const struct btf_type *, const char *, u32, struct bpf_kfunc_call_arg_meta *, int);
8568:	static int process_kf_arg_ptr_to_kptr(struct bpf_verifier_env *, struct bpf_reg_state *, const struct btf_type *, const char *, struct bpf_kfunc_call_arg_meta *, int);
8719:	static int process_kf_arg_ptr_to_list_head(struct bpf_verifier_env *, struct bpf_reg_state *, u32, struct bpf_kfunc_call_arg_meta *);
8762:	static int process_kf_arg_ptr_to_list_node(struct bpf_verifier_env *, struct bpf_reg_state *, u32, struct bpf_kfunc_call_arg_meta *);
5880:	static int process_kptr_func(struct bpf_verifier_env *, int, struct bpf_call_arg_meta *);
5750:	static int process_spin_lock(struct bpf_verifier_env *, int, bool);
5843:	static int process_timer_func(struct bpf_verifier_env *, int, struct bpf_call_arg_meta *);
1849:	static struct bpf_verifier_state *push_async_cb(struct bpf_verifier_env *, int, int, int);
12342:	static int push_insn(int, int, int, struct bpf_verifier_env *, bool);
1334:	static struct bpf_verifier_state *push_stack(struct bpf_verifier_env *, int, int, bool);
12945:	static bool range_within(struct bpf_reg_state *, struct bpf_reg_state *);
7575:	static int record_func_key(struct bpf_verifier_env *, struct bpf_call_arg_meta *, int, int);
7529:	static int record_func_map(struct bpf_verifier_env *, struct bpf_call_arg_meta *, int, int);
8602:	static int ref_set_release_on_unlock(struct bpf_verifier_env *, u32);
1666:	static void reg_bounds_sync(struct bpf_reg_state *);
11472:	static void reg_combine_min_max(struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_reg_state *, u8);
474:	static bool reg_may_point_to_spin_lock(const struct bpf_reg_state *);
11281:	static void reg_set_min_max(struct bpf_reg_state *, struct bpf_reg_state *, u64, u32, u8, bool);
570:	static const char *reg_type_str(struct bpf_verifier_env *, enum bpf_reg_type);
13084:	static bool regsafe(struct bpf_verifier_env *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_id_pair *);
7078:	static int release_reference(struct bpf_verifier_env *, int);
14367:	static int resolve_pseudo_ldimm64(struct bpf_verifier_env *);
9701:	static int sanitize_check_bounds(struct bpf_verifier_env *, const struct bpf_insn *, const struct bpf_reg_state *);
9628:	static int sanitize_err(struct bpf_verifier_env *, const struct bpf_insn *, int, const struct bpf_reg_state *, const struct bpf_reg_state *);
9519:	static int sanitize_ptr_alu(struct bpf_verifier_env *, struct bpf_insn *, const struct bpf_reg_state *, const struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_sanitize_info *, const bool);
9499:	static struct bpf_verifier_state *sanitize_speculative_path(struct bpf_verifier_env *, const struct bpf_insn *, u32, u32);
10481:	static void scalar32_min_max_arsh(struct bpf_reg_state *, struct bpf_reg_state *);
10352:	static void scalar32_min_max_lsh(struct bpf_reg_state *, struct bpf_reg_state *);
10415:	static void scalar32_min_max_rsh(struct bpf_reg_state *, struct bpf_reg_state *);
10504:	static void scalar_min_max_arsh(struct bpf_reg_state *, struct bpf_reg_state *);
10400:	static void scalar_min_max_lsh(struct bpf_reg_state *, struct bpf_reg_state *);
10447:	static void scalar_min_max_rsh(struct bpf_reg_state *, struct bpf_reg_state *);
7281:	static int set_callee_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7393:	static int set_find_vma_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7341:	static int set_loop_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7311:	static int set_map_elem_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7363:	static int set_timer_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7421:	static int set_user_ringbuf_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
13306:	static bool states_equal(struct bpf_verifier_env *, struct bpf_verifier_state *, struct bpf_verifier_state *);
11556:	static bool try_match_pkt_pointers(const struct bpf_insn *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_verifier_state *, struct bpf_verifier_state *);
787:	static int unmark_stack_slots_dynptr(struct bpf_verifier_env *, struct bpf_reg_state *);
7705:	static void update_loop_inline_state(struct bpf_verifier_env *, u32);
349:	static void verbose(void *, const char *, ...);
412:	static void verbose_invalid_scalar(struct bpf_verifier_env *, struct bpf_reg_state *, struct tnum *, const char *, const char *);
384:	static void verbose_linfo(struct bpf_verifier_env *, u32, const char *, ...);
14792:	static int verifier_remove_insns(struct bpf_verifier_env *, u32, u32);
4686:	static void zext_32_to_64(struct bpf_reg_state *);

File kernel/capability.c:
148:	long __arm64_sys_capget(const struct pt_regs *);
222:	long __arm64_sys_capset(const struct pt_regs *);
448:	bool capable(int);
505:	bool capable_wrt_inode_uidgid(struct user_namespace *, const struct inode *, int);
467:	bool file_ns_capable(const struct file *, struct user_namespace *, int);
316:	bool has_capability(struct task_struct *, int);
359:	bool has_capability_noaudit(struct task_struct *, int);
294:	bool has_ns_capability(struct task_struct *, struct user_namespace *, int);
335:	bool has_ns_capability_noaudit(struct task_struct *, struct user_namespace *, int);
395:	bool ns_capable(struct user_namespace *, int);
413:	bool ns_capable_noaudit(struct user_namespace *, int);
432:	bool ns_capable_setid(struct user_namespace *, int);
488:	bool privileged_wrt_inode_uidgid(struct user_namespace *, struct user_namespace *, const struct inode *);
523:	bool ptracer_capable(struct task_struct *, struct user_namespace *);
82:	static int cap_validate_magic(cap_user_header_t, unsigned int *);
32:	static int file_caps_disable(char *);

File kernel/cgroup/cgroup-internal.h:
196:	static void put_css_set(struct css_set *);

File kernel/cgroup/cgroup-v1.c:
751:	void cgroup1_check_for_release(struct cgroup *);
1234:	int cgroup1_get_tree(struct fs_context *);
921:	int cgroup1_parse_param(struct fs_context *, struct fs_parameter *);
196:	void cgroup1_pidlist_destroy_all(struct cgroup *);
1070:	int cgroup1_reconfigure(struct fs_context *);
781:	void cgroup1_release_agent(struct work_struct *);
44:	bool cgroup1_ssid_disabled(int);
56:	int cgroup_attach_task_all(struct task_struct *, struct task_struct *);
94:	int cgroup_transfer_tasks(struct cgroup *, struct cgroup *);
699:	int cgroupstats_build(struct cgroupstats *, struct dentry *);
668:	int proc_cgroupstats_show(struct seq_file *, void *);
489:	static ssize_t __cgroup1_procs_write(struct kernfs_open_file *, char *, size_t, loff_t, bool);
533:	static ssize_t cgroup1_procs_write(struct kernfs_open_file *, char *, size_t, loff_t);
827:	static int cgroup1_rename(struct kernfs_node *, struct kernfs_node *, const char *);
863:	static int cgroup1_show_options(struct seq_file *, struct kernfs_root *);
539:	static ssize_t cgroup1_tasks_write(struct kernfs_open_file *, char *, size_t, loff_t);
1266:	static int cgroup1_wq_init(void);
606:	static u64 cgroup_clone_children_read(struct cgroup_subsys_state *, struct cftype *);
612:	static int cgroup_clone_children_write(struct cgroup_subsys_state *, struct cftype *, u64);
1279:	static int cgroup_no_v1(char *);
209:	static void cgroup_pidlist_destroy_work_fn(struct work_struct *);
461:	static void *cgroup_pidlist_next(struct seq_file *, void *, loff_t *);
482:	static int cgroup_pidlist_show(struct seq_file *, void *);
388:	static void *cgroup_pidlist_start(struct seq_file *, loff_t *);
449:	static void cgroup_pidlist_stop(struct seq_file *, void *);
590:	static u64 cgroup_read_notify_on_release(struct cgroup_subsys_state *, struct cftype *);
573:	static int cgroup_release_agent_show(struct seq_file *, void *);
545:	static ssize_t cgroup_release_agent_write(struct kernfs_open_file *, char *, size_t, loff_t);
584:	static int cgroup_sane_behavior_show(struct seq_file *, void *);
596:	static int cgroup_write_notify_on_release(struct cgroup_subsys_state *, struct cftype *, u64);
1016:	static int check_cgroupfs_options(struct fs_context *);
272:	static int cmppid(const void *, const void *);

File kernel/cgroup/cgroup.c:
629:	int __cgroup_task_count(const struct cgroup *);
4430:	int cgroup_add_dfl_cftypes(struct cgroup_subsys *, struct cftype *);
4447:	int cgroup_add_legacy_cftypes(struct cgroup_subsys *, struct cftype *);
2433:	void cgroup_attach_lock(bool);
2888:	int cgroup_attach_task(struct cgroup *, struct task_struct *, bool);
2444:	void cgroup_attach_unlock(bool);
6510:	int cgroup_can_fork(struct task_struct *, struct kernel_clone_args *);
6549:	void cgroup_cancel_fork(struct task_struct *, struct kernel_clone_args *);
2149:	int cgroup_do_get_tree(struct fs_context *);
562:	struct cgroup_subsys_state *cgroup_e_css(struct cgroup *, struct cgroup_subsys *);
6662:	void cgroup_exit(struct task_struct *);
1317:	void cgroup_favor_dynmods(struct cgroup_root *, bool);
4462:	void cgroup_file_notify(struct cgroup_file *);
4486:	void cgroup_file_show(struct cgroup_file *, bool);
6312:	void cgroup_fork(struct task_struct *);
6704:	void cgroup_free(struct task_struct *);
1352:	void cgroup_free_root(struct cgroup_root *);
592:	struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *, struct cgroup_subsys *);
6875:	struct cgroup *cgroup_get_from_fd(int);
6191:	struct cgroup *cgroup_get_from_id(u64);
6816:	struct cgroup *cgroup_get_from_path(const char *);
6060:	int cgroup_init(void);
6023:	int cgroup_init_early(void);
398:	bool cgroup_is_thread_root(struct cgroup *);
359:	bool cgroup_is_threaded(struct cgroup *);
1651:	struct cgroup *cgroup_kn_lock_live(struct kernfs_node *, bool);
1619:	void cgroup_kn_unlock(struct kernfs_node *);
3105:	void cgroup_lock_and_drain_offline(struct cgroup *);
2858:	int cgroup_migrate(struct task_struct *, bool, struct cgroup_mgctx *);
2744:	void cgroup_migrate_add_src(struct css_set *, struct cgroup *, struct cgroup_mgctx *);
2699:	void cgroup_migrate_finish(struct cgroup_mgctx *);
2791:	int cgroup_migrate_prepare_dst(struct cgroup_mgctx *);
2668:	int cgroup_migrate_vet_dst(struct cgroup *);
5710:	int cgroup_mkdir(struct kernfs_node *, const char *, umode_t);
318:	bool cgroup_on_dfl(const struct cgroup *);
6912:	int cgroup_parse_float(const char *, unsigned int, s64 *);
6174:	void cgroup_path_from_kernfs_id(u64, char *, size_t);
2354:	int cgroup_path_ns(struct cgroup *, char *, size_t, struct cgroup_namespace *);
2346:	int cgroup_path_ns_locked(struct cgroup *, char *, size_t, struct cgroup_namespace *);
6570:	void cgroup_post_fork(struct task_struct *, struct kernel_clone_args *);
2977:	void cgroup_procs_write_finish(struct task_struct *, bool);
2920:	struct task_struct *cgroup_procs_write_start(char *, bool, bool *);
3886:	bool cgroup_psi_enabled(void);
6689:	void cgroup_release(struct task_struct *);
4367:	int cgroup_rm_cftypes(struct cftype *);
5940:	int cgroup_rmdir(struct kernfs_node *);
1310:	struct cgroup_root *cgroup_root_from_kf(struct kernfs_root *);
2046:	int cgroup_setup_root(struct cgroup_root *, u16);
1887:	int cgroup_show_path(struct seq_file *, struct kernfs_node *, struct kernfs_root *);
6938:	void cgroup_sk_alloc(struct sock_cgroup_data *);
6966:	void cgroup_sk_clone(struct sock_cgroup_data *);
6979:	void cgroup_sk_free(struct sock_cgroup_data *);
265:	bool cgroup_ssid_enabled(int);
646:	int cgroup_task_count(const struct cgroup *);
2497:	struct task_struct *cgroup_taskset_first(struct cgroup_taskset *, struct cgroup_subsys_state **);
2514:	struct task_struct *cgroup_taskset_next(struct cgroup_taskset *, struct cgroup_subsys_state **);
6856:	struct cgroup *cgroup_v1v2_get_from_fd(int);
6801:	struct cgroup_subsys_state *css_from_id(int, struct cgroup_subsys *);
4714:	bool css_has_online_children(struct cgroup_subsys_state *);
4518:	struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4682:	struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4587:	struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4629:	struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *);
4973:	void css_task_iter_end(struct css_task_iter *);
4942:	struct task_struct *css_task_iter_next(struct css_task_iter *);
4912:	void css_task_iter_start(struct cgroup_subsys_state *, unsigned int, struct css_task_iter *);
6762:	struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *, struct cgroup_subsys *);
6743:	void enable_debug_cgroup(void);
2026:	void init_cgroup_root(struct cgroup_fs_context *);
657:	struct cgroup_subsys_state *of_css(struct kernfs_open_file *);
6232:	int proc_cgroup_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
961:	void put_css_set_locked(struct css_set *);
1787:	int rebind_subsystems(struct cgroup_root *, u16);
1486:	struct cgroup *task_cgroup_from_root(struct task_struct *, struct cgroup_root *);
2384:	int task_cgroup_path(struct task_struct *, char *, size_t);
5008:	static void *__cgroup_procs_start(struct seq_file *, loff_t *, unsigned int);
5125:	static ssize_t __cgroup_procs_write(struct kernfs_open_file *, char *, bool);
1930:	static int cgroup2_parse_param(struct fs_context *, struct fs_parameter *);
4397:	static int cgroup_add_cftypes(struct cgroup_subsys *, struct cftype *);
4222:	static int cgroup_addrm_files(struct cgroup_subsys_state *, struct cgroup *, struct cftype *, bool);
4260:	static int cgroup_apply_cftypes(struct cftype *, bool);
3315:	static int cgroup_apply_control(struct cgroup *);
3224:	static int cgroup_apply_control_enable(struct cgroup *);
5104:	static int cgroup_attach_permissions(struct cgroup *, struct cgroup *, struct super_block *, bool, struct cgroup_namespace *);
438:	static u16 cgroup_control(struct cgroup *);
3009:	static int cgroup_controllers_show(struct seq_file *, void *);
6476:	static void cgroup_css_set_put_fork(struct kernel_clone_args *);
5868:	static int cgroup_destroy_locked(struct cgroup *);
6710:	static int cgroup_disable(char *);
3666:	static int cgroup_events_show(struct seq_file *, void *);
4168:	static void cgroup_file_notify_timer(struct timer_list *);
4001:	static int cgroup_file_open(struct kernfs_open_file *);
4090:	static __poll_t cgroup_file_poll(struct kernfs_open_file *, poll_table *);
4026:	static void cgroup_file_release(struct kernfs_open_file *);
4037:	static ssize_t cgroup_file_write(struct kernfs_open_file *, char *, size_t, loff_t);
3340:	static void cgroup_finalize_control(struct cgroup *, int);
3893:	static int cgroup_freeze_show(struct seq_file *, void *);
3902:	static ssize_t cgroup_freeze_write(struct kernfs_open_file *, char *, size_t, loff_t);
2197:	static void cgroup_fs_context_free(struct fs_context *);
618:	static void cgroup_get_live(struct cgroup *);
2208:	static int cgroup_get_tree(struct fs_context *);
324:	static int cgroup_idr_alloc(struct idr *, void *, int, int, gfp_t);
4303:	static int cgroup_init_cftypes(struct cgroup_subsys *, struct cftype *);
2241:	static int cgroup_init_fs_context(struct fs_context *);
5964:	static void cgroup_init_subsys(struct cgroup_subsys *, bool);
2266:	static void cgroup_kill_sb(struct super_block *);
3968:	static ssize_t cgroup_kill_write(struct kernfs_open_file *, char *, size_t, loff_t);
3623:	static int cgroup_max_depth_show(struct seq_file *, void *);
3636:	static ssize_t cgroup_max_depth_write(struct kernfs_open_file *, char *, size_t, loff_t);
3580:	static int cgroup_max_descendants_show(struct seq_file *, void *);
3593:	static ssize_t cgroup_max_descendants_write(struct kernfs_open_file *, char *, size_t, loff_t);
2561:	static int cgroup_migrate_execute(struct cgroup_mgctx *);
4997:	static void *cgroup_procs_next(struct seq_file *, void *, loff_t *);
4989:	static void cgroup_procs_release(struct kernfs_open_file *);
5051:	static int cgroup_procs_show(struct seq_file *, void *);
5034:	static void *cgroup_procs_start(struct seq_file *, loff_t *);
5172:	static ssize_t cgroup_procs_write(struct kernfs_open_file *, char *, size_t, loff_t);
3166:	static void cgroup_propagate_control(struct cgroup *);
1993:	static int cgroup_reconfigure(struct fs_context *);
4105:	static void *cgroup_seqfile_next(struct seq_file *, void *, loff_t *);
4116:	static int cgroup_seqfile_show(struct seq_file *, void *);
4100:	static void *cgroup_seqfile_start(struct seq_file *, loff_t *);
4110:	static void cgroup_seqfile_stop(struct seq_file *, void *);
1980:	static int cgroup_show_options(struct seq_file *, struct kernfs_root *);
3676:	static int cgroup_stat_show(struct seq_file *, void *);
3018:	static int cgroup_subtree_control_show(struct seq_file *, void *);
3391:	static ssize_t cgroup_subtree_control_write(struct kernfs_open_file *, char *, size_t, loff_t);
7056:	static int cgroup_sysfs_init(void);
5178:	static void *cgroup_threads_start(struct seq_file *, loff_t *);
5183:	static ssize_t cgroup_threads_write(struct kernfs_open_file *, char *, size_t, loff_t);
3542:	static int cgroup_type_show(struct seq_file *, void *);
3558:	static ssize_t cgroup_type_write(struct kernfs_open_file *, char *, size_t, loff_t);
826:	static void cgroup_update_populated(struct cgroup *, bool);
6326:	static struct cgroup *cgroup_v1v2_get_from_file(struct file *);
6158:	static int cgroup_wq_init(void);
3707:	static int cpu_stat_show(struct seq_file *, void *);
2313:	static int cpuset_init_fs_context(struct fs_context *);
5331:	static void css_free_rwork_fn(struct work_struct *);
5790:	static void css_killed_ref_fn(struct percpu_ref *);
5772:	static void css_killed_work_fn(struct work_struct *);
1739:	static int css_populate_dir(struct cgroup_subsys_state *);
5435:	static void css_release(struct percpu_ref *);
5381:	static void css_release_work_fn(struct work_struct *);
906:	static void css_set_move_task(struct task_struct *, struct css_set *, struct css_set *, bool);
4848:	static void css_task_iter_advance(struct css_task_iter *);
4788:	static void css_task_iter_advance_css_set(struct css_task_iter *);
7012:	static ssize_t delegate_show(struct kobject *, struct kobj_attribute *, char *);
6745:	static int enable_cgroup_debug(char *);
7034:	static ssize_t features_show(struct kobject *, struct kobj_attribute *, char *);
1206:	static struct css_set *find_css_set(struct css_set *, struct cgroup *);
5444:	static void init_and_link_css(struct cgroup_subsys_state *, struct cgroup_subsys *, struct cgroup *);
5810:	static void kill_css(struct cgroup_subsys_state *);

File kernel/cgroup/cpuset.c:
4025:	void __cpuset_memory_pressure_bump(void);
3875:	bool __cpuset_node_allowed(int, gfp_t);
3702:	void cpuset_cpus_allowed(struct task_struct *, struct cpumask *);
3748:	bool cpuset_cpus_allowed_fallback(struct task_struct *);
3399:	void cpuset_force_rebuild(void);
3287:	int cpuset_init(void);
3782:	void cpuset_init_current_mems_allowed(void);
3673:	void cpuset_init_smp(void);
3941:	int cpuset_mem_spread_node(void);
3797:	nodemask_t cpuset_mems_allowed(struct task_struct *);
3972:	int cpuset_mems_allowed_intersects(const struct task_struct *, const struct task_struct *);
3817:	int cpuset_nodemask_valid_mems_allowed(nodemask_t *);
3984:	void cpuset_print_current_mems_allowed(void);
408:	void cpuset_read_lock(void);
413:	void cpuset_read_unlock(void);
3950:	int cpuset_slab_spread_node(void);
4073:	void cpuset_task_status_allowed(struct seq_file *, struct task_struct *);
3641:	void cpuset_update_active_cpus(void);
3651:	void cpuset_wait_for_hotplug(void);
2121:	bool current_cpuset_is_being_rebound(void);
4042:	int proc_cpuset_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1196:	void rebuild_sched_domains(void);
1247:	static void compute_effective_cpumask(struct cpumask *, struct cpuset *, struct cpuset *);
2512:	static void cpuset_attach(struct cgroup_taskset *);
3232:	static void cpuset_bind(struct cgroup_subsys_state *);
2449:	static int cpuset_can_attach(struct cgroup_taskset *);
2494:	static void cpuset_cancel_attach(struct cgroup_taskset *);
2775:	static int cpuset_common_seq_show(struct seq_file *, void *);
3090:	static struct cgroup_subsys_state *cpuset_css_alloc(struct cgroup_subsys_state *);
3225:	static void cpuset_css_free(struct cgroup_subsys_state *);
3197:	static void cpuset_css_offline(struct cgroup_subsys_state *);
3119:	static int cpuset_css_online(struct cgroup_subsys_state *);
3255:	static void cpuset_fork(struct task_struct *);
3543:	static void cpuset_hotplug_workfn(struct work_struct *);
1872:	static void cpuset_migrate_mm_workfn(struct work_struct *);
1905:	static void cpuset_post_attach(void);
2838:	static s64 cpuset_read_s64(struct cgroup_subsys_state *, struct cftype *);
2807:	static u64 cpuset_read_u64(struct cgroup_subsys_state *, struct cftype *);
2702:	static ssize_t cpuset_write_resmask(struct kernfs_open_file *, char *, size_t, loff_t);
2673:	static int cpuset_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
2624:	static int cpuset_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
501:	static void guarantee_online_cpus(struct task_struct *, struct cpumask *);
464:	static bool partition_is_populated(struct cpuset *, struct cpuset *);
1139:	static void rebuild_sched_domains_locked(void);
2853:	static int sched_partition_show(struct seq_file *, void *);
2884:	static ssize_t sched_partition_write(struct kernfs_open_file *, char *, size_t, loff_t);
1545:	static void update_cpumasks_hier(struct cpuset *, struct tmpmasks *, bool);
812:	static void update_domain_attr_tree(struct sched_domain_attr *, struct cpuset *);
2177:	static int update_flag(cpuset_flagbits_t, struct cpuset *, int);
1310:	static int update_parent_subparts_cpumask(struct cpuset *, int, struct cpumask *, struct tmpmasks *);
2226:	static int update_prstate(struct cpuset *, int);
1697:	static void update_sibling_cpumasks(struct cpuset *, struct cpuset *, struct tmpmasks *);
1214:	static void update_tasks_cpumask(struct cpuset *, struct cpumask *);
1948:	static void update_tasks_nodemask(struct cpuset *);
729:	static int validate_change(struct cpuset *, struct cpuset *);

File kernel/cgroup/freezer.c:
107:	void cgroup_enter_frozen(void);
260:	void cgroup_freeze(struct cgroup *, bool);
222:	void cgroup_freezer_migrate_task(struct task_struct *, struct cgroup *, struct cgroup *);
131:	void cgroup_leave_frozen(bool);
52:	void cgroup_update_frozen(struct cgroup *);

File kernel/cgroup/legacy_freezer.c:
65:	bool cgroup_freezing(struct task_struct *);
342:	static void freezer_apply_state(struct freezer *, bool, unsigned int);
158:	static void freezer_attach(struct cgroup_taskset *);
86:	static struct cgroup_subsys_state *freezer_css_alloc(struct cgroup_subsys_state *);
144:	static void freezer_css_free(struct cgroup_subsys_state *);
130:	static void freezer_css_offline(struct cgroup_subsys_state *);
105:	static int freezer_css_online(struct cgroup_subsys_state *);
204:	static void freezer_fork(struct task_struct *);
438:	static u64 freezer_parent_freezing_read(struct cgroup_subsys_state *, struct cftype *);
284:	static int freezer_read(struct seq_file *, void *);
430:	static u64 freezer_self_freezing_read(struct cgroup_subsys_state *, struct cftype *);
412:	static ssize_t freezer_write(struct kernfs_open_file *, char *, size_t, loff_t);

File kernel/cgroup/namespace.c:
50:	struct cgroup_namespace *copy_cgroup_ns(unsigned long, struct user_namespace *, struct cgroup_namespace *);
40:	void free_cgroup_ns(struct cgroup_namespace *);
153:	static int cgroup_namespaces_init(void);
118:	static struct ns_common *cgroupns_get(struct task_struct *);
98:	static int cgroupns_install(struct nsset *, struct ns_common *);
139:	static struct user_namespace *cgroupns_owner(struct ns_common *);
134:	static void cgroupns_put(struct ns_common *);

File kernel/cgroup/pids.c:
191:	static int pids_can_attach(struct cgroup_taskset *);
238:	static int pids_can_fork(struct task_struct *, struct css_set *);
216:	static void pids_cancel_attach(struct cgroup_taskset *);
262:	static void pids_cancel_fork(struct task_struct *, struct css_set *);
70:	static struct cgroup_subsys_state *pids_css_alloc(struct cgroup_subsys_state *);
84:	static void pids_css_free(struct cgroup_subsys_state *);
326:	static s64 pids_current_read(struct cgroup_subsys_state *, struct cftype *);
342:	static int pids_events_show(struct seq_file *, void *);
312:	static int pids_max_show(struct seq_file *, void *);
282:	static ssize_t pids_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
334:	static s64 pids_peak_read(struct cgroup_subsys_state *, struct cftype *);
275:	static void pids_release(struct task_struct *);

File kernel/cgroup/rstat.c:
409:	void __cgroup_account_cputime(struct cgroup *, u64);
419:	void __cgroup_account_cputime_field(struct cgroup *, enum cpu_usage_stat, u64);
166:	void bpf_rstat_flush(struct cgroup *, struct cgroup *, int);
490:	void cgroup_base_stat_cputime_show(struct seq_file *);
325:	void cgroup_rstat_boot(void);
306:	void cgroup_rstat_exit(struct cgroup *);
234:	void cgroup_rstat_flush(struct cgroup *);
267:	void cgroup_rstat_flush_hold(struct cgroup *);
249:	void cgroup_rstat_flush_irqsafe(struct cgroup *);
278:	void cgroup_rstat_flush_release(void);
284:	int cgroup_rstat_init(struct cgroup *);
29:	void cgroup_rstat_updated(struct cgroup *, int);
546:	static int bpf_rstat_kfunc_init(void);
400:	static void cgroup_base_stat_cputime_account_end(struct cgroup *, struct cgroup_rstat_cpu *, unsigned long);
174:	static void cgroup_rstat_flush_locked(struct cgroup *, bool);

File kernel/configs.c:
70:	static void ikconfig_cleanup(void);
55:	static int ikconfig_init(void);
41:	static ssize_t ikconfig_read_current(struct file *, char *, size_t, loff_t *);

File kernel/context_tracking.c:
317:	void ct_idle_enter(void);
333:	void ct_idle_exit(void);
365:	void ct_irq_enter(void);
402:	void ct_irq_enter_irqson(void);
390:	void ct_irq_exit(void);
417:	void ct_irq_exit_irqson(void);
258:	void ct_nmi_enter(void);
204:	void ct_nmi_exit(void);
163:	static void ct_kernel_enter(bool, int);
101:	static void ct_kernel_enter_state(int);
124:	static void ct_kernel_exit(bool, int);
81:	static void ct_kernel_exit_state(int);

File kernel/cpu.c:
2231:	void __cpuhp_remove_state(enum cpuhp_state, bool);
2193:	void __cpuhp_remove_state_cpuslocked(enum cpuhp_state, bool);
2129:	int __cpuhp_setup_state(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
2070:	int __cpuhp_setup_state_cpuslocked(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
2040:	int __cpuhp_state_add_instance(enum cpuhp_state, struct hlist_node *, bool);
1995:	int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state, struct hlist_node *, bool);
2145:	int __cpuhp_state_remove_instance(enum cpuhp_state, struct hlist_node *, bool);
1468:	int add_cpu(unsigned int);
413:	void arch_smt_update(void);
2711:	void boot_cpu_hotplug_init(void);
2693:	void boot_cpu_init(void);
1490:	int bringup_hibernate_cpu(unsigned int);
1505:	void bringup_nonboot_cpus(unsigned int);
997:	void clear_tasks_mm_cpumask(int);
1251:	int cpu_device_down(struct device *);
1463:	int cpu_device_up(struct device *);
374:	void cpu_hotplug_disable(void);
389:	void cpu_hotplug_enable(void);
288:	void cpu_maps_update_begin(void);
293:	void cpu_maps_update_done(void);
2757:	bool cpu_mitigations_auto_nosmt(void);
2750:	bool cpu_mitigations_off(void);
1340:	void cpuhp_online_idle(enum cpuhp_state);
1114:	void cpuhp_report_idle_dead(void);
927:	void cpuhp_threads_init(void);
308:	void cpus_read_lock(void);
314:	int cpus_read_trylock(void);
320:	void cpus_read_unlock(void);
326:	void cpus_write_lock(void);
331:	void cpus_write_unlock(void);
2664:	void init_cpu_online(const struct cpumask *);
2659:	void init_cpu_possible(const struct cpumask *);
2654:	void init_cpu_present(const struct cpumask *);
336:	void lockdep_assert_cpus_held(void);
1321:	void notify_cpu_starting(unsigned int);
1256:	int remove_cpu(unsigned int);
2669:	void set_cpu_online(unsigned int, bool);
1268:	void smp_shutdown_nonboot_cpus(unsigned int);
666:	static int __cpuhp_invoke_callback_range(bool, unsigned int, struct cpuhp_cpu_state *, enum cpuhp_state, bool);
1152:	static int _cpu_down(unsigned int, int, enum cpuhp_state);
2551:	static ssize_t active_show(struct device *, struct device_attribute *, char *);
589:	static int bringup_cpu(unsigned int);
2536:	static ssize_t control_show(struct device *, struct device_attribute *, char *);
2544:	static ssize_t control_store(struct device *, struct device_attribute *, const char *, size_t);
1231:	static int cpu_down(unsigned int, enum cpuhp_state);
1419:	static int cpu_up(unsigned int, enum cpuhp_state);
1107:	static void cpuhp_complete_idle_dead(void *);
915:	static void cpuhp_init_state(void);
167:	static int cpuhp_invoke_callback(unsigned int, enum cpuhp_state, bool, struct hlist_node *, struct hlist_node **);
1943:	static int cpuhp_issue_call(int, enum cpuhp_state, bool, struct hlist_node *);
545:	static int cpuhp_kick_ap(int, struct cpuhp_cpu_state *, enum cpuhp_state);
750:	static int cpuhp_should_run(unsigned int);
2576:	static int cpuhp_sysfs_init(void);
771:	static void cpuhp_thread_fun(unsigned int);
2421:	static ssize_t fail_show(struct device *, struct device_attribute *, char *);
2371:	static ssize_t fail_store(struct device *, struct device_attribute *, const char *, size_t);
615:	static int finish_cpu(unsigned int);
2733:	static int mitigations_parse_cmdline(char *);
2312:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
2444:	static ssize_t states_show(struct device *, struct device_attribute *, char *);
1027:	static int take_cpu_down(void *);
1058:	static int takedown_cpu(unsigned int);
2362:	static ssize_t target_show(struct device *, struct device_attribute *, char *);
2321:	static ssize_t target_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/cred.c:
135:	void __put_cred(struct cred *);
533:	void abort_creds(struct cred *);
447:	int commit_creds(struct cred *);
340:	int copy_creds(struct task_struct *, unsigned long);
216:	struct cred *cred_alloc_blank(void);
626:	int cred_fscmp(const struct cred *, const struct cred *);
689:	void cred_init(void);
160:	void exit_creds(struct task_struct *);
196:	const struct cred *get_task_cred(struct task_struct *);
554:	const struct cred *override_creds(const struct cred *);
252:	struct cred *prepare_creds(void);
307:	struct cred *prepare_exec_creds(void);
712:	struct cred *prepare_kernel_cred(struct task_struct *);
595:	void revert_creds(const struct cred *);
812:	int set_create_files_as(struct cred *, struct inode *);
666:	int set_cred_ucounts(struct cred *);
774:	int set_security_override(struct cred *, u32);
790:	int set_security_override_from_ctx(struct cred *, const char *);
94:	static void put_cred_rcu(struct callback_head *);

File kernel/dma/coherent.c:
185:	int dma_alloc_from_dev_coherent(struct device *, ssize_t, dma_addr_t *, void **);
117:	int dma_declare_coherent_memory(struct device *, phys_addr_t, dma_addr_t, size_t);
269:	int dma_mmap_from_dev_coherent(struct device *, struct vm_area_struct *, void *, size_t, int *);
133:	void dma_release_coherent_memory(struct device *);
225:	int dma_release_from_dev_coherent(struct device *, int, void *);
38:	static struct dma_coherent_mem *dma_init_coherent_memory(phys_addr_t, dma_addr_t, size_t, bool);
334:	static int rmem_dma_device_init(struct reserved_mem *, struct device *);
349:	static void rmem_dma_device_release(struct reserved_mem *, struct device *);
361:	static int rmem_dma_setup(struct reserved_mem *);

File kernel/dma/contiguous.c:
304:	struct page *dma_alloc_contiguous(struct device *, size_t, gfp_t);
257:	struct page *dma_alloc_from_contiguous(struct device *, size_t, unsigned int, bool);
206:	void dma_contiguous_early_fixup(phys_addr_t, unsigned long);
167:	void dma_contiguous_reserve(phys_addr_t);
227:	int dma_contiguous_reserve_area(phys_addr_t, phys_addr_t, phys_addr_t, struct cma **, bool);
347:	void dma_free_contiguous(struct device *, struct page *, size_t);
276:	bool dma_release_from_contiguous(struct device *, struct page *, int);
78:	static int early_cma(char *);
383:	static int rmem_cma_device_init(struct reserved_mem *, struct device *);
389:	static void rmem_cma_device_release(struct reserved_mem *, struct device *);
400:	static int rmem_cma_setup(struct reserved_mem *);

File kernel/dma/direct.c:
208:	void *dma_direct_alloc(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
367:	struct page *dma_direct_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
549:	bool dma_direct_can_mmap(struct device *);
322:	void dma_direct_free(struct device *, size_t, void *, dma_addr_t, unsigned long);
391:	void dma_direct_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
39:	u64 dma_direct_get_required_mask(struct device *);
536:	int dma_direct_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
520:	dma_addr_t dma_direct_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
476:	int dma_direct_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
602:	size_t dma_direct_max_mapping_size(struct device *);
555:	int dma_direct_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
611:	bool dma_direct_need_sync(struct device *, dma_addr_t);
633:	int dma_direct_set_offset(struct device *, phys_addr_t, dma_addr_t, u64);
579:	int dma_direct_supported(struct device *, u64);
432:	void dma_direct_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
409:	void dma_direct_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
460:	void dma_direct_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
117:	static struct page *__dma_direct_alloc_pages(struct device *, size_t, gfp_t, bool);
68:	static bool dma_coherent_ok(struct device *, phys_addr_t, size_t);

File kernel/dma/mapping.c:
493:	void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
642:	struct sg_table *dma_alloc_noncontiguous(struct device *, size_t, enum dma_data_direction, gfp_t, unsigned long);
574:	struct page *dma_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
434:	bool dma_can_mmap(struct device *);
527:	void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
675:	void dma_free_noncontiguous(struct device *, size_t, struct sg_table *, enum dma_data_direction);
597:	void dma_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
834:	unsigned long dma_get_merge_boundary(struct device *);
472:	u64 dma_get_required_mask(struct device *);
395:	int dma_get_sgtable_attrs(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
143:	dma_addr_t dma_map_page_attrs(struct device *, struct page *, size_t, size_t, enum dma_data_direction, unsigned long);
295:	dma_addr_t dma_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
227:	unsigned int dma_map_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
266:	int dma_map_sgtable(struct device *, struct sg_table *, enum dma_data_direction, unsigned long);
798:	size_t dma_max_mapping_size(struct device *);
457:	int dma_mmap_attrs(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
709:	int dma_mmap_noncontiguous(struct device *, struct vm_area_struct *, size_t, struct sg_table *);
605:	int dma_mmap_pages(struct device *, struct vm_area_struct *, size_t, struct page *);
824:	bool dma_need_sync(struct device *, dma_addr_t);
812:	size_t dma_opt_mapping_size(struct device *);
741:	bool dma_pci_p2pdma_supported(struct device *);
415:	pgprot_t dma_pgprot(struct device *, pgprot_t, unsigned long);
782:	int dma_set_coherent_mask(struct device *, u64);
765:	int dma_set_mask(struct device *, u64);
356:	void dma_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
370:	void dma_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
328:	void dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
342:	void dma_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
167:	void dma_unmap_page_attrs(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
316:	void dma_unmap_resource(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
279:	void dma_unmap_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
688:	void *dma_vmap_noncontiguous(struct device *, size_t, struct sg_table *);
700:	void dma_vunmap_noncontiguous(struct device *, void *);
85:	void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
61:	void dmam_free_coherent(struct device *, size_t, void *, dma_addr_t);
40:	static int dmam_match(struct device *, void *, void *);
32:	static void dmam_release(struct device *, void *);

File kernel/dma/pool.c:
265:	struct page *dma_alloc_from_pool(struct device *, size_t, void **, gfp_t, bool (*)(struct device *, phys_addr_t, size_t));
283:	bool dma_free_from_pool(struct device *, void *, size_t);
162:	static struct gen_pool *__dma_atomic_pool_init(size_t, gfp_t);
79:	static int atomic_pool_expand(struct gen_pool *, size_t, gfp_t);
151:	static void atomic_pool_work_fn(struct work_struct *);
187:	static int dma_atomic_pool_init(void);
29:	static int early_coherent_pool(char *);

File kernel/dma/remap.c:
38:	void *dma_common_contiguous_remap(struct page *, size_t, pgprot_t, const void *);
9:	struct page **dma_common_find_pages(void *);
60:	void dma_common_free_remap(void *, size_t);
22:	void *dma_common_pages_remap(struct page **, size_t, pgprot_t, const void *);

File kernel/dma/swiotlb.c:
927:	bool is_swiotlb_active(struct device *);
172:	void swiotlb_adjust_size(unsigned long);
480:	void swiotlb_exit(void);
393:	void swiotlb_init(bool, unsigned int);
403:	int swiotlb_init_late(size_t, gfp_t, int (*)(void *, unsigned long));
338:	void swiotlb_init_remap(bool, unsigned int, int (*)(void *, unsigned long));
882:	dma_addr_t swiotlb_map(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
911:	size_t swiotlb_max_mapping_size(struct device *);
159:	unsigned int swiotlb_max_segment(void);
189:	void swiotlb_print_info(void);
167:	unsigned long swiotlb_size_or_default(void);
869:	void swiotlb_sync_single_for_cpu(struct device *, phys_addr_t, size_t, enum dma_data_direction);
860:	void swiotlb_sync_single_for_device(struct device *, phys_addr_t, size_t, enum dma_data_direction);
741:	phys_addr_t swiotlb_tbl_map_single(struct device *, phys_addr_t, size_t, size_t, unsigned int, enum dma_data_direction, unsigned long);
846:	void swiotlb_tbl_unmap_single(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
246:	void swiotlb_update_mem_attributes(void);
107:	static bool round_up_default_nslabs(void);
137:	static int setup_io_tlb_npages(char *);
120:	static void swiotlb_adjust_nareas(unsigned int);
526:	static void swiotlb_bounce(struct device *, phys_addr_t, size_t, enum dma_data_direction);
263:	static void swiotlb_init_io_tlb_mem(struct io_tlb_mem *, phys_addr_t, unsigned long, unsigned int, bool, unsigned int);

File kernel/events/callchain.c:
108:	int get_callchain_buffers(int);
152:	struct perf_callchain_entry *get_callchain_entry(int *);
180:	struct perf_callchain_entry *get_perf_callchain(struct pt_regs *, u32, bool, bool, u32, bool, bool);
38:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
43:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
232:	int perf_event_max_stack_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void put_callchain_buffers(void);
174:	void put_callchain_entry(int);
48:	static void release_callchain_buffers_rcu(struct callback_head *);

File kernel/events/core.c:
9761:	void ___perf_sw_event(u32, u64, struct pt_regs *, u64);
12296:	long __arm64_sys_perf_event_open(const struct pt_regs *);
3977:	void __perf_event_task_sched_in(struct task_struct *, struct task_struct *);
3623:	void __perf_event_task_sched_out(struct task_struct *, struct task_struct *);
9772:	void __perf_sw_event(u32, u64, struct pt_regs *, u64);
6021:	void arch_perf_update_userpage(struct perf_event *, struct perf_event_mmap_page *, u64);
10499:	void perf_bp_event(struct perf_event *, void *);
7535:	struct perf_callchain_entry *perf_callchain(struct perf_event *, struct pt_regs *);
183:	struct perf_event_context *perf_cpu_task_ctx(void);
476:	int perf_cpu_time_max_percent_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
7105:	void perf_event__output_id_sample(struct perf_event *, struct perf_output_handle *, struct perf_sample_data *);
9434:	int perf_event_account_interrupt(struct perf_event *);
3088:	void perf_event_addr_filters_sync(struct perf_event *);
13161:	const struct perf_event_attr *perf_event_attrs(struct perf_event *);
8847:	void perf_event_aux_event(struct perf_event *, unsigned long, unsigned long, u64);
9201:	void perf_event_bpf_event(struct bpf_prog *, enum perf_bpf_event_type, u16);
8237:	void perf_event_comm(struct task_struct *, bool);
12700:	struct perf_event *perf_event_create_kernel_counter(struct perf_event_attr *, int, struct task_struct *, perf_overflow_handler_t, void *);
13134:	void perf_event_delayed_put(struct task_struct *);
2456:	void perf_event_disable(struct perf_event *);
2466:	void perf_event_disable_inatomic(struct perf_event *);
2447:	void perf_event_disable_local(struct perf_event *);
2988:	void perf_event_enable(struct perf_event *);
7955:	void perf_event_exec(void);
13588:	int perf_event_exit_cpu(unsigned int);
13031:	void perf_event_exit_task(struct task_struct *);
8157:	void perf_event_fork(struct task_struct *);
10493:	void perf_event_free_bpf_prog(struct perf_event *);
13088:	void perf_event_free_task(struct task_struct *);
13139:	struct file *perf_event_get(unsigned int);
7073:	void perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
13614:	void perf_event_init(void);
13568:	int perf_event_init_cpu(unsigned int);
13472:	int perf_event_init_task(struct task_struct *, u64);
9327:	void perf_event_itrace_started(struct perf_event *);
9088:	void perf_event_ksymbol(u16, u64, u32, bool, const char *);
8812:	void perf_event_mmap(struct vm_area_struct *);
8334:	void perf_event_namespaces(struct task_struct *);
7797:	int perf_event_output(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7789:	void perf_event_output_backward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7781:	void perf_event_output_forward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
9531:	int perf_event_overflow(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
5650:	u64 perf_event_pause(struct perf_event *, bool);
5766:	int perf_event_period(struct perf_event *, u64);
576:	void perf_event_print_debug(void);
4526:	int perf_event_read_local(struct perf_event *, u64 *, u64 *, u64 *);
5426:	u64 perf_event_read_value(struct perf_event *, u64 *, u64 *);
3121:	int perf_event_refresh(struct perf_event *, int);
5279:	int perf_event_release_kernel(struct perf_event *);
10487:	int perf_event_set_bpf_prog(struct perf_event *, struct bpf_prog *, u64);
13642:	ssize_t perf_event_sysfs_show(struct device *, struct device_attribute *, char *);
5972:	int perf_event_task_disable(void);
5956:	int perf_event_task_enable(void);
4291:	void perf_event_task_tick(void);
9295:	void perf_event_text_poke(const void *, const void *, size_t, const void *, size_t);
6031:	void perf_event_update_userpage(struct perf_event *);
6622:	void perf_event_wakeup(struct perf_event *);
13153:	const struct perf_event *perf_get_event(struct file *);
8884:	void perf_log_lost_samples(struct perf_event *, u64);
7227:	void perf_output_sample(struct perf_output_handle *, struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
1132:	void perf_pmu_disable(struct pmu *);
1139:	void perf_pmu_enable(struct pmu *);
12861:	void perf_pmu_migrate_context(struct pmu *, int, int);
11389:	int perf_pmu_register(struct pmu *, const char *, int);
2705:	void perf_pmu_resched(struct pmu *);
11497:	void perf_pmu_unregister(struct pmu *);
7552:	void perf_prepare_sample(struct perf_event_header *, struct perf_sample_data *, struct perf_event *, struct pt_regs *);
452:	int perf_proc_update_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9368:	void perf_report_aux_output_id(struct perf_event *, u64);
519:	void perf_sample_event_took(u64);
3543:	void perf_sched_cb_dec(struct pmu *);
3555:	void perf_sched_cb_inc(struct pmu *);
9746:	int perf_swevent_get_recursion_context(void);
9754:	void perf_swevent_put_recursion_context(int);
9560:	u64 perf_swevent_set_period(struct perf_event *);
6194:	struct perf_buffer *ring_buffer_get(struct perf_event *);
6212:	void ring_buffer_put(struct perf_buffer *);
13716:	static int __perf_cgroup_move(void *);
9399:	static int __perf_event_account_interrupt(struct perf_event *, int);
2393:	static void __perf_event_disable(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
2900:	static void __perf_event_enable(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
13532:	static void __perf_event_exit_context(void *);
7044:	static void __perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *, u64);
9456:	static int __perf_event_overflow(struct perf_event *, int, struct perf_sample_data *, struct pt_regs *);
5702:	static void __perf_event_period(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
4444:	static void __perf_event_read(void *);
5397:	static u64 __perf_event_read_value(struct perf_event *, u64 *, u64 *);
3003:	static int __perf_event_stop(void *);
2721:	static int __perf_install_in_context(void *);
8005:	static int __perf_pmu_output_stop(void *);
12795:	static void __perf_pmu_remove(struct perf_event_context *, int, struct pmu *, struct perf_event_groups *, struct list_head *);
5439:	static int __perf_read_group_add(struct perf_event *, u64, u64 *);
2305:	static void __perf_remove_from_context(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
3200:	static void __pmu_ctx_sched_out(struct perf_event_pmu_context *, enum event_type_t);
5141:	static void _free_event(struct perf_event *);
2433:	static void _perf_event_disable(struct perf_event *);
2951:	static void _perf_event_enable(struct perf_event *);
3104:	static int _perf_event_refresh(struct perf_event *, int);
5642:	static void _perf_event_reset(struct perf_event *);
11691:	static void account_event(struct perf_event *);
2613:	static void add_event_to_ctx(struct perf_event *, struct perf_event_context *);
4693:	static struct perf_event_context *alloc_perf_context(struct task_struct *);
11050:	static int cpu_clock_event_add(struct perf_event *, int);
11059:	static void cpu_clock_event_del(struct perf_event *, int);
11069:	static int cpu_clock_event_init(struct perf_event *);
11064:	static void cpu_clock_event_read(struct perf_event *);
11038:	static void cpu_clock_event_start(struct perf_event *, int);
11044:	static void cpu_clock_event_stop(struct perf_event *, int);
4183:	static struct perf_event *ctx_event_to_rotate(struct perf_event_pmu_context *);
3840:	static void ctx_flexible_sched_in(struct perf_event_context *, struct pmu *);
3821:	static void ctx_pinned_sched_in(struct perf_event_context *, struct pmu *);
2665:	static void ctx_resched(struct perf_cpu_context *, struct perf_event_context *, enum event_type_t);
3865:	static void ctx_sched_in(struct perf_event_context *, enum event_type_t);
3242:	static void ctx_sched_out(struct perf_event_context *, enum event_type_t);
217:	static int event_function(void *);
263:	static void event_function_call(struct perf_event *, event_f, void *);
2478:	static int event_sched_in(struct perf_event *, struct perf_event_context *);
2216:	static void event_sched_out(struct perf_event *, struct perf_event_context *);
5095:	static void exclusive_event_destroy(struct perf_event *);
4732:	static struct perf_event_context *find_get_context(struct task_struct *, struct perf_event *);
4805:	static struct perf_event_pmu_context *find_get_pmu_context(struct pmu *, struct perf_event_context *, struct perf_event *);
1170:	static void free_ctx(struct callback_head *);
4887:	static void free_epc_rcu(struct callback_head *);
4929:	static void free_event_rcu(struct callback_head *);
13178:	static struct perf_event *inherit_event(struct perf_event *, struct task_struct *, struct perf_event_context *, struct task_struct *, struct perf_event *, struct perf_event_context *);
13333:	static int inherit_task_group(struct perf_event *, struct task_struct *, struct perf_event_context *, struct task_struct *, u64, int *);
1969:	static void list_del_event(struct perf_event *, struct perf_event_context *);
11250:	static ssize_t nr_addr_filters_show(struct device *, struct device_attribute *, char *);
10544:	static void perf_addr_filters_splice(struct perf_event *, struct list_head *);
4100:	static void perf_adjust_freq_unthr_context(struct perf_event_context *, bool);
4065:	static void perf_adjust_period(struct perf_event *, u64, u64, bool);
13727:	static void perf_cgroup_attach(struct cgroup_taskset *);
13685:	static struct cgroup_subsys_state *perf_cgroup_css_alloc(struct cgroup_subsys_state *);
13702:	static void perf_cgroup_css_free(struct cgroup_subsys_state *);
13710:	static int perf_cgroup_css_online(struct cgroup_subsys_state *);
812:	static void perf_cgroup_set_timestamp(struct perf_cpu_context *);
840:	static void perf_cgroup_switch(struct task_struct *);
11999:	static int perf_copy_attr(struct perf_event_attr *, struct perf_event_attr *);
508:	static void perf_duration_warn(struct irq_work *);
10593:	static void perf_event_addr_filters_apply(struct perf_event *);
11764:	static struct perf_event *perf_event_alloc(struct perf_event_attr *, int, struct task_struct *, struct perf_event *, struct perf_event *, perf_overflow_handler_t, void *, int);
9154:	static void perf_event_bpf_output(struct perf_event *, void *);
8412:	static void perf_event_cgroup_output(struct perf_event *, void *);
8185:	static void perf_event_comm_output(struct perf_event *, void *);
1256:	static struct perf_event_context *perf_event_ctx_lock_nested(struct perf_event *, int);
12915:	static void perf_event_exit_event(struct perf_event *, struct perf_event_context *);
1662:	static void perf_event_groups_insert(struct perf_event_groups *, struct perf_event *);
11237:	static int perf_event_idx_default(struct perf_event *);
13489:	static void perf_event_init_all_cpus(void);
5999:	static void perf_event_init_userpage(struct perf_event *);
9064:	static void perf_event_ksymbol_output(struct perf_event *, void *);
8529:	static void perf_event_mmap_output(struct perf_event *, void *);
3134:	static int perf_event_modify_breakpoint(struct perf_event *, struct perf_event_attr *);
11272:	static ssize_t perf_event_mux_interval_ms_show(struct device *, struct device_attribute *, char *);
11284:	static ssize_t perf_event_mux_interval_ms_store(struct device *, struct device_attribute *, const char *, size_t);
8284:	static void perf_event_namespaces_output(struct perf_event *, void *);
11195:	static int perf_event_nop_int(struct perf_event *, u64);
4591:	static int perf_event_read(struct perf_event *, bool);
12135:	static int perf_event_set_output(struct perf_event *, struct perf_event *);
654:	static void perf_event_set_state(struct perf_event *, enum perf_event_state);
8934:	static void perf_event_switch_output(struct perf_event *, void *);
13655:	static int perf_event_sysfs_init(void);
8081:	static void perf_event_task_output(struct perf_event *, void *);
9262:	static void perf_event_text_poke_output(struct perf_event *, void *);
636:	static void perf_event_update_time(struct perf_event *);
6580:	static int perf_fasync(int, struct file *, int);
7501:	static u64 perf_get_page_size(unsigned long);
2123:	static void perf_group_detach(struct perf_event *);
2789:	static void perf_install_in_context(struct perf_event_context *, struct perf_event *, int);
5916:	static long perf_ioctl(struct file *, unsigned int, unsigned long);
7894:	static void perf_iterate_sb(perf_iterate_f *, void *, struct perf_event_context *);
1359:	static struct perf_event_context *perf_lock_task_context(struct task_struct *, unsigned long *);
9006:	static void perf_log_throttle(struct perf_event *, int);
6364:	static int perf_mmap(struct file *, struct vm_area_struct *);
6246:	static void perf_mmap_close(struct vm_area_struct *);
6082:	static vm_fault_t perf_mmap_fault(struct vm_fault *);
6222:	static void perf_mmap_open(struct vm_area_struct *);
1070:	static enum hrtimer_restart perf_mux_hrtimer_handler(struct hrtimer *);
1127:	static int perf_mux_hrtimer_restart_ipi(void *);
7203:	static void perf_output_read(struct perf_output_handle *, struct perf_event *);
6706:	static void perf_pending_irq(struct irq_work *);
6732:	static void perf_pending_task(struct callback_head *);
11225:	static void perf_pmu_cancel_txn(struct pmu *);
11212:	static int perf_pmu_commit_txn(struct pmu *);
11190:	static int perf_pmu_nop_int(struct pmu *);
11186:	static void perf_pmu_nop_txn(struct pmu *, unsigned int);
11182:	static void perf_pmu_nop_void(struct pmu *);
3594:	static void perf_pmu_sched_task(struct task_struct *, struct task_struct *, bool);
11202:	static void perf_pmu_start_txn(struct pmu *, unsigned int);
5619:	static __poll_t perf_poll(struct file *, poll_table *);
5602:	static ssize_t perf_read(struct file *, char *, size_t, loff_t *);
13595:	static int perf_reboot(struct notifier_block *, unsigned long, void *);
5391:	static int perf_release(struct inode *, struct file *);
2367:	static void perf_remove_from_context(struct perf_event *, unsigned long);
5218:	static void perf_remove_from_owner(struct perf_event *);
5044:	static void perf_sched_delayed(struct work_struct *);
9792:	static int perf_swevent_add(struct perf_event *, int);
9815:	static void perf_swevent_del(struct perf_event *, int);
9609:	static void perf_swevent_event(struct perf_event *, u64, struct perf_sample_data *, struct pt_regs *);
10936:	static enum hrtimer_restart perf_swevent_hrtimer(struct hrtimer *);
9929:	static int perf_swevent_init(struct perf_event *);
9788:	static void perf_swevent_read(struct perf_event *);
9820:	static void perf_swevent_start(struct perf_event *, int);
9825:	static void perf_swevent_stop(struct perf_event *, int);
11529:	static int perf_try_init_event(struct pmu *, struct perf_event *);
1428:	static void perf_unpin_context(struct perf_event_context *);
11339:	static int pmu_dev_alloc(struct pmu *);
11334:	static void pmu_dev_release(struct device *);
1178:	static void put_ctx(struct perf_event_context *);
4895:	static void put_pmu_ctx(struct perf_event_pmu_context *);
72:	static void remote_function(void *);
6117:	static void ring_buffer_attach(struct perf_event *, struct perf_buffer *);
9919:	static void sw_perf_event_destroy(struct perf_event *);
11127:	static int task_clock_event_add(struct perf_event *, int);
11136:	static void task_clock_event_del(struct perf_event *, int);
11150:	static int task_clock_event_init(struct perf_event *);
11141:	static void task_clock_event_read(struct perf_event *);
11115:	static void task_clock_event_start(struct perf_event *, int);
11121:	static void task_clock_event_stop(struct perf_event *, int);
11263:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
772:	static void update_cgrp_time_from_cpuctx(struct perf_cpu_context *, bool);
3685:	static int visit_groups_merge(struct perf_event_context *, struct perf_event_groups *, int, struct pmu *, int (*)(struct perf_event *, void *), void *);

File kernel/events/hw_breakpoint.c:
531:	void arch_release_bp_slot(struct perf_event *);
526:	int arch_reserve_bp_slot(struct perf_event *);
538:	void arch_unregister_hw_breakpoint(struct perf_event *);
704:	int dbg_release_bp_slot(struct perf_event *);
689:	int dbg_reserve_bp_slot(struct perf_event *);
923:	bool hw_breakpoint_is_used(void);
1034:	int init_hw_breakpoint(void);
825:	int modify_user_hw_breakpoint(struct perf_event *, struct perf_event_attr *);
789:	int modify_user_hw_breakpoint_check(struct perf_event *, struct perf_event_attr *, bool);
741:	int register_perf_hw_breakpoint(struct perf_event *);
769:	struct perf_event *register_user_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *, struct task_struct *);
870:	struct perf_event **register_wide_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *);
644:	void release_bp_slot(struct perf_event *);
623:	int reserve_bp_slot(struct perf_event *);
853:	void unregister_hw_breakpoint(struct perf_event *);
907:	void unregister_wide_hw_breakpoint(struct perf_event **);
592:	static int __reserve_bp_slot(struct perf_event *, u64);
115:	static struct mutex *bp_constraints_lock(struct perf_event *);
139:	static void bp_constraints_unlock(struct mutex *);
968:	static void bp_perf_event_destroy(struct perf_event *);
995:	static int hw_breakpoint_add(struct perf_event *, int);
1008:	static void hw_breakpoint_del(struct perf_event *, int);
973:	static int hw_breakpoint_event_init(struct perf_event *);
1013:	static void hw_breakpoint_start(struct perf_event *, int);
1018:	static void hw_breakpoint_stop(struct perf_event *, int);
197:	static int init_breakpoint_slots(void);
322:	static int task_bp_pinned(int, struct perf_event *, enum bp_type_idx);
409:	static int toggle_bp_slot(struct perf_event *, bool, enum bp_type_idx, int);

File kernel/events/internal.h:
63:	static void rb_free_rcu(struct callback_head *);

File kernel/events/ring_buffer.c:
364:	void *perf_aux_output_begin(struct perf_output_handle *, struct perf_event *);
480:	void perf_aux_output_end(struct perf_output_handle *, unsigned long);
337:	void perf_aux_output_flag(struct perf_output_handle *, u64);
538:	int perf_aux_output_skip(struct perf_output_handle *, unsigned long);
560:	void *perf_get_aux(struct perf_output_handle *);
947:	struct page *perf_mmap_to_page(struct perf_buffer *, unsigned long);
281:	int perf_output_begin(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
274:	int perf_output_begin_backward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
267:	int perf_output_begin_forward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
290:	unsigned int perf_output_copy(struct perf_output_handle *, const void *, unsigned int);
573:	long perf_output_copy_aux(struct perf_output_handle *, struct perf_output_handle *, unsigned long, unsigned long);
302:	void perf_output_end(struct perf_output_handle *);
296:	unsigned int perf_output_skip(struct perf_output_handle *, unsigned int);
808:	struct perf_buffer *rb_alloc(int, long, int, int);
670:	int rb_alloc_aux(struct perf_buffer *, struct perf_event *, unsigned long, int, long, int);
854:	void rb_free(struct perf_buffer *);
763:	void rb_free_aux(struct perf_buffer *);
643:	static void __rb_free_aux(struct perf_buffer *);
50:	static void perf_output_put_handle(struct perf_output_handle *);

File kernel/exec_domain.c:
38:	long __arm64_sys_personality(const struct pt_regs *);
24:	static int execdomains_proc_show(struct seq_file *, void *);
30:	static int proc_execdomains_init(void);

File kernel/exit.c:
977:	long __arm64_sys_exit(const struct pt_regs *);
1021:	long __arm64_sys_exit_group(const struct pt_regs *);
1792:	long __arm64_sys_wait4(const struct pt_regs *);
1700:	long __arm64_sys_waitid(const struct pt_regs *);
1527:	void __wake_up_parent(struct task_struct *, struct task_struct *);
1901:	void abort(void);
805:	void do_exit(long);
987:	void do_group_exit(int);
344:	int is_current_pgrp_orphaned(void);
1776:	int kernel_wait(pid_t, int *);
1733:	long kernel_wait4(pid_t, int *, int, struct rusage *);
922:	void make_task_dead(int);
442:	void mm_update_next_owner(struct mm_struct *);
228:	void put_task_struct_rcu_user(struct task_struct *);
288:	int rcuwait_wake_up(struct rcuwait *);
238:	void release_task(struct task_struct *);
234:	void release_thread(struct task_struct *);
1886:	bool thread_group_exited(struct pid *);
1511:	static int child_wait_callback(wait_queue_entry_t *, unsigned int, int, void *);
217:	static void delayed_put_task_struct(struct callback_head *);
1573:	static long do_wait(struct wait_opts *);
531:	static void exit_mm(void);
95:	static int kernel_exit_sysctls_init(void);
114:	static int kernel_exit_sysfs_init(void);
373:	static void kill_orphaned_pgrp(struct task_struct *, struct task_struct *);
106:	static ssize_t oops_count_show(struct kobject *, struct kobj_attribute *, char *);
1371:	static int wait_consider_task(struct wait_opts *, int, struct task_struct *);

File kernel/extable.c:
77:	int __kernel_text_address(unsigned long);
66:	int core_kernel_text(unsigned long);
163:	int func_ptr_is_kernel_text(void *);
94:	int kernel_text_address(unsigned long);
54:	const struct exception_table_entry *search_exception_tables(unsigned long);
47:	const struct exception_table_entry *search_kernel_exception_table(unsigned long);
36:	void sort_main_extable(void);

File kernel/fork.c:
2790:	long __arm64_sys_clone(const struct pt_regs *);
2964:	long __arm64_sys_clone3(const struct pt_regs *);
1788:	long __arm64_sys_set_tid_address(const struct pt_regs *);
3271:	long __arm64_sys_unshare(const struct pt_regs *);
1679:	void __cleanup_sighand(struct sighand_struct *);
788:	void __mmdrop(struct mm_struct *);
843:	void __put_task_struct(struct task_struct *);
957:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
162:	void arch_release_task_struct(struct task_struct *);
862:	void arch_task_cache_init(void);
2616:	struct task_struct *create_io_thread(int (*)(void *), void *, int);
1517:	void exec_mm_release(struct task_struct *, struct mm_struct *);
1511:	void exit_mm_release(struct task_struct *, struct mm_struct *);
506:	void exit_task_stack_account(struct task_struct *);
2590:	struct task_struct *fork_idle(int);
910:	void fork_init(void);
536:	void free_task(struct task_struct *);
1352:	struct file *get_mm_exe_file(struct mm_struct *);
1371:	struct file *get_task_exe_file(struct task_struct *);
1395:	struct mm_struct *get_task_mm(struct task_struct *);
2640:	pid_t kernel_clone(struct kernel_clone_args *);
2730:	pid_t kernel_thread(int (*)(void *), void *, unsigned long);
3152:	int ksys_unshare(unsigned long);
1412:	struct mm_struct *mm_access(struct task_struct *, unsigned int);
1187:	struct mm_struct *mm_alloc(void);
3028:	void mm_cache_init(void);
1224:	void mmput(struct mm_struct *);
1242:	void mmput_async(struct mm_struct *);
151:	int nr_processes(void);
1843:	struct pid *pidfd_pid(const struct file *);
3047:	void proc_caches_init(void);
529:	void put_task_stack(struct task_struct *);
1300:	int replace_mm_exe_file(struct mm_struct *, struct file *);
1263:	int set_mm_exe_file(struct mm_struct *, struct file *);
964:	void set_task_stack_end_magic(struct task_struct *);
3300:	int sysctl_max_threads(struct ctl_table *, int, void *, size_t *, loff_t *);
3128:	int unshare_fd(unsigned long, unsigned int, struct files_struct **);
3282:	int unshare_files(void);
2747:	pid_t user_mode_thread(int (*)(void *), void *, unsigned long);
454:	struct vm_area_struct *vm_area_alloc(struct mm_struct *);
464:	struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
482:	void vm_area_free(struct vm_area_struct *);
2984:	void walk_process_tree(struct task_struct *, proc_visitor, void *);
1956:	static void __delayed_free_task(struct callback_head *);
1199:	static void __mmput(struct mm_struct *);
2828:	static int copy_clone_args_from_user(struct kernel_clone_args *, struct clone_args *, size_t);
1627:	static int copy_files(unsigned long, struct task_struct *);
1607:	static int copy_fs(unsigned long, struct task_struct *);
1570:	static int copy_mm(unsigned long, struct task_struct *);
1971:	static void copy_oom_score_adj(u64, struct task_struct *);
2010:	static struct task_struct *copy_process(struct pid *, int, int, struct kernel_clone_args *);
1654:	static int copy_sighand(unsigned long, struct task_struct *);
1703:	static int copy_signal(unsigned long, struct task_struct *);
1077:	static int coredump_filter_setup(char *);
972:	static struct task_struct *dup_task_struct(struct task_struct *, int);
824:	static void free_signal_struct(struct signal_struct *);
2584:	static int idle_dummy(void *);
1120:	static struct mm_struct *mm_init(struct mm_struct *, struct task_struct *, struct user_namespace *);
1478:	static void mm_release(struct task_struct *, struct mm_struct *);
808:	static void mmdrop_async_fn(struct work_struct *);
1234:	static void mmput_async_fn(struct work_struct *);
1930:	static __poll_t pidfd_poll(struct file *, struct poll_table_struct *);
1851:	static int pidfd_release(struct inode *, struct file *);
1896:	static void pidfd_show_fdinfo(struct seq_file *, struct file *);
3020:	static void sighand_ctor(void *);
346:	static void thread_stack_free_rcu(struct callback_head *);

File kernel/freezer.c:
62:	bool __refrigerator(bool);
194:	void __thaw_task(struct task_struct *);
153:	bool freeze_task(struct task_struct *);
38:	bool freezing_slow_path(struct task_struct *);
56:	bool frozen(struct task_struct *);
220:	bool set_freezable(void);
104:	static int __set_task_frozen(struct task_struct *, void *);
178:	static int __set_task_special(struct task_struct *, void *);

File kernel/futex/core.c:
543:	void __futex_queue(struct futex_q *, struct futex_hash_bucket *);
499:	void __futex_unqueue(struct futex_q *);
409:	int fault_in_user_writeable(u32 *);
440:	int futex_cmpxchg_value_locked(u32 *, u32 *, u32, u32);
1098:	void futex_exec_release(struct task_struct *);
1050:	void futex_exit_recursive(struct task_struct *);
1116:	void futex_exit_release(struct task_struct *);
451:	int futex_get_value_locked(u32 *, u32 *);
115:	struct futex_hash_bucket *futex_hash(union futex_key *);
513:	struct futex_hash_bucket *futex_q_lock(struct futex_q *);
536:	void futex_q_unlock(struct futex_hash_bucket *);
135:	struct hrtimer_sleeper *futex_setup_timer(ktime_t *, struct hrtimer_sleeper *, int, u64);
429:	struct futex_q *futex_top_waiter(struct futex_hash_bucket *, union futex_key *);
573:	int futex_unqueue(struct futex_q *);
620:	void futex_unqueue_pi(struct futex_q *);
220:	int get_futex_key(u32 *, bool, union futex_key *, enum futex_access);
469:	void wait_for_owner_exiting(int, struct task_struct *);
943:	static void exit_pi_state_list(struct task_struct *);
773:	static void exit_robust_list(struct task_struct *);
1123:	static int futex_init(void);
637:	static int handle_futex_death(u32 *, struct task_struct *, bool, bool);

File kernel/futex/pi.c:
884:	int fixup_pi_owner(u32 *, struct futex_q *, int);
930:	int futex_lock_pi(u32 *, unsigned int, ktime_t *, int);
514:	int futex_lock_pi_atomic(u32 *, struct futex_hash_bucket *, union futex_key *, struct futex_pi_state **, struct task_struct *, struct task_struct **, int);
1100:	int futex_unlock_pi(u32 *, unsigned int);
68:	void get_pi_state(struct futex_pi_state *);
77:	void put_pi_state(struct futex_pi_state *);
12:	int refill_pi_state_cache(void);
855:	static int fixup_pi_state_owner(u32 *, struct futex_q *, struct task_struct *);
320:	static int handle_exit_race(u32 *, u32, struct task_struct *);
45:	static void pi_state_update_owner(struct futex_pi_state *, struct task_struct *);

File kernel/futex/requeue.c:
364:	int futex_requeue(u32 *, unsigned int, u32 *, int, int, u32 *, int);
762:	int futex_wait_requeue_pi(u32 *, unsigned int, u32, ktime_t *, u32, u32 *);
125:	static void futex_requeue_pi_complete(struct futex_q *, int);
74:	static void requeue_futex(struct futex_q *, struct futex_hash_bucket *, struct futex_hash_bucket *, union futex_key *);
223:	static void requeue_pi_wake_futex(struct futex_q *, union futex_key *, struct futex_hash_bucket *);

File kernel/futex/syscalls.c:
164:	long __arm64_sys_futex(const struct pt_regs *);
246:	long __arm64_sys_futex_waitv(const struct pt_regs *);
49:	long __arm64_sys_get_robust_list(const struct pt_regs *);
29:	long __arm64_sys_set_robust_list(const struct pt_regs *);
85:	long do_futex(u32 *, int, u32, ktime_t *, u32 *, u32, u32);

File kernel/futex/waitwake.c:
632:	int futex_wait(u32 *, unsigned int, u32, ktime_t *, u32);
524:	int futex_wait_multiple(struct futex_vector *, unsigned int, struct hrtimer_sleeper *);
328:	void futex_wait_queue(struct futex_hash_bucket *, struct futex_q *, struct hrtimer_sleeper *);
577:	int futex_wait_setup(u32 *, u32, unsigned int, struct futex_q *, struct futex_hash_bucket **);
143:	int futex_wake(u32 *, unsigned int, int, u32);
115:	void futex_wake_mark(struct wake_q_head *, struct futex_q *);
238:	int futex_wake_op(u32 *, unsigned int, u32 *, int, int, int);
694:	static long futex_wait_restart(struct restart_block *);

File kernel/groups.c:
161:	long __arm64_sys_getgroups(const struct pt_regs *);
198:	long __arm64_sys_setgroups(const struct pt_regs *);
15:	struct group_info *groups_alloc(int);
29:	void groups_free(struct group_info *);
92:	int groups_search(const struct group_info *, kgid_t);
84:	void groups_sort(struct group_info *);
239:	int in_egroup_p(kgid_t);
227:	int in_group_p(kgid_t);
185:	bool may_setgroups(void);
134:	int set_current_groups(struct group_info *);
118:	void set_groups(struct cred *, struct group_info *);
76:	static int gid_cmp(const void *, const void *);

File kernel/iomem.c:
139:	void *devm_memremap(struct device *, resource_size_t, size_t, unsigned long);
162:	void devm_memunmap(struct device *, void *);
71:	void *memremap(resource_size_t, size_t, unsigned long);
122:	void memunmap(void *);
134:	static int devm_memremap_match(struct device *, void *, void *);
129:	static void devm_memremap_release(struct device *, void *);

File kernel/irq/affinity.c:
497:	unsigned int irq_calc_affinity_vectors(unsigned int, unsigned int, const struct irq_affinity *);
417:	struct irq_affinity_desc *irq_create_affinity_masks(unsigned int, struct irq_affinity *);
247:	static int __irq_build_affinity_masks(unsigned int, unsigned int, unsigned int, cpumask_var_t *, const struct cpumask *, struct cpumask *, struct irq_affinity_desc *);
403:	static void default_calc_sets(struct irq_affinity *, unsigned int);
107:	static int ncpus_cmp_func(const void *, const void *);

File kernel/irq/autoprobe.c:
117:	unsigned int probe_irq_mask(unsigned long);
157:	int probe_irq_off(unsigned long);
30:	unsigned long probe_irq_on(void);

File kernel/irq/chip.c:
1046:	void __irq_set_handler(unsigned int, irq_flow_handler_t, int, const char *);
775:	void handle_edge_irq(struct irq_desc *);
689:	void handle_fasteoi_irq(struct irq_desc *);
739:	void handle_fasteoi_nmi(struct irq_desc *);
630:	void handle_level_irq(struct irq_desc *);
460:	void handle_nested_irq(unsigned int);
955:	void handle_percpu_devid_fasteoi_nmi(struct irq_desc *);
912:	void handle_percpu_devid_irq(struct irq_desc *);
882:	void handle_percpu_irq(struct irq_desc *);
540:	void handle_simple_irq(struct irq_desc *);
575:	void handle_untracked_irq(struct irq_desc *);
288:	int irq_activate(struct irq_desc *);
297:	int irq_activate_and_startup(struct irq_desc *, bool);
1370:	void irq_chip_ack_parent(struct irq_data *);
1548:	int irq_chip_compose_msi_msg(struct irq_data *, struct msi_msg *);
1356:	void irq_chip_disable_parent(struct irq_data *);
1341:	void irq_chip_enable_parent(struct irq_data *);
1414:	void irq_chip_eoi_parent(struct irq_data *);
1323:	int irq_chip_get_parent_state(struct irq_data *, enum irqchip_irq_state, bool *);
1392:	void irq_chip_mask_ack_parent(struct irq_data *);
1381:	void irq_chip_mask_parent(struct irq_data *);
1579:	int irq_chip_pm_get(struct irq_data *);
1598:	int irq_chip_pm_put(struct irq_data *);
1530:	void irq_chip_release_resources_parent(struct irq_data *);
1514:	int irq_chip_request_resources_parent(struct irq_data *);
1465:	int irq_chip_retrigger_hierarchy(struct irq_data *);
1429:	int irq_chip_set_affinity_parent(struct irq_data *, const struct cpumask *, bool);
1301:	int irq_chip_set_parent_state(struct irq_data *, enum irqchip_irq_state, bool);
1447:	int irq_chip_set_type_parent(struct irq_data *, unsigned int);
1480:	int irq_chip_set_vcpu_affinity_parent(struct irq_data *, void *);
1496:	int irq_chip_set_wake_parent(struct irq_data *, unsigned int);
1403:	void irq_chip_unmask_parent(struct irq_data *);
385:	void irq_disable(struct irq_desc *);
334:	void irq_enable(struct irq_desc *);
155:	struct irq_data *irq_get_irq_data(unsigned int);
1086:	void irq_modify_status(unsigned int, unsigned long, unsigned long);
399:	void irq_percpu_disable(struct irq_desc *, unsigned int);
390:	void irq_percpu_enable(struct irq_desc *, unsigned int);
1061:	void irq_set_chained_handler_and_data(unsigned int, irq_flow_handler_t, void *);
41:	int irq_set_chip(unsigned int, const struct irq_chip *);
1078:	void irq_set_chip_and_handler_name(unsigned int, const struct irq_chip *, irq_flow_handler_t, const char *);
142:	int irq_set_chip_data(unsigned int, void *);
87:	int irq_set_handler_data(unsigned int, void *);
65:	int irq_set_irq_type(unsigned int, unsigned int);
130:	int irq_set_msi_desc(unsigned int, struct msi_desc *);
108:	int irq_set_msi_desc_off(unsigned int, unsigned int, struct msi_desc *);
306:	void irq_shutdown(struct irq_desc *);
322:	void irq_shutdown_and_deactivate(struct irq_desc *);
254:	int irq_startup(struct irq_desc *, bool, bool);
420:	void mask_irq(struct irq_desc *);
431:	void unmask_irq(struct irq_desc *);
442:	void unmask_threaded_irq(struct irq_desc *);
973:	static void __irq_do_set_handler(struct irq_desc *, irq_flow_handler_t, int, const char *);
22:	static irqreturn_t bad_chained_irq(int, void *);

File kernel/irq/cpuhotplug.c:
218:	int irq_affinity_online_cpu(unsigned int);
155:	void irq_migrate_all_off_this_cpu(void);

File kernel/irq/devres.c:
178:	int __devm_irq_alloc_descs(struct device *, int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
139:	void devm_free_irq(struct device *, unsigned int, void *);
99:	int devm_request_any_context_irq(struct device *, unsigned int, irq_handler_t, unsigned long, const char *, void *);
51:	int devm_request_threaded_irq(struct device *, unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
154:	static void devm_irq_desc_release(struct device *, void *);
25:	static int devm_irq_match(struct device *, void *, void *);
18:	static void devm_irq_release(struct device *, void *);

File kernel/irq/dummychip.c:
18:	static void ack_bad(struct irq_data *);
29:	static void noop(struct irq_data *);
31:	static unsigned int noop_ret(struct irq_data *);

File kernel/irq/handle.c:
139:	irqreturn_t __handle_irq_event_percpu(struct irq_desc *);
61:	void __irq_wake_thread(struct irq_desc *, struct irqaction *);
33:	void handle_bad_irq(struct irq_desc *);
202:	irqreturn_t handle_irq_event(struct irq_desc *);
189:	irqreturn_t handle_irq_event_percpu(struct irq_desc *);
46:	irqreturn_t no_action(int, void *);
52:	static void warn_no_thread(unsigned int, struct irqaction *);

File kernel/irq/ipi.c:
265:	int __ipi_send_mask(struct irq_desc *, const struct cpumask *);
223:	int __ipi_send_single(struct irq_desc *, unsigned int);
163:	irq_hw_number_t ipi_get_hwirq(unsigned int, unsigned int);
330:	int ipi_send_mask(unsigned int, const struct cpumask *);
309:	int ipi_send_single(unsigned int, unsigned int);
115:	int irq_destroy_ipi(unsigned int, const struct cpumask *);
23:	int irq_reserve_ipi(struct irq_domain *, const struct cpumask *);

File kernel/irq/irqdesc.c:
790:	int __irq_alloc_descs(int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
843:	struct irq_desc *__irq_get_desc_lock(unsigned int, unsigned long *, bool, unsigned int);
866:	void __irq_put_desc_unlock(struct irq_desc *, unsigned long, bool);
525:	int early_irq_init(void);
705:	int generic_handle_domain_irq(struct irq_domain *, unsigned int);
723:	int generic_handle_domain_irq_safe(struct irq_domain *, unsigned int);
746:	int generic_handle_domain_nmi(struct irq_domain *, unsigned int);
664:	int generic_handle_irq(unsigned int);
681:	int generic_handle_irq_safe(unsigned int);
640:	int handle_irq_desc(struct irq_desc *);
760:	void irq_free_descs(unsigned int, unsigned int);
837:	unsigned int irq_get_next_irq(unsigned int);
904:	int irq_get_percpu_devid_partition(unsigned int, struct cpumask *);
382:	void irq_lock_sparse(void);
899:	int irq_set_percpu_devid(unsigned int);
874:	int irq_set_percpu_devid_partition(unsigned int, const struct cpumask *);
354:	struct irq_desc *irq_to_desc(unsigned int);
387:	void irq_unlock_sparse(void);
918:	void kstat_incr_irq_this_cpu(unsigned int);
932:	unsigned int kstat_irqs_cpu(unsigned int, int);
973:	unsigned int kstat_irqs_usr(unsigned int);
245:	static ssize_t actions_show(struct kobject *, struct kobj_attribute *, char *);
392:	static struct irq_desc *alloc_desc(int, int, unsigned int, const struct cpumask *, struct module *);
166:	static ssize_t chip_name_show(struct kobject *, struct kobj_attribute *, char *);
437:	static void delayed_free_desc(struct callback_head *);
183:	static ssize_t hwirq_show(struct kobject *, struct kobj_attribute *, char *);
41:	static void init_irq_default_affinity(void);
28:	static int irq_affinity_setup(char *);
428:	static void irq_kobj_release(struct kobject *);
313:	static int irq_sysfs_init(void);
230:	static ssize_t name_show(struct kobject *, struct kobj_attribute *, char *);
146:	static ssize_t per_cpu_count_show(struct kobject *, struct kobj_attribute *, char *);
198:	static ssize_t type_show(struct kobject *, struct kobj_attribute *, char *);
214:	static ssize_t wakeup_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/irq/irqdomain.c:
139:	struct irq_domain *__irq_domain_add(struct fwnode_handle *, unsigned int, irq_hw_number_t, int, const struct irq_domain_ops *, void *);
73:	struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int, int, const char *, phys_addr_t *);
1451:	int __irq_domain_alloc_irqs(struct irq_domain *, int, unsigned int, int, void *, bool, const struct irq_affinity_desc *);
895:	struct irq_desc *__irq_resolve_mapping(struct irq_domain *, irq_hw_number_t, unsigned int *);
760:	unsigned int irq_create_fwspec_mapping(struct irq_fwspec *);
682:	unsigned int irq_create_mapping_affinity(struct irq_domain *, irq_hw_number_t, const struct irq_affinity_desc *);
851:	unsigned int irq_create_of_mapping(struct of_phandle_args *);
866:	void irq_dispose_mapping(unsigned int);
1785:	int irq_domain_activate_irq(struct irq_data *, bool);
368:	struct irq_domain *irq_domain_add_legacy(struct device_node *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
1044:	int irq_domain_alloc_descs(int, unsigned int, irq_hw_number_t, int, const struct irq_affinity_desc *);
1417:	int irq_domain_alloc_irqs_hierarchy(struct irq_domain *, unsigned int, unsigned int, void *);
1716:	int irq_domain_alloc_irqs_parent(struct irq_domain *, unsigned int, unsigned int, void *);
562:	int irq_domain_associate(struct irq_domain *, unsigned int, irq_hw_number_t);
612:	void irq_domain_associate_many(struct irq_domain *, unsigned int, irq_hw_number_t, int);
446:	bool irq_domain_check_msi_remap(void);
1095:	struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *, unsigned int, unsigned int, struct fwnode_handle *, const struct irq_domain_ops *, void *);
380:	struct irq_domain *irq_domain_create_legacy(struct fwnode_handle *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
325:	struct irq_domain *irq_domain_create_simple(struct fwnode_handle *, unsigned int, unsigned int, const struct irq_domain_ops *, void *);
1804:	void irq_domain_deactivate_irq(struct irq_data *);
1209:	int irq_domain_disconnect_hierarchy(struct irq_domain *, unsigned int);
113:	void irq_domain_free_fwnode(struct fwnode_handle *);
1690:	void irq_domain_free_irqs(unsigned int, unsigned int);
1369:	void irq_domain_free_irqs_common(struct irq_domain *, unsigned int, unsigned int);
1734:	void irq_domain_free_irqs_parent(struct irq_domain *, unsigned int, unsigned int);
1390:	void irq_domain_free_irqs_top(struct irq_domain *, unsigned int, unsigned int);
1301:	struct irq_data *irq_domain_get_irq_data(struct irq_domain *, unsigned int);
1824:	bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *);
1624:	int irq_domain_pop_irq(struct irq_domain *, int);
1542:	int irq_domain_push_irq(struct irq_domain *, int, void *);
248:	void irq_domain_remove(struct irq_domain *);
1071:	void irq_domain_reset_irq_data(struct irq_data *);
1323:	int irq_domain_set_hwirq_and_chip(struct irq_domain *, unsigned int, irq_hw_number_t, const struct irq_chip *, void *);
1352:	void irq_domain_set_info(struct irq_domain *, unsigned int, irq_hw_number_t, const struct irq_chip *, void *, irq_flow_handler_t, void *, const char *);
1010:	int irq_domain_translate_onecell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1031:	int irq_domain_translate_twocell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
275:	void irq_domain_update_bus_token(struct irq_domain *, enum irq_domain_bus_token);
944:	int irq_domain_xlate_onecell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
985:	int irq_domain_xlate_onetwocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
963:	int irq_domain_xlate_twocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, irq_hw_number_t *, unsigned int *);
402:	struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *, enum irq_domain_bus_token);
490:	struct irq_domain *irq_get_default_host(void);
473:	void irq_set_default_host(struct irq_domain *);
747:	void of_phandle_args_to_fwspec(struct device_node *, const u32 *, unsigned int, struct irq_fwspec *);
1756:	static int __irq_domain_activate_irq(struct irq_data *, bool);
1744:	static void __irq_domain_deactivate_irq(struct irq_data *);
45:	static const char *irqchip_fwnode_get_name(const struct fwnode_handle *);

File kernel/irq/manage.c:
681:	void __disable_irq(struct irq_desc *);
776:	void __enable_irq(struct irq_desc *);
496:	int __irq_apply_affinity_hint(unsigned int, const struct cpumask *, bool);
2789:	int __irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
946:	int __irq_set_trigger(struct irq_desc *, unsigned long);
2592:	int __request_percpu_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
928:	int can_request_irq(unsigned int, unsigned long);
752:	bool disable_hardirq(unsigned int);
728:	void disable_irq(unsigned int);
710:	void disable_irq_nosync(unsigned int);
771:	void disable_nmi_nosync(unsigned int);
2430:	void disable_percpu_irq(unsigned int);
2444:	void disable_percpu_nmi(unsigned int);
815:	void enable_irq(unsigned int);
841:	void enable_nmi(unsigned int);
2366:	void enable_percpu_irq(unsigned int, unsigned int);
2400:	void enable_percpu_nmi(unsigned int, unsigned int);
2018:	const void *free_irq(unsigned int, void *);
2070:	const void *free_nmi(unsigned int, void *);
2522:	void free_percpu_irq(unsigned int, void *);
2535:	void free_percpu_nmi(unsigned int, void *);
159:	int irq_can_set_affinity(unsigned int);
171:	bool irq_can_set_affinity_usr(unsigned int);
2922:	bool irq_check_status_bit(unsigned int, unsigned int);
212:	int irq_do_set_affinity(struct irq_data *, const struct cpumask *, bool);
490:	int irq_force_affinity(unsigned int, const struct cpumask *);
2826:	int irq_get_irqchip_state(unsigned int, enum irqchip_irq_state, bool *);
2904:	bool irq_has_action(unsigned int);
2412:	bool irq_percpu_is_enabled(unsigned int);
473:	int irq_set_affinity(unsigned int, const struct cpumask *);
347:	int irq_set_affinity_locked(struct irq_data *, const struct cpumask *, bool);
549:	int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
879:	int irq_set_irq_wake(unsigned int, unsigned int);
2859:	int irq_set_irqchip_state(unsigned int, enum irqchip_irq_state, bool);
1002:	int irq_set_parent(int, int);
188:	void irq_set_thread_affinity(struct irq_desc *);
650:	int irq_set_vcpu_affinity(unsigned int, void *);
589:	int irq_setup_affinity(struct irq_desc *);
395:	int irq_update_affinity_desc(unsigned int, struct irq_affinity_desc *);
1337:	void irq_wake_thread(unsigned int, void *);
2726:	int prepare_percpu_nmi(unsigned int);
2502:	void remove_percpu_irq(unsigned int, struct irqaction *);
2246:	int request_any_context_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2296:	int request_nmi(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2658:	int request_percpu_nmi(unsigned int, irq_handler_t, const char *, void *);
2138:	int request_threaded_irq(unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
2555:	int setup_percpu_irq(unsigned int, struct irqaction *);
98:	bool synchronize_hardirq(unsigned int);
126:	void synchronize_irq(unsigned int);
2769:	void teardown_percpu_nmi(unsigned int);
2044:	static const void *__cleanup_nmi(unsigned int, struct irq_desc *);
2452:	static struct irqaction *__free_percpu_irq(unsigned int, void *);
1497:	static int __setup_irq(unsigned int, struct irq_desc *, struct irqaction *);
38:	static void __synchronize_hardirq(struct irq_desc *, bool);
512:	static void irq_affinity_notify(struct work_struct *);
1023:	static irqreturn_t irq_default_primary_handler(int, void *);
1074:	static void irq_finalize_oneshot(struct irq_desc *, struct irqaction *);
1038:	static irqreturn_t irq_forced_secondary_handler(int, void *);
1177:	static irqreturn_t irq_forced_thread_fn(struct irq_desc *, struct irqaction *);
1032:	static irqreturn_t irq_nested_primary_handler(int, void *);
1286:	static int irq_thread(void *);
1219:	static void irq_thread_dtor(struct callback_head *);
1200:	static irqreturn_t irq_thread_fn(struct irq_desc *, struct irqaction *);
30:	static int setup_forced_irqthreads(char *);
1272:	static void wake_up_and_wait_for_irq_thread_ready(struct irq_desc *, struct irqaction *);

File kernel/irq/msi.c:
256:	void __get_cached_msi_msg(struct msi_desc *, struct msi_msg *);
261:	void get_cached_msi_msg(unsigned int, struct msi_msg *);
945:	bool msi_create_device_irq_domain(struct device *, unsigned int, const struct msi_domain_template *, unsigned int, void *, void *);
850:	struct irq_domain *msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
1448:	struct msi_map msi_domain_alloc_irq_at(struct device *, unsigned int, unsigned int, const struct irq_affinity_desc *, union msi_instance_cookie *);
1411:	int msi_domain_alloc_irqs_all_locked(struct device *, unsigned int, int);
1386:	int msi_domain_alloc_irqs_range(struct device *, unsigned int, unsigned int, unsigned int);
1363:	int msi_domain_alloc_irqs_range_locked(struct device *, unsigned int, unsigned int, unsigned int);
376:	struct msi_desc *msi_domain_first_desc(struct device *, unsigned int, enum msi_desc_filter);
1613:	void msi_domain_free_irqs_all(struct device *, unsigned int);
1600:	void msi_domain_free_irqs_all_locked(struct device *, unsigned int);
1581:	void msi_domain_free_irqs_range(struct device *, unsigned int, unsigned int, unsigned int);
1561:	void msi_domain_free_irqs_range_locked(struct device *, unsigned int, unsigned int, unsigned int);
209:	void msi_domain_free_msi_descs_range(struct device *, unsigned int, unsigned int, unsigned int);
431:	unsigned int msi_domain_get_virq(struct device *, unsigned int, unsigned int);
132:	int msi_domain_insert_msi_desc(struct device *, unsigned int, struct msi_desc *);
1073:	int msi_domain_populate_irqs(struct irq_domain *, struct device *, int, int, msi_alloc_info_t *);
1064:	int msi_domain_prepare_irqs(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
647:	int msi_domain_set_affinity(struct irq_data *, const struct cpumask *, bool);
1626:	struct msi_domain_info *msi_get_domain_info(struct irq_domain *);
332:	void msi_lock_descs(struct device *);
1047:	bool msi_match_device_irq_domain(struct device *, unsigned int, enum irq_domain_bus_token);
405:	struct msi_desc *msi_next_desc(struct device *, unsigned int, enum msi_desc_filter);
884:	bool msi_parent_init_dev_msi_info(struct device *, struct irq_domain *, struct irq_domain *, struct msi_domain_info *);
1014:	void msi_remove_device_irq_domain(struct device *, unsigned int);
292:	int msi_setup_device_data(struct device *);
342:	void msi_unlock_descs(struct device *);
808:	static struct irq_domain *__msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, unsigned int, struct irq_domain *);
1229:	static int __msi_domain_alloc_irqs(struct device *, struct irq_domain *, struct msi_ctrl *);
269:	static void msi_device_data_release(struct device *, void *);
664:	static int msi_domain_activate(struct irq_domain *, struct irq_data *, bool);
228:	static int msi_domain_add_simple_msi_descs(struct device *, struct msi_ctrl *);
684:	static int msi_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1340:	static int msi_domain_alloc_locked(struct device *, struct msi_ctrl *);
675:	static void msi_domain_deactivate(struct irq_domain *, struct irq_data *);
716:	static void msi_domain_free(struct irq_domain *, unsigned int, unsigned int);
180:	static void msi_domain_free_descs(struct device *, struct msi_ctrl *);
1524:	static void msi_domain_free_locked(struct device *, struct msi_ctrl *);
736:	static irq_hw_number_t msi_domain_ops_get_hwirq(struct msi_domain_info *, msi_alloc_info_t *);
755:	static int msi_domain_ops_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
742:	static int msi_domain_ops_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
749:	static void msi_domain_ops_set_desc(msi_alloc_info_t *, struct msi_desc *);
84:	static int msi_insert_desc(struct device *, struct msi_desc *, unsigned int, unsigned int);
485:	static ssize_t msi_mode_show(struct device *, struct device_attribute *, char *);

File kernel/irq/proc.c:
451:	int arch_show_interrupts(struct seq_file *, int);
430:	void init_irq_proc(void);
319:	void register_handler_proc(unsigned int, struct irqaction *);
338:	void register_irq_proc(unsigned int, struct irq_desc *);
460:	int show_interrupts(struct seq_file *, void *);
417:	void unregister_handler_proc(unsigned int, struct irqaction *);
393:	void unregister_irq_proc(unsigned int, struct irq_desc *);
266:	static int default_affinity_open(struct inode *, struct file *);
229:	static int default_affinity_show(struct seq_file *, void *);
235:	static ssize_t default_affinity_write(struct file *, const char *, size_t, loff_t *);
83:	static int irq_affinity_hint_proc_show(struct seq_file *, void *);
196:	static int irq_affinity_list_proc_open(struct inode *, struct file *);
109:	static int irq_affinity_list_proc_show(struct seq_file *, void *);
185:	static ssize_t irq_affinity_list_proc_write(struct file *, const char *, size_t, loff_t *);
191:	static int irq_affinity_proc_open(struct inode *, struct file *);
104:	static int irq_affinity_proc_show(struct seq_file *, void *);
179:	static ssize_t irq_affinity_proc_write(struct file *, const char *, size_t, loff_t *);
223:	static int irq_effective_aff_list_proc_show(struct seq_file *, void *);
218:	static int irq_effective_aff_proc_show(struct seq_file *, void *);
279:	static int irq_node_proc_show(struct seq_file *, void *);
288:	static int irq_spurious_proc_show(struct seq_file *, void *);
137:	static ssize_t write_irq_affinity(int, struct file *, const char *, size_t, loff_t *);

File kernel/irq/resend.c:
106:	int check_irq_resend(struct irq_desc *, bool);
30:	static void resend_irqs(struct tasklet_struct *);

File kernel/irq/spurious.c:
36:	bool irq_wait_for_poll(struct irq_desc *);
436:	int noirqdebug_setup(char *);
272:	void note_interrupt(struct irq_desc *, irqreturn_t);
192:	static void __report_bad_irq(struct irq_desc *, irqreturn_t);
448:	static int irqfixup_setup(char *);
464:	static int irqpoll_setup(char *);
118:	static int misrouted_irq(int);
144:	static void poll_spurious_irqs(struct timer_list *);
62:	static int try_one_irq(struct irq_desc *, bool);

File kernel/irq_work.c:
70:	void arch_irq_work_raise(void);
174:	bool irq_work_needs_cpu(void);
106:	bool irq_work_queue(struct irq_work *);
127:	bool irq_work_queue_on(struct irq_work *, int);
249:	void irq_work_run(void);
191:	void irq_work_single(void *);
276:	void irq_work_sync(struct irq_work *);
259:	void irq_work_tick(void);
311:	static int irq_work_init_threads(void);

File kernel/jump_label.c:
321:	void __static_key_deferred_flush(void *, struct delayed_work *);
308:	void __static_key_slow_dec_deferred(struct static_key *, struct delayed_work *, unsigned long);
487:	void jump_label_init(void);
25:	void jump_label_lock(void);
328:	void jump_label_rate_limit(struct static_key_deferred *, unsigned long);
790:	int jump_label_text_reserved(void *, void *);
30:	void jump_label_unlock(void);
287:	void jump_label_update_timeout(struct work_struct *);
104:	int static_key_count(struct static_key *);
240:	void static_key_disable(struct static_key *);
223:	void static_key_disable_cpuslocked(struct static_key *);
215:	void static_key_enable(struct static_key *);
192:	void static_key_enable_cpuslocked(struct static_key *);
127:	bool static_key_fast_inc_not_disabled(struct static_key *);
295:	void static_key_slow_dec(struct static_key *);
302:	void static_key_slow_dec_cpuslocked(struct static_key *);
181:	bool static_key_slow_inc(struct static_key *);
148:	bool static_key_slow_inc_cpuslocked(struct static_key *);
267:	static void __static_key_slow_dec_cpuslocked(struct static_key *);
35:	static int jump_label_cmp(const void *, const void *);
63:	static void jump_label_swap(void *, void *, int);
805:	static void jump_label_update(struct static_key *);

File kernel/kallsyms.c:
663:	int arch_get_kallsym(unsigned int, unsigned long *, char *, char *);
932:	int bpf_iter_ksym(struct bpf_iter_meta *, struct kallsym_iter *);
453:	const char *kallsyms_lookup(unsigned long, unsigned long *, unsigned long *, char **, char *);
271:	unsigned long kallsyms_lookup_name(const char *);
391:	int kallsyms_lookup_size_offset(unsigned long, unsigned long *, unsigned long *);
310:	int kallsyms_on_each_match_symbol(int (*)(void *, unsigned long), const char *, void *);
291:	int kallsyms_on_each_symbol(int (*)(void *, const char *, struct module *, unsigned long), void *);
983:	bool kallsyms_show_value(const struct cred *);
149:	unsigned long kallsyms_sym_address(int);
488:	int lookup_symbol_attrs(unsigned long, unsigned long *, unsigned long *, char *, char *);
462:	int lookup_symbol_name(unsigned long, char *);
622:	int sprint_backtrace(char *, unsigned long);
642:	int sprint_backtrace_build_id(char *, unsigned long);
568:	int sprint_symbol(char *, unsigned long);
585:	int sprint_symbol_build_id(char *, unsigned long);
602:	int sprint_symbol_no_offset(char *, unsigned long);
517:	static int __sprint_symbol(char *, unsigned long, int, int, int);
918:	static int bpf_iter_ksym_init(void *, struct bpf_iter_aux_info *);
898:	static int bpf_iter_ksym_seq_show(struct seq_file *, void *);
903:	static void bpf_iter_ksym_seq_stop(struct seq_file *, void *);
955:	static int bpf_ksym_iter_register(void);
328:	static unsigned long get_symbol_pos(unsigned long, unsigned long *, unsigned long *);
1048:	static int kallsyms_init(void);
404:	static const char *kallsyms_lookup_buildid(unsigned long, unsigned long *, unsigned long *, char **, const unsigned char **, char *);
214:	static int kallsyms_lookup_names(const char *, unsigned int *, unsigned int *);
1000:	static int kallsyms_open(struct inode *, struct file *);
820:	static void *s_next(struct seq_file *, void *, loff_t *);
840:	static int s_show(struct seq_file *, void *);
829:	static void *s_start(struct seq_file *, loff_t *);
836:	static void s_stop(struct seq_file *, void *);
804:	static int update_iter(struct kallsym_iter *, loff_t);

File kernel/ksysfs.c:
47:	static ssize_t cpu_byteorder_show(struct kobject *, struct kobj_attribute *, char *);
163:	static ssize_t fscaps_show(struct kobject *, struct kobj_attribute *, char *);
261:	static int ksysfs_init(void);
213:	static ssize_t notes_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
77:	static ssize_t profiling_show(struct kobject *, struct kobj_attribute *, char *);
82:	static ssize_t profiling_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
172:	static ssize_t rcu_expedited_show(struct kobject *, struct kobj_attribute *, char *);
177:	static ssize_t rcu_expedited_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
189:	static ssize_t rcu_normal_show(struct kobject *, struct kobj_attribute *, char *);
194:	static ssize_t rcu_normal_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
39:	static ssize_t uevent_seqnum_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/kthread.c:
756:	void __kthread_init_worker(struct kthread_worker *, const char *, struct lock_class_key *);
161:	bool __kthread_should_park(struct task_struct *);
129:	void free_kthread_struct(struct task_struct *);
98:	void get_kthread_comm(char *, size_t, struct task_struct *);
1488:	void kthread_associate_blkcg(struct cgroup_subsys_state *);
554:	void kthread_bind(struct task_struct *, unsigned int);
540:	void kthread_bind_mask(struct task_struct *, const struct cpumask *);
1514:	struct cgroup_subsys_state *kthread_blkcg(void);
1353:	bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *);
1338:	bool kthread_cancel_work_sync(struct kthread_work *);
321:	void kthread_complete_and_exit(struct completion *, long);
570:	struct task_struct *kthread_create_on_cpu(int (*)(void *), void *, unsigned int, const char *);
503:	struct task_struct *kthread_create_on_node(int (*)(void *), void *, int, const char *, ...);
883:	struct kthread_worker *kthread_create_worker(unsigned int, const char *, ...);
932:	struct kthread_worker *kthread_create_worker_on_cpu(int, unsigned int, const char *, ...);
232:	void *kthread_data(struct task_struct *);
1019:	void kthread_delayed_work_timer_fn(struct timer_list *);
1386:	void kthread_destroy_worker(struct kthread_worker *);
302:	void kthread_exit(long);
1129:	void kthread_flush_work(struct kthread_work *);
1366:	void kthread_flush_worker(struct kthread_worker *);
193:	bool kthread_freezable_should_stop(bool *);
215:	void *kthread_func(struct task_struct *);
604:	bool kthread_is_per_cpu(struct task_struct *);
1238:	bool kthread_mod_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
652:	int kthread_park(struct task_struct *);
286:	void kthread_parkme(void);
247:	void *kthread_probe_data(struct task_struct *);
1091:	bool kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
995:	bool kthread_queue_work(struct kthread_worker *, struct kthread_work *);
587:	void kthread_set_per_cpu(struct task_struct *, int);
178:	bool kthread_should_park(void);
155:	bool kthread_should_stop(void);
696:	int kthread_stop(struct task_struct *);
621:	void kthread_unpark(struct task_struct *);
1450:	void kthread_unuse_mm(struct mm_struct *);
1405:	void kthread_use_mm(struct mm_struct *);
783:	int kthread_worker_fn(void *);
718:	int kthreadd(void *);
110:	bool set_kthread_struct(struct task_struct *);
382:	int tsk_fork_get_node(struct task_struct *);
1285:	static bool __kthread_cancel_work_sync(struct kthread_work *, bool);
414:	static struct task_struct *__kthread_create_on_node(int (*)(void *), void *, int, const char *, va_list);
257:	static void __kthread_parkme(struct kthread *);
1047:	static void __kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
330:	static int kthread(void *);
1116:	static void kthread_flush_work_fn(struct kthread_work *);

File kernel/locking/mutex.c:
46:	void __mutex_init(struct mutex *, const char *, struct lock_class_key *);
1136:	int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *);
89:	bool mutex_is_locked(struct mutex *);
281:	void mutex_lock(struct mutex *);
977:	int mutex_lock_interruptible(struct mutex *);
1022:	void mutex_lock_io(struct mutex *);
1001:	int mutex_lock_killable(struct mutex *);
1081:	int mutex_trylock(struct mutex *);
537:	void mutex_unlock(struct mutex *);
1097:	int ww_mutex_lock(struct ww_mutex *, struct ww_acquire_ctx *);
1112:	int ww_mutex_lock_interruptible(struct ww_mutex *, struct ww_acquire_ctx *);
770:	int ww_mutex_trylock(struct ww_mutex *, struct ww_acquire_ctx *);
558:	void ww_mutex_unlock(struct ww_mutex *);
744:	static int __mutex_lock(struct mutex *, unsigned int, unsigned int, struct lockdep_map *, unsigned long);
1045:	static int __mutex_lock_interruptible_slowpath(struct mutex *);
1039:	static int __mutex_lock_killable_slowpath(struct mutex *);
1033:	static void __mutex_lock_slowpath(struct mutex *);
901:	static void __mutex_unlock_slowpath(struct mutex *, unsigned long);
751:	static int __ww_mutex_lock(struct mutex *, unsigned int, unsigned int, unsigned long, struct ww_acquire_ctx *);
1058:	static int __ww_mutex_lock_interruptible_slowpath(struct ww_mutex *, struct ww_acquire_ctx *);
1051:	static int __ww_mutex_lock_slowpath(struct ww_mutex *, struct ww_acquire_ctx *);
352:	static bool mutex_spin_on_owner(struct mutex *, struct task_struct *, struct ww_acquire_ctx *, struct mutex_waiter *);

File kernel/locking/osq_lock.c:
90:	bool osq_lock(struct optimistic_spin_queue *);
207:	void osq_unlock(struct optimistic_spin_queue *);
42:	static struct optimistic_spin_node *osq_wait_next(struct optimistic_spin_queue *, struct optimistic_spin_node *, struct optimistic_spin_node *);

File kernel/locking/percpu-rwsem.c:
167:	bool __percpu_down_read(struct percpu_rw_semaphore *, bool);
14:	int __percpu_init_rwsem(struct percpu_rw_semaphore *, const char *, struct lock_class_key *);
224:	void percpu_down_write(struct percpu_rw_semaphore *);
33:	void percpu_free_rwsem(struct percpu_rw_semaphore *);
195:	bool percpu_is_read_locked(struct percpu_rw_semaphore *);
254:	void percpu_up_write(struct percpu_rw_semaphore *);
48:	static bool __percpu_down_read_trylock(struct percpu_rw_semaphore *);
141:	static void percpu_rwsem_wait(struct percpu_rw_semaphore *, bool);
119:	static int percpu_rwsem_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File kernel/locking/qrwlock.c:
21:	void queued_read_lock_slowpath(struct qrwlock *);
66:	void queued_write_lock_slowpath(struct qrwlock *);

File kernel/locking/qspinlock.c:
316:	void queued_spin_lock_slowpath(struct qspinlock *, u32);

File kernel/locking/rtmutex.c:
1231:	static void mark_wakeup_next_waiter(struct rt_wake_q_head *, struct rt_mutex_base *);
1456:	static void remove_waiter(struct rt_mutex_base *, struct rt_mutex_waiter *);
613:	static int rt_mutex_adjust_prio_chain(struct task_struct *, enum rtmutex_chainwalk, struct rt_mutex_base *, struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
1674:	static int rt_mutex_slowlock(struct rt_mutex_base *, struct ww_acquire_ctx *, unsigned int);
1520:	static int rt_mutex_slowlock_block(struct rt_mutex_base *, struct ww_acquire_ctx *, unsigned int, struct hrtimer_sleeper *, struct rt_mutex_waiter *);
1291:	static int rt_mutex_slowtrylock(struct rt_mutex_base *);
1328:	static void rt_mutex_slowunlock(struct rt_mutex_base *);
1124:	static int task_blocks_on_rt_mutex(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *, struct ww_acquire_ctx *, enum rtmutex_chainwalk);
1008:	static int try_to_take_rt_mutex(struct rt_mutex_base *, struct task_struct *, struct rt_mutex_waiter *);

File kernel/locking/rtmutex_api.c:
153:	int __rt_mutex_futex_trylock(struct rt_mutex_base *);
165:	bool __rt_mutex_futex_unlock(struct rt_mutex_base *, struct rt_wake_q_head *);
213:	void __rt_mutex_init(struct rt_mutex *, const char *, struct lock_class_key *);
292:	int __rt_mutex_start_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
453:	void rt_mutex_adjust_pi(struct task_struct *);
37:	void rt_mutex_base_init(struct rt_mutex_base *);
411:	bool rt_mutex_cleanup_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *);
148:	int rt_mutex_futex_trylock(struct rt_mutex_base *);
188:	void rt_mutex_futex_unlock(struct rt_mutex_base *);
236:	void rt_mutex_init_proxy_locked(struct rt_mutex_base *, struct task_struct *);
69:	void rt_mutex_lock(struct rt_mutex *);
85:	int rt_mutex_lock_interruptible(struct rt_mutex *);
100:	int rt_mutex_lock_killable(struct rt_mutex *);
479:	void rt_mutex_postunlock(struct rt_wake_q_head *);
267:	void rt_mutex_proxy_unlock(struct rt_mutex_base *);
339:	int rt_mutex_start_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
118:	int rt_mutex_trylock(struct rt_mutex *);
138:	void rt_mutex_unlock(struct rt_mutex *);
371:	int rt_mutex_wait_proxy_lock(struct rt_mutex_base *, struct hrtimer_sleeper *, struct rt_mutex_waiter *);

File kernel/locking/rwsem.c:
313:	void __init_rwsem(struct rw_semaphore *, const char *, struct lock_class_key *);
1506:	void down_read(struct rw_semaphore *);
1515:	int down_read_interruptible(struct rw_semaphore *);
1529:	int down_read_killable(struct rw_semaphore *);
1546:	int down_read_trylock(struct rw_semaphore *);
1559:	void down_write(struct rw_semaphore *);
1570:	int down_write_killable(struct rw_semaphore *);
1588:	int down_write_trylock(struct rw_semaphore *);
1622:	void downgrade_write(struct rw_semaphore *);
1602:	void up_read(struct rw_semaphore *);
1612:	void up_write(struct rw_semaphore *);
1255:	static int __down_read_common(struct rw_semaphore *, int);
1116:	static struct rw_semaphore *rwsem_down_write_slowpath(struct rw_semaphore *, int);
414:	static void rwsem_mark_wake(struct rw_semaphore *, enum rwsem_wake_type, struct wake_q_head *);
753:	static enum owner_state rwsem_spin_on_owner(struct rw_semaphore *);

File kernel/locking/semaphore.c:
54:	void down(struct semaphore *);
77:	int down_interruptible(struct semaphore *);
104:	int down_killable(struct semaphore *);
159:	int down_timeout(struct semaphore *, long);
134:	int down_trylock(struct semaphore *);
183:	void up(struct semaphore *);
252:	static void __down(struct semaphore *);
257:	static int __down_interruptible(struct semaphore *);
262:	static int __down_killable(struct semaphore *);
267:	static int __down_timeout(struct semaphore *, long);
272:	static void __up(struct semaphore *);

File kernel/locking/spinlock.c:
226:	void _raw_read_lock(rwlock_t *);
250:	void _raw_read_lock_bh(rwlock_t *);
242:	void _raw_read_lock_irq(rwlock_t *);
234:	unsigned long _raw_read_lock_irqsave(rwlock_t *);
218:	int _raw_read_trylock(rwlock_t *);
258:	void _raw_read_unlock(rwlock_t *);
282:	void _raw_read_unlock_bh(rwlock_t *);
274:	void _raw_read_unlock_irq(rwlock_t *);
266:	void _raw_read_unlock_irqrestore(rwlock_t *, unsigned long);
152:	void _raw_spin_lock(raw_spinlock_t *);
176:	void _raw_spin_lock_bh(raw_spinlock_t *);
168:	void _raw_spin_lock_irq(raw_spinlock_t *);
160:	unsigned long _raw_spin_lock_irqsave(raw_spinlock_t *);
136:	int _raw_spin_trylock(raw_spinlock_t *);
144:	int _raw_spin_trylock_bh(raw_spinlock_t *);
184:	void _raw_spin_unlock(raw_spinlock_t *);
208:	void _raw_spin_unlock_bh(raw_spinlock_t *);
200:	void _raw_spin_unlock_irq(raw_spinlock_t *);
192:	void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
298:	void _raw_write_lock(rwlock_t *);
332:	void _raw_write_lock_bh(rwlock_t *);
324:	void _raw_write_lock_irq(rwlock_t *);
316:	unsigned long _raw_write_lock_irqsave(rwlock_t *);
308:	void _raw_write_lock_nested(rwlock_t *, int);
290:	int _raw_write_trylock(rwlock_t *);
340:	void _raw_write_unlock(rwlock_t *);
364:	void _raw_write_unlock_bh(rwlock_t *);
356:	void _raw_write_unlock_irq(rwlock_t *);
348:	void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
407:	int in_lock_functions(unsigned long);

File kernel/locking/ww_mutex.h:
355:	static void __ww_mutex_check_waiters(struct mutex *, struct ww_acquire_ctx *);

File kernel/notifier.c:
219:	int atomic_notifier_call_chain(struct atomic_notifier_head *, unsigned long, void *);
241:	bool atomic_notifier_call_chain_is_empty(struct atomic_notifier_head *);
143:	int atomic_notifier_chain_register(struct atomic_notifier_head *, struct notifier_block *);
166:	int atomic_notifier_chain_register_unique_prio(struct atomic_notifier_head *, struct notifier_block *);
188:	int atomic_notifier_chain_unregister(struct atomic_notifier_head *, struct notifier_block *);
370:	int blocking_notifier_call_chain(struct blocking_notifier_head *, unsigned long, void *);
335:	int blocking_notifier_call_chain_robust(struct blocking_notifier_head *, unsigned long, unsigned long, void *);
281:	int blocking_notifier_chain_register(struct blocking_notifier_head *, struct notifier_block *);
298:	int blocking_notifier_chain_register_unique_prio(struct blocking_notifier_head *, struct notifier_block *);
315:	int blocking_notifier_chain_unregister(struct blocking_notifier_head *, struct notifier_block *);
580:	int notify_die(enum die_val, const char *, struct pt_regs *, long, int, int);
452:	int raw_notifier_call_chain(struct raw_notifier_head *, unsigned long, void *);
428:	int raw_notifier_call_chain_robust(struct raw_notifier_head *, unsigned long, unsigned long, void *);
404:	int raw_notifier_chain_register(struct raw_notifier_head *, struct notifier_block *);
421:	int raw_notifier_chain_unregister(struct raw_notifier_head *, struct notifier_block *);
597:	int register_die_notifier(struct notifier_block *);
567:	void srcu_init_notifier_head(struct srcu_notifier_head *);
542:	int srcu_notifier_call_chain(struct srcu_notifier_head *, unsigned long, void *);
475:	int srcu_notifier_chain_register(struct srcu_notifier_head *, struct notifier_block *);
505:	int srcu_notifier_chain_unregister(struct srcu_notifier_head *, struct notifier_block *);
603:	int unregister_die_notifier(struct notifier_block *);
22:	static int notifier_chain_register(struct notifier_block **, struct notifier_block *, bool);

File kernel/nsproxy.c:
546:	long __arm64_sys_setns(const struct pt_regs *);
151:	int copy_namespaces(unsigned long, struct task_struct *);
259:	int exec_task_namespaces(void);
254:	void exit_task_namespaces(struct task_struct *);
190:	void free_nsproxy(struct nsproxy *);
588:	int nsproxy_cache_init(void);
239:	void switch_task_namespaces(struct task_struct *, struct nsproxy *);
213:	int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **, struct cred *, struct fs_struct *);
67:	static struct nsproxy *create_new_namespaces(unsigned long, struct task_struct *, struct user_namespace *, struct fs_struct *);

File kernel/panic.c:
743:	void __stack_chk_fail(void);
643:	void __warn(const char *, int, void *, unsigned int, struct pt_regs *, struct warn_args *);
699:	void __warn_printk(const char *, ...);
525:	void add_taint(unsigned int, enum lockdep_ok);
233:	void check_panic_on_warn(const char *);
164:	void crash_smp_send_stop(void);
512:	unsigned long get_taint(void);
192:	void nmi_panic(struct pt_regs *, const char *);
153:	void nmi_panic_self_stop(struct pt_regs *);
611:	void oops_enter(void);
631:	void oops_exit(void);
592:	bool oops_may_print(void);
254:	void panic(const char *, ...);
143:	void panic_smp_self_stop(void);
483:	const char *print_tainted(void);
506:	int test_taint(unsigned int);
553:	static void do_oops_enter_exit(void);
104:	static int kernel_panic_sysctls_init(void);
123:	static int kernel_panic_sysfs_init(void);
131:	static long no_blink(int);
760:	static int oops_setup(char *);
770:	static int panic_on_taint_setup(char *);
206:	static void panic_print_sys_info(bool);
726:	static int register_warn_debugfs(void);
115:	static ssize_t warn_count_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/params.c:
855:	ssize_t __modver_version_show(struct module_attribute *, struct module_kobject *, char *);
752:	void destroy_params(const struct kernel_param *, unsigned int);
602:	void kernel_param_lock(struct module *);
607:	void kernel_param_unlock(struct module *);
293:	void param_free_charp(void *);
317:	int param_get_bool(char *, const struct kernel_param *);
236:	int param_get_byte(char *, const struct kernel_param *);
287:	int param_get_charp(char *, const struct kernel_param *);
244:	int param_get_hexint(char *, const struct kernel_param *);
239:	int param_get_int(char *, const struct kernel_param *);
377:	int param_get_invbool(char *, const struct kernel_param *);
241:	int param_get_long(char *, const struct kernel_param *);
237:	int param_get_short(char *, const struct kernel_param *);
524:	int param_get_string(char *, const struct kernel_param *);
240:	int param_get_uint(char *, const struct kernel_param *);
243:	int param_get_ullong(char *, const struct kernel_param *);
242:	int param_get_ulong(char *, const struct kernel_param *);
238:	int param_get_ushort(char *, const struct kernel_param *);
389:	int param_set_bint(const char *, const struct kernel_param *);
307:	int param_set_bool(const char *, const struct kernel_param *);
331:	int param_set_bool_enable_only(const char *, const struct kernel_param *);
236:	int param_set_byte(const char *, const struct kernel_param *);
264:	int param_set_charp(const char *, const struct kernel_param *);
510:	int param_set_copystring(const char *, const struct kernel_param *);
244:	int param_set_hexint(const char *, const struct kernel_param *);
239:	int param_set_int(const char *, const struct kernel_param *);
363:	int param_set_invbool(const char *, const struct kernel_param *);
241:	int param_set_long(const char *, const struct kernel_param *);
237:	int param_set_short(const char *, const struct kernel_param *);
240:	int param_set_uint(const char *, const struct kernel_param *);
246:	int param_set_uint_minmax(const char *, const struct kernel_param *, unsigned int, unsigned int);
243:	int param_set_ullong(const char *, const struct kernel_param *);
242:	int param_set_ulong(const char *, const struct kernel_param *);
238:	int param_set_ushort(const char *, const struct kernel_param *);
95:	bool parameq(const char *, const char *);
84:	bool parameqn(const char *, const char *, size_t);
161:	char *parse_args(const char *, char *, const struct kernel_param *, unsigned int, s16, s16, void *, int (*)(char *, char *, const char *, void *));
625:	static int add_sysfs_param(struct module_kobject *, const struct kernel_param *, const char *);
796:	static void kernel_add_sysfs_param(const char *, const struct kernel_param *, unsigned int);
761:	static struct module_kobject *locate_module_kobject(const char *);
886:	static ssize_t module_attr_show(struct kobject *, struct attribute *, char *);
905:	static ssize_t module_attr_store(struct kobject *, struct attribute *, const char *, size_t);
944:	static void module_kobj_release(struct kobject *);
493:	static void param_array_free(void *);
472:	static int param_array_get(char *, const struct kernel_param *);
462:	static int param_array_set(const char *, const struct kernel_param *);
557:	static ssize_t param_attr_show(struct module_attribute *, struct module_kobject *, char *);
573:	static ssize_t param_attr_store(struct module_attribute *, struct module_kobject *, const char *, size_t);
830:	static void param_sysfs_builtin(void);
979:	static int param_sysfs_builtin_init(void);
962:	static int param_sysfs_init(void);
929:	static int uevent_filter(const struct kobject *);
867:	static void version_sysfs_builtin(void);

File kernel/pid.c:
724:	long __arm64_sys_pidfd_getfd(const struct pt_regs *);
629:	long __arm64_sys_pidfd_open(const struct pt_regs *);
492:	pid_t __task_pid_nr_ns(struct task_struct *, enum pid_type, struct pid_namespace *);
159:	struct pid *alloc_pid(struct pid_namespace *, pid_t *, size_t);
331:	void attach_pid(struct task_struct *, enum pid_type);
361:	void change_pid(struct task_struct *, enum pid_type, struct pid *);
356:	void detach_pid(struct task_struct *, enum pid_type);
302:	void disable_pid_allocation(struct pid_namespace *);
368:	void exchange_tids(struct task_struct *, struct task_struct *);
518:	struct pid *find_ge_pid(int, struct pid_namespace *);
460:	struct pid *find_get_pid(pid_t);
425:	struct task_struct *find_get_task_by_vpid(pid_t);
309:	struct pid *find_pid_ns(int, struct pid_namespace *);
413:	struct task_struct *find_task_by_pid_ns(pid_t, struct pid_namespace *);
420:	struct task_struct *find_task_by_vpid(pid_t);
315:	struct pid *find_vpid(int);
126:	void free_pid(struct pid *);
448:	struct task_struct *get_pid_task(struct pid *, enum pid_type);
438:	struct pid *get_task_pid(struct task_struct *, enum pid_type);
650:	void pid_idr_init(void);
472:	pid_t pid_nr_ns(struct pid *, struct pid_namespace *);
396:	struct task_struct *pid_task(struct pid *, enum pid_type);
486:	pid_t pid_vnr(struct pid *);
595:	int pidfd_create(struct pid *, unsigned int);
524:	struct pid *pidfd_get_pid(unsigned int, unsigned int *);
560:	struct task_struct *pidfd_get_task(int, unsigned int *);
105:	void put_pid(struct pid *);
507:	struct pid_namespace *task_active_pid_ns(struct task_struct *);
388:	void transfer_pid(struct task_struct *, struct task_struct *, enum pid_type);
120:	static void delayed_put_pid(struct callback_head *);

File kernel/pid_namespace.c:
142:	struct pid_namespace *copy_pid_ns(unsigned long, struct user_namespace *, struct pid_namespace *);
152:	void put_pid_ns(struct pid_namespace *);
300:	int reboot_pid_ns(struct pid_namespace *, int);
166:	void zap_pid_ns_processes(struct pid_namespace *);
124:	static void delayed_free_pidns(struct callback_head *);
451:	static int pid_namespaces_init(void);
347:	static struct ns_common *pidns_for_children_get(struct task_struct *);
334:	static struct ns_common *pidns_get(struct task_struct *);
407:	static struct ns_common *pidns_get_parent(struct ns_common *);
375:	static int pidns_install(struct nsset *, struct ns_common *);
425:	static struct user_namespace *pidns_owner(struct ns_common *);
370:	static void pidns_put(struct ns_common *);

File kernel/power/process.c:
165:	int freeze_kernel_threads(void);
121:	int freeze_processes(void);
217:	void thaw_kernel_threads(void);
179:	void thaw_processes(void);
28:	static int try_to_freeze_tasks(bool);

File kernel/power/qos.c:
433:	void freq_constraints_init(struct freq_constraints *);
615:	int freq_qos_add_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
528:	int freq_qos_add_request(struct freq_constraints *, struct freq_qos_request *, enum freq_qos_req_type, s32);
493:	int freq_qos_apply(struct freq_qos_request *, enum pm_qos_req_action, s32);
461:	s32 freq_qos_read_value(struct freq_constraints *, enum freq_qos_req_type);
648:	int freq_qos_remove_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
590:	int freq_qos_remove_request(struct freq_qos_request *);
564:	int freq_qos_update_request(struct freq_qos_request *, s32);
53:	s32 pm_qos_read_value(struct pm_qos_constraints *);
174:	bool pm_qos_update_flags(struct pm_qos_flags *, struct pm_qos_flags_request *, enum pm_qos_req_action, s32);
98:	int pm_qos_update_target(struct pm_qos_constraints *, struct plist_node *, enum pm_qos_req_action, int);

File kernel/printk/printk.c:
1853:	long __arm64_sys_syslog(const struct pt_regs *);
4187:	void __printk_cpu_sync_put(void);
4135:	int __printk_cpu_sync_try_get(void);
4116:	void __printk_cpu_sync_wait(void);
3809:	int __printk_ratelimit(const char *);
2374:	int _printk(const char *, ...);
3789:	int _printk_deferred(const char *, ...);
2570:	int add_preferred_console(char *, int, char *);
2998:	void console_conditional_schedule(void);
3081:	struct tty_driver *console_device(int *);
3045:	void console_flush_on_panic(enum con_flush_mode);
3500:	void console_force_preferred_locked(struct console *);
3542:	void console_init(void);
249:	void console_list_lock(void);
273:	void console_list_unlock(void);
2654:	void console_lock(void);
288:	int console_srcu_read_lock(void);
301:	void console_srcu_read_unlock(int);
3130:	void console_start(struct console *);
3113:	void console_stop(struct console *);
2674:	int console_trylock(void);
3005:	void console_unblank(void);
2938:	void console_unlock(void);
2591:	void console_verbose(void);
3765:	void defer_console_output(void);
204:	int devkmsg_sysctl_set_loglvl(struct ctl_table *, int, void *, size_t *, loff_t *);
1740:	int do_syslog(int, char *, int, int);
2688:	int is_console_locked(void);
3923:	void kmsg_dump(enum kmsg_dump_reason);
4023:	bool kmsg_dump_get_buffer(struct kmsg_dump_iter *, bool, char *, size_t, size_t *);
3965:	bool kmsg_dump_get_line(struct kmsg_dump_iter *, bool, char *, size_t, size_t *);
3898:	const char *kmsg_dump_reason_str(enum kmsg_dump_reason);
3848:	int kmsg_dump_register(struct kmsg_dumper *);
4097:	void kmsg_dump_rewind(struct kmsg_dump_iter *);
3877:	int kmsg_dump_unregister(struct kmsg_dumper *);
550:	char *log_buf_addr_get(void);
556:	u32 log_buf_len_get(void);
2145:	u16 printk_parse_prefix(const char *, int *, enum printk_info_flags *);
519:	bool printk_percpu_data_ready(void);
3824:	bool printk_timed_ratelimit(unsigned long *, unsigned int);
3774:	void printk_trigger_flush(void);
3312:	void register_console(struct console *);
2617:	void resume_console(void);
1155:	void setup_log_buf(int);
2606:	void suspend_console(void);
3483:	int unregister_console(struct console *);
2368:	int vprintk_default(const char *, va_list);
3779:	int vprintk_deferred(const char *, va_list);
2318:	int vprintk_emit(int, int, const struct dev_printk_info *, const char *, va_list);
2205:	int vprintk_store(int, int, const struct dev_printk_info *, const char *, va_list);
3760:	void wake_up_klogd(void);
2461:	static int __add_preferred_console(char *, int, char *, char *, bool);
3622:	static bool __pr_flush(struct console *, int, bool);
3735:	static void __wake_up_klogd(int);
1128:	static unsigned int add_to_rb(struct printk_ringbuffer *, struct printk_record *);
2636:	static int console_cpu_notify(unsigned int);
2769:	static bool console_emit_next_record(struct console *, char *, char *, char *, bool *, int);
2859:	static bool console_flush_all(bool, u64 *, bool *);
2494:	static int console_msg_format_setup(char *);
2508:	static int console_setup(char *);
2578:	static int console_suspend_disable(char *);
174:	static int control_devkmsg(char *);
727:	static int devkmsg_emit(int, int, const char *, ...);
876:	static loff_t devkmsg_llseek(struct file *, loff_t, int);
931:	static int devkmsg_open(struct inode *, struct file *);
909:	static __poll_t devkmsg_poll(struct file *, poll_table *);
801:	static ssize_t devkmsg_read(struct file *, char *, size_t, loff_t *);
965:	static int devkmsg_release(struct inode *, struct file *);
739:	static ssize_t devkmsg_write(struct kiocb *, struct iov_iter *);
1538:	static u64 find_first_fitting_seq(u64, u64, size_t, bool, bool);
1273:	static int ignore_loglevel_setup(char *);
3141:	static int keep_bootcon_setup(char *);
1093:	static void log_buf_add_cpu(void);
1075:	static int log_buf_len_setup(char *);
1061:	static void log_buf_len_update(u64);
679:	static ssize_t msg_add_dict_text(char *, size_t, const char *, const char *);
695:	static ssize_t msg_print_ext_body(char *, size_t, char *, size_t, struct dev_printk_info *);
3580:	static int printk_late_init(void);
1413:	static size_t record_print_text(struct printk_record *, bool, bool);
1576:	static int syslog_print(char *, int);
1680:	static int syslog_print_all(char *, int, bool);
3160:	static int try_enable_preferred_console(struct console *, bool);
3434:	static int unregister_console_locked(struct console *);
3718:	static void wake_up_klogd_work_func(struct irq_work *);

File kernel/printk/printk_ringbuffer.c:
1632:	void prb_commit(struct prb_reserved_entry *);
1664:	void prb_final_commit(struct prb_reserved_entry *);
1992:	u64 prb_first_valid_seq(struct printk_ringbuffer *);
2075:	void prb_init(struct printk_ringbuffer *, char *, unsigned int, struct prb_desc *, unsigned int, struct printk_info *);
2017:	u64 prb_next_seq(struct printk_ringbuffer *);
1937:	bool prb_read_valid(struct printk_ringbuffer *, u64, struct printk_record *);
1967:	bool prb_read_valid_info(struct printk_ringbuffer *, u64, struct printk_info *, unsigned int *);
2121:	unsigned int prb_record_text_space(struct prb_reserved_entry *);
1485:	bool prb_reserve(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *);
1350:	bool prb_reserve_in_last(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *, u32, unsigned int);
1885:	static bool _prb_read_valid(struct printk_ringbuffer *, u64 *, struct printk_record *, unsigned int *);
1024:	static char *data_alloc(struct printk_ringbuffer *, unsigned int, struct prb_data_blk_lpos *, unsigned long);
632:	static bool data_push_tail(struct printk_ringbuffer *, unsigned long);

File kernel/printk/printk_safe.c:
18:	void __printk_safe_enter(void);
24:	void __printk_safe_exit(void);
29:	int vprintk(const char *, va_list);

File kernel/printk/sysctl.c:
82:	void printk_sysctl_init(void);
14:	static int proc_dointvec_minmax_sysadmin(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/profile.c:
461:	int create_proc_profile(void);
384:	void create_prof_cpu_mask(void);
325:	void profile_hits(int, void *, unsigned int);
100:	int profile_init(void);
57:	int profile_setup(char *);
333:	void profile_tick(int);
425:	int setup_profiling_timer(unsigned int);
171:	static void __profile_flip_buffers(void *);
353:	static int prof_cpu_mask_proc_open(struct inode *, struct file *);
347:	static int prof_cpu_mask_proc_show(struct seq_file *, void *);
358:	static ssize_t prof_cpu_mask_proc_write(struct file *, const char *, size_t, loff_t *);
265:	static int profile_dead_cpu(unsigned int);
305:	static int profile_online_cpu(unsigned int);
283:	static int profile_prepare_cpu(unsigned int);
397:	static ssize_t read_profile(struct file *, char *, size_t, loff_t *);
436:	static ssize_t write_profile(struct file *, const char *, size_t, loff_t *);

File kernel/ptrace.c:
1269:	long __arm64_sys_ptrace(const struct pt_regs *);
68:	void __ptrace_link(struct task_struct *, struct task_struct *, const struct cred *);
116:	void __ptrace_unlink(struct task_struct *);
613:	void exit_ptrace(struct task_struct *, struct list_head *);
1306:	int generic_ptrace_peekdata(struct task_struct *, unsigned long, unsigned long);
1318:	int generic_ptrace_pokedata(struct task_struct *, unsigned long, unsigned long);
43:	int ptrace_access_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
359:	bool ptrace_may_access(struct task_struct *, unsigned int);
626:	int ptrace_readdata(struct task_struct *, unsigned long, char *, int);
1030:	int ptrace_request(struct task_struct *, long, unsigned long, unsigned long);
652:	int ptrace_writedata(struct task_struct *, char *, unsigned long, int);
557:	static bool __ptrace_detach(struct task_struct *, struct task_struct *);
286:	static int __ptrace_may_access(struct task_struct *, unsigned int);
907:	static int ptrace_regset(struct task_struct *, int, unsigned int, struct iovec *);
712:	static int ptrace_setsiginfo(struct task_struct *, const kernel_siginfo_t *);

File kernel/range.c:
12:	int add_range(struct range *, int, int, u64, u64);
29:	int add_range_with_merge(struct range *, int, int, u64, u64);
126:	int clean_sort_range(struct range *, int);
161:	void sort_range(struct range *, int);
65:	void subtract_range(struct range *, int, u64, u64);
114:	static int cmp_range(const void *, const void *);

File kernel/rcu/rcu_segcblist.c:
67:	struct callback_head *rcu_cblist_dequeue(struct rcu_cblist *);
28:	void rcu_cblist_enqueue(struct rcu_cblist *, struct callback_head *);
43:	void rcu_cblist_flush_enqueue(struct rcu_cblist *, struct rcu_cblist *, struct callback_head *);
18:	void rcu_cblist_init(struct rcu_cblist *);
537:	bool rcu_segcblist_accelerate(struct rcu_segcblist *, unsigned long);
210:	void rcu_segcblist_add_len(struct rcu_segcblist *, long);
480:	void rcu_segcblist_advance(struct rcu_segcblist *, unsigned long);
256:	void rcu_segcblist_disable(struct rcu_segcblist *);
340:	void rcu_segcblist_enqueue(struct rcu_segcblist *, struct callback_head *);
360:	bool rcu_segcblist_entrain(struct rcu_segcblist *, struct callback_head *);
385:	void rcu_segcblist_extract_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
410:	void rcu_segcblist_extract_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
298:	struct callback_head *rcu_segcblist_first_cb(struct rcu_segcblist *);
312:	struct callback_head *rcu_segcblist_first_pend_cb(struct rcu_segcblist *);
229:	void rcu_segcblist_inc_len(struct rcu_segcblist *);
237:	void rcu_segcblist_init(struct rcu_segcblist *);
432:	void rcu_segcblist_insert_count(struct rcu_segcblist *, struct rcu_cblist *);
442:	void rcu_segcblist_insert_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
465:	void rcu_segcblist_insert_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
607:	void rcu_segcblist_merge(struct rcu_segcblist *, struct rcu_segcblist *);
98:	long rcu_segcblist_n_segment_cbs(struct rcu_segcblist *);
323:	bool rcu_segcblist_nextgp(struct rcu_segcblist *, unsigned long *);
266:	void rcu_segcblist_offload(struct rcu_segcblist *, bool);
288:	bool rcu_segcblist_pend_cbs(struct rcu_segcblist *);
278:	bool rcu_segcblist_ready_cbs(struct rcu_segcblist *);

File kernel/rcu/srcutree.c:
662:	int __srcu_read_lock(struct srcu_struct *);
678:	void __srcu_read_unlock(struct srcu_struct *, int);
1256:	void call_srcu(struct srcu_struct *, struct callback_head *, rcu_callback_t);
599:	void cleanup_srcu_struct(struct srcu_struct *);
1378:	unsigned long get_state_synchronize_srcu(struct srcu_struct *);
295:	int init_srcu_struct(struct srcu_struct *);
1428:	bool poll_state_synchronize_srcu(struct srcu_struct *, unsigned long);
1479:	void srcu_barrier(struct srcu_struct *);
1523:	unsigned long srcu_batches_completed(struct srcu_struct *);
1799:	void srcu_init(void);
1732:	void srcu_torture_stats_print(struct srcu_struct *, char *, char *);
1708:	void srcutorture_get_gp_data(enum rcutorture_type, struct srcu_struct *, int *, unsigned long *);
1397:	unsigned long start_poll_synchronize_srcu(struct srcu_struct *);
1359:	void synchronize_srcu(struct srcu_struct *);
1306:	void synchronize_srcu_expedited(struct srcu_struct *);
1266:	static void __synchronize_srcu(struct srcu_struct *, bool);
237:	static int init_srcu_struct_fields(struct srcu_struct *, bool);
164:	static bool init_srcu_struct_nodes(struct srcu_struct *, gfp_t);
1682:	static void process_srcu(struct work_struct *);
1442:	static void srcu_barrier_cb(struct callback_head *);
1785:	static int srcu_bootup_announce(void);
749:	static void srcu_delay_timer(struct timer_list *);
908:	static void srcu_funnel_exp_start(struct srcu_struct *, struct srcu_node *, unsigned long);
723:	static void srcu_gp_start(struct srcu_struct *);
1143:	static unsigned long srcu_gp_start_if_needed(struct srcu_struct *, struct callback_head *, bool);
1604:	static void srcu_invoke_callbacks(struct work_struct *);
1026:	static bool try_check_zero(struct srcu_struct *, int, int);

File kernel/rcu/sync.c:
189:	void rcu_sync_dtor(struct rcu_sync *);
121:	void rcu_sync_enter(struct rcu_sync *);
36:	void rcu_sync_enter_start(struct rcu_sync *);
168:	void rcu_sync_exit(struct rcu_sync *);
21:	void rcu_sync_init(struct rcu_sync *);
73:	static void rcu_sync_func(struct callback_head *);

File kernel/rcu/tasks.h:
927:	void call_rcu_tasks(struct callback_head *, rcu_callback_t);
1688:	void call_rcu_tasks_trace(struct callback_head *, rcu_callback_t);
1000:	void exit_tasks_rcu_finish(void);
992:	void exit_tasks_rcu_start(void);
963:	void rcu_barrier_tasks(void);
1724:	void rcu_barrier_tasks_trace(void);
1896:	void rcu_init_tasks_generic(void);
1244:	void rcu_read_unlock_trace_special(struct task_struct *);
1275:	void rcu_tasks_trace_qs_blkd(struct task_struct *);
1226:	u8 rcu_trc_cmpxchg_need_qs(struct task_struct *, u8, u8);
984:	void show_rcu_tasks_classic_gp_kthread(void);
1772:	void show_rcu_tasks_gp_kthreads(void);
1753:	void show_rcu_tasks_trace_gp_kthread(void);
951:	void synchronize_rcu_tasks(void);
1711:	void synchronize_rcu_tasks_trace(void);
281:	static void call_rcu_tasks_generic(struct callback_head *, rcu_callback_t, struct rcu_tasks *);
271:	static void call_rcu_tasks_iw_wakeup(struct irq_work *);
225:	static void cblist_init_generic(struct rcu_tasks *);
872:	static void check_all_holdout_tasks(struct list_head *, bool, bool *);
1606:	static void check_all_holdout_tasks_trace(struct list_head *, bool, bool *);
348:	static void rcu_barrier_tasks_generic(struct rcu_tasks *);
335:	static void rcu_barrier_tasks_generic_cb(struct callback_head *);
969:	static int rcu_spawn_tasks_kthread(void);
575:	static void rcu_spawn_tasks_kthread_generic(struct rcu_tasks *);
1730:	static int rcu_spawn_tasks_trace_kthread(void);
590:	static void rcu_tasks_bootup_oddness(void);
451:	static void rcu_tasks_invoke_cbs(struct rcu_tasks *, struct rcu_tasks_percpu *);
493:	static void rcu_tasks_invoke_cbs_wq(struct work_struct *);
535:	static int rcu_tasks_kthread(void *);
503:	static void rcu_tasks_one_gp(struct rcu_tasks *, bool);
816:	static void rcu_tasks_pertask(struct task_struct *, struct list_head *);
884:	static void rcu_tasks_postgp(struct rcu_tasks *);
827:	static void rcu_tasks_postscan(struct list_head *);
797:	static void rcu_tasks_pregp_step(struct list_head *);
1639:	static void rcu_tasks_trace_empty_fn(void *);
1644:	static void rcu_tasks_trace_postgp(struct rcu_tasks *);
1534:	static void rcu_tasks_trace_postscan(struct list_head *);
1478:	static void rcu_tasks_trace_pregp_step(struct list_head *);
652:	static void rcu_tasks_wait_gp(struct rcu_tasks *);
618:	static void show_rcu_tasks_generic_gp_kthread(struct rcu_tasks *, char *);
1552:	static int trc_check_slow_task(struct task_struct *, void *);
1348:	static int trc_inspect_reader(struct task_struct *, void *);
1313:	static void trc_read_check_handler(void *);
1396:	static void trc_wait_for_one_reader(struct task_struct *, struct list_head *);

File kernel/rcu/tree.c:
2866:	void call_rcu(struct callback_head *, rcu_callback_t);
3808:	void cond_synchronize_rcu(unsigned long);
3835:	void cond_synchronize_rcu_full(struct rcu_gp_oldstate *);
3579:	void get_completed_synchronize_rcu_full(struct rcu_gp_oldstate *);
3593:	unsigned long get_state_synchronize_rcu(void);
3620:	void get_state_synchronize_rcu_full(struct rcu_gp_oldstate *);
3461:	void kfree_rcu_scheduler_running(void);
3345:	void kvfree_call_rcu(struct callback_head *, rcu_callback_t);
3730:	bool poll_state_synchronize_rcu(unsigned long);
3774:	bool poll_state_synchronize_rcu_full(struct rcu_gp_oldstate *);
3986:	void rcu_barrier(void);
4259:	void rcu_cpu_starting(unsigned int);
318:	bool rcu_dynticks_zero_in_eqs(int, int *);
512:	unsigned long rcu_exp_batches_completed(void);
2409:	void rcu_force_quiescent_state(void);
200:	int rcu_get_gp_kthreads_prio(void);
500:	unsigned long rcu_get_gp_seq(void);
1322:	void rcu_gp_set_torture_wait(int);
1288:	void rcu_gp_slow_register(atomic_t *);
1297:	void rcu_gp_slow_unregister(atomic_t *);
4799:	void rcu_init(void);
4653:	void rcu_init_geometry(void);
708:	bool rcu_is_watching(void);
344:	void rcu_momentary_dyntick_idle(void);
675:	int rcu_needs_cpu(void);
4315:	void rcu_report_dead(unsigned int);
726:	void rcu_request_urgent_qs_task(struct task_struct *);
2321:	void rcu_sched_clock_irq(int);
4520:	void rcu_scheduler_starting(void);
261:	void rcu_softirq_qs(void);
529:	void rcutorture_get_gp_data(enum rcutorture_type, int *, unsigned long *);
2164:	int rcutree_dead_cpu(unsigned int);
2098:	int rcutree_dying_cpu(unsigned int);
4354:	void rcutree_migrate_callbacks(int);
4229:	int rcutree_offline_cpu(unsigned int);
4204:	int rcutree_online_cpu(unsigned int);
4144:	int rcutree_prepare_cpu(unsigned int);
3674:	unsigned long start_poll_synchronize_rcu(void);
3697:	void start_poll_synchronize_rcu_full(struct rcu_gp_oldstate *);
3532:	void synchronize_rcu(void);
1215:	static bool __note_gp_changes(struct rcu_node *, struct rcu_data *);
799:	static int dyntick_save_progress_counter(struct rcu_data *);
3221:	static void fill_page_cache_func(struct work_struct *);
2552:	static void invoke_rcu_core(void);
4766:	static void kfree_rcu_batch_init(void);
3152:	static void kfree_rcu_monitor(struct work_struct *);
3414:	static unsigned long kfree_rcu_shrink_count(struct shrinker *, struct shrink_control *);
3432:	static unsigned long kfree_rcu_shrink_scan(struct shrinker *, struct shrink_control *);
3036:	static void kfree_rcu_work(struct work_struct *);
1264:	static void note_gp_changes(struct rcu_data *);
456:	static int param_set_first_fqs_jiffies(const char *, const struct kernel_param *);
468:	static int param_set_next_fqs_jiffies(const char *, const struct kernel_param *);
1131:	static void rcu_accelerate_cbs_unlocked(struct rcu_node *, struct rcu_data *);
3913:	static void rcu_barrier_callback(struct callback_head *);
3965:	static void rcu_barrier_handler(void *);
4114:	static void rcu_boot_init_percpu_data(int);
2452:	static void rcu_core(void);
2521:	static void rcu_core_si(struct softirq_action *);
2577:	static void rcu_cpu_kthread(unsigned int);
2562:	static void rcu_cpu_kthread_park(unsigned int);
2567:	static int rcu_cpu_kthread_should_run(unsigned int);
4746:	static void rcu_dump_rcu_node_tree(void);
1711:	static void rcu_gp_cleanup(void);
1625:	static void rcu_gp_fqs_loop(void);
1433:	static bool rcu_gp_init(void);
1829:	static int rcu_gp_kthread(void *);
816:	static int rcu_implicit_dynticks_qs(struct rcu_data *);
4543:	static void rcu_init_one(void);
1898:	static void rcu_report_qs_rnp(unsigned long, struct rcu_node *, unsigned long, unsigned long);
2622:	static int rcu_spawn_core_kthreads(void);
4471:	static int rcu_spawn_gp_kthread(void);
958:	static bool rcu_start_this_gp(struct rcu_node *, struct rcu_data *, unsigned long);
4629:	static void sanitize_kthread_prio(void);
3135:	static void schedule_delayed_monitor_work(struct kfree_rcu_cpu *);
3212:	static enum hrtimer_restart schedule_page_work_fn(struct hrtimer *);
3638:	static void start_poll_synchronize_rcu_common(void);
2445:	static void strict_work_handler(struct work_struct *);

File kernel/rcu/tree_exp.h:
1074:	void cond_synchronize_rcu_expedited(unsigned long);
1101:	void cond_synchronize_rcu_expedited_full(struct rcu_gp_oldstate *);
1012:	unsigned long start_poll_synchronize_rcu_expedited(void);
1047:	void start_poll_synchronize_rcu_expedited_full(struct rcu_gp_oldstate *);
908:	void synchronize_rcu_expedited(void);
184:	static void __rcu_report_exp_rnp(struct rcu_node *, bool, unsigned long);
734:	static void rcu_exp_handler(void *);
716:	static void rcu_exp_sel_wait_wake(unsigned long);
977:	static void sync_rcu_do_polled_gp(struct work_struct *);
473:	static void sync_rcu_exp_select_node_cpus(struct work_struct *);
507:	static void wait_rcu_exp_gp(struct work_struct *);

File kernel/rcu/tree_plugin.h:
398:	void __rcu_read_lock(void);
416:	void __rcu_read_unlock(void);
754:	void exit_rcu(void);
310:	void rcu_note_context_switch(bool);
598:	void rcu_preempt_deferred_qs(struct task_struct *);
776:	static void dump_blkd_tasks(struct rcu_node *, int);
44:	static void rcu_bootup_announce_oddness(void);
1003:	static void rcu_cpu_kthread_setup(unsigned int);
611:	static void rcu_preempt_deferred_qs_handler(struct irq_work *);
464:	static void rcu_preempt_deferred_qs_irqrestore(struct task_struct *, unsigned long);
624:	static void rcu_read_unlock_special(struct task_struct *);

File kernel/rcu/tree_stall.h:
793:	bool rcu_check_boost_fail(unsigned long, int *);
154:	void rcu_cpu_stall_reset(void);
28:	int rcu_exp_jiffies_till_stall_check(void);
965:	void rcu_fwd_progress_check(unsigned long);
89:	bool rcu_gp_might_be_stalled(void);
57:	int rcu_jiffies_till_stall_check(void);
113:	void rcu_sysrq_end(void);
107:	void rcu_sysrq_start(void);
837:	void show_rcu_gp_kthreads(void);
130:	static int check_cpu_stall_init(void);
271:	static int check_slow_task(struct task_struct *, void *);
442:	static void print_cpu_stall_info(int);
490:	static void rcu_check_gp_kthread_starvation(void);
359:	static void rcu_dump_cpu_stacks(void);
212:	static void rcu_iw_handler(struct irq_work *);
120:	static int rcu_panic(struct notifier_block *, unsigned long, void *);
190:	static void rcu_stall_kick_kthreads(void);
1019:	static int rcu_sysrq_init(void);

File kernel/rcu/update.c:
371:	void __wait_rcu_gp(bool, int, call_rcu_func_t *, struct rcu_synchronize *);
476:	void do_trace_rcu_torture_read(const char *, struct callback_head *, unsigned long, unsigned long, unsigned long);
410:	void finish_rcuwait(struct rcuwait *);
526:	unsigned long get_completed_synchronize_rcu(void);
599:	void rcu_early_boot_tests(void);
195:	void rcu_end_inkernel_boot(void);
169:	void rcu_expedite_gp(void);
156:	bool rcu_gp_is_expedited(void);
140:	bool rcu_gp_is_normal(void);
206:	bool rcu_inkernel_boot_has_ended(void);
219:	void rcu_test_sync_prims(void);
184:	void rcu_unexpedite_gp(void);
609:	void rcupdate_announce_bootup_oddness(void);
362:	void wakeme_after_rcu(struct callback_head *);
232:	static int rcu_set_runtime_mode(void);

File kernel/reboot.c:
700:	long __arm64_sys_reboot(const struct pt_regs *);
798:	void ctrl_alt_del(void);
530:	int devm_register_power_off_handler(struct device *, int (*)(struct sys_off_data *), void *);
125:	int devm_register_reboot_notifier(struct device *, struct notifier_block *);
552:	int devm_register_restart_handler(struct device *, int (*)(struct sys_off_data *), void *);
502:	int devm_register_sys_off_handler(struct device *, enum sys_off_mode, int, int (*)(struct sys_off_data *), void *);
639:	void do_kernel_power_off(void);
223:	void do_kernel_restart(char *);
74:	void emergency_restart(void);
970:	void hw_protection_shutdown(const char *, int);
666:	bool kernel_can_power_off(void);
293:	void kernel_halt(void);
678:	void kernel_power_off(void);
265:	void kernel_restart(char *);
81:	void kernel_restart_prepare(char *);
228:	void migrate_to_reboot_cpu(void);
884:	void orderly_poweroff(bool);
905:	void orderly_reboot(void);
585:	int register_platform_power_off(void (*)(void));
99:	int register_reboot_notifier(struct notifier_block *);
191:	int register_restart_handler(struct notifier_block *);
389:	struct sys_off_handler *register_sys_off_handler(enum sys_off_mode, int, int (*)(struct sys_off_data *), void *);
608:	void unregister_platform_power_off(void (*)(void));
114:	int unregister_reboot_notifier(struct notifier_block *);
206:	int unregister_restart_handler(struct notifier_block *);
462:	void unregister_sys_off_handler(struct sys_off_handler *);
1218:	static ssize_t cpu_show(struct kobject *, struct kobj_attribute *, char *);
1222:	static ssize_t cpu_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
788:	static void deferred_cad(struct work_struct *);
120:	static void devm_unregister_reboot_notifier(struct device *, void *);
483:	static void devm_unregister_sys_off_handler(void *);
918:	static void hw_failure_emergency_poweroff_func(struct work_struct *);
618:	static int legacy_pm_power_off(struct sys_off_data *);
1086:	static ssize_t mode_show(struct kobject *, struct kobj_attribute *, char *);
1112:	static ssize_t mode_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
565:	static int platform_power_off_notify(struct sys_off_data *);
870:	static void poweroff_work_func(struct work_struct *);
1290:	static int reboot_ksysfs_init(void);
989:	static int reboot_setup(char *);
892:	static void reboot_work_func(struct work_struct *);
316:	static int sys_off_notify(struct notifier_block *, unsigned long, void *);

File kernel/regset.c:
61:	int copy_regset_to_user(struct task_struct *, const struct user_regset_view *, unsigned int, unsigned int, unsigned int, void *);
33:	int regset_get(struct task_struct *, const struct user_regset *, unsigned int, void *);
42:	int regset_get_alloc(struct task_struct *, const struct user_regset *, unsigned int, void **);

File kernel/resource.c:
1595:	void __devm_release_region(struct device *, struct resource *, resource_size_t, resource_size_t);
1570:	struct resource *__devm_request_region(struct device *, struct resource *, resource_size_t, resource_size_t, const char *);
1251:	void __release_region(struct resource *, resource_size_t, resource_size_t);
1217:	struct resource *__request_region(struct resource *, resource_size_t, resource_size_t, const char *, int);
976:	int adjust_resource(struct resource *, resource_size_t, resource_size_t);
706:	int allocate_resource(struct resource *, struct resource *, resource_size_t, resource_size_t, resource_size_t, resource_size_t, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t), void *);
554:	void arch_remove_reservations(struct resource *);
1541:	void devm_release_resource(struct device *, struct resource *);
1503:	int devm_request_resource(struct device *, struct resource *, struct resource *);
853:	int insert_resource(struct resource *, struct resource *);
833:	struct resource *insert_resource_conflict(struct resource *, struct resource *);
870:	void insert_resource_expand_to_fit(struct resource *, struct resource *);
1147:	struct address_space *iomem_get_mapping(void);
1754:	bool iomem_is_exclusive(u64);
1656:	int iomem_map_sanity_check(resource_size_t, unsigned long);
750:	struct resource *lookup_resource(struct resource *, resource_size_t);
486:	int page_is_ram(unsigned long);
541:	int region_intersects(resource_size_t, size_t, unsigned long, unsigned long);
251:	void release_child_resources(struct resource *);
296:	int release_resource(struct resource *);
918:	int remove_resource(struct resource *);
282:	int request_resource(struct resource *, struct resource *);
265:	struct resource *request_resource_conflict(struct resource *, struct resource *);
1050:	void reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
1084:	resource_size_t resource_alignment(struct resource *);
1707:	bool resource_is_exclusive(struct resource *, u64, resource_size_t);
1760:	struct resource_entry *resource_list_create_entry(struct resource *, size_t);
1775:	void resource_list_free(struct list_head *);
411:	int walk_iomem_res_desc(unsigned long, unsigned long, u64, u64, void *, int (*)(struct resource *, void *));
438:	int walk_mem_res(u64, u64, void *, int (*)(struct resource *, void *));
452:	int walk_system_ram_range(unsigned long, unsigned long, void *, int (*)(unsigned long, unsigned long, void *));
425:	int walk_system_ram_res(u64, u64, void *, int (*)(struct resource *, void *));
579:	static int __find_resource(struct resource *, struct resource *, struct resource *, resource_size_t, struct resource_constraint *);
768:	static struct resource *__insert_resource(struct resource *, struct resource *);
228:	static void __release_child_resources(struct resource *);
171:	static struct resource *__request_resource(struct resource *, struct resource *);
989:	static void __reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
374:	static int __walk_iomem_res_desc(resource_size_t, resource_size_t, unsigned long, unsigned long, void *, int (*)(struct resource *, void *));
1561:	static int devm_region_match(struct device *, void *, void *);
1554:	static void devm_region_release(struct device *, void *);
1527:	static int devm_resource_match(struct device *, void *, void *);
1478:	static void devm_resource_release(struct device *, void *);
153:	static void free_resource(struct resource *);
1987:	static int iomem_fs_init_fs_context(struct fs_context *);
1999:	static int iomem_init_inode(void);
142:	static int ioresources_init(void);
80:	static void *r_next(struct seq_file *, void *, loff_t *);
108:	static int r_show(struct seq_file *, void *);
91:	static void *r_start(struct seq_file *, loff_t *);
102:	static void r_stop(struct seq_file *, void *);
1610:	static int reserve_setup(char *);
558:	static resource_size_t simple_align_resource(void *, const struct resource *, resource_size_t, resource_size_t);
1978:	static int strict_iomem(char *);

File kernel/rseq.c:
336:	long __arm64_sys_rseq(const struct pt_regs *);
286:	void __rseq_handle_notify_resume(struct ksignal *, struct pt_regs *);

File kernel/sched/autogroup.c:
42:	void autogroup_free(struct task_group *);
33:	void autogroup_init(struct task_struct *);
285:	int autogroup_path(struct task_group *, char *, int);
231:	int proc_sched_autogroup_set_nice(struct task_struct *, int);
269:	void proc_sched_autogroup_show_task(struct task_struct *, struct seq_file *);
193:	void sched_autogroup_create_attach(struct task_struct *);
205:	void sched_autogroup_detach(struct task_struct *);
216:	void sched_autogroup_exit(struct signal_struct *);
147:	void sched_autogroup_exit_task(struct task_struct *);
211:	void sched_autogroup_fork(struct signal_struct *);
129:	bool task_wants_autogroup(struct task_struct *, struct task_group *);
158:	static void autogroup_move_group(struct task_struct *, struct autogroup *);
71:	static struct autogroup *autogroup_task_get(struct task_struct *);
221:	static int setup_autogroup(char *);

File kernel/sched/clock.c:
477:	u64 running_clock(void);
62:	unsigned long long sched_clock(void);
459:	u64 sched_clock_cpu(int);
451:	void sched_clock_init(void);

File kernel/sched/completion.c:
28:	void complete(struct completion *);
57:	void complete_all(struct completion *);
327:	bool completion_done(struct completion *);
294:	bool try_wait_for_completion(struct completion *);
136:	void wait_for_completion(struct completion *);
204:	int wait_for_completion_interruptible(struct completion *);
226:	long wait_for_completion_interruptible_timeout(struct completion *, unsigned long);
169:	void wait_for_completion_io(struct completion *);
189:	unsigned long wait_for_completion_io_timeout(struct completion *, unsigned long);
242:	int wait_for_completion_killable(struct completion *);
275:	long wait_for_completion_killable_timeout(struct completion *, unsigned long);
252:	int wait_for_completion_state(struct completion *, unsigned int);
155:	unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
115:	static long wait_for_common(struct completion *, long, int);
121:	static long wait_for_common_io(struct completion *, long, int);

File kernel/sched/core.c:
8881:	long __arm64_sys_sched_get_priority_max(const struct pt_regs *);
8908:	long __arm64_sys_sched_get_priority_min(const struct pt_regs *);
8390:	long __arm64_sys_sched_getaffinity(const struct pt_regs *);
8121:	long __arm64_sys_sched_getattr(const struct pt_regs *);
8040:	long __arm64_sys_sched_getparam(const struct pt_regs *);
8011:	long __arm64_sys_sched_getscheduler(const struct pt_regs *);
8973:	long __arm64_sys_sched_rr_get_interval(const struct pt_regs *);
8338:	long __arm64_sys_sched_setaffinity(const struct pt_regs *);
7968:	long __arm64_sys_sched_setattr(const struct pt_regs *);
7957:	long __arm64_sys_sched_setparam(const struct pt_regs *);
7942:	long __arm64_sys_sched_setscheduler(const struct pt_regs *);
8443:	long __arm64_sys_sched_yield(const struct pt_regs *);
8515:	int __cond_resched_lock(spinlock_t *);
8533:	int __cond_resched_rwlock_read(rwlock_t *);
8551:	int __cond_resched_rwlock_write(rwlock_t *);
606:	struct rq *__task_rq_lock(struct task_struct *, struct rq_flags *);
2083:	void activate_task(struct rq *, struct task_struct *, int);
7260:	int available_idle_cpu(int);
11361:	void call_trace_sched_update_nr_running(struct rq *, int);
7173:	int can_nice(const struct task_struct *, const int);
2174:	void check_preempt_curr(struct rq *, struct task_struct *, int);
4376:	struct task_struct *cpu_curr_snapshot(int);
3864:	bool cpus_share_cache(int, int);
9165:	int cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2090:	void deactivate_task(struct rq *, struct task_struct *, int);
6926:	int default_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
8168:	int dl_task_check_affinity(struct task_struct *, const struct cpumask *);
2600:	void do_set_cpus_allowed(struct task_struct *, const struct cpumask *);
6616:	void do_task_dead(void);
588:	void double_rq_lock(struct rq *, struct rq *);
11301:	void dump_cpu_task(int);
2632:	int dup_user_cpus_ptr(struct task_struct *, struct task_struct *, int);
7303:	unsigned long effective_cpu_util(int, unsigned long, enum cpu_util_type, struct task_struct *);
3076:	void force_compatible_cpus_allowed_ptr(struct task_struct *);
1064:	int get_nohz_timer_target(void);
2030:	unsigned long get_wchan(struct task_struct *);
808:	void hrtick_start(struct rq *, u64);
7236:	int idle_cpu(int);
7277:	struct task_struct *idle_task(int);
9265:	void idle_task_exit(void);
9745:	int in_sched_functions(unsigned long);
9092:	void init_idle(struct task_struct *, int);
8863:	void io_schedule(void);
8841:	void io_schedule_finish(int);
8832:	int io_schedule_prepare(void);
8850:	long io_schedule_timeout(long);
3434:	void kick_process(struct task_struct *);
2216:	void migrate_disable(void);
2232:	void migrate_enable(void);
3276:	int migrate_swap(struct task_struct *, struct task_struct *, int, int);
9214:	int migrate_task_to(struct task_struct *, int);
5334:	unsigned long long nr_context_switches(void);
5387:	unsigned int nr_iowait(void);
5352:	unsigned int nr_iowait_cpu(int);
5305:	unsigned int nr_running(void);
5745:	void preempt_count_add(int);
5777:	void preempt_count_sub(int);
6791:	void preempt_schedule(void);
6906:	void preempt_schedule_irq(void);
6839:	void preempt_schedule_notrace(void);
2487:	int push_cpu_stop(void *);
530:	void raw_spin_rq_lock_nested(struct rq *, int);
555:	bool raw_spin_rq_trylock(struct rq *);
579:	void raw_spin_rq_unlock(struct rq *);
3125:	void relax_compatible_cpus_allowed_ptr(struct task_struct *);
2684:	void release_user_cpus_ptr(struct task_struct *);
1043:	void resched_cpu(int);
1019:	void resched_curr(struct rq *);
6974:	void rt_mutex_setprio(struct task_struct *, struct task_struct *);
4709:	void sched_cgroup_fork(struct task_struct *, struct kernel_clone_args *);
9500:	int sched_cpu_activate(unsigned int);
9545:	int sched_cpu_deactivate(unsigned int);
9683:	int sched_cpu_dying(unsigned int);
9620:	int sched_cpu_starting(unsigned int);
7391:	unsigned long sched_cpu_util(int);
9641:	int sched_cpu_wait_empty(unsigned int);
10239:	struct task_group *sched_create_group(struct task_group *);
10287:	void sched_destroy_group(struct task_group *);
5403:	void sched_exec(void);
4646:	int sched_fork(unsigned long, struct task_struct *);
8354:	long sched_getaffinity(pid_t, struct cpumask *);
9764:	void sched_init(void);
9706:	void sched_init_smp(void);
10345:	void sched_move_task(struct task_struct *);
10262:	void sched_online_group(struct task_group *, struct task_group *);
4738:	void sched_post_fork(struct task_struct *);
10293:	void sched_release_group(struct task_group *);
7825:	void sched_set_fifo(struct task_struct *);
7835:	void sched_set_fifo_low(struct task_struct *);
7842:	void sched_set_normal(struct task_struct *, int);
3568:	void sched_set_stop_task(int, struct task_struct *);
8255:	long sched_setaffinity(pid_t, const struct cpumask *);
7777:	int sched_setattr(struct task_struct *, const struct sched_attr *);
7782:	int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
9235:	void sched_setnuma(struct task_struct *, int);
7771:	int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
7801:	int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
8998:	void sched_show_task(struct task_struct *);
2025:	bool sched_task_on_rq(struct task_struct *);
3781:	void sched_ttwu_pending(void *);
6675:	void schedule(void);
6699:	void schedule_idle(void);
6738:	void schedule_preempt_disabled(void);
5216:	void schedule_tail(struct task_struct *);
5547:	void scheduler_tick(void);
3818:	void send_call_function_single_ipi(int);
2534:	void set_cpus_allowed_common(struct task_struct *, struct affinity_context *);
3014:	int set_cpus_allowed_ptr(struct task_struct *, const struct cpumask *);
4474:	void set_numabalancing_state(bool);
9435:	void set_rq_offline(struct rq *);
9420:	void set_rq_online(struct rq *);
3141:	void set_task_cpu(struct task_struct *, unsigned int);
7098:	void set_user_nice(struct task_struct *, long);
9053:	void show_state_filter(unsigned int);
5328:	bool single_task_running(void);
4324:	int task_call_func(struct task_struct *, task_call_f, void *);
9178:	int task_can_attach(struct task_struct *, const struct cpumask *);
2149:	int task_curr(const struct task_struct *);
7225:	int task_prio(const struct task_struct *);
630:	struct rq *task_rq_lock(struct task_struct *, struct rq_flags *);
5455:	unsigned long long task_sched_runtime(struct task_struct *);
1254:	int tg_nop(struct task_group *, void *);
4743:	unsigned long to_ratio(u64, u64);
728:	void update_rq_clock(struct rq *);
3329:	unsigned long wait_task_inactive(struct task_struct *, unsigned int);
962:	void wake_q_add(struct wake_q_head *, struct task_struct *);
985:	void wake_q_add_safe(struct wake_q_head *, struct task_struct *);
3844:	void wake_up_if_idle(int);
4766:	void wake_up_new_task(struct task_struct *);
1147:	void wake_up_nohz_cpu(int);
4397:	int wake_up_process(struct task_struct *);
991:	void wake_up_q(struct wake_q_head *);
4403:	int wake_up_state(struct task_struct *, unsigned int);
1223:	int walk_tg_tree_from(struct task_group *, tg_visitor, tg_visitor, void *);
8751:	void yield(void);
8773:	int yield_to(struct task_struct *, bool);
9280:	static int __balance_push_cpu_stop(void *);
2552:	static void __do_set_cpus_allowed(struct task_struct *, struct affinity_context *);
793:	static void __hrtick_start(void *);
3197:	static void __migrate_swap_task(struct task_struct *, int);
2367:	static struct rq *__migrate_task(struct rq *, struct rq_flags *, struct task_struct *, int);
8194:	static int __sched_setaffinity(struct task_struct *, struct affinity_context *);
7518:	static int __sched_setscheduler(struct task_struct *, const struct sched_attr *, bool, bool);
6487:	static void __schedule(unsigned int);
5816:	static void __schedule_bug(struct task_struct *);
2910:	static int __set_cpus_allowed_ptr_locked(struct task_struct *, struct affinity_context *, struct rq *, struct rq_flags *);
9313:	static void balance_push(struct rq *);
9374:	static void balance_push_set(int, bool);
10455:	static void cpu_cgroup_attach(struct cgroup_taskset *);
10386:	static struct cgroup_subsys_state *cpu_cgroup_css_alloc(struct cgroup_subsys_state *);
10431:	static void cpu_cgroup_css_free(struct cgroup_subsys_state *);
10404:	static int cpu_cgroup_css_online(struct cgroup_subsys_state *);
10424:	static void cpu_cgroup_css_released(struct cgroup_subsys_state *);
11085:	static int cpu_extra_stat_show(struct seq_file *, struct cgroup_subsys_state *);
11009:	static s64 cpu_idle_read_s64(struct cgroup_subsys_state *, struct cftype *);
11015:	static int cpu_idle_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
10650:	static u64 cpu_shares_read_u64(struct cgroup_subsys_state *, struct cftype *);
10642:	static int cpu_shares_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
11139:	static s64 cpu_weight_nice_read_s64(struct cgroup_subsys_state *, struct cftype *);
11157:	static int cpu_weight_nice_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
11112:	static u64 cpu_weight_read_u64(struct cgroup_subsys_state *, struct cftype *);
11121:	static int cpu_weight_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
7853:	static int do_sched_setscheduler(pid_t, int, struct sched_param *);
8418:	static void do_sched_yield(void);
5129:	static struct rq *finish_task_switch(struct task_struct *);
765:	static enum hrtimer_restart hrtick(struct hrtimer *);
3232:	static int migrate_swap_stop(void *);
2385:	static int migration_cpu_stop(void *);
9731:	static int migration_init(void);
2321:	static struct rq *move_queued_task(struct rq *, struct rq_flags *, struct task_struct *, int);
1153:	static void nohz_csd_func(void *);
5734:	static void preempt_latency_start(int);
6757:	static void preempt_schedule_common(void);
4635:	static int sched_core_sysctl_init(void);
10222:	static void sched_free_group_rcu(struct callback_head *);
10281:	static void sched_unregister_group_rcu(struct callback_head *);
3468:	static int select_fallback_rq(int, struct task_struct *);
5526:	static int setup_resched_latency_warn_ms(char *);
4495:	static int sysctl_numa_balancing(struct ctl_table *, int, void *, size_t *, loff_t *);
4116:	static int try_to_wake_up(struct task_struct *, unsigned int, int);
3677:	static void ttwu_do_wakeup(struct rq *, struct task_struct *, int, struct rq_flags *);
3912:	static bool ttwu_queue_wakelist(struct task_struct *, int, int);

File kernel/sched/cpuacct.c:
350:	void cpuacct_account_field(struct task_struct *, int, u64);
334:	void cpuacct_charge(struct task_struct *, u64);
209:	static int __cpuacct_percpu_seq_show(struct seq_file *, enum cpuacct_stat_index);
239:	static int cpuacct_all_seq_show(struct seq_file *, void *);
55:	static struct cgroup_subsys_state *cpuacct_css_alloc(struct cgroup_subsys_state *);
85:	static void cpuacct_css_free(struct cgroup_subsys_state *);
234:	static int cpuacct_percpu_seq_show(struct seq_file *, void *);
229:	static int cpuacct_percpu_sys_seq_show(struct seq_file *, void *);
224:	static int cpuacct_percpu_user_seq_show(struct seq_file *, void *);
260:	static int cpuacct_stats_show(struct seq_file *, void *);
186:	static u64 cpuusage_read(struct cgroup_subsys_state *, struct cftype *);
180:	static u64 cpuusage_sys_read(struct cgroup_subsys_state *, struct cftype *);
174:	static u64 cpuusage_user_read(struct cgroup_subsys_state *, struct cftype *);
191:	static int cpuusage_write(struct cgroup_subsys_state *, struct cftype *, u64);

File kernel/sched/cpudeadline.c:
291:	void cpudl_cleanup(struct cpudl *);
173:	void cpudl_clear(struct cpudl *, int);
254:	void cpudl_clear_freecpu(struct cpudl *, int);
116:	int cpudl_find(struct cpudl *, struct task_struct *, struct cpumask *);
263:	int cpudl_init(struct cpudl *);
213:	void cpudl_set(struct cpudl *, int, u64);
244:	void cpudl_set_freecpu(struct cpudl *, int);
94:	static void cpudl_heapify(struct cpudl *, int);

File kernel/sched/cpupri.c:
308:	void cpupri_cleanup(struct cpupri *);
120:	int cpupri_find(struct cpupri *, struct task_struct *, struct cpumask *);
143:	int cpupri_find_fitness(struct cpupri *, struct task_struct *, struct cpumask *, bool (*)(struct task_struct *, int));
277:	int cpupri_init(struct cpupri *);
209:	void cpupri_set(struct cpupri *, int, int);

File kernel/sched/cputime.c:
139:	void account_guest_time(struct task_struct *, u64);
515:	void account_idle_ticks(unsigned long);
218:	void account_idle_time(u64);
483:	void account_process_tick(struct task_struct *, int);
207:	void account_steal_time(u64);
164:	void account_system_index_time(struct task_struct *, u64, enum cpu_usage_stat);
184:	void account_system_time(struct task_struct *, int, u64);
117:	void account_user_time(struct task_struct *, u64);
554:	void cputime_adjust(struct task_cputime *, struct prev_cputime *, u64 *, u64 *);
28:	void disable_sched_clock_irqtime(void);
23:	void enable_sched_clock_irqtime(void);
49:	void irqtime_account_irq(struct task_struct *, unsigned int);
626:	void task_cputime_adjusted(struct task_struct *, u64 *, u64 *);
308:	void thread_group_cputime(struct task_struct *, struct task_cputime *);
638:	void thread_group_cputime_adjusted(struct task_struct *, u64 *, u64 *);
372:	static void irqtime_account_process_tick(struct task_struct *, int, int);

File kernel/sched/deadline.c:
2922:	bool __checkparam_dl(const struct sched_attr *);
2970:	void __dl_clear_params(struct task_struct *);
2900:	void __getparam_dl(struct task_struct *, struct sched_attr *);
2888:	void __setparam_dl(struct task_struct *, const struct sched_attr *);
2550:	void dl_add_task_root_domain(struct task_struct *);
2574:	void dl_clear_root_domain(struct root_domain *);
3024:	int dl_cpu_busy(int, struct task_struct *);
3005:	int dl_cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2991:	bool dl_param_changed(struct task_struct *, const struct sched_attr *);
492:	void init_dl_bandwidth(struct dl_bandwidth *, u64, u64);
499:	void init_dl_bw(struct dl_bw *);
1450:	void init_dl_inactive_task_timer(struct sched_dl_entity *);
509:	void init_dl_rq(struct dl_rq *);
1215:	void init_dl_task_timer(struct sched_dl_entity *);
2541:	void init_sched_dl_class(void);
3054:	void print_dl_stats(struct seq_file *, int);
2784:	void sched_dl_do_global(void);
2732:	int sched_dl_global_validate(void);
2822:	int sched_dl_overflow(struct task_struct *, int, const struct sched_attr *);
1754:	static void __dequeue_task_dl(struct rq *, struct task_struct *, int);
1929:	static int balance_dl(struct rq *, struct task_struct *, struct rq_flags *);
1951:	static void check_preempt_curr_dl(struct rq *, struct task_struct *, int);
1761:	static void dequeue_task_dl(struct rq *, struct task_struct *, int);
142:	static unsigned long dl_bw_capacity(int);
668:	static struct rq *dl_task_offline_migration(struct rq *, struct task_struct *);
1108:	static enum hrtimer_restart dl_task_timer(struct hrtimer *);
1670:	static void enqueue_task_dl(struct rq *, struct task_struct *, int);
2131:	static int find_later_rq(struct task_struct *);
2219:	static struct rq *find_lock_later_rq(struct task_struct *, struct rq *);
1408:	static enum hrtimer_restart inactive_task_timer(struct hrtimer *);
1875:	static void migrate_task_rq_dl(struct task_struct *, int);
2105:	static struct task_struct *pick_earliest_pushable_dl_task(struct rq *, int);
2031:	static struct task_struct *pick_next_task_dl(struct rq *);
2015:	static struct task_struct *pick_task_dl(struct rq *);
2663:	static void prio_changed_dl(struct rq *, struct task_struct *, int);
2381:	static void pull_dl_task(struct rq *);
2296:	static int push_dl_task(struct rq *);
2374:	static void push_dl_tasks(struct rq *);
2042:	static void put_prev_task_dl(struct rq *, struct task_struct *);
835:	static void replenish_dl_entity(struct sched_dl_entity *);
2532:	static void rq_offline_dl(struct rq *);
2521:	static void rq_online_dl(struct rq *);
47:	static int sched_dl_sysctl_init(void);
1827:	static int select_task_rq_dl(struct task_struct *, int, int);
2487:	static void set_cpus_allowed_dl(struct task_struct *, struct affinity_context *);
1981:	static void set_next_task_dl(struct rq *, struct task_struct *, bool);
1050:	static int start_dl_timer(struct task_struct *);
2585:	static void switched_from_dl(struct rq *, struct task_struct *);
2633:	static void switched_to_dl(struct rq *, struct task_struct *);
446:	static void task_contending(struct sched_dl_entity *, int);
2080:	static void task_fork_dl(struct task_struct *);
390:	static void task_non_contending(struct task_struct *);
2065:	static void task_tick_dl(struct rq *, struct task_struct *, int);
2475:	static void task_woken_dl(struct rq *, struct task_struct *);
1307:	static void update_curr_dl(struct rq *);
561:	static void update_dl_migration(struct dl_rq *);
955:	static void update_dl_revised_wakeup(struct sched_dl_entity *, struct rq *);
1794:	static void yield_task_dl(struct rq *);

File kernel/sched/debug.c:
438:	void dirty_sched_domain_sysctl(int);
581:	void print_cfs_rq(struct seq_file *, int, struct cfs_rq *);
693:	void print_dl_rq(struct seq_file *, int, struct dl_rq *);
921:	void print_numa_stats(struct seq_file *, int, unsigned long, unsigned long, unsigned long, unsigned long);
663:	void print_rt_rq(struct seq_file *, int, struct rt_rq *);
1065:	void proc_sched_set_task(struct task_struct *);
946:	void proc_sched_show_task(struct task_struct *, struct pid_namespace *, struct seq_file *);
1072:	void resched_latency_warn(int, u64);
848:	void sysrq_sched_debug_show(void);
394:	void update_sched_domain_debugfs(void);
716:	static void print_cpu(struct seq_file *, int);
783:	static void sched_debug_header(struct seq_file *);
299:	static int sched_init_debug(void);

File kernel/sched/fair.c:
653:	struct sched_entity *__pick_first_entity(struct cfs_rq *);
674:	struct sched_entity *__pick_last_entity(struct cfs_rq *);
6607:	void __update_idle_core(struct rq *);
12117:	int alloc_fair_sched_group(struct task_group *, struct task_group *);
146:	int arch_asym_cpu_priority(int);
12102:	void free_fair_sched_group(struct task_group *);
5937:	void init_cfs_bandwidth(struct cfs_bandwidth *);
12073:	void init_cfs_rq(struct cfs_rq *);
800:	void init_entity_runnable_average(struct sched_entity *);
3081:	void init_numa_balancing(unsigned long, struct task_struct *);
12475:	void init_sched_fair_class(void);
12203:	void init_tg_cfs_entry(struct task_group *, struct cfs_rq *, struct sched_entity *, int, struct sched_entity *);
11251:	void nohz_balance_enter_idle(int);
11217:	void nohz_balance_exit_idle(struct rq *);
11455:	void nohz_run_idle_balance(int);
12158:	void online_fair_sched_group(struct task_group *);
7700:	struct task_struct *pick_next_task_fair(struct rq *, struct task_struct *, struct rq_flags *);
844:	void post_init_entity_util_avg(struct task_struct *);
12440:	void print_cfs_stats(struct seq_file *, int);
3345:	void reweight_task(struct task_struct *, int);
12286:	int sched_group_set_idle(struct task_group *, long);
12272:	int sched_group_set_shares(struct task_group *, unsigned long);
286:	void sched_init_granularity(void);
688:	int sched_update_scaling(void);
3629:	void set_task_rq_fair(struct sched_entity *, struct cfs_rq *, struct cfs_rq *);
1568:	bool should_numa_migrate_memory(struct task_struct *, struct page *, int, int);
12451:	void show_numa_stats(struct task_struct *, struct seq_file *);
2836:	void task_numa_fault(int, int, int, int);
2800:	void task_numa_free(struct task_struct *, bool);
1256:	pid_t task_numa_group_id(struct task_struct *);
11667:	void trigger_load_balance(struct rq *);
12176:	void unregister_fair_sched_group(struct task_group *);
8923:	void update_group_capacity(struct sched_domain *, int);
10896:	void update_max_interval(void);
7843:	static struct task_struct *__pick_next_task_fair(struct rq *);
12236:	static int __sched_group_set_shares(struct task_group *, unsigned long);
11331:	static void _nohz_idle_balance(struct rq *, unsigned int);
10812:	static int active_load_balance_cpu_stop(void *);
4099:	static void attach_entity_load_avg(struct cfs_rq *, struct sched_entity *);
12012:	static void attach_task_cfs_rq(struct task_struct *);
7480:	static int balance_fair(struct rq *, struct task_struct *, struct rq_flags *);
8224:	static int can_migrate_task(struct task_struct *, struct lb_env *);
7569:	static void check_preempt_wakeup(struct rq *, struct task_struct *, int);
6149:	static void dequeue_task_fair(struct rq *, struct task_struct *, int);
11995:	static void detach_task_cfs_rq(struct task_struct *);
6056:	static void enqueue_task_fair(struct rq *, struct task_struct *, int);
6514:	static int find_idlest_cpu(struct sched_domain *, struct task_struct *, int, int, int);
12375:	static unsigned int get_rr_interval_fair(struct rq *, struct task_struct *);
1434:	static unsigned long group_weight(struct task_struct *, int, int);
5958:	static void hrtick_start_fair(struct rq *, struct task_struct *);
10503:	static int load_balance(int, struct rq *, struct sched_domain *, enum cpu_idle_type, int *);
7433:	static void migrate_task_rq_fair(struct task_struct *, int);
10430:	static int need_active_balance(struct lb_env *);
11516:	static int newidle_balance(struct rq *, struct rq_flags *);
4978:	static struct sched_entity *pick_next_entity(struct cfs_rq *, struct sched_entity *);
7667:	static struct task_struct *pick_task_fair(struct rq *);
11880:	static void prio_changed_fair(struct rq *, struct task_struct *, int);
11933:	static void propagate_entity_cfs_rq(struct sched_entity *);
2682:	static void put_numa_group(struct numa_group *);
7851:	static void put_prev_task_fair(struct rq *, struct task_struct *);
10931:	static void rebalance_domains(struct rq *, enum cpu_idle_type);
3318:	static void reweight_entity(struct cfs_rq *, struct sched_entity *, unsigned long);
11689:	static void rq_offline_fair(struct rq *);
11682:	static void rq_online_fair(struct rq *);
11642:	static void run_rebalance_domains(struct softirq_action *);
218:	static int sched_fair_sysctl_init(void);
741:	static u64 sched_slice(struct cfs_rq *, struct sched_entity *);
1344:	static unsigned long score_nearby_nodes(struct task_struct *, int, int, bool);
7363:	static int select_task_rq_fair(struct task_struct *, int, int);
11201:	static void set_cpu_sd_state_busy(int);
7549:	static void set_next_buddy(struct sched_entity *);
4930:	static void set_next_entity(struct cfs_rq *, struct sched_entity *);
12050:	static void set_next_task_fair(struct rq *, struct task_struct *, bool);
130:	static int setup_sched_thermal_decay_shift(char *);
12023:	static void switched_from_fair(struct rq *, struct task_struct *);
12028:	static void switched_to_fair(struct rq *, struct task_struct *);
12083:	static void task_change_group_fair(struct task_struct *);
7474:	static void task_dead_fair(struct task_struct *);
11844:	static void task_fork_fair(struct task_struct *);
1828:	static void task_numa_assign(struct task_numa_env *, struct task_struct *, long);
2104:	static void task_numa_find_cpu(struct task_numa_env *, long, long);
2935:	static void task_numa_work(struct callback_head *);
1209:	static unsigned int task_scan_max(struct task_struct *);
1187:	static unsigned int task_scan_start(struct task_struct *);
11820:	static void task_tick_fair(struct rq *, struct task_struct *, int);
1415:	static unsigned long task_weight(struct task_struct *, int, int);
8729:	static void update_blocked_averages(int);
897:	static void update_curr(struct cfs_rq *);
937:	static void update_curr_fair(struct rq *);
4185:	static void update_load_avg(struct cfs_rq *, struct sched_entity *, int);
4578:	static void update_misfit_status(struct task_struct *, struct rq *);
1788:	static void update_numa_stats(struct task_numa_env *, struct numa_stats *, int, bool);
274:	static void update_sysctl(void);
7867:	static void yield_task_fair(struct rq *);
7898:	static bool yield_to_task_fair(struct rq *, struct task_struct *);

File kernel/sched/idle.c:
75:	void arch_cpu_idle(void);
74:	void arch_cpu_idle_dead(void);
72:	void arch_cpu_idle_enter(void);
73:	void arch_cpu_idle_exit(void);
71:	void arch_cpu_idle_prepare(void);
24:	void cpu_idle_poll_ctrl(bool);
337:	bool cpu_in_idle(unsigned long);
395:	void cpu_startup_entry(enum cpuhp_state);
86:	void default_idle_call(void);
446:	struct task_struct *pick_next_task_idle(struct rq *);
358:	void play_idle_precise(u64, u64);
17:	void sched_idle_set_state(struct cpuidle_state *);
415:	static int balance_idle(struct rq *, struct task_struct *, struct rq_flags *);
424:	static void check_preempt_curr_idle(struct rq *, struct task_struct *, int);
43:	static int cpu_idle_nopoll_setup(char *);
52:	static int cpu_idle_poll(void);
35:	static int cpu_idle_poll_setup(char *);
460:	static void dequeue_task_idle(struct rq *, struct task_struct *, int);
258:	static void do_idle(void);
348:	static enum hrtimer_restart idle_inject_timer_fn(struct hrtimer *);
440:	static struct task_struct *pick_task_idle(struct rq *);
486:	static void prio_changed_idle(struct rq *, struct task_struct *, int);
429:	static void put_prev_task_idle(struct rq *, struct task_struct *);
409:	static int select_task_rq_idle(struct task_struct *, int, int);
433:	static void set_next_task_idle(struct rq *, struct task_struct *, bool);
480:	static void switched_to_idle(struct rq *, struct task_struct *);
476:	static void task_tick_idle(struct rq *, struct task_struct *, int);
491:	static void update_curr_idle(struct rq *);

File kernel/sched/isolation.c:
65:	void housekeeping_affine(struct task_struct *, enum hk_type);
39:	int housekeeping_any_cpu(enum hk_type);
56:	const struct cpumask *housekeeping_cpumask(enum hk_type);
33:	bool housekeeping_enabled(enum hk_type);
82:	void housekeeping_init(void);
73:	bool housekeeping_test_cpu(int, enum hk_type);
191:	static int housekeeping_isolcpus_setup(char *);
180:	static int housekeeping_nohz_full_setup(char *);
109:	static int housekeeping_setup(char *, unsigned long);

File kernel/sched/loadavg.c:
349:	void calc_global_load(void);
385:	void calc_global_load_tick(struct rq *);
78:	long calc_load_fold_active(struct rq *, long);
156:	unsigned long calc_load_n(unsigned long, unsigned long, unsigned long, unsigned int);
258:	void calc_load_nohz_remote(struct rq *);
245:	void calc_load_nohz_start(void);
263:	void calc_load_nohz_stop(void);
71:	void get_avenrun(unsigned long *, unsigned long, int);

File kernel/sched/membarrier.c:
579:	long __arm64_sys_membarrier(const struct pt_regs *);
216:	void membarrier_exec_mmap(struct mm_struct *);
232:	void membarrier_update_current_mm(struct mm_struct *);
164:	static void ipi_mb(void *);
186:	static void ipi_rseq(void *);
169:	static void ipi_sync_core(void *);
199:	static void ipi_sync_rq_state(void *);
309:	static int membarrier_private_expedited(int, int);
425:	static int sync_runqueues_membarrier_state(struct mm_struct *);

File kernel/sched/pelt.c:
295:	int __update_load_avg_blocked_se(u64, struct sched_entity *);
320:	int __update_load_avg_cfs_rq(u64, struct cfs_rq *);
306:	int __update_load_avg_se(u64, struct cfs_rq *, struct sched_entity *);
372:	int update_dl_rq_load_avg(u64, struct rq *, int);
430:	int update_irq_load_avg(struct rq *, u64);
346:	int update_rt_rq_load_avg(u64, struct rq *, int);

File kernel/sched/rt.c:
313:	int alloc_rt_sched_group(struct task_group *, struct task_group *);
311:	void free_rt_sched_group(struct task_group *);
90:	void init_rt_bandwidth(struct rt_bandwidth *, u64, u64);
130:	void init_rt_rq(struct rt_rq *);
2513:	void init_sched_rt_class(void);
3047:	void print_rt_stats(struct seq_file *, int);
2309:	void rto_push_irq_work_func(struct irq_work *);
716:	bool sched_rt_bandwidth_account(struct rt_rq *);
309:	void unregister_rt_sched_group(struct task_group *);
1697:	static int balance_rt(struct rq *, struct task_struct *, struct rq_flags *);
886:	static void balance_runtime(struct rt_rq *);
1718:	static void check_preempt_curr_rt(struct rq *, struct task_struct *, int);
1482:	static void dequeue_rt_stack(struct sched_rt_entity *, unsigned int);
1551:	static void dequeue_task_rt(struct rq *, struct task_struct *, int);
1535:	static void enqueue_task_rt(struct rq *, struct task_struct *, int);
1969:	static struct rq *find_lock_lowest_rq(struct task_struct *, struct rq *);
1877:	static int find_lowest_rq(struct task_struct *);
2666:	static unsigned int get_rr_interval_rt(struct rq *, struct task_struct *);
1811:	static struct task_struct *pick_next_task_rt(struct rq *);
1799:	static struct task_struct *pick_task_rt(struct rq *);
2560:	static void prio_changed_rt(struct rq *, struct task_struct *, int);
2346:	static void pull_rt_task(struct rq *);
2050:	static int push_rt_task(struct rq *, bool);
2168:	static void push_rt_tasks(struct rq *);
1821:	static void put_prev_task_rt(struct rq *, struct task_struct *);
2484:	static void rq_offline_rt(struct rq *);
2473:	static void rq_online_rt(struct rq *);
523:	static bool rt_task_fits_capacity(struct task_struct *, int);
3023:	static int sched_rr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2984:	static int sched_rt_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
66:	static enum hrtimer_restart sched_rt_period_timer(struct hrtimer *);
58:	static int sched_rt_sysctl_init(void);
1599:	static int select_task_rq_rt(struct task_struct *, int, int);
1743:	static void set_next_task_rt(struct rq *, struct task_struct *, bool);
2498:	static void switched_from_rt(struct rq *, struct task_struct *);
2529:	static void switched_to_rt(struct rq *, struct task_struct *);
2632:	static void task_tick_rt(struct rq *, struct task_struct *, int);
2459:	static void task_woken_rt(struct rq *, struct task_struct *);
2275:	static void tell_cpu_to_push(struct rq *);
1045:	static void update_curr_rt(struct rq *);
361:	static void update_rt_migration(struct rt_rq *);
1590:	static void yield_task_rt(struct rq *);

File kernel/sched/sched.h:
1373:	static unsigned long _raw_spin_rq_lock_irqsave(struct rq *);
2677:	static void double_lock_irq(spinlock_t *, spinlock_t *);
2305:	static struct task_struct *get_push_task(struct rq *);
1356:	static void raw_spin_rq_lock(struct rq *);
1619:	static void task_rq_unlock(struct rq *, struct task_struct *, struct rq_flags *);

File kernel/sched/stop_task.c:
19:	static int balance_stop(struct rq *, struct task_struct *, struct rq_flags *);
26:	static void check_preempt_curr_stop(struct rq *, struct task_struct *, int);
61:	static void dequeue_task_stop(struct rq *, struct task_struct *, int);
55:	static void enqueue_task_stop(struct rq *, struct task_struct *, int);
44:	static struct task_struct *pick_next_task_stop(struct rq *);
36:	static struct task_struct *pick_task_stop(struct rq *);
105:	static void prio_changed_stop(struct rq *, struct task_struct *, int);
71:	static void put_prev_task_stop(struct rq *, struct task_struct *);
13:	static int select_task_rq_stop(struct task_struct *, int, int);
31:	static void set_next_task_stop(struct rq *, struct task_struct *, bool);
99:	static void switched_to_stop(struct rq *, struct task_struct *);
95:	static void task_tick_stop(struct rq *, struct task_struct *, int);
110:	static void update_curr_stop(struct rq *);
66:	static void yield_task_stop(struct rq *);

File kernel/sched/swait.c:
125:	void __finish_swait(struct swait_queue_head *, struct swait_queue *);
6:	void __init_swait_queue_head(struct swait_queue_head *, const char *, struct lock_class_key *);
84:	void __prepare_to_swait(struct swait_queue_head *, struct swait_queue *);
132:	void finish_swait(struct swait_queue_head *, struct swait_queue *);
102:	long prepare_to_swait_event(struct swait_queue_head *, struct swait_queue *, int);
91:	void prepare_to_swait_exclusive(struct swait_queue_head *, struct swait_queue *, int);
61:	void swake_up_all(struct swait_queue_head *);
41:	void swake_up_all_locked(struct swait_queue_head *);
21:	void swake_up_locked(struct swait_queue_head *);
47:	void swake_up_one(struct swait_queue_head *);

File kernel/sched/topology.c:
2425:	cpumask_var_t *alloc_sched_domains(unsigned int);
1718:	bool find_numa_distance(int);
2442:	void free_sched_domains(cpumask_var_t *, unsigned int);
786:	int group_balance_cpu(struct sched_group *);
581:	void init_defrootdomain(void);
2641:	void partition_sched_domains(int, cpumask_var_t *, struct sched_domain_attr *);
2535:	void partition_sched_domains_locked(int, cpumask_var_t *, struct sched_domain_attr *);
485:	void rq_attach_root(struct rq *, struct root_domain *);
2026:	void sched_domains_numa_masks_clear(unsigned int);
2009:	void sched_domains_numa_masks_set(unsigned int);
522:	void sched_get_rd(struct root_domain *);
2454:	int sched_init_domains(const struct cpumask *);
1806:	void sched_init_numa(int);
2046:	int sched_numa_find_closest(const struct cpumask *, int);
527:	void sched_put_rd(struct root_domain *);
1993:	void sched_update_numa(int, bool);
1677:	void set_sched_topology(struct sched_domain_topology_level *);
2420:	int topology_update_cpu_topology(void);
1381:	static void asym_cpu_capacity_scan(void);
2248:	static int build_sched_domains(const struct cpumask *, struct sched_domain_attr *);
707:	static void cpu_attach_domain(struct sched_domain *, struct root_domain *, int);
624:	static void destroy_sched_domain(struct sched_domain *);
638:	static void destroy_sched_domains_rcu(struct callback_head *);
471:	static void free_rootdomain(struct callback_head *);
1767:	static void init_numa_topology_type(int);
535:	static int init_rootdomain(struct root_domain *);
14:	static int sched_debug_setup(char *);
1693:	static void sched_numa_warn(const char *);
1688:	static const struct cpumask *sd_numa_mask(int);
1418:	static int setup_relax_domain_level(char *);

File kernel/sched/wait.c:
8:	void __init_waitqueue_head(struct wait_queue_head *, const char *, struct lock_class_key *);
157:	int __wake_up(struct wait_queue_head *, unsigned int, int, void *);
167:	void __wake_up_locked(struct wait_queue_head *, unsigned int, int);
173:	void __wake_up_locked_key(struct wait_queue_head *, unsigned int, void *);
179:	void __wake_up_locked_key_bookmark(struct wait_queue_head *, unsigned int, void *, wait_queue_entry_t *);
228:	void __wake_up_locked_sync_key(struct wait_queue_head *, unsigned int, void *);
244:	void __wake_up_pollfree(struct wait_queue_head *);
238:	void __wake_up_sync(struct wait_queue_head *, unsigned int);
202:	void __wake_up_sync_key(struct wait_queue_head *, unsigned int, void *);
17:	void add_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
28:	void add_wait_queue_exclusive(struct wait_queue_head *, struct wait_queue_entry *);
39:	void add_wait_queue_priority(struct wait_queue_head *, struct wait_queue_entry *);
417:	int autoremove_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
348:	int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
365:	int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
391:	void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
296:	void init_wait_entry(struct wait_queue_entry *, int);
264:	void prepare_to_wait(struct wait_queue_head *, struct wait_queue_entry *, int);
305:	long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
279:	bool prepare_to_wait_exclusive(struct wait_queue_head *, struct wait_queue_entry *, int);
50:	void remove_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
453:	long wait_woken(struct wait_queue_entry *, unsigned int, long);
478:	int woken_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
124:	static int __wake_up_common_lock(struct wait_queue_head *, unsigned int, int, int, void *);

File kernel/sched/wait_bit.c:
153:	wait_queue_head_t *__var_waitqueue(void *);
41:	int __wait_on_bit(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
82:	int __wait_on_bit_lock(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
121:	void __wake_up_bit(struct wait_queue_head *, void *, int);
197:	int bit_wait(struct wait_bit_key *, int);
207:	int bit_wait_io(struct wait_bit_key *, int);
231:	int bit_wait_io_timeout(struct wait_bit_key *, int);
217:	int bit_wait_timeout(struct wait_bit_key *, int);
12:	struct wait_queue_head *bit_waitqueue(void *, int);
174:	void init_wait_var_entry(struct wait_bit_queue_entry *, void *, int);
58:	int out_of_line_wait_on_bit(void *, int, wait_bit_action_f *, unsigned int);
111:	int out_of_line_wait_on_bit_lock(void *, int, wait_bit_action_f *, unsigned int);
68:	int out_of_line_wait_on_bit_timeout(void *, int, wait_bit_action_f *, unsigned int, unsigned long);
245:	void wait_bit_init(void);
21:	int wake_bit_function(struct wait_queue_entry *, unsigned int, int, void *);
147:	void wake_up_bit(void *, int);
191:	void wake_up_var(void *);
160:	static int var_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File kernel/signal.c:
3772:	long __arm64_sys_kill(const struct pt_regs *);
3847:	long __arm64_sys_pidfd_send_signal(const struct pt_regs *);
2999:	long __arm64_sys_restart_syscall(const struct pt_regs *);
4411:	long __arm64_sys_rt_sigaction(const struct pt_regs *);
3214:	long __arm64_sys_rt_sigpending(const struct pt_regs *);
3142:	long __arm64_sys_rt_sigprocmask(const struct pt_regs *);
3997:	long __arm64_sys_rt_sigqueueinfo(const struct pt_regs *);
4634:	long __arm64_sys_rt_sigsuspend(const struct pt_regs *);
3628:	long __arm64_sys_rt_sigtimedwait(const struct pt_regs *);
4037:	long __arm64_sys_rt_tgsigqueueinfo(const struct pt_regs *);
4228:	long __arm64_sys_sigaltstack(const struct pt_regs *);
3953:	long __arm64_sys_tgkill(const struct pt_regs *);
3969:	long __arm64_sys_tkill(const struct pt_regs *);
1454:	int __kill_pgrp_info(int, struct kernel_siginfo *, struct pid *);
1384:	struct sighand_struct *__lock_task_sighand(struct task_struct *, unsigned long *);
4253:	int __save_altstack(stack_t *, unsigned long);
3035:	void __set_current_blocked(const sigset_t *);
4679:	const char *arch_vma_name(struct vm_area_struct *);
190:	void calculate_sigpending(void);
3366:	int copy_siginfo_from_user(kernel_siginfo_t *, const siginfo_t *);
3324:	int copy_siginfo_to_user(siginfo_t *, const kernel_siginfo_t *);
629:	int dequeue_signal(struct task_struct *, sigset_t *, kernel_siginfo_t *, enum pid_type *);
3005:	long do_no_restart_syscall(struct restart_block *);
2025:	bool do_notify_parent(struct task_struct *, int);
1289:	int do_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
4088:	int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
2942:	void exit_signals(struct task_struct *);
512:	void flush_itimer_signals(void);
539:	void flush_signal_handlers(struct task_struct *, int);
476:	void flush_signals(struct task_struct *);
461:	void flush_sigqueue(struct sigpending *);
1677:	void force_exit_sig(int);
1664:	void force_fatal_sig(int);
1650:	void force_sig(int);
1778:	int force_sig_bnderr(void *, void *, void *);
1723:	int force_sig_fault(int, int, void *);
1704:	int force_sig_fault_to_task(int, int, void *, struct task_struct *);
1874:	int force_sig_fault_trapno(int, int, void *, int);
1355:	int force_sig_info(struct kernel_siginfo *);
1749:	int force_sig_mceerr(int, void *, short);
1793:	int force_sig_pkuerr(void *, u32);
1859:	int force_sig_ptrace_errno_trap(int, void *);
1841:	int force_sig_seccomp(int, int, bool);
1696:	void force_sigsegv(int);
2627:	bool get_signal(struct ksignal *);
1434:	int group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
524:	void ignore_signals(struct task_struct *);
4065:	void kernel_sigaction(int, __sighandler_t);
1904:	int kill_pgrp(struct pid *, int, int);
1916:	int kill_pid(struct pid *, int, int);
1469:	int kill_pid_info(int, struct kernel_siginfo *, struct pid *);
1536:	int kill_pid_usb_asyncio(int, int, sigval_t, struct pid *, const struct cred *);
207:	int next_signal(struct sigpending *, sigset_t *);
2348:	int ptrace_notify(int, unsigned long);
182:	void recalc_sigpending(void);
176:	void recalc_sigpending_and_wake(struct task_struct *);
4242:	int restore_altstack(const stack_t *);
1644:	int send_sig(int, struct task_struct *, int);
1730:	int send_sig_fault(int, int, void *, struct task_struct *);
1890:	int send_sig_fault_trapno(int, int, void *, int, struct task_struct *);
1627:	int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
1763:	int send_sig_mceerr(int, void *, short, struct task_struct *);
1807:	int send_sig_perf(void *, u32, u64);
1220:	int send_signal_locked(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
1961:	int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
3029:	void set_current_blocked(sigset_t *);
3096:	int set_user_sigmask(const sigset_t *, size_t);
4083:	void sigaction_compat_abi(struct k_sigaction *, struct k_sigaction *);
3279:	enum siginfo_layout siginfo_layout(unsigned int, int);
2902:	void signal_setup_done(int, struct ksignal *, int);
763:	void signal_wake_up_state(struct task_struct *, unsigned int);
4757:	void signals_init(void);
3059:	int sigprocmask(int, sigset_t *, sigset_t *);
1931:	struct sigqueue *sigqueue_alloc(void);
1936:	void sigqueue_free(struct sigqueue *);
336:	void task_clear_jobctl_pending(struct task_struct *, unsigned long);
312:	void task_clear_jobctl_trapping(struct task_struct *);
391:	void task_join_group_stop(struct task_struct *);
284:	bool task_set_jobctl_pending(struct task_struct *, unsigned long);
555:	bool unhandled_signal(struct task_struct *, int);
1363:	int zap_other_threads(struct task_struct *);
613:	static int __dequeue_signal(struct sigpending *, sigset_t *, kernel_siginfo_t *, bool *);
1079:	static int __send_signal_locked(int, struct kernel_siginfo *, struct task_struct *, enum pid_type, bool);
3010:	static void __set_task_blocked(struct task_struct *, const sigset_t *);
412:	static struct sigqueue *__sigqueue_alloc(int, struct task_struct *, gfp_t, int, const unsigned int);
998:	static void complete_signal(int, struct task_struct *, enum pid_type);
2532:	static void do_freezer_trap(void);
2504:	static void do_jobctl_trap(void);
2136:	static void do_notify_parent_cldstop(struct task_struct *, bool, int);
3900:	static int do_send_specific(pid_t, pid_t, int, struct kernel_siginfo *);
4171:	static int do_sigaltstack(const stack_t *, stack_t *, unsigned long, size_t);
2384:	static bool do_signal_stop(int);
1321:	static int force_sig_info_to_task(struct kernel_siginfo *, struct task_struct *, enum sig_handler);
1491:	static int kill_proc_info(int, struct kernel_siginfo *, pid_t);
3334:	static int post_copy_siginfo_from_user(kernel_siginfo_t *, const siginfo_t *);
906:	static bool prepare_signal(int, struct task_struct *, bool);
253:	static void print_dropped_signal(int);
2559:	static int ptrace_signal(int, kernel_siginfo_t *, enum pid_type);
2206:	static int ptrace_stop(int, int, unsigned long, kernel_siginfo_t *);
887:	static void ptrace_trap_notify(struct task_struct *);
2915:	static void retarget_shared_pending(struct task_struct *, sigset_t *);
1280:	static int setup_print_fatal_signals(char *);
365:	static bool task_participate_group_stop(struct task_struct *);

File kernel/smp.c:
471:	void __smp_call_single_queue(int, struct llist_node *);
1054:	void arch_disable_smp_support(void);
149:	void call_function_init(void);
699:	void flush_smp_call_function_queue(void);
542:	void generic_smp_call_function_single_interrupt(void);
1175:	void kick_all_cpus_sync(void);
1146:	void on_each_cpu_cond_mask(smp_cond_func_t, smp_call_func_t, void *, bool, const struct cpumask *);
1097:	void setup_nr_cpu_ids(void);
1030:	void smp_call_function(smp_call_func_t, void *, int);
844:	int smp_call_function_any(const struct cpumask *, smp_call_func_t, void *, int);
1008:	void smp_call_function_many(const struct cpumask *, smp_call_func_t, void *, bool);
727:	int smp_call_function_single(int, smp_call_func_t, void *, int);
807:	int smp_call_function_single_async(int, struct __call_single_data *);
1238:	int smp_call_on_cpu(unsigned int, int (*)(void *), void *, bool);
1103:	void smp_init(void);
123:	int smpcfd_dead_cpu(unsigned int);
133:	int smpcfd_dying_cpu(unsigned int);
101:	int smpcfd_prepare_cpu(unsigned int);
1189:	void wake_up_all_idle_cpus(void);
563:	static void __flush_smp_call_function_queue(bool);
1160:	static void do_nothing(void *);
506:	static int generic_exec_single(int, struct __call_single_data *);
1079:	static int maxcpus(char *);
1056:	static int nosmp(char *);
1067:	static int nrcpus(char *);
882:	static void smp_call_function_many_cond(const struct cpumask *, smp_call_func_t, void *, unsigned int, smp_cond_func_t);
1224:	static void smp_call_on_cpu_callback(struct work_struct *);

File kernel/smpboot.c:
352:	int cpu_check_up_prepare(int);
473:	bool cpu_report_death(void);
335:	int cpu_report_state(int);
415:	void cpu_set_state_online(int);
425:	bool cpu_wait_death(unsigned int, int);
30:	struct task_struct *idle_thread_get(unsigned int);
39:	void idle_thread_set_boot_cpu(void);
66:	void idle_threads_init(void);
213:	int smpboot_create_threads(unsigned int);
255:	int smpboot_park_threads(unsigned int);
289:	int smpboot_register_percpu_thread(struct smp_hotplug_thread *);
236:	int smpboot_unpark_threads(unsigned int);
318:	void smpboot_unregister_percpu_thread(struct smp_hotplug_thread *);
170:	static int __smpboot_create_thread(struct smp_hotplug_thread *, unsigned int);
266:	static void smpboot_destroy_threads(struct smp_hotplug_thread *);
106:	static int smpboot_thread_fn(void *);

File kernel/softirq.c:
528:	void __do_softirq(void);
373:	void __local_bh_enable_ip(unsigned long, unsigned int);
709:	void __raise_softirq_irqoff(unsigned int);
755:	void __tasklet_hi_schedule(struct tasklet_struct *);
748:	void __tasklet_schedule(struct tasklet_struct *);
366:	void _local_bh_enable(void);
1009:	unsigned int arch_dynirq_lower_bound(unsigned int);
1004:	int arch_early_irq_init(void);
999:	int arch_probe_nr_irqs(void);
459:	void do_softirq(void);
994:	int early_irq_init(void);
621:	void irq_enter(void);
607:	void irq_enter_rcu(void);
672:	void irq_exit(void);
660:	void irq_exit_rcu(void);
716:	void open_softirq(int, void (*)(struct softirq_action *));
700:	void raise_softirq(unsigned int);
683:	void raise_softirq_irqoff(unsigned int);
906:	void softirq_init(void);
838:	void tasklet_init(struct tasklet_struct *, void (*)(unsigned long), unsigned long);
876:	void tasklet_kill(struct tasklet_struct *);
826:	void tasklet_setup(struct tasklet_struct *, void (*)(struct tasklet_struct *));
890:	void tasklet_unlock(struct tasklet_struct *);
855:	void tasklet_unlock_spin_wait(struct tasklet_struct *);
899:	void tasklet_unlock_wait(struct tasklet_struct *);
640:	static void __irq_exit_rcu(void);
732:	static void __tasklet_schedule_common(struct tasklet_struct *, struct tasklet_head *, unsigned int);
921:	static int ksoftirqd_should_run(unsigned int);
926:	static void run_ksoftirqd(unsigned int);
979:	static int spawn_ksoftirqd(void);
943:	static int takeover_tasklets(unsigned int);
816:	static void tasklet_action(struct softirq_action *);
776:	static void tasklet_action_common(struct softirq_action *, struct tasklet_head *, unsigned int);
821:	static void tasklet_hi_action(struct softirq_action *);

File kernel/stacktrace.c:
390:	unsigned int filter_irq_stacks(unsigned long *, unsigned int);
24:	void stack_trace_print(const unsigned long *, unsigned int, int);
112:	unsigned int stack_trace_save(unsigned long *, unsigned int, unsigned int);
164:	unsigned int stack_trace_save_regs(struct pt_regs *, unsigned long *, unsigned int, unsigned int);
136:	unsigned int stack_trace_save_tsk(struct task_struct *, unsigned long *, unsigned int, unsigned int);
47:	int stack_trace_snprint(char *, size_t, const unsigned long *, unsigned int, int);
82:	static bool stack_trace_consume_entry(void *, unsigned long);
97:	static bool stack_trace_consume_entry_nosched(void *, unsigned long);

File kernel/stop_machine.c:
52:	void print_stop_info(const char *, struct task_struct *);
635:	int stop_core_cpuslocked(unsigned int, cpu_stop_fn_t, void *);
622:	int stop_machine(cpu_stop_fn_t, void *, const struct cpumask *);
586:	int stop_machine_cpuslocked(cpu_stop_fn_t, void *, const struct cpumask *);
677:	int stop_machine_from_inactive_cpu(cpu_stop_fn_t, void *, const struct cpumask *);
526:	void stop_machine_park(int);
550:	void stop_machine_unpark(int);
197:	void stop_machine_yield(const struct cpumask *);
139:	int stop_one_cpu(unsigned int, cpu_stop_fn_t, void *);
384:	bool stop_one_cpu_nowait(unsigned int, cpu_stop_fn_t, void *, struct cpu_stop_work *);
334:	int stop_two_cpus(unsigned int, unsigned int, cpu_stop_fn_t, void *);
538:	static void cpu_stop_create(unsigned int);
568:	static int cpu_stop_init(void);
543:	static void cpu_stop_park(unsigned int);
93:	static bool cpu_stop_queue_work(unsigned int, struct cpu_stop_work *);
474:	static int cpu_stop_should_run(unsigned int);
486:	static void cpu_stopper_thread(unsigned int);
203:	static int multi_cpu_stop(void *);
391:	static bool queue_stop_cpus_work(const struct cpumask *, cpu_stop_fn_t, void *, struct cpu_stop_done *);
463:	static int stop_cpus(const struct cpumask *, cpu_stop_fn_t, void *);

File kernel/sys.c:
2638:	long __arm64_sys_getcpu(const struct pt_regs *);
986:	long __arm64_sys_getegid(const struct pt_regs *);
974:	long __arm64_sys_geteuid(const struct pt_regs *);
980:	long __arm64_sys_getgid(const struct pt_regs *);
1154:	long __arm64_sys_getpgid(const struct pt_regs *);
940:	long __arm64_sys_getpid(const struct pt_regs *);
957:	long __arm64_sys_getppid(const struct pt_regs *);
281:	long __arm64_sys_getpriority(const struct pt_regs *);
818:	long __arm64_sys_getresgid(const struct pt_regs *);
735:	long __arm64_sys_getresuid(const struct pt_regs *);
1500:	long __arm64_sys_getrlimit(const struct pt_regs *);
1840:	long __arm64_sys_getrusage(const struct pt_regs *);
1168:	long __arm64_sys_getsid(const struct pt_regs *);
946:	long __arm64_sys_gettid(const struct pt_regs *);
968:	long __arm64_sys_getuid(const struct pt_regs *);
1288:	long __arm64_sys_newuname(const struct pt_regs *);
2353:	long __arm64_sys_prctl(const struct pt_regs *);
1666:	long __arm64_sys_prlimit64(const struct pt_regs *);
1410:	long __arm64_sys_setdomainname(const struct pt_regs *);
925:	long __arm64_sys_setfsgid(const struct pt_regs *);
881:	long __arm64_sys_setfsuid(const struct pt_regs *);
467:	long __arm64_sys_setgid(const struct pt_regs *);
1356:	long __arm64_sys_sethostname(const struct pt_regs *);
1055:	long __arm64_sys_setpgid(const struct pt_regs *);
211:	long __arm64_sys_setpriority(const struct pt_regs *);
421:	long __arm64_sys_setregid(const struct pt_regs *);
813:	long __arm64_sys_setresgid(const struct pt_regs *);
730:	long __arm64_sys_setresuid(const struct pt_regs *);
587:	long __arm64_sys_setreuid(const struct pt_regs *);
1713:	long __arm64_sys_setrlimit(const struct pt_regs *);
1240:	long __arm64_sys_setsid(const struct pt_regs *);
650:	long __arm64_sys_setuid(const struct pt_regs *);
2718:	long __arm64_sys_sysinfo(const struct pt_regs *);
1005:	long __arm64_sys_times(const struct pt_regs *);
1866:	long __arm64_sys_umask(const struct pt_regs *);
889:	long __sys_setfsgid(gid_t);
845:	long __sys_setfsuid(uid_t);
431:	long __sys_setgid(gid_t);
365:	long __sys_setregid(gid_t, gid_t);
757:	long __sys_setresgid(gid_t, gid_t, gid_t);
660:	long __sys_setresuid(uid_t, uid_t, uid_t);
522:	long __sys_setreuid(uid_t, uid_t);
603:	long __sys_setuid(uid_t);
2276:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
2281:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
1765:	void getrusage(struct task_struct *, int, struct rusage *);
1207:	int ksys_setsid(void);
1437:	static int do_prlimit(struct task_struct *, unsigned int, struct rlimit *, struct rlimit *);
2258:	static int propagate_has_child_subreaper(struct task_struct *, void *);
187:	static int set_one_prio(struct task_struct *, int, int);

File kernel/sys_ni.c:
243:	long __arm64_sys_accept(const struct pt_regs *);
304:	long __arm64_sys_accept4(const struct pt_regs *);
132:	long __arm64_sys_acct(const struct pt_regs *);
266:	long __arm64_sys_add_key(const struct pt_regs *);
424:	long __arm64_sys_adjtimex_time32(const struct pt_regs *);
241:	long __arm64_sys_bind(const struct pt_regs *);
341:	long __arm64_sys_bpf(const struct pt_regs *);
135:	long __arm64_sys_capget(const struct pt_regs *);
136:	long __arm64_sys_capset(const struct pt_regs *);
460:	long __arm64_sys_chown16(const struct pt_regs *);
442:	long __arm64_sys_clock_adjtime32(const struct pt_regs *);
433:	long __arm64_sys_clock_getres_time32(const struct pt_regs *);
432:	long __arm64_sys_clock_gettime32(const struct pt_regs *);
434:	long __arm64_sys_clock_nanosleep_time32(const struct pt_regs *);
431:	long __arm64_sys_clock_settime32(const struct pt_regs *);
144:	long __arm64_sys_clone3(const struct pt_regs *);
244:	long __arm64_sys_connect(const struct pt_regs *);
353:	long __arm64_sys_copy_file_range(const struct pt_regs *);
165:	long __arm64_sys_delete_module(const struct pt_regs *);
404:	long __arm64_sys_epoll_create(const struct pt_regs *);
67:	long __arm64_sys_epoll_create1(const struct pt_regs *);
68:	long __arm64_sys_epoll_ctl(const struct pt_regs *);
69:	long __arm64_sys_epoll_pwait(const struct pt_regs *);
71:	long __arm64_sys_epoll_pwait2(const struct pt_regs *);
414:	long __arm64_sys_epoll_wait(const struct pt_regs *);
406:	long __arm64_sys_eventfd(const struct pt_regs *);
64:	long __arm64_sys_eventfd2(const struct pt_regs *);
344:	long __arm64_sys_execveat(const struct pt_regs *);
411:	long __arm64_sys_fadvise64(const struct pt_regs *);
279:	long __arm64_sys_fadvise64_64(const struct pt_regs *);
315:	long __arm64_sys_fanotify_init(const struct pt_regs *);
316:	long __arm64_sys_fanotify_mark(const struct pt_regs *);
461:	long __arm64_sys_fchown16(const struct pt_regs *);
333:	long __arm64_sys_finit_module(const struct pt_regs *);
88:	long __arm64_sys_flock(const struct pt_regs *);
147:	long __arm64_sys_futex(const struct pt_regs *);
148:	long __arm64_sys_futex_time32(const struct pt_regs *);
153:	long __arm64_sys_futex_waitv(const struct pt_regs *);
436:	long __arm64_sys_futimesat_time32(const struct pt_regs *);
297:	long __arm64_sys_get_mempolicy(const struct pt_regs *);
151:	long __arm64_sys_get_robust_list(const struct pt_regs *);
462:	long __arm64_sys_getegid16(const struct pt_regs *);
463:	long __arm64_sys_geteuid16(const struct pt_regs *);
464:	long __arm64_sys_getgid16(const struct pt_regs *);
188:	long __arm64_sys_getgroups(const struct pt_regs *);
465:	long __arm64_sys_getgroups16(const struct pt_regs *);
246:	long __arm64_sys_getpeername(const struct pt_regs *);
184:	long __arm64_sys_getresgid(const struct pt_regs *);
466:	long __arm64_sys_getresgid16(const struct pt_regs *);
182:	long __arm64_sys_getresuid(const struct pt_regs *);
467:	long __arm64_sys_getresuid16(const struct pt_regs *);
245:	long __arm64_sys_getsockname(const struct pt_regs *);
249:	long __arm64_sys_getsockopt(const struct pt_regs *);
468:	long __arm64_sys_getuid16(const struct pt_regs *);
164:	long __arm64_sys_init_module(const struct pt_regs *);
78:	long __arm64_sys_inotify_add_watch(const struct pt_regs *);
405:	long __arm64_sys_inotify_init(const struct pt_regs *);
77:	long __arm64_sys_inotify_init1(const struct pt_regs *);
79:	long __arm64_sys_inotify_rm_watch(const struct pt_regs *);
44:	long __arm64_sys_io_cancel(const struct pt_regs *);
41:	long __arm64_sys_io_destroy(const struct pt_regs *);
46:	long __arm64_sys_io_getevents(const struct pt_regs *);
45:	long __arm64_sys_io_getevents_time32(const struct pt_regs *);
48:	long __arm64_sys_io_pgetevents(const struct pt_regs *);
47:	long __arm64_sys_io_pgetevents_time32(const struct pt_regs *);
39:	long __arm64_sys_io_setup(const struct pt_regs *);
42:	long __arm64_sys_io_submit(const struct pt_regs *);
52:	long __arm64_sys_io_uring_enter(const struct pt_regs *);
53:	long __arm64_sys_io_uring_register(const struct pt_regs *);
51:	long __arm64_sys_io_uring_setup(const struct pt_regs *);
85:	long __arm64_sys_ioprio_get(const struct pt_regs *);
84:	long __arm64_sys_ioprio_set(const struct pt_regs *);
456:	long __arm64_sys_ipc(const struct pt_regs *);
331:	long __arm64_sys_kcmp(const struct pt_regs *);
383:	long __arm64_sys_kexec_file_load(const struct pt_regs *);
160:	long __arm64_sys_kexec_load(const struct pt_regs *);
268:	long __arm64_sys_keyctl(const struct pt_regs *);
273:	long __arm64_sys_landlock_add_rule(const struct pt_regs *);
272:	long __arm64_sys_landlock_create_ruleset(const struct pt_regs *);
274:	long __arm64_sys_landlock_restrict_self(const struct pt_regs *);
469:	long __arm64_sys_lchown16(const struct pt_regs *);
242:	long __arm64_sys_listen(const struct pt_regs *);
60:	long __arm64_sys_lookup_dcookie(const struct pt_regs *);
292:	long __arm64_sys_madvise(const struct pt_regs *);
296:	long __arm64_sys_mbind(const struct pt_regs *);
349:	long __arm64_sys_membarrier(const struct pt_regs *);
338:	long __arm64_sys_memfd_create(const struct pt_regs *);
361:	long __arm64_sys_memfd_secret(const struct pt_regs *);
299:	long __arm64_sys_migrate_pages(const struct pt_regs *);
291:	long __arm64_sys_mincore(const struct pt_regs *);
287:	long __arm64_sys_mlock(const struct pt_regs *);
351:	long __arm64_sys_mlock2(const struct pt_regs *);
289:	long __arm64_sys_mlockall(const struct pt_regs *);
381:	long __arm64_sys_modify_ldt(const struct pt_regs *);
300:	long __arm64_sys_move_pages(const struct pt_regs *);
285:	long __arm64_sys_mprotect(const struct pt_regs *);
204:	long __arm64_sys_mq_getsetattr(const struct pt_regs *);
202:	long __arm64_sys_mq_notify(const struct pt_regs *);
195:	long __arm64_sys_mq_open(const struct pt_regs *);
200:	long __arm64_sys_mq_timedreceive(const struct pt_regs *);
201:	long __arm64_sys_mq_timedreceive_time32(const struct pt_regs *);
198:	long __arm64_sys_mq_timedsend(const struct pt_regs *);
199:	long __arm64_sys_mq_timedsend_time32(const struct pt_regs *);
197:	long __arm64_sys_mq_unlink(const struct pt_regs *);
263:	long __arm64_sys_mremap(const struct pt_regs *);
210:	long __arm64_sys_msgctl(const struct pt_regs *);
208:	long __arm64_sys_msgget(const struct pt_regs *);
213:	long __arm64_sys_msgrcv(const struct pt_regs *);
215:	long __arm64_sys_msgsnd(const struct pt_regs *);
286:	long __arm64_sys_msync(const struct pt_regs *);
288:	long __arm64_sys_munlock(const struct pt_regs *);
290:	long __arm64_sys_munlockall(const struct pt_regs *);
319:	long __arm64_sys_name_to_handle_at(const struct pt_regs *);
426:	long __arm64_sys_nanosleep_time32(const struct pt_regs *);
209:	long __arm64_sys_old_msgctl(const struct pt_regs *);
220:	long __arm64_sys_old_semctl(const struct pt_regs *);
230:	long __arm64_sys_old_shmctl(const struct pt_regs *);
320:	long __arm64_sys_open_by_handle_at(const struct pt_regs *);
370:	long __arm64_sys_pciconfig_iobase(const struct pt_regs *);
368:	long __arm64_sys_pciconfig_read(const struct pt_regs *);
369:	long __arm64_sys_pciconfig_write(const struct pt_regs *);
303:	long __arm64_sys_perf_event_open(const struct pt_regs *);
357:	long __arm64_sys_pkey_alloc(const struct pt_regs *);
358:	long __arm64_sys_pkey_free(const struct pt_regs *);
356:	long __arm64_sys_pkey_mprotect(const struct pt_regs *);
439:	long __arm64_sys_ppoll_time32(const struct pt_regs *);
293:	long __arm64_sys_process_madvise(const struct pt_regs *);
294:	long __arm64_sys_process_mrelease(const struct pt_regs *);
325:	long __arm64_sys_process_vm_readv(const struct pt_regs *);
327:	long __arm64_sys_process_vm_writev(const struct pt_regs *);
437:	long __arm64_sys_pselect6_time32(const struct pt_regs *);
101:	long __arm64_sys_quotactl(const struct pt_regs *);
102:	long __arm64_sys_quotactl_fd(const struct pt_regs *);
415:	long __arm64_sys_recv(const struct pt_regs *);
253:	long __arm64_sys_recvfrom(const struct pt_regs *);
305:	long __arm64_sys_recvmmsg(const struct pt_regs *);
306:	long __arm64_sys_recvmmsg_time32(const struct pt_regs *);
257:	long __arm64_sys_recvmsg(const struct pt_regs *);
295:	long __arm64_sys_remap_file_pages(const struct pt_regs *);
267:	long __arm64_sys_request_key(const struct pt_regs *);
481:	long __arm64_sys_rseq(const struct pt_regs *);
427:	long __arm64_sys_rt_sigtimedwait_time32(const struct pt_regs *);
392:	long __arm64_sys_rtas(const struct pt_regs *);
388:	long __arm64_sys_s390_ipc(const struct pt_regs *);
386:	long __arm64_sys_s390_pci_mmio_read(const struct pt_regs *);
387:	long __arm64_sys_s390_pci_mmio_write(const struct pt_regs *);
425:	long __arm64_sys_sched_rr_get_interval_time32(const struct pt_regs *);
336:	long __arm64_sys_seccomp(const struct pt_regs *);
221:	long __arm64_sys_semctl(const struct pt_regs *);
219:	long __arm64_sys_semget(const struct pt_regs *);
226:	long __arm64_sys_semop(const struct pt_regs *);
224:	long __arm64_sys_semtimedop(const struct pt_regs *);
225:	long __arm64_sys_semtimedop_time32(const struct pt_regs *);
417:	long __arm64_sys_send(const struct pt_regs *);
323:	long __arm64_sys_sendmmsg(const struct pt_regs *);
255:	long __arm64_sys_sendmsg(const struct pt_regs *);
251:	long __arm64_sys_sendto(const struct pt_regs *);
298:	long __arm64_sys_set_mempolicy(const struct pt_regs *);
301:	long __arm64_sys_set_mempolicy_home_node(const struct pt_regs *);
149:	long __arm64_sys_set_robust_list(const struct pt_regs *);
186:	long __arm64_sys_setfsgid(const struct pt_regs *);
470:	long __arm64_sys_setfsgid16(const struct pt_regs *);
185:	long __arm64_sys_setfsuid(const struct pt_regs *);
471:	long __arm64_sys_setfsuid16(const struct pt_regs *);
178:	long __arm64_sys_setgid(const struct pt_regs *);
472:	long __arm64_sys_setgid16(const struct pt_regs *);
187:	long __arm64_sys_setgroups(const struct pt_regs *);
473:	long __arm64_sys_setgroups16(const struct pt_regs *);
177:	long __arm64_sys_setregid(const struct pt_regs *);
474:	long __arm64_sys_setregid16(const struct pt_regs *);
183:	long __arm64_sys_setresgid(const struct pt_regs *);
475:	long __arm64_sys_setresgid16(const struct pt_regs *);
181:	long __arm64_sys_setresuid(const struct pt_regs *);
476:	long __arm64_sys_setresuid16(const struct pt_regs *);
179:	long __arm64_sys_setreuid(const struct pt_regs *);
477:	long __arm64_sys_setreuid16(const struct pt_regs *);
247:	long __arm64_sys_setsockopt(const struct pt_regs *);
180:	long __arm64_sys_setuid(const struct pt_regs *);
478:	long __arm64_sys_setuid16(const struct pt_regs *);
449:	long __arm64_sys_sgetmask(const struct pt_regs *);
234:	long __arm64_sys_shmat(const struct pt_regs *);
231:	long __arm64_sys_shmctl(const struct pt_regs *);
236:	long __arm64_sys_shmdt(const struct pt_regs *);
229:	long __arm64_sys_shmget(const struct pt_regs *);
252:	long __arm64_sys_shutdown(const struct pt_regs *);
407:	long __arm64_sys_signalfd(const struct pt_regs *);
113:	long __arm64_sys_signalfd4(const struct pt_regs *);
239:	long __arm64_sys_socket(const struct pt_regs *);
373:	long __arm64_sys_socketcall(const struct pt_regs *);
240:	long __arm64_sys_socketpair(const struct pt_regs *);
394:	long __arm64_sys_spu_create(const struct pt_regs *);
393:	long __arm64_sys_spu_run(const struct pt_regs *);
450:	long __arm64_sys_ssetmask(const struct pt_regs *);
422:	long __arm64_sys_stime32(const struct pt_regs *);
395:	long __arm64_sys_subpage_prot(const struct pt_regs *);
284:	long __arm64_sys_swapoff(const struct pt_regs *);
283:	long __arm64_sys_swapon(const struct pt_regs *);
453:	long __arm64_sys_sysfs(const struct pt_regs *);
170:	long __arm64_sys_syslog(const struct pt_regs *);
421:	long __arm64_sys_time32(const struct pt_regs *);
430:	long __arm64_sys_timer_gettime32(const struct pt_regs *);
429:	long __arm64_sys_timer_settime32(const struct pt_regs *);
123:	long __arm64_sys_timerfd_create(const struct pt_regs *);
126:	long __arm64_sys_timerfd_gettime(const struct pt_regs *);
127:	long __arm64_sys_timerfd_gettime32(const struct pt_regs *);
124:	long __arm64_sys_timerfd_settime(const struct pt_regs *);
125:	long __arm64_sys_timerfd_settime32(const struct pt_regs *);
418:	long __arm64_sys_uselib(const struct pt_regs *);
346:	long __arm64_sys_userfaultfd(const struct pt_regs *);
423:	long __arm64_sys_utime32(const struct pt_regs *);
441:	long __arm64_sys_utimensat_time32(const struct pt_regs *);
435:	long __arm64_sys_utimes_time32(const struct pt_regs *);
382:	long __arm64_sys_vm86(const struct pt_regs *);
380:	long __arm64_sys_vm86old(const struct pt_regs *);
20:	long sys_ni_syscall(void);

File kernel/sysctl.c:
694:	int do_proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(unsigned long *, unsigned int *, int, void *), void *);
1386:	int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
1605:	int proc_do_static_key(struct ctl_table *, int, void *, size_t *, loff_t *);
718:	int proc_dobool(struct ctl_table *, int, void *, size_t *, loff_t *);
738:	int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1284:	int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
884:	int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1340:	int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
1291:	int proc_dointvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1317:	int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
260:	int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
981:	int proc_dou8vec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
778:	int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
953:	int proc_douintvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1140:	int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1163:	int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
2473:	int sysctl_init_bases(void);
487:	static int __do_proc_dointvec(void *, struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(bool *, unsigned long *, int *, int, void *), void *);
428:	static int do_proc_dobool_conv(bool *, unsigned long *, int *, int, void *);
443:	static int do_proc_dointvec_conv(bool *, unsigned long *, int *, int, void *);
1171:	static int do_proc_dointvec_jiffies_conv(bool *, unsigned long *, int *, int, void *);
842:	static int do_proc_dointvec_minmax_conv(bool *, unsigned long *, int *, int, void *);
1220:	static int do_proc_dointvec_ms_jiffies_conv(bool *, unsigned long *, int *, int, void *);
1245:	static int do_proc_dointvec_ms_jiffies_minmax_conv(bool *, unsigned long *, int *, int, void *);
1197:	static int do_proc_dointvec_userhz_jiffies_conv(bool *, unsigned long *, int *, int, void *);
470:	static int do_proc_douintvec_conv(unsigned long *, unsigned int *, int, void *);
909:	static int do_proc_douintvec_minmax_conv(unsigned long *, unsigned int *, int, void *);
1116:	static int do_proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *, unsigned long, unsigned long);
1347:	static int proc_do_cad_pid(struct ctl_table *, int, void *, size_t *, loff_t *);
745:	static int proc_dointvec_minmax_warn_RT_change(struct ctl_table *, int, void *, size_t *, loff_t *);
342:	static int proc_get_long(char **, size_t *, unsigned long *, bool *, const char *, unsigned int, char *);
789:	static int proc_taint(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/task_work.c:
42:	int task_work_add(struct task_struct *, struct callback_head *, enum task_work_notify_mode);
133:	struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
86:	struct callback_head *task_work_cancel_match(struct task_struct *, bool (*)(struct callback_head *, void *), void *);
146:	void task_work_run(void);

File kernel/time/alarmtimer.c:
429:	int alarm_cancel(struct alarm *);
225:	ktime_t alarm_expires_remaining(const struct alarm *);
441:	u64 alarm_forward(struct alarm *, ktime_t, ktime_t);
473:	u64 alarm_forward_now(struct alarm *, ktime_t);
342:	void alarm_init(struct alarm *, enum alarmtimer_type, enum alarmtimer_restart (*)(struct alarm *, ktime_t));
385:	void alarm_restart(struct alarm *);
356:	void alarm_start(struct alarm *, ktime_t);
376:	void alarm_start_relative(struct alarm *, ktime_t);
405:	int alarm_try_to_cancel(struct alarm *);
687:	static ktime_t alarm_clock_get_ktime(clockid_t);
669:	static int alarm_clock_get_timespec(clockid_t, struct timespec64 *);
652:	static int alarm_clock_getres(const clockid_t, struct timespec64 *);
631:	static void alarm_timer_arm(struct k_itimer *, ktime_t, bool, bool);
703:	static int alarm_timer_create(struct k_itimer *);
583:	static s64 alarm_timer_forward(struct k_itimer *, ktime_t);
819:	static int alarm_timer_nsleep(const clockid_t, int, const struct timespec64 *);
570:	static void alarm_timer_rearm(struct k_itimer *);
595:	static ktime_t alarm_timer_remaining(struct k_itimer *, ktime_t);
606:	static int alarm_timer_try_to_cancel(struct k_itimer *);
619:	static void alarm_timer_wait_running(struct k_itimer *);
197:	static enum hrtimer_restart alarmtimer_fired(struct hrtimer *);
907:	static int alarmtimer_init(void);
319:	static int alarmtimer_resume(struct device *);
314:	static int alarmtimer_suspend(struct device *);
895:	static void get_boottime_timespec(struct timespec64 *);

File kernel/time/clockevents.c:
515:	int __clockevents_update_freq(struct clock_event_device *, u32);
85:	u64 clockevent_delta2ns(unsigned long, struct clock_event_device *);
504:	void clockevents_config_and_register(struct clock_event_device *, u32, unsigned long, unsigned long);
568:	void clockevents_exchange_device(struct clock_event_device *, struct clock_event_device *);
556:	void clockevents_handle_noop(struct clock_event_device *);
303:	int clockevents_program_event(struct clock_event_device *, ktime_t, bool);
443:	void clockevents_register_device(struct clock_event_device *);
602:	void clockevents_resume(void);
171:	void clockevents_shutdown(struct clock_event_device *);
590:	void clockevents_suspend(void);
147:	void clockevents_switch_state(struct clock_event_device *, enum clock_event_state);
181:	int clockevents_tick_resume(struct clock_event_device *);
428:	int clockevents_unbind_device(struct clock_event_device *, int);
540:	int clockevents_update_freq(struct clock_event_device *, u32);
632:	void tick_cleanup_dead_cpu(int);
620:	void tick_offline_cpu(unsigned int);
400:	static void __clockevents_unbind(void *);
471:	static void clockevents_config(struct clock_event_device *, u32);
769:	static int clockevents_init_sysfs(void);
670:	static ssize_t current_device_show(struct device *, struct device_attribute *, char *);
732:	static int tick_broadcast_init_sysfs(void);
748:	static int tick_init_sysfs(void);
687:	static ssize_t unbind_device_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/time/clocksource.c:
1156:	int __clocksource_register_scale(struct clocksource *, u32, u32);
1069:	void __clocksource_update_freq_scale(struct clocksource *, u32, u32);
885:	u64 clocks_calc_max_nsecs(u32, u32, u32, u64, u64 *);
47:	void clocks_calc_mult_shift(u32 *, u32 *, u32, u32, u32);
1202:	void clocksource_change_rating(struct clocksource *, int);
675:	void clocksource_mark_unstable(struct clocksource *);
831:	void clocksource_resume(void);
744:	void clocksource_start_suspend_timing(struct clocksource *, u64);
782:	u64 clocksource_stop_suspend_timing(struct clocksource *, u64);
819:	void clocksource_suspend(void);
849:	void clocksource_touch_watchdog(void);
1260:	int clocksource_unregister(struct clocksource *);
1294:	ssize_t sysfs_get_uname(const char *, char *, size_t);
949:	static void __clocksource_select(bool);
1382:	static ssize_t available_clocksource_show(struct device *, struct device_attribute *, char *);
1467:	static int boot_override_clock(char *);
1449:	static int boot_override_clocksource(char *);
1025:	static int clocksource_done_booting(void);
1221:	static int clocksource_unbind(struct clocksource *);
1281:	static ssize_t current_clocksource_show(struct device *, struct device_attribute *, char *);
1321:	static ssize_t current_clocksource_store(struct device *, struct device_attribute *, const char *, size_t);
1429:	static int init_clocksource_sysfs(void);
1348:	static ssize_t unbind_clocksource_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/time/hrtimer.c:
2118:	long __arm64_sys_nanosleep(const struct pt_regs *);
1457:	ktime_t __hrtimer_get_remaining(const struct hrtimer *, bool);
945:	void clock_was_set(unsigned int);
994:	void clock_was_set_delayed(void);
1604:	bool hrtimer_active(const struct hrtimer *);
1438:	int hrtimer_cancel(struct hrtimer *);
1037:	u64 hrtimer_forward(struct hrtimer *, ktime_t, ktime_t);
1479:	u64 hrtimer_get_next_event(void);
1589:	void hrtimer_init(struct hrtimer *, clockid_t, enum hrtimer_mode);
2007:	void hrtimer_init_sleeper(struct hrtimer_sleeper *, clockid_t, enum hrtimer_mode);
1781:	void hrtimer_interrupt(struct clock_event_device *);
2083:	long hrtimer_nanosleep(ktime_t, const enum hrtimer_mode, const clockid_t);
1502:	u64 hrtimer_next_event_without(const struct hrtimer *);
1894:	void hrtimer_run_queues(void);
1952:	void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *, enum hrtimer_mode);
1280:	void hrtimer_start_range_ns(struct hrtimer *, ktime_t, u64, const enum hrtimer_mode);
1316:	int hrtimer_try_to_cancel(struct hrtimer *);
2217:	int hrtimers_dead_cpu(unsigned int);
2264:	void hrtimers_init(void);
2160:	int hrtimers_prepare_cpu(unsigned int);
1004:	void hrtimers_resume_local(void);
327:	ktime_t ktime_add_safe(const ktime_t, const ktime_t);
2016:	int nanosleep_copyout(struct restart_block *, struct timespec64 *);
2382:	int schedule_hrtimeout(ktime_t *, const enum hrtimer_mode);
2348:	int schedule_hrtimeout_range(ktime_t *, u64, const enum hrtimer_mode);
2278:	int schedule_hrtimeout_range_clock(ktime_t *, u64, const enum hrtimer_mode, clockid_t);
569:	static ktime_t __hrtimer_get_next_event(struct hrtimer_cpu_base *, unsigned int);
1717:	static void __hrtimer_run_queues(struct hrtimer_cpu_base *, ktime_t, unsigned long, unsigned int);
983:	static void clock_was_set_work(struct work_struct *);
2035:	static int do_nanosleep(struct hrtimer_sleeper *, enum hrtimer_mode);
2070:	static long hrtimer_nanosleep_restart(struct restart_block *);
808:	static void hrtimer_reprogram(struct hrtimer *, bool);
1756:	static void hrtimer_run_softirq(struct softirq_action *);
594:	static ktime_t hrtimer_update_next_event(struct hrtimer_cpu_base *);
1188:	static void hrtimer_update_softirq_timer(struct hrtimer_cpu_base *, bool);
1931:	static enum hrtimer_restart hrtimer_wakeup(struct hrtimer *);
771:	static void retrigger_next_event(void *);
715:	static int setup_hrtimer_hres(char *);

File kernel/time/itimer.c:
113:	long __arm64_sys_getitimer(const struct pt_regs *);
332:	long __arm64_sys_setitimer(const struct pt_regs *);
156:	enum hrtimer_restart it_real_fn(struct hrtimer *);
168:	static void set_cpu_itimer(struct task_struct *, unsigned int, const struct itimerspec64 * const, struct itimerspec64 * const);

File kernel/time/jiffies.c:
71:	struct clocksource *clocksource_default_clock(void);
78:	int register_refined_jiffies(long);
64:	static int init_jiffies_clocksource(void);
16:	static u64 jiffies_read(struct clocksource *);

File kernel/time/namespace.c:
133:	struct time_namespace *copy_time_ns(unsigned long, struct user_namespace *, struct time_namespace *);
23:	ktime_t do_timens_ktime_to_host(clockid_t, ktime_t, struct timens_offsets *);
195:	struct page *find_timens_vvar_page(struct vm_area_struct *);
247:	void free_time_ns(struct time_namespace *);
380:	int proc_timens_set_offset(struct file *, struct task_struct *, struct proc_timens_offset *, int);
365:	void proc_timens_show_offsets(struct task_struct *, struct seq_file *);
298:	void timens_commit(struct task_struct *, struct time_namespace *);
326:	void timens_on_fork(struct nsproxy *, struct task_struct *);
277:	static struct ns_common *timens_for_children_get(struct task_struct *);
261:	static struct ns_common *timens_get(struct task_struct *);
304:	static int timens_install(struct nsset *, struct ns_common *);
342:	static struct user_namespace *timens_owner(struct ns_common *);
293:	static void timens_put(struct ns_common *);

File kernel/time/ntp.c:
762:	int __do_adjtimex(struct __kernel_timex *, const struct timespec64 *, s32 *, struct audit_ntp_data *);
351:	void ntp_clear(void);
380:	ktime_t ntp_get_next_leap(void);
1092:	void ntp_init(void);
369:	u64 ntp_tick_length(void);
400:	int second_overflow(time64_t);
1080:	static int ntp_tick_adj_setup(char *);

File kernel/time/posix-clock.c:
162:	int posix_clock_register(struct posix_clock *, struct device *);
182:	void posix_clock_unregister(struct posix_clock *);
226:	static int pc_clock_adjtime(clockid_t, struct __kernel_timex *);
269:	static int pc_clock_getres(clockid_t, struct timespec64 *);
250:	static int pc_clock_gettime(clockid_t, struct timespec64 *);
288:	static int pc_clock_settime(clockid_t, const struct timespec64 *);
72:	static long posix_clock_ioctl(struct file *, unsigned int, unsigned long);
108:	static int posix_clock_open(struct inode *, struct file *);
56:	static __poll_t posix_clock_poll(struct file *, poll_table *);
39:	static ssize_t posix_clock_read(struct file *, char *, size_t, loff_t *);
134:	static int posix_clock_release(struct inode *, struct file *);

File kernel/time/posix-cpu-timers.c:
1171:	void clear_posix_cputimers_work(struct task_struct *);
544:	void posix_cpu_timers_exit(struct task_struct *);
548:	void posix_cpu_timers_exit_group(struct task_struct *);
24:	void posix_cputimers_group_init(struct posix_cputimers *, u64);
1188:	void posix_cputimers_init_work(void);
1376:	void run_posix_cpu_timers(void);
1403:	void set_process_cpu_timer(struct task_struct *, unsigned int, u64 *, u64 *);
274:	void thread_group_sample_cputime(struct task_struct *, u64 *);
42:	int update_rlimit_cpu(struct task_struct *, unsigned long);
857:	static void collect_posix_cputimers(struct posix_cputimers *, u64 *, struct list_head *);
340:	static u64 cpu_clock_sample_group(const clockid_t, struct task_struct *, bool);
584:	static void cpu_timer_fire(struct k_itimer *);
1443:	static int do_cpu_nanosleep(const clockid_t, int, const struct timespec64 *);
359:	static int posix_cpu_clock_get(const clockid_t, struct timespec64 *);
160:	static int posix_cpu_clock_getres(const clockid_t, struct timespec64 *);
180:	static int posix_cpu_clock_set(const clockid_t, const struct timespec64 *);
1541:	static int posix_cpu_nsleep(const clockid_t, int, const struct timespec64 *);
1568:	static long posix_cpu_nsleep_restart(struct restart_block *);
387:	static int posix_cpu_timer_create(struct k_itimer *);
472:	static int posix_cpu_timer_del(struct k_itimer *);
789:	static void posix_cpu_timer_get(struct k_itimer *, struct itimerspec64 *);
1046:	static void posix_cpu_timer_rearm(struct k_itimer *);
624:	static int posix_cpu_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1163:	static void posix_cpu_timers_work(struct callback_head *);
1586:	static int process_cpu_clock_get(const clockid_t, struct timespec64 *);
1581:	static int process_cpu_clock_getres(const clockid_t, struct timespec64 *);
1596:	static int process_cpu_nsleep(const clockid_t, int, const struct timespec64 *);
1591:	static int process_cpu_timer_create(struct k_itimer *);
1606:	static int thread_cpu_clock_get(const clockid_t, struct timespec64 *);
1601:	static int thread_cpu_clock_getres(const clockid_t, struct timespec64 *);
1611:	static int thread_cpu_timer_create(struct k_itimer *);

File kernel/time/posix-timers.c:
1121:	long __arm64_sys_clock_adjtime(const struct pt_regs *);
1138:	long __arm64_sys_clock_getres(const struct pt_regs *);
1091:	long __arm64_sys_clock_gettime(const struct pt_regs *);
1254:	long __arm64_sys_clock_nanosleep(const struct pt_regs *);
1076:	long __arm64_sys_clock_settime(const struct pt_regs *);
577:	long __arm64_sys_timer_create(const struct pt_regs *);
1004:	long __arm64_sys_timer_delete(const struct pt_regs *);
777:	long __arm64_sys_timer_getoverrun(const struct pt_regs *);
738:	long __arm64_sys_timer_gettime(const struct pt_regs *);
938:	long __arm64_sys_timer_settime(const struct pt_regs *);
983:	int common_timer_del(struct k_itimer *);
670:	void common_timer_get(struct k_itimer *, struct itimerspec64 *);
858:	int common_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1109:	int do_clock_adjtime(const clockid_t, struct __kernel_timex *);
1058:	void exit_itimers(struct task_struct *);
336:	int posix_timer_event(struct k_itimer *, int);
313:	void posixtimer_rearm(struct kernel_siginfo *);
614:	static struct k_itimer *__lock_timer(timer_t, unsigned long *);
793:	static void common_hrtimer_arm(struct k_itimer *, ktime_t, bool, bool);
647:	static s64 common_hrtimer_forward(struct k_itimer *, ktime_t);
293:	static void common_hrtimer_rearm(struct k_itimer *);
640:	static ktime_t common_hrtimer_remaining(struct k_itimer *, ktime_t);
823:	static int common_hrtimer_try_to_cancel(struct k_itimer *);
1231:	static int common_nsleep(const clockid_t, int, const struct timespec64 *);
1241:	static int common_nsleep_timens(const clockid_t, int, const struct timespec64 *);
491:	static int common_timer_create(struct k_itimer *);
828:	static void common_timer_wait_running(struct k_itimer *);
498:	static int do_timer_create(clockid_t, struct sigevent *, timer_t *);
273:	static int init_posix_timers(void);
469:	static void k_itimer_rcu_free(struct callback_head *);
188:	static int posix_clock_realtime_adj(const clockid_t, struct __kernel_timex *);
182:	static int posix_clock_realtime_set(const clockid_t, const struct timespec64 *);
247:	static ktime_t posix_get_boottime_ktime(const clockid_t);
240:	static int posix_get_boottime_timespec(const clockid_t, struct timespec64 *);
234:	static int posix_get_coarse_res(const clockid_t, struct timespec64 *);
263:	static int posix_get_hrtimer_res(clockid_t, struct timespec64 *);
226:	static int posix_get_monotonic_coarse(clockid_t, struct timespec64 *);
204:	static ktime_t posix_get_monotonic_ktime(clockid_t);
212:	static int posix_get_monotonic_raw(clockid_t, struct timespec64 *);
197:	static int posix_get_monotonic_timespec(clockid_t, struct timespec64 *);
220:	static int posix_get_realtime_coarse(clockid_t, struct timespec64 *);
176:	static ktime_t posix_get_realtime_ktime(clockid_t);
170:	static int posix_get_realtime_timespec(clockid_t, struct timespec64 *);
258:	static ktime_t posix_get_tai_ktime(clockid_t);
252:	static int posix_get_tai_timespec(clockid_t, struct timespec64 *);
366:	static enum hrtimer_restart posix_timer_fn(struct hrtimer *);

File kernel/time/sched_clock.c:
227:	void generic_sched_clock_init(void);
83:	unsigned long long sched_clock(void);
72:	struct clock_read_data *sched_clock_read_begin(unsigned int *);
78:	int sched_clock_read_retry(unsigned int);
154:	void sched_clock_register(u64 (*)(void), int, unsigned long);
276:	void sched_clock_resume(void);
265:	int sched_clock_suspend(void);
52:	static u64 jiffy_sched_clock_read(void);
145:	static enum hrtimer_restart sched_clock_poll(struct hrtimer *);
290:	static int sched_clock_syscore_init(void);
258:	static u64 suspended_sched_clock_read(void);
128:	static void update_sched_clock(void);

File kernel/time/tick-broadcast-hrtimer.c:
106:	void tick_setup_hrtimer_broadcast(void);
99:	static enum hrtimer_restart bc_handler(struct hrtimer *);
43:	static int bc_set_next(ktime_t, struct clock_event_device *);
20:	static int bc_shutdown(struct clock_event_device *);

File kernel/time/tick-broadcast.c:
958:	int __tick_broadcast_oneshot_control(enum tick_broadcast_state);
1082:	void hotplug_cpu__broadcast_tick_pull(int);
437:	void tick_broadcast_control(enum tick_broadcast_mode);
1145:	void tick_broadcast_init(void);
536:	void tick_broadcast_offline(unsigned int);
1118:	int tick_broadcast_oneshot_active(void);
1126:	bool tick_broadcast_oneshot_available(void);
1066:	void tick_broadcast_switch_to_oneshot(void);
213:	int tick_broadcast_update_freq(struct clock_event_device *, u32);
625:	int tick_check_broadcast_expired(void);
665:	void tick_check_oneshot_broadcast_this_cpu(void);
246:	int tick_device_uses_broadcast(struct clock_event_device *, int);
56:	struct tick_device *tick_get_broadcast_device(void);
61:	struct cpumask *tick_get_broadcast_mask(void);
613:	struct cpumask *tick_get_broadcast_oneshot_mask(void);
68:	const struct clock_event_device *tick_get_wakeup_device(int);
162:	void tick_install_broadcast_device(struct clock_event_device *, int);
208:	int tick_is_broadcast_device(struct clock_event_device *);
327:	int tick_receive_broadcast(void);
578:	void tick_resume_broadcast(void);
570:	bool tick_resume_check_broadcast(void);
514:	void tick_set_periodic_handler(struct clock_event_device *, int);
548:	void tick_suspend_broadcast(void);
646:	static void tick_broadcast_set_event(struct clock_event_device *, int, ktime_t);
1019:	static void tick_broadcast_setup_oneshot(struct clock_event_device *);
345:	static bool tick_do_broadcast(struct cpumask *);
685:	static void tick_handle_oneshot_broadcast(struct clock_event_device *);
399:	static void tick_handle_periodic_broadcast(struct clock_event_device *);
106:	static void tick_oneshot_wakeup_handler(struct clock_event_device *);

File kernel/time/tick-common.c:
390:	int tick_broadcast_oneshot_control(enum tick_broadcast_state);
341:	void tick_check_new_device(struct clock_event_device *);
328:	bool tick_check_replacement(struct clock_event_device *, struct clock_event_device *);
63:	struct tick_device *tick_get_device(int);
107:	void tick_handle_periodic(struct clock_event_device *);
408:	void tick_handover_do_timer(void);
575:	void tick_init(void);
277:	void tick_install_replacement(struct clock_event_device *);
71:	int tick_is_oneshot_available(void);
505:	void tick_resume(void);
461:	void tick_resume_local(void);
152:	void tick_setup_periodic(struct clock_event_device *, int);
421:	void tick_shutdown(unsigned int);
491:	void tick_suspend(void);
447:	void tick_suspend_local(void);
85:	static void tick_periodic(int);
205:	static void tick_setup_device(struct tick_device *, struct clock_event_device *, int, const struct cpumask *);

File kernel/time/tick-oneshot.c:
124:	int tick_init_highres(void);
106:	int tick_oneshot_mode_active(void);
23:	int tick_program_event(ktime_t, int);
50:	void tick_resume_oneshot(void);
61:	void tick_setup_oneshot(struct clock_event_device *, void (*)(struct clock_event_device *), ktime_t);
73:	int tick_switch_to_oneshot(void (*)(struct clock_event_device *));

File kernel/time/tick-sched.c:
691:	u64 get_cpu_idle_time_us(int, u64 *);
732:	u64 get_cpu_iowait_time_us(int, u64 *);
1535:	void tick_cancel_sched_timer(int);
1577:	int tick_check_oneshot_change(int);
1551:	void tick_clock_notify(void);
41:	struct tick_sched *tick_get_tick_sched(int);
1452:	void tick_irq_enter(void);
1270:	unsigned long tick_nohz_get_idle_calls(void);
1258:	unsigned long tick_nohz_get_idle_calls_cpu(int);
1204:	ktime_t tick_nohz_get_next_hrtimer(void);
1219:	ktime_t tick_nohz_get_sleep_length(ktime_t *);
1147:	void tick_nohz_idle_enter(void);
1327:	void tick_nohz_idle_exit(void);
1186:	bool tick_nohz_idle_got_tick(void);
1299:	void tick_nohz_idle_restart_tick(void);
1132:	void tick_nohz_idle_retain_tick(void);
1127:	void tick_nohz_idle_stop_tick(void);
1173:	void tick_nohz_irq_exit(void);
603:	bool tick_nohz_tick_stopped(void);
610:	bool tick_nohz_tick_stopped_cpu(int);
1562:	void tick_oneshot_notify(void);
1506:	void tick_setup_sched_timer(void);
596:	static int setup_tick_nohz(char *);
1495:	static int skew_tick(char *);
57:	static void tick_do_update_jiffies64(ktime_t);
1357:	static void tick_nohz_handler(struct clock_event_device *);
785:	static ktime_t tick_nohz_next_event(struct tick_sched *, int);
959:	static void tick_nohz_restart_sched_tick(struct tick_sched *, ktime_t);
1466:	static enum hrtimer_restart tick_sched_timer(struct hrtimer *);

File kernel/time/time.c:
269:	long __arm64_sys_adjtimex(const struct pt_regs *);
140:	long __arm64_sys_gettimeofday(const struct pt_regs *);
199:	long __arm64_sys_settimeofday(const struct pt_regs *);
552:	unsigned long __msecs_to_jiffies(const unsigned int);
563:	unsigned long __usecs_to_jiffies(const unsigned int);
635:	unsigned long clock_t_to_jiffies(unsigned long);
169:	int do_sys_settimeofday64(const struct timespec64 *, const struct timezone *);
860:	int get_itimerspec64(struct itimerspec64 *, const struct __kernel_itimerspec *);
890:	int get_old_itimerspec32(struct itimerspec64 *, const struct old_itimerspec32 *);
842:	int get_old_timespec32(struct timespec64 *, const void *);
781:	int get_timespec64(struct timespec64 *, const struct __kernel_timespec *);
700:	u64 jiffies64_to_msecs(const u64);
690:	u64 jiffies64_to_nsecs(u64);
652:	u64 jiffies_64_to_clock_t(u64);
621:	clock_t jiffies_to_clock_t(unsigned long);
374:	unsigned int jiffies_to_msecs(const unsigned long);
605:	void jiffies_to_timespec64(const unsigned long, struct timespec64 *);
391:	unsigned int jiffies_to_usecs(const unsigned long);
431:	time64_t mktime64(const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int);
452:	struct __kernel_old_timeval ns_to_kernel_old_timeval(s64);
506:	struct timespec64 ns_to_timespec64(s64);
674:	u64 nsec_to_clock_t(u64);
754:	unsigned long nsecs_to_jiffies(u64);
723:	u64 nsecs_to_jiffies64(u64);
875:	int put_itimerspec64(const struct itimerspec64 *, struct __kernel_itimerspec *);
901:	int put_old_itimerspec32(const struct itimerspec64 *, struct old_itimerspec32 *);
851:	int put_old_timespec32(const struct timespec64 *, void *);
804:	int put_timespec64(const struct timespec64 *, struct __kernel_timespec *);
478:	void set_normalized_timespec64(struct timespec64 *, time64_t, s64);
765:	struct timespec64 timespec64_add_safe(const struct timespec64, const struct timespec64);
588:	unsigned long timespec64_to_jiffies(const struct timespec64 *);

File kernel/time/timeconv.c:
47:	void time64_to_tm(time64_t, int, struct tm *);

File kernel/time/timecounter.c:
79:	u64 timecounter_cyc2time(const struct timecounter *, u64);
8:	void timecounter_init(struct timecounter *, const struct cyclecounter *, u64);
52:	u64 timecounter_read(struct timecounter *);

File kernel/time/timekeeping.c:
1044:	time64_t __ktime_get_real_seconds(void);
2422:	int do_adjtimex(struct __kernel_timex *);
1312:	int do_settimeofday64(const struct timespec64 *);
2289:	void do_timer(unsigned long);
1205:	int get_device_system_crosststamp(int (*)(ktime_t *, struct system_counterval_t *, void *), void *, struct system_time_snapshot *, struct system_device_crosststamp *);
2246:	void getboottime64(struct timespec64 *);
836:	ktime_t ktime_get(void);
532:	u64 ktime_get_boot_fast_ns(void);
2255:	void ktime_get_coarse_real_ts64(struct timespec64 *);
2268:	void ktime_get_coarse_ts64(struct timespec64 *);
900:	ktime_t ktime_get_coarse_with_offset(enum tk_offsets);
633:	void ktime_get_fast_timestamps(struct ktime_timestamps *);
490:	u64 ktime_get_mono_fast_ns(void);
943:	ktime_t ktime_get_raw(void);
502:	u64 ktime_get_raw_fast_ns(void);
1517:	void ktime_get_raw_ts64(struct timespec64 *);
581:	u64 ktime_get_real_fast_ns(void);
1020:	time64_t ktime_get_real_seconds(void);
815:	void ktime_get_real_ts64(struct timespec64 *);
856:	u32 ktime_get_resolution_ns(void);
1001:	time64_t ktime_get_seconds(void);
1055:	void ktime_get_snapshot(struct system_time_snapshot *);
549:	u64 ktime_get_tai_fast_ns(void);
969:	void ktime_get_ts64(struct timespec64 *);
2308:	ktime_t ktime_get_update_offsets_now(unsigned int *, ktime_t *, ktime_t *, ktime_t *);
879:	ktime_t ktime_get_with_offset(enum tk_offsets);
925:	ktime_t ktime_mono_to_any(ktime_t, enum tk_offsets);
679:	int pvclock_gtod_register_notifier(struct notifier_block *);
699:	int pvclock_gtod_unregister_notifier(struct notifier_block *);
2408:	unsigned long random_get_entropy_fallback(void);
1584:	void read_persistent_clock64(struct timespec64 *);
1604:	void read_persistent_wall_and_boot_offset(struct timespec64 *, struct timespec64 *);
1632:	void timekeeping_init(void);
1558:	u64 timekeeping_max_deferment(void);
1500:	int timekeeping_notify(struct clocksource *);
1777:	void timekeeping_resume(void);
1839:	int timekeeping_suspend(void);
1539:	int timekeeping_valid_for_hres(void);
1422:	void timekeeping_warp_clock(void);
2229:	void update_wall_time(void);
1448:	static int change_clocksource(void *);
79:	static u64 dummy_clock_read(struct clocksource *);
2150:	static bool timekeeping_advance(enum timekeeping_adv_mode);
1914:	static int timekeeping_init_ops(void);
1362:	static int timekeeping_inject_offset(const struct timespec64 *);
757:	static void timekeeping_update(struct timekeeper *, unsigned int);
151:	static void tk_set_wall_to_mono(struct timekeeper *, struct timespec64);
309:	static void tk_setup_internals(struct timekeeper *, struct clocksource *);

File kernel/time/timer.c:
358:	unsigned long __round_jiffies(unsigned long, int);
384:	unsigned long __round_jiffies_relative(unsigned long, int);
445:	unsigned long __round_jiffies_up(unsigned long, int);
461:	unsigned long __round_jiffies_up_relative(unsigned long, int);
1240:	void add_timer(struct timer_list *);
1257:	void add_timer_on(struct timer_list *, int);
1921:	u64 get_next_timer_interrupt(unsigned long, u64);
865:	void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, const char *, struct lock_class_key *);
2306:	void init_timers(void);
1188:	int mod_timer(struct timer_list *, unsigned long);
1155:	int mod_timer_pending(struct timer_list *, unsigned long);
2317:	void msleep(unsigned int);
2331:	unsigned long msleep_interruptible(unsigned int);
408:	unsigned long round_jiffies(unsigned long);
429:	unsigned long round_jiffies_relative(unsigned long);
479:	unsigned long round_jiffies_up(unsigned long);
494:	unsigned long round_jiffies_up_relative(unsigned long);
2128:	long schedule_timeout(long);
2209:	long schedule_timeout_idle(long);
2184:	long schedule_timeout_interruptible(long);
2191:	long schedule_timeout_killable(long);
2198:	long schedule_timeout_uninterruptible(long);
1977:	void timer_clear_idle(void);
1359:	int timer_delete(struct timer_list *);
1626:	int timer_delete_sync(struct timer_list *);
1214:	int timer_reduce(struct timer_list *, unsigned long);
1380:	int timer_shutdown(struct timer_list *);
1668:	int timer_shutdown_sync(struct timer_list *);
2246:	int timers_dead_cpu(unsigned int);
2230:	int timers_prepare_cpu(unsigned int);
285:	void timers_update_nohz(void);
1442:	int try_to_del_timer_sync(struct timer_list *);
2064:	void update_process_times(int);
2354:	void usleep_range_state(unsigned long, unsigned long, unsigned int);
1013:	static int __mod_timer(struct timer_list *, unsigned long, unsigned int);
1807:	static unsigned long __next_timer_interrupt(struct timer_base *);
1995:	static void __run_timers(struct timer_base *);
1315:	static int __timer_delete(struct timer_list *, bool);
1406:	static int __try_to_del_timer_sync(struct timer_list *, bool);
533:	static int calc_wheel_index(unsigned long, unsigned long, unsigned long *);
2298:	static void init_timer_cpus(void);
628:	static void internal_add_timer(struct timer_base *, struct timer_list *);
2090:	static void process_timeout(struct timer_list *);
2031:	static void run_timer_softirq(struct softirq_action *);
240:	static int timer_migration_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
266:	static int timer_sysctl_init(void);
277:	static void timer_update_keys(struct work_struct *);

File kernel/time/timer_list.c:
265:	void sysrq_timer_list_show(void);
31:	static void SEQ_printf(struct seq_file *, const char *, ...);
349:	static int init_timer_list_procfs(void);
115:	static void print_cpu(struct seq_file *, int, u64);
178:	static void print_tickdevice(struct seq_file *, struct tick_device *, int);
331:	static void *timer_list_next(struct seq_file *, void *, loff_t *);
284:	static int timer_list_show(struct seq_file *, void *);
320:	static void *timer_list_start(struct seq_file *, loff_t *);
338:	static void timer_list_stop(struct seq_file *, void *);

File kernel/time/vsyscall.c:
72:	void update_vsyscall(struct timekeeper *);
123:	void update_vsyscall_tz(void);
145:	unsigned long vdso_update_begin(void);
163:	void vdso_update_end(unsigned long);

File kernel/trace/trace_clock.c:
57:	u64 trace_clock(void);
155:	u64 trace_clock_counter(void);
94:	u64 trace_clock_global(void);
70:	u64 trace_clock_jiffies(void);
32:	u64 trace_clock_local(void);

File kernel/ucount.c:
164:	struct ucounts *alloc_ucounts(struct user_namespace *, kuid_t);
305:	void dec_rlimit_put_ucounts(struct ucounts *, enum rlimit_type);
279:	bool dec_rlimit_ucounts(struct ucounts *, enum rlimit_type, long);
252:	void dec_ucount(struct ucounts *, enum ucount_type);
155:	struct ucounts *get_ucounts(struct ucounts *);
310:	long inc_rlimit_get_ucounts(struct ucounts *, enum rlimit_type);
262:	long inc_rlimit_ucounts(struct ucounts *, enum rlimit_type, long);
229:	struct ucounts *inc_ucount(struct user_namespace *, kuid_t, enum ucount_type);
342:	bool is_rlimit_overlimit(struct ucounts *, enum rlimit_type, unsigned long);
203:	void put_ucounts(struct ucounts *);
118:	void retire_userns_sysctls(struct user_namespace *);
94:	bool setup_userns_sysctls(struct user_namespace *);
35:	static int set_is_seen(struct ctl_table_set *);
30:	static struct ctl_table_set *set_lookup(struct ctl_table_root *);
40:	static int set_permissions(struct ctl_table_header *, struct ctl_table *);
357:	static int user_namespace_sysctl_init(void);

File kernel/umh.c:
297:	int __usermodehelper_disable(enum umh_disable_depth);
283:	void __usermodehelper_set_disable_depth(enum umh_disable_depth);
480:	int call_usermodehelper(const char *, char **, char **, int);
405:	int call_usermodehelper_exec(struct subprocess_info *, int);
359:	struct subprocess_info *call_usermodehelper_setup(const char *, char **, char **, gfp_t, int (*)(struct subprocess_info *, struct cred *), void (*)(struct subprocess_info *), void *);
243:	long usermodehelper_read_lock_wait(long);
213:	int usermodehelper_read_trylock(void);
270:	void usermodehelper_read_unlock(void);
67:	static int call_usermodehelper_exec_async(void *);
161:	static void call_usermodehelper_exec_work(struct work_struct *);
494:	static int proc_cap_handler(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/user.c:
190:	struct user_struct *alloc_uid(kuid_t);
167:	struct user_struct *find_user(kuid_t);
178:	void free_uid(struct user_struct *);
232:	static int uid_cache_init(void);

File kernel/user_namespace.c:
225:	void __put_user_ns(struct user_namespace *);
82:	int create_user_ns(struct cred *);
1309:	bool current_in_userns(const struct user_namespace *);
495:	gid_t from_kgid(struct user_namespace *, kgid_t);
519:	gid_t from_kgid_munged(struct user_namespace *, kgid_t);
562:	projid_t from_kprojid(struct user_namespace *, kprojid_t);
587:	projid_t from_kprojid_munged(struct user_namespace *, kprojid_t);
427:	uid_t from_kuid(struct user_namespace *, kuid_t);
452:	uid_t from_kuid_munged(struct user_namespace *, kuid_t);
1300:	bool in_userns(const struct user_namespace *, const struct user_namespace *);
476:	kgid_t make_kgid(struct user_namespace *, gid_t);
543:	kprojid_t make_kprojid(struct user_namespace *, projid_t);
408:	kuid_t make_kuid(struct user_namespace *, uid_t);
1370:	struct ns_common *ns_get_owner(struct ns_common *);
1125:	ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
1142:	ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
1202:	int proc_setgroups_show(struct seq_file *, void *);
1213:	ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
1108:	ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
176:	int unshare_userns(unsigned long, struct cred **);
1280:	bool userns_may_setgroups(const struct user_namespace *);
810:	static int cmp_extents_forward(const void *, const void *);
825:	static int cmp_extents_reverse(const void *, const void *);
245:	static int cmp_map_id(const void *, const void *);
196:	static void free_user_ns(struct work_struct *);
620:	static int gid_m_show(struct seq_file *, void *);
685:	static void *gid_m_start(struct seq_file *, loff_t *);
699:	static void *m_next(struct seq_file *, void *, loff_t *);
705:	static void m_stop(struct seq_file *, void *);
920:	static ssize_t map_write(struct file *, const char *, size_t, loff_t *, int, struct uid_gid_map *, struct uid_gid_map *);
1160:	static bool new_idmap_permitted(const struct file *, struct user_namespace *, int, struct uid_gid_map *);
641:	static int projid_m_show(struct seq_file *, void *);
692:	static void *projid_m_start(struct seq_file *, loff_t *);
843:	static int sort_idmaps(struct uid_gid_map *);
599:	static int uid_m_show(struct seq_file *, void *);
678:	static void *uid_m_start(struct seq_file *, loff_t *);
1403:	static int user_namespaces_init(void);
1320:	static struct ns_common *userns_get(struct task_struct *);
1336:	static int userns_install(struct nsset *, struct ns_common *);
1388:	static struct user_namespace *userns_owner(struct ns_common *);
1331:	static void userns_put(struct ns_common *);

File kernel/utsname.c:
89:	struct uts_namespace *copy_utsname(unsigned long, struct user_namespace *, struct uts_namespace *);
106:	void free_uts_ns(struct uts_namespace *);
169:	void uts_ns_init(void);
119:	static struct ns_common *utsns_get(struct task_struct *);
140:	static int utsns_install(struct nsset *, struct ns_common *);
155:	static struct user_namespace *utsns_owner(struct ns_common *);
135:	static void utsns_put(struct ns_common *);

File kernel/utsname_sysctl.c:
140:	void uts_proc_notify(enum uts_proc);
33:	static int proc_do_uts_string(struct ctl_table *, int, void *, size_t *, loff_t *);
148:	static int utsname_sysctl_init(void);

File kernel/workqueue.c:
2797:	void __flush_workqueue(struct workqueue_struct *);
6130:	void __warn_flushing_systemwide_wq(void);
4287:	struct workqueue_struct *alloc_workqueue(const char *, unsigned int, int, ...);
3390:	struct workqueue_attrs *alloc_workqueue_attrs(void);
4104:	int apply_workqueue_attrs(struct workqueue_struct *, const struct workqueue_attrs *);
3284:	bool cancel_delayed_work(struct delayed_work *);
3299:	bool cancel_delayed_work_sync(struct delayed_work *);
3262:	bool cancel_work(struct work_struct *);
3194:	bool cancel_work_sync(struct work_struct *);
4549:	bool current_is_workqueue_rescuer(void);
4533:	struct work_struct *current_work(void);
1638:	void delayed_work_timer_fn(struct timer_list *);
4406:	void destroy_workqueue(struct workqueue_struct *);
2959:	void drain_workqueue(struct workqueue_struct *);
3354:	int execute_in_process_context(work_func_t, struct execute_work *);
3212:	bool flush_delayed_work(struct delayed_work *);
3230:	bool flush_rcu_work(struct rcu_work *);
3092:	bool flush_work(struct work_struct *);
3374:	void free_workqueue_attrs(struct workqueue_attrs *);
5237:	void freeze_workqueues_begin(void);
5270:	bool freeze_workqueues_busy(void);
1728:	bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
4668:	void print_worker_info(const char *, struct task_struct *);
1690:	bool queue_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
1768:	bool queue_rcu_work(struct workqueue_struct *, struct rcu_work *);
1607:	bool queue_work_node(int, struct workqueue_struct *, struct work_struct *);
1536:	bool queue_work_on(int, struct workqueue_struct *, struct work_struct *);
3316:	int schedule_on_each_cpu(work_func_t);
4642:	void set_worker_desc(const char *, ...);
4893:	void show_all_workqueues(void);
4802:	void show_one_workqueue(struct workqueue_struct *);
5312:	void thaw_workqueues(void);
4609:	unsigned int work_busy(struct work_struct *);
5189:	long work_on_cpu(int, long (*)(void *), void *);
5212:	long work_on_cpu_safe(int, long (*)(void *), void *);
4574:	bool workqueue_congested(int, struct workqueue_struct *);
6076:	void workqueue_init(void);
5998:	void workqueue_init_early(void);
5145:	int workqueue_offline_cpu(unsigned int);
5118:	int workqueue_online_cpu(unsigned int);
5105:	int workqueue_prepare_cpu(unsigned int);
4503:	void workqueue_set_max_active(struct workqueue_struct *, int);
5383:	int workqueue_set_unbound_cpumask(struct cpumask *);
5723:	int workqueue_sysfs_register(struct workqueue_struct *);
4913:	void wq_worker_comm(char *, size_t, struct task_struct *);
954:	work_func_t wq_worker_last_func(struct task_struct *);
865:	void wq_worker_running(struct task_struct *);
892:	void wq_worker_sleeping(struct task_struct *);
3112:	static bool __cancel_work_timer(struct work_struct *, bool);
3059:	static bool __flush_work(struct work_struct *, bool);
1418:	static void __queue_work(int, struct workqueue_struct *, struct work_struct *);
3835:	static struct pool_workqueue *alloc_unbound_pwq(struct workqueue_struct *, const struct workqueue_attrs *);
3937:	static void apply_wqattrs_cleanup(struct apply_wqattrs_ctx *);
4024:	static void apply_wqattrs_commit(struct apply_wqattrs_ctx *);
3954:	static struct apply_wqattrs_ctx *apply_wqattrs_prepare(struct workqueue_struct *, const struct workqueue_attrs *);
2614:	static void check_flush_dependency(struct workqueue_struct *, struct work_struct *);
1926:	static struct worker *create_worker(struct worker_pool *);
3103:	static int cwt_wakefn(wait_queue_entry_t *, unsigned int, int, void *);
2750:	static bool flush_workqueue_prep_pwqs(struct workqueue_struct *, int, int);
2005:	static void idle_worker_timeout(struct timer_list *);
4259:	static int init_rescuer(struct workqueue_struct *);
3452:	static int init_worker_pool(struct worker_pool *);
1373:	static bool is_chained_work(struct workqueue_struct *);
5461:	static ssize_t max_active_show(struct device *, struct device_attribute *, char *);
5469:	static ssize_t max_active_store(struct device *, struct device_attribute *, const char *, size_t);
5452:	static ssize_t per_cpu_show(struct device *, struct device_attribute *, char *);
2053:	static void pool_mayday_timeout(struct timer_list *);
2181:	static void process_one_work(struct worker *, struct work_struct *);
1148:	static void put_pwq_unlocked(struct pool_workqueue *);
3566:	static void put_unbound_pool(struct worker_pool *);
3748:	static void pwq_adjust_max_active(struct pool_workqueue *);
1192:	static void pwq_dec_nr_in_flight(struct pool_workqueue *, unsigned long);
3702:	static void pwq_unbound_release_workfn(struct work_struct *);
3534:	static void rcu_free_pool(struct callback_head *);
3692:	static void rcu_free_pwq(struct callback_head *);
3519:	static void rcu_free_wq(struct callback_head *);
1748:	static void rcu_work_rcufn(struct callback_head *);
2482:	static int rescuer_thread(void *);
4726:	static void show_pwq(struct pool_workqueue *);
1258:	static int try_to_grab_pending(struct work_struct *, bool, unsigned long *);
5171:	static void work_for_cpu_fn(struct work_struct *);
996:	static void worker_clr_flags(struct worker *, unsigned int);
1792:	static void worker_enter_idle(struct worker *);
2378:	static int worker_thread(void *);
2641:	static void wq_barrier_func(struct work_struct *);
3879:	static bool wq_calc_node_cpumask(const struct workqueue_attrs *, int, int, cpumask_t *);
5566:	static ssize_t wq_cpumask_show(struct device *, struct device_attribute *, char *);
5579:	static ssize_t wq_cpumask_store(struct device *, struct device_attribute *, const char *, size_t);
5701:	static void wq_device_release(struct device *);
5513:	static ssize_t wq_nice_show(struct device *, struct device_attribute *, char *);
5541:	static ssize_t wq_nice_store(struct device *, struct device_attribute *, const char *, size_t);
5944:	static void wq_numa_init(void);
5603:	static ssize_t wq_numa_show(struct device *, struct device_attribute *, char *);
5617:	static ssize_t wq_numa_store(struct device *, struct device_attribute *, const char *, size_t);
5491:	static ssize_t wq_pool_ids_show(struct device *, struct device_attribute *, char *);
5689:	static int wq_sysfs_init(void);
5655:	static ssize_t wq_unbound_cpumask_show(struct device *, struct device_attribute *, char *);
5668:	static ssize_t wq_unbound_cpumask_store(struct device *, struct device_attribute *, const char *, size_t);
4140:	static void wq_update_unbound_numa(struct workqueue_struct *, int, bool);

File lib/../scripts/dtc/libfdt/fdt.c:
89:	int fdt_check_header(const void *);
223:	int fdt_check_node_offset_(const void *, int);
235:	int fdt_check_prop_offset_(const void *, int);
315:	const char *fdt_find_string_(const char *, int, const char *);
287:	int fdt_first_subnode(const void *, int);
83:	size_t fdt_header_size(const void *);
69:	size_t fdt_header_size_(uint32_t);
327:	int fdt_move(const void *, void *, int);
247:	int fdt_next_node(const void *, int, int *);
298:	int fdt_next_subnode(const void *, int);
162:	uint32_t fdt_next_tag(const void *, int, int *);
140:	const void *fdt_offset_ptr(const void *, int, unsigned int);
18:	int32_t fdt_ro_probe_(const void *);

File lib/../scripts/dtc/libfdt/fdt_ro.c:
114:	int fdt_find_max_phandle(const void *, uint32_t *);
338:	int fdt_first_property_offset(const void *, int);
142:	int fdt_generate_phandle(const void *, uint32_t *);
537:	const char *fdt_get_alias(const void *, const char *);
525:	const char *fdt_get_alias_namelen(const void *, const char *, int);
175:	int fdt_get_mem_rsv(const void *, int, uint64_t *, uint64_t *);
300:	const char *fdt_get_name(const void *, int, int *);
542:	int fdt_get_path(const void *, int, char *, int);
508:	uint32_t fdt_get_phandle(const void *, int);
443:	const struct fdt_property *fdt_get_property(const void *, int, const char *, int *);
378:	const struct fdt_property *fdt_get_property_by_offset(const void *, int, int *);
425:	const struct fdt_property *fdt_get_property_namelen(const void *, int, const char *, int, int *);
34:	const char *fdt_get_string(const void *, int, int *);
502:	const void *fdt_getprop(const void *, int, const char *, int *);
469:	const void *fdt_getprop_by_offset(const void *, int, const char **, int *);
451:	const void *fdt_getprop_namelen(const void *, int, const char *, int, int *);
348:	int fdt_next_property_offset(const void *, int);
823:	int fdt_node_check_compatible(const void *, int, const char *);
632:	int fdt_node_depth(const void *, int);
836:	int fdt_node_offset_by_compatible(const void *, int, const char *);
681:	int fdt_node_offset_by_phandle(const void *, uint32_t);
654:	int fdt_node_offset_by_prop_value(const void *, int, const char *, const void *, int);
189:	int fdt_num_mem_rsv(const void *);
644:	int fdt_parent_offset(const void *, int);
295:	int fdt_path_offset(const void *, const char *);
250:	int fdt_path_offset_namelen(const void *, const char *, int);
100:	const char *fdt_string(const void *, int);
706:	int fdt_stringlist_contains(const char *, int, const char *);
723:	int fdt_stringlist_count(const void *, int, const char *);
778:	const char *fdt_stringlist_get(const void *, int, const char *, int, int *);
748:	int fdt_stringlist_search(const void *, int, const char *, const char *);
244:	int fdt_subnode_offset(const void *, int, const char *);
225:	int fdt_subnode_offset_namelen(const void *, int, const char *, int);
594:	int fdt_supernode_atdepth_offset(const void *, int, int, int *);
394:	static const struct fdt_property *fdt_get_property_namelen_(const void *, int, const char *, int, int *, int *);

File lib/../scripts/dtc/libfdt/fdt_rw.c:
155:	int fdt_add_mem_rsv(void *, uint64_t, uint64_t);
377:	int fdt_add_subnode(void *, int, const char *);
333:	int fdt_add_subnode_namelen(void *, int, const char *, int);
291:	int fdt_appendprop(void *, int, const char *, const void *, int);
172:	int fdt_del_mem_rsv(void *, int);
382:	int fdt_del_node(void *, int);
318:	int fdt_delprop(void *, int, const char *);
419:	int fdt_open_into(const void *, void *, int);
487:	int fdt_pack(void *);
235:	int fdt_set_name(void *, int, const char *);
276:	int fdt_setprop(void *, int, const char *, const void *, int);
258:	int fdt_setprop_placeholder(void *, int, const char *, int, void **);
202:	static int fdt_add_property_(void *, int, const char *, int, struct fdt_property **);
13:	static int fdt_blocks_misordered_(const void *, int, int);
70:	static int fdt_splice_mem_rsv_(void *, struct fdt_reserve_entry *, int, int);
83:	static int fdt_splice_struct_(void *, void *, int, int);

File lib/../scripts/dtc/libfdt/fdt_wip.c:
73:	int fdt_node_end_offset_(void *, int);
83:	int fdt_nop_node(void *, int);
59:	int fdt_nop_property(void *, int, const char *);
33:	int fdt_setprop_inplace(void *, int, const char *, const void *, int);
13:	int fdt_setprop_inplace_namelen_partial(void *, int, const char *, int, uint32_t, const void *, int);

File lib/argv_split.c:
35:	void argv_free(char **);
60:	char **argv_split(gfp_t, const char *, int *);

File lib/base64.c:
73:	int base64_decode(const char *, int, u8 *);
32:	int base64_encode(const u8 *, int, char *);

File lib/bcd.c:
5:	unsigned int _bcd2bin(unsigned char);
11:	unsigned char _bin2bcd(unsigned int);

File lib/bitmap.c:
240:	bool __bitmap_and(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
278:	bool __bitmap_andnot(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
383:	void __bitmap_clear(unsigned long *, unsigned int, int);
84:	void __bitmap_complement(unsigned long *, const unsigned long *, unsigned int);
48:	bool __bitmap_equal(const unsigned long *, const unsigned long *, unsigned int);
306:	bool __bitmap_intersects(const unsigned long *, const unsigned long *, unsigned int);
256:	void __bitmap_or(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
64:	bool __bitmap_or_equal(const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
294:	void __bitmap_replace(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
362:	void __bitmap_set(unsigned long *, unsigned int, int);
148:	void __bitmap_shift_left(unsigned long *, const unsigned long *, unsigned int, unsigned int);
103:	void __bitmap_shift_right(unsigned long *, const unsigned long *, unsigned int, unsigned int);
321:	bool __bitmap_subset(const unsigned long *, const unsigned long *, unsigned int);
349:	unsigned int __bitmap_weight(const unsigned long *, unsigned int);
355:	unsigned int __bitmap_weight_and(const unsigned long *, const unsigned long *, unsigned int);
267:	void __bitmap_xor(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1386:	unsigned long *bitmap_alloc(unsigned int, gfp_t);
1399:	unsigned long *bitmap_alloc_node(unsigned int, gfp_t, int);
1355:	int bitmap_allocate_region(unsigned long *, unsigned int, int);
1051:	int bitmap_bitremap(int, const unsigned long *, const unsigned long *, int);
210:	void bitmap_cut(unsigned long *, const unsigned long *, unsigned int, unsigned int, unsigned int);
1313:	int bitmap_find_free_region(unsigned long *, unsigned int, int);
417:	unsigned long bitmap_find_next_zero_area_off(unsigned long *, unsigned long, unsigned long, unsigned int, unsigned long, unsigned long);
1209:	void bitmap_fold(unsigned long *, const unsigned long *, unsigned int, unsigned int);
1412:	void bitmap_free(const unsigned long *);
1457:	void bitmap_from_arr32(unsigned long *, const u32 *, unsigned int);
1170:	void bitmap_onto(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
906:	int bitmap_parse(const char *, unsigned int, unsigned long *, int);
457:	int bitmap_parse_user(const char *, unsigned int, unsigned long *, int);
807:	int bitmap_parselist(const char *, unsigned long *, int);
848:	int bitmap_parselist_user(const char *, unsigned int, unsigned long *, int);
613:	int bitmap_print_bitmask_to_buf(char *, const unsigned long *, int, loff_t, size_t);
631:	int bitmap_print_list_to_buf(char *, const unsigned long *, int, loff_t, size_t);
491:	int bitmap_print_to_pagebuf(bool, char *, const unsigned long *, int);
1338:	void bitmap_release_region(unsigned long *, unsigned int, int);
1003:	void bitmap_remap(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1480:	void bitmap_to_arr32(u32 *, const unsigned long *, unsigned int);
1393:	unsigned long *bitmap_zalloc(unsigned int, gfp_t);
1406:	unsigned long *bitmap_zalloc_node(unsigned int, gfp_t, int);
1425:	unsigned long *devm_bitmap_alloc(struct device *, unsigned int, gfp_t);
1443:	unsigned long *devm_bitmap_zalloc(struct device *, unsigned int, gfp_t);
1418:	static void devm_bitmap_free(void *);

File lib/bsearch.c:
31:	void *bsearch(const void *, const void *, size_t, size_t, cmp_func_t);

File lib/bucket_locks.c:
14:	int __alloc_bucket_spinlocks(spinlock_t **, unsigned int *, size_t, unsigned int, gfp_t, const char *, struct lock_class_key *);
50:	void free_bucket_spinlocks(spinlock_t *);

File lib/bug.c:
129:	void bug_get_file_line(struct bug_entry *, const char **, unsigned int *);
145:	struct bug_entry *find_bug(unsigned long);
220:	void generic_bug_clear_once(void);
156:	enum bug_trap_type report_bug(unsigned long, struct pt_regs *);

File lib/buildid.c:
126:	int build_id_parse(struct vm_area_struct *, unsigned char *, __u32 *);
172:	int build_id_parse_buf(const void *, unsigned char *, u32);

File lib/bust_spinlocks.c:
20:	void bust_spinlocks(int);

File lib/checksum.c:
125:	__wsum csum_partial(const void *, int, __wsum);
158:	__wsum csum_tcpudp_nofold(__be32, __be32, __u32, __u8, __wsum);
142:	__sum16 ip_compute_csum(const void *, int);

File lib/clz_ctz.c:
49:	int __clzdi2(long);
25:	int __clzsi2(int);
55:	int __ctzdi2(long);
18:	int __ctzsi2(int);

File lib/cmdline.c:
56:	int get_option(char **, int *);
107:	char *get_options(const char *, int, int *);
150:	unsigned long long memparse(const char *, char **);
227:	char *next_arg(char *, char **, char **);
203:	bool parse_option_str(const char *, const char *);

File lib/cpumask.c:
161:	unsigned int cpumask_any_and_distribute(const struct cpumask *, const struct cpumask *);
178:	unsigned int cpumask_any_distribute(const struct cpumask *);
123:	unsigned int cpumask_local_spread(unsigned int, int);
22:	unsigned int cpumask_next_wrap(int, const struct cpumask *, int, bool);

File lib/crc32.c:
199:	u32 __crc32c_le(u32, const unsigned char *, size_t);
277:	u32 __crc32c_le_shift(u32, size_t);
339:	u32 crc32_be(u32, const unsigned char *, size_t);
195:	u32 crc32_le(u32, const unsigned char *, size_t);
272:	u32 crc32_le_shift(u32, size_t);

File lib/crc8.c:
74:	u8 crc8(const u8 *, const u8 *, size_t, u8);
51:	void crc8_populate_lsb(u8 *, u8);
29:	void crc8_populate_msb(u8 *, u8);

File lib/crypto/aes.c:
309:	void aes_decrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
258:	void aes_encrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
185:	int aes_expandkey(struct crypto_aes_ctx *, const u8 *, unsigned int);

File lib/crypto/blake2s-generic.c:
44:	void blake2s_compress_generic(struct blake2s_state *, const u8 *, size_t, const u32);

File lib/crypto/blake2s.c:
48:	void blake2s_final(struct blake2s_state *, u8 *);
24:	void blake2s_update(struct blake2s_state *, const u8 *, size_t);
61:	static int blake2s_mod_init(void);

File lib/crypto/chacha.c:
76:	void chacha_block_generic(u32 *, u8 *, int);
103:	void hchacha_block_generic(const u32 *, u32 *, int);
16:	static void chacha_permute(u32 *, int);

File lib/crypto/memneq.c:
163:	unsigned long __crypto_memneq(const void *, const void *, size_t);

File lib/crypto/sha1.c:
130:	void sha1_init(__u32 *);
87:	void sha1_transform(__u32 *, const char *, __u32 *);

File lib/crypto/sha256.c:
193:	void sha224_final(struct sha256_state *, u8 *);
154:	void sha224_update(struct sha256_state *, const u8 *, unsigned int);
199:	void sha256(const u8 *, unsigned int, u8 *);
187:	void sha256_final(struct sha256_state *, u8 *);
122:	void sha256_update(struct sha256_state *, const u8 *, unsigned int);

File lib/crypto/utils.c:
17:	void __crypto_xor(u8 *, const u8 *, const u8 *, unsigned int);

File lib/debug_locks.c:
39:	int debug_locks_off(void);

File lib/dec_and_lock.c:
21:	int _atomic_dec_and_lock(atomic_t *, spinlock_t *);
37:	int _atomic_dec_and_lock_irqsave(atomic_t *, spinlock_t *, unsigned long *);
53:	int _atomic_dec_and_raw_lock(atomic_t *, raw_spinlock_t *);
68:	int _atomic_dec_and_raw_lock_irqsave(atomic_t *, raw_spinlock_t *, unsigned long *);

File lib/decompress.c:
63:	decompress_fn decompress_method(const unsigned char *, long, const char **);

File lib/decompress_bunzip2.c:
679:	int bunzip2(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
116:	static unsigned int get_bits(struct bunzip_data *, char);
156:	static int get_next_block(struct bunzip_data *);
621:	static long nofill(void *, unsigned long);
523:	static int read_bunzip(struct bunzip_data *, char *, int);
629:	static int start_bunzip(struct bunzip_data **, void *, long, long (*)(void *, unsigned long));

File lib/decompress_inflate.c:
42:	int __gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long, long *, void (*)(char *));
200:	int gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
36:	static long nofill(void *, unsigned long);

File lib/decompress_unlz4.c:
31:	int unlz4(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));

File lib/decompress_unlzma.c:
537:	int unlzma(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
335:	static int copy_bytes(struct writer *, uint32_t, int);
85:	static long nofill(void *, unsigned long);
298:	static uint8_t peek_old_byte(struct writer *, uint32_t);
347:	static int process_bit0(struct writer *, struct rc *, struct cstate *, uint16_t *, int, uint16_t *, int, uint32_t);
391:	static int process_bit1(struct writer *, struct rc *, struct cstate *, uint16_t *, int, uint16_t *);
201:	static void rc_bit_tree_decode(struct rc *, uint16_t *, int, int *);
188:	static int rc_direct_bit(struct rc *);
131:	static void rc_do_normalize(struct rc *);
174:	static int rc_get_bit(struct rc *, uint16_t *, int *);
154:	static int rc_is_bit_0(struct rc *, uint16_t *);
316:	static int write_byte(struct writer *, uint8_t);

File lib/decompress_unlzo.c:
41:	long parse_header(u8 *, long *, long);
97:	int unlzo(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));

File lib/decompress_unxz.c:
251:	int unxz(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));

File lib/decompress_unzstd.c:
331:	int unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
163:	static int __unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long, long *, void (*)(char *));
123:	static int decompress_single(const u8 *, long, u8 *, long, long *, void (*)(char *));
88:	static int handle_zstd_error(size_t, void (*)(char *));

File lib/devmem_is_allowed.c:
20:	int devmem_is_allowed(unsigned long);

File lib/devres.c:
579:	int devm_arch_io_reserve_memtype_wc(struct device *, resource_size_t, resource_size_t);
534:	int devm_arch_phys_wc_add(struct device *, unsigned long, unsigned long);
69:	void *devm_ioremap(struct device *, resource_size_t, resource_size_t);
16:	void devm_ioremap_release(struct device *, void *);
185:	void *devm_ioremap_resource(struct device *, const struct resource *);
201:	void *devm_ioremap_resource_wc(struct device *, const struct resource *);
84:	void *devm_ioremap_uc(struct device *, resource_size_t, resource_size_t);
99:	void *devm_ioremap_wc(struct device *, resource_size_t, resource_size_t);
113:	void devm_iounmap(struct device *, void *);
237:	void *devm_of_iomap(struct device *, struct device_node *, int, resource_size_t *);
122:	static void *__devm_ioremap_resource(struct device *, const struct resource *, enum devm_ioremap_type);
562:	static void devm_arch_io_free_memtype_wc_release(struct device *, void *);
520:	static void devm_arch_phys_ac_add_release(struct device *, void *);
21:	static int devm_ioremap_match(struct device *, void *, void *);

File lib/dump_stack.c:
111:	void dump_stack(void);
97:	void dump_stack_lvl(const char *);
55:	void dump_stack_print_info(const char *);
30:	void dump_stack_set_arch_desc(const char *, ...);
80:	void show_regs_print_info(const char *);

File lib/errname.c:
217:	const char *errname(int);

File lib/errseq.c:
145:	int errseq_check(errseq_t *, errseq_t);
175:	int errseq_check_and_advance(errseq_t *, errseq_t *);
123:	errseq_t errseq_sample(errseq_t *);
59:	errseq_t errseq_set(errseq_t *, int);

File lib/extable.c:
112:	const struct exception_table_entry *search_extable(const struct exception_table_entry *, const size_t, unsigned long);
63:	void sort_extable(struct exception_table_entry *, struct exception_table_entry *);
91:	static int cmp_ex_search(const void *, const void *);
51:	static int cmp_ex_sort(const void *, const void *);
27:	static void swap_ex(void *, void *, int);

File lib/find_bit.c:
144:	unsigned long __find_nth_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
151:	unsigned long __find_nth_andnot_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
138:	unsigned long __find_nth_bit(const unsigned long *, unsigned long, unsigned long);
110:	unsigned long _find_first_and_bit(const unsigned long *, const unsigned long *, unsigned long);
99:	unsigned long _find_first_bit(const unsigned long *, unsigned long);
123:	unsigned long _find_first_zero_bit(const unsigned long *, unsigned long);
186:	unsigned long _find_last_bit(const unsigned long *, unsigned long);
159:	unsigned long _find_next_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
168:	unsigned long _find_next_andnot_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
131:	unsigned long _find_next_bit(const unsigned long *, unsigned long, unsigned long);
177:	unsigned long _find_next_zero_bit(const unsigned long *, unsigned long, unsigned long);
205:	unsigned long find_next_clump8(unsigned long *, const unsigned long *, unsigned long, unsigned long);

File lib/flex_proportions.c:
216:	void __fprop_add_percpu(struct fprop_global *, struct fprop_local_percpu *, long);
256:	void __fprop_add_percpu_max(struct fprop_global *, struct fprop_local_percpu *, int, long);
127:	void __fprop_inc_single(struct fprop_global *, struct fprop_local_single *);
224:	void fprop_fraction_percpu(struct fprop_global *, struct fprop_local_percpu *, unsigned long *, unsigned long *);
135:	void fprop_fraction_single(struct fprop_global *, struct fprop_local_single *, unsigned long *, unsigned long *);
51:	void fprop_global_destroy(struct fprop_global *);
38:	int fprop_global_init(struct fprop_global *, gfp_t);
180:	void fprop_local_destroy_percpu(struct fprop_local_percpu *);
98:	void fprop_local_destroy_single(struct fprop_local_single *);
168:	int fprop_local_init_percpu(struct fprop_local_percpu *, gfp_t);
90:	int fprop_local_init_single(struct fprop_local_single *);
64:	bool fprop_new_period(struct fprop_global *, int);
185:	static void fprop_reflect_period_percpu(struct fprop_global *, struct fprop_local_percpu *);

File lib/genalloc.c:
829:	struct gen_pool *devm_gen_pool_create(struct device *, int, int, const char *);
184:	int gen_pool_add_owner(struct gen_pool *, unsigned long, phys_addr_t, size_t, int, void *);
277:	unsigned long gen_pool_alloc_algo_owner(struct gen_pool *, size_t, genpool_algo_t, void *, void **);
580:	size_t gen_pool_avail(struct gen_pool *);
754:	unsigned long gen_pool_best_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
153:	struct gen_pool *gen_pool_create(int, int);
242:	void gen_pool_destroy(struct gen_pool *);
341:	void *gen_pool_dma_alloc(struct gen_pool *, size_t, dma_addr_t *);
362:	void *gen_pool_dma_alloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
395:	void *gen_pool_dma_alloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
419:	void *gen_pool_dma_zalloc(struct gen_pool *, size_t, dma_addr_t *);
440:	void *gen_pool_dma_zalloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
466:	void *gen_pool_dma_zalloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
647:	unsigned long gen_pool_first_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
666:	unsigned long gen_pool_first_fit_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
729:	unsigned long gen_pool_first_fit_order_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
694:	unsigned long gen_pool_fixed_alloc(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
531:	void gen_pool_for_each_chunk(struct gen_pool *, void (*)(struct gen_pool *, struct gen_pool_chunk *, void *), void *);
487:	void gen_pool_free_owner(struct gen_pool *, unsigned long, size_t, void **);
806:	struct gen_pool *gen_pool_get(struct device *, const char *);
553:	bool gen_pool_has_addr(struct gen_pool *, unsigned long, size_t);
622:	void gen_pool_set_algo(struct gen_pool *, genpool_algo_t, void *);
599:	size_t gen_pool_size(struct gen_pool *);
217:	phys_addr_t gen_pool_virt_to_phys(struct gen_pool *, unsigned long);
879:	struct gen_pool *of_gen_pool_get(struct device_node *, const char *, int);
121:	static unsigned long bitmap_clear_ll(unsigned long *, unsigned long, unsigned long);
785:	static int devm_gen_pool_match(struct device *, void *, void *);
780:	static void devm_gen_pool_release(struct device *, void *);

File lib/generic-radix-tree.c:
230:	void __genradix_free(struct __genradix *);
162:	void *__genradix_iter_peek(struct genradix_iter *, struct __genradix *, size_t);
217:	int __genradix_prealloc(struct __genradix *, size_t, gfp_t);
54:	void *__genradix_ptr(struct __genradix *, size_t);
104:	void *__genradix_ptr_alloc(struct __genradix *, size_t, gfp_t);
204:	static void genradix_free_recurse(struct genradix_node *, unsigned int);

File lib/glob.c:
40:	bool glob_match(const char *, const char *);

File lib/hexdump.c:
87:	char *bin2hex(char *, const void *, size_t);
63:	int hex2bin(u8 *, const char *, size_t);
127:	int hex_dump_to_buffer(const void *, size_t, int, int, char *, size_t, bool);
46:	int hex_to_bin(unsigned char);
261:	void print_hex_dump(const char *, const char *, int, int, int, const void *, size_t, bool);

File lib/hweight.c:
30:	unsigned int __sw_hweight16(unsigned int);
13:	unsigned int __sw_hweight32(unsigned int);
47:	unsigned long __sw_hweight64(__u64);
39:	unsigned int __sw_hweight8(unsigned int);

File lib/idr.c:
380:	int ida_alloc_range(struct ida *, unsigned int, unsigned int, gfp_t);
541:	void ida_destroy(struct ida *);
487:	void ida_free(struct ida *, unsigned int);
79:	int idr_alloc(struct idr *, void *, int, int, gfp_t);
117:	int idr_alloc_cyclic(struct idr *, void *, int, int, gfp_t);
33:	int idr_alloc_u32(struct idr *, void *, u32 *, unsigned long, gfp_t);
172:	void *idr_find(const struct idr *, unsigned long);
195:	int idr_for_each(const struct idr *, int (*)(int, void *, void *), void *);
264:	void *idr_get_next(struct idr *, int *);
227:	void *idr_get_next_ul(struct idr *, unsigned long *);
152:	void *idr_remove(struct idr *, unsigned long);
290:	void *idr_replace(struct idr *, void *, unsigned long);

File lib/iomap_copy.c:
42:	void __ioread32_copy(void *, const void *, size_t);
19:	void __iowrite32_copy(void *, const void *, size_t);
63:	void __iowrite64_copy(void *, const void *, size_t);

File lib/iov_iter.c:
1787:	ssize_t __import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *, bool);
627:	size_t _copy_from_iter(void *, size_t, struct iov_iter *);
643:	size_t _copy_from_iter_nocache(void *, size_t, struct iov_iter *);
521:	size_t _copy_to_iter(const void *, size_t, struct iov_iter *);
743:	size_t copy_page_from_iter(struct page *, size_t, size_t, struct iov_iter *);
809:	size_t copy_page_from_iter_atomic(struct page *, unsigned int, size_t, struct iov_iter *);
712:	size_t copy_page_to_iter(struct page *, size_t, size_t, struct iov_iter *);
1541:	size_t csum_and_copy_from_iter(void *, size_t, __wsum *, struct iov_iter *);
1562:	size_t csum_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1685:	const void *dup_iter(struct iov_iter *, struct iov_iter *, gfp_t);
352:	size_t fault_in_iov_iter_readable(const struct iov_iter *, size_t);
395:	size_t fault_in_iov_iter_writeable(const struct iov_iter *, size_t);
1596:	size_t hash_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1856:	ssize_t import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *);
1865:	int import_single_range(int, void *, size_t, struct iovec *, struct iov_iter *);
895:	void iov_iter_advance(struct iov_iter *, size_t);
1237:	unsigned long iov_iter_alignment(const struct iov_iter *);
1013:	void iov_iter_bvec(struct iov_iter *, unsigned int, const struct bio_vec *, unsigned long, size_t);
1084:	void iov_iter_discard(struct iov_iter *, unsigned int, size_t);
1268:	unsigned long iov_iter_gap_alignment(const struct iov_iter *);
1496:	ssize_t iov_iter_get_pages(struct iov_iter *, struct page **, size_t, unsigned int, size_t *, unsigned int);
1509:	ssize_t iov_iter_get_pages2(struct iov_iter *, struct page **, size_t, unsigned int, size_t *);
1516:	ssize_t iov_iter_get_pages_alloc(struct iov_iter *, struct page ***, size_t, size_t *, unsigned int);
1534:	ssize_t iov_iter_get_pages_alloc2(struct iov_iter *, struct page ***, size_t, size_t *);
424:	void iov_iter_init(struct iov_iter *, unsigned int, const struct iovec *, unsigned long, size_t);
1154:	bool iov_iter_is_aligned(const struct iov_iter *, unsigned int, unsigned int);
997:	void iov_iter_kvec(struct iov_iter *, unsigned int, const struct kvec *, unsigned long, size_t);
1653:	int iov_iter_npages(const struct iov_iter *, int);
1029:	void iov_iter_pipe(struct iov_iter *, unsigned int, struct pipe_inode_info *, size_t);
1892:	void iov_iter_restore(struct iov_iter *, struct iov_iter_state *);
915:	void iov_iter_revert(struct iov_iter *, size_t);
985:	size_t iov_iter_single_seg_count(const struct iov_iter *);
1060:	void iov_iter_xarray(struct iov_iter *, unsigned int, struct xarray *, loff_t, size_t);
796:	size_t iov_iter_zero(size_t, struct iov_iter *);
1752:	struct iovec *iovec_from_user(const struct iovec *, unsigned long, unsigned long, struct iovec *, bool);
1432:	static ssize_t __iov_iter_get_pages_alloc(struct iov_iter *, struct page ***, size_t, unsigned int, size_t *, unsigned int);
273:	static struct page *append_pipe(struct iov_iter *, size_t, unsigned int *);
1635:	static int bvec_npages(const struct iov_iter *, int);
305:	static size_t copy_page_to_iter_pipe(struct page *, size_t, size_t, struct iov_iter *);
458:	static size_t copy_pipe_to_iter(const void *, size_t, struct iov_iter *);
175:	static int copyin(void *, const void *, size_t);
164:	static int copyout(void *, const void *, size_t);
489:	static size_t csum_and_copy_to_pipe_iter(const void *, size_t, struct iov_iter *, __wsum *);
482:	static __wsum csum_and_memcpy(void *, const void *, size_t, __wsum, size_t);
1120:	static bool iov_iter_aligned_bvec(const struct iov_iter *, unsigned int, unsigned int);
1096:	static bool iov_iter_aligned_iovec(const struct iov_iter *, unsigned int, unsigned int);
1217:	static unsigned long iov_iter_alignment_bvec(const struct iov_iter *);
1195:	static unsigned long iov_iter_alignment_iovec(const struct iov_iter *);
856:	static void iov_iter_bvec_advance(struct iov_iter *, size_t);
876:	static void iov_iter_iovec_advance(struct iov_iter *, size_t);
1615:	static int iov_npages(const struct iov_iter *, int);
1369:	static ssize_t iter_xarray_get_pages(struct iov_iter *, struct page ***, size_t, unsigned int, size_t *);
830:	static void pipe_advance(struct iov_iter *, size_t);
1312:	static ssize_t pipe_get_pages(struct iov_iter *, struct page ***, size_t, unsigned int, size_t *);
770:	static size_t pipe_zero(size_t, struct iov_iter *);
196:	static bool sanity(const struct iov_iter *);
1296:	static int want_pages_array(struct page ***, size_t, size_t, unsigned int);

File lib/is_single_threaded.c:
15:	bool current_is_single_threaded(void);

File lib/kasprintf.c:
53:	char *kasprintf(gfp_t, const char *, ...);
15:	char *kvasprintf(gfp_t, const char *, va_list);
43:	const char *kvasprintf_const(gfp_t, const char *, va_list);

File lib/kfifo.c:
24:	int __kfifo_alloc(struct __kfifo *, unsigned int, size_t, gfp_t);
562:	void __kfifo_dma_in_finish_r(struct __kfifo *, unsigned int, size_t);
356:	unsigned int __kfifo_dma_in_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
548:	unsigned int __kfifo_dma_in_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
585:	void __kfifo_dma_out_finish_r(struct __kfifo *, size_t);
369:	unsigned int __kfifo_dma_out_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
571:	unsigned int __kfifo_dma_out_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
55:	void __kfifo_free(struct __kfifo *);
210:	int __kfifo_from_user(struct __kfifo *, const void *, unsigned long, unsigned int *);
499:	int __kfifo_from_user_r(struct __kfifo *, const void *, unsigned long, unsigned int *, size_t);
113:	unsigned int __kfifo_in(struct __kfifo *, const void *, unsigned int);
438:	unsigned int __kfifo_in_r(struct __kfifo *, const void *, unsigned int, size_t);
66:	int __kfifo_init(struct __kfifo *, void *, unsigned int, size_t);
432:	unsigned int __kfifo_len_r(struct __kfifo *, size_t);
382:	unsigned int __kfifo_max_r(unsigned int, size_t);
166:	unsigned int __kfifo_out(struct __kfifo *, void *, unsigned int);
152:	unsigned int __kfifo_out_peek(struct __kfifo *, void *, unsigned int);
464:	unsigned int __kfifo_out_peek_r(struct __kfifo *, void *, unsigned int, size_t);
476:	unsigned int __kfifo_out_r(struct __kfifo *, void *, unsigned int, size_t);
490:	void __kfifo_skip_r(struct __kfifo *, size_t);
270:	int __kfifo_to_user(struct __kfifo *, void *, unsigned long, unsigned int *);
523:	int __kfifo_to_user_r(struct __kfifo *, void *, unsigned long, unsigned int *, size_t);
175:	static unsigned long kfifo_copy_from_user(struct __kfifo *, const void *, unsigned int, unsigned int, unsigned int *);
236:	static unsigned long kfifo_copy_to_user(struct __kfifo *, void *, unsigned int, unsigned int, unsigned int *);
295:	static int setup_sgl_buf(struct scatterlist *, void *, int, unsigned int);

File lib/klist.c:
162:	void klist_add_before(struct klist_node *, struct klist_node *);
146:	void klist_add_behind(struct klist_node *, struct klist_node *);
122:	void klist_add_head(struct klist_node *, struct klist *);
134:	void klist_add_tail(struct klist_node *, struct klist *);
228:	void klist_del(struct klist_node *);
84:	void klist_init(struct klist *, void (*)(struct klist_node *), void (*)(struct klist_node *));
311:	void klist_iter_exit(struct klist_iter *);
297:	void klist_iter_init(struct klist *, struct klist_iter *);
280:	void klist_iter_init_node(struct klist *, struct klist_iter *, struct klist_node *);
375:	struct klist_node *klist_next(struct klist_iter *);
265:	int klist_node_attached(struct klist_node *);
333:	struct klist_node *klist_prev(struct klist_iter *);
238:	void klist_remove(struct klist_node *);
204:	static int klist_dec_and_del(struct klist_node *);

File lib/kobject.c:
1042:	const struct kobj_ns_type_operations *kobj_child_ns_ops(const struct kobject *);
1057:	bool kobj_ns_current_may_mount(enum kobj_ns_type);
1110:	void kobj_ns_drop(enum kobj_ns_type, void *);
1070:	void *kobj_ns_grab_current(enum kobj_ns_type);
1097:	const void *kobj_ns_initial(enum kobj_ns_type);
1084:	const void *kobj_ns_netlink(enum kobj_ns_type, struct sock *);
1052:	const struct kobj_ns_type_operations *kobj_ns_ops(const struct kobject *);
1003:	int kobj_ns_type_register(const struct kobj_ns_type_operations *);
1030:	int kobj_ns_type_registered(enum kobj_ns_type);
394:	int kobject_add(struct kobject *, struct kobject *, const char *, ...);
773:	struct kobject *kobject_create_and_add(const char *, struct kobject *);
603:	void kobject_del(struct kobject *);
620:	struct kobject *kobject_get(struct kobject *);
48:	void kobject_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
139:	char *kobject_get_path(const struct kobject *, gfp_t);
633:	struct kobject *kobject_get_unless_zero(struct kobject *);
317:	void kobject_init(struct kobject *, const struct kobj_type *);
432:	int kobject_init_and_add(struct kobject *, const struct kobj_type *, struct kobject *, const char *, ...);
522:	int kobject_move(struct kobject *, struct kobject *);
28:	const void *kobject_namespace(const struct kobject *);
714:	void kobject_put(struct kobject *);
458:	int kobject_rename(struct kobject *, const char *);
292:	int kobject_set_name(struct kobject *, const char *, ...);
249:	int kobject_set_name_vargs(struct kobject *, const char *, va_list);
980:	struct kset *kset_create_and_add(const char *, const struct kset_uevent_ops *, struct kobject *);
883:	struct kobject *kset_find_obj(struct kset *, const char *);
796:	void kset_init(struct kset *);
841:	int kset_register(struct kset *);
865:	void kset_unregister(struct kset *);
570:	static void __kobject_del(struct kobject *);
726:	static void dynamic_kobj_release(struct kobject *);
804:	static ssize_t kobj_attr_show(struct kobject *, struct attribute *, char *);
816:	static ssize_t kobj_attr_store(struct kobject *, struct attribute *, const char *, size_t);
169:	static void kobj_kset_leave(struct kobject *);
193:	static int kobject_add_internal(struct kobject *);
910:	static void kset_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
902:	static void kset_release(struct kobject *);

File lib/kobject_uevent.c:
654:	int add_uevent_var(struct kobj_uevent_env *, const char *, ...);
192:	int kobject_synth_uevent(struct kobject *, const char *, size_t);
640:	int kobject_uevent(struct kobject *, enum kobject_action);
457:	int kobject_uevent_env(struct kobject *, enum kobject_action, char **);
419:	static void zap_modalias_env(struct kobj_uevent_env *);

File lib/kstrtox.c:
197:	int _kstrtol(const char *, unsigned int, long *);
181:	int _kstrtoul(const char *, unsigned int, unsigned long *);
91:	unsigned int _parse_integer(const char *, unsigned int, unsigned long long *);
26:	const char *_parse_integer_fixup_radix(const char *, unsigned int *);
52:	unsigned int _parse_integer_limit(const char *, unsigned int, unsigned long long *, size_t);
348:	int kstrtobool(const char *, bool *);
395:	int kstrtobool_from_user(const char *, size_t, bool *);
259:	int kstrtoint(const char *, unsigned int, int *);
427:	int kstrtoint_from_user(const char *, size_t, unsigned int, int *);
425:	int kstrtol_from_user(const char *, size_t, unsigned int, long *);
156:	int kstrtoll(const char *, unsigned int, long long *);
423:	int kstrtoll_from_user(const char *, size_t, unsigned int, long long *);
291:	int kstrtos16(const char *, unsigned int, s16 *);
429:	int kstrtos16_from_user(const char *, size_t, unsigned int, s16 *);
323:	int kstrtos8(const char *, unsigned int, s8 *);
431:	int kstrtos8_from_user(const char *, size_t, unsigned int, s8 *);
275:	int kstrtou16(const char *, unsigned int, u16 *);
428:	int kstrtou16_from_user(const char *, size_t, unsigned int, u16 *);
307:	int kstrtou8(const char *, unsigned int, u8 *);
430:	int kstrtou8_from_user(const char *, size_t, unsigned int, u8 *);
228:	int kstrtouint(const char *, unsigned int, unsigned int *);
426:	int kstrtouint_from_user(const char *, size_t, unsigned int, unsigned int *);
424:	int kstrtoul_from_user(const char *, size_t, unsigned int, unsigned long *);
132:	int kstrtoull(const char *, unsigned int, unsigned long long *);
422:	int kstrtoull_from_user(const char *, size_t, unsigned int, unsigned long long *);

File lib/list_sort.c:
185:	void list_sort(void *, struct list_head *, list_cmp_func_t);

File lib/llist.c:
26:	bool llist_add_batch(struct llist_node *, struct llist_node *, struct llist_head *);
53:	struct llist_node *llist_del_first(struct llist_head *);
75:	struct llist_node *llist_reverse_order(struct llist_node *);

File lib/lockref.c:
42:	void lockref_get(struct lockref *);
172:	int lockref_get_not_dead(struct lockref *);
61:	int lockref_get_not_zero(struct lockref *);
160:	void lockref_mark_dead(struct lockref *);
89:	int lockref_put_not_zero(struct lockref *);
137:	int lockref_put_or_lock(struct lockref *);
119:	int lockref_put_return(struct lockref *);

File lib/logic_pio.c:
128:	struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *);
36:	int logic_pio_register_range(struct logic_pio_hwaddr *);
173:	resource_size_t logic_pio_to_hwaddr(unsigned long);
210:	unsigned long logic_pio_trans_cpuaddr(resource_size_t);
192:	unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *, resource_size_t, resource_size_t);
112:	void logic_pio_unregister_range(struct logic_pio_hwaddr *);

File lib/lz4/lz4_decompress.c:
478:	int LZ4_decompress_fast(const char *, char *, int);
640:	int LZ4_decompress_fast_continue(LZ4_streamDecode_t *, const char *, char *, int);
697:	int LZ4_decompress_fast_usingDict(const char *, char *, int, const char *, int);
460:	int LZ4_decompress_safe(const char *, char *, int, int);
587:	int LZ4_decompress_safe_continue(LZ4_streamDecode_t *, const char *, char *, int, int);
469:	int LZ4_decompress_safe_partial(const char *, char *, int, int, int);
679:	int LZ4_decompress_safe_usingDict(const char *, char *, int, int, const char *, int);
564:	int LZ4_setStreamDecode(LZ4_streamDecode_t *, const char *, int);
521:	static int LZ4_decompress_fast_extDict(const char *, char *, int, const void *, size_t);
510:	static int LZ4_decompress_safe_forceExtDict(const char *, char *, int, int, const void *, size_t);
488:	static int LZ4_decompress_safe_withPrefix64k(const char *, char *, int, int);
498:	static int LZ4_decompress_safe_withSmallPrefix(const char *, char *, int, int, size_t);

File lib/lzo/lzo1x_decompress_safe.c:
39:	int lzo1x_decompress_safe(const unsigned char *, size_t, unsigned char *, size_t *);

File lib/maple_tree.c:
6391:	void __mt_destroy(struct maple_tree *);
6138:	void maple_tree_init(void);
5745:	void mas_destroy(struct ma_state *);
5233:	int mas_empty_area(struct ma_state *, unsigned long, unsigned long, unsigned long);
5289:	int mas_empty_area_rev(struct ma_state *, unsigned long, unsigned long, unsigned long);
6083:	void *mas_erase(struct ma_state *);
5794:	int mas_expected_entries(struct ma_state *, unsigned long);
5994:	void *mas_find(struct ma_state *, unsigned long);
6038:	void *mas_find_rev(struct ma_state *, unsigned long);
248:	bool mas_is_err(struct ma_state *);
5855:	void *mas_next(struct ma_state *, unsigned long);
6115:	bool mas_nomem(struct ma_state *, gfp_t);
5976:	void mas_pause(struct ma_state *);
5720:	int mas_preallocate(struct ma_state *, void *, gfp_t);
5910:	void *mas_prev(struct ma_state *, unsigned long);
5639:	void *mas_store(struct ma_state *, void *);
5676:	int mas_store_gfp(struct ma_state *, void *, gfp_t);
5700:	void mas_store_prealloc(struct ma_state *, void *);
5041:	void *mas_walk(struct ma_state *);
6427:	void *mt_find(struct maple_tree *, unsigned long *, unsigned long);
6486:	void *mt_find_after(struct maple_tree *, unsigned long *, unsigned long);
5887:	void *mt_next(struct maple_tree *, unsigned long, unsigned long);
5951:	void *mt_prev(struct maple_tree *, unsigned long, unsigned long);
6291:	int mtree_alloc_range(struct maple_tree *, unsigned long *, void *, unsigned long, unsigned long, unsigned long, gfp_t);
6327:	int mtree_alloc_rrange(struct maple_tree *, unsigned long *, void *, unsigned long, unsigned long, unsigned long, gfp_t);
6409:	void mtree_destroy(struct maple_tree *);
6370:	void *mtree_erase(struct maple_tree *, unsigned long);
6284:	int mtree_insert(struct maple_tree *, unsigned long, void *, gfp_t);
6249:	int mtree_insert_range(struct maple_tree *, unsigned long, unsigned long, void *, gfp_t);
6152:	void *mtree_load(struct maple_tree *, unsigned long);
6231:	int mtree_store(struct maple_tree *, unsigned long, void *, gfp_t);
6194:	int mtree_store_range(struct maple_tree *, unsigned long, unsigned long, void *, gfp_t);
1837:	static int mab_calc_split(struct ma_state *, struct maple_big_node *, unsigned char *, unsigned long);
1987:	static void mab_mas_cp(struct maple_big_node *, unsigned char, unsigned char, struct ma_state *, bool);
1211:	static void mas_alloc_nodes(struct ma_state *, gfp_t);
1049:	static int mas_ascend(struct ma_state *);
5136:	static void mas_awalk(struct ma_state *, unsigned long);
1453:	static unsigned long mas_leaf_max_gap(struct ma_state *);
1965:	static void mas_leaf_set_meta(struct ma_state *, struct maple_node *, unsigned long *, enum maple_type, unsigned char);
3913:	static int mas_new_root(struct ma_state *, void *);
4737:	static void *mas_next_entry(struct ma_state *, unsigned long);
4569:	static int mas_next_node(struct ma_state *, struct maple_node *, unsigned long);
2210:	static bool mas_next_sibling(struct ma_state *);
4848:	static void *mas_prev_entry(struct ma_state *, unsigned long);
4478:	static int mas_prev_node(struct ma_state *, unsigned long);
3398:	static bool mas_push_data(struct ma_state *, int, struct maple_subtree_state *, bool);
1696:	static void mas_replace(struct ma_state *, bool);
3626:	static int mas_root_expand(struct ma_state *, void *);
2975:	static int mas_spanning_rebalance(struct ma_state *, struct maple_subtree_state *, unsigned char);
3286:	static bool mas_split_final_node(struct maple_subtree_state *, struct ma_state *, int);
3834:	static void *mas_state_walk(struct ma_state *);
2116:	static void mas_store_b_node(struct ma_wr_state *, struct maple_big_node *, unsigned char);
1644:	static void mas_update_gap(struct ma_state *);
2751:	static void mas_wmb_replace(struct ma_state *, struct ma_topiary *, struct ma_topiary *);
4329:	static void mas_wr_modify(struct ma_wr_state *);
3960:	static int mas_wr_spanning_store(struct ma_wr_state *);
4379:	static void *mas_wr_store_entry(struct ma_wr_state *);
3759:	static bool mas_wr_walk(struct ma_wr_state *);
3736:	static void mas_wr_walk_descend(struct ma_wr_state *);
2544:	static void mast_ascend_free(struct maple_subtree_state *);
3319:	static void mast_fill_bnode(struct maple_subtree_state *, struct ma_state *, unsigned char);
2430:	static bool mast_spanning_rebalance(struct maple_subtree_state *);
3365:	static void mast_split_data(struct maple_subtree_state *, struct ma_state *, unsigned char);
2329:	static void mast_topiary(struct maple_subtree_state *);
5531:	static void mt_destroy_walk(struct maple_enode *, unsigned char, bool);
166:	static void mt_free_rcu(struct callback_head *);
5461:	static void mt_free_walk(struct callback_head *);

File lib/math/div64.c:
179:	u32 iter_div_u64_rem(u64, u32, u64 *);
186:	u64 mul_u64_u64_div_u64(u64, u64, u64);

File lib/math/gcd.c:
23:	unsigned long gcd(unsigned long, unsigned long);

File lib/math/int_pow.c:
19:	u64 int_pow(u64, unsigned int);

File lib/math/int_sqrt.c:
20:	unsigned long int_sqrt(unsigned long);

File lib/math/lcm.c:
8:	unsigned long lcm(unsigned long, unsigned long);
17:	unsigned long lcm_not_zero(unsigned long, unsigned long);

File lib/math/rational.c:
35:	void rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);

File lib/math/reciprocal_div.c:
17:	struct reciprocal_value reciprocal_value(u32);
35:	struct reciprocal_value_adv reciprocal_value_adv(u32, u8);

File lib/memweight.c:
11:	size_t memweight(const void *, size_t);

File lib/once.c:
60:	void __do_once_done(bool *, struct static_key_true *, unsigned long *, struct module *);
90:	void __do_once_sleepable_done(bool *, struct static_key_true *, struct module *);
72:	bool __do_once_sleepable_start(bool *);
42:	bool __do_once_start(bool *, unsigned long *);
14:	static void once_deferred(struct work_struct *);

File lib/parser.c:
264:	int match_hex(substring_t *, int *);
191:	int match_int(substring_t *, int *);
248:	int match_octal(substring_t *, int *);
358:	char *match_strdup(const substring_t *);
334:	size_t match_strlcpy(char *, const substring_t *, size_t);
106:	int match_token(char *, const struct match_token *, substring_t *);
232:	int match_u64(substring_t *, u64 *);
207:	int match_uint(substring_t *, unsigned int *);
282:	bool match_wildcard(const char *, const char *);

File lib/percpu-refcount.c:
130:	void percpu_ref_exit(struct percpu_ref *);
63:	int percpu_ref_init(struct percpu_ref *, percpu_ref_func_t *, unsigned int, gfp_t);
410:	bool percpu_ref_is_zero(struct percpu_ref *);
383:	void percpu_ref_kill_and_confirm(struct percpu_ref *, percpu_ref_func_t *);
441:	void percpu_ref_reinit(struct percpu_ref *);
463:	void percpu_ref_resurrect(struct percpu_ref *);
306:	void percpu_ref_switch_to_atomic(struct percpu_ref *, percpu_ref_func_t *);
328:	void percpu_ref_switch_to_atomic_sync(struct percpu_ref *);
353:	void percpu_ref_switch_to_percpu(struct percpu_ref *);
265:	static void __percpu_ref_switch_mode(struct percpu_ref *, percpu_ref_func_t *);
209:	static void percpu_ref_noop_confirm_switch(struct percpu_ref *);
167:	static void percpu_ref_switch_to_atomic_rcu(struct callback_head *);

File lib/percpu_counter.c:
238:	int __percpu_counter_compare(struct percpu_counter *, s64, s32);
158:	int __percpu_counter_init(struct percpu_counter *, s64, gfp_t, struct lock_class_key *);
141:	s64 __percpu_counter_sum(struct percpu_counter *);
82:	void percpu_counter_add_batch(struct percpu_counter *, s64, s32);
182:	void percpu_counter_destroy(struct percpu_counter *);
60:	void percpu_counter_set(struct percpu_counter *, s64);
152:	s64 percpu_counter_sum_all(struct percpu_counter *);
107:	void percpu_counter_sync(struct percpu_counter *);
204:	static int compute_batch_value(unsigned int);
212:	static int percpu_counter_cpu_dead(unsigned int);
261:	static int percpu_counter_startup(void);

File lib/plist.c:
73:	void plist_add(struct plist_node *, struct plist_head *);
112:	void plist_del(struct plist_node *, struct plist_head *);
145:	void plist_requeue(struct plist_node *, struct plist_head *);

File lib/radix-tree.c:
745:	void *__radix_tree_lookup(const struct xarray *, unsigned long, struct xa_node **, void ***);
873:	void __radix_tree_replace(struct xarray *, struct xa_node *, void **, void *);
1558:	void idr_destroy(struct idr *);
1475:	void **idr_get_free(struct xarray *, struct radix_tree_iter *, gfp_t, unsigned long);
1468:	void idr_preload(gfp_t);
1444:	void *radix_tree_delete(struct xarray *, unsigned long);
1412:	void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
1261:	unsigned int radix_tree_gang_lookup(const struct xarray *, void **, unsigned long, unsigned int);
1301:	unsigned int radix_tree_gang_lookup_tag(const struct xarray *, void **, unsigned long, unsigned int, unsigned int);
1342:	unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *, void ***, unsigned long, unsigned int, unsigned int);
1593:	void radix_tree_init(void);
701:	int radix_tree_insert(struct xarray *, unsigned long, void *);
1393:	void radix_tree_iter_delete(struct xarray *, struct radix_tree_iter *, void **);
929:	void radix_tree_iter_replace(struct xarray *, const struct radix_tree_iter *, void **, void *);
1134:	void **radix_tree_iter_resume(void **, struct radix_tree_iter *);
1058:	void radix_tree_iter_tag_clear(struct xarray *, const struct radix_tree_iter *, unsigned int);
815:	void *radix_tree_lookup(const struct xarray *, unsigned long);
792:	void **radix_tree_lookup_slot(const struct xarray *, unsigned long);
376:	int radix_tree_maybe_preload(gfp_t);
1153:	void **radix_tree_next_chunk(const struct xarray *, struct radix_tree_iter *, unsigned int);
288:	void radix_tree_node_rcu_free(struct callback_head *);
363:	int radix_tree_preload(gfp_t);
912:	void radix_tree_replace_slot(struct xarray *, void **, void *);
1027:	void *radix_tree_tag_clear(struct xarray *, unsigned long, unsigned int);
1079:	int radix_tree_tag_get(const struct xarray *, unsigned long, unsigned int);
965:	void *radix_tree_tag_set(struct xarray *, unsigned long, unsigned int);
1455:	int radix_tree_tagged(const struct xarray *, unsigned int);
1363:	static bool __radix_tree_delete(struct xarray *, struct xa_node *, void **);
320:	static int __radix_tree_preload(gfp_t, unsigned int);
541:	static bool delete_node(struct xarray *, struct xa_node *);
1577:	static int radix_tree_cpu_dead(unsigned int);
406:	static int radix_tree_extend(struct xarray *, gfp_t, unsigned long, unsigned int);
231:	static struct xa_node *radix_tree_node_alloc(gfp_t, struct xa_node *, struct xarray *, unsigned int, unsigned int, unsigned int, unsigned int);
1569:	static void radix_tree_node_ctor(void *);

File lib/random32.c:
74:	void prandom_bytes_state(struct rnd_state *, void *, size_t);
110:	void prandom_seed_full_state(struct rnd_state *);
52:	u32 prandom_u32_state(struct rnd_state *);

File lib/ratelimit.c:
27:	int ___ratelimit(struct ratelimit_state *, const char *);

File lib/rbtree.c:
410:	void __rb_erase_color(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
456:	void __rb_insert_augmented(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
440:	void rb_erase(struct rb_node *, struct rb_root *);
466:	struct rb_node *rb_first(const struct rb_root *);
623:	struct rb_node *rb_first_postorder(const struct rb_root *);
434:	void rb_insert_color(struct rb_node *, struct rb_root *);
479:	struct rb_node *rb_last(const struct rb_root *);
492:	struct rb_node *rb_next(const struct rb_node *);
604:	struct rb_node *rb_next_postorder(const struct rb_node *);
524:	struct rb_node *rb_prev(const struct rb_node *);
553:	void rb_replace_node(struct rb_node *, struct rb_node *, struct rb_root *);
570:	void rb_replace_node_rcu(struct rb_node *, struct rb_node *, struct rb_root *);

File lib/refcount.c:
144:	bool refcount_dec_and_lock(refcount_t *, spinlock_t *);
172:	bool refcount_dec_and_lock_irqsave(refcount_t *, spinlock_t *, unsigned long *);
113:	bool refcount_dec_and_mutex_lock(refcount_t *, struct mutex *);
55:	bool refcount_dec_if_one(refcount_t *);
74:	bool refcount_dec_not_one(refcount_t *);
13:	void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);

File lib/rhashtable.c:
1178:	struct rhash_lock_head **__rht_bucket_nested(const struct bucket_table *, unsigned int);
1172:	void rhashtable_destroy(struct rhashtable *);
1134:	void rhashtable_free_and_destroy(struct rhashtable *, void (*)(void *, void *), void *);
1019:	int rhashtable_init(struct rhashtable *, const struct rhashtable_params *);
633:	void *rhashtable_insert_slow(struct rhashtable *, const void *, struct rhash_head *);
669:	void rhashtable_walk_enter(struct rhashtable *, struct rhashtable_iter *);
691:	void rhashtable_walk_exit(struct rhashtable_iter *);
863:	void *rhashtable_walk_next(struct rhashtable_iter *);
902:	void *rhashtable_walk_peek(struct rhashtable_iter *);
718:	int rhashtable_walk_start_check(struct rhashtable_iter *);
934:	void rhashtable_walk_stop(struct rhashtable_iter *);
1090:	int rhltable_init(struct rhltable *, const struct rhashtable_params *);
1207:	struct rhash_lock_head **rht_bucket_nested(const struct bucket_table *, unsigned int);
1218:	struct rhash_lock_head **rht_bucket_nested_insert(struct rhashtable *, struct bucket_table *, unsigned int);
791:	static void *__rhashtable_walk_find_next(struct rhashtable_iter *);
175:	static struct bucket_table *bucket_table_alloc(struct rhashtable *, size_t, gfp_t);
117:	static void bucket_table_free_rcu(struct callback_head *);
75:	static void nested_table_free(union nested_table *, unsigned int);
972:	static u32 rhashtable_jhash2(const void *, u32, u32);
354:	static int rhashtable_rehash_alloc(struct rhashtable *, struct bucket_table *, unsigned int);
410:	static void rht_deferred_worker(struct work_struct *);

File lib/sbitmap.c:
486:	int __sbitmap_queue_get(struct sbitmap_queue *);
492:	unsigned long __sbitmap_queue_get_batch(struct sbitmap_queue *, int, unsigned int *);
739:	void sbitmap_add_wait_queue(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
292:	bool sbitmap_any_bit_set(const struct sbitmap *);
353:	void sbitmap_bitmap_show(struct sbitmap *, struct seq_file *);
751:	void sbitmap_del_wait_queue(struct sbq_wait *);
773:	void sbitmap_finish_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
221:	int sbitmap_get(struct sbitmap *);
275:	int sbitmap_get_shallow(struct sbitmap *, unsigned long);
83:	int sbitmap_init_node(struct sbitmap *, unsigned int, int, gfp_t, int, bool, bool);
761:	void sbitmap_prepare_to_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *, int);
656:	void sbitmap_queue_clear(struct sbitmap_queue *, unsigned int, unsigned int);
622:	void sbitmap_queue_clear_batch(struct sbitmap_queue *, int, int *, int);
546:	int sbitmap_queue_get_shallow(struct sbitmap_queue *, unsigned int);
422:	int sbitmap_queue_init_node(struct sbitmap_queue *, unsigned int, int, bool, gfp_t, int);
555:	void sbitmap_queue_min_shallow_depth(struct sbitmap_queue *, unsigned int);
463:	void sbitmap_queue_recalculate_wake_batch(struct sbitmap_queue *, unsigned int);
479:	void sbitmap_queue_resize(struct sbitmap_queue *, unsigned int);
705:	void sbitmap_queue_show(struct sbitmap_queue *, struct seq_file *);
684:	void sbitmap_queue_wake_all(struct sbitmap_queue *);
595:	void sbitmap_queue_wake_up(struct sbitmap_queue *, int);
123:	void sbitmap_resize(struct sbitmap *, unsigned int);
331:	void sbitmap_show(struct sbitmap *, struct seq_file *);
325:	unsigned int sbitmap_weight(const struct sbitmap *);

File lib/scatterlist.c:
282:	int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int, struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
193:	void __sg_free_table(struct sg_table *, unsigned int, unsigned int, sg_free_fn *, unsigned int);
763:	bool __sg_page_iter_dma_next(struct sg_dma_page_iter *);
739:	bool __sg_page_iter_next(struct sg_page_iter *);
722:	void __sg_page_iter_start(struct sg_page_iter *, struct scatterlist *, unsigned int, unsigned long);
451:	int sg_alloc_append_table_from_pages(struct sg_append_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, unsigned int, gfp_t);
371:	int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
575:	int sg_alloc_table_from_pages_segment(struct sg_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, gfp_t);
958:	size_t sg_copy_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t, bool);
1004:	size_t sg_copy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t);
1021:	size_t sg_copy_to_buffer(struct scatterlist *, unsigned int, void *, size_t);
241:	void sg_free_append_table(struct sg_append_table *);
254:	void sg_free_table(struct sg_table *);
138:	void sg_init_one(struct scatterlist *, const void *, unsigned int);
124:	void sg_init_table(struct scatterlist *, unsigned int);
101:	struct scatterlist *sg_last(struct scatterlist *, unsigned int);
883:	bool sg_miter_next(struct sg_mapping_iter *);
847:	bool sg_miter_skip(struct sg_mapping_iter *, off_t);
796:	void sg_miter_start(struct sg_mapping_iter *, struct scatterlist *, unsigned int, unsigned int);
919:	void sg_miter_stop(struct sg_mapping_iter *);
45:	int sg_nents(struct scatterlist *);
68:	int sg_nents_for_len(struct scatterlist *, u64);
23:	struct scatterlist *sg_next(struct scatterlist *);
1039:	size_t sg_pcopy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t, off_t);
1057:	size_t sg_pcopy_to_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t);
1073:	size_t sg_zero_buffer(struct scatterlist *, unsigned int, size_t, off_t);
662:	struct scatterlist *sgl_alloc(unsigned long long, gfp_t, unsigned int *);
608:	struct scatterlist *sgl_alloc_order(unsigned long long, unsigned int, bool, gfp_t, unsigned int *);
714:	void sgl_free(struct scatterlist *);
682:	void sgl_free_n_order(struct scatterlist *, int, int);
704:	void sgl_free_order(struct scatterlist *, int);
807:	static bool sg_miter_get_next_page(struct sg_mapping_iter *);

File lib/seq_buf.c:
114:	int seq_buf_bprintf(struct seq_buf *, const char *, const u32 *);
361:	int seq_buf_hex_dump(struct seq_buf *, const char *, int, int, int, const void *, size_t, bool);
270:	int seq_buf_path(struct seq_buf *, const struct path *, const char *);
40:	int seq_buf_print_seq(struct seq_file *, struct seq_buf *);
83:	int seq_buf_printf(struct seq_buf *, const char *, ...);
170:	int seq_buf_putc(struct seq_buf *, unsigned char);
194:	int seq_buf_putmem(struct seq_buf *, const void *, unsigned int);
222:	int seq_buf_putmem_hex(struct seq_buf *, const void *, unsigned int);
142:	int seq_buf_puts(struct seq_buf *, const char *);
311:	int seq_buf_to_user(struct seq_buf *, char *, int);
57:	int seq_buf_vprintf(struct seq_buf *, const char *, va_list);

File lib/show_mem.c:
11:	void __show_mem(unsigned int, nodemask_t *, int);

File lib/siphash.c:
279:	u32 __hsiphash_unaligned(const void *, size_t, const hsiphash_key_t *);
79:	u64 __siphash_unaligned(const void *, size_t, const siphash_key_t *);
316:	u32 hsiphash_1u32(const u32, const hsiphash_key_t *);
330:	u32 hsiphash_2u32(const u32, const u32, const hsiphash_key_t *);
348:	u32 hsiphash_3u32(const u32, const u32, const u32, const hsiphash_key_t *);
369:	u32 hsiphash_4u32(const u32, const u32, const u32, const u32, const hsiphash_key_t *);
207:	u64 siphash_1u32(const u32, const siphash_key_t *);
116:	u64 siphash_1u64(const u64, const siphash_key_t *);
133:	u64 siphash_2u64(const u64, const u64, const siphash_key_t *);
215:	u64 siphash_3u32(const u32, const u32, const u32, const siphash_key_t *);
155:	u64 siphash_3u64(const u64, const u64, const u64, const siphash_key_t *);
183:	u64 siphash_4u64(const u64, const u64, const u64, const u64, const siphash_key_t *);

File lib/smp_processor_id.c:
64:	void __this_cpu_preempt_check(const char *);
58:	unsigned int debug_smp_processor_id(void);
12:	static unsigned int check_preemption_disabled(const char *, const char *);

File lib/sort.c:
281:	void sort(void *, size_t, size_t, cmp_func_t, swap_func_t);
210:	void sort_r(void *, size_t, size_t, cmp_r_func_t, swap_r_func_t, const void *);

File lib/stackdepot.c:
419:	depot_stack_handle_t __stack_depot_save(unsigned long *, unsigned int, unsigned int, gfp_t, bool);
194:	int stack_depot_early_init(void);
364:	unsigned int stack_depot_fetch(depot_stack_handle_t, unsigned long **);
82:	unsigned int stack_depot_get_extra_bits(depot_stack_handle_t);
231:	int stack_depot_init(void);
344:	void stack_depot_print(depot_stack_handle_t);
529:	depot_stack_handle_t stack_depot_save(unsigned long *, unsigned int, gfp_t);
325:	int stack_depot_snprint(depot_stack_handle_t, char *, size_t, int);
186:	void stack_depot_want_early_init(void);
173:	static int is_stack_depot_disabled(char *);

File lib/string.c:
713:	int bcmp(const void *, const void *, size_t);
838:	void *memchr_inv(const void *, int, size_t);
730:	void *memscan(void *, int, size_t);
556:	void *memset16(uint16_t *, uint16_t, size_t);
578:	void *memset32(uint32_t *, uint32_t, size_t);
600:	void *memset64(uint64_t *, uint64_t, size_t);
207:	char *stpcpy(char * restrict, const char * restrict);
65:	int strcasecmp(const char *, const char *);
216:	char *strcat(char *, const char *);
346:	char *strchrnul(const char *, int);
79:	char *strcpy(char *, const char *);
462:	__kernel_size_t strcspn(const char *, const char *);
250:	size_t strlcat(char *, const char *, size_t);
107:	size_t strlcpy(char *, const char *, size_t);
39:	int strncasecmp(const char *, const char *, size_t);
230:	char *strncat(char *, const char *, size_t);
400:	char *strnchr(const char *, size_t, int);
365:	char *strnchrnul(const char *, size_t, int);
91:	char *strncpy(char *, const char *, size_t);
777:	char *strnstr(const char *, const char *, size_t);
481:	char *strpbrk(const char *, const char *);
122:	ssize_t strscpy(char *, const char *, size_t);
508:	char *strsep(char **, const char *);
443:	__kernel_size_t strspn(const char *, const char *);
751:	char *strstr(const char *, const char *);

File lib/string_helpers.c:
963:	int __sysfs_match_string(const char * const *, size_t, const char *);
790:	char **devm_kasprintf_strarray(struct device *, const char *, size_t);
734:	char **kasprintf_strarray(gfp_t, const char *, size_t);
765:	void kfree_strarray(char **, size_t);
638:	char *kstrdup_quotable(const char *, gfp_t);
666:	char *kstrdup_quotable_cmdline(struct task_struct *, gfp_t);
699:	char *kstrdup_quotable_file(struct file *, gfp_t);
929:	int match_string(const char * const *, size_t, const char *);
1005:	void memcpy_and_pad(void *, size_t, const void *, size_t, int);
147:	int parse_int_array_user(const char *, size_t, int **);
851:	char *skip_spaces(const char *);
867:	char *strim(char *);
564:	int string_escape_mem(const char *, size_t, char *, size_t, unsigned int, const char *);
35:	void string_get_size(u64, u64, const enum string_size_units, char *, int);
313:	int string_unescape(char *, char *, size_t, unsigned int);
988:	char *strreplace(char *, char, char);
831:	ssize_t strscpy_pad(char *, const char *, size_t);
895:	bool sysfs_streq(const char *, const char *);
783:	static void devm_kfree_strarray(struct device *, void *);

File lib/strncpy_from_user.c:
113:	long strncpy_from_user(char *, const char *, long);

File lib/strnlen_user.c:
92:	long strnlen_user(const char *, long);

File lib/syscall.c:
69:	int task_current_syscall(struct task_struct *, struct syscall_info *);
8:	static int collect_syscall(struct task_struct *, struct syscall_info *);

File lib/timerqueue.c:
35:	bool timerqueue_add(struct timerqueue_head *, struct timerqueue_node *);
53:	bool timerqueue_del(struct timerqueue_head *, struct timerqueue_node *);
73:	struct timerqueue_node *timerqueue_iterate_next(struct timerqueue_node *);

File lib/usercopy.c:
55:	int check_zeroed_user(const void *, size_t);

File lib/uuid.c:
43:	void generate_random_guid(unsigned char *);
33:	void generate_random_uuid(unsigned char *);
60:	void guid_gen(guid_t *);
123:	int guid_parse(const char *, guid_t *);
68:	void uuid_gen(uuid_t *);
88:	bool uuid_is_valid(const char *);
129:	int uuid_parse(const char *, uuid_t *);

File lib/vsprintf.c:
3389:	int bprintf(u32 *, size_t, const char *, ...);
3190:	int bstr_printf(char *, size_t, const char *, const u32 *);
2225:	int no_hash_pointers_enable(char *);
377:	int num_to_str(char *, int, unsigned long long, unsigned int);
800:	int ptr_to_hashval(const void *, unsigned long *);
2949:	int scnprintf(char *, size_t, const char *, ...);
123:	long simple_strtol(const char *, char **, unsigned int);
155:	long long simple_strtoll(const char *, char **, unsigned int);
109:	unsigned long simple_strtoul(const char *, char **, unsigned int);
95:	unsigned long long simple_strtoull(const char *, char **, unsigned int);
2925:	int snprintf(char *, size_t, const char *, ...);
2994:	int sprintf(char *, const char *, ...);
3689:	int sscanf(const char *, const char *, ...);
3031:	int vbin_printf(u32 *, size_t, const char *, va_list);
2895:	int vscnprintf(char *, size_t, const char *, va_list);
2726:	int vsnprintf(char *, size_t, const char *, va_list);
2976:	int vsprintf(char *, const char *, va_list);
3410:	int vsscanf(const char *, const char *, va_list);
1793:	static char *address_val(char *, char *, const void *, struct printf_spec, const char *);
957:	static char *bdev_name(char *, char *, struct block_device *, struct printf_spec, const char *);
1237:	static char *bitmap_list_string(char *, char *, const unsigned long *, struct printf_spec, const char *);
1193:	static char *bitmap_string(char *, char *, const unsigned long *, struct printf_spec, const char *);
1940:	static char *clock(char *, char *, struct clk *, struct printf_spec, const char *);
1818:	static char *date_str(char *, char *, const struct rtc_time *, bool);
746:	static int debug_boot_weak_hash_enable(char *);
835:	static char *default_pointer(char *, char *, const void *, struct printf_spec);
898:	static char *dentry_name(char *, char *, const struct dentry *, struct printf_spec, const char *);
2106:	static char *device_node_string(char *, char *, struct device_node *, struct printf_spec, const char *);
655:	static char *err_ptr(char *, char *, void *, struct printf_spec);
1614:	static char *escaped_string(char *, char *, u8 *, struct printf_spec, const char *);
947:	static char *file_dentry_name(char *, char *, const struct file *, struct printf_spec, const char *);
757:	static int fill_ptr_key(struct notifier_block *, unsigned long, void *);
2056:	static char *flags_string(char *, char *, void *, struct printf_spec, const char *);
2503:	static int format_decode(const char *, struct printf_spec *);
1755:	static char *fourcc_string(char *, char *, const u32 *, struct printf_spec, const char *);
2084:	static char *fwnode_full_name_string(struct fwnode_handle *, char *, char *);
2196:	static char *fwnode_string(char *, char *, struct fwnode_handle *, struct printf_spec, const char *);
1142:	static char *hex_string(char *, char *, u8 *, struct printf_spec, const char *);
1471:	static char *ip4_addr_string(char *, char *, const u8 *, struct printf_spec, const char *);
1544:	static char *ip4_addr_string_sa(char *, char *, const struct sockaddr_in *, struct printf_spec, const char *);
1308:	static char *ip4_string(char *, const u8 *, const char *);
1457:	static char *ip6_addr_string(char *, char *, const u8 *, struct printf_spec, const char *);
1482:	static char *ip6_addr_string_sa(char *, char *, const struct sockaddr_in6 *, struct printf_spec, const char *);
1358:	static char *ip6_compressed_string(char *, const char *);
1441:	static char *ip6_string(char *, const char *, const char *);
1579:	static char *ip_addr_string(char *, char *, const void *, struct printf_spec, const char *);
1267:	static char *mac_address_string(char *, char *, u8 *, struct printf_spec, const char *);
1733:	static char *netdev_bits(char *, char *, const void *, struct printf_spec, const char *);
455:	static char *number(char *, char *, unsigned long long, struct printf_spec);
2385:	static char *pointer(const char *, char *, char *, void *, struct printf_spec);
729:	static char *pointer_string(char *, char *, const void *, struct printf_spec);
288:	static char *put_dec(char *, unsigned long long);
262:	static char *put_dec_full8(char *, unsigned int);
220:	static char *put_dec_trunc8(char *, unsigned int);
1041:	static char *resource_string(char *, char *, struct resource *, struct printf_spec, const char *);
851:	static char *restricted_pointer(char *, char *, const void *, struct printf_spec);
1853:	static char *rtc_str(char *, char *, const struct rtc_time *, struct printf_spec, const char *);
62:	static unsigned long long simple_strntoull(const char *, size_t, char **, unsigned int);
162:	static int skip_atoi(const char **);
576:	static char *special_hex_number(char *, char *, unsigned long long, int);
720:	static char *string(char *, char *, const char *, struct printf_spec);
637:	static char *string_nocheck(char *, char *, const char *, struct printf_spec);
980:	static char *symbol_string(char *, char *, void *, struct printf_spec, const char *);
1903:	static char *time64_str(char *, char *, const time64_t, struct printf_spec, const char *);
1926:	static char *time_and_date(char *, char *, void *, struct printf_spec, const char *);
1837:	static char *time_str(char *, char *, const struct rtc_time *, bool);
1688:	static char *uuid_string(char *, char *, const u8 *, struct printf_spec, const char *);
767:	static int vsprintf_init_hashval(void);
616:	static char *widen_string(char *, int, char *, struct printf_spec);

File lib/xarray.c:
1812:	int __xa_alloc(struct xarray *, u32 *, void *, struct xa_limit, gfp_t);
1861:	int __xa_alloc_cyclic(struct xarray *, u32 *, void *, struct xa_limit, u32 *, gfp_t);
1918:	void __xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
1605:	void *__xa_cmpxchg(struct xarray *, unsigned long, void *, void *, gfp_t);
1494:	void *__xa_erase(struct xarray *, unsigned long);
1643:	int __xa_insert(struct xarray *, unsigned long, void *, gfp_t);
1900:	void __xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1540:	void *__xa_store(struct xarray *, unsigned long, void *, gfp_t);
1191:	void *__xas_next(struct xa_state *);
1152:	void *__xas_prev(struct xa_state *);
1988:	void xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
2181:	void xa_delete_node(struct xa_node *, xa_update_node_t);
2207:	void xa_destroy(struct xarray *);
1513:	void *xa_erase(struct xarray *, unsigned long);
2160:	unsigned int xa_extract(struct xarray *, void **, unsigned long, unsigned long, unsigned int, xa_mark_t);
2013:	void *xa_find(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
2063:	void *xa_find_after(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
1940:	bool xa_get_mark(struct xarray *, unsigned long, xa_mark_t);
1761:	int xa_get_order(struct xarray *, unsigned long);
1456:	void *xa_load(struct xarray *, unsigned long);
1970:	void xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1577:	void *xa_store(struct xarray *, unsigned long, void *, gfp_t);
1718:	void *xa_store_range(struct xarray *, unsigned long, unsigned long, void *, gfp_t);
907:	void xas_clear_mark(const struct xa_state *, xa_mark_t);
706:	void xas_create_range(struct xa_state *);
270:	void xas_destroy(struct xa_state *);
1239:	void *xas_find(struct xa_state *, unsigned long);
1396:	void *xas_find_conflict(struct xa_state *);
1308:	void *xas_find_marked(struct xa_state *, unsigned long, xa_mark_t);
859:	bool xas_get_mark(const struct xa_state *, xa_mark_t);
941:	void xas_init_marks(const struct xa_state *);
233:	void *xas_load(struct xa_state *);
300:	bool xas_nomem(struct xa_state *, gfp_t);
1122:	void xas_pause(struct xa_state *);
878:	void xas_set_mark(const struct xa_state *, xa_mark_t);
1056:	void xas_split(struct xa_state *, void *, unsigned int);
1005:	void xas_split_alloc(struct xa_state *, void *, unsigned int, gfp_t);
777:	void *xas_store(struct xa_state *, void *);
327:	static bool __xas_nomem(struct xa_state *, gfp_t);
641:	static void *xas_create(struct xa_state *, bool);

File lib/xxhash.c:
102:	uint32_t xxh32(const void *, const size_t, const uint32_t);
79:	void xxh32_copy_state(struct xxh32_state *, const struct xxh32_state *);
339:	uint32_t xxh32_digest(const struct xxh32_state *);
242:	void xxh32_reset(struct xxh32_state *, const uint32_t);
270:	int xxh32_update(struct xxh32_state *, const void *, const size_t);
172:	uint64_t xxh64(const void *, const size_t, const uint64_t);
85:	void xxh64_copy_state(struct xxh64_state *, const struct xxh64_state *);
444:	uint64_t xxh64_digest(const struct xxh64_state *);
256:	void xxh64_reset(struct xxh64_state *, const uint64_t);
377:	int xxh64_update(struct xxh64_state *, const void *, const size_t);

File lib/xz/xz_dec_bcj.c:
527:	struct xz_dec_bcj *xz_dec_bcj_create(bool);
536:	enum xz_ret xz_dec_bcj_reset(struct xz_dec_bcj *, uint8_t);
417:	enum xz_ret xz_dec_bcj_run(struct xz_dec_bcj *, struct xz_dec_lzma2 *, struct xz_buf *);
345:	static void bcj_apply(struct xz_dec_bcj *, uint8_t *, size_t *, size_t);

File lib/xz/xz_dec_lzma2.c:
1141:	struct xz_dec_lzma2 *xz_dec_lzma2_create(enum xz_mode, uint32_t);
1201:	void xz_dec_lzma2_end(struct xz_dec_lzma2 *);
1165:	enum xz_ret xz_dec_lzma2_reset(struct xz_dec_lzma2 *, uint8_t);
964:	enum xz_ret xz_dec_lzma2_run(struct xz_dec_lzma2 *, struct xz_buf *);
651:	static void lzma_len(struct xz_dec_lzma2 *, struct lzma_len_dec *, uint32_t);
754:	static bool lzma_main(struct xz_dec_lzma2 *);

File lib/xz/xz_dec_stream.c:
828:	void xz_dec_end(struct xz_dec *);
786:	struct xz_dec *xz_dec_init(enum xz_mode, uint32_t);
816:	void xz_dec_reset(struct xz_dec *);
750:	enum xz_ret xz_dec_run(struct xz_dec *, struct xz_buf *);
346:	static enum xz_ret crc32_validate(struct xz_dec *, struct xz_buf *);
296:	static enum xz_ret dec_index(struct xz_dec *, struct xz_buf *);
422:	static enum xz_ret dec_stream_footer(struct xz_dec *);
157:	static bool fill_temp(struct xz_dec *, struct xz_buf *);
281:	static void index_update(struct xz_dec *, const struct xz_buf *);

File lib/zlib_inflate/inffast.c:
67:	void inflate_fast(z_streamp, unsigned int);

File lib/zlib_inflate/inflate.c:
331:	int zlib_inflate(z_streamp, int);
770:	int zlib_inflateEnd(z_streamp);
785:	int zlib_inflateIncomp(z_stream *);
59:	int zlib_inflateInit2(z_streamp, int);
33:	int zlib_inflateReset(z_streamp);
28:	int zlib_inflate_workspacesize(void);

File lib/zlib_inflate/inftrees.c:
23:	int zlib_inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *);

File lib/zlib_inflate/infutil.c:
9:	int zlib_inflate_blob(void *, unsigned int, const void *, unsigned int);

File lib/zstd/common/entropy_common.c:
32:	const char *FSE_getErrorName(size_t);
31:	unsigned int FSE_isError(size_t);
236:	size_t FSE_readNCount(short *, unsigned int *, unsigned int *, const void *, size_t);
223:	size_t FSE_readNCount_bmi2(short *, unsigned int *, unsigned int *, const void *, size_t, int);
27:	unsigned int FSE_versionNumber(void);
35:	const char *HUF_getErrorName(size_t);
34:	unsigned int HUF_isError(size_t);
251:	size_t HUF_readStats(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t);
344:	size_t HUF_readStats_wksp(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t, void *, size_t, int);
207:	static size_t FSE_readNCount_body_default(short *, unsigned int *, unsigned int *, const void *, size_t);

File lib/zstd/common/error_private.c:
15:	const char *ERR_getErrorString(ERR_enum);

File lib/zstd/common/fse_decompress.c:
205:	size_t FSE_buildDTable_raw(FSE_DTable *, unsigned int);
187:	size_t FSE_buildDTable_rle(FSE_DTable *, BYTE);
176:	size_t FSE_buildDTable_wksp(FSE_DTable *, const short *, unsigned int, unsigned int, void *, size_t);
60:	FSE_DTable *FSE_createDTable(unsigned int);
294:	size_t FSE_decompress_usingDTable(void *, size_t, const void *, size_t, const FSE_DTable *);
308:	size_t FSE_decompress_wksp(void *, size_t, const void *, size_t, unsigned int, void *, size_t);
374:	size_t FSE_decompress_wksp_bmi2(void *, size_t, const void *, size_t, unsigned int, void *, size_t, int);
66:	void FSE_freeDTable(FSE_DTable *);
71:	static size_t FSE_buildDTable_internal(FSE_DTable *, const short *, unsigned int, unsigned int, void *, size_t);

File lib/zstd/common/zstd_common.c:
63:	void *ZSTD_customCalloc(size_t, ZSTD_customMem);
75:	void ZSTD_customFree(void *, ZSTD_customMem);
56:	void *ZSTD_customMalloc(size_t, ZSTD_customMem);
45:	ZSTD_ErrorCode ZSTD_getErrorCode(size_t);
41:	const char *ZSTD_getErrorName(size_t);
49:	const char *ZSTD_getErrorString(ZSTD_ErrorCode);
37:	unsigned int ZSTD_isError(size_t);
25:	unsigned int ZSTD_versionNumber(void);
27:	const char *ZSTD_versionString(void);

File lib/zstd/decompress/huf_decompress.c:
759:	size_t HUF_decompress1X1_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1689:	size_t HUF_decompress1X1_DCtx_wksp_bmi2(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t, int);
749:	size_t HUF_decompress1X1_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1465:	size_t HUF_decompress1X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1455:	size_t HUF_decompress1X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1640:	size_t HUF_decompress1X_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1521:	size_t HUF_decompress1X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1671:	size_t HUF_decompress1X_usingDTable_bmi2(void *, size_t, const void *, size_t, const HUF_DTable *, int);
798:	size_t HUF_decompress4X1_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
774:	size_t HUF_decompress4X1_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1506:	size_t HUF_decompress4X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1481:	size_t HUF_decompress4X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1614:	size_t HUF_decompress4X_hufOnly_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1719:	size_t HUF_decompress4X_hufOnly_wksp_bmi2(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t, int);
1540:	size_t HUF_decompress4X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1702:	size_t HUF_decompress4X_usingDTable_bmi2(void *, size_t, const void *, size_t, const HUF_DTable *, int);
333:	size_t HUF_readDTableX1_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
338:	size_t HUF_readDTableX1_wksp_bmi2(HUF_DTable *, const void *, size_t, void *, size_t, int);
1041:	size_t HUF_readDTableX2_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
1048:	size_t HUF_readDTableX2_wksp_bmi2(HUF_DTable *, const void *, size_t, void *, size_t, int);
1589:	U32 HUF_selectDecoder(size_t, size_t);
724:	static size_t HUF_decompress1X1_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
1453:	static size_t HUF_decompress1X2_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
726:	static size_t HUF_decompress4X1_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
1431:	static size_t HUF_decompress4X2_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
872:	static void HUF_fillDTableX2ForWeight(HUF_DEltX2 *, const sortedSymbol_t *, const sortedSymbol_t *, U32, U32, U16, const int);

File lib/zstd/decompress/zstd_ddict.c:
43:	const void *ZSTD_DDict_dictContent(const ZSTD_DDict *);
49:	size_t ZSTD_DDict_dictSize(const ZSTD_DDict *);
55:	void ZSTD_copyDDictParameters(ZSTD_DCtx *, const ZSTD_DDict *);
167:	ZSTD_DDict *ZSTD_createDDict(const void *, size_t);
142:	ZSTD_DDict *ZSTD_createDDict_advanced(const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, ZSTD_customMem);
177:	ZSTD_DDict *ZSTD_createDDict_byReference(const void *, size_t);
222:	size_t ZSTD_estimateDDictSize(size_t, ZSTD_dictLoadMethod_e);
209:	size_t ZSTD_freeDDict(ZSTD_DDict *);
237:	unsigned int ZSTD_getDictID_fromDDict(const ZSTD_DDict *);
184:	const ZSTD_DDict *ZSTD_initStaticDDict(void *, size_t, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
227:	size_t ZSTD_sizeof_DDict(const ZSTD_DDict *);

File lib/zstd/decompress/zstd_decompress.c:
1676:	size_t ZSTD_DCtx_getParameter(ZSTD_DCtx *, ZSTD_dParameter, int *);
1532:	size_t ZSTD_DCtx_loadDictionary(ZSTD_DCtx *, const void *, size_t);
1511:	size_t ZSTD_DCtx_loadDictionary_advanced(ZSTD_DCtx *, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
1527:	size_t ZSTD_DCtx_loadDictionary_byReference(ZSTD_DCtx *, const void *, size_t);
1588:	size_t ZSTD_DCtx_refDDict(ZSTD_DCtx *, const ZSTD_DDict *);
1544:	size_t ZSTD_DCtx_refPrefix(ZSTD_DCtx *, const void *, size_t);
1537:	size_t ZSTD_DCtx_refPrefix_advanced(ZSTD_DCtx *, const void *, size_t, ZSTD_dictContentType_e);
1732:	size_t ZSTD_DCtx_reset(ZSTD_DCtx *, ZSTD_ResetDirective);
1624:	size_t ZSTD_DCtx_setFormat(ZSTD_DCtx *, ZSTD_format_e);
1612:	size_t ZSTD_DCtx_setMaxWindowSize(ZSTD_DCtx *, size_t);
1699:	size_t ZSTD_DCtx_setParameter(ZSTD_DCtx *, ZSTD_dParameter, int);
1508:	size_t ZSTD_DStreamInSize(void);
1509:	size_t ZSTD_DStreamOutSize(void);
327:	void ZSTD_copyDCtx(ZSTD_DCtx *, const ZSTD_DCtx *);
295:	ZSTD_DCtx *ZSTD_createDCtx(void);
290:	ZSTD_DCtx *ZSTD_createDCtx_advanced(ZSTD_customMem);
1484:	ZSTD_DStream *ZSTD_createDStream(void);
1495:	ZSTD_DStream *ZSTD_createDStream_advanced(ZSTD_customMem);
1629:	ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter);
1754:	size_t ZSTD_decodingBufferSize_min(unsigned long long, unsigned long long);
1021:	size_t ZSTD_decompress(void *, size_t, const void *, size_t);
1376:	size_t ZSTD_decompressBegin(ZSTD_DCtx *);
1413:	size_t ZSTD_decompressBegin_usingDDict(ZSTD_DCtx *, const ZSTD_DDict *);
1400:	size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx *, const void *, size_t);
758:	unsigned long long ZSTD_decompressBound(const void *, size_t);
1093:	size_t ZSTD_decompressContinue(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1015:	size_t ZSTD_decompressDCtx(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1859:	size_t ZSTD_decompressStream(ZSTD_DStream *, ZSTD_outBuffer *, ZSTD_inBuffer *);
2119:	size_t ZSTD_decompressStream_simpleArgs(ZSTD_DCtx *, void *, size_t, size_t *, const void *, size_t, size_t *);
1468:	size_t ZSTD_decompress_usingDDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const ZSTD_DDict *);
989:	size_t ZSTD_decompress_usingDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t);
221:	size_t ZSTD_estimateDCtxSize(void);
1766:	size_t ZSTD_estimateDStreamSize(size_t);
1774:	size_t ZSTD_estimateDStreamSize_fromFrame(const void *, size_t);
586:	unsigned long long ZSTD_findDecompressedSize(const void *, size_t);
746:	size_t ZSTD_findFrameCompressedSize(const void *, size_t);
413:	size_t ZSTD_frameHeaderSize(const void *, size_t);
309:	size_t ZSTD_freeDCtx(ZSTD_DCtx *);
1500:	size_t ZSTD_freeDStream(ZSTD_DStream *);
635:	unsigned long long ZSTD_getDecompressedSize(const void *, size_t);
1436:	unsigned int ZSTD_getDictID_fromDict(const void *, size_t);
1456:	unsigned int ZSTD_getDictID_fromFrame(const void *, size_t);
521:	unsigned long long ZSTD_getFrameContentSize(const void *, size_t);
511:	size_t ZSTD_getFrameHeader(ZSTD_frameHeader *, const void *, size_t);
425:	size_t ZSTD_getFrameHeader_advanced(ZSTD_frameHeader *, const void *, size_t, ZSTD_format_e);
1562:	size_t ZSTD_initDStream(ZSTD_DStream *);
1571:	size_t ZSTD_initDStream_usingDDict(ZSTD_DStream *, const ZSTD_DDict *);
1553:	size_t ZSTD_initDStream_usingDict(ZSTD_DStream *, const void *, size_t);
266:	ZSTD_DCtx *ZSTD_initStaticDCtx(void *, size_t);
1490:	ZSTD_DStream *ZSTD_initStaticDStream(void *, size_t);
783:	size_t ZSTD_insertBlock(ZSTD_DCtx *, const void *, size_t);
366:	unsigned int ZSTD_isFrame(const void *, size_t);
380:	unsigned int ZSTD_isSkippableFrame(const void *, size_t);
1268:	size_t ZSTD_loadDEntropy(ZSTD_entropyDTables_t *, const void * const, const size_t);
1062:	ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx *);
1042:	size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx *);
561:	size_t ZSTD_readSkippableFrame(void *, size_t, unsigned int *, const void *, size_t);
1581:	size_t ZSTD_resetDStream(ZSTD_DStream *);
213:	size_t ZSTD_sizeof_DCtx(const ZSTD_DCtx *);
1749:	size_t ZSTD_sizeof_DStream(const ZSTD_DStream *);
647:	static size_t ZSTD_decodeFrameHeader(ZSTD_DCtx *, const void *, size_t);
919:	static size_t ZSTD_decompressMultiFrame(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t, const ZSTD_DDict *);
679:	static ZSTD_frameSizeInfo ZSTD_findFrameSizeInfo(const void *, size_t);
998:	static const ZSTD_DDict *ZSTD_getDDict(ZSTD_DCtx *);

File lib/zstd/decompress/zstd_decompress_block.c:
584:	void ZSTD_buildFSETable(ZSTD_seqSymbol *, const short *, unsigned int, const U32 *, const U8 *, unsigned int, void *, size_t, int);
2052:	void ZSTD_checkContinuity(ZSTD_DCtx *, const void *, size_t);
119:	size_t ZSTD_decodeLiteralsBlock(ZSTD_DCtx *, const void *, size_t, void *, size_t, const streaming_operation);
653:	size_t ZSTD_decodeSeqHeaders(ZSTD_DCtx *, int *, const void *, size_t);
2063:	size_t ZSTD_decompressBlock(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1978:	size_t ZSTD_decompressBlock_internal(ZSTD_DCtx *, void *, size_t, const void *, size_t, const int, const streaming_operation);
56:	size_t ZSTD_getcBlockSize(const void *, size_t, blockProperties_t *);
605:	static size_t ZSTD_buildSeqTable(ZSTD_seqSymbol *, const ZSTD_seqSymbol **, symbolEncodingType_e, unsigned int, U32, const void *, size_t, const U32 *, const U8 *, const ZSTD_seqSymbol *, U32, int, int, U32 *, size_t, int);
1894:	static size_t ZSTD_decompressSequences(ZSTD_DCtx *, void *, size_t, const void *, size_t, int, const ZSTD_longOffset_e, const int);
1908:	static size_t ZSTD_decompressSequencesSplitLitBuffer(ZSTD_DCtx *, void *, size_t, const void *, size_t, int, const ZSTD_longOffset_e, const int);
861:	static size_t ZSTD_execSequenceEnd(BYTE *, BYTE * const, seq_t, const BYTE **, const BYTE * const, const BYTE * const, const BYTE * const, const BYTE * const);
908:	static size_t ZSTD_execSequenceEndSplitLitBuffer(BYTE *, BYTE * const, const BYTE * const, seq_t, const BYTE **, const BYTE * const, const BYTE * const, const BYTE * const, const BYTE * const);
792:	static void ZSTD_safecopy(BYTE *, const BYTE * const, const BYTE *, ptrdiff_t, ZSTD_overlap_e);

File lib/zstd/zstd_decompress_module.c:
41:	size_t zstd_dctx_workspace_bound(void);
55:	size_t zstd_decompress_dctx(zstd_dctx *, void *, size_t, const void *, size_t);
84:	size_t zstd_decompress_stream(zstd_dstream *, zstd_out_buffer *, zstd_in_buffer *);
62:	size_t zstd_dstream_workspace_bound(size_t);
91:	size_t zstd_find_frame_compressed_size(const void *, size_t);
27:	zstd_error_code zstd_get_error_code(size_t);
33:	const char *zstd_get_error_name(size_t);
97:	size_t zstd_get_frame_header(zstd_frame_header *, const void *, size_t);
47:	zstd_dctx *zstd_init_dctx(void *, size_t);
68:	zstd_dstream *zstd_init_dstream(size_t, void *, size_t);
21:	unsigned int zstd_is_error(size_t);
78:	size_t zstd_reset_dstream(zstd_dstream *);

File mm/backing-dev.c:
919:	struct backing_dev_info *bdi_alloc(int);
1116:	const char *bdi_dev_name(struct backing_dev_info *);
971:	struct backing_dev_info *bdi_get_by_id(u64);
904:	int bdi_init(struct backing_dev_info *);
1094:	void bdi_put(struct backing_dev_info *);
1022:	int bdi_register(struct backing_dev_info *, const char *, ...);
987:	int bdi_register_va(struct backing_dev_info *, const char *, va_list);
1034:	void bdi_set_owner(struct backing_dev_info *, struct device *);
1054:	void bdi_unregister(struct backing_dev_info *);
1100:	struct backing_dev_info *inode_to_bdi(struct inode *);
849:	void wb_blkcg_offline(struct cgroup_subsys_state *);
715:	struct bdi_writeback *wb_get_create(struct backing_dev_info *, struct cgroup_subsys_state *, gfp_t);
682:	struct bdi_writeback *wb_get_lookup(struct backing_dev_info *, struct cgroup_subsys_state *);
829:	void wb_memcg_offline(struct mem_cgroup *);
385:	void wb_wakeup_delayed(struct bdi_writeback *);
348:	static int bdi_class_init(void);
868:	static int cgwb_init(void);
539:	static void cgwb_release(struct percpu_ref *);
510:	static void cgwb_release_workfn(struct work_struct *);
782:	static void cleanup_offline_cgwbs_workfn(struct work_struct *);
361:	static int default_bdi_init(void);
268:	static ssize_t max_bytes_show(struct device *, struct device_attribute *, char *);
277:	static ssize_t max_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
238:	static ssize_t max_ratio_fine_show(struct device *, struct device_attribute *, char *);
221:	static ssize_t max_ratio_fine_store(struct device *, struct device_attribute *, const char *, size_t);
219:	static ssize_t max_ratio_show(struct device *, struct device_attribute *, char *);
202:	static ssize_t max_ratio_store(struct device *, struct device_attribute *, const char *, size_t);
240:	static ssize_t min_bytes_show(struct device *, struct device_attribute *, char *);
249:	static ssize_t min_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
200:	static ssize_t min_ratio_fine_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t min_ratio_fine_store(struct device *, struct device_attribute *, const char *, size_t);
181:	static ssize_t min_ratio_show(struct device *, struct device_attribute *, char *);
164:	static ssize_t min_ratio_store(struct device *, struct device_attribute *, const char *, size_t);
162:	static ssize_t read_ahead_kb_show(struct device *, struct device_attribute *, char *);
135:	static ssize_t read_ahead_kb_store(struct device *, struct device_attribute *, const char *, size_t);
296:	static ssize_t stable_pages_required_show(struct device *, struct device_attribute *, char *);
324:	static ssize_t strict_limit_show(struct device *, struct device_attribute *, char *);
306:	static ssize_t strict_limit_store(struct device *, struct device_attribute *, const char *, size_t);
409:	static int wb_init(struct bdi_writeback *, struct backing_dev_info *, gfp_t);
461:	static void wb_shutdown(struct bdi_writeback *);
396:	static void wb_update_bandwidth_workfn(struct work_struct *);

File mm/cma.c:
424:	struct page *cma_alloc(struct cma *, unsigned long, unsigned int, bool);
238:	int cma_declare_contiguous_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, unsigned int, bool, const char *, struct cma **, int);
576:	int cma_for_each_area(int (*)(struct cma *, void *), void *);
42:	phys_addr_t cma_get_base(const struct cma *);
52:	const char *cma_get_name(const struct cma *);
47:	unsigned long cma_get_size(const struct cma *);
173:	int cma_init_reserved_mem(phys_addr_t, phys_addr_t, unsigned int, const char *, struct cma **);
526:	bool cma_pages_valid(struct cma *, const struct page *, unsigned long);
555:	bool cma_release(struct cma *, const struct page *, unsigned long);
156:	void cma_reserve_pages_on_error(struct cma *);
96:	static void cma_activate_area(struct cma *);
145:	static int cma_init_reserved_areas(void);

File mm/compaction.c:
111:	bool PageMovable(struct page *);
135:	void __ClearPageMovable(struct page *);
127:	void __SetPageMovable(struct page *, const struct movable_operations *);
192:	void compaction_defer_reset(struct zone *, int, bool);
2722:	int compaction_proactiveness_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2777:	int compaction_register_node(struct node *);
2219:	enum compact_result compaction_suitable(struct zone *, int, unsigned int, int);
2782:	void compaction_unregister_node(struct node *);
2257:	bool compaction_zonelist_suitable(struct alloc_context *, int, int);
681:	unsigned long isolate_freepages_range(struct compact_control *, unsigned long, unsigned long);
1211:	int isolate_migratepages_range(struct compact_control *, unsigned long, unsigned long);
2997:	void kcompactd_run(int);
3015:	void kcompactd_stop(int);
377:	void reset_isolation_suitable(pg_data_t *);
2750:	int sysctl_compaction_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2569:	enum compact_result try_to_compact_pages(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, struct page **);
2892:	void wakeup_kcompactd(pg_data_t *, int, int);
252:	static bool __reset_isolation_pfn(struct zone *, unsigned long, bool, bool);
2674:	static void compact_node(int);
2760:	static ssize_t compact_store(struct device *, struct device_attribute *, const char *, size_t);
2290:	static enum compact_result compact_zone(struct compact_control *, struct capture_control *);
1676:	static struct page *compaction_alloc(struct page *, unsigned long);
1701:	static void compaction_free(struct page *, unsigned long);
541:	static unsigned long isolate_freepages_block(struct compact_control *, unsigned long *, unsigned long, struct list_head *, unsigned int, bool);
786:	static int isolate_migratepages_block(struct compact_control *, unsigned long, unsigned long, isolate_mode_t);
2922:	static int kcompactd(void *);
3031:	static int kcompactd_cpu_online(unsigned int);
3049:	static int kcompactd_init(void);
238:	static bool pageblock_skip_persistent(struct page *);

File mm/debug.c:
127:	void dump_page(struct page *, const char *);

File mm/dmapool.c:
314:	void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);
130:	struct dma_pool *dma_pool_create(const char *, struct device *, size_t, size_t, size_t);
267:	void dma_pool_destroy(struct dma_pool *);
404:	void dma_pool_free(struct dma_pool *, void *, dma_addr_t);
498:	struct dma_pool *dmam_pool_create(const char *, struct device *, size_t, size_t, size_t);
523:	void dmam_pool_destroy(struct dma_pool *);
479:	static int dmam_pool_match(struct device *, void *, void *);
472:	static void dmam_pool_release(struct device *, void *);
65:	static ssize_t pools_show(struct device *, struct device_attribute *, char *);

File mm/early_ioremap.c:
250:	void copy_from_early_mem(void *, phys_addr_t, unsigned long);
213:	void *early_ioremap(resource_size_t, unsigned long);
42:	void early_ioremap_reset(void);
71:	void early_ioremap_setup(void);
164:	void early_iounmap(void *, unsigned long);
220:	void *early_memremap(resource_size_t, unsigned long);
35:	pgprot_t early_memremap_pgprot_adjust(resource_size_t, unsigned long, pgprot_t);
229:	void *early_memremap_ro(resource_size_t, unsigned long);
296:	void early_memunmap(void *, unsigned long);
102:	static void *__early_ioremap(resource_size_t, unsigned long, pgprot_t);
83:	static int check_early_ioremap_leak(void);
25:	static int early_ioremap_debug_setup(char *);

File mm/fadvise.c:
205:	long __arm64_sys_fadvise64_64(const struct pt_regs *);
32:	int generic_fadvise(struct file *, loff_t, loff_t, int);
191:	int ksys_fadvise64_64(int, loff_t, loff_t, int);
180:	int vfs_fadvise(struct file *, loff_t, loff_t, int);

File mm/filemap.c:
840:	int __filemap_add_folio(struct address_space *, struct folio *, unsigned long, gfp_t, void **);
411:	int __filemap_fdatawrite_range(struct address_space *, loff_t, loff_t, int);
1910:	struct folio *__filemap_get_folio(struct address_space *, unsigned long, int, gfp_t);
217:	void __filemap_remove_folio(struct folio *, void *);
692:	void __filemap_set_wb_err(struct address_space *, int);
1658:	void __folio_lock(struct folio *);
1665:	int __folio_lock_killable(struct folio *);
1709:	bool __folio_lock_or_retry(struct folio *, struct mm_struct *, unsigned int);
3834:	ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
318:	void delete_from_page_cache_batch(struct address_space *, struct folio_batch *);
3635:	void dio_warn_stale_pagecache(struct file *);
724:	int file_check_and_advance_wb_err(struct file *);
591:	int file_fdatawait_range(struct file *, loff_t, loff_t);
768:	int file_write_and_wait_range(struct file *, loff_t, loff_t);
928:	int filemap_add_folio(struct address_space *, struct folio *, unsigned long, gfp_t);
957:	struct folio *filemap_alloc_folio(gfp_t, unsigned int);
344:	int filemap_check_errors(struct address_space *);
3118:	vm_fault_t filemap_fault(struct vm_fault *);
614:	int filemap_fdatawait_keep_errors(struct address_space *);
545:	int filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
567:	int filemap_fdatawait_range_keep_errors(struct address_space *, loff_t, loff_t);
430:	int filemap_fdatawrite(struct address_space *);
436:	int filemap_fdatawrite_range(struct address_space *, loff_t, loff_t);
378:	int filemap_fdatawrite_wbc(struct address_space *, struct writeback_control *);
452:	int filemap_flush(struct address_space *);
226:	void filemap_free_folio(struct address_space *, struct folio *);
2163:	unsigned int filemap_get_folios(struct address_space *, unsigned long *, unsigned long, struct folio_batch *);
2226:	unsigned int filemap_get_folios_contig(struct address_space *, unsigned long *, unsigned long, struct folio_batch *);
985:	void filemap_invalidate_lock_two(struct address_space *, struct address_space *);
1005:	void filemap_invalidate_unlock_two(struct address_space *, struct address_space *);
3356:	vm_fault_t filemap_map_pages(struct vm_fault *, unsigned long, unsigned long);
3433:	vm_fault_t filemap_page_mkwrite(struct vm_fault *);
470:	bool filemap_range_has_page(struct address_space *, loff_t, loff_t);
627:	bool filemap_range_has_writeback(struct address_space *, loff_t, loff_t);
2660:	ssize_t filemap_read(struct kiocb *, struct iov_iter *, ssize_t);
3958:	bool filemap_release_folio(struct folio *, gfp_t);
248:	void filemap_remove_folio(struct folio *);
665:	int filemap_write_and_wait_range(struct address_space *, loff_t, loff_t);
2052:	unsigned int find_get_entries(struct address_space *, unsigned long *, unsigned long, struct folio_batch *, unsigned long *);
2299:	unsigned int find_get_pages_range_tag(struct address_space *, unsigned long *, unsigned long, xa_mark_t, unsigned int, struct page **);
2098:	unsigned int find_lock_entries(struct address_space *, unsigned long *, unsigned long, struct folio_batch *, unsigned long *);
1476:	void folio_add_wait_queue(struct folio *, wait_queue_entry_t *);
1542:	void folio_end_private_2(struct folio *);
1593:	void folio_end_writeback(struct folio *);
1520:	void folio_unlock(struct folio *);
1439:	void folio_wait_bit(struct folio *, int);
1445:	int folio_wait_bit_killable(struct folio *, int);
1557:	void folio_wait_private_2(struct folio *);
1575:	int folio_wait_private_2_killable(struct folio *);
3653:	ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
3467:	int generic_file_mmap(struct file *, struct vm_area_struct *);
2790:	ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
3481:	int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
3923:	ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
3735:	ssize_t generic_perform_write(struct kiocb *, struct iov_iter *);
2902:	loff_t mapping_seek_hole_data(struct address_space *, loff_t, loff_t, int);
1373:	void migration_entry_wait_on_locked(swp_entry_t, pte_t *, spinlock_t *);
1761:	unsigned long page_cache_next_miss(struct address_space *, unsigned long, unsigned long);
1797:	unsigned long page_cache_prev_miss(struct address_space *, unsigned long, unsigned long);
1628:	void page_endio(struct page *, bool, int);
1034:	void pagecache_init(void);
3582:	struct folio *read_cache_folio(struct address_space *, unsigned long, filler_t *, struct file *);
3601:	struct page *read_cache_page(struct address_space *, unsigned long, filler_t *, struct file *);
3624:	struct page *read_cache_page_gfp(struct address_space *, unsigned long, gfp_t);
803:	void replace_page_cache_folio(struct folio *, struct folio *);
501:	static void __filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
3506:	static struct folio *do_read_cache_folio(struct address_space *, unsigned long, filler_t *, struct file *, gfp_t);
3002:	static struct file *do_sync_mmap_readahead(struct vm_fault *);
2373:	static void filemap_get_read_batch(struct address_space *, unsigned long, unsigned long, struct folio_batch *);
2409:	static int filemap_read_folio(struct file *, filler_t *, struct folio *);
148:	static void filemap_unaccount_folio(struct address_space *, struct folio *);
1997:	static struct folio *find_get_entry(struct xa_state *, unsigned long, xa_mark_t);
1218:	static int folio_wait_bit_common(struct folio *, int, int, enum behavior);
1129:	static void folio_wake_bit(struct folio *, int);
3299:	static struct folio *next_uptodate_page(struct folio *, struct address_space *, struct xa_state *, unsigned long);
1078:	static int wake_page_function(wait_queue_entry_t *, unsigned int, int, void *);

File mm/folio-compat.c:
60:	int __set_page_dirty_nobuffers(struct page *);
85:	int add_to_page_cache_lru(struct page *, struct address_space *, unsigned long, gfp_t);
66:	bool clear_page_dirty_for_io(struct page *);
24:	void end_page_writeback(struct page *);
105:	struct page *grab_cache_page_write_begin(struct address_space *, unsigned long);
115:	int isolate_lru_page(struct page *);
79:	void lru_cache_add_inactive_or_unevictable(struct page *, struct vm_area_struct *);
42:	void mark_page_accessed(struct page *);
12:	struct address_space *page_mapping(struct page *);
93:	struct page *pagecache_get_page(struct address_space *, unsigned long, int, gfp_t);
122:	void putback_lru_page(struct page *);
72:	bool redirty_page_for_writepage(struct writeback_control *, struct page *);
54:	bool set_page_dirty(struct page *);
48:	bool set_page_writeback(struct page *);
18:	void unlock_page(struct page *);
36:	void wait_for_stable_page(struct page *);
30:	void wait_on_page_writeback(struct page *);

File mm/gup.c:
1602:	int __mm_populate(unsigned long, unsigned long, int);
1817:	size_t fault_in_readable(const char *, size_t);
1783:	size_t fault_in_safe_writeable(const char *, size_t);
1748:	size_t fault_in_subpage_writeable(char *, size_t);
1708:	size_t fault_in_writeable(char *, size_t);
1555:	long faultin_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, bool, int *);
1261:	int fixup_user_fault(struct mm_struct *, unsigned long, unsigned int, bool *);
812:	struct page *follow_page(struct vm_area_struct *, unsigned long, unsigned int);
1862:	struct page *get_dump_page(unsigned long);
2215:	long get_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
3014:	int get_user_pages_fast(unsigned long, int, unsigned int, struct page **);
2969:	int get_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
2176:	long get_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2242:	long get_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
3158:	long pin_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
3047:	int pin_user_pages_fast(unsigned long, int, unsigned int, struct page **);
3068:	int pin_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
3123:	long pin_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
3180:	long pin_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
1485:	long populate_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, int *);
124:	struct folio *try_grab_folio(struct page *, int, unsigned int);
214:	int try_grab_page(struct page *, unsigned int);
255:	void unpin_user_page(struct page *);
380:	void unpin_user_page_range_dirty_lock(struct page *, unsigned long, bool);
425:	void unpin_user_pages(struct page **, unsigned long);
314:	void unpin_user_pages_dirty_lock(struct page **, unsigned long, bool);
1082:	static long __get_user_pages(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2042:	static long __gup_longterm_locked(struct mm_struct *, unsigned long, unsigned long, struct page **, struct vm_area_struct **, int *, unsigned int);
779:	static struct page *follow_page_mask(struct vm_area_struct *, unsigned long, unsigned int, struct follow_page_context *);
534:	static struct page *follow_page_pte(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int, struct dev_pagemap **);
476:	static int follow_pfn_pte(struct vm_area_struct *, unsigned long, pte_t *, unsigned int);
180:	static void gup_put_folio(struct folio *, int, unsigned int);
2900:	static int internal_get_user_pages_fast(unsigned long, unsigned long, unsigned int, struct page **);
2293:	static void undo_dev_pagemap(int *, int, unsigned int, struct page **);

File mm/huge_memory.c:
1956:	spinlock_t *__pmd_trans_huge_lock(pmd_t *, struct vm_area_struct *);
1973:	spinlock_t *__pud_trans_huge_lock(pud_t *, struct vm_area_struct *);
2281:	void __split_huge_pmd(struct vm_area_struct *, pmd_t *, unsigned long, bool, struct folio *);
2618:	bool can_split_folio(struct folio *, int *);
1823:	int change_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, pgprot_t, unsigned long);
1077:	int copy_huge_pmd(struct mm_struct *, struct mm_struct *, pmd_t *, pmd_t *, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
2817:	void deferred_split_huge_page(struct page *);
779:	vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *);
1509:	vm_fault_t do_huge_pmd_numa_page(struct vm_fault *);
1309:	vm_fault_t do_huge_pmd_wp_page(struct vm_fault *);
1032:	struct page *follow_devmap_pmd(struct vm_area_struct *, unsigned long, pmd_t *, int, struct dev_pagemap **);
1463:	struct page *follow_trans_huge_pmd(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int);
2803:	void free_transhuge_page(struct page *);
1295:	void huge_pmd_set_accessed(struct vm_fault *);
74:	bool hugepage_vma_check(struct vm_area_struct *, unsigned long, bool, bool, bool);
1601:	bool madvise_free_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, unsigned long);
554:	pmd_t maybe_pmd_mkwrite(pmd_t, struct vm_area_struct *);
190:	struct page *mm_get_huge_zero_page(struct mm_struct *);
204:	void mm_put_huge_zero_page(struct mm_struct *);
1768:	bool move_huge_pmd(struct vm_area_struct *, unsigned long, unsigned long, pmd_t *, pmd_t *);
581:	void prep_transhuge_page(struct page *);
3258:	void remove_migration_pmd(struct page_vma_mapped_walk *, struct page *);
3211:	int set_pmd_migration_entry(struct page_vma_mapped_walk *, struct page *);
282:	ssize_t single_hugepage_flag_show(struct kobject *, struct kobj_attribute *, char *, enum transparent_hugepage_flag);
290:	ssize_t single_hugepage_flag_store(struct kobject *, struct kobj_attribute *, const char *, size_t, enum transparent_hugepage_flag);
2652:	int split_huge_page_to_list(struct page *, struct list_head *);
2329:	void split_huge_pmd_address(struct vm_area_struct *, unsigned long, bool, struct folio *);
638:	unsigned long thp_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
2352:	void vma_adjust_trans_huge(struct vm_area_struct *, unsigned long, unsigned long, long);
738:	gfp_t vma_thp_gfp_mask(struct vm_area_struct *);
900:	vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *, pfn_t, pgprot_t, bool);
1680:	int zap_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long);
2854:	static unsigned long deferred_split_count(struct shrinker *, struct shrink_control *);
2867:	static unsigned long deferred_split_scan(struct shrinker *, struct shrink_control *);
312:	static ssize_t defrag_show(struct kobject *, struct kobj_attribute *, char *);
335:	static ssize_t defrag_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
238:	static ssize_t enabled_show(struct kobject *, struct kobj_attribute *, char *);
254:	static ssize_t enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
385:	static ssize_t hpage_pmd_size_show(struct kobject *, struct kobj_attribute *, char *);
439:	static void hugepage_exit_sysfs(struct kobject *);
456:	static int hugepage_init(void);
408:	static int hugepage_init_sysfs(struct kobject **);
765:	static void set_huge_zero_page(pgtable_t, struct mm_struct *, struct vm_area_struct *, unsigned long, pmd_t *, struct page *);
523:	static int setup_transparent_hugepage(char *);
210:	static unsigned long shrink_huge_zero_page_count(struct shrinker *, struct shrink_control *);
217:	static unsigned long shrink_huge_zero_page_scan(struct shrinker *, struct shrink_control *);
371:	static ssize_t use_zero_page_show(struct kobject *, struct kobj_attribute *, char *);
377:	static ssize_t use_zero_page_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File mm/hugetlb.c:
2059:	int PageHeadHuge(struct page *);
2045:	int PageHuge(struct page *);
3149:	int __alloc_bootmem_huge_page(struct hstate *, int);
5364:	void __unmap_hugepage_range_final(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
7024:	void adjust_range_if_pmd_sharing_possible(struct vm_area_struct *, unsigned long *, unsigned long *);
3015:	struct page *alloc_huge_page(struct vm_area_struct *, unsigned long, int);
2477:	struct page *alloc_huge_page_nodemask(struct hstate *, int, nodemask_t *, gfp_t);
2496:	struct page *alloc_huge_page_vma(struct hstate *, struct vm_area_struct *, unsigned long);
4276:	bool arch_hugetlb_valid_size(unsigned long);
1191:	void clear_vma_resv_huge_pages(struct vm_area_struct *);
4959:	int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);
2277:	int dissolve_free_huge_page(struct page *);
2354:	int dissolve_free_huge_pages(unsigned long, unsigned long);
6444:	long follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, unsigned long *, long, unsigned int, int *);
1854:	void free_huge_page(struct page *);
7298:	int get_huge_page_for_hwpoison(unsigned long, int, bool *);
7279:	int get_hwpoison_huge_page(struct page *, bool *, bool);
7055:	pte_t *huge_pmd_share(struct mm_struct *, struct vm_area_struct *, unsigned long, pud_t *);
7113:	int huge_pmd_unshare(struct mm_struct *, struct vm_area_struct *, unsigned long, pte_t *);
128:	struct hugepage_subpool *hugepage_new_subpool(struct hstate *, long, long);
152:	void hugepage_put_subpool(struct hugepage_subpool *);
4281:	void hugetlb_add_hstate(unsigned int);
5667:	int hugetlb_add_to_page_cache(struct page *, struct address_space *, unsigned long);
2088:	unsigned long hugetlb_basepage_index(struct page *);
6630:	unsigned long hugetlb_change_protection(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
7456:	void hugetlb_cma_reserve(int);
1160:	void hugetlb_dup_vma_private(struct vm_area_struct *);
5982:	vm_fault_t hugetlb_fault(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned int);
5959:	u32 hugetlb_fault_mutex_hash(struct address_space *, unsigned long);
907:	void hugetlb_fix_reserve_counts(struct inode *);
6388:	struct page *hugetlb_follow_page_mask(struct vm_area_struct *, unsigned long, unsigned int);
7246:	unsigned long hugetlb_mask_last_page(struct hstate *);
4598:	int hugetlb_mempolicy_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4306:	bool hugetlb_node_alloc_supported(void);
4606:	int hugetlb_overcommit_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2075:	struct address_space *hugetlb_page_mapping_lock_write(struct page *);
4117:	void hugetlb_register_node(struct node *);
4637:	void hugetlb_report_meminfo(struct seq_file *);
4667:	int hugetlb_report_node_meminfo(char *, int, int);
4699:	void hugetlb_report_usage(struct seq_file *, struct mm_struct *);
6770:	bool hugetlb_reserve_pages(struct inode *, long, long, struct vm_area_struct *, vm_flags_t);
4683:	void hugetlb_show_meminfo_node(int);
4589:	int hugetlb_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4706:	unsigned long hugetlb_total_pages(void);
4087:	void hugetlb_unregister_node(struct node *);
6928:	long hugetlb_unreserve_pages(struct inode *, long, long, long);
7408:	void hugetlb_unshare_all_pmds(struct vm_area_struct *);
315:	void hugetlb_vma_assert_locked(struct vm_area_struct *);
269:	void hugetlb_vma_lock_read(struct vm_area_struct *);
324:	void hugetlb_vma_lock_release(struct kref *);
287:	void hugetlb_vma_lock_write(struct vm_area_struct *);
305:	int hugetlb_vma_trylock_write(struct vm_area_struct *);
278:	void hugetlb_vma_unlock_read(struct vm_area_struct *);
296:	void hugetlb_vma_unlock_write(struct vm_area_struct *);
4922:	bool is_hugetlb_entry_migration(pte_t);
7261:	int isolate_hugetlb(struct page *, struct list_head *);
2979:	int isolate_or_dissolve_huge_page(struct page *, struct list_head *);
969:	unsigned long linear_hugepage_index(struct vm_area_struct *, unsigned long);
5171:	int move_hugetlb_page_tables(struct vm_area_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long);
7318:	void move_hugetlb_state(struct folio *, struct folio *, int);
7309:	void putback_active_hugepage(struct page *);
2818:	void restore_reserve_on_error(struct hstate *, struct vm_area_struct *, unsigned long, struct page *);
1057:	struct resv_map *resv_map_alloc(void);
1088:	void resv_map_release(struct kref *);
1843:	struct hstate *size_to_hstate(unsigned long);
5393:	void unmap_hugepage_range(struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
980:	unsigned long vma_kernel_pagesize(struct vm_area_struct *);
994:	unsigned long vma_mmu_pagesize(struct vm_area_struct *);
6998:	bool want_pmd_share(struct vm_area_struct *, unsigned long);
3720:	static ssize_t __nr_hugepages_store_common(bool, struct hstate *, int, unsigned long, size_t);
1949:	static bool __prep_compound_gigantic_folio(struct folio *, unsigned int, bool);
5235:	static void __unmap_hugepage_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
1707:	static void __update_and_free_page(struct hstate *, struct page *);
2688:	static long __vma_reservation_common(struct hstate *, struct vm_area_struct *, unsigned long, enum vma_resv_mode);
1661:	static void add_hugetlb_folio(struct hstate *, struct folio *, bool);
3402:	static int adjust_pool_surplus(struct hstate *, nodemask_t *, int);
2102:	static struct folio *alloc_buddy_hugetlb_folio(struct hstate *, gfp_t, int, nodemask_t *, nodemask_t *);
2172:	static struct folio *alloc_fresh_hugetlb_folio(struct hstate *, gfp_t, int, nodemask_t *, nodemask_t *);
2210:	static int alloc_pool_huge_page(struct hstate *, nodemask_t *, nodemask_t *);
2382:	static struct page *alloc_surplus_huge_page(struct hstate *, gfp_t, int, nodemask_t *);
607:	static int allocate_file_region_entries(struct resv_map *, int);
7417:	static int cmdline_parse_hugetlb_cma(char *);
426:	static void copy_hugetlb_cgroup_uncharge_info(struct file_region *, struct file_region *);
4471:	static int default_hugepagesz_setup(char *);
3931:	static ssize_t demote_size_show(struct kobject *, struct kobj_attribute *, char *);
3940:	static ssize_t demote_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3876:	static ssize_t demote_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1315:	static struct page *dequeue_huge_page_nodemask(struct hstate *, gfp_t, int, nodemask_t *);
1776:	static void free_hpage_workfn(struct work_struct *);
3834:	static ssize_t free_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3189:	static void gather_bootmem_prealloc(void);
1432:	static int hstate_next_node_to_alloc(struct hstate *, nodemask_t *);
215:	static long hugepage_subpool_put_pages(struct hugepage_subpool *, long);
4331:	static int hugepages_setup(char *);
4423:	static int hugepagesz_setup(char *);
4716:	static int hugetlb_acct_memory(struct hstate *, long);
3249:	static void hugetlb_hstate_alloc_pages(struct hstate *);
3218:	static void hugetlb_hstate_alloc_pages_onenode(struct hstate *, int);
4203:	static int hugetlb_init(void);
3312:	static void hugetlb_init_hstates(void);
4152:	static void hugetlb_register_all_nodes(void);
520:	static long hugetlb_resv_map_add(struct resv_map *, struct list_head *, long, long, struct hstate *, struct hugetlb_cgroup *, long *);
3997:	static int hugetlb_sysfs_add_hstate(struct hstate *, struct kobject *, struct kobject **, const struct attribute_group *);
4181:	static void hugetlb_sysfs_init(void);
7358:	static void hugetlb_unshare_pmds(struct vm_area_struct *, unsigned long, unsigned long);
4804:	static void hugetlb_vm_op_close(struct vm_area_struct *);
4872:	static vm_fault_t hugetlb_vm_op_fault(struct vm_fault *);
4766:	static void hugetlb_vm_op_open(struct vm_area_struct *);
4861:	static unsigned long hugetlb_vm_op_pagesize(struct vm_area_struct *);
4835:	static int hugetlb_vm_op_split(struct vm_area_struct *, unsigned long);
356:	static void hugetlb_vma_lock_free(struct vm_area_struct *);
5474:	static vm_fault_t hugetlb_wp(struct mm_struct *, struct vm_area_struct *, unsigned long, pte_t *, unsigned int, struct page *, spinlock_t *);
3789:	static ssize_t nr_hugepages_mempolicy_show(struct kobject *, struct kobj_attribute *, char *);
3796:	static ssize_t nr_hugepages_mempolicy_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3770:	static ssize_t nr_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3776:	static ssize_t nr_hugepages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3753:	static ssize_t nr_hugepages_store_common(bool, struct kobject *, const char *, size_t);
3805:	static ssize_t nr_overcommit_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3812:	static ssize_t nr_overcommit_hugepages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
472:	static void put_uncharge_info(struct file_region *);
678:	static long region_add(struct resv_map *, long, long, long, struct hstate *, struct hugetlb_cgroup *);
745:	static long region_chg(struct resv_map *, long, long, long *);
804:	static long region_del(struct resv_map *, long, long);
2236:	static struct page *remove_pool_huge_page(struct hstate *, nodemask_t *, bool);
3343:	static void report_hugepages(void);
3851:	static ssize_t resv_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3859:	static ssize_t surplus_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
2780:	static void vma_end_reservation(struct hstate *, struct vm_area_struct *, unsigned long);
2768:	static long vma_needs_reservation(struct hstate *, struct vm_area_struct *, unsigned long);

File mm/hugetlb_cgroup.c:
298:	int hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **);
304:	int hugetlb_cgroup_charge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup **);
332:	void hugetlb_cgroup_commit_charge(int, unsigned long, struct hugetlb_cgroup *, struct page *);
341:	void hugetlb_cgroup_commit_charge_rsvd(int, unsigned long, struct hugetlb_cgroup *, struct page *);
872:	void hugetlb_cgroup_file_init(void);
891:	void hugetlb_cgroup_migrate(struct folio *, struct folio *);
415:	void hugetlb_cgroup_uncharge_cgroup(int, unsigned long, struct hugetlb_cgroup *);
421:	void hugetlb_cgroup_uncharge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup *);
427:	void hugetlb_cgroup_uncharge_counter(struct resv_map *, unsigned long, unsigned long);
439:	void hugetlb_cgroup_uncharge_file_region(struct resv_map *, struct file_region *, unsigned long, bool);
385:	void hugetlb_cgroup_uncharge_folio(int, unsigned long, struct folio *);
391:	void hugetlb_cgroup_uncharge_folio_rsvd(int, unsigned long, struct folio *);
255:	static int __hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **, bool);
718:	static void __hugetlb_cgroup_file_dfl_init(int);
789:	static void __hugetlb_cgroup_file_legacy_init(int);
136:	static struct cgroup_subsys_state *hugetlb_cgroup_css_alloc(struct cgroup_subsys_state *);
175:	static void hugetlb_cgroup_css_free(struct cgroup_subsys_state *);
224:	static void hugetlb_cgroup_css_offline(struct cgroup_subsys_state *);
471:	static int hugetlb_cgroup_read_numa_stat(struct seq_file *, void *);
524:	static u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *, struct cftype *);
556:	static int hugetlb_cgroup_read_u64_max(struct seq_file *, void *);
648:	static ssize_t hugetlb_cgroup_reset(struct kernfs_open_file *, char *, size_t, loff_t);
598:	static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *, char *, size_t, loff_t, const char *);
642:	static ssize_t hugetlb_cgroup_write_dfl(struct kernfs_open_file *, char *, size_t, loff_t);
636:	static ssize_t hugetlb_cgroup_write_legacy(struct kernfs_open_file *, char *, size_t, loff_t);
713:	static int hugetlb_events_local_show(struct seq_file *, void *);
708:	static int hugetlb_events_show(struct seq_file *, void *);

File mm/hugetlb_vmemmap.c:
555:	void hugetlb_vmemmap_optimize(const struct hstate *, struct page *);
459:	int hugetlb_vmemmap_restore(const struct hstate *, struct page *);
591:	static int hugetlb_vmemmap_init(void);
234:	static void vmemmap_remap_pte(pte_t *, unsigned long, struct vmemmap_remap_walk *);
186:	static int vmemmap_remap_range(unsigned long, unsigned long, struct vmemmap_remap_walk *);
282:	static void vmemmap_restore_pte(pte_t *, unsigned long, struct vmemmap_remap_walk *);

File mm/init-mm.c:
48:	void setup_initial_init_mm(void *, void *, void *, void *);

File mm/internal.h:
605:	static struct file *maybe_unlock_mmap_for_io(struct vm_fault *, struct file *);
577:	static unsigned long vma_address(struct page *, struct vm_area_struct *);

File mm/interval_tree.c:
75:	void anon_vma_interval_tree_insert(struct anon_vma_chain *, struct rb_root_cached *);
92:	struct anon_vma_chain *anon_vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
99:	struct anon_vma_chain *anon_vma_interval_tree_iter_next(struct anon_vma_chain *, unsigned long, unsigned long);
85:	void anon_vma_interval_tree_remove(struct anon_vma_chain *, struct rb_root_cached *);
23:	void vma_interval_tree_insert(struct vm_area_struct *, struct rb_root_cached *);
28:	void vma_interval_tree_insert_after(struct vm_area_struct *, struct vm_area_struct *, struct rb_root_cached *);
23:	struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
23:	struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *, unsigned long, unsigned long);
23:	void vma_interval_tree_remove(struct vm_area_struct *, struct rb_root_cached *);
71:	static void __anon_vma_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);
23:	static void vma_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);

File mm/ioremap.c:
14:	void *ioremap_prot(phys_addr_t, size_t, unsigned long);
51:	void iounmap(volatile void *);

File mm/khugepaged.c:
416:	void __khugepaged_enter(struct mm_struct *);
460:	void __khugepaged_exit(struct mm_struct *);
1438:	int collapse_pte_mapped_thp(struct mm_struct *, unsigned long, bool);
2596:	bool current_is_khugepaged(void);
352:	int hugepage_madvise(struct vm_area_struct *, unsigned long *, int);
406:	void khugepaged_destroy(void);
450:	void khugepaged_enter_vma(struct vm_area_struct *, unsigned long);
389:	int khugepaged_init(void);
2588:	void khugepaged_min_free_kbytes_update(void);
2628:	int madvise_collapse(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
2560:	int start_stop_khugepaged(void);
958:	static int alloc_charge_hpage(struct page **, struct mm_struct *, struct collapse_control *);
164:	static ssize_t alloc_sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
171:	static ssize_t alloc_sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1399:	static void collapse_and_free_pmd(struct mm_struct *, struct vm_area_struct *, unsigned long, pmd_t *);
233:	static ssize_t defrag_show(struct kobject *, struct kobj_attribute *, char *);
239:	static ssize_t defrag_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
224:	static ssize_t full_scans_show(struct kobject *, struct kobj_attribute *, char *);
2131:	static int hpage_collapse_scan_file(struct mm_struct *, unsigned long, struct file *, unsigned long, struct collapse_control *);
1128:	static int hpage_collapse_scan_pmd(struct mm_struct *, struct vm_area_struct *, unsigned long, bool *, struct collapse_control *);
522:	static bool is_refcount_suitable(struct page *);
2488:	static int khugepaged(void *);
257:	static ssize_t max_ptes_none_show(struct kobject *, struct kobj_attribute *, char *);
263:	static ssize_t max_ptes_none_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
307:	static ssize_t max_ptes_shared_show(struct kobject *, struct kobj_attribute *, char *);
314:	static ssize_t max_ptes_shared_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
281:	static ssize_t max_ptes_swap_show(struct kobject *, struct kobj_attribute *, char *);
288:	static ssize_t max_ptes_swap_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
215:	static ssize_t pages_collapsed_show(struct kobject *, struct kobj_attribute *, char *);
191:	static ssize_t pages_to_scan_show(struct kobject *, struct kobj_attribute *, char *);
197:	static ssize_t pages_to_scan_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
493:	static void release_pte_page(struct page *);
137:	static ssize_t scan_sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
144:	static ssize_t scan_sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1364:	static int set_huge_pmd(struct vm_area_struct *, unsigned long, pmd_t *, struct page *);
2509:	static void set_recommended_min_free_kbytes(void);

File mm/list_lru.c:
559:	int __list_lru_init(struct list_lru *, bool, struct lock_class_key *, struct shrinker *);
119:	bool list_lru_add(struct list_lru *, struct list_head *);
196:	unsigned long list_lru_count_node(struct list_lru *, int);
178:	unsigned long list_lru_count_one(struct list_lru *, int, struct mem_cgroup *);
143:	bool list_lru_del(struct list_lru *, struct list_head *);
589:	void list_lru_destroy(struct list_lru *);
163:	void list_lru_isolate(struct list_lru_one *, struct list_head *);
170:	void list_lru_isolate_move(struct list_lru_one *, struct list_head *, struct list_head *);
298:	unsigned long list_lru_walk_node(struct list_lru *, int, list_lru_walk_cb, void *, unsigned long *);
268:	unsigned long list_lru_walk_one(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
284:	unsigned long list_lru_walk_one_irq(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
472:	int memcg_list_lru_alloc(struct mem_cgroup *, struct list_lru *, gfp_t);
430:	void memcg_reparent_list_lrus(struct mem_cgroup *, struct mem_cgroup *);
206:	static unsigned long __list_lru_walk_one(struct list_lru *, int, int, list_lru_walk_cb, void *, unsigned long *);

File mm/maccess.c:
220:	void __copy_overflow(int, unsigned long);
23:	long copy_from_kernel_nofault(void *, const void *, size_t);
9:	bool copy_from_kernel_nofault_allowed(const void *, size_t);
113:	long copy_from_user_nofault(void *, const void *, size_t);
57:	long copy_to_kernel_nofault(void *, const void *, size_t);
137:	long copy_to_user_nofault(void *, const void *, size_t);
79:	long strncpy_from_kernel_nofault(char *, const void *, long);
171:	long strncpy_from_user_nofault(char *, const void *, long);
209:	long strnlen_user_nofault(const void *, long);

File mm/madvise.c:
1455:	long __arm64_sys_madvise(const struct pt_regs *);
1460:	long __arm64_sys_process_madvise(const struct pt_regs *);
1402:	int do_madvise(struct mm_struct *, unsigned long, size_t, int);
337:	static int madvise_cold_or_pageout_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
610:	static int madvise_free_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
193:	static int swapin_walk_pmd_entry(pmd_t *, unsigned long, unsigned long, struct mm_walk *);

File mm/memblock.c:
1221:	void __next_mem_pfn_range(int *, int, unsigned long *, unsigned long *, int *);
1042:	void __next_mem_range(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
1137:	void __next_mem_range_rev(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
709:	int memblock_add(phys_addr_t, phys_addr_t);
687:	int memblock_add_node(phys_addr_t, phys_addr_t, int, enum memblock_flags);
1542:	void *memblock_alloc_exact_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1372:	phys_addr_t memblock_alloc_range_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
1604:	void *memblock_alloc_try_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1574:	void *memblock_alloc_try_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1941:	void memblock_allow_resize(void);
1722:	void memblock_cap_memory_range(phys_addr_t, phys_addr_t);
928:	int memblock_clear_hotplug(phys_addr_t, phys_addr_t);
977:	int memblock_clear_nomap(phys_addr_t, phys_addr_t);
1935:	void memblock_dump_all(void);
1674:	phys_addr_t memblock_end_of_DRAM(void);
1702:	void memblock_enforce_memory_limit(phys_addr_t);
828:	void memblock_free(void *, size_t);
2133:	void memblock_free_all(void);
1631:	void memblock_free_late(phys_addr_t, phys_addr_t);
1890:	phys_addr_t memblock_get_current_limit(void);
1799:	bool memblock_is_map_memory(phys_addr_t);
1794:	bool memblock_is_memory(phys_addr_t);
1833:	bool memblock_is_region_memory(phys_addr_t, phys_addr_t);
1855:	bool memblock_is_region_reserved(phys_addr_t, phys_addr_t);
1789:	bool memblock_is_reserved(phys_addr_t);
916:	int memblock_mark_hotplug(phys_addr_t, phys_addr_t);
940:	int memblock_mark_mirror(phys_addr_t, phys_addr_t);
965:	int memblock_mark_nomap(phys_addr_t, phys_addr_t);
1755:	void memblock_mem_limit_remove_map(phys_addr_t);
184:	bool memblock_overlaps_region(struct memblock_type *, phys_addr_t, phys_addr_t);
1441:	phys_addr_t memblock_phys_alloc_range(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t);
1466:	phys_addr_t memblock_phys_alloc_try_nid(phys_addr_t, phys_addr_t, int);
842:	int memblock_phys_free(phys_addr_t, phys_addr_t);
1658:	phys_addr_t memblock_phys_mem_size(void);
810:	int memblock_remove(phys_addr_t, phys_addr_t);
853:	int memblock_reserve(phys_addr_t, phys_addr_t);
1663:	phys_addr_t memblock_reserved_size(void);
1808:	int memblock_search_pfn_nid(unsigned long, unsigned long *, unsigned long *);
1885:	void memblock_set_current_limit(phys_addr_t);
1264:	int memblock_set_node(phys_addr_t, phys_addr_t, struct memblock_type *, int);
1669:	phys_addr_t memblock_start_of_DRAM(void);
1860:	void memblock_trim_memory(phys_addr_t);
2117:	void reset_all_zones_managed_pages(void);
2109:	void reset_node_managed_pages(pg_data_t *);
2034:	static void __free_pages_memory(unsigned long, unsigned long);
1946:	static int early_memblock(char *);
2085:	static unsigned long free_low_memory_core_early(void);
577:	static int memblock_add_range(struct memblock_type *, phys_addr_t, phys_addr_t, int, enum memblock_flags);
1492:	static void *memblock_alloc_internal(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
408:	static int memblock_double_array(struct memblock_type *, phys_addr_t, phys_addr_t);
1895:	static void memblock_dump(struct memblock_type *);
287:	static phys_addr_t memblock_find_in_range_node(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, enum memblock_flags);
735:	static int memblock_isolate_range(struct memblock_type *, phys_addr_t, phys_addr_t, int *, int *);
795:	static int memblock_remove_range(struct memblock_type *, phys_addr_t, phys_addr_t);
343:	static void memblock_remove_region(struct memblock_type *, unsigned long);
886:	static int memblock_setclr_flag(phys_addr_t, phys_addr_t, int, int);
2065:	static void memmap_init_reserved_pages(void);

File mm/memcontrol.c:
879:	void __count_memcg_events(struct mem_cgroup *, enum vm_event_item, unsigned long);
6921:	int __mem_cgroup_charge(struct folio *, struct mm_struct *, gfp_t);
7416:	int __mem_cgroup_try_charge_swap(struct folio *, swp_entry_t);
7096:	void __mem_cgroup_uncharge(struct folio *);
7116:	void __mem_cgroup_uncharge_list(struct list_head *);
7462:	void __mem_cgroup_uncharge_swap(swp_entry_t, unsigned int);
3118:	int __memcg_kmem_charge_page(struct page *, gfp_t, int);
3141:	void __memcg_kmem_uncharge_page(struct page *, int);
849:	void __mod_lruvec_kmem_state(void *, enum node_stat_item, int);
826:	void __mod_lruvec_page_state(struct page *, enum node_stat_item, int);
815:	void __mod_lruvec_state(struct lruvec *, enum node_stat_item, int);
765:	void __mod_memcg_lruvec_state(struct lruvec *, enum node_stat_item, int);
741:	void __mod_memcg_state(struct mem_cgroup *, int, int);
1295:	struct lruvec *folio_lruvec_lock(struct folio *);
1318:	struct lruvec *folio_lruvec_lock_irq(struct folio *);
1342:	struct lruvec *folio_lruvec_lock_irqsave(struct folio *, unsigned long *);
2092:	void folio_memcg_lock(struct folio *);
2163:	void folio_memcg_unlock(struct folio *);
1010:	struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *);
3011:	struct obj_cgroup *get_obj_cgroup_from_current(void);
3029:	struct obj_cgroup *get_obj_cgroup_from_page(struct page *);
2136:	void lock_page_memcg(struct page *);
6853:	void mem_cgroup_calculate_protection(struct mem_cgroup *, struct mem_cgroup *);
7218:	bool mem_cgroup_charge_skmem(struct mem_cgroup *, unsigned int, gfp_t);
363:	struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *);
4693:	void mem_cgroup_flush_foreign(struct bdi_writeback *);
640:	void mem_cgroup_flush_stats(void);
646:	void mem_cgroup_flush_stats_delayed(void);
5174:	struct mem_cgroup *mem_cgroup_from_id(unsigned short);
2965:	struct mem_cgroup *mem_cgroup_from_obj(void *);
2990:	struct mem_cgroup *mem_cgroup_from_slab_obj(void *);
977:	struct mem_cgroup *mem_cgroup_from_task(struct task_struct *);
1664:	unsigned long mem_cgroup_get_max(struct mem_cgroup *);
7486:	long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *);
2028:	struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *, struct mem_cgroup *);
2552:	void mem_cgroup_handle_over_high(void);
1079:	struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *, struct mem_cgroup *, struct mem_cgroup_reclaim_cookie *);
1185:	void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);
251:	bool mem_cgroup_kmem_disabled(void);
7138:	void mem_cgroup_migrate(struct folio *, struct folio *);
1965:	bool mem_cgroup_oom_synchronize(bool);
1610:	void mem_cgroup_print_oom_context(struct mem_cgroup *, struct task_struct *);
2075:	void mem_cgroup_print_oom_group(struct mem_cgroup *);
1631:	void mem_cgroup_print_oom_meminfo(struct mem_cgroup *);
1242:	int mem_cgroup_scan_tasks(struct mem_cgroup *, int (*)(struct task_struct *, void *), void *);
1683:	unsigned long mem_cgroup_size(struct mem_cgroup *);
7180:	void mem_cgroup_sk_alloc(struct sock *);
7203:	void mem_cgroup_sk_free(struct sock *);
3518:	unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *, int, gfp_t, unsigned long *);
7499:	bool mem_cgroup_swap_full(struct folio *);
6945:	int mem_cgroup_swapin_charge_folio(struct folio *, struct mm_struct *, gfp_t, swp_entry_t);
6977:	void mem_cgroup_swapin_uncharge_swap(swp_entry_t);
7346:	void mem_cgroup_swapout(struct folio *, swp_entry_t);
4640:	void mem_cgroup_track_foreign_dirty_slowpath(struct folio *, struct bdi_writeback *);
7249:	void mem_cgroup_uncharge_skmem(struct mem_cgroup *, unsigned int);
1363:	void mem_cgroup_update_lru_size(struct lruvec *, enum lru_list, int, int);
4543:	struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *);
4571:	void mem_cgroup_wb_stats(struct bdi_writeback *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
2881:	int memcg_alloc_slab_cgroups(struct slab *, struct kmem_cache *, gfp_t, bool);
725:	unsigned long memcg_page_state(struct mem_cgroup *, int);
236:	struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *);
3156:	void mod_objcg_state(struct obj_cgroup *, struct pglist_data *, enum node_stat_item, int);
3352:	int obj_cgroup_charge(struct obj_cgroup *, gfp_t, size_t);
3396:	void obj_cgroup_uncharge(struct obj_cgroup *, size_t);
388:	ino_t page_cgroup_ino(struct page *);
3406:	void split_page_memcg(struct page *, unsigned int);
2168:	void unlock_page_memcg(struct page *);
243:	struct mem_cgroup *vmpressure_to_memcg(struct vmpressure *);
2998:	static struct obj_cgroup *__get_obj_cgroup_from_memcg(struct mem_cgroup *);
5988:	static void __mem_cgroup_clear_mc(void);
5236:	static void __mem_cgroup_free(struct mem_cgroup *);
526:	static struct mem_cgroup_per_node *__mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_node *);
4172:	static void __mem_cgroup_threshold(struct mem_cgroup *, bool);
4269:	static int __mem_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *, enum res_type);
4361:	static void __mem_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *, enum res_type);
2297:	static void __refill_stock(struct mem_cgroup *, unsigned int);
7261:	static int cgroup_memory(char *);
6900:	static int charge_memcg(struct folio *, struct mem_cgroup *, gfp_t);
4234:	static int compare_thresholds(const void *, const void *);
2326:	static void drain_all_stock(struct mem_cgroup *);
2270:	static void drain_local_stock(struct work_struct *);
3241:	static struct obj_cgroup *drain_obj_stock(struct memcg_stock_pcp *);
2252:	static void drain_stock(struct memcg_stock_pcp *);
652:	static void flush_memcg_stats_dwork(struct work_struct *);
5839:	static enum mc_target_type get_mctgt_type(struct vm_area_struct *, unsigned long, pte_t, union mc_target *);
5895:	static enum mc_target_type get_mctgt_type_thp(struct vm_area_struct *, unsigned long, pmd_t, union mc_target *);
2403:	static void high_work_func(struct work_struct *);
6311:	static void mem_cgroup_attach(struct cgroup_taskset *);
6047:	static int mem_cgroup_can_attach(struct cgroup_taskset *);
6117:	static void mem_cgroup_cancel_attach(struct cgroup_taskset *);
5927:	static int mem_cgroup_count_precharge_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
5321:	static struct cgroup_subsys_state *mem_cgroup_css_alloc(struct cgroup_subsys_state *);
5429:	static void mem_cgroup_css_free(struct cgroup_subsys_state *);
5393:	static void mem_cgroup_css_offline(struct cgroup_subsys_state *);
5363:	static int mem_cgroup_css_online(struct cgroup_subsys_state *);
5422:	static void mem_cgroup_css_released(struct cgroup_subsys_state *);
5464:	static void mem_cgroup_css_reset(struct cgroup_subsys_state *);
5480:	static void mem_cgroup_css_rstat_flush(struct cgroup_subsys_state *, int);
930:	static bool mem_cgroup_event_ratelimit(struct mem_cgroup *, enum mem_cgroup_events_target);
3624:	static ssize_t mem_cgroup_force_empty_write(struct kernfs_open_file *, char *, size_t, loff_t);
3635:	static u64 mem_cgroup_hierarchy_read(struct cgroup_subsys_state *, struct cftype *);
3641:	static int mem_cgroup_hierarchy_write(struct cgroup_subsys_state *, struct cftype *, u64);
5153:	static void mem_cgroup_id_put_many(struct mem_cgroup *, unsigned int);
7285:	static int mem_cgroup_init(void);
5695:	static int mem_cgroup_move_account(struct page *, bool, struct mem_cgroup *, struct mem_cgroup *);
6123:	static int mem_cgroup_move_charge_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
3905:	static u64 mem_cgroup_move_charge_read(struct cgroup_subsys_state *, struct cftype *);
3912:	static int mem_cgroup_move_charge_write(struct cgroup_subsys_state *, struct cftype *, u64);
6272:	static void mem_cgroup_move_task(void);
3943:	static unsigned long mem_cgroup_node_nr_lru_pages(struct mem_cgroup *, int, unsigned int, bool);
4497:	static int mem_cgroup_oom_control_read(struct seq_file *, void *);
4508:	static int mem_cgroup_oom_control_write(struct cgroup_subsys_state *, struct cftype *, u64);
4458:	static int mem_cgroup_oom_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
1779:	static bool mem_cgroup_oom_trylock(struct mem_cgroup *);
4480:	static void mem_cgroup_oom_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
1688:	static bool mem_cgroup_out_of_memory(struct mem_cgroup *, gfp_t, int);
3681:	static u64 mem_cgroup_read_u64(struct cgroup_subsys_state *, struct cftype *);
3868:	static ssize_t mem_cgroup_reset(struct kernfs_open_file *, char *, size_t, loff_t);
3464:	static int mem_cgroup_resize_max(struct mem_cgroup *, unsigned long, bool);
4975:	static int mem_cgroup_slab_show(struct seq_file *, void *);
7798:	static int mem_cgroup_swap_init(void);
4148:	static u64 mem_cgroup_swappiness_read(struct cgroup_subsys_state *, struct cftype *);
4156:	static int mem_cgroup_swappiness_write(struct cgroup_subsys_state *, struct cftype *, u64);
4223:	static void mem_cgroup_threshold(struct mem_cgroup *);
474:	static void mem_cgroup_update_tree(struct mem_cgroup *, int);
3654:	static unsigned long mem_cgroup_usage(struct mem_cgroup *, bool);
4349:	static int mem_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
4446:	static void mem_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
3822:	static ssize_t mem_cgroup_write(struct kernfs_open_file *, char *, size_t, loff_t);
959:	static void memcg_check_events(struct mem_cgroup *, int);
4811:	static void memcg_event_ptable_queue_proc(struct file *, wait_queue_head_t *, poll_table *);
4755:	static void memcg_event_remove(struct work_struct *);
4778:	static int memcg_event_wake(wait_queue_entry_t *, unsigned int, int, void *);
2367:	static int memcg_hotplug_cpu_dead(unsigned int);
3981:	static int memcg_numa_stat_show(struct seq_file *, void *);
3749:	static void memcg_offline_kmem(struct mem_cgroup *);
1861:	static int memcg_oom_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
4065:	static int memcg_stat_show(struct seq_file *, void *);
3783:	static int memcg_update_tcp_max(struct mem_cgroup *, unsigned long);
4829:	static ssize_t memcg_write_event_control(struct kernfs_open_file *, char *, size_t, loff_t);
6326:	static u64 memory_current_read(struct cgroup_subsys_state *, struct cftype *);
6510:	static int memory_events_local_show(struct seq_file *, void *);
6502:	static int memory_events_show(struct seq_file *, void *);
6388:	static int memory_high_show(struct seq_file *, void *);
6394:	static ssize_t memory_high_write(struct kernfs_open_file *, char *, size_t, loff_t);
6365:	static int memory_low_show(struct seq_file *, void *);
6371:	static ssize_t memory_low_write(struct kernfs_open_file *, char *, size_t, loff_t);
6437:	static int memory_max_show(struct seq_file *, void *);
6443:	static ssize_t memory_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
6342:	static int memory_min_show(struct seq_file *, void *);
6348:	static ssize_t memory_min_write(struct kernfs_open_file *, char *, size_t, loff_t);
6538:	static int memory_numa_stat_show(struct seq_file *, void *);
6568:	static int memory_oom_group_show(struct seq_file *, void *);
6577:	static ssize_t memory_oom_group_write(struct kernfs_open_file *, char *, size_t, loff_t);
6334:	static u64 memory_peak_read(struct cgroup_subsys_state *, struct cftype *);
6599:	static ssize_t memory_reclaim(struct kernfs_open_file *, char *, size_t, loff_t);
1544:	static void memory_stat_format(struct mem_cgroup *, char *, int);
6518:	static int memory_stat_show(struct seq_file *, void *);
4355:	static int memsw_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
4452:	static void memsw_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
3091:	static int obj_cgroup_charge_pages(struct obj_cgroup *, gfp_t, unsigned int);
259:	static void obj_cgroup_release(struct percpu_ref *);
3070:	static void obj_cgroup_uncharge_pages(struct obj_cgroup *, unsigned int);
2377:	static unsigned long reclaim_high(struct mem_cgroup *, unsigned int, gfp_t);
3318:	static void refill_obj_stock(struct obj_cgroup *, unsigned int, bool);
7525:	static int setup_swap_account(char *);
7534:	static u64 swap_current_read(struct cgroup_subsys_state *, struct cftype *);
7588:	static int swap_events_show(struct seq_file *, void *);
2496:	static u64 swap_find_max_overage(struct mem_cgroup *);
7542:	static int swap_high_show(struct seq_file *, void *);
7548:	static ssize_t swap_high_write(struct kernfs_open_file *, char *, size_t, loff_t);
7565:	static int swap_max_show(struct seq_file *, void *);
7571:	static ssize_t swap_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
2631:	static int try_charge_memcg(struct mem_cgroup *, gfp_t, unsigned int);
7014:	static void uncharge_batch(const struct uncharge_gather *);
7037:	static void uncharge_folio(struct folio *, struct uncharge_gather *);

File mm/memfd.c:
266:	long __arm64_sys_memfd_create(const struct pt_regs *);
237:	long memfd_fcntl(struct file *, unsigned int, unsigned long);

File mm/memory-failure.c:
1237:	void ClearPageHWPoisonTakenOff(struct page *);
1232:	void SetPageHWPoisonTakenOff(struct page *);
1806:	int __get_huge_page_for_hwpoison(unsigned long, int, bool *);
1788:	void hugetlb_clear_page_hwpoison(struct page *);
229:	int hwpoison_filter(struct page *);
2007:	int memory_failure(unsigned long, int);
2245:	void memory_failure_queue(unsigned long, int);
2291:	void memory_failure_queue_kick(int);
77:	void num_poisoned_pages_inc(unsigned long);
83:	void num_poisoned_pages_sub(unsigned long, long);
304:	void shake_page(struct page *);
2568:	int soft_offline_page(unsigned long, int);
2336:	int unpoison_memory(unsigned long);
1703:	static unsigned long __free_raw_hwp_pages(struct page *, bool);
1199:	static int action_result(unsigned long, enum mf_action_page_type, enum mf_result);
373:	static void add_to_kill(struct task_struct *, struct page *, unsigned long, struct vm_area_struct *, struct list_head *);
812:	static int delete_from_lru_cache(struct page *);
1396:	static int get_hwpoison_page(struct page *, unsigned long);
720:	static int hwpoison_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
687:	static int hwpoison_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1414:	static bool hwpoison_user_mappings(struct page *, unsigned long, int, struct page *);
753:	static int kill_accessing_process(struct task_struct *, unsigned long, int);
1092:	static int me_huge_page(struct page_state *, struct page *);
905:	static int me_kernel(struct page_state *, struct page *);
924:	static int me_pagecache_clean(struct page_state *, struct page *);
983:	static int me_pagecache_dirty(struct page_state *, struct page *);
1070:	static int me_swapcache_clean(struct page_state *, struct page *);
1049:	static int me_swapcache_dirty(struct page_state *, struct page *);
914:	static int me_unknown(struct page_state *, struct page *);
2300:	static int memory_failure_init(void);
2266:	static void memory_failure_work_func(struct work_struct *);
109:	static bool page_handle_poison(struct page *, bool, bool);
837:	static int truncate_error_page(struct page *, unsigned long, struct address_space *);
1546:	static int try_to_split_thp_page(struct page *);

File mm/memory-tiers.c:
548:	struct memory_dev_type *alloc_memory_type(int);
579:	void clear_node_memory_type(int, struct memory_dev_type *);
564:	void destroy_memory_type(struct memory_dev_type *);
570:	void init_node_memory_type(int, struct memory_dev_type *);
294:	int next_demotion_node(int);
267:	void node_get_allowed_targets(pg_data_t *, nodemask_t *);
242:	bool node_is_toptier(int);
359:	static void establish_demotion_targets(void);
124:	static void memory_tier_device_release(struct device *);
628:	static int memory_tier_init(void);
134:	static ssize_t nodelist_show(struct device *, struct device_attribute *, char *);
676:	static ssize_t numa_demotion_enabled_show(struct kobject *, struct kobj_attribute *, char *);
683:	static ssize_t numa_demotion_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
709:	static int numa_init_sysfs(void);
476:	static struct memory_tier *set_node_memory_tier(int);

File mm/memory.c:
5502:	int __access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
1794:	pte_t *__get_locked_pte(struct mm_struct *, unsigned long, spinlock_t **);
5292:	int __pmd_alloc(struct mm_struct *, pud_t *, unsigned long);
419:	int __pte_alloc(struct mm_struct *, pmd_t *);
431:	int __pte_alloc_kernel(pmd_t *);
5269:	int __pud_alloc(struct mm_struct *, p4d_t *, unsigned long);
5588:	int access_process_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
5577:	int access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
2776:	int apply_to_existing_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
2762:	int apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
5727:	void clear_huge_page(struct page *, unsigned long, unsigned int);
5794:	long copy_huge_page_from_user(struct page *, const void *, unsigned int, bool);
1221:	int copy_page_range(struct vm_area_struct *, struct vm_area_struct *);
5773:	void copy_user_huge_page(struct page *, struct page *, unsigned long, struct vm_area_struct *, unsigned int);
4207:	vm_fault_t do_set_pmd(struct vm_fault *, struct page *);
4280:	void do_set_pte(struct vm_fault *, struct page *, unsigned long);
3689:	vm_fault_t do_swap_page(struct vm_fault *);
4335:	vm_fault_t finish_fault(struct vm_fault *);
3239:	vm_fault_t finish_mkwrite_fault(struct vm_fault *);
5385:	int follow_pfn(struct vm_area_struct *, unsigned long, unsigned long *);
5405:	int follow_phys(struct vm_area_struct *, unsigned long, unsigned int, unsigned long *, resource_size_t *);
5333:	int follow_pte(struct mm_struct *, unsigned long, pte_t **, spinlock_t **);
287:	void free_pgd_range(struct mmu_gather *, unsigned long, unsigned long, unsigned long, unsigned long);
349:	void free_pgtables(struct mmu_gather *, struct maple_tree *, struct vm_area_struct *, unsigned long, unsigned long);
5445:	int generic_access_phys(struct vm_area_struct *, unsigned long, void *, int, int);
5188:	vm_fault_t handle_mm_fault(struct vm_area_struct *, unsigned long, unsigned int, struct pt_regs *);
165:	void mm_trace_rss_stat(struct mm_struct *, int);
4657:	int numa_migrate_prep(struct page *, struct vm_area_struct *, unsigned long, int, int *);
393:	void pmd_install(struct mm_struct *, pmd_t *, pgtable_t *);
5609:	void print_vma_addr(char *, unsigned long);
2503:	int remap_pfn_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
2438:	int remap_pfn_range_notrack(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
3485:	void unmap_mapping_folio(struct folio *);
3520:	void unmap_mapping_pages(struct address_space *, unsigned long, unsigned long, bool);
3556:	void unmap_mapping_range(struct address_space *, const loff_t, const loff_t, int);
1581:	void unmap_page_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1665:	void unmap_vmas(struct mmu_gather *, struct maple_tree *, struct vm_area_struct *, unsigned long, unsigned long);
1998:	int vm_insert_page(struct vm_area_struct *, unsigned long, struct page *);
1939:	int vm_insert_pages(struct vm_area_struct *, unsigned long, struct page **, unsigned long *);
2534:	int vm_iomap_memory(struct vm_area_struct *, phys_addr_t, unsigned long);
2068:	int vm_map_pages(struct vm_area_struct *, struct page **, unsigned long);
2088:	int vm_map_pages_zero(struct vm_area_struct *, struct page **, unsigned long);
565:	struct page *vm_normal_page(struct vm_area_struct *, unsigned long, pte_t);
629:	struct page *vm_normal_page_pmd(struct vm_area_struct *, unsigned long, pmd_t);
2317:	vm_fault_t vmf_insert_mixed(struct vm_area_struct *, unsigned long, pfn_t);
2329:	vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *, unsigned long, pfn_t);
2310:	vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t);
2217:	vm_fault_t vmf_insert_pfn(struct vm_area_struct *, unsigned long, unsigned long);
2169:	vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t);
1694:	void zap_page_range(struct vm_area_struct *, unsigned long, unsigned long);
1725:	void zap_page_range_single(struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1761:	void zap_vma_ptes(struct vm_area_struct *, unsigned long, unsigned long);
2721:	static int __apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *, bool);
4137:	static vm_fault_t __do_fault(struct vm_fault *);
143:	static int disable_randmaps(char *);
3335:	static vm_fault_t do_wp_page(struct vm_fault *);
2965:	static vm_fault_t fault_dirty_shared_page(struct vm_fault *);
158:	static int init_zero_pfn(void);
1812:	static int insert_page_into_pte_locked(struct vm_area_struct *, pte_t *, unsigned long, struct page *, pgprot_t);
2095:	static vm_fault_t insert_pfn(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t, bool);
472:	static void print_bad_pte(struct vm_area_struct *, unsigned long, pte_t, struct page *);
3453:	static void unmap_mapping_range_tree(struct rb_root_cached *, unsigned long, unsigned long, struct zap_details *);
1804:	static int validate_page_before_insert(struct page *);
3018:	static void wp_page_reuse(struct vm_fault *);

File mm/mempolicy.c:
1718:	long __arm64_sys_get_mempolicy(const struct pt_regs *);
1559:	long __arm64_sys_mbind(const struct pt_regs *);
1680:	long __arm64_sys_migrate_pages(const struct pt_regs *);
1586:	long __arm64_sys_set_mempolicy(const struct pt_regs *);
1488:	long __arm64_sys_set_mempolicy_home_node(const struct pt_regs *);
1753:	struct mempolicy *__get_vma_policy(struct vm_area_struct *, unsigned long);
2409:	struct mempolicy *__mpol_dup(struct mempolicy *);
2433:	bool __mpol_equal(struct mempolicy *, struct mempolicy *);
308:	void __mpol_put(struct mempolicy *);
2269:	struct page *alloc_pages(gfp_t, unsigned int);
2366:	unsigned long alloc_pages_bulk_array_mempolicy(gfp_t, unsigned long, struct page **);
1823:	bool apply_policy_zone(struct mempolicy *, enum zone_type);
631:	unsigned long change_prot_numa(struct vm_area_struct *, unsigned long, unsigned long);
1103:	int do_migrate_pages(struct mm_struct *, const nodemask_t *, const nodemask_t *, int);
2295:	struct folio *folio_alloc(gfp_t, unsigned int);
161:	struct mempolicy *get_task_policy(struct task_struct *);
2018:	int huge_node(struct vm_area_struct *, unsigned long, gfp_t, struct mempolicy **, nodemask_t **);
2055:	bool init_nodemask_of_mempolicy(nodemask_t *);
2095:	bool mempolicy_in_oom_domain(struct task_struct *, const nodemask_t *);
1907:	unsigned int mempolicy_slab_node(void);
2839:	void mpol_free_shared_policy(struct shared_policy *);
2569:	int mpol_misplaced(struct page *, struct vm_area_struct *, unsigned long);
2989:	int mpol_parse_str(char *, struct mempolicy **);
2651:	void mpol_put_task_policy(struct task_struct *);
381:	void mpol_rebind_mm(struct mm_struct *, nodemask_t *);
370:	void mpol_rebind_task(struct task_struct *, const nodemask_t *);
2814:	int mpol_set_shared_policy(struct shared_policy *, struct vm_area_struct *, struct mempolicy *);
2775:	void mpol_shared_policy_init(struct shared_policy *, struct mempolicy *);
2532:	struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *, unsigned long);
3123:	void mpol_to_str(char *, int, struct mempolicy *);
2958:	void numa_default_policy(void);
141:	int numa_map_to_online_node(int);
2904:	void numa_policy_init(void);
1847:	nodemask_t *policy_nodemask(gfp_t, struct mempolicy *);
2168:	struct folio *vma_alloc_folio(gfp_t, int, struct vm_area_struct *, unsigned long, bool);
2387:	int vma_dup_policy(struct vm_area_struct *, struct vm_area_struct *);
1725:	bool vma_migratable(struct vm_area_struct *);
1801:	bool vma_policy_mof(struct vm_area_struct *);
2115:	static struct page *alloc_page_interleave(gfp_t, unsigned int, unsigned int);
2859:	static void check_numabalancing_enable(void);
854:	static long do_set_mempolicy(unsigned short, unsigned short, nodemask_t *);
1363:	static int get_bitmap(unsigned long *, const unsigned long *, unsigned long);
1981:	static unsigned int interleave_nid(struct mempolicy *, struct vm_area_struct *, unsigned long, int);
788:	static int mbind_range(struct mm_struct *, unsigned long, unsigned long, struct mempolicy *);
1030:	static int migrate_page_add(struct page *, struct list_head *, unsigned long);
198:	static int mpol_new_nodemask(struct mempolicy *, const nodemask_t *);
206:	static int mpol_new_preferred(struct mempolicy *, const nodemask_t *);
315:	static void mpol_rebind_default(struct mempolicy *, const nodemask_t *);
319:	static void mpol_rebind_nodemask(struct mempolicy *, const nodemask_t *);
339:	static void mpol_rebind_preferred(struct mempolicy *, const nodemask_t *);
224:	static int mpol_set_nodemask(struct mempolicy *, const nodemask_t *, struct nodemask_scratch *);
1209:	static struct page *new_page(struct page *, unsigned long);
561:	static int queue_pages_hugetlb(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
502:	static int queue_pages_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
656:	static int queue_pages_test_walk(unsigned long, unsigned long, struct mm_walk *);
2877:	static int setup_numabalancing(char *);

File mm/mempool.c:
380:	void *mempool_alloc(mempool_t *, gfp_t);
550:	void *mempool_alloc_pages(gfp_t, void *);
514:	void *mempool_alloc_slab(gfp_t, void *);
258:	mempool_t *mempool_create(int, mempool_alloc_t *, mempool_free_t *, void *);
266:	mempool_t *mempool_create_node(int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
175:	void mempool_destroy(mempool_t *);
156:	void mempool_exit(mempool_t *);
457:	void mempool_free(void *, mempool_t *);
557:	void mempool_free_pages(void *, void *);
522:	void mempool_free_slab(void *, void *);
233:	int mempool_init(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *);
185:	int mempool_init_node(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
540:	void mempool_kfree(void *, void *);
533:	void *mempool_kmalloc(gfp_t, void *);
304:	int mempool_resize(mempool_t *, int);
135:	static void *remove_element(mempool_t *);

File mm/migrate.c:
2094:	long __arm64_sys_move_pages(const struct pt_regs *);
302:	void __migration_entry_wait(struct mm_struct *, pte_t *, spinlock_t *);
332:	void __migration_entry_wait_huge(pte_t *, spinlock_t *);
1643:	struct page *alloc_migration_target(struct page *, unsigned long);
806:	int buffer_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
827:	int buffer_migrate_folio_norefs(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
835:	int filemap_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
626:	void folio_migrate_copy(struct folio *, struct folio *);
535:	void folio_migrate_flags(struct folio *, struct folio *);
390:	int folio_migrate_mapping(struct address_space *, struct folio *, struct folio *, int);
61:	int isolate_movable_page(struct page *, isolate_mode_t);
668:	int migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
637:	int migrate_folio_extra(struct address_space *, struct folio *, struct folio *, enum migrate_mode, int);
505:	int migrate_huge_page_move_mapping(struct address_space *, struct folio *, struct folio *);
2194:	int migrate_misplaced_page(struct page *, struct vm_area_struct *, int);
1425:	int migrate_pages(struct list_head *, new_page_t *, free_page_t *, unsigned long, enum migrate_mode, int, unsigned int *);
323:	void migration_entry_wait(struct mm_struct *, pmd_t *, unsigned long);
345:	void migration_entry_wait_huge(struct vm_area_struct *, pte_t *);
354:	void pmd_migration_entry_wait(struct mm_struct *, pmd_t *);
147:	void putback_movable_pages(struct list_head *);
284:	void remove_migration_ptes(struct folio *, struct folio *, bool);
714:	static int __buffer_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode, bool);
2129:	static struct page *alloc_misplaced_dst_page(struct page *, unsigned long);
1789:	static int move_pages_and_store_status(struct mm_struct *, int, struct list_head *, int *, int, int, unsigned long);
936:	static int move_to_new_folio(struct folio *, struct folio *, enum migrate_mode);
183:	static bool remove_migration_pte(struct folio *, struct vm_area_struct *, unsigned long, void *);

File mm/mincore.c:
232:	long __arm64_sys_mincore(const struct pt_regs *);
72:	static int __mincore_unmapped_range(unsigned long, unsigned long, struct vm_area_struct *, unsigned char *);
25:	static int mincore_hugetlb(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
100:	static int mincore_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
91:	static int mincore_unmapped_range(unsigned long, unsigned long, int, struct mm_walk *);

File mm/mlock.c:
614:	long __arm64_sys_mlock(const struct pt_regs *);
619:	long __arm64_sys_mlock2(const struct pt_regs *);
697:	long __arm64_sys_mlockall(const struct pt_regs *);
632:	long __arm64_sys_munlock(const struct pt_regs *);
726:	long __arm64_sys_munlockall(const struct pt_regs *);
40:	bool can_do_mlock(void);
243:	void mlock_folio(struct folio *);
268:	void mlock_new_page(struct page *);
213:	void mlock_page_drain_local(void);
224:	void mlock_page_drain_remote(int);
290:	void munlock_page(struct page *);
234:	bool need_mlock_page_drain(int);
743:	int user_shm_lock(size_t, struct ucounts *);
771:	void user_shm_unlock(size_t, struct ucounts *);
659:	static int apply_mlockall_flags(int);
468:	static int apply_vma_lock_flags(unsigned long, size_t, vm_flags_t);
567:	static int do_mlock(unsigned long, size_t, vm_flags_t);
404:	static int mlock_fixup(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, vm_flags_t);
186:	static void mlock_pagevec(struct pagevec *);
308:	static int mlock_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);

File mm/mm_init.c:
146:	void mm_compute_batch(int);
61:	void mminit_verify_pageflags_layout(void);
23:	void mminit_verify_zonelist(void);
181:	static int mm_compute_batch_init(void);
192:	static int mm_sysfs_init(void);
132:	static int set_mminit_loglevel(char *);

File mm/mmap.c:
170:	long __arm64_sys_brk(const struct pt_regs *);
1464:	long __arm64_sys_mmap_pgoff(const struct pt_regs *);
2801:	long __arm64_sys_munmap(const struct pt_regs *);
2811:	long __arm64_sys_remap_file_pages(const struct pt_regs *);
2198:	int __split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
615:	int __vma_adjust(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
3438:	struct vm_area_struct *_install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, const struct vm_special_mapping *);
1684:	unsigned long arch_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1750:	unsigned long arch_get_unmapped_area_topdown(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3168:	struct vm_area_struct *copy_vma(struct vm_area_struct **, unsigned long, unsigned long, unsigned long, bool *);
2480:	int do_mas_munmap(struct ma_state *, struct mm_struct *, unsigned long, size_t, struct list_head *, bool);
1239:	unsigned long do_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, struct list_head *);
2511:	int do_munmap(struct mm_struct *, unsigned long, size_t, struct list_head *);
3063:	void exit_mmap(struct mm_struct *);
2002:	int expand_downwards(struct vm_area_struct *, unsigned long);
2118:	int expand_stack(struct vm_area_struct *, unsigned long);
2124:	struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long);
1140:	struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
1830:	struct vm_area_struct *find_vma(struct mm_struct *, unsigned long);
1811:	struct vm_area_struct *find_vma_intersection(struct mm_struct *, unsigned long, unsigned long);
1853:	struct vm_area_struct *find_vma_prev(struct mm_struct *, unsigned long, struct vm_area_struct **);
1649:	unsigned long generic_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1697:	unsigned long generic_get_unmapped_area_topdown(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1759:	unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3127:	int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
3447:	int install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, struct page **);
1419:	unsigned long ksys_mmap_pgoff(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
3260:	bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long);
1187:	int mlock_future_check(struct mm_struct *, unsigned long, unsigned long);
3621:	void mm_drop_all_locks(struct mm_struct *);
3538:	int mm_take_all_locks(struct mm_struct *);
3644:	void mmap_init(void);
2519:	unsigned long mmap_region(struct file *, unsigned long, unsigned long, vm_flags_t, unsigned long, struct list_head *);
2267:	int split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
121:	void unlink_file_vma(struct vm_area_struct *);
3056:	int vm_brk(unsigned long, unsigned long);
3009:	int vm_brk_flags(unsigned long, unsigned long, unsigned long);
2795:	int vm_munmap(unsigned long, size_t);
3285:	void vm_stat_account(struct mm_struct *, vm_flags_t, long);
1624:	unsigned long vm_unmapped_area(struct vm_unmapped_area_info *);
512:	int vma_expand(struct ma_state *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *);
3421:	bool vma_is_special_mapping(const struct vm_area_struct *, const struct vm_special_mapping *);
446:	void vma_mas_remove(struct vm_area_struct *, struct ma_state *);
430:	void vma_mas_store(struct vm_area_struct *, struct ma_state *);
999:	struct vm_area_struct *vma_merge(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct anon_vma *, struct file *, unsigned long, struct mempolicy *, struct vm_userfaultfd_ctx, struct anon_vma_name *);
89:	void vma_set_page_prot(struct vm_area_struct *);
1501:	int vma_wants_writenotify(struct vm_area_struct *, pgprot_t);
3380:	static struct vm_area_struct *__install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, void *, const struct vm_operations_struct *);
2769:	static int __vm_munmap(unsigned long, size_t, bool);
940:	static int can_vma_merge_after(struct vm_area_struct *, unsigned long, struct anon_vma *, struct file *, unsigned long, struct vm_userfaultfd_ctx, struct anon_vma_name *);
918:	static int can_vma_merge_before(struct vm_area_struct *, unsigned long, struct anon_vma *, struct file *, unsigned long, struct vm_userfaultfd_ctx, struct anon_vma_name *);
2083:	static int cmdline_parse_stack_guard_gap(char *);
2928:	static int do_brk_flags(struct ma_state *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long);
2302:	static int do_mas_align_munmap(struct ma_state *, struct vm_area_struct *, struct mm_struct *, unsigned long, unsigned long, struct list_head *, bool);
1223:	static bool file_mmap_ok(struct file *, struct inode *, unsigned long, unsigned long);
3683:	static int init_admin_reserve(void);
3751:	static int init_reserve_notifier(void);
3662:	static int init_user_reserve(void);
3302:	static void special_mapping_close(struct vm_area_struct *);
3350:	static vm_fault_t special_mapping_fault(struct vm_fault *);
3311:	static int special_mapping_mremap(struct vm_area_struct *);
3306:	static const char *special_mapping_name(struct vm_area_struct *);
3324:	static int special_mapping_split(struct vm_area_struct *, unsigned long);
2178:	static void unmap_region(struct mm_struct *, struct maple_tree *, struct vm_area_struct *, struct vm_area_struct *, struct vm_area_struct *, unsigned long, unsigned long);
470:	static int vma_link(struct mm_struct *, struct vm_area_struct *);

File mm/mmap_lock.c:
81:	int trace_mmap_lock_reg(void);
119:	void trace_mmap_lock_unreg(void);
56:	static void free_memcg_path_bufs(void);

File mm/mmu_gather.c:
118:	bool __tlb_remove_page_size(struct mmu_gather *, struct encoded_page *, int);
363:	void tlb_finish_mmu(struct mmu_gather *);
296:	void tlb_flush_mmu(struct mmu_gather *);
72:	void tlb_flush_rmaps(struct mmu_gather *, struct vm_area_struct *);
335:	void tlb_gather_mmu(struct mmu_gather *, struct mm_struct *);
351:	void tlb_gather_mmu_fullmm(struct mmu_gather *, struct mm_struct *);
257:	void tlb_remove_table(struct mmu_gather *, void *);
194:	void tlb_remove_table_sync_one(void);
206:	static void tlb_remove_table_rcu(struct callback_head *);
189:	static void tlb_remove_table_smp_sync(void *);

File mm/mmzone.c:
56:	struct zoneref *__next_zones_zonelist(struct zoneref *, enum zone_type, nodemask_t *);
13:	struct pglist_data *first_online_pgdat(void);
75:	void lruvec_init(struct lruvec *);
18:	struct pglist_data *next_online_pgdat(struct pglist_data *);
30:	struct zone *next_zone(struct zone *);
96:	int page_cpupid_xchg_last(struct page *, int);

File mm/mprotect.c:
815:	long __arm64_sys_mprotect(const struct pt_regs *);
42:	bool can_change_pte_writable(struct vm_area_struct *, unsigned long, pte_t);
510:	unsigned long change_protection(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
557:	int mprotect_fixup(struct mmu_gather *, struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, unsigned long);

File mm/mremap.c:
889:	long __arm64_sys_mremap(const struct pt_regs *);
481:	unsigned long move_page_tables(struct vm_area_struct *, unsigned long, struct vm_area_struct *, unsigned long, unsigned long, bool);
440:	static bool move_pgt_entry(enum pgt_entry, struct vm_area_struct *, unsigned long, unsigned long, void *, void *, bool);
571:	static unsigned long move_vma(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, unsigned long, bool *, unsigned long, struct vm_userfaultfd_ctx *, struct list_head *);
727:	static struct vm_area_struct *vma_to_resize(unsigned long, unsigned long, unsigned long, unsigned long);

File mm/msync.c:
32:	long __arm64_sys_msync(const struct pt_regs *);

File mm/oom_kill.c:
1200:	long __arm64_sys_process_mrelease(const struct pt_regs *);
785:	void exit_oom_victim(void);
133:	struct task_struct *find_lock_task_mm(struct task_struct *);
201:	long oom_badness(struct task_struct *, unsigned long);
817:	bool oom_killer_disable(long);
796:	void oom_killer_enable(void);
1106:	bool out_of_memory(struct oom_control *);
1185:	void pagefault_out_of_memory(void);
490:	bool process_shares_mm(struct task_struct *, struct mm_struct *);
1085:	int register_oom_notifier(struct notifier_block *);
1091:	int unregister_oom_notifier(struct notifier_block *);
916:	static void __oom_kill_process(struct task_struct *, const char *);
512:	static bool __oom_reap_task_mm(struct mm_struct *);
452:	static void dump_header(struct oom_control *, struct task_struct *);
381:	static int dump_task(struct task_struct *, void *);
758:	static void mark_oom_victim(struct task_struct *);
308:	static int oom_evaluate_task(struct task_struct *, void *);
733:	static int oom_init(void);
1003:	static int oom_kill_memcg_member(struct task_struct *, void *);
1013:	static void oom_kill_process(struct oom_control *, const char *);
640:	static int oom_reaper(void *);
692:	static void queue_oom_reaper(struct task_struct *);
869:	static bool task_will_free_mem(struct task_struct *);
662:	static void wake_oom_reaper(struct timer_list *);

File mm/page-writeback.c:
2902:	void __folio_cancel_dirty(struct folio *);
3023:	bool __folio_end_writeback(struct folio *);
2720:	void __folio_mark_dirty(struct folio *, struct address_space *, int);
3068:	bool __folio_start_writeback(struct folio *, bool);
2062:	void balance_dirty_pages_ratelimited(struct address_space *);
1992:	int balance_dirty_pages_ratelimited_flags(struct address_space *, unsigned int);
779:	u64 bdi_get_max_bytes(struct backing_dev_info *);
760:	u64 bdi_get_min_bytes(struct backing_dev_info *);
784:	int bdi_set_max_bytes(struct backing_dev_info *, u64);
754:	int bdi_set_max_ratio(struct backing_dev_info *, unsigned int);
744:	int bdi_set_max_ratio_no_scale(struct backing_dev_info *, unsigned int);
765:	int bdi_set_min_bytes(struct backing_dev_info *, u64);
749:	int bdi_set_min_ratio(struct backing_dev_info *, unsigned int);
739:	int bdi_set_min_ratio_no_scale(struct backing_dev_info *, unsigned int);
798:	int bdi_set_strict_limit(struct backing_dev_info *, unsigned int);
2570:	int do_writepages(struct address_space *, struct writeback_control *);
2754:	bool filemap_dirty_folio(struct address_space *, struct folio *);
2697:	void folio_account_cleaned(struct folio *, struct bdi_writeback *);
2785:	void folio_account_redirty(struct folio *);
2939:	bool folio_clear_dirty_for_io(struct folio *);
2843:	bool folio_mark_dirty(struct folio *);
2816:	bool folio_redirty_for_writepage(struct writeback_control *, struct folio *);
3191:	void folio_wait_stable(struct folio *);
3144:	void folio_wait_writeback(struct folio *);
3166:	int folio_wait_writeback_killable(struct folio *);
2618:	int folio_write_one(struct folio *);
2552:	int generic_writepages(struct address_space *, struct writeback_control *);
441:	void global_dirty_limits(unsigned long *, unsigned long *);
2171:	void laptop_io_completion(struct backing_dev_info *);
2158:	void laptop_mode_timer_fn(struct timer_list *);
2181:	void laptop_sync_completion(void);
484:	bool node_dirty_ok(struct pglist_data *);
2650:	bool noop_dirty_folio(struct address_space *, struct folio *);
2314:	void page_writeback_init(void);
2878:	int set_page_dirty_lock(struct page *);
2341:	void tag_pages_for_writeback(struct address_space *, unsigned long, unsigned long);
888:	unsigned long wb_calc_thresh(struct bdi_writeback *, unsigned long);
640:	void wb_domain_exit(struct wb_domain *);
626:	int wb_domain_init(struct wb_domain *, gfp_t);
2077:	bool wb_over_bg_thresh(struct bdi_writeback *);
1485:	void wb_update_bandwidth(struct bdi_writeback *);
593:	void wb_writeout_inc(struct bdi_writeback *);
2394:	int write_cache_pages(struct address_space *, struct writeback_control *, writepage_t, void *);
2202:	void writeback_set_ratelimit(void);
1442:	static void __wb_update_bandwidth(struct dirty_throttle_control *, struct dirty_throttle_control *, bool);
579:	static void __wb_writeout_add(struct bdi_writeback *, long);
2533:	static int __writepage(struct page *, struct writeback_control *, void *);
1669:	static int balance_dirty_pages(struct bdi_writeback *, unsigned long, unsigned int);
507:	static int dirty_background_bytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
496:	static int dirty_background_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
532:	static int dirty_bytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
518:	static int dirty_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2135:	static int dirty_writeback_centisecs_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
375:	static void domain_dirty_limits(struct dirty_throttle_control *);
2215:	static int page_writeback_cpu_online(unsigned int);
1621:	static void wb_dirty_limits(struct dirty_throttle_control *);
1001:	static void wb_position_ratio(struct dirty_throttle_control *);
1284:	static void wb_update_dirty_ratelimit(struct dirty_throttle_control *, unsigned long, unsigned long);
607:	static void writeout_period(struct timer_list *);

File mm/page_alloc.c:
7458:	unsigned long __absent_pages_in_range(int, unsigned long, unsigned long);
9176:	int __alloc_contig_migrate_range(struct compact_control *, unsigned long, unsigned long);
5513:	struct page *__alloc_pages(gfp_t, unsigned int, int, nodemask_t *);
5361:	unsigned long __alloc_pages_bulk(gfp_t, int, nodemask_t *, int, struct list_head *, struct page **);
5578:	struct folio *__folio_alloc(gfp_t, unsigned int, int, nodemask_t *);
5632:	void __free_pages(struct page *, unsigned int);
1723:	void __free_pages_core(struct page *, unsigned int);
5595:	unsigned long __get_free_pages(gfp_t, unsigned int);
3602:	int __isolate_free_page(struct page *, unsigned int);
5684:	void __page_frag_cache_drain(struct page *, unsigned int);
1831:	struct page *__pageblock_pfn_to_page(unsigned long, unsigned long, struct zone *);
3654:	void __putback_isolated_page(struct page *, unsigned int, int);
6083:	void __show_free_areas(unsigned int, nodemask_t *, int);
3968:	bool __zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int, long);
7481:	unsigned long absent_pages_in_range(unsigned long, unsigned long);
8452:	void adjust_managed_page_count(struct page *, long);
9439:	struct page *alloc_contig_pages(unsigned long, gfp_t, int, nodemask_t *);
9255:	int alloc_contig_range(unsigned long, unsigned long, unsigned int, gfp_t);
9042:	void *alloc_large_system_hash(const char *, unsigned long, unsigned long, int, int, unsigned int *, unsigned int *, unsigned long, unsigned long);
5813:	void *alloc_pages_exact(size_t, gfp_t);
5838:	void *alloc_pages_exact_nid(int, size_t, gfp_t);
8261:	bool arch_has_descending_max_zone_pfns(void);
6663:	void build_all_zonelists(pg_data_t *);
8820:	void calculate_min_free_kbytes(void);
1881:	void clear_zone_contiguous(struct zone *);
806:	void destroy_large_folio(struct folio *);
3304:	void drain_all_pages(struct zone *);
3211:	void drain_local_pages(struct zone *);
3167:	void drain_zone_pages(struct zone *, struct per_cpu_pages *);
1789:	int early_pfn_to_nid(unsigned long);
6374:	int find_next_best_node(int, nodemask_t *);
2837:	int find_suitable_fallback(struct free_area *, unsigned int, int, bool, bool *);
8279:	void free_area_init(unsigned long *);
770:	void free_compound_page(struct page *);
9477:	void free_contig_range(unsigned long, unsigned long);
5642:	void free_pages(unsigned long, unsigned int);
5859:	void free_pages_exact(void *, size_t);
8463:	unsigned long free_reserved_area(void *, void *, int, const char *);
3456:	void free_unref_page(struct page *, unsigned int);
3498:	void free_unref_page_list(struct list_head *);
7342:	void get_pfn_range_for_nid(unsigned int, unsigned long *, unsigned long *);
563:	unsigned long get_pfnblock_flags_mask(const struct page *, unsigned long, unsigned long);
5606:	unsigned long get_zeroed_page(gfp_t);
4894:	bool gfp_pfmemalloc_allowed(gfp_t);
9696:	bool has_managed_dma(void);
2306:	void init_cma_reserved_pageblock(struct page *);
7309:	void init_currently_empty_zone(struct zone *, unsigned long, unsigned long);
889:	void init_mem_debugging_and_hardening(void);
8836:	int init_per_zone_wmark_min(void);
9581:	bool is_free_buddy_page(struct page *);
8956:	int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8499:	void mem_init_print_info(void);
1804:	void memblock_free_pages(struct page *, unsigned long, unsigned int);
7034:	void *memmap_alloc(phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
6727:	void memmap_init_range(unsigned long, int, unsigned long, unsigned long, unsigned long, enum meminit_context, struct vmem_altmap *, int);
8859:	int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2644:	int move_freepages_block(struct zone *, struct page *, int, int *);
7968:	unsigned long node_map_pfn_alignment(void);
5912:	unsigned long nr_free_buffer_pages(void);
6348:	int numa_zonelist_order_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8619:	void page_alloc_init(void);
2266:	void page_alloc_init_late(void);
5693:	void *page_frag_alloc_align(struct page_frag_cache *, unsigned int, gfp_t, unsigned int);
5769:	void page_frag_free(void *);
8977:	int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2466:	void post_alloc_hook(struct page *, unsigned int, gfp_t);
794:	void prep_compound_page(struct page *, unsigned int);
9673:	bool put_page_back_buddy(struct page *);
1670:	void reserve_bootmem_region(phys_addr_t, phys_addr_t);
8561:	void set_dma_reserve(unsigned long);
608:	void set_pageblock_migratetype(struct page *, int);
7651:	void set_pageblock_order(void);
582:	void set_pfnblock_flags_mask(struct page *, unsigned long, unsigned long, unsigned long);
1859:	void set_zone_contiguous(struct zone *);
7940:	void setup_nr_node_ids(void);
7264:	void setup_per_cpu_pageset(void);
8779:	void setup_per_zone_wmarks(void);
7228:	void setup_zone_pageset(struct zone *);
3933:	bool should_fail_alloc_page(gfp_t, unsigned int);
5924:	long si_mem_available(void);
5970:	void si_meminfo(struct sysinfo *);
5984:	void si_meminfo_node(struct sysinfo *, int);
1186:	int split_free_page(struct page *, unsigned int, unsigned long);
3588:	void split_page(struct page *, unsigned int);
8932:	int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8905:	int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9636:	bool take_page_off_buddy(struct page *);
4335:	void warn_alloc(gfp_t, nodemask_t *, const char *, ...);
8875:	int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9499:	void zone_pcp_disable(struct zone *);
9506:	void zone_pcp_enable(struct zone *);
9512:	void zone_pcp_reset(struct zone *);
4032:	bool zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int);
4083:	bool zone_watermark_ok_safe(struct zone *, unsigned int, unsigned long, int);
4476:	static struct page *__alloc_pages_direct_compact(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, enum compact_result *);
5015:	static struct page *__alloc_pages_slowpath(gfp_t, unsigned int, struct alloc_context *);
6584:	static void __build_all_zonelists(void *);
3231:	static void __drain_all_pages(struct zone *, bool);
1770:	static int __early_pfn_to_nid(unsigned long, struct mminit_pfnnid_cache *);
1092:	static void __free_one_page(struct page *, unsigned long, struct zone *, unsigned int, int, fpi_t);
1694:	static void __free_pages_ok(struct page *, unsigned int, fpi_t);
5663:	static struct page *__page_frag_cache_refill(struct page_frag_cache *, gfp_t);
3731:	static struct page *__rmqueue_pcplist(struct zone *, unsigned int, int, unsigned int, struct per_cpu_pages *, struct list_head *);
7391:	static void adjust_zone_range_for_zone_movable(int, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);
668:	static void bad_page(struct page *, const char *);
6631:	static void build_all_zonelists_init(void);
6466:	static void build_zonelists(pg_data_t *);
7538:	static void calculate_node_totalpages(struct pglist_data *, unsigned long, unsigned long);
8639:	static void calculate_totalreserve_pages(void);
2388:	static bool check_new_pages(struct page *, unsigned int);
8396:	static int cmdline_parse_core(char *, unsigned long *, unsigned long *);
8427:	static int cmdline_parse_kernelcore(char *);
8443:	static int cmdline_parse_movablecore(char *);
3199:	static void drain_pages(unsigned int);
8004:	static unsigned long early_calculate_totalpages(void);
258:	static int early_init_on_alloc(char *);
267:	static int early_init_on_free(char *);
8026:	static void find_zone_movable_pfns_for_nodes(void);
7780:	static void free_area_init_core(struct pglist_data *);
7900:	static void free_area_init_node(int);
1604:	static void free_one_page(struct zone *, struct page *, unsigned long, unsigned int, int, fpi_t);
1276:	static void free_page_is_bad_report(struct page *);
1533:	static void free_pcppages_bulk(struct zone *, int, struct per_cpu_pages *, int);
747:	static void free_the_page(struct page *, unsigned int);
3424:	static void free_unref_page_commit(struct zone *, struct per_cpu_pages *, struct page *, int, unsigned int);
3364:	static bool free_unref_page_prepare(struct page *, unsigned long, unsigned int);
4166:	static struct page *get_page_from_freelist(gfp_t, unsigned int, int, const struct alloc_context *);
6951:	static void init_unavailable_range(unsigned long, unsigned long, int, int);
6997:	static void memmap_init(void);
6973:	static void memmap_init_zone_range(struct zone *, unsigned long, unsigned long, unsigned long *);
6698:	static bool overlap_memmap_init(unsigned long, unsigned long *);
8566:	static int page_alloc_cpu_dead(unsigned int);
8597:	static int page_alloc_cpu_online(unsigned int);
7173:	static void per_cpu_pages_init(struct per_cpu_pages *, struct per_cpu_zonestat *);
7699:	static void pgdat_init_internals(struct pglist_data *);
2528:	static void prep_new_page(struct page *, unsigned int, gfp_t, unsigned int);
2872:	static void reserve_highatomic_pageblock(struct page *, struct zone *, unsigned int);
8609:	static int set_hashdist(char *);
8919:	static void setup_min_slab_ratio(void);
8891:	static void setup_min_unmapped_ratio(void);
8680:	static void setup_per_zone_lowmem_reserve(void);
2914:	static bool unreserve_highatomic_pageblock(const struct alloc_context *, bool);
4796:	static void wake_all_kswapds(unsigned int, gfp_t, const struct alloc_context *);
7488:	static unsigned long zone_absent_pages_in_node(int, unsigned long, unsigned long, unsigned long);
7211:	static void zone_set_pageset_high_and_batch(struct zone *, int);
7422:	static unsigned long zone_spanned_pages_in_node(int, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);

File mm/page_counter.c:
49:	void page_counter_cancel(struct page_counter *, unsigned long);
70:	void page_counter_charge(struct page_counter *, unsigned long);
246:	int page_counter_memparse(const char *, const char *, unsigned long *);
227:	void page_counter_set_low(struct page_counter *, unsigned long);
171:	int page_counter_set_max(struct page_counter *, unsigned long);
210:	void page_counter_set_min(struct page_counter *, unsigned long);
97:	bool page_counter_try_charge(struct page_counter *, unsigned long, struct page_counter **);
153:	void page_counter_uncharge(struct page_counter *, unsigned long);

File mm/page_io.c:
527:	void __swap_read_unplug(struct swap_iocb *);
336:	int __swap_writepage(struct page *, struct writeback_control *);
80:	int generic_swapfile_activate(struct swap_info_struct *, struct file *, sector_t *);
247:	int sio_pool_init(void);
448:	int swap_readpage(struct page *, bool, struct swap_iocb **);
373:	void swap_write_unplug(struct swap_iocb *);
181:	int swap_writepage(struct page *, struct writeback_control *);
211:	static void count_swpout_vm_event(struct page *);
55:	static void end_swap_bio_read(struct bio *);
31:	static void end_swap_bio_write(struct bio *);
385:	static void sio_read_complete(struct kiocb *, long);
260:	static void sio_write_complete(struct kiocb *, long);

File mm/page_isolation.c:
529:	int start_isolate_page_range(unsigned long, unsigned long, int, int, gfp_t);
635:	int test_pages_isolated(unsigned long, unsigned long, int);
577:	void undo_isolate_page_range(unsigned long, unsigned long, int);
305:	static int isolate_single_pageblock(unsigned long, int, gfp_t, bool, bool, int);
147:	static int set_migratetype_isolate(struct page *, int, int, unsigned long, unsigned long);
206:	static void unset_migratetype_isolate(struct page *, int);

File mm/page_reporting.c:
87:	void __page_reporting_notify(void);
352:	int page_reporting_register(struct page_reporting_dev_info *);
400:	void page_reporting_unregister(struct page_reporting_dev_info *);
17:	static int page_order_update_notify(const char *, const struct kernel_param *);
105:	static void page_reporting_drain(struct page_reporting_dev_info *, struct scatterlist *, unsigned int, bool);
307:	static void page_reporting_process(struct work_struct *);

File mm/page_vma_mapped.c:
300:	int page_mapped_in_vma(struct page *, struct vm_area_struct *);
151:	bool page_vma_mapped_walk(struct page_vma_mapped_walk *);
75:	static bool check_pte(struct page_vma_mapped_walk *);

File mm/pagewalk.c:
587:	int walk_page_mapping(struct address_space *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
427:	int walk_page_range(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
499:	int walk_page_range_novma(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, pgd_t *, void *);
520:	int walk_page_range_vma(struct vm_area_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
540:	int walk_page_vma(struct vm_area_struct *, const struct mm_walk_ops *, void *);
362:	static int __walk_page_range(unsigned long, unsigned long, struct mm_walk *);
248:	static int walk_pgd_range(unsigned long, unsigned long, struct mm_walk *);

File mm/percpu-vm.c:
333:	static struct pcpu_chunk *pcpu_create_chunk(gfp_t);
312:	static void pcpu_depopulate_chunk(struct pcpu_chunk *, int, int);
276:	static int pcpu_populate_chunk(struct pcpu_chunk *, int, int, gfp_t);

File mm/percpu.c:
1941:	void *__alloc_percpu(size_t, size_t);
1928:	void *__alloc_percpu_gfp(size_t, size_t, gfp_t);
1963:	void *__alloc_reserved_percpu(size_t, size_t);
2305:	bool __is_kernel_percpu_address(unsigned long, unsigned long *);
2254:	void free_percpu(void *);
2341:	bool is_kernel_percpu_address(unsigned long);
2428:	struct pcpu_alloc_info *pcpu_alloc_alloc_info(int, int);
3055:	int pcpu_embed_first_chunk(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *, pcpu_fc_cpu_to_node_fn_t *);
2463:	void pcpu_free_alloc_info(struct pcpu_alloc_info *);
3438:	unsigned long pcpu_nr_pages(void);
3250:	int pcpu_page_first_chunk(size_t, pcpu_fc_cpu_to_node_fn_t *);
3184:	void pcpu_populate_pte(unsigned long);
2579:	void pcpu_setup_first_chunk(const struct pcpu_alloc_info *, void *);
2369:	phys_addr_t per_cpu_ptr_to_phys(void *);
1719:	static void *pcpu_alloc(size_t, size_t, bool, gfp_t);
1216:	static int pcpu_alloc_area(struct pcpu_chunk *, int, size_t, int);
1345:	static struct pcpu_chunk *pcpu_alloc_first_chunk(unsigned long, int);
1979:	static void pcpu_balance_free(bool);
2224:	static void pcpu_balance_workfn(struct work_struct *);
774:	static void pcpu_block_refresh_hint(struct pcpu_chunk *, int);
630:	static void pcpu_block_update(struct pcpu_block_md *, int, int);
808:	static void pcpu_block_update_hint_alloc(struct pcpu_chunk *, int, int);
2844:	static struct pcpu_alloc_info *pcpu_build_alloc_info(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *);
745:	static void pcpu_chunk_refresh_hint(struct pcpu_chunk *, bool);
2475:	static void pcpu_dump_alloc_info(const char *, const struct pcpu_alloc_info *);
2986:	static void *pcpu_fc_alloc(unsigned int, size_t, size_t, pcpu_fc_cpu_to_node_fn_t *);
1110:	static int pcpu_find_block_fit(struct pcpu_chunk *, int, size_t, bool);
1276:	static int pcpu_free_area(struct pcpu_chunk *, int);
1644:	static void pcpu_memcg_post_alloc_hook(struct obj_cgroup *, struct pcpu_chunk *, int, size_t);
420:	static void pcpu_next_fit_region(struct pcpu_chunk *, int, int, int *, int *);
2784:	static int percpu_alloc_setup(char *);
3448:	static int percpu_enable_async(void);

File mm/pgtable-generic.c:
22:	void pgd_clear_bad(pgd_t *);
162:	void pgtable_trans_huge_deposit(struct mm_struct *, pmd_t *, pgtable_t);
178:	pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *, pmd_t *);
49:	void pmd_clear_bad(pmd_t *);
121:	int pmdp_clear_flush_young(struct vm_area_struct *, unsigned long, pmd_t *);
213:	pmd_t pmdp_collapse_flush(struct vm_area_struct *, unsigned long, pmd_t *);
134:	pmd_t pmdp_huge_clear_flush(struct vm_area_struct *, unsigned long, pmd_t *);
195:	pmd_t pmdp_invalidate(struct vm_area_struct *, unsigned long, pmd_t *);
205:	pmd_t pmdp_invalidate_ad(struct vm_area_struct *, unsigned long, pmd_t *);
91:	pte_t ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
37:	void pud_clear_bad(pud_t *);

File mm/process_vm_access.c:
291:	long __arm64_sys_process_vm_readv(const struct pt_regs *);
298:	long __arm64_sys_process_vm_writev(const struct pt_regs *);
253:	static ssize_t process_vm_rw(pid_t, const struct iovec *, unsigned long, const struct iovec *, unsigned long, unsigned long, int);

File mm/readahead.c:
761:	long __arm64_sys_readahead(const struct pt_regs *);
140:	void file_ra_state_init(struct file_ra_state *, struct address_space *);
307:	void force_page_cache_ra(struct readahead_control *, unsigned long);
735:	ssize_t ksys_readahead(int, loff_t, size_t);
713:	void page_cache_async_ra(struct readahead_control *, struct folio *, unsigned long);
500:	void page_cache_ra_order(struct readahead_control *, struct file_ra_state *, unsigned int);
206:	void page_cache_ra_unbounded(struct readahead_control *, unsigned long, unsigned long);
685:	void page_cache_sync_ra(struct readahead_control *, unsigned long);
791:	void readahead_expand(struct readahead_control *, loff_t, size_t);
282:	static void do_page_cache_ra(struct readahead_control *, unsigned long, unsigned long);
566:	static void ondemand_readahead(struct readahead_control *, struct folio *, unsigned long);
147:	static void read_pages(struct readahead_control *);

File mm/rmap.c:
187:	int __anon_vma_prepare(struct vm_area_struct *);
2363:	void __put_anon_vma(struct anon_vma *);
279:	int anon_vma_clone(struct vm_area_struct *, struct vm_area_struct *);
333:	int anon_vma_fork(struct vm_area_struct *, struct vm_area_struct *);
459:	void anon_vma_init(void);
492:	struct anon_vma *folio_get_anon_vma(struct folio *);
536:	struct anon_vma *folio_lock_anon_vma_read(struct folio *, struct rmap_walk_control *);
1031:	int folio_mkclean(struct folio *);
896:	int folio_referenced(struct folio *, int, struct mem_cgroup *, unsigned long *);
2543:	void hugepage_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, rmap_t);
2560:	void hugepage_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
773:	pmd_t *mm_find_pmd(struct mm_struct *, unsigned long);
1217:	void page_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, rmap_t);
1324:	void page_add_file_rmap(struct page *, struct vm_area_struct *, bool);
1291:	void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
747:	unsigned long page_address_in_vma(struct page *, struct vm_area_struct *);
1121:	void page_move_anon_rmap(struct page *, struct vm_area_struct *);
1381:	void page_remove_rmap(struct page *, struct vm_area_struct *, bool);
1068:	int pfn_mkclean_range(unsigned long, unsigned long, unsigned long, struct vm_area_struct *);
2514:	void rmap_walk(struct folio *, struct rmap_walk_control *);
2525:	void rmap_walk_locked(struct folio *, struct rmap_walk_control *);
1088:	int total_compound_mapcount(struct page *);
2140:	void try_to_migrate(struct folio *, enum ttu_flags);
1812:	void try_to_unmap(struct folio *, enum ttu_flags);
395:	void unlink_anon_vmas(struct vm_area_struct *);
1146:	static void __page_set_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, int);
450:	static void anon_vma_ctor(void *);
1796:	static int folio_not_mapped(struct folio *);
806:	static bool folio_referenced_one(struct folio *, struct vm_area_struct *, unsigned long, void *);
873:	static bool invalid_folio_referenced_vma(struct vm_area_struct *, void *);
1791:	static bool invalid_migration_vma(struct vm_area_struct *, void *);
1023:	static bool invalid_mkclean_vma(struct vm_area_struct *, void *);
1012:	static bool page_mkclean_one(struct folio *, struct vm_area_struct *, unsigned long, void *);
942:	static int page_vma_mkclean_one(struct page_vma_mapped_walk *);
2413:	static void rmap_walk_anon(struct folio *, struct rmap_walk_control *, bool);
2461:	static void rmap_walk_file(struct folio *, struct rmap_walk_control *, bool);
1833:	static bool try_to_migrate_one(struct folio *, struct vm_area_struct *, unsigned long, void *);
1462:	static bool try_to_unmap_one(struct folio *, struct vm_area_struct *, unsigned long, void *);

File mm/secretmem.c:
231:	long __arm64_sys_memfd_secret(const struct pt_regs *);
45:	bool secretmem_active(void);
137:	bool vma_is_secretmem(struct vm_area_struct *);
50:	static vm_fault_t secretmem_fault(struct vm_fault *);
153:	static void secretmem_free_folio(struct folio *);
279:	static int secretmem_init(void);
268:	static int secretmem_init_fs_context(struct fs_context *);
147:	static int secretmem_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
121:	static int secretmem_mmap(struct file *, struct vm_area_struct *);
115:	static int secretmem_release(struct inode *, struct file *);
165:	static int secretmem_setattr(struct user_namespace *, struct dentry *, struct iattr *);

File mm/shmem.c:
367:	bool shmem_charge(struct inode *, long);
4259:	struct file *shmem_file_setup(const char *, loff_t, unsigned long);
4272:	struct file *shmem_file_setup_with_mnt(struct vfsmount *, const char *, loff_t, unsigned long);
2048:	int shmem_get_folio(struct inode *, unsigned long, struct folio **, enum sgp_type);
2144:	unsigned long shmem_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
4048:	void shmem_init(void);
4020:	int shmem_init_fs_context(struct fs_context *);
471:	bool shmem_is_huge(struct vm_area_struct *, struct inode *, unsigned long, bool);
4248:	struct file *shmem_kernel_file_setup(const char *, loff_t, unsigned long);
2251:	int shmem_lock(struct file *, int, struct ucounts *);
803:	unsigned long shmem_partial_swap_usage(struct address_space *, unsigned long, unsigned long);
4321:	struct page *shmem_read_mapping_page_gfp(struct address_space *, unsigned long, gfp_t);
835:	unsigned long shmem_swap_usage(struct vm_area_struct *);
1040:	void shmem_truncate_range(struct inode *, loff_t, loff_t);
387:	void shmem_uncharge(struct inode *, long);
864:	void shmem_unlock_mapping(struct address_space *);
1283:	int shmem_unuse(unsigned int);
4283:	int shmem_zero_setup(struct vm_area_struct *);
243:	bool vma_is_anon_shmem(struct vm_area_struct *);
248:	bool vma_is_shmem(struct vm_area_struct *);
4205:	static struct file *__shmem_file_setup(struct vfsmount *, const char *, loff_t, unsigned long, unsigned int);
695:	static int shmem_add_to_page_cache(struct folio *, struct address_space *, unsigned long, void *, gfp_t, struct mm_struct *);
1575:	static struct folio *shmem_alloc_and_acct_folio(gfp_t, struct inode *, unsigned long, bool);
3862:	static struct inode *shmem_alloc_inode(struct super_block *);
2983:	static int shmem_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
3878:	static void shmem_destroy_inode(struct inode *);
4083:	static ssize_t shmem_enabled_show(struct kobject *, struct kobj_attribute *, char *);
4109:	static ssize_t shmem_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3411:	static int shmem_encode_fh(struct inode *, __u32 *, int *, struct inode *);
3903:	static int shmem_error_remove_page(struct address_space *, struct page *);
1142:	static void shmem_evict_inode(struct inode *);
2734:	static long shmem_fallocate(struct file *, int, loff_t, loff_t);
2067:	static vm_fault_t shmem_fault(struct vm_fault *);
3388:	static struct dentry *shmem_fh_to_dentry(struct super_block *, struct fid *, int, int);
2714:	static loff_t shmem_file_llseek(struct file *, loff_t, int);
2595:	static ssize_t shmem_file_read_iter(struct kiocb *, struct iov_iter *);
3221:	static int shmem_fileattr_get(struct dentry *, struct fileattr *);
3230:	static int shmem_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
3750:	static int shmem_fill_super(struct super_block *, struct fs_context *);
3840:	static void shmem_free_fc(struct fs_context *);
3871:	static void shmem_free_in_core_inode(struct inode *);
1834:	static int shmem_get_folio_gfp(struct inode *, unsigned long, struct folio **, enum sgp_type, gfp_t, struct vm_area_struct *, struct vm_fault *, vm_fault_t *);
2330:	static struct inode *shmem_get_inode(struct super_block *, struct inode *, umode_t, dev_t, unsigned long);
3186:	static const char *shmem_get_link(struct dentry *, struct inode *, struct delayed_call *);
3366:	static struct dentry *shmem_get_parent(struct dentry *);
2240:	static struct mempolicy *shmem_get_policy(struct vm_area_struct *, unsigned long);
3835:	static int shmem_get_tree(struct fs_context *);
1048:	static int shmem_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
3884:	static void shmem_init_inode(void *);
2992:	static int shmem_link(struct dentry *, struct inode *, struct dentry *);
3343:	static ssize_t shmem_listxattr(struct dentry *, char *, size_t);
3371:	static int shmem_match(struct inode *, void *);
2971:	static int shmem_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
2916:	static int shmem_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
2279:	static int shmem_mmap(struct file *, struct vm_area_struct *);
3482:	static int shmem_parse_one(struct fs_context *, struct fs_parameter *);
3571:	static int shmem_parse_options(struct fs_context *, void *);
3180:	static void shmem_put_link(void *);
3739:	static void shmem_put_super(struct super_block *);
354:	static void shmem_recalc_inode(struct inode *);
3622:	static int shmem_reconfigure(struct fs_context *);
3079:	static int shmem_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1623:	static int shmem_replace_folio(struct folio **, gfp_t, struct shmem_inode_info *, unsigned long);
3036:	static int shmem_rmdir(struct inode *, struct dentry *);
2234:	static int shmem_set_policy(struct vm_area_struct *, struct mempolicy *);
1083:	static int shmem_setattr(struct user_namespace *, struct dentry *, struct iattr *);
3688:	static int shmem_show_options(struct seq_file *, struct dentry *);
2888:	static int shmem_statfs(struct dentry *, struct kstatfs *);
1728:	static int shmem_swapin_folio(struct inode *, unsigned long, struct folio **, enum sgp_type, gfp_t, struct vm_area_struct *, vm_fault_t *);
3125:	static int shmem_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
2947:	static int shmem_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
906:	static void shmem_undo_range(struct inode *, loff_t, loff_t, bool);
3021:	static int shmem_unlink(struct inode *, struct dentry *);
669:	static long shmem_unused_huge_count(struct super_block *, struct shrink_control *);
658:	static long shmem_unused_huge_scan(struct super_block *, struct shrink_control *);
546:	static unsigned long shmem_unused_huge_shrink(struct shmem_sb_info *, struct shrink_control *, unsigned long);
2524:	static int shmem_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
2560:	static int shmem_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1326:	static int shmem_writepage(struct page *, struct writeback_control *);
3293:	static int shmem_xattr_handler_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
3303:	static int shmem_xattr_handler_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
2060:	static int synchronous_wake_function(wait_queue_entry_t *, unsigned int, int, void *);

File mm/slab.h:
661:	static struct kmem_cache *cache_from_obj(struct kmem_cache *, void *);
731:	static void slab_post_alloc_hook(struct kmem_cache *, struct obj_cgroup *, gfp_t, size_t, void **, bool, unsigned int);
713:	static struct kmem_cache *slab_pre_alloc_hook(struct kmem_cache *, struct list_lru *, struct obj_cgroup **, size_t, gfp_t);

File mm/slab_common.c:
979:	void *__kmalloc(size_t, gfp_t);
973:	void *__kmalloc_node(size_t, gfp_t, int);
985:	void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
1036:	size_t __ksize(const void *);
630:	void create_boot_cache(struct kmem_cache *, const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
662:	struct kmem_cache *create_kmalloc_cache(const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
901:	void create_kmalloc_caches(slab_flags_t);
1268:	void dump_unreclaimable_slab(void);
160:	struct kmem_cache *find_mergeable(unsigned int, unsigned int, slab_flags_t, const char *, void (*)(void *));
932:	void free_large_kmalloc(struct folio *, void *);
1001:	void kfree(const void *);
1417:	void kfree_sensitive(const void *);
1085:	gfp_t kmalloc_fix_flags(gfp_t);
1128:	void *kmalloc_large(size_t, gfp_t);
1138:	void *kmalloc_large_node(size_t, gfp_t, int);
1072:	void *kmalloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);
744:	size_t kmalloc_size_roundup(size_t);
726:	struct kmem_cache *kmalloc_slab(size_t, gfp_t);
1060:	void *kmalloc_trace(struct kmem_cache *, gfp_t, size_t);
392:	struct kmem_cache *kmem_cache_create(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
278:	struct kmem_cache *kmem_cache_create_usercopy(const char *, unsigned int, unsigned int, slab_flags_t, unsigned int, unsigned int, void (*)(void *));
480:	void kmem_cache_destroy(struct kmem_cache *);
517:	int kmem_cache_shrink(struct kmem_cache *);
83:	unsigned int kmem_cache_size(struct kmem_cache *);
573:	void kmem_dump_obj(void *);
539:	bool kmem_valid_obj(void *);
1389:	void *krealloc(const void *, size_t, gfp_t);
1431:	size_t ksize(const void *);
832:	void setup_kmalloc_cache_index_table(void);
1461:	int should_failslab(struct kmem_cache *, gfp_t);
525:	bool slab_is_available(void);
473:	void slab_kmem_cache_release(struct kmem_cache *);
138:	int slab_unmergeable(struct kmem_cache *);
1103:	static void *__kmalloc_large_node(size_t, gfp_t, int);
869:	static void new_kmalloc_cache(int, enum kmalloc_cache_type, slab_flags_t);
66:	static int setup_slab_merge(char *);
60:	static int setup_slab_nomerge(char *);
422:	static void slab_caches_to_rcu_destroy_workfn(struct work_struct *);
1229:	static void *slab_next(struct seq_file *, void *, loff_t *);
1336:	static int slab_proc_init(void);
1258:	static int slab_show(struct seq_file *, void *);
1223:	static void *slab_start(struct seq_file *, loff_t *);
1234:	static void slab_stop(struct seq_file *, void *);
1322:	static int slabinfo_open(struct inode *, struct file *);

File mm/slub.c:
5063:	struct kmem_cache *__kmem_cache_alias(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
3487:	void *__kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int, size_t, unsigned long);
5086:	int __kmem_cache_create(struct kmem_cache *, slab_flags_t);
4595:	bool __kmem_cache_empty(struct kmem_cache *);
3798:	void __kmem_cache_free(struct kmem_cache *, void *, unsigned long);
4278:	void __kmem_cache_release(struct kmem_cache *);
4838:	int __kmem_cache_shrink(struct kmem_cache *);
4609:	int __kmem_cache_shutdown(struct kmem_cache *);
4625:	void __kmem_obj_info(struct kmem_obj_info *, void *, struct slab *);
223:	void *fixup_red_left(struct kmem_cache *, void *);
6474:	void get_slabinfo(struct kmem_cache *, struct slabinfo *);
3474:	void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
4012:	int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
3480:	void *kmem_cache_alloc_lru(struct kmem_cache *, struct list_lru *, gfp_t);
3495:	void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int);
1639:	slab_flags_t kmem_cache_flags(unsigned int, slab_flags_t, const char *);
3803:	void kmem_cache_free(struct kmem_cache *, void *);
3893:	void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
4999:	void kmem_cache_init(void);
5054:	void kmem_cache_init_late(void);
815:	void print_tracking(struct kmem_cache *, void *);
878:	void skip_orig_size_check(struct kmem_cache *, const void *);
6496:	void slabinfo_show_stats(struct seq_file *, struct kmem_cache *);
6500:	ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);
6174:	void sysfs_slab_release(struct kmem_cache *);
6168:	void sysfs_slab_unlink(struct kmem_cache *);
5180:	long validate_slab_cache(struct kmem_cache *);
3065:	static void *___slab_alloc(struct kmem_cache *, gfp_t, int, unsigned long, struct kmem_cache_cpu *, unsigned int);
522:	static bool __cmpxchg_double_slab(struct kmem_cache *, struct slab *, void *, unsigned long, void *, unsigned long, const char *);
2055:	static void __free_slab(struct kmem_cache *, struct slab *);
4776:	static int __kmem_cache_do_shrink(struct kmem_cache *);
3574:	static void __slab_free(struct kmem_cache *, struct slab *, void *, void *, int, unsigned long);
2582:	static void __unfreeze_partials(struct kmem_cache *, struct slab *);
5597:	static ssize_t aliases_show(struct kmem_cache *, char *);
5517:	static ssize_t align_show(struct kmem_cache *, char *);
1421:	static bool alloc_debug_processing(struct kmem_cache *, struct slab *, void *, int);
4970:	static struct kmem_cache *bootstrap(struct kmem_cache *);
5681:	static ssize_t cache_dma_show(struct kmem_cache *, char *);
4349:	static int calculate_sizes(struct kmem_cache *);
1032:	static int check_bytes_and_report(struct kmem_cache *, struct slab *, u8 *, char *, u8 *, unsigned int, unsigned int);
1161:	static int check_object(struct kmem_cache *, struct slab *, void *, u8);
1229:	static int check_slab(struct kmem_cache *, struct slab *);
560:	static bool cmpxchg_double_slab(struct kmem_cache *, struct slab *, void *, unsigned long, void *, unsigned long, const char *);
5561:	static ssize_t cpu_partial_show(struct kmem_cache *, char *);
5571:	static ssize_t cpu_partial_store(struct kmem_cache *, const char *, size_t);
5609:	static ssize_t cpu_slabs_show(struct kmem_cache *, char *);
5589:	static ssize_t ctor_show(struct kmem_cache *, char *);
2474:	static void deactivate_slab(struct kmem_cache *, struct slab *, void *);
5696:	static ssize_t destroy_by_rcu_show(struct kmem_cache *, char *);
2095:	static void discard_slab(struct kmem_cache *, struct slab *);
2805:	static void flush_all_cpus_locked(struct kmem_cache *);
2778:	static void flush_cpu_slab(struct work_struct *);
2079:	static void free_slab(struct kmem_cache *, struct slab *);
3505:	static void free_to_partial_list(struct kmem_cache *, struct slab *, void *, void *, int, unsigned long);
2254:	static void *get_partial_node(struct kmem_cache *, struct kmem_cache_node *, struct partial_context *);
5674:	static ssize_t hwcache_align_show(struct kmem_cache *, char *);
1360:	static void inc_slabs_node(struct kmem_cache *, int, int);
6051:	static void kmem_cache_release(struct kobject *);
5541:	static ssize_t min_partial_show(struct kmem_cache *, char *);
5546:	static ssize_t min_partial_store(struct kmem_cache *, const char *, size_t);
2044:	static struct slab *new_slab(struct kmem_cache *, gfp_t, int);
5523:	static ssize_t object_size_show(struct kmem_cache *, char *);
5621:	static ssize_t objects_partial_show(struct kmem_cache *, char *);
5615:	static ssize_t objects_show(struct kmem_cache *, char *);
5529:	static ssize_t objs_per_slab_show(struct kmem_cache *, char *);
1258:	static int on_freelist(struct kmem_cache *, struct slab *, void *);
5535:	static ssize_t order_show(struct kmem_cache *, char *);
1492:	static char *parse_slub_debug_flags(char *, slab_flags_t *, char **, bool);
5603:	static ssize_t partial_show(struct kmem_cache *, char *);
5734:	static ssize_t poison_show(struct kmem_cache *, char *);
913:	static void print_trailer(struct kmem_cache *, struct slab *, u8 *);
2678:	static void put_cpu_partial(struct kmem_cache *, struct slab *, int);
2072:	static void rcu_free_slab(struct callback_head *);
5668:	static ssize_t reclaim_account_show(struct kmem_cache *, char *);
5727:	static ssize_t red_zone_show(struct kmem_cache *, char *);
5808:	static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *, char *);
5813:	static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *, const char *, size_t);
5715:	static ssize_t sanity_checks_show(struct kmem_cache *, char *);
745:	static depot_stack_handle_t set_track_prepare(void);
1569:	static int setup_slub_debug(char *);
4696:	static int setup_slub_max_order(char *);
4706:	static int setup_slub_min_objects(char *);
4687:	static int setup_slub_min_order(char *);
5383:	static ssize_t show_slab_objects(struct kmem_cache *, char *, unsigned long);
5791:	static ssize_t shrink_show(struct kmem_cache *, char *);
5796:	static ssize_t shrink_store(struct kmem_cache *, const char *, size_t);
6019:	static ssize_t slab_attr_show(struct kobject *, struct attribute *, char *);
6035:	static ssize_t slab_attr_store(struct kobject *, struct attribute *, const char *, size_t);
883:	static void slab_bug(struct kmem_cache *, char *, ...);
980:	static void slab_err(struct kmem_cache *, struct slab *, const char *, ...);
898:	static void slab_fix(struct kmem_cache *, char *, ...);
2965:	static void slab_out_of_memory(struct kmem_cache *, gfp_t, int);
1126:	static void slab_pad_check(struct kmem_cache *, struct slab *);
5511:	static ssize_t slab_size_show(struct kmem_cache *, char *);
6216:	static int slab_sysfs_init(void);
5627:	static ssize_t slabs_cpu_partial_show(struct kmem_cache *, char *);
5703:	static ssize_t slabs_show(struct kmem_cache *, char *);
2846:	static int slub_cpu_dead(unsigned int);
5741:	static ssize_t store_user_show(struct kmem_cache *, char *);
6117:	static int sysfs_slab_add(struct kmem_cache *);
5709:	static ssize_t total_objects_show(struct kmem_cache *, char *);
5721:	static ssize_t trace_show(struct kmem_cache *, char *);
5748:	static ssize_t validate_show(struct kmem_cache *, char *);
5123:	static void validate_slab(struct kmem_cache *, struct slab *, unsigned long *);
5753:	static ssize_t validate_store(struct kmem_cache *, const char *, size_t);

File mm/sparse-vmemmap.c:
449:	struct page *__populate_section_memmap(unsigned long, unsigned long, int, struct vmem_altmap *, struct dev_pagemap *);
199:	void pmd_init(void *);
216:	void pud_init(void *);
49:	void *vmemmap_alloc_block(unsigned long, int);
77:	void *vmemmap_alloc_block_buf(unsigned long, int, struct vmem_altmap *);
303:	int vmemmap_check_pmd(pmd_t *, int, unsigned long, unsigned long);
220:	p4d_t *vmemmap_p4d_populate(pgd_t *, unsigned long, int);
233:	pgd_t *vmemmap_pgd_populate(unsigned long, int);
187:	pmd_t *vmemmap_pmd_populate(pud_t *, unsigned long, int);
292:	int vmemmap_populate_basepages(unsigned long, unsigned long, int, struct vmem_altmap *);
309:	int vmemmap_populate_hugepages(unsigned long, unsigned long, int, struct vmem_altmap *);
144:	pte_t *vmemmap_pte_populate(pmd_t *, unsigned long, int, struct vmem_altmap *, struct page *);
203:	pud_t *vmemmap_pud_populate(p4d_t *, unsigned long, int);
298:	void vmemmap_set_pmd(pmd_t *, void *, int, unsigned long, unsigned long);
133:	void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
40:	static void *__earlyonly_bootmem_alloc(int, unsigned long, unsigned long, unsigned long);
106:	static void *altmap_alloc_block_buf(unsigned long, struct vmem_altmap *);
381:	static pte_t *compound_section_tail_page(unsigned long);
245:	static pte_t *vmemmap_populate_address(unsigned long, int, struct vmem_altmap *, struct page *);
398:	static int vmemmap_populate_compound_pages(unsigned long, unsigned long, unsigned long, int, struct dev_pagemap *);

File mm/sparse.c:
316:	size_t mem_section_usage_size(void);
480:	void *sparse_buffer_alloc(unsigned long);
559:	void sparse_init(void);
194:	void subsection_map_init(unsigned long, unsigned long);
498:	void vmemmap_populate_print_last(void);
266:	static void memblocks_present(void);
226:	static void memory_present(int, unsigned long, unsigned long);
129:	static void mminit_validate_memmodel_limits(unsigned long *, unsigned long *);
471:	static void sparse_buffer_fini(void);
458:	static void sparse_buffer_init(unsigned long, int);
63:	static struct mem_section *sparse_index_alloc(int);
506:	static void sparse_init_nid(int, unsigned long, unsigned long, unsigned long);

File mm/swap.c:
122:	void __folio_put(struct folio *);
1090:	void __pagevec_release(struct pagevec *);
720:	void deactivate_file_folio(struct folio *);
743:	void deactivate_page(struct page *);
382:	void folio_activate(struct folio *);
531:	void folio_add_lru(struct folio *);
560:	void folio_add_lru_vma(struct folio *, struct vm_area_struct *);
1110:	void folio_batch_remove_exceptionals(struct folio_batch *);
488:	void folio_mark_accessed(struct folio *);
284:	void folio_rotate_reclaimable(struct folio *);
174:	int get_kernel_pages(const struct kvec *, int, int, struct page **);
783:	void lru_add_drain(void);
937:	void lru_add_drain_all(void);
676:	void lru_add_drain_cpu(int);
806:	void lru_add_drain_cpu_zone(struct zone *);
958:	void lru_cache_disable(void);
299:	void lru_note_cost(struct lruvec *, bool, unsigned int, unsigned int);
351:	void lru_note_cost_refault(struct folio *);
766:	void mark_page_lazyfree(struct page *);
1122:	unsigned int pagevec_lookup_range_tag(struct pagevec *, struct address_space *, unsigned long *, unsigned long, xa_mark_t);
139:	void put_pages_list(struct list_head *);
994:	void release_pages(release_pages_arg, int);
1135:	void swap_setup(void);
109:	static void __folio_put_large(struct folio *);
846:	static void __lru_add_drain_all(bool);
81:	static void __page_cache_release(struct folio *);
357:	static void folio_activate_fn(struct lruvec *, struct folio *);
233:	static void folio_batch_move_lru(struct folio_batch *, move_fn_t);
819:	static void lru_add_drain_per_cpu(struct work_struct *);
193:	static void lru_add_fn(struct lruvec *, struct folio *);
591:	static void lru_deactivate_file_fn(struct lruvec *, struct folio *);
632:	static void lru_deactivate_fn(struct lruvec *, struct folio *);
648:	static void lru_lazyfree_fn(struct lruvec *, struct folio *);
267:	static void lru_move_tail_fn(struct lruvec *, struct folio *);

File mm/swap_cgroup.c:
162:	unsigned short lookup_swap_cgroup_id(swp_entry_t);
97:	unsigned short swap_cgroup_cmpxchg(swp_entry_t, unsigned short, unsigned short);
126:	unsigned short swap_cgroup_record(swp_entry_t, unsigned short, unsigned int);
204:	void swap_cgroup_swapoff(int);
167:	int swap_cgroup_swapon(int, unsigned long);

File mm/swap_slots.c:
68:	void disable_swap_slots_cache_lock(void);
238:	void enable_swap_slots_cache(void);
302:	swp_entry_t folio_alloc_swap(struct folio *);
272:	void free_swap_slot(swp_entry_t);
85:	void reenable_swap_slots_cache_unlock(void);
113:	static int alloc_swap_slot_cache(unsigned int);
168:	static void drain_slots_cache_cpu(unsigned int, unsigned int, bool);
230:	static int free_slot_cache(unsigned int);

File mm/swap_state.c:
139:	void __delete_from_swap_cache(struct folio *, swp_entry_t, void *);
409:	struct page *__read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool *);
174:	bool add_to_swap(struct folio *);
88:	int add_to_swap_cache(struct folio *, swp_entry_t, gfp_t, void **);
244:	void clear_shadow_from_swap_cache(int, unsigned long, unsigned long);
231:	void delete_from_swap_cache(struct folio *);
684:	void exit_swap_address_space(unsigned int);
382:	struct folio *filemap_get_incore_folio(struct address_space *, unsigned long);
295:	void free_page_and_swap_cache(struct page *);
306:	void free_pages_and_swap_cache(struct encoded_page **, int);
280:	void free_swap_cache(struct page *);
72:	void *get_shadow_from_swap_cache(swp_entry_t);
661:	int init_swap_address_space(unsigned int, unsigned long);
513:	struct page *read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool, struct swap_iocb **);
64:	void show_swap_cache_info(void);
325:	struct folio *swap_cache_get_folio(swp_entry_t, struct vm_area_struct *, unsigned long);
607:	struct page *swap_cluster_readahead(swp_entry_t, gfp_t, struct vm_fault *);
847:	struct page *swapin_readahead(swp_entry_t, gfp_t, struct vm_fault *);
885:	static int swap_init_sysfs(void);
856:	static ssize_t vma_ra_enabled_show(struct kobject *, struct kobj_attribute *, char *);
862:	static ssize_t vma_ra_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File mm/swapfile.c:
2381:	long __arm64_sys_swapoff(const struct pt_regs *);
2976:	long __arm64_sys_swapon(const struct pt_regs *);
3631:	void __cgroup_throttle_swaprate(struct page *, gfp_t);
3394:	unsigned long __page_file_index(struct page *);
1434:	int __swap_count(swp_entry_t);
1470:	int __swp_swapcount(swp_entry_t);
3416:	int add_swap_count_continuation(swp_entry_t, gfp_t);
2179:	int add_swap_extent(struct swap_info_struct *, unsigned long, unsigned long, sector_t);
2814:	unsigned long arch_max_swapfile_size(void);
1579:	bool folio_free_swap(struct folio *);
1617:	int free_swap_and_cache(swp_entry_t);
2807:	unsigned long generic_max_swapfile_size(void);
1251:	struct swap_info_struct *get_swap_device(swp_entry_t);
1046:	int get_swap_pages(int, swp_entry_t *, int);
2370:	bool has_usable_swap(void);
3379:	struct swap_info_struct *page_swap_info(struct page *);
1335:	void put_swap_folio(struct folio *, swp_entry_t);
3246:	void si_swapinfo(struct sysinfo *);
1383:	int split_swap_cluster(swp_entry_t);
3352:	int swap_duplicate(swp_entry_t);
1323:	void swap_free(swp_entry_t);
228:	sector_t swap_page_sector(struct page *);
3340:	void swap_shmem_alloc(swp_entry_t);
1406:	void swapcache_free_entries(swp_entry_t *, int);
3388:	struct address_space *swapcache_mapping(struct folio *);
3369:	int swapcache_prepare(swp_entry_t);
3374:	struct swap_info_struct *swp_swap_info(swp_entry_t);
1487:	int swp_swapcount(swp_entry_t);
3274:	static int __swap_duplicate(swp_entry_t, unsigned char);
1286:	static unsigned char __swap_entry_free(struct swap_info_struct *, swp_entry_t);
131:	static int __try_to_reclaim_swap(struct swap_info_struct *, unsigned long, unsigned long);
2316:	static void _enable_swap_info(struct swap_info_struct *);
537:	static void free_cluster(struct swap_info_struct *, unsigned long);
2690:	static int max_swapfiles_check(void);
2681:	static int procswaps_init(void);
624:	static bool scan_swap_map_try_ssd_cluster(struct swap_info_struct *, unsigned long *, unsigned long *);
3528:	static bool swap_count_continued(struct swap_info_struct *, unsigned long, unsigned char);
509:	static void swap_discard_work(struct work_struct *);
486:	static void swap_do_scheduled_discard(struct swap_info_struct *);
2599:	static void *swap_next(struct seq_file *, void *, loff_t *);
1529:	static bool swap_page_trans_huge_swapped(struct swap_info_struct *, swp_entry_t);
693:	static void swap_range_alloc(struct swap_info_struct *, unsigned long, unsigned int);
722:	static void swap_range_free(struct swap_info_struct *, unsigned long, unsigned int);
2624:	static int swap_show(struct seq_file *, void *);
2578:	static void *swap_start(struct seq_file *, loff_t *);
2619:	static void swap_stop(struct seq_file *, void *);
520:	static void swap_users_ref_free(struct percpu_ref *);
3661:	static int swapfile_init(void);
2658:	static int swaps_open(struct inode *, struct file *);
2563:	static __poll_t swaps_poll(struct file *, poll_table *);
1399:	static int swp_entry_cmp(const void *, const void *);

File mm/truncate.c:
154:	void folio_invalidate(struct folio *, size_t, size_t);
254:	int generic_error_remove_page(struct address_space *, struct page *);
295:	long invalidate_inode_page(struct page *);
707:	int invalidate_inode_pages2(struct address_space *);
620:	int invalidate_inode_pages2_range(struct address_space *, unsigned long, unsigned long);
556:	unsigned long invalidate_mapping_pages(struct address_space *, unsigned long, unsigned long);
498:	unsigned long invalidate_mapping_pagevec(struct address_space *, unsigned long, unsigned long, unsigned long *);
791:	void pagecache_isize_extended(struct inode *, loff_t, loff_t);
190:	int truncate_inode_folio(struct address_space *, struct folio *);
446:	void truncate_inode_pages(struct address_space *, loff_t);
461:	void truncate_inode_pages_final(struct address_space *);
330:	void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);
211:	bool truncate_inode_partial_folio(struct folio *, loff_t, loff_t);
728:	void truncate_pagecache(struct inode *, loff_t);
836:	void truncate_pagecache_range(struct inode *, loff_t, loff_t);
761:	void truncate_setsize(struct inode *, loff_t);
43:	static void clear_shadow_entry(struct address_space *, unsigned long, void *);
173:	static void truncate_cleanup_folio(struct folio *);
60:	static void truncate_folio_batch_exceptionals(struct address_space *, struct folio_batch *, unsigned long *);

File mm/util.c:
448:	int __account_locked_vm(struct mm_struct *, unsigned long, bool, struct task_struct *, bool);
697:	void *__vcalloc(size_t, size_t, gfp_t);
911:	int __vm_enough_memory(struct mm_struct *, long, int);
670:	void *__vmalloc_array(size_t, size_t, gfp_t);
491:	int account_locked_vm(struct mm_struct *, unsigned long, bool);
357:	unsigned long arch_mmap_rnd(void);
410:	void arch_pick_mmap_layout(struct mm_struct *, struct rlimit *);
348:	unsigned long arch_randomize_brk(struct mm_struct *);
1106:	void flush_dcache_folio(struct folio *);
720:	struct anon_vma *folio_anon_vma(struct folio *);
770:	void folio_copy(struct folio *, struct folio *);
741:	struct address_space *folio_mapping(struct folio *);
965:	int get_cmdline(struct task_struct *, char *, int);
38:	void kfree_const(const void *);
125:	void *kmemdup(const void *, size_t, gfp_t);
145:	char *kmemdup_nul(const char *, size_t, gfp_t);
52:	char *kstrdup(const char *, gfp_t);
79:	const char *kstrdup_const(const char *, gfp_t);
98:	char *kstrndup(const char *, size_t, gfp_t);
622:	void kvfree(const void *);
640:	void kvfree_sensitive(const void *, size_t);
559:	void *kvmalloc_node(size_t, gfp_t, int);
649:	void *kvrealloc(const void *, size_t, size_t, gfp_t);
1039:	void mem_dump_obj(void *);
1014:	int memcmp_pages(struct page *, struct page *);
170:	void *memdup_user(const void *, size_t);
252:	void *memdup_user_nul(const void *, size_t);
842:	int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
806:	int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
790:	int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1093:	void page_offline_begin(void);
1099:	void page_offline_end(void);
1083:	void page_offline_freeze(void);
1088:	void page_offline_thaw(void);
715:	void *page_rmapping(struct page *);
329:	unsigned long randomize_page(unsigned long, unsigned long);
299:	unsigned long randomize_stack_top(unsigned long);
220:	char *strndup_user(const char *, long);
708:	void *vcalloc(size_t, size_t);
856:	unsigned long vm_commit_limit(void);
889:	unsigned long vm_memory_committed(void);
530:	unsigned long vm_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
507:	unsigned long vm_mmap_pgoff(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
276:	int vma_is_stack_for_current(struct vm_area_struct *);
286:	void vma_set_file(struct vm_area_struct *, struct file *);
685:	void *vmalloc_array(size_t, size_t);
196:	void *vmemdup_user(const void *, size_t);
801:	static void sync_overcommit_as(struct work_struct *);

File mm/vmalloc.c:
2538:	struct vm_struct *__get_vm_area_caller(unsigned long, unsigned long, unsigned long, unsigned long, const void *);
3304:	void *__vmalloc(unsigned long, gfp_t);
3289:	void *__vmalloc_node(unsigned long, unsigned long, gfp_t, int, const void *);
3142:	void *__vmalloc_node_range(unsigned long, unsigned long, unsigned long, unsigned long, gfp_t, pgprot_t, unsigned long, int, const void *);
590:	int __vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
425:	void __vunmap_range_noflush(unsigned long, unsigned long);
2583:	struct vm_struct *find_vm_area(const void *);
1863:	struct vmap_area *find_vmap_area(unsigned long);
3688:	void free_vm_area(struct vm_struct *);
2557:	struct vm_struct *get_vm_area(unsigned long, unsigned long);
2565:	struct vm_struct *get_vm_area_caller(unsigned long, unsigned long, const void *);
318:	int ioremap_page_range(unsigned long, unsigned long, phys_addr_t, pgprot_t);
78:	bool is_vmalloc_addr(const void *);
645:	int is_vmalloc_or_module_addr(const void *);
4035:	void pcpu_free_vm_areas(struct vm_struct **, int);
3789:	struct vm_struct **pcpu_get_vm_areas(const unsigned long *, const size_t *, int, size_t);
1678:	int register_vmap_purge_notifier(struct notifier_block *);
3679:	int remap_vmalloc_range(struct vm_area_struct *, void *, unsigned long);
3619:	int remap_vmalloc_range_partial(struct vm_area_struct *, unsigned long, void *, unsigned long, unsigned long);
2604:	struct vm_struct *remove_vm_area(const void *);
1684:	int unregister_vmap_purge_notifier(struct notifier_block *);
2795:	void vfree(const void *);
2759:	void vfree_atomic(const void *);
2330:	void vm_area_add_early(struct vm_struct *);
2358:	void vm_area_register_early(struct vm_struct *, size_t);
2261:	void *vm_map_ram(struct page **, unsigned int, int);
2205:	void vm_unmap_aliases(void);
2219:	void vm_unmap_ram(const void *, unsigned int);
3323:	void *vmalloc(unsigned long);
3447:	void *vmalloc_32(unsigned long);
3463:	void *vmalloc_32_user(unsigned long);
4046:	bool vmalloc_dump_obj(void *);
3342:	void *vmalloc_huge(unsigned long, gfp_t);
2419:	void vmalloc_init(void);
3401:	void *vmalloc_node(unsigned long, int);
807:	unsigned long vmalloc_nr_pages(void);
665:	struct page *vmalloc_to_page(const void *);
725:	unsigned long vmalloc_to_pfn(const void *);
3379:	void *vmalloc_user(unsigned long);
2843:	void *vmap(struct page **, unsigned int, unsigned long, pgprot_t);
616:	int vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
3537:	long vread(char *, char *, unsigned long);
2819:	void vunmap(const void *);
462:	void vunmap_range(unsigned long, unsigned long);
447:	void vunmap_range_noflush(unsigned long, unsigned long);
3363:	void *vzalloc(unsigned long);
3419:	void *vzalloc_node(unsigned long, int);
2490:	static struct vm_struct *__get_vm_area_node(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int, gfp_t, const void *);
1730:	static bool __purge_vmap_area_lazy(unsigned long, unsigned long);
2738:	static void __vfree_deferred(const void *);
2690:	static void __vunmap(const void *, int);
2152:	static void _vm_unmap_aliases(unsigned long, unsigned long, int);
1589:	static struct vmap_area *alloc_vmap_area(unsigned long, unsigned long, unsigned long, unsigned long, int, gfp_t);
1803:	static void drain_vmap_area_work(struct work_struct *);
1853:	static void free_unmap_vmap_area(struct vmap_area *);
1822:	static void free_vmap_area_noflush(struct vmap_area *);
797:	static void free_vmap_area_rb_augment_cb_rotate(struct rb_node *, struct rb_node *);
94:	static void free_work(struct work_struct *);
1085:	static void insert_vmap_area(struct vmap_area *, struct rb_root *, struct list_head *);
1097:	static void insert_vmap_area_augment(struct vmap_area *, struct rb_node *, struct rb_root *, struct list_head *);
4192:	static int proc_vmalloc_init(void);
2057:	static void purge_fragmented_blocks_allcpus(void);
1795:	static void purge_vmap_area_lazy(void);
4071:	static void *s_next(struct seq_file *, void *, loff_t *);
4121:	static int s_show(struct seq_file *, void *);
4061:	static void *s_start(struct seq_file *, loff_t *);
4076:	static void s_stop(struct seq_file *, void *);
55:	static int set_nohugeiomap(char *);
68:	static int set_nohugevmalloc(char *);
289:	static int vmap_range_noflush(unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int);

File mm/vmpressure.c:
239:	void vmpressure(gfp_t, struct mem_cgroup *, bool, unsigned long, unsigned long);
466:	void vmpressure_cleanup(struct vmpressure *);
451:	void vmpressure_init(struct vmpressure *);
327:	void vmpressure_prio(gfp_t, struct mem_cgroup *, int);
366:	int vmpressure_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
427:	void vmpressure_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
180:	static void vmpressure_work_fn(struct work_struct *);

File mm/vmscan.c:
1211:	void __acct_reclaim_writeback(pg_data_t *, struct folio *, int);
283:	int alloc_shrinker_info(struct mem_cgroup *);
7760:	void check_move_unevictable_folios(struct folio_batch *);
7734:	void check_move_unevictable_pages(struct pagevec *);
1037:	void drop_slab(void);
2333:	int folio_isolate_lru(struct folio *);
1454:	void folio_putback_lru(struct folio *);
676:	void free_prealloced_shrinker(struct shrinker *);
269:	void free_shrinker_info(struct mem_cgroup *);
7516:	void kswapd_run(int);
7537:	void kswapd_stop(int);
6718:	unsigned long mem_cgroup_shrink_node(struct mem_cgroup *, gfp_t, bool, pg_data_t *, unsigned long *);
7687:	int node_reclaim(struct pglist_data *, gfp_t, unsigned int);
670:	int prealloc_shrinker(struct shrinker *, const char *, ...);
2129:	unsigned int reclaim_clean_pages_from_list(struct zone *, struct list_head *);
2723:	unsigned long reclaim_pages(struct list_head *);
1137:	void reclaim_throttle(pg_data_t *, enum vmscan_throttle_state);
732:	int register_shrinker(struct shrinker *, const char *, ...);
693:	void register_shrinker_prepared(struct shrinker *);
1431:	long remove_mapping(struct address_space *, struct folio *);
423:	void reparent_shrinker_deferred(struct mem_cgroup *);
352:	void set_shrinker_bit(struct mem_cgroup *, int, int);
768:	void synchronize_shrinkers(void);
6757:	unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *, unsigned long, gfp_t, unsigned int);
6672:	unsigned long try_to_free_pages(struct zonelist *, int, gfp_t, nodemask_t *);
742:	void unregister_shrinker(struct shrinker *);
7429:	void wakeup_kswapd(struct zone *, gfp_t, int, enum zone_type);
583:	unsigned long zone_reclaimable_pages(struct zone *);
625:	static int __prealloc_shrinker(struct shrinker *);
1322:	static int __remove_mapping(struct address_space *, struct folio *, bool, struct mem_cgroup *);
1557:	static struct page *alloc_demote_page(struct page *, unsigned long);
6543:	static bool allow_direct_reclaim(pg_data_t *);
7021:	static int balance_pgdat(pg_data_t *, int, int);
777:	static unsigned long do_shrink_slab(struct shrink_control *, struct shrinker *, int);
6454:	static unsigned long do_try_to_free_pages(struct zonelist *, struct scan_control *);
2217:	static unsigned long isolate_lru_folios(unsigned long, struct lruvec *, struct list_head *, unsigned long *, struct scan_control *, enum lru_list);
7343:	static int kswapd(void *);
7551:	static int kswapd_init(void);
2402:	static unsigned int move_folios_to_lru(struct lruvec *, struct list_head *);
7606:	static unsigned long node_pagecache_reclaimable(struct pglist_data *);
6902:	static bool prepare_kswapd_sleep(pg_data_t *, int, int);
2699:	static unsigned int reclaim_folio_list(struct list_head *, struct pglist_data *);
2600:	static void shrink_active_list(unsigned long, struct lruvec *, struct scan_control *, enum lru_list);
1647:	static unsigned int shrink_folio_list(struct list_head *, struct pglist_data *, struct scan_control *, struct reclaim_stat *, bool);
5908:	static void shrink_lruvec(struct lruvec *, struct scan_control *);
6155:	static void shrink_node(pg_data_t *, struct scan_control *);
976:	static unsigned long shrink_slab(gfp_t, int, struct mem_cgroup *, int);

File mm/vmstat.c:
538:	void __dec_node_page_state(struct page *, enum node_stat_item);
509:	void __dec_node_state(struct pglist_data *, enum node_stat_item);
532:	void __dec_zone_page_state(struct page *, enum zone_stat_item);
488:	void __dec_zone_state(struct zone *, enum zone_stat_item);
482:	void __inc_node_page_state(struct page *, enum node_stat_item);
453:	void __inc_node_state(struct pglist_data *, enum node_stat_item);
476:	void __inc_zone_page_state(struct page *, enum zone_stat_item);
432:	void __inc_zone_state(struct zone *, enum zone_stat_item);
373:	void __mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
342:	void __mod_zone_page_state(struct zone *, enum zone_stat_item, long);
130:	void all_vm_events(unsigned long *);
222:	int calculate_normal_threshold(struct zone *);
198:	int calculate_pressure_threshold(struct zone *);
892:	void cpu_vm_stats_fold(int);
681:	void dec_node_page_state(struct page *, enum node_stat_item);
608:	void dec_zone_page_state(struct page *, enum zone_stat_item);
951:	void drain_zonestat(struct zone *, struct per_cpu_zonestat *);
1115:	unsigned int extfrag_for_order(struct zone *, unsigned int);
187:	void fold_vm_numa_events(void);
1129:	int fragmentation_index(struct zone *, unsigned int);
675:	void inc_node_page_state(struct page *, enum node_stat_item);
670:	void inc_node_state(struct pglist_data *, enum node_stat_item);
602:	void inc_zone_page_state(struct page *, enum zone_stat_item);
2090:	void init_mm_internals(void);
663:	void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
595:	void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
1023:	unsigned long node_page_state(struct pglist_data *, enum node_stat_item);
1012:	unsigned long node_page_state_pages(struct pglist_data *, enum node_stat_item);
1980:	void quiet_vmstat(void);
272:	void refresh_zone_stat_thresholds(void);
317:	void set_pgdat_percpu_threshold(pg_data_t *, int (*)(struct zone *));
982:	unsigned long sum_zone_node_page_state(int, enum zone_stat_item);
996:	unsigned long sum_zone_numa_event_state(int, enum numa_stat_item);
77:	int sysctl_vm_numa_stat_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void vm_events_fold_cpu(int);
1873:	int vmstat_refresh(struct ctl_table *, int, void *, size_t *, loff_t *);
1421:	static void *frag_next(struct seq_file *, void *, loff_t *);
1477:	static int frag_show(struct seq_file *, void *);
1459:	static void frag_show_print(struct seq_file *, pg_data_t *, struct zone *);
1408:	static void *frag_start(struct seq_file *, loff_t *);
1429:	static void frag_stop(struct seq_file *, void *);
2042:	static void init_cpu_node_state(void);
69:	static void invalid_numa_statistics(void);
614:	static void mod_node_state(struct pglist_data *, enum node_stat_item, int, int);
557:	static void mod_zone_state(struct zone *, enum zone_stat_item, long, int);
1950:	static bool need_update(int);
1617:	static int pagetypeinfo_show(struct seq_file *, void *);
1541:	static void pagetypeinfo_showblockcount_print(struct seq_file *, pg_data_t *, struct zone *);
1484:	static void pagetypeinfo_showfree_print(struct seq_file *, pg_data_t *, struct zone *);
806:	static int refresh_cpu_vm_stats(bool);
1868:	static void refresh_vm_stats(struct work_struct *);
2030:	static void start_shepherd_timer(void);
2069:	static int vmstat_cpu_dead(unsigned int);
2063:	static int vmstat_cpu_down_prep(unsigned int);
2052:	static int vmstat_cpu_online(unsigned int);
1822:	static void *vmstat_next(struct seq_file *, void *, loff_t *);
2010:	static void vmstat_shepherd(struct work_struct *);
1830:	static int vmstat_show(struct seq_file *, void *);
1779:	static void *vmstat_start(struct seq_file *, loff_t *);
1849:	static void vmstat_stop(struct seq_file *, void *);
1932:	static void vmstat_update(struct work_struct *);
1437:	static void walk_zones_in_node(struct seq_file *, pg_data_t *, bool, bool, void (*)(struct seq_file *, pg_data_t *, struct zone *));
1757:	static int zoneinfo_show(struct seq_file *, void *);
1663:	static void zoneinfo_show_print(struct seq_file *, pg_data_t *, struct zone *);

File mm/workingset.c:
510:	void workingset_activation(struct folio *);
325:	void workingset_age_nonresident(struct lruvec *, unsigned long);
351:	void *workingset_eviction(struct folio *, struct mem_cgroup *);
385:	void workingset_refault(struct folio *, void *);
544:	void workingset_update_node(struct xa_node *);
572:	static unsigned long count_shadow_nodes(struct shrinker *, struct shrink_control *);
695:	static unsigned long scan_shadow_nodes(struct shrinker *, struct shrink_control *);
629:	static enum lru_status shadow_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
716:	static int workingset_init(void);

File security/commoncap.c:
890:	int cap_bprm_creds_from_file(struct linux_binprm *, struct file *);
66:	int cap_capable(const struct cred *, struct user_namespace *, int, unsigned int);
200:	int cap_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
242:	int cap_capset(struct cred *, const struct cred *, const kernel_cap_t *, const kernel_cap_t *, const kernel_cap_t *);
529:	int cap_convert_nscap(struct user_namespace *, struct dentry *, const void **, size_t);
380:	int cap_inode_getsecurity(struct user_namespace *, struct inode *, const char *, void **, bool);
321:	int cap_inode_killpriv(struct user_namespace *, struct dentry *);
296:	int cap_inode_need_killpriv(struct dentry *);
1035:	int cap_inode_removexattr(struct user_namespace *, struct dentry *, const char *);
994:	int cap_inode_setxattr(struct dentry *, const char *, const void *, size_t, int);
1426:	int cap_mmap_addr(unsigned long);
1440:	int cap_mmap_file(struct file *, unsigned long, unsigned long, unsigned long);
134:	int cap_ptrace_access_check(struct task_struct *, unsigned int);
171:	int cap_ptrace_traceme(struct task_struct *);
112:	int cap_settime(const struct timespec64 *, const struct timezone *);
1128:	int cap_task_fix_setuid(struct cred *, const struct cred *, int);
1270:	int cap_task_prctl(int, unsigned long, unsigned long, unsigned long, unsigned long);
1215:	int cap_task_setioprio(struct task_struct *, int);
1230:	int cap_task_setnice(struct task_struct *, int);
1200:	int cap_task_setscheduler(struct task_struct *);
1405:	int cap_vm_enough_memory(struct mm_struct *, long);
641:	int get_vfs_caps_from_disk(struct user_namespace *, const struct dentry *, struct cpu_vfs_cap_data *);
331:	static bool rootid_owns_currentns(vfsuid_t);

File security/device_cgroup.c:
861:	int devcgroup_check_permission(short, u32, u32, short);
784:	static ssize_t devcgroup_access_write(struct kernfs_open_file *, char *, size_t, loff_t);
222:	static struct cgroup_subsys_state *devcgroup_css_alloc(struct cgroup_subsys_state *);
235:	static void devcgroup_css_free(struct cgroup_subsys_state *);
209:	static void devcgroup_offline(struct cgroup_subsys_state *);
188:	static int devcgroup_online(struct cgroup_subsys_state *);
281:	static int devcgroup_seq_show(struct seq_file *, void *);
462:	static int parent_has_perm(struct dev_cgroup *, struct dev_exception_item *);

File security/min_addr.c:
32:	int mmap_min_addr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
47:	static int init_mmap_min_addr(void);

File tools/lib/bpf/relo_core.c:
146:	int __bpf_core_types_are_compat(const struct btf *, __u32, const struct btf *, __u32, int);
1544:	int __bpf_core_types_match(const struct btf *, __u32, const struct btf *, __u32, bool, int);
1280:	int bpf_core_calc_relo_insn(const char *, const struct bpf_core_relo *, int, const struct btf *, struct bpf_core_cand_list *, struct bpf_core_spec *, struct bpf_core_relo_res *);
1156:	int bpf_core_format_spec(char *, size_t, const struct bpf_core_spec *);
263:	int bpf_core_parse_spec(const char *, const struct btf *, const struct bpf_core_relo *, struct bpf_core_spec *);
1024:	int bpf_core_patch_insn(const char *, struct bpf_insn *, int, const struct bpf_core_relo *, int, const struct bpf_core_relo_res *);
678:	static int bpf_core_calc_field_relo(const char *, const struct bpf_core_relo *, const struct bpf_core_spec *, __u64 *, __u32 *, __u32 *, bool *);
879:	static int bpf_core_calc_relo(const char *, const struct bpf_core_relo *, int, const struct bpf_core_spec *, const struct bpf_core_spec *, struct bpf_core_relo_res *);
1479:	static int bpf_core_composites_match(const struct btf *, const struct btf_type *, const struct btf *, const struct btf_type *, bool, int);
481:	static int bpf_core_match_member(const struct btf *, const struct bpf_core_accessor *, const struct btf *, __u32, struct bpf_core_spec *, __u32 *);
32:	static s64 btf__resolve_size(const struct btf *, u32);
71:	static bool is_flex_arr(const struct btf *, const struct bpf_core_accessor *, const struct btf_array *);

Non-debugging symbols:
0xffff8000080102b4  __entry_text_start
0xffff8000080102b4  __softirqentry_text_end
0xffff8000084f24d0  __kprobes_text_end
0xffff8000084f24d0  __kprobes_text_start
0xffff8000084f24d0  __lock_text_end
0xffff8000084f47e0  __idmap_text_end
0xffff800008500000  _etext
0xffff80000862d000  __entry_tramp_text_end
0xffff80000862e000  idmap_pg_dir
0xffff80000862f000  tramp_pg_dir
0xffff800008630000  reserved_pg_dir
0xffff800008631000  swapper_pg_dir
0xffff8000086745b4  __exittext_end
