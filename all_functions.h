All defined functions:

File ././include/linux/highmem-internal.h:
227:	static void __kunmap_atomic(const void *);

File ./arch/arm64/include/asm/arch_timer.h:
65:	static u64 arch_timer_read_cntpct_el0(void);
77:	static u64 arch_timer_read_cntvct_el0(void);

File ./arch/arm64/include/asm/archrandom.h:
15:	static bool smccc_probe_trng(void);

File ./arch/arm64/include/asm/checksum.h:
23:	static __sum16 ip_fast_csum(const void *, unsigned int);

File ./arch/arm64/include/asm/cpufeature.h:
393:	static bool cpucap_multi_entry_cap_matches(const struct arm64_cpu_capabilities *, int);

File ./arch/arm64/include/asm/daifflags.h:
127:	static void local_daif_inherit(struct pt_regs *);
22:	static void local_daif_mask(void);
67:	static void local_daif_restore(unsigned long);

File ./arch/arm64/include/asm/irqflags.h:
81:	static int arch_irqs_disabled_flags(unsigned long);
27:	static void arch_local_irq_enable(void);
120:	static void arch_local_irq_restore(unsigned long);
101:	static unsigned long arch_local_irq_save(void);
66:	static unsigned long arch_local_save_flags(void);

File ./arch/arm64/include/asm/mte.h:
160:	static void mte_disable_tco_entry(struct task_struct *);

File ./arch/arm64/include/asm/percpu.h:
32:	static unsigned long __kern_my_cpu_offset(void);

File ./arch/arm64/include/asm/pgalloc.h:
49:	static void p4d_populate(struct mm_struct *, p4d_t *, pud_t *);
28:	static void pud_populate(struct mm_struct *, pud_t *, pmd_t *);

File ./arch/arm64/include/asm/pgtable.h:
531:	static void set_pmd_at(struct mm_struct *, unsigned long, pmd_t *, pmd_t);

File ./arch/arm64/include/asm/preempt.h:
45:	static void __preempt_count_add(int);
52:	static void __preempt_count_sub(int);
11:	static int preempt_count(void);

File ./arch/arm64/include/asm/ptrace.h:
367:	static unsigned long instruction_pointer(struct pt_regs *);

File ./arch/arm64/include/asm/stacktrace.h:
25:	static struct stack_info stackinfo_get_irq(void);
42:	static struct stack_info stackinfo_get_task(const struct task_struct *);

File ./arch/arm64/include/asm/tlbflush.h:
281:	static void __flush_tlb_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, bool, int);
246:	static void flush_tlb_mm(struct mm_struct *);
363:	static void flush_tlb_range(struct vm_area_struct *, unsigned long, unsigned long);

File ./arch/arm64/include/asm/uaccess.h:
436:	static unsigned long __clear_user(void *, unsigned long);
38:	static int access_ok(const void *, unsigned long);

File ./arch/arm64/include/asm/virt.h:
113:	static bool is_kernel_in_hyp_mode(void);

File ./arch/arm64/include/asm/xor.h:
19:	static void xor_neon_2(unsigned long, unsigned long * restrict, const unsigned long * restrict);
28:	static void xor_neon_3(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
38:	static void xor_neon_4(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
49:	static void xor_neon_5(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);

File ./include/asm-generic/pgalloc.h:
99:	static void pte_free(struct mm_struct *, struct page *);

File ./include/asm-generic/tlb.h:
532:	static void tlb_end_vma(struct mmu_gather *, struct vm_area_struct *);
448:	static void tlb_flush_mmu_tlbonly(struct mmu_gather *);

File ./include/asm-generic/xor.h:
103:	static void xor_32regs_2(unsigned long, unsigned long * restrict, const unsigned long * restrict);
140:	static void xor_32regs_3(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
187:	static void xor_32regs_4(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
244:	static void xor_32regs_5(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
11:	static void xor_8regs_2(unsigned long, unsigned long * restrict, const unsigned long * restrict);
31:	static void xor_8regs_3(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
53:	static void xor_8regs_4(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
77:	static void xor_8regs_5(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);

File ./include/crypto/internal/blake2b.h:
86:	static int crypto_blake2b_init(struct shash_desc *);
72:	static int crypto_blake2b_setkey(struct crypto_shash *, const u8 *, unsigned int);

File ./include/crypto/internal/chacha.h:
37:	static int chacha12_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
31:	static int chacha20_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File ./include/crypto/sha1_base.h:
21:	static int sha1_base_init(struct shash_desc *);

File ./include/crypto/sha256_base.h:
22:	static int sha224_base_init(struct shash_desc *);
30:	static int sha256_base_init(struct shash_desc *);

File ./include/crypto/sha512_base.h:
22:	static int sha384_base_init(struct shash_desc *);
39:	static int sha512_base_init(struct shash_desc *);

File ./include/crypto/sm3_base.h:
21:	static int sm3_base_init(struct shash_desc *);

File ./include/drm/drm_atomic.h:
473:	static struct drm_atomic_state *drm_atomic_state_get(struct drm_atomic_state *);
488:	static void drm_atomic_state_put(struct drm_atomic_state *);

File ./include/drm/drm_gem.h:
440:	static void drm_gem_object_put(struct drm_gem_object *);

File ./include/drm/drm_gem_dma_helper.h:
58:	static void drm_gem_dma_object_free(struct drm_gem_object *);
92:	static struct sg_table *drm_gem_dma_object_get_sg_table(struct drm_gem_object *);
129:	static int drm_gem_dma_object_mmap(struct drm_gem_object *, struct vm_area_struct *);
74:	static void drm_gem_dma_object_print_info(struct drm_printer *, unsigned int, const struct drm_gem_object *);
110:	static int drm_gem_dma_object_vmap(struct drm_gem_object *, struct iosys_map *);

File ./include/drm/drm_gem_shmem_helper.h:
153:	static void drm_gem_shmem_object_free(struct drm_gem_object *);
215:	static struct sg_table *drm_gem_shmem_object_get_sg_table(struct drm_gem_object *);
268:	static int drm_gem_shmem_object_mmap(struct drm_gem_object *, struct vm_area_struct *);
184:	static int drm_gem_shmem_object_pin(struct drm_gem_object *);
169:	static void drm_gem_shmem_object_print_info(struct drm_printer *, unsigned int, const struct drm_gem_object *);
198:	static void drm_gem_shmem_object_unpin(struct drm_gem_object *);
233:	static int drm_gem_shmem_object_vmap(struct drm_gem_object *, struct iosys_map *);
249:	static void drm_gem_shmem_object_vunmap(struct drm_gem_object *, struct iosys_map *);

File ./include/drm/drm_module.h:
73:	static void drm_pci_unregister_driver_if_modeset(struct pci_driver *, int);
101:	static int drm_platform_driver_register(struct platform_driver *);

File ./include/drm/drm_syncobj.h:
103:	static struct dma_fence *drm_syncobj_fence_get(struct drm_syncobj *);
86:	static void drm_syncobj_put(struct drm_syncobj *);

File ./include/linux/backing-dev-defs.h:
254:	static void wb_put(struct bdi_writeback *);

File ./include/linux/backlight.h:
347:	static int backlight_update_status(struct backlight_device *);

File ./include/linux/bottom_half.h:
31:	static void local_bh_enable(void);

File ./include/linux/bpf.h:
1795:	static void bpf_disable_instrumentation(void);
1801:	static void bpf_enable_instrumentation(void);
272:	static const char *btf_field_type_name(enum btf_field_type);
396:	static void copy_map_value(struct bpf_map *, void *, void *);

File ./include/linux/bpfptr.h:
57:	static int copy_from_bpfptr(void *, bpfptr_t, size_t);
49:	static int copy_from_bpfptr_offset(void *, bpfptr_t, size_t, size_t);
62:	static int copy_to_bpfptr_offset(bpfptr_t, size_t, const void *, size_t);
68:	static void *kvmemdup_bpfptr(bpfptr_t, size_t);

File ./include/linux/btf.h:
453:	static int btf_id_cmp_func(const void *, const void *);
549:	static bool btf_type_is_struct_ptr(struct btf *, const struct btf_type *);

File ./include/linux/buffer_head.h:
393:	static void lock_buffer(struct buffer_head *);

File ./include/linux/capability.h:
262:	static bool bpf_capable(void);
257:	static bool perfmon_capable(void);

File ./include/linux/cgroup-defs.h:
749:	static void cgroup_threadgroup_change_begin(struct task_struct *);
760:	static void cgroup_threadgroup_change_end(struct task_struct *);

File ./include/linux/cgroup.h:
811:	static void put_cgroup_ns(struct cgroup_namespace *);

File ./include/linux/cgroup_refcnt.h:
8:	static void css_get(struct cgroup_subsys_state *);
76:	static void css_put(struct cgroup_subsys_state *);
61:	static bool css_tryget_online(struct cgroup_subsys_state *);

File ./include/linux/clk.h:
1090:	static int clk_bulk_prepare_enable(int, const struct clk_bulk_data *);
1083:	static void clk_disable_unprepare(struct clk *);
1068:	static int clk_prepare_enable(struct clk *);

File ./include/linux/configfs.h:
100:	static void config_group_put(struct config_group *);

File ./include/linux/cred.h:
258:	static const struct cred *get_cred_rcu(const struct cred *);
281:	static void put_cred(const struct cred *);

File ./include/linux/dcache.h:
348:	static void dont_mount(struct dentry *);

File ./include/linux/device.h:
250:	static int devm_add_action_or_reset(struct device *, void (*)(void *), void *);

File ./include/linux/devm-helpers.h:
29:	static void devm_delayed_work_drop(void *);
54:	static void devm_work_drop(void *);

File ./include/linux/dma-fence.h:
273:	static void dma_fence_put(struct dma_fence *);

File ./include/linux/dma-mapping.h:
459:	static int dma_coerce_mask_and_coherent(struct device *, u64);
327:	static dma_addr_t dma_map_single_attrs(struct device *, void *, size_t, enum dma_data_direction, unsigned long);
447:	static int dma_set_mask_and_coherent(struct device *, u64);

File ./include/linux/filter.h:
618:	static u32 bpf_prog_run_pin_on_cpu(const struct bpf_prog *, const void *);

File ./include/linux/fs.h:
2329:	static bool HAS_UNMAPPED_ID(struct user_namespace *, struct inode *);
1807:	static void __sb_end_write(struct super_block *, int);
2628:	static int break_lease(struct inode *, unsigned int);
2948:	static void file_end_write(struct file *);
2934:	static void file_start_write(struct file *);
1780:	static bool fsuidgid_has_mapping(struct super_block *, struct user_namespace *);
2882:	static ssize_t generic_write_sync(struct kiocb *, ssize_t);
1697:	static vfsgid_t i_gid_into_vfsgid(struct user_namespace *, const struct inode *);
1714:	static bool i_gid_needs_update(struct user_namespace *, const struct iattr *, const struct inode *);
1732:	static void i_gid_update(struct user_namespace *, const struct iattr *, struct inode *);
1645:	static vfsuid_t i_uid_into_vfsuid(struct user_namespace *, const struct inode *);
1680:	static void i_uid_update(struct user_namespace *, const struct iattr *, struct inode *);
1863:	static void sb_end_intwrite(struct super_block *);
1851:	static void sb_end_pagefault(struct super_block *);
1839:	static void sb_end_write(struct super_block *);
1939:	static bool sb_start_intwrite_trylock(struct super_block *);
2656:	static int try_break_deleg(struct inode *, struct inode **);

File ./include/linux/fs_struct.h:
27:	static void get_fs_root(struct fs_struct *, struct path *);

File ./include/linux/fsnotify.h:
254:	static void d_delete_notify(struct inode *, struct dentry *);
307:	static void fsnotify_access(struct file *);
356:	static void fsnotify_change(struct dentry *, unsigned int);
217:	static void fsnotify_link(struct inode *, struct inode *, struct dentry *);
130:	static void fsnotify_link_count(struct inode *);
284:	static void fsnotify_mkdir(struct inode *, struct dentry *);
315:	static void fsnotify_modify(struct file *);
138:	static void fsnotify_move(struct inode *, struct inode *, const struct qstr *, int, struct inode *, struct dentry *);

File ./include/linux/fsnotify_backend.h:
271:	static void fsnotify_group_unlock(struct fsnotify_group *);

File ./include/linux/gfp.h:
241:	static struct folio *__folio_alloc_node(gfp_t, unsigned int, int);
254:	static struct page *alloc_pages_node(int, gfp_t, unsigned int);

File ./include/linux/hid.h:
1017:	static void hid_map_usage(struct hid_input *, struct hid_usage *, unsigned long **, int *, __u8, unsigned int);
1074:	static void hid_map_usage_clear(struct hid_input *, struct hid_usage *, unsigned long **, int *, __u8, __u16);

File ./include/linux/highmem.h:
299:	static void zero_user(struct page *, unsigned int, unsigned int);
293:	static void zero_user_segment(struct page *, unsigned int, unsigned int);
272:	static void zero_user_segments(struct page *, unsigned int, unsigned int, unsigned int, unsigned int);

File ./include/linux/hugetlb.h:
1192:	static bool hugetlb_pmd_shared(pte_t *);

File ./include/linux/hugetlb_cgroup.h:
119:	static void hugetlb_cgroup_put_rsvd_cgroup(struct hugetlb_cgroup *);

File ./include/linux/ieee80211.h:
4247:	static bool ieee80211_check_tim(const struct ieee80211_tim_ie *, u8, u16);

File ./include/linux/if_arp.h:
44:	static bool dev_is_mac_header_xmit(const struct net_device *);

File ./include/linux/interrupt.h:
705:	static void tasklet_schedule(struct tasklet_struct *);

File ./include/linux/ipc_namespace.h:
135:	static struct ipc_namespace *get_ipc_ns(struct ipc_namespace *);

File ./include/linux/jhash.h:
70:	static u32 jhash(const void *, u32, u32);
117:	static u32 jhash2(const u32 *, u32, u32);

File ./include/linux/key.h:
306:	static struct key *__key_get(struct key *);
317:	static void key_ref_put(key_ref_t);

File ./include/linux/kref.h:
43:	static void kref_get(struct kref *);
62:	static int kref_put(struct kref *, void (*)(struct kref *));

File ./include/linux/list_bl.h:
151:	static void hlist_bl_unlock(struct hlist_bl_head *);

File ./include/linux/mbcache.h:
48:	static void mb_cache_entry_put(struct mb_cache *, struct mb_cache_entry *);

File ./include/linux/memcontrol.h:
550:	static bool PageMemcgKmem(struct page *);
1086:	static void count_memcg_event_mm(struct mm_struct *, enum vm_event_item);
511:	static struct mem_cgroup *get_mem_cgroup_from_objcg(struct obj_cgroup *);
792:	static void obj_cgroup_put(struct obj_cgroup *);

File ./include/linux/mempolicy.h:
78:	static void mpol_cond_put(struct mempolicy *);

File ./include/linux/mm.h:
2180:	static void add_mm_counter(struct mm_struct *, int, long);
1039:	static unsigned long compound_nr(struct page *);
717:	static unsigned int compound_order(struct page *);
1247:	static void folio_put(struct folio *);
1267:	static void folio_put_refs(struct folio *, int);
1218:	static void get_page(struct page *);
2202:	static int mm_counter_file(struct page *);
877:	static int page_mapcount(struct page *);
942:	static bool page_mapped(struct page *);
2407:	static pud_t *pud_alloc(struct mm_struct *, p4d_t *, unsigned long);
1309:	static void put_page(struct page *);
2725:	static void show_mem(unsigned int, nodemask_t *);
1076:	static int thp_nr_pages(struct page *);
949:	static struct page *virt_to_head_page(const void *);

File ./include/linux/mmzone.h:
1863:	static int pfn_valid(unsigned long);

File ./include/linux/mtd/cfi.h:
307:	static uint8_t cfi_read_query(struct map_info *, uint32_t);

File ./include/linux/mtd/map.h:
389:	static map_word inline_map_read(struct map_info *, unsigned long);
411:	static void inline_map_write(struct map_info *, const map_word, unsigned long);

File ./include/linux/netdevice.h:
4069:	static void dev_hold(struct net_device *);
4081:	static void dev_put(struct net_device *);
3033:	static int dev_queue_xmit(struct sk_buff *);
479:	static void napi_schedule(struct napi_struct *);
4044:	static void netdev_hold(struct net_device *, netdevice_tracker *, gfp_t);
4053:	static void netdev_put(struct net_device *, netdevice_tracker *);
5129:	static const char *netdev_reg_state(const struct net_device *);

File ./include/linux/netfilter.h:
296:	static int NF_HOOK(uint8_t, unsigned int, struct net *, struct sock *, struct sk_buff *, struct net_device *, struct net_device *, int (*)(struct net *, struct sock *, struct sk_buff *));

File ./include/linux/page-flags.h:
845:	static int PageTransHuge(struct page *);
726:	static int PageUptodate(struct page *);
249:	static unsigned long _compound_head(const struct page *);

File ./include/linux/page_idle.h:
123:	static bool page_is_young(struct page *);
133:	static bool test_and_clear_page_young(struct page *);

File ./include/linux/pagemap.h:
899:	static bool folio_trylock(struct folio *);
952:	static void lock_page(struct page *);
907:	static int trylock_page(struct page *);
1036:	static int wait_on_page_locked_killable(struct page *);

File ./include/linux/percpu-refcount.h:
349:	static void percpu_ref_put(struct percpu_ref *);

File ./include/linux/percpu-rwsem.h:
97:	static void percpu_up_read(struct percpu_rw_semaphore *);

File ./include/linux/perf_event.h:
1466:	static int perf_allow_kernel(struct perf_event_attr *);

File ./include/linux/pid.h:
84:	static struct pid *get_pid(struct pid *);

File ./include/linux/pm_runtime.h:
256:	static int pm_generic_runtime_resume(struct device *);
255:	static int pm_generic_runtime_suspend(struct device *);

File ./include/linux/posix_acl.h:
55:	static void posix_acl_release(struct posix_acl *);

File ./include/linux/ptrace.h:
170:	static void ptrace_event_pid(int, struct pid *);
200:	static void ptrace_init_task(struct task_struct *, bool);

File ./include/linux/radix-tree.h:
258:	static void radix_tree_preload_end(void);

File ./include/linux/rcupdate.h:
114:	static void call_rcu_hurry(struct callback_head *, rcu_callback_t);
791:	static void rcu_read_unlock(void);
873:	static void rcu_read_unlock_sched(void);

File ./include/linux/rcupdate_trace.h:
69:	static void rcu_read_unlock_trace(void);

File ./include/linux/refcount.h:
220:	static void refcount_add(int, refcount_t *);
357:	static void refcount_dec(refcount_t *);
331:	static bool refcount_dec_and_test(refcount_t *);
265:	static void refcount_inc(refcount_t *);
308:	static bool refcount_sub_and_test(int, refcount_t *);

File ./include/linux/regset.h:
253:	static int user_regset_copyin(unsigned int *, unsigned int *, const void **, const void **, void *, const int, const int);

File ./include/linux/rhashtable.h:
705:	static void *__rhashtable_insert_fast(struct rhashtable *, const void *, struct rhash_head *, const struct rhashtable_params, bool);
642:	static void *rhashtable_lookup(struct rhashtable *, const void *, const struct rhashtable_params);
665:	static void *rhashtable_lookup_fast(struct rhashtable *, const void *, const struct rhashtable_params);
905:	static int rhashtable_lookup_insert_fast(struct rhashtable *, struct rhash_head *, const struct rhashtable_params);
1118:	static int rhashtable_remove_fast(struct rhashtable *, struct rhash_head *, const struct rhashtable_params);
880:	static int rhltable_insert(struct rhltable *, struct rhlist_head *, const struct rhashtable_params);
692:	static struct rhlist_head *rhltable_lookup(struct rhltable *, const void *, const struct rhashtable_params);
1140:	static int rhltable_remove(struct rhltable *, struct rhlist_head *, const struct rhashtable_params);

File ./include/linux/rmap.h:
491:	static int page_mkclean(struct page *);
113:	static void put_anon_vma(struct anon_vma *);

File ./include/linux/sched/clock.h:
48:	static u64 local_clock(void);

File ./include/linux/sched/task.h:
108:	static struct task_struct *get_task_struct(struct task_struct *);
116:	static void put_task_struct(struct task_struct *);

File ./include/linux/sched/topology.h:
53:	static int cpu_core_flags(void);
60:	static int cpu_numa_flags(void);
39:	static int cpu_smt_flags(void);

File ./include/linux/sched/user.h:
49:	static struct user_struct *get_uid(struct user_struct *);

File ./include/linux/security.h:
1268:	static int security_msg_queue_associate(struct kern_ipc_perm *, int);
1326:	static int security_sem_associate(struct kern_ipc_perm *, int);
1301:	static int security_shm_associate(struct kern_ipc_perm *, int);

File ./include/linux/serial_core.h:
1011:	static int uart_handle_break(struct uart_port *);

File ./include/linux/skbuff.h:
3355:	static void __skb_frag_ref(skb_frag_t *);
3380:	static void __skb_frag_unref(skb_frag_t *, bool);
3108:	static void __skb_queue_purge(struct sk_buff_head *);
3970:	static int memcpy_to_msg(struct msghdr *, void *, int);
1665:	static void net_zcopy_get(struct ubuf_info *);
1710:	static void net_zcopy_put_abort(struct ubuf_info *, bool);
4680:	static void nf_reset_ct(struct sk_buff *);
2624:	static bool pskb_may_pull(struct sk_buff *, unsigned int);
2633:	static void *pskb_pull(struct sk_buff *, unsigned int);
3021:	static int pskb_trim(struct sk_buff *, unsigned int);
4126:	static void skb_clear_delivery_time(struct sk_buff *);
3554:	static int skb_cow(struct sk_buff *, unsigned int);
3569:	static int skb_cow_head(struct sk_buff *, unsigned int);
4317:	static int skb_csum_unnecessary(const struct sk_buff *);
4607:	static void skb_ext_put(struct sk_buff *);
2453:	static void skb_fill_page_desc(struct sk_buff *, int, struct page *, int, int);
3398:	static void skb_frag_unref(struct sk_buff *, int);
1850:	static struct sk_buff *skb_get(struct sk_buff *);
4001:	static void *skb_header_pointer(const struct sk_buff *, int, int, void *);
3731:	static void skb_postpull_rcsum(struct sk_buff *, const void *, unsigned int);
1967:	static struct sk_buff *skb_share_check(struct sk_buff *, gfp_t);
1676:	static void skb_zcopy_set(struct sk_buff *, struct ubuf_info *, bool *);

File ./include/linux/skmsg.h:
345:	static struct sk_msg *sk_psock_next_msg(struct sk_psock *, struct sk_msg *);
450:	static void sk_psock_put(struct sock *, struct sk_psock *);
304:	static void sock_drop(struct sock *, struct sk_buff *);

File ./include/linux/sock_diag.h:
30:	static u64 sock_gen_cookie(struct sock *);

File ./include/linux/sockptr.h:
110:	static int check_zeroed_sockptr(sockptr_t, size_t, size_t);
53:	static int copy_from_sockptr(void *, sockptr_t, size_t);
67:	static int copy_to_sockptr(sockptr_t, const void *, size_t);
58:	static int copy_to_sockptr_offset(sockptr_t, size_t, const void *, size_t);
72:	static void *memdup_sockptr(sockptr_t, size_t);

File ./include/linux/static_call.h:
286:	static long __static_call_return0(void);

File ./include/linux/sunrpc/addr.h:
120:	static bool rpc_cmp_addr(const struct sockaddr *, const struct sockaddr *);

File ./include/linux/sunrpc/cache.h:
191:	static struct cache_head *cache_get(struct cache_head *);
204:	static void cache_put(struct cache_head *, struct cache_detail *);
249:	static int get_int(char **, int *);

File ./include/linux/swapops.h:
462:	static struct page *pfn_swap_entry_to_page(swp_entry_t);

File ./include/linux/time64.h:
80:	static struct timespec64 timespec64_sub(struct timespec64, struct timespec64);

File ./include/linux/time_namespace.h:
36:	static struct time_namespace *get_time_ns(struct time_namespace *);

File ./include/linux/timekeeping.h:
93:	static ktime_t ktime_get_boottime(void);
162:	static u64 ktime_get_boottime_ns(void);
106:	static ktime_t ktime_get_clocktai(void);
167:	static u64 ktime_get_clocktai_ns(void);
77:	static ktime_t ktime_get_real(void);
157:	static u64 ktime_get_real_ns(void);

File ./include/linux/topology.h:
243:	static const struct cpumask *cpu_cpu_mask(int);
237:	static const struct cpumask *cpu_smt_mask(int);

File ./include/linux/tty.h:
401:	static struct tty_struct *tty_kref_get(struct tty_struct *);

File ./include/linux/virtio_net.h:
172:	static int virtio_net_hdr_from_skb(const struct sk_buff *, struct virtio_net_hdr *, bool, bool, int);
26:	static int virtio_net_hdr_set_proto(struct sk_buff *, const struct virtio_net_hdr *);
48:	static int virtio_net_hdr_to_skb(struct sk_buff *, const struct virtio_net_hdr *, bool);

File ./include/linux/vmstat.h:
69:	static void count_vm_event(enum vm_event_item);
79:	static void count_vm_events(enum vm_event_item, long);
166:	static void node_page_state_add(long, struct pglist_data *, enum node_stat_item);
159:	static void zone_page_state_add(long, struct zone *, enum zone_stat_item);
442:	static void zone_stat_sub_folio(struct folio *, enum zone_stat_item);

File ./include/linux/wait_bit.h:
71:	static int wait_on_bit(unsigned long *, int, unsigned int);

File ./include/linux/workqueue.h:
562:	static bool schedule_work(struct work_struct *);

File ./include/linux/writeback.h:
199:	static void wait_on_inode(struct inode *);

File ./include/linux/xarray.h:
864:	static int xa_alloc(struct xarray *, u32 *, void *, struct xa_limit, gfp_t);
774:	static int xa_insert(struct xarray *, unsigned long, void *, gfp_t);
1669:	static void *xas_next_entry(struct xa_state *, unsigned long);

File ./include/linux/zutil.h:
78:	static uLong zlib_adler32(uLong, const Byte *, uInt);

File ./include/net/act_api.h:
85:	static void tcf_tm_dump(struct tcf_t *, const struct tcf_t *);

File ./include/net/addrconf.h:
398:	static void in6_dev_hold(struct inet6_dev *);
377:	static void in6_dev_put(struct inet6_dev *);
427:	static void in6_ifa_hold(struct inet6_ifaddr *);
416:	static void in6_ifa_put(struct inet6_ifaddr *);

File ./include/net/arp.h:
37:	static struct neighbour *__ipv4_neigh_lookup(struct net_device *, u32);

File ./include/net/bluetooth/hci_core.h:
1387:	static void hci_conn_drop(struct hci_conn *);
1122:	static struct hci_conn *hci_conn_hash_lookup_ba(struct hci_dev *, __u8, bdaddr_t *);
1771:	static void hci_connect_cfm(struct hci_conn *, __u8);
1822:	static void hci_encrypt_cfm(struct hci_conn *, __u8);
1277:	static struct hci_conn *hci_lookup_le_connect(struct hci_dev *);

File ./include/net/bluetooth/l2cap.h:
922:	static struct sk_buff *l2cap_chan_no_alloc_skb(struct l2cap_chan *, unsigned long, unsigned long, int);
933:	static void l2cap_chan_no_close(struct l2cap_chan *);
946:	static void l2cap_chan_no_defer(struct l2cap_chan *);
962:	static long l2cap_chan_no_get_sndtimeo(struct l2cap_chan *);
912:	static struct l2cap_chan *l2cap_chan_no_new_connection(struct l2cap_chan *);
937:	static void l2cap_chan_no_ready(struct l2cap_chan *);
917:	static int l2cap_chan_no_recv(struct l2cap_chan *, struct sk_buff *);
954:	static void l2cap_chan_no_resume(struct l2cap_chan *);
958:	static void l2cap_chan_no_set_shutdown(struct l2cap_chan *);
941:	static void l2cap_chan_no_state_change(struct l2cap_chan *, int, int);
950:	static void l2cap_chan_no_suspend(struct l2cap_chan *);
929:	static void l2cap_chan_no_teardown(struct l2cap_chan *, int);
877:	static bool l2cap_clear_timer(struct l2cap_chan *, struct delayed_work *);
863:	static void l2cap_set_timer(struct l2cap_chan *, struct delayed_work *, long);

File ./include/net/cfg80211.h:
584:	static const struct ieee80211_sta_he_cap *ieee80211_get_he_iftype_cap(const struct ieee80211_supported_band *, u8);

File ./include/net/checksum.h:
100:	static __wsum csum_block_add_ext(__wsum, __wsum, int, int);
117:	static __wsum csum_partial_ext(const void *, int, __wsum);

File ./include/net/dst.h:
331:	static void __skb_tunnel_rx(struct sk_buff *, struct net_device *, struct net *);
242:	static struct dst_entry *dst_clone(struct dst_entry *);
377:	static int dst_discard(struct sk_buff *);
442:	static int dst_output(struct net *, struct sock *, struct sk_buff *);

File ./include/net/dst_metadata.h:
99:	static int skb_metadata_dst_cmp(const struct sk_buff *, const struct sk_buff *);

File ./include/net/fq_impl.h:
47:	static struct sk_buff *fq_flow_dequeue(struct fq *, struct fq_flow *);
252:	static void fq_flow_filter(struct fq *, struct fq_flow *, fq_skb_filter_t *, void *, fq_skb_free_t *);
289:	static void fq_flow_reset(struct fq *, struct fq_flow *, fq_skb_free_t *);

File ./include/net/genetlink.h:
385:	static int genlmsg_multicast_netns(const struct genl_family *, struct net *, struct sk_buff *, u32, unsigned int, gfp_t);

File ./include/net/gro.h:
220:	static __sum16 __skb_gro_checksum_validate_complete(struct sk_buff *, __wsum);
208:	static bool __skb_gro_checksum_validate_needed(struct sk_buff *, bool, __sum16);
232:	static void skb_gro_incr_csum_unnecessary(struct sk_buff *);
188:	static void skb_gro_postpull_rcsum(struct sk_buff *, const void *, unsigned int);

File ./include/net/inet_ecn.h:
172:	static int INET_ECN_set_ce(struct sk_buff *);

File ./include/net/inet_hashtables.h:
267:	static struct inet_bind_hashbucket *inet_bhashfn_portaddr(const struct inet_hashinfo *, const struct sock *, const struct net *, unsigned short);

File ./include/net/ip.h:
493:	static void ip_fib_metrics_put(struct dst_metrics *);
544:	static void ip_select_ident(struct net *, struct sk_buff *, struct sock *);

File ./include/net/ip6_checksum.h:
54:	static void __tcp_v6_send_check(struct sk_buff *, const struct in6_addr *, const struct in6_addr *);

File ./include/net/ip6_fib.h:
337:	static void fib6_info_release(struct fib6_info *);

File ./include/net/ip6_route.h:
228:	static void ip6_dst_store(struct sock *, struct dst_entry *, const struct in6_addr *, const struct in6_addr *);
282:	static bool ip6_sk_accept_pmtu(const struct sock *);

File ./include/net/ip_fib.h:
309:	static int fib_lookup(struct net *, const struct flowi4 *, struct fib_result *, unsigned int);

File ./include/net/ip_vs.h:
1357:	static bool __ip_vs_conn_get(struct ip_vs_conn *);
1363:	static void __ip_vs_conn_put(struct ip_vs_conn *);
60:	static void *frag_safe_skb_hp(const struct sk_buff *, int, int, void *);
127:	static int ip_vs_fill_iph_skb(int, const struct sk_buff *, bool, struct ip_vs_iphdr *);

File ./include/net/ipv6.h:
1305:	static int __ip6_sock_set_addr_preferences(struct sock *, int);
795:	static u32 ipv6_portaddr_hash(const struct net *, const struct in6_addr *, unsigned int);
385:	static struct ipv6_txoptions *txopt_get(const struct ipv6_pinfo *);
401:	static void txopt_put(struct ipv6_txoptions *);

File ./include/net/ipv6_frag.h:
32:	static void ip6frag_init(struct inet_frag_queue *, const void *);
41:	static u32 ip6frag_key_hashfn(const void *, u32, u32);
56:	static int ip6frag_obj_cmpfn(struct rhashtable_compare_arg *, const void *);
47:	static u32 ip6frag_obj_hashfn(const void *, u32, u32);

File ./include/net/ndisc.h:
387:	static struct neighbour *__ipv6_neigh_lookup_noref_stub(struct net_device *, const void *);
430:	static struct neighbour *ip_neigh_gw6(struct net_device *, const void *);
342:	static int ndisc_redirect_opt_addr_space(struct net_device *, struct neighbour *, u8 *, u8 **);

File ./include/net/neighbour.h:
550:	static struct neighbour *__neigh_lookup(struct neigh_table *, const void *, struct net_device *, int);
474:	static int neigh_event_send(struct neighbour *, struct sk_buff *);
446:	static void neigh_release(struct neighbour *);

File ./include/net/net_namespace.h:
275:	static void put_net(struct net *);

File ./include/net/netfilter/nf_conntrack.h:
179:	static void nf_ct_put(struct nf_conn *);

File ./include/net/netfilter/nf_conntrack_ecache.h:
98:	static void nf_conntrack_event_cache(enum ip_conntrack_events, struct nf_conn *);

File ./include/net/netfilter/nf_reject.h:
8:	static bool nf_reject_verify_csum(struct sk_buff *, int, __u8);

File ./include/net/netlink.h:
1251:	static int nla_parse_nested(struct nlattr **, int, const struct nlattr *, const struct nla_policy *, struct netlink_ext_ack *);
1546:	static int nla_put_msecs(struct sk_buff *, int, unsigned long, int);
1523:	static int nla_put_string(struct sk_buff *, int, const char *);
805:	static int nlmsg_parse_deprecated_strict(const struct nlmsghdr *, int, struct nlattr **, int, const struct nla_policy *, struct netlink_ext_ack *);

File ./include/net/nexthop.h:
457:	static struct fib_nh_common *fib_info_nhc(struct fib_info *, int);
232:	static bool nexthop_get(struct nexthop *);
390:	static struct fib_nh_common *nexthop_get_nhc_lookup(const struct nexthop *, int, const struct flowi4 *, int *);
531:	static void nexthop_path_fib6_result(struct fib6_result *, int);

File ./include/net/pkt_cls.h:
180:	static void tcf_bind_filter(struct tcf_proto *, struct tcf_result *, unsigned long);
264:	static bool tcf_exts_get_net(struct tcf_exts *);
204:	static void tcf_unbind_filter(struct tcf_proto *, struct tcf_result *);

File ./include/net/pkt_sched.h:
123:	static void qdisc_run(struct Qdisc *);

File ./include/net/request_sock.h:
132:	static void reqsk_put(struct request_sock *);

File ./include/net/route.h:
375:	static struct neighbour *ip_neigh_gw4(struct net_device *, __be32);
337:	static struct rtable *ip_route_newports(struct flowi4 *, struct rtable *, __be16, __be16, __be16, __be16, struct sock *);

File ./include/net/sch_generic.h:
1021:	static unsigned int __qdisc_queue_drop_head(struct Qdisc *, struct qdisc_skb_head *, struct sk_buff **);
818:	static void bstats_update(struct gnet_stats_basic_sync *, const struct sk_buff *);
990:	static struct sk_buff *qdisc_dequeue_head(struct Qdisc *);
1154:	static int qdisc_drop_cpu(struct sk_buff *, struct Qdisc *, struct sk_buff **);
1046:	static struct sk_buff *qdisc_peek_dequeued(struct Qdisc *);
1038:	static struct sk_buff *qdisc_peek_head(struct Qdisc *);
133:	static void qdisc_refcount_inc(struct Qdisc *);
1128:	static void qdisc_reset_queue(struct Qdisc *);
207:	static void qdisc_run_end(struct Qdisc *);

File ./include/net/scm.h:
71:	static void scm_destroy(struct scm_cookie *);
113:	static void scm_recv(struct socket *, struct msghdr *, struct scm_cookie *, int);

File ./include/net/sctp/checksum.h:
39:	static __wsum sctp_csum_combine(__wsum, __wsum, int, int);
31:	static __wsum sctp_csum_update(const void *, int, __wsum);

File ./include/net/sock.h:
2178:	static void dst_negative_advice(struct sock *);
2151:	static struct dst_entry *sk_dst_get(struct sock *);
2543:	static void sk_stream_moderate_sndbuf(struct sock *);
2524:	static void sk_wake_async(const struct sock *, int, int);
1627:	static bool sk_wmem_schedule(struct sock *, int);
2417:	static void skb_set_owner_r(struct sk_buff *, struct sock *);
2765:	static void skb_setup_tx_timestamp(struct sk_buff *, __u16);
1537:	static void sock_prot_inuse_add(const struct net *, const struct proto *, int);
1988:	static void sock_put(struct sock *);
2690:	static void sock_recv_timestamp(struct msghdr *, struct sock *, struct sk_buff *);

File ./include/net/tcp.h:
2389:	static int tcp_call_bpf_3arg(struct sock *, int, u32, u32, u32);
1393:	static bool tcp_checksum_complete(struct sk_buff *);
719:	static void tcp_fast_path_check(struct sock *);
1934:	static void tcp_rtx_queue_unlink_and_free(struct sk_buff *, struct sock *);
2247:	static void tcp_segs_in(struct tcp_sock *, const struct sk_buff *);
295:	static void tcp_wmem_free_skb(struct sock *, struct sk_buff *);

File ./include/net/udp.h:
117:	static int udp_lib_checksum_complete(struct sk_buff *);
196:	static void udp_lib_close(struct sock *, long);
187:	static int udp_lib_hash(struct sock *);
466:	static struct sk_buff *udp_rcv_segment(struct sock *, struct sk_buff *, bool);

File ./include/net/udp_tunnel.h:
177:	static void udp_tunnel_encap_enable(struct socket *);

File ./include/net/udplite.h:
21:	static int udplite_getfrag(void *, char *, int, int, int, struct sk_buff *);

File ./include/net/xdp.h:
223:	static void xdp_update_skb_shared_info(struct sk_buff *, u8, unsigned int, unsigned int, bool);

File arch/arm64/crypto/aes-ce-ccm-glue.c:
289:	static void aes_mod_exit(void);
282:	static int aes_mod_init(void);
97:	static void ccm_calculate_auth_mac(struct aead_request *, u8 *);
203:	static int ccm_decrypt(struct aead_request *);
146:	static int ccm_encrypt(struct aead_request *);
52:	static int ccm_setauthsize(struct crypto_aead *, unsigned int);
44:	static int ccm_setkey(struct crypto_aead *, const u8 *, unsigned int);

File arch/arm64/crypto/aes-ce-glue.c:
74:	int ce_aes_expandkey(struct crypto_aes_ctx *, const u8 *, unsigned int);
142:	int ce_aes_setkey(struct crypto_tfm *, const u8 *, unsigned int);
60:	static void aes_cipher_decrypt(struct crypto_tfm *, u8 *, const u8 *);
46:	static void aes_cipher_encrypt(struct crypto_tfm *, u8 *, const u8 *);
173:	static void aes_mod_exit(void);
178:	static int cpu_feature_match_AES_init(void);

File arch/arm64/crypto/aes-glue.c:
1024:	static void aes_exit(void);
1030:	static int aes_init(void);
266:	static int cbc_decrypt(struct skcipher_request *);
237:	static int cbc_encrypt(struct skcipher_request *);
948:	static int cbcmac_final(struct shash_desc *, u8 *);
800:	static int cbcmac_setkey(struct crypto_shash *, const u8 *, unsigned int);
960:	static int cmac_final(struct shash_desc *, u8 *);
817:	static int cmac_setkey(struct crypto_shash *, const u8 *, unsigned int);
1050:	static int cpu_feature_match_AES_init(void);
497:	static int ctr_encrypt(struct skcipher_request *);
334:	static int cts_cbc_decrypt(struct skcipher_request *);
277:	static int cts_cbc_encrypt(struct skcipher_request *);
199:	static int ecb_decrypt(struct skcipher_request *);
179:	static int ecb_encrypt(struct skcipher_request *);
429:	static int essiv_cbc_decrypt(struct skcipher_request *);
407:	static int essiv_cbc_encrypt(struct skcipher_request *);
400:	static void essiv_cbc_exit_tfm(struct crypto_skcipher *);
391:	static int essiv_cbc_init_tfm(struct crypto_skcipher *);
162:	static int essiv_cbc_set_key(struct crypto_skcipher *, const u8 *, unsigned int);
877:	static void mac_do_update(struct crypto_aes_ctx *, const u8 *, int, u8 *, int, int);
867:	static int mac_init(struct shash_desc *);
908:	static int mac_update(struct shash_desc *, const u8 *, unsigned int);
137:	static int skcipher_aes_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
841:	static int xcbc_setkey(struct crypto_shash *, const u8 *, unsigned int);
451:	static int xctr_encrypt(struct skcipher_request *);
613:	static int xts_decrypt(struct skcipher_request *);
541:	static int xts_encrypt(struct skcipher_request *);
145:	static int xts_set_key(struct crypto_skcipher *, const u8 *, unsigned int);

File arch/arm64/crypto/aes-neonbs-glue.c:
265:	static int __xts_crypt(struct skcipher_request *, bool, void (*)(u8 *, const u8 *, const u8 *, int, int, u8 *));
443:	static void aes_exit(void);
448:	static int aes_init(void);
133:	static int aesbs_cbc_ctr_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
74:	static int aesbs_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
240:	static int aesbs_xts_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
179:	static int cbc_decrypt(struct skcipher_request *);
156:	static int cbc_encrypt(struct skcipher_request *);
207:	static int ctr_encrypt(struct skcipher_request *);
128:	static int ecb_decrypt(struct skcipher_request *);
123:	static int ecb_encrypt(struct skcipher_request *);
376:	static int xts_decrypt(struct skcipher_request *);
371:	static int xts_encrypt(struct skcipher_request *);

File arch/arm64/crypto/chacha-neon-glue.c:
83:	void chacha_crypt_arch(u32 *, u8 *, const u8 *, unsigned int, int);
77:	void chacha_init_arch(u32 *, const u32 *, const u8 *);
65:	void hchacha_block_arch(const u32 *, u32 *, int);
138:	static int chacha_neon(struct skcipher_request *);
104:	static int chacha_neon_stream_xor(struct skcipher_request *, const struct chacha_ctx *, const u8 *);
226:	static void chacha_simd_mod_fini(void);
215:	static int chacha_simd_mod_init(void);
146:	static int xchacha_neon(struct skcipher_request *);

File arch/arm64/crypto/crct10dif-ce-glue.c:
137:	static int cpu_feature_match_ASIMD_init(void);
128:	static void crc_t10dif_mod_exit(void);
118:	static int crc_t10dif_mod_init(void);
84:	static int crct10dif_final(struct shash_desc *, u8 *);
26:	static int crct10dif_init(struct shash_desc *);
59:	static int crct10dif_update_pmull_p64(struct shash_desc *, const u8 *, unsigned int);
34:	static int crct10dif_update_pmull_p8(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/ghash-ce-glue.c:
305:	static void gcm_calculate_auth_mac(struct aead_request *, u64 *);
406:	static int gcm_decrypt(struct aead_request *);
341:	static int gcm_encrypt(struct aead_request *);
261:	static int gcm_setauthsize(struct crypto_aead *, unsigned int);
229:	static int gcm_setkey(struct crypto_aead *, const u8 *, unsigned int);
503:	static void ghash_ce_mod_exit(void);
492:	static int ghash_ce_mod_init(void);
155:	static int ghash_final(struct shash_desc *, u8 *);
63:	static int ghash_init(struct shash_desc *);
186:	static int ghash_setkey(struct crypto_shash *, const u8 *, unsigned int);
115:	static int ghash_update(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/sha1-ce-glue.c:
146:	static int cpu_feature_match_SHA1_init(void);
100:	static int sha1_ce_export(struct shash_desc *, void *);
88:	static int sha1_ce_final(struct shash_desc *, u8 *);
67:	static int sha1_ce_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
108:	static int sha1_ce_import(struct shash_desc *, const void *);
141:	static void sha1_ce_mod_fini(void);
53:	static int sha1_ce_update(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/sha2-ce-glue.c:
182:	static int cpu_feature_match_SHA2_init(void);
119:	static int sha256_ce_export(struct shash_desc *, void *);
105:	static int sha256_ce_final(struct shash_desc *, u8 *);
79:	static int sha256_ce_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
127:	static int sha256_ce_import(struct shash_desc *, const void *);
64:	static int sha256_ce_update(struct shash_desc *, const u8 *, unsigned int);
177:	static void sha2_ce_mod_fini(void);

File arch/arm64/crypto/sha256-glue.c:
62:	static int crypto_sha256_arm64_final(struct shash_desc *, u8 *);
51:	static int crypto_sha256_arm64_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
44:	static int crypto_sha256_arm64_update(struct shash_desc *, const u8 *, unsigned int);
142:	static int sha256_final_neon(struct shash_desc *, u8 *);
124:	static int sha256_finup_neon(struct shash_desc *, const u8 *, unsigned int, u8 *);
187:	static void sha256_mod_fini(void);
173:	static int sha256_mod_init(void);
93:	static int sha256_update_neon(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/sha3-ce-glue.c:
165:	static int cpu_feature_match_SHA3_init(void);
81:	static int sha3_final(struct shash_desc *, u8 *);
160:	static void sha3_neon_mod_fini(void);
34:	static int sha3_update(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/sha512-ce-glue.c:
48:	static void __sha512_block_data_order(struct sha512_state *, const u8 *, int);
34:	static void __sha512_ce_transform(struct sha512_state *, const u8 *, int);
120:	static int cpu_feature_match_SHA512_init(void);
75:	static int sha512_ce_final(struct shash_desc *, u8 *);
64:	static int sha512_ce_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
115:	static void sha512_ce_mod_fini(void);
54:	static int sha512_ce_update(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/sha512-glue.c:
50:	static int sha512_final(struct shash_desc *, u8 *);
39:	static int sha512_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
86:	static void sha512_mod_fini(void);
81:	static int sha512_mod_init(void);
32:	static int sha512_update(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/crypto/sm3-ce-glue.c:
100:	static int cpu_feature_match_SM3_init(void);
41:	static int sm3_ce_final(struct shash_desc *, u8 *);
55:	static int sm3_ce_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
95:	static void sm3_ce_mod_fini(void);
26:	static int sm3_ce_update(struct shash_desc *, const u8 *, unsigned int);

File arch/arm64/kernel/alternative.c:
295:	void alt_cb_patch_nops(struct alt_instr *, __le32 *, __le32 *, int);
40:	bool alternative_is_applied(u16);
255:	void apply_alternatives_all(void);
269:	void apply_boot_alternatives(void);
142:	static void __apply_alternatives(const struct alt_region *, bool, unsigned long *);
232:	static int __apply_alternatives_multi_stop(void *);
199:	static void apply_alternatives_vdso(void);
104:	static void patch_alternative(struct alt_instr *, __le32 *, __le32 *, int);

File arch/arm64/kernel/cacheinfo.c:
20:	int cache_line_size(void);
46:	int init_cache_level(unsigned int);
85:	int populate_cache_leaves(unsigned int);

File arch/arm64/kernel/cpu_errata.c:
126:	static void cpu_clear_bf16_from_user_emulation(const struct arm64_cpu_capabilities *);
119:	static void cpu_enable_cache_maint_trap(const struct arm64_cpu_capabilities *);
91:	static void cpu_enable_trap_ctr_access(const struct arm64_cpu_capabilities *);
111:	static bool has_cortex_a76_erratum_1463225(const struct arm64_cpu_capabilities *, int);
59:	static bool has_mismatched_cache_type(const struct arm64_cpu_capabilities *, int);
202:	static bool has_neoverse_n1_erratum_1542419(const struct arm64_cpu_capabilities *, int);
18:	static bool is_affected_midr_range(const struct arm64_cpu_capabilities *, int);
37:	static bool is_affected_midr_range_list(const struct arm64_cpu_capabilities *, int);
45:	static bool is_kryo_midr(const struct arm64_cpu_capabilities *, int);
184:	static bool needs_tx2_tvm_workaround(const struct arm64_cpu_capabilities *, int);

File arch/arm64/kernel/cpu_ops.c:
115:	const struct cpu_operations *get_cpu_ops(int);
99:	int init_cpu_ops(int);
55:	static const char *cpu_read_enable_method(int);

File arch/arm64/kernel/cpufeature.c:
1339:	u64 __read_sysreg_by_encoding(u32);
3478:	enum mitigation_state arm64_get_meltdown_state(void);
3207:	void check_local_cpu_capabilities(void);
3276:	unsigned long cpu_get_elf_hwcap(void);
3286:	unsigned long cpu_get_elf_hwcap2(void);
1892:	bool cpu_has_amu_feat(int);
3270:	bool cpu_have_feature(unsigned int);
3265:	void cpu_set_feature(unsigned int);
3489:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
3449:	int do_emulate_mrs(struct pt_regs *, u32, u32);
136:	void dump_cpu_features(void);
759:	struct arm64_ftr_reg *get_arm64_ftr_reg(u32);
1897:	int get_cpu_with_amu_feat(void);
986:	void init_cpu_features(struct cpuinfo_arm64 *);
1597:	bool kaslr_requires_kpti(void);
1322:	u64 read_sanitised_ftr_reg(u32);
3303:	void setup_cpu_features(void);
1453:	const struct cpumask *system_32bit_el0_cpumask(void);
3235:	bool this_cpu_has_cap(unsigned int);
3462:	bool try_emulate_mrs(struct pt_regs *, u32);
1189:	void update_cpu_features(int, struct cpuinfo_arm64 *, struct cpuinfo_arm64 *);
1471:	static ssize_t aarch32_el0_show(struct device *, struct device_attribute *, char *);
1480:	static int aarch32_el0_sysfs_init(void);
2054:	static void bti_enable(const struct arm64_cpu_capabilities *);
1063:	static int check_update_ftr_reg(u32, int, u64, u64);
1902:	static void cpu_amu_enable(const struct arm64_cpu_capabilities *);
1974:	static void cpu_clear_disr(const struct arm64_cpu_capabilities *);
1945:	static void cpu_copy_el2regs(const struct arm64_cpu_capabilities *);
1546:	static void cpu_emulate_effective_ctr(const struct arm64_cpu_capabilities *);
3383:	static void cpu_enable_cnp(const struct arm64_cpu_capabilities *);
2108:	static void cpu_enable_dit(const struct arm64_cpu_capabilities *);
2030:	static void cpu_enable_e0pd(const struct arm64_cpu_capabilities *);
1842:	static void cpu_enable_hw_dbm(const struct arm64_cpu_capabilities *);
2069:	static void cpu_enable_mte(const struct arm64_cpu_capabilities *);
2958:	static int cpu_enable_non_boot_scope_capabilities(void *);
1960:	static void cpu_enable_pan(const struct arm64_cpu_capabilities *);
2103:	static void cpu_trap_el0_impdef(const struct arm64_cpu_capabilities *);
2982:	static void enable_cpu_capabilities(u16);
3331:	static int enable_mismatched_32bit_el0(unsigned int);
1489:	static bool has_32bit_el0(const struct arm64_cpu_capabilities *, int);
1982:	static bool has_address_auth_cpucap(const struct arm64_cpu_capabilities *, int);
2008:	static bool has_address_auth_metacap(const struct arm64_cpu_capabilities *, int);
1401:	static bool has_always(const struct arm64_cpu_capabilities *, int);
1915:	static bool has_amu(const struct arm64_cpu_capabilities *, int);
1558:	static bool has_cache_dic(const struct arm64_cpu_capabilities *, int);
1533:	static bool has_cache_idc(const struct arm64_cpu_capabilities *, int);
1447:	static bool has_cpuid_feature(const struct arm64_cpu_capabilities *, int);
2018:	static bool has_generic_auth(const struct arm64_cpu_capabilities *, int);
1848:	static bool has_hw_dbm(const struct arm64_cpu_capabilities *, int);
1525:	static bool has_no_fpsimd(const struct arm64_cpu_capabilities *, int);
1515:	static bool has_no_hw_prefetch(const struct arm64_cpu_capabilities *, int);
1572:	static bool has_useable_cnp(const struct arm64_cpu_capabilities *, int);
1500:	static bool has_useable_gicv3_cpuif(const struct arm64_cpu_capabilities *, int);
1427:	static bool has_user_cpuid_feature(const struct arm64_cpu_capabilities *, int);
961:	static void init_32bit_cpu_features(struct cpuinfo_32bit *);
3369:	static int init_32bit_el0_mask(void);
865:	static void init_cpu_ftr_reg(u32, u64);
939:	static void init_cpu_hwcaps_indirect_list_from_array(const struct arm64_cpu_capabilities *);
1724:	static void kpti_install_ng_mappings(const struct arm64_cpu_capabilities *);
1717:	static phys_addr_t kpti_ng_pgd_alloc(int);
1464:	static int parse_32bit_el0_param(char *);
1795:	static int parse_kpti(char *);
1940:	static bool runs_at_el2(const struct arm64_cpu_capabilities *, int);
723:	static int search_cmp_ftr_reg(const void *, const void *);
2923:	static void setup_elf_hwcaps(const struct arm64_cpu_capabilities *);
809:	static void sort_ftr_regs(void);
1631:	static bool unmap_kernel_at_el0(const struct arm64_cpu_capabilities *, int);
2932:	static void update_cpu_capabilities(u16);
3030:	static void verify_local_cpu_caps(u16);

File arch/arm64/kernel/cpuinfo.c:
456:	void cpuinfo_store_boot_cpu(void);
449:	void cpuinfo_store_cpu(void);
411:	static void __cpuinfo_store_cpu(struct cpuinfo_arm64 *);
233:	static void *c_next(struct seq_file *, void *, loff_t *);
161:	static int c_show(struct seq_file *, void *);
228:	static void *c_start(struct seq_file *, loff_t *);
239:	static void c_stop(struct seq_file *, void *);
328:	static int cpuid_cpu_offline(unsigned int);
305:	static int cpuid_cpu_online(unsigned int);
344:	static int cpuinfo_regs_init(void);
280:	static ssize_t midr_el1_show(struct kobject *, struct kobj_attribute *, char *);
281:	static ssize_t revidr_el1_show(struct kobject *, struct kobj_attribute *, char *);
282:	static ssize_t smidr_el1_show(struct kobject *, struct kobj_attribute *, char *);

File arch/arm64/kernel/debug-monitors.c:
342:	int aarch32_break_handler(struct pt_regs *);
28:	u8 debug_monitors_arch(void);
381:	void debug_traps_init(void);
101:	void disable_debug_monitors(enum dbg_active_el);
80:	void enable_debug_monitors(enum dbg_active_el);
434:	int kernel_active_single_step(void);
426:	void kernel_disable_single_step(void);
417:	void kernel_enable_single_step(struct pt_regs *);
292:	void register_kernel_break_hook(struct break_hook *);
189:	void register_kernel_step_hook(struct step_hook *);
282:	void register_user_break_hook(struct break_hook *);
179:	void register_user_step_hook(struct step_hook *);
297:	void unregister_kernel_break_hook(struct break_hook *);
194:	void unregister_kernel_step_hook(struct step_hook *);
287:	void unregister_user_break_hook(struct break_hook *);
184:	void unregister_user_step_hook(struct step_hook *);
451:	void user_disable_single_step(struct task_struct *);
442:	void user_enable_single_step(struct task_struct *);
401:	void user_fastforward_single_step(struct task_struct *);
407:	void user_regs_reset_single_step(struct user_pt_regs *, struct task_struct *);
390:	void user_rewind_single_step(struct task_struct *);
325:	static int brk_handler(unsigned long, unsigned long, struct pt_regs *);
125:	static int clear_os_lock(unsigned int);
58:	static int create_debug_debugfs_entry(void);
133:	static int debug_monitors_init(void);
65:	static int early_debug_disable(char *);
241:	static int single_step_handler(unsigned long, unsigned long, struct pt_regs *);

File arch/arm64/kernel/elfcore.c:
115:	size_t elf_core_extra_data_size(struct coredump_params *);
78:	Elf64_Half elf_core_extra_phdrs(struct coredump_params *);
127:	int elf_core_write_extra_data(struct coredump_params *);
90:	int elf_core_write_extra_phdrs(struct coredump_params *, loff_t);

File arch/arm64/kernel/entry-common.c:
147:	void asm_exit_to_user_mode(struct pt_regs *);
839:	void el0t_32_error_handler(struct pt_regs *);
838:	void el0t_32_fiq_handler(struct pt_regs *);
837:	void el0t_32_irq_handler(struct pt_regs *);
836:	void el0t_32_sync_handler(struct pt_regs *);
755:	void el0t_64_error_handler(struct pt_regs *);
737:	void el0t_64_fiq_handler(struct pt_regs *);
727:	void el0t_64_irq_handler(struct pt_regs *);
649:	void el0t_64_sync_handler(struct pt_regs *);
499:	void el1h_64_error_handler(struct pt_regs *);
494:	void el1h_64_fiq_handler(struct pt_regs *);
489:	void el1h_64_irq_handler(struct pt_regs *);
420:	void el1h_64_sync_handler(struct pt_regs *);
359:	void el1t_64_error_handler(struct pt_regs *);
358:	void el1t_64_fiq_handler(struct pt_regs *);
357:	void el1t_64_irq_handler(struct pt_regs *);
356:	void el1t_64_sync_handler(struct pt_regs *);
742:	static void __el0_error_handler_common(struct pt_regs *);
732:	static void __el0_fiq_handler_common(struct pt_regs *);
722:	static void __el0_irq_handler_common(struct pt_regs *);
284:	static void __panic_unhandled(struct pt_regs *, const char *, unsigned long);
197:	static void arm64_enter_el1_dbg(struct pt_regs *);
157:	static void arm64_enter_nmi(struct pt_regs *);
212:	static void arm64_exit_el1_dbg(struct pt_regs *);
175:	static void arm64_exit_nmi(struct pt_regs *);
309:	static void cortex_a76_erratum_1463225_svc_handler(void);
268:	static void do_interrupt_handler(struct pt_regs *, void (*)(struct pt_regs *));
606:	static void el0_bti(struct pt_regs *);
509:	static void el0_da(struct pt_regs *, unsigned long);
622:	static void el0_dbg(struct pt_regs *, unsigned long);
641:	static void el0_fpac(struct pt_regs *, unsigned long);
537:	static void el0_fpsimd_acc(struct pt_regs *, unsigned long);
561:	static void el0_fpsimd_exc(struct pt_regs *, unsigned long);
519:	static void el0_ia(struct pt_regs *, unsigned long);
705:	static void el0_interrupt(struct pt_regs *, void (*)(struct pt_regs *));
614:	static void el0_inv(struct pt_regs *, unsigned long);
577:	static void el0_pc(struct pt_regs *, unsigned long);
553:	static void el0_sme_acc(struct pt_regs *, unsigned long);
590:	static void el0_sp(struct pt_regs *, unsigned long);
633:	static void el0_svc(struct pt_regs *);
545:	static void el0_sve_acc(struct pt_regs *, unsigned long);
569:	static void el0_sys(struct pt_regs *, unsigned long);
598:	static void el0_undef(struct pt_regs *, unsigned long);
361:	static void el1_abort(struct pt_regs *, unsigned long);
392:	static void el1_bti(struct pt_regs *, unsigned long);
401:	static void el1_dbg(struct pt_regs *, unsigned long);
411:	static void el1_fpac(struct pt_regs *, unsigned long);
478:	static void el1_interrupt(struct pt_regs *, void (*)(struct pt_regs *));
372:	static void el1_pc(struct pt_regs *, unsigned long);
383:	static void el1_undef(struct pt_regs *, unsigned long);
56:	static void enter_from_kernel_mode(struct pt_regs *);
91:	static void exit_to_kernel_mode(struct pt_regs *);

File arch/arm64/kernel/fpsimd.c:
1516:	void do_fpsimd_acc(unsigned long, struct pt_regs *);
1525:	void do_fpsimd_exc(unsigned long, struct pt_regs *);
1472:	void do_sme_acc(unsigned long, struct pt_regs *);
1430:	void do_sve_acc(unsigned long, struct pt_regs *);
1305:	void fa64_kernel_enable(const struct arm64_cpu_capabilities *);
1741:	void fpsimd_bind_state_to_cpu(struct cpu_fp_state *);
1820:	void fpsimd_flush_task_state(struct task_struct *);
1609:	void fpsimd_flush_thread(void);
784:	void fpsimd_force_sync_to_sve(struct task_struct *);
1680:	void fpsimd_kvm_prepare(void);
1655:	void fpsimd_preserve_current_state(void);
1249:	void fpsimd_release_task(struct task_struct *);
1757:	void fpsimd_restore_current_state(void);
1861:	void fpsimd_save_and_flush_cpu_state(void);
1670:	void fpsimd_signal_preserve_current_state(void);
797:	void fpsimd_sync_to_sve(struct task_struct *);
1547:	void fpsimd_thread_switch(struct task_struct *);
1790:	void fpsimd_update_current_state(const struct user_fpsimd_state *);
1891:	void kernel_neon_begin(void);
1917:	void kernel_neon_end(void);
1319:	u64 read_smcr_features(void);
1160:	u64 read_zcr_features(void);
1268:	void sme_alloc(struct task_struct *);
995:	int sme_get_current_vl(void);
1286:	void sme_kernel_enable(const struct arm64_cpu_capabilities *);
976:	int sme_set_current_vl(unsigned long);
1343:	void sme_setup(void);
761:	void sve_alloc(struct task_struct *, bool);
966:	int sve_get_current_vl(void);
1147:	void sve_kernel_enable(const struct arm64_cpu_capabilities *);
947:	int sve_set_current_vl(unsigned long);
1180:	void sve_setup(void);
739:	size_t sve_state_size(const struct task_struct *);
830:	void sve_sync_from_fpsimd_zeropad(struct task_struct *);
812:	void sve_sync_to_fpsimd(struct task_struct *);
276:	unsigned int task_get_vl(const struct task_struct *, enum vec_type);
287:	unsigned int task_get_vl_onexec(const struct task_struct *, enum vec_type);
281:	void task_set_vl(struct task_struct *, enum vec_type, unsigned long);
293:	void task_set_vl_onexec(struct task_struct *, enum vec_type, unsigned long);
1039:	void vec_init_vq_map(enum vec_type);
845:	int vec_set_vector_length(struct task_struct *, enum vec_type, unsigned long, unsigned long);
1051:	void vec_update_vq_map(enum vec_type);
1066:	int vec_verify_vq_map(enum vec_type);
531:	static unsigned int find_supported_vector_length(enum vec_type, unsigned int);
1707:	static void fpsimd_bind_task_to_cpu(void);
2083:	static int fpsimd_cpu_dead(unsigned int);
1574:	static void fpsimd_flush_thread_vl(enum vec_type);
2102:	static int fpsimd_init(void);
459:	static void fpsimd_save(void);
262:	static void put_cpu_fpsimd_context(void);
617:	static int sme_sysctl_init(void);
593:	static int sve_sysctl_init(void);
380:	static void task_fpsimd_load(void);
1004:	static void vec_probe_vqs(struct vl_info *, unsigned long *);
556:	static int vec_proc_do_default_vl(struct ctl_table *, int, void *, size_t *, loff_t *);

File arch/arm64/kernel/hw_breakpoint.c:
351:	int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl, int *, int *, int *);
335:	int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *);
288:	int arch_install_hw_breakpoint(struct perf_event *);
293:	void arch_uninstall_hw_breakpoint(struct perf_event *);
507:	int hw_breakpoint_arch_parse(struct perf_event *, const struct perf_event_attr *, struct arch_hw_breakpoint *);
1027:	int hw_breakpoint_exceptions_notify(struct notifier_block *, unsigned long, void *);
1020:	void hw_breakpoint_pmu_read(struct perf_event *);
42:	int hw_breakpoint_slots(int);
909:	void hw_breakpoint_thread_switch(struct task_struct *);
851:	int reinstall_suspended_bps(struct pt_regs *);
987:	static int arch_hw_breakpoint_init(void);
620:	static int breakpoint_handler(unsigned long, unsigned long, struct pt_regs *);
222:	static int hw_breakpoint_control(struct perf_event *, enum hw_breakpoint_ops);
941:	static int hw_breakpoint_reset(unsigned int);
105:	static u64 read_wb_reg(int, int);
754:	static int watchpoint_handler(unsigned long, unsigned long, struct pt_regs *);
122:	static void write_wb_reg(int, int, u64);

File arch/arm64/kernel/idle.c:
38:	void arch_cpu_idle(void);
23:	void cpu_do_idle(void);

File arch/arm64/kernel/idreg-override.c:
300:	void init_feature_override(u64);
235:	static void __parse_cmdline(const char *, bool);
180:	static int find_field(const char *, const struct ftr_set_desc *, int, u64 *);
265:	static const u8 *get_bootargs_cmdline(void);
195:	static void match_options(const char *);
37:	static bool mmfr1_vh_filter(u64);
286:	static void parse_cmdline(void);
58:	static bool pfr0_sve_filter(u64);
82:	static bool pfr1_sme_filter(u64);

File arch/arm64/kernel/io.c:
15:	void __memcpy_fromio(void *, const volatile void *, size_t);
43:	void __memcpy_toio(volatile void *, const void *, size_t);
71:	void __memset_io(volatile void *, int, size_t);

File arch/arm64/kernel/irq.c:
83:	void do_softirq_own_stack(void);
122:	void init_IRQ(void);
112:	int set_handle_fiq(void (*)(struct pt_regs *));
102:	int set_handle_irq(void (*)(struct pt_regs *));
78:	static void ____do_softirq(struct pt_regs *);
94:	static void default_handle_fiq(struct pt_regs *);
89:	static void default_handle_irq(struct pt_regs *);

File arch/arm64/kernel/jump_label.c:
13:	void arch_jump_label_transform(struct jump_entry *, enum jump_label_type);

File arch/arm64/kernel/mte.c:
395:	long get_mte_ctrl(struct task_struct *);
81:	int memcmp_pages(struct page *, struct page *);
292:	void mte_cpu_setup(void);
607:	size_t mte_probe_user_range(const char *, size_t);
521:	int mte_ptrace_copy_tags(struct task_struct *, long, unsigned long, unsigned long);
335:	void mte_suspend_enter(void);
351:	void mte_suspend_exit(void);
57:	void mte_sync_tags(pte_t, pte_t);
257:	void mte_thread_init_user(void);
270:	void mte_thread_switch(struct task_struct *);
359:	long set_mte_ctrl(struct task_struct *, unsigned long);
549:	static ssize_t mte_tcf_preferred_show(struct device *, struct device_attribute *, char *);
564:	static ssize_t mte_tcf_preferred_store(struct device *, struct device_attribute *, const char *, size_t);
587:	static int register_mte_tcf_preferred_sysctl(void);

File arch/arm64/kernel/paravirt.c:
156:	int pv_time_init(void);
140:	static bool has_pv_steal_clock(void);
30:	static u64 native_steal_clock(int);
53:	static u64 para_steal_clock(int);
44:	static int parse_no_stealacc(char *);
78:	static int stolen_time_cpu_down_prepare(unsigned int);
94:	static int stolen_time_cpu_online(unsigned int);

File arch/arm64/kernel/patching.c:
136:	int aarch64_insn_patch_text(void **, u32 *, int);
91:	int aarch64_insn_patch_text_nosync(void *, u32);
57:	int aarch64_insn_read(void *, u32 *);
86:	int aarch64_insn_write(void *, u32);
115:	static int aarch64_insn_patch_text_cb(void *);

File arch/arm64/kernel/perf_callchain.c:
141:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
102:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
152:	unsigned long perf_instruction_pointer(struct pt_regs *);
160:	unsigned long perf_misc_flags(struct pt_regs *);
135:	static bool callchain_trace(void *, unsigned long);

File arch/arm64/kernel/perf_event.c:
1405:	void arch_perf_update_userpage(struct perf_event *, struct perf_event_mmap_page *, u64);
1057:	static int __armv8_pmuv3_map_event(struct perf_event *, const unsigned int (*)[10], const unsigned int (*)[7][3][2]);
1141:	static void __armv8pmu_probe_pmu(void *);
1311:	static int armv8_a35_pmu_init(struct arm_pmu *);
1109:	static int armv8_a53_map_event(struct perf_event *);
1317:	static int armv8_a53_pmu_init(struct arm_pmu *);
1114:	static int armv8_a57_map_event(struct perf_event *);
1323:	static int armv8_a57_pmu_init(struct arm_pmu *);
1329:	static int armv8_a72_pmu_init(struct arm_pmu *);
1119:	static int armv8_a73_map_event(struct perf_event *);
1335:	static int armv8_a73_pmu_init(struct arm_pmu *);
1292:	static int armv8_cortex_a34_pmu_init(struct arm_pmu *);
1293:	static int armv8_cortex_a55_pmu_init(struct arm_pmu *);
1294:	static int armv8_cortex_a65_pmu_init(struct arm_pmu *);
1295:	static int armv8_cortex_a75_pmu_init(struct arm_pmu *);
1296:	static int armv8_cortex_a76_pmu_init(struct arm_pmu *);
1297:	static int armv8_cortex_a77_pmu_init(struct arm_pmu *);
1298:	static int armv8_cortex_a78_pmu_init(struct arm_pmu *);
1301:	static int armv8_cortex_x1_pmu_init(struct arm_pmu *);
1303:	static int armv8_neoverse_e1_pmu_init(struct arm_pmu *);
1304:	static int armv8_neoverse_n1_pmu_init(struct arm_pmu *);
1306:	static int armv8_neoverse_v1_pmu_init(struct arm_pmu *);
1308:	static int armv8_nvidia_carmel_pmu_init(struct arm_pmu *);
1309:	static int armv8_nvidia_denver_pmu_init(struct arm_pmu *);
1382:	static int armv8_pmu_device_probe(struct platform_device *);
1396:	static int armv8_pmu_driver_init(void);
1278:	static int armv8_pmu_init_nogroups(struct arm_pmu *, char *, int (*)(struct perf_event *));
1104:	static int armv8_pmuv3_map_event(struct perf_event *);
1290:	static int armv8_pmuv3_pmu_init(struct arm_pmu *);
1124:	static int armv8_thunder_map_event(struct perf_event *);
1341:	static int armv8_thunder_pmu_init(struct arm_pmu *);
1130:	static int armv8_vulcan_map_event(struct perf_event *);
1347:	static int armv8_vulcan_pmu_init(struct arm_pmu *);
953:	static void armv8pmu_clear_event_idx(struct pmu_hw_events *, struct perf_event *);
794:	static void armv8pmu_disable_event(struct perf_event *);
1203:	static void armv8pmu_disable_user_access_ipi(void *);
766:	static void armv8pmu_enable_event(struct perf_event *);
265:	static umode_t armv8pmu_event_attr_is_visible(struct kobject *, struct attribute *, int);
157:	static ssize_t armv8pmu_events_sysfs_show(struct device *, struct device_attribute *, char *);
1026:	static bool armv8pmu_filter(struct pmu *, int);
927:	static int armv8pmu_get_event_idx(struct pmu_hw_events *, struct perf_event *);
831:	static irqreturn_t armv8pmu_handle_irq(struct arm_pmu *);
1208:	static int armv8pmu_proc_user_access_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
571:	static u64 armv8pmu_read_counter(struct perf_event *);
516:	static u64 armv8pmu_read_evcntr(int);
1032:	static void armv8pmu_reset(void *);
982:	static int armv8pmu_set_event_filter(struct hw_perf_event *, struct perf_event_attr *);
807:	static void armv8pmu_start(struct arm_pmu *);
825:	static void armv8pmu_stop(struct arm_pmu *);
963:	static int armv8pmu_user_event_idx(struct perf_event *);
605:	static void armv8pmu_write_counter(struct perf_event *, u64);
585:	static void armv8pmu_write_evcntr(int, u64);
618:	static void armv8pmu_write_evtype(int, u32);
1299:	static int armv9_cortex_a510_pmu_init(struct arm_pmu *);
1300:	static int armv9_cortex_a710_pmu_init(struct arm_pmu *);
1302:	static int armv9_cortex_x2_pmu_init(struct arm_pmu *);
1305:	static int armv9_neoverse_n2_pmu_init(struct arm_pmu *);
336:	static ssize_t bus_slots_show(struct device *, struct device_attribute *, char *);
349:	static ssize_t bus_width_show(struct device *, struct device_attribute *, char *);
296:	static ssize_t event_show(struct device *, struct device_attribute *, char *);
297:	static ssize_t long_show(struct device *, struct device_attribute *, char *);
298:	static ssize_t rdpmc_show(struct device *, struct device_attribute *, char *);
324:	static ssize_t slots_show(struct device *, struct device_attribute *, char *);

File arch/arm64/kernel/perf_regs.c:
101:	void perf_get_regs_user(struct perf_regs *, struct pt_regs *);
93:	u64 perf_reg_abi(struct task_struct *);
80:	int perf_reg_validate(u64);
30:	u64 perf_reg_value(struct pt_regs *, int);

File arch/arm64/kernel/pointer_auth.c:
93:	int ptrauth_get_enabled_keys(struct task_struct *);
11:	int ptrauth_prctl_reset_keys(struct task_struct *, unsigned long);
67:	int ptrauth_set_enabled_keys(struct task_struct *, unsigned long, unsigned long);

File arch/arm64/kernel/process.c:
576:	unsigned long __get_wchan(struct task_struct *);
200:	void __show_regs(struct pt_regs *);
522:	struct task_struct *__switch_to(struct task_struct *, struct task_struct *);
593:	unsigned long arch_align_stack(unsigned long);
72:	void arch_cpu_idle_dead(void);
287:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
740:	int arch_elf_adjust_prot(int, const struct arch_elf_state *, bool, bool);
282:	void arch_release_task_struct(struct task_struct *);
625:	void arch_setup_new_exec(void);
344:	int copy_thread(struct task_struct *, const struct kernel_clone_args *);
274:	void flush_thread(void);
694:	long get_tagged_addr_ctrl(struct task_struct *);
97:	void machine_halt(void);
110:	void machine_power_off(void);
126:	void machine_restart(char *);
87:	void machine_shutdown(void);
664:	long set_tagged_addr_ctrl(struct task_struct *, unsigned long);
243:	void show_regs(struct pt_regs *);
418:	void tls_preserve_current_state(void);
506:	void update_sctlr_el1(u64);
565:	static bool get_wchan_cb(void *, unsigned long);
729:	static int tagged_addr_init(void);

File arch/arm64/kernel/proton-pack.c:
795:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
751:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
819:	enum mitigation_state arm64_get_spectre_bhb_state(void);
215:	enum mitigation_state arm64_get_spectre_v2_state(void);
461:	enum mitigation_state arm64_get_spectre_v4_state(void);
446:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
61:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
124:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
202:	bool has_spectre_v2(const struct arm64_cpu_capabilities *, int);
325:	bool has_spectre_v3a(const struct arm64_cpu_capabilities *, int);
511:	bool has_spectre_v4(const struct arm64_cpu_capabilities *, int);
945:	bool is_spectre_bhb_affected(const struct arm64_cpu_capabilities *, int);
588:	void smccc_patch_fw_mitigation_conduit(struct alt_instr *, __le32 *, __le32 *, int);
993:	void spectre_bhb_enable_mitigation(const struct arm64_cpu_capabilities *);
836:	u8 spectre_bhb_loop_affected(int);
1136:	void spectre_bhb_patch_clearbhb(struct alt_instr *, __le32 *, __le32 *, int);
1078:	void spectre_bhb_patch_fw_mitigation_enabled(struct alt_instr *, __le32 *, __le32 *, int);
1089:	void spectre_bhb_patch_loop_iter(struct alt_instr *, __le32 *, __le32 *, int);
1067:	void spectre_bhb_patch_loop_mitigation_enable(struct alt_instr *, __le32 *, __le32 *, int);
1110:	void spectre_bhb_patch_wa3(struct alt_instr *, __le32 *, __le32 *, int);
305:	void spectre_v2_enable_mitigation(const struct arm64_cpu_capabilities *);
337:	void spectre_v3a_enable_mitigation(const struct arm64_cpu_capabilities *);
631:	void spectre_v4_enable_mitigation(const struct arm64_cpu_capabilities *);
654:	void spectre_v4_enable_task_mitigation(struct task_struct *);
568:	void spectre_v4_patch_fw_mitigation_enable(struct alt_instr *, __le32 *, __le32 *, int);
524:	bool try_emulate_el1_ssbs(struct pt_regs *, u32);
1150:	void unpriv_ebpf_notify(int);
243:	static void call_hvc_arch_workaround_1(void);
237:	static void call_smc_arch_workaround_1(void);
907:	static bool is_spectre_bhb_fw_affected(int);
986:	static int parse_spectre_bhb_param(char *);
85:	static int parse_spectre_v2_param(char *);
394:	static int parse_spectre_v4_param(char *);
249:	static void qcom_link_stack_sanitisation(void);
886:	static enum mitigation_state spectre_bhb_get_cpu_fw_mitigation_state(void);
434:	static bool spectre_v4_mitigations_dynamic(void);
422:	static bool spectre_v4_mitigations_off(void);
965:	static void this_cpu_set_vectors(enum arm64_bp_harden_el1_vectors);

File arch/arm64/kernel/psci.c:
39:	static int cpu_psci_cpu_boot(unsigned int);
50:	static bool cpu_psci_cpu_can_disable(unsigned int);
68:	static void cpu_psci_cpu_die(unsigned int);
55:	static int cpu_psci_cpu_disable(unsigned int);
24:	static int cpu_psci_cpu_init(unsigned int);
80:	static int cpu_psci_cpu_kill(unsigned int);
29:	static int cpu_psci_cpu_prepare(unsigned int);

File arch/arm64/kernel/ptrace.c:
2057:	long arch_ptrace(struct task_struct *, long, unsigned long, unsigned long);
206:	void flush_ptrace_hw_breakpoint(struct task_struct *);
155:	void ptrace_disable(struct task_struct *);
226:	void ptrace_hw_copy_thread(struct task_struct *);
136:	unsigned long regs_get_kernel_stack_nth(struct pt_regs *, unsigned int);
102:	int regs_query_register_offset(const char *);
2118:	int syscall_trace_enter(struct pt_regs *);
2141:	void syscall_trace_exit(struct pt_regs *);
2040:	const struct user_regset_view *task_user_regset_view(struct task_struct *);
2226:	int valid_user_regs(struct user_pt_regs *, struct task_struct *);
580:	static int fpr_active(struct task_struct *, const struct user_regset *);
603:	static int fpr_get(struct task_struct *, const struct user_regset *, struct membuf);
642:	static int fpr_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
554:	static int gpr_get(struct task_struct *, const struct user_regset *, struct membuf);
562:	static int gpr_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
473:	static int hw_break_get(struct task_struct *, const struct user_regset *, struct membuf);
505:	static int hw_break_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1165:	static int pac_enabled_keys_get(struct task_struct *, const struct user_regset *, struct membuf);
1177:	static int pac_enabled_keys_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1144:	static int pac_mask_get(struct task_struct *, const struct user_regset *, struct membuf);
411:	static struct perf_event *ptrace_hbp_get_initialised_bp(unsigned int, struct task_struct *, unsigned long);
169:	static void ptrace_hbptriggered(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
986:	static int ssve_get(struct task_struct *, const struct user_regset *, struct membuf);
996:	static int ssve_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
833:	static int sve_get(struct task_struct *, const struct user_regset *, struct membuf);
781:	static int sve_get_common(struct task_struct *, const struct user_regset *, struct membuf, enum vec_type);
970:	static int sve_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
843:	static int sve_set_common(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *, enum vec_type);
700:	static int system_call_get(struct task_struct *, const struct user_regset *, struct membuf);
707:	static int system_call_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1320:	static int tagged_addr_ctrl_get(struct task_struct *, const struct user_regset *, struct membuf);
1332:	static int tagged_addr_ctrl_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
661:	static int tls_get(struct task_struct *, const struct user_regset *, struct membuf);
678:	static int tls_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);
1008:	static int za_get(struct task_struct *, const struct user_regset *, struct membuf);
1057:	static int za_set(struct task_struct *, const struct user_regset *, unsigned int, unsigned int, const void *, const void *);

File arch/arm64/kernel/return_address.c:
35:	void *return_address(unsigned int);
21:	static bool save_return_addr(void *, unsigned long);

File arch/arm64/kernel/setup.c:
97:	bool arch_match_cpu_phys_id(int, u64);
287:	u64 cpu_logical_map(unsigned int);
175:	void early_fdt_map(u64);
170:	void *get_early_fdt_ptr(void);
292:	void setup_arch(char **);
88:	void smp_setup_processor_id(void);
425:	static int arm64_panic_block_dump(struct notifier_block *, unsigned long, void *);
438:	static int register_arm64_panic_block(void);
219:	static void request_standard_resources(void);
257:	static int reserve_memblock_reserved_regions(void);
183:	static void setup_machine_fdt(phys_addr_t);
109:	static void smp_build_mpidr_hash(void);
398:	static int topology_init(void);

File arch/arm64/kernel/signal.c:
680:	long __arm64_sys_rt_sigreturn(const struct pt_regs *);
1113:	void do_notify_resume(struct pt_regs *, unsigned long);
1155:	void minsigstksz_setup(void);
720:	static int setup_sigframe_layout(struct rt_sigframe_user_layout *, bool);

File arch/arm64/kernel/smp.c:
339:	void __cpu_die(unsigned int);
293:	int __cpu_disable(void);
113:	int __cpu_up(unsigned int, struct task_struct *);
813:	void arch_irq_work_raise(void);
795:	void arch_send_call_function_ipi_mask(const struct cpumask *);
800:	void arch_send_call_function_single_ipi(int);
779:	int arch_show_interrupts(struct seq_file *, int);
364:	void cpu_die(void);
401:	void cpu_die_early(void);
1093:	bool cpus_are_stuck_in_kernel(void);
833:	void panic_smp_self_stop(void);
196:	void secondary_start_kernel(void);
956:	void set_smp_ipi_range(int, int);
436:	void smp_cpus_done(unsigned int);
686:	void smp_init_cpus(void);
445:	void smp_prepare_boot_cpu(void);
719:	void smp_prepare_cpus(unsigned int);
980:	void smp_send_reschedule(int);
1003:	void smp_send_stop(void);
986:	void tick_broadcast(const struct cpumask *);
421:	static void hyp_mode_check(void);
920:	static irqreturn_t ipi_handler(int, void *);
932:	static void ipi_setup(int);
475:	static bool is_mpidr_duplicate(unsigned int, u64);
628:	static void of_parse_and_init_cpus(void);
489:	static int smp_cpu_setup(int);

File arch/arm64/kernel/smp_spin_table.c:
107:	static int smp_spin_table_cpu_boot(unsigned int);
43:	static int smp_spin_table_cpu_init(unsigned int);
66:	static int smp_spin_table_cpu_prepare(unsigned int);

File arch/arm64/kernel/stacktrace.c:
198:	void arch_stack_walk(stack_trace_consume_fn, void *, struct task_struct *, struct pt_regs *);
143:	void dump_backtrace(struct pt_regs *, struct task_struct *, const char *);
163:	void show_stack(struct task_struct *, unsigned long *, const char *);
136:	static bool dump_backtrace_entry(void *, unsigned long);
121:	static void unwind(struct unwind_state *, stack_trace_consume_fn, void *);

File arch/arm64/kernel/sys.c:
31:	long __arm64_sys_arm64_personality(const struct pt_regs *);
21:	long __arm64_sys_mmap(const struct pt_regs *);
41:	long __arm64_sys_ni_syscall(const struct pt_regs *);

File arch/arm64/kernel/syscall.c:
194:	void do_el0_svc(struct pt_regs *);
41:	static void invoke_syscall(struct pt_regs *, unsigned int, unsigned int, const syscall_fn_t *);

File arch/arm64/kernel/time.c:
45:	unsigned long profile_pc(struct pt_regs *);
55:	void time_init(void);
35:	static bool profile_pc_cb(void *, unsigned long);

File arch/arm64/kernel/topology.c:
90:	void update_freq_counters_refs(void);
238:	static int init_amu_fie(void);

File arch/arm64/kernel/traps.c:
265:	void arm64_force_sig_fault(int, int, unsigned long, const char *);
275:	void arm64_force_sig_mceerr(int, unsigned long, short, const char *);
282:	void arm64_force_sig_ptrace_errno_trap(int, unsigned long, const char *);
906:	bool arm64_is_fatal_ras_serror(struct pt_regs *, unsigned long);
289:	void arm64_notify_die(const char *, struct pt_regs *, int, int, unsigned long, unsigned long);
439:	void arm64_notify_segfault(unsigned long);
891:	void arm64_serror_panic(struct pt_regs *, unsigned long);
359:	void arm64_skip_faulting_instruction(struct pt_regs *, unsigned long);
845:	void bad_el0_sync(struct pt_regs *, int, unsigned long);
210:	void die(const char *, struct pt_regs *, long);
488:	void do_el0_bti(struct pt_regs *);
498:	void do_el0_fpac(struct pt_regs *, unsigned long);
772:	void do_el0_sys(unsigned long, struct pt_regs *);
453:	void do_el0_undef(struct pt_regs *, unsigned long);
493:	void do_el1_bti(struct pt_regs *, unsigned long);
503:	void do_el1_fpac(struct pt_regs *, unsigned long);
474:	void do_el1_undef(struct pt_regs *, unsigned long);
938:	void do_serror(struct pt_regs *, unsigned long);
1084:	int early_brk64(unsigned long, unsigned long, struct pt_regs *);
836:	const char *esr_get_class_string(unsigned long);
407:	void force_signal_inject(int, int, unsigned long, unsigned long);
947:	int is_valid_bugaddr(unsigned long);
1098:	void trap_init(void);
131:	static bool __check_al(unsigned long);
64:	static bool __check_cc(unsigned long);
59:	static bool __check_cs(unsigned long);
49:	static bool __check_eq(unsigned long);
101:	static bool __check_ge(unsigned long);
113:	static bool __check_gt(unsigned long);
89:	static bool __check_hi(unsigned long);
122:	static bool __check_le(unsigned long);
95:	static bool __check_ls(unsigned long);
107:	static bool __check_lt(unsigned long);
69:	static bool __check_mi(unsigned long);
54:	static bool __check_ne(unsigned long);
74:	static bool __check_pl(unsigned long);
84:	static bool __check_vc(unsigned long);
79:	static bool __check_vs(unsigned long);
241:	static void arm64_show_signal(int, const char *);
959:	static int bug_handler(struct pt_regs *, unsigned long);
594:	static void cntfrq_read_handler(unsigned long, struct pt_regs *);
586:	static void cntvct_read_handler(unsigned long, struct pt_regs *);
567:	static void ctr_read_handler(unsigned long, struct pt_regs *);
602:	static void mrs_handler(unsigned long, struct pt_regs *);
1016:	static int reserved_fault_handler(struct pt_regs *, unsigned long);
527:	static void user_cache_maint_handler(unsigned long, struct pt_regs *);
613:	static void wfi_handler(unsigned long, struct pt_regs *);

File arch/arm64/kernel/vdso.c:
120:	struct vdso_data *arch_get_vdso_data(void *);
441:	int arch_setup_additional_pages(struct linux_binprm *, int);
132:	int vdso_join_timens(struct task_struct *, struct time_namespace *);
86:	static int __vdso_init(enum vdso_abi);
432:	static int vdso_init(void);
78:	static int vdso_mremap(const struct vm_special_mapping *, struct vm_area_struct *);
156:	static vm_fault_t vvar_fault(const struct vm_special_mapping *, struct vm_area_struct *, struct vm_fault *);

File arch/arm64/lib/csum.c:
132:	__sum16 csum_ipv6_magic(const struct in6_addr *, const struct in6_addr *, __u32, __u8, __wsum);
21:	unsigned int do_csum(const unsigned char *, int);

File arch/arm64/lib/delay.c:
53:	void __const_udelay(unsigned long);
26:	void __delay(unsigned long);
65:	void __ndelay(unsigned long);
59:	void __udelay(unsigned long);

File arch/arm64/lib/insn.c:
1282:	u32 aarch32_insn_extract_reg_num(u32, int);
1274:	bool aarch32_insn_is_wide(u32);
1295:	u32 aarch32_insn_mcr_extract_crm(u32);
1289:	u32 aarch32_insn_mcr_extract_opc2(u32);
1206:	s32 aarch64_get_branch_offset(u32);
1253:	s32 aarch64_insn_adrp_get_offset(u32);
1259:	u32 aarch64_insn_adrp_set_offset(u32, s32);
88:	u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type, u32);
146:	u32 aarch64_insn_decode_register(enum aarch64_insn_register_type, u32);
112:	u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type, u32, u64);
1269:	u32 aarch64_insn_extract_system_reg(u32);
724:	u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_adsb_type);
895:	u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_adsb_type);
1172:	u32 aarch64_insn_gen_adr(unsigned long, unsigned long, enum aarch64_insn_register, enum aarch64_insn_adr_type);
608:	u32 aarch64_insn_gen_atomic_ld_op(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_mem_atomic_op, enum aarch64_insn_mem_order_type);
785:	u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register, enum aarch64_insn_register, int, int, enum aarch64_insn_variant, enum aarch64_insn_bitfield_type);
261:	u32 aarch64_insn_gen_branch_imm(unsigned long, unsigned long, enum aarch64_insn_branch_type);
353:	u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register, enum aarch64_insn_branch_type);
690:	u32 aarch64_insn_gen_cas(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_mem_order_type);
292:	u32 aarch64_insn_gen_comp_branch_imm(unsigned long, unsigned long, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_branch_type);
333:	u32 aarch64_insn_gen_cond_branch_imm(unsigned long, unsigned long, enum aarch64_insn_condition);
953:	u32 aarch64_insn_gen_data1(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data1_type);
996:	u32 aarch64_insn_gen_data2(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data2_type);
1046:	u32 aarch64_insn_gen_data3(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data3_type);
1468:	u32 aarch64_insn_gen_dmb(enum aarch64_insn_mb_type);
1436:	u32 aarch64_insn_gen_extr(enum aarch64_insn_variant, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, u8);
451:	u32 aarch64_insn_gen_load_literal(unsigned long, unsigned long, enum aarch64_insn_register, bool);
537:	u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
407:	u32 aarch64_insn_gen_load_store_imm(enum aarch64_insn_register, enum aarch64_insn_register, unsigned int, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
473:	u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_ldst_type);
376:	u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
1405:	u32 aarch64_insn_gen_logical_immediate(enum aarch64_insn_logic_type, enum aarch64_insn_variant, enum aarch64_insn_register, enum aarch64_insn_register, u64);
1089:	u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_logic_type);
1163:	u32 aarch64_insn_gen_move_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant);
840:	u32 aarch64_insn_gen_movewide(enum aarch64_insn_register, int, int, enum aarch64_insn_variant, enum aarch64_insn_movewide_type);
1234:	u32 aarch64_set_branch_offset(u32, s32);

File arch/arm64/lib/xor-neon.c:
13:	void xor_arm64_neon_2(unsigned long, unsigned long * restrict, const unsigned long * restrict);
40:	void xor_arm64_neon_3(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
76:	void xor_arm64_neon_4(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
121:	void xor_arm64_neon_5(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
194:	static void xor_arm64_eor3_3(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
229:	static void xor_arm64_eor3_4(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
273:	static void xor_arm64_eor3_5(unsigned long, unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict, const unsigned long * restrict);
331:	static void xor_neon_exit(void);
320:	static int xor_neon_init(void);

File arch/arm64/mm/context.c:
273:	unsigned long arm64_mm_context_get(struct mm_struct *);
319:	void arm64_mm_context_put(struct mm_struct *);
215:	void check_and_switch_context(struct mm_struct *);
349:	void cpu_do_switch_mm(phys_addr_t, struct mm_struct *);
339:	void post_ttbr_update_workaround(void);
64:	void verify_cpu_asid_bits(void);
401:	static int asids_init(void);
374:	static int asids_update_limit(void);
158:	static u64 new_context(struct mm_struct *);

File arch/arm64/mm/copypage.c:
17:	void copy_highpage(struct page *, struct page *);
34:	void copy_user_highpage(struct page *, struct page *, unsigned long, struct vm_area_struct *);

File arch/arm64/mm/dma-mapping.c:
35:	void arch_dma_prep_coherent(struct page *, size_t);
64:	void arch_setup_dma_ops(struct device *, u64, u64, const struct iommu_ops *, bool);
24:	void arch_sync_dma_for_cpu(phys_addr_t, size_t, enum dma_data_direction);
16:	void arch_sync_dma_for_device(phys_addr_t, size_t, enum dma_data_direction);
58:	void arch_teardown_dma_ops(struct device *);

File arch/arm64/mm/extable.c:
59:	bool fixup_exception(struct pt_regs *);

File arch/arm64/mm/fault.c:
928:	struct page *alloc_zeroed_user_highpage_movable(struct vm_area_struct *, unsigned long);
906:	void do_debug_exception(unsigned long, unsigned long, struct pt_regs *);
826:	void do_mem_abort(unsigned long, unsigned long, struct pt_regs *);
846:	void do_sp_pc_abort(unsigned long, unsigned long, struct pt_regs *);
872:	void hook_debug_fault_code(int, int (*)(unsigned long, unsigned long, struct pt_regs *), int, int, const char *);
198:	int ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
944:	void tag_clear_highpage(struct page *);
362:	static void __do_kernel_fault(unsigned long, unsigned long, struct pt_regs *);
701:	static int do_alignment_fault(unsigned long, unsigned long, struct pt_regs *);
711:	static int do_bad(unsigned long, unsigned long, struct pt_regs *);
464:	static void do_bad_area(unsigned long, unsigned long, struct pt_regs *);
529:	static int do_page_fault(unsigned long, unsigned long, struct pt_regs *);
716:	static int do_sea(unsigned long, unsigned long, struct pt_regs *);
746:	static int do_tag_check_fault(unsigned long, unsigned long, struct pt_regs *);
688:	static int do_translation_fault(unsigned long, unsigned long, struct pt_regs *);
89:	static void mem_abort_decode(unsigned long);
407:	static void set_thread_esr(unsigned long, unsigned long);
122:	static void show_pte(unsigned long);

File arch/arm64/mm/flush.c:
51:	void __sync_icache_dcache(pte_t);
43:	void copy_to_user_page(struct vm_area_struct *, struct page *, unsigned long, void *, const void *, unsigned long);
76:	void flush_dcache_page(struct page *);
17:	void sync_icache_aliases(unsigned long, unsigned long);

File arch/arm64/mm/hugetlbpage.c:
76:	bool arch_hugetlb_migration_supported(struct hstate *);
558:	bool arch_hugetlb_valid_size(unsigned long);
396:	pte_t arch_make_huge_pte(pte_t, unsigned int, vm_flags_t);
39:	void arm64_hugetlb_cma_reserve(void);
287:	pte_t *huge_pte_alloc(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long);
412:	void huge_pte_clear(struct mm_struct *, unsigned long, pte_t *, unsigned long);
332:	pte_t *huge_pte_offset(struct mm_struct *, unsigned long, unsigned long);
531:	pte_t huge_ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
151:	pte_t huge_ptep_get(pte_t *);
424:	pte_t huge_ptep_get_and_clear(struct mm_struct *, unsigned long, pte_t *);
578:	void huge_ptep_modify_prot_commit(struct vm_area_struct *, unsigned long, pte_t *, pte_t, pte_t);
563:	pte_t huge_ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
468:	int huge_ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
504:	void huge_ptep_set_wrprotect(struct mm_struct *, unsigned long, pte_t *);
374:	unsigned long hugetlb_mask_last_page(struct hstate *);
89:	int pmd_huge(pmd_t);
94:	int pud_huge(pud_t);
251:	void set_huge_pte_at(struct mm_struct *, unsigned long, pte_t *, pte_t);
545:	static int hugetlbpage_init(void);

File arch/arm64/mm/init.c:
285:	void arm64_memblock_init(void);
417:	void bootmem_init(void);
516:	void dump_mem_limit(void);
503:	void free_initmem(void);
471:	void mem_init(void);
256:	int pfn_is_map_memory(unsigned long);
273:	static int early_mem(char *);
219:	static phys_addr_t max_zone_phys(unsigned int);
232:	static void zone_sizes_init(void);

File arch/arm64/mm/ioremap.c:
29:	bool arch_memremap_can_ram_remap(resource_size_t, size_t, unsigned long);
24:	void early_ioremap_init(void);
6:	bool ioremap_allowed(phys_addr_t, size_t, unsigned long);

File arch/arm64/mm/mmap.c:
60:	int valid_mmap_phys_addr_range(unsigned long, size_t);
41:	int valid_phys_addr_range(phys_addr_t, size_t);
80:	pgprot_t vm_get_page_prot(unsigned long);
65:	static int adjust_protection_map(void);

File arch/arm64/mm/mmu.c:
1264:	void __set_fixmap(enum fixed_addresses, phys_addr_t, pgprot_t);
461:	void create_pgd_mapping(struct mm_struct *, phys_addr_t, unsigned long, phys_addr_t, pgprot_t, bool);
1207:	void early_fixmap_init(void);
1282:	void *fixmap_remap_fdt(phys_addr_t, int *, pgprot_t);
499:	void mark_linear_text_alias_ro(void);
609:	void mark_rodata_ro(void);
794:	void paging_init(void);
97:	pgprot_t phys_mem_access_prot(struct file *, unsigned long, unsigned long, pgprot_t);
1371:	int pmd_clear_huge(pmd_t *);
1379:	int pmd_free_pte_page(pmd_t *, unsigned long);
1349:	int pmd_set_huge(pmd_t *, phys_addr_t, pgprot_t);
1649:	void ptep_modify_prot_commit(struct vm_area_struct *, unsigned long, pte_t *, pte_t, pte_t);
1634:	pte_t ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
1363:	int pud_clear_huge(pud_t *);
1398:	int pud_free_pmd_page(pud_t *, unsigned long);
1335:	int pud_set_huge(pud_t *, phys_addr_t, pgprot_t);
81:	void set_swapper_pgd(pgd_t *, pgd_t);
1146:	int vmemmap_check_pmd(pmd_t *, int, unsigned long, unsigned long);
1153:	int vmemmap_populate(unsigned long, unsigned long, int, struct vmem_altmap *);
1140:	void vmemmap_set_pmd(pmd_t *, void *, int, unsigned long, unsigned long);
367:	static void __create_pgd_mapping_locked(pgd_t *, phys_addr_t, unsigned long, phys_addr_t, pgprot_t, phys_addr_t (*)(int), int);
492:	static void __map_memblock(pgd_t *, phys_addr_t, phys_addr_t, pgprot_t, int);
414:	static phys_addr_t __pgd_pgtable_alloc(int);
764:	static void create_idmap(void);
449:	static void create_mapping_noalloc(phys_addr_t, unsigned long, phys_addr_t, pgprot_t);
108:	static phys_addr_t early_pgtable_alloc(int);
511:	static int enable_crash_mem_map(char *);
650:	static int map_entry_trampoline(void);
699:	static void map_kernel(pgd_t *);
624:	static void map_kernel_segment(pgd_t *, void *, void *, pgprot_t, struct vm_struct *, int, unsigned long);
524:	static void map_mem(pgd_t *);
424:	static phys_addr_t pgd_pgtable_alloc(int);
476:	static void update_mapping_prot(phys_addr_t, unsigned long, phys_addr_t, pgprot_t);

File arch/arm64/mm/mteswap.c:
12:	void *mte_allocate_tag_storage(void);
18:	void mte_free_tag_storage(char *);
62:	void mte_invalidate_tags(int, unsigned long);
70:	void mte_invalidate_tags_area(int);
49:	void mte_restore_tags(swp_entry_t, struct page *);
23:	int mte_save_tags(struct page *);

File arch/arm64/mm/pageattr.c:
22:	bool can_set_direct_map(void);
211:	bool kernel_page_present(struct page *);
178:	int set_direct_map_default_noflush(struct page *);
163:	int set_direct_map_invalid_noflush(struct page *);
137:	int set_memory_nx(unsigned long, int);
123:	int set_memory_ro(unsigned long, int);
130:	int set_memory_rw(unsigned long, int);
151:	int set_memory_valid(unsigned long, int, int);
144:	int set_memory_x(unsigned long, int);
64:	static int change_memory_common(unsigned long, int, pgprot_t, pgprot_t);
33:	static int change_page_range(pte_t *, unsigned long, void *);

File arch/arm64/mm/pgd.c:
20:	pgd_t *pgd_alloc(struct mm_struct *);
30:	void pgd_free(struct mm_struct *, pgd_t *);
38:	void pgtable_cache_init(void);

File block/badblocks.c:
431:	void ack_all_badblocks(struct badblocks *);
53:	int badblocks_check(struct badblocks *, sector_t, int, sector_t *, int *);
330:	int badblocks_clear(struct badblocks *, sector_t, int);
591:	void badblocks_exit(struct badblocks *);
573:	int badblocks_init(struct badblocks *, int);
162:	int badblocks_set(struct badblocks *, sector_t, int, int);
465:	ssize_t badblocks_show(struct badblocks *, char *, int);
515:	ssize_t badblocks_store(struct badblocks *, const char *, size_t, int);
579:	int devm_init_badblocks(struct device *, struct badblocks *);

File block/bdev.c:
43:	struct block_device *I_BDEV(struct inode *);
1001:	int __invalidate_device(struct block_device *, bool);
650:	void bd_abort_claiming(struct block_device *, void *);
573:	int bd_prepare_to_claim(struct block_device *, void *);
508:	void bdev_add(struct block_device *, dev_t);
480:	struct block_device *bdev_alloc(struct gendisk *, u8);
462:	void bdev_cache_init(void);
323:	int bdev_read_page(struct block_device *, sector_t, struct page *);
1081:	void bdev_statx_dioalign(struct inode *, struct kstat *);
360:	int bdev_write_page(struct block_device *, sector_t, struct page *, struct writeback_control *);
786:	struct block_device *blkdev_get_by_dev(dev_t, fmode_t, void *);
876:	struct block_device *blkdev_get_by_path(const char *, fmode_t, void *);
736:	struct block_device *blkdev_get_no_open(dev_t);
897:	void blkdev_put(struct block_device *, fmode_t);
760:	void blkdev_put_no_open(struct block_device *);
238:	int freeze_bdev(struct block_device *);
214:	int fsync_bdev(struct block_device *);
80:	void invalidate_bdev(struct block_device *);
972:	int lookup_bdev(const char *, dev_t *);
516:	long nr_blockdev_pages(void);
172:	int sb_min_blocksize(struct super_block *, int);
159:	int sb_set_blocksize(struct super_block *, int);
138:	int set_blocksize(struct block_device *, int);
1022:	void sync_bdevs(bool);
194:	int sync_blockdev(struct block_device *);
182:	int sync_blockdev_nowait(struct block_device *);
202:	int sync_blockdev_range(struct block_device *, loff_t, loff_t);
276:	int thaw_bdev(struct block_device *);
96:	int truncate_bdev_range(struct block_device *, fmode_t, loff_t, loff_t);
623:	static void bd_finish_claiming(struct block_device *, void *);
443:	static int bd_init_fs_context(struct fs_context *);
543:	static bool bd_may_claim(struct block_device *, struct block_device *, void *);
392:	static struct inode *bdev_alloc_inode(struct super_block *);
428:	static void bdev_evict_inode(struct inode *);
402:	static void bdev_free_inode(struct inode *);
658:	static void blkdev_flush_mapping(struct block_device *);
666:	static int blkdev_get_whole(struct block_device *, fmode_t);
421:	static void init_once(void *);

File block/bio-integrity.c:
346:	bool __bio_integrity_endio(struct bio *);
123:	int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);
371:	void bio_integrity_advance(struct bio *, unsigned int);
48:	struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);
404:	int bio_integrity_clone(struct bio *, struct bio *, gfp_t);
101:	void bio_integrity_free(struct bio *);
449:	void bio_integrity_init(void);
199:	bool bio_integrity_prep(struct bio *);
387:	void bio_integrity_trim(struct bio *);
425:	int bioset_integrity_create(struct bio_set *, int);
443:	void bioset_integrity_free(struct bio_set *);
20:	void blk_flush_integrity(void);
156:	static blk_status_t bio_integrity_process(struct bio *, struct bvec_iter *, integrity_processing_fn *);
317:	static void bio_integrity_verify_fn(struct work_struct *);

File block/bio.c:
1108:	void __bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
1394:	void __bio_advance(struct bio *, unsigned int);
1171:	void __bio_release_pages(struct bio *, bool);
1163:	bool bio_add_folio(struct bio *, struct folio *, size_t, size_t);
1001:	int bio_add_hw_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int, unsigned int, bool *);
1135:	int bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
1056:	int bio_add_pc_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int);
1081:	int bio_add_zone_append_page(struct bio *, struct page *, unsigned int, unsigned int);
493:	struct bio *bio_alloc_bioset(struct block_device *, unsigned short, blk_opf_t, gfp_t, struct bio_set *);
845:	struct bio *bio_alloc_clone(struct block_device *, struct bio *, gfp_t, struct bio_set *);
339:	void bio_chain(struct bio *, struct bio *);
1529:	void bio_check_pages_dirty(struct bio *);
1433:	void bio_copy_data(struct bio *, struct bio *);
1404:	void bio_copy_data_iter(struct bio *, struct bvec_iter *, struct bio *, struct bvec_iter *);
1583:	void bio_endio(struct bio *);
1442:	void bio_free_pages(struct bio *);
247:	void bio_init(struct bio *, struct block_device *, struct bio_vec *, unsigned short, blk_opf_t);
876:	int bio_init_clone(struct block_device *, struct bio *, struct bio *, gfp_t);
1184:	void bio_iov_bvec_set(struct bio *, struct iov_iter *);
1336:	int bio_iov_iter_get_pages(struct bio *, struct iov_iter *);
600:	struct bio *bio_kmalloc(unsigned short, gfp_t);
798:	void bio_put(struct bio *);
301:	void bio_reset(struct bio *, struct block_device *, blk_opf_t);
1481:	void bio_set_pages_dirty(struct bio *);
1633:	struct bio *bio_split(struct bio *, int, gfp_t, struct bio_set *);
1672:	void bio_trim(struct bio *, sector_t, sector_t);
215:	void bio_uninit(struct bio *);
1707:	void bioset_exit(struct bio_set *);
1745:	int bioset_init(struct bio_set *, unsigned int, unsigned int, int);
1694:	int biovec_init_pool(mempool_t *, int);
349:	struct bio *blk_next_bio(struct bio *, struct block_device *, unsigned int, blk_opf_t, gfp_t);
184:	struct bio_vec *bvec_alloc(mempool_t *, unsigned short *, gfp_t);
164:	void bvec_free(mempool_t *, struct bio_vec *, unsigned short);
682:	void guard_bio_eod(struct bio *);
1370:	int submit_bio_wait(struct bio *);
610:	void zero_fill_bio(struct bio *);
720:	static void bio_alloc_cache_prune(struct bio_alloc_cache *, unsigned int);
363:	static void bio_alloc_rescue(struct work_struct *);
323:	static void bio_chain_endio(struct bio *);
730:	static int bio_cpu_dead(unsigned int, struct hlist_node *);
1512:	static void bio_dirty_fn(struct work_struct *);
230:	static void bio_free(struct bio *);
630:	static void bio_truncate(struct bio *, unsigned int);
50:	static struct biovec_slab *biovec_slab(unsigned short);
1791:	static int init_bio(void);
380:	static void punt_bios_to_rescuer(struct bio_set *);
1354:	static void submit_bio_wait_endio(struct bio *);

File block/blk-cgroup.c:
1657:	bool __blkcg_punt_bio_submit(struct bio *);
616:	u64 __blkg_prfill_u64(struct seq_file *, struct blkg_policy_data *, u64);
1959:	void bio_associate_blkg(struct bio *);
1935:	void bio_associate_blkg_from_css(struct bio *, struct cgroup_subsys_state *);
215:	struct cgroup_subsys_state *bio_blkcg_css(struct bio *);
1981:	void bio_clone_blkg_association(struct bio *, struct bio *);
1997:	void blk_cgroup_bio_start(struct bio *);
2040:	bool blk_cgroup_congested(void);
1395:	int blkcg_activate_policy(struct request_queue *, const struct blkcg_policy *);
1885:	void blkcg_add_delay(struct blkcg_gq *, u64, u64);
639:	struct block_device *blkcg_conf_open_bdev(char **);
1502:	void blkcg_deactivate_policy(struct request_queue *, const struct blkcg_policy *);
1323:	void blkcg_exit_disk(struct gendisk *);
1048:	struct list_head *blkcg_get_cgwb_list(struct cgroup_subsys_state *);
1268:	int blkcg_init_disk(struct gendisk *);
1805:	void blkcg_maybe_throttle_current(void);
1124:	void blkcg_pin_online(struct cgroup_subsys_state *);
1556:	int blkcg_policy_register(struct blkcg_policy *);
1630:	void blkcg_policy_unregister(struct blkcg_policy *);
585:	void blkcg_print_blkgs(struct seq_file *, struct blkcg *, u64 (*)(struct seq_file *, struct blkg_policy_data *, int), const struct blkcg_policy *, int, bool);
1855:	void blkcg_schedule_throttle(struct gendisk *, bool);
1138:	void blkcg_unpin_online(struct cgroup_subsys_state *);
807:	void blkg_conf_finish(struct blkg_conf_ctx *);
678:	int blkg_conf_prep(struct blkcg *, const struct blkcg_policy *, char *, struct blkg_conf_ctx *);
560:	const char *blkg_dev_name(struct blkcg_gq *);
153:	static void __blkg_release(struct callback_head *);
1330:	static void blkcg_bind(struct cgroup_subsys_state *);
1187:	static struct cgroup_subsys_state *blkcg_css_alloc(struct cgroup_subsys_state *);
1167:	static void blkcg_css_free(struct cgroup_subsys_state *);
1158:	static void blkcg_css_offline(struct cgroup_subsys_state *);
1254:	static int blkcg_css_online(struct cgroup_subsys_state *);
1350:	static void blkcg_exit(struct task_struct *);
2056:	static int blkcg_init(void);
1011:	static int blkcg_print_stat(struct seq_file *, void *);
524:	static int blkcg_reset_stats(struct cgroup_subsys_state *, struct cftype *, u64);
861:	static void blkcg_rstat_flush(struct cgroup_subsys_state *, int);
242:	static struct blkcg_gq *blkg_alloc(struct blkcg *, struct gendisk *, gfp_t);
181:	static void blkg_async_bio_workfn(struct work_struct *);
304:	static struct blkcg_gq *blkg_create(struct blkcg *, struct gendisk *, struct blkcg_gq *);
453:	static void blkg_destroy(struct blkcg_gq *);
117:	static void blkg_free_workfn(struct work_struct *);
174:	static void blkg_release(struct percpu_ref *);

File block/blk-core.c:
340:	int __bio_queue_enter(struct request_queue *, struct bio *);
1132:	void __blk_flush_plug(struct blk_plug *, bool);
972:	void bdev_end_io_acct(struct block_device *, enum req_op, unsigned long);
942:	unsigned long bdev_start_io_acct(struct block_device *, unsigned int, enum req_op, unsigned long);
987:	void bio_end_io_acct_remapped(struct bio *, unsigned long, struct block_device *);
854:	int bio_poll(struct bio *, struct io_comp_batch *, unsigned int);
965:	unsigned long bio_start_io_acct(struct bio *);
398:	struct request_queue *blk_alloc_queue(int);
1107:	struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn, void *, int);
244:	void blk_clear_pm_only(struct request_queue *);
1179:	int blk_dev_init(void);
1158:	void blk_finish_plug(struct blk_plug *);
465:	bool blk_get_queue(struct request_queue *);
1167:	void blk_io_schedule(void);
1013:	int blk_lld_busy(struct request_queue *);
137:	const char *blk_op_str(enum req_op);
287:	void blk_put_queue(struct request_queue *);
313:	int blk_queue_enter(struct request_queue *, blk_mq_req_flags_t);
374:	void blk_queue_exit(struct request_queue *);
90:	void blk_queue_flag_clear(unsigned int, struct request_queue *);
79:	void blk_queue_flag_set(unsigned int, struct request_queue *);
104:	bool blk_queue_flag_test_and_set(unsigned int, struct request_queue *);
294:	void blk_queue_start_drain(struct request_queue *);
238:	void blk_set_pm_only(struct request_queue *);
1084:	void blk_start_plug(struct blk_plug *);
1035:	void blk_start_plug_nr_ios(struct blk_plug *, unsigned short);
190:	int blk_status_to_errno(blk_status_t);
200:	const char *blk_status_to_str(blk_status_t);
227:	void blk_sync_queue(struct request_queue *);
177:	blk_status_t errno_to_blk_status(int);
891:	int iocb_bio_iopoll(struct kiocb *, struct io_comp_batch *, unsigned int);
1028:	int kblockd_mod_delayed_work_on(int, struct delayed_work *, unsigned long);
1022:	int kblockd_schedule_work(struct work_struct *);
826:	void submit_bio(struct bio *);
710:	void submit_bio_noacct(struct bio *);
685:	void submit_bio_noacct_nocheck(struct bio *);
927:	void update_io_ticks(struct block_device *, unsigned long, bool);
255:	static void blk_free_queue_rcu(struct callback_head *);
379:	static void blk_queue_usage_counter_release(struct percpu_ref *);
387:	static void blk_rq_timed_out_timer(struct timer_list *);
394:	static void blk_timeout_work(struct work_struct *);

File block/blk-flush.c:
471:	struct blk_flush_queue *blk_alloc_flush_queue(int, int, gfp_t);
500:	void blk_free_flush_queue(struct blk_flush_queue *);
393:	void blk_insert_flush(struct request *);
528:	void blk_mq_hctx_set_fq_lock_class(struct blk_mq_hw_ctx *, struct lock_class_key *);
462:	int blkdev_issue_flush(struct block_device *);
275:	bool is_flush_rq(struct request *);
170:	static void blk_flush_complete_seq(struct request *, struct blk_flush_queue *, unsigned int, blk_status_t);
220:	static enum rq_end_io_ret flush_end_io(struct request *, blk_status_t);
358:	static enum rq_end_io_ret mq_flush_data_end_io(struct request *, blk_status_t);

File block/blk-ia-ranges.c:
264:	struct blk_independent_access_ranges *disk_alloc_independent_access_ranges(struct gendisk *, int);
108:	int disk_register_independent_access_ranges(struct gendisk *);
287:	void disk_set_independent_access_ranges(struct gendisk *, struct blk_independent_access_ranges *);
152:	void disk_unregister_independent_access_ranges(struct gendisk *);
22:	static ssize_t blk_ia_range_nr_sectors_show(struct blk_independent_access_range *, char *);
15:	static ssize_t blk_ia_range_sector_show(struct blk_independent_access_range *, char *);
74:	static void blk_ia_range_sysfs_nop_release(struct kobject *);
50:	static ssize_t blk_ia_range_sysfs_show(struct kobject *, struct attribute *, char *);
89:	static void blk_ia_ranges_sysfs_release(struct kobject *);

File block/blk-integrity.c:
441:	int blk_integrity_add(struct gendisk *);
121:	int blk_integrity_compare(struct gendisk *, struct gendisk *);
452:	void blk_integrity_del(struct gendisk *);
187:	bool blk_integrity_merge_bio(struct request_queue *, struct request *, struct bio *);
164:	bool blk_integrity_merge_rq(struct request_queue *, struct request *, struct request *);
397:	void blk_integrity_register(struct gendisk *, struct blk_integrity *);
427:	void blk_integrity_unregister(struct gendisk *);
27:	int blk_rq_count_integrity_sg(struct request_queue *, struct bio *);
68:	int blk_rq_map_integrity_sg(struct request_queue *, struct bio *, struct scatterlist *);
373:	static void blk_integrity_nop_complete(struct request *, unsigned int);
364:	static blk_status_t blk_integrity_nop_fn(struct blk_integrity_iter *);
369:	static void blk_integrity_nop_prepare(struct request *);
221:	static ssize_t integrity_attr_show(struct kobject *, struct attribute *, char *);
232:	static ssize_t integrity_attr_store(struct kobject *, struct attribute *, const char *, size_t);
305:	static ssize_t integrity_device_show(struct blk_integrity *, char *);
248:	static ssize_t integrity_format_show(struct blk_integrity *, char *);
300:	static ssize_t integrity_generate_show(struct blk_integrity *, char *);
286:	static ssize_t integrity_generate_store(struct blk_integrity *, const char *, size_t);
261:	static ssize_t integrity_interval_show(struct blk_integrity *, char *);
256:	static ssize_t integrity_tag_size_show(struct blk_integrity *, char *);
281:	static ssize_t integrity_verify_show(struct blk_integrity *, char *);
267:	static ssize_t integrity_verify_store(struct blk_integrity *, const char *, size_t);

File block/blk-ioc.c:
300:	int __copy_io(unsigned long, struct task_struct *);
218:	void exit_io_context(struct task_struct *);
209:	void put_io_context(struct io_context *);
255:	int set_task_ioprio(struct task_struct *, int);
451:	static int blk_ioc_init(void);

File block/blk-lib.c:
38:	int __blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t, struct bio **);
218:	int __blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, struct bio **, unsigned int);
97:	int blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t);
303:	int blkdev_issue_secure_erase(struct block_device *, sector_t, sector_t, gfp_t);
252:	int blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, unsigned int);
168:	static int __blkdev_issue_zero_pages(struct block_device *, sector_t, sector_t, gfp_t, struct bio **);

File block/blk-map.c:
531:	int blk_rq_append_bio(struct request *, struct bio *);
777:	int blk_rq_map_kern(struct request_queue *, struct request *, void *, unsigned int, gfp_t);
681:	int blk_rq_map_user(struct request_queue *, struct request *, struct rq_map_data *, void *, unsigned long, gfp_t);
696:	int blk_rq_map_user_io(struct request *, struct rq_map_data *, void *, unsigned long, gfp_t, bool, int, bool, int);
626:	int blk_rq_map_user_iov(struct request_queue *, struct request *, struct rq_map_data *, const struct iov_iter *, gfp_t);
741:	int blk_rq_unmap_user(struct bio *);
436:	static void bio_copy_kern_endio(struct bio *);
443:	static void bio_copy_kern_endio_read(struct bio *);
366:	static void bio_map_kern_endio(struct bio *);

File block/blk-merge.c:
353:	struct bio *__bio_split_to_limits(struct bio *, const struct queue_limits *, unsigned int *);
566:	int __blk_rq_map_sg(struct request_queue *, struct request *, struct scatterlist *, struct scatterlist **);
400:	struct bio *bio_split_to_limits(struct bio *);
1076:	bool blk_attempt_plug_merge(struct request_queue *, struct bio *, unsigned int);
891:	bool blk_attempt_req_merge(struct request_queue *, struct request *, struct request *);
1108:	bool blk_bio_list_merge(struct request_queue *, struct list_head *, struct bio *, unsigned int);
1133:	bool blk_mq_sched_try_merge(struct request_queue *, struct bio *, unsigned int, struct request **);
411:	unsigned int blk_recalc_rq_segments(struct request *);
897:	bool blk_rq_merge_ok(struct request *, struct bio *);
739:	void blk_rq_set_mixed_merge(struct request *);
927:	enum elv_merge blk_try_merge(struct request *, struct bio *);
642:	int ll_back_merge_fn(struct request *, struct bio *, unsigned int);
784:	static struct request *attempt_merge(struct request_queue *, struct request *, struct request *);
954:	static enum bio_merge_status bio_attempt_back_merge(struct request *, struct bio *, unsigned int);
1004:	static enum bio_merge_status bio_attempt_discard_merge(struct request_queue *, struct request *, struct bio *);
978:	static enum bio_merge_status bio_attempt_front_merge(struct request *, struct bio *, unsigned int);
52:	static bool bio_will_gap(struct request_queue *, struct request *, struct bio *, struct bio *);
938:	static void blk_account_io_merge_bio(struct request *);
760:	static void blk_account_io_merge_request(struct request *);
1029:	static enum bio_merge_status blk_attempt_bio_merge(struct request_queue *, struct request *, struct bio *, unsigned int, bool);
697:	static int ll_merge_requests_fn(struct request_queue *, struct request *, struct request *);
679:	static bool req_attempt_discard_merge(struct request_queue *, struct request *, struct request *);

File block/blk-mq-cpumap.c:
84:	int blk_mq_hw_queue_to_node(struct blk_mq_queue_map *, unsigned int);
35:	void blk_mq_map_queues(struct blk_mq_queue_map *);

File block/blk-mq-debugfs.c:
306:	int __blk_mq_debugfs_rq_show(struct seq_file *, struct request *);
681:	void blk_mq_debugfs_register(struct request_queue *);
726:	void blk_mq_debugfs_register_hctx(struct request_queue *, struct blk_mq_hw_ctx *);
754:	void blk_mq_debugfs_register_hctxs(struct request_queue *);
824:	void blk_mq_debugfs_register_rqos(struct rq_qos *);
772:	void blk_mq_debugfs_register_sched(struct request_queue *);
844:	void blk_mq_debugfs_register_sched_hctx(struct request_queue *, struct blk_mq_hw_ctx *);
333:	int blk_mq_debugfs_rq_show(struct seq_file *, void *);
745:	void blk_mq_debugfs_unregister_hctx(struct blk_mq_hw_ctx *);
763:	void blk_mq_debugfs_unregister_hctxs(struct request_queue *);
814:	void blk_mq_debugfs_unregister_rqos(struct rq_qos *);
793:	void blk_mq_debugfs_unregister_sched(struct request_queue *);
868:	void blk_mq_debugfs_unregister_sched_hctx(struct blk_mq_hw_ctx *);
604:	static int blk_mq_debugfs_open(struct inode *, struct file *);
626:	static int blk_mq_debugfs_release(struct inode *, struct file *);
579:	static int blk_mq_debugfs_show(struct seq_file *, void *);
424:	static void blk_mq_debugfs_tags_show(struct seq_file *, struct blk_mq_tags *);
587:	static ssize_t blk_mq_debugfs_write(struct file *, const char *, size_t, loff_t *);
575:	static void *ctx_default_rq_list_next(struct seq_file *, void *, loff_t *);
575:	static void *ctx_default_rq_list_start(struct seq_file *, loff_t *);
575:	static void ctx_default_rq_list_stop(struct seq_file *, void *);
577:	static void *ctx_poll_rq_list_next(struct seq_file *, void *, loff_t *);
577:	static void *ctx_poll_rq_list_start(struct seq_file *, loff_t *);
577:	static void ctx_poll_rq_list_stop(struct seq_file *, void *);
576:	static void *ctx_read_rq_list_next(struct seq_file *, void *, loff_t *);
576:	static void *ctx_read_rq_list_start(struct seq_file *, loff_t *);
576:	static void ctx_read_rq_list_stop(struct seq_file *, void *);
526:	static int hctx_active_show(void *, struct seq_file *);
390:	static int hctx_busy_show(void *, struct seq_file *);
416:	static int hctx_ctx_map_show(void *, struct seq_file *);
534:	static int hctx_dispatch_busy_show(void *, struct seq_file *);
348:	static void *hctx_dispatch_next(struct seq_file *, void *, loff_t *);
339:	static void *hctx_dispatch_start(struct seq_file *, loff_t *);
355:	static void hctx_dispatch_stop(struct seq_file *, void *);
228:	static int hctx_flags_show(void *, struct seq_file *);
509:	static int hctx_run_show(void *, struct seq_file *);
517:	static ssize_t hctx_run_write(void *, const char *, size_t, loff_t *);
492:	static int hctx_sched_tags_bitmap_show(void *, struct seq_file *);
475:	static int hctx_sched_tags_show(void *, struct seq_file *);
380:	static bool hctx_show_busy_rq(struct request *, void *);
200:	static int hctx_state_show(void *, struct seq_file *);
458:	static int hctx_tags_bitmap_show(void *, struct seq_file *);
441:	static int hctx_tags_show(void *, struct seq_file *);
407:	static int hctx_type_show(void *, struct seq_file *);
99:	static int queue_pm_only_show(void *, struct seq_file *);
28:	static int queue_poll_stat_show(void *, struct seq_file *);
57:	static void *queue_requeue_list_next(struct seq_file *, void *, loff_t *);
48:	static void *queue_requeue_list_start(struct seq_file *, loff_t *);
64:	static void queue_requeue_list_stop(struct seq_file *, void *);
136:	static int queue_state_show(void *, struct seq_file *);
146:	static ssize_t queue_state_write(void *, const char *, size_t, loff_t *);

File block/blk-mq-debugfs.h:
89:	static int queue_zone_wlock_show(void *, struct seq_file *);

File block/blk-mq-sched.c:
34:	void __blk_mq_sched_restart(struct blk_mq_hw_ctx *);
642:	void blk_mq_exit_sched(struct request_queue *, struct elevator_queue *);
559:	int blk_mq_init_sched(struct request_queue *, struct elevator_type *);
345:	bool blk_mq_sched_bio_merge(struct request_queue *, struct bio *, unsigned int);
325:	void blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
625:	void blk_mq_sched_free_rqs(struct request_queue *);
408:	void blk_mq_sched_insert_request(struct request *, bool, bool, bool);
461:	void blk_mq_sched_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *, bool);
25:	void blk_mq_sched_mark_restart_hctx(struct blk_mq_hw_ctx *);
381:	bool blk_mq_sched_try_insert_merge(struct request_queue *, struct request *, struct list_head *);
273:	static int __blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
218:	static int blk_mq_do_dispatch_ctx(struct blk_mq_hw_ctx *);
181:	static int blk_mq_do_dispatch_sched(struct blk_mq_hw_ctx *);
50:	static int sched_rq_cmp(void *, const struct list_head *, const struct list_head *);

File block/blk-mq-sysfs.c:
213:	void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *);
218:	void blk_mq_sysfs_deinit(struct request_queue *);
230:	void blk_mq_sysfs_init(struct request_queue *);
245:	int blk_mq_sysfs_register(struct gendisk *);
315:	int blk_mq_sysfs_register_hctxs(struct request_queue *);
282:	void blk_mq_sysfs_unregister(struct gendisk *);
299:	void blk_mq_sysfs_unregister_hctxs(struct request_queue *);
26:	static void blk_mq_ctx_sysfs_release(struct kobject *);
107:	static ssize_t blk_mq_hw_sysfs_cpus_show(struct blk_mq_hw_ctx *, char *);
101:	static ssize_t blk_mq_hw_sysfs_nr_reserved_tags_show(struct blk_mq_hw_ctx *, char *);
95:	static ssize_t blk_mq_hw_sysfs_nr_tags_show(struct blk_mq_hw_ctx *, char *);
34:	static void blk_mq_hw_sysfs_release(struct kobject *);
52:	static ssize_t blk_mq_hw_sysfs_show(struct kobject *, struct attribute *, char *);
73:	static ssize_t blk_mq_hw_sysfs_store(struct kobject *, struct attribute *, const char *, size_t);
184:	static int blk_mq_register_hctx(struct blk_mq_hw_ctx *);
18:	static void blk_mq_sysfs_release(struct kobject *);

File block/blk-mq-tag.c:
40:	void __blk_mq_tag_busy(struct blk_mq_hw_ctx *);
75:	void __blk_mq_tag_idle(struct blk_mq_hw_ctx *);
410:	void blk_mq_all_tag_iter(struct blk_mq_tags *, busy_tag_iter_fn *, void *);
587:	void blk_mq_free_tags(struct blk_mq_tags *);
126:	unsigned int blk_mq_get_tag(struct blk_mq_alloc_data *);
111:	unsigned long blk_mq_get_tags(struct blk_mq_alloc_data *, int, unsigned int *);
539:	int blk_mq_init_bitmaps(struct sbitmap_queue *, struct sbitmap_queue *, unsigned int, unsigned int, int, int);
559:	struct blk_mq_tags *blk_mq_init_tags(unsigned int, unsigned int, int, int);
218:	void blk_mq_put_tag(struct blk_mq_tags *, struct blk_mq_ctx *, unsigned int);
231:	void blk_mq_put_tags(struct blk_mq_tags *, int *, int);
489:	void blk_mq_queue_tag_busy_iter(struct request_queue *, busy_tag_iter_fn *, void *);
646:	void blk_mq_tag_resize_shared_tags(struct blk_mq_tag_set *, unsigned int);
594:	int blk_mq_tag_update_depth(struct blk_mq_hw_ctx *, struct blk_mq_tags **, unsigned int, bool);
653:	void blk_mq_tag_update_sched_shared_tags(struct request_queue *);
64:	void blk_mq_tag_wakeup_all(struct blk_mq_tags *, bool);
429:	void blk_mq_tagset_busy_iter(struct blk_mq_tag_set *, busy_tag_iter_fn *, void *);
461:	void blk_mq_tagset_wait_completed_request(struct blk_mq_tag_set *);
671:	u32 blk_mq_unique_tag(struct request *);
98:	static int __blk_mq_get_tag(struct blk_mq_alloc_data *, struct sbitmap_queue *);
445:	static bool blk_mq_tagset_count_completed_rqs(struct request *, void *);
305:	static void bt_for_each(struct blk_mq_hw_ctx *, struct request_queue *, struct sbitmap_queue *, busy_tag_iter_fn *, void *, bool);
373:	static void bt_tags_for_each(struct blk_mq_tags *, struct sbitmap_queue *, busy_tag_iter_fn *, void *, unsigned int);

File block/blk-mq-virtio.c:
24:	void blk_mq_virtio_map_queues(struct blk_mq_queue_map *, struct virtio_device *, int);

File block/blk-mq.c:
4095:	struct gendisk *__blk_mq_alloc_disk(struct blk_mq_tag_set *, void *, struct lock_class_key *);
1036:	void __blk_mq_end_request(struct request *, blk_status_t);
1784:	bool __blk_mq_get_driver_tag(struct blk_mq_hw_ctx *, struct request *);
2493:	void __blk_mq_insert_request(struct blk_mq_hw_ctx *, struct request *, bool);
220:	void __blk_mq_unfreeze_queue(struct request_queue *, bool);
758:	void blk_dump_rq_flags(struct request *, char *);
1385:	blk_status_t blk_execute_rq(struct request *, bool);
1322:	void blk_execute_rq_nowait(struct request *, bool);
197:	void blk_freeze_queue(struct request_queue *);
164:	void blk_freeze_queue_start(struct request_queue *);
1484:	void blk_mq_add_to_requeue_list(struct request *, bool, bool);
4116:	struct gendisk *blk_mq_alloc_disk_for_queue(struct request_queue *, struct lock_class_key *);
3760:	struct blk_mq_tags *blk_mq_alloc_map_and_rqs(struct blk_mq_tag_set *, unsigned int, unsigned int);
603:	struct request *blk_mq_alloc_request(struct request_queue *, blk_opf_t, blk_mq_req_flags_t);
636:	struct request *blk_mq_alloc_request_hctx(struct request_queue *, blk_opf_t, blk_mq_req_flags_t, unsigned int);
4525:	int blk_mq_alloc_sq_tag_set(struct blk_mq_tag_set *, const struct blk_mq_ops *, unsigned int, unsigned int);
4424:	int blk_mq_alloc_tag_set(struct blk_mq_tag_set *);
4945:	void blk_mq_cancel_work_sync(struct request_queue *);
1233:	void blk_mq_complete_request(struct request *);
1200:	bool blk_mq_complete_request_remote(struct request *);
1515:	void blk_mq_delay_kick_requeue_list(struct request_queue *, unsigned long);
2266:	void blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, unsigned long);
2356:	void blk_mq_delay_run_hw_queues(struct request_queue *, unsigned long);
1745:	struct request *blk_mq_dequeue_from_ctx(struct blk_mq_hw_ctx *, struct blk_mq_ctx *);
4078:	void blk_mq_destroy_queue(struct request_queue *);
2007:	bool blk_mq_dispatch_rq_list(struct blk_mq_hw_ctx *, struct list_head *, unsigned int);
1051:	void blk_mq_end_request(struct request *, blk_status_t);
1077:	void blk_mq_end_request_batch(struct io_comp_batch *);
4281:	void blk_mq_exit_queue(struct request_queue *);
1709:	void blk_mq_flush_busy_ctxs(struct blk_mq_hw_ctx *, struct list_head *);
2761:	void blk_mq_flush_plug_list(struct blk_plug *, bool);
3795:	void blk_mq_free_map_and_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
750:	void blk_mq_free_plug_rqs(struct blk_plug *);
727:	void blk_mq_free_request(struct request *);
3266:	void blk_mq_free_rq_map(struct blk_mq_tags *);
3225:	void blk_mq_free_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
4540:	void blk_mq_free_tag_set(struct blk_mq_tag_set *);
210:	void blk_mq_freeze_queue(struct request_queue *);
178:	void blk_mq_freeze_queue_wait(struct request_queue *);
184:	int blk_mq_freeze_queue_wait_timeout(struct request_queue *, unsigned long);
144:	unsigned int blk_mq_in_flight(struct request_queue *, struct block_device *);
154:	void blk_mq_in_flight_rw(struct request_queue *, struct block_device *, unsigned int *);
4218:	int blk_mq_init_allocated_queue(struct blk_mq_tag_set *, struct request_queue *);
4062:	struct request_queue *blk_mq_init_queue(struct blk_mq_tag_set *);
2529:	void blk_mq_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *);
1509:	void blk_mq_kick_requeue_list(struct request_queue *);
4928:	int blk_mq_poll(struct request_queue *, blk_qc_t, struct io_comp_batch *, unsigned int);
1590:	void blk_mq_put_rq_ref(struct request *);
1540:	bool blk_mq_queue_inflight(struct request_queue *);
282:	void blk_mq_quiesce_queue(struct request_queue *);
244:	void blk_mq_quiesce_queue_nowait(struct request_queue *);
318:	void blk_mq_quiesce_tagset(struct blk_mq_tag_set *);
4021:	void blk_mq_release(struct request_queue *);
2513:	void blk_mq_request_bypass_insert(struct request *, bool, bool);
1436:	void blk_mq_requeue_request(struct request *, bool);
4939:	unsigned int blk_mq_rq_cpu(struct request *);
2281:	void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *, bool);
2328:	void blk_mq_run_hw_queues(struct request_queue *, bool);
2423:	void blk_mq_start_hw_queue(struct blk_mq_hw_ctx *);
2431:	void blk_mq_start_hw_queues(struct request_queue *);
1248:	void blk_mq_start_request(struct request *);
2441:	void blk_mq_start_stopped_hw_queue(struct blk_mq_hw_ctx *, bool);
2451:	void blk_mq_start_stopped_hw_queues(struct request_queue *, bool);
2396:	void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *);
2413:	void blk_mq_stop_hw_queues(struct request_queue *);
2948:	void blk_mq_submit_bio(struct bio *);
2804:	void blk_mq_try_issue_list_directly(struct blk_mq_hw_ctx *, struct list_head *);
234:	void blk_mq_unfreeze_queue(struct request_queue *);
298:	void blk_mq_unquiesce_queue(struct request_queue *);
332:	void blk_mq_unquiesce_tagset(struct blk_mq_tag_set *);
4762:	void blk_mq_update_nr_hw_queues(struct blk_mq_tag_set *, int);
4566:	int blk_mq_update_nr_requests(struct request_queue *, unsigned int);
264:	void blk_mq_wait_quiesce_done(struct blk_mq_tag_set *);
345:	void blk_mq_wake_waiters(struct request_queue *);
355:	void blk_rq_init(struct request_queue *, struct request *);
1355:	bool blk_rq_is_poll(struct request *);
3163:	void blk_steal_bios(struct bio_list *, struct request *);
891:	bool blk_update_request(struct request *, blk_status_t, unsigned int);
471:	static struct request *__blk_mq_alloc_requests(struct blk_mq_alloc_data *);
1145:	static void __blk_mq_complete_request_remote(void *);
2242:	static void __blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, bool, unsigned long);
1025:	static void __blk_mq_end_request_acct(struct request *, u64);
1421:	static void __blk_mq_requeue_request(struct request *);
2166:	static void __blk_mq_run_hw_queue(struct blk_mq_hw_ctx *);
2612:	static blk_status_t __blk_mq_try_issue_directly(struct blk_mq_hw_ctx *, struct request *, bool, bool);
797:	static void blk_account_io_completion(struct request *, unsigned int);
1287:	static void blk_add_rq_to_plug(struct blk_plug *, struct request *);
1134:	static void blk_done_softirq(struct softirq_action *);
1346:	static enum rq_end_io_ret blk_end_sync_rq(struct request *, blk_status_t);
4130:	static struct blk_mq_hw_ctx *blk_mq_alloc_and_init_hctx(struct blk_mq_tag_set *, struct request_queue *, int, int);
4328:	static int blk_mq_alloc_set_map_and_rqs(struct blk_mq_tag_set *);
1600:	static bool blk_mq_check_expired(struct request *, void *);
132:	static bool blk_mq_check_inflight(struct request *, void *);
1798:	static int blk_mq_dispatch_wake(wait_queue_entry_t *, unsigned int, int, void *);
3588:	static void blk_mq_exit_hctx(struct request_queue *, struct blk_mq_tag_set *, struct blk_mq_hw_ctx *, unsigned int);
1061:	static void blk_mq_flush_tag_batch(struct blk_mq_hw_ctx *, int *, int);
1618:	static bool blk_mq_handle_expired(struct request *, void *);
3437:	static bool blk_mq_has_request(struct request *, void *);
3517:	static int blk_mq_hctx_notify_dead(unsigned int, struct hlist_node *);
3469:	static int blk_mq_hctx_notify_offline(unsigned int, struct hlist_node *);
3502:	static int blk_mq_hctx_notify_online(unsigned int, struct hlist_node *);
4956:	static int blk_mq_init(void);
3814:	static void blk_mq_map_swqueue(struct request_queue *);
2684:	static void blk_mq_plug_issue_direct(struct blk_plug *, bool);
52:	static int blk_mq_poll_stats_bkt(const struct request *);
4791:	static void blk_mq_poll_stats_fn(struct blk_stat_callback *);
4164:	static void blk_mq_realloc_hw_ctxs(struct blk_mq_tag_set *, struct request_queue *);
1447:	static void blk_mq_requeue_work(struct work_struct *);
372:	static struct request *blk_mq_rq_ctx_init(struct blk_mq_alloc_data *, struct blk_mq_tags *, unsigned int, u64);
1523:	static bool blk_mq_rq_inflight(struct request *, void *);
2461:	static void blk_mq_run_work_fn(struct work_struct *);
1627:	static void blk_mq_timeout_work(struct work_struct *);
2667:	static void blk_mq_try_issue_directly(struct blk_mq_hw_ctx *, struct request *);
4358:	static void blk_mq_update_queue_map(struct blk_mq_tag_set *);
3936:	static void blk_mq_update_tag_set_shared(struct blk_mq_tag_set *, bool);
808:	static void blk_print_req_error(struct request *, blk_status_t);
1139:	static int blk_softirq_cpu_dead(unsigned int);

File block/blk-rq-qos.c:
26:	void __rq_qos_cleanup(struct rq_qos *, struct bio *);
35:	void __rq_qos_done(struct rq_qos *, struct request *);
89:	void __rq_qos_done_bio(struct rq_qos *, struct bio *);
44:	void __rq_qos_issue(struct rq_qos *, struct request *);
80:	void __rq_qos_merge(struct rq_qos *, struct request *, struct bio *);
98:	void __rq_qos_queue_depth_changed(struct rq_qos *);
53:	void __rq_qos_requeue(struct rq_qos *, struct request *);
62:	void __rq_qos_throttle(struct rq_qos *, struct bio *);
71:	void __rq_qos_track(struct rq_qos *, struct request *, struct bio *);
110:	bool rq_depth_calc_max_depth(struct rq_depth *);
177:	bool rq_depth_scale_down(struct rq_depth *, bool);
158:	bool rq_depth_scale_up(struct rq_depth *);
289:	void rq_qos_exit(struct request_queue *);
243:	void rq_qos_wait(struct rq_wait *, void *, acquire_inflight_cb_t *, cleanup_cb_t *);
21:	bool rq_wait_inc_below(struct rq_wait *, unsigned int);
206:	static int rq_qos_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File block/blk-settings.c:
955:	int bdev_alignment_offset(struct block_device *);
968:	unsigned int bdev_discard_alignment(struct block_device *);
410:	void blk_limits_io_min(struct queue_limits *, unsigned int);
455:	void blk_limits_io_opt(struct queue_limits *, unsigned int);
377:	void blk_queue_alignment_offset(struct request_queue *, unsigned int);
97:	void blk_queue_bounce_limit(struct request_queue *, enum blk_bounce);
863:	bool blk_queue_can_use_dma_map_merging(struct request_queue *, struct device *);
161:	void blk_queue_chunk_sectors(struct request_queue *, unsigned int);
775:	void blk_queue_dma_alignment(struct request_queue *, int);
436:	void blk_queue_io_min(struct request_queue *, unsigned int);
474:	void blk_queue_io_opt(struct request_queue *, unsigned int);
303:	void blk_queue_logical_block_size(struct request_queue *, unsigned int);
172:	void blk_queue_max_discard_sectors(struct request_queue *, unsigned int);
262:	void blk_queue_max_discard_segments(struct request_queue *, unsigned short);
122:	void blk_queue_max_hw_sectors(struct request_queue *, unsigned int);
185:	void blk_queue_max_secure_erase_sectors(struct request_queue *, unsigned int);
278:	void blk_queue_max_segment_size(struct request_queue *, unsigned int);
241:	void blk_queue_max_segments(struct request_queue *, unsigned short);
198:	void blk_queue_max_write_zeroes_sectors(struct request_queue *, unsigned int);
210:	void blk_queue_max_zone_append_sectors(struct request_queue *, unsigned int);
332:	void blk_queue_physical_block_size(struct request_queue *, unsigned int);
849:	void blk_queue_required_elevator_features(struct request_queue *, unsigned int);
21:	void blk_queue_rq_timeout(struct request_queue *, unsigned int);
733:	void blk_queue_segment_boundary(struct request_queue *, unsigned long);
795:	void blk_queue_update_dma_alignment(struct request_queue *, int);
721:	void blk_queue_update_dma_pad(struct request_queue *, unsigned int);
750:	void blk_queue_virt_boundary(struct request_queue *, unsigned long);
825:	void blk_queue_write_cache(struct request_queue *, bool, bool);
353:	void blk_queue_zone_write_granularity(struct request_queue *, unsigned int);
34:	void blk_set_default_limits(struct queue_limits *);
810:	void blk_set_queue_depth(struct request_queue *, unsigned int);
71:	void blk_set_stacking_limits(struct queue_limits *);
547:	int blk_stack_limits(struct queue_limits *, struct queue_limits *, sector_t);
909:	void disk_set_zoned(struct gendisk *, enum blk_zoned_model);
697:	void disk_stack_limits(struct gendisk *, struct block_device *, sector_t);
385:	void disk_update_readahead(struct gendisk *);

File block/blk-stat.c:
209:	struct blk_queue_stats *blk_alloc_queue_stats(void);
224:	void blk_free_queue_stats(struct blk_queue_stats *);
43:	void blk_rq_stat_add(struct blk_rq_stat *, u64);
21:	void blk_rq_stat_init(struct blk_rq_stat *);
29:	void blk_rq_stat_sum(struct blk_rq_stat *, struct blk_rq_stat *);
51:	void blk_stat_add(struct request *, u64);
136:	void blk_stat_add_callback(struct request_queue *, struct blk_stat_callback *);
103:	struct blk_stat_callback *blk_stat_alloc_callback(void (*)(struct blk_stat_callback *), int (*)(const struct request *), unsigned int, void *);
187:	void blk_stat_disable_accounting(struct request_queue *);
198:	void blk_stat_enable_accounting(struct request_queue *);
181:	void blk_stat_free_callback(struct blk_stat_callback *);
157:	void blk_stat_remove_callback(struct request_queue *, struct blk_stat_callback *);
234:	bool blk_stats_alloc_enable(struct request_queue *);
171:	static void blk_stat_free_callback_rcu(struct callback_head *);
80:	static void blk_stat_timer_fn(struct timer_list *);

File block/blk-sysfs.c:
781:	int blk_register_queue(struct gendisk *);
866:	void blk_unregister_queue(struct gendisk *);
753:	static void blk_queue_release(struct kobject *);
710:	static ssize_t queue_attr_show(struct kobject *, struct attribute *, char *);
726:	static ssize_t queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
683:	static umode_t queue_attr_visible(struct kobject *, struct attribute *, int);
154:	static ssize_t queue_chunk_sectors_show(struct request_queue *, char *);
558:	static ssize_t queue_dax_show(struct request_queue *, char *);
169:	static ssize_t queue_discard_granularity_show(struct request_queue *, char *);
174:	static ssize_t queue_discard_max_hw_show(struct request_queue *, char *);
181:	static ssize_t queue_discard_max_show(struct request_queue *, char *);
187:	static ssize_t queue_discard_max_store(struct request_queue *, const char *, size_t);
210:	static ssize_t queue_discard_zeroes_data_show(struct request_queue *, char *);
277:	static ssize_t queue_dma_alignment_show(struct request_queue *, char *);
553:	static ssize_t queue_fua_show(struct request_queue *, char *);
159:	static ssize_t queue_io_min_show(struct request_queue *, char *);
164:	static ssize_t queue_io_opt_show(struct request_queue *, char *);
448:	static ssize_t queue_io_timeout_show(struct request_queue *, char *);
453:	static ssize_t queue_io_timeout_store(struct request_queue *, const char *, size_t);
310:	static ssize_t queue_iostats_show(struct request_queue *, char *);
310:	static ssize_t queue_iostats_store(struct request_queue *, const char *, size_t);
144:	static ssize_t queue_logical_block_size_show(struct request_queue *, char *);
336:	static ssize_t queue_max_active_zones_show(struct request_queue *, char *);
128:	static ssize_t queue_max_discard_segments_show(struct request_queue *, char *);
265:	static ssize_t queue_max_hw_sectors_show(struct request_queue *, char *);
134:	static ssize_t queue_max_integrity_segments_show(struct request_queue *, char *);
331:	static ssize_t queue_max_open_zones_show(struct request_queue *, char *);
116:	static ssize_t queue_max_sectors_show(struct request_queue *, char *);
240:	static ssize_t queue_max_sectors_store(struct request_queue *, const char *, size_t);
139:	static ssize_t queue_max_segment_size_show(struct request_queue *, char *);
123:	static ssize_t queue_max_segments_show(struct request_queue *, char *);
341:	static ssize_t queue_nomerges_show(struct request_queue *, char *);
347:	static ssize_t queue_nomerges_store(struct request_queue *, const char *, size_t);
308:	static ssize_t queue_nonrot_show(struct request_queue *, char *);
308:	static ssize_t queue_nonrot_store(struct request_queue *, const char *, size_t);
326:	static ssize_t queue_nr_zones_show(struct request_queue *, char *);
149:	static ssize_t queue_physical_block_size_show(struct request_queue *, char *);
399:	static ssize_t queue_poll_delay_show(struct request_queue *, char *);
411:	static ssize_t queue_poll_delay_store(struct request_queue *, const char *, size_t);
433:	static ssize_t queue_poll_show(struct request_queue *, char *);
438:	static ssize_t queue_poll_store(struct request_queue *, const char *, size_t);
91:	static ssize_t queue_ra_show(struct request_queue *, char *);
102:	static ssize_t queue_ra_store(struct request_queue *, const char *, size_t);
309:	static ssize_t queue_random_show(struct request_queue *, char *);
309:	static ssize_t queue_random_store(struct request_queue *, const char *, size_t);
63:	static ssize_t queue_requests_show(struct request_queue *, char *);
69:	static ssize_t queue_requests_store(struct request_queue *, const char *, size_t);
366:	static ssize_t queue_rq_affinity_show(struct request_queue *, char *);
375:	static ssize_t queue_rq_affinity_store(struct request_queue *, const char *, size_t);
311:	static ssize_t queue_stable_writes_show(struct request_queue *, char *);
311:	static ssize_t queue_stable_writes_store(struct request_queue *, const char *, size_t);
272:	static ssize_t queue_virt_boundary_mask_show(struct request_queue *, char *);
468:	static ssize_t queue_wb_lat_show(struct request_queue *, char *);
479:	static ssize_t queue_wb_lat_store(struct request_queue *, const char *, size_t);
523:	static ssize_t queue_wc_show(struct request_queue *, char *);
531:	static ssize_t queue_wc_store(struct request_queue *, const char *, size_t);
215:	static ssize_t queue_write_same_max_show(struct request_queue *, char *);
220:	static ssize_t queue_write_zeroes_max_show(struct request_queue *, char *);
232:	static ssize_t queue_zone_append_max_show(struct request_queue *, char *);
226:	static ssize_t queue_zone_write_granularity_show(struct request_queue *, char *);
314:	static ssize_t queue_zoned_show(struct request_queue *, char *);

File block/blk-timeout.c:
79:	void blk_abort_request(struct request *);
128:	void blk_add_timer(struct request *);
109:	unsigned long blk_rq_timeout(unsigned long);
93:	static int blk_timeout_init(void);

File block/blk.h:
41:	static bool blk_try_enter_queue(struct request_queue *, bool);

File block/bsg-lib.c:
189:	void bsg_job_done(struct bsg_job *, int, unsigned int);
175:	int bsg_job_get(struct bsg_job *);
169:	void bsg_job_put(struct bsg_job *);
320:	void bsg_remove_queue(struct request_queue *);
361:	struct request_queue *bsg_setup_queue(struct device *, const char *, bsg_job_fn *, bsg_timeout_fn *, int);
205:	static void bsg_complete(struct request *);
312:	static void bsg_exit_rq(struct blk_mq_tag_set *, struct request *, unsigned int);
301:	static int bsg_init_rq(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
272:	static blk_status_t bsg_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
335:	static enum blk_eh_timer_return bsg_timeout(struct request *);
28:	static int bsg_transport_sg_io_fn(struct request_queue *, struct sg_io_v4 *, fmode_t, unsigned int);

File block/bsg.c:
187:	struct bsg_device *bsg_register_queue(struct request_queue *, struct device *, const char *, bsg_sg_io_fn *);
176:	void bsg_unregister_queue(struct bsg_device *);
168:	static void bsg_device_release(struct device *);
238:	static char *bsg_devnode(const struct device *, umode_t *);
243:	static int bsg_init(void);
102:	static long bsg_ioctl(struct file *, unsigned int, unsigned long);
72:	static int bsg_open(struct inode *, struct file *);
79:	static int bsg_release(struct inode *, struct file *);

File block/disk-events.c:
275:	bool bdev_check_media_change(struct block_device *);
472:	void disk_add_events(struct gendisk *);
447:	int disk_alloc_events(struct gendisk *);
73:	void disk_block_events(struct gendisk *);
488:	void disk_del_events(struct gendisk *);
151:	void disk_flush_events(struct gendisk *, unsigned int);
303:	bool disk_force_media_change(struct gendisk *, unsigned int);
499:	void disk_release_events(struct gendisk *);
133:	void disk_unblock_events(struct gendisk *);
98:	static void __disk_unblock_events(struct gendisk *, bool);
184:	static void disk_check_events(struct disk_events *, unsigned int *);
366:	static ssize_t disk_events_async_show(struct device *, struct device_attribute *, char *);
372:	static ssize_t disk_events_poll_msecs_show(struct device *, struct device_attribute *, char *);
383:	static ssize_t disk_events_poll_msecs_store(struct device *, struct device_attribute *, const char *, size_t);
416:	static int disk_events_set_dfl_poll_msecs(const char *, const struct kernel_param *);
356:	static ssize_t disk_events_show(struct device *, struct device_attribute *, char *);
322:	static void disk_events_workfn(struct work_struct *);

File block/elevator.c:
131:	struct elevator_queue *elevator_alloc(struct request_queue *, struct elevator_type *);
694:	void elevator_disable(struct request_queue *);
159:	void elevator_exit(struct request_queue *);
609:	void elevator_init_mq(struct request_queue *);
657:	int elevator_switch(struct request_queue *, struct elevator_type *);
332:	bool elv_attempt_insert_merge(struct request_queue *, struct request *, struct list_head *);
74:	bool elv_bio_merge_ok(struct request *, struct bio *);
406:	struct request *elv_former_request(struct request_queue *, struct request *);
761:	ssize_t elv_iosched_show(struct request_queue *, char *);
745:	ssize_t elv_iosched_store(struct request_queue *, const char *, size_t);
396:	struct request *elv_latter_request(struct request_queue *, struct request *);
276:	enum elv_merge elv_merge(struct request_queue *, struct request **, struct bio *);
384:	void elv_merge_requests(struct request_queue *, struct request *, struct request *);
370:	void elv_merged_request(struct request_queue *, struct request *, enum elv_merge);
227:	void elv_rb_add(struct rb_root *, struct request *);
248:	void elv_rb_del(struct rb_root *, struct request *);
256:	struct request *elv_rb_find(struct rb_root *, sector_t);
790:	struct request *elv_rb_former_request(struct request_queue *, struct request *);
802:	struct request *elv_rb_latter_request(struct request_queue *, struct request *);
500:	int elv_register(struct elevator_type *);
463:	int elv_register_queue(struct request_queue *, bool);
186:	void elv_rqhash_add(struct request_queue *, struct request *);
179:	void elv_rqhash_del(struct request_queue *, struct request *);
202:	struct request *elv_rqhash_find(struct request_queue *, sector_t);
196:	void elv_rqhash_reposition(struct request_queue *, struct request *);
536:	void elv_unregister(struct elevator_type *);
488:	void elv_unregister_queue(struct request_queue *);
150:	static void elevator_release(struct kobject *);
814:	static int elevator_setup(char *);
419:	static ssize_t elv_attr_show(struct kobject *, struct attribute *, char *);
436:	static ssize_t elv_attr_store(struct kobject *, struct attribute *, const char *, size_t);

File block/fops.c:
170:	static ssize_t __blkdev_direct_IO(struct kiocb *, struct iov_iter *, unsigned int);
130:	static void blkdev_bio_end_io(struct bio *);
269:	static void blkdev_bio_end_io_async(struct bio *);
488:	static int blkdev_close(struct inode *, struct file *);
358:	static ssize_t blkdev_direct_IO(struct kiocb *, struct iov_iter *);
603:	static long blkdev_fallocate(struct file *, int, loff_t, loff_t);
436:	static int blkdev_fsync(struct file *, loff_t, loff_t, int);
26:	static int blkdev_get_block(struct inode *, sector_t, struct buffer_head *, int);
684:	static int blkdev_init(void);
425:	static loff_t blkdev_llseek(struct file *, loff_t, int);
458:	static int blkdev_open(struct inode *, struct file *);
379:	static int blkdev_read_folio(struct file *, struct folio *);
542:	static ssize_t blkdev_read_iter(struct kiocb *, struct iov_iter *);
384:	static void blkdev_readahead(struct readahead_control *);
389:	static int blkdev_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
395:	static int blkdev_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
503:	static ssize_t blkdev_write_iter(struct kiocb *, struct iov_iter *);
374:	static int blkdev_writepage(struct page *, struct writeback_control *);

File block/genhd.c:
1359:	struct gendisk *__alloc_disk_node(struct request_queue *, int, struct lock_class_key *);
1418:	struct gendisk *__blk_alloc_disk(int, struct lock_class_key *);
218:	int __register_blkdev(unsigned int, const char *, void (*)(dev_t));
311:	int blk_alloc_ext_minor(void);
321:	void blk_free_ext_minor(unsigned int);
1330:	dev_t blk_lookup_devt(const char *, int);
559:	void blk_mark_disk_dead(struct gendisk *);
725:	void blk_request_module(dev_t);
180:	void blkdev_show(struct seq_file *, off_t);
590:	void del_gendisk(struct gendisk *);
390:	int device_add_disk(struct device *, struct gendisk *, const struct attribute_group **);
359:	int disk_scan_partitions(struct gendisk *, fmode_t, void *);
338:	void disk_uevent(struct gendisk *, enum kobject_action);
1489:	void inc_diskseq(struct gendisk *);
689:	void invalidate_disk(struct gendisk *);
1316:	dev_t part_devt(struct gendisk *, u8);
1001:	ssize_t part_inflight_show(struct device *, struct device_attribute *, char *);
946:	ssize_t part_size_show(struct device *, struct device_attribute *, char *);
952:	ssize_t part_stat_show(struct device *, struct device_attribute *, char *);
751:	void printk_all_partitions(void);
1450:	void put_disk(struct gendisk *);
58:	void set_capacity(struct gendisk *, sector_t);
73:	bool set_capacity_and_notify(struct gendisk *, sector_t);
1476:	void set_disk_ro(struct gendisk *, bool);
287:	void unregister_blkdev(unsigned int, const char *);
1204:	static char *block_devnode(struct device *, umode_t *, kuid_t *, kgid_t *);
1192:	static int block_uevent(const struct device *, struct kobj_uevent_env *);
1024:	static ssize_t disk_alignment_offset_show(struct device *, struct device_attribute *, char *);
700:	static ssize_t disk_badblocks_show(struct device *, struct device_attribute *, char *);
712:	static ssize_t disk_badblocks_store(struct device *, struct device_attribute *, const char *, size_t);
1016:	static ssize_t disk_capability_show(struct device *, struct device_attribute *, char *);
1033:	static ssize_t disk_discard_alignment_show(struct device *, struct device_attribute *, char *);
911:	static ssize_t disk_ext_range_show(struct device *, struct device_attribute *, char *);
929:	static ssize_t disk_hidden_show(struct device *, struct device_attribute *, char *);
903:	static ssize_t disk_range_show(struct device *, struct device_attribute *, char *);
1155:	static void disk_release(struct device *);
920:	static ssize_t disk_removable_show(struct device *, struct device_attribute *, char *);
938:	static ssize_t disk_ro_show(struct device *, struct device_attribute *, char *);
820:	static void *disk_seqf_next(struct seq_file *, void *, loff_t *);
799:	static void *disk_seqf_start(struct seq_file *, loff_t *);
832:	static void disk_seqf_stop(struct seq_file *, void *);
1118:	static umode_t disk_visible(struct kobject *, struct attribute *, int);
1042:	static ssize_t diskseq_show(struct device *, struct device_attribute *, char *);
1229:	static int diskstats_show(struct seq_file *, void *);
883:	static int genhd_device_init(void);
104:	static void part_stat_read_all(struct block_device *, struct disk_stats *);
1307:	static int proc_genhd_init(void);
854:	static int show_partition(struct seq_file *, void *);
844:	static void *show_partition_start(struct seq_file *, loff_t *);

File block/ioctl.c:
560:	long blkdev_ioctl(struct file *, unsigned int, unsigned long);
311:	static int blkdev_pr_preempt(struct block_device *, struct pr_preempt *, bool);

File block/ioprio.c:
209:	long __arm64_sys_ioprio_get(const struct pt_regs *);
68:	long __arm64_sys_ioprio_set(const struct pt_regs *);
148:	int __get_task_ioprio(struct task_struct *);
33:	int ioprio_check_cap(int);

File block/kyber-iosched.c:
228:	static int calculate_percentile(struct kyber_queue_data *, unsigned int, unsigned int, unsigned int);
961:	static int kyber_async_depth_show(void *, struct seq_file *);
979:	static int kyber_batching_show(void *, struct seq_file *);
569:	static bool kyber_bio_merge(struct request_queue *, struct bio *, unsigned int);
640:	static void kyber_completed_request(struct request *, u64);
970:	static int kyber_cur_domain_show(void *, struct seq_file *);
455:	static void kyber_depth_updated(struct blk_mq_hw_ctx *);
957:	static void *kyber_discard_rqs_next(struct seq_file *, void *, loff_t *);
957:	static void *kyber_discard_rqs_start(struct seq_file *, loff_t *);
957:	static void kyber_discard_rqs_stop(struct seq_file *, void *);
957:	static int kyber_discard_tokens_show(void *, struct seq_file *);
957:	static int kyber_discard_waiting_show(void *, struct seq_file *);
755:	static struct request *kyber_dispatch_cur_domain(struct kyber_queue_data *, struct kyber_hctx_data *, struct blk_mq_hw_ctx *);
804:	static struct request *kyber_dispatch_request(struct blk_mq_hw_ctx *);
696:	static int kyber_domain_wake(wait_queue_entry_t *, unsigned int, int, void *);
1046:	static void kyber_exit(void);
521:	static void kyber_exit_hctx(struct blk_mq_hw_ctx *, unsigned int);
432:	static void kyber_exit_sched(struct elevator_queue *);
615:	static void kyber_finish_request(struct request *);
707:	static int kyber_get_domain_token(struct kyber_queue_data *, struct kyber_hctx_data *, struct blk_mq_hw_ctx *);
850:	static bool kyber_has_work(struct blk_mq_hw_ctx *);
1041:	static int kyber_init(void);
466:	static int kyber_init_hctx(struct blk_mq_hw_ctx *, unsigned int);
407:	static int kyber_init_sched(struct request_queue *, struct elevator_type *);
592:	static void kyber_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
556:	static void kyber_limit_depth(blk_opf_t, struct blk_mq_alloc_data *);
958:	static void *kyber_other_rqs_next(struct seq_file *, void *, loff_t *);
958:	static void *kyber_other_rqs_start(struct seq_file *, loff_t *);
958:	static void kyber_other_rqs_stop(struct seq_file *, void *);
958:	static int kyber_other_tokens_show(void *, struct seq_file *);
958:	static int kyber_other_waiting_show(void *, struct seq_file *);
587:	static void kyber_prepare_request(struct request *);
888:	static ssize_t kyber_read_lat_show(struct elevator_queue *, char *);
888:	static ssize_t kyber_read_lat_store(struct elevator_queue *, const char *, size_t);
955:	static void *kyber_read_rqs_next(struct seq_file *, void *, loff_t *);
955:	static void *kyber_read_rqs_start(struct seq_file *, loff_t *);
955:	static void kyber_read_rqs_stop(struct seq_file *, void *);
955:	static int kyber_read_tokens_show(void *, struct seq_file *);
955:	static int kyber_read_waiting_show(void *, struct seq_file *);
279:	static void kyber_timer_fn(struct timer_list *);
889:	static ssize_t kyber_write_lat_show(struct elevator_queue *, char *);
889:	static ssize_t kyber_write_lat_store(struct elevator_queue *, const char *, size_t);
956:	static void *kyber_write_rqs_next(struct seq_file *, void *, loff_t *);
956:	static void *kyber_write_rqs_start(struct seq_file *, loff_t *);
956:	static void kyber_write_rqs_stop(struct seq_file *, void *);
956:	static int kyber_write_tokens_show(void *, struct seq_file *);
956:	static int kyber_write_waiting_show(void *, struct seq_file *);

File block/mq-deadline.c:
423:	static struct request *__dd_dispatch_request(struct deadline_data *, struct dd_per_prio *, unsigned long);
1072:	static int dd_async_depth_show(void *, struct seq_file *);
750:	static bool dd_bio_merge(struct request_queue *, struct bio *, unsigned int);
620:	static void dd_depth_updated(struct blk_mq_hw_ctx *);
572:	static struct request *dd_dispatch_request(struct blk_mq_hw_ctx *);
638:	static void dd_exit_sched(struct elevator_queue *);
878:	static void dd_finish_request(struct request *);
915:	static bool dd_has_work(struct blk_mq_hw_ctx *);
632:	static int dd_init_hctx(struct blk_mq_hw_ctx *, unsigned int);
667:	static int dd_init_sched(struct request_queue *, struct elevator_type *);
827:	static void dd_insert_requests(struct blk_mq_hw_ctx *, struct list_head *, bool);
604:	static void dd_limit_depth(blk_opf_t, struct blk_mq_alloc_data *);
220:	static void dd_merged_requests(struct request_queue *, struct request *, struct request *);
1109:	static int dd_owned_by_driver_show(void *, struct seq_file *);
845:	static void dd_prepare_request(struct request *);
1081:	static int dd_queued_show(void *, struct seq_file *);
718:	static int dd_request_merge(struct request_queue *, struct request **, struct bio *);
200:	static void dd_request_merged(struct request_queue *, struct request *, enum elv_merge);
943:	static ssize_t deadline_async_depth_show(struct elevator_queue *, char *);
973:	static ssize_t deadline_async_depth_store(struct elevator_queue *, const char *, size_t);
1054:	static int deadline_batching_show(void *, struct seq_file *);
1165:	static void *deadline_dispatch0_next(struct seq_file *, void *, loff_t *);
1165:	static void *deadline_dispatch0_start(struct seq_file *, loff_t *);
1165:	static void deadline_dispatch0_stop(struct seq_file *, void *);
1166:	static void *deadline_dispatch1_next(struct seq_file *, void *, loff_t *);
1166:	static void *deadline_dispatch1_start(struct seq_file *, loff_t *);
1166:	static void deadline_dispatch1_stop(struct seq_file *, void *);
1167:	static void *deadline_dispatch2_next(struct seq_file *, void *, loff_t *);
1167:	static void *deadline_dispatch2_start(struct seq_file *, loff_t *);
1167:	static void deadline_dispatch2_stop(struct seq_file *, void *);
1237:	static void deadline_exit(void);
944:	static ssize_t deadline_fifo_batch_show(struct elevator_queue *, char *);
974:	static ssize_t deadline_fifo_batch_store(struct elevator_queue *, const char *, size_t);
942:	static ssize_t deadline_front_merges_show(struct elevator_queue *, char *);
972:	static ssize_t deadline_front_merges_store(struct elevator_queue *, const char *, size_t);
1232:	static int deadline_init(void);
940:	static ssize_t deadline_prio_aging_expire_show(struct elevator_queue *, char *);
970:	static ssize_t deadline_prio_aging_expire_store(struct elevator_queue *, const char *, size_t);
1046:	static void *deadline_read0_fifo_next(struct seq_file *, void *, loff_t *);
1046:	static void *deadline_read0_fifo_start(struct seq_file *, loff_t *);
1046:	static void deadline_read0_fifo_stop(struct seq_file *, void *);
1046:	static int deadline_read0_next_rq_show(void *, struct seq_file *);
1048:	static void *deadline_read1_fifo_next(struct seq_file *, void *, loff_t *);
1048:	static void *deadline_read1_fifo_start(struct seq_file *, loff_t *);
1048:	static void deadline_read1_fifo_stop(struct seq_file *, void *);
1048:	static int deadline_read1_next_rq_show(void *, struct seq_file *);
1050:	static void *deadline_read2_fifo_next(struct seq_file *, void *, loff_t *);
1050:	static void *deadline_read2_fifo_start(struct seq_file *, loff_t *);
1050:	static void deadline_read2_fifo_stop(struct seq_file *, void *);
1050:	static int deadline_read2_next_rq_show(void *, struct seq_file *);
938:	static ssize_t deadline_read_expire_show(struct elevator_queue *, char *);
968:	static ssize_t deadline_read_expire_store(struct elevator_queue *, const char *, size_t);
1063:	static int deadline_starved_show(void *, struct seq_file *);
1047:	static void *deadline_write0_fifo_next(struct seq_file *, void *, loff_t *);
1047:	static void *deadline_write0_fifo_start(struct seq_file *, loff_t *);
1047:	static void deadline_write0_fifo_stop(struct seq_file *, void *);
1047:	static int deadline_write0_next_rq_show(void *, struct seq_file *);
1049:	static void *deadline_write1_fifo_next(struct seq_file *, void *, loff_t *);
1049:	static void *deadline_write1_fifo_start(struct seq_file *, loff_t *);
1049:	static void deadline_write1_fifo_stop(struct seq_file *, void *);
1049:	static int deadline_write1_next_rq_show(void *, struct seq_file *);
1051:	static void *deadline_write2_fifo_next(struct seq_file *, void *, loff_t *);
1051:	static void *deadline_write2_fifo_start(struct seq_file *, loff_t *);
1051:	static void deadline_write2_fifo_stop(struct seq_file *, void *);
1051:	static int deadline_write2_next_rq_show(void *, struct seq_file *);
939:	static ssize_t deadline_write_expire_show(struct elevator_queue *, char *);
969:	static ssize_t deadline_write_expire_store(struct elevator_queue *, const char *, size_t);
941:	static ssize_t deadline_writes_starved_show(struct elevator_queue *, char *);
971:	static ssize_t deadline_writes_starved_store(struct elevator_queue *, const char *, size_t);

File block/partitions/check.h:
31:	static void put_dev_sector(Sector);

File block/partitions/core.c:
444:	int bdev_add_partition(struct gendisk *, int, sector_t, sector_t);
469:	int bdev_del_partition(struct gendisk *, int);
655:	int bdev_disk_changed(struct gendisk *, bool);
490:	int bdev_resize_partition(struct gendisk *, int, sector_t, sector_t);
530:	void blk_drop_partitions(struct gendisk *);
707:	void *read_part_sector(struct parsed_partitions *, sector_t, Sector *);
305:	static struct block_device *add_partition(struct gendisk *, int, sector_t, sector_t, int, struct partition_meta_info *);
274:	static void delete_partition(struct block_device *);
517:	static bool disk_unlock_native_capacity(struct gendisk *);
199:	static ssize_t part_alignment_offset_show(struct device *, struct device_attribute *, char *);
205:	static ssize_t part_discard_alignment_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t part_partition_show(struct device *, struct device_attribute *, char *);
251:	static void part_release(struct device *);
193:	static ssize_t part_ro_show(struct device *, struct device_attribute *, char *);
187:	static ssize_t part_start_show(struct device *, struct device_attribute *, char *);
257:	static int part_uevent(struct device *, struct kobj_uevent_env *);
294:	static ssize_t whole_disk_show(struct device *, struct device_attribute *, char *);

File block/partitions/efi.c:
713:	int efi_partition(struct parsed_partitions *);
271:	static gpt_entry *alloc_read_gpt_entries(struct parsed_partitions *, gpt_header *);
99:	static int force_gpt_fn(char *);
335:	static int is_gpt_valid(struct parsed_partitions *, u64, gpt_header **, gpt_entry **);
235:	static size_t read_lba(struct parsed_partitions *, u64, u8 *, size_t);

File block/partitions/msdos.c:
581:	int msdos_partition(struct parsed_partitions *);
409:	static void parse_freebsd(struct parsed_partitions *, sector_t, sector_t, int);
529:	static void parse_minix(struct parsed_partitions *, sector_t, sector_t, int);
417:	static void parse_netbsd(struct parsed_partitions *, sector_t, sector_t, int);
425:	static void parse_openbsd(struct parsed_partitions *, sector_t, sector_t, int);
250:	static void parse_solaris_x86(struct parsed_partitions *, sector_t, sector_t, int);
483:	static void parse_unixware(struct parsed_partitions *, sector_t, sector_t, int);

File certs/system_keyring.c:
178:	int load_module_cert(struct key *);
41:	int restrict_link_by_builtin_trusted(struct key *, const struct key_type *, const union key_payload *, struct key *);
224:	int verify_pkcs7_message_sig(const void *, size_t, struct pkcs7_message *, struct key *, enum key_being_used_for, int (*)(void *, const void *, size_t, size_t), void *);
309:	int verify_pkcs7_signature(const void *, size_t, const void *, size_t, struct key *, enum key_being_used_for, int (*)(void *, const void *, size_t, size_t), void *);
192:	static int load_system_certificate_list(void);
139:	static int system_trusted_keyring_init(void);

File crypto/acompress.c:
120:	struct acomp_req *acomp_request_alloc(struct crypto_acomp *);
133:	void acomp_request_free(struct acomp_req *);
105:	struct crypto_acomp *crypto_alloc_acomp(const char *, u32, u32);
112:	struct crypto_acomp *crypto_alloc_acomp_node(const char *, u32, u32, int);
150:	int crypto_register_acomp(struct acomp_alg *);
168:	int crypto_register_acomps(struct acomp_alg *, int);
162:	void crypto_unregister_acomp(struct acomp_alg *);
188:	void crypto_unregister_acomps(struct acomp_alg *, int);
52:	static void crypto_acomp_exit_tfm(struct crypto_tfm *);
82:	static unsigned int crypto_acomp_extsize(struct crypto_alg *);
60:	static int crypto_acomp_init_tfm(struct crypto_tfm *);
27:	static int crypto_acomp_report(struct sk_buff *, struct crypto_alg *);
47:	static void crypto_acomp_show(struct seq_file *, struct crypto_alg *);

File crypto/aead.c:
286:	int aead_register_instance(struct crypto_template *, struct aead_instance *);
100:	int crypto_aead_decrypt(struct aead_request *);
83:	int crypto_aead_encrypt(struct aead_request *);
64:	int crypto_aead_setauthsize(struct crypto_aead *, unsigned int);
43:	int crypto_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
214:	struct crypto_aead *crypto_alloc_aead(const char *, u32, u32);
205:	int crypto_grab_aead(struct crypto_aead_spawn *, struct crypto_instance *, const char *, u32, u32);
238:	int crypto_register_aead(struct aead_alg *);
257:	int crypto_register_aeads(struct aead_alg *, int);
251:	void crypto_unregister_aead(struct aead_alg *);
277:	void crypto_unregister_aeads(struct aead_alg *, int);
119:	static void crypto_aead_exit_tfm(struct crypto_tfm *);
184:	static void crypto_aead_free_instance(struct crypto_instance *);
127:	static int crypto_aead_init_tfm(struct crypto_tfm *);
146:	static int crypto_aead_report(struct sk_buff *, struct crypto_alg *);
171:	static void crypto_aead_show(struct seq_file *, struct crypto_alg *);

File crypto/aes_generic.c:
1136:	int crypto_aes_set_key(struct crypto_tfm *, const u8 *, unsigned int);
1309:	static void aes_fini(void);
1304:	static int aes_init(void);
1246:	static void crypto_aes_decrypt(struct crypto_tfm *, u8 *, const u8 *);
1176:	static void crypto_aes_encrypt(struct crypto_tfm *, u8 *, const u8 *);

File crypto/af_alg.c:
407:	int af_alg_accept(struct sock *, struct socket *, bool);
1250:	struct af_alg_async_req *af_alg_alloc_areq(struct sock *, unsigned int);
1199:	void af_alg_async_cb(struct crypto_async_request *, int);
668:	unsigned int af_alg_count_tsgl(struct sock *, size_t, size_t);
1178:	void af_alg_free_resources(struct af_alg_async_req *);
572:	void af_alg_free_sg(struct af_alg_sgl *);
1281:	int af_alg_get_rsgl(struct sock *, struct msghdr *, int, struct af_alg_async_req *, size_t, size_t *);
534:	int af_alg_make_sg(struct af_alg_sgl *, struct iov_iter *, int);
1222:	__poll_t af_alg_poll(struct file *, struct socket *, poll_table *);
724:	void af_alg_pull_tsgl(struct sock *, size_t, struct scatterlist *, size_t);
62:	int af_alg_register_type(const struct af_alg_type *);
122:	int af_alg_release(struct socket *);
132:	void af_alg_release_parent(struct sock *);
960:	int af_alg_sendmsg(struct socket *, struct msghdr *, size_t, unsigned int);
1121:	ssize_t af_alg_sendpage(struct socket *, struct page *, int, size_t, int);
92:	int af_alg_unregister_type(const struct af_alg_type *);
886:	int af_alg_wait_for_data(struct sock *, unsigned int, unsigned int);
860:	void af_alg_wmem_wakeup(struct sock *);
925:	static void af_alg_data_wakeup(struct sock *);
1353:	static void af_alg_exit(void);
1334:	static int af_alg_init(void);
829:	static int af_alg_wait_for_wmem(struct sock *, unsigned int);
468:	static int alg_accept(struct socket *, struct socket *, int, bool);
148:	static int alg_bind(struct socket *, struct sockaddr *, int);
502:	static int alg_create(struct net *, struct socket *, int, int);
43:	static const struct af_alg_type *alg_get_type(const char *);
208:	static int alg_setkey(struct sock *, sockptr_t, unsigned int);
286:	static int alg_setkey_by_key_serial(struct alg_sock *, sockptr_t, unsigned int);
354:	static int alg_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
495:	static void alg_sock_destruct(struct sock *);

File crypto/ahash.c:
632:	int ahash_register_instance(struct crypto_template *, struct ahash_instance *);
368:	int crypto_ahash_digest(struct ahash_request *);
340:	int crypto_ahash_final(struct ahash_request *);
354:	int crypto_ahash_finup(struct ahash_request *);
172:	int crypto_ahash_setkey(struct crypto_ahash *, const u8 *, unsigned int);
555:	struct crypto_ahash *crypto_alloc_ahash(const char *, u32, u32);
546:	int crypto_grab_ahash(struct crypto_ahash_spawn *, struct crypto_instance *, const char *, u32, u32);
562:	int crypto_has_ahash(const char *, u32, u32);
648:	bool crypto_hash_alg_has_setkey(struct hash_alg_common *);
79:	int crypto_hash_walk_done(struct crypto_hash_walk *, int);
119:	int crypto_hash_walk_first(struct ahash_request *, struct crypto_hash_walk *);
584:	int crypto_register_ahash(struct ahash_alg *);
603:	int crypto_register_ahashes(struct ahash_alg *, int);
597:	void crypto_unregister_ahash(struct ahash_alg *);
623:	void crypto_unregister_ahashes(struct ahash_alg *, int);
431:	static int ahash_def_finup(struct ahash_request *);
413:	static void ahash_def_finup_done1(struct crypto_async_request *, int);
385:	static void ahash_def_finup_done2(struct crypto_async_request *, int);
157:	static int ahash_nosetkey(struct crypto_ahash *, const u8 *, unsigned int);
285:	static void ahash_op_unaligned_done(struct crypto_async_request *, int);
447:	static void crypto_ahash_exit_tfm(struct crypto_tfm *);
484:	static unsigned int crypto_ahash_extsize(struct crypto_alg *);
492:	static void crypto_ahash_free_instance(struct crypto_instance *);
455:	static int crypto_ahash_init_tfm(struct crypto_tfm *);
328:	static int crypto_ahash_op(struct ahash_request *, int (*)(struct ahash_request *));
500:	static int crypto_ahash_report(struct sk_buff *, struct crypto_alg *);
522:	static void crypto_ahash_show(struct seq_file *, struct crypto_alg *);

File crypto/akcipher.c:
155:	int akcipher_register_instance(struct crypto_template *, struct akcipher_instance *);
102:	struct crypto_akcipher *crypto_alloc_akcipher(const char *, u32, u32);
93:	int crypto_grab_akcipher(struct crypto_akcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
129:	int crypto_register_akcipher(struct akcipher_alg *);
149:	void crypto_unregister_akcipher(struct akcipher_alg *);
118:	static int akcipher_default_op(struct akcipher_request *);
123:	static int akcipher_default_set_key(struct crypto_akcipher *, const void *, unsigned int);
50:	static void crypto_akcipher_exit_tfm(struct crypto_tfm *);
72:	static void crypto_akcipher_free_instance(struct crypto_instance *);
58:	static int crypto_akcipher_init_tfm(struct crypto_tfm *);
24:	static int crypto_akcipher_report(struct sk_buff *, struct crypto_alg *);
45:	static void crypto_akcipher_show(struct seq_file *, struct crypto_alg *);

File crypto/algapi.c:
1019:	unsigned int crypto_alg_extsize(struct crypto_alg *);
362:	void crypto_alg_tested(const char *, int);
896:	const char *crypto_attr_alg_name(struct rtattr *);
880:	int crypto_check_attr_type(struct rtattr **, u32, u32 *);
969:	struct crypto_async_request *crypto_dequeue_request(struct crypto_queue *);
747:	void crypto_drop_spawn(struct crypto_spawn *);
938:	int crypto_enqueue_request(struct crypto_queue *, struct crypto_async_request *);
961:	void crypto_enqueue_request_head(struct crypto_queue *, struct crypto_async_request *);
846:	struct crypto_attr_type *crypto_get_attr_type(struct rtattr **);
711:	int crypto_grab_spawn(struct crypto_spawn *, struct crypto_instance *, const char *, u32, u32);
1001:	void crypto_inc(u8 *, unsigned int);
929:	void crypto_init_queue(struct crypto_queue *, unsigned int);
914:	int crypto_inst_setname(struct crypto_instance *, const char *, struct crypto_alg *);
630:	struct crypto_template *crypto_lookup_template(const char *);
442:	int crypto_register_alg(struct crypto_alg *);
504:	int crypto_register_algs(struct crypto_alg *, int);
637:	int crypto_register_instance(struct crypto_template *, struct crypto_instance *);
834:	int crypto_register_notifier(struct notifier_block *);
533:	int crypto_register_template(struct crypto_template *);
555:	int crypto_register_templates(struct crypto_template *, int);
430:	void crypto_remove_final(struct list_head *);
145:	void crypto_remove_spawns(struct crypto_alg *, struct list_head *, struct crypto_alg *);
787:	struct crypto_tfm *crypto_spawn_tfm(struct crypto_spawn *, u32, u32);
813:	void *crypto_spawn_tfm2(struct crypto_spawn *);
1026:	int crypto_type_has_alg(const char *, const struct crypto_type *, u32, u32);
484:	void crypto_unregister_alg(struct crypto_alg *);
524:	void crypto_unregister_algs(struct crypto_alg *, int);
696:	void crypto_unregister_instance(struct crypto_instance *);
840:	int crypto_unregister_notifier(struct notifier_block *);
573:	void crypto_unregister_template(struct crypto_template *);
602:	void crypto_unregister_templates(struct crypto_template *, int);
305:	static struct crypto_larval *__crypto_register_alg(struct crypto_alg *, struct list_head *);
225:	static void crypto_alg_finish_registration(struct crypto_alg *, bool, struct list_head *);
1302:	static void crypto_algapi_exit(void);
1295:	static int crypto_algapi_init(void);
77:	static void crypto_destroy_instance(struct crypto_alg *);
762:	static struct crypto_alg *crypto_spawn_alg(struct crypto_spawn *);

File crypto/algboss.c:
245:	static void cryptomgr_exit(void);
240:	static int cryptomgr_init(void);
221:	static int cryptomgr_notify(struct notifier_block *, unsigned long, void *);
50:	static int cryptomgr_probe(void *);

File crypto/algif_rng.c:
242:	static int rng_accept_parent(void *, struct sock *);
202:	static void *rng_bind(const char *, u32, u32);
335:	static void rng_exit(void);
330:	static int rng_init(void);
107:	static int rng_recvmsg(struct socket *, struct msghdr *, size_t, int);
221:	static void rng_release(void *);
277:	static int rng_setkey(void *, const u8 *, unsigned int);
232:	static void rng_sock_destruct(struct sock *);

File crypto/ansi_cprng.c:
81:	static int _get_more_prng_bytes(struct prng_context *, int);
344:	static void cprng_exit(struct crypto_tfm *);
349:	static int cprng_get_random(struct crypto_rng *, const u8 *, unsigned int, u8 *, unsigned int);
320:	static int cprng_init(struct crypto_tfm *);
364:	static int cprng_reset(struct crypto_rng *, const u8 *, unsigned int);
460:	static void prng_mod_fini(void);
455:	static int prng_mod_init(void);

File crypto/api.c:
398:	struct crypto_tfm *__crypto_alloc_tfm(struct crypto_alg *, u32, u32);
315:	struct crypto_alg *crypto_alg_mod_lookup(const char *, u32, u32);
456:	struct crypto_tfm *crypto_alloc_base(const char *, u32, u32);
571:	void *crypto_alloc_tfm_node(const char *, const struct crypto_type *, u32, u32, int);
490:	void *crypto_create_tfm_node(struct crypto_alg *, const struct crypto_type *, int);
615:	void crypto_destroy_tfm(void *, struct crypto_tfm *);
533:	struct crypto_alg *crypto_find_alg(const char *, const struct crypto_type *, u32, u32);
632:	int crypto_has_alg(const char *, u32, u32);
106:	struct crypto_larval *crypto_larval_alloc(const char *, u32, u32);
155:	void crypto_larval_kill(struct crypto_alg *);
41:	struct crypto_alg *crypto_mod_get(struct crypto_alg *);
47:	void crypto_mod_put(struct crypto_alg *);
301:	int crypto_probing_notify(unsigned long, void *);
646:	void crypto_req_done(struct crypto_async_request *, int);
390:	void crypto_shoot_alg(struct crypto_alg *);
167:	void crypto_wait_for_test(struct crypto_larval *);
56:	static struct crypto_alg *__crypto_alg_lookup(const char *, u32, u32);
234:	static struct crypto_alg *crypto_alg_lookup(const char *, u32, u32);
96:	static void crypto_larval_destroy(struct crypto_alg *);
202:	static struct crypto_alg *crypto_larval_wait(struct crypto_alg *);

File crypto/asymmetric_keys/asymmetric_type.c:
223:	int __asymmetric_key_hex_to_key_id(const char *, struct asymmetric_key_id *, size_t);
571:	int asymmetric_key_eds_op(struct kernel_pkey_params *, const void *, void *);
148:	struct asymmetric_key_id *asymmetric_key_generate_id(const void *, size_t, const void *, size_t);
235:	struct asymmetric_key_id *asymmetric_key_hex_to_key_id(const char *);
188:	bool asymmetric_key_id_partial(const struct asymmetric_key_id *, const struct asymmetric_key_id *);
171:	bool asymmetric_key_id_same(const struct asymmetric_key_id *, const struct asymmetric_key_id *);
52:	struct key *find_asymmetric_key(struct key *, const struct asymmetric_key_id *, const struct asymmetric_key_id *, const struct asymmetric_key_id *, bool);
630:	int register_asymmetric_key_parser(struct asymmetric_key_parser *);
661:	void unregister_asymmetric_key_parser(struct asymmetric_key_parser *);
679:	static void asymmetric_key_cleanup(void);
262:	static bool asymmetric_key_cmp(const struct key *, const struct key_match_data *);
288:	static bool asymmetric_key_cmp_name(const struct key *, const struct key_match_data *);
275:	static bool asymmetric_key_cmp_partial(const struct key *, const struct key_match_data *);
363:	static void asymmetric_key_describe(const struct key *, struct seq_file *);
467:	static void asymmetric_key_destroy(struct key *);
448:	static void asymmetric_key_free_preparse(struct key_preparsed_payload *);
674:	static int asymmetric_key_init(void);
355:	static void asymmetric_key_match_free(struct key_match_data *);
311:	static int asymmetric_key_match_preparse(struct key_match_data *);
402:	static int asymmetric_key_preparse(struct key_preparsed_payload *);
595:	static int asymmetric_key_verify_signature(struct kernel_pkey_params *, const void *, const void *);
507:	static struct key_restriction *asymmetric_lookup_restriction(const char *);

File crypto/asymmetric_keys/pkcs7_parser.c:
308:	int pkcs7_check_content_type(void *, size_t, unsigned char, const void *, size_t);
402:	int pkcs7_extract_cert(void *, size_t, unsigned char, const void *, size_t);
57:	void pkcs7_free_message(struct pkcs7_message *);
185:	int pkcs7_get_content_data(const struct pkcs7_message *, const void **, size_t *, size_t *);
204:	int pkcs7_note_OID(void *, size_t, unsigned char, const void *, size_t);
442:	int pkcs7_note_certificate_list(void *, size_t, unsigned char, const void *, size_t);
460:	int pkcs7_note_content(void *, size_t, unsigned char, const void *, size_t);
480:	int pkcs7_note_data(void *, size_t, unsigned char, const void *, size_t);
667:	int pkcs7_note_signed_info(void *, size_t, unsigned char, const void *, size_t);
325:	int pkcs7_note_signeddata_version(void *, size_t, unsigned char, const void *, size_t);
359:	int pkcs7_note_signerinfo_version(void *, size_t, unsigned char, const void *, size_t);
115:	struct pkcs7_message *pkcs7_parse_message(const void *, size_t);
497:	int pkcs7_sig_note_authenticated_attr(void *, size_t, unsigned char, const void *, size_t);
223:	int pkcs7_sig_note_digest_algo(void *, size_t, unsigned char, const void *, size_t);
621:	int pkcs7_sig_note_issuer(void *, size_t, unsigned char, const void *, size_t);
270:	int pkcs7_sig_note_pkey_algo(void *, size_t, unsigned char, const void *, size_t);
608:	int pkcs7_sig_note_serial(void *, size_t, unsigned char, const void *, size_t);
580:	int pkcs7_sig_note_set_of_authattrs(void *, size_t, unsigned char, const void *, size_t);
650:	int pkcs7_sig_note_signature(void *, size_t, unsigned char, const void *, size_t);
634:	int pkcs7_sig_note_skid(void *, size_t, unsigned char, const void *, size_t);

File crypto/asymmetric_keys/pkcs7_trust.c:
158:	int pkcs7_validate_trust(struct pkcs7_message *, struct key *);

File crypto/asymmetric_keys/pkcs7_verify.c:
125:	int pkcs7_get_digest(struct pkcs7_message *, const u8 **, u32 *, enum hash_algo *);
477:	int pkcs7_supply_detached_data(struct pkcs7_message *, const void *, size_t);
394:	int pkcs7_verify(struct pkcs7_message *, enum key_being_used_for);
22:	static int pkcs7_digest(struct pkcs7_message *, struct pkcs7_signed_info *);

File crypto/asymmetric_keys/public_key.c:
43:	void public_key_free(struct public_key *);
357:	int public_key_verify_signature(const struct public_key *, const struct public_key_signature *);
31:	static void public_key_describe(const struct key *, struct seq_file *);
56:	static void public_key_destroy(void *, void *);
451:	static int public_key_verify_signature_2(const struct key *, const struct public_key_signature *);
68:	static int software_key_determine_akcipher(const struct public_key *, const char *, const char *, char *);
211:	static int software_key_eds_op(struct kernel_pkey_params *, const void *, void *);
151:	static int software_key_query(const struct kernel_pkey_params *, struct kernel_pkey_query *);

File crypto/asymmetric_keys/restrict.c:
240:	int restrict_link_by_key_or_keyring(struct key *, const struct key_type *, const union key_payload *, struct key *);
268:	int restrict_link_by_key_or_keyring_chain(struct key *, const struct key_type *, const union key_payload *, struct key *);
70:	int restrict_link_by_signature(struct key *, const struct key_type *, const union key_payload *, struct key *);
24:	static int ca_keys_setup(char *);
118:	static int key_or_keyring_common(struct key *, const struct key_type *, const union key_payload *, struct key *, bool);
111:	static bool match_either_id(const struct asymmetric_key_id **, const struct asymmetric_key_id *);

File crypto/asymmetric_keys/signature.c:
122:	int create_signature(struct kernel_pkey_params *, const void *, void *);
101:	int decrypt_blob(struct kernel_pkey_params *, const void *, void *);
80:	int encrypt_blob(struct kernel_pkey_params *, const void *, void *);
23:	void public_key_signature_free(struct public_key_signature *);
42:	int query_asymmetric_key(const struct kernel_pkey_params *, struct kernel_pkey_query *);
137:	int verify_signature(const struct key *, const struct public_key_signature *);

File crypto/asymmetric_keys/x509_cert_parser.c:
706:	int x509_akid_note_kid(void *, size_t, unsigned char, const void *, size_t);
729:	int x509_akid_note_name(void *, size_t, unsigned char, const void *, size_t);
745:	int x509_akid_note_serial(void *, size_t, unsigned char, const void *, size_t);
61:	struct x509_certificate *x509_cert_parse(const void *, size_t);
610:	int x509_decode_time(time64_t *, size_t, unsigned char, const unsigned char *, size_t);
495:	int x509_extract_key_data(void *, size_t, unsigned char, const void *, size_t);
337:	int x509_extract_name_segment(void *, size_t, unsigned char, const void *, size_t);
44:	void x509_free_certificate(struct x509_certificate *);
153:	int x509_note_OID(void *, size_t, unsigned char, const void *, size_t);
441:	int x509_note_issuer(void *, size_t, unsigned char, const void *, size_t);
695:	int x509_note_not_after(void *, size_t, unsigned char, const void *, size_t);
687:	int x509_note_not_before(void *, size_t, unsigned char, const void *, size_t);
474:	int x509_note_params(void *, size_t, unsigned char, const void *, size_t);
324:	int x509_note_serial(void *, size_t, unsigned char, const void *, size_t);
190:	int x509_note_sig_algo(void *, size_t, unsigned char, const void *, size_t);
285:	int x509_note_signature(void *, size_t, unsigned char, const void *, size_t);
461:	int x509_note_subject(void *, size_t, unsigned char, const void *, size_t);
173:	int x509_note_tbs_certificate(void *, size_t, unsigned char, const void *, size_t);
553:	int x509_process_extension(void *, size_t, unsigned char, const void *, size_t);
366:	static int x509_fabricate_name(struct x509_parse_context *, size_t, unsigned char, char **, size_t);

File crypto/asymmetric_keys/x509_loader.c:
7:	int x509_load_certificate_list(const u8 *, const unsigned long, const struct key *);

File crypto/asymmetric_keys/x509_public_key.c:
93:	int x509_check_for_self_signed(struct x509_certificate *);
23:	int x509_get_sig_params(struct x509_certificate *);
258:	static void x509_key_exit(void);
248:	static int x509_key_init(void);
144:	static int x509_key_preparse(struct key_preparsed_payload *);

File crypto/authenc.c:
46:	int crypto_authenc_extractkeys(struct crypto_authenc_keys *, const u8 *, unsigned int);
112:	static void authenc_geniv_ahash_done(struct crypto_async_request *, int);
264:	static void authenc_verify_ahash_done(struct crypto_async_request *, int);
372:	static int crypto_authenc_create(struct crypto_template *, struct rtattr **);
278:	static int crypto_authenc_decrypt(struct aead_request *);
229:	static int crypto_authenc_decrypt_tail(struct aead_request *, unsigned int);
192:	static int crypto_authenc_encrypt(struct aead_request *);
163:	static void crypto_authenc_encrypt_done(struct crypto_async_request *, int);
354:	static void crypto_authenc_exit_tfm(struct crypto_aead *);
363:	static void crypto_authenc_free(struct aead_instance *);
307:	static int crypto_authenc_init_tfm(struct crypto_aead *);
459:	static void crypto_authenc_module_exit(void);
454:	static int crypto_authenc_module_init(void);
84:	static int crypto_authenc_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/authencesn.c:
110:	static void authenc_esn_geniv_ahash_done(struct crypto_async_request *, int);
261:	static void authenc_esn_verify_ahash_done(struct crypto_async_request *, int);
390:	static int crypto_authenc_esn_create(struct crypto_template *, struct rtattr **);
270:	static int crypto_authenc_esn_decrypt(struct aead_request *);
219:	static int crypto_authenc_esn_decrypt_tail(struct aead_request *, unsigned int);
181:	static int crypto_authenc_esn_encrypt(struct aead_request *);
156:	static void crypto_authenc_esn_encrypt_done(struct crypto_async_request *, int);
372:	static void crypto_authenc_esn_exit_tfm(struct crypto_aead *);
381:	static void crypto_authenc_esn_free(struct aead_instance *);
119:	static int crypto_authenc_esn_genicv(struct aead_request *, unsigned int);
322:	static int crypto_authenc_esn_init_tfm(struct crypto_aead *);
474:	static void crypto_authenc_esn_module_exit(void);
469:	static int crypto_authenc_esn_module_init(void);
49:	static int crypto_authenc_esn_setauthsize(struct crypto_aead *, unsigned int);
58:	static int crypto_authenc_esn_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/blake2b_generic.c:
114:	void blake2b_compress_generic(struct blake2b_state *, const u8 *, size_t, u32);
169:	static void blake2b_mod_fini(void);
164:	static int blake2b_mod_init(void);
131:	static int crypto_blake2b_final_generic(struct shash_desc *, u8 *);
125:	static int crypto_blake2b_update_generic(struct shash_desc *, const u8 *, unsigned int);

File crypto/cbc.c:
174:	static int crypto_cbc_create(struct crypto_template *, struct rtattr **);
155:	static int crypto_cbc_decrypt(struct skcipher_request *);
73:	static int crypto_cbc_encrypt(struct skcipher_request *);
213:	static void crypto_cbc_module_exit(void);
208:	static int crypto_cbc_module_init(void);

File crypto/ccm.c:
863:	static int cbcmac_create(struct crypto_template *, struct rtattr **);
857:	static void cbcmac_exit_tfm(struct crypto_tfm *);
841:	static int cbcmac_init_tfm(struct crypto_tfm *);
825:	static int crypto_cbcmac_digest_final(struct shash_desc *, u8 *);
786:	static int crypto_cbcmac_digest_init(struct shash_desc *);
778:	static int crypto_cbcmac_digest_setkey(struct crypto_shash *, const u8 *, unsigned int);
798:	static int crypto_cbcmac_digest_update(struct shash_desc *, const u8 *, unsigned int);
168:	static int crypto_ccm_auth(struct aead_request *, struct scatterlist *, unsigned int);
552:	static int crypto_ccm_base_create(struct crypto_template *, struct rtattr **);
531:	static int crypto_ccm_create(struct crypto_template *, struct rtattr **);
446:	static int crypto_ccm_create_common(struct crypto_template *, struct rtattr **, const char *, const char *);
345:	static int crypto_ccm_decrypt(struct aead_request *);
323:	static void crypto_ccm_decrypt_done(struct crypto_async_request *, int);
285:	static int crypto_ccm_encrypt(struct aead_request *);
227:	static void crypto_ccm_encrypt_done(struct crypto_async_request *, int);
429:	static void crypto_ccm_exit_tfm(struct crypto_aead *);
437:	static void crypto_ccm_free(struct aead_instance *);
250:	static int crypto_ccm_init_crypt(struct aead_request *, u8 *);
393:	static int crypto_ccm_init_tfm(struct crypto_aead *);
943:	static void crypto_ccm_module_exit(void);
937:	static int crypto_ccm_module_init(void);
108:	static int crypto_ccm_setauthsize(struct crypto_aead *, unsigned int);
87:	static int crypto_ccm_setkey(struct crypto_aead *, const u8 *, unsigned int);
706:	static int crypto_rfc4309_create(struct crypto_template *, struct rtattr **);
604:	static struct aead_request *crypto_rfc4309_crypt(struct aead_request *);
658:	static int crypto_rfc4309_decrypt(struct aead_request *);
648:	static int crypto_rfc4309_encrypt(struct aead_request *);
693:	static void crypto_rfc4309_exit_tfm(struct crypto_aead *);
700:	static void crypto_rfc4309_free(struct aead_instance *);
668:	static int crypto_rfc4309_init_tfm(struct crypto_aead *);
587:	static int crypto_rfc4309_setauthsize(struct crypto_aead *, unsigned int);
569:	static int crypto_rfc4309_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/cipher.c:
87:	void crypto_cipher_decrypt_one(struct crypto_cipher *, u8 *, const u8 *);
80:	void crypto_cipher_encrypt_one(struct crypto_cipher *, u8 *, const u8 *);
43:	int crypto_cipher_setkey(struct crypto_cipher *, const u8 *, unsigned int);

File crypto/cmac.c:
223:	static int cmac_create(struct crypto_template *, struct rtattr **);
217:	static void cmac_exit_tfm(struct crypto_tfm *);
201:	static int cmac_init_tfm(struct crypto_tfm *);
165:	static int crypto_cmac_digest_final(struct shash_desc *, u8 *);
105:	static int crypto_cmac_digest_init(struct shash_desc *);
50:	static int crypto_cmac_digest_setkey(struct crypto_shash *, const u8 *, unsigned int);
118:	static int crypto_cmac_digest_update(struct shash_desc *, const u8 *, unsigned int);
306:	static void crypto_cmac_module_exit(void);
301:	static int crypto_cmac_module_init(void);

File crypto/compress.c:
12:	int crypto_comp_compress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);
23:	int crypto_comp_decompress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);

File crypto/crc32c_generic.c:
114:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
92:	static int chksum_final(struct shash_desc *, u8 *);
106:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
57:	static int chksum_init(struct shash_desc *);
72:	static int chksum_setkey(struct crypto_shash *, const u8 *, unsigned int);
83:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
122:	static int crc32c_cra_init(struct crypto_tfm *);
156:	static void crc32c_mod_fini(void);
151:	static int crc32c_mod_init(void);

File crypto/crc64_rocksoft_generic.c:
50:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
27:	static int chksum_final(struct shash_desc *, u8 *);
42:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
8:	static int chksum_init(struct shash_desc *);
17:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
78:	static void crc64_rocksoft_exit(void);
73:	static int crc64_rocksoft_init(void);

File crypto/crct10dif_common.c:
70:	__u16 crc_t10dif_generic(__u16, const unsigned char *, size_t);

File crypto/crct10dif_generic.c:
82:	static int chksum_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
60:	static int chksum_final(struct shash_desc *, u8 *);
74:	static int chksum_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	static int chksum_init(struct shash_desc *);
51:	static int chksum_update(struct shash_desc *, const u8 *, unsigned int);
110:	static void crct10dif_mod_fini(void);
105:	static int crct10dif_mod_init(void);

File crypto/crypto_engine.c:
567:	struct crypto_engine *crypto_engine_alloc_init(struct device *, bool);
509:	struct crypto_engine *crypto_engine_alloc_init_and_set(struct device *, bool, int (*)(struct crypto_engine *), bool, int);
580:	int crypto_engine_exit(struct crypto_engine *);
433:	int crypto_engine_start(struct crypto_engine *);
459:	int crypto_engine_stop(struct crypto_engine *);
365:	void crypto_finalize_aead_request(struct crypto_engine *, struct aead_request *, int);
379:	void crypto_finalize_akcipher_request(struct crypto_engine *, struct akcipher_request *, int);
393:	void crypto_finalize_hash_request(struct crypto_engine *, struct ahash_request *, int);
406:	void crypto_finalize_kpp_request(struct crypto_engine *, struct kpp_request *, int);
420:	void crypto_finalize_skcipher_request(struct crypto_engine *, struct skcipher_request *, int);
299:	int crypto_transfer_aead_request_to_engine(struct crypto_engine *, struct aead_request *);
312:	int crypto_transfer_akcipher_request_to_engine(struct crypto_engine *, struct akcipher_request *);
325:	int crypto_transfer_hash_request_to_engine(struct crypto_engine *, struct ahash_request *);
338:	int crypto_transfer_kpp_request_to_engine(struct crypto_engine *, struct kpp_request *);
351:	int crypto_transfer_skcipher_request_to_engine(struct crypto_engine *, struct skcipher_request *);
25:	static void crypto_finalize_request(struct crypto_engine *, struct crypto_async_request *, int);
244:	static void crypto_pump_work(struct kthread_work *);

File crypto/crypto_null.c:
153:	struct crypto_sync_skcipher *crypto_get_default_null_skcipher(void);
177:	void crypto_put_default_null_skcipher(void);
214:	static void crypto_null_mod_fini(void);
188:	static int crypto_null_mod_init(void);
27:	static int null_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
71:	static void null_crypt(struct crypto_tfm *, u8 *, const u8 *);
53:	static int null_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
48:	static int null_final(struct shash_desc *, u8 *);
59:	static int null_hash_setkey(struct crypto_shash *, const u8 *, unsigned int);
37:	static int null_init(struct shash_desc *);
67:	static int null_setkey(struct crypto_tfm *, const u8 *, unsigned int);
76:	static int null_skcipher_crypt(struct skcipher_request *);
63:	static int null_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
42:	static int null_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/ctr.c:
127:	static int crypto_ctr_create(struct crypto_template *, struct rtattr **);
99:	static int crypto_ctr_crypt(struct skcipher_request *);
349:	static void crypto_ctr_module_exit(void);
343:	static int crypto_ctr_module_init(void);
257:	static int crypto_rfc3686_create(struct crypto_template *, struct rtattr **);
190:	static int crypto_rfc3686_crypt(struct skcipher_request *);
242:	static void crypto_rfc3686_exit_tfm(struct crypto_skcipher *);
249:	static void crypto_rfc3686_free(struct skcipher_instance *);
218:	static int crypto_rfc3686_init_tfm(struct crypto_skcipher *);
169:	static int crypto_rfc3686_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File crypto/curve25519-generic.c:
24:	static int curve25519_compute_value(struct kpp_request *);
80:	static void curve25519_exit(void);
75:	static int curve25519_init(void);
57:	static unsigned int curve25519_max_size(struct crypto_kpp *);
9:	static int curve25519_set_secret(struct crypto_kpp *, const void *, unsigned int);

File crypto/deflate.c:
108:	static int __deflate_init(void *, int);
140:	static void *deflate_alloc_ctx(struct crypto_scomp *);
205:	static int deflate_compress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
261:	static int deflate_decompress(struct crypto_tfm *, const u8 *, unsigned int, u8 *, unsigned int *);
169:	static void deflate_exit(struct crypto_tfm *);
163:	static void deflate_free_ctx(struct crypto_scomp *, void *);
150:	static int deflate_init(struct crypto_tfm *);
328:	static void deflate_mod_fini(void);
311:	static int deflate_mod_init(void);
213:	static int deflate_scompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
269:	static int deflate_sdecompress(struct crypto_scomp *, const u8 *, unsigned int, u8 *, unsigned int *, void *);
145:	static void *zlib_deflate_alloc_ctx(struct crypto_scomp *);

File crypto/des_generic.c:
77:	static void crypto_des3_ede_decrypt(struct crypto_tfm *, u8 *, const u8 *);
69:	static void crypto_des3_ede_encrypt(struct crypto_tfm *, u8 *, const u8 *);
44:	static void crypto_des_decrypt(struct crypto_tfm *, u8 *, const u8 *);
37:	static void crypto_des_encrypt(struct crypto_tfm *, u8 *, const u8 *);
51:	static int des3_ede_setkey(struct crypto_tfm *, const u8 *, unsigned int);
120:	static void des_generic_mod_fini(void);
115:	static int des_generic_mod_init(void);
19:	static int des_setkey(struct crypto_tfm *, const u8 *, unsigned int);

File crypto/dh.c:
166:	static int dh_compute_value(struct kpp_request *);
916:	static void dh_exit(void);
257:	static void dh_exit_tfm(struct crypto_kpp *);
898:	static int dh_init(void);
250:	static unsigned int dh_max_size(struct crypto_kpp *);
71:	static int dh_set_secret(struct crypto_kpp *, const void *, unsigned int);

File crypto/dh_helper.c:
66:	int __crypto_dh_decode_key(const char *, unsigned int, struct dh *);
94:	int crypto_dh_decode_key(const char *, unsigned int, struct dh *);
40:	int crypto_dh_encode_key(char *, unsigned int, const struct dh *);
34:	unsigned int crypto_dh_key_len(const struct dh *);

File crypto/drbg.c:
2143:	static void drbg_exit(void);
2073:	static void drbg_fill_array(struct rng_alg *, const struct drbg_core *, int);
1704:	static int drbg_fini_hash_kernel(struct drbg_state *);
707:	static int drbg_hmac_generate(struct drbg_state *, unsigned char *, unsigned int, struct list_head *);
655:	static int drbg_hmac_update(struct drbg_state *, struct list_head *, int);
2110:	static int drbg_init(void);
1679:	static int drbg_init_hash_kernel(struct drbg_state *);
1934:	static void drbg_kcapi_cleanup(struct crypto_tfm *);
1925:	static int drbg_kcapi_init(struct crypto_tfm *);
1948:	static int drbg_kcapi_random(struct crypto_rng *, const u8 *, unsigned int, u8 *, unsigned int);
1968:	static int drbg_kcapi_seed(struct crypto_rng *, const u8 *, unsigned int);
1659:	static void drbg_kcapi_set_entropy(struct crypto_rng *, const u8 *, unsigned int);
1148:	static int drbg_seed(struct drbg_state *, struct drbg_string *, bool);

File crypto/ecb.c:
62:	static int crypto_ecb_create(struct crypto_template *, struct rtattr **);
53:	static int crypto_ecb_decrypt(struct skcipher_request *);
44:	static int crypto_ecb_encrypt(struct skcipher_request *);
94:	static void crypto_ecb_module_exit(void);
89:	static int crypto_ecb_module_init(void);

File crypto/ecc.c:
1607:	int crypto_ecdh_shared_secret(unsigned int, unsigned int, const u64 *, const u64 *, u64 *);
84:	struct ecc_point *ecc_alloc_point(unsigned int);
111:	void ecc_free_point(struct ecc_point *);
1467:	int ecc_gen_privkey(unsigned int, unsigned int, u64 *);
53:	const struct ecc_curve *ecc_get_curve(unsigned int);
47:	const struct ecc_curve *ecc_get_curve25519(void);
1440:	int ecc_is_key_valid(unsigned int, unsigned int, const u64 *, unsigned int);
1581:	int ecc_is_pubkey_valid_full(const struct ecc_curve *, struct ecc_point *);
1548:	int ecc_is_pubkey_valid_partial(const struct ecc_curve *, struct ecc_point *);
1508:	int ecc_make_pub_key(unsigned int, unsigned int, const u64 *, u64 *);
1068:	bool ecc_point_is_zero(const struct ecc_point *);
1362:	void ecc_point_mult_shamir(const struct ecc_point *, const u64 *, const struct ecc_point *, const u64 *, const struct ecc_point *, const struct ecc_curve *);
218:	int vli_cmp(const u64 *, const u64 *, unsigned int);
188:	void vli_from_be64(u64 *, const void *, unsigned int);
198:	void vli_from_le64(u64 *, const void *, unsigned int);
131:	bool vli_is_zero(const u64 *, unsigned int);
990:	void vli_mod_inv(u64 *, const u64 *, const u64 *, unsigned int);
955:	void vli_mod_mult_slow(u64 *, const u64 *, const u64 *, const u64 *, unsigned int);
170:	unsigned int vli_num_bits(const u64 *, unsigned int);
310:	u64 vli_sub(u64 *, const u64 *, const u64 *, unsigned int);
1145:	static void apply_z(u64 *, u64 *, u64 *, const struct ecc_curve *);
1080:	static void ecc_point_double_jacobian(u64 *, u64 *, u64 *, const struct ecc_curve *);
1280:	static void ecc_point_mult(struct ecc_point *, const struct ecc_point *, const u64 *, u64 *, const struct ecc_curve *, unsigned int);
910:	static bool vli_mmod_fast(u64 *, u64 *, const struct ecc_curve *);
1182:	static void xycz_add(u64 *, u64 *, u64 *, u64 *, const struct ecc_curve *);
1225:	static void xycz_add_c(u64 *, u64 *, u64 *, u64 *, const struct ecc_curve *);

File crypto/ecdh.c:
50:	static int ecdh_compute_value(struct kpp_request *);
230:	static void ecdh_exit(void);
203:	static int ecdh_init(void);
118:	static unsigned int ecdh_max_size(struct crypto_kpp *);
126:	static int ecdh_nist_p192_init_tfm(struct crypto_kpp *);
151:	static int ecdh_nist_p256_init_tfm(struct crypto_kpp *);
176:	static int ecdh_nist_p384_init_tfm(struct crypto_kpp *);
26:	static int ecdh_set_secret(struct crypto_kpp *, const void *, unsigned int);

File crypto/ecdh_helper.c:
56:	int crypto_ecdh_decode_key(const char *, unsigned int, struct ecdh *);
33:	int crypto_ecdh_encode_key(char *, unsigned int, const struct ecdh *);
27:	unsigned int crypto_ecdh_key_len(const struct ecdh *);

File crypto/echainiv.c:
112:	static int echainiv_aead_create(struct crypto_template *, struct rtattr **);
85:	static int echainiv_decrypt(struct aead_request *);
26:	static int echainiv_encrypt(struct aead_request *);
155:	static void echainiv_module_exit(void);
150:	static int echainiv_module_init(void);

File crypto/gcm.c:
674:	static int crypto_gcm_base_create(struct crypto_template *, struct rtattr **);
658:	static int crypto_gcm_create(struct crypto_template *, struct rtattr **);
576:	static int crypto_gcm_create_common(struct crypto_template *, struct rtattr **, const char *, const char *);
501:	static int crypto_gcm_decrypt(struct aead_request *);
451:	static int crypto_gcm_encrypt(struct aead_request *);
559:	static void crypto_gcm_exit_tfm(struct crypto_aead *);
567:	static void crypto_gcm_free(struct aead_instance *);
152:	static void crypto_gcm_init_common(struct aead_request *);
521:	static int crypto_gcm_init_tfm(struct crypto_aead *);
1152:	static void crypto_gcm_module_exit(void);
1134:	static int crypto_gcm_module_init(void);
146:	static int crypto_gcm_setauthsize(struct crypto_aead *, unsigned int);
92:	static int crypto_gcm_setkey(struct crypto_aead *, const u8 *, unsigned int);
827:	static int crypto_rfc4106_create(struct crypto_template *, struct rtattr **);
722:	static struct aead_request *crypto_rfc4106_crypt(struct aead_request *);
776:	static int crypto_rfc4106_decrypt(struct aead_request *);
763:	static int crypto_rfc4106_encrypt(struct aead_request *);
814:	static void crypto_rfc4106_exit_tfm(struct crypto_aead *);
821:	static void crypto_rfc4106_free(struct aead_instance *);
789:	static int crypto_rfc4106_init_tfm(struct crypto_aead *);
709:	static int crypto_rfc4106_setauthsize(struct crypto_aead *, unsigned int);
691:	static int crypto_rfc4106_setkey(struct crypto_aead *, const u8 *, unsigned int);
1042:	static int crypto_rfc4543_create(struct crypto_template *, struct rtattr **);
928:	static int crypto_rfc4543_crypt(struct aead_request *, bool);
981:	static int crypto_rfc4543_decrypt(struct aead_request *);
975:	static int crypto_rfc4543_encrypt(struct aead_request *);
1025:	static void crypto_rfc4543_exit_tfm(struct crypto_aead *);
1033:	static void crypto_rfc4543_free(struct aead_instance *);
987:	static int crypto_rfc4543_init_tfm(struct crypto_aead *);
917:	static int crypto_rfc4543_setauthsize(struct crypto_aead *, unsigned int);
899:	static int crypto_rfc4543_setkey(struct crypto_aead *, const u8 *, unsigned int);
490:	static int gcm_dec_hash_continue(struct aead_request *, u32);
480:	static void gcm_decrypt_done(struct crypto_async_request *, int);
411:	static int gcm_enc_copy_hash(struct aead_request *, u32);
436:	static void gcm_encrypt_done(struct crypto_async_request *, int);
358:	static void gcm_hash_assoc_done(struct crypto_async_request *, int);
316:	static int gcm_hash_assoc_remain_continue(struct aead_request *, u32);
329:	static void gcm_hash_assoc_remain_done(struct crypto_async_request *, int);
286:	static int gcm_hash_crypt_continue(struct aead_request *, u32);
301:	static void gcm_hash_crypt_done(struct crypto_async_request *, int);
270:	static void gcm_hash_crypt_remain_done(struct crypto_async_request *, int);
373:	static int gcm_hash_init_continue(struct aead_request *, u32);
383:	static void gcm_hash_init_done(struct crypto_async_request *, int);
249:	static void gcm_hash_len_done(struct crypto_async_request *, int);

File crypto/geniv.c:
153:	void aead_exit_geniv(struct crypto_aead *);
41:	struct aead_instance *aead_geniv_alloc(struct crypto_template *, struct rtattr **);
109:	int aead_init_geniv(struct crypto_aead *);
35:	static void aead_geniv_free(struct aead_instance *);
27:	static int aead_geniv_setauthsize(struct crypto_aead *, unsigned int);
19:	static int aead_geniv_setkey(struct crypto_aead *, const u8 *, unsigned int);

File crypto/ghash-generic.c:
143:	static void ghash_exit_tfm(struct crypto_tfm *);
131:	static int ghash_final(struct shash_desc *, u8 *);
46:	static int ghash_init(struct shash_desc *);
173:	static void ghash_mod_exit(void);
168:	static int ghash_mod_init(void);
55:	static int ghash_setkey(struct crypto_shash *, const u8 *, unsigned int);
78:	static int ghash_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/hmac.c:
169:	static int hmac_create(struct crypto_template *, struct rtattr **);
163:	static void hmac_exit_tfm(struct crypto_shash *);
87:	static int hmac_export(struct shash_desc *, void *);
117:	static int hmac_final(struct shash_desc *, u8 *);
130:	static int hmac_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
94:	static int hmac_import(struct shash_desc *, const void *);
104:	static int hmac_init(struct shash_desc *);
145:	static int hmac_init_tfm(struct crypto_shash *);
253:	static void hmac_module_exit(void);
248:	static int hmac_module_init(void);
41:	static int hmac_setkey(struct crypto_shash *, const u8 *, unsigned int);
109:	static int hmac_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/internal.h:
140:	static void crypto_alg_put(struct crypto_alg *);

File crypto/jitterentropy-kcapi.c:
81:	void jent_get_nstime(__u64 *);
67:	void jent_memcpy(void *, const void *, unsigned int);
62:	void jent_panic(char *);
52:	void *jent_zalloc(unsigned int);
57:	void jent_zfree(void *);
121:	static void jent_kcapi_cleanup(struct crypto_tfm *);
108:	static int jent_kcapi_init(struct crypto_tfm *);
132:	static int jent_kcapi_random(struct crypto_rng *, const u8 *, unsigned int, u8 *, unsigned int);
172:	static int jent_kcapi_reset(struct crypto_rng *, const u8 *, unsigned int);
206:	static void jent_mod_exit(void);
194:	static int jent_mod_init(void);

File crypto/jitterentropy.c:
671:	struct rand_data *jent_entropy_collector_alloc(unsigned int, unsigned int);
705:	void jent_entropy_collector_free(struct rand_data *);
712:	int jent_entropy_init(void);
606:	int jent_read_entropy(struct rand_data *, unsigned char *, unsigned int);
163:	static void jent_apt_insert(struct rand_data *, unsigned int);
149:	static void jent_apt_reset(struct rand_data *, unsigned int);
258:	static __u64 jent_delta(__u64, __u64);
559:	static void jent_gen_entropy(struct rand_data *);
315:	static int jent_health_failure(struct rand_data *);
392:	static void jent_lfsr_time(struct rand_data *, __u64, __u64, int);
336:	static __u64 jent_loop_shuffle(struct rand_data *, unsigned int, unsigned int);
527:	static int jent_measure_jitter(struct rand_data *);
473:	static void jent_memaccess(struct rand_data *, __u64);
251:	static int jent_rct_failure(struct rand_data *);
207:	static void jent_rct_insert(struct rand_data *, int);
280:	static int jent_stuck(struct rand_data *, __u64);

File crypto/kpp.c:
92:	struct crypto_kpp *crypto_alloc_kpp(const char *, u32, u32);
98:	int crypto_grab_kpp(struct crypto_kpp_spawn *, struct crypto_instance *, const char *, u32, u32);
107:	int crypto_has_kpp(const char *, u32, u32);
122:	int crypto_register_kpp(struct kpp_alg *);
131:	void crypto_unregister_kpp(struct kpp_alg *);
137:	int kpp_register_instance(struct crypto_template *, struct kpp_instance *);
49:	static void crypto_kpp_exit_tfm(struct crypto_tfm *);
71:	static void crypto_kpp_free_instance(struct crypto_instance *);
57:	static int crypto_kpp_init_tfm(struct crypto_tfm *);
24:	static int crypto_kpp_report(struct sk_buff *, struct crypto_alg *);
44:	static void crypto_kpp_show(struct seq_file *, struct crypto_alg *);

File crypto/md5.c:
202:	static int md5_export(struct shash_desc *, void *);
174:	static int md5_final(struct shash_desc *, u8 *);
210:	static int md5_import(struct shash_desc *, const void *);
129:	static int md5_init(struct shash_desc *);
240:	static void md5_mod_fini(void);
235:	static int md5_mod_init(void);
40:	static void md5_transform(__u32 *, const __u32 *);
142:	static int md5_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/michael_mic.c:
97:	static int michael_final(struct shash_desc *, u8 *);
47:	static int michael_init(struct shash_desc *);
164:	static void michael_mic_exit(void);
158:	static int michael_mic_init(void);
129:	static int michael_setkey(struct crypto_shash *, const u8 *, unsigned int);
59:	static int michael_update(struct shash_desc *, const u8 *, unsigned int);

File crypto/proc.c:
97:	void crypto_exit_proc(void);
92:	void crypto_init_proc(void);
26:	static void *c_next(struct seq_file *, void *, loff_t *);
36:	static int c_show(struct seq_file *, void *);
20:	static void *c_start(struct seq_file *, loff_t *);
31:	static void c_stop(struct seq_file *, void *);

File crypto/rng.c:
110:	struct crypto_rng *crypto_alloc_rng(const char *, u32, u32);
156:	int crypto_del_default_rng(void);
116:	int crypto_get_default_rng(void);
147:	void crypto_put_default_rng(void);
177:	int crypto_register_rng(struct rng_alg *);
198:	int crypto_register_rngs(struct rng_alg *, int);
31:	int crypto_rng_reset(struct crypto_rng *, const u8 *, unsigned int);
192:	void crypto_unregister_rng(struct rng_alg *);
218:	void crypto_unregister_rngs(struct rng_alg *, int);
57:	static int crypto_rng_init_tfm(struct crypto_tfm *);
70:	static int crypto_rng_report(struct sk_buff *, struct crypto_alg *);
91:	static void crypto_rng_show(struct seq_file *, struct crypto_alg *);

File crypto/rsa-pkcs1pad.c:
605:	static int pkcs1pad_create(struct crypto_template *, struct rtattr **);
346:	static int pkcs1pad_decrypt(struct akcipher_request *);
277:	static int pkcs1pad_decrypt_complete(struct akcipher_request *, int);
331:	static void pkcs1pad_decrypt_complete_cb(struct crypto_async_request *, int);
229:	static int pkcs1pad_encrypt(struct akcipher_request *);
174:	static int pkcs1pad_encrypt_sign_complete(struct akcipher_request *, int);
213:	static void pkcs1pad_encrypt_sign_complete_cb(struct crypto_async_request *, int);
589:	static void pkcs1pad_exit_tfm(struct crypto_akcipher *);
596:	static void pkcs1pad_free(struct akcipher_instance *);
149:	static unsigned int pkcs1pad_get_max_size(struct crypto_akcipher *);
570:	static int pkcs1pad_init_tfm(struct crypto_akcipher *);
128:	static int pkcs1pad_set_priv_key(struct crypto_akcipher *, const void *, unsigned int);
107:	static int pkcs1pad_set_pub_key(struct crypto_akcipher *, const void *, unsigned int);
379:	static int pkcs1pad_sign(struct akcipher_request *);
535:	static int pkcs1pad_verify(struct akcipher_request *);
436:	static int pkcs1pad_verify_complete(struct akcipher_request *, int);
512:	static void pkcs1pad_verify_complete_cb(struct crypto_async_request *, int);
81:	static const struct rsa_asn1_template *rsa_lookup_asn1(const char *);

File crypto/rsa.c:
132:	static int rsa_dec(struct akcipher_request *);
93:	static int rsa_enc(struct akcipher_request *);
347:	static void rsa_exit(void);
307:	static void rsa_exit_tfm(struct crypto_akcipher *);
170:	static void rsa_free_mpi_key(struct rsa_mpi_key *);
330:	static int rsa_init(void);
300:	static unsigned int rsa_max_size(struct crypto_akcipher *);
242:	static int rsa_set_priv_key(struct crypto_akcipher *, const void *, unsigned int);
208:	static int rsa_set_pub_key(struct crypto_akcipher *, const void *, unsigned int);

File crypto/rsa_helper.c:
61:	int rsa_get_d(void *, size_t, unsigned char, const void *, size_t);
106:	int rsa_get_dp(void *, size_t, unsigned char, const void *, size_t);
121:	int rsa_get_dq(void *, size_t, unsigned char, const void *, size_t);
46:	int rsa_get_e(void *, size_t, unsigned char, const void *, size_t);
16:	int rsa_get_n(void *, size_t, unsigned char, const void *, size_t);
76:	int rsa_get_p(void *, size_t, unsigned char, const void *, size_t);
91:	int rsa_get_q(void *, size_t, unsigned char, const void *, size_t);
136:	int rsa_get_qinv(void *, size_t, unsigned char, const void *, size_t);
181:	int rsa_parse_priv_key(struct rsa_key *, const void *, unsigned int);
162:	int rsa_parse_pub_key(struct rsa_key *, const void *, unsigned int);

File crypto/scatterwalk.c:
26:	void scatterwalk_copychunks(void *, struct scatter_walk *, size_t, int);
72:	struct scatterlist *scatterwalk_ffwd(struct scatterlist *, struct scatterlist *, unsigned int);
55:	void scatterwalk_map_and_copy(void *, struct scatterlist *, unsigned int, unsigned int, int);

File crypto/scompress.c:
213:	struct acomp_req *crypto_acomp_scomp_alloc_ctx(struct acomp_req *);
232:	void crypto_acomp_scomp_free_ctx(struct acomp_req *);
186:	int crypto_init_scomp_ops_async(struct crypto_tfm *);
257:	int crypto_register_scomp(struct scomp_alg *);
275:	int crypto_register_scomps(struct scomp_alg *, int);
269:	void crypto_unregister_scomp(struct scomp_alg *);
295:	void crypto_unregister_scomps(struct scomp_alg *, int);
174:	static void crypto_exit_scomp_ops_async(struct crypto_tfm *);
108:	static int crypto_scomp_init_tfm(struct crypto_tfm *);
42:	static int crypto_scomp_report(struct sk_buff *, struct crypto_alg *);
63:	static void crypto_scomp_show(struct seq_file *, struct crypto_alg *);
120:	static int scomp_acomp_comp_decomp(struct acomp_req *, int);
164:	static int scomp_acomp_compress(struct acomp_req *);
169:	static int scomp_acomp_decompress(struct acomp_req *);

File crypto/sha1_generic.c:
55:	int crypto_sha1_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	int crypto_sha1_update(struct shash_desc *, const u8 *, unsigned int);
49:	static int sha1_final(struct shash_desc *, u8 *);
84:	static void sha1_generic_mod_fini(void);
79:	static int sha1_generic_mod_init(void);

File crypto/sha256_generic.c:
53:	int crypto_sha256_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
36:	int crypto_sha256_update(struct shash_desc *, const u8 *, unsigned int);
44:	static int crypto_sha256_final(struct shash_desc *, u8 *);
96:	static void sha256_generic_mod_fini(void);
91:	static int sha256_generic_mod_init(void);

File crypto/sha3_generic.c:
213:	int crypto_sha3_final(struct shash_desc *, u8 *);
161:	int crypto_sha3_init(struct shash_desc *);
175:	int crypto_sha3_update(struct shash_desc *, const u8 *, unsigned int);
150:	static void keccakf(u64 *);
287:	static void sha3_generic_mod_fini(void);
282:	static int sha3_generic_mod_init(void);

File crypto/sha512_generic.c:
170:	int crypto_sha512_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
157:	int crypto_sha512_update(struct shash_desc *, const u8 *, unsigned int);
164:	static int sha512_final(struct shash_desc *, u8 *);
148:	static void sha512_generic_block_fn(struct sha512_state *, const u8 *, int);
213:	static void sha512_generic_mod_fini(void);
208:	static int sha512_generic_mod_init(void);

File crypto/shash.c:
507:	struct crypto_shash *crypto_alloc_shash(const char *, u32, u32);
498:	int crypto_grab_shash(struct crypto_shash_spawn *, struct crypto_instance *, const char *, u32, u32);
514:	int crypto_has_shash(const char *, u32, u32);
367:	int crypto_init_shash_ops_async(struct crypto_tfm *);
554:	int crypto_register_shash(struct shash_alg *);
573:	int crypto_register_shashes(struct shash_alg *, int);
194:	int crypto_shash_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
153:	int crypto_shash_final(struct shash_desc *, u8 *);
173:	int crypto_shash_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
59:	int crypto_shash_setkey(struct crypto_shash *, const u8 *, unsigned int);
211:	int crypto_shash_tfm_digest(struct crypto_shash *, const u8 *, unsigned int, u8 *);
111:	int crypto_shash_update(struct shash_desc *, const u8 *, unsigned int);
567:	void crypto_unregister_shash(struct shash_alg *);
593:	void crypto_unregister_shashes(struct shash_alg *, int);
311:	int shash_ahash_digest(struct ahash_request *, struct shash_desc *);
280:	int shash_ahash_finup(struct ahash_request *, struct shash_desc *);
257:	int shash_ahash_update(struct ahash_request *, struct shash_desc *);
618:	void shash_free_singlespawn_instance(struct shash_instance *);
25:	int shash_no_setkey(struct crypto_shash *, const u8 *, unsigned int);
602:	int shash_register_instance(struct crypto_template *, struct shash_instance *);
360:	static void crypto_exit_shash_ops_async(struct crypto_tfm *);
406:	static void crypto_shash_exit_tfm(struct crypto_tfm *);
444:	static void crypto_shash_free_instance(struct crypto_instance *);
414:	static int crypto_shash_init_tfm(struct crypto_tfm *);
452:	static int crypto_shash_report(struct sk_buff *, struct crypto_alg *);
475:	static void crypto_shash_show(struct seq_file *, struct crypto_alg *);
335:	static int shash_async_digest(struct ahash_request *);
345:	static int shash_async_export(struct ahash_request *, void *);
275:	static int shash_async_final(struct ahash_request *);
301:	static int shash_async_finup(struct ahash_request *);
350:	static int shash_async_import(struct ahash_request *, const void *);
247:	static int shash_async_init(struct ahash_request *);
239:	static int shash_async_setkey(struct crypto_ahash *, const u8 *, unsigned int);
270:	static int shash_async_update(struct ahash_request *);
227:	static int shash_default_export(struct shash_desc *, void *);
233:	static int shash_default_import(struct shash_desc *, const void *);
187:	static int shash_digest_unaligned(struct shash_desc *, const u8 *, unsigned int, u8 *);
166:	static int shash_finup_unaligned(struct shash_desc *, const u8 *, unsigned int, u8 *);

File crypto/skcipher.c:
753:	struct crypto_skcipher *crypto_alloc_skcipher(const char *, u32, u32);
760:	struct crypto_sync_skcipher *crypto_alloc_sync_skcipher(const char *, u32, u32);
744:	int crypto_grab_skcipher(struct crypto_skcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
784:	int crypto_has_skcipher(const char *, u32, u32);
810:	int crypto_register_skcipher(struct skcipher_alg *);
829:	int crypto_register_skciphers(struct skcipher_alg *, int);
636:	int crypto_skcipher_decrypt(struct skcipher_request *);
619:	int crypto_skcipher_encrypt(struct skcipher_request *);
594:	int crypto_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
823:	void crypto_unregister_skcipher(struct skcipher_alg *);
849:	void crypto_unregister_skciphers(struct skcipher_alg *, int);
929:	struct skcipher_instance *skcipher_alloc_instance_simple(struct crypto_template *, struct rtattr **);
858:	int skcipher_register_instance(struct crypto_template *, struct skcipher_instance *);
556:	int skcipher_walk_aead_decrypt(struct skcipher_walk *, struct aead_request *, bool);
547:	int skcipher_walk_aead_encrypt(struct skcipher_walk *, struct aead_request *, bool);
494:	int skcipher_walk_async(struct skcipher_walk *, struct skcipher_request *);
182:	void skcipher_walk_complete(struct skcipher_walk *, int);
105:	int skcipher_walk_done(struct skcipher_walk *, int);
477:	int skcipher_walk_virt(struct skcipher_walk *, struct skcipher_request *, bool);
653:	static void crypto_skcipher_exit_tfm(struct crypto_tfm *);
677:	static void crypto_skcipher_free_instance(struct crypto_instance *);
661:	static int crypto_skcipher_init_tfm(struct crypto_tfm *);
704:	static int crypto_skcipher_report(struct sk_buff *, struct crypto_alg *);
687:	static void crypto_skcipher_show(struct seq_file *, struct crypto_alg *);
94:	static int skcipher_done_slow(struct skcipher_walk *, unsigned int);
900:	static void skcipher_exit_tfm_simple(struct crypto_skcipher *);
907:	static void skcipher_free_instance_simple(struct skcipher_instance *);
885:	static int skcipher_init_tfm_simple(struct crypto_skcipher *);
286:	static int skcipher_next_copy(struct skcipher_walk *);
225:	static int skcipher_next_slow(struct skcipher_walk *, unsigned int);
874:	static int skcipher_setkey_simple(struct crypto_skcipher *, const u8 *, unsigned int);
505:	static int skcipher_walk_aead_common(struct skcipher_walk *, struct aead_request *, bool);
344:	static int skcipher_walk_next(struct skcipher_walk *);
449:	static int skcipher_walk_skcipher(struct skcipher_walk *, struct skcipher_request *);

File crypto/sm3.c:
215:	void sm3_final(struct sm3_state *, u8 *);
178:	void sm3_update(struct sm3_state *, const u8 *, unsigned int);
169:	static void sm3_block(struct sm3_state *, const u8 *, int, u32 *);

File crypto/sm3_generic.c:
37:	static int crypto_sm3_final(struct shash_desc *, u8 *);
43:	static int crypto_sm3_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
30:	static int crypto_sm3_update(struct shash_desc *, const u8 *, unsigned int);
75:	static void sm3_generic_mod_fini(void);
70:	static int sm3_generic_mod_init(void);

File crypto/sm4.c:
160:	void sm4_crypt_block(const u32 *, u8 *, const u8 *);
119:	int sm4_expandkey(struct sm4_ctx *, const u8 *, unsigned int);

File crypto/sm4_generic.c:
50:	static void sm4_decrypt(struct crypto_tfm *, u8 *, const u8 *);
41:	static void sm4_encrypt(struct crypto_tfm *, u8 *, const u8 *);
81:	static void sm4_fini(void);
76:	static int sm4_init(void);
31:	static int sm4_setkey(struct crypto_tfm *, const u8 *, unsigned int);

File crypto/testmgr.c:
63:	int alg_test(const char *, const char *, u32, u32);

File crypto/xor.c:
27:	void xor_blocks(unsigned int, unsigned int, void *, void **);
119:	static int calibrate_xor_blocks(void);
83:	static void do_xor_speed(struct xor_block_template *, void *, void *);
64:	static int register_xor_blocks(void);
166:	static void xor_exit(void);

File crypto/xts.c:
339:	static int xts_create(struct crypto_template *, struct rtattr **);
143:	static void xts_cts_done(struct crypto_async_request *, int);
159:	static int xts_cts_final(struct skcipher_request *, int (*)(struct skcipher_request *));
278:	static int xts_decrypt(struct skcipher_request *);
219:	static void xts_decrypt_done(struct crypto_async_request *, int);
261:	static int xts_encrypt(struct skcipher_request *);
199:	static void xts_encrypt_done(struct crypto_async_request *, int);
323:	static void xts_exit_tfm(struct crypto_skcipher *);
331:	static void xts_free_instance(struct skcipher_instance *);
295:	static int xts_init_tfm(struct crypto_skcipher *);
457:	static void xts_module_exit(void);
452:	static int xts_module_init(void);
41:	static int xts_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
82:	static int xts_xor_tweak(struct skcipher_request *, bool, bool);

File crypto/xxhash_generic.c:
60:	static int xxhash64_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
51:	static int xxhash64_final(struct shash_desc *, u8 *);
31:	static int xxhash64_init(struct shash_desc *);
20:	static int xxhash64_setkey(struct crypto_shash *, const u8 *, unsigned int);
41:	static int xxhash64_update(struct shash_desc *, const u8 *, unsigned int);
94:	static void xxhash_mod_fini(void);
89:	static int xxhash_mod_init(void);

File drivers/amba/bus.c:
546:	int amba_device_add(struct amba_device *, struct resource *);
598:	struct amba_device *amba_device_alloc(const char *, resource_size_t, size_t);
637:	void amba_device_put(struct amba_device *);
624:	int amba_device_register(struct amba_device *, struct resource *);
654:	void amba_device_unregister(struct amba_device *);
502:	int amba_driver_register(struct amba_driver *);
521:	void amba_driver_unregister(struct amba_driver *);
688:	void amba_release_regions(struct amba_device *);
665:	int amba_request_regions(struct amba_device *, const char *);
527:	static void amba_device_release(struct device *);
375:	static void amba_dma_cleanup(struct device *);
353:	static int amba_dma_configure(struct device *);
451:	static int amba_init(void);
207:	static int amba_match(struct device *, struct device_driver *);
277:	static int amba_probe(struct device *);
133:	static int amba_read_periphid(struct amba_device *);
322:	static void amba_remove(struct device *);
341:	static void amba_shutdown(struct device *);
477:	static int amba_stub_drv_init(void);
238:	static int amba_uevent(struct device *, struct kobj_uevent_env *);
84:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
96:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
120:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
121:	static ssize_t resource_show(struct device *, struct device_attribute *, char *);

File drivers/base/arch_numa.c:
335:	int __node_distance(int, int);
467:	void arch_numa_init(void);
126:	void early_map_cpu_to_node(unsigned int, int);
77:	void numa_add_cpu(unsigned int);
201:	int numa_add_memblk(int, u64, u64);
87:	void numa_clear_node(unsigned int);
255:	void numa_free_distance(void);
82:	void numa_remove_cpu(unsigned int);
308:	void numa_set_distance(int, int, int);
121:	void numa_store_cpu_info(unsigned int);
157:	void setup_per_cpu_areas(void);
421:	static int dummy_numa_init(void);
147:	static int early_cpu_to_node(int);
273:	static int numa_alloc_distance(void);
376:	static int numa_init(int (*)(void));
27:	static int numa_parse_early_param(char *);
343:	static int numa_register_nodes(void);
152:	static int pcpu_cpu_distance(unsigned int, unsigned int);
219:	static void setup_node_data(int, u64, u64);
100:	static void setup_node_to_cpumask_map(void);

File drivers/base/arch_topology.c:
719:	const struct cpumask *cpu_clustergroup_mask(int);
692:	const struct cpumask *cpu_coregroup_mask(int);
826:	void init_cpu_topology(void);
820:	int parse_acpi_topology(void);
804:	void remove_cpu_topology(unsigned int);
788:	void reset_cpu_topology(void);
845:	void store_cpu_topology(unsigned int);
90:	void topology_clear_scale_freq_source(enum scale_freq_source, const struct cpumask *);
271:	void topology_normalize_cpu_scale(void);
297:	bool topology_parse_cpu_capacity(struct device_node *, int);
36:	bool topology_scale_freq_invariant(void);
119:	void topology_scale_freq_tick(void);
156:	void topology_set_cpu_scale(unsigned int, unsigned long);
130:	void topology_set_freq_scale(const struct cpumask *, unsigned long, unsigned long);
59:	void topology_set_scale_freq_source(struct scale_freq_data *, const struct cpumask *);
244:	int topology_update_cpu_topology(void);
177:	void topology_update_thermal_pressure(const struct cpumask *, unsigned long);
732:	void update_siblings_masks(unsigned int);
772:	static void clear_cpu_topology(int);
209:	static ssize_t cpu_capacity_show(struct device *, struct device_attribute *, char *);
263:	static int free_raw_capacity(void);
479:	static int get_cpu_for_node(struct device_node *);
548:	static int parse_cluster(struct device_node *, int, int, int);
499:	static int parse_core(struct device_node *, int, int, int);
642:	static int parse_dt_topology(void);
616:	static int parse_socket(struct device_node *);
223:	static int register_cpu_capacity_sysctl(void);

File drivers/base/attribute_container.c:
417:	int attribute_container_add_attrs(struct device *);
452:	int attribute_container_add_class_device(struct device *);
472:	int attribute_container_add_class_device_adapter(struct attribute_container *, struct device *, struct device *);
141:	void attribute_container_add_device(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
514:	void attribute_container_class_device_del(struct device *);
54:	struct attribute_container *attribute_container_classdev_to_container(struct device *);
353:	void attribute_container_device_trigger(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
297:	int attribute_container_device_trigger_safe(struct device *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
530:	struct device *attribute_container_find_class_device(struct attribute_container *, struct device *);
73:	int attribute_container_register(struct attribute_container *);
486:	void attribute_container_remove_attrs(struct device *);
206:	void attribute_container_remove_device(struct device *, void (*)(struct attribute_container *, struct device *, struct device *));
394:	void attribute_container_trigger(struct device *, int (*)(struct attribute_container *, struct device *));
93:	int attribute_container_unregister(struct attribute_container *);
112:	static void attribute_container_release(struct device *);
240:	static int do_attribute_container_device_trigger_safe(struct device *, struct attribute_container *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
31:	static void internal_container_klist_get(struct klist_node *);
38:	static void internal_container_klist_put(struct klist_node *);

File drivers/base/auxiliary.c:
313:	int __auxiliary_device_add(struct auxiliary_device *, const char *);
377:	int __auxiliary_driver_register(struct auxiliary_driver *, struct module *, const char *);
416:	void auxiliary_bus_init(void);
274:	int auxiliary_device_init(struct auxiliary_device *);
409:	void auxiliary_driver_unregister(struct auxiliary_driver *);
352:	struct auxiliary_device *auxiliary_find_device(struct device *, const void *, int (*)(struct device *, const void *));
204:	static int auxiliary_bus_probe(struct device *);
223:	static void auxiliary_bus_remove(struct device *);
233:	static void auxiliary_bus_shutdown(struct device *);
180:	static int auxiliary_match(struct device *, struct device_driver *);
161:	static const struct auxiliary_device_id *auxiliary_match_id(const struct auxiliary_device_id *, const struct auxiliary_device *);
188:	static int auxiliary_uevent(struct device *, struct kobj_uevent_env *);

File drivers/base/bus.c:
441:	int bus_add_device(struct device *);
590:	int bus_add_driver(struct device_driver *);
131:	int bus_create_file(struct bus_type *, struct bus_attribute *);
322:	struct device *bus_find_device(struct bus_type *, struct device *, const void *, int (*)(struct device *, const void *));
288:	int bus_for_each_dev(struct bus_type *, struct device *, void *, int (*)(struct device *, void *));
414:	int bus_for_each_drv(struct bus_type *, struct device_driver *, void *, int (*)(struct device_driver *, void *));
900:	struct klist *bus_get_device_klist(struct bus_type *);
894:	struct kset *bus_get_kset(struct bus_type *);
478:	void bus_probe_device(struct device *);
783:	int bus_register(struct bus_type *);
882:	int bus_register_notifier(struct bus_type *, struct notifier_block *);
506:	void bus_remove_device(struct device *);
666:	void bus_remove_driver(struct device_driver *);
143:	void bus_remove_file(struct bus_type *, struct bus_attribute *);
707:	int bus_rescan_devices(struct bus_type *);
933:	void bus_sort_breadthfirst(struct bus_type *, int (*)(const struct device *, const struct device *));
868:	void bus_unregister(struct bus_type *);
888:	int bus_unregister_notifier(struct bus_type *, struct notifier_block *);
1169:	int buses_init(void);
722:	int device_reprobe(struct device *);
1015:	void subsys_dev_iter_exit(struct subsys_dev_iter *);
968:	void subsys_dev_iter_init(struct subsys_dev_iter *, struct bus_type *, struct device *, const struct device_type *);
992:	struct device *subsys_dev_iter_next(struct subsys_dev_iter *);
352:	struct device *subsys_find_device_by_id(struct bus_type *, unsigned int, struct device *);
1021:	int subsys_interface_register(struct subsys_interface *);
1048:	void subsys_interface_unregister(struct subsys_interface *);
1138:	int subsys_system_register(struct bus_type *, const struct attribute_group **);
1156:	int subsys_virtual_register(struct bus_type *, const struct attribute_group **);
555:	static int add_probe_files(struct bus_type *);
205:	static ssize_t bind_store(struct device_driver *, const char *, size_t);
102:	static ssize_t bus_attr_show(struct kobject *, struct attribute *, char *);
114:	static ssize_t bus_attr_store(struct kobject *, struct attribute *, const char *, size_t);
152:	static void bus_release(struct kobject *);
166:	static int bus_uevent_filter(const struct kobject *);
758:	static ssize_t bus_uevent_store(struct bus_type *, const char *, size_t);
86:	static void driver_release(struct kobject *);
226:	static ssize_t drivers_autoprobe_show(struct bus_type *, char *);
231:	static ssize_t drivers_autoprobe_store(struct bus_type *, const char *, size_t);
241:	static ssize_t drivers_probe_store(struct bus_type *, const char *, size_t);
57:	static ssize_t drv_attr_show(struct kobject *, struct attribute *, char *);
69:	static ssize_t drv_attr_store(struct kobject *, struct attribute *, const char *, size_t);
742:	static void klist_devices_get(struct klist_node *);
750:	static void klist_devices_put(struct klist_node *);
570:	static void remove_probe_files(struct bus_type *);
1078:	static int subsys_register(struct bus_type *, const struct attribute_group **, struct kobject *);
1073:	static void system_root_device_release(struct device *);
576:	static ssize_t uevent_store(struct device_driver *, const char *, size_t);
182:	static ssize_t unbind_store(struct device_driver *, const char *, size_t);

File drivers/base/cacheinfo.c:
592:	const struct attribute_group *cache_get_priv_group(struct cacheinfo *);
236:	int cache_setup_acpi(unsigned int);
345:	int detect_cache_attributes(unsigned int);
31:	struct cpu_cacheinfo *get_cpu_cacheinfo(unsigned int);
335:	int init_cache_level(unsigned int);
67:	bool last_level_cache_is_shared(unsigned int, unsigned int);
54:	bool last_level_cache_is_valid(unsigned int);
340:	int populate_cache_leaves(unsigned int);
470:	static ssize_t allocation_policy_show(struct device *, struct device_attribute *, char *);
533:	static umode_t cache_default_attrs_is_visible(struct kobject *, struct attribute *, int);
692:	static int cacheinfo_cpu_online(unsigned int);
704:	static int cacheinfo_cpu_pre_down(unsigned int);
713:	static int cacheinfo_sysfs_init(void);
416:	static ssize_t coherency_line_size_show(struct device *, struct device_attribute *, char *);
613:	static void cpu_cache_sysfs_exit(unsigned int);
323:	static void free_cache_attributes(unsigned int);
414:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
415:	static ssize_t level_show(struct device *, struct device_attribute *, char *);
417:	static ssize_t number_of_sets_show(struct device *, struct device_attribute *, char *);
418:	static ssize_t physical_line_partition_show(struct device *, struct device_attribute *, char *);
438:	static ssize_t shared_cpu_list_show(struct device *, struct device_attribute *, char *);
429:	static ssize_t shared_cpu_map_show(struct device *, struct device_attribute *, char *);
421:	static ssize_t size_show(struct device *, struct device_attribute *, char *);
447:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
419:	static ssize_t ways_of_associativity_show(struct device *, struct device_attribute *, char *);
489:	static ssize_t write_policy_show(struct device *, struct device_attribute *, char *);

File drivers/base/class.c:
231:	struct class *__class_create(struct module *, const char *, struct lock_class_key *);
153:	int __class_register(struct class *, struct lock_class_key *);
536:	int class_compat_create_link(struct class_compat *, struct device *, struct device *);
502:	struct class_compat *class_compat_register(const char *);
569:	void class_compat_remove_link(struct class_compat *, struct device *, struct device *);
522:	void class_compat_unregister(struct class_compat *);
88:	int class_create_file_ns(struct class *, const struct class_attribute *, const void *);
266:	void class_destroy(struct class *);
333:	void class_dev_iter_exit(struct class_dev_iter *);
286:	void class_dev_iter_init(struct class_dev_iter *, struct class *, struct device *, const struct device_type *);
310:	struct device *class_dev_iter_next(struct class_dev_iter *);
404:	struct device *class_find_device(struct class *, struct device *, const void *, int (*)(struct device *, const void *));
357:	int class_for_each_device(struct class *, struct device *, void *, int (*)(struct device *, void *));
432:	int class_interface_register(struct class_interface *);
458:	void class_interface_unregister(struct class_interface *);
101:	void class_remove_file_ns(struct class *, const struct class_attribute *, const void *);
204:	void class_unregister(struct class *);
578:	int classes_init(void);
480:	ssize_t show_class_attr_string(struct class *, struct class_attribute *, char *);
25:	static ssize_t class_attr_show(struct kobject *, struct attribute *, char *);
37:	static ssize_t class_attr_store(struct kobject *, struct attribute *, const char *, size_t);
65:	static const struct kobj_ns_type_operations *class_child_ns_type(const struct kobject *);
211:	static void class_create_release(struct class *);
49:	static void class_release(struct kobject *);
127:	static void klist_class_dev_get(struct klist_node *);
134:	static void klist_class_dev_put(struct klist_node *);

File drivers/base/component.c:
787:	int component_add(struct device *, const struct component_ops *);
762:	int component_add_typed(struct device *, const struct component_ops *, int);
677:	int component_bind_all(struct device *, void *);
323:	int component_compare_dev(struct device *, void *);
338:	int component_compare_dev_name(struct device *, void *);
296:	int component_compare_of(struct device *, void *);
802:	void component_del(struct device *, const struct component_ops *);
512:	int component_master_add_with_match(struct device *, const struct component_master_ops *, struct component_match *);
557:	void component_master_del(struct device *, const struct component_master_ops *);
445:	void component_match_add_release(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), void *);
472:	void component_match_add_typed(struct device *, struct component_match **, int (*)(struct device *, int, void *), void *);
309:	void component_release_of(struct device *, void *);
594:	void component_unbind_all(struct device *, void *);
711:	static int __component_add(struct device *, const struct component_ops *, int);
381:	static void __component_match_add(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), int (*)(struct device *, int, void *), void *);
111:	static int component_debug_init(void);
109:	static int component_devices_open(struct inode *, struct file *);
83:	static int component_devices_show(struct seq_file *, void *);
344:	static void devm_component_match_release(struct device *, void *);
481:	static void free_aggregate_device(struct aggregate_device *);
227:	static int try_to_bring_up_aggregate_device(struct aggregate_device *, struct component *);

File drivers/base/container.c:
34:	void container_dev_init(void);
20:	static int container_offline(struct device *);
15:	static int trivial_online(struct device *);

File drivers/base/core.c:
4061:	struct device *__root_device_register(const char *, struct module *);
4762:	void _dev_alert(const struct device *, const char *, ...);
4763:	void _dev_crit(const struct device *, const char *, ...);
4761:	void _dev_emerg(const struct device *, const char *, ...);
4764:	void _dev_err(const struct device *, const char *, ...);
4767:	void _dev_info(const struct device *, const char *, ...);
4766:	void _dev_notice(const struct device *, const char *, ...);
4727:	void _dev_printk(const char *, const struct device *, const char *, ...);
4765:	void _dev_warn(const struct device *, const char *, ...);
2173:	const char *dev_driver_string(const struct device *);
4803:	int dev_err_probe(const struct device *, int, const char *, ...);
4702:	int dev_printk_emit(int, const struct device *, const char *, ...);
3261:	int dev_set_name(struct device *, const char *, ...);
4691:	int dev_vprintk_emit(int, const struct device *, const char *, va_list);
3360:	int device_add(struct device *);
2571:	int device_add_groups(struct device *, const struct attribute_group **);
4508:	int device_change_owner(struct device *, kuid_t, kgid_t);
4191:	struct device *device_create(struct class *, struct device *, dev_t, void *, const char *, ...);
2879:	int device_create_bin_file(struct device *, const struct bin_attribute *);
2825:	int device_create_file(struct device *, const struct device_attribute *);
4232:	struct device *device_create_with_groups(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, ...);
3621:	void device_del(struct device *);
4257:	void device_destroy(struct class *, dev_t);
3911:	struct device *device_find_any_child(struct device *);
3851:	struct device *device_find_child(struct device *, void *, int (*)(struct device *, void *));
3879:	struct device *device_find_child_by_name(struct device *, const char *);
3786:	int device_for_each_child(struct device *, void *, int (*)(struct device *, void *));
3816:	int device_for_each_child_reverse(struct device *, void *, int (*)(struct device *, void *));
3742:	const char *device_get_devnode(struct device *, umode_t *, kuid_t *, kgid_t *, const char **);
2938:	void device_initialize(struct device *);
283:	int device_is_dependent(struct device *, void *);
698:	struct device_link *device_link_add(struct device *, struct device *, u32);
928:	void device_link_del(struct device_link *);
944:	void device_link_remove(void *, struct device *);
1493:	bool device_links_busy(struct device *);
1003:	int device_links_check_suppliers(struct device *);
1259:	void device_links_driver_bound(struct device *);
1448:	void device_links_driver_cleanup(struct device *);
1227:	void device_links_force_bind(struct device *);
1411:	void device_links_no_driver(struct device *);
198:	int device_links_read_lock(void);
208:	int device_links_read_lock_held(void);
203:	void device_links_read_unlock(int);
1145:	void device_links_supplier_sync_state_pause(void);
1152:	void device_links_supplier_sync_state_resume(void);
1533:	void device_links_unbind_consumers(struct device *);
4939:	int device_match_acpi_dev(struct device *, const void *);
4945:	int device_match_acpi_handle(struct device *, const void *);
4951:	int device_match_any(struct device *, const void *);
4933:	int device_match_devt(struct device *, const void *);
4927:	int device_match_fwnode(struct device *, const void *);
4915:	int device_match_name(struct device *, const void *);
4921:	int device_match_of_node(struct device *, const void *);
4367:	int device_move(struct device *, struct device *, enum dpm_order);
3965:	int device_offline(struct device *);
4003:	int device_online(struct device *);
393:	void device_pm_move_to_tail(struct device *);
3557:	int device_register(struct device *);
2894:	void device_remove_bin_file(struct device *, const struct bin_attribute *);
2849:	void device_remove_file(struct device *, const struct device_attribute *);
2864:	bool device_remove_file_self(struct device *, const struct device_attribute *);
2577:	void device_remove_groups(struct device *, const struct attribute_group **);
4308:	int device_rename(struct device *, const char *);
4908:	void device_set_node(struct device *, struct fwnode_handle *);
4900:	void device_set_of_node_from_dev(struct device *, const struct device *);
2291:	ssize_t device_show_bool(struct device *, struct device_attribute *, char *);
2269:	ssize_t device_show_int(struct device *, struct device_attribute *, char *);
2240:	ssize_t device_show_ulong(struct device *, struct device_attribute *, char *);
4573:	void device_shutdown(void);
2279:	ssize_t device_store_bool(struct device *, struct device_attribute *, const char *, size_t);
2249:	ssize_t device_store_int(struct device *, struct device_attribute *, const char *, size_t);
2223:	ssize_t device_store_ulong(struct device *, struct device_attribute *, const char *, size_t);
3695:	void device_unregister(struct device *);
3917:	int devices_init(void);
2810:	void devices_kset_move_last(struct device *);
2617:	int devm_device_add_group(struct device *, const struct attribute_group *);
2652:	int devm_device_add_groups(struct device *, const struct attribute_group **);
1694:	void fw_devlink_drivers_done(void);
1636:	u32 fw_devlink_get_flags(void);
1646:	bool fw_devlink_is_strict(void);
168:	void fw_devlink_purge_absent_suppliers(struct fwnode_handle *);
77:	int fwnode_link_add(struct fwnode_handle *, struct fwnode_handle *);
162:	void fwnode_links_purge(struct fwnode_handle *);
3572:	struct device *get_device(struct device *);
3590:	bool kill_device(struct device *);
2112:	void lock_device_hotplug(void);
2122:	int lock_device_hotplug_sysfs(void);
3582:	void put_device(struct device *);
4108:	void root_device_unregister(struct device *);
4844:	void set_primary_fwnode(struct device *, struct fwnode_handle *);
4880:	void set_secondary_fwnode(struct device *, struct fwnode_handle *);
2117:	void unlock_device_hotplug(void);
2964:	struct kobject *virtual_device_parent(struct device *);
1736:	void wait_for_init_devices_probe(void);
4717:	static void __dev_printk(const char *, const struct device *, struct va_format *);
2031:	static void __fw_devlink_link_to_suppliers(struct device *, struct fwnode_handle *);
439:	static ssize_t auto_remove_on_show(struct device *, struct device_attribute *, char *);
2989:	static const struct kobj_ns_type_operations *class_dir_child_ns_type(const struct kobject *);
2982:	static void class_dir_release(struct kobject *);
2188:	static ssize_t dev_attr_show(struct kobject *, struct attribute *, char *);
2204:	static ssize_t dev_attr_store(struct kobject *, struct attribute *, const char *, size_t);
2764:	static ssize_t dev_show(struct device *, struct device_attribute *, char *);
2390:	static int dev_uevent(struct kobject *, struct kobj_uevent_env *);
2365:	static int dev_uevent_filter(const struct kobject *);
2379:	static const char *dev_uevent_name(const struct kobject *);
2675:	static int device_add_attrs(struct device *);
3943:	static int device_check_offline(struct device *, void *);
4127:	static struct device *device_create_groups_vargs(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, va_list);
4120:	static void device_create_release(struct device *);
3296:	static int device_create_sys_dev_entry(struct device *);
2349:	static void device_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
1193:	static void device_link_drop_managed(struct device_link *);
315:	static void device_link_init_status(struct device_link *, struct device *, struct device *);
909:	static void device_link_put_kref(struct device_link *);
484:	static void device_link_release_fn(struct work_struct *);
2338:	static const void *device_namespace(const struct kobject *);
2308:	static void device_release(struct kobject *);
2742:	static void device_remove_attrs(struct device *);
3238:	static void device_remove_class_symlinks(struct device *);
359:	static int device_reorder_to_tail(struct device *, void *);
2795:	static void devices_kset_move_after(struct device *, struct device *);
2779:	static void devices_kset_move_before(struct device *, struct device *);
530:	static int devlink_add_symlinks(struct device *, struct class_interface *);
617:	static int devlink_class_init(void);
509:	static void devlink_dev_release(struct device *);
580:	static void devlink_remove_symlinks(struct device *, struct class_interface *);
2589:	static void devm_attr_group_remove(struct device *, void *);
2598:	static void devm_attr_groups_remove(struct device *, void *);
1833:	static int fw_devlink_create_devlink(struct device *, struct fwnode_handle *, u32);
2087:	static void fw_devlink_link_device(struct device *);
1684:	static int fw_devlink_no_driver(struct device *, void *);
1660:	static void fw_devlink_parse_fwtree(struct fwnode_handle *);
1786:	static int fw_devlink_relax_cycle(struct device *, void *);
1611:	static int fw_devlink_setup(char *);
1630:	static int fw_devlink_strict_setup(char *);
1759:	static void fw_devlink_unblock_consumers(struct device *);
3026:	static struct kobject *get_device_parent(struct device *, struct device *);
2902:	static void klist_children_get(struct klist_node *);
2910:	static void klist_children_put(struct klist_node *);
2521:	static ssize_t online_show(struct device *, struct device_attribute *, char *);
2532:	static ssize_t online_store(struct device *, struct device_attribute *, const char *, size_t);
2552:	static ssize_t removable_show(struct device *, struct device_attribute *, char *);
4034:	static void root_device_release(struct device *);
456:	static ssize_t runtime_pm_show(struct device *, struct device_attribute *, char *);
406:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
465:	static ssize_t sync_state_only_show(struct device *, struct device_attribute *, char *);
1180:	static int sync_state_resume_initcall(void);
2462:	static ssize_t uevent_show(struct device *, struct device_attribute *, char *);
2505:	static ssize_t uevent_store(struct device *, struct device_attribute *, const char *, size_t);
1200:	static ssize_t waiting_for_supplier_show(struct device *, struct device_attribute *, char *);

File drivers/base/cpu.c:
622:	void cpu_dev_init(void);
440:	struct device *cpu_device_create(struct device *, void *, const struct attribute_group **, const char *, ...);
487:	bool cpu_is_hotpluggable(unsigned int);
555:	ssize_t cpu_show_itlb_multihit(struct device *, struct device_attribute *, char *);
536:	ssize_t cpu_show_l1tf(struct device *, struct device_attribute *, char *);
542:	ssize_t cpu_show_mds(struct device *, struct device_attribute *, char *);
512:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
567:	ssize_t cpu_show_mmio_stale_data(struct device *, struct device_attribute *, char *);
573:	ssize_t cpu_show_retbleed(struct device *, struct device_attribute *, char *);
530:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
518:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
524:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
561:	ssize_t cpu_show_srbds(struct device *, struct device_attribute *, char *);
548:	ssize_t cpu_show_tsx_async_abort(struct device *, struct device_attribute *, char *);
391:	struct device *get_cpu_device(unsigned int);
359:	int register_cpu(struct cpu *, int);
75:	void unregister_cpu(struct cpu *);
296:	static void cpu_device_release(struct device *);
611:	static void cpu_register_vulnerabilities(void);
28:	static int cpu_subsys_match(struct device *, struct device_driver *);
70:	static int cpu_subsys_offline(struct device *);
47:	static int cpu_subsys_online(struct device *);
339:	static int cpu_uevent(struct device *, struct kobj_uevent_env *);
400:	static void device_create_release(struct device *);
316:	static ssize_t print_cpu_modalias(struct device *, struct device_attribute *, char *);
268:	static ssize_t print_cpus_isolated(struct device *, struct device_attribute *, char *);
228:	static ssize_t print_cpus_kernel_max(struct device *, struct device_attribute *, char *);
238:	static ssize_t print_cpus_offline(struct device *, struct device_attribute *, char *);
206:	static ssize_t show_cpus_attr(struct device *, struct device_attribute *, char *);

File drivers/base/dd.c:
323:	void deferred_probe_extend_timeout(void);
1049:	int device_attach(struct device *);
496:	int device_bind_driver(struct device *);
203:	void device_block_probing(void);
1100:	int device_driver_attach(struct device_driver *, struct device *);
1313:	void device_driver_detach(struct device *);
1055:	void device_initial_probe(struct device *);
388:	bool device_is_bound(struct device *);
1295:	void device_release_driver(struct device *);
1272:	void device_release_driver_internal(struct device *, struct device_driver *, struct device *);
227:	void device_set_deferred_probe_reason(const struct device *, struct va_format *);
216:	void device_unblock_probing(void);
1209:	int driver_attach(struct device_driver *);
132:	void driver_deferred_probe_add(struct device *);
290:	int driver_deferred_probe_check_state(struct device *);
145:	void driver_deferred_probe_del(struct device *);
175:	void driver_deferred_probe_trigger(void);
1322:	void driver_detach(struct device_driver *);
732:	int driver_probe_done(void);
746:	void wait_for_device_probe(void);
978:	static int __device_attach(struct device *, bool);
942:	static void __device_attach_async_helper(void *, async_cookie_t);
899:	static int __device_attach_driver(struct device_driver *, void *);
1134:	static int __driver_attach(struct device *, void *);
1117:	static void __driver_attach_async_helper(void *, async_cookie_t);
423:	static ssize_t coredump_store(struct device *, struct device_attribute *, const char *, size_t);
257:	static int deferred_devs_open(struct inode *, struct file *);
243:	static int deferred_devs_show(struct seq_file *, void *);
373:	static void deferred_probe_exit(void);
344:	static int deferred_probe_initcall(void);
267:	static int deferred_probe_timeout_setup(char *);
306:	static void deferred_probe_timeout_work_func(struct work_struct *);
81:	static void deferred_probe_work_func(struct work_struct *);
542:	static void device_remove(struct device *);
393:	static void driver_bound(struct device *);
802:	static int driver_probe_device(struct device_driver *, struct device *);
434:	static int driver_sysfs_add(struct device *);
584:	static int really_probe(struct device *, struct device_driver *);
834:	static int save_async_options(char *);
515:	static ssize_t state_synced_show(struct device *, struct device_attribute *, char *);

File drivers/base/devcoredump.c:
323:	void dev_coredumpm(struct device *, struct module *, void *, size_t, gfp_t, ssize_t (*)(char *, loff_t, size_t, void *, size_t), void (*)(void *));
407:	void dev_coredumpsg(struct device *, struct scatterlist *, size_t, gfp_t);
256:	void dev_coredumpv(struct device *, void *, size_t, gfp_t);
111:	static ssize_t devcd_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
121:	static ssize_t devcd_data_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
101:	static void devcd_del(struct work_struct *);
82:	static void devcd_dev_release(struct device *);
157:	static int devcd_free(struct device *, void *);
278:	static void devcd_free_sgtable(void *);
241:	static void devcd_freev(void *);
263:	static int devcd_match_failing(struct device *, const void *);
293:	static ssize_t devcd_read_from_sgtable(char *, loff_t, size_t, void *, size_t);
235:	static ssize_t devcd_readv(char *, loff_t, size_t, void *, size_t);
421:	static void devcoredump_exit(void);
415:	static int devcoredump_init(void);
170:	static ssize_t disabled_show(struct class *, struct class_attribute *, char *);
200:	static ssize_t disabled_store(struct class *, struct class_attribute *, const char *, size_t);

File drivers/base/devres.c:
1191:	void *__devm_alloc_percpu(struct device *, size_t, size_t);
162:	void *__devres_alloc_node(dr_release_t, size_t, gfp_t, int, const char *);
733:	int devm_add_action(struct device *, void (*)(void *), void *);
1155:	void devm_free_pages(struct device *, unsigned long);
1222:	void devm_free_percpu(struct device *, void *);
1121:	unsigned long devm_get_free_pages(struct device *, gfp_t, unsigned int);
1030:	char *devm_kasprintf(struct device *, gfp_t, const char *, ...);
1050:	void devm_kfree(struct device *, const void *);
820:	void *devm_kmalloc(struct device *, size_t, gfp_t);
1076:	void *devm_kmemdup(struct device *, const void *, size_t, gfp_t);
858:	void *devm_krealloc(struct device *, void *, size_t, gfp_t);
949:	char *devm_kstrdup(struct device *, const char *, gfp_t);
978:	const char *devm_kstrdup_const(struct device *, const char *, gfp_t);
998:	char *devm_kvasprintf(struct device *, gfp_t, const char *, va_list);
781:	void devm_release_action(struct device *, void (*)(void *), void *);
759:	void devm_remove_action(struct device *, void (*)(void *), void *);
243:	void devres_add(struct device *, void *);
609:	void devres_close_group(struct device *, void *);
390:	int devres_destroy(struct device *, dr_release_t, dr_match_t, void *);
286:	void *devres_find(struct device *, dr_release_t, dr_match_t, void *);
190:	void devres_for_each_res(struct device *, dr_release_t, dr_match_t, void *, void (*)(struct device *, void *, void *), void *);
223:	void devres_free(void *);
316:	void *devres_get(struct device *, void *, dr_match_t, void *);
552:	void *devres_open_group(struct device *, void *, gfp_t);
420:	int devres_release(struct device *, dr_release_t, dr_match_t, void *);
517:	int devres_release_all(struct device *);
668:	int devres_release_group(struct device *, void *);
352:	void *devres_remove(struct device *, dr_release_t, dr_match_t, void *);
635:	void devres_remove_group(struct device *, void *);
717:	static void devm_action_release(struct device *, void *);
797:	static void devm_kmalloc_release(struct device *, void *);
1101:	static void devm_pages_release(struct device *, void *);
1164:	static void devm_percpu_release(struct device *, void *);
83:	static void group_close_release(struct device *, void *);
78:	static void group_open_release(struct device *, void *);
435:	static int remove_nodes(struct device *, struct list_head *, struct list_head *, struct list_head *);

File drivers/base/devtmpfs.c:
121:	int devtmpfs_create_node(struct device *);
148:	int devtmpfs_delete_node(struct device *);
456:	int devtmpfs_init(void);
367:	int devtmpfs_mount(void);
419:	static int devtmpfs_setup(void *);
396:	static void devtmpfs_work_loop(void);
441:	static int devtmpfsd(void *);
55:	static int mount_param(char *);
64:	static struct dentry *public_dev_mount(struct file_system_type *, int, const char *, void *);

File drivers/base/driver.c:
202:	int driver_add_groups(struct device_driver *, const struct attribute_group **);
176:	int driver_create_file(struct device_driver *, const struct driver_attribute *);
290:	struct device_driver *driver_find(const char *, struct bus_type *);
151:	struct device *driver_find_device(struct device_driver *, struct device *, const void *, int (*)(struct device *, const void *));
117:	int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));
222:	int driver_register(struct device_driver *);
194:	void driver_remove_file(struct device_driver *, const struct driver_attribute *);
208:	void driver_remove_groups(struct device_driver *, const struct attribute_group **);
48:	int driver_set_override(struct device *, const char **, const char *, size_t);
267:	void driver_unregister(struct device_driver *);

File drivers/base/firmware.c:
20:	int firmware_init(void);

File drivers/base/firmware_loader/builtin/main.c:
95:	bool firmware_is_builtin(const struct firmware *);
47:	bool firmware_request_builtin(struct firmware *, const char *);
86:	bool firmware_request_builtin_buf(struct firmware *, const char *, void *, size_t);

File drivers/base/firmware_loader/fallback.c:
220:	int firmware_fallback_sysfs(struct firmware *, const char *, struct device *, u32, int);
24:	void fw_fallback_set_cache_timeout(void);
31:	void fw_fallback_set_default_timeout(void);
49:	void kill_pending_fw_fallback_reqs(bool);

File drivers/base/firmware_loader/fallback_table.c:
51:	int register_firmware_config_sysctl(void);
62:	void unregister_firmware_config_sysctl(void);

File drivers/base/firmware_loader/main.c:
167:	int alloc_lookup_fw_priv(const char *, struct firmware_cache *, struct fw_priv **, void *, size_t, size_t, u32);
681:	int assign_fw(struct firmware *, struct device *);
998:	int firmware_request_cache(struct device *, const char *);
923:	int firmware_request_nowarn(const struct firmware **, const char *, struct device *);
972:	int firmware_request_platform(const struct firmware **, const char *, struct device *);
224:	void free_fw_priv(struct fw_priv *);
238:	void fw_free_paged_buf(struct fw_priv *);
257:	int fw_grow_paged_buf(struct fw_priv *, int);
233:	bool fw_is_paged_buf(struct fw_priv *);
290:	int fw_map_paged_buf(struct fw_priv *);
97:	void fw_state_init(struct fw_priv *);
1077:	void release_firmware(const struct firmware *);
896:	int request_firmware(const struct firmware **, const char *, struct device *);
948:	int request_firmware_direct(const struct firmware **, const char *, struct device *);
1026:	int request_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t);
1139:	int request_firmware_nowait(struct module *, bool, const char *, struct device *, gfp_t, void *, void (*)(const struct firmware *, void *));
1055:	int request_partial_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t, size_t);
796:	static int _request_firmware(const struct firmware **, const char *, struct device *, void *, size_t, size_t, u32);
1591:	static void firmware_class_exit(void);
1569:	static int firmware_class_init(void);
1553:	static int fw_shutdown_notify(struct notifier_block *, unsigned long, void *);
1098:	static void request_firmware_work_func(struct work_struct *);

File drivers/base/firmware_loader/sysfs.c:
15:	void __fw_load_abort(struct fw_priv *);
396:	struct fw_sysfs *fw_create_instance(struct firmware *, const char *, struct device *, u32);
111:	int register_sysfs_loader(void);
120:	void unregister_sysfs_loader(void);
261:	static ssize_t firmware_data_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
318:	static ssize_t firmware_data_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
126:	static ssize_t firmware_loading_show(struct device *, struct device_attribute *, char *);
153:	static ssize_t firmware_loading_store(struct device *, struct device_attribute *, const char *, size_t);
79:	static int firmware_uevent(const struct device *, struct kobj_uevent_env *);
92:	static void fw_dev_release(struct device *);
28:	static ssize_t timeout_show(struct class *, struct class_attribute *, char *);
47:	static ssize_t timeout_store(struct class *, struct class_attribute *, const char *, size_t);

File drivers/base/init.c:
21:	void driver_init(void);

File drivers/base/map.c:
95:	struct kobject *kobj_lookup(struct kobj_map *, dev_t, int *);
32:	int kobj_map(struct kobj_map *, dev_t, unsigned long, struct module *, kobj_probe_t *, int (*)(dev_t, void *), void *);
135:	struct kobj_map *kobj_map_init(kobj_probe_t *, struct mutex *);
68:	void kobj_unmap(struct kobj_map *, dev_t, unsigned long);

File drivers/base/node.c:
858:	int __register_one_node(int);
946:	void node_dev_init(void);
645:	int register_cpu_under_node(unsigned int, unsigned int);
681:	int register_memory_node_under_compute_node(unsigned int, unsigned int, unsigned int);
718:	int unregister_cpu_under_node(unsigned int, unsigned int);
631:	void unregister_node(struct node *);
881:	void unregister_one_node(int);
51:	static ssize_t cpulist_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
30:	static ssize_t cpumap_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
124:	static void node_access_release(struct device *);
593:	static void node_device_release(struct device *);
129:	static struct node_access_nodes *node_init_node_access(struct node *, unsigned int);
543:	static ssize_t node_read_distance(struct device *, struct device_attribute *, char *);
370:	static ssize_t node_read_meminfo(struct device *, struct device_attribute *, char *);
489:	static ssize_t node_read_numastat(struct device *, struct device_attribute *, char *);
509:	static ssize_t node_read_vmstat(struct device *, struct device_attribute *, char *);
899:	static ssize_t show_node_state(struct device *, struct device_attribute *, char *);

File drivers/base/pinctrl.c:
21:	int pinctrl_bind_pins(struct device *);

File drivers/base/platform-msi.c:
269:	struct irq_domain *__platform_msi_create_device_domain(struct device *, unsigned int, bool, irq_write_msi_msg_t, const struct irq_domain_ops *, void *);
122:	struct irq_domain *platform_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
344:	int platform_msi_device_domain_alloc(struct irq_domain *, unsigned int, unsigned int);
321:	void platform_msi_device_domain_free(struct irq_domain *, unsigned int, unsigned int);
207:	int platform_msi_domain_alloc_irqs(struct device *, unsigned int, irq_write_msi_msg_t);
228:	void platform_msi_domain_free_irqs(struct device *);
243:	void *platform_msi_get_host_data(struct irq_domain *);
143:	static int platform_msi_alloc_priv_data(struct device *, unsigned int, irq_write_msi_msg_t);
52:	static int platform_msi_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
46:	static void platform_msi_set_desc(msi_alloc_info_t *, struct msi_desc *);
83:	static void platform_msi_write_msg(struct irq_data *, struct msi_msg *);

File drivers/base/platform.c:
972:	struct platform_device *__platform_create_bundle(struct platform_driver *, int (*)(struct platform_device *), struct resource *, unsigned int, const void *, size_t, struct module *);
906:	int __platform_driver_probe(struct platform_driver *, int (*)(struct platform_device *), struct module *);
861:	int __platform_driver_register(struct platform_driver *, struct module *);
1027:	int __platform_register_drivers(struct platform_driver * const *, unsigned int, struct module *);
99:	void *devm_platform_get_and_ioremap_resource(struct platform_device *, unsigned int, struct resource **);
334:	int devm_platform_get_irqs_affinity(struct platform_device *, struct irq_affinity *, unsigned int, unsigned int, int **);
122:	void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
142:	void *devm_platform_ioremap_resource_byname(struct platform_device *, const char *);
1509:	void early_platform_cleanup(void);
503:	int platform_add_devices(struct platform_device **, int);
1511:	int platform_bus_init(void);
656:	int platform_device_add(struct platform_device *);
632:	int platform_device_add_data(struct platform_device *, const void *, size_t);
604:	int platform_device_add_resources(struct platform_device *, const struct resource *, unsigned int);
576:	struct platform_device *platform_device_alloc(const char *, int);
746:	void platform_device_del(struct platform_device *);
548:	void platform_device_put(struct platform_device *);
775:	int platform_device_register(struct platform_device *);
806:	struct platform_device *platform_device_register_full(const struct platform_device_info *);
791:	void platform_device_unregister(struct platform_device *);
875:	void platform_driver_unregister(struct platform_driver *);
1501:	struct device *platform_find_device_by_driver(struct device *, const struct device_driver *);
259:	int platform_get_irq(struct platform_device *, unsigned int);
469:	int platform_get_irq_byname(struct platform_device *, const char *);
491:	int platform_get_irq_byname_optional(struct platform_device *, const char *);
171:	int platform_get_irq_optional(struct platform_device *, unsigned int);
70:	struct resource *platform_get_mem_or_io(struct platform_device *, unsigned int);
55:	struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
419:	struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);
278:	int platform_irq_count(struct platform_device *);
1065:	void platform_unregister_drivers(struct platform_driver * const *, unsigned int);
438:	static int __platform_get_irq_byname(struct platform_device *, const char *);
1490:	static int __platform_match(struct device *, const void *);
306:	static void devm_platform_get_irqs_affinity_release(struct device *, void *);
1264:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
1277:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
1239:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
1257:	static ssize_t numa_node_show(struct device *, struct device_attribute *, char *);
1299:	static umode_t platform_dev_attrs_visible(struct kobject *, struct attribute *, int);
555:	static void platform_device_release(struct device *);
1463:	static void platform_dma_cleanup(struct device *);
1441:	static int platform_dma_configure(struct device *);
1331:	static int platform_match(struct device *, struct device_driver *);
1375:	static int platform_probe(struct device *);
881:	static int platform_probe_fail(struct platform_device *);
1414:	static void platform_remove(struct device *);
1428:	static void platform_shutdown(struct device *);
1356:	static int platform_uevent(struct device *, struct kobj_uevent_env *);

File drivers/base/power/clock_ops.c:
796:	void pm_clk_add_notifier(struct bus_type *, struct pm_clk_notifier_block *);
750:	static int pm_clk_notify(struct notifier_block *, unsigned long, void *);

File drivers/base/property.c:
20:	struct fwnode_handle *__dev_fwnode(struct device *);
27:	const struct fwnode_handle *__dev_fwnode_const(const struct device *);
875:	bool device_dma_supported(const struct device *);
863:	unsigned int device_get_child_node_count(const struct device *);
881:	enum dev_dma_attr device_get_dma_attr(const struct device *);
1217:	const void *device_get_match_data(const struct device *);
804:	struct fwnode_handle *device_get_named_child_node(const struct device *, const char *);
767:	struct fwnode_handle *device_get_next_child_node(const struct device *, struct fwnode_handle *);
926:	int device_get_phy_mode(struct device *);
245:	int device_property_match_string(struct device *, const char *, const char *);
41:	bool device_property_present(struct device *, const char *);
223:	int device_property_read_string(struct device *, const char *, const char **);
201:	int device_property_read_string_array(struct device *, const char *, const char **, size_t);
117:	int device_property_read_u16_array(struct device *, const char *, u16 *, size_t);
145:	int device_property_read_u32_array(struct device *, const char *, u32 *, size_t);
173:	int device_property_read_u64_array(struct device *, const char *, u64 *, size_t);
89:	int device_property_read_u8_array(struct device *, const char *, u8 *, size_t);
1299:	void *fwnode_connection_find_match(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t);
1336:	int fwnode_connection_find_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);
656:	unsigned int fwnode_count_parents(const struct fwnode_handle *);
847:	bool fwnode_device_is_available(const struct fwnode_handle *);
553:	struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *, const char *, unsigned int);
572:	const char *fwnode_get_name(const struct fwnode_handle *);
585:	const char *fwnode_get_name_prefix(const struct fwnode_handle *);
792:	struct fwnode_handle *fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
744:	struct fwnode_handle *fwnode_get_next_available_child_node(const struct fwnode_handle *, struct fwnode_handle *);
730:	struct fwnode_handle *fwnode_get_next_child_node(const struct fwnode_handle *, struct fwnode_handle *);
614:	struct fwnode_handle *fwnode_get_next_parent(struct fwnode_handle *);
635:	struct device *fwnode_get_next_parent_dev(struct fwnode_handle *);
680:	struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *, unsigned int);
597:	struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *);
898:	int fwnode_get_phy_mode(struct fwnode_handle *);
1128:	struct fwnode_handle *fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *, u32, u32, unsigned long);
1183:	unsigned int fwnode_graph_get_endpoint_count(struct fwnode_handle *, unsigned long);
997:	struct fwnode_handle *fwnode_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
1036:	struct fwnode_handle *fwnode_graph_get_port_parent(const struct fwnode_handle *);
1089:	struct fwnode_handle *fwnode_graph_get_remote_endpoint(const struct fwnode_handle *);
1076:	struct fwnode_handle *fwnode_graph_get_remote_port(const struct fwnode_handle *);
1056:	struct fwnode_handle *fwnode_graph_get_remote_port_parent(const struct fwnode_handle *);
1208:	int fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
817:	struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *);
834:	void fwnode_handle_put(struct fwnode_handle *);
939:	void *fwnode_iomap(struct fwnode_handle *, int);
953:	int fwnode_irq_get(const struct fwnode_handle *, unsigned int);
973:	int fwnode_irq_get_byname(const struct fwnode_handle *, const char *);
705:	bool fwnode_is_ancestor_of(struct fwnode_handle *, struct fwnode_handle *);
519:	int fwnode_property_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
466:	int fwnode_property_match_string(const struct fwnode_handle *, const char *, const char *);
52:	bool fwnode_property_present(const struct fwnode_handle *, const char *);
442:	int fwnode_property_read_string(const struct fwnode_handle *, const char *, const char **);
408:	int fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
321:	int fwnode_property_read_u16_array(const struct fwnode_handle *, const char *, u16 *, size_t);
350:	int fwnode_property_read_u32_array(const struct fwnode_handle *, const char *, u32 *, size_t);
379:	int fwnode_property_read_u64_array(const struct fwnode_handle *, const char *, u64 *, size_t);
292:	int fwnode_property_read_u8_array(const struct fwnode_handle *, const char *, u8 *, size_t);
1257:	static unsigned int fwnode_devcon_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);
1223:	static unsigned int fwnode_graph_devcon_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);

File drivers/base/regmap/regcache-flat.c:
46:	static int regcache_flat_exit(struct regmap *);
21:	static int regcache_flat_init(struct regmap *);
54:	static int regcache_flat_read(struct regmap *, unsigned int, unsigned int *);
65:	static int regcache_flat_write(struct regmap *, unsigned int, unsigned int);

File drivers/base/regmap/regcache-rbtree.c:
178:	static void rbtree_debugfs_init(struct regmap *);
176:	static int rbtree_open(struct inode *, struct file *);
132:	static int rbtree_show(struct seq_file *, void *);
505:	static int regcache_rbtree_drop(struct regmap *, unsigned int, unsigned int);
213:	static int regcache_rbtree_exit(struct regmap *);
184:	static int regcache_rbtree_init(struct regmap *);
242:	static int regcache_rbtree_read(struct regmap *, unsigned int, unsigned int *);
464:	static int regcache_rbtree_sync(struct regmap *, unsigned int, unsigned int);
368:	static int regcache_rbtree_write(struct regmap *, unsigned int, unsigned int);

File drivers/base/regmap/regcache.c:
545:	void regcache_cache_bypass(struct regmap *, bool);
501:	void regcache_cache_only(struct regmap *, bool);
469:	int regcache_drop_region(struct regmap *, unsigned int, unsigned int);
212:	void regcache_exit(struct regmap *);
601:	unsigned int regcache_get_val(struct regmap *, const void *, unsigned int);
115:	int regcache_init(struct regmap *, const struct regmap_config *);
650:	int regcache_lookup_reg(struct regmap *, unsigned int);
525:	void regcache_mark_dirty(struct regmap *);
239:	int regcache_read(struct regmap *, unsigned int, unsigned int *);
555:	bool regcache_set_val(struct regmap *, void *, unsigned int, unsigned int);
345:	int regcache_sync(struct regmap *);
781:	int regcache_sync_block(struct regmap *, void *, unsigned long *, unsigned int, unsigned int, unsigned int);
414:	int regcache_sync_region(struct regmap *, unsigned int, unsigned int);
270:	int regcache_write(struct regmap *, unsigned int, unsigned int);
642:	static int regcache_default_cmp(const void *, const void *);
300:	static int regcache_default_sync(struct regmap *, unsigned int, unsigned int);
26:	static int regcache_hw_init(struct regmap *);

File drivers/base/regmap/regmap-debugfs.c:
655:	void regmap_debugfs_exit(struct regmap *);
546:	void regmap_debugfs_init(struct regmap *);
679:	void regmap_debugfs_initcall(void);
457:	static int regmap_access_open(struct inode *, struct file *);
434:	static int regmap_access_show(struct seq_file *, void *);
506:	static ssize_t regmap_cache_bypass_write_file(struct file *, const char *, size_t, loff_t *);
459:	static ssize_t regmap_cache_only_write_file(struct file *, const char *, size_t, loff_t *);
95:	static unsigned int regmap_debugfs_get_dump_start(struct regmap *, unsigned int, loff_t, loff_t *);
284:	static ssize_t regmap_map_read_file(struct file *, char *, size_t, loff_t *);
34:	static ssize_t regmap_name_read_file(struct file *, char *, size_t, loff_t *);
344:	static ssize_t regmap_range_read_file(struct file *, char *, size_t, loff_t *);
215:	static ssize_t regmap_read_debugfs(struct regmap *, unsigned int, unsigned int, char *, size_t, loff_t *);
360:	static ssize_t regmap_reg_ranges_read_file(struct file *, char *, size_t, loff_t *);

File drivers/base/regmap/regmap-i2c.c:
384:	struct regmap *__devm_regmap_init_i2c(struct i2c_client *, const struct regmap_config *, struct lock_class_key *, const char *);
369:	struct regmap *__regmap_init_i2c(struct i2c_client *, const struct regmap_config *, struct lock_class_key *, const char *);
306:	static const struct regmap_bus *regmap_get_i2c_bus(struct i2c_client *, const struct regmap_config *);
138:	static int regmap_i2c_gather_write(void *, const void *, size_t, const void *, size_t);
172:	static int regmap_i2c_read(void *, const void *, size_t, void *, size_t);
222:	static int regmap_i2c_smbus_i2c_read(void *, const void *, size_t, void *, size_t);
263:	static int regmap_i2c_smbus_i2c_read_reg16(void *, const void *, size_t, void *, size_t);
208:	static int regmap_i2c_smbus_i2c_write(void *, const void *, size_t);
249:	static int regmap_i2c_smbus_i2c_write_reg16(void *, const void *, size_t);
123:	static int regmap_i2c_write(void *, const void *, size_t);
15:	static int regmap_smbus_byte_reg_read(void *, unsigned int, unsigned int *);
34:	static int regmap_smbus_byte_reg_write(void *, unsigned int, unsigned int);
87:	static int regmap_smbus_word_read_swapped(void *, unsigned int, unsigned int *);
51:	static int regmap_smbus_word_reg_read(void *, unsigned int, unsigned int *);
70:	static int regmap_smbus_word_reg_write(void *, unsigned int, unsigned int);
106:	static int regmap_smbus_word_write_swapped(void *, unsigned int, unsigned int);

File drivers/base/regmap/regmap-irq.c:
1248:	int devm_regmap_add_irq_chip(struct device *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1203:	int devm_regmap_add_irq_chip_fwnode(struct device *, struct fwnode_handle *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1268:	void devm_regmap_del_irq_chip(struct device *, int, struct regmap_irq_chip_data *);
1108:	int regmap_add_irq_chip(struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
723:	int regmap_add_irq_chip_fwnode(struct fwnode_handle *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1125:	void regmap_del_irq_chip(int, struct regmap_irq_chip_data *);
1289:	int regmap_irq_chip_get_base(struct regmap_irq_chip_data *);
1324:	struct irq_domain *regmap_irq_get_domain(struct regmap_irq_chip_data *);
630:	unsigned int regmap_irq_get_irq_reg_linear(struct regmap_irq_chip_data *, unsigned int, int);
1304:	int regmap_irq_get_virq(struct regmap_irq_chip_data *, int);
663:	int regmap_irq_set_type_config_simple(unsigned int **, unsigned int, const struct regmap_irq *, int);
1174:	static int devm_regmap_irq_chip_match(struct device *, void *, void *);
1167:	static void devm_regmap_irq_chip_release(struct device *, void *);
274:	static void regmap_irq_disable(struct irq_data *);
245:	static void regmap_irq_enable(struct irq_data *);
76:	static void regmap_irq_lock(struct irq_data *);
602:	static int regmap_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
283:	static int regmap_irq_set_type(struct irq_data *, unsigned int);
345:	static int regmap_irq_set_wake(struct irq_data *, unsigned int);
83:	static void regmap_irq_sync_unlock(struct irq_data *);
413:	static irqreturn_t regmap_irq_thread(int, void *);

File drivers/base/regmap/regmap-mmio.c:
596:	struct regmap *__devm_regmap_init_mmio_clk(struct device *, const char *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
579:	struct regmap *__regmap_init_mmio_clk(struct device *, const char *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
614:	int regmap_mmio_attach_clk(struct regmap *, struct clk *);
625:	void regmap_mmio_detach_clk(struct regmap *);
409:	static void regmap_mmio_free_context(void *);
431:	static struct regmap_mmio_context *regmap_mmio_gen_context(struct device *, const char *, void *, const struct regmap_config *);
289:	static unsigned int regmap_mmio_ioread16be(struct regmap_mmio_context *, unsigned int);
277:	static unsigned int regmap_mmio_ioread16le(struct regmap_mmio_context *, unsigned int);
319:	static unsigned int regmap_mmio_ioread32be(struct regmap_mmio_context *, unsigned int);
307:	static unsigned int regmap_mmio_ioread32le(struct regmap_mmio_context *, unsigned int);
259:	static unsigned int regmap_mmio_ioread8(struct regmap_mmio_context *, unsigned int);
112:	static void regmap_mmio_iowrite16be(struct regmap_mmio_context *, unsigned int, unsigned int);
99:	static void regmap_mmio_iowrite16le(struct regmap_mmio_context *, unsigned int, unsigned int);
145:	static void regmap_mmio_iowrite32be(struct regmap_mmio_context *, unsigned int, unsigned int);
132:	static void regmap_mmio_iowrite32le(struct regmap_mmio_context *, unsigned int, unsigned int);
79:	static void regmap_mmio_iowrite8(struct regmap_mmio_context *, unsigned int, unsigned int);
344:	static int regmap_mmio_noinc_read(void *, unsigned int, void *, size_t);
170:	static int regmap_mmio_noinc_write(void *, unsigned int, const void *, size_t);
325:	static int regmap_mmio_read(void *, unsigned int, unsigned int *);
283:	static unsigned int regmap_mmio_read16be(struct regmap_mmio_context *, unsigned int);
265:	static unsigned int regmap_mmio_read16le(struct regmap_mmio_context *, unsigned int);
271:	static unsigned int regmap_mmio_read16le_relaxed(struct regmap_mmio_context *, unsigned int);
313:	static unsigned int regmap_mmio_read32be(struct regmap_mmio_context *, unsigned int);
295:	static unsigned int regmap_mmio_read32le(struct regmap_mmio_context *, unsigned int);
301:	static unsigned int regmap_mmio_read32le_relaxed(struct regmap_mmio_context *, unsigned int);
247:	static unsigned int regmap_mmio_read8(struct regmap_mmio_context *, unsigned int);
253:	static unsigned int regmap_mmio_read8_relaxed(struct regmap_mmio_context *, unsigned int);
151:	static int regmap_mmio_write(void *, unsigned int, unsigned int);
105:	static void regmap_mmio_write16be(struct regmap_mmio_context *, unsigned int, unsigned int);
85:	static void regmap_mmio_write16le(struct regmap_mmio_context *, unsigned int, unsigned int);
92:	static void regmap_mmio_write16le_relaxed(struct regmap_mmio_context *, unsigned int, unsigned int);
138:	static void regmap_mmio_write32be(struct regmap_mmio_context *, unsigned int, unsigned int);
118:	static void regmap_mmio_write32le(struct regmap_mmio_context *, unsigned int, unsigned int);
125:	static void regmap_mmio_write32le_relaxed(struct regmap_mmio_context *, unsigned int, unsigned int);
65:	static void regmap_mmio_write8(struct regmap_mmio_context *, unsigned int, unsigned int);
72:	static void regmap_mmio_write8_relaxed(struct regmap_mmio_context *, unsigned int, unsigned int);

File drivers/base/regmap/regmap-slimbus.c:
56:	struct regmap *__devm_regmap_init_slimbus(struct slim_device *, const struct regmap_config *, struct lock_class_key *, const char *);
41:	struct regmap *__regmap_init_slimbus(struct slim_device *, const struct regmap_config *, struct lock_class_key *, const char *);
17:	static int regmap_slimbus_read(void *, const void *, size_t, void *, size_t);
10:	static int regmap_slimbus_write(void *, const void *, size_t);

File drivers/base/regmap/regmap.c:
1267:	struct regmap *__devm_regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
718:	struct regmap *__regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
2058:	int _regmap_raw_write(struct regmap *, unsigned int, const void *, size_t, bool);
1970:	int _regmap_write(struct regmap *, unsigned int, unsigned int);
1592:	struct regmap *dev_get_regmap(struct device *, const char *);
1318:	struct regmap_field *devm_regmap_field_alloc(struct device *, struct regmap *, struct reg_field);
1381:	int devm_regmap_field_bulk_alloc(struct device *, struct regmap *, struct regmap_field **, const struct reg_field *, int);
1426:	void devm_regmap_field_bulk_free(struct device *, struct regmap_field *);
1444:	void devm_regmap_field_free(struct device *, struct regmap_field *);
3361:	int regmap_async_complete(struct regmap *);
3320:	void regmap_async_complete_cb(struct regmap_async *, int);
627:	int regmap_attach_dev(struct device *, struct regmap *, const struct regmap_config *);
3154:	int regmap_bulk_read(struct regmap *, unsigned int, void *, size_t);
2391:	int regmap_bulk_write(struct regmap *, unsigned int, const void *, size_t);
104:	bool regmap_cached(struct regmap *, unsigned int);
1883:	bool regmap_can_raw_write(struct regmap *);
74:	bool regmap_check_range_table(struct regmap *, unsigned int, const struct regmap_access_table *);
1535:	void regmap_exit(struct regmap *);
1461:	struct regmap_field *regmap_field_alloc(struct regmap *, struct reg_field);
1346:	int regmap_field_bulk_alloc(struct regmap *, struct regmap_field **, const struct reg_field *, int);
1409:	void regmap_field_bulk_free(struct regmap_field *);
1481:	void regmap_field_free(struct regmap_field *);
3094:	int regmap_field_read(struct regmap_field *, unsigned int *);
2334:	int regmap_field_test_bits(struct regmap_field *, unsigned int);
2312:	int regmap_field_update_bits_base(struct regmap_field *, unsigned int, unsigned int, bool *, bool, bool);
3120:	int regmap_fields_read(struct regmap_field *, unsigned int, unsigned int *);
2361:	int regmap_fields_update_bits_base(struct regmap_field *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
1610:	struct device *regmap_get_device(struct regmap *);
3469:	int regmap_get_max_register(struct regmap *);
1894:	size_t regmap_get_raw_read_max(struct regmap *);
1905:	size_t regmap_get_raw_write_max(struct regmap *);
3483:	int regmap_get_reg_stride(struct regmap *);
3452:	int regmap_get_val_bytes(struct regmap *);
679:	enum regmap_endian regmap_get_val_endian(struct device *, const struct regmap_bus *, const struct regmap_config *);
3496:	bool regmap_might_sleep(struct regmap *);
2704:	int regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, int);
2737:	int regmap_multi_reg_write_bypassed(struct regmap *, const struct reg_sequence *, int);
3028:	int regmap_noinc_read(struct regmap *, unsigned int, void *, size_t);
2246:	int regmap_noinc_write(struct regmap *, unsigned int, const void *, size_t);
3502:	int regmap_parse_val(struct regmap *, const void *, unsigned int *);
164:	bool regmap_precious(struct regmap *, unsigned int);
2934:	int regmap_raw_read(struct regmap *, unsigned int, void *, size_t);
2112:	int regmap_raw_write(struct regmap *, unsigned int, const void *, size_t);
2781:	int regmap_raw_write_async(struct regmap *, unsigned int, const void *, size_t);
2906:	int regmap_read(struct regmap *, unsigned int, unsigned int *);
127:	bool regmap_readable(struct regmap *, unsigned int);
189:	bool regmap_readable_noinc(struct regmap *, unsigned int);
60:	bool regmap_reg_in_ranges(unsigned int, const struct regmap_range *, unsigned int);
3402:	int regmap_register_patch(struct regmap *, const struct reg_sequence *, int);
1501:	int regmap_reinit_cache(struct regmap *, const struct regmap_config *);
3308:	int regmap_test_bits(struct regmap *, unsigned int, unsigned int);
3277:	int regmap_update_bits_base(struct regmap *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
147:	bool regmap_volatile(struct regmap *, unsigned int);
2010:	int regmap_write(struct regmap *, unsigned int, unsigned int);
2037:	int regmap_write_async(struct regmap *, unsigned int, unsigned int);
90:	bool regmap_writeable(struct regmap *, unsigned int);
178:	bool regmap_writeable_noinc(struct regmap *, unsigned int);
1911:	static int _regmap_bus_formatted_write(void *, unsigned int, unsigned int);
1948:	static int _regmap_bus_raw_write(void *, unsigned int, unsigned int);
2846:	static int _regmap_bus_read(void *, unsigned int, unsigned int *);
2838:	static int _regmap_bus_reg_read(void *, unsigned int, unsigned int *);
1940:	static int _regmap_bus_reg_write(void *, unsigned int, unsigned int);
2606:	static int _regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, size_t);
2466:	static int _regmap_raw_multi_reg_write(struct regmap *, const struct reg_sequence *, size_t);
2805:	static int _regmap_raw_read(struct regmap *, unsigned int, void *, unsigned int, bool);
1679:	static int _regmap_raw_write_impl(struct regmap *, unsigned int, const void *, size_t, bool);
2864:	static int _regmap_read(struct regmap *, unsigned int, unsigned int *);
1616:	static int _regmap_select_page(struct regmap *, unsigned int *, struct regmap_range_node *, unsigned int);
1565:	static int dev_get_regmap_match(struct device *, void *, void *);
542:	static void dev_get_regmap_release(struct device *, void *);
1262:	static void devm_regmap_release(struct device *, void *);
256:	static void regmap_format_10_14_write(struct regmap *, unsigned int, unsigned int);
212:	static void regmap_format_12_20_write(struct regmap *, unsigned int, unsigned int);
273:	static void regmap_format_16_be(void *, unsigned int, unsigned int);
278:	static void regmap_format_16_le(void *, unsigned int, unsigned int);
283:	static void regmap_format_16_native(void *, unsigned int, unsigned int);
291:	static void regmap_format_24_be(void *, unsigned int, unsigned int);
224:	static void regmap_format_2_6_write(struct regmap *, unsigned int, unsigned int);
296:	static void regmap_format_32_be(void *, unsigned int, unsigned int);
301:	static void regmap_format_32_le(void *, unsigned int, unsigned int);
306:	static void regmap_format_32_native(void *, unsigned int, unsigned int);
232:	static void regmap_format_4_12_write(struct regmap *, unsigned int, unsigned int);
315:	static void regmap_format_64_be(void *, unsigned int, unsigned int);
320:	static void regmap_format_64_le(void *, unsigned int, unsigned int);
325:	static void regmap_format_64_native(void *, unsigned int, unsigned int);
246:	static void regmap_format_7_17_write(struct regmap *, unsigned int, unsigned int);
239:	static void regmap_format_7_9_write(struct regmap *, unsigned int, unsigned int);
266:	static void regmap_format_8(void *, unsigned int, unsigned int);
3514:	static int regmap_initcall(void);
448:	static void regmap_lock_hwlock(void *);
455:	static void regmap_lock_hwlock_irq(void *);
462:	static void regmap_lock_hwlock_irqsave(void *);
496:	static void regmap_lock_mutex(void *);
525:	static void regmap_lock_raw_spinlock(void *);
508:	static void regmap_lock_spinlock(void *);
491:	static void regmap_lock_unlock_none(void *);
2132:	static int regmap_noinc_readwrite(struct regmap *, unsigned int, void *, unsigned int, bool);
345:	static unsigned int regmap_parse_16_be(const void *);
355:	static void regmap_parse_16_be_inplace(void *);
350:	static unsigned int regmap_parse_16_le(const void *);
362:	static void regmap_parse_16_le_inplace(void *);
369:	static unsigned int regmap_parse_16_native(const void *);
377:	static unsigned int regmap_parse_24_be(const void *);
382:	static unsigned int regmap_parse_32_be(const void *);
392:	static void regmap_parse_32_be_inplace(void *);
387:	static unsigned int regmap_parse_32_le(const void *);
399:	static void regmap_parse_32_le_inplace(void *);
406:	static unsigned int regmap_parse_32_native(const void *);
415:	static unsigned int regmap_parse_64_be(const void *);
425:	static void regmap_parse_64_be_inplace(void *);
420:	static unsigned int regmap_parse_64_le(const void *);
432:	static void regmap_parse_64_le_inplace(void *);
439:	static unsigned int regmap_parse_64_native(const void *);
338:	static unsigned int regmap_parse_8(const void *);
334:	static void regmap_parse_inplace_noop(void *);
470:	static void regmap_unlock_hwlock(void *);
477:	static void regmap_unlock_hwlock_irq(void *);
484:	static void regmap_unlock_hwlock_irqrestore(void *);
502:	static void regmap_unlock_mutex(void *);
535:	static void regmap_unlock_raw_spinlock(void *);
518:	static void regmap_unlock_spinlock(void *);

File drivers/base/soc.c:
241:	const struct soc_device_attribute *soc_device_match(const struct soc_device_attribute *);
114:	struct soc_device *soc_device_register(struct soc_device_attribute *);
40:	struct device *soc_device_to_device(struct soc_device *);
172:	void soc_device_unregister(struct soc_device *);
45:	static umode_t soc_attribute_mode(struct kobject *, struct attribute *, int);
179:	static int soc_bus_register(void);
194:	static int soc_device_match_attr(const struct soc_device_attribute *, const struct soc_device_attribute *);
216:	static int soc_device_match_one(struct device *, void *);
67:	static ssize_t soc_info_show(struct device *, struct device_attribute *, char *);
103:	static void soc_release(struct device *);

File drivers/base/swnode.c:
1023:	int device_add_software_node(struct device *, const struct software_node *);
1096:	int device_create_managed_software_node(struct device *, const struct property_entry *, const struct software_node *);
1064:	void device_remove_software_node(struct device *);
975:	struct fwnode_handle *fwnode_create_software_node(const struct property_entry *, const struct fwnode_handle *);
1003:	void fwnode_remove_software_node(struct fwnode_handle *);
39:	bool is_software_node(const struct fwnode_handle *);
312:	struct property_entry *property_entries_dup(const struct property_entry *);
349:	void property_entries_free(const struct property_entry *);
693:	const struct software_node *software_node_find_by_name(const struct software_node *, const char *);
98:	struct fwnode_handle *software_node_fwnode(const struct software_node *);
1120:	void software_node_notify(struct device *);
1142:	void software_node_notify_remove(struct device *);
946:	int software_node_register(const struct software_node *);
893:	int software_node_register_node_group(const struct software_node **);
832:	int software_node_register_nodes(const struct software_node *);
964:	void software_node_unregister(const struct software_node *);
926:	void software_node_unregister_node_group(const struct software_node **);
871:	void software_node_unregister_nodes(const struct software_node *);
90:	const struct software_node *to_software_node(const struct fwnode_handle *);
160:	static int property_entry_read_int_array(const struct property_entry *, const char *, unsigned int, void *, size_t);
1169:	static void software_node_exit(void);
366:	static struct fwnode_handle *software_node_get(struct fwnode_handle *);
412:	static const char *software_node_get_name(const struct fwnode_handle *);
420:	static const char *software_node_get_name_prefix(const struct fwnode_handle *);
474:	static struct fwnode_handle *software_node_get_named_child_node(const struct fwnode_handle *, const char *);
452:	static struct fwnode_handle *software_node_get_next_child(const struct fwnode_handle *, struct fwnode_handle *);
441:	static struct fwnode_handle *software_node_get_parent(const struct fwnode_handle *);
493:	static int software_node_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
574:	static struct fwnode_handle *software_node_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
628:	static struct fwnode_handle *software_node_graph_get_port_parent(struct fwnode_handle *);
609:	static struct fwnode_handle *software_node_graph_get_remote_endpoint(const struct fwnode_handle *);
640:	static int software_node_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
1160:	static int software_node_init(void);
382:	static bool software_node_property_present(const struct fwnode_handle *, const char *);
375:	static void software_node_put(struct fwnode_handle *);
390:	static int software_node_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);
401:	static int software_node_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
745:	static void software_node_release(struct kobject *);
554:	static struct fwnode_handle *swnode_graph_find_next_port(const struct fwnode_handle *, struct fwnode_handle *);
769:	static struct fwnode_handle *swnode_register(const struct software_node *, struct swnode *, unsigned int);

File drivers/base/syscore.c:
21:	void register_syscore_ops(struct syscore_ops *);
114:	void syscore_shutdown(void);
33:	void unregister_syscore_ops(struct syscore_ops *);

File drivers/base/topology.c:
77:	static ssize_t cluster_cpus_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
77:	static ssize_t cluster_cpus_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
54:	static ssize_t cluster_id_show(struct device *, struct device_attribute *, char *);
68:	static ssize_t core_cpus_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
68:	static ssize_t core_cpus_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
58:	static ssize_t core_id_show(struct device *, struct device_attribute *, char *);
72:	static ssize_t core_siblings_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
72:	static ssize_t core_siblings_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
88:	static ssize_t package_cpus_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
88:	static ssize_t package_cpus_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
45:	static ssize_t physical_package_id_show(struct device *, struct device_attribute *, char *);
61:	static ssize_t ppin_show(struct device *, struct device_attribute *, char *);
64:	static ssize_t thread_siblings_list_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
64:	static ssize_t thread_siblings_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
172:	static int topology_add_dev(unsigned int);
155:	static umode_t topology_is_visible(struct kobject *, struct attribute *, int);
179:	static int topology_remove_dev(unsigned int);
187:	static int topology_sysfs_init(void);

File drivers/base/transport_class.c:
91:	int anon_transport_class_register(struct anon_transport_class *);
113:	void anon_transport_class_unregister(struct anon_transport_class *);
179:	int transport_add_device(struct device *);
51:	int transport_class_register(struct transport_class *);
65:	void transport_class_unregister(struct transport_class *);
212:	void transport_configure_device(struct device *);
280:	void transport_destroy_device(struct device *);
251:	void transport_remove_device(struct device *);
148:	void transport_setup_device(struct device *);
71:	static int anon_transport_dummy_function(struct transport_container *, struct device *, struct device *);
154:	static int transport_add_class_device(struct attribute_container *, struct device *, struct device *);
187:	static int transport_configure(struct attribute_container *, struct device *, struct device *);
257:	static void transport_destroy_classdev(struct attribute_container *, struct device *, struct device *);
218:	static int transport_remove_classdev(struct attribute_container *, struct device *, struct device *);
120:	static int transport_setup_classdev(struct attribute_container *, struct device *, struct device *);

File drivers/block/loop.c:
1136:	static void __loop_clr_fd(struct loop_device *, bool);
168:	static void __loop_update_dio(struct loop_device *, bool);
339:	static void lo_complete_rq(struct request *);
1751:	static void lo_free_disk(struct gendisk *);
1531:	static int lo_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
1730:	static void lo_release(struct gendisk *, fmode_t);
394:	static int lo_rw_aio(struct loop_device *, struct loop_cmd *, loff_t, int);
386:	static void lo_rw_aio_complete(struct kiocb *, long);
1947:	static int loop_add(int);
725:	static ssize_t loop_attr_do_show_autoclear(struct device *, struct device_attribute *, char *);
722:	static ssize_t loop_attr_do_show_backing_file(struct device *, struct device_attribute *, char *);
727:	static ssize_t loop_attr_do_show_dio(struct device *, struct device_attribute *, char *);
723:	static ssize_t loop_attr_do_show_offset(struct device *, struct device_attribute *, char *);
726:	static ssize_t loop_attr_do_show_partscan(struct device *, struct device_attribute *, char *);
724:	static ssize_t loop_attr_do_show_sizelimit(struct device *, struct device_attribute *, char *);
757:	static void loop_config_discard(struct loop_device *);
993:	static int loop_configure(struct loop_device *, fmode_t, struct block_device *, const struct loop_config *);
2159:	static long loop_control_ioctl(struct file *, unsigned int, unsigned long);
2244:	static void loop_exit(void);
906:	static void loop_free_idle_workers(struct loop_device *, bool);
927:	static void loop_free_idle_workers_timer(struct timer_list *);
1328:	static int loop_get_status(struct loop_device *, struct loop_info64 *);
2191:	static int loop_init(void);
2083:	static void loop_probe(dev_t);
1894:	static void loop_process_work(struct loop_worker *, struct list_head *, struct loop_device *);
1811:	static blk_status_t loop_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
513:	static void loop_reread_partitions(struct loop_device *);
1935:	static void loop_rootcg_workfn(struct work_struct *);
1793:	static int loop_set_hw_queue_depth(const char *, const struct kernel_param *);
235:	static void loop_set_size(struct loop_device *, loff_t);
1262:	static int loop_set_status(struct loop_device *, const struct loop_info64 *);
961:	static int loop_set_status_from_info(struct loop_device *, const struct loop_info64 *);
934:	static void loop_update_rotational(struct loop_device *);
1928:	static void loop_workfn(struct work_struct *);
2268:	static int max_loop_setup(char *);

File drivers/block/nbd.c:
234:	static ssize_t backend_show(struct device *, struct device_attribute *, char *);
1105:	static int nbd_add_socket(struct nbd_device *, unsigned long, bool);
2543:	static void nbd_cleanup(void);
883:	static bool nbd_clear_req(struct request *, void *);
348:	static void nbd_complete_rq(struct request *);
1299:	static void nbd_config_put(struct nbd_device *);
1652:	static int nbd_dbg_flags_open(struct inode *, struct file *);
1629:	static int nbd_dbg_flags_show(struct seq_file *, void *);
1627:	static int nbd_dbg_tasks_open(struct inode *, struct file *);
1617:	static int nbd_dbg_tasks_show(struct seq_file *, void *);
2470:	static void nbd_dead_link_work(struct work_struct *);
1741:	static struct nbd_device *nbd_dev_add(int, unsigned int);
267:	static void nbd_dev_remove_work(struct work_struct *);
1281:	static int nbd_disconnect(struct nbd_device *);
2098:	static void nbd_disconnect_and_put(struct nbd_device *);
2531:	static int nbd_exit_cb(int, void *, void *);
1913:	static int nbd_genl_connect(struct sk_buff *, struct genl_info *);
2118:	static int nbd_genl_disconnect(struct sk_buff *, struct genl_info *);
2153:	static int nbd_genl_reconfigure(struct sk_buff *, struct genl_info *);
2368:	static int nbd_genl_status(struct sk_buff *, struct genl_info *);
2478:	static int nbd_init(void);
1724:	static int nbd_init_request(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
1499:	static int nbd_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
290:	static void nbd_mark_nsock_dead(struct nbd_device *, struct nbd_sock *, int);
1550:	static int nbd_open(struct block_device *, fmode_t);
272:	static void nbd_put(struct nbd_device *);
1052:	static blk_status_t nbd_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
1594:	static void nbd_release(struct gendisk *, fmode_t);
179:	static void nbd_requeue_cmd(struct nbd_cmd *);
319:	static int nbd_set_size(struct nbd_device *, loff_t, loff_t);
1340:	static int nbd_start_device(struct nbd_device *);
396:	static enum blk_eh_timer_return nbd_xmit_timeout(struct request *);
220:	static ssize_t pid_show(struct device *, struct device_attribute *, char *);
822:	static void recv_work(struct work_struct *);
361:	static void sock_shutdown(struct nbd_device *);
494:	static int sock_xmit(struct nbd_device *, int, int, struct iov_iter *, int, int *);
2362:	static int status_cb(int, void *, void *);

File drivers/block/virtio_blk.c:
770:	static ssize_t cache_type_show(struct device *, struct device_attribute *, char *);
751:	static ssize_t cache_type_store(struct device *, struct device_attribute *, const char *, size_t);
541:	static ssize_t serial_show(struct device *, struct device_attribute *, char *);
788:	static umode_t virtblk_attrs_are_visible(struct kobject *, struct attribute *, int);
840:	static void virtblk_complete_batch(struct io_comp_batch *);
602:	static void virtblk_config_changed(struct virtio_device *);
594:	static void virtblk_config_changed_work(struct work_struct *);
275:	static void virtblk_done(struct virtqueue *);
516:	static void virtblk_free_disk(struct gendisk *);
485:	static int virtblk_getgeo(struct block_device *, struct hd_geometry *);
813:	static void virtblk_map_queues(struct blk_mq_tag_set *);
851:	static int virtblk_poll(struct blk_mq_hw_ctx *, struct io_comp_batch *);
331:	static blk_status_t virtblk_prep_rq(struct blk_mq_hw_ctx *, struct virtio_blk *, struct request *, struct virtblk_req *);
891:	static int virtblk_probe(struct virtio_device *);
1176:	static void virtblk_remove(struct virtio_device *);
266:	static void virtblk_request_done(struct request *);
564:	static void virtblk_update_capacity(struct virtio_blk *, bool);
1301:	static void virtio_blk_fini(void);
1275:	static int virtio_blk_init(void);
304:	static void virtio_commit_rqs(struct blk_mq_hw_ctx *);
353:	static blk_status_t virtio_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
429:	static void virtio_queue_rqs(struct request **);

File drivers/bluetooth/btbcm.c:
37:	int btbcm_check_bdaddr(struct hci_dev *);
655:	int btbcm_finalize(struct hci_dev *, bool *, bool);
526:	int btbcm_initialize(struct hci_dev *, bool *, bool);
164:	int btbcm_patchram(struct hci_dev *, const struct firmware *);
118:	int btbcm_read_pcm_int_params(struct hci_dev *, struct bcm_set_pcm_int_params *);
101:	int btbcm_set_bdaddr(struct hci_dev *, const bdaddr_t *);
690:	int btbcm_setup_apple(struct hci_dev *);
674:	int btbcm_setup_patchram(struct hci_dev *);
146:	int btbcm_write_pcm_int_params(struct hci_dev *, const struct bcm_set_pcm_int_params *);
328:	static struct sk_buff *btbcm_read_usb_product(struct hci_dev *);

File drivers/bluetooth/btintel.c:
2627:	void btintel_bootup(struct hci_dev *, const void *, unsigned int);
35:	int btintel_check_bdaddr(struct hci_dev *);
2614:	int btintel_configure_setup(struct hci_dev *);
1060:	int btintel_download_firmware(struct hci_dev *, struct intel_version *, const struct firmware *, u32 *);
74:	int btintel_enter_mfg(struct hci_dev *);
91:	int btintel_exit_mfg(struct hci_dev *, bool, bool);
340:	int btintel_load_ddc_config(struct hci_dev *, const char *);
854:	int btintel_read_boot_params(struct hci_dev *, struct intel_boot_params *);
403:	int btintel_read_version(struct hci_dev *, struct intel_version *);
814:	struct regmap *btintel_regmap_init(struct hci_dev *, u16, u16);
2639:	void btintel_secure_send_result(struct hci_dev *, const void *, unsigned int);
834:	int btintel_send_intel_reset(struct hci_dev *, u32);
116:	int btintel_set_bdaddr(struct hci_dev *, const bdaddr_t *);
154:	int btintel_set_diag(struct hci_dev *, bool);
385:	int btintel_set_event_mask_mfg(struct hci_dev *, bool);
1371:	int btintel_set_quality_report(struct hci_dev *, bool);
254:	int btintel_version_info(struct hci_dev *, struct intel_version *);
1747:	static int btintel_boot(struct hci_dev *, u32);
1972:	static int btintel_bootloader_setup(struct hci_dev *, struct intel_version *);
2254:	static int btintel_bootloader_setup_tlv(struct hci_dev *, struct intel_version_tlv *);
976:	static int btintel_download_firmware_payload(struct hci_dev *, const struct firmware *, size_t);
1680:	static int btintel_download_wait(struct hci_dev *, ktime_t, int);
2164:	static int btintel_get_codec_config_data(struct hci_dev *, __u8, struct bt_codec *, __u8 *, __u8 **);
2213:	static int btintel_get_data_path_id(struct hci_dev *, __u8 *);
221:	static void btintel_hw_error(struct hci_dev *, u8);
1550:	static int btintel_legacy_rom_setup(struct hci_dev *, struct intel_version *);
508:	static int btintel_parse_version_tlv(struct hci_dev *, struct intel_version_tlv *, struct sk_buff *);
1206:	static void btintel_reset_to_bootloader(struct hci_dev *);
204:	static int btintel_set_diag_combined(struct hci_dev *, bool);
2343:	static int btintel_setup_combined(struct hci_dev *);
941:	static int btintel_sfi_ecdsa_header_secure_send(struct hci_dev *, const struct firmware *);
905:	static int btintel_sfi_rsa_header_secure_send(struct hci_dev *, const struct firmware *);
2579:	static int btintel_shutdown_combined(struct hci_dev *);
428:	static int btintel_version_info_tlv(struct hci_dev *, struct intel_version_tlv *);
793:	static void regmap_ibt_free_context(void *);
728:	static int regmap_ibt_gather_write(void *, const void *, size_t, const void *, size_t);
664:	static int regmap_ibt_read(void *, const void *, size_t, void *, size_t);
782:	static int regmap_ibt_write(void *, const void *, size_t);

File drivers/bluetooth/btmrvl_debugfs.c:
139:	void btmrvl_debugfs_init(struct hci_dev *);
181:	void btmrvl_debugfs_remove(struct hci_dev *);
41:	static ssize_t btmrvl_hscfgcmd_read(struct file *, char *, size_t, loff_t *);
21:	static ssize_t btmrvl_hscfgcmd_write(struct file *, const char *, size_t, loff_t *);
120:	static ssize_t btmrvl_hscmd_read(struct file *, char *, size_t, loff_t *);
101:	static ssize_t btmrvl_hscmd_write(struct file *, const char *, size_t, loff_t *);
82:	static ssize_t btmrvl_pscmd_read(struct file *, char *, size_t, loff_t *);
61:	static ssize_t btmrvl_pscmd_write(struct file *, const char *, size_t, loff_t *);

File drivers/bluetooth/btmrvl_main.c:
717:	struct btmrvl_private *btmrvl_add_card(void *);
41:	bool btmrvl_check_evtpkt(struct btmrvl_private *, struct sk_buff *);
286:	int btmrvl_enable_hs(struct btmrvl_private *);
268:	int btmrvl_enable_ps(struct btmrvl_private *);
24:	void btmrvl_interrupt(struct btmrvl_private *);
319:	int btmrvl_prepare_command(struct btmrvl_private *);
70:	int btmrvl_process_event(struct btmrvl_private *, struct sk_buff *);
232:	int btmrvl_pscan_window_reporting(struct btmrvl_private *, u8);
664:	int btmrvl_register_hdev(struct btmrvl_private *);
761:	int btmrvl_remove_card(struct btmrvl_private *);
249:	int btmrvl_send_hscfg_cmd(struct btmrvl_private *);
208:	int btmrvl_send_module_cfg_cmd(struct btmrvl_private *, u8);
456:	static int btmrvl_close(struct hci_dev *);
447:	static int btmrvl_flush(struct hci_dev *);
465:	static int btmrvl_open(struct hci_dev *);
414:	static int btmrvl_send_frame(struct hci_dev *, struct sk_buff *);
162:	static int btmrvl_send_sync_cmd(struct btmrvl_private *, u16, const void *, u8);
589:	static int btmrvl_service_main_thread(void *);
554:	static int btmrvl_set_bdaddr(struct hci_dev *, const bdaddr_t *);
529:	static int btmrvl_setup(struct hci_dev *);
577:	static bool btmrvl_wakeup(struct hci_dev *);

File drivers/bluetooth/btmrvl_sdio.c:
1329:	static void btmrvl_sdio_coredump(struct device *);
1071:	static int btmrvl_sdio_disable_host_int(struct btmrvl_sdio_card *);
1758:	static void btmrvl_sdio_exit_module(void);
1087:	static int btmrvl_sdio_host_to_card(struct btmrvl_private *, u8 *, u16);
1745:	static int btmrvl_sdio_init_module(void);
899:	static void btmrvl_sdio_interrupt(struct sdio_func *);
1509:	static int btmrvl_sdio_probe(struct sdio_func *, const struct sdio_device_id *);
824:	static int btmrvl_sdio_process_int_status(struct btmrvl_private *);
1280:	static enum rdwr_status btmrvl_sdio_rdwr_firmware(struct btmrvl_private *, u8);
1583:	static void btmrvl_sdio_remove(struct sdio_func *);
1677:	static int btmrvl_sdio_resume(struct device *);
1607:	static int btmrvl_sdio_suspend(struct device *);
437:	static int btmrvl_sdio_verify_fw_download(struct btmrvl_sdio_card *, int);
1208:	static int btmrvl_sdio_wakeup_fw(struct btmrvl_private *);
49:	static irqreturn_t btmrvl_wake_irq_bt(int, void *);

File drivers/bluetooth/btqca.c:
18:	int qca_read_soc_version(struct hci_dev *, struct qca_btsoc_version *, enum qca_btsoc_type);
208:	int qca_send_pre_shutdown_cmd(struct hci_dev *);
701:	int qca_set_bdaddr(struct hci_dev *, const bdaddr_t *);
553:	int qca_set_bdaddr_rome(struct hci_dev *, const bdaddr_t *);
577:	int qca_uart_setup(struct hci_dev *, uint8_t, enum qca_btsoc_type, struct qca_btsoc_version, const char *);
445:	static int qca_download_firmware(struct hci_dev *, struct qca_fw_config *, enum qca_btsoc_type, u8);

File drivers/bluetooth/btrtl.c:
736:	int btrtl_download_firmware(struct hci_dev *, struct btrtl_device_info *);
590:	void btrtl_free(struct btrtl_device_info *);
876:	int btrtl_get_uart_settings(struct hci_dev *, struct btrtl_device_info *, unsigned int *, u32 *, bool *);
598:	struct btrtl_device_info *btrtl_initialize(struct hci_dev *, const char *);
766:	void btrtl_set_quirks(struct hci_dev *, struct btrtl_device_info *);
801:	int btrtl_setup_realtek(struct hci_dev *);
819:	int btrtl_shutdown_realtek(struct hci_dev *);
446:	static int rtl_download_firmware(struct hci_dev *, const unsigned char *, int);

File drivers/bluetooth/btusb.c:
3601:	static int __set_diag_interface(struct hci_dev *);
1984:	static int __set_isoc_interface(struct hci_dev *, int);
1849:	static struct urb *alloc_isoc_urb(struct hci_dev *, struct sk_buff *);
3670:	static int btusb_bcm_set_diag(struct hci_dev *, bool);
1282:	static void btusb_bulk_complete(struct urb *);
1739:	static int btusb_close(struct hci_dev *);
1536:	static void btusb_diag_complete(struct urb *);
4197:	static void btusb_disconnect(struct usb_interface *);
4399:	static void btusb_driver_exit(void);
4399:	static int btusb_driver_init(void);
1777:	static int btusb_flush(struct hci_dev *);
820:	static void btusb_intel_cmd_timeout(struct hci_dev *);
1166:	static void btusb_intr_complete(struct urb *);
1371:	static void btusb_isoc_complete(struct urb *);
1654:	static void btusb_isoc_tx_complete(struct urb *);
1971:	static void btusb_notify(struct hci_dev *, unsigned int);
1676:	static int btusb_open(struct hci_dev *);
3821:	static int btusb_probe(struct usb_interface *, const struct usb_device_id *);
881:	static void btusb_qca_cmd_timeout(struct hci_dev *);
1011:	static int btusb_recv_bulk(struct btusb_data *, void *, int);
2363:	static int btusb_recv_bulk_intel(struct btusb_data *, void *, int);
2378:	static int btusb_recv_event_intel(struct hci_dev *, struct sk_buff *);
941:	static int btusb_recv_intr(struct btusb_data *, void *, int);
851:	static void btusb_rtl_cmd_timeout(struct hci_dev *);
2158:	static void btusb_rx_work(struct work_struct *);
1926:	static int btusb_send_frame(struct hci_dev *, struct sk_buff *);
2411:	static int btusb_send_frame_intel(struct hci_dev *, struct sk_buff *);
3201:	static int btusb_set_bdaddr_ath3012(struct hci_dev *, const bdaddr_t *);
3178:	static int btusb_set_bdaddr_marvell(struct hci_dev *, const bdaddr_t *);
3225:	static int btusb_set_bdaddr_wcn6855(struct hci_dev *, const bdaddr_t *);
2169:	static int btusb_setup_bcm92035(struct hci_dev *);
2185:	static int btusb_setup_csr(struct hci_dev *);
3531:	static int btusb_setup_qca(struct hci_dev *);
3326:	static int btusb_setup_qca_download_fw(struct hci_dev *, const struct firmware *, size_t);
2478:	static int btusb_setup_realtek(struct hci_dev *);
3764:	static int btusb_shutdown_qca(struct hci_dev *);
1325:	static int btusb_submit_bulk_urb(struct hci_dev *, gfp_t);
1485:	static int btusb_submit_isoc_urb(struct hci_dev *, gfp_t);
1623:	static void btusb_tx_complete(struct urb *);
2146:	static void btusb_waker(struct work_struct *);
3757:	static bool btusb_wakeup(struct hci_dev *);
2086:	static void btusb_work(struct work_struct *);
3778:	static ssize_t force_poll_sync_read(struct file *, char *, size_t, loff_t *);
3790:	static ssize_t force_poll_sync_write(struct file *, const char *, size_t, loff_t *);
1904:	static int submit_or_queue_tx_urb(struct hci_dev *, struct urb *);
1882:	static int submit_tx_urb(struct hci_dev *, struct urb *);

File drivers/bluetooth/hci_bcm.c:
1608:	int bcm_deinit(void);
1597:	int bcm_init(void);
525:	static int bcm_close(struct hci_uart *);
732:	static struct sk_buff *bcm_dequeue(struct hci_uart *);
719:	static int bcm_enqueue(struct hci_uart *, struct sk_buff *);
568:	static int bcm_flush(struct hci_uart *);
1062:	static int bcm_get_resources(struct bcm_device *);
1022:	static int bcm_gpio_set_device_wakeup(struct bcm_device *, bool);
247:	static int bcm_gpio_set_power(struct bcm_device *, bool);
1028:	static int bcm_gpio_set_shutdown(struct bcm_device *, bool);
439:	static int bcm_open(struct hci_uart *);
1228:	static int bcm_probe(struct platform_device *);
691:	static int bcm_recv(struct hci_uart *, const void *, int);
1274:	static int bcm_remove(struct platform_device *);
1491:	static int bcm_serdev_probe(struct serdev_device *);
1543:	static void bcm_serdev_remove(struct serdev_device *);
176:	static int bcm_set_baudrate(struct hci_uart *, unsigned int);
416:	static int bcm_set_diag(struct hci_dev *, bool);
579:	static int bcm_setup(struct hci_uart *);

File drivers/bluetooth/hci_h4.c:
149:	int h4_deinit(void);
144:	int h4_init(void);
154:	struct sk_buff *h4_recv_buf(struct hci_dev *, struct sk_buff *, const unsigned char *, int, const struct h4_recv_pkt *, int);
70:	static int h4_close(struct hci_uart *);
127:	static struct sk_buff *h4_dequeue(struct hci_uart *);
87:	static int h4_enqueue(struct hci_uart *, struct sk_buff *);
58:	static int h4_flush(struct hci_uart *);
41:	static int h4_open(struct hci_uart *);
108:	static int h4_recv(struct hci_uart *, const void *, int);

File drivers/bluetooth/hci_ldisc.c:
295:	bool hci_uart_has_flow_control(struct hci_uart *);
206:	int hci_uart_init_ready(struct hci_uart *);
183:	void hci_uart_init_work(struct work_struct *);
42:	int hci_uart_register_proto(const struct hci_uart_proto *);
373:	void hci_uart_set_baudrate(struct hci_uart *, unsigned int);
308:	void hci_uart_set_flow_control(struct hci_uart *, bool);
366:	void hci_uart_set_speeds(struct hci_uart *, unsigned int, unsigned int);
116:	int hci_uart_tx_wakeup(struct hci_uart *);
57:	int hci_uart_unregister_proto(const struct hci_uart_proto *);
216:	int hci_uart_wait_until_sent(struct hci_uart *);
262:	static int hci_uart_close(struct hci_dev *);
889:	static void hci_uart_exit(void);
225:	static int hci_uart_flush(struct hci_dev *);
842:	static int hci_uart_init(void);
251:	static int hci_uart_open(struct hci_dev *);
272:	static int hci_uart_send_frame(struct hci_dev *, struct sk_buff *);
389:	static int hci_uart_setup(struct hci_dev *);
524:	static void hci_uart_tty_close(struct tty_struct *);
750:	static int hci_uart_tty_ioctl(struct tty_struct *, unsigned int, unsigned long);
476:	static int hci_uart_tty_open(struct tty_struct *);
821:	static __poll_t hci_uart_tty_poll(struct tty_struct *, struct file *, poll_table *);
808:	static ssize_t hci_uart_tty_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
601:	static void hci_uart_tty_receive(struct tty_struct *, const u8 *, const char *, int);
571:	static void hci_uart_tty_wakeup(struct tty_struct *);
815:	static ssize_t hci_uart_tty_write(struct tty_struct *, struct file *, const unsigned char *, size_t);
145:	static void hci_uart_write_work(struct work_struct *);

File drivers/bluetooth/hci_ll.c:
817:	int ll_deinit(void);
810:	int ll_init(void);
685:	static int hci_ti_probe(struct serdev_device *);
762:	static void hci_ti_remove(struct serdev_device *);
153:	static int ll_close(struct hci_uart *);
444:	static struct sk_buff *ll_dequeue(struct hci_uart *);
310:	static int ll_enqueue(struct hci_uart *, struct sk_buff *);
140:	static int ll_flush(struct hci_uart *);
111:	static int ll_open(struct hci_uart *);
425:	static int ll_recv(struct hci_uart *, const void *, int);
357:	static int ll_recv_frame(struct hci_dev *, struct sk_buff *);
590:	static int ll_set_bdaddr(struct hci_dev *, const bdaddr_t *);
608:	static int ll_setup(struct hci_uart *);

File drivers/bluetooth/hci_mrvl.c:
441:	int mrvl_deinit(void);
434:	int mrvl_init(void);
89:	static int mrvl_close(struct hci_uart *);
119:	static struct sk_buff *mrvl_dequeue(struct hci_uart *);
136:	static int mrvl_enqueue(struct hci_uart *, struct sk_buff *);
107:	static int mrvl_flush(struct hci_uart *);
270:	static int mrvl_load_firmware(struct hci_dev *, const char *);
55:	static int mrvl_open(struct hci_uart *);
250:	static int mrvl_recv(struct hci_uart *, const void *, int);
193:	static int mrvl_recv_chip_ver(struct hci_dev *, struct sk_buff *);
161:	static int mrvl_recv_fw_req(struct hci_dev *, struct sk_buff *);
396:	static int mrvl_serdev_probe(struct serdev_device *);
410:	static void mrvl_serdev_remove(struct serdev_device *);
354:	static int mrvl_setup(struct hci_uart *);

File drivers/bluetooth/hci_qca.c:
2373:	int qca_deinit(void);
2366:	int qca_init(void);
458:	static void hci_ibs_tx_idle_timeout(struct timer_list *);
491:	static void hci_ibs_wake_retrans_timeout(struct timer_list *);
688:	static int qca_close(struct hci_uart *);
1555:	static void qca_cmd_timeout(struct hci_dev *);
979:	static void qca_controller_memdump(struct work_struct *);
537:	static void qca_controller_memdump_timeout(struct work_struct *);
1241:	static struct sk_buff *qca_dequeue(struct hci_uart *);
862:	static int qca_enqueue(struct hci_uart *, struct sk_buff *);
675:	static int qca_flush(struct hci_uart *);
1506:	static void qca_hw_error(struct hci_dev *, u8);
930:	static int qca_ibs_sleep_ind(struct hci_dev *, struct sk_buff *);
954:	static int qca_ibs_wake_ack(struct hci_dev *, struct sk_buff *);
942:	static int qca_ibs_wake_ind(struct hci_dev *, struct sk_buff *);
559:	static int qca_open(struct hci_uart *);
1929:	static int qca_power_off(struct hci_dev *);
1885:	static void qca_power_shutdown(struct hci_uart *);
1222:	static int qca_recv(struct hci_uart *, const void *, int);
966:	static int qca_recv_acl_data(struct hci_dev *, struct sk_buff *);
1155:	static int qca_recv_event(struct hci_dev *, struct sk_buff *);
1470:	static int qca_send_crashbuffer(struct hci_uart *);
1336:	static int qca_send_power_pulse(struct hci_uart *, bool);
2025:	static int qca_serdev_probe(struct serdev_device *);
2146:	static void qca_serdev_remove(struct serdev_device *);
2161:	static void qca_serdev_shutdown(struct device *);
1699:	static int qca_setup(struct hci_uart *);
1586:	static bool qca_wakeup(struct hci_dev *);
371:	static void qca_wq_awake_device(struct work_struct *);
402:	static void qca_wq_awake_rx(struct work_struct *);
430:	static void qca_wq_serial_rx_clock_vote_off(struct work_struct *);
441:	static void qca_wq_serial_tx_clock_vote_off(struct work_struct *);

File drivers/bluetooth/hci_serdev.c:
303:	int hci_uart_register_device(struct hci_uart *, const struct hci_uart_proto *);
399:	void hci_uart_unregister_device(struct hci_uart *);
139:	static int hci_uart_close(struct hci_dev *);
94:	static int hci_uart_flush(struct hci_dev *);
114:	static int hci_uart_open(struct hci_dev *);
274:	static int hci_uart_receive_buf(struct serdev_device *, const u8 *, size_t);
164:	static int hci_uart_send_frame(struct hci_dev *, struct sk_buff *);
178:	static int hci_uart_setup(struct hci_dev *);
235:	static bool hci_uart_wakeup(struct hci_dev *);
249:	static void hci_uart_write_wakeup(struct serdev_device *);
57:	static void hci_uart_write_work(struct work_struct *);

File drivers/bus/arm-cci.c:
578:	bool cci_probed(void);
560:	static int cci_init(void);
86:	static int cci_platform_init(void);
69:	static int cci_platform_probe(struct platform_device *);

File drivers/bus/brcmstb_gisb.c:
542:	static int brcm_gisb_driver_init(void);
238:	static int brcmstb_gisb_arb_decode_addr(struct brcmstb_gisb_arb_device *, const char *);
399:	static int brcmstb_gisb_arb_probe(struct platform_device *);
312:	static irqreturn_t brcmstb_gisb_bp_handler(int, void *);
305:	static irqreturn_t brcmstb_gisb_tea_handler(int, void *);
298:	static irqreturn_t brcmstb_gisb_timeout_handler(int, void *);
361:	static int dump_gisb_error(struct notifier_block *, unsigned long, void *);
191:	static ssize_t gisb_arb_get_timeout(struct device *, struct device_attribute *, char *);
205:	static ssize_t gisb_arb_set_timeout(struct device *, struct device_attribute *, const char *, size_t);

File drivers/bus/mhi/host/../common.h:
300:	static const char *mhi_state_str(enum mhi_state);

File drivers/bus/mhi/host/boot.c:
313:	int mhi_alloc_bhie_table(struct mhi_controller *, struct image_info **, size_t);
515:	int mhi_download_amss_image(struct mhi_controller *);
157:	int mhi_download_rddm_image(struct mhi_controller *, bool);
299:	void mhi_free_bhie_table(struct mhi_controller *, struct image_info *);
390:	void mhi_fw_load_handler(struct mhi_controller *);
22:	int mhi_rddm_prepare(struct mhi_controller *, struct image_info *);

File drivers/bus/mhi/host/init.c:
1376:	int __mhi_driver_register(struct mhi_driver *, struct module *);
1066:	struct mhi_controller *mhi_alloc_controller(void);
1202:	struct mhi_device *mhi_alloc_device(struct mhi_controller *);
569:	void mhi_deinit_chan_ctxt(struct mhi_controller *, struct mhi_chan *);
226:	void mhi_deinit_dev_ctxt(struct mhi_controller *);
148:	void mhi_deinit_free_irq(struct mhi_controller *);
1392:	void mhi_driver_unregister(struct mhi_driver *);
1076:	void mhi_free_controller(struct mhi_controller *);
604:	int mhi_init_chan_ctxt(struct mhi_controller *, struct mhi_chan *);
271:	int mhi_init_dev_ctxt(struct mhi_controller *);
163:	int mhi_init_irq_setup(struct mhi_controller *);
439:	int mhi_init_mmio(struct mhi_controller *);
1082:	int mhi_prepare_for_power_up(struct mhi_controller *);
890:	int mhi_register_controller(struct mhi_controller *, const struct mhi_controller_config *);
1164:	void mhi_unprepare_after_power_down(struct mhi_controller *);
1037:	void mhi_unregister_controller(struct mhi_controller *);
69:	const char *to_mhi_pm_state_str(u32);
1230:	static int mhi_driver_probe(struct device *);
1306:	static int mhi_driver_remove(struct device *);
1442:	static void mhi_exit(void);
1436:	static int mhi_init(void);
1406:	static int mhi_match(struct device *, struct device_driver *);
1183:	static void mhi_release_device(struct device *);
1398:	static int mhi_uevent(struct device *, struct kobj_uevent_env *);
94:	static ssize_t oem_pk_hash_show(struct device *, struct device_attribute *, char *);
853:	static int parse_config(struct mhi_controller *, const struct mhi_controller_config *);
82:	static ssize_t serial_number_show(struct device *, struct device_attribute *, char *);
110:	static ssize_t soc_reset_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/bus/mhi/host/main.c:
360:	void mhi_create_devices(struct mhi_controller *);
1052:	void mhi_ctrl_ev_task(unsigned long);
93:	void mhi_db_brstmode(struct mhi_controller *, struct db_cfg *, void *, dma_addr_t);
105:	void mhi_db_brstmode_disable(struct mhi_controller *, struct db_cfg *, void *, dma_addr_t);
274:	int mhi_destroy_device(struct device *, void *);
1041:	void mhi_ev_task(unsigned long);
1195:	int mhi_gen_tre(struct mhi_controller *, struct mhi_chan *, struct mhi_buf_info *, enum mhi_flags);
151:	enum mhi_ee_type mhi_get_exec_env(struct mhi_controller *);
333:	int mhi_get_free_desc_count(struct mhi_device *, enum dma_data_direction);
160:	enum mhi_state mhi_get_mhi_state(struct mhi_controller *);
537:	irqreturn_t mhi_intvec_handler(int, void *);
478:	irqreturn_t mhi_intvec_threaded_handler(int, void *);
429:	irqreturn_t mhi_irq_handler(int, void *);
182:	int mhi_map_single_no_bb(struct mhi_controller *, struct mhi_buf_info *);
194:	int mhi_map_single_use_bb(struct mhi_controller *, struct mhi_buf_info *);
345:	void mhi_notify(struct mhi_device *, enum mhi_callback);
1683:	int mhi_poll(struct mhi_device *, u32);
41:	int mhi_poll_reg_field(struct mhi_controller *, void *, u32, u32, u32, u32);
1441:	int mhi_prepare_channel(struct mhi_controller *, struct mhi_chan *, unsigned int);
1655:	int mhi_prepare_for_transfer(struct mhi_device *);
1661:	int mhi_prepare_for_transfer_autoqueue(struct mhi_device *);
801:	int mhi_process_ctrl_ev_ring(struct mhi_controller *, struct mhi_event *, u32);
971:	int mhi_process_data_event_ring(struct mhi_controller *, struct mhi_event *, u32);
1242:	int mhi_queue_buf(struct mhi_device *, enum dma_data_direction, void *, size_t, enum mhi_flags);
1176:	int mhi_queue_dma(struct mhi_device *, enum dma_data_direction, struct mhi_buf *, size_t, enum mhi_flags);
1255:	bool mhi_queue_is_full(struct mhi_device *, enum dma_data_direction);
1158:	int mhi_queue_skb(struct mhi_device *, enum dma_data_direction, struct sk_buff *, size_t, enum mhi_flags);
19:	int mhi_read_reg(struct mhi_controller *, void *, u32, u32 *);
25:	int mhi_read_reg_field(struct mhi_controller *, void *, u32, u32, u32 *);
1604:	void mhi_reset_chan(struct mhi_controller *, struct mhi_chan *);
132:	void mhi_ring_chan_db(struct mhi_controller *, struct mhi_chan *);
122:	void mhi_ring_cmd_db(struct mhi_controller *, struct mhi_cmd *);
114:	void mhi_ring_er_db(struct mhi_event *);
1266:	int mhi_send_cmd(struct mhi_controller *, struct mhi_chan *, enum mhi_cmd_type);
169:	void mhi_soc_reset(struct mhi_controller *);
211:	void mhi_unmap_single_no_bb(struct mhi_controller *, struct mhi_buf_info *);
218:	void mhi_unmap_single_use_bb(struct mhi_controller *, struct mhi_buf_info *);
1667:	void mhi_unprepare_from_transfer(struct mhi_device *);
86:	void mhi_write_db(struct mhi_controller *, void *, dma_addr_t);
62:	void mhi_write_reg(struct mhi_controller *, void *, u32, u32);
68:	int mhi_write_reg_field(struct mhi_controller *, void *, u32, u32, u32);
1109:	static int mhi_queue(struct mhi_device *, struct mhi_buf_info *, enum dma_data_direction, enum mhi_flags);
1406:	static void mhi_unprepare_channel(struct mhi_controller *, struct mhi_chan *);
1319:	static int mhi_update_channel_state(struct mhi_controller *, struct mhi_chan *, enum mhi_ch_state_type);
702:	static int parse_rsc_event(struct mhi_controller *, struct mhi_ring_element *, struct mhi_chan *);
567:	static int parse_xfer_event(struct mhi_controller *, struct mhi_ring_element *, struct mhi_chan *);

File drivers/bus/mhi/host/pm.c:
972:	int __mhi_device_get_sync(struct mhi_controller *);
1062:	int mhi_async_power_up(struct mhi_controller *);
1239:	void mhi_device_get(struct mhi_device *);
1253:	int mhi_device_get_sync(struct mhi_device *);
1266:	void mhi_device_put(struct mhi_device *);
1217:	int mhi_force_rddm_mode(struct mhi_controller *);
247:	int mhi_pm_m0_transition(struct mhi_controller *);
322:	void mhi_pm_m1_transition(struct mhi_controller *);
358:	int mhi_pm_m3_transition(struct mhi_controller *);
960:	int mhi_pm_resume(struct mhi_controller *);
966:	int mhi_pm_resume_force(struct mhi_controller *);
744:	void mhi_pm_st_worker(struct work_struct *);
808:	int mhi_pm_suspend(struct mhi_controller *);
730:	void mhi_pm_sys_err_handler(struct mhi_controller *);
1152:	void mhi_power_down(struct mhi_controller *, bool);
710:	int mhi_queue_state_transition(struct mhi_controller *, enum dev_st_transition);
160:	int mhi_ready_state_transition(struct mhi_controller *);
130:	void mhi_set_mhi_state(struct mhi_controller *, enum mhi_state);
1197:	int mhi_sync_power_up(struct mhi_controller *);
111:	enum mhi_pm_state mhi_tryset_pm_state(struct mhi_controller *, enum mhi_pm_state);
896:	static int __mhi_pm_resume(struct mhi_controller *, bool);
1003:	static void mhi_assert_dev_wake(struct mhi_controller *, bool);
1040:	static void mhi_deassert_dev_wake(struct mhi_controller *, bool);
153:	static void mhi_toggle_dev_wake(struct mhi_controller *);
149:	static void mhi_toggle_dev_wake_nop(struct mhi_controller *);

File drivers/bus/simple-pm-bus.c:
91:	static void simple_pm_bus_driver_exit(void);
91:	static int simple_pm_bus_driver_init(void);
16:	static int simple_pm_bus_probe(struct platform_device *);
57:	static int simple_pm_bus_remove(struct platform_device *);

File drivers/bus/vexpress-config.c:
130:	struct regmap *devm_regmap_init_vexpress_config(struct device *);
122:	static void vexpress_config_devres_release(struct device *, void *);
80:	static void vexpress_config_lock(void *);
85:	static void vexpress_config_unlock(void *);
418:	static void vexpress_syscfg_driver_exit(void);
418:	static int vexpress_syscfg_driver_init(void);
158:	static int vexpress_syscfg_exec(struct vexpress_syscfg_func *, int, bool, u32 *);
350:	static int vexpress_syscfg_probe(struct platform_device *);
219:	static int vexpress_syscfg_read(void *, unsigned int, unsigned int *);
328:	static void vexpress_syscfg_regmap_exit(struct regmap *, void *);
247:	static struct regmap *vexpress_syscfg_regmap_init(struct device *, void *);
227:	static int vexpress_syscfg_write(void *, unsigned int, unsigned int);

File drivers/char/hw_random/arm_smccc_trng.c:
119:	static void smccc_trng_driver_exit(void);
119:	static int smccc_trng_driver_init(void);
97:	static int smccc_trng_probe(struct platform_device *);
62:	static int smccc_trng_read(struct hwrng *, void *, size_t, bool);

File drivers/char/hw_random/core.c:
647:	int devm_hwrng_register(struct device *, struct hwrng *);
668:	void devm_hwrng_unregister(struct device *, struct hwrng *);
674:	long hwrng_msleep(struct hwrng *, unsigned int);
536:	int hwrng_register(struct hwrng *);
596:	void hwrng_unregister(struct hwrng *);
65:	static void add_early_randomness(struct hwrng *);
637:	static int devm_hwrng_match(struct device *, void *, void *);
632:	static void devm_hwrng_release(struct device *, void *);
304:	static int enable_best_rng(void);
493:	static int hwrng_fillfn(void *);
706:	static void hwrng_modexit(void);
682:	static int hwrng_modinit(void);
384:	static ssize_t rng_available_show(struct device *, struct device_attribute *, char *);
367:	static ssize_t rng_current_show(struct device *, struct device_attribute *, char *);
331:	static ssize_t rng_current_store(struct device *, struct device_attribute *, const char *, size_t);
181:	static int rng_dev_open(struct inode *, struct file *);
210:	static ssize_t rng_dev_read(struct file *, char *, size_t, loff_t *);
412:	static ssize_t rng_quality_show(struct device *, struct device_attribute *, char *);
432:	static ssize_t rng_quality_store(struct device *, struct device_attribute *, const char *, size_t);
405:	static ssize_t rng_selected_show(struct device *, struct device_attribute *, char *);
88:	static int set_current_rng(struct hwrng *);
483:	static void unregister_miscdev(void);

File drivers/char/hw_random/omap-rng.c:
251:	static int eip76_rng_init(struct omap_rng_dev *);
377:	static int of_get_omap_rng_device_details(struct omap_rng_dev *, struct platform_device *);
233:	static void omap2_rng_cleanup(struct omap_rng_dev *);
222:	static u32 omap2_rng_data_present(struct omap_rng_dev *);
227:	static int omap2_rng_init(struct omap_rng_dev *);
308:	static void omap4_rng_cleanup(struct omap_rng_dev *);
246:	static u32 omap4_rng_data_present(struct omap_rng_dev *);
283:	static int omap4_rng_init(struct omap_rng_dev *);
317:	static irqreturn_t omap4_rng_irq(int, void *);
213:	static void omap_rng_cleanup(struct hwrng *);
175:	static int omap_rng_do_read(struct hwrng *, void *, size_t, bool);
568:	static void omap_rng_driver_exit(void);
568:	static int omap_rng_driver_init(void);
205:	static int omap_rng_init(struct hwrng *);
425:	static int omap_rng_probe(struct platform_device *);
514:	static int omap_rng_remove(struct platform_device *);

File drivers/char/hw_random/optee-rng.c:
206:	static int optee_ctx_match(struct tee_ioctl_version_data *, const void *);
160:	static void optee_rng_cleanup(struct hwrng *);
143:	static int optee_rng_init(struct hwrng *);
295:	static void optee_rng_mod_exit(void);
290:	static int optee_rng_mod_init(void);
214:	static int optee_rng_probe(struct device *);
115:	static int optee_rng_read(struct hwrng *, void *, size_t, bool);
264:	static int optee_rng_remove(struct device *);

File drivers/char/ipmi/ipmi_bt_sm.c:
679:	static void bt_cleanup(struct si_sm_data *);
617:	static int bt_detect(struct si_sm_data *);
450:	static enum si_sm_result bt_event(struct si_sm_data *, long);
247:	static int bt_get_result(struct si_sm_data *, unsigned char *, unsigned int);
173:	static unsigned int bt_init_data(struct si_sm_data *, struct si_sm_io *);
683:	static int bt_size(void);
202:	static int bt_start_transaction(struct si_sm_data *, unsigned char *, unsigned int);
294:	static void drain_BMC2HOST(struct si_sm_data *);
384:	static enum si_sm_result error_recovery(struct si_sm_data *, unsigned char, unsigned char);
278:	static void reset_flags(struct si_sm_data *);
144:	static char *status2txt(unsigned char);

File drivers/char/ipmi/ipmi_devintf.c:
892:	static void cleanup_ipmi(void);
39:	static void file_receive_handler(struct ipmi_recv_msg *, void *);
140:	static int handle_send_req(struct ipmi_user *, struct ipmi_req *, int, unsigned int);
854:	static int init_ipmi_devintf(void);
75:	static int ipmi_fasync(int, struct file *, int);
294:	static long ipmi_ioctl(struct file *, unsigned int, unsigned long);
812:	static void ipmi_new_smi(int, struct device *);
87:	static int ipmi_open(struct inode *, struct file *);
57:	static __poll_t ipmi_poll(struct file *, poll_table *);
122:	static int ipmi_release(struct inode *, struct file *);
830:	static void ipmi_smi_gone(int);

File drivers/char/ipmi/ipmi_kcs_sm.c:
236:	static int check_obf(struct si_sm_data *, unsigned char, long);
302:	static int get_kcs_result(struct si_sm_data *, unsigned char *, unsigned int);
143:	static unsigned int init_kcs_data(struct si_sm_data *, struct si_sm_io *);
530:	static void kcs_cleanup(struct si_sm_data *);
516:	static int kcs_detect(struct si_sm_data *);
336:	static enum si_sm_result kcs_event(struct si_sm_data *, long);
511:	static int kcs_size(void);
207:	static void read_next_byte(struct si_sm_data *);
269:	static int start_kcs_transaction(struct si_sm_data *, unsigned char *, unsigned int);

File drivers/char/ipmi/ipmi_msghandler.c:
1776:	unsigned char ipmb_checksum(unsigned char *, int);
3550:	int ipmi_add_smi(struct module *, const struct ipmi_smi_handlers *, void *, struct device *, unsigned char);
903:	unsigned int ipmi_addr_length(int);
653:	const char *ipmi_addr_src_to_str(enum ipmi_addr_src);
5136:	struct ipmi_smi_msg *ipmi_alloc_smi_msg(void);
1204:	int ipmi_create_user(unsigned int, const struct ipmi_user_hndl *, void *, struct ipmi_user **);
1401:	int ipmi_destroy_user(struct ipmi_user *);
5171:	void ipmi_free_recv_msg(struct ipmi_recv_msg *);
1521:	int ipmi_get_maintenance_mode(struct ipmi_user *);
1499:	int ipmi_get_my_LUN(struct ipmi_user *, unsigned int, unsigned char *);
1455:	int ipmi_get_my_address(struct ipmi_user *, unsigned int, unsigned char *);
1292:	int ipmi_get_smi_info(int, struct ipmi_smi_info *);
1411:	int ipmi_get_version(struct ipmi_user *, unsigned char *, unsigned char *);
3503:	void ipmi_poll_interface(struct ipmi_user *);
1685:	int ipmi_register_for_cmd(struct ipmi_user *, unsigned char, unsigned char, unsigned int);
2409:	int ipmi_request_settime(struct ipmi_user *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, int, int, unsigned int);
2448:	int ipmi_request_supply_msgs(struct ipmi_user *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, void *, struct ipmi_recv_msg *, int);
1588:	int ipmi_set_gets_events(struct ipmi_user *, bool);
1546:	int ipmi_set_maintenance_mode(struct ipmi_user *, int);
1477:	int ipmi_set_my_LUN(struct ipmi_user *, unsigned int, unsigned char);
1433:	int ipmi_set_my_address(struct ipmi_user *, unsigned int, unsigned char);
4861:	void ipmi_smi_msg_received(struct ipmi_smi *, struct ipmi_smi_msg *);
4896:	void ipmi_smi_watchdog_pretimeout(struct ipmi_smi *);
739:	int ipmi_smi_watcher_register(struct ipmi_smi_watcher *);
773:	int ipmi_smi_watcher_unregister(struct ipmi_smi_watcher *);
1730:	int ipmi_unregister_for_cmd(struct ipmi_user *, unsigned char, unsigned char, unsigned int);
3761:	void ipmi_unregister_smi(struct ipmi_smi *);
854:	int ipmi_validate_addr(struct ipmi_addr *, int);
2604:	static int __bmc_get_device_id(struct ipmi_smi *, struct bmc_device *, struct ipmi_device_id *, bool *, guid_t *, int);
2964:	static int __find_bmc_guid(struct device *, const void *);
3002:	static int __find_bmc_prod_dev_id(struct device *, const void *);
3075:	static void __ipmi_bmc_unregister(struct ipmi_smi *);
3450:	static int __scan_channels(struct ipmi_smi *, struct ipmi_device_id *);
1326:	static void _ipmi_destroy_user(struct ipmi_user *);
2826:	static ssize_t add_dev_support_show(struct device *, struct device_attribute *, char *);
2875:	static ssize_t aux_firmware_rev_show(struct device *, struct device_attribute *, char *);
2927:	static umode_t bmc_dev_attr_is_visible(struct kobject *, struct attribute *, int);
2487:	static void bmc_device_id_handler(struct ipmi_smi *, struct ipmi_recv_msg *);
786:	static void call_smi_watchers(int, struct device *);
3379:	static void channel_handler(struct ipmi_smi *, struct ipmi_recv_msg *);
3049:	static void cleanup_bmc_work(struct work_struct *);
5528:	static void cleanup_ipmi(void);
4375:	static void copy_event_into_recv_msg(struct ipmi_recv_msg *, struct ipmi_smi_msg *);
922:	static int deliver_response(struct ipmi_smi *, struct ipmi_recv_msg *);
5239:	static void device_id_fetcher(struct ipmi_smi *, struct ipmi_recv_msg *);
2744:	static ssize_t device_id_show(struct device *, struct device_attribute *, char *);
5186:	static void dummy_recv_done_handler(struct ipmi_recv_msg *);
5181:	static void dummy_smi_done_handler(struct ipmi_smi_msg *);
5226:	static void event_receiver_fetcher(struct ipmi_smi *, struct ipmi_recv_msg *);
2791:	static ssize_t firmware_revision_show(struct device *, struct device_attribute *, char *);
1787:	static void format_ipmb_msg(struct ipmi_smi_msg *, struct kernel_ipmi_msg *, struct ipmi_ipmb_addr *, long, unsigned char, int, unsigned char, unsigned char);
1829:	static void format_lan_msg(struct ipmi_smi_msg *, struct kernel_ipmi_msg *, struct ipmi_lan_addr *, long, unsigned char, unsigned char);
5150:	static void free_recv_msg(struct ipmi_recv_msg *);
5128:	static void free_smi_msg(struct ipmi_smi_msg *);
1195:	static void free_user_work(struct work_struct *);
3293:	static void guid_handler(struct ipmi_smi *, struct ipmi_recv_msg *);
2895:	static ssize_t guid_show(struct device *, struct device_attribute *, char *);
3875:	static int handle_ipmb_get_msg_cmd(struct ipmi_smi *, struct ipmi_smi_msg *);
3812:	static int handle_ipmb_get_msg_rsp(struct ipmi_smi *, struct ipmi_smi_msg *);
4175:	static int handle_lan_get_msg_cmd(struct ipmi_smi *, struct ipmi_smi_msg *);
4108:	static int handle_lan_get_msg_rsp(struct ipmi_smi *, struct ipmi_smi_msg *);
4757:	static void handle_new_recv_msgs(struct ipmi_smi *);
4274:	static int handle_oem_get_msg_cmd(struct ipmi_smi *, struct ipmi_smi_msg *);
4530:	static int handle_one_recv_msg(struct ipmi_smi *, struct ipmi_smi_msg *);
2117:	static int i_ipmi_req_ipmb_direct(struct ipmi_smi *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, struct ipmi_smi_msg *, struct ipmi_recv_msg *, unsigned char);
2169:	static int i_ipmi_req_lan(struct ipmi_smi *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, struct ipmi_smi_msg *, struct ipmi_recv_msg *, unsigned char, int, unsigned int);
2293:	static int i_ipmi_request(struct ipmi_user *, struct ipmi_smi *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, void *, struct ipmi_recv_msg *, int, unsigned char, unsigned char, int, unsigned int);
1160:	static int intf_err_seq(struct ipmi_smi *, long, unsigned int);
1098:	static int intf_find_seq(struct ipmi_smi *, unsigned char, short, unsigned char, unsigned char, struct ipmi_addr *, struct ipmi_recv_msg **);
731:	static void intf_free(struct kref *);
1044:	static int intf_next_seq(struct ipmi_smi *, struct ipmi_recv_msg *, unsigned long, int, int, unsigned char *, long *);
1132:	static int intf_start_seq_timer(struct ipmi_smi *, long);
5478:	static int ipmi_init_msghandler(void);
5515:	static int ipmi_init_msghandler_mod(void);
5194:	static void ipmi_panic_request_and_wait(struct ipmi_smi *, struct ipmi_addr *, struct kernel_ipmi_msg *);
5090:	static void ipmi_timeout(struct timer_list *);
2808:	static ssize_t ipmi_version_show(struct device *, struct device_attribute *, char *);
2843:	static ssize_t manufacturer_id_show(struct device *, struct device_attribute *, char *);
3520:	static ssize_t nr_msgs_show(struct device *, struct device_attribute *, char *);
3509:	static ssize_t nr_users_show(struct device *, struct device_attribute *, char *);
5402:	static int panic_event(struct notifier_block *, unsigned long, void *);
89:	static int panic_op_read_handler(char *, const struct kernel_param *);
74:	static int panic_op_write_handler(const char *, const struct kernel_param *);
2859:	static ssize_t product_id_show(struct device *, struct device_attribute *, char *);
2760:	static ssize_t provides_device_sdrs_show(struct device *, struct device_attribute *, char *);
3539:	static void redo_bmc_reg(struct work_struct *);
3044:	static void release_bmc_device(struct device *);
2776:	static ssize_t revision_show(struct device *, struct device_attribute *, char *);
981:	static void smi_add_watch(struct ipmi_smi *, unsigned int);
4815:	static void smi_recv_tasklet(struct tasklet_struct *);

File drivers/char/ipmi/ipmi_plat_data.c:
11:	struct platform_device *ipmi_platform_add(const char *, unsigned int, struct ipmi_plat_data *);

File drivers/char/ipmi/ipmi_si_hardcode.c:
93:	void ipmi_hardcode_init(void);
127:	void ipmi_si_hardcode_exit(void);
136:	int ipmi_si_hardcode_match(int, unsigned long);
59:	static void ipmi_hardcode_init_one(const char *, unsigned int, unsigned long, enum ipmi_addr_space);

File drivers/char/ipmi/ipmi_si_hotmod.c:
234:	void ipmi_si_hotmod_exit(void);
185:	static int hotmod_handler(const char *, const struct kernel_param *);

File drivers/char/ipmi/ipmi_si_intf.c:
1236:	void ipmi_irq_finish_setup(struct si_sm_io *);
1244:	void ipmi_irq_start_cleanup(struct si_sm_io *);
1867:	int ipmi_si_add_smi(struct si_sm_io *);
1117:	irqreturn_t ipmi_si_irq_handler(int, void *);
2253:	struct device *ipmi_si_remove_by_data(int, enum si_type, unsigned long);
2239:	void ipmi_si_remove_by_dev(struct device *);
1257:	int ipmi_std_irq_setup(struct si_sm_io *);
446:	static struct ipmi_smi_msg *alloc_msg_handle_irq(struct smi_info *);
1636:	static ssize_t attentions_show(struct device *, struct device_attribute *, char *);
1828:	static void check_for_broken_irqs(struct smi_info *);
870:	static void check_start_timer_thread(struct smi_info *);
2276:	static void cleanup_ipmi_si(void);
2229:	static void cleanup_one_si(struct smi_info *);
1639:	static ssize_t complete_transactions_show(struct device *, struct device_attribute *, char *);
1773:	static int dell_poweredge_bt_xaction_handler(struct notifier_block *, unsigned long, void *);
1640:	static ssize_t events_show(struct device *, struct device_attribute *, char *);
1637:	static ssize_t flag_fetches_show(struct device *, struct device_attribute *, char *);
883:	static void flush_messages(void *);
1359:	static int get_global_enables(struct smi_info *, u8 *);
1184:	static int get_smi_info(void *, struct ipmi_smi_info *);
461:	static void handle_flags(struct smi_info *);
1638:	static ssize_t hosed_count_show(struct device *, struct device_attribute *, char *);
1634:	static ssize_t idles_show(struct device *, struct device_attribute *, char *);
1642:	static ssize_t incoming_messages_show(struct device *, struct device_attribute *, char *);
2088:	static int init_ipmi_si(void);
1621:	static ssize_t interrupts_enabled_show(struct device *, struct device_attribute *, char *);
1635:	static ssize_t interrupts_show(struct device *, struct device_attribute *, char *);
975:	static int ipmi_thread(void *);
1633:	static ssize_t long_timeouts_show(struct device *, struct device_attribute *, char *);
1692:	static int oem_data_avail_to_receive_msg_avail(struct smi_info *);
1644:	static ssize_t params_show(struct device *, struct device_attribute *, char *);
1031:	static void poll(void *);
1049:	static void request_events(void *);
899:	static void sender(void *, struct ipmi_smi_msg *);
1406:	static int set_global_enables(struct smi_info *, u8);
1196:	static void set_maintenance_mode(void *, bool);
1059:	static void set_need_watch(void *, unsigned int);
930:	static void set_run_to_completion(void *, bool);
1818:	static void setup_oem_data_handler(struct smi_info *);
1632:	static ssize_t short_timeouts_show(struct device *, struct device_attribute *, char *);
2170:	static void shutdown_smi(void *);
749:	static enum si_sm_result smi_event_handler(struct smi_info *, int);
1139:	static int smi_start_processing(void *, struct ipmi_smi *);
1073:	static void smi_timeout(struct timer_list *);
376:	static void start_clear_flags(struct smi_info *);
1251:	static void std_irq_cleanup(struct si_sm_io *);
1525:	static int try_enable_event_buffer(struct smi_info *);
1940:	static int try_smi_init(struct smi_info *);
1611:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1641:	static ssize_t watchdog_pretimeouts_show(struct device *, struct device_attribute *, char *);

File drivers/char/ipmi/ipmi_si_mem_io.c:
76:	int ipmi_si_mem_setup(struct si_sm_io *);
6:	static unsigned char intf_mem_inb(const struct si_sm_io *, unsigned int);
31:	static unsigned char intf_mem_inl(const struct si_sm_io *, unsigned int);
18:	static unsigned char intf_mem_inw(const struct si_sm_io *, unsigned int);
12:	static void intf_mem_outb(const struct si_sm_io *, unsigned int, unsigned char);
38:	static void intf_mem_outl(const struct si_sm_io *, unsigned int, unsigned char);
25:	static void intf_mem_outw(const struct si_sm_io *, unsigned int, unsigned char);
68:	static void mem_cleanup(struct si_sm_io *);
45:	static unsigned char mem_inq(const struct si_sm_io *, unsigned int);
51:	static void mem_outq(const struct si_sm_io *, unsigned int, unsigned char);

File drivers/char/ipmi/ipmi_si_platform.c:
427:	void ipmi_remove_platform_device_by_name(char *);
458:	void ipmi_si_platform_init(void);
467:	void ipmi_si_platform_shutdown(void);
401:	static int ipmi_probe(struct platform_device *);
412:	static int ipmi_remove(struct platform_device *);
419:	static int pdev_match_name(struct device *, const void *);

File drivers/char/ipmi/ipmi_si_port_io.c:
63:	int ipmi_si_port_setup(struct si_sm_io *);
51:	static void port_cleanup(struct si_sm_io *);
6:	static unsigned char port_inb(const struct si_sm_io *, unsigned int);
36:	static unsigned char port_inl(const struct si_sm_io *, unsigned int);
21:	static unsigned char port_inw(const struct si_sm_io *, unsigned int);
13:	static void port_outb(const struct si_sm_io *, unsigned int, unsigned char);
43:	static void port_outl(const struct si_sm_io *, unsigned int, unsigned char);
28:	static void port_outw(const struct si_sm_io *, unsigned int, unsigned char);

File drivers/char/ipmi/ipmi_smic_sm.c:
104:	static unsigned int init_smic_data(struct si_sm_data *, struct si_sm_io *);
568:	static void smic_cleanup(struct si_sm_data *);
554:	static int smic_detect(struct si_sm_data *);
320:	static enum si_sm_result smic_event(struct si_sm_data *, long);
154:	static int smic_get_result(struct si_sm_data *, unsigned char *, unsigned int);
572:	static int smic_size(void);
215:	static void start_error_recovery(struct si_sm_data *, char *);
121:	static int start_smic_transaction(struct si_sm_data *, unsigned char *, unsigned int);

File drivers/char/mem.c:
271:	int phys_mem_access_prot_allowed(struct file *, unsigned long, unsigned long, pgprot_t *);
758:	static int chr_dev_init(void);
550:	static unsigned long get_unmapped_area_zero(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
749:	static char *mem_devnode(const struct device *, umode_t *);
596:	static loff_t memory_lseek(struct file *, loff_t, int);
722:	static int memory_open(struct inode *, struct file *);
362:	static int mmap_mem(struct file *, struct vm_area_struct *);
539:	static int mmap_zero(struct file *, struct vm_area_struct *);
583:	static loff_t null_lseek(struct file *, loff_t, int);
622:	static int open_port(struct inode *, struct file *);
471:	static int pipe_to_null(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
459:	static ssize_t read_iter_null(struct kiocb *, struct iov_iter *);
488:	static ssize_t read_iter_zero(struct kiocb *, struct iov_iter *);
111:	static ssize_t read_mem(struct file *, char *, size_t, loff_t *);
447:	static ssize_t read_null(struct file *, char *, size_t, loff_t *);
512:	static ssize_t read_zero(struct file *, char *, size_t, loff_t *);
477:	static ssize_t splice_write_null(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
483:	static int uring_cmd_null(struct io_uring_cmd *, unsigned int);
572:	static ssize_t write_full(struct file *, const char *, size_t, loff_t *);
464:	static ssize_t write_iter_null(struct kiocb *, struct iov_iter *);
198:	static ssize_t write_mem(struct file *, const char *, size_t, loff_t *);
453:	static ssize_t write_null(struct file *, const char *, size_t, loff_t *);

File drivers/char/misc.c:
259:	void misc_deregister(struct miscdevice *);
197:	int misc_register(struct miscdevice *);
272:	static char *misc_devnode(const struct device *, umode_t *);
283:	static int misc_init(void);
122:	static int misc_open(struct inode *, struct file *);
95:	static void *misc_seq_next(struct seq_file *, void *, loff_t *);
105:	static int misc_seq_show(struct seq_file *, void *);
89:	static void *misc_seq_start(struct seq_file *, loff_t *);
100:	static void misc_seq_stop(struct seq_file *, void *);

File drivers/char/random.c:
1364:	long __arm64_sys_getrandom(const struct pt_regs *);
535:	u32 __get_random_u32_below(u32);
952:	void add_bootloader_randomness(const void *, size_t);
917:	void add_device_randomness(const void *, size_t);
1209:	void add_disk_randomness(struct gendisk *);
934:	void add_hwgenerator_randomness(const void *, size_t, size_t, bool);
1193:	void add_input_randomness(unsigned int, unsigned int, unsigned int);
1088:	void add_interrupt_randomness(int);
152:	int execute_with_initialized_rng(struct notifier_block *);
414:	void get_random_bytes(void *, size_t);
531:	u16 get_random_u16(void);
532:	u32 get_random_u32(void);
533:	u64 get_random_u64(void);
530:	u8 get_random_u8(void);
1218:	void rand_initialize_disk(struct gendisk *);
882:	void random_init(void);
841:	void random_init_early(const char *);
1034:	int random_online_cpu(unsigned int);
575:	int random_prepare_cpu(unsigned int);
108:	bool rng_is_initialized(void);
132:	int wait_for_random_bytes(void);
703:	static void _credit_init_bits(size_t);
375:	static void _get_random_bytes(void *, size_t);
1127:	static void add_timer_randomness(struct timer_rand_state *, unsigned int);
294:	static void crng_fast_key_erasure(u8 *, u32 *, u8 *, size_t);
317:	static void crng_make_state(u32 *, u8 *, size_t);
249:	static void crng_reseed(struct work_struct *);
114:	static void crng_set_ready(struct work_struct *);
1252:	static void entropy_timer(struct timer_list *);
651:	static void extract_entropy(void *, size_t);
421:	static ssize_t get_random_bytes_user(struct iov_iter *);
1052:	static void mix_interrupt_randomness(struct timer_list *);
638:	static void mix_pool_bytes(const void *, size_t);
803:	static int parse_trust_bootloader(char *);
799:	static int parse_trust_cpu(char *);
1640:	static int proc_do_rointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1609:	static int proc_do_uuid(struct ctl_table *, int, void *, size_t *, loff_t *);
1536:	static int random_fasync(int, struct file *, int);
1472:	static long random_ioctl(struct file *, unsigned int, unsigned long);
1394:	static __poll_t random_poll(struct file *, poll_table *);
1457:	static ssize_t random_read_iter(struct kiocb *, struct iov_iter *);
1693:	static int random_sysctls_init(void);
1428:	static ssize_t random_write_iter(struct kiocb *, struct iov_iter *);
1266:	static void try_to_generate_entropy(void);
1433:	static ssize_t urandom_read_iter(struct kiocb *, struct iov_iter *);
1400:	static ssize_t write_pool_user(struct iov_iter *);

File drivers/char/tpm/eventlog/common.c:
103:	void tpm_bios_log_setup(struct tpm_chip *);
169:	void tpm_bios_log_teardown(struct tpm_chip *);

File drivers/char/tpm/eventlog/of.c:
20:	int tpm_read_log_of(struct tpm_chip *);

File drivers/char/tpm/eventlog/tpm1.c:
252:	static int tpm1_ascii_bios_measurements_show(struct seq_file *, void *);
223:	static int tpm1_binary_bios_measurements_show(struct seq_file *, void *);
108:	static void *tpm1_bios_measurements_next(struct seq_file *, void *, loff_t *);
70:	static void *tpm1_bios_measurements_start(struct seq_file *, loff_t *);
139:	static void tpm1_bios_measurements_stop(struct seq_file *, void *);

File drivers/char/tpm/eventlog/tpm2.c:
36:	static size_t calc_tpm2_event_size(struct tcg_pcr_event2_head *, struct tcg_pcr_event *);
128:	static int tpm2_binary_bios_measurements_show(struct seq_file *, void *);
85:	static void *tpm2_bios_measurements_next(struct seq_file *, void *, loff_t *);
42:	static void *tpm2_bios_measurements_start(struct seq_file *, loff_t *);
124:	static void tpm2_bios_measurements_stop(struct seq_file *, void *);

File drivers/char/tpm/tpm-chip.c:
313:	struct tpm_chip *tpm_chip_alloc(struct device *, const struct tpm_class_ops *);
562:	int tpm_chip_register(struct tpm_chip *);
100:	int tpm_chip_start(struct tpm_chip *);
133:	void tpm_chip_stop(struct tpm_chip *);
625:	void tpm_chip_unregister(struct tpm_chip *);
196:	struct tpm_chip *tpm_default_chip(void);
235:	struct tpm_chip *tpm_find_get_ops(struct tpm_chip *);
184:	void tpm_put_ops(struct tpm_chip *);
152:	int tpm_try_get_ops(struct tpm_chip *);
388:	struct tpm_chip *tpmm_chip_alloc(struct device *, const struct tpm_class_ops *);
488:	static int tpm_add_legacy_sysfs(struct tpm_chip *);
286:	static int tpm_class_shutdown(struct device *);
262:	static void tpm_dev_release(struct device *);
515:	static int tpm_hwrng_read(struct hwrng *, void *, size_t, bool);
376:	static void tpm_put_device(void *);

File drivers/char/tpm/tpm-dev-common.c:
110:	void tpm_common_open(struct file *, struct tpm_chip *, struct file_priv *, struct tpm_space *);
237:	__poll_t tpm_common_poll(struct file *, poll_table *);
125:	ssize_t tpm_common_read(struct file *, char *, size_t, loff_t *);
262:	void tpm_common_release(struct file *, struct file_priv *);
165:	ssize_t tpm_common_write(struct file *, const char *, size_t, loff_t *);
278:	void tpm_dev_common_exit(void);
271:	int tpm_dev_common_init(void);
55:	static void tpm_dev_async_work(struct work_struct *);
24:	static ssize_t tpm_dev_transmit(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
97:	static void tpm_timeout_work(struct work_struct *);
87:	static void user_reader_timeout(struct timer_list *);

File drivers/char/tpm/tpm-dev.c:
18:	static int tpm_open(struct inode *, struct file *);
49:	static int tpm_release(struct inode *, struct file *);

File drivers/char/tpm/tpm-interface.c:
370:	int tpm_auto_startup(struct tpm_chip *);
52:	unsigned long tpm_calc_ordinal_duration(struct tpm_chip *, u32);
444:	int tpm_get_random(struct tpm_chip *, u8 *, size_t);
239:	int tpm_get_timeouts(struct tpm_chip *);
260:	int tpm_is_tpm2(struct tpm_chip *);
314:	int tpm_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
284:	int tpm_pcr_read(struct tpm_chip *, u32, struct tpm_digest *);
425:	int tpm_pm_resume(struct device *);
389:	int tpm_pm_suspend(struct device *);
353:	int tpm_send(struct tpm_chip *, void *, size_t);
153:	ssize_t tpm_transmit(struct tpm_chip *, u8 *, size_t);
213:	ssize_t tpm_transmit_cmd(struct tpm_chip *, struct tpm_buf *, size_t, const char *);
506:	static void tpm_exit(void);
465:	static int tpm_init(void);

File drivers/char/tpm/tpm-sysfs.c:
477:	void tpm_sysfs_add_device(struct tpm_chip *);
139:	static ssize_t active_show(struct device *, struct device_attribute *, char *);
256:	static ssize_t cancel_store(struct device *, struct device_attribute *, const char *, size_t);
205:	static ssize_t caps_show(struct device *, struct device_attribute *, char *);
270:	static ssize_t durations_show(struct device *, struct device_attribute *, char *);
117:	static ssize_t enabled_show(struct device *, struct device_attribute *, char *);
161:	static ssize_t owned_show(struct device *, struct device_attribute *, char *);
348:	static ssize_t pcr_value_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t pcrs_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t pubek_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t temp_deactivated_show(struct device *, struct device_attribute *, char *);
287:	static ssize_t timeouts_show(struct device *, struct device_attribute *, char *);
302:	static ssize_t tpm_version_major_show(struct device *, struct device_attribute *, char *);

File drivers/char/tpm/tpm1-cmd.c:
704:	int tpm1_auto_startup(struct tpm_chip *);
291:	unsigned long tpm1_calc_ordinal_duration(struct tpm_chip *, u32);
642:	int tpm1_do_selftest(struct tpm_chip *);
800:	int tpm1_get_pcr_allocation(struct tpm_chip *);
530:	int tpm1_get_random(struct tpm_chip *, u8 *, size_t);
342:	int tpm1_get_timeouts(struct tpm_chip *);
482:	ssize_t tpm1_getcap(struct tpm_chip *, u32, cap_t *, const char *, size_t);
463:	int tpm1_pcr_extend(struct tpm_chip *, u32, const u8 *, const char *);
584:	int tpm1_pcr_read(struct tpm_chip *, u32, u8 *);
742:	int tpm1_pm_suspend(struct tpm_chip *, u32);

File drivers/char/tpm/tpm2-cmd.c:
732:	int tpm2_auto_startup(struct tpm_chip *);
128:	unsigned long tpm2_calc_ordinal_duration(struct tpm_chip *, u32);
778:	int tpm2_find_cc(struct tpm_chip *, u32);
348:	void tpm2_flush_context(struct tpm_chip *, u32);
627:	int tpm2_get_cc_attrs_tbl(struct tpm_chip *);
548:	ssize_t tpm2_get_pcr_allocation(struct tpm_chip *);
288:	int tpm2_get_random(struct tpm_chip *, u8 *, size_t);
25:	int tpm2_get_timeouts(struct tpm_chip *);
386:	ssize_t tpm2_get_tpm_pt(struct tpm_chip *, u32, u32 *, const char *);
235:	int tpm2_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
161:	int tpm2_pcr_read(struct tpm_chip *, u32, struct tpm_digest *, u16 *);
492:	int tpm2_probe(struct tpm_chip *);
429:	void tpm2_shutdown(struct tpm_chip *, u16);
455:	static int tpm2_do_selftest(struct tpm_chip *);

File drivers/char/tpm/tpm2-space.c:
534:	int tpm2_commit_space(struct tpm_chip *, struct tpm_space *, void *, size_t *);
59:	void tpm2_del_space(struct tpm_chip *, struct tpm_space *);
164:	void tpm2_flush_space(struct tpm_chip *);
41:	int tpm2_init_space(struct tpm_space *, unsigned int);
300:	int tpm2_prepare_space(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
603:	int tpm_devs_add(struct tpm_chip *);
593:	void tpm_devs_remove(struct tpm_chip *);
71:	static int tpm2_load_context(struct tpm_chip *, u8 *, unsigned int *, u32 *);
122:	static int tpm2_save_context(struct tpm_chip *, u32, u8 *, unsigned int, unsigned int *);
581:	static void tpm_devs_release(struct device *);

File drivers/char/tpm/tpm_i2c_infineon.c:
92:	static int iic_tpm_read(u8, u8 *, size_t);
204:	static int iic_tpm_write_generic(u8, u8 *, size_t, unsigned int, unsigned int, u8);
436:	static int recv_data(struct tpm_chip *, u8 *, size_t);
344:	static int request_locality(struct tpm_chip *, int);
729:	static void tpm_tis_i2c_driver_exit(void);
729:	static int tpm_tis_i2c_driver_init(void);
684:	static int tpm_tis_i2c_probe(struct i2c_client *, const struct i2c_device_id *);
382:	static void tpm_tis_i2c_ready(struct tpm_chip *);
468:	static int tpm_tis_i2c_recv(struct tpm_chip *, u8 *, size_t);
709:	static void tpm_tis_i2c_remove(struct i2c_client *);
596:	static bool tpm_tis_i2c_req_canceled(struct tpm_chip *, u8);
517:	static int tpm_tis_i2c_send(struct tpm_chip *, u8 *, size_t);
365:	static u8 tpm_tis_i2c_status(struct tpm_chip *);
413:	static int wait_for_stat(struct tpm_chip *, u8, unsigned long, int *);

File drivers/char/tpm/tpm_tis.c:
409:	static void cleanup_tis(void);
379:	static int init_tis(void);
156:	static int tpm_tcg_read_bytes(struct tpm_tis_data *, u32, u16, u8 *, enum tpm_tis_io_mode);
181:	static int tpm_tcg_write_bytes(struct tpm_tis_data *, u32, u16, const u8 *, enum tpm_tis_io_mode);
303:	static int tpm_tis_plat_probe(struct platform_device *);
327:	static int tpm_tis_plat_remove(struct platform_device *);

File drivers/char/tpm/tpm_tis_core.c:
940:	int tpm_tis_core_init(struct device *, struct tpm_tis_data *, int, const struct tpm_tis_phy_ops *, acpi_handle);
850:	void tpm_tis_remove(struct tpm_chip *);
417:	static void disable_interrupts(struct tpm_chip *);
633:	static int probe_itpm(struct tpm_chip *);
257:	static int recv_data(struct tpm_chip *, u8 *, size_t);
139:	static int release_locality(struct tpm_chip *, int);
148:	static int request_locality(struct tpm_chip *, int);
700:	static irqreturn_t tis_int_handler(int, void *);
881:	static void tpm_tis_clkrun_enable(struct tpm_chip *, bool);
828:	static void tpm_tis_probe_irq(struct tpm_chip *, u32);
760:	static int tpm_tis_probe_irq_single(struct tpm_chip *, u32, int, int);
224:	static void tpm_tis_ready(struct tpm_chip *);
286:	static int tpm_tis_recv(struct tpm_chip *, u8 *, size_t);
681:	static bool tpm_tis_req_canceled(struct tpm_chip *, u8);
482:	static int tpm_tis_send(struct tpm_chip *, u8 *, size_t);
349:	static int tpm_tis_send_data(struct tpm_chip *, const u8 *, size_t);
443:	static int tpm_tis_send_main(struct tpm_chip *, const u8 *, size_t);
189:	static u8 tpm_tis_status(struct tpm_chip *);
518:	static void tpm_tis_update_durations(struct tpm_chip *, unsigned long *);
594:	static void tpm_tis_update_timeouts(struct tpm_chip *, unsigned long *);
47:	static int wait_for_tpm_stat(struct tpm_chip *, u8, unsigned long, wait_queue_head_t *, bool);

File drivers/char/tpm/tpm_tis_i2c_cr50.c:
793:	static void cr50_i2c_driver_exit(void);
793:	static int cr50_i2c_driver_init(void);
71:	static irqreturn_t tpm_cr50_i2c_int_handler(int, void *);
632:	static bool tpm_cr50_i2c_is_firmware_power_managed(struct device *);
681:	static int tpm_cr50_i2c_probe(struct i2c_client *);
187:	static int tpm_cr50_i2c_read(struct tpm_chip *, u8, u8 *, size_t);
766:	static void tpm_cr50_i2c_remove(struct i2c_client *);
627:	static bool tpm_cr50_i2c_req_canceled(struct tpm_chip *, u8);
452:	static int tpm_cr50_i2c_tis_recv(struct tpm_chip *, u8 *, size_t);
541:	static int tpm_cr50_i2c_tis_send(struct tpm_chip *, u8 *, size_t);
389:	static void tpm_cr50_i2c_tis_set_ready(struct tpm_chip *);
373:	static u8 tpm_cr50_i2c_tis_status(struct tpm_chip *);
151:	static int tpm_cr50_i2c_transfer_message(struct device *, struct i2c_adapter *, struct i2c_msg *);
246:	static int tpm_cr50_i2c_write(struct tpm_chip *, u8, u8 *, size_t);
317:	static void tpm_cr50_release_locality(struct tpm_chip *, bool);
340:	static int tpm_cr50_request_locality(struct tpm_chip *);

File drivers/char/tpm/tpm_tis_spi_cr50.c:
266:	int cr50_spi_probe(struct spi_device *);
162:	static int cr50_spi_flow_control(struct tpm_tis_spi_phy *, struct spi_transfer *);
65:	static irqreturn_t cr50_spi_irq_handler(int, void *);
224:	static int tpm_tis_spi_cr50_read_bytes(struct tpm_tis_data *, u32, u16, u8 *, enum tpm_tis_io_mode);
201:	static int tpm_tis_spi_cr50_transfer(struct tpm_tis_data *, u32, u16, u8 *, const u8 *);
230:	static int tpm_tis_spi_cr50_write_bytes(struct tpm_tis_data *, u32, u16, const u8 *, enum tpm_tis_io_mode);

File drivers/char/tpm/tpm_tis_spi_main.c:
155:	int tpm_tis_spi_init(struct spi_device *, struct tpm_tis_spi_phy *, int, const struct tpm_tis_phy_ops *);
74:	int tpm_tis_spi_transfer(struct tpm_tis_data *, u32, u16, u8 *, const u8 *);
261:	static void tpm_tis_spi_driver_exit(void);
261:	static int tpm_tis_spi_driver_init(void);
196:	static int tpm_tis_spi_driver_probe(struct spi_device *);
48:	static int tpm_tis_spi_flow_control(struct tpm_tis_spi_phy *, struct spi_transfer *);
172:	static int tpm_tis_spi_probe(struct spi_device *);
143:	static int tpm_tis_spi_read_bytes(struct tpm_tis_data *, u32, u16, u8 *, enum tpm_tis_io_mode);
216:	static void tpm_tis_spi_remove(struct spi_device *);
149:	static int tpm_tis_spi_write_bytes(struct tpm_tis_data *, u32, u16, const u8 *, enum tpm_tis_io_mode);

File drivers/char/tpm/tpmrm-dev.c:
13:	static int tpmrm_open(struct inode *, struct file *);
35:	static int tpmrm_release(struct inode *, struct file *);

File drivers/char/virtio_console.c:
1212:	int virtio_cons_early_init(int (*)(u32, const char *, int));
540:	static ssize_t __send_control_msg(struct ports_device *, u32, unsigned int, unsigned int);
597:	static ssize_t __send_to_port(struct port *, struct scatterlist *, int, size_t, void *, bool);
1354:	static int add_port(struct ports_device *, u32);
405:	static struct port_buffer *alloc_buf(struct virtio_device *, size_t, int);
1799:	static void config_intr(struct virtio_device *);
1809:	static void config_work_handler(struct work_struct *);
1791:	static void control_intr(struct virtqueue *);
1695:	static void control_work_handler(struct work_struct *);
499:	static void discard_port_data(struct port *);
1322:	static int fill_queue(struct virtqueue *, spinlock_t *);
655:	static ssize_t fill_readbuf(struct port *, char *, size_t, bool);
350:	static void free_buf(struct port_buffer *, bool);
1140:	static int get_chars(u32, char *, int);
1746:	static void in_intr(struct virtqueue *);
1218:	static int init_port_console(struct port *);
1175:	static int notifier_add_vio(struct hvc_struct *, int);
1189:	static void notifier_del_vio(struct hvc_struct *, int);
1733:	static void out_intr(struct virtqueue *);
857:	static int pipe_to_sg(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
1311:	static int port_debugfs_open(struct inode *, struct file *);
1293:	static int port_debugfs_show(struct seq_file *, void *);
1075:	static int port_fops_fasync(int, struct file *, int);
1021:	static int port_fops_open(struct inode *, struct file *);
962:	static __poll_t port_fops_poll(struct file *, poll_table *);
730:	static ssize_t port_fops_read(struct file *, char *, size_t, loff_t *);
987:	static int port_fops_release(struct inode *, struct file *);
901:	static ssize_t port_fops_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
797:	static ssize_t port_fops_write(struct file *, const char *, size_t, loff_t *);
1109:	static int put_chars(u32, const char *, int);
383:	static void reclaim_dma_bufs(void);
1271:	static ssize_t show_port_name(struct device *, struct device_attribute *, char *);
1506:	static void unplug_port(struct port *);
1996:	static int virtcons_probe(struct virtio_device *);
1945:	static void virtcons_remove(struct virtio_device *);
2279:	static void virtio_console_fini(void);
2244:	static int virtio_console_init(void);
777:	static int wait_port_writable(struct port *, bool);
698:	static bool will_read_block(struct port *);
707:	static bool will_write_block(struct port *);

File drivers/clk/clk-bd718x7.c:
42:	static void bd71837_clk_disable(struct clk_hw *);
52:	static int bd71837_clk_enable(struct clk_hw *);
161:	static void bd71837_clk_exit(void);
161:	static int bd71837_clk_init(void);
59:	static int bd71837_clk_is_enabled(struct clk_hw *);
79:	static int bd71837_clk_probe(struct platform_device *);

File drivers/clk/clk-bulk.c:
211:	void clk_bulk_disable(int, const struct clk_bulk_data *);
227:	int clk_bulk_enable(int, const struct clk_bulk_data *);
114:	int clk_bulk_get(struct device *, int, struct clk_bulk_data *);
139:	int clk_bulk_get_all(struct device *, struct clk_bulk_data **);
121:	int clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
176:	int clk_bulk_prepare(int, const struct clk_bulk_data *);
72:	void clk_bulk_put(int, struct clk_bulk_data *);
128:	void clk_bulk_put_all(int, struct clk_bulk_data *);
161:	void clk_bulk_unprepare(int, const struct clk_bulk_data *);

File drivers/clk/clk-composite.c:
351:	struct clk_hw *clk_hw_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
365:	struct clk_hw *clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
431:	void clk_hw_unregister_composite(struct clk_hw *);
380:	struct clk *clk_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
398:	struct clk *clk_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
416:	void clk_unregister_composite(struct clk *);
476:	struct clk_hw *devm_clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
234:	static struct clk_hw *__clk_hw_register_composite(struct device *, const char *, const char * const *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
68:	static int clk_composite_determine_rate(struct clk_hw *, struct clk_rate_request *);
223:	static void clk_composite_disable(struct clk_hw *);
212:	static int clk_composite_enable(struct clk_hw *);
11:	static u8 clk_composite_get_parent(struct clk_hw *);
201:	static int clk_composite_is_enabled(struct clk_hw *);
33:	static unsigned long clk_composite_recalc_rate(struct clk_hw *, unsigned long);
150:	static long clk_composite_round_rate(struct clk_hw *, unsigned long, unsigned long *);
22:	static int clk_composite_set_parent(struct clk_hw *, u8);
162:	static int clk_composite_set_rate(struct clk_hw *, unsigned long, unsigned long);
174:	static int clk_composite_set_rate_and_parent(struct clk_hw *, unsigned long, unsigned long, u8);
442:	static void devm_clk_hw_release_composite(struct device *, void *);

File drivers/clk/clk-conf.c:
131:	int of_clk_set_defaults(struct device_node *, bool);

File drivers/clk/clk-cs2000-cp.c:
340:	static int __cs2000_set_rate(struct cs2000_priv *, int, unsigned long, unsigned long);
410:	static void cs2000_disable(struct clk_hw *);
630:	static void cs2000_driver_exit(void);
630:	static int cs2000_driver_init(void);
390:	static int cs2000_enable(struct clk_hw *);
419:	static u8 cs2000_get_parent(struct clk_hw *);
571:	static int cs2000_probe(struct i2c_client *);
78:	static bool cs2000_readable_reg(struct device *, unsigned int);
296:	static unsigned long cs2000_recalc_rate(struct clk_hw *, unsigned long);
560:	static void cs2000_remove(struct i2c_client *);
308:	static long cs2000_round_rate(struct clk_hw *, unsigned long, unsigned long *);
372:	static int cs2000_set_rate(struct clk_hw *, unsigned long, unsigned long);
88:	static bool cs2000_volatile_reg(struct device *, unsigned int);
83:	static bool cs2000_writeable_reg(struct device *, unsigned int);

File drivers/clk/clk-devres.c:
140:	int devm_clk_bulk_get(struct device *, int, struct clk_bulk_data *);
161:	int devm_clk_bulk_get_all(struct device *, struct clk_bulk_data **);
147:	int devm_clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
63:	struct clk *devm_clk_get(struct device *, const char *);
75:	struct clk *devm_clk_get_enabled(struct device *, const char *);
82:	struct clk *devm_clk_get_optional(struct device *, const char *);
95:	struct clk *devm_clk_get_optional_enabled(struct device *, const char *);
88:	struct clk *devm_clk_get_optional_prepared(struct device *, const char *);
69:	struct clk *devm_clk_get_prepared(struct device *, const char *);
195:	void devm_clk_put(struct device *, struct clk *);
205:	struct clk *devm_get_clk_from_child(struct device *, struct device_node *, const char *);
107:	static void devm_clk_bulk_release(struct device *, void *);
154:	static void devm_clk_bulk_release_all(struct device *, void *);
185:	static int devm_clk_match(struct device *, void *, void *);
12:	static void devm_clk_release(struct device *, void *);

File drivers/clk/clk-divider.c:
537:	struct clk_hw *__clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
663:	struct clk_hw *__devm_clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
647:	void clk_hw_unregister_divider(struct clk_hw *);
610:	struct clk *clk_register_divider_table(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
627:	void clk_unregister_divider(struct clk *);
346:	int divider_determine_rate(struct clk_hw *, struct clk_rate_request *, const struct clk_div_table *, u8, unsigned long);
470:	int divider_get_val(unsigned long, unsigned long, const struct clk_div_table *, u8, unsigned long);
130:	unsigned long divider_recalc_rate(struct clk_hw *, unsigned long, unsigned int, const struct clk_div_table *, unsigned long, unsigned long);
361:	int divider_ro_determine_rate(struct clk_hw *, struct clk_rate_request *, const struct clk_div_table *, u8, unsigned long, unsigned int);
406:	long divider_ro_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long, unsigned int);
384:	long divider_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long);
449:	static int clk_divider_determine_rate(struct clk_hw *, struct clk_rate_request *);
149:	static unsigned long clk_divider_recalc_rate(struct clk_hw *, unsigned long);
428:	static long clk_divider_round_rate(struct clk_hw *, unsigned long, unsigned long *);
487:	static int clk_divider_set_rate(struct clk_hw *, unsigned long, unsigned long);
658:	static void devm_clk_hw_release_divider(struct device *, void *);

File drivers/clk/clk-fixed-factor.c:
191:	struct clk_hw *clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
181:	struct clk_hw *clk_hw_register_fixed_factor_parent_hw(struct device *, const char *, const struct clk_hw *, unsigned long, unsigned int, unsigned int);
227:	void clk_hw_unregister_fixed_factor(struct clk_hw *);
200:	struct clk *clk_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
214:	void clk_unregister_fixed_factor(struct clk *);
238:	struct clk_hw *devm_clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
150:	struct clk_hw *devm_clk_hw_register_fixed_factor_index(struct device *, const char *, unsigned int, unsigned long, unsigned int, unsigned int);
172:	struct clk_hw *devm_clk_hw_register_fixed_factor_parent_hw(struct device *, const char *, const struct clk_hw *, unsigned long, unsigned int, unsigned int);
293:	void of_fixed_factor_clk_setup(struct device_node *);
80:	static struct clk_hw *__clk_hw_register_fixed_factor(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, int, unsigned long, unsigned int, unsigned int, bool);
248:	static struct clk_hw *_of_fixed_factor_clk_setup(struct device_node *);
22:	static unsigned long clk_factor_recalc_rate(struct clk_hw *, unsigned long);
33:	static long clk_factor_round_rate(struct clk_hw *, unsigned long, unsigned long *);
48:	static int clk_factor_set_rate(struct clk_hw *, unsigned long, unsigned long);
67:	static void devm_clk_hw_register_fixed_factor_release(struct device *, void *);
341:	static int of_fixed_factor_clk_driver_init(void);
310:	static int of_fixed_factor_clk_probe(struct platform_device *);
300:	static int of_fixed_factor_clk_remove(struct platform_device *);

File drivers/clk/clk-fixed-rate.c:
64:	struct clk_hw *__clk_hw_register_fixed_rate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
148:	void clk_hw_unregister_fixed_rate(struct clk_hw *);
121:	struct clk *clk_register_fixed_rate(struct device *, const char *, const char *, unsigned long, unsigned long);
135:	void clk_unregister_fixed_rate(struct clk *);
193:	void of_fixed_clk_setup(struct device_node *);
160:	static struct clk_hw *_of_fixed_clk_setup(struct device_node *);
35:	static unsigned long clk_fixed_rate_recalc_accuracy(struct clk_hw *, unsigned long);
29:	static unsigned long clk_fixed_rate_recalc_rate(struct clk_hw *, unsigned long);
52:	static void devm_clk_hw_register_fixed_rate_release(struct device *, void *);
239:	static int of_fixed_clk_driver_init(void);
209:	static int of_fixed_clk_probe(struct platform_device *);
199:	static int of_fixed_clk_remove(struct platform_device *);

File drivers/clk/clk-fractional-divider.c:
116:	void clk_fractional_divider_general_approximation(struct clk_hw *, unsigned long, unsigned long *, unsigned long *, unsigned long *);
240:	struct clk_hw *clk_hw_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
298:	void clk_hw_unregister_fractional_divider(struct clk_hw *);
282:	struct clk *clk_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
223:	static void clk_fd_debug_init(struct clk_hw *, struct dentry *);
221:	static int clk_fd_denominator_fops_open(struct inode *, struct file *);
211:	static int clk_fd_denominator_get(void *, u64 *);
209:	static int clk_fd_numerator_fops_open(struct inode *, struct file *);
199:	static int clk_fd_numerator_get(void *, u64 *);
100:	static unsigned long clk_fd_recalc_rate(struct clk_hw *, unsigned long);
142:	static long clk_fd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
163:	static int clk_fd_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-gate.c:
127:	struct clk_hw *__clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
232:	struct clk_hw *__devm_clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
103:	int clk_gate_is_enabled(struct clk_hw *);
216:	void clk_hw_unregister_gate(struct clk_hw *);
185:	struct clk *clk_register_gate(struct device *, const char *, const char *, unsigned long, void *, u8, u8, spinlock_t *);
200:	void clk_unregister_gate(struct clk *);
98:	static void clk_gate_disable(struct clk_hw *);
91:	static int clk_gate_enable(struct clk_hw *);
56:	static void clk_gate_endisable(struct clk_hw *, int);
227:	static void devm_clk_hw_release_gate(struct device *, void *);

File drivers/clk/clk-gpio.c:
60:	static void clk_gpio_gate_disable(struct clk_hw *);
51:	static int clk_gpio_gate_enable(struct clk_hw *);
67:	static int clk_gpio_gate_is_enabled(struct clk_hw *);
117:	static u8 clk_gpio_mux_get_parent(struct clk_hw *);
124:	static int clk_gpio_mux_set_parent(struct clk_hw *, u8);
96:	static int clk_sleeping_gpio_gate_is_prepared(struct clk_hw *);
80:	static int clk_sleeping_gpio_gate_prepare(struct clk_hw *);
89:	static void clk_sleeping_gpio_gate_unprepare(struct clk_hw *);
249:	static int gpio_clk_driver_init(void);
193:	static int gpio_clk_driver_probe(struct platform_device *);

File drivers/clk/clk-multiplier.c:
41:	static unsigned long clk_multiplier_recalc_rate(struct clk_hw *, unsigned long);
115:	static long clk_multiplier_round_rate(struct clk_hw *, unsigned long, unsigned long *);
125:	static int clk_multiplier_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clk/clk-mux.c:
149:	struct clk_hw *__clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
215:	struct clk_hw *__devm_clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
276:	void clk_hw_unregister_mux(struct clk_hw *);
70:	unsigned int clk_mux_index_to_val(const u32 *, unsigned int, u8);
43:	int clk_mux_val_to_index(struct clk_hw *, const u32 *, unsigned int, unsigned int);
244:	struct clk *clk_register_mux_table(struct device *, const char *, const char * const *, u8, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
260:	void clk_unregister_mux(struct clk *);
129:	static int clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
88:	static u8 clk_mux_get_parent(struct clk_hw *);
99:	static int clk_mux_set_parent(struct clk_hw *, u8);
210:	static void devm_clk_hw_release_mux(struct device *, void *);

File drivers/clk/clk-renesas-pcie.c:
377:	static void rs9_driver_exit(void);
377:	static int rs9_driver_init(void);
261:	static struct clk_hw *rs9_of_clk_get(struct of_phandle_args *, void *);
269:	static int rs9_probe(struct i2c_client *);
110:	static int rs9_regmap_i2c_read(void *, unsigned int, unsigned int *);
93:	static int rs9_regmap_i2c_write(void *, unsigned int, unsigned int);
235:	static void rs9_update_config(struct rs9_driver_data *);

File drivers/clk/clk-rk808.c:
78:	static struct clk_hw *of_clk_rk808_get(struct of_phandle_args *, void *);
50:	static int rk808_clkout2_is_prepared(struct clk_hw *);
40:	static int rk808_clkout2_prepare(struct clk_hw *);
45:	static void rk808_clkout2_unprepare(struct clk_hw *);
206:	static void rk808_clkout_driver_exit(void);
206:	static int rk808_clkout_driver_init(void);
153:	static int rk808_clkout_probe(struct platform_device *);
23:	static unsigned long rk808_clkout_recalc_rate(struct clk_hw *, unsigned long);
113:	static int rk817_clkout2_is_prepared(struct clk_hw *);
103:	static int rk817_clkout2_prepare(struct clk_hw *);
108:	static void rk817_clkout2_unprepare(struct clk_hw *);

File drivers/clk/clk-s2mps11.c:
271:	static void s2mps11_clk_driver_exit(void);
271:	static int s2mps11_clk_driver_init(void);
54:	static int s2mps11_clk_is_prepared(struct clk_hw *);
37:	static int s2mps11_clk_prepare(struct clk_hw *);
120:	static int s2mps11_clk_probe(struct platform_device *);
68:	static unsigned long s2mps11_clk_recalc_rate(struct clk_hw *, unsigned long);
205:	static int s2mps11_clk_remove(struct platform_device *);
46:	static void s2mps11_clk_unprepare(struct clk_hw *);

File drivers/clk/clk-scmi.c:
98:	static void scmi_clk_atomic_disable(struct clk_hw *);
91:	static int scmi_clk_atomic_enable(struct clk_hw *);
84:	static void scmi_clk_disable(struct clk_hw *);
77:	static int scmi_clk_enable(struct clk_hw *);
27:	static unsigned long scmi_clk_recalc_rate(struct clk_hw *, unsigned long);
40:	static long scmi_clk_round_rate(struct clk_hw *, unsigned long, unsigned long *);
69:	static int scmi_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
262:	static void scmi_clocks_driver_exit(void);
262:	static int scmi_clocks_driver_init(void);
169:	static int scmi_clocks_probe(struct scmi_device *);

File drivers/clk/clk-scpi.c:
28:	static unsigned long scpi_clk_recalc_rate(struct clk_hw *, unsigned long);
36:	static long scpi_clk_round_rate(struct clk_hw *, unsigned long, unsigned long *);
48:	static int scpi_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
310:	static void scpi_clocks_driver_exit(void);
310:	static int scpi_clocks_driver_init(void);
264:	static int scpi_clocks_probe(struct platform_device *);
249:	static int scpi_clocks_remove(struct platform_device *);
82:	static unsigned long scpi_dvfs_recalc_rate(struct clk_hw *, unsigned long);
96:	static long scpi_dvfs_round_rate(struct clk_hw *, unsigned long, unsigned long *);
115:	static int scpi_dvfs_set_rate(struct clk_hw *, unsigned long, unsigned long);
176:	static struct clk_hw *scpi_of_clk_src_get(struct of_phandle_args *, void *);

File drivers/clk/clk-versaclock5.c:
671:	static unsigned char vc5_clk_out_get_parent(struct clk_hw *);
596:	static int vc5_clk_out_prepare(struct clk_hw *);
705:	static int vc5_clk_out_set_parent(struct clk_hw *, u8);
661:	static void vc5_clk_out_unprepare(struct clk_hw *);
287:	static unsigned long vc5_dbl_recalc_rate(struct clk_hw *, unsigned long);
305:	static long vc5_dbl_round_rate(struct clk_hw *, unsigned long, unsigned long *);
314:	static int vc5_dbl_set_rate(struct clk_hw *, unsigned long, unsigned long);
1295:	static void vc5_driver_exit(void);
1295:	static int vc5_driver_init(void);
495:	static unsigned long vc5_fod_recalc_rate(struct clk_hw *, unsigned long);
523:	static long vc5_fod_round_rate(struct clk_hw *, unsigned long, unsigned long *);
555:	static int vc5_fod_set_rate(struct clk_hw *, unsigned long, unsigned long);
902:	static int vc5_get_output_config(struct i2c_client *, struct vc5_out_data *);
227:	static unsigned char vc5_mux_get_parent(struct clk_hw *);
252:	static int vc5_mux_set_parent(struct clk_hw *, u8);
733:	static struct clk_hw *vc5_of_clk_get(struct of_phandle_args *, void *);
337:	static unsigned long vc5_pfd_recalc_rate(struct clk_hw *, unsigned long);
364:	static long vc5_pfd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
384:	static int vc5_pfd_set_rate(struct clk_hw *, unsigned long, unsigned long);
428:	static unsigned long vc5_pll_recalc_rate(struct clk_hw *, unsigned long);
445:	static long vc5_pll_round_rate(struct clk_hw *, unsigned long, unsigned long *);
473:	static int vc5_pll_set_rate(struct clk_hw *, unsigned long, unsigned long);
942:	static int vc5_probe(struct i2c_client *);
203:	static bool vc5_regmap_is_writeable(struct device *, unsigned int);
1178:	static void vc5_remove(struct i2c_client *);
847:	static int vc5_update_cap_load(struct device_node *, struct vc5_driver_data *);

File drivers/clk/clk-xgene.c:
483:	static void xgene_clk_disable(struct clk_hw *);
443:	static int xgene_clk_enable(struct clk_hw *);
513:	static int xgene_clk_is_enabled(struct clk_hw *);
58:	static int xgene_clk_pll_is_enabled(struct clk_hw *);
70:	static unsigned long xgene_clk_pll_recalc_rate(struct clk_hw *, unsigned long);
236:	static unsigned long xgene_clk_pmd_recalc_rate(struct clk_hw *, unsigned long);
273:	static long xgene_clk_pmd_round_rate(struct clk_hw *, unsigned long, unsigned long *);
292:	static int xgene_clk_pmd_set_rate(struct clk_hw *, unsigned long, unsigned long);
532:	static unsigned long xgene_clk_recalc_rate(struct clk_hw *, unsigned long);
596:	static long xgene_clk_round_rate(struct clk_hw *, unsigned long, unsigned long *);
556:	static int xgene_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
665:	static void xgene_devclk_init(struct device_node *);
198:	static void xgene_pcppllclk_init(struct device_node *);
169:	static void xgene_pllclk_init(struct device_node *, enum xgene_pll_type);
377:	static void xgene_pmdclk_init(struct device_node *);
193:	static void xgene_socpllclk_init(struct device_node *);

File drivers/clk/clk.c:
1590:	int __clk_determine_rate(struct clk_hw *, struct clk_rate_request *);
462:	unsigned int __clk_get_enable_count(struct clk *);
269:	struct clk_hw *__clk_get_hw(struct clk *);
257:	const char *__clk_get_name(const struct clk *);
521:	bool __clk_is_enabled(struct clk *);
672:	struct clk *__clk_lookup(const char *);
750:	int __clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
757:	int __clk_mux_determine_rate_closest(struct clk_hw *, struct clk_rate_request *);
4518:	void __clk_put(struct clk *);
1089:	void clk_disable(struct clk *);
1254:	int clk_enable(struct clk *);
1156:	void clk_gate_restore_context(struct clk_hw *);
1760:	long clk_get_accuracy(struct clk *);
2650:	struct clk *clk_get_parent(struct clk *);
2920:	int clk_get_phase(struct clk *);
1846:	unsigned long clk_get_rate(struct clk *);
3092:	int clk_get_scaled_duty_cycle(struct clk *, unsigned int);
2702:	bool clk_has_parent(const struct clk *, const struct clk *);
3954:	struct clk *clk_hw_create_clk(struct device *, struct clk_hw *, const char *, const char *);
1526:	void clk_hw_forward_rate_request(const struct clk_hw *, const struct clk_rate_request *, const struct clk_hw *, struct clk_rate_request *, unsigned long);
3991:	struct clk *clk_hw_get_clk(struct clk_hw *, const char *);
497:	unsigned long clk_hw_get_flags(const struct clk_hw *);
263:	const char *clk_hw_get_name(const struct clk_hw *);
275:	unsigned int clk_hw_get_num_parents(const struct clk_hw *);
281:	struct clk_hw *clk_hw_get_parent(const struct clk_hw *);
452:	struct clk_hw *clk_hw_get_parent_by_index(const struct clk_hw *, unsigned int);
1911:	int clk_hw_get_parent_index(struct clk_hw *);
483:	unsigned long clk_hw_get_rate(const struct clk_hw *);
706:	void clk_hw_get_rate_range(struct clk_hw *, unsigned long *, unsigned long *);
1504:	void clk_hw_init_rate_request(const struct clk_hw *, struct clk_rate_request *, unsigned long);
515:	bool clk_hw_is_enabled(const struct clk_hw *);
503:	bool clk_hw_is_prepared(const struct clk_hw *);
509:	bool clk_hw_rate_is_protected(const struct clk_hw *);
4229:	int clk_hw_register(struct device *, struct clk_hw *);
2684:	void clk_hw_reparent(struct clk_hw *, struct clk_hw *);
1616:	unsigned long clk_hw_round_rate(struct clk_hw *, unsigned long);
2777:	int clk_hw_set_parent(struct clk_hw *, struct clk_hw *);
731:	void clk_hw_set_rate_range(struct clk_hw *, unsigned long, unsigned long);
4394:	void clk_hw_unregister(struct clk_hw *);
1278:	bool clk_is_enabled_when_prepared(struct clk *);
3112:	bool clk_is_match(const struct clk *, const struct clk *);
586:	int clk_mux_determine_rate_flags(struct clk_hw *, struct clk_rate_request *, unsigned long);
4577:	int clk_notifier_register(struct clk *, struct notifier_block *);
4625:	int clk_notifier_unregister(struct clk *, struct notifier_block *);
1032:	int clk_prepare(struct clk *);
886:	int clk_rate_exclusive_get(struct clk *);
820:	void clk_rate_exclusive_put(struct clk *);
4213:	struct clk *clk_register(struct device *, struct clk_hw *);
1229:	void clk_restore_context(void);
1644:	long clk_round_rate(struct clk *, unsigned long);
1202:	int clk_save_context(void);
3036:	int clk_set_duty_cycle(struct clk *, unsigned int, unsigned int);
2633:	int clk_set_max_rate(struct clk *, unsigned long);
2615:	int clk_set_min_rate(struct clk *, unsigned long);
2800:	int clk_set_parent(struct clk *, struct clk *);
2869:	int clk_set_phase(struct clk *, int);
2441:	int clk_set_rate(struct clk *, unsigned long);
2484:	int clk_set_rate_exclusive(struct clk *, unsigned long);
2591:	int clk_set_rate_range(struct clk *, unsigned long, unsigned long);
951:	void clk_unprepare(struct clk *);
4332:	void clk_unregister(struct clk *);
4486:	struct clk *devm_clk_hw_get_clk(struct device *, struct clk_hw *, const char *);
4450:	int devm_clk_hw_register(struct device *, struct clk_hw *);
4669:	int devm_clk_notifier_register(struct device *, struct clk *, struct notifier_block *);
4420:	struct clk *devm_clk_register(struct device *, struct clk_hw *);
4893:	int devm_of_clk_add_hw_provider(struct device *, struct clk_hw *(*)(struct of_phandle_args *, void *), void *);
4819:	int of_clk_add_hw_provider(struct device_node *, struct clk_hw *(*)(struct of_phandle_args *, void *), void *);
4777:	int of_clk_add_provider(struct device_node *, struct clk *(*)(struct of_phandle_args *, void *), void *);
4923:	void of_clk_del_provider(struct device_node *);
5279:	int of_clk_detect_critical(struct device_node *, int, unsigned long *);
5097:	struct clk *of_clk_get(struct device_node *, int);
5112:	struct clk *of_clk_get_by_name(struct device_node *, const char *);
5063:	struct clk *of_clk_get_from_provider(struct of_phandle_args *);
5071:	struct clk_hw *of_clk_get_hw(struct device_node *, int, const char *);
5127:	unsigned int of_clk_get_parent_count(const struct device_node *);
5139:	const char *of_clk_get_parent_name(const struct device_node *, int);
4755:	struct clk_hw *of_clk_hw_onecell_get(struct of_phandle_args *, void *);
4247:	int of_clk_hw_register(struct device_node *, struct clk_hw *);
4734:	struct clk_hw *of_clk_hw_simple_get(struct of_phandle_args *, void *);
5304:	void of_clk_init(const struct of_device_id *);
5208:	int of_clk_parent_fill(struct device_node *, const char **, unsigned int);
4740:	struct clk *of_clk_src_onecell_get(struct of_phandle_args *, void *);
4727:	struct clk *of_clk_src_simple_get(struct of_phandle_args *, void *);
287:	static struct clk_core *__clk_lookup_subtree(const char *, struct clk_core *);
1723:	static void __clk_recalc_accuracies(struct clk_core *);
1800:	static void __clk_recalc_rates(struct clk_core *, bool, unsigned long);
4095:	static struct clk *__clk_register(struct device *, struct device_node *, struct clk_hw *);
2007:	static void __clk_set_parent_after(struct clk_core *, struct clk_core *, struct clk_core *);
1961:	static struct clk_core *__clk_set_parent_before(struct clk_core *, struct clk_core *);
2073:	static int __clk_speculate_rates(struct clk_core *, unsigned long);
2127:	static struct clk_core *clk_calc_new_rates(struct clk_core *, unsigned long);
2104:	static void clk_calc_subtree(struct clk_core *, unsigned long, struct clk_core *, u8);
2252:	static void clk_change_rate(struct clk_core *);
1041:	static void clk_core_disable(struct clk_core *);
1068:	static void clk_core_disable_lock(struct clk_core *);
1098:	static int clk_core_enable(struct clk_core *);
1134:	static int clk_core_enable_lock(struct clk_core *);
4300:	static void clk_core_evict_parent_cache_subtree(struct clk_core *, const struct clk_core *);
568:	static void clk_core_forward_rate_req(struct clk_core *, const struct clk_rate_request *, struct clk_core *, struct clk_rate_request *, unsigned long);
385:	static struct clk_core *clk_core_get(struct clk_core *, u8);
439:	static struct clk_core *clk_core_get_parent_by_index(struct clk_core *, u8);
3067:	static int clk_core_get_scaled_duty_cycle(struct clk_core *, unsigned int);
3887:	static void clk_core_link_consumer(struct clk_core *, struct clk *);
960:	static int clk_core_prepare(struct clk_core *);
1009:	static int clk_core_prepare_lock(struct clk_core *);
841:	static void clk_core_rate_protect(struct clk_core *);
766:	static void clk_core_rate_unprotect(struct clk_core *);
4694:	static void clk_core_reparent_orphans(void);
3641:	static void clk_core_reparent_orphans_nolock(void);
1184:	static void clk_core_restore_context(struct clk_core *);
1545:	static int clk_core_round_rate_nolock(struct clk_core *, struct clk_rate_request *);
1167:	static int clk_core_save_context(struct clk_core *);
2987:	static int clk_core_set_duty_cycle_nolock(struct clk_core *, struct clk_duty *);
2712:	static int clk_core_set_parent_nolock(struct clk_core *, struct clk_core *);
2371:	static int clk_core_set_rate_nolock(struct clk_core *, unsigned long);
900:	static void clk_core_unprepare(struct clk_core *);
933:	static void clk_core_unprepare_lock(struct clk_core *);
2944:	static int clk_core_update_duty_cycle_nolock(struct clk_core *);
1925:	static void clk_core_update_orphan_status(struct clk_core *, bool);
3504:	static void clk_debug_create_one(struct clk_core *, struct dentry *);
3591:	static int clk_debug_init(void);
1389:	static int clk_disable_unused(void);
1335:	static void clk_disable_unused_subtree(struct clk_core *);
3264:	static int clk_dump_open(struct inode *, struct file *);
3241:	static int clk_dump_show(struct seq_file *, void *);
3227:	static void clk_dump_subtree(struct seq_file *, struct clk_core *, int);
3474:	static int clk_duty_cycle_open(struct inode *, struct file *);
3465:	static int clk_duty_cycle_show(struct seq_file *, void *);
1861:	static int clk_fetch_parent_index(struct clk_core *, struct clk_core *);
3368:	static int clk_flags_open(struct inode *, struct file *);
3349:	static int clk_flags_show(struct seq_file *, void *);
1382:	static int clk_ignore_unused_setup(char *);
3502:	static int clk_max_rate_open(struct inode *, struct file *);
3490:	static int clk_max_rate_show(struct seq_file *, void *);
3488:	static int clk_min_rate_open(struct inode *, struct file *);
3476:	static int clk_min_rate_show(struct seq_file *, void *);
4275:	static void clk_nodrv_disable_unprepare(struct clk_hw *);
4270:	static int clk_nodrv_prepare_enable(struct clk_hw *);
4286:	static int clk_nodrv_set_parent(struct clk_hw *, u8);
4280:	static int clk_nodrv_set_rate(struct clk_hw *, unsigned long, unsigned long);
2214:	static struct clk_core *clk_propagate_rate_change(struct clk_core *, unsigned long);
3327:	static int clk_rate_fops_open(struct inode *, struct file *);
3316:	static int clk_rate_get(void *, u64 *);
2512:	static int clk_set_rate_range_nolock(struct clk *, unsigned long, unsigned long);
3202:	static int clk_summary_open(struct inode *, struct file *);
3183:	static int clk_summary_show(struct seq_file *, void *);
3170:	static void clk_summary_show_subtree(struct seq_file *, struct clk_core *, int);
1305:	static void clk_unprepare_unused_subtree(struct clk_core *);
3427:	static int current_parent_open(struct inode *, struct file *);
3418:	static int current_parent_show(struct seq_file *, void *);
4405:	static void devm_clk_hw_unregister_cb(struct device *, void *);
4662:	static void devm_clk_notifier_release(struct device *, void *);
4471:	static void devm_clk_release(struct device *, void *);
4400:	static void devm_clk_unregister_cb(struct device *, void *);
4855:	static void devm_of_clk_release_provider(struct device *, void *);
3370:	static void possible_parent_show(struct seq_file *, struct clk_core *, unsigned int, char);
3416:	static int possible_parents_open(struct inode *, struct file *);
3404:	static int possible_parents_show(struct seq_file *, void *);

File drivers/clk/clkdev.c:
239:	int clk_add_alias(const char *, const char *, const char *, struct device *);
72:	struct clk_hw *clk_find_hw(const char *, const char *);
100:	struct clk *clk_get(struct device *, const char *);
94:	struct clk *clk_get_sys(const char *, const char *);
340:	int clk_hw_register_clkdev(struct clk_hw *, const char *, const char *);
115:	void clk_put(struct clk *);
313:	int clk_register_clkdev(struct clk *, const char *, const char *);
128:	void clkdev_add(struct clk_lookup *);
136:	void clkdev_add_table(struct clk_lookup *, size_t);
202:	struct clk_lookup *clkdev_create(struct clk *, const char *, const char *, ...);
259:	void clkdev_drop(struct clk_lookup *);
225:	struct clk_lookup *clkdev_hw_create(struct clk_hw *, const char *, const char *, ...);
369:	int devm_clk_hw_register_clkdev(struct device *, struct clk_hw *, const char *, const char *);
268:	static struct clk_lookup *__clk_register_clkdev(struct clk_hw *, const char *, const char *, ...);
349:	static void devm_clkdev_release(void *);
157:	static struct clk_lookup *vclkdev_alloc(struct clk_hw *, const char *, const char *, va_list);

File drivers/clk/keystone/sci-clk.c:
354:	static int _cmp_sci_clk(const void *, const void *);
498:	static int _cmp_sci_clk_list(void *, const struct list_head *, const struct list_head *);
167:	static int sci_clk_determine_rate(struct clk_hw *, struct clk_rate_request *);
377:	static struct clk_hw *sci_clk_get(struct of_phandle_args *, void *);
226:	static u8 sci_clk_get_parent(struct clk_hw *);
111:	static int sci_clk_is_prepared(struct clk_hw *);
72:	static int sci_clk_prepare(struct clk_hw *);
138:	static unsigned long sci_clk_recalc_rate(struct clk_hw *, unsigned long);
253:	static int sci_clk_set_parent(struct clk_hw *, u8);
210:	static int sci_clk_set_rate(struct clk_hw *, unsigned long, unsigned long);
91:	static void sci_clk_unprepare(struct clk_hw *);
707:	static void ti_sci_clk_driver_exit(void);
707:	static int ti_sci_clk_driver_init(void);
641:	static int ti_sci_clk_probe(struct platform_device *);
692:	static int ti_sci_clk_remove(struct platform_device *);

File drivers/clk/keystone/syscon-clk.c:
39:	static void ti_syscon_gate_clk_disable(struct clk_hw *);
193:	static void ti_syscon_gate_clk_driver_exit(void);
193:	static int ti_syscon_gate_clk_driver_init(void);
31:	static int ti_syscon_gate_clk_enable(struct clk_hw *);
46:	static int ti_syscon_gate_clk_is_enabled(struct clk_hw *);
92:	static int ti_syscon_gate_clk_probe(struct platform_device *);

File drivers/clk/versatile/clk-vexpress-osc.c:
121:	static void vexpress_osc_driver_exit(void);
121:	static int vexpress_osc_driver_init(void);
65:	static int vexpress_osc_probe(struct platform_device *);
25:	static unsigned long vexpress_osc_recalc_rate(struct clk_hw *, unsigned long);
36:	static long vexpress_osc_round_rate(struct clk_hw *, unsigned long, unsigned long *);
50:	static int vexpress_osc_set_rate(struct clk_hw *, unsigned long, unsigned long);

File drivers/clocksource/arm_arch_timer.c:
1053:	bool arch_timer_evtstrm_available(void);
1070:	struct arch_timer_kvm_info *arch_timer_get_kvm_info(void);
1048:	u32 arch_timer_get_rate(void);
1754:	int kvm_arch_ptp_get_crosststamp(u64 *, struct timespec64 *, struct clocksource **);
827:	static void __arch_timer_setup(unsigned int, struct clock_event_device *);
199:	static u64 arch_counter_get_cntpct(void);
194:	static u64 arch_counter_get_cntpct_stable(void);
209:	static u64 arch_counter_get_cntvct(void);
1063:	static u64 arch_counter_get_cntvct_mem(void);
204:	static u64 arch_counter_get_cntvct_stable(void);
223:	static u64 arch_counter_read(struct clocksource *);
228:	static u64 arch_counter_read_cc(const struct cyclecounter *);
1075:	static void arch_counter_register(unsigned int);
1030:	static void arch_timer_banner(unsigned int);
592:	static void arch_timer_check_ool_workaround(enum arch_timer_erratum_match_type, void *);
1319:	static int arch_timer_common_init(void);
1130:	static int arch_timer_dying_cpu(unsigned int);
670:	static irqreturn_t arch_timer_handler_phys(int, void *);
677:	static irqreturn_t arch_timer_handler_phys_mem(int, void *);
663:	static irqreturn_t arch_timer_handler_virt(int, void *);
684:	static irqreturn_t arch_timer_handler_virt_mem(int, void *);
1450:	static struct arch_timer_mem_frame *arch_timer_mem_find_best_frame(struct arch_timer_mem *);
1431:	static u32 arch_timer_mem_frame_get_cntfrq(struct arch_timer_mem_frame *);
1501:	static int arch_timer_mem_frame_register(struct arch_timer_mem_frame *);
1538:	static int arch_timer_mem_of_init(struct device_node *);
1253:	static int arch_timer_mem_register(void *, unsigned int);
1292:	static bool arch_timer_needs_of_probing(void);
1016:	static void arch_timer_of_configure_rate(u32, struct device_node *);
1365:	static int arch_timer_of_init(struct device_node *);
1183:	static int arch_timer_register(void);
749:	static int arch_timer_set_next_event_phys(unsigned long, struct clock_event_device *);
796:	static int arch_timer_set_next_event_phys_mem(unsigned long, struct clock_event_device *);
742:	static int arch_timer_set_next_event_virt(unsigned long, struct clock_event_device *);
789:	static int arch_timer_set_next_event_virt_mem(unsigned long, struct clock_event_device *);
708:	static int arch_timer_shutdown_phys(struct clock_event_device *);
718:	static int arch_timer_shutdown_phys_mem(struct clock_event_device *);
703:	static int arch_timer_shutdown_virt(struct clock_event_device *);
713:	static int arch_timer_shutdown_virt_mem(struct clock_event_device *);
977:	static int arch_timer_starting_cpu(unsigned int);
341:	static u64 arm64_858921_read_cntpct_el0(void);
350:	static u64 arm64_858921_read_cntvct_el0(void);
99:	static int early_evtstrm_cfg(char *);
431:	static int erratum_set_next_event_phys(unsigned long, struct clock_event_device *);
424:	static int erratum_set_next_event_virt(unsigned long, struct clock_event_device *);
270:	static u64 fsl_a008585_read_cntpct_el0(void);
275:	static u64 fsl_a008585_read_cntvct_el0(void);
306:	static u64 hisi_161010101_read_cntpct_el0(void);
311:	static u64 hisi_161010101_read_cntvct_el0(void);

File drivers/clocksource/dummy_timer.c:
31:	static int dummy_timer_register(void);
16:	static int dummy_timer_starting_cpu(unsigned int);

File drivers/clocksource/timer-of.c:
220:	void timer_of_cleanup(struct timer_of *);
168:	int timer_of_init(struct device_node *, struct timer_of *);
154:	static int timer_of_base_init(struct device_node *, struct of_timer_base *);
94:	static void timer_of_clk_exit(struct of_timer_clk *);
110:	static int timer_of_clk_init(struct device_node *, struct of_timer_clk *);
22:	static void timer_of_irq_exit(struct of_timer_irq *);
50:	static int timer_of_irq_init(struct device_node *, struct of_timer_irq *);

File drivers/clocksource/timer-probe.c:
16:	void timer_probe(void);

File drivers/clocksource/timer-ti-dm.c:
719:	u32 omap_dm_timer_modify_idlect_mask(__u32);
499:	static struct dmtimer *_omap_dm_timer_request(int, void *);
463:	static void omap_dm_timer_disable(struct omap_dm_timer *);
1283:	static void omap_dm_timer_driver_exit(void);
1283:	static int omap_dm_timer_driver_init(void);
452:	static void omap_dm_timer_enable(struct omap_dm_timer *);
633:	static int omap_dm_timer_free(struct omap_dm_timer *);
710:	static struct clk *omap_dm_timer_get_fclk(struct omap_dm_timer *);
659:	static int omap_dm_timer_get_irq(struct omap_dm_timer *);
863:	static int omap_dm_timer_get_pwm_status(struct omap_dm_timer *);
1073:	static int omap_dm_timer_probe(struct platform_device *);
1003:	static unsigned int omap_dm_timer_read_counter(struct omap_dm_timer *);
974:	static unsigned int omap_dm_timer_read_status(struct omap_dm_timer *);
1180:	static int omap_dm_timer_remove(struct platform_device *);
583:	static struct omap_dm_timer *omap_dm_timer_request(void);
619:	static struct omap_dm_timer *omap_dm_timer_request_by_node(struct device_node *);
594:	static struct omap_dm_timer *omap_dm_timer_request_specific(int);
946:	static int omap_dm_timer_set_int_disable(struct omap_dm_timer *, u32);
916:	static int omap_dm_timer_set_int_enable(struct omap_dm_timer *, unsigned int);
776:	static int omap_dm_timer_set_load(struct omap_dm_timer *, unsigned int);
799:	static int omap_dm_timer_set_match(struct omap_dm_timer *, int, unsigned int);
886:	static int omap_dm_timer_set_prescaler(struct omap_dm_timer *, int);
829:	static int omap_dm_timer_set_pwm(struct omap_dm_timer *, int, int, int, int);
394:	static int omap_dm_timer_set_source(struct omap_dm_timer *, int);
728:	static int omap_dm_timer_start(struct omap_dm_timer *);
754:	static int omap_dm_timer_stop(struct omap_dm_timer *);
1016:	static int omap_dm_timer_write_counter(struct omap_dm_timer *, unsigned int);
990:	static int omap_dm_timer_write_status(struct omap_dm_timer *, unsigned int);
325:	static int omap_timer_context_notifier(struct notifier_block *, unsigned long, void *);

File drivers/crypto/amlogic/amlogic-gxl-cipher.c:
349:	int meson_aes_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
341:	void meson_cipher_exit(struct crypto_tfm *);
311:	int meson_cipher_init(struct crypto_tfm *);
275:	int meson_skdecrypt(struct skcipher_request *);
293:	int meson_skencrypt(struct skcipher_request *);
25:	static bool meson_cipher_need_fallback(struct skcipher_request *);
261:	static int meson_handle_cipher_request(struct crypto_engine *, void *);

File drivers/crypto/amlogic/amlogic-gxl-core.c:
312:	static void meson_crypto_driver_exit(void);
312:	static int meson_crypto_driver_init(void);
215:	static int meson_crypto_probe(struct platform_device *);
281:	static int meson_crypto_remove(struct platform_device *);
23:	static irqreturn_t meson_irq_handler(int, void *);

File drivers/crypto/ccree/cc_aead.c:
2607:	int cc_aead_alloc(struct cc_drvdata *);
2593:	int cc_aead_free(struct cc_drvdata *);
208:	static void cc_aead_complete(struct device *, void *, int);
2064:	static int cc_aead_decrypt(struct aead_request *);
2020:	static int cc_aead_encrypt(struct aead_request *);
64:	static void cc_aead_exit(struct crypto_aead *);
125:	static int cc_aead_init(struct crypto_aead *);
669:	static int cc_aead_setauthsize(struct crypto_aead *, unsigned int);
541:	static int cc_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
702:	static int cc_ccm_setauthsize(struct crypto_aead *, unsigned int);
638:	static int cc_des3_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
2141:	static int cc_gcm_setauthsize(struct crypto_aead *, unsigned int);
1891:	static int cc_proc_aead(struct aead_request *, enum drv_crypto_direction);
760:	static void cc_proc_authen_desc(struct aead_request *, unsigned int, struct cc_hw_desc *, unsigned int *, int);
824:	static void cc_proc_cipher_desc(struct aead_request *, unsigned int, struct cc_hw_desc *, unsigned int *);
870:	static void cc_proc_digest_desc(struct aead_request *, struct cc_hw_desc *, unsigned int *);
1096:	static void cc_proc_scheme_desc(struct aead_request *, struct cc_hw_desc *, unsigned int *);
2245:	static int cc_rfc4106_gcm_decrypt(struct aead_request *);
2194:	static int cc_rfc4106_gcm_encrypt(struct aead_request *);
2160:	static int cc_rfc4106_gcm_setauthsize(struct crypto_aead *, unsigned int);
2107:	static int cc_rfc4106_gcm_setkey(struct crypto_aead *, const u8 *, unsigned int);
2082:	static int cc_rfc4309_ccm_decrypt(struct aead_request *);
2038:	static int cc_rfc4309_ccm_encrypt(struct aead_request *);
687:	static int cc_rfc4309_ccm_setauthsize(struct crypto_aead *, unsigned int);
655:	static int cc_rfc4309_ccm_setkey(struct crypto_aead *, const u8 *, unsigned int);
2269:	static int cc_rfc4543_gcm_decrypt(struct aead_request *);
2218:	static int cc_rfc4543_gcm_encrypt(struct aead_request *);
2180:	static int cc_rfc4543_gcm_setauthsize(struct crypto_aead *, unsigned int);
2124:	static int cc_rfc4543_gcm_setkey(struct crypto_aead *, const u8 *, unsigned int);
721:	static void cc_set_assoc_desc(struct aead_request *, unsigned int, struct cc_hw_desc *, unsigned int *);
920:	static void cc_set_cipher_desc(struct aead_request *, struct cc_hw_desc *, unsigned int *);

File drivers/crypto/ccree/cc_buffer_mgr.c:
1389:	int cc_buffer_mgr_fini(struct cc_drvdata *);
1373:	int cc_buffer_mgr_init(struct cc_drvdata *);
106:	void cc_copy_sg_portion(struct device *, u8 *, struct scatterlist *, u32, u32, enum cc_sg_cpy_direct);
946:	int cc_map_aead_request(struct cc_drvdata *, struct aead_request *);
370:	int cc_map_cipher_request(struct cc_drvdata *, void *, unsigned int, unsigned int, void *, struct scatterlist *, struct scatterlist *, gfp_t);
1141:	int cc_map_hash_request_final(struct cc_drvdata *, void *, struct scatterlist *, unsigned int, bool, gfp_t);
1220:	int cc_map_hash_request_update(struct cc_drvdata *, void *, struct scatterlist *, unsigned int, unsigned int, gfp_t);
457:	void cc_unmap_aead_request(struct device *, struct aead_request *);
339:	void cc_unmap_cipher_request(struct device *, void *, unsigned int, struct scatterlist *, struct scatterlist *);
1331:	void cc_unmap_hash_request(struct device *, void *, struct scatterlist *, bool);
584:	static int cc_aead_chain_assoc(struct cc_drvdata *, struct aead_request *, struct buffer_array *, bool, bool);
788:	static int cc_aead_chain_data(struct cc_drvdata *, struct aead_request *, struct buffer_array *, bool, bool);
544:	static int cc_aead_chain_iv(struct cc_drvdata *, struct aead_request *, struct buffer_array *, bool, bool);
182:	static int cc_generate_mlli(struct device *, struct buffer_array *, struct mlli_params *, gfp_t);
895:	static void cc_update_aead_mlli_nents(struct cc_drvdata *, struct aead_request *);

File drivers/crypto/ccree/cc_cipher.c:
1461:	int cc_cipher_alloc(struct cc_drvdata *);
1449:	int cc_cipher_free(struct cc_drvdata *);
858:	static void cc_cipher_complete(struct device *, void *, int);
999:	static int cc_cipher_decrypt(struct skcipher_request *);
990:	static int cc_cipher_encrypt(struct skcipher_request *);
232:	static void cc_cipher_exit(struct crypto_tfm *);
154:	static int cc_cipher_init(struct crypto_tfm *);
877:	static int cc_cipher_process(struct skcipher_request *, enum drv_crypto_direction);
301:	static int cc_cipher_sethkey(struct crypto_skcipher *, const u8 *, unsigned int);
401:	static int cc_cipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);

File drivers/crypto/ccree/cc_debugfs.c:
104:	void cc_debugfs_fini(struct cc_drvdata *);
58:	void cc_debugfs_global_fini(void);
53:	void cc_debugfs_global_init(void);
63:	int cc_debugfs_init(struct cc_drvdata *);

File drivers/crypto/ccree/cc_driver.c:
169:	void __dump_byte_array(const char *, const u8 *, size_t);
604:	unsigned int cc_get_default_hash_len(struct cc_drvdata *);
248:	bool cc_wait_for_reset_completion(struct cc_drvdata *);
578:	void fini_cc_regs(struct cc_drvdata *);
273:	int init_cc_regs(struct cc_drvdata *);
182:	static irqreturn_t cc_isr(int, void *);
155:	static u32 cc_read_idr(struct cc_drvdata *, const u32 *);
668:	static void ccree_exit(void);
652:	static int ccree_init(void);
612:	static int ccree_probe(struct platform_device *);
627:	static int ccree_remove(struct platform_device *);
103:	static void init_cc_cache_params(struct cc_drvdata *);

File drivers/crypto/ccree/cc_hash.c:
2297:	u32 cc_digest_len_addr(void *, u32);
1952:	int cc_hash_alloc(struct cc_drvdata *);
2058:	int cc_hash_free(struct cc_drvdata *);
1882:	int cc_init_hash_sram(struct cc_drvdata *);
2239:	u32 cc_larval_digest_addr(void *, u32);
1007:	static int cc_cmac_setkey(struct crypto_ahash *, const u8 *, unsigned int);
1141:	static void cc_cra_exit(struct crypto_tfm *);
1120:	static int cc_cra_init(struct crypto_tfm *);
301:	static void cc_digest_complete(struct device *, void *, int);
632:	static int cc_do_finup(struct ahash_request *, bool);
364:	static int cc_fin_hmac(struct cc_hw_desc *, struct ahash_request *, int);
321:	static void cc_hash_complete(struct device *, void *, int);
418:	static int cc_hash_digest(struct ahash_request *);
1499:	static int cc_hash_export(struct ahash_request *, void *);
707:	static int cc_hash_final(struct ahash_request *);
701:	static int cc_hash_finup(struct ahash_request *);
1525:	static int cc_hash_import(struct ahash_request *, const void *);
712:	static int cc_hash_init(struct ahash_request *);
726:	static int cc_hash_setkey(struct crypto_ahash *, const u8 *, unsigned int);
556:	static int cc_hash_update(struct ahash_request *);
1865:	static int cc_init_copy_sram(struct cc_drvdata *, const u32 *, unsigned int, u32 *);
135:	static void cc_init_req(struct device *, struct ahash_req_ctx *, struct cc_hash_ctx *);
1420:	static int cc_mac_digest(struct ahash_request *);
1218:	static int cc_mac_final(struct ahash_request *);
1339:	static int cc_mac_finup(struct ahash_request *);
1150:	static int cc_mac_update(struct ahash_request *);
178:	static int cc_map_req(struct device *, struct ahash_req_ctx *, struct cc_hash_ctx *);
117:	static int cc_map_result(struct device *, struct ahash_req_ctx *, unsigned int);
529:	static int cc_restore_hash(struct cc_hw_desc *, struct cc_hash_ctx *, struct ahash_req_ctx *, unsigned int);
2162:	static void cc_set_desc(struct ahash_req_ctx *, struct cc_hash_ctx *, unsigned int, struct cc_hw_desc *, bool, unsigned int *);
243:	static void cc_unmap_req(struct device *, struct ahash_req_ctx *, struct cc_hash_ctx *);
283:	static void cc_update_complete(struct device *, void *, int);
921:	static int cc_xcbc_setkey(struct crypto_ahash *, const u8 *, unsigned int);

File drivers/crypto/ccree/cc_request_mgr.c:
86:	void cc_req_mgr_fini(struct cc_drvdata *);
113:	int cc_req_mgr_init(struct cc_drvdata *);
401:	int cc_send_request(struct cc_drvdata *, struct cc_crypto_req *, struct cc_hw_desc *, unsigned int, struct crypto_async_request *);
452:	int cc_send_sync_request(struct cc_drvdata *, struct cc_crypto_req *, struct cc_hw_desc *, unsigned int);
531:	void complete_request(struct cc_drvdata *);
501:	int send_request_init(struct cc_drvdata *, struct cc_hw_desc *, unsigned int);
278:	static void cc_do_send_request(struct cc_drvdata *, struct cc_crypto_req *, struct cc_hw_desc *, unsigned int, bool);
613:	static void comp_handler(unsigned long);
216:	static void request_mgr_complete(struct device *, void *, int);

File drivers/crypto/ccree/cc_sram_mgr.c:
77:	void cc_set_sram_desc(const u32 *, u32, unsigned int, struct cc_hw_desc *, unsigned int *);
44:	u32 cc_sram_alloc(struct cc_drvdata *, u32);
17:	int cc_sram_mgr_init(struct cc_drvdata *);

File drivers/devfreq/devfreq.c:
781:	struct devfreq *devfreq_add_device(struct device *, struct devfreq_dev_profile *, const char *, void *);
1249:	int devfreq_add_governor(struct devfreq_governor *);
1050:	struct devfreq *devfreq_get_devfreq_by_node(struct device_node *);
1078:	struct devfreq *devfreq_get_devfreq_by_phandle(struct device *, const char *, int);
122:	void devfreq_get_freq_range(struct devfreq *, unsigned long *, unsigned long *);
558:	void devfreq_monitor_resume(struct devfreq *);
480:	void devfreq_monitor_start(struct devfreq *);
510:	void devfreq_monitor_stop(struct devfreq *);
531:	void devfreq_monitor_suspend(struct devfreq *);
2029:	struct dev_pm_opp *devfreq_recommended_opp(struct device *, unsigned long *, u32);
2138:	int devfreq_register_notifier(struct devfreq *, struct notifier_block *, unsigned int);
2062:	int devfreq_register_opp_notifier(struct device *, struct devfreq *);
974:	int devfreq_remove_device(struct devfreq *);
1340:	int devfreq_remove_governor(struct devfreq_governor *);
1230:	void devfreq_resume(void);
1172:	int devfreq_resume_device(struct devfreq *);
1209:	void devfreq_suspend(void);
1135:	int devfreq_suspend_device(struct devfreq *);
2166:	int devfreq_unregister_notifier(struct devfreq *, struct notifier_block *, unsigned int);
2078:	int devfreq_unregister_opp_notifier(struct device *, struct devfreq *);
596:	void devfreq_update_interval(struct devfreq *, unsigned int *);
216:	int devfreq_update_status(struct devfreq *, unsigned long);
403:	int devfreq_update_target(struct devfreq *, unsigned long);
1019:	struct devfreq *devm_devfreq_add_device(struct device *, struct devfreq_dev_profile *, const char *, void *);
1322:	int devm_devfreq_add_governor(struct device *, struct devfreq_governor *);
2209:	int devm_devfreq_register_notifier(struct device *, struct devfreq *, struct notifier_block *, unsigned int);
2095:	int devm_devfreq_register_opp_notifier(struct device *, struct devfreq *);
1120:	void devm_devfreq_remove_device(struct device *, struct devfreq *);
2245:	void devm_devfreq_unregister_notifier(struct device *, struct devfreq *, struct notifier_block *, unsigned int);
2124:	void devm_devfreq_unregister_opp_notifier(struct device *, struct devfreq *);
442:	int update_devfreq(struct devfreq *);
1657:	static ssize_t available_frequencies_show(struct device *, struct device_attribute *, char *);
1490:	static ssize_t available_governors_show(struct device *, struct device_attribute *, char *);
1888:	static void create_sysfs_files(struct devfreq *, const struct devfreq_governor *);
1536:	static ssize_t cur_freq_show(struct device *, struct device_attribute *, char *);
726:	static void devfreq_dev_release(struct device *);
1989:	static int devfreq_init(void);
453:	static void devfreq_monitor(struct work_struct *);
647:	static int devfreq_notifier_call(struct notifier_block *, unsigned long, void *);
347:	static int devfreq_set_target(struct devfreq *, unsigned long, u32);
1987:	static int devfreq_summary_open(struct inode *, struct file *);
1918:	static int devfreq_summary_show(struct seq_file *, void *);
993:	static int devm_devfreq_dev_match(struct device *, void *, void *);
1003:	static void devm_devfreq_dev_release(struct device *, void *);
2194:	static void devm_devfreq_notifier_release(struct device *, void *);
2084:	static void devm_devfreq_opp_release(struct device *, void *);
1310:	static void devm_devfreq_remove_governor(void *);
1399:	static ssize_t governor_show(struct device *, struct device_attribute *, char *);
1410:	static ssize_t governor_store(struct device *, struct device_attribute *, const char *, size_t);
1643:	static ssize_t max_freq_show(struct device *, struct device_attribute *, char *);
1603:	static ssize_t max_freq_store(struct device *, struct device_attribute *, const char *, size_t);
1589:	static ssize_t min_freq_show(struct device *, struct device_attribute *, char *);
1562:	static ssize_t min_freq_store(struct device *, struct device_attribute *, const char *, size_t);
1391:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
1781:	static ssize_t polling_interval_show(struct device *, struct device_attribute *, char *);
1792:	static ssize_t polling_interval_store(struct device *, struct device_attribute *, const char *, size_t);
714:	static int qos_max_notifier_call(struct notifier_block *, unsigned long, void *);
702:	static int qos_min_notifier_call(struct notifier_block *, unsigned long, void *);
681:	static int qos_notifier_call(struct devfreq *);
1553:	static ssize_t target_freq_show(struct device *, struct device_attribute *, char *);
1814:	static ssize_t timer_show(struct device *, struct device_attribute *, char *);
1825:	static ssize_t timer_store(struct device *, struct device_attribute *, const char *, size_t);
1685:	static ssize_t trans_stat_show(struct device *, struct device_attribute *, char *);
1736:	static ssize_t trans_stat_store(struct device *, struct device_attribute *, const char *, size_t);
292:	static struct devfreq_governor *try_then_request_governor(const char *);

File drivers/devfreq/governor_passive.c:
201:	static int cpufreq_passive_notifier_call(struct notifier_block *, unsigned long, void *);
393:	static int devfreq_passive_event_handler(struct devfreq *, unsigned int, void *);
438:	static void devfreq_passive_exit(void);
167:	static int devfreq_passive_get_target_freq(struct devfreq *, unsigned long *);
432:	static int devfreq_passive_init(void);
337:	static int devfreq_passive_notifier_call(struct notifier_block *, unsigned long, void *);

File drivers/devfreq/governor_simpleondemand.c:
132:	static void devfreq_simple_ondemand_exit(void);
18:	static int devfreq_simple_ondemand_func(struct devfreq *, unsigned long *);
87:	static int devfreq_simple_ondemand_handler(struct devfreq *, unsigned int, void *);
126:	static int devfreq_simple_ondemand_init(void);

File drivers/devfreq/governor_userspace.c:
145:	static void devfreq_userspace_exit(void);
22:	static int devfreq_userspace_func(struct devfreq *, unsigned long *);
114:	static int devfreq_userspace_handler(struct devfreq *, unsigned int, void *);
139:	static int devfreq_userspace_init(void);
55:	static ssize_t set_freq_show(struct device *, struct device_attribute *, char *);
34:	static ssize_t set_freq_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/dma-buf/dma-buf.c:
980:	struct dma_buf_attachment *dma_buf_attach(struct dma_buf *, struct device *);
1396:	int dma_buf_begin_cpu_access(struct dma_buf *, enum dma_data_direction);
1006:	void dma_buf_detach(struct dma_buf *, struct dma_buf_attachment *);
894:	struct dma_buf_attachment *dma_buf_dynamic_attach(struct dma_buf *, struct device *, const struct dma_buf_attach_ops *, void *);
1432:	int dma_buf_end_cpu_access(struct dma_buf *, enum dma_data_direction);
613:	struct dma_buf *dma_buf_export(const struct dma_buf_export_info *);
705:	int dma_buf_fd(struct dma_buf *, int);
730:	struct dma_buf *dma_buf_get(int);
1103:	struct sg_table *dma_buf_map_attachment(struct dma_buf_attachment *, enum dma_data_direction);
1180:	struct sg_table *dma_buf_map_attachment_unlocked(struct dma_buf_attachment *, enum dma_data_direction);
1463:	int dma_buf_mmap(struct dma_buf *, struct vm_area_struct *, unsigned long);
1263:	void dma_buf_move_notify(struct dma_buf *);
1045:	int dma_buf_pin(struct dma_buf_attachment *);
758:	void dma_buf_put(struct dma_buf *);
1208:	void dma_buf_unmap_attachment(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
1240:	void dma_buf_unmap_attachment_unlocked(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
1069:	void dma_buf_unpin(struct dma_buf_attachment *);
1512:	int dma_buf_vmap(struct dma_buf *, struct iosys_map *);
1559:	int dma_buf_vmap_unlocked(struct dma_buf *, struct iosys_map *);
1581:	void dma_buf_vunmap(struct dma_buf *, struct iosys_map *);
1605:	void dma_buf_vunmap_unlocked(struct dma_buf *, struct iosys_map *);
1679:	static int dma_buf_debug_open(struct inode *, struct file *);
1617:	static int dma_buf_debug_show(struct seq_file *, void *);
1739:	static void dma_buf_deinit(void);
90:	static int dma_buf_file_release(struct inode *, struct file *);
114:	static int dma_buf_fs_init_context(struct fs_context *);
1720:	static int dma_buf_init(void);
445:	static long dma_buf_ioctl(struct file *, unsigned int, unsigned long);
157:	static loff_t dma_buf_llseek(struct file *, loff_t, int);
131:	static int dma_buf_mmap_internal(struct file *, struct vm_area_struct *);
242:	static __poll_t dma_buf_poll(struct file *, poll_table *);
223:	static bool dma_buf_poll_add_cb(struct dma_resv *, bool, struct dma_buf_poll_cb_t *);
208:	static void dma_buf_poll_cb(struct dma_fence *, struct dma_fence_cb *);
61:	static void dma_buf_release(struct dentry *);
500:	static void dma_buf_show_fdinfo(struct seq_file *, struct file *);
45:	static char *dmabuffs_dname(struct dentry *, char *, int);

File drivers/dma-buf/dma-fence-array.c:
154:	struct dma_fence_array *dma_fence_array_create(int, struct dma_fence **, u64, unsigned int, bool);
225:	struct dma_fence *dma_fence_array_first(struct dma_fence *);
243:	struct dma_fence *dma_fence_array_next(struct dma_fence *, unsigned int);
208:	bool dma_fence_match_context(struct dma_fence *, u64);
55:	static void dma_fence_array_cb_func(struct dma_fence *, struct dma_fence_cb *);
70:	static bool dma_fence_array_enable_signaling(struct dma_fence *);
18:	static const char *dma_fence_array_get_driver_name(struct dma_fence *);
23:	static const char *dma_fence_array_get_timeline_name(struct dma_fence *);
114:	static void dma_fence_array_release(struct dma_fence *);
103:	static bool dma_fence_array_signaled(struct dma_fence *);
45:	static void irq_dma_fence_array_work(struct irq_work *);

File drivers/dma-buf/dma-fence-chain.c:
90:	int dma_fence_chain_find_seqno(struct dma_fence **, uint64_t);
229:	void dma_fence_chain_init(struct dma_fence_chain *, struct dma_fence *, struct dma_fence *, uint64_t);
39:	struct dma_fence *dma_fence_chain_walk(struct dma_fence *);
135:	static void dma_fence_chain_cb(struct dma_fence *, struct dma_fence_cb *);
145:	static bool dma_fence_chain_enable_signaling(struct dma_fence *);
112:	static const char *dma_fence_chain_get_driver_name(struct dma_fence *);
21:	static struct dma_fence *dma_fence_chain_get_prev(struct dma_fence_chain *);
117:	static const char *dma_fence_chain_get_timeline_name(struct dma_fence *);
122:	static void dma_fence_chain_irq_work(struct irq_work *);
178:	static void dma_fence_chain_release(struct dma_fence *);
164:	static bool dma_fence_chain_signaled(struct dma_fence *);

File drivers/dma-buf/dma-fence-unwrap.c:
63:	struct dma_fence *__dma_fence_unwrap_merge(unsigned int, struct dma_fence **, struct dma_fence_unwrap *);
33:	struct dma_fence *dma_fence_unwrap_first(struct dma_fence *, struct dma_fence_unwrap *);
48:	struct dma_fence *dma_fence_unwrap_next(struct dma_fence_unwrap *);

File drivers/dma-buf/dma-fence.c:
642:	int dma_fence_add_callback(struct dma_fence *, struct dma_fence_cb *, dma_fence_func_t);
156:	struct dma_fence *dma_fence_allocate_private_stub(void);
186:	u64 dma_fence_context_alloc(unsigned int);
760:	long dma_fence_default_wait(struct dma_fence *, bool, long);
922:	void dma_fence_describe(struct dma_fence *, struct seq_file *);
610:	void dma_fence_enable_sw_signaling(struct dma_fence *);
572:	void dma_fence_free(struct dma_fence *);
684:	int dma_fence_get_status(struct dma_fence *);
131:	struct dma_fence *dma_fence_get_stub(void);
947:	void dma_fence_init(struct dma_fence *, const struct dma_fence_ops *, spinlock_t *, u64, u64);
530:	void dma_fence_release(struct kref *);
716:	bool dma_fence_remove_callback(struct dma_fence *, struct dma_fence_cb *);
460:	int dma_fence_signal(struct dma_fence *);
441:	int dma_fence_signal_locked(struct dma_fence *);
409:	int dma_fence_signal_timestamp(struct dma_fence *, ktime_t);
366:	int dma_fence_signal_timestamp_locked(struct dma_fence *, ktime_t);
847:	long dma_fence_wait_any_timeout(struct dma_fence **, uint32_t, bool, long, uint32_t *);
500:	long dma_fence_wait_timeout(struct dma_fence *, bool, long);
578:	static bool __dma_fence_enable_signaling(struct dma_fence *);
739:	static void dma_fence_default_wait_cb(struct dma_fence *, struct dma_fence_cb *);
114:	static const char *dma_fence_stub_get_name(struct dma_fence *);

File drivers/dma-buf/dma-resv.c:
280:	void dma_resv_add_fence(struct dma_resv *, struct dma_fence *, enum dma_resv_usage);
513:	int dma_resv_copy_fences(struct dma_resv *, struct dma_resv *);
724:	void dma_resv_describe(struct dma_resv *, struct seq_file *);
150:	void dma_resv_fini(struct dma_resv *);
561:	int dma_resv_get_fences(struct dma_resv *, enum dma_resv_usage, unsigned int *, struct dma_fence ***);
614:	int dma_resv_get_singleton(struct dma_resv *, enum dma_resv_usage, struct dma_fence **);
138:	void dma_resv_init(struct dma_resv *);
463:	struct dma_fence *dma_resv_iter_first(struct dma_resv_iter *);
412:	struct dma_fence *dma_resv_iter_first_unlocked(struct dma_resv_iter *);
485:	struct dma_fence *dma_resv_iter_next(struct dma_resv_iter *);
435:	struct dma_fence *dma_resv_iter_next_unlocked(struct dma_resv_iter *);
335:	void dma_resv_replace_fences(struct dma_resv *, uint64_t, struct dma_fence *, enum dma_resv_usage);
182:	int dma_resv_reserve_fences(struct dma_resv *, unsigned int);
701:	bool dma_resv_test_signaled(struct dma_resv *, enum dma_resv_usage);
665:	long dma_resv_wait_timeout(struct dma_resv *, enum dma_resv_usage, bool, unsigned long);
370:	static void dma_resv_iter_walk_unlocked(struct dma_resv_iter *);
118:	static void dma_resv_list_free(struct dma_resv_list *);

File drivers/dma-buf/sync_file.c:
65:	struct sync_file *sync_file_create(struct dma_fence *);
103:	struct dma_fence *sync_file_get_fence(int);
132:	char *sync_file_get_name(struct sync_file *, char *, int);
47:	static void fence_check_cb_func(struct dma_fence *, struct dma_fence_cb *);
353:	static long sync_file_ioctl(struct file *, unsigned int, unsigned long);
191:	static __poll_t sync_file_poll(struct file *, poll_table *);
179:	static int sync_file_release(struct inode *, struct file *);

File drivers/dma/bcm-sba-raid.c:
377:	static void _sba_process_pending_requests(struct sba_device *);
193:	static struct sba_request *sba_alloc_request(struct sba_device *);
1541:	static int sba_async_register(struct sba_device *);
1449:	static int sba_debugfs_stats_show(struct seq_file *, void *);
494:	static int sba_device_terminate_all(struct dma_chan *);
1765:	static void sba_driver_exit(void);
1765:	static int sba_driver_init(void);
284:	static void sba_free_chained_requests(struct sba_request *);
484:	static void sba_free_chan_resources(struct dma_chan *);
1530:	static void sba_freeup_channel_resources(struct sba_device *);
502:	static void sba_issue_pending(struct dma_chan *);
613:	static struct dma_async_tx_descriptor *sba_prep_dma_interrupt(struct dma_chan *, unsigned long);
726:	static struct dma_async_tx_descriptor *sba_prep_dma_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
1332:	static struct dma_async_tx_descriptor *sba_prep_dma_pq(struct dma_chan *, dma_addr_t *, dma_addr_t *, u32, const u8 *, size_t, unsigned long);
1305:	static struct sba_request *sba_prep_dma_pq_single_req(struct sba_device *, dma_addr_t, dma_addr_t *, dma_addr_t *, dma_addr_t, u8, size_t, unsigned long);
865:	static struct dma_async_tx_descriptor *sba_prep_dma_xor(struct dma_chan *, dma_addr_t, dma_addr_t *, u32, size_t, unsigned long);
1611:	static int sba_probe(struct platform_device *);
1432:	static void sba_receive_message(struct mbox_client *, void *);
1735:	static int sba_remove(struct platform_device *);
537:	static enum dma_status sba_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);
513:	static dma_cookie_t sba_tx_submit(struct dma_async_tx_descriptor *);

File drivers/dma/dmaengine.c:
755:	struct dma_chan *__dma_request_channel(const dma_cap_mask_t *, dma_filter_fn, void *, struct device_node *);
1089:	int dma_async_device_channel_register(struct dma_device *, struct dma_chan *);
1118:	void dma_async_device_channel_unregister(struct dma_device *, struct dma_chan *);
1134:	int dma_async_device_register(struct dma_device *);
1304:	void dma_async_device_unregister(struct dma_device *);
1490:	void dma_async_tx_descriptor_init(struct dma_async_tx_descriptor *, struct dma_chan *);
545:	struct dma_chan *dma_find_channel(enum dma_transaction_type);
727:	struct dma_chan *dma_get_any_slave_channel(struct dma_device *);
571:	int dma_get_slave_caps(struct dma_chan *, struct dma_slave_caps *);
697:	struct dma_chan *dma_get_slave_channel(struct dma_chan *);
554:	void dma_issue_pending_all(void);
903:	void dma_release_channel(struct dma_chan *);
813:	struct dma_chan *dma_request_chan(struct device *, const char *);
882:	struct dma_chan *dma_request_chan_by_mask(const dma_cap_mask_t *);
1605:	void dma_run_dependencies(struct dma_async_tx_descriptor *);
520:	enum dma_status dma_sync_wait(struct dma_chan *, dma_cookie_t);
1578:	enum dma_status dma_wait_for_async_tx(struct dma_async_tx_descriptor *);
1516:	int dmaengine_desc_attach_metadata(struct dma_async_tx_descriptor *, void *, size_t);
1535:	void *dmaengine_desc_get_metadata_ptr(struct dma_async_tx_descriptor *, size_t *, size_t *);
1554:	int dmaengine_desc_set_metadata_len(struct dma_async_tx_descriptor *, size_t);
932:	void dmaengine_get(void);
1473:	struct dmaengine_unmap_data *dmaengine_get_unmap_data(struct device *, int, gfp_t);
971:	void dmaengine_put(void);
1424:	void dmaengine_unmap_put(struct dmaengine_unmap_data *);
1340:	int dmaenginem_async_device_register(struct dma_device *);
1039:	static int __dma_async_device_channel_register(struct dma_device *, struct dma_chan *);
1103:	static void __dma_async_device_channel_unregister(struct dma_device *, struct dma_chan *);
184:	static ssize_t bytes_transferred_show(struct device *, struct device_attribute *, char *);
232:	static void chan_dev_release(struct device *);
1639:	static int dma_bus_init(void);
446:	static int dma_chan_get(struct dma_chan *);
494:	static void dma_chan_put(struct dma_chan *);
361:	static void dma_channel_rebalance(void);
262:	static int dma_channel_table_init(void);
126:	static void dmaengine_debugfs_init(void);
1445:	static int dmaengine_init_unmap_pool(void);
124:	static int dmaengine_summary_open(struct inode *, struct file *);
102:	static int dmaengine_summary_show(struct seq_file *, void *);
1326:	static void dmam_device_release(struct device *, void *);
656:	static struct dma_chan *find_candidate(struct dma_device *, const dma_cap_mask_t *, dma_filter_fn, void *);
206:	static ssize_t in_use_show(struct device *, struct device_attribute *, char *);
162:	static ssize_t memcpy_count_show(struct device *, struct device_attribute *, char *);

File drivers/dma/dmaengine.h:
68:	static enum dma_status dma_cookie_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);

File drivers/dma/fsl-edma-common.c:
654:	int fsl_edma_alloc_chan_resources(struct dma_chan *);
106:	void fsl_edma_chan_mux(struct fsl_edma_chan *, unsigned int, bool);
688:	void fsl_edma_cleanup_vchan(struct dma_device *);
62:	void fsl_edma_disable_request(struct fsl_edma_chan *);
665:	void fsl_edma_free_chan_resources(struct dma_chan *);
147:	void fsl_edma_free_desc(struct virt_dma_desc *);
634:	void fsl_edma_issue_pending(struct dma_chan *);
177:	int fsl_edma_pause(struct dma_chan *);
456:	struct dma_async_tx_descriptor *fsl_edma_prep_dma_cyclic(struct dma_chan *, dma_addr_t, size_t, size_t, enum dma_transfer_direction, unsigned long);
594:	struct dma_async_tx_descriptor *fsl_edma_prep_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
525:	struct dma_async_tx_descriptor *fsl_edma_prep_slave_sg(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction, unsigned long, void *);
193:	int fsl_edma_resume(struct dma_chan *);
709:	void fsl_edma_setup_regs(struct fsl_edma_engine *);
258:	int fsl_edma_slave_config(struct dma_chan *, struct dma_slave_config *);
160:	int fsl_edma_terminate_all(struct dma_chan *);
313:	enum dma_status fsl_edma_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);
617:	void fsl_edma_xfer_desc(struct fsl_edma_chan *);
428:	static struct fsl_edma_desc *fsl_edma_alloc_desc(struct fsl_edma_chan *, int);
270:	static size_t fsl_edma_desc_residue(struct fsl_edma_chan *, struct virt_dma_desc *, bool);

File drivers/dma/fsl-edma.c:
230:	static void fsl_disable_clocks(struct fsl_edma_engine *, int);
177:	static int fsl_edma2_irq_init(struct platform_device *, struct fsl_edma_engine *);
75:	static irqreturn_t fsl_edma_err_handler(int, void *);
511:	static void fsl_edma_exit(void);
505:	static int fsl_edma_init(void);
96:	static irqreturn_t fsl_edma_irq_handler(int, void *);
138:	static int fsl_edma_irq_init(struct platform_device *, struct fsl_edma_engine *);
266:	static int fsl_edma_probe(struct platform_device *);
427:	static int fsl_edma_remove(struct platform_device *);
465:	static int fsl_edma_resume_early(struct device *);
441:	static int fsl_edma_suspend_late(struct device *);
24:	static void fsl_edma_synchronize(struct dma_chan *);
31:	static irqreturn_t fsl_edma_tx_handler(int, void *);
104:	static struct dma_chan *fsl_edma_xlate(struct of_phandle_args *, struct of_dma *);

File drivers/dma/mv_xor_v2.c:
630:	static int mv_xor_v2_descq_init(struct mv_xor_v2_device *);
920:	static void mv_xor_v2_driver_exit(void);
920:	static int mv_xor_v2_driver_init(void);
260:	static void mv_xor_v2_enable_imsg_thrd(struct mv_xor_v2_device *);
278:	static irqreturn_t mv_xor_v2_interrupt_handler(int, void *);
519:	static void mv_xor_v2_issue_pending(struct dma_chan *);
490:	static struct dma_async_tx_descriptor *mv_xor_v2_prep_dma_interrupt(struct dma_chan *, unsigned long);
378:	static struct dma_async_tx_descriptor *mv_xor_v2_prep_dma_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
431:	static struct dma_async_tx_descriptor *mv_xor_v2_prep_dma_xor(struct dma_chan *, dma_addr_t, dma_addr_t *, unsigned int, size_t, unsigned long);
339:	static struct mv_xor_v2_sw_desc *mv_xor_v2_prep_sw_desc(struct mv_xor_v2_device *);
714:	static int mv_xor_v2_probe(struct platform_device *);
879:	static int mv_xor_v2_remove(struct platform_device *);
703:	static int mv_xor_v2_resume(struct platform_device *);
618:	static void mv_xor_v2_set_msi_msg(struct msi_desc *, struct msi_msg *);
693:	static int mv_xor_v2_suspend(struct platform_device *, pm_message_t);
556:	static void mv_xor_v2_tasklet(struct tasklet_struct *);
303:	static dma_cookie_t mv_xor_v2_tx_submit(struct dma_async_tx_descriptor *);

File drivers/dma/of-dma.c:
153:	void of_dma_controller_free(struct device_node *);
118:	int of_dma_controller_register(struct device_node *, struct dma_chan *(*)(struct of_phandle_args *, struct of_dma *), void *);
251:	struct dma_chan *of_dma_request_slave_channel(struct device_node *, const char *);
185:	int of_dma_router_register(struct device_node *, void *(*)(struct of_phandle_args *, struct of_dma *), struct dma_router *);
321:	struct dma_chan *of_dma_simple_xlate(struct of_phandle_args *, struct of_dma *);
351:	struct dma_chan *of_dma_xlate_by_chan_id(struct of_phandle_args *, struct of_dma *);
55:	static struct dma_chan *of_dma_router_xlate(struct of_phandle_args *, struct of_dma *);

File drivers/dma/pl330.c:
1203:	static int _bursts(struct pl330_dmac *, unsigned int, u8 *, const struct _xfer_spec *, int);
1179:	static int _ldst_peripheral(struct pl330_dmac *, unsigned int, u8 *, const struct _xfer_spec *, int, enum pl330_cond);
1408:	static int _setup_req(struct pl330_dmac *, unsigned int, struct pl330_thread *, unsigned int, struct _xfer_spec *);
1053:	static bool _start(struct pl330_thread *);
968:	static void _stop(struct pl330_thread *);
2535:	static int add_desc(struct list_head *, spinlock_t *, gfp_t, int);
2944:	static void init_pl330_debugfs(struct pl330_dmac *);
2136:	static struct dma_chan *of_dma_pl330_xlate(struct of_phandle_args *, struct of_dma *);
1941:	static int pl330_add(struct pl330_dmac *);
2156:	static int pl330_alloc_chan_resources(struct dma_chan *);
2264:	static int pl330_config(struct dma_chan *, struct dma_slave_config *);
2942:	static int pl330_debugfs_open(struct inode *, struct file *);
2908:	static int pl330_debugfs_show(struct seq_file *, void *);
2004:	static void pl330_del(struct pl330_dmac *);
1574:	static void pl330_dotask(struct tasklet_struct *);
3259:	static void pl330_driver_exit(void);
3259:	static int pl330_driver_init(void);
2345:	static void pl330_free_chan_resources(struct dma_chan *);
2581:	static struct dma_pl330_desc *pl330_get_desc(struct dma_pl330_chan *);
2892:	static irqreturn_t pl330_irq_handler(int, void *);
2466:	static void pl330_issue_pending(struct dma_chan *);
2325:	static int pl330_pause(struct dma_chan *);
2668:	static struct dma_async_tx_descriptor *pl330_prep_dma_cyclic(struct dma_chan *, dma_addr_t, size_t, size_t, enum dma_transfer_direction, unsigned long);
2760:	static struct dma_async_tx_descriptor *pl330_prep_dma_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
2832:	static struct dma_async_tx_descriptor *pl330_prep_slave_sg(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction, unsigned long, void *);
2991:	static int pl330_probe(struct amba_device *, const struct amba_id *);
1799:	static void pl330_release_channel(struct pl330_thread *);
3196:	static void pl330_remove(struct amba_device *);
2063:	static void pl330_tasklet(struct tasklet_struct *);
2274:	static int pl330_terminate_all(struct dma_chan *);
2396:	static enum dma_status pl330_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);
2493:	static dma_cookie_t pl330_tx_submit(struct dma_async_tx_descriptor *);

File drivers/dma/qcom/hidma.c:
342:	static int hidma_alloc_chan_resources(struct dma_chan *);
165:	static void hidma_callback(void *);
602:	static irqreturn_t hidma_chirq_handler(int, void *);
614:	static irqreturn_t hidma_chirq_handler_msi(int, void *);
975:	static void hidma_driver_exit(void);
975:	static int hidma_driver_init(void);
535:	static void hidma_free_chan_resources(struct dma_chan *);
688:	static void hidma_free_msis(struct hidma_dev *);
229:	static void hidma_issue_pending(struct dma_chan *);
221:	static void hidma_issue_task(struct tasklet_struct *);
562:	static int hidma_pause(struct dma_chan *);
394:	static struct dma_async_tx_descriptor *hidma_prep_dma_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
427:	static struct dma_async_tx_descriptor *hidma_prep_dma_memset(struct dma_chan *, dma_addr_t, int, size_t, unsigned long);
753:	static int hidma_probe(struct platform_device *);
108:	static void hidma_process_completed(struct hidma_chan *);
921:	static int hidma_remove(struct platform_device *);
580:	static int hidma_resume(struct dma_chan *);
624:	static ssize_t hidma_show_values(struct device *, struct device_attribute *, char *);
907:	static void hidma_shutdown(struct platform_device *);
665:	static int hidma_sysfs_init(struct hidma_dev *);
517:	static int hidma_terminate_all(struct dma_chan *);
470:	static int hidma_terminate_channel(struct dma_chan *);
272:	static enum dma_status hidma_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);
311:	static dma_cookie_t hidma_tx_submit(struct dma_async_tx_descriptor *);
675:	static void hidma_write_msi_msg(struct msi_desc *, struct msi_msg *);

File drivers/dma/qcom/hidma_dbg.c:
141:	void hidma_debug_init(struct hidma_dev *);
136:	void hidma_debug_uninit(struct hidma_dev *);
133:	static int hidma_chan_open(struct inode *, struct file *);
84:	static int hidma_chan_show(struct seq_file *, void *);
134:	static int hidma_dma_open(struct inode *, struct file *);
116:	static int hidma_dma_show(struct seq_file *, void *);
15:	static void hidma_ll_chstats(struct seq_file *, void *, u32);

File drivers/dma/qcom/hidma_ll.c:
303:	void hidma_cleanup_pending_tre(struct hidma_lldev *, u8, u8);
551:	int hidma_ll_disable(struct hidma_lldev *);
458:	int hidma_ll_enable(struct hidma_lldev *);
116:	void hidma_ll_free(struct hidma_lldev *, u32);
709:	struct hidma_lldev *hidma_ll_init(struct device *, u32, void *, void *, u8);
424:	irqreturn_t hidma_ll_inthandler(int, void *);
450:	irqreturn_t hidma_ll_inthandler_msi(int, void *, int);
507:	bool hidma_ll_isenabled(struct hidma_lldev *);
524:	void hidma_ll_queue_request(struct hidma_lldev *, u32);
134:	int hidma_ll_request(struct hidma_lldev *, u32, const char *, void (*)(void *), void *, u32 *);
598:	void hidma_ll_set_transfer_params(struct hidma_lldev *, u32, dma_addr_t, dma_addr_t, u32, u32, u32);
633:	int hidma_ll_setup(struct hidma_lldev *);
687:	void hidma_ll_setup_irq(struct hidma_lldev *, bool);
498:	void hidma_ll_start(struct hidma_lldev *);
834:	enum dma_status hidma_ll_status(struct hidma_lldev *, u32);
801:	int hidma_ll_uninit(struct hidma_lldev *);
386:	static void hidma_ll_int_handler_internal(struct hidma_lldev *, int);
312:	static int hidma_ll_reset(struct hidma_lldev *);
176:	static void hidma_ll_tre_complete(struct tasklet_struct *);
188:	static int hidma_post_completed(struct hidma_lldev *, u8, u8);

File drivers/dma/qcom/hidma_mgmt.c:
65:	int hidma_mgmt_setup(struct hidma_mgmt_dev *);
411:	static int hidma_mgmt_init(void);
347:	static int hidma_mgmt_of_populate_channels(struct device_node *);
162:	static int hidma_mgmt_probe(struct platform_device *);

File drivers/dma/qcom/hidma_mgmt_sys.c:
234:	int hidma_mgmt_init_sys(struct hidma_mgmt_dev *);
54:	static int get_chreset_timeout_cycles(struct hidma_mgmt_dev *);
53:	static int get_dma_channels(struct hidma_mgmt_dev *);
47:	static int get_hw_version_major(struct hidma_mgmt_dev *);
48:	static int get_hw_version_minor(struct hidma_mgmt_dev *);
50:	static int get_max_rd_xactions(struct hidma_mgmt_dev *);
52:	static int get_max_read_request(struct hidma_mgmt_dev *);
49:	static int get_max_wr_xactions(struct hidma_mgmt_dev *);
51:	static int get_max_write_request(struct hidma_mgmt_dev *);
54:	static int set_chreset_timeout_cycles(struct hidma_mgmt_dev *, u64);
53:	static int set_dma_channels(struct hidma_mgmt_dev *, u64);
47:	static int set_hw_version_major(struct hidma_mgmt_dev *, u64);
48:	static int set_hw_version_minor(struct hidma_mgmt_dev *, u64);
50:	static int set_max_rd_xactions(struct hidma_mgmt_dev *, u64);
52:	static int set_max_read_request(struct hidma_mgmt_dev *, u64);
49:	static int set_max_wr_xactions(struct hidma_mgmt_dev *, u64);
51:	static int set_max_write_request(struct hidma_mgmt_dev *, u64);
116:	static ssize_t set_values(struct device *, struct device_attribute *, const char *, size_t);
157:	static ssize_t set_values_channel(struct kobject *, struct kobj_attribute *, const char *, size_t);
99:	static ssize_t show_values(struct device *, struct device_attribute *, char *);
140:	static ssize_t show_values_channel(struct kobject *, struct kobj_attribute *, char *);

File drivers/dma/ti/../virt-dma.h:
94:	static void vchan_cookie_complete(struct virt_dma_desc *);

File drivers/dma/ti/k3-psil.c:
30:	struct psil_endpoint_config *psil_get_ep_config(u32);
70:	int psil_set_new_ep_config(struct device *, const char *, struct psil_endpoint_config *);

File drivers/dma/ti/k3-udma-glue.c:
1268:	void k3_udma_glue_disable_rx_chn(struct k3_udma_glue_rx_channel *);
455:	void k3_udma_glue_disable_tx_chn(struct k3_udma_glue_tx_channel *);
1237:	int k3_udma_glue_enable_rx_chn(struct k3_udma_glue_rx_channel *);
430:	int k3_udma_glue_enable_tx_chn(struct k3_udma_glue_tx_channel *);
1376:	int k3_udma_glue_pop_rx_chn(struct k3_udma_glue_rx_channel *, u32, dma_addr_t *);
417:	int k3_udma_glue_pop_tx_chn(struct k3_udma_glue_tx_channel *, dma_addr_t *);
1366:	int k3_udma_glue_push_rx_chn(struct k3_udma_glue_rx_channel *, u32, struct cppi5_host_desc_t *, dma_addr_t);
401:	int k3_udma_glue_push_tx_chn(struct k3_udma_glue_tx_channel *, struct cppi5_host_desc_t *, dma_addr_t);
1093:	void k3_udma_glue_release_rx_chn(struct k3_udma_glue_rx_channel *);
375:	void k3_udma_glue_release_tx_chn(struct k3_udma_glue_tx_channel *);
1083:	struct k3_udma_glue_rx_channel *k3_udma_glue_request_rx_chn(struct device *, const char *, struct k3_udma_glue_rx_channel_cfg *);
254:	struct k3_udma_glue_tx_channel *k3_udma_glue_request_tx_chn(struct device *, const char *, struct k3_udma_glue_tx_channel_cfg *);
1322:	void k3_udma_glue_reset_rx_chn(struct k3_udma_glue_rx_channel *, u32, void *, void (*)(void *, dma_addr_t), bool);
506:	void k3_udma_glue_reset_tx_chn(struct k3_udma_glue_tx_channel *, void *, void (*)(void *, dma_addr_t));
1425:	void k3_udma_glue_rx_cppi5_to_dma_addr(struct k3_udma_glue_rx_channel *, dma_addr_t *);
1414:	void k3_udma_glue_rx_dma_to_cppi5_addr(struct k3_udma_glue_rx_channel *, dma_addr_t *);
1200:	int k3_udma_glue_rx_flow_disable(struct k3_udma_glue_rx_channel *, u32);
1157:	int k3_udma_glue_rx_flow_enable(struct k3_udma_glue_rx_channel *, u32);
1137:	u32 k3_udma_glue_rx_flow_get_fdq_id(struct k3_udma_glue_rx_channel *, u32);
1126:	int k3_udma_glue_rx_flow_init(struct k3_udma_glue_rx_channel *, u32, struct k3_udma_glue_rx_flow_cfg *);
1404:	struct device *k3_udma_glue_rx_get_dma_device(struct k3_udma_glue_rx_channel *);
1151:	u32 k3_udma_glue_rx_get_flow_id_base(struct k3_udma_glue_rx_channel *);
1385:	int k3_udma_glue_rx_get_irq(struct k3_udma_glue_rx_channel *, u32);
1287:	void k3_udma_glue_tdown_rx_chn(struct k3_udma_glue_rx_channel *, bool);
474:	void k3_udma_glue_tdown_tx_chn(struct k3_udma_glue_tx_channel *, bool);
587:	void k3_udma_glue_tx_cppi5_to_dma_addr(struct k3_udma_glue_tx_channel *, dma_addr_t *);
576:	void k3_udma_glue_tx_dma_to_cppi5_addr(struct k3_udma_glue_tx_channel *, dma_addr_t *);
566:	struct device *k3_udma_glue_tx_get_dma_device(struct k3_udma_glue_tx_channel *);
540:	u32 k3_udma_glue_tx_get_hdesc_size(struct k3_udma_glue_tx_channel *);
552:	int k3_udma_glue_tx_get_irq(struct k3_udma_glue_tx_channel *);
546:	u32 k3_udma_glue_tx_get_txcq_id(struct k3_udma_glue_tx_channel *);
89:	static void k3_udma_chan_dev_release(struct device *);
658:	static int k3_udma_glue_cfg_rx_flow(struct k3_udma_glue_rx_channel *, u32, struct k3_udma_glue_rx_flow_cfg *);
1436:	static int k3_udma_glue_class_init(void);
114:	static int of_k3_udma_glue_parse_chn(struct device_node *, const char *, struct k3_udma_glue_common *, bool);

File drivers/dma/ti/k3-udma-private.c:
19:	struct udma_dev *of_xudma_dev_get(struct device_node *, const char *);
77:	int xudma_alloc_gp_rflow_range(struct udma_dev *, int, int);
65:	u32 xudma_dev_get_psil_base(struct udma_dev *);
71:	struct udma_tisci_rm *xudma_dev_get_tisci_rm(struct udma_dev *);
83:	int xudma_free_gp_rflow_range(struct udma_dev *, int, int);
53:	struct device *xudma_get_device(struct udma_dev *);
125:	int xudma_get_rflow_ring_offset(struct udma_dev *);
59:	struct k3_ringacc *xudma_get_ringacc(struct udma_dev *);
161:	int xudma_is_pktdma(struct udma_dev *);
7:	int xudma_navss_psil_pair(struct udma_dev *, u32, u32);
13:	int xudma_navss_psil_unpair(struct udma_dev *, u32, u32);
175:	int xudma_pktdma_rflow_get_irq(struct udma_dev *, int);
167:	int xudma_pktdma_tflow_get_irq(struct udma_dev *, int);
111:	struct udma_rchan *xudma_rchan_get(struct udma_dev *, int);
138:	int xudma_rchan_get_id(struct udma_rchan *);
111:	void xudma_rchan_put(struct udma_dev *, struct udma_rchan *);
159:	u32 xudma_rchanrt_read(struct udma_rchan *, int);
159:	void xudma_rchanrt_write(struct udma_rchan *, int, u32);
113:	struct udma_rflow *xudma_rflow_get(struct udma_dev *, int);
139:	int xudma_rflow_get_id(struct udma_rflow *);
89:	bool xudma_rflow_is_gp(struct udma_dev *, int);
119:	void xudma_rflow_put(struct udma_dev *, struct udma_rflow *);
110:	struct udma_tchan *xudma_tchan_get(struct udma_dev *, int);
137:	int xudma_tchan_get_id(struct udma_tchan *);
110:	void xudma_tchan_put(struct udma_dev *, struct udma_tchan *);
158:	u32 xudma_tchanrt_read(struct udma_tchan *, int);
158:	void xudma_tchanrt_write(struct udma_tchan *, int, u32);

File drivers/dma/ti/k3-udma.c:
1363:	static struct udma_rchan *__udma_reserve_rchan(struct udma_dev *, enum udma_tp_level, int);
1362:	static struct udma_tchan *__udma_reserve_tchan(struct udma_dev *, enum udma_tp_level, int);
2379:	static int bcdma_alloc_chan_resources(struct dma_chan *);
2573:	static int bcdma_router_config(struct dma_chan *);
2591:	static int pktdma_alloc_chan_resources(struct dma_chan *);
2174:	static int udma_alloc_chan_resources(struct dma_chan *);
1749:	static int udma_alloc_rx_resources(struct udma_chan *);
2752:	static struct udma_desc *udma_alloc_tr_desc(struct udma_chan *, size_t, int, enum dma_transfer_direction);
1673:	static int udma_alloc_tx_resources(struct udma_chan *);
3301:	static int udma_attach_metadata(struct dma_async_tx_descriptor *, void *, size_t);
1084:	static void udma_check_tx_completion(struct work_struct *);
5203:	static void udma_dbg_summary_show(struct seq_file *, struct dma_device *);
760:	static void udma_decrement_byte_counters(struct udma_chan *, u32);
578:	static void udma_desc_free(struct virt_dma_desc *);
4090:	static bool udma_dma_filter_fn(struct dma_chan *, void *);
5504:	static void udma_driver_exit(void);
5504:	static int udma_driver_init(void);
4034:	static void udma_free_chan_resources(struct dma_chan *);
1730:	static void udma_free_rx_resources(struct udma_chan *);
1660:	static void udma_free_tx_resources(struct udma_chan *);
5215:	static enum dmaengine_alignment udma_get_copy_align(struct udma_dev *);
3337:	static void *udma_get_metadata_ptr(struct dma_async_tx_descriptor *, size_t *, size_t *);
1522:	static int udma_get_rflow(struct udma_chan *, int);
601:	static bool udma_is_chan_running(struct udma_chan *);
3759:	static void udma_issue_pending(struct dma_chan *);
4203:	static struct dma_chan *udma_of_xlate(struct of_phandle_args *, struct of_dma *);
3854:	static int udma_pause(struct dma_chan *);
3604:	static struct dma_async_tx_descriptor *udma_prep_dma_cyclic(struct dma_chan *, dma_addr_t, size_t, size_t, enum dma_transfer_direction, unsigned long);
3671:	static struct dma_async_tx_descriptor *udma_prep_dma_memcpy(struct dma_chan *, dma_addr_t, dma_addr_t, size_t, unsigned long);
3396:	static struct dma_async_tx_descriptor *udma_prep_slave_sg(struct dma_chan *, struct scatterlist *, unsigned int, enum dma_transfer_direction, unsigned long, void *);
5249:	static int udma_probe(struct platform_device *);
553:	static void udma_purge_desc_work(struct work_struct *);
810:	static int udma_reset_chan(struct udma_chan *, bool);
724:	static void udma_reset_rings(struct udma_chan *);
3882:	static int udma_resume(struct dma_chan *);
1146:	static irqreturn_t udma_ring_irq_handler(int, void *);
3358:	static int udma_set_metadata_len(struct dma_async_tx_descriptor *, size_t);
5047:	static int udma_setup_rx_flush(struct udma_dev *);
2742:	static int udma_slave_config(struct dma_chan *, struct dma_slave_config *);
895:	static int udma_start(struct udma_chan *);
861:	static void udma_start_desc(struct udma_chan *);
3935:	static void udma_synchronize(struct dma_chan *);
3908:	static int udma_terminate_all(struct dma_chan *);
1863:	static int udma_tisci_m2m_channel_config(struct udma_chan *);
3781:	static enum dma_status udma_tx_status(struct dma_chan *, dma_cookie_t, struct dma_tx_state *);
1211:	static irqreturn_t udma_udma_irq_handler(int, void *);
3999:	static void udma_vchan_complete(struct tasklet_struct *);

File drivers/dma/virt-dma.c:
112:	void vchan_dma_desc_free_list(struct virt_dma_chan *, struct list_head *);
66:	struct virt_dma_desc *vchan_find_desc(struct virt_dma_chan *, dma_cookie_t);
123:	void vchan_init(struct virt_dma_chan *, struct dma_device *);
49:	int vchan_tx_desc_free(struct dma_async_tx_descriptor *);
19:	dma_cookie_t vchan_tx_submit(struct dma_async_tx_descriptor *);
83:	static void vchan_complete(struct tasklet_struct *);

File drivers/edac/edac_device.c:
420:	int edac_device_add_device(struct edac_device_ctl_info *);
57:	struct edac_device_ctl_info *edac_device_alloc_ctl_info(unsigned int, char *, unsigned int, char *, unsigned int, unsigned int, struct edac_dev_sysfs_block_attribute *, unsigned int, int);
412:	int edac_device_alloc_index(void);
472:	struct edac_device_ctl_info *edac_device_del_device(struct device *);
202:	void edac_device_free_ctl_info(struct edac_device_ctl_info *);
526:	void edac_device_handle_ce_count(struct edac_device_ctl_info *, unsigned int, int, int, const char *);
572:	void edac_device_handle_ue_count(struct edac_device_ctl_info *, unsigned int, int, int, const char *);
399:	void edac_device_reset_delay_period(struct edac_device_ctl_info *, unsigned long);
316:	static void edac_device_workq_function(struct work_struct *);
353:	static void edac_device_workq_setup(struct edac_device_ctl_info *, unsigned int);

File drivers/edac/edac_device_sysfs.c:
802:	int edac_device_create_sysfs(struct edac_device_ctl_info *);
229:	int edac_device_register_sysfs_main_kobj(struct edac_device_ctl_info *);
859:	void edac_device_remove_sysfs(struct edac_device_ctl_info *);
287:	void edac_device_unregister_sysfs_main_kobj(struct edac_device_ctl_info *);
421:	static ssize_t block_ce_count_show(struct kobject *, struct attribute *, char *);
413:	static ssize_t block_ue_count_show(struct kobject *, struct attribute *, char *);
447:	static ssize_t edac_dev_block_show(struct kobject *, struct attribute *, char *);
459:	static ssize_t edac_dev_block_store(struct kobject *, struct attribute *, const char *, size_t);
117:	static ssize_t edac_dev_ctl_info_show(struct kobject *, struct attribute *, char *);
129:	static ssize_t edac_dev_ctl_info_store(struct kobject *, struct attribute *, const char *, size_t);
344:	static ssize_t edac_dev_instance_show(struct kobject *, struct attribute *, char *);
356:	static ssize_t edac_dev_instance_store(struct kobject *, struct attribute *, const char *, size_t);
49:	static ssize_t edac_device_ctl_log_ce_show(struct edac_device_ctl_info *, char *);
55:	static ssize_t edac_device_ctl_log_ce_store(struct edac_device_ctl_info *, const char *, size_t);
32:	static ssize_t edac_device_ctl_log_ue_show(struct edac_device_ctl_info *, char *);
38:	static ssize_t edac_device_ctl_log_ue_store(struct edac_device_ctl_info *, const char *, size_t);
66:	static ssize_t edac_device_ctl_panic_on_ue_show(struct edac_device_ctl_info *, char *);
72:	static ssize_t edac_device_ctl_panic_on_ue_store(struct edac_device_ctl_info *, const char *, size_t);
83:	static ssize_t edac_device_ctl_poll_msec_show(struct edac_device_ctl_info *, char *);
89:	static ssize_t edac_device_ctl_poll_msec_store(struct edac_device_ctl_info *, const char *, size_t);
430:	static void edac_device_ctrl_block_release(struct kobject *);
323:	static void edac_device_ctrl_instance_release(struct kobject *);
202:	static void edac_device_ctrl_master_release(struct kobject *);
313:	static ssize_t instance_ce_count_show(struct edac_device_instance *, char *);
307:	static ssize_t instance_ue_count_show(struct edac_device_instance *, char *);

File drivers/edac/edac_mc.c:
61:	unsigned int edac_dimm_info_location(struct dimm_info *, char *, unsigned int);
593:	const char *edac_get_owner(void);
413:	bool edac_has_mcs(void);
600:	int edac_mc_add_mc_with_groups(struct mem_ctl_info *, const struct attribute_group **);
334:	struct mem_ctl_info *edac_mc_alloc(unsigned int, unsigned int, struct edac_mc_layer *, unsigned int);
684:	struct mem_ctl_info *edac_mc_del_mc(struct device *);
573:	struct mem_ctl_info *edac_mc_find(int);
753:	int edac_mc_find_csrow_by_page(struct mem_ctl_info *, unsigned long);
405:	void edac_mc_free(struct mem_ctl_info *);
943:	void edac_mc_handle_error(const enum hw_event_mc_err_type, struct mem_ctl_info *, const u16, const unsigned long, const unsigned long, const unsigned long, const int, const int, const int, const char *, const char *);
495:	void edac_mc_reset_delay_period(unsigned long);
917:	void edac_raw_mc_handle_error(struct edac_raw_error_desc *);
452:	struct mem_ctl_info *find_mci_by_dev(struct device *);
560:	static int del_mc_from_global_list(struct mem_ctl_info *);
468:	static void edac_mc_workq_function(struct work_struct *);
177:	static void mci_release(struct device *);

File drivers/edac/edac_mc_sysfs.c:
933:	int edac_create_sysfs_mci_device(struct mem_ctl_info *, const struct attribute_group **);
37:	int edac_mc_get_log_ce(void);
32:	int edac_mc_get_log_ue(void);
42:	int edac_mc_get_panic_on_ue(void);
48:	unsigned int edac_mc_get_poll_msec(void);
1052:	void edac_mc_sysfs_exit(void);
1028:	int edac_mc_sysfs_init(void);
987:	void edac_remove_sysfs_mci_device(struct mem_ctl_info *);
239:	static ssize_t channel_ce_count_show(struct device *, struct device_attribute *, char *);
198:	static ssize_t channel_dimm_label_show(struct device *, struct device_attribute *, char *);
214:	static ssize_t channel_dimm_label_store(struct device *, struct device_attribute *, const char *, size_t);
152:	static ssize_t csrow_ce_count_show(struct device *, struct device_attribute *, char *);
370:	static umode_t csrow_dev_is_visible(struct kobject *, struct attribute *, int);
180:	static ssize_t csrow_dev_type_show(struct device *, struct device_attribute *, char *);
188:	static ssize_t csrow_edac_mode_show(struct device *, struct device_attribute *, char *);
172:	static ssize_t csrow_mem_type_show(struct device *, struct device_attribute *, char *);
408:	static void csrow_release(struct device *);
160:	static ssize_t csrow_size_show(struct device *, struct device_attribute *, char *);
144:	static ssize_t csrow_ue_count_show(struct device *, struct device_attribute *, char *);
632:	static void dimm_release(struct device *);
577:	static ssize_t dimmdev_ce_count_show(struct device *, struct device_attribute *, char *);
560:	static ssize_t dimmdev_dev_type_show(struct device *, struct device_attribute *, char *);
568:	static ssize_t dimmdev_edac_mode_show(struct device *, struct device_attribute *, char *);
509:	static ssize_t dimmdev_label_show(struct device *, struct device_attribute *, char *);
521:	static ssize_t dimmdev_label_store(struct device *, struct device_attribute *, const char *, size_t);
497:	static ssize_t dimmdev_location_show(struct device *, struct device_attribute *, char *);
552:	static ssize_t dimmdev_mem_type_show(struct device *, struct device_attribute *, char *);
544:	static ssize_t dimmdev_size_show(struct device *, struct device_attribute *, char *);
586:	static ssize_t dimmdev_ue_count_show(struct device *, struct device_attribute *, char *);
53:	static int edac_set_poll_msec(const char *, const struct kernel_param *);
1014:	static void mc_attr_release(struct device *);
895:	static umode_t mci_attr_is_visible(struct kobject *, struct attribute *, int);
774:	static ssize_t mci_ce_count_show(struct device *, struct device_attribute *, char *);
783:	static ssize_t mci_ce_noinfo_show(struct device *, struct device_attribute *, char *);
810:	static ssize_t mci_ctl_name_show(struct device *, struct device_attribute *, char *);
839:	static ssize_t mci_max_location_show(struct device *, struct device_attribute *, char *);
683:	static ssize_t mci_reset_counters_store(struct device *, struct device_attribute *, const char *, size_t);
748:	static ssize_t mci_sdram_scrub_rate_show(struct device *, struct device_attribute *, char *);
724:	static ssize_t mci_sdram_scrub_rate_store(struct device *, struct device_attribute *, const char *, size_t);
801:	static ssize_t mci_seconds_show(struct device *, struct device_attribute *, char *);
819:	static ssize_t mci_size_mb_show(struct device *, struct device_attribute *, char *);
765:	static ssize_t mci_ue_count_show(struct device *, struct device_attribute *, char *);
792:	static ssize_t mci_ue_noinfo_show(struct device *, struct device_attribute *, char *);

File drivers/edac/edac_module.c:
93:	struct bus_type *edac_get_sysfs_subsys(void);
50:	char *edac_op_state_to_string(int);
149:	static void edac_exit(void);
102:	static int edac_init(void);

File drivers/edac/wq.c:
12:	bool edac_mod_work(struct delayed_work *, unsigned long);
6:	bool edac_queue_work(struct delayed_work *, unsigned long);
18:	bool edac_stop_work(struct delayed_work *);
29:	int edac_workqueue_setup(void);
38:	void edac_workqueue_teardown(void);

File drivers/extcon/devres.c:
65:	struct extcon_dev *devm_extcon_dev_allocate(struct device *, const unsigned int *);
97:	void devm_extcon_dev_free(struct device *, struct extcon_dev *);
118:	int devm_extcon_dev_register(struct device *, struct extcon_dev *);
148:	void devm_extcon_dev_unregister(struct device *, struct extcon_dev *);
172:	int devm_extcon_register_notifier(struct device *, struct extcon_dev *, unsigned int, struct notifier_block *);
228:	int devm_extcon_register_notifier_all(struct device *, struct extcon_dev *, struct notifier_block *);
206:	void devm_extcon_unregister_notifier(struct device *, struct extcon_dev *, unsigned int, struct notifier_block *);
260:	void devm_extcon_unregister_notifier_all(struct device *, struct extcon_dev *, struct notifier_block *);
11:	static int devm_extcon_dev_match(struct device *, void *, void *);
45:	static void devm_extcon_dev_notifier_all_unreg(struct device *, void *);
38:	static void devm_extcon_dev_notifier_unreg(struct device *, void *);
21:	static void devm_extcon_dev_release(struct device *, void *);
27:	static void devm_extcon_dev_unreg(struct device *, void *);

File drivers/extcon/extcon-ptn5150.c:
72:	static void ptn5150_check_state(struct ptn5150_info *);
354:	static void ptn5150_i2c_driver_exit(void);
354:	static int ptn5150_i2c_driver_init(void);
224:	static int ptn5150_i2c_probe(struct i2c_client *);
172:	static irqreturn_t ptn5150_irq_handler(int, void *);
116:	static void ptn5150_irq_work(struct work_struct *);
216:	static void ptn5150_work_sync_and_put(void *);

File drivers/extcon/extcon-usb-gpio.c:
60:	static void usb_extcon_detect_cable(struct work_struct *);
293:	static void usb_extcon_driver_exit(void);
293:	static int usb_extcon_driver_init(void);
97:	static int usb_extcon_probe(struct platform_device *);
196:	static int usb_extcon_remove(struct platform_device *);
87:	static irqreturn_t usb_irq_handler(int, void *);

File drivers/extcon/extcon.c:
1045:	struct extcon_dev *extcon_dev_allocate(const unsigned int *);
1066:	void extcon_dev_free(struct extcon_dev *);
1086:	int extcon_dev_register(struct extcon_dev *);
1298:	void extcon_dev_unregister(struct extcon_dev *);
1346:	struct extcon_dev *extcon_find_edev_by_node(struct device_node *);
1368:	struct extcon_dev *extcon_get_edev_by_phandle(struct device *, int);
1415:	const char *extcon_get_edev_name(struct extcon_dev *);
871:	struct extcon_dev *extcon_get_extcon_dev(const char *);
614:	int extcon_get_property(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value *);
784:	int extcon_get_property_capability(struct extcon_dev *, unsigned int, unsigned int);
500:	int extcon_get_state(struct extcon_dev *, const unsigned int);
903:	int extcon_register_notifier(struct extcon_dev *, unsigned int, struct notifier_block *);
965:	int extcon_register_notifier_all(struct extcon_dev *, struct notifier_block *);
693:	int extcon_set_property(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value);
818:	int extcon_set_property_capability(struct extcon_dev *, unsigned int, unsigned int);
761:	int extcon_set_property_sync(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value);
533:	int extcon_set_state(struct extcon_dev *, unsigned int, bool);
588:	int extcon_set_state_sync(struct extcon_dev *, unsigned int, bool);
419:	int extcon_sync(struct extcon_dev *, unsigned int);
932:	int extcon_unregister_notifier(struct extcon_dev *, unsigned int, struct notifier_block *);
989:	int extcon_unregister_notifier_all(struct extcon_dev *, struct notifier_block *);
386:	static ssize_t cable_name_show(struct device *, struct device_attribute *, char *);
397:	static ssize_t cable_state_show(struct device *, struct device_attribute *, char *);
1030:	static void dummy_sysfs_dev_release(struct device *);
1427:	static void extcon_class_exit(void);
1421:	static int extcon_class_init(void);
1025:	static void extcon_dev_release(struct device *);
377:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
358:	static ssize_t state_show(struct device *, struct device_attribute *, char *);

File drivers/firmware/arm_scmi/base.c:
428:	int scmi_base_register(void);
428:	void scmi_base_unregister(void);
321:	static void *scmi_base_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
172:	static int scmi_base_implementation_list_get(const struct scmi_protocol_handle *, u8 *);
139:	static int scmi_base_implementation_version_get(const struct scmi_protocol_handle *);
373:	static int scmi_base_protocol_init(const struct scmi_protocol_handle *);
309:	static int scmi_base_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
97:	static int scmi_base_vendor_id_get(const struct scmi_protocol_handle *, bool);

File drivers/firmware/arm_scmi/bus.c:
301:	void scmi_bus_exit(void);
290:	int scmi_bus_init(void);
63:	struct scmi_device *scmi_child_dev_find(struct device *, int, const char *);
168:	struct scmi_device *scmi_device_create(struct device_node *, struct device *, int, const char *);
211:	void scmi_device_destroy(struct scmi_device *);
219:	void scmi_device_link_add(struct device *, struct device *);
130:	int scmi_driver_register(struct scmi_driver *, struct module *, const char *);
155:	void scmi_driver_unregister(struct scmi_driver *);
79:	const struct scmi_protocol *scmi_protocol_get(int);
94:	void scmi_protocol_put(int);
235:	int scmi_protocol_register(const struct scmi_protocol *);
265:	void scmi_protocol_unregister(const struct scmi_protocol *);
228:	void scmi_set_handle(struct scmi_device *);
277:	static int __scmi_devices_unregister(struct device *, void *);
41:	static int scmi_dev_match(struct device *, struct device_driver *);
103:	static int scmi_dev_probe(struct device *);
114:	static void scmi_dev_remove(struct device *);
162:	static void scmi_device_release(struct device *);
54:	static int scmi_match_by_id_table(struct device *, void *);

File drivers/firmware/arm_scmi/clock.c:
619:	int scmi_clock_register(void);
619:	void scmi_clock_unregister(void);
202:	static void iter_clk_describe_prepare_message(void *, const unsigned int, const void *);
254:	static int iter_clk_describe_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
215:	static int iter_clk_describe_update_state(struct scmi_iterator_state *, const void *, void *);
184:	static int rate_cmp_func(const void *, const void *);
515:	static void *scmi_clk_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
537:	static int scmi_clk_get_num_sources(const struct scmi_protocol_handle *);
498:	static int scmi_clk_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
443:	static int scmi_clock_count_get(const struct scmi_protocol_handle *);
426:	static int scmi_clock_disable(const struct scmi_protocol_handle *, u32);
437:	static int scmi_clock_disable_atomic(const struct scmi_protocol_handle *, u32);
421:	static int scmi_clock_enable(const struct scmi_protocol_handle *, u32);
431:	static int scmi_clock_enable_atomic(const struct scmi_protocol_handle *, u32);
451:	static const struct scmi_clock_info *scmi_clock_info_get(const struct scmi_protocol_handle *, u32);
573:	static int scmi_clock_protocol_init(const struct scmi_protocol_handle *);
328:	static int scmi_clock_rate_get(const struct scmi_protocol_handle *, u32, u64 *);
349:	static int scmi_clock_rate_set(const struct scmi_protocol_handle *, u32, u64);

File drivers/firmware/arm_scmi/driver.c:
2484:	void scmi_free_channel(struct scmi_chan_info *, struct idr *, int);
1850:	struct scmi_handle *scmi_handle_get(struct device *);
1881:	int scmi_handle_put(const struct scmi_handle *);
207:	void *scmi_notification_instance_data_get(const struct scmi_handle *);
197:	void scmi_notification_instance_data_set(const struct scmi_handle *, void *);
1611:	int scmi_protocol_acquire(const struct scmi_handle *, u8);
2190:	int scmi_protocol_device_request(const struct scmi_device_id *);
2321:	void scmi_protocol_device_unrequest(const struct scmi_device_id *);
1624:	void scmi_protocol_release(const struct scmi_handle *, u8);
1473:	struct scmi_revision_info *scmi_revision_area_get(const struct scmi_protocol_handle *);
741:	void scmi_rx_callback(struct scmi_chan_info *, u32, void *);
1656:	void scmi_setup_protocol_implemented(const struct scmi_protocol_handle *, u8 *);
1897:	static int __scmi_xfer_info_init(struct scmi_info *, struct scmi_xfers_info *);
415:	static void __scmi_xfer_put(struct scmi_xfers_info *, struct scmi_xfer *);
877:	static int do_xfer(const struct scmi_protocol_handle *, struct scmi_xfer *);
983:	static int do_xfer_with_response(const struct scmi_protocol_handle *, struct scmi_xfer *);
2530:	static ssize_t firmware_version_show(struct device *, struct device_attribute *, char *);
2520:	static ssize_t protocol_version_show(struct device *, struct device_attribute *, char *);
948:	static void reset_rx_to_maxsz(const struct scmi_protocol_handle *, struct scmi_xfer *);
1990:	static int scmi_chan_setup(struct scmi_info *, struct device *, int, bool);
1151:	static int scmi_common_extended_name_get(const struct scmi_protocol_handle *, u8, u32, char *, size_t);
1428:	static void scmi_common_fastchannel_db_ring(struct scmi_fc_db_info *);
1313:	static void scmi_common_fastchannel_init(const struct scmi_protocol_handle *, u8, u32, u32, u32, void **, struct scmi_fc_db_info **);
1769:	static int scmi_devm_protocol_acquire(struct scmi_device *, u8);
1736:	static const void *scmi_devm_protocol_get(struct scmi_device *, u8, struct scmi_protocol_handle **);
1781:	static int scmi_devm_protocol_match(struct device *, void *, void *);
1800:	static void scmi_devm_protocol_put(struct scmi_device *, u8);
1686:	static void scmi_devm_release_protocol(struct device *, void *);
2674:	static void scmi_driver_exit(void);
2644:	static int scmi_driver_init(void);
2079:	static struct scmi_device *scmi_get_protocol_device(struct device_node *, struct scmi_info *, int, const char *);
1576:	static struct scmi_protocol_instance *scmi_get_protocol_instance(const struct scmi_handle *, u8);
1119:	static void *scmi_get_protocol_priv(const struct scmi_protocol_handle *);
1819:	static bool scmi_is_transport_atomic(const struct scmi_handle *, unsigned int *);
1205:	static void *scmi_iterator_init(const struct scmi_protocol_handle *, struct scmi_iterator_ops *, unsigned int, u8, size_t, void *);
1234:	static int scmi_iterator_run(void *);
2365:	static int scmi_probe(struct platform_device *);
2489:	static int scmi_remove(struct platform_device *);
1102:	static int scmi_set_protocol_priv(const struct scmi_protocol_handle *, void *);
2639:	static void scmi_transports_exit(void);
2634:	static int scmi_transports_init(void);
774:	static bool scmi_xfer_done_no_timeout(struct scmi_chan_info *, struct scmi_xfer *, ktime_t);
2548:	static ssize_t sub_vendor_id_show(struct device *, struct device_attribute *, char *);
2539:	static ssize_t vendor_id_show(struct device *, struct device_attribute *, char *);
1074:	static int version_get(const struct scmi_protocol_handle *, u32 *);
1030:	static int xfer_get_init(const struct scmi_protocol_handle *, u8, size_t, size_t, struct scmi_xfer **);
765:	static void xfer_put(const struct scmi_protocol_handle *, struct scmi_xfer *);

File drivers/firmware/arm_scmi/mailbox.c:
49:	static bool mailbox_chan_available(struct device *, int);
111:	static int mailbox_chan_free(int, void *, void *);
55:	static int mailbox_chan_setup(struct scmi_chan_info *, struct device *, bool);
173:	static void mailbox_clear_channel(struct scmi_chan_info *);
165:	static void mailbox_fetch_notification(struct scmi_chan_info *, size_t, struct scmi_xfer *);
157:	static void mailbox_fetch_response(struct scmi_chan_info *, struct scmi_xfer *);
143:	static void mailbox_mark_txdone(struct scmi_chan_info *, int, struct scmi_xfer *);
181:	static bool mailbox_poll_done(struct scmi_chan_info *, struct scmi_xfer *);
128:	static int mailbox_send_message(struct scmi_chan_info *, struct scmi_xfer *);
42:	static void rx_callback(struct mbox_client *, void *);
35:	static void tx_prepare(struct mbox_client *, void *);

File drivers/firmware/arm_scmi/msg.c:
33:	size_t msg_command_size(struct scmi_xfer *);
103:	void msg_fetch_notification(struct scmi_msg_payld *, size_t, size_t, struct scmi_xfer *);
82:	void msg_fetch_response(struct scmi_msg_payld *, size_t, struct scmi_xfer *);
70:	u32 msg_read_header(struct scmi_msg_payld *);
45:	size_t msg_response_size(struct scmi_xfer *);
56:	void msg_tx_prepare(struct scmi_msg_payld *, struct scmi_xfer *);

File drivers/firmware/arm_scmi/notify.c:
839:	void scmi_deregister_protocol_events(const struct scmi_handle *, u8);
1699:	void scmi_notification_exit(struct scmi_handle *);
1646:	int scmi_notification_init(struct scmi_handle *);
578:	int scmi_notify(const struct scmi_handle *, u8, u8, const void *, size_t, ktime_t);
748:	int scmi_register_protocol_events(const struct scmi_handle *, u8, const struct scmi_protocol_handle *, const struct scmi_protocol_events *);
1047:	static struct scmi_event_handler *__scmi_event_handler_get_ops(struct scmi_notify_instance *, u32, bool);
1498:	static int scmi_devm_notifier_match(struct device *, void *, void *);
1463:	static int scmi_devm_notifier_register(struct scmi_device *, u8, u8, const u32 *, struct notifier_block *);
1531:	static int scmi_devm_notifier_unregister(struct scmi_device *, u8, u8, const u32 *, struct notifier_block *);
1439:	static void scmi_devm_release_notifier(struct device *, void *);
1299:	static int scmi_event_handler_enable_events(struct scmi_event_handler *);
536:	static void scmi_events_dispatcher(struct work_struct *);
636:	static void scmi_kfifo_free(void *);
385:	static void scmi_lookup_and_call_event_chain(struct scmi_notify_instance *, u32, void *);
1342:	static int scmi_notifier_register(const struct scmi_handle *, u8, u8, const u32 *, struct notifier_block *);
1389:	static int scmi_notifier_unregister(const struct scmi_handle *, u8, u8, const u32 *, struct notifier_block *);
1567:	static void scmi_protocols_late_init(struct work_struct *);
1250:	static void scmi_put_handler(struct scmi_notify_instance *, struct scmi_event_handler *);
1235:	static bool scmi_put_handler_unlocked(struct scmi_notify_instance *, struct scmi_event_handler *);

File drivers/firmware/arm_scmi/optee.c:
221:	static int get_channel(struct scmi_optee_channel *);
331:	static bool scmi_optee_chan_available(struct device *, int);
465:	static int scmi_optee_chan_free(int, void *, void *);
412:	static int scmi_optee_chan_setup(struct scmi_chan_info *, struct device *, bool);
339:	static void scmi_optee_clear_channel(struct scmi_chan_info *);
541:	static int scmi_optee_ctx_match(struct tee_ioctl_version_data *, const void *);
632:	static void scmi_optee_exit(void);
511:	static void scmi_optee_fetch_response(struct scmi_chan_info *, struct scmi_xfer *);
313:	static int scmi_optee_link_supplier(struct device *);
522:	static void scmi_optee_mark_txdone(struct scmi_chan_info *, int, struct scmi_xfer *);
489:	static int scmi_optee_send_message(struct scmi_chan_info *, struct scmi_xfer *);
546:	static int scmi_optee_service_probe(struct device *);
589:	static int scmi_optee_service_remove(struct device *);

File drivers/firmware/arm_scmi/perf.c:
854:	int scmi_perf_register(void);
854:	void scmi_perf_unregister(void);
257:	static void iter_perf_levels_prepare_message(void *, unsigned int, const void *);
281:	static int iter_perf_levels_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
269:	static int iter_perf_levels_update_state(struct scmi_iterator_state *, const void *, void *);
245:	static int opp_cmp_func(const void *, const void *);
559:	static int scmi_dev_domain_id(struct device *);
570:	static int scmi_dvfs_device_opps_add(const struct scmi_protocol_handle *, struct device *);
642:	static int scmi_dvfs_est_power_get(const struct scmi_protocol_handle *, u32, unsigned long *, unsigned long *);
627:	static int scmi_dvfs_freq_get(const struct scmi_protocol_handle *, u32, unsigned long *, bool);
618:	static int scmi_dvfs_freq_set(const struct scmi_protocol_handle *, u32, unsigned long, bool);
603:	static int scmi_dvfs_transition_latency_get(const struct scmi_protocol_handle *, struct device *);
670:	static bool scmi_fast_switch_possible(const struct scmi_protocol_handle *, struct device *);
721:	static void *scmi_perf_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
769:	static int scmi_perf_get_num_sources(const struct scmi_protocol_handle *);
490:	static int scmi_perf_level_get(const struct scmi_protocol_handle *, u32, u32 *, bool);
449:	static int scmi_perf_level_set(const struct scmi_protocol_handle *, u32, u32, bool);
408:	static int scmi_perf_limits_get(const struct scmi_protocol_handle *, u32, u32 *, u32 *);
359:	static int scmi_perf_limits_set(const struct scmi_protocol_handle *, u32, u32, u32);
805:	static int scmi_perf_protocol_init(const struct scmi_protocol_handle *);
704:	static int scmi_perf_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
682:	static enum scmi_power_scale scmi_power_scale_get(const struct scmi_protocol_handle *);

File drivers/firmware/arm_scmi/power.c:
342:	int scmi_power_register(void);
342:	void scmi_power_unregister(void);
245:	static void *scmi_power_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
265:	static int scmi_power_get_num_sources(const struct scmi_protocol_handle *);
193:	static const char *scmi_power_name_get(const struct scmi_protocol_handle *, u32);
185:	static int scmi_power_num_domains_get(const struct scmi_protocol_handle *);
297:	static int scmi_power_protocol_init(const struct scmi_protocol_handle *);
231:	static int scmi_power_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
165:	static int scmi_power_state_get(const struct scmi_protocol_handle *, u32, u32 *);
143:	static int scmi_power_state_set(const struct scmi_protocol_handle *, u32, u32);

File drivers/firmware/arm_scmi/powercap.c:
866:	int scmi_powercap_register(void);
866:	void scmi_powercap_unregister(void);
316:	static int scmi_powercap_cap_get(const struct scmi_protocol_handle *, u32, u32 *);
378:	static int scmi_powercap_cap_set(const struct scmi_protocol_handle *, u32, u32, bool);
285:	static const struct scmi_powercap_info *scmi_powercap_dom_info_get(const struct scmi_protocol_handle *, u32);
715:	static void *scmi_powercap_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
764:	static int scmi_powercap_get_num_sources(const struct scmi_protocol_handle *);
490:	static int scmi_powercap_measurements_get(const struct scmi_protocol_handle *, u32, u32 *, u32 *);
521:	static int scmi_powercap_measurements_threshold_get(const struct scmi_protocol_handle *, u32, u32 *, u32 *);
538:	static int scmi_powercap_measurements_threshold_set(const struct scmi_protocol_handle *, u32, u32, u32);
609:	static int scmi_powercap_notify(const struct scmi_protocol_handle *, u32, int, bool);
277:	static int scmi_powercap_num_domains_get(const struct scmi_protocol_handle *);
424:	static int scmi_powercap_pai_get(const struct scmi_protocol_handle *, u32, u32 *);
467:	static int scmi_powercap_pai_set(const struct scmi_protocol_handle *, u32, u32);
805:	static int scmi_powercap_protocol_init(const struct scmi_protocol_handle *);
677:	static int scmi_powercap_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);

File drivers/firmware/arm_scmi/reset.c:
356:	int scmi_reset_register(void);
356:	void scmi_reset_unregister(void);
204:	static int scmi_reset_domain_assert(const struct scmi_protocol_handle *, u32);
211:	static int scmi_reset_domain_deassert(const struct scmi_protocol_handle *, u32);
196:	static int scmi_reset_domain_reset(const struct scmi_protocol_handle *, u32);
261:	static void *scmi_reset_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
281:	static int scmi_reset_get_num_sources(const struct scmi_protocol_handle *);
153:	static int scmi_reset_latency_get(const struct scmi_protocol_handle *, u32);
144:	static const char *scmi_reset_name_get(const struct scmi_protocol_handle *, u32);
136:	static int scmi_reset_num_domains_get(const struct scmi_protocol_handle *);
312:	static int scmi_reset_protocol_init(const struct scmi_protocol_handle *);
247:	static int scmi_reset_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);

File drivers/firmware/arm_scmi/scmi_pm_domain.c:
50:	static int scmi_pd_power_off(struct generic_pm_domain *);
45:	static int scmi_pd_power_on(struct generic_pm_domain *);
55:	static int scmi_pm_domain_probe(struct scmi_device *);
120:	static void scmi_pm_domain_remove(struct scmi_device *);
149:	static void scmi_power_domain_driver_exit(void);
149:	static int scmi_power_domain_driver_init(void);

File drivers/firmware/arm_scmi/sensors.c:
1152:	int scmi_sensors_register(void);
1152:	void scmi_sensors_unregister(void);
366:	static void iter_axes_desc_prepare_message(void *, const unsigned int, const void *);
394:	static int iter_axes_desc_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
379:	static int iter_axes_desc_update_state(struct scmi_iterator_state *, const void *, void *);
448:	static int iter_axes_extended_name_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
433:	static int iter_axes_extended_name_update_state(struct scmi_iterator_state *, const void *, void *);
261:	static void iter_intervals_prepare_message(void *, unsigned int, const void *);
324:	static int iter_intervals_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
274:	static int iter_intervals_update_state(struct scmi_iterator_state *, const void *, void *);
548:	static void iter_sens_descr_prepare_message(void *, unsigned int, const void *);
570:	static int iter_sens_descr_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
557:	static int iter_sens_descr_update_state(struct scmi_iterator_state *, const void *, void *);
760:	static int scmi_sensor_config_get(const struct scmi_protocol_handle *, u32, u32 *);
788:	static int scmi_sensor_config_set(const struct scmi_protocol_handle *, u32, u32);
971:	static int scmi_sensor_count_get(const struct scmi_protocol_handle *);
1013:	static void *scmi_sensor_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
1073:	static int scmi_sensor_get_num_sources(const struct scmi_protocol_handle *);
961:	static const struct scmi_sensor_info *scmi_sensor_info_get(const struct scmi_protocol_handle *, u32);
834:	static int scmi_sensor_reading_get(const struct scmi_protocol_handle *, u32, u64 *);
901:	static int scmi_sensor_reading_get_timestamped(const struct scmi_protocol_handle *, u32, u8, struct scmi_sensor_reading *);
988:	static int scmi_sensor_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);
735:	static int scmi_sensor_trip_point_config(const struct scmi_protocol_handle *, u32, u8, u64);
1111:	static int scmi_sensors_protocol_init(const struct scmi_protocol_handle *);

File drivers/firmware/arm_scmi/shmem.c:
106:	void shmem_clear_channel(struct scmi_shared_mem *);
94:	void shmem_fetch_notification(struct scmi_shared_mem *, size_t, struct scmi_xfer *);
81:	void shmem_fetch_response(struct scmi_shared_mem *, struct scmi_xfer *);
111:	bool shmem_poll_done(struct scmi_shared_mem *, struct scmi_xfer *);
76:	u32 shmem_read_header(struct scmi_shared_mem *);
35:	void shmem_tx_prepare(struct scmi_shared_mem *, struct scmi_xfer *, struct scmi_chan_info *);

File drivers/firmware/arm_scmi/smc.c:
55:	static bool smc_chan_available(struct device *, int);
166:	static int smc_chan_free(int, void *, void *);
100:	static int smc_chan_setup(struct scmi_chan_info *, struct device *, bool);
204:	static void smc_fetch_response(struct scmi_chan_info *, struct scmi_xfer *);
212:	static void smc_mark_txdone(struct scmi_chan_info *, int, struct scmi_xfer *);
45:	static irqreturn_t smc_msg_done_isr(int, void *);
179:	static int smc_send_message(struct scmi_chan_info *, struct scmi_xfer *);

File drivers/firmware/arm_scmi/system.c:
158:	int scmi_system_register(void);
158:	void scmi_system_unregister(void);
72:	static void *scmi_system_fill_custom_report(const struct scmi_protocol_handle *, u8, ktime_t, const void *, size_t, void *, u32 *);
126:	static int scmi_system_protocol_init(const struct scmi_protocol_handle *);
59:	static int scmi_system_set_notify_enabled(const struct scmi_protocol_handle *, u8, u32, bool);

File drivers/firmware/arm_scmi/voltage.c:
445:	int scmi_voltage_register(void);
445:	void scmi_voltage_unregister(void);
126:	static void iter_volt_levels_prepare_message(void *, unsigned int, const void *);
162:	static int iter_volt_levels_process_response(const struct scmi_protocol_handle *, const void *, struct scmi_iterator_state *, void *);
137:	static int iter_volt_levels_update_state(struct scmi_iterator_state *, const void *, void *);
309:	static int scmi_voltage_config_get(const struct scmi_protocol_handle *, u32, u32 *);
283:	static int scmi_voltage_config_set(const struct scmi_protocol_handle *, u32, u32);
384:	static int scmi_voltage_domains_num_get(const struct scmi_protocol_handle *);
373:	static const struct scmi_voltage_info *scmi_voltage_info_get(const struct scmi_protocol_handle *, u32);
365:	static int scmi_voltage_level_get(const struct scmi_protocol_handle *, u32, s32 *);
316:	static int scmi_voltage_level_set(const struct scmi_protocol_handle *, u32, enum scmi_voltage_level_mode, s32);
400:	static int scmi_voltage_protocol_init(const struct scmi_protocol_handle *);

File drivers/firmware/arm_scpi.c:
800:	struct scpi_ops *get_scpi_ops(void);
835:	static ssize_t firmware_version_show(struct device *, struct device_attribute *, char *);
573:	static int legacy_scpi_clk_set_val(u16, unsigned long);
605:	static int opp_cmp_func(const void *, const void *);
824:	static ssize_t protocol_version_show(struct device *, struct device_attribute *, char *);
532:	static int scpi_clk_get_range(u16, unsigned long *, unsigned long *);
547:	static unsigned long scpi_clk_get_val(u16);
561:	static int scpi_clk_set_val(u16, unsigned long);
654:	static int scpi_dev_domain_id(struct device *);
759:	static int scpi_device_get_power_state(u16);
770:	static int scpi_device_set_power_state(u16, u8);
1056:	static void scpi_driver_exit(void);
1056:	static int scpi_driver_init(void);
685:	static int scpi_dvfs_add_opps_to_device(struct device *);
585:	static int scpi_dvfs_get_idx(u8);
612:	static struct scpi_dvfs_info *scpi_dvfs_get_info(u8);
675:	static int scpi_dvfs_get_transition_latency(struct device *);
596:	static int scpi_dvfs_set_idx(u8, u8);
854:	static void scpi_free_channels(void *);
526:	static u32 scpi_get_version(void);
409:	static void scpi_handle_remote_msg(struct mbox_client *, void *);
806:	static int scpi_init_versions(struct scpi_drvinfo *);
910:	static int scpi_probe(struct platform_device *);
353:	static void scpi_process_cmd(struct scpi_chan *, u32);
863:	static int scpi_remove(struct platform_device *);
470:	static int scpi_send_message(u8, void *, unsigned int, void *, unsigned int);
710:	static int scpi_sensor_get_capability(u16 *);
723:	static int scpi_sensor_get_info(u16, struct scpi_sensor_info *);
739:	static int scpi_sensor_get_value(u16, u64 *);
421:	static void scpi_tx_prepare(struct mbox_client *, void *);

File drivers/firmware/psci/psci.c:
65:	struct psci_0_1_function_ids get_psci_0_1_function_ids(void);
732:	int psci_dt_init(void);
88:	bool psci_has_osi_support(void);
102:	bool psci_power_state_is_valid(u32);
158:	int psci_set_osi_mode(bool);
54:	bool psci_tos_resident_on(int);
111:	static unsigned long __invoke_psci_fn_hvc(unsigned long, unsigned long, unsigned long, unsigned long);
121:	static unsigned long __invoke_psci_fn_smc(unsigned long, unsigned long, unsigned long, unsigned long);
280:	static int get_set_conduit_method(const struct device_node *);
200:	static int psci_0_1_cpu_off(u32);
218:	static int psci_0_1_cpu_on(unsigned long, unsigned long);
180:	static int psci_0_1_cpu_suspend(u32, unsigned long);
148:	static u32 psci_0_1_get_version(void);
671:	static int psci_0_1_init(const struct device_node *);
236:	static int psci_0_1_migrate(unsigned long);
205:	static int psci_0_2_cpu_off(u32);
223:	static int psci_0_2_cpu_on(unsigned long, unsigned long);
186:	static int psci_0_2_cpu_suspend(u32, unsigned long);
153:	static u32 psci_0_2_get_version(void);
650:	static int psci_0_2_init(const struct device_node *);
241:	static int psci_0_2_migrate(unsigned long);
593:	static void psci_0_2_set_functions(void);
707:	static int psci_1_0_init(const struct device_node *);
246:	static int psci_affinity_info(unsigned long, unsigned long);
441:	static int psci_debugfs_init(void);
428:	static int psci_debugfs_open(struct inode *, struct file *);
363:	static int psci_debugfs_read(struct seq_file *, void *);
532:	static void psci_init_migrate(void);
568:	static void psci_init_smccc(void);
253:	static int psci_migrate_info_type(void);
615:	static int psci_probe(void);
325:	static void psci_sys_poweroff(void);
302:	static int psci_sys_reset(struct notifier_block *, unsigned long, void *);

File drivers/firmware/scpi_pm_domain.c:
57:	static int scpi_pd_power_off(struct generic_pm_domain *);
50:	static int scpi_pd_power_on(struct generic_pm_domain *);
64:	static int scpi_pm_domain_probe(struct platform_device *);
152:	static void scpi_power_domain_driver_exit(void);
152:	static int scpi_power_domain_driver_init(void);

File drivers/firmware/smccc/kvm_guest.c:
44:	bool kvm_arm_hyp_service_available(u32);
15:	void kvm_init_hyp_services(void);

File drivers/firmware/smccc/smccc.c:
32:	enum arm_smccc_conduit arm_smccc_1_1_get_conduit(void);
41:	u32 arm_smccc_get_version(void);
21:	void arm_smccc_version_init(u32, enum arm_smccc_conduit);
47:	static int smccc_devices_init(void);

File drivers/firmware/smccc/soc_id.c:
108:	static void smccc_soc_exit(void);
35:	static int smccc_soc_init(void);

File drivers/firmware/ti_sci.c:
3058:	const struct ti_sci_handle *devm_ti_sci_get_by_phandle(struct device *, const char *);
2976:	const struct ti_sci_handle *devm_ti_sci_get_handle(struct device *);
3227:	struct ti_sci_resource *devm_ti_sci_get_of_resource(const struct ti_sci_handle *, struct device *, u32, char *);
3265:	struct ti_sci_resource *devm_ti_sci_get_resource(const struct ti_sci_handle *, struct device *, u32, u32);
3010:	const struct ti_sci_handle *ti_sci_get_by_phandle(struct device_node *, const char *);
3086:	u16 ti_sci_get_free_resource(struct ti_sci_resource *);
2887:	const struct ti_sci_handle *ti_sci_get_handle(struct device *);
3144:	u32 ti_sci_get_num_resources(struct ti_sci_resource *);
2935:	int ti_sci_put_handle(const struct ti_sci_handle *);
3118:	void ti_sci_release_resource(struct ti_sci_resource *, u16);
3167:	static struct ti_sci_resource *devm_ti_sci_get_resource_sets(const struct ti_sci_handle *, struct device *, u32, u32 *, u32);
2954:	static void devm_ti_sci_release(struct device *, void *);
1615:	static int ti_sci_cmd_clk_get_freq(const struct ti_sci_handle *, u32, u32, u64 *);
1472:	static int ti_sci_cmd_clk_get_match_freq(const struct ti_sci_handle *, u32, u32, u64, u64, u64, u64 *);
1394:	static int ti_sci_cmd_clk_get_num_parents(const struct ti_sci_handle *, u32, u32, u32 *);
1325:	static int ti_sci_cmd_clk_get_parent(const struct ti_sci_handle *, u32, u32, u32 *);
1163:	static int ti_sci_cmd_clk_is_auto(const struct ti_sci_handle *, u32, u32, bool *);
1225:	static int ti_sci_cmd_clk_is_off(const struct ti_sci_handle *, u32, u32, bool *, bool *);
1192:	static int ti_sci_cmd_clk_is_on(const struct ti_sci_handle *, u32, u32, bool *, bool *);
1549:	static int ti_sci_cmd_clk_set_freq(const struct ti_sci_handle *, u32, u32, u64, u64, u64);
1257:	static int ti_sci_cmd_clk_set_parent(const struct ti_sci_handle *, u32, u32, u32);
1669:	static int ti_sci_cmd_core_reboot(const struct ti_sci_handle *);
754:	static int ti_sci_cmd_dev_get_clcnt(const struct ti_sci_handle *, u32, u32 *);
768:	static int ti_sci_cmd_dev_is_idle(const struct ti_sci_handle *, u32, bool *);
826:	static int ti_sci_cmd_dev_is_on(const struct ti_sci_handle *, u32, bool *, bool *);
795:	static int ti_sci_cmd_dev_is_stop(const struct ti_sci_handle *, u32, bool *, bool *);
856:	static int ti_sci_cmd_dev_is_trans(const struct ti_sci_handle *, u32, bool *);
738:	static int ti_sci_cmd_dev_is_valid(const struct ti_sci_handle *, u32);
2056:	static int ti_sci_cmd_free_event_map(const struct ti_sci_handle *, u16, u16, u16, u16, u16, u8);
2034:	static int ti_sci_cmd_free_irq(const struct ti_sci_handle *, u16, u16, u16, u16);
1098:	static int ti_sci_cmd_get_clock(const struct ti_sci_handle *, u32, u32, bool, bool, bool);
1022:	static int ti_sci_cmd_get_clock_state(const struct ti_sci_handle *, u32, u32, u8 *, u8 *);
648:	static int ti_sci_cmd_get_device(const struct ti_sci_handle *, u32);
667:	static int ti_sci_cmd_get_device_exclusive(const struct ti_sci_handle *, u32);
938:	static int ti_sci_cmd_get_device_resets(const struct ti_sci_handle *, u32, u32 *);
1800:	static int ti_sci_cmd_get_resource_range(const struct ti_sci_handle *, u32, u8, struct ti_sci_resource_desc *);
1823:	static int ti_sci_cmd_get_resource_range_from_shost(const struct ti_sci_handle *, u32, u8, u8, struct ti_sci_resource_desc *);
460:	static int ti_sci_cmd_get_revision(struct ti_sci_info *);
1124:	static int ti_sci_cmd_idle_clock(const struct ti_sci_handle *, u32, u32);
686:	static int ti_sci_cmd_idle_device(const struct ti_sci_handle *, u32);
705:	static int ti_sci_cmd_idle_device_exclusive(const struct ti_sci_handle *, u32);
2745:	static int ti_sci_cmd_proc_get_status(const struct ti_sci_handle *, u8, u64 *, u32 *, u32 *, u32 *);
2572:	static int ti_sci_cmd_proc_handover(const struct ti_sci_handle *, u8, u8);
2517:	static int ti_sci_cmd_proc_release(const struct ti_sci_handle *, u8);
2465:	static int ti_sci_cmd_proc_request(const struct ti_sci_handle *, u8);
2628:	static int ti_sci_cmd_proc_set_config(const struct ti_sci_handle *, u8, u64, u32, u32);
2690:	static int ti_sci_cmd_proc_set_control(const struct ti_sci_handle *, u8, u32, u32);
1144:	static int ti_sci_cmd_put_clock(const struct ti_sci_handle *, u32, u32);
724:	static int ti_sci_cmd_put_device(const struct ti_sci_handle *, u32);
2141:	static int ti_sci_cmd_rm_psil_pair(const struct ti_sci_handle *, u32, u32, u32);
2197:	static int ti_sci_cmd_rm_psil_unpair(const struct ti_sci_handle *, u32, u32, u32);
2079:	static int ti_sci_cmd_rm_ring_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_ring_cfg *);
2326:	static int ti_sci_cmd_rm_udmap_rx_ch_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_udmap_rx_ch_cfg *);
2395:	static int ti_sci_cmd_rm_udmap_rx_flow_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_udmap_flow_cfg *);
2254:	static int ti_sci_cmd_rm_udmap_tx_ch_cfg(const struct ti_sci_handle *, const struct ti_sci_msg_rm_udmap_tx_ch_cfg *);
883:	static int ti_sci_cmd_set_device_resets(const struct ti_sci_handle *, u32, u32);
2008:	static int ti_sci_cmd_set_event_map(const struct ti_sci_handle *, u16, u16, u16, u16, u16, u8);
1986:	static int ti_sci_cmd_set_irq(const struct ti_sci_handle *, u16, u16, u16, u16);
152:	static int ti_sci_debug_open(struct inode *, struct file *);
135:	static int ti_sci_debug_show(struct seq_file *, void *);
407:	static int ti_sci_do_xfer(struct ti_sci_info *, struct ti_sci_xfer *);
3522:	static void ti_sci_driver_exit(void);
3522:	static int ti_sci_driver_init(void);
577:	static int ti_sci_get_device_state(const struct ti_sci_handle *, u32, u32 *, u32 *, u8 *, u8 *);
304:	static struct ti_sci_xfer *ti_sci_get_one_xfer(struct ti_sci_info *, u16, u32, size_t, size_t);
1729:	static int ti_sci_get_resource_range(const struct ti_sci_handle *, u32, u8, u8, struct ti_sci_resource_desc *);
1849:	static int ti_sci_manage_irq(const struct ti_sci_handle *, u32, u16, u16, u16, u16, u16, u16, u16, u8, u8, u16);
3340:	static int ti_sci_probe(struct platform_device *);
3482:	static int ti_sci_remove(struct platform_device *);
244:	static void ti_sci_rx_callback(struct mbox_client *, void *);
957:	static int ti_sci_set_clock_state(const struct ti_sci_handle *, u32, u32, u32, u8);
520:	static int ti_sci_set_device_state(const struct ti_sci_handle *, u32, u32, u8);
2804:	static void ti_sci_setup_ops(struct ti_sci_info *);
3272:	static int tisci_reboot_handler(struct notifier_block *, unsigned long, void *);

File drivers/fpga/altera-freeze-bridge.c:
277:	static void altera_freeze_br_driver_exit(void);
277:	static int altera_freeze_br_driver_init(void);
163:	static int altera_freeze_br_enable_set(struct fpga_bridge *, bool);
189:	static int altera_freeze_br_enable_show(struct fpga_bridge *);
209:	static int altera_freeze_br_probe(struct platform_device *);
259:	static int altera_freeze_br_remove(struct platform_device *);
40:	static int altera_freeze_br_req_ack(struct altera_freeze_br_data *, u32, u32);

File drivers/fpga/fpga-bridge.c:
47:	int fpga_bridge_disable(struct fpga_bridge *);
29:	int fpga_bridge_enable(struct fpga_bridge *);
124:	struct fpga_bridge *fpga_bridge_get(struct device *, struct fpga_image_info *);
265:	int fpga_bridge_get_to_list(struct device *, struct fpga_image_info *, struct list_head *);
143:	void fpga_bridge_put(struct fpga_bridge *);
324:	struct fpga_bridge *fpga_bridge_register(struct device *, const char *, const struct fpga_bridge_ops *, void *);
393:	void fpga_bridge_unregister(struct fpga_bridge *);
186:	int fpga_bridges_disable(struct list_head *);
162:	int fpga_bridges_enable(struct list_head *);
209:	void fpga_bridges_put(struct list_head *);
97:	struct fpga_bridge *of_fpga_bridge_get(struct device_node *, struct fpga_image_info *);
235:	int of_fpga_bridge_get_to_list(struct device_node *, struct fpga_image_info *, struct list_head *);
426:	static void fpga_bridge_dev_exit(void);
414:	static int fpga_bridge_dev_init(void);
110:	static int fpga_bridge_dev_match(struct device *, const void *);
406:	static void fpga_bridge_dev_release(struct device *);
284:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
292:	static ssize_t state_show(struct device *, struct device_attribute *, char *);

File drivers/fpga/fpga-mgr.c:
949:	struct fpga_manager *devm_fpga_mgr_register(struct device *, const char *, const struct fpga_manager_ops *, void *);
913:	struct fpga_manager *devm_fpga_mgr_register_full(struct device *, const struct fpga_manager_info *);
109:	struct fpga_image_info *fpga_image_info_alloc(struct device *);
131:	void fpga_image_info_free(struct fpga_image_info *);
694:	struct fpga_manager *fpga_mgr_get(struct device *);
572:	int fpga_mgr_load(struct fpga_manager *, struct fpga_image_info *);
747:	int fpga_mgr_lock(struct fpga_manager *);
728:	void fpga_mgr_put(struct fpga_manager *);
862:	struct fpga_manager *fpga_mgr_register(struct device *, const char *, const struct fpga_manager_ops *, void *);
779:	struct fpga_manager *fpga_mgr_register_full(struct device *, const struct fpga_manager_info *);
762:	void fpga_mgr_unlock(struct fpga_manager *);
881:	void fpga_mgr_unregister(struct fpga_manager *);
712:	struct fpga_manager *of_fpga_mgr_get(struct device_node *);
895:	static void devm_fpga_mgr_unregister(struct device *, void *);
464:	static int fpga_mgr_buf_load(struct fpga_manager *, struct fpga_image_info *, const char *, size_t);
361:	static int fpga_mgr_buf_load_sg(struct fpga_manager *, struct fpga_image_info *, struct sg_table *);
984:	static void fpga_mgr_class_exit(void);
970:	static int fpga_mgr_class_init(void);
683:	static int fpga_mgr_dev_match(struct device *, const void *);
962:	static void fpga_mgr_dev_release(struct device *);
616:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
624:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
632:	static ssize_t status_show(struct device *, struct device_attribute *, char *);

File drivers/fpga/fpga-region.c:
22:	struct fpga_region *fpga_region_class_find(struct device *, const void *, int (*)(struct device *, const void *));
96:	int fpga_region_program_fpga(struct fpga_region *);
258:	struct fpga_region *fpga_region_register(struct device *, struct fpga_manager *, int (*)(struct fpga_region *));
190:	struct fpga_region *fpga_region_register_full(struct device *, const struct fpga_region_info *);
276:	void fpga_region_unregister(struct fpga_region *);
161:	static ssize_t compat_id_show(struct device *, struct device_attribute *, char *);
282:	static void fpga_region_dev_release(struct device *);
306:	static void fpga_region_exit(void);
294:	static int fpga_region_init(void);

File drivers/fpga/of-fpga-region.c:
471:	static void of_fpga_region_exit(void);
86:	static int of_fpga_region_get_bridges(struct fpga_region *);
452:	static int of_fpga_region_init(void);
395:	static int of_fpga_region_probe(struct platform_device *);
426:	static int of_fpga_region_remove(struct platform_device *);

File drivers/gpio/gpio-altera.c:
135:	static int altera_gpio_direction_input(struct gpio_chip *, unsigned int);
155:	static int altera_gpio_direction_output(struct gpio_chip *, unsigned int, int);
345:	static void altera_gpio_exit(void);
106:	static int altera_gpio_get(struct gpio_chip *, unsigned int);
339:	static int altera_gpio_init(void);
184:	static void altera_gpio_irq_edge_handler(struct irq_desc *);
211:	static void altera_gpio_irq_leveL_high_handler(struct irq_desc *);
55:	static void altera_gpio_irq_mask(struct irq_data *);
77:	static int altera_gpio_irq_set_type(struct irq_data *, unsigned int);
99:	static unsigned int altera_gpio_irq_startup(struct irq_data *);
37:	static void altera_gpio_irq_unmask(struct irq_data *);
236:	static int altera_gpio_probe(struct platform_device *);
315:	static int altera_gpio_remove(struct platform_device *);
115:	static void altera_gpio_set(struct gpio_chip *, unsigned int, int);

File drivers/gpio/gpio-bd9571mwv.c:
39:	static int bd9571mwv_gpio_direction_input(struct gpio_chip *, unsigned int);
49:	static int bd9571mwv_gpio_direction_output(struct gpio_chip *, unsigned int, int);
126:	static void bd9571mwv_gpio_driver_exit(void);
126:	static int bd9571mwv_gpio_driver_init(void);
63:	static int bd9571mwv_gpio_get(struct gpio_chip *, unsigned int);
24:	static int bd9571mwv_gpio_get_direction(struct gpio_chip *, unsigned int);
97:	static int bd9571mwv_gpio_probe(struct platform_device *);
75:	static void bd9571mwv_gpio_set(struct gpio_chip *, unsigned int, int);

File drivers/gpio/gpio-davinci.c:
114:	static int davinci_direction_in(struct gpio_chip *, unsigned int);
120:	static int davinci_direction_out(struct gpio_chip *, unsigned int, int);
725:	static int davinci_gpio_drv_reg(void);
731:	static void davinci_gpio_exit(void);
132:	static int davinci_gpio_get(struct gpio_chip *, unsigned int);
452:	static struct irq_chip *davinci_gpio_get_irq_chip(unsigned int);
431:	static int davinci_gpio_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
193:	static int davinci_gpio_probe(struct platform_device *);
147:	static void davinci_gpio_set(struct gpio_chip *, unsigned int, int);
290:	static void gpio_irq_disable(struct irq_data *);
299:	static void gpio_irq_enable(struct irq_data *);
331:	static void gpio_irq_handler(struct irq_desc *);
315:	static int gpio_irq_type(struct irq_data *, unsigned int);
402:	static int gpio_irq_type_unbanked(struct irq_data *, unsigned int);
378:	static int gpio_to_irq_banked(struct gpio_chip *, unsigned int);
388:	static int gpio_to_irq_unbanked(struct gpio_chip *, unsigned int);
461:	static struct irq_chip *keystone_gpio_get_irq_chip(unsigned int);

File drivers/gpio/gpio-dwapb.c:
624:	static void dwapb_assert_reset(void *);
649:	static void dwapb_disable_clks(void *);
843:	static void dwapb_gpio_driver_exit(void);
843:	static int dwapb_gpio_driver_init(void);
693:	static int dwapb_gpio_probe(struct platform_device *);
411:	static int dwapb_gpio_set_config(struct gpio_chip *, unsigned int, unsigned long);
238:	static void dwapb_irq_ack(struct irq_data *);
296:	static void dwapb_irq_disable(struct irq_data *);
282:	static void dwapb_irq_enable(struct irq_data *);
223:	static void dwapb_irq_handler(struct irq_desc *);
250:	static void dwapb_irq_mask(struct irq_data *);
310:	static int dwapb_irq_set_type(struct irq_data *, u32);
266:	static void dwapb_irq_unmask(struct irq_data *);

File drivers/gpio/gpio-max732x.c:
723:	static void max732x_exit(void);
252:	static int max732x_gpio_direction_input(struct gpio_chip *, unsigned int);
273:	static int max732x_gpio_direction_output(struct gpio_chip *, unsigned int, int);
194:	static int max732x_gpio_get_value(struct gpio_chip *, unsigned int);
240:	static void max732x_gpio_set_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
232:	static void max732x_gpio_set_value(struct gpio_chip *, unsigned int, int);
714:	static int max732x_init(void);
611:	static int max732x_probe(struct i2c_client *);

File drivers/gpio/gpio-max77620.c:
98:	static void max77620_gpio_bus_lock(struct irq_data *);
106:	static void max77620_gpio_bus_sync_unlock(struct irq_data *);
135:	static int max77620_gpio_dir_input(struct gpio_chip *, unsigned int);
167:	static int max77620_gpio_dir_output(struct gpio_chip *, unsigned int, int);
366:	static void max77620_gpio_driver_exit(void);
366:	static int max77620_gpio_driver_init(void);
149:	static int max77620_gpio_get(struct gpio_chip *, unsigned int);
266:	static int max77620_gpio_irq_init_hw(struct gpio_chip *);
51:	static void max77620_gpio_irq_mask(struct irq_data *);
60:	static void max77620_gpio_irq_unmask(struct irq_data *);
26:	static irqreturn_t max77620_gpio_irqhandler(int, void *);
290:	static int max77620_gpio_probe(struct platform_device *);
226:	static void max77620_gpio_set(struct gpio_chip *, unsigned int, int);
242:	static int max77620_gpio_set_config(struct gpio_chip *, unsigned int, unsigned long);
69:	static int max77620_gpio_set_irq_type(struct irq_data *, unsigned int);

File drivers/gpio/gpio-mb86s7x.c:
75:	static int mb86s70_gpio_direction_input(struct gpio_chip *, unsigned int);
92:	static int mb86s70_gpio_direction_output(struct gpio_chip *, unsigned int, int);
242:	static void mb86s70_gpio_driver_exit(void);
242:	static int mb86s70_gpio_driver_init(void);
60:	static void mb86s70_gpio_free(struct gpio_chip *, unsigned int);
117:	static int mb86s70_gpio_get(struct gpio_chip *, unsigned int);
158:	static int mb86s70_gpio_probe(struct platform_device *);
208:	static int mb86s70_gpio_remove(struct platform_device *);
43:	static int mb86s70_gpio_request(struct gpio_chip *, unsigned int);
124:	static void mb86s70_gpio_set(struct gpio_chip *, unsigned int, int);
142:	static int mb86s70_gpio_to_irq(struct gpio_chip *, unsigned int);

File drivers/gpio/gpio-mmio.c:
599:	int bgpio_init(struct gpio_chip *, struct device *, unsigned long, void *, void *, void *, void *, void *, unsigned long);
346:	static int bgpio_dir_in(struct gpio_chip *, unsigned int);
402:	static int bgpio_dir_out_dir_first(struct gpio_chip *, unsigned int, int);
332:	static int bgpio_dir_out_err(struct gpio_chip *, unsigned int, int);
410:	static int bgpio_dir_out_val_first(struct gpio_chip *, unsigned int, int);
816:	static void bgpio_driver_exit(void);
816:	static int bgpio_driver_init(void);
167:	static int bgpio_get(struct gpio_chip *, unsigned int);
364:	static int bgpio_get_dir(struct gpio_chip *, unsigned int);
175:	static int bgpio_get_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
187:	static int bgpio_get_multiple_be(struct gpio_chip *, unsigned long *, unsigned long *);
132:	static int bgpio_get_set(struct gpio_chip *, unsigned int);
147:	static int bgpio_get_set_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
666:	static void *bgpio_map(struct platform_device *, const char *, resource_size_t);
724:	static int bgpio_pdev_probe(struct platform_device *);
78:	static unsigned long bgpio_read16(void *);
110:	static unsigned long bgpio_read16be(void *);
88:	static unsigned long bgpio_read32(void *);
120:	static unsigned long bgpio_read32be(void *);
99:	static unsigned long bgpio_read64(void *);
68:	static unsigned long bgpio_read8(void *);
564:	static int bgpio_request(struct gpio_chip *, unsigned int);
218:	static void bgpio_set(struct gpio_chip *, unsigned int, int);
301:	static void bgpio_set_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
307:	static void bgpio_set_multiple_set(struct gpio_chip *, unsigned long *, unsigned long *);
281:	static void bgpio_set_multiple_single_reg(struct gpio_chip *, unsigned long *, unsigned long *, void *);
313:	static void bgpio_set_multiple_with_clear(struct gpio_chip *, unsigned long *, unsigned long *);
214:	static void bgpio_set_none(struct gpio_chip *, unsigned int, int);
246:	static void bgpio_set_set(struct gpio_chip *, unsigned int, int);
235:	static void bgpio_set_with_clear(struct gpio_chip *, unsigned int, int);
327:	static int bgpio_simple_dir_in(struct gpio_chip *, unsigned int);
338:	static int bgpio_simple_dir_out(struct gpio_chip *, unsigned int, int);
73:	static void bgpio_write16(void *, unsigned long);
105:	static void bgpio_write16be(void *, unsigned long);
83:	static void bgpio_write32(void *, unsigned long);
115:	static void bgpio_write32be(void *, unsigned long);
94:	static void bgpio_write64(void *, unsigned long);
63:	static void bgpio_write8(void *, unsigned long);

File drivers/gpio/gpio-pca953x.c:
1033:	static int device_pca957x_init(struct pca953x_chip *, u32);
1004:	static int device_pca95xx_init(struct pca953x_chip *, u32);
274:	static bool pca953x_check_register(struct pca953x_chip *, unsigned int, u32);
1396:	static void pca953x_exit(void);
521:	static int pca953x_gpio_direction_input(struct gpio_chip *, unsigned int);
534:	static int pca953x_gpio_direction_output(struct gpio_chip *, unsigned int, int);
584:	static int pca953x_gpio_get_direction(struct gpio_chip *, unsigned int);
604:	static int pca953x_gpio_get_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
556:	static int pca953x_gpio_get_value(struct gpio_chip *, unsigned int);
681:	static int pca953x_gpio_set_config(struct gpio_chip *, unsigned int, unsigned long);
621:	static void pca953x_gpio_set_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
573:	static void pca953x_gpio_set_value(struct gpio_chip *, unsigned int, int);
1387:	static int pca953x_init(void);
755:	static void pca953x_irq_bus_lock(struct irq_data *);
763:	static void pca953x_irq_bus_sync_unlock(struct irq_data *);
898:	static irqreturn_t pca953x_irq_handler(int, void *);
722:	static void pca953x_irq_mask(struct irq_data *);
823:	static void pca953x_irq_print_chip(struct irq_data *, struct seq_file *);
795:	static int pca953x_irq_set_type(struct irq_data *, unsigned int);
742:	static int pca953x_irq_set_wake(struct irq_data *, unsigned int);
931:	static int pca953x_irq_setup(struct pca953x_chip *, int);
813:	static void pca953x_irq_shutdown(struct irq_data *);
732:	static void pca953x_irq_unmask(struct irq_data *);
1056:	static int pca953x_probe(struct i2c_client *);
348:	static bool pca953x_readable_register(struct device *, unsigned int);
439:	static u8 pca953x_recalc_addr(struct pca953x_chip *, int, int);
1206:	static void pca953x_remove(struct i2c_client *);
391:	static bool pca953x_volatile_register(struct device *, unsigned int);
371:	static bool pca953x_writeable_register(struct device *, unsigned int);
306:	static bool pcal6534_check_register(struct pca953x_chip *, unsigned int, u32);
453:	static u8 pcal6534_recalc_addr(struct pca953x_chip *, int, int);

File drivers/gpio/gpio-pl061.c:
73:	static int pl061_direction_input(struct gpio_chip *, unsigned int);
88:	static int pl061_direction_output(struct gpio_chip *, unsigned int, int);
63:	static int pl061_get_direction(struct gpio_chip *, unsigned int);
111:	static int pl061_get_value(struct gpio_chip *, unsigned int);
439:	static void pl061_gpio_driver_exit(void);
439:	static int pl061_gpio_driver_init(void);
271:	static void pl061_irq_ack(struct irq_data *);
213:	static void pl061_irq_handler(struct irq_desc *);
233:	static void pl061_irq_mask(struct irq_data *);
290:	static void pl061_irq_print_chip(struct irq_data *, struct seq_file *);
282:	static int pl061_irq_set_wake(struct irq_data *, unsigned int);
125:	static int pl061_irq_type(struct irq_data *, unsigned int);
248:	static void pl061_irq_unmask(struct irq_data *);
308:	static int pl061_probe(struct amba_device *, const struct amba_id *);
118:	static void pl061_set_value(struct gpio_chip *, unsigned int, int);

File drivers/gpio/gpio-wcd934x.c:
36:	static int wcd_gpio_direction_input(struct gpio_chip *, unsigned int);
44:	static int wcd_gpio_direction_output(struct gpio_chip *, unsigned int, int);
122:	static void wcd_gpio_driver_exit(void);
122:	static int wcd_gpio_driver_init(void);
57:	static int wcd_gpio_get(struct gpio_chip *, unsigned int);
20:	static int wcd_gpio_get_direction(struct gpio_chip *, unsigned int);
75:	static int wcd_gpio_probe(struct platform_device *);
67:	static void wcd_gpio_set(struct gpio_chip *, unsigned int, int);

File drivers/gpio/gpio-xgene.c:
89:	static int xgene_gpio_dir_in(struct gpio_chip *, unsigned int);
109:	static int xgene_gpio_dir_out(struct gpio_chip *, unsigned int, int);
209:	static int xgene_gpio_driver_init(void);
37:	static int xgene_gpio_get(struct gpio_chip *, unsigned int);
75:	static int xgene_gpio_get_direction(struct gpio_chip *, unsigned int);
159:	static int xgene_gpio_probe(struct platform_device *);
65:	static void xgene_gpio_set(struct gpio_chip *, unsigned int, int);

File drivers/gpio/gpiolib-cdev.c:
2738:	int gpiolib_cdev_register(struct gpio_device *, dev_t);
2756:	void gpiolib_cdev_unregister(struct gpio_device *);
853:	static irqreturn_t debounce_irq_handler(int, void *);
863:	static void debounce_work_func(struct work_struct *);
1024:	static int edge_detector_setup(struct line *, struct gpio_v2_line_config *, unsigned int, u64);
816:	static irqreturn_t edge_irq_handler(int, void *);
770:	static irqreturn_t edge_irq_thread(int, void *);
2649:	static int gpio_chrdev_open(struct inode *, struct file *);
2711:	static int gpio_chrdev_release(struct inode *, struct file *);
2236:	static void gpio_desc_to_lineinfo(struct gpio_desc *, struct gpio_v2_line_info *);
2452:	static long gpio_ioctl(struct file *, unsigned int, unsigned long);
1219:	static void gpio_v2_line_config_flags_to_desc_flags(u64, unsigned long *);
1119:	static int gpio_v2_line_config_output_value(struct gpio_v2_line_config *, unsigned int);
1192:	static int gpio_v2_line_config_validate(struct gpio_v2_line_config *, unsigned int);
1912:	static void lineevent_free(struct lineevent_state *);
1961:	static long lineevent_ioctl(struct file *, unsigned int, unsigned long);
2038:	static irqreturn_t lineevent_irq_handler(int, void *);
1990:	static irqreturn_t lineevent_irq_thread(int, void *);
1821:	static __poll_t lineevent_poll(struct file *, struct poll_table_struct *);
1903:	static ssize_t lineevent_read(struct file *, char *, size_t, loff_t *);
1923:	static int lineevent_release(struct inode *, struct file *);
181:	static void linehandle_flags_to_desc_flags(u32, unsigned long *);
299:	static long linehandle_ioctl(struct file *, unsigned int, unsigned long);
328:	static int linehandle_release(struct inode *, struct file *);
2503:	static int lineinfo_changed_notify(struct notifier_block *, unsigned long, void *);
2398:	static int lineinfo_get(struct gpio_chardev_data *, void *, bool);
2362:	static int lineinfo_get_v1(struct gpio_chardev_data *, void *, bool);
2546:	static __poll_t lineinfo_watch_poll(struct file *, struct poll_table_struct *);
2634:	static ssize_t lineinfo_watch_read(struct file *, char *, size_t, loff_t *);
1567:	static void linereq_free(struct linereq *);
1460:	static long linereq_ioctl(struct file *, unsigned int, unsigned long);
1495:	static __poll_t linereq_poll(struct file *, struct poll_table_struct *);
614:	static void linereq_put_event(struct linereq *, struct gpio_v2_line_event *);
1558:	static ssize_t linereq_read(struct file *, char *, size_t, loff_t *);
1583:	static int linereq_release(struct inode *, struct file *);
1592:	static void linereq_show_fdinfo(struct seq_file *, struct file *);

File drivers/gpio/gpiolib-devres.c:
202:	struct gpio_desc *devm_fwnode_gpiod_get_index(struct device *, struct fwnode_handle *, const char *, int, enum gpiod_flags, const char *);
396:	int devm_gpio_request(struct device *, unsigned int, const char *);
425:	int devm_gpio_request_one(struct device *, unsigned int, unsigned long, const char *);
472:	int devm_gpiochip_add_data_with_key(struct device *, struct gpio_chip *, void *, struct lock_class_key *, struct lock_class_key *);
56:	struct gpio_desc *devm_gpiod_get(struct device *, const char *, enum gpiod_flags);
266:	struct gpio_descs *devm_gpiod_get_array(struct device *, const char *, enum gpiod_flags);
303:	struct gpio_descs *devm_gpiod_get_array_optional(struct device *, const char *, enum gpiod_flags);
147:	struct gpio_desc *devm_gpiod_get_from_of_node(struct device *, const struct device_node *, const char *, int, enum gpiod_flags, const char *);
93:	struct gpio_desc *devm_gpiod_get_index(struct device *, const char *, unsigned int, enum gpiod_flags);
241:	struct gpio_desc *devm_gpiod_get_index_optional(struct device *, const char *, unsigned int, enum gpiod_flags);
74:	struct gpio_desc *devm_gpiod_get_optional(struct device *, const char *, enum gpiod_flags);
325:	void devm_gpiod_put(struct device *, struct gpio_desc *);
371:	void devm_gpiod_put_array(struct device *, struct gpio_descs *);
342:	void devm_gpiod_unhinge(struct device *, struct gpio_desc *);
448:	static void devm_gpio_chip_release(void *);
378:	static void devm_gpio_release(struct device *, void *);
25:	static int devm_gpiod_match(struct device *, void *, void *);
39:	static int devm_gpiod_match_array(struct device *, void *, void *);
18:	static void devm_gpiod_release(struct device *, void *);
32:	static void devm_gpiod_release_array(struct device *, void *);

File drivers/gpio/gpiolib-legacy.c:
9:	void gpio_free(unsigned int);
108:	void gpio_free_array(const struct gpio *, size_t);
68:	int gpio_request(unsigned int, const char *);
85:	int gpio_request_array(const struct gpio *, size_t);
21:	int gpio_request_one(unsigned int, unsigned long, const char *);

File drivers/gpio/gpiolib-of.c:
406:	struct gpio_desc *gpiod_get_from_of_node(const struct device_node *, const char *, int, enum gpiod_flags, const char *);
608:	struct gpio_desc *of_find_gpio(struct device_node *, const char *, unsigned int, unsigned long *);
348:	int of_get_named_gpio_flags(const struct device_node *, const char *, int, enum of_gpio_flags *);
1096:	void of_gpio_dev_init(struct gpio_chip *, struct gpio_device *);
59:	int of_gpio_get_count(struct device *, const char *);
1061:	int of_gpiochip_add(struct gpio_chip *);
1091:	void of_gpiochip_remove(struct gpio_chip *);
917:	int of_mm_gpiochip_add_data(struct device_node *, struct of_mm_gpio_chip *, void *);
960:	void of_mm_gpiochip_remove(struct of_mm_gpio_chip *);
438:	static struct gpio_desc *of_find_gpio_rename(struct device_node *, const char *, unsigned int, enum of_gpio_flags *);
309:	static struct gpio_desc *of_get_named_gpiod_flags(const struct device_node *, const char *, int, enum of_gpio_flags *);
870:	static int of_gpio_simple_xlate(struct gpio_chip *, const struct of_phandle_args *, u32 *);
84:	static int of_gpiochip_match_node_and_xlate(struct gpio_chip *, void *);

File drivers/gpio/gpiolib-swnode.c:
51:	struct gpio_desc *swnode_find_gpio(struct fwnode_handle *, const char *, unsigned int, unsigned long *);
103:	int swnode_gpio_count(const struct fwnode_handle *, const char *);
33:	static int swnode_gpiochip_match_name(struct gpio_chip *, void *);

File drivers/gpio/gpiolib.c:
164:	int desc_to_gpio(const struct gpio_desc *);
3987:	struct gpio_desc *fwnode_gpiod_get_index(struct fwnode_handle *, const char *, int, enum gpiod_flags, const char *);
2330:	int gpio_set_debounce_timeout(struct gpio_desc *, unsigned int);
108:	struct gpio_desc *gpio_to_desc(unsigned int);
650:	int gpiochip_add_data_with_key(struct gpio_chip *, void *, struct lock_class_key *, struct lock_class_key *);
1904:	int gpiochip_add_pin_range(struct gpio_chip *, const char *, unsigned int, unsigned int, unsigned int);
1846:	int gpiochip_add_pingroup_range(struct gpio_chip *, struct pinctrl_dev *, unsigned int, const char *);
3403:	void gpiochip_disable_irq(struct gpio_chip *, unsigned int);
3413:	void gpiochip_enable_irq(struct gpio_chip *, unsigned int);
990:	struct gpio_chip *gpiochip_find(void *, int (*)(struct gpio_chip *, void *));
2227:	void gpiochip_free_own_desc(struct gpio_desc *);
1825:	int gpiochip_generic_config(struct gpio_chip *, unsigned int, unsigned long);
1808:	void gpiochip_generic_free(struct gpio_chip *, unsigned int);
1792:	int gpiochip_generic_request(struct gpio_chip *, unsigned int);
920:	void *gpiochip_get_data(struct gpio_chip *);
142:	struct gpio_desc *gpiochip_get_desc(struct gpio_chip *, unsigned int);
1440:	int gpiochip_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
1458:	void gpiochip_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
1367:	int gpiochip_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1508:	void gpiochip_irq_relres(struct irq_data *);
1500:	int gpiochip_irq_reqres(struct irq_data *);
1407:	void gpiochip_irq_unmap(struct irq_domain *, unsigned int);
1750:	int gpiochip_irqchip_add_domain(struct gpio_chip *, struct irq_domain *);
1061:	bool gpiochip_irqchip_irq_valid(const struct gpio_chip *, unsigned int);
2156:	const char *gpiochip_is_requested(struct gpio_chip *, unsigned int);
3430:	bool gpiochip_line_is_irq(struct gpio_chip *, unsigned int);
3463:	bool gpiochip_line_is_open_drain(struct gpio_chip *, unsigned int);
3472:	bool gpiochip_line_is_open_source(struct gpio_chip *, unsigned int);
3481:	bool gpiochip_line_is_persistent(struct gpio_chip *, unsigned int);
540:	bool gpiochip_line_is_valid(const struct gpio_chip *, unsigned int);
3332:	int gpiochip_lock_as_irq(struct gpio_chip *, unsigned int);
1325:	int gpiochip_populate_parent_fwspec_fourcell(struct gpio_chip *, union gpio_irq_fwspec *, unsigned int, unsigned int);
1309:	int gpiochip_populate_parent_fwspec_twocell(struct gpio_chip *, union gpio_irq_fwspec *, unsigned int, unsigned int);
3456:	void gpiochip_relres_irq(struct gpio_chip *, unsigned int);
932:	void gpiochip_remove(struct gpio_chip *);
1948:	void gpiochip_remove_pin_ranges(struct gpio_chip *);
3439:	int gpiochip_reqres_irq(struct gpio_chip *, unsigned int);
2191:	struct gpio_desc *gpiochip_request_own_desc(struct gpio_chip *, unsigned int, const char *, enum gpio_lookup_flags, enum gpiod_flags);
3386:	void gpiochip_unlock_as_irq(struct gpio_chip *, unsigned int);
3722:	void gpiod_add_hogs(struct gpiod_hog *);
3694:	void gpiod_add_lookup_table(struct gpiod_lookup_table *);
3652:	void gpiod_add_lookup_tables(struct gpiod_lookup_table **, size_t);
3251:	int gpiod_cansleep(const struct gpio_desc *);
4070:	int gpiod_configure_flags(struct gpio_desc *, const char *, unsigned long, enum gpiod_flags);
4003:	int gpiod_count(struct device *, const char *);
2346:	int gpiod_direction_input(struct gpio_desc *);
2465:	int gpiod_direction_output(struct gpio_desc *, int);
2446:	int gpiod_direction_output_raw(struct gpio_desc *, int);
2563:	int gpiod_disable_hw_timestamp_ns(struct gpio_desc *, unsigned long);
2534:	int gpiod_enable_hw_timestamp_ns(struct gpio_desc *, unsigned long);
2133:	void gpiod_free(struct gpio_desc *);
4032:	struct gpio_desc *gpiod_get(struct device *, const char *, enum gpiod_flags);
4247:	struct gpio_descs *gpiod_get_array(struct device *, const char *, enum gpiod_flags);
4371:	struct gpio_descs *gpiod_get_array_optional(struct device *, const char *, enum gpiod_flags);
2929:	int gpiod_get_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3572:	int gpiod_get_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2728:	int gpiod_get_array_value_complex(bool, bool, unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
214:	int gpiod_get_direction(struct gpio_desc *);
4144:	struct gpio_desc *gpiod_get_index(struct device *, const char *, unsigned int, enum gpiod_flags);
4169:	struct gpio_desc *gpiod_get_index_optional(struct device *, const char *, unsigned int, enum gpiod_flags);
4049:	struct gpio_desc *gpiod_get_optional(struct device *, const char *, enum gpiod_flags);
2903:	int gpiod_get_raw_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3546:	int gpiod_get_raw_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2851:	int gpiod_get_raw_value(const struct gpio_desc *);
3499:	int gpiod_get_raw_value_cansleep(const struct gpio_desc *);
2870:	int gpiod_get_value(const struct gpio_desc *);
3516:	int gpiod_get_value_cansleep(const struct gpio_desc *);
4192:	int gpiod_hog(struct gpio_desc *, const char *, unsigned long, enum gpiod_flags);
2652:	int gpiod_is_active_low(const struct gpio_desc *);
4391:	void gpiod_put(struct gpio_desc *);
4402:	void gpiod_put_array(struct gpio_descs *);
3745:	void gpiod_remove_hogs(struct gpiod_hog *);
3704:	void gpiod_remove_lookup_table(struct gpiod_lookup_table *);
2063:	int gpiod_request(struct gpio_desc *, const char *);
3233:	int gpiod_set_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3676:	int gpiod_set_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3025:	int gpiod_set_array_value_complex(bool, bool, unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
2593:	int gpiod_set_config(struct gpio_desc *, unsigned long);
3263:	int gpiod_set_consumer_name(struct gpio_desc *, const char *);
2613:	int gpiod_set_debounce(struct gpio_desc *, unsigned int);
3208:	int gpiod_set_raw_array_value(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3634:	int gpiod_set_raw_array_value_cansleep(unsigned int, struct gpio_desc **, struct gpio_array *, unsigned long *);
3145:	void gpiod_set_raw_value(struct gpio_desc *, int);
3596:	void gpiod_set_raw_value_cansleep(struct gpio_desc *, int);
2630:	int gpiod_set_transitory(struct gpio_desc *, bool);
3186:	void gpiod_set_value(struct gpio_desc *, int);
3614:	void gpiod_set_value_cansleep(struct gpio_desc *, int);
175:	struct gpio_chip *gpiod_to_chip(const struct gpio_desc *);
3286:	int gpiod_to_irq(const struct gpio_desc *);
2663:	void gpiod_toggle_active_low(struct gpio_desc *);
4414:	static int gpio_bus_match(struct device *, struct device_driver *);
2709:	static int gpio_chip_get_multiple(struct gpio_chip *, unsigned long *, unsigned long *);
4427:	static int gpio_stub_drv_probe(struct device *);
1601:	static int gpiochip_add_irqchip(struct gpio_chip *, struct lock_class_key *, struct lock_class_key *);
462:	static int gpiochip_alloc_valid_mask(struct gpio_chip *);
1246:	static unsigned int gpiochip_child_offset_to_irq_noop(struct gpio_chip *, unsigned int);
4227:	static void gpiochip_free_hogs(struct gpio_chip *);
1174:	static int gpiochip_hierarchy_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1151:	static int gpiochip_hierarchy_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
510:	static int gpiochip_init_valid_mask(struct gpio_chip *);
1542:	static void gpiochip_irq_disable(struct irq_data *);
1534:	static void gpiochip_irq_enable(struct irq_data *);
1516:	static void gpiochip_irq_mask(struct irq_data *);
1525:	static void gpiochip_irq_unmask(struct irq_data *);
1039:	static int gpiochip_irqchip_init_valid_mask(struct gpio_chip *);
1695:	static void gpiochip_irqchip_remove(struct gpio_chip *);
602:	static void gpiochip_machine_hog(struct gpio_chip *, struct gpiod_hog *);
335:	static int gpiochip_set_desc_names(struct gpio_chip *);
1467:	static int gpiochip_to_irq(struct gpio_chip *, unsigned int);
2392:	static int gpiod_direction_output_raw_commit(struct gpio_desc *, int);
3900:	static struct gpio_desc *gpiod_find_and_request(struct device *, struct fwnode_handle *, const char *, unsigned int, enum gpiod_flags, const char *, bool);
2085:	static bool gpiod_free_commit(struct gpio_desc *);
1968:	static int gpiod_request_commit(struct gpio_desc *, const char *);
3163:	static void gpiod_set_value_nocheck(struct gpio_desc *, int);
550:	static void gpiodevice_release(struct device *);
4604:	static int gpiolib_debugfs_init(void);
4450:	static int gpiolib_dev_init(void);
4602:	static int gpiolib_open(struct inode *, struct file *);
4539:	static void *gpiolib_seq_next(struct seq_file *, void *, loff_t *);
4562:	static int gpiolib_seq_show(struct seq_file *, void *);
4520:	static void *gpiolib_seq_start(struct seq_file *, loff_t *);
4558:	static void gpiolib_seq_stop(struct seq_file *, void *);
623:	static void machine_gpiochip_add(struct gpio_chip *);

File drivers/gpu/drm/arm/display/komeda/d71/d71_component.c:
1437:	void d71_dump(struct komeda_dev *, struct seq_file *);
1278:	int d71_probe_block(struct d71_dev *, struct block_header *, u32 *);
624:	static void d71_compiz_dump(struct komeda_component *, struct seq_file *);
600:	static void d71_compiz_update(struct komeda_component *, struct komeda_component_state *);
555:	static void d71_component_disable(struct komeda_component *);
869:	static int d71_downscaling_clk_check(struct komeda_pipeline *, struct drm_display_mode *, unsigned long, struct komeda_data_flow_cfg *);
1091:	static void d71_improc_dump(struct komeda_component *, struct seq_file *);
1044:	static void d71_improc_update(struct komeda_component *, struct komeda_component_state *);
209:	static void d71_layer_disable(struct komeda_component *);
286:	static void d71_layer_dump(struct komeda_component *, struct seq_file *);
214:	static void d71_layer_update(struct komeda_component *, struct komeda_component_state *);
185:	static void d71_layer_update_fb(struct komeda_component *, struct komeda_fb *, dma_addr_t *);
352:	static int d71_layer_validate(struct komeda_component *, struct komeda_component_state *);
988:	static void d71_merger_dump(struct komeda_component *, struct seq_file *);
972:	static void d71_merger_update(struct komeda_component *, struct komeda_component_state *);
1424:	static void d71_pipeline_dump(struct komeda_pipeline *, struct seq_file *);
793:	static void d71_scaler_dump(struct komeda_component *, struct seq_file *);
724:	static void d71_scaler_update(struct komeda_component *, struct komeda_component_state *);
922:	static void d71_splitter_dump(struct komeda_component *, struct seq_file *);
910:	static void d71_splitter_update(struct komeda_component *, struct komeda_component_state *);
1159:	static void d71_timing_ctrlr_disable(struct komeda_component *);
1208:	static void d71_timing_ctrlr_dump(struct komeda_component *, struct seq_file *);
1164:	static void d71_timing_ctrlr_update(struct komeda_component *, struct komeda_component_state *);
513:	static void d71_wb_layer_disable(struct komeda_component *);
484:	static void d71_wb_layer_dump(struct komeda_component *, struct seq_file *);
465:	static void d71_wb_layer_update(struct komeda_component *, struct komeda_component_state *);
88:	static void dump_block_header(struct seq_file *, void *);
13:	static void get_resources_id(u32, u32 *, u32 *);

File drivers/gpu/drm/arm/display/komeda/d71/d71_dev.c:
619:	const struct komeda_dev_funcs *d71_identify(u32 *, struct komeda_chip_info *);
321:	void d71_read_block_header(u32 *, struct block_header *);
284:	static int d71_change_opmode(struct komeda_dev *, int);
338:	static void d71_cleanup(struct komeda_dev *);
556:	static int d71_connect_iommu(struct komeda_dev *);
239:	static int d71_disable_irq(struct komeda_dev *);
583:	static int d71_disconnect_iommu(struct komeda_dev *);
219:	static int d71_enable_irq(struct komeda_dev *);
349:	static int d71_enum_resources(struct komeda_dev *);
298:	static void d71_flush(struct komeda_dev *, int, u32);
533:	static bool d71_format_mod_supported(const struct komeda_format_caps *, u32, u64, u32);
547:	static void d71_init_fmt_tbl(struct komeda_dev *);
179:	static irqreturn_t d71_irq_handler(struct komeda_dev *, struct komeda_events *);
258:	static void d71_on_off_vblank(struct komeda_dev *, int, bool);
162:	static u64 get_pipeline_event(struct d71_pipeline *, u32);

File drivers/gpu/drm/arm/display/komeda/komeda_color_mgmt.c:
121:	void drm_ctm_to_coeffs(struct drm_property_blob *, u32 *);
116:	void drm_lut_to_fgamma_coeffs(struct drm_property_blob *, u32 *);
46:	const s32 *komeda_select_yuv2rgb_coeffs(u32, u32);

File drivers/gpu/drm/arm/display/komeda/komeda_crtc.c:
289:	void komeda_crtc_flush_and_wait_for_flip_done(struct komeda_crtc *, struct completion *);
415:	unsigned long komeda_crtc_get_aclk(struct komeda_crtc_state *);
20:	void komeda_crtc_get_color_config(struct drm_crtc_state *, u32 *, u32 *);
198:	void komeda_crtc_handle_event(struct komeda_crtc *, struct komeda_events *);
633:	int komeda_kms_add_crtcs(struct komeda_kms_dev *, struct komeda_dev *);
562:	int komeda_kms_setup_crtcs(struct komeda_kms_dev *, struct komeda_dev *);
75:	static int komeda_crtc_atomic_check(struct drm_crtc *, struct drm_atomic_state *);
527:	static void komeda_crtc_atomic_destroy_state(struct drm_crtc *, struct drm_crtc_state *);
324:	static void komeda_crtc_atomic_disable(struct drm_crtc *, struct drm_atomic_state *);
509:	static struct drm_crtc_state *komeda_crtc_atomic_duplicate_state(struct drm_crtc *);
276:	static void komeda_crtc_atomic_enable(struct drm_crtc *, struct drm_atomic_state *);
386:	static void komeda_crtc_atomic_flush(struct drm_crtc *, struct drm_atomic_state *);
245:	static void komeda_crtc_do_flush(struct drm_crtc *, struct drm_crtc_state *);
459:	static bool komeda_crtc_mode_fixup(struct drm_crtc *, const struct drm_display_mode *, struct drm_display_mode *);
428:	static enum drm_mode_status komeda_crtc_mode_valid(struct drm_crtc *, const struct drm_display_mode *);
493:	static void komeda_crtc_reset(struct drm_crtc *);
543:	static void komeda_crtc_vblank_disable(struct drm_crtc *);
534:	static int komeda_crtc_vblank_enable(struct drm_crtc *);

File drivers/gpu/drm/arm/display/komeda/komeda_dev.c:
184:	struct komeda_dev *komeda_dev_create(struct device *);
281:	void komeda_dev_destroy(struct komeda_dev *);
322:	int komeda_dev_resume(struct komeda_dev *);
335:	int komeda_dev_suspend(struct komeda_dev *);
93:	static ssize_t aclk_hz_show(struct device *, struct device_attribute *, char *);
70:	static ssize_t config_id_show(struct device *, struct device_attribute *, char *);
61:	static ssize_t core_id_show(struct device *, struct device_attribute *, char *);
47:	static void komeda_debugfs_init(struct komeda_dev *);
137:	static int komeda_parse_dt(struct device *, struct komeda_dev *);
44:	static int komeda_register_open(struct inode *, struct file *);
24:	static int komeda_register_show(struct seq_file *, void *);

File drivers/gpu/drm/arm/display/komeda/komeda_drv.c:
23:	struct komeda_dev *dev_to_mdev(struct device *);
50:	static int komeda_bind(struct device *);
199:	static void komeda_platform_driver_exit(void);
199:	static int komeda_platform_driver_init(void);
112:	static int komeda_platform_probe(struct platform_device *);
133:	static int komeda_platform_remove(struct platform_device *);
30:	static void komeda_unbind(struct device *);

File drivers/gpu/drm/arm/display/komeda/komeda_event.c:
114:	void komeda_print_events(struct komeda_events *, struct drm_device *);
54:	static void evt_str(struct komeda_str *, u64);
21:	static int komeda_sprintf(struct komeda_str *, const char *, ...);

File drivers/gpu/drm/arm/display/komeda/komeda_format_caps.c:
95:	bool komeda_format_mod_supported(struct komeda_format_caps_table *, u32, u32, u64, u32);
38:	u32 komeda_get_afbc_format_bpp(const struct drm_format_info *, u64);
13:	const struct komeda_format_caps *komeda_get_format_caps(struct komeda_format_caps_table *, u32, u64);
115:	u32 *komeda_get_layer_fourcc_list(struct komeda_format_caps_table *, u32, u32 *);
149:	void komeda_put_fourcc_list(u32 *);

File drivers/gpu/drm/arm/display/komeda/komeda_framebuffer.c:
208:	int komeda_fb_check_src_coords(const struct komeda_fb *, u32, u32, u32, u32);
159:	struct drm_framebuffer *komeda_fb_create(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *);
239:	dma_addr_t komeda_fb_get_pixel_addr(struct komeda_fb *, int, int, int);
267:	bool komeda_fb_is_layer_supported(struct komeda_fb *, u32, u32);
28:	static int komeda_fb_create_handle(struct drm_framebuffer *, struct drm_file *, u32 *);
16:	static void komeda_fb_destroy(struct drm_framebuffer *);

File drivers/gpu/drm/arm/display/komeda/komeda_kms.c:
271:	struct komeda_kms_dev *komeda_kms_attach(struct komeda_dev *);
339:	void komeda_kms_detach(struct komeda_kms_dev *);
25:	static int komeda_gem_dma_dumb_create(struct drm_file *, struct drm_device *, struct drm_mode_create_dumb *);
214:	static int komeda_kms_check(struct drm_device *, struct drm_atomic_state *);
89:	static void komeda_kms_commit_tail(struct drm_atomic_state *);
37:	static irqreturn_t komeda_kms_irq_handler(int, void *);

File drivers/gpu/drm/arm/display/komeda/komeda_pipeline.c:
344:	int komeda_assemble_pipelines(struct komeda_dev *);
163:	struct komeda_component *komeda_component_add(struct komeda_pipeline *, size_t, u32, u32, const struct komeda_component_funcs *, u8, u32, u8, u32 *, const char *, ...);
230:	void komeda_component_destroy(struct komeda_dev *, struct komeda_component *);
16:	struct komeda_pipeline *komeda_pipeline_add(struct komeda_dev *, size_t, const struct komeda_pipeline_funcs *);
46:	void komeda_pipeline_destroy(struct komeda_dev *, struct komeda_pipeline *);
359:	void komeda_pipeline_dump_register(struct komeda_pipeline *, struct seq_file *);
126:	struct komeda_component *komeda_pipeline_get_component(struct komeda_pipeline *, int);
139:	struct komeda_component *komeda_pipeline_get_first_component(struct komeda_pipeline *, u32);
334:	struct komeda_pipeline *komeda_pipeline_get_slave(struct komeda_pipeline *);
69:	static struct komeda_component **komeda_pipeline_get_component_pos(struct komeda_pipeline *, int);

File drivers/gpu/drm/arm/display/komeda/komeda_pipeline_state.c:
1187:	int komeda_build_display_data_flow(struct komeda_crtc *, struct komeda_crtc_state *);
882:	int komeda_build_layer_data_flow(struct komeda_layer *, struct komeda_plane_state *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *);
1085:	int komeda_build_layer_split_data_flow(struct komeda_layer *, struct komeda_plane_state *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *);
1134:	int komeda_build_wb_data_flow(struct komeda_layer *, struct drm_connector_state *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *);
1154:	int komeda_build_wb_split_data_flow(struct komeda_layer *, struct drm_connector_state *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *);
839:	void komeda_complete_data_flow_cfg(struct komeda_layer *, struct komeda_data_flow_cfg *, struct drm_framebuffer *);
1284:	bool komeda_pipeline_disable(struct komeda_pipeline *, struct drm_atomic_state *);
37:	struct komeda_pipeline_state *komeda_pipeline_get_old_state(struct komeda_pipeline *, struct drm_atomic_state *);
1329:	void komeda_pipeline_update(struct komeda_pipeline *, struct drm_atomic_state *);
1251:	int komeda_release_unclaimed_resources(struct komeda_pipeline *, struct komeda_crtc_state *);
656:	void pipeline_composition_size(struct komeda_crtc_state *, u16 *, u16 *);
668:	static int komeda_compiz_set_input(struct komeda_compiz *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *);
151:	static struct komeda_component_state *komeda_component_get_state_and_set_user(struct komeda_component *, struct drm_atomic_state *, void *, struct drm_crtc *);
283:	static int komeda_layer_check_cfg(struct komeda_layer *, struct komeda_fb *, struct komeda_data_flow_cfg *);
611:	static int komeda_merger_validate(struct komeda_merger *, void *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *, struct komeda_data_flow_cfg *, struct komeda_data_flow_cfg *);
62:	static struct komeda_pipeline_state *komeda_pipeline_get_state_and_set_crtc(struct komeda_pipeline *, struct drm_atomic_state *, struct drm_crtc *);
504:	static int komeda_scaler_validate(void *, struct komeda_crtc_state *, struct komeda_data_flow_cfg *);
945:	static void komeda_split_data_flow(struct komeda_scaler *, struct komeda_data_flow_cfg *, struct komeda_data_flow_cfg *, struct komeda_data_flow_cfg *);
399:	static int komeda_wb_layer_validate(struct komeda_layer *, struct drm_connector_state *, struct komeda_data_flow_cfg *);

File drivers/gpu/drm/arm/display/komeda/komeda_plane.c:
319:	int komeda_kms_add_planes(struct komeda_kms_dev *, struct komeda_dev *);
71:	static int komeda_plane_atomic_check(struct drm_plane *, struct drm_atomic_state *);
168:	static void komeda_plane_atomic_destroy_state(struct drm_plane *, struct drm_plane_state *);
151:	static struct drm_plane_state *komeda_plane_atomic_duplicate_state(struct drm_plane *);
118:	static void komeda_plane_atomic_update(struct drm_plane *, struct drm_atomic_state *);
128:	static void komeda_plane_destroy(struct drm_plane *);
176:	static bool komeda_plane_format_mod_supported(struct drm_plane *, u32, u64);
135:	static void komeda_plane_reset(struct drm_plane *);

File drivers/gpu/drm/arm/display/komeda/komeda_private_obj.c:
366:	int komeda_kms_add_private_objs(struct komeda_kms_dev *, struct komeda_dev *);
425:	void komeda_kms_cleanup_private_objs(struct komeda_kms_dev *);
122:	static void komeda_compiz_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
107:	static struct drm_private_state *komeda_compiz_atomic_duplicate_state(struct drm_private_obj *);
252:	static void komeda_improc_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
237:	static struct drm_private_state *komeda_improc_atomic_duplicate_state(struct drm_private_obj *);
35:	static void komeda_layer_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
20:	static struct drm_private_state *komeda_layer_atomic_duplicate_state(struct drm_private_obj *);
208:	static void komeda_merger_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
194:	static struct drm_private_state *komeda_merger_atomic_duplicate_state(struct drm_private_obj *);
339:	static void komeda_pipeline_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
323:	static struct drm_private_state *komeda_pipeline_atomic_duplicate_state(struct drm_private_obj *);
79:	static void komeda_scaler_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
64:	static struct drm_private_state *komeda_scaler_atomic_duplicate_state(struct drm_private_obj *);
165:	static void komeda_splitter_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
150:	static struct drm_private_state *komeda_splitter_atomic_duplicate_state(struct drm_private_obj *);
295:	static void komeda_timing_ctrlr_atomic_destroy_state(struct drm_private_obj *, struct drm_private_state *);
280:	static struct drm_private_state *komeda_timing_ctrlr_atomic_duplicate_state(struct drm_private_obj *);

File drivers/gpu/drm/arm/display/komeda/komeda_wb_connector.c:
186:	int komeda_kms_add_wb_connectors(struct komeda_kms_dev *, struct komeda_dev *);
124:	static void komeda_wb_connector_destroy(struct drm_connector *);
112:	static enum drm_connector_status komeda_wb_connector_detect(struct drm_connector *, bool);
118:	static int komeda_wb_connector_fill_modes(struct drm_connector *, uint32_t, uint32_t);
84:	static int komeda_wb_connector_get_modes(struct drm_connector *);
90:	static enum drm_mode_status komeda_wb_connector_mode_valid(struct drm_connector *, struct drm_display_mode *);
37:	static int komeda_wb_encoder_atomic_check(struct drm_encoder *, struct drm_crtc_state *, struct drm_connector_state *);

File drivers/gpu/drm/arm/hdlcd_crtc.c:
319:	int hdlcd_setup_crtc(struct drm_device *);
206:	static void hdlcd_crtc_atomic_begin(struct drm_crtc *, struct drm_atomic_state *);
180:	static void hdlcd_crtc_atomic_disable(struct drm_crtc *, struct drm_atomic_state *);
169:	static void hdlcd_crtc_atomic_enable(struct drm_crtc *, struct drm_atomic_state *);
38:	static void hdlcd_crtc_cleanup(struct drm_crtc *);
57:	static void hdlcd_crtc_disable_vblank(struct drm_crtc *);
47:	static int hdlcd_crtc_enable_vblank(struct drm_crtc *);
190:	static enum drm_mode_status hdlcd_crtc_mode_valid(struct drm_crtc *, const struct drm_display_mode *);
230:	static int hdlcd_plane_atomic_check(struct drm_plane *, struct drm_atomic_state *);
261:	static void hdlcd_plane_atomic_update(struct drm_plane *, struct drm_atomic_state *);

File drivers/gpu/drm/arm/hdlcd_drv.c:
356:	static int compare_dev(struct device *, void *);
227:	static void hdlcd_debugfs_init(struct drm_minor *);
251:	static int hdlcd_drm_bind(struct device *);
331:	static void hdlcd_drm_unbind(struct device *);
41:	static irqreturn_t hdlcd_irq(int, void *);
71:	static int hdlcd_irq_install(struct hdlcd_drm_private *);
418:	static void hdlcd_platform_driver_exit(void);
418:	static int hdlcd_platform_driver_init(void);
361:	static int hdlcd_probe(struct platform_device *);
378:	static int hdlcd_remove(struct platform_device *);
209:	static int hdlcd_show_pxlclock(struct seq_file *, void *);
196:	static int hdlcd_show_underrun_count(struct seq_file *, void *);

File drivers/gpu/drm/arm/malidp_crtc.c:
526:	int malidp_crtc_init(struct drm_device *);
340:	static int malidp_crtc_atomic_check(struct drm_crtc *, struct drm_atomic_state *);
73:	static void malidp_crtc_atomic_disable(struct drm_crtc *, struct drm_atomic_state *);
49:	static void malidp_crtc_atomic_enable(struct drm_crtc *, struct drm_atomic_state *);
470:	static void malidp_crtc_destroy_state(struct drm_crtc *, struct drm_crtc_state *);
507:	static void malidp_crtc_disable_vblank(struct drm_crtc *);
446:	static struct drm_crtc_state *malidp_crtc_duplicate_state(struct drm_crtc *);
497:	static int malidp_crtc_enable_vblank(struct drm_crtc *);
25:	static enum drm_mode_status malidp_crtc_mode_valid(struct drm_crtc *, const struct drm_display_mode *);
483:	static void malidp_crtc_reset(struct drm_crtc *);

File drivers/gpu/drm/arm/malidp_drv.c:
478:	void malidp_error(struct malidp_drm *, struct malidp_error_stats *, u32, u64);
646:	static ssize_t core_id_show(struct device *, struct device_attribute *, char *);
231:	static void malidp_atomic_commit_tail(struct drm_atomic_state *);
700:	static int malidp_bind(struct device *);
912:	static int malidp_compare_dev(struct device *, void *);
548:	static void malidp_debugfs_init(struct drm_minor *);
519:	static int malidp_debugfs_open(struct inode *, struct file *);
524:	static ssize_t malidp_debugfs_write(struct file *, const char *, size_t, loff_t *);
456:	static int malidp_dumb_create(struct drm_file *, struct drm_device *, struct drm_mode_create_dumb *);
376:	static struct drm_framebuffer *malidp_fb_create(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *);
632:	static bool malidp_has_sufficient_address_space(const struct resource *, const struct of_device_id *);
393:	static int malidp_init(struct drm_device *);
422:	static int malidp_irq_init(struct platform_device *);
592:	static bool malidp_is_compatible_hw_id(struct malidp_hw_device *, const struct of_device_id *);
994:	static void malidp_platform_driver_exit(void);
994:	static int malidp_platform_driver_init(void);
919:	static int malidp_platform_probe(struct platform_device *);
939:	static int malidp_platform_remove(struct platform_device *);
684:	static int malidp_runtime_pm_resume(struct device *);
665:	static int malidp_runtime_pm_suspend(struct device *);
170:	static int malidp_set_and_wait_config_valid(struct drm_device *);
503:	static int malidp_show_stats(struct seq_file *, void *);
883:	static void malidp_unbind(struct device *);

File drivers/gpu/drm/arm/malidp_hw.c:
1278:	void malidp_de_irq_fini(struct malidp_hw_device *);
1236:	void malidp_de_irq_hw_init(struct malidp_hw_device *);
1253:	int malidp_de_irq_init(struct drm_device *, int);
393:	int malidp_format_get_bpp(u32);
1145:	bool malidp_hw_format_is_afbc_only(u32);
1116:	bool malidp_hw_format_is_linear_only(u32);
1091:	u8 malidp_hw_get_format_id(const struct malidp_hw_regmap *, u8, u32, bool);
1388:	void malidp_se_irq_fini(struct malidp_hw_device *);
1349:	void malidp_se_irq_hw_init(struct malidp_hw_device *);
1364:	int malidp_se_irq_init(struct drm_device *, int);
562:	static void malidp500_disable_memwrite(struct malidp_hw_device *);
512:	static int malidp500_enable_memwrite(struct malidp_hw_device *, dma_addr_t *, s32 *, int, u16, u16, u32, const s16 *);
284:	static void malidp500_enter_config_mode(struct malidp_hw_device *);
319:	static bool malidp500_in_config_mode(struct malidp_hw_device *);
303:	static void malidp500_leave_config_mode(struct malidp_hw_device *);
338:	static void malidp500_modeset(struct malidp_hw_device *, struct videomode *);
270:	static int malidp500_query_hw(struct malidp_hw_device *);
417:	static int malidp500_rotmem_required(struct malidp_hw_device *, u16, u16, u32, bool);
479:	static long malidp500_se_calc_mclk(struct malidp_hw_device *, struct malidp_se_config *, struct videomode *);
447:	static int malidp500_se_set_scaling_coeffs(struct malidp_hw_device *, struct malidp_se_config *, struct malidp_se_config *);
430:	static void malidp500_se_write_pp_coefftab(struct malidp_hw_device *, u32, u16, u8);
330:	static void malidp500_set_config_valid(struct malidp_hw_device *, u8);
899:	static void malidp550_disable_memwrite(struct malidp_hw_device *);
853:	static int malidp550_enable_memwrite(struct malidp_hw_device *, dma_addr_t *, s32 *, int, u16, u16, u32, const s16 *);
605:	static void malidp550_enter_config_mode(struct malidp_hw_device *);
640:	static bool malidp550_in_config_mode(struct malidp_hw_device *);
624:	static void malidp550_leave_config_mode(struct malidp_hw_device *);
659:	static void malidp550_modeset(struct malidp_hw_device *, struct videomode *);
572:	static int malidp550_query_hw(struct malidp_hw_device *);
759:	static int malidp550_rotmem_required(struct malidp_hw_device *, u16, u16, u32, bool);
820:	static long malidp550_se_calc_mclk(struct malidp_hw_device *, struct malidp_se_config *, struct videomode *);
806:	static int malidp550_se_set_scaling_coeffs(struct malidp_hw_device *, struct malidp_se_config *, struct malidp_se_config *);
651:	static void malidp550_set_config_valid(struct malidp_hw_device *, u8);
908:	static int malidp650_query_hw(struct malidp_hw_device *);
786:	static int malidp650_rotmem_required(struct malidp_hw_device *, u16, u16, u32, bool);
1168:	static irqreturn_t malidp_de_irq(int, void *);
1226:	static irqreturn_t malidp_de_irq_thread_handler(int, void *);
1286:	static irqreturn_t malidp_se_irq(int, void *);
1359:	static irqreturn_t malidp_se_irq_thread_handler(int, void *);
705:	static int malidpx50_get_bytes_per_column(u32);

File drivers/gpu/drm/arm/malidp_mw.c:
236:	void malidp_mw_atomic_commit(struct drm_device *, struct drm_atomic_state *);
208:	int malidp_mw_connector_init(struct drm_device *);
84:	static void malidp_mw_connector_destroy(struct drm_connector *);
79:	static enum drm_connector_status malidp_mw_connector_detect(struct drm_connector *, bool);
90:	static struct drm_connector_state *malidp_mw_connector_duplicate_state(struct drm_connector *);
36:	static int malidp_mw_connector_get_modes(struct drm_connector *);
45:	static enum drm_mode_status malidp_mw_connector_mode_valid(struct drm_connector *, struct drm_display_mode *);
66:	static void malidp_mw_connector_reset(struct drm_connector *);
127:	static int malidp_mw_encoder_atomic_check(struct drm_encoder *, struct drm_crtc_state *, struct drm_connector_state *);

File drivers/gpu/drm/arm/malidp_planes.c:
923:	int malidp_de_planes_init(struct drm_device *);
141:	bool malidp_format_mod_supported(struct drm_device *, u32, u64);
492:	static int malidp_de_plane_check(struct drm_plane *, struct drm_atomic_state *);
902:	static void malidp_de_plane_disable(struct drm_plane *, struct drm_atomic_state *);
781:	static void malidp_de_plane_update(struct drm_plane *, struct drm_atomic_state *);
480:	static void malidp_de_prefetch_settings(struct malidp_plane *, struct malidp_plane_state *);
113:	static void malidp_destroy_plane_state(struct drm_plane *, struct drm_plane_state *);
90:	static struct drm_plane_state *malidp_duplicate_plane_state(struct drm_plane *);
246:	static bool malidp_format_mod_supported_per_plane(struct drm_plane *, u32, u64);
128:	static void malidp_plane_atomic_print_state(struct drm_printer *, const struct drm_plane_state *);
76:	static void malidp_plane_reset(struct drm_plane *);
262:	static int malidp_se_check_scaling(struct malidp_plane *, struct drm_plane_state *);

File drivers/gpu/drm/bridge/adv7511/adv7511_cec.c:
347:	int adv7511_cec_init(struct device *, struct adv7511 *);
123:	void adv7511_cec_irq_process(struct adv7511 *, unsigned int);
178:	static int adv7511_cec_adap_enable(struct cec_adapter *, bool);
224:	static int adv7511_cec_adap_log_addr(struct cec_adapter *, u8);
292:	static int adv7511_cec_adap_transmit(struct cec_adapter *, u8, u32, struct cec_msg *);

File drivers/gpu/drm/bridge/adv7511/adv7511_drv.c:
381:	static void __adv7511_power_off(struct adv7511 *);
328:	static void __adv7511_power_on(struct adv7511 *);
925:	static int adv7511_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
944:	static enum drm_connector_status adv7511_bridge_detect(struct drm_bridge *);
897:	static void adv7511_bridge_disable(struct drm_bridge *);
890:	static void adv7511_bridge_enable(struct drm_bridge *);
951:	static struct edid *adv7511_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
959:	static void adv7511_bridge_hpd_notify(struct drm_bridge *, enum drm_connector_status);
904:	static void adv7511_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
913:	static enum drm_mode_status adv7511_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
1035:	static bool adv7511_cec_register_volatile(struct device *, unsigned int);
835:	static enum drm_connector_status adv7511_connector_detect(struct drm_connector *, bool);
813:	static int adv7511_connector_get_modes(struct drm_connector *);
821:	static enum drm_mode_status adv7511_connector_mode_valid(struct drm_connector *, struct drm_display_mode *);
654:	static enum drm_connector_status adv7511_detect(struct adv7511 *, struct drm_connector *);
1419:	static void adv7511_exit(void);
607:	static struct edid *adv7511_get_edid(struct adv7511 *, struct drm_connector *);
536:	static int adv7511_get_edid_block(void *, u8 *, unsigned int, size_t);
427:	static void adv7511_hpd_work(struct work_struct *);
1399:	static int adv7511_init(void);
1070:	static int adv7511_init_cec_regmap(struct adv7511 *);
500:	static irqreturn_t adv7511_irq_handler(int, void *);
467:	static int adv7511_irq_process(struct adv7511 *, bool);
181:	static int adv7511_packet_disable(struct adv7511 *, unsigned int);
397:	static void adv7511_power_off(struct adv7511 *);
1188:	static int adv7511_probe(struct i2c_client *, const struct i2c_device_id *);
77:	static bool adv7511_register_volatile(struct device *, unsigned int);
1347:	static void adv7511_remove(struct i2c_client *);
282:	static void adv7511_set_link_config(struct adv7511 *, const struct adv7511_link_config *);

File drivers/gpu/drm/bridge/adv7511/adv7533.c:
140:	int adv7533_attach_dsi(struct adv7511 *);
95:	void adv7533_dsi_power_off(struct adv7511 *);
66:	void adv7533_dsi_power_on(struct adv7511 *);
103:	enum drm_mode_status adv7533_mode_valid(struct adv7511 *, const struct drm_display_mode *);
175:	int adv7533_parse_dt(struct device_node *, struct adv7511 *);
133:	int adv7533_patch_cec_registers(struct adv7511 *);
126:	int adv7533_patch_registers(struct adv7511 *);

File drivers/gpu/drm/bridge/analogix/anx7625.c:
1460:	static int _anx7625_hpd_polling(struct anx7625_data *, unsigned long);
2037:	static int anx7625_attach_dsi(struct anx7625_data *);
1977:	static int anx7625_audio_get_eld(struct device *, void *, u8 *, size_t);
1964:	static int anx7625_audio_hook_plugged_cb(struct device *, void *, hdmi_codec_plugged_cb, struct device *);
1806:	static int anx7625_audio_hw_params(struct device *, void *, struct hdmi_codec_daifmt *, struct hdmi_codec_params *);
1931:	static void anx7625_audio_shutdown(struct device *, void *);
235:	static int anx7625_aux_trans(struct anx7625_data *, u8, u32, u8, u8 *);
1729:	static ssize_t anx7625_aux_transfer(struct drm_dp_aux *, struct drm_dp_aux_msg *);
2388:	static int anx7625_bridge_atomic_check(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *);
2431:	static void anx7625_bridge_atomic_disable(struct drm_bridge *, struct drm_bridge_state *);
2404:	static void anx7625_bridge_atomic_enable(struct drm_bridge *, struct drm_bridge_state *);
2160:	static int anx7625_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
2196:	static void anx7625_bridge_detach(struct drm_bridge *);
2446:	static enum drm_connector_status anx7625_bridge_detect(struct drm_bridge *);
2456:	static struct edid *anx7625_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
2225:	static void anx7625_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
2204:	static enum drm_mode_status anx7625_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
1303:	static void anx7625_disable_pd_protocol(struct anx7625_data *);
2765:	static void anx7625_driver_exit(void);
2765:	static int anx7625_driver_init(void);
1936:	static int anx7625_hdmi_i2s_get_dai_id(struct snd_soc_component *, struct device_node *);
2565:	static int anx7625_i2c_probe(struct i2c_client *, const struct i2c_device_id *);
2718:	static void anx7625_i2c_remove(struct i2c_client *);
1613:	static irqreturn_t anx7625_intr_hpd_isr(int, void *);
1707:	static bool anx7625_of_panel_on_aux_bus(struct device *);
1650:	static int anx7625_parse_dt(struct device *, struct anx7625_platform_data *);
98:	static int anx7625_reg_block_read(struct anx7625_data *, struct i2c_client *, u8, u8, u8 *);
82:	static int anx7625_reg_read(struct anx7625_data *, struct i2c_client *, u8);
115:	static int anx7625_reg_write(struct anx7625_data *, struct i2c_client *, u8, u8);
2014:	static int anx7625_register_audio(struct device *, struct anx7625_data *);
2559:	static void anx7625_runtime_disable(void *);
1409:	static void anx7625_start_dp_work(struct anx7625_data *);
1494:	static int anx7625_wait_hpd_asserted(struct drm_dp_aux *, unsigned long);
1591:	static void anx7625_work_func(struct work_struct *);
2083:	static void hdcp_check_work_func(struct work_struct *);
1072:	static int segments_edid_read(struct anx7625_data *, u8, u8 *, u8);
997:	static int sp_tx_aux_wr(struct anx7625_data *, u8);
209:	static int wait_aux_op_finish(struct anx7625_data *);

File drivers/gpu/drm/bridge/cadence/cdns-mhdp8546-core.c:
2389:	u32 cdns_mhdp_wait_for_sw_event(struct cdns_mhdp_device *, u32);
476:	static int cdns_mhdp_adjust_lt(struct cdns_mhdp_device *, unsigned int, unsigned int, const u8 *, u8 *);
2150:	static int cdns_mhdp_atomic_check(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *);
2057:	static void cdns_mhdp_atomic_disable(struct drm_bridge *, struct drm_bridge_state *);
1969:	static void cdns_mhdp_atomic_enable(struct drm_bridge *, struct drm_bridge_state *);
1715:	static int cdns_mhdp_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
2121:	static void cdns_mhdp_bridge_atomic_destroy_state(struct drm_bridge *, struct drm_bridge_state *);
2107:	static struct drm_bridge_state *cdns_mhdp_bridge_atomic_duplicate_state(struct drm_bridge *);
2137:	static struct drm_bridge_state *cdns_mhdp_bridge_atomic_reset(struct drm_bridge *);
2173:	static enum drm_connector_status cdns_mhdp_bridge_detect(struct drm_bridge *);
2180:	static struct edid *cdns_mhdp_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
2198:	static void cdns_mhdp_bridge_hpd_disable(struct drm_bridge *);
2188:	static void cdns_mhdp_bridge_hpd_enable(struct drm_bridge *);
1620:	static int cdns_mhdp_connector_atomic_check(struct drm_connector *, struct drm_atomic_state *);
1540:	static int cdns_mhdp_connector_detect(struct drm_connector *, struct drm_modeset_acquire_ctx *, bool);
2089:	static void cdns_mhdp_detach(struct drm_bridge *);
765:	static void cdns_mhdp_fw_cb(const struct firmware *, void *);
396:	static int cdns_mhdp_get_edid_block(void *, u8 *, unsigned int, size_t);
1501:	static int cdns_mhdp_get_modes(struct drm_connector *);
2408:	static void cdns_mhdp_hpd_work(struct work_struct *);
2355:	static irqreturn_t cdns_mhdp_irq_handler(int, void *);
1408:	static int cdns_mhdp_link_up(struct cdns_mhdp_device *);
58:	static int cdns_mhdp_mailbox_read(struct cdns_mhdp_device *);
90:	static int cdns_mhdp_mailbox_recv_header(struct cdns_mhdp_device *, u8, u8, u16);
73:	static int cdns_mhdp_mailbox_write(struct cdns_mhdp_device *, u8);
1603:	static enum drm_mode_status cdns_mhdp_mode_valid(struct drm_connector *, struct drm_display_mode *);
2332:	static void cdns_mhdp_modeset_retry_fn(struct work_struct *);
2426:	static int cdns_mhdp_probe(struct platform_device *);
168:	static int cdns_mhdp_reg_read(struct cdns_mhdp_device *, u32, u32 *);
212:	static int cdns_mhdp_reg_write(struct cdns_mhdp_device *, u16, u32);
2574:	static int cdns_mhdp_remove(struct platform_device *);
325:	static int cdns_mhdp_set_firmware_active(struct cdns_mhdp_device *, bool);
1924:	static void cdns_mhdp_sst_enable(struct cdns_mhdp_device *, const struct drm_display_mode *);
819:	static ssize_t cdns_mhdp_transfer(struct drm_dp_aux *, struct drm_dp_aux_msg *);
2638:	static void mhdp_driver_exit(void);
2638:	static int mhdp_driver_init(void);

File drivers/gpu/drm/bridge/cadence/cdns-mhdp8546-hdcp.c:
549:	int cdns_mhdp_hdcp_disable(struct cdns_mhdp_device *);
530:	int cdns_mhdp_hdcp_enable(struct cdns_mhdp_device *, u8);
565:	void cdns_mhdp_hdcp_init(struct cdns_mhdp_device *);
502:	int cdns_mhdp_hdcp_set_lc(struct cdns_mhdp_device *, u8 *);
516:	int cdns_mhdp_hdcp_set_public_key_param(struct cdns_mhdp_device *, struct cdns_hdcp_tx_public_key_param *);
404:	static int _cdns_mhdp_hdcp_enable(struct cdns_mhdp_device *, u8);
367:	static int cdns_mhdp_hdcp_auth(struct cdns_mhdp_device *, u8);
313:	static int cdns_mhdp_hdcp_check_receviers(struct cdns_mhdp_device *);
466:	static void cdns_mhdp_hdcp_check_work(struct work_struct *);
128:	static int cdns_mhdp_hdcp_get_status(struct cdns_mhdp_device *, u16 *);
481:	static void cdns_mhdp_hdcp_prop_work(struct work_struct *);
267:	static int cdns_mhdp_hdcp_set_config(struct cdns_mhdp_device *, u8, bool);
18:	static int cdns_mhdp_secure_mailbox_read(struct cdns_mhdp_device *);
51:	static int cdns_mhdp_secure_mailbox_recv_header(struct cdns_mhdp_device *, u8, u8, u16);
33:	static int cdns_mhdp_secure_mailbox_write(struct cdns_mhdp_device *, u8);

File drivers/gpu/drm/bridge/cadence/cdns-mhdp8546-j721e.c:
62:	static void cdns_mhdp_j721e_disable(struct cdns_mhdp_device *);
51:	static void cdns_mhdp_j721e_enable(struct cdns_mhdp_device *);
43:	static int cdns_mhdp_j721e_init(struct cdns_mhdp_device *);

File drivers/gpu/drm/bridge/display-connector.c:
37:	static int display_connector_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
44:	static enum drm_connector_status display_connector_detect(struct drm_bridge *);
435:	static void display_connector_driver_exit(void);
435:	static int display_connector_driver_init(void);
85:	static struct edid *display_connector_get_edid(struct drm_bridge *, struct drm_connector *);
142:	static u32 *display_connector_get_input_bus_fmts(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, u32, unsigned int *);
100:	static u32 *display_connector_get_output_bus_fmts(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, unsigned int *);
184:	static irqreturn_t display_connector_hpd_irq(int, void *);
194:	static int display_connector_probe(struct platform_device *);
385:	static int display_connector_remove(struct platform_device *);

File drivers/gpu/drm/bridge/lontium-lt8912b.c:
544:	static int lt8912_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
575:	static void lt8912_bridge_detach(struct drm_bridge *);
587:	static enum drm_connector_status lt8912_bridge_detect(struct drm_bridge *);
470:	static void lt8912_bridge_enable(struct drm_bridge *);
597:	static struct edid *lt8912_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
461:	static void lt8912_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
396:	static enum drm_connector_status lt8912_connector_detect(struct drm_connector *, bool);
431:	static int lt8912_connector_get_modes(struct drm_connector *);
416:	static enum drm_mode_status lt8912_connector_mode_valid(struct drm_connector *, struct drm_display_mode *);
765:	static void lt8912_i2c_driver_exit(void);
765:	static int lt8912_i2c_driver_init(void);
688:	static int lt8912_probe(struct i2c_client *, const struct i2c_device_id *);
734:	static void lt8912_remove(struct i2c_client *);

File drivers/gpu/drm/bridge/lontium-lt9611.c:
925:	static u32 *lt9611_atomic_get_input_bus_fmts(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, u32, unsigned int *);
767:	static struct mipi_dsi_device *lt9611_attach_dsi(struct lt9611 *, struct device_node *);
1051:	static void lt9611_audio_shutdown(struct device *, void *);
1036:	static int lt9611_audio_startup(struct device *, void *);
733:	static void lt9611_bridge_atomic_disable(struct drm_bridge *, struct drm_bridge_state *);
710:	static void lt9611_bridge_atomic_enable(struct drm_bridge *, struct drm_bridge_state *);
871:	static void lt9611_bridge_atomic_post_disable(struct drm_bridge *, struct drm_bridge_state *);
827:	static int lt9611_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
901:	static enum drm_connector_status lt9611_bridge_detect(struct drm_bridge *);
906:	static struct edid *lt9611_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
915:	static void lt9611_bridge_hpd_enable(struct drm_bridge *);
879:	static void lt9611_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
842:	static enum drm_mode_status lt9611_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
598:	static enum drm_connector_status lt9611_connector_detect(struct drm_connector *, bool);
684:	static int lt9611_connector_get_modes(struct drm_connector *);
700:	static enum drm_mode_status lt9611_connector_mode_valid(struct drm_connector *, struct drm_display_mode *);
1255:	static void lt9611_driver_exit(void);
1255:	static int lt9611_driver_init(void);
567:	static struct lt9611_mode *lt9611_find_mode(const struct drm_display_mode *);
657:	static int lt9611_get_edid_block(void *, u8 *, unsigned int, size_t);
1016:	static int lt9611_hdmi_hw_params(struct device *, void *, struct hdmi_codec_daifmt *, struct hdmi_codec_params *);
1059:	static int lt9611_hdmi_i2s_get_dai_id(struct snd_soc_component *, struct device_node *);
392:	static irqreturn_t lt9611_irq_thread_handler(int, void *);
1111:	static int lt9611_probe(struct i2c_client *, const struct i2c_device_id *);
1220:	static void lt9611_remove(struct i2c_client *);

File drivers/gpu/drm/bridge/lontium-lt9611uxc.c:
256:	static struct mipi_dsi_device *lt9611uxc_attach_dsi(struct lt9611uxc *, struct device_node *);
603:	static void lt9611uxc_audio_shutdown(struct device *, void *);
359:	static int lt9611uxc_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
438:	static enum drm_connector_status lt9611uxc_bridge_detect(struct drm_bridge *);
495:	static struct edid *lt9611uxc_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
427:	static void lt9611uxc_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
375:	static enum drm_mode_status lt9611uxc_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
305:	static enum drm_connector_status lt9611uxc_connector_detect(struct drm_connector *, bool);
291:	static int lt9611uxc_connector_get_modes(struct drm_connector *);
313:	static enum drm_mode_status lt9611uxc_connector_mode_valid(struct drm_connector *, struct drm_display_mode *);
1019:	static void lt9611uxc_driver_exit(void);
1019:	static int lt9611uxc_driver_init(void);
824:	static ssize_t lt9611uxc_firmware_show(struct device *, struct device_attribute *, char *);
813:	static ssize_t lt9611uxc_firmware_store(struct device *, struct device_attribute *, const char *, size_t);
730:	static int lt9611uxc_firmware_update(struct lt9611uxc *);
659:	static void lt9611uxc_firmware_write_page(struct lt9611uxc *, u16, const u8 *);
469:	static int lt9611uxc_get_edid_block(void *, u8 *, unsigned int, size_t);
592:	static int lt9611uxc_hdmi_hw_params(struct device *, void *, struct hdmi_codec_daifmt *, struct hdmi_codec_params *);
607:	static int lt9611uxc_hdmi_i2s_get_dai_id(struct snd_soc_component *, struct device_node *);
166:	static void lt9611uxc_hpd_work(struct work_struct *);
138:	static irqreturn_t lt9611uxc_irq_thread_handler(int, void *);
847:	static int lt9611uxc_probe(struct i2c_client *, const struct i2c_device_id *);
981:	static void lt9611uxc_remove(struct i2c_client *);

File drivers/gpu/drm/bridge/nwl-dsi.c:
927:	static u32 *nwl_bridge_atomic_get_input_bus_fmts(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, u32, unsigned int *);
819:	static int nwl_dsi_bridge_atomic_check(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *);
740:	static void nwl_dsi_bridge_atomic_disable(struct drm_bridge *, struct drm_bridge_state *);
902:	static void nwl_dsi_bridge_atomic_enable(struct drm_bridge *, struct drm_bridge_state *);
914:	static int nwl_dsi_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
843:	static void nwl_dsi_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
803:	static enum drm_mode_status nwl_dsi_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
1222:	static void nwl_dsi_driver_exit(void);
1222:	static int nwl_dsi_driver_init(void);
346:	static int nwl_dsi_host_attach(struct mipi_dsi_host *, struct mipi_dsi_device *);
565:	static ssize_t nwl_dsi_host_transfer(struct mipi_dsi_host *, const struct mipi_dsi_msg *);
631:	static irqreturn_t nwl_dsi_irq_handler(int, void *);
1146:	static int nwl_dsi_probe(struct platform_device *);
1202:	static int nwl_dsi_remove(struct platform_device *);

File drivers/gpu/drm/bridge/panel.c:
443:	struct drm_bridge *devm_drm_of_get_bridge(struct device *, struct device_node *, u32, u32);
323:	struct drm_bridge *devm_drm_panel_bridge_add(struct device *, struct drm_panel *);
348:	struct drm_bridge *devm_drm_panel_bridge_add_typed(struct device *, struct drm_panel *, u32);
181:	bool drm_bridge_is_panel(const struct drm_bridge *);
212:	struct drm_bridge *drm_panel_bridge_add(struct drm_panel *);
234:	struct drm_bridge *drm_panel_bridge_add_typed(struct drm_panel *, u32);
418:	struct drm_connector *drm_panel_bridge_connector(struct drm_bridge *);
269:	void drm_panel_bridge_remove(struct drm_bridge *);
295:	int drm_panel_bridge_set_orientation(struct drm_connector *, struct drm_bridge *);
477:	struct drm_bridge *drmm_of_get_bridge(struct drm_device *, struct device_node *, u32, u32);
390:	struct drm_bridge *drmm_panel_bridge_add(struct drm_device *, struct drm_panel *);
307:	static void devm_drm_panel_bridge_release(struct device *, void *);
371:	static void drmm_drm_panel_bridge_release(struct drm_device *, void *);
58:	static int panel_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
37:	static int panel_bridge_connector_get_modes(struct drm_connector *);
148:	static void panel_bridge_debugfs_init(struct drm_bridge *, struct dentry *);
96:	static void panel_bridge_detach(struct drm_bridge *);
126:	static void panel_bridge_disable(struct drm_bridge *);
119:	static void panel_bridge_enable(struct drm_bridge *);
140:	static int panel_bridge_get_modes(struct drm_bridge *, struct drm_connector *);
133:	static void panel_bridge_post_disable(struct drm_bridge *);
112:	static void panel_bridge_pre_enable(struct drm_bridge *);

File drivers/gpu/drm/bridge/parade-ps8640.c:
173:	static int _ps8640_wait_hpd_asserted(struct ps8640 *, unsigned long);
356:	static ssize_t ps8640_aux_transfer(struct drm_dp_aux *, struct drm_dp_aux_msg *);
489:	static int ps8640_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
529:	static void ps8640_bridge_detach(struct drm_bridge *);
538:	static struct edid *ps8640_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
628:	static int ps8640_bridge_link_panel(struct drm_dp_aux *);
777:	static void ps8640_driver_exit(void);
777:	static int ps8640_driver_init(void);
479:	static void ps8640_post_disable(struct drm_bridge *);
445:	static void ps8640_pre_enable(struct drm_bridge *);
656:	static int ps8640_probe(struct i2c_client *);
572:	static void ps8640_runtime_disable(void *);
204:	static int ps8640_wait_hpd_asserted(struct drm_dp_aux *, unsigned long);

File drivers/gpu/drm/bridge/sii902x.c:
745:	static int sii902x_audio_get_dai_id(struct snd_soc_component *, struct device_node *);
730:	static int sii902x_audio_get_eld(struct device *, void *, uint8_t *, size_t);
539:	static int sii902x_audio_hw_params(struct device *, void *, struct hdmi_codec_daifmt *, struct hdmi_codec_params *);
716:	static int sii902x_audio_mute(struct device *, void *, bool, int);
702:	static void sii902x_audio_shutdown(struct device *, void *);
420:	static int sii902x_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
462:	static enum drm_connector_status sii902x_bridge_detect(struct drm_bridge *);
331:	static void sii902x_bridge_disable(struct drm_bridge *);
344:	static void sii902x_bridge_enable(struct drm_bridge *);
469:	static struct edid *sii902x_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
359:	static void sii902x_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
266:	static enum drm_connector_status sii902x_connector_detect(struct drm_connector *, bool);
1180:	static void sii902x_driver_exit(void);
1180:	static int sii902x_driver_init(void);
302:	static int sii902x_get_modes(struct drm_connector *);
938:	static int sii902x_i2c_bypass_deselect(struct i2c_mux_core *, u32);
893:	static int sii902x_i2c_bypass_select(struct i2c_mux_core *, u32);
859:	static irqreturn_t sii902x_interrupt(int, void *);
318:	static enum drm_mode_status sii902x_mode_valid(struct drm_connector *, struct drm_display_mode *);
1069:	static int sii902x_probe(struct i2c_client *, const struct i2c_device_id *);
1148:	static void sii902x_remove(struct i2c_client *);

File drivers/gpu/drm/bridge/simple-bridge.c:
103:	static int simple_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
87:	static enum drm_connector_status simple_bridge_connector_detect(struct drm_connector *, bool);
152:	static void simple_bridge_disable(struct drm_bridge *);
310:	static void simple_bridge_driver_exit(void);
310:	static int simple_bridge_driver_init(void);
138:	static void simple_bridge_enable(struct drm_bridge *);
50:	static int simple_bridge_get_modes(struct drm_connector *);
168:	static int simple_bridge_probe(struct platform_device *);
221:	static int simple_bridge_remove(struct platform_device *);

File drivers/gpu/drm/bridge/synopsys/dw-hdmi-cec.c:
222:	static void dw_hdmi_cec_del(void *);
316:	static void dw_hdmi_cec_driver_exit(void);
316:	static int dw_hdmi_cec_driver_init(void);
186:	static int dw_hdmi_cec_enable(struct cec_adapter *, bool);
120:	static irqreturn_t dw_hdmi_cec_hardirq(int, void *);
77:	static int dw_hdmi_cec_log_addr(struct cec_adapter *, u8);
229:	static int dw_hdmi_cec_probe(struct platform_device *);
299:	static int dw_hdmi_cec_remove(struct platform_device *);
169:	static irqreturn_t dw_hdmi_cec_thread(int, void *);
92:	static int dw_hdmi_cec_transmit(struct cec_adapter *, u8, u32, struct cec_msg *);

File drivers/gpu/drm/bridge/synopsys/dw-hdmi.c:
911:	void dw_hdmi_audio_disable(struct dw_hdmi *);
899:	void dw_hdmi_audio_enable(struct dw_hdmi *);
3673:	struct dw_hdmi *dw_hdmi_bind(struct platform_device *, struct drm_encoder *, const struct dw_hdmi_plat_data *);
1487:	void dw_hdmi_phy_gen1_reset(struct dw_hdmi *);
1457:	void dw_hdmi_phy_gen2_pddq(struct dw_hdmi *, u8);
1495:	void dw_hdmi_phy_gen2_reset(struct dw_hdmi *);
1465:	void dw_hdmi_phy_gen2_txpwron(struct dw_hdmi *, u8);
1503:	void dw_hdmi_phy_i2c_set_addr(struct dw_hdmi *, u8);
1365:	void dw_hdmi_phy_i2c_write(struct dw_hdmi *, unsigned short, unsigned char);
1703:	enum drm_connector_status dw_hdmi_phy_read_hpd(struct dw_hdmi *, void *);
1726:	void dw_hdmi_phy_setup_hpd(struct dw_hdmi *, void *);
1711:	void dw_hdmi_phy_update_hpd(struct dw_hdmi *, void *, bool, bool, bool);
3349:	struct dw_hdmi *dw_hdmi_probe(struct platform_device *, const struct dw_hdmi_plat_data *);
3647:	void dw_hdmi_remove(struct dw_hdmi *);
3700:	void dw_hdmi_resume(struct dw_hdmi *);
768:	void dw_hdmi_set_channel_allocation(struct dw_hdmi *, unsigned int);
741:	void dw_hdmi_set_channel_count(struct dw_hdmi *, unsigned int);
648:	void dw_hdmi_set_channel_status(struct dw_hdmi *, u8 *);
1421:	void dw_hdmi_set_high_tmds_clock_ratio(struct dw_hdmi *, const struct drm_display_info *);
244:	int dw_hdmi_set_plugged_cb(struct dw_hdmi *, hdmi_codec_plugged_cb, struct device *);
723:	void dw_hdmi_set_sample_non_pcm(struct dw_hdmi *, unsigned int);
731:	void dw_hdmi_set_sample_rate(struct dw_hdmi *, unsigned int);
715:	void dw_hdmi_set_sample_width(struct dw_hdmi *, unsigned int);
3067:	void dw_hdmi_setup_rx_sense(struct dw_hdmi *, bool, bool);
3694:	void dw_hdmi_unbind(struct dw_hdmi *);
883:	static void dw_hdmi_ahb_audio_disable(struct dw_hdmi *);
878:	static void dw_hdmi_ahb_audio_enable(struct dw_hdmi *);
2888:	static int dw_hdmi_bridge_atomic_check(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *);
2964:	static void dw_hdmi_bridge_atomic_disable(struct drm_bridge *, struct drm_bridge_state *);
2977:	static void dw_hdmi_bridge_atomic_enable(struct drm_bridge *, struct drm_bridge_state *);
2786:	static u32 *dw_hdmi_bridge_atomic_get_input_bus_fmts(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, u32, unsigned int *);
2658:	static u32 *dw_hdmi_bridge_atomic_get_output_bus_fmts(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, unsigned int *);
2908:	static int dw_hdmi_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
2920:	static void dw_hdmi_bridge_detach(struct drm_bridge *);
2995:	static enum drm_connector_status dw_hdmi_bridge_detect(struct drm_bridge *);
3002:	static struct edid *dw_hdmi_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
2950:	static void dw_hdmi_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
2931:	static enum drm_mode_status dw_hdmi_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
3256:	static void dw_hdmi_cec_disable(struct dw_hdmi *);
3248:	static void dw_hdmi_cec_enable(struct dw_hdmi *);
2533:	static int dw_hdmi_connector_atomic_check(struct drm_connector *, struct drm_atomic_state *);
2507:	static enum drm_connector_status dw_hdmi_connector_detect(struct drm_connector *, bool);
2557:	static void dw_hdmi_connector_force(struct drm_connector *);
2514:	static int dw_hdmi_connector_get_modes(struct drm_connector *);
865:	static void dw_hdmi_gp_audio_disable(struct dw_hdmi *);
795:	static void dw_hdmi_gp_audio_enable(struct dw_hdmi *);
3049:	static irqreturn_t dw_hdmi_hardirq(int, void *);
518:	static struct i2c_adapter *dw_hdmi_i2c_adapter(struct dw_hdmi *);
508:	static u32 dw_hdmi_i2c_func(struct i2c_adapter *);
347:	static int dw_hdmi_i2c_wait(struct dw_hdmi *);
435:	static int dw_hdmi_i2c_xfer(struct i2c_adapter *, struct i2c_msg *, int);
894:	static void dw_hdmi_i2s_audio_disable(struct dw_hdmi *);
888:	static void dw_hdmi_i2s_audio_enable(struct dw_hdmi *);
3285:	static void dw_hdmi_init_hw(struct dw_hdmi *);
3095:	static irqreturn_t dw_hdmi_irq(int, void *);
1698:	static void dw_hdmi_phy_disable(struct dw_hdmi *, void *);
1679:	static int dw_hdmi_phy_init(struct dw_hdmi *, void *, const struct drm_display_info *, const struct drm_display_mode *);
1511:	static void dw_hdmi_phy_power_off(struct dw_hdmi *);
2419:	static void dw_hdmi_update_power(struct dw_hdmi *);
787:	static u8 *hdmi_audio_get_eld(struct dw_hdmi *);
700:	static void hdmi_init_clk_regenerator(struct dw_hdmi *);
1586:	static int hdmi_phy_configure_dwc_hdmi_3d_tx(struct dw_hdmi *, const struct dw_hdmi_plat_data *, unsigned long);
229:	static u8 hdmi_readb(struct dw_hdmi *, int);
660:	static void hdmi_set_clk_regenerator(struct dw_hdmi *, unsigned long, unsigned int);
553:	static void hdmi_set_cts_n(struct dw_hdmi *, unsigned int, unsigned int);
224:	static void hdmi_writeb(struct dw_hdmi *, u8, int);

File drivers/gpu/drm/bridge/thc63lvd1024.c:
45:	static int thc63_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
100:	static void thc63_disable(struct drm_bridge *);
256:	static void thc63_driver_exit(void);
256:	static int thc63_driver_init(void);
84:	static void thc63_enable(struct drm_bridge *);
53:	static enum drm_mode_status thc63_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
193:	static int thc63_probe(struct platform_device *);
233:	static int thc63_remove(struct platform_device *);

File drivers/gpu/drm/bridge/ti-sn65dsi86.c:
424:	static int status_open(struct inode *, struct file *);
404:	static int status_show(struct seq_file *, void *);
474:	static int ti_sn65dsi86_add_aux_device(struct ti_sn65dsi86 *, struct auxiliary_device *, const char *);
431:	static void ti_sn65dsi86_debugfs_init(struct ti_sn65dsi86 *);
426:	static void ti_sn65dsi86_debugfs_remove(void *);
462:	static void ti_sn65dsi86_delete_aux(void *);
1998:	static void ti_sn65dsi86_exit(void);
1959:	static int ti_sn65dsi86_init(void);
472:	static void ti_sn65dsi86_noop(struct device *);
1855:	static int ti_sn65dsi86_probe(struct i2c_client *, const struct i2c_device_id *);
1835:	static void ti_sn65dsi86_runtime_disable(void *);
457:	static void ti_sn65dsi86_uninit_aux(void *);
621:	static int ti_sn_aux_probe(struct auxiliary_device *, const struct auxiliary_device_id *);
509:	static ssize_t ti_sn_aux_transfer(struct drm_dp_aux *, struct drm_dp_aux_msg *);
780:	static void ti_sn_bridge_atomic_disable(struct drm_bridge *, struct drm_bridge_state *);
1040:	static void ti_sn_bridge_atomic_enable(struct drm_bridge *, struct drm_bridge_state *);
1145:	static void ti_sn_bridge_atomic_post_disable(struct drm_bridge *, struct drm_bridge_state *);
1131:	static void ti_sn_bridge_atomic_pre_enable(struct drm_bridge *, struct drm_bridge_state *);
699:	static int ti_sn_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
740:	static void ti_sn_bridge_detach(struct drm_bridge *);
1163:	static enum drm_connector_status ti_sn_bridge_detect(struct drm_bridge *);
1176:	static struct edid *ti_sn_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
1688:	static int ti_sn_bridge_gpio_direction_input(struct gpio_chip *, unsigned int);
1716:	static int ti_sn_bridge_gpio_direction_output(struct gpio_chip *, unsigned int, int);
1753:	static void ti_sn_bridge_gpio_free(struct gpio_chip *, unsigned int);
1644:	static int ti_sn_bridge_gpio_get(struct gpio_chip *, unsigned int);
1629:	static int ti_sn_bridge_gpio_get_direction(struct gpio_chip *, unsigned int);
1743:	static int ti_sn_bridge_gpio_request(struct gpio_chip *, unsigned int);
1668:	static void ti_sn_bridge_gpio_set(struct gpio_chip *, unsigned int, int);
746:	static enum drm_mode_status ti_sn_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
1262:	static int ti_sn_bridge_probe(struct auxiliary_device *, const struct auxiliary_device_id *);
1303:	static void ti_sn_bridge_remove(struct auxiliary_device *);
1768:	static int ti_sn_gpio_probe(struct auxiliary_device *, const struct auxiliary_device_id *);
1613:	static int tn_sn_bridge_of_xlate(struct gpio_chip *, const struct of_phandle_args *, u32 *);

File drivers/gpu/drm/bridge/ti-tfp410.c:
122:	static int tfp410_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
88:	static enum drm_connector_status tfp410_connector_detect(struct drm_connector *, bool);
172:	static void tfp410_detach(struct drm_bridge *);
189:	static void tfp410_disable(struct drm_bridge *);
182:	static void tfp410_enable(struct drm_bridge *);
50:	static int tfp410_get_modes(struct drm_connector *);
114:	static void tfp410_hpd_callback(void *, enum drm_connector_status);
104:	static void tfp410_hpd_work_func(struct work_struct *);
382:	static int tfp410_i2c_probe(struct i2c_client *, const struct i2c_device_id *);
397:	static void tfp410_i2c_remove(struct i2c_client *);
294:	static int tfp410_init(struct device *, bool);
196:	static enum drm_mode_status tfp410_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
452:	static void tfp410_module_exit(void);
424:	static int tfp410_module_init(void);
353:	static int tfp410_probe(struct platform_device *);
358:	static int tfp410_remove(struct platform_device *);

File drivers/gpu/drm/display/drm_display_helper_mod.c:
15:	static void drm_display_helper_module_exit(void);
10:	static int drm_display_helper_module_init(void);

File drivers/gpu/drm/display/drm_dp_aux_bus.c:
350:	int __dp_aux_dp_driver_register(struct dp_aux_ep_driver *, struct module *);
336:	int devm_of_dp_aux_populate_bus(struct drm_dp_aux *, int (*)(struct drm_dp_aux *));
359:	void dp_aux_dp_driver_unregister(struct dp_aux_ep_driver *);
211:	void of_dp_aux_depopulate_bus(struct drm_dp_aux *);
249:	int of_dp_aux_populate_bus(struct drm_dp_aux *, int (*)(struct drm_dp_aux *));
376:	static void dp_aux_bus_exit(void);
365:	static int dp_aux_bus_init(void);
155:	static void dp_aux_ep_dev_release(struct device *);
39:	static int dp_aux_ep_match(struct device *, struct device_driver *);
52:	static int dp_aux_ep_probe(struct device *);
102:	static void dp_aux_ep_remove(struct device *);
118:	static void dp_aux_ep_shutdown(struct device *);
138:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
318:	static void of_dp_aux_depopulate_bus_void(void *);
186:	static int of_dp_aux_ep_destroy(struct device *, void *);

File drivers/gpu/drm/display/drm_dp_dual_mode_helper.c:
205:	enum drm_dp_dual_mode_type drm_dp_dual_mode_detect(const struct drm_device *, struct i2c_adapter *);
322:	int drm_dp_dual_mode_get_tmds_output(const struct drm_device *, enum drm_dp_dual_mode_type, struct i2c_adapter *, bool *);
277:	int drm_dp_dual_mode_max_tmds_clock(const struct drm_device *, enum drm_dp_dual_mode_type, struct i2c_adapter *);
63:	ssize_t drm_dp_dual_mode_read(struct i2c_adapter *, u8, void *, size_t);
361:	int drm_dp_dual_mode_set_tmds_output(const struct drm_device *, enum drm_dp_dual_mode_type, struct i2c_adapter *, bool);
127:	ssize_t drm_dp_dual_mode_write(struct i2c_adapter *, u8, const void *, size_t);
413:	const char *drm_dp_get_dual_mode_type_name(enum drm_dp_dual_mode_type);
446:	int drm_lspcon_get_mode(const struct drm_device *, struct i2c_adapter *, enum drm_lspcon_mode *);
493:	int drm_lspcon_set_mode(const struct drm_device *, struct i2c_adapter *, enum drm_lspcon_mode);

File drivers/gpu/drm/display/drm_dp_helper.c:
209:	bool drm_dp_128b132b_cds_interlane_align_done(const u8 *);
200:	bool drm_dp_128b132b_eq_interlane_align_done(const u8 *);
164:	bool drm_dp_128b132b_lane_channel_eq_done(const u8 *, int);
184:	bool drm_dp_128b132b_lane_symbol_locked(const u8 *, int);
218:	bool drm_dp_128b132b_link_training_failed(const u8 *);
354:	int drm_dp_128b132b_read_aux_rd_interval(struct drm_dp_aux *);
2052:	void drm_dp_aux_init(struct drm_dp_aux *);
2093:	int drm_dp_aux_register(struct drm_dp_aux *);
2127:	void drm_dp_aux_unregister(struct drm_dp_aux *);
476:	int drm_dp_bw_code_to_link_rate(u8);
88:	bool drm_dp_channel_eq_ok(const u8 *, int);
108:	bool drm_dp_clock_recovery_ok(const u8 *, int);
1208:	bool drm_dp_downstream_420_passthrough(const u8 *, const u8 *);
1239:	bool drm_dp_downstream_444_to_420_conversion(const u8 *, const u8 *);
1369:	void drm_dp_downstream_debug(struct seq_file *, const u8 *, const u8 *, const struct edid *, struct drm_dp_aux *);
1354:	int drm_dp_downstream_id(struct drm_dp_aux *, char *);
786:	bool drm_dp_downstream_is_tmds(const u8 *, const u8 *, const struct edid *);
769:	bool drm_dp_downstream_is_type(const u8 *, const u8 *, u8);
1152:	int drm_dp_downstream_max_bpc(const u8 *, const u8 *, const struct edid *);
1015:	int drm_dp_downstream_max_dotclock(const u8 *, const u8 *);
1044:	int drm_dp_downstream_max_tmds_clock(const u8 *, const u8 *, const struct edid *);
1109:	int drm_dp_downstream_min_tmds_clock(const u8 *, const u8 *, const struct edid *);
1303:	struct drm_display_mode *drm_dp_downstream_mode(struct drm_device *, const u8 *, const u8 *);
1270:	bool drm_dp_downstream_rgb_to_ycbcr_conversion(const u8 *, const u8 *, u8);
588:	int drm_dp_dpcd_probe(struct drm_dp_aux *, unsigned int);
616:	ssize_t drm_dp_dpcd_read(struct drm_dp_aux *, unsigned int, void *, size_t);
688:	int drm_dp_dpcd_read_link_status(struct drm_dp_aux *, u8 *);
709:	int drm_dp_dpcd_read_phy_link_status(struct drm_dp_aux *, enum drm_dp_phy, u8 *);
664:	ssize_t drm_dp_dpcd_write(struct drm_dp_aux *, unsigned int, void *, size_t);
2400:	u8 drm_dp_dsc_sink_line_buf_depth(const u8 *);
2342:	u8 drm_dp_dsc_sink_max_slice_count(const u8 *, bool);
2446:	int drm_dp_dsc_sink_supported_input_bpcs(const u8 *, u8 *);
136:	u8 drm_dp_get_adjust_request_pre_emphasis(const u8 *, int);
123:	u8 drm_dp_get_adjust_request_voltage(const u8 *, int);
150:	u8 drm_dp_get_adjust_tx_ffe_preset(const u8 *, int);
2892:	int drm_dp_get_pcon_max_frl_bw(const u8 *, const u8 *);
2631:	int drm_dp_get_phy_test_pattern(struct drm_dp_aux *, struct drm_dp_phy_test_params *);
460:	u8 drm_dp_link_rate_to_bw_code(int);
397:	void drm_dp_link_train_channel_eq_delay(const struct drm_dp_aux *, const u8 *);
373:	void drm_dp_link_train_clock_recovery_delay(const struct drm_dp_aux *, const u8 *);
2547:	int drm_dp_lttpr_count(const u8 *);
449:	void drm_dp_lttpr_link_train_channel_eq_delay(const struct drm_dp_aux *, const u8 *);
438:	void drm_dp_lttpr_link_train_clock_recovery_delay(void);
2584:	int drm_dp_lttpr_max_lane_count(const u8 *);
2570:	int drm_dp_lttpr_max_link_rate(const u8 *);
2616:	bool drm_dp_lttpr_pre_emphasis_level_3_supported(const u8 *);
2600:	bool drm_dp_lttpr_voltage_swing_level_3_supported(const u8 *);
3403:	int drm_dp_pcon_convert_rgb_to_ycbcr(struct drm_dp_aux *, u8);
3275:	int drm_dp_pcon_dsc_bpp_incr(const u8 *);
3259:	int drm_dp_pcon_dsc_max_slice_width(const u8 *);
3221:	int drm_dp_pcon_dsc_max_slices(const u8 *);
3199:	bool drm_dp_pcon_enc_is_dsc_1_2(const u8 *);
2979:	int drm_dp_pcon_frl_configure_1(struct drm_dp_aux *, int, u8);
3039:	int drm_dp_pcon_frl_configure_2(struct drm_dp_aux *, int, u8);
3082:	int drm_dp_pcon_frl_enable(struct drm_dp_aux *);
2930:	int drm_dp_pcon_frl_prepare(struct drm_dp_aux *, bool);
3161:	void drm_dp_pcon_hdmi_frl_link_error_count(struct drm_dp_aux *, struct drm_connector *);
3110:	bool drm_dp_pcon_hdmi_link_active(struct drm_dp_aux *);
3134:	int drm_dp_pcon_hdmi_link_mode(struct drm_dp_aux *, u8 *);
2951:	bool drm_dp_pcon_is_frl_ready(struct drm_dp_aux *);
3329:	int drm_dp_pcon_pps_default(struct drm_dp_aux *);
3349:	int drm_dp_pcon_pps_override_buf(struct drm_dp_aux *, u8 *);
3374:	int drm_dp_pcon_pps_override_param(struct drm_dp_aux *, u8 *);
3064:	int drm_dp_pcon_reset_frl_config(struct drm_dp_aux *);
416:	const char *drm_dp_phy_name(enum drm_dp_phy);
2144:	int drm_dp_psr_setup_time(const u8 *);
346:	int drm_dp_read_channel_eq_delay(struct drm_dp_aux *, const u8 *, enum drm_dp_phy, bool);
339:	int drm_dp_read_clock_recovery_delay(struct drm_dp_aux *, const u8 *, enum drm_dp_phy, bool);
2300:	int drm_dp_read_desc(struct drm_dp_aux *, struct drm_dp_desc *, bool);
971:	int drm_dp_read_downstream_info(struct drm_dp_aux *, const u8 *, u8 *);
937:	int drm_dp_read_dpcd_caps(struct drm_dp_aux *, u8 *);
2499:	int drm_dp_read_lttpr_common_caps(struct drm_dp_aux *, const u8 *, u8 *);
2520:	int drm_dp_read_lttpr_phy_caps(struct drm_dp_aux *, const u8 *, enum drm_dp_phy, u8 *);
1560:	int drm_dp_read_sink_count(struct drm_dp_aux *);
1539:	bool drm_dp_read_sink_count_cap(struct drm_connector *, const u8 *, const struct drm_dp_desc *);
2029:	void drm_dp_remote_aux_init(struct drm_dp_aux *);
821:	bool drm_dp_send_real_edid_checksum(struct drm_dp_aux *, u8);
2682:	int drm_dp_set_phy_test_pattern(struct drm_dp_aux *, struct drm_dp_phy_test_params *, u8);
1512:	void drm_dp_set_subconnector_property(struct drm_connector *, enum drm_connector_status, const u8 *, const u8 *);
2174:	int drm_dp_start_crc(struct drm_dp_aux *, struct drm_crtc *);
2201:	int drm_dp_stop_crc(struct drm_dp_aux *);
1457:	enum drm_mode_subconnector drm_dp_subconnector_type(const u8 *, const u8 *);
2865:	void drm_dp_vsc_sdp_log(const char *, struct device *, const struct drm_dp_vsc_sdp *);
3576:	int drm_edp_backlight_disable(struct drm_dp_aux *, const struct drm_edp_backlight_info *);
3515:	int drm_edp_backlight_enable(struct drm_dp_aux *, const struct drm_edp_backlight_info *, const u16);
3744:	int drm_edp_backlight_init(struct drm_dp_aux *, struct drm_edp_backlight_info *, u16, const u8 *, u16 *, u8 *);
3436:	int drm_edp_backlight_set_level(struct drm_dp_aux *, const struct drm_edp_backlight_info *, u16);
3842:	int drm_panel_dp_aux_backlight(struct drm_panel *, struct drm_dp_aux *);
250:	static int __128b132b_channel_eq_delay_us(const struct drm_dp_aux *, u8);
238:	static int __8b10b_channel_eq_delay_us(const struct drm_dp_aux *, u8);
226:	static int __8b10b_clock_recovery_delay_us(const struct drm_dp_aux *, u8);
3791:	static int dp_aux_backlight_update_status(struct backlight_device *);
1982:	static void drm_dp_aux_crc_work(struct work_struct *);
520:	static int drm_dp_dpcd_access(struct drm_dp_aux *, u8, unsigned int, void *, size_t);
1692:	static int drm_dp_i2c_do_msg(struct drm_dp_aux *, struct drm_dp_aux_msg *);
1579:	static u32 drm_dp_i2c_functionality(struct i2c_adapter *);
1849:	static int drm_dp_i2c_xfer(struct i2c_adapter *, struct i2c_msg *, int);
3466:	static int drm_edp_backlight_set_enable(struct drm_dp_aux *, const struct drm_edp_backlight_info *, bool);
1929:	static void lock_bus(struct i2c_adapter *, unsigned int);
1934:	static int trylock_bus(struct i2c_adapter *, unsigned int);
1939:	static void unlock_bus(struct i2c_adapter *, unsigned int);

File drivers/gpu/drm/display/drm_dp_mst_topology.c:
1690:	struct drm_dp_mst_atomic_payload *drm_atomic_get_mst_payload_state(struct drm_dp_mst_topology_state *, struct drm_dp_mst_port *);
5350:	struct drm_dp_mst_topology_state *drm_atomic_get_mst_topology_state(struct drm_atomic_state *, struct drm_dp_mst_topology_mgr *);
5372:	struct drm_dp_mst_topology_state *drm_atomic_get_new_mst_topology_state(struct drm_atomic_state *, struct drm_dp_mst_topology_mgr *);
3304:	int drm_dp_add_payload_part1(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_topology_state *, struct drm_dp_mst_atomic_payload *);
3392:	int drm_dp_add_payload_part2(struct drm_dp_mst_topology_mgr *, struct drm_atomic_state *, struct drm_dp_mst_atomic_payload *);
4197:	int drm_dp_atomic_find_time_slots(struct drm_atomic_state *, struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *, int);
4286:	int drm_dp_atomic_release_time_slots(struct drm_atomic_state *, struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *);
4618:	int drm_dp_calc_pbn_mode(int, int, bool);
4579:	int drm_dp_check_act_status(struct drm_dp_mst_topology_mgr *);
455:	int drm_dp_decode_sideband_req(const struct drm_dp_sideband_msg_tx *, struct drm_dp_sideband_msg_req_body *);
597:	void drm_dp_dump_sideband_msg_req_body(const struct drm_dp_sideband_msg_req_body *, int, struct drm_printer *);
332:	void drm_dp_encode_sideband_req(const struct drm_dp_sideband_msg_req_body *, struct drm_dp_sideband_msg_tx *);
3550:	int drm_dp_get_vc_payload_bw(const struct drm_dp_mst_topology_mgr *, int, int);
5179:	int drm_dp_mst_add_affected_dsc_crtcs(struct drm_atomic_state *, struct drm_dp_mst_topology_mgr *);
5303:	int drm_dp_mst_atomic_check(struct drm_atomic_state *);
5240:	int drm_dp_mst_atomic_enable_dsc(struct drm_atomic_state *, struct drm_dp_mst_port *, int, bool);
4353:	int drm_dp_mst_atomic_setup_commit(struct drm_atomic_state *);
4403:	void drm_dp_mst_atomic_wait_for_dependencies(struct drm_atomic_state *);
2248:	void drm_dp_mst_connector_early_unregister(struct drm_connector *, struct drm_dp_mst_port *);
2228:	int drm_dp_mst_connector_late_register(struct drm_connector *, struct drm_dp_mst_port *);
4093:	int drm_dp_mst_detect_port(struct drm_connector *, struct drm_modeset_acquire_ctx *, struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *);
2141:	ssize_t drm_dp_mst_dpcd_read(struct drm_dp_aux *, unsigned int, void *, size_t);
2164:	ssize_t drm_dp_mst_dpcd_write(struct drm_dp_aux *, unsigned int, void *, size_t);
5752:	struct drm_dp_aux *drm_dp_mst_dsc_aux_for_port(struct drm_dp_mst_port *);
4737:	void drm_dp_mst_dump_topology(struct seq_file *, struct drm_dp_mst_topology_mgr *);
4149:	struct edid *drm_dp_mst_get_edid(struct drm_connector *, struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *);
1497:	void drm_dp_mst_get_port_malloc(struct drm_dp_mst_port *);
4056:	int drm_dp_mst_hpd_irq(struct drm_dp_mst_topology_mgr *, u8 *, bool *);
1515:	void drm_dp_mst_put_port_malloc(struct drm_dp_mst_port *);
4455:	int drm_dp_mst_root_conn_atomic_check(struct drm_connector_state *, struct drm_dp_mst_topology_mgr *);
5455:	void drm_dp_mst_topology_mgr_destroy(struct drm_dp_mst_topology_mgr *);
5393:	int drm_dp_mst_topology_mgr_init(struct drm_dp_mst_topology_mgr *, struct drm_device *, struct drm_dp_aux *, int, int, int);
3715:	int drm_dp_mst_topology_mgr_resume(struct drm_dp_mst_topology_mgr *, bool);
3592:	int drm_dp_mst_topology_mgr_set_mst(struct drm_dp_mst_topology_mgr *, bool);
3678:	void drm_dp_mst_topology_mgr_suspend(struct drm_dp_mst_topology_mgr *);
4497:	void drm_dp_mst_update_slots(struct drm_dp_mst_topology_state *, uint8_t);
3569:	bool drm_dp_read_mst_cap(struct drm_dp_aux *, const u8 *);
3346:	void drm_dp_remove_payload(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_topology_state *, struct drm_dp_mst_atomic_payload *);
3166:	int drm_dp_send_power_updown_phy(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *, bool);
3200:	int drm_dp_send_query_stream_enc_status(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *, struct drm_dp_query_stream_enc_status_ack_reply *);
2615:	static int drm_dp_check_and_send_link_address(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_branch *);
4885:	static void drm_dp_delayed_destroy_work(struct work_struct *);
4513:	static int drm_dp_dpcd_write_payload(struct drm_dp_mst_topology_mgr *, int, u8, u8);
1335:	static void drm_dp_free_mst_branch_device(struct kref *);
3058:	static struct drm_dp_mst_port *drm_dp_get_last_connected_port_to_mstb(struct drm_dp_mst_branch *);
2530:	static struct drm_dp_mst_branch *drm_dp_get_mst_branch_device(struct drm_dp_mst_topology_mgr *, u8, u8 *);
3775:	static bool drm_dp_get_one_sb_msg(struct drm_dp_mst_topology_mgr *, bool, struct drm_dp_mst_branch **);
231:	static u8 drm_dp_msg_data_crc4(const uint8_t *, u8);
2301:	static struct drm_dp_mst_port *drm_dp_mst_add_port(struct drm_device *, struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_branch *, u8);
5027:	static int drm_dp_mst_atomic_check_mstb_bw_limit(struct drm_dp_mst_branch *, struct drm_dp_mst_topology_state *);
4985:	static void drm_dp_mst_destroy_state(struct drm_private_obj *, struct drm_private_state *);
4672:	static void drm_dp_mst_dump_mstb(struct seq_file *, struct drm_dp_mst_branch *);
687:	static void drm_dp_mst_dump_sideband_msg_tx(struct drm_printer *, const struct drm_dp_sideband_msg_tx *);
4943:	static struct drm_private_state *drm_dp_mst_duplicate_state(struct drm_private_obj *);
5636:	static u32 drm_dp_mst_i2c_functionality(struct i2c_adapter *);
5609:	static int drm_dp_mst_i2c_xfer(struct i2c_adapter *, struct i2c_msg *, int);
5701:	static bool drm_dp_mst_is_virtual_dpcd(struct drm_dp_mst_port *);
2644:	static void drm_dp_mst_link_probe_work(struct work_struct *);
2258:	static void drm_dp_mst_port_add_connector(struct drm_dp_mst_branch *, struct drm_dp_mst_port *);
1924:	static struct drm_dp_mst_branch *drm_dp_mst_topology_get_mstb_validated_locked(struct drm_dp_mst_branch *, struct drm_dp_mst_branch *);
1963:	static struct drm_dp_mst_port *drm_dp_mst_topology_get_port_validated_locked(struct drm_dp_mst_branch *, struct drm_dp_mst_port *);
3659:	static void drm_dp_mst_topology_mgr_invalidate_mstb(struct drm_dp_mst_branch *);
1801:	static void drm_dp_mst_topology_put_mstb(struct drm_dp_mst_branch *);
1912:	static void drm_dp_mst_topology_put_port(struct drm_dp_mst_port *);
1746:	static int drm_dp_mst_topology_try_get_mstb(struct drm_dp_mst_branch *);
1861:	static int drm_dp_mst_topology_try_get_port(struct drm_dp_mst_port *);
3955:	static void drm_dp_mst_up_req_work(struct work_struct *);
1252:	static int drm_dp_mst_wait_tx_reply(struct drm_dp_mst_branch *, struct drm_dp_sideband_msg_tx *);
3107:	static int drm_dp_payload_send_msg(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *, int, int);
2054:	static int drm_dp_port_set_pdt(struct drm_dp_mst_port *, u8, bool);
3470:	static int drm_dp_send_dpcd_write(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_port *, int, int, u8 *);
3008:	static int drm_dp_send_enum_path_resources(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_branch *, struct drm_dp_mst_port *);
2905:	static int drm_dp_send_link_address(struct drm_dp_mst_topology_mgr *, struct drm_dp_mst_branch *);
4829:	static void drm_dp_tx_work(struct work_struct *);
2570:	static struct drm_dp_mst_branch *get_mst_branch_device_by_guid_helper(struct drm_dp_mst_branch *, const uint8_t *);
2842:	static void process_single_down_tx_qlock(struct drm_dp_mst_topology_mgr *);
2781:	static int process_single_tx_qlock(struct drm_dp_mst_topology_mgr *, struct drm_dp_sideband_msg_tx *, bool);

File drivers/gpu/drm/display/drm_dsc_helper.c:
283:	int drm_dsc_compute_rc_parameters(struct drm_dsc_config *);
44:	void drm_dsc_dp_pps_header_init(struct dp_sdp_header *);
61:	int drm_dsc_dp_rc_buffer_size(u8, u8);
97:	void drm_dsc_pps_payload_pack(struct drm_dsc_picture_parameter_set *, const struct drm_dsc_config *);

File drivers/gpu/drm/display/drm_hdcp_helper.c:
355:	int drm_connector_attach_content_protection_property(struct drm_connector *, bool);
316:	const char *drm_get_content_protection_name(int);
322:	const char *drm_get_hdcp_content_type_name(int);
283:	int drm_hdcp_check_ksvs_revoked(struct drm_device *, u8 *, u32);
407:	void drm_hdcp_update_content_protection(struct drm_connector *, u64);

File drivers/gpu/drm/display/drm_hdmi_helper.c:
158:	void drm_hdmi_avi_infoframe_bars(struct hdmi_avi_infoframe *, const struct drm_connector_state *);
131:	void drm_hdmi_avi_infoframe_colorimetry(struct hdmi_avi_infoframe *, const struct drm_connector_state *);
176:	void drm_hdmi_avi_infoframe_content_type(struct hdmi_avi_infoframe *, const struct drm_connector_state *);
25:	int drm_hdmi_infoframe_set_hdr_metadata(struct hdmi_drm_infoframe *, const struct drm_connector_state *);

File drivers/gpu/drm/display/drm_scdc_helper.c:
151:	bool drm_scdc_get_scrambling_status(struct i2c_adapter *);
67:	ssize_t drm_scdc_read(struct i2c_adapter *, u8, void *, size_t);
233:	bool drm_scdc_set_high_tmds_clock_ratio(struct i2c_adapter *, bool);
178:	bool drm_scdc_set_scrambling(struct i2c_adapter *, bool);
107:	ssize_t drm_scdc_write(struct i2c_adapter *, u8, const void *, size_t);

File drivers/gpu/drm/drm_aperture.c:
146:	int devm_aperture_acquire_from_firmware(struct drm_device *, resource_size_t, resource_size_t);
173:	int drm_aperture_remove_conflicting_framebuffers(resource_size_t, resource_size_t, bool, const struct drm_driver *);
192:	int drm_aperture_remove_conflicting_pci_framebuffers(struct pci_dev *, const struct drm_driver *);

File drivers/gpu/drm/drm_atomic.c:
1476:	int __drm_atomic_helper_disable_plane(struct drm_plane *, struct drm_plane_state *);
1568:	int __drm_atomic_helper_set_config(struct drm_mode_set *, struct drm_atomic_state *);
299:	void __drm_atomic_state_free(struct kref *);
49:	void __drm_crtc_commit_free(struct kref *);
1217:	int drm_atomic_add_affected_connectors(struct drm_atomic_state *, struct drm_crtc *);
1281:	int drm_atomic_add_affected_planes(struct drm_atomic_state *, struct drm_crtc *);
1172:	int drm_atomic_add_encoder_bridges(struct drm_atomic_state *, struct drm_encoder *);
1316:	int drm_atomic_check_only(struct drm_atomic_state *);
1427:	int drm_atomic_commit(struct drm_atomic_state *);
1773:	void drm_atomic_debugfs_init(struct drm_minor *);
1098:	struct drm_bridge_state *drm_atomic_get_bridge_state(struct drm_atomic_state *, struct drm_bridge *);
1003:	struct drm_connector_state *drm_atomic_get_connector_state(struct drm_atomic_state *, struct drm_connector *);
337:	struct drm_crtc_state *drm_atomic_get_crtc_state(struct drm_atomic_state *, struct drm_crtc *);
1142:	struct drm_bridge_state *drm_atomic_get_new_bridge_state(struct drm_atomic_state *, struct drm_bridge *);
971:	struct drm_connector *drm_atomic_get_new_connector_for_encoder(struct drm_atomic_state *, struct drm_encoder *);
905:	struct drm_private_state *drm_atomic_get_new_private_obj_state(struct drm_atomic_state *, struct drm_private_obj *);
1120:	struct drm_bridge_state *drm_atomic_get_old_bridge_state(struct drm_atomic_state *, struct drm_bridge *);
937:	struct drm_connector *drm_atomic_get_old_connector_for_encoder(struct drm_atomic_state *, struct drm_encoder *);
883:	struct drm_private_state *drm_atomic_get_old_private_obj_state(struct drm_atomic_state *, struct drm_private_obj *);
518:	struct drm_plane_state *drm_atomic_get_plane_state(struct drm_atomic_state *, struct drm_plane *);
828:	struct drm_private_state *drm_atomic_get_private_obj_state(struct drm_atomic_state *, struct drm_private_obj *);
1460:	int drm_atomic_nonblocking_commit(struct drm_atomic_state *);
1663:	void drm_atomic_print_new_state(const struct drm_atomic_state *, struct drm_printer *);
806:	void drm_atomic_private_obj_fini(struct drm_private_obj *);
782:	void drm_atomic_private_obj_init(struct drm_device *, struct drm_private_obj *, struct drm_private_state *, const struct drm_private_state_funcs *);
161:	struct drm_atomic_state *drm_atomic_state_alloc(struct drm_device *);
280:	void drm_atomic_state_clear(struct drm_atomic_state *);
190:	void drm_atomic_state_default_clear(struct drm_atomic_state *);
106:	void drm_atomic_state_default_release(struct drm_atomic_state *);
125:	int drm_atomic_state_init(struct drm_device *, struct drm_atomic_state *);
69:	int drm_crtc_commit_wait(struct drm_crtc_commit *);
1750:	void drm_state_dump(struct drm_device *, struct drm_printer *);
1697:	static void __drm_state_dump(struct drm_device *, struct drm_printer *, bool);
1065:	static void drm_atomic_connector_print_state(struct drm_printer *, const struct drm_connector_state *);
431:	static void drm_atomic_crtc_print_state(struct drm_printer *, const struct drm_crtc_state *);
707:	static void drm_atomic_plane_print_state(struct drm_printer *, const struct drm_plane_state *);
1757:	static int drm_state_info(struct seq_file *, void *);

File drivers/gpu/drm/drm_atomic_helper.c:
1805:	int drm_atomic_helper_async_check(struct drm_device *, struct drm_atomic_state *);
1889:	void drm_atomic_helper_async_commit(struct drm_device *, struct drm_atomic_state *);
3669:	u32 *drm_atomic_helper_bridge_propagate_bus_fmt(struct drm_bridge *, struct drm_bridge_state *, struct drm_crtc_state *, struct drm_connector_state *, u32, unsigned int *);
1304:	void drm_atomic_helper_calc_timestamping_constants(struct drm_atomic_state *);
1053:	int drm_atomic_helper_check(struct drm_device *, struct drm_atomic_state *);
939:	int drm_atomic_helper_check_crtc_primary_plane(struct drm_crtc_state *);
615:	int drm_atomic_helper_check_modeset(struct drm_device *, struct drm_atomic_state *);
848:	int drm_atomic_helper_check_plane_state(struct drm_plane_state *, const struct drm_crtc_state *, int, int, bool, bool);
974:	int drm_atomic_helper_check_planes(struct drm_device *, struct drm_atomic_state *);
800:	int drm_atomic_helper_check_wb_encoder_state(struct drm_encoder *, struct drm_connector_state *);
2844:	void drm_atomic_helper_cleanup_planes(struct drm_device *, struct drm_atomic_state *);
1942:	int drm_atomic_helper_commit(struct drm_device *, struct drm_atomic_state *, bool);
2473:	void drm_atomic_helper_commit_cleanup_done(struct drm_atomic_state *);
3449:	int drm_atomic_helper_commit_duplicated_state(struct drm_atomic_state *, struct drm_modeset_acquire_ctx *);
2428:	void drm_atomic_helper_commit_hw_done(struct drm_atomic_state *);
1394:	void drm_atomic_helper_commit_modeset_disables(struct drm_device *, struct drm_atomic_state *);
1441:	void drm_atomic_helper_commit_modeset_enables(struct drm_device *, struct drm_atomic_state *);
2638:	void drm_atomic_helper_commit_planes(struct drm_device *, struct drm_atomic_state *, uint32_t);
2742:	void drm_atomic_helper_commit_planes_on_crtc(struct drm_crtc_state *);
1680:	void drm_atomic_helper_commit_tail(struct drm_atomic_state *);
1710:	void drm_atomic_helper_commit_tail_rpm(struct drm_atomic_state *);
3201:	int drm_atomic_helper_disable_all(struct drm_device *, struct drm_modeset_acquire_ctx *);
3102:	int drm_atomic_helper_disable_plane(struct drm_plane *, struct drm_modeset_acquire_ctx *);
2804:	void drm_atomic_helper_disable_planes_on_crtc(struct drm_crtc_state *, bool);
3315:	struct drm_atomic_state *drm_atomic_helper_duplicate_state(struct drm_device *, struct drm_modeset_acquire_ctx *);
2390:	void drm_atomic_helper_fake_vblank(struct drm_atomic_state *);
3570:	int drm_atomic_helper_page_flip(struct drm_crtc *, struct drm_framebuffer *, struct drm_pending_vblank_event *, uint32_t, struct drm_modeset_acquire_ctx *);
3613:	int drm_atomic_helper_page_flip_target(struct drm_crtc *, struct drm_framebuffer *, struct drm_pending_vblank_event *, uint32_t, uint32_t, struct drm_modeset_acquire_ctx *);
2513:	int drm_atomic_helper_prepare_planes(struct drm_device *, struct drm_atomic_state *);
3495:	int drm_atomic_helper_resume(struct drm_device *, struct drm_atomic_state *);
3150:	int drm_atomic_helper_set_config(struct drm_mode_set *, struct drm_modeset_acquire_ctx *);
2209:	int drm_atomic_helper_setup_commit(struct drm_atomic_state *, bool);
3273:	void drm_atomic_helper_shutdown(struct drm_device *);
3403:	struct drm_atomic_state *drm_atomic_helper_suspend(struct drm_device *);
2914:	int drm_atomic_helper_swap_state(struct drm_atomic_state *, bool);
1236:	void drm_atomic_helper_update_legacy_modeset_state(struct drm_device *, struct drm_atomic_state *);
3045:	int drm_atomic_helper_update_plane(struct drm_plane *, struct drm_crtc *, struct drm_framebuffer *, int, int, unsigned int, unsigned int, uint32_t, uint32_t, uint32_t, uint32_t, struct drm_modeset_acquire_ctx *);
2335:	void drm_atomic_helper_wait_for_dependencies(struct drm_atomic_state *);
1535:	int drm_atomic_helper_wait_for_fences(struct drm_device *, struct drm_atomic_state *, bool);
1641:	void drm_atomic_helper_wait_for_flip_done(struct drm_device *, struct drm_atomic_state *);
1582:	void drm_atomic_helper_wait_for_vblanks(struct drm_device *, struct drm_atomic_state *);
1731:	static void commit_tail(struct drm_atomic_state *);
1784:	static void commit_work(struct work_struct *);
2142:	static struct drm_crtc_commit *crtc_or_fake_commit(struct drm_atomic_state *, struct drm_crtc *);
104:	static int handle_conflicting_encoders(struct drm_atomic_state *, bool);
411:	static int mode_fixup(struct drm_atomic_state *);
3514:	static int page_flip_common(struct drm_atomic_state *, struct drm_crtc *, struct drm_framebuffer *, struct drm_pending_vblank_event *, uint32_t);
2122:	static void release_crtc_commit(struct completion *);

File drivers/gpu/drm/drm_atomic_state_helper.c:
595:	void __drm_atomic_helper_bridge_duplicate_state(struct drm_bridge *, struct drm_bridge_state *);
657:	void __drm_atomic_helper_bridge_reset(struct drm_bridge *, struct drm_bridge_state *);
541:	void __drm_atomic_helper_connector_destroy_state(struct drm_connector_state *);
493:	void __drm_atomic_helper_connector_duplicate_state(struct drm_connector *, struct drm_connector_state *);
435:	void __drm_atomic_helper_connector_reset(struct drm_connector *, struct drm_connector_state *);
415:	void __drm_atomic_helper_connector_state_reset(struct drm_connector_state *, struct drm_connector *);
193:	void __drm_atomic_helper_crtc_destroy_state(struct drm_crtc_state *);
133:	void __drm_atomic_helper_crtc_duplicate_state(struct drm_crtc *, struct drm_crtc_state *);
93:	void __drm_atomic_helper_crtc_reset(struct drm_crtc *, struct drm_crtc_state *);
73:	void __drm_atomic_helper_crtc_state_reset(struct drm_crtc_state *, struct drm_crtc *);
375:	void __drm_atomic_helper_plane_destroy_state(struct drm_plane_state *);
330:	void __drm_atomic_helper_plane_duplicate_state(struct drm_plane *, struct drm_plane_state *);
293:	void __drm_atomic_helper_plane_reset(struct drm_plane *, struct drm_plane_state *);
245:	void __drm_atomic_helper_plane_state_reset(struct drm_plane_state *, struct drm_plane *);
580:	void __drm_atomic_helper_private_obj_duplicate_state(struct drm_private_obj *, struct drm_private_state *);
640:	void drm_atomic_helper_bridge_destroy_state(struct drm_bridge *, struct drm_bridge_state *);
614:	struct drm_bridge_state *drm_atomic_helper_bridge_duplicate_state(struct drm_bridge *);
675:	struct drm_bridge_state *drm_atomic_helper_bridge_reset(struct drm_bridge *);
564:	void drm_atomic_helper_connector_destroy_state(struct drm_connector *, struct drm_connector_state *);
517:	struct drm_connector_state *drm_atomic_helper_connector_duplicate_state(struct drm_connector *);
453:	void drm_atomic_helper_connector_reset(struct drm_connector *);
472:	void drm_atomic_helper_connector_tv_margins_reset(struct drm_connector *);
229:	void drm_atomic_helper_crtc_destroy_state(struct drm_crtc *, struct drm_crtc_state *);
170:	struct drm_crtc_state *drm_atomic_helper_crtc_duplicate_state(struct drm_crtc *);
113:	void drm_atomic_helper_crtc_reset(struct drm_crtc *);
398:	void drm_atomic_helper_plane_destroy_state(struct drm_plane *, struct drm_plane_state *);
352:	struct drm_plane_state *drm_atomic_helper_plane_duplicate_state(struct drm_plane *);
310:	void drm_atomic_helper_plane_reset(struct drm_plane *);

File drivers/gpu/drm/drm_atomic_uapi.c:
921:	int drm_atomic_connector_commit_dpms(struct drm_atomic_state *, struct drm_connector *, int);
861:	int drm_atomic_get_property(struct drm_mode_object *, struct drm_property *, uint64_t *);
273:	int drm_atomic_set_crtc_for_connector(struct drm_connector_state *, struct drm_crtc *);
187:	int drm_atomic_set_crtc_for_plane(struct drm_plane_state *, struct drm_crtc *);
239:	void drm_atomic_set_fb_for_plane(struct drm_plane_state *, struct drm_framebuffer *);
66:	int drm_atomic_set_mode_for_crtc(struct drm_crtc_state *, const struct drm_display_mode *);
120:	int drm_atomic_set_mode_prop_for_crtc(struct drm_crtc_state *, struct drm_property_blob *);
971:	int drm_atomic_set_property(struct drm_atomic_state *, struct drm_file *, struct drm_mode_object *, struct drm_property *, uint64_t);
1285:	int drm_mode_atomic_ioctl(struct drm_device *, void *, struct drm_file *);
1235:	static void complete_signaling(struct drm_device *, struct drm_atomic_state *, struct drm_out_fence_state *, unsigned int, bool);
366:	static int drm_atomic_replace_property_blob_from_id(struct drm_device *, struct drm_property_blob **, uint64_t, ssize_t, ssize_t, bool *);
645:	static int drm_atomic_set_writeback_fb_for_connector(struct drm_connector_state *, struct drm_framebuffer *);
1112:	static int prepare_signaling(struct drm_device *, struct drm_atomic_state *, struct drm_mode_atomic *, struct drm_file *, struct drm_out_fence_state **, unsigned int *);
336:	static int set_out_fence_for_connector(struct drm_atomic_state *, struct drm_connector *, s32 *);

File drivers/gpu/drm/drm_auth.c:
114:	int drm_authmagic(struct drm_device *, void *, struct drm_file *);
298:	int drm_dropmaster_ioctl(struct drm_device *, void *, struct drm_file *);
408:	struct drm_master *drm_file_get_master(struct drm_file *);
94:	int drm_getmagic(struct drm_device *, void *, struct drm_file *);
82:	bool drm_is_current_master(struct drm_file *);
133:	struct drm_master *drm_master_create(struct drm_device *);
391:	struct drm_master *drm_master_get(struct drm_master *);
455:	bool drm_master_internal_acquire(struct drm_device *);
468:	void drm_master_internal_release(struct drm_device *);
333:	int drm_master_open(struct drm_file *);
447:	void drm_master_put(struct drm_master **);
354:	void drm_master_release(struct drm_file *);
247:	int drm_setmaster_ioctl(struct drm_device *, void *, struct drm_file *);
165:	static int drm_new_set_master(struct drm_device *, struct drm_file *);
155:	static void drm_set_master(struct drm_device *, struct drm_file *, bool);

File drivers/gpu/drm/drm_blend.c:
511:	int drm_atomic_normalize_zpos(struct drm_device *, struct drm_atomic_state *);
219:	int drm_plane_create_alpha_property(struct drm_plane *);
572:	int drm_plane_create_blend_mode_property(struct drm_plane *, unsigned int);
272:	int drm_plane_create_rotation_property(struct drm_plane *, unsigned int, unsigned int);
408:	int drm_plane_create_zpos_immutable_property(struct drm_plane *, unsigned int);
369:	int drm_plane_create_zpos_property(struct drm_plane *, unsigned int, unsigned int, unsigned int);
325:	unsigned int drm_rotation_simplify(unsigned int, unsigned int);
431:	static int drm_atomic_state_zpos_cmp(const void *, const void *);

File drivers/gpu/drm/drm_bridge.c:
190:	int devm_drm_bridge_add(struct device *, struct drm_bridge *);
1092:	int drm_atomic_bridge_chain_check(struct drm_bridge *, struct drm_crtc_state *, struct drm_connector_state *);
663:	void drm_atomic_bridge_chain_disable(struct drm_bridge *, struct drm_atomic_state *);
791:	void drm_atomic_bridge_chain_enable(struct drm_bridge *, struct drm_atomic_state *);
707:	void drm_atomic_bridge_chain_post_disable(struct drm_bridge *, struct drm_atomic_state *);
748:	void drm_atomic_bridge_chain_pre_enable(struct drm_bridge *, struct drm_atomic_state *);
164:	void drm_bridge_add(struct drm_bridge *);
260:	int drm_bridge_attach(struct drm_encoder *, struct drm_bridge *, struct drm_bridge *, enum drm_bridge_attach_flags);
522:	void drm_bridge_chain_disable(struct drm_bridge *);
636:	void drm_bridge_chain_enable(struct drm_bridge *);
448:	bool drm_bridge_chain_mode_fixup(struct drm_bridge *, const struct drm_display_mode *, struct drm_display_mode *);
579:	void drm_bridge_chain_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
487:	enum drm_mode_status drm_bridge_chain_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
552:	void drm_bridge_chain_post_disable(struct drm_bridge *);
607:	void drm_bridge_chain_pre_enable(struct drm_bridge *);
326:	void drm_bridge_detach(struct drm_bridge *);
1148:	enum drm_connector_status drm_bridge_detect(struct drm_bridge *);
1193:	struct edid *drm_bridge_get_edid(struct drm_bridge *, struct drm_connector *);
1171:	int drm_bridge_get_modes(struct drm_bridge *, struct drm_connector *);
1257:	void drm_bridge_hpd_disable(struct drm_bridge *);
1221:	void drm_bridge_hpd_enable(struct drm_bridge *, void (*)(void *, enum drm_connector_status), void *);
1283:	void drm_bridge_hpd_notify(struct drm_bridge *, enum drm_connector_status);
202:	void drm_bridge_remove(struct drm_bridge *);
1303:	struct drm_bridge *of_drm_find_bridge(struct device_node *);
223:	static void drm_bridge_atomic_destroy_priv_state(struct drm_private_obj *, struct drm_private_state *);
213:	static struct drm_private_state *drm_bridge_atomic_duplicate_priv_state(struct drm_private_obj *);
174:	static void drm_bridge_remove_void(void *);
844:	static int select_bus_fmt_recursive(struct drm_bridge *, struct drm_bridge *, struct drm_crtc_state *, struct drm_connector_state *, u32);

File drivers/gpu/drm/drm_bridge_connector.c:
158:	void drm_bridge_connector_disable_hpd(struct drm_connector *);
138:	void drm_bridge_connector_enable_hpd(struct drm_connector *);
328:	struct drm_connector *drm_bridge_connector_init(struct drm_device *, struct drm_encoder *);
219:	static void drm_bridge_connector_debugfs_init(struct drm_connector *, struct dentry *);
202:	static void drm_bridge_connector_destroy(struct drm_connector *);
174:	static enum drm_connector_status drm_bridge_connector_detect(struct drm_connector *, bool);
275:	static int drm_bridge_connector_get_modes(struct drm_connector *);
110:	static void drm_bridge_connector_hpd_cb(void *, enum drm_connector_status);

File drivers/gpu/drm/drm_bufs.c:
1317:	int __drm_legacy_infobufs(struct drm_device *, void *, int *, int (*)(void *, int, struct drm_buf_entry *));
1508:	int __drm_legacy_mapbufs(struct drm_device *, void *, int *, void **, int (*)(void *, int, unsigned long, struct drm_buf *), struct drm_file *);
1273:	int drm_legacy_addbufs(struct drm_device *, void *, struct drm_file *);
882:	int drm_legacy_addbufs_pci(struct drm_device *, struct drm_buf_desc *);
379:	int drm_legacy_addmap(struct drm_device *, resource_size_t, unsigned int, enum drm_map_type, enum drm_map_flags, struct drm_local_map **);
416:	int drm_legacy_addmap_ioctl(struct drm_device *, void *, struct drm_file *);
1607:	int drm_legacy_dma_ioctl(struct drm_device *, void *, struct drm_file *);
393:	struct drm_local_map *drm_legacy_findmap(struct drm_device *, unsigned int);
1454:	int drm_legacy_freebufs(struct drm_device *, void *, struct drm_file *);
463:	int drm_legacy_getmap_ioctl(struct drm_device *, void *, struct drm_file *);
1619:	struct drm_local_map *drm_legacy_getsarea(struct drm_device *);
1385:	int drm_legacy_infobufs(struct drm_device *, void *, struct drm_file *);
1597:	int drm_legacy_mapbufs(struct drm_device *, void *, struct drm_file *);
1407:	int drm_legacy_markbufs(struct drm_device *, void *, struct drm_file *);
583:	void drm_legacy_master_rmmaps(struct drm_device *, struct drm_master *);
571:	void drm_legacy_rmmap(struct drm_device *, struct drm_local_map *);
623:	int drm_legacy_rmmap_ioctl(struct drm_device *, void *, struct drm_file *);
516:	int drm_legacy_rmmap_locked(struct drm_device *, struct drm_local_map *);
600:	void drm_legacy_rmmaps(struct drm_device *);
1371:	static int copy_one_buf(void *, int, struct drm_buf_entry *);
147:	static int drm_addmap_core(struct drm_device *, resource_size_t, unsigned int, enum drm_map_type, enum drm_map_flags, struct drm_map_list **);
674:	static void drm_cleanup_buf_error(struct drm_device *, struct drm_buf_entry *);
51:	static struct drm_map_list *drm_find_matching_map(struct drm_device *, struct drm_local_map *);
90:	static int drm_map_handle(struct drm_device *, struct drm_hash_item *, unsigned long, int, int);
1577:	static int map_one_buf(void *, int, unsigned long, struct drm_buf *);

File drivers/gpu/drm/drm_cache.c:
87:	void drm_clflush_pages(struct page **, unsigned long);
128:	void drm_clflush_sg(struct sg_table *);
159:	void drm_clflush_virt_range(void *, unsigned long);
343:	void drm_memcpy_from_wc(struct iosys_map *, const struct iosys_map *, unsigned long);
353:	void drm_memcpy_init_early(void);
183:	bool drm_need_swiotlb(int);

File drivers/gpu/drm/drm_client.c:
312:	int drm_client_buffer_vmap(struct drm_client_buffer *, struct iosys_map *);
344:	void drm_client_buffer_vunmap(struct drm_client_buffer *);
500:	void drm_client_debugfs_init(struct drm_minor *);
193:	void drm_client_dev_hotplug(struct drm_device *);
213:	void drm_client_dev_restore(struct drm_device *);
164:	void drm_client_dev_unregister(struct drm_device *);
414:	struct drm_client_buffer *drm_client_framebuffer_create(struct drm_client_dev *, u32, u32, u32);
437:	void drm_client_framebuffer_delete(struct drm_client_buffer *);
458:	int drm_client_framebuffer_flush(struct drm_client_buffer *, struct drm_rect *);
79:	int drm_client_init(struct drm_device *, struct drm_client_dev *, const char *, const struct drm_client_funcs *);
126:	void drm_client_register(struct drm_client_dev *);
150:	void drm_client_release(struct drm_client_dev *);
234:	static void drm_client_buffer_delete(struct drm_client_buffer *);
481:	static int drm_client_debugfs_internal_clients(struct seq_file *, void *);

File drivers/gpu/drm/drm_client_modeset.c:
1119:	int drm_client_modeset_check(struct drm_client_dev *);
1170:	int drm_client_modeset_commit(struct drm_client_dev *);
1145:	int drm_client_modeset_commit_locked(struct drm_client_dev *);
35:	int drm_client_modeset_create(struct drm_client_dev *);
1220:	int drm_client_modeset_dpms(struct drm_client_dev *, int);
91:	void drm_client_modeset_free(struct drm_client_dev *);
771:	int drm_client_modeset_probe(struct drm_client_dev *, unsigned int, unsigned int);
905:	bool drm_client_rotation(struct drm_mode_set *, unsigned int *);
979:	static int drm_client_modeset_commit_atomic(struct drm_client_dev *, bool, bool);
490:	static int drm_client_pick_crtcs(struct drm_client_dev *, struct drm_connector **, unsigned int, struct drm_crtc **, struct drm_display_mode **, int, int, int);
162:	static struct drm_display_mode *drm_connector_pick_cmdline_mode(struct drm_connector *);

File drivers/gpu/drm/drm_color_mgmt.c:
134:	u64 drm_color_ctm_s31_32_to_qm_n(u64, u32, u32);
602:	int drm_color_lut_check(const struct drm_property_blob *, u32);
164:	void drm_crtc_enable_color_mgmt(struct drm_crtc *, uint, bool, uint);
490:	const char *drm_get_color_encoding_name(enum drm_color_encoding);
505:	const char *drm_get_color_range_name(enum drm_color_range);
206:	int drm_mode_crtc_set_gamma_size(struct drm_crtc *, int);
428:	int drm_mode_gamma_get_ioctl(struct drm_device *, void *, struct drm_file *);
359:	int drm_mode_gamma_set_ioctl(struct drm_device *, void *, struct drm_file *);
527:	int drm_plane_create_color_properties(struct drm_plane *, u32, u32, enum drm_color_encoding, enum drm_color_range);

File drivers/gpu/drm/drm_connector.c:
2281:	bool drm_connector_atomic_hdr_metadata_equal(struct drm_connector_state *, struct drm_connector_state *);
2259:	int drm_connector_attach_colorspace_property(struct drm_connector *);
1563:	int drm_connector_attach_content_type_property(struct drm_connector *);
1509:	void drm_connector_attach_dp_subconnector_property(struct drm_connector *);
460:	void drm_connector_attach_edid_property(struct drm_connector *);
482:	int drm_connector_attach_encoder(struct drm_connector *, struct drm_encoder *);
2238:	int drm_connector_attach_hdr_output_metadata_property(struct drm_connector *);
2205:	int drm_connector_attach_max_bpc_property(struct drm_connector *, int, int);
2478:	void drm_connector_attach_privacy_screen_properties(struct drm_connector *);
2538:	void drm_connector_attach_privacy_screen_provider(struct drm_connector *, struct drm_privacy_screen *);
1877:	int drm_connector_attach_scaling_mode_property(struct drm_connector *, u32);
1581:	void drm_connector_attach_tv_margin_properties(struct drm_connector *);
1843:	int drm_connector_attach_vrr_capable_property(struct drm_connector *);
534:	void drm_connector_cleanup(struct drm_connector *);
2448:	void drm_connector_create_privacy_screen_properties(struct drm_connector *);
1415:	int drm_connector_create_standard_properties(struct drm_device *);
2811:	struct drm_connector *drm_connector_find_by_fwnode(struct fwnode_handle *);
199:	void drm_connector_free_work_fn(struct work_struct *);
514:	bool drm_connector_has_possible_encoder(struct drm_connector *, struct drm_encoder *);
121:	void drm_connector_ida_destroy(void);
113:	void drm_connector_ida_init(void);
352:	int drm_connector_init(struct drm_device *, struct drm_connector *, const struct drm_connector_funcs *, int);
388:	int drm_connector_init_with_ddc(struct drm_device *, struct drm_connector *, const struct drm_connector_funcs *, int, struct i2c_adapter *);
779:	void drm_connector_list_iter_begin(struct drm_device *, struct drm_connector_list_iter *);
854:	void drm_connector_list_iter_end(struct drm_connector_list_iter *);
815:	struct drm_connector *drm_connector_list_iter_next(struct drm_connector_list_iter *);
2846:	void drm_connector_oob_hotplug_event(struct fwnode_handle *);
2598:	int drm_connector_property_set_ioctl(struct drm_device *, void *, struct drm_file *);
607:	int drm_connector_register(struct drm_connector *);
702:	int drm_connector_register_all(struct drm_device *);
2183:	void drm_connector_set_link_status_property(struct drm_connector *, uint64_t);
2580:	int drm_connector_set_obj_prop(struct drm_mode_object *, struct drm_property *, uint64_t);
2417:	int drm_connector_set_orientation_from_panel(struct drm_connector *, struct drm_panel *);
2339:	int drm_connector_set_panel_orientation(struct drm_connector *, enum drm_panel_orientation);
2389:	int drm_connector_set_panel_orientation_with_quirk(struct drm_connector *, enum drm_panel_orientation, int, int);
2103:	int drm_connector_set_path_property(struct drm_connector *, const char *);
2132:	int drm_connector_set_tile_property(struct drm_connector *);
2306:	void drm_connector_set_vrr_capable_property(struct drm_connector *, bool);
663:	void drm_connector_unregister(struct drm_connector *);
691:	void drm_connector_unregister_all(struct drm_device *);
2560:	void drm_connector_update_privacy_screen(const struct drm_connector_state *);
919:	int drm_display_info_set_bus_formats(struct drm_display_info *, const u32 *, unsigned int);
747:	const char *drm_get_connector_force_name(enum drm_connector_force);
730:	const char *drm_get_connector_status_name(enum drm_connector_status);
135:	const char *drm_get_connector_type_name(unsigned int);
1016:	const char *drm_get_dp_subconnector_name(int);
899:	const char *drm_get_dpms_name(int);
977:	const char *drm_get_dvi_i_select_name(int);
984:	const char *drm_get_dvi_i_subconnector_name(int);
887:	const char *drm_get_subpixel_order_name(enum subpixel_order);
994:	const char *drm_get_tv_select_name(int);
1003:	const char *drm_get_tv_subconnector_name(int);
1933:	int drm_mode_create_aspect_ratio_property(struct drm_device *);
2046:	int drm_mode_create_content_type_property(struct drm_device *);
2017:	int drm_mode_create_dp_colorspace_property(struct drm_connector *);
1478:	int drm_mode_create_dvi_i_properties(struct drm_device *);
1988:	int drm_mode_create_hdmi_colorspace_property(struct drm_connector *);
1752:	int drm_mode_create_scaling_mode_property(struct drm_device *);
2072:	int drm_mode_create_suggested_offset_properties(struct drm_device *);
2940:	struct drm_tile_group *drm_mode_create_tile_group(struct drm_device *, const char *);
1612:	int drm_mode_create_tv_margin_properties(struct drm_device *);
1655:	int drm_mode_create_tv_properties(struct drm_device *, unsigned int, const char * const *);
2909:	struct drm_tile_group *drm_mode_get_tile_group(struct drm_device *, const char *);
2657:	int drm_mode_getconnector(struct drm_device *, void *, struct drm_file *);
2892:	void drm_mode_put_tile_group(struct drm_device *, struct drm_tile_group *);
428:	int drmm_connector_init(struct drm_device *, struct drm_connector *, const struct drm_connector_funcs *, int, struct i2c_adapter *);
218:	static int __drm_connector_init(struct drm_device *, struct drm_connector *, const struct drm_connector_funcs *, int, struct i2c_adapter *);
401:	static void drm_connector_cleanup_action(struct drm_device *, void *);
189:	static void drm_connector_free(struct kref *);
2507:	static int drm_connector_privacy_screen_notifier(struct notifier_block *, unsigned long, void *);

File drivers/gpu/drm/drm_context.c:
366:	int drm_legacy_addctx(struct drm_device *, void *, struct drm_file *);
115:	void drm_legacy_ctxbitmap_cleanup(struct drm_device *);
135:	void drm_legacy_ctxbitmap_flush(struct drm_device *, struct drm_file *);
60:	void drm_legacy_ctxbitmap_free(struct drm_device *, int);
98:	void drm_legacy_ctxbitmap_init(struct drm_device *);
417:	int drm_legacy_getctx(struct drm_device *, void *, struct drm_file *);
178:	int drm_legacy_getsareactx(struct drm_device *, void *, struct drm_file *);
467:	int drm_legacy_newctx(struct drm_device *, void *, struct drm_file *);
331:	int drm_legacy_resctx(struct drm_device *, void *, struct drm_file *);
493:	int drm_legacy_rmctx(struct drm_device *, void *, struct drm_file *);
226:	int drm_legacy_setsareactx(struct drm_device *, void *, struct drm_file *);
443:	int drm_legacy_switchctx(struct drm_device *, void *, struct drm_file *);

File drivers/gpu/drm/drm_crtc.c:
456:	void *__drmm_crtc_alloc_with_planes(struct drm_device *, size_t, size_t, struct drm_plane *, struct drm_plane *, const struct drm_crtc_funcs *, const char *, ...);
672:	int drm_crtc_check_viewport(const struct drm_crtc *, int, int, const struct drm_display_mode *, const struct drm_framebuffer *);
496:	void drm_crtc_cleanup(struct drm_crtc *);
196:	struct dma_fence *drm_crtc_create_fence(struct drm_crtc *);
942:	int drm_crtc_create_scaling_filter_property(struct drm_crtc *, unsigned int);
99:	int drm_crtc_force_disable(struct drm_crtc *);
87:	struct drm_crtc *drm_crtc_from_index(struct drm_device *, int);
354:	int drm_crtc_init_with_planes(struct drm_device *, struct drm_crtc *, struct drm_plane *, struct drm_plane *, const struct drm_crtc_funcs *, const char *, ...);
122:	int drm_crtc_register_all(struct drm_device *);
139:	void drm_crtc_unregister_all(struct drm_device *);
913:	int drm_mode_crtc_set_obj_prop(struct drm_mode_object *, struct drm_property *, uint64_t);
539:	int drm_mode_getcrtc(struct drm_device *, void *, struct drm_file *);
655:	int drm_mode_set_config_internal(struct drm_mode_set *);
705:	int drm_mode_setcrtc(struct drm_device *, void *, struct drm_file *);
436:	int drmm_crtc_init_with_planes(struct drm_device *, struct drm_crtc *, struct drm_plane *, struct drm_plane *, const struct drm_crtc_funcs *, const char *, ...);
247:	static int __drm_crtc_init_with_planes(struct drm_device *, struct drm_crtc *, struct drm_plane *, struct drm_plane *, const struct drm_crtc_funcs *, const char *, va_list);
598:	static int __drm_mode_set_config_internal(struct drm_mode_set *, struct drm_modeset_acquire_ctx *);
177:	static const char *drm_crtc_fence_get_driver_name(struct dma_fence *);
184:	static const char *drm_crtc_fence_get_timeline_name(struct dma_fence *);
374:	static void drmm_crtc_init_with_planes_cleanup(struct drm_device *, void *);

File drivers/gpu/drm/drm_crtc_helper.c:
505:	struct drm_encoder *drm_connector_get_single_encoder(struct drm_connector *);
451:	int drm_crtc_helper_atomic_check(struct drm_crtc *, struct drm_atomic_state *);
554:	int drm_crtc_helper_set_config(struct drm_mode_set *, struct drm_modeset_acquire_ctx *);
283:	bool drm_crtc_helper_set_mode(struct drm_crtc *, struct drm_display_mode *, int, int, struct drm_framebuffer *);
905:	int drm_helper_connector_dpms(struct drm_connector *, int);
148:	bool drm_helper_crtc_in_use(struct drm_crtc *);
231:	void drm_helper_disable_unused_functions(struct drm_device *);
107:	bool drm_helper_encoder_in_use(struct drm_encoder *);
1040:	int drm_helper_force_disable_all(struct drm_device *);
978:	void drm_helper_resume_force_mode(struct drm_device *);
183:	static void __drm_helper_disable_unused_functions(struct drm_device *);

File drivers/gpu/drm/drm_damage_helper.c:
67:	void drm_atomic_helper_check_plane_damage(struct drm_atomic_state *, struct drm_plane_state *);
223:	void drm_atomic_helper_damage_iter_init(struct drm_atomic_helper_damage_iter *, const struct drm_plane_state *, const struct drm_plane_state *);
269:	bool drm_atomic_helper_damage_iter_next(struct drm_atomic_helper_damage_iter *, struct drm_rect *);
309:	bool drm_atomic_helper_damage_merged(const struct drm_plane_state *, struct drm_plane_state *, struct drm_rect *);
107:	int drm_atomic_helper_dirtyfb(struct drm_framebuffer *, struct drm_file *, unsigned int, unsigned int, struct drm_clip_rect *, unsigned int);

File drivers/gpu/drm/drm_debugfs.c:
273:	void drm_debugfs_cleanup(struct drm_minor *);
417:	void drm_debugfs_connector_add(struct drm_connector *);
448:	void drm_debugfs_connector_remove(struct drm_connector *);
176:	void drm_debugfs_create_files(const struct drm_info_list *, int, struct dentry *, struct drm_minor *);
458:	void drm_debugfs_crtc_add(struct drm_crtc *);
476:	void drm_debugfs_crtc_remove(struct drm_crtc *);
206:	int drm_debugfs_init(struct drm_minor *, int, struct dentry *);
237:	int drm_debugfs_remove_files(const struct drm_info_list *, int, struct drm_minor *);
293:	static int connector_open(struct inode *, struct file *);
284:	static int connector_show(struct seq_file *, void *);
300:	static ssize_t connector_write(struct file *, const char *, size_t, loff_t *);
73:	static int drm_clients_info(struct seq_file *, void *);
147:	static int drm_debugfs_open(struct inode *, struct file *);
125:	static int drm_gem_name_info(struct seq_file *, void *);
113:	static int drm_gem_one_name_info(int, void *, void *);
51:	static int drm_name_info(struct seq_file *, void *);
334:	static int edid_open(struct inode *, struct file *);
329:	static int edid_show(struct seq_file *, void *);
341:	static ssize_t edid_write(struct file *, const char *, size_t, loff_t *);
396:	static int output_bpc_open(struct inode *, struct file *);
385:	static int output_bpc_show(struct seq_file *, void *);
379:	static int vrr_range_open(struct inode *, struct file *);
367:	static int vrr_range_show(struct seq_file *, void *);

File drivers/gpu/drm/drm_debugfs_crc.c:
393:	int drm_crtc_add_crc_entry(struct drm_crtc *, bool, uint32_t, uint32_t *);
368:	void drm_debugfs_crtc_crc_add(struct drm_crtc *);
113:	static int crc_control_open(struct inode *, struct file *);
83:	static int crc_control_show(struct seq_file *, void *);
120:	static ssize_t crc_control_write(struct file *, const char *, size_t, loff_t *);
195:	static int crtc_crc_open(struct inode *, struct file *);
344:	static __poll_t crtc_crc_poll(struct file *, poll_table *);
284:	static ssize_t crtc_crc_read(struct file *, char *, size_t, loff_t *);
258:	static int crtc_crc_release(struct inode *, struct file *);

File drivers/gpu/drm/drm_displayid.c:
87:	const struct displayid_block *__displayid_iter_next(struct displayid_iter *);
61:	void displayid_iter_edid_begin(const struct drm_edid *, struct displayid_iter *);
129:	void displayid_iter_end(struct displayid_iter *);

File drivers/gpu/drm/drm_dma.c:
52:	int drm_legacy_dma_setup(struct drm_device *);
81:	void drm_legacy_dma_takedown(struct drm_device *);
136:	void drm_legacy_free_buffer(struct drm_device *, struct drm_buf *);
155:	void drm_legacy_reclaim_buffers(struct drm_device *, struct drm_file *);

File drivers/gpu/drm/drm_drv.c:
722:	void *__devm_drm_dev_alloc(struct device *, const struct drm_driver *, size_t, size_t);
758:	struct drm_device *drm_dev_alloc(const struct drm_driver *, struct device *);
449:	bool drm_dev_enter(struct drm_device *, int *);
469:	void drm_dev_exit(int);
804:	void drm_dev_get(struct drm_device *);
818:	void drm_dev_put(struct drm_device *);
901:	int drm_dev_register(struct drm_device *, unsigned long);
1011:	int drm_dev_set_unique(struct drm_device *, const char *);
485:	void drm_dev_unplug(struct drm_device *);
975:	void drm_dev_unregister(struct drm_device *);
238:	struct drm_minor *drm_minor_acquire(unsigned int);
259:	void drm_minor_release(struct drm_minor *);
423:	void drm_put_dev(struct drm_device *);
703:	static void devm_drm_dev_init_release(void *);
1076:	static void drm_core_exit(void);
1087:	static int drm_core_init(void);
604:	static int drm_dev_init(struct drm_device *, const struct drm_driver *, struct device *);
587:	static void drm_dev_init_release(struct drm_device *, void *);
524:	static int drm_fs_init_fs_context(struct fs_context *);
119:	static int drm_minor_alloc(struct drm_device *, unsigned int);
101:	static void drm_minor_alloc_release(struct drm_device *, void *);
163:	static int drm_minor_register(struct drm_device *, unsigned int);
206:	static void drm_minor_unregister(struct drm_device *, unsigned int);
1040:	static int drm_stub_open(struct inode *, struct file *);

File drivers/gpu/drm/drm_dumb_buffers.c:
60:	int drm_mode_create_dumb(struct drm_device *, struct drm_mode_create_dumb *, struct drm_file *);
99:	int drm_mode_create_dumb_ioctl(struct drm_device *, void *, struct drm_file *);
136:	int drm_mode_destroy_dumb(struct drm_device *, u32, struct drm_file *);
148:	int drm_mode_destroy_dumb_ioctl(struct drm_device *, void *, struct drm_file *);
119:	int drm_mode_mmap_dumb_ioctl(struct drm_device *, void *, struct drm_file *);

File drivers/gpu/drm/drm_edid.c:
6770:	int drm_add_edid_modes(struct drm_connector *, struct edid *);
6796:	int drm_add_modes_noedid(struct drm_connector *, int, int);
5711:	int drm_av_sync_delay(struct drm_connector *, const struct drm_display_mode *);
6747:	int drm_connector_update_edid_property(struct drm_connector *, const struct edid *);
5858:	enum hdmi_quantization_range drm_default_rgb_quant_range(const struct drm_display_mode *);
5777:	bool drm_detect_hdmi_monitor(const struct edid *);
5839:	bool drm_detect_monitor_audio(const struct edid *);
4562:	struct drm_display_mode *drm_display_mode_from_cea_vic(struct drm_device *, u8);
2482:	struct edid *drm_do_get_edid(struct drm_connector *, read_block_fn *, void *);
2547:	const struct drm_edid *drm_edid_alloc(const void *, size_t);
1815:	bool drm_edid_are_equal(const struct edid *, const struct edid *);
1977:	bool drm_edid_block_valid(u8 *, int, bool, bool *);
6694:	int drm_edid_connector_update(struct drm_connector *, const struct drm_edid *);
2574:	const struct drm_edid *drm_edid_dup(const struct drm_edid *);
2854:	struct edid *drm_edid_duplicate(const struct edid *);
2587:	void drm_edid_free(const struct drm_edid *);
5484:	void drm_edid_get_monitor_name(const struct edid *, char *, int);
2789:	u32 drm_edid_get_panel_id(struct i2c_adapter *);
1756:	int drm_edid_header_is_valid(const void *);
2033:	bool drm_edid_is_valid(struct edid *);
2301:	int drm_edid_override_connector_update(struct drm_connector *);
2275:	int drm_edid_override_reset(struct drm_connector *);
2248:	int drm_edid_override_set(struct drm_connector *, const void *, size_t);
2232:	int drm_edid_override_show(struct drm_connector *, struct seq_file *);
2500:	const struct edid *drm_edid_raw(const struct drm_edid *);
2736:	const struct drm_edid *drm_edid_read(struct drm_connector *);
2662:	const struct drm_edid *drm_edid_read_custom(struct drm_connector *, read_block_fn *, void *);
2703:	const struct drm_edid *drm_edid_read_ddc(struct drm_connector *, struct i2c_adapter *);
5648:	int drm_edid_to_sad(const struct edid *, struct cea_sad **);
5694:	int drm_edid_to_speaker_allocation(const struct edid *, u8 **);
2060:	bool drm_edid_valid(const struct drm_edid *);
4078:	const u8 *drm_find_edid_extension(const struct drm_edid *, int, int *);
2622:	struct edid *drm_get_edid(struct drm_connector *, struct i2c_adapter *);
2830:	struct edid *drm_get_edid_switcheroo(struct drm_connector *, struct i2c_adapter *);
6922:	int drm_hdmi_avi_infoframe_from_display_mode(struct hdmi_avi_infoframe *, const struct drm_connector *, const struct drm_display_mode *);
6999:	void drm_hdmi_avi_infoframe_quant_range(struct hdmi_avi_infoframe *, const struct drm_connector *, const struct drm_display_mode *, enum hdmi_quantization_range);
7086:	int drm_hdmi_vendor_infoframe_from_display_mode(struct hdmi_vendor_infoframe *, const struct drm_connector *, const struct drm_display_mode *);
4254:	u8 drm_match_cea_mode(const struct drm_display_mode *);
2952:	struct drm_display_mode *drm_mode_find_dmt(struct drm_device *, int, int, int, bool);
3625:	void drm_mode_fixup_1366x768(struct drm_display_mode *);
2604:	bool drm_probe_ddc(struct i2c_adapter *);
6843:	void drm_set_preferred_mode(struct drm_connector *, int, int);
5061:	static const struct cea_db *__cea_db_iter_next(struct cea_db_iter *);
2356:	static struct edid *_drm_do_get_edid(struct drm_connector *, read_block_fn *, void *, size_t *);
6631:	static int _drm_edid_connector_property_update(struct drm_connector *, const struct drm_edid *);
6564:	static int _drm_edid_connector_update(struct drm_connector *, const struct drm_edid *);
7179:	static void _drm_update_tile_info(struct drm_connector *, const struct drm_edid *);
2185:	static void connector_bad_edid(struct drm_connector *, const struct edid *, int);
3967:	static void do_cvt_mode(const struct detailed_timing *, void *);
3997:	static void do_detailed_mode(const struct detailed_timing *, void *);
3809:	static void do_established_modes(const struct detailed_timing *, void *);
3724:	static void do_inferred_modes(const struct detailed_timing *, void *);
3858:	static void do_standard_modes(const struct detailed_timing *, void *);
2134:	static int drm_do_probe_ddc_edid(void *, u8 *, unsigned int, size_t);
2214:	static const struct drm_edid *drm_edid_override_get(struct drm_connector *);
3025:	static void drm_for_each_detailed_block(const struct drm_edid *, detailed_cb *, void *);
3100:	static int drm_gtf2_hbreak(const struct drm_edid *);
3229:	static struct drm_display_mode *drm_gtf2_mode(struct drm_device *, const struct drm_edid *, int, int, int);
4358:	static u8 drm_match_hdmi_mode(const struct drm_display_mode *);
3261:	static struct drm_display_mode *drm_mode_std(struct drm_connector *, const struct drm_edid *, const struct std_timing *);
3072:	static bool drm_monitor_supports_rb(const struct drm_edid *);
1851:	static enum edid_block_status edid_block_check(const void *, bool);
2323:	static enum edid_block_status edid_block_read(void *, unsigned int, read_block_fn *, void *);
1901:	static void edid_block_status_print(enum edid_block_status, const struct edid *, int);
2081:	static struct edid *edid_filter_invalid_blocks(struct edid *, size_t *);
5458:	static int get_monitor_name(const struct drm_edid *, char *);
6215:	static void get_monitor_range(const struct detailed_timing *, void *);
3553:	static bool mode_in_range(const struct drm_display_mode *, const struct drm_edid *, const struct detailed_timing *);
6379:	static u32 update_display_info(struct drm_connector *, const struct drm_edid *);

File drivers/gpu/drm/drm_encoder.c:
240:	void *__drmm_encoder_alloc(struct drm_device *, size_t, size_t, const struct drm_encoder_funcs *, int, const char *, ...);
183:	void drm_encoder_cleanup(struct drm_encoder *);
159:	int drm_encoder_init(struct drm_device *, struct drm_encoder *, const struct drm_encoder_funcs *, int, const char *, ...);
71:	int drm_encoder_register_all(struct drm_device *);
86:	void drm_encoder_unregister_all(struct drm_device *);
331:	int drm_mode_getencoder(struct drm_device *, void *, struct drm_file *);
283:	int drmm_encoder_init(struct drm_device *, struct drm_encoder *, const struct drm_encoder_funcs *, int, const char *, ...);
97:	static int __drm_encoder_init(struct drm_device *, struct drm_encoder *, const struct drm_encoder_funcs *, int, const char *, va_list);
206:	static void drmm_encoder_alloc_release(struct drm_device *, void *);

File drivers/gpu/drm/drm_encoder_slave.c:
151:	void drm_i2c_encoder_commit(struct drm_encoder *);
105:	void drm_i2c_encoder_destroy(struct drm_encoder *);
165:	enum drm_connector_status drm_i2c_encoder_detect(struct drm_encoder *, struct drm_connector *);
128:	void drm_i2c_encoder_dpms(struct drm_encoder *, int);
52:	int drm_i2c_encoder_init(struct drm_device *, struct drm_encoder_slave *, struct i2c_adapter *, const struct i2c_board_info *);
134:	bool drm_i2c_encoder_mode_fixup(struct drm_encoder *, const struct drm_display_mode *, struct drm_display_mode *);
157:	void drm_i2c_encoder_mode_set(struct drm_encoder *, struct drm_display_mode *, struct drm_display_mode *);
145:	void drm_i2c_encoder_prepare(struct drm_encoder *);
178:	void drm_i2c_encoder_restore(struct drm_encoder *);
172:	void drm_i2c_encoder_save(struct drm_encoder *);

File drivers/gpu/drm/drm_fb_dma_helper.c:
70:	dma_addr_t drm_fb_dma_get_gem_addr(struct drm_framebuffer *, struct drm_plane_state *, unsigned int);
46:	struct drm_gem_dma_object *drm_fb_dma_get_gem_obj(struct drm_framebuffer *, unsigned int);
120:	void drm_fb_dma_sync_non_coherent(struct drm_device *, struct drm_plane_state *, struct drm_plane_state *);

File drivers/gpu/drm/drm_fb_helper.c:
487:	struct fb_info *drm_fb_helper_alloc_info(struct drm_fb_helper *);
331:	int drm_fb_helper_blank(int, struct fb_info *);
1027:	void drm_fb_helper_cfb_copyarea(struct fb_info *, const struct fb_copyarea *);
1008:	void drm_fb_helper_cfb_fillrect(struct fb_info *, const struct fb_fillrect *);
1046:	void drm_fb_helper_cfb_imageblit(struct fb_info *, const struct fb_image *);
928:	ssize_t drm_fb_helper_cfb_read(struct fb_info *, char *, size_t, loff_t *);
978:	ssize_t drm_fb_helper_cfb_write(struct fb_info *, const char *, size_t, loff_t *);
1514:	int drm_fb_helper_check_var(struct fb_var_screeninfo *, struct fb_info *);
152:	int drm_fb_helper_debug_enter(struct fb_info *);
188:	int drm_fb_helper_debug_leave(struct fb_info *);
646:	void drm_fb_helper_deferred_io(struct fb_info *, struct list_head *);
1987:	void drm_fb_helper_fill_info(struct fb_info *, struct drm_fb_helper *, struct drm_fb_helper_surface_size *);
549:	void drm_fb_helper_fini(struct drm_fb_helper *);
2213:	int drm_fb_helper_hotplug_event(struct drm_fb_helper *);
453:	int drm_fb_helper_init(struct drm_device *, struct drm_fb_helper *);
2178:	int drm_fb_helper_initial_config(struct drm_fb_helper *, int);
1370:	int drm_fb_helper_ioctl(struct fb_info *, unsigned int, unsigned long);
2254:	void drm_fb_helper_lastclose(struct drm_device *);
2269:	void drm_fb_helper_output_poll_changed(struct drm_device *);
1702:	int drm_fb_helper_pan_display(struct fb_var_screeninfo *, struct fb_info *);
424:	void drm_fb_helper_prepare(struct drm_device *, struct drm_fb_helper *, const struct drm_fb_helper_funcs *);
275:	int drm_fb_helper_restore_fbdev_mode_unlocked(struct drm_fb_helper *);
1601:	int drm_fb_helper_set_par(struct fb_info *);
1067:	void drm_fb_helper_set_suspend(struct drm_fb_helper *, bool);
1090:	void drm_fb_helper_set_suspend_unlocked(struct drm_fb_helper *, bool);
1328:	int drm_fb_helper_setcmap(struct fb_cmap *, struct fb_info *);
854:	void drm_fb_helper_sys_copyarea(struct fb_info *, const struct fb_copyarea *);
835:	void drm_fb_helper_sys_fillrect(struct fb_info *, const struct fb_fillrect *);
873:	void drm_fb_helper_sys_imageblit(struct fb_info *, const struct fb_image *);
777:	ssize_t drm_fb_helper_sys_read(struct fb_info *, char *, size_t, loff_t *);
805:	ssize_t drm_fb_helper_sys_write(struct fb_info *, const char *, size_t, loff_t *);
536:	void drm_fb_helper_unregister_info(struct drm_fb_helper *);
2079:	static int __drm_fb_helper_initial_config_and_unlock(struct drm_fb_helper *, int);
229:	static int __drm_fb_helper_restore_fbdev_mode_unlocked(struct drm_fb_helper *, bool);
408:	static void drm_fb_helper_damage_work(struct work_struct *);
1447:	static void drm_fb_helper_fill_pixel_fmt(struct fb_var_screeninfo *, const struct drm_format_info *);
283:	static void drm_fb_helper_restore_work_fn(struct work_struct *);
362:	static void drm_fb_helper_resume_worker(struct work_struct *);
303:	static void drm_fb_helper_sysrq(int);
2018:	static void drm_setup_crtcs_fb(struct drm_fb_helper *);

File drivers/gpu/drm/drm_fbdev_generic.c:
458:	void drm_fbdev_generic_setup(struct drm_device *, unsigned int);
46:	static void drm_fbdev_cleanup(struct drm_fb_helper *);
380:	static int drm_fbdev_client_hotplug(struct drm_client_dev *);
373:	static int drm_fbdev_client_restore(struct drm_client_dev *);
362:	static void drm_fbdev_client_unregister(struct drm_client_dev *);
142:	static void drm_fbdev_fb_copyarea(struct fb_info *, const struct fb_copyarea *);
82:	static void drm_fbdev_fb_destroy(struct fb_info *);
330:	static int drm_fbdev_fb_dirty(struct drm_fb_helper *, struct drm_clip_rect *);
133:	static void drm_fbdev_fb_fillrect(struct fb_info *, const struct fb_fillrect *);
151:	static void drm_fbdev_fb_imageblit(struct fb_info *, const struct fb_image *);
87:	static int drm_fbdev_fb_mmap(struct fb_info *, struct vm_area_struct *);
25:	static int drm_fbdev_fb_open(struct fb_info *, int);
177:	static int drm_fbdev_fb_probe(struct drm_fb_helper *, struct drm_fb_helper_surface_size *);
107:	static ssize_t drm_fbdev_fb_read(struct fb_info *, char *, size_t, loff_t *);
36:	static int drm_fbdev_fb_release(struct fb_info *, int);
120:	static ssize_t drm_fbdev_fb_write(struct fb_info *, const char *, size_t, loff_t *);

File drivers/gpu/drm/drm_file.c:
54:	bool drm_dev_needs_global_mutex(struct drm_device *);
753:	void drm_event_cancel_free(struct drm_device *, struct drm_pending_event *);
728:	int drm_event_reserve_init(struct drm_device *, struct drm_file *, struct drm_pending_event *, struct drm_event *);
686:	int drm_event_reserve_init_locked(struct drm_device *, struct drm_file *, struct drm_pending_event *, struct drm_event *);
149:	struct drm_file *drm_file_alloc(struct drm_minor *);
239:	void drm_file_free(struct drm_file *);
451:	void drm_lastclose(struct drm_device *);
405:	int drm_open(struct inode *, struct file *);
329:	int drm_open_helper(struct file *, struct drm_minor *);
648:	__poll_t drm_poll(struct file *, struct poll_table_struct *);
563:	ssize_t drm_read(struct file *, char *, size_t, loff_t *);
479:	int drm_release(struct inode *, struct file *);
519:	int drm_release_noglobal(struct inode *, struct file *);
861:	void drm_send_event(struct drm_device *, struct drm_pending_event *);
840:	void drm_send_event_locked(struct drm_device *, struct drm_pending_event *);
819:	void drm_send_event_timestamp_locked(struct drm_device *, struct drm_pending_event *, ktime_t);
885:	struct file *mock_drm_getfile(struct drm_minor *, unsigned int);
772:	static void drm_send_event_helper(struct drm_device *, struct drm_pending_event *, ktime_t);

File drivers/gpu/drm/drm_flip_work.c:
37:	struct drm_flip_task *drm_flip_work_allocate_task(void *, gfp_t);
166:	void drm_flip_work_cleanup(struct drm_flip_work *);
101:	void drm_flip_work_commit(struct drm_flip_work *, struct workqueue_struct *);
147:	void drm_flip_work_init(struct drm_flip_work *, const char *, drm_flip_func_t);
76:	void drm_flip_work_queue(struct drm_flip_work *, void *);
57:	void drm_flip_work_queue_task(struct drm_flip_work *, struct drm_flip_task *);
114:	static void flip_worker(struct work_struct *);

File drivers/gpu/drm/drm_format_helper.c:
638:	int drm_fb_blit(struct iosys_map *, const unsigned int *, uint32_t, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
879:	size_t drm_fb_build_fourcc_list(struct drm_device *, const u32 *, size_t, const u32 *, size_t, u32 *, size_t);
37:	unsigned int drm_fb_clip_offset(unsigned int, const struct drm_format_info *, const struct drm_rect *);
173:	void drm_fb_memcpy(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
250:	void drm_fb_swab(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *, bool);
600:	void drm_fb_xrgb8888_to_gray8(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
747:	void drm_fb_xrgb8888_to_mono(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
310:	void drm_fb_xrgb8888_to_rgb332(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
379:	void drm_fb_xrgb8888_to_rgb565(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *, bool);
434:	void drm_fb_xrgb8888_to_rgb888(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
545:	void drm_fb_xrgb8888_to_xrgb2101010(struct iosys_map *, const unsigned int *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *);
447:	static void drm_fb_rgb565_to_xrgb8888_line(void *, const void *, unsigned int);
478:	static void drm_fb_rgb888_to_xrgb8888_line(void *, const void *, unsigned int);
209:	static void drm_fb_swab16_line(void *, const void *, unsigned int);
219:	static void drm_fb_swab32_line(void *, const void *, unsigned int);
133:	static int drm_fb_xfrm(struct iosys_map *, const unsigned int *, const u8 *, const struct iosys_map *, const struct drm_framebuffer *, const struct drm_rect *, bool, void (*)(void *, const void *, unsigned int));
558:	static void drm_fb_xrgb8888_to_gray8_line(void *, const void *, unsigned int);
275:	static void drm_fb_xrgb8888_to_rgb332_line(void *, const void *, unsigned int);
323:	static void drm_fb_xrgb8888_to_rgb565_line(void *, const void *, unsigned int);
340:	static void drm_fb_xrgb8888_to_rgb565_swab_line(void *, const void *, unsigned int);
398:	static void drm_fb_xrgb8888_to_rgb888_line(void *, const void *, unsigned int);
506:	static void drm_fb_xrgb8888_to_xrgb2101010_line(void *, const void *, unsigned int);

File drivers/gpu/drm/drm_fourcc.c:
147:	const struct drm_format_info *__drm_format_info(u32);
119:	uint32_t drm_driver_legacy_fb_format(struct drm_device *, uint32_t, uint32_t);
332:	const struct drm_format_info *drm_format_info(u32);
395:	unsigned int drm_format_info_block_height(const struct drm_format_info *, int);
375:	unsigned int drm_format_info_block_width(const struct drm_format_info *, int);
415:	unsigned int drm_format_info_bpp(const struct drm_format_info *, int);
436:	uint64_t drm_format_info_min_pitch(const struct drm_format_info *, int, unsigned int);
352:	const struct drm_format_info *drm_get_format_info(struct drm_device *, const struct drm_mode_fb_cmd2 *);
41:	uint32_t drm_mode_legacy_fb_format(uint32_t, uint32_t);

File drivers/gpu/drm/drm_framebuffer.c:
774:	void drm_fb_release(struct drm_file *);
76:	int drm_framebuffer_check_src_coords(uint32_t, uint32_t, uint32_t, uint32_t, const struct drm_framebuffer *);
942:	void drm_framebuffer_cleanup(struct drm_framebuffer *);
1225:	void drm_framebuffer_debugfs_init(struct drm_minor *);
811:	void drm_framebuffer_free(struct kref *);
844:	int drm_framebuffer_init(struct drm_device *, struct drm_framebuffer *, const struct drm_framebuffer_funcs *);
883:	struct drm_framebuffer *drm_framebuffer_lookup(struct drm_device *, struct drm_file *, uint32_t);
1167:	int drm_framebuffer_plane_height(int, const struct drm_framebuffer *, int);
1148:	int drm_framebuffer_plane_width(int, const struct drm_framebuffer *, int);
1177:	void drm_framebuffer_print_info(struct drm_printer *, unsigned int, const struct drm_framebuffer *);
1100:	void drm_framebuffer_remove(struct drm_framebuffer *);
911:	void drm_framebuffer_unregister_private(struct drm_framebuffer *);
287:	struct drm_framebuffer *drm_internal_framebuffer_create(struct drm_device *, const struct drm_mode_fb_cmd2 *, struct drm_file *);
117:	int drm_mode_addfb(struct drm_device *, struct drm_mode_fb_cmd *, struct drm_file *);
346:	int drm_mode_addfb2(struct drm_device *, void *, struct drm_file *);
370:	int drm_mode_addfb2_ioctl(struct drm_device *, void *, struct drm_file *);
148:	int drm_mode_addfb_ioctl(struct drm_device *, void *, struct drm_file *);
695:	int drm_mode_dirtyfb_ioctl(struct drm_device *, void *, struct drm_file *);
505:	int drm_mode_getfb(struct drm_device *, void *, struct drm_file *);
567:	int drm_mode_getfb2_ioctl(struct drm_device *, void *, struct drm_file *);
428:	int drm_mode_rmfb(struct drm_device *, u32, struct drm_file *);
484:	int drm_mode_rmfb_ioctl(struct drm_device *, void *, struct drm_file *);
1204:	static int drm_framebuffer_info(struct seq_file *, void *);
399:	static void drm_mode_rmfb_work_fn(struct work_struct *);

File drivers/gpu/drm/drm_gem.c:
782:	int drm_gem_close_ioctl(struct drm_device *, void *, struct drm_file *);
485:	int drm_gem_create_mmap_offset(struct drm_gem_object *);
462:	int drm_gem_create_mmap_offset_size(struct drm_gem_object *, size_t);
748:	long drm_gem_dma_resv_wait(struct drm_file *, u32, bool, unsigned long);
325:	int drm_gem_dumb_destroy(struct drm_file *, struct drm_device *, u32);
297:	int drm_gem_dumb_map_offset(struct drm_file *, struct drm_device *, u32, u64 *);
808:	int drm_gem_flink_ioctl(struct drm_device *, void *, struct drm_file *);
436:	void drm_gem_free_mmap_offset(struct drm_gem_object *);
527:	struct page **drm_gem_get_pages(struct drm_gem_object *);
414:	int drm_gem_handle_create(struct drm_file *, struct drm_gem_object *, u32 *);
347:	int drm_gem_handle_create_tail(struct drm_file *, struct drm_gem_object *, u32 *);
260:	int drm_gem_handle_delete(struct drm_file *, u32);
94:	int drm_gem_init(struct drm_device *);
1225:	int drm_gem_lock_reservations(struct drm_gem_object **, int, struct ww_acquire_ctx *);
1296:	void drm_gem_lru_init(struct drm_gem_lru *, struct mutex *);
1358:	void drm_gem_lru_move_tail(struct drm_gem_lru *, struct drm_gem_object *);
1321:	void drm_gem_lru_remove(struct drm_gem_object *);
1381:	unsigned long drm_gem_lru_scan(struct drm_gem_lru *, unsigned int, bool (*)(struct drm_gem_object *));
1078:	int drm_gem_mmap(struct file *, struct vm_area_struct *);
1019:	int drm_gem_mmap_obj(struct drm_gem_object *, unsigned long, struct vm_area_struct *);
953:	void drm_gem_object_free(struct kref *);
125:	int drm_gem_object_init(struct drm_device *, struct drm_gem_object *, size_t);
726:	struct drm_gem_object *drm_gem_object_lookup(struct drm_file *, u32);
931:	void drm_gem_object_release(struct drm_gem_object *);
676:	int drm_gem_objects_lookup(struct drm_file *, void *, int, struct drm_gem_object ***);
900:	void drm_gem_open(struct drm_device *, struct drm_file *);
858:	int drm_gem_open_ioctl(struct drm_device *, void *, struct drm_file *);
1143:	int drm_gem_pin(struct drm_gem_object *);
1127:	void drm_gem_print_info(struct drm_printer *, unsigned int, const struct drm_gem_object *);
152:	void drm_gem_private_object_init(struct drm_device *, struct drm_gem_object *, size_t);
594:	void drm_gem_put_pages(struct drm_gem_object *, struct page **, bool, bool);
916:	void drm_gem_release(struct drm_device *, struct drm_file *);
1277:	void drm_gem_unlock_reservations(struct drm_gem_object **, int, struct ww_acquire_ctx *);
1151:	void drm_gem_unpin(struct drm_gem_object *);
987:	void drm_gem_vm_close(struct vm_area_struct *);
972:	void drm_gem_vm_open(struct vm_area_struct *);
1157:	int drm_gem_vmap(struct drm_gem_object *, struct iosys_map *);
1191:	int drm_gem_vmap_unlocked(struct drm_gem_object *, struct iosys_map *);
1176:	void drm_gem_vunmap(struct drm_gem_object *, struct iosys_map *);
1203:	void drm_gem_vunmap_unlocked(struct drm_gem_object *, struct iosys_map *);
84:	static void drm_gem_init_release(struct drm_device *, void *);
203:	static void drm_gem_object_handle_put_unlocked(struct drm_gem_object *);
234:	static int drm_gem_object_release_handle(int, void *, void *);

File drivers/gpu/drm/drm_gem_atomic_helper.c:
296:	void __drm_gem_destroy_shadow_plane_state(struct drm_shadow_plane_state *);
247:	void __drm_gem_duplicate_shadow_plane_state(struct drm_plane *, struct drm_shadow_plane_state *);
330:	void __drm_gem_reset_shadow_plane(struct drm_plane *, struct drm_shadow_plane_state *);
377:	int drm_gem_begin_shadow_fb_access(struct drm_plane *, struct drm_plane_state *);
311:	void drm_gem_destroy_shadow_plane_state(struct drm_plane *, struct drm_plane_state *);
272:	struct drm_plane_state *drm_gem_duplicate_shadow_plane_state(struct drm_plane *);
399:	void drm_gem_end_shadow_fb_access(struct drm_plane *, struct drm_plane_state *);
143:	int drm_gem_plane_helper_prepare_fb(struct drm_plane *, struct drm_plane_state *);
346:	void drm_gem_reset_shadow_plane(struct drm_plane *);
222:	int drm_gem_simple_display_pipe_prepare_fb(struct drm_simple_display_pipe *, struct drm_plane_state *);
424:	int drm_gem_simple_kms_begin_shadow_fb_access(struct drm_simple_display_pipe *, struct drm_plane_state *);
490:	void drm_gem_simple_kms_destroy_shadow_plane_state(struct drm_simple_display_pipe *, struct drm_plane_state *);
475:	struct drm_plane_state *drm_gem_simple_kms_duplicate_shadow_plane_state(struct drm_simple_display_pipe *);
442:	void drm_gem_simple_kms_end_shadow_fb_access(struct drm_simple_display_pipe *, struct drm_plane_state *);
456:	void drm_gem_simple_kms_reset_shadow_plane(struct drm_simple_display_pipe *);

File drivers/gpu/drm/drm_gem_dma_helper.c:
134:	struct drm_gem_dma_object *drm_gem_dma_create(struct drm_device *, size_t);
302:	int drm_gem_dma_dumb_create(struct drm_file *, struct drm_device *, struct drm_mode_create_dumb *);
265:	int drm_gem_dma_dumb_create_internal(struct drm_file *, struct drm_device *, struct drm_mode_create_dumb *);
226:	void drm_gem_dma_free(struct drm_gem_dma_object *);
421:	struct sg_table *drm_gem_dma_get_sg_table(struct drm_gem_dma_object *);
522:	int drm_gem_dma_mmap(struct drm_gem_dma_object *, struct vm_area_struct *);
462:	struct drm_gem_object *drm_gem_dma_prime_import_sg_table(struct drm_device *, struct dma_buf_attachment *, struct sg_table *);
575:	struct drm_gem_object *drm_gem_dma_prime_import_sg_table_vmap(struct drm_device *, struct dma_buf_attachment *, struct sg_table *);
402:	void drm_gem_dma_print_info(const struct drm_gem_dma_object *, struct drm_printer *, unsigned int);
501:	int drm_gem_dma_vmap(struct drm_gem_dma_object *, struct iosys_map *);
71:	static struct drm_gem_dma_object *__drm_gem_dma_create(struct drm_device *, size_t, bool);

File drivers/gpu/drm/drm_gem_framebuffer_helper.c:
588:	int drm_gem_fb_afbc_init(struct drm_device *, const struct drm_mode_fb_cmd2 *, struct drm_afbc_framebuffer *);
446:	int drm_gem_fb_begin_cpu_access(struct drm_framebuffer *, enum dma_data_direction);
274:	struct drm_framebuffer *drm_gem_fb_create(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *);
121:	int drm_gem_fb_create_handle(struct drm_framebuffer *, struct drm_file *, unsigned int *);
312:	struct drm_framebuffer *drm_gem_fb_create_with_dirty(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *);
225:	struct drm_framebuffer *drm_gem_fb_create_with_funcs(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *, const struct drm_framebuffer_funcs *);
96:	void drm_gem_fb_destroy(struct drm_framebuffer *);
486:	void drm_gem_fb_end_cpu_access(struct drm_framebuffer *, enum dma_data_direction);
52:	struct drm_gem_object *drm_gem_fb_get_obj(struct drm_framebuffer *, unsigned int);
150:	int drm_gem_fb_init_with_funcs(struct drm_device *, struct drm_framebuffer *, struct drm_file *, const struct drm_mode_fb_cmd2 *, const struct drm_framebuffer_funcs *);
343:	int drm_gem_fb_vmap(struct drm_framebuffer *, struct iosys_map *, struct iosys_map *);
393:	void drm_gem_fb_vunmap(struct drm_framebuffer *, struct iosys_map *);

File drivers/gpu/drm/drm_gem_shmem_helper.c:
125:	struct drm_gem_shmem_object *drm_gem_shmem_create(struct drm_device *, size_t);
517:	int drm_gem_shmem_dumb_create(struct drm_file *, struct drm_device *, struct drm_mode_create_dumb *);
138:	void drm_gem_shmem_free(struct drm_gem_shmem_object *);
206:	int drm_gem_shmem_get_pages(struct drm_gem_shmem_object *);
700:	struct sg_table *drm_gem_shmem_get_pages_sgt(struct drm_gem_shmem_object *);
674:	struct sg_table *drm_gem_shmem_get_sg_table(struct drm_gem_shmem_object *);
444:	int drm_gem_shmem_madvise(struct drm_gem_shmem_object *, int);
619:	int drm_gem_shmem_mmap(struct drm_gem_shmem_object *, struct vm_area_struct *);
267:	int drm_gem_shmem_pin(struct drm_gem_shmem_object *);
754:	struct drm_gem_object *drm_gem_shmem_prime_import_sg_table(struct drm_device *, struct dma_buf_attachment *, struct sg_table *);
651:	void drm_gem_shmem_print_info(const struct drm_gem_shmem_object *, struct drm_printer *, unsigned int);
489:	bool drm_gem_shmem_purge(struct drm_gem_shmem_object *);
459:	void drm_gem_shmem_purge_locked(struct drm_gem_shmem_object *);
249:	void drm_gem_shmem_put_pages(struct drm_gem_shmem_object *);
282:	void drm_gem_shmem_unpin(struct drm_gem_shmem_object *);
359:	int drm_gem_shmem_vmap(struct drm_gem_shmem_object *, struct iosys_map *);
407:	void drm_gem_shmem_vunmap(struct drm_gem_shmem_object *, struct iosys_map *);
53:	static struct drm_gem_shmem_object *__drm_gem_shmem_create(struct drm_device *, size_t, bool);
540:	static vm_fault_t drm_gem_shmem_fault(struct vm_fault *);
592:	static void drm_gem_shmem_vm_close(struct vm_area_struct *);
570:	static void drm_gem_shmem_vm_open(struct vm_area_struct *);

File drivers/gpu/drm/drm_hashtab.c:
45:	int drm_ht_create(struct drm_open_hash *, unsigned int);
166:	int drm_ht_find_item(struct drm_open_hash *, unsigned long, struct drm_hash_item **);
112:	int drm_ht_insert_item(struct drm_open_hash *, struct drm_hash_item *);
142:	int drm_ht_just_insert_please(struct drm_open_hash *, struct drm_hash_item *, unsigned long, int, int, unsigned long);
197:	void drm_ht_remove(struct drm_open_hash *);
191:	int drm_ht_remove_item(struct drm_open_hash *, struct drm_hash_item *);
179:	int drm_ht_remove_key(struct drm_open_hash *, unsigned long);
62:	void drm_ht_verbose_list(struct drm_open_hash *, unsigned long);

File drivers/gpu/drm/drm_ioctl.c:
182:	int drm_getclient(struct drm_device *, void *, struct drm_file *);
116:	int drm_getunique(struct drm_device *, void *, struct drm_file *);
463:	int drm_invalid_op(struct drm_device *, void *, struct drm_file *);
811:	long drm_ioctl(struct file *, unsigned int, unsigned long);
923:	bool drm_ioctl_flags(unsigned int, unsigned int *);
771:	long drm_ioctl_kernel(struct file *, drm_ioctl_t *, void *, u32);
440:	int drm_noop(struct drm_device *, void *, struct drm_file *);
510:	int drm_version(struct drm_device *, void *, struct drm_file *);
473:	static int drm_copy_field(char *, size_t *, const char *);
235:	static int drm_getcap(struct drm_device *, void *, struct drm_file *);
221:	static int drm_getstats(struct drm_device *, void *, struct drm_file *);
315:	static int drm_setclientcap(struct drm_device *, void *, struct drm_file *);
383:	static int drm_setversion(struct drm_device *, void *, struct drm_file *);

File drivers/gpu/drm/drm_irq.c:
163:	int drm_legacy_irq_control(struct drm_device *, void *, struct drm_file *);
115:	int drm_legacy_irq_uninstall(struct drm_device *);

File drivers/gpu/drm/drm_lease.c:
109:	bool _drm_lease_held(struct drm_file *, int);
265:	void drm_lease_destroy(struct drm_master *);
154:	uint32_t drm_lease_filter_crtcs(struct drm_file *, uint32_t);
126:	bool drm_lease_held(struct drm_file *, int);
74:	struct drm_master *drm_lease_owner(struct drm_master *);
336:	void drm_lease_revoke(struct drm_master *);
473:	int drm_mode_create_lease_ioctl(struct drm_device *, void *, struct drm_file *);
633:	int drm_mode_get_lease_ioctl(struct drm_device *, void *, struct drm_file *);
586:	int drm_mode_list_lessees_ioctl(struct drm_device *, void *, struct drm_file *);
691:	int drm_mode_revoke_lease_ioctl(struct drm_device *, void *, struct drm_file *);
298:	static void _drm_lease_revoke(struct drm_master *);

File drivers/gpu/drm/drm_legacy.h:
281:	static int drm_legacy_irq_by_busid(struct drm_device *, void *, struct drm_file *);

File drivers/gpu/drm/drm_legacy_misc.c:
52:	void drm_legacy_destroy_members(struct drm_device *);
77:	void drm_legacy_dev_reinit(struct drm_device *);
43:	void drm_legacy_init_members(struct drm_device *);
57:	int drm_legacy_setup(struct drm_device *);
101:	void drm_master_legacy_init(struct drm_master *);

File drivers/gpu/drm/drm_lock.c:
309:	void drm_legacy_idlelock_release(struct drm_lock_data *);
290:	void drm_legacy_idlelock_take(struct drm_lock_data *);
164:	int drm_legacy_lock(struct drm_device *, void *, struct drm_file *);
355:	void drm_legacy_lock_master_cleanup(struct drm_device *, struct drm_master *);
339:	void drm_legacy_lock_release(struct drm_device *, struct file *);
257:	int drm_legacy_unlock(struct drm_device *, void *, struct drm_file *);
123:	static int drm_legacy_lock_free(struct drm_lock_data *, unsigned int);
59:	static int drm_lock_take(struct drm_lock_data *, unsigned int);

File drivers/gpu/drm/drm_managed.c:
137:	int __drmm_add_action(struct drm_device *, drmres_release_t, void *, const char *);
165:	int __drmm_add_action_or_reset(struct drm_device *, drmres_release_t, void *, const char *);
64:	void drm_managed_release(struct drm_device *);
129:	void drmm_add_final_kfree(struct drm_device *, void *);
242:	void drmm_kfree(struct drm_device *, void *);
189:	void *drmm_kmalloc(struct drm_device *, size_t, gfp_t);
217:	char *drmm_kstrdup(struct drm_device *, const char *, gfp_t);
285:	int drmm_mutex_init(struct drm_device *, struct mutex *);
267:	static void drmm_mutex_release(struct drm_device *, void *);

File drivers/gpu/drm/drm_memory.c:
110:	void drm_legacy_ioremap(struct drm_local_map *, struct drm_device *);
119:	void drm_legacy_ioremap_wc(struct drm_local_map *, struct drm_device *);
128:	void drm_legacy_ioremapfree(struct drm_local_map *, struct drm_device *);

File drivers/gpu/drm/drm_mipi_dsi.c:
413:	int devm_mipi_dsi_attach(struct device *, struct mipi_dsi_device *);
274:	struct mipi_dsi_device *devm_mipi_dsi_device_register_full(struct device *, struct mipi_dsi_host *, const struct mipi_dsi_device_info *);
369:	int mipi_dsi_attach(struct mipi_dsi_device *);
643:	ssize_t mipi_dsi_compression_mode(struct mipi_dsi_device *, bool);
523:	int mipi_dsi_create_packet(struct mipi_dsi_packet *, const struct mipi_dsi_msg *);
976:	int mipi_dsi_dcs_enter_sleep_mode(struct mipi_dsi_device *);
995:	int mipi_dsi_dcs_exit_sleep_mode(struct mipi_dsi_device *);
1209:	int mipi_dsi_dcs_get_display_brightness(struct mipi_dsi_device *, u16 *);
952:	int mipi_dsi_dcs_get_pixel_format(struct mipi_dsi_device *, u8 *);
927:	int mipi_dsi_dcs_get_power_mode(struct mipi_dsi_device *, u8 *);
889:	int mipi_dsi_dcs_nop(struct mipi_dsi_device *);
867:	ssize_t mipi_dsi_dcs_read(struct mipi_dsi_device *, u8, void *, size_t);
1054:	int mipi_dsi_dcs_set_column_address(struct mipi_dsi_device *, u16, u16);
1186:	int mipi_dsi_dcs_set_display_brightness(struct mipi_dsi_device *, u16);
1014:	int mipi_dsi_dcs_set_display_off(struct mipi_dsi_device *);
1033:	int mipi_dsi_dcs_set_display_on(struct mipi_dsi_device *);
1078:	int mipi_dsi_dcs_set_page_address(struct mipi_dsi_device *, u16, u16);
1143:	int mipi_dsi_dcs_set_pixel_format(struct mipi_dsi_device *, u8);
1100:	int mipi_dsi_dcs_set_tear_off(struct mipi_dsi_device *);
1120:	int mipi_dsi_dcs_set_tear_on(struct mipi_dsi_device *, enum mipi_dsi_dcs_tear_mode);
1164:	int mipi_dsi_dcs_set_tear_scanline(struct mipi_dsi_device *, u16);
907:	int mipi_dsi_dcs_soft_reset(struct mipi_dsi_device *);
827:	ssize_t mipi_dsi_dcs_write(struct mipi_dsi_device *, u8, const void *, size_t);
784:	ssize_t mipi_dsi_dcs_write_buffer(struct mipi_dsi_device *, const void *, size_t);
384:	int mipi_dsi_detach(struct mipi_dsi_device *);
201:	struct mipi_dsi_device *mipi_dsi_device_register_full(struct mipi_dsi_host *, const struct mipi_dsi_device_info *);
243:	void mipi_dsi_device_unregister(struct mipi_dsi_device *);
1260:	int mipi_dsi_driver_register_full(struct mipi_dsi_driver *, struct module *);
1283:	void mipi_dsi_driver_unregister(struct mipi_dsi_driver *);
740:	ssize_t mipi_dsi_generic_read(struct mipi_dsi_device *, const void *, size_t, void *, size_t);
695:	ssize_t mipi_dsi_generic_write(struct mipi_dsi_device *, const void *, size_t);
326:	int mipi_dsi_host_register(struct mipi_dsi_host *);
355:	void mipi_dsi_host_unregister(struct mipi_dsi_host *);
489:	bool mipi_dsi_packet_format_is_long(u8);
451:	bool mipi_dsi_packet_format_is_short(u8);
668:	ssize_t mipi_dsi_picture_parameter_set(struct mipi_dsi_device *, const struct drm_dsc_picture_parameter_set *);
617:	int mipi_dsi_set_maximum_return_packet_size(struct mipi_dsi_device *, u16);
574:	int mipi_dsi_shutdown_peripheral(struct mipi_dsi_device *);
594:	int mipi_dsi_turn_on_peripheral(struct mipi_dsi_device *);
106:	struct mipi_dsi_device *of_find_mipi_dsi_device_by_node(struct device_node *);
307:	struct mipi_dsi_host *of_find_mipi_dsi_host_by_node(struct device_node *);
395:	static void devm_mipi_dsi_detach(void *);
249:	static void devm_mipi_dsi_device_unregister(void *);
1289:	static int mipi_dsi_bus_init(void);
116:	static void mipi_dsi_dev_release(struct device *);
50:	static int mipi_dsi_device_match(struct device *, struct device_driver *);
1227:	static int mipi_dsi_drv_probe(struct device *);
1235:	static int mipi_dsi_drv_remove(struct device *);
1245:	static void mipi_dsi_drv_shutdown(struct device *);
345:	static int mipi_dsi_remove_device_fn(struct device *, void *);
65:	static int mipi_dsi_uevent(struct device *, struct kobj_uevent_env *);

File drivers/gpu/drm/drm_mm.c:
157:	struct drm_mm_node *__drm_mm_interval_first(const struct drm_mm *, u64, u64);
963:	void drm_mm_init(struct drm_mm *, u64, u64);
514:	int drm_mm_insert_node_in_range(struct drm_mm * const, struct drm_mm_node * const, u64, u64, unsigned long, u64, u64, enum drm_mm_insert_mode);
1023:	void drm_mm_print(const struct drm_mm *, struct drm_printer *);
627:	void drm_mm_remove_node(struct drm_mm_node *);
660:	void drm_mm_replace_node(struct drm_mm_node *, struct drm_mm_node *);
450:	int drm_mm_reserve_node(struct drm_mm *, struct drm_mm_node *);
780:	bool drm_mm_scan_add_block(struct drm_mm_scan *, struct drm_mm_node *);
912:	struct drm_mm_node *drm_mm_scan_color_evict(struct drm_mm_scan *);
736:	void drm_mm_scan_init_with_range(struct drm_mm_scan *, struct drm_mm *, u64, u64, unsigned long, u64, u64, enum drm_mm_insert_mode);
871:	bool drm_mm_scan_remove_block(struct drm_mm_scan *, struct drm_mm_node *);
997:	void drm_mm_takedown(struct drm_mm *);
266:	static void add_hole(struct drm_mm_node *);
241:	static void augment_callbacks_rotate(struct rb_node *, struct rb_node *);
152:	static void drm_mm_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);
281:	static void rm_hole(struct drm_mm_node *);

File drivers/gpu/drm/drm_mode_config.c:
478:	void drm_mode_config_cleanup(struct drm_device *);
182:	void drm_mode_config_reset(struct drm_device *);
626:	void drm_mode_config_validate(struct drm_device *);
91:	int drm_mode_getresources(struct drm_device *, void *, struct drm_file *);
37:	int drm_modeset_register_all(struct drm_device *);
69:	void drm_modeset_unregister_all(struct drm_device *);
400:	int drmm_mode_config_init(struct drm_device *);
378:	static void drm_mode_config_init_release(struct drm_device *, void *);

File drivers/gpu/drm/drm_mode_object.c:
39:	int __drm_mode_object_add(struct drm_device *, struct drm_mode_object *, uint32_t, bool, void (*)(struct kref *));
136:	struct drm_mode_object *__drm_mode_object_find(struct drm_device *, struct drm_file *, uint32_t, uint32_t);
468:	struct drm_property *drm_mode_obj_find_prop_id(struct drm_mode_object *, uint32_t);
433:	int drm_mode_obj_get_properties_ioctl(struct drm_device *, void *, struct drm_file *);
559:	int drm_mode_obj_set_property_ioctl(struct drm_device *, void *, struct drm_file *);
79:	int drm_mode_object_add(struct drm_device *, struct drm_mode_object *, uint32_t);
173:	struct drm_mode_object *drm_mode_object_find(struct drm_device *, struct drm_file *, uint32_t, uint32_t);
209:	void drm_mode_object_get(struct drm_mode_object *);
385:	int drm_mode_object_get_properties(struct drm_mode_object *, bool, uint32_t *, uint64_t *, uint32_t *);
124:	bool drm_mode_object_lease_required(uint32_t);
192:	void drm_mode_object_put(struct drm_mode_object *);
85:	void drm_mode_object_register(struct drm_device *, struct drm_mode_object *);
104:	void drm_mode_object_unregister(struct drm_device *, struct drm_mode_object *);
231:	void drm_object_attach_property(struct drm_mode_object *, struct drm_property *, uint64_t);
374:	int drm_object_property_get_default_value(struct drm_mode_object *, struct drm_property *, uint64_t *);
349:	int drm_object_property_get_value(struct drm_mode_object *, struct drm_property *, uint64_t *);
281:	int drm_object_property_set_value(struct drm_mode_object *, struct drm_property *, uint64_t);

File drivers/gpu/drm/drm_modes.c:
676:	void drm_bus_flags_from_videomode(const struct videomode *, u32 *);
1408:	void drm_connector_list_update(struct drm_connector *);
143:	struct drm_display_mode *drm_cvt_mode(struct drm_device *, int, int, int, bool, bool, bool);
591:	void drm_display_mode_from_videomode(const struct videomode *, struct drm_display_mode *);
632:	void drm_display_mode_to_videomode(const struct drm_display_mode *, struct videomode *);
1304:	const char *drm_get_mode_status_name(enum drm_mode_status);
574:	struct drm_display_mode *drm_gtf_mode(struct drm_device *, int, int, int, bool, int);
369:	struct drm_display_mode *drm_gtf_mode_complex(struct drm_device *, int, int, int, bool, int, int, int, int, int);
2044:	void drm_mode_convert_to_umode(struct drm_mode_modeinfo *, const struct drm_display_mode *);
2100:	int drm_mode_convert_umode(struct drm_device *, struct drm_display_mode *, const struct drm_mode_modeinfo *);
939:	void drm_mode_copy(struct drm_display_mode *, const struct drm_display_mode *);
73:	struct drm_display_mode *drm_mode_create(struct drm_device *);
2004:	struct drm_display_mode *drm_mode_create_from_cmdline_mode(struct drm_device *, struct drm_cmdline_mode *);
57:	void drm_mode_debug_printmodeline(const struct drm_display_mode *);
92:	void drm_mode_destroy(struct drm_device *, struct drm_display_mode *);
976:	struct drm_display_mode *drm_mode_duplicate(struct drm_device *, const struct drm_display_mode *);
1094:	bool drm_mode_equal(const struct drm_display_mode *, const struct drm_display_mode *);
1117:	bool drm_mode_equal_no_clocks(const struct drm_display_mode *, const struct drm_display_mode *);
1138:	bool drm_mode_equal_no_clocks_no_stereo(const struct drm_display_mode *, const struct drm_display_mode *);
839:	void drm_mode_get_hv_timing(const struct drm_display_mode *, int *, int *);
958:	void drm_mode_init(struct drm_display_mode *, const struct drm_display_mode *);
2214:	bool drm_mode_is_420(const struct drm_display_info *, const struct drm_display_mode *);
2195:	bool drm_mode_is_420_also(const struct drm_display_info *, const struct drm_display_mode *);
2175:	bool drm_mode_is_420_only(const struct drm_display_info *, const struct drm_display_mode *);
1050:	bool drm_mode_match(const struct drm_display_mode *, const struct drm_display_mode *, unsigned int);
1850:	bool drm_mode_parse_command_line_for_connector(const char *, const struct drm_connector *, struct drm_cmdline_mode *);
110:	void drm_mode_probed_add(struct drm_connector *, struct drm_display_mode *);
1325:	void drm_mode_prune_invalid(struct drm_device *, struct list_head *, bool);
867:	void drm_mode_set_crtcinfo(struct drm_display_mode *, int);
791:	void drm_mode_set_name(struct drm_display_mode *);
1391:	void drm_mode_sort(struct list_head *);
1190:	enum drm_mode_status drm_mode_validate_driver(struct drm_device *, const struct drm_display_mode *);
1221:	enum drm_mode_status drm_mode_validate_size(const struct drm_display_mode *, int, int);
1246:	enum drm_mode_status drm_mode_validate_ycbcr420(const struct drm_display_mode *, struct drm_connector *);
809:	int drm_mode_vrefresh(const struct drm_display_mode *);
711:	int of_get_drm_display_mode(struct device_node *, struct drm_display_mode *, u32 *, int);
746:	int of_get_drm_panel_display_mode(struct device_node *, struct drm_display_mode *, u32 *);
1362:	static int drm_mode_compare(void *, const struct list_head *, const struct list_head *);
1497:	static int drm_mode_parse_cmdline_extra(const char *, int, bool, const struct drm_connector *, struct drm_cmdline_mode *);

File drivers/gpu/drm/drm_modeset_helper.c:
141:	int drm_crtc_init(struct drm_device *, struct drm_crtc *, const struct drm_crtc_funcs *);
80:	void drm_helper_mode_fill_fb_struct(struct drm_device *, struct drm_framebuffer *, const struct drm_mode_fb_cmd2 *);
50:	void drm_helper_move_panel_connectors_to_head(struct drm_device *);
226:	int drm_mode_config_helper_resume(struct drm_device *);
190:	int drm_mode_config_helper_suspend(struct drm_device *);

File drivers/gpu/drm/drm_modeset_lock.c:
262:	void drm_modeset_acquire_fini(struct drm_modeset_acquire_ctx *);
246:	void drm_modeset_acquire_init(struct drm_modeset_acquire_ctx *, uint32_t);
346:	int drm_modeset_backoff(struct drm_modeset_acquire_ctx *);
274:	void drm_modeset_drop_locks(struct drm_modeset_acquire_ctx *);
392:	int drm_modeset_lock(struct drm_modeset_lock *, struct drm_modeset_acquire_ctx *);
143:	void drm_modeset_lock_all(struct drm_device *);
449:	int drm_modeset_lock_all_ctx(struct drm_device *, struct drm_modeset_acquire_ctx *);
366:	void drm_modeset_lock_init(struct drm_modeset_lock *);
412:	int drm_modeset_lock_single_interruptible(struct drm_modeset_lock *);
422:	void drm_modeset_unlock(struct drm_modeset_lock *);
197:	void drm_modeset_unlock_all(struct drm_device *);
221:	void drm_warn_on_modeset_not_all_locked(struct drm_device *);

File drivers/gpu/drm/drm_of.c:
88:	void drm_of_component_match_add(struct device *, struct component_match **, int (*)(struct device *, void *), struct device_node *);
112:	int drm_of_component_probe(struct device *, int (*)(struct device *, void *), const struct component_master_ops *);
31:	uint32_t drm_of_crtc_port_mask(struct drm_device *, struct device_node *);
193:	int drm_of_encoder_active_endpoint(struct device_node *, struct drm_encoder *, struct of_endpoint *);
236:	int drm_of_find_panel_or_bridge(const struct device_node *, int, int, struct drm_panel **, struct drm_bridge **);
59:	uint32_t drm_of_find_possible_crtcs(struct drm_device *, struct device_node *);
449:	int drm_of_get_data_lanes_count(const struct device_node *, const unsigned int, const unsigned int);
481:	int drm_of_get_data_lanes_count_ep(const struct device_node *, int, int, const unsigned int, const unsigned int);
416:	int drm_of_lvds_get_data_mapping(const struct device_node *);
373:	int drm_of_lvds_get_dual_link_pixel_order(const struct device_node *, const struct device_node *);
303:	static int drm_of_lvds_get_remote_pixels_type(const struct device_node *);

File drivers/gpu/drm/drm_panel.c:
74:	void drm_panel_add(struct drm_panel *);
183:	int drm_panel_disable(struct drm_panel *);
151:	int drm_panel_enable(struct drm_panel *);
213:	int drm_panel_get_modes(struct drm_panel *, struct drm_connector *);
57:	void drm_panel_init(struct drm_panel *, struct device *, const struct drm_panel_funcs *, int);
329:	int drm_panel_of_backlight(struct drm_panel *);
106:	int drm_panel_prepare(struct drm_panel *);
88:	void drm_panel_remove(struct drm_panel *);
129:	int drm_panel_unprepare(struct drm_panel *);
243:	struct drm_panel *of_drm_find_panel(const struct device_node *);
277:	int of_drm_get_panel_orientation(const struct device_node *, enum drm_panel_orientation *);

File drivers/gpu/drm/drm_panel_orientation_quirks.c:
430:	int drm_get_panel_orientation_quirk(int, int);

File drivers/gpu/drm/drm_plane.c:
1476:	struct drm_mode_rect *__drm_plane_get_damage_clips(const struct drm_plane_state *);
451:	void *__drm_universal_plane_alloc(struct drm_device *, size_t, size_t, uint32_t, const struct drm_plane_funcs *, const uint32_t *, unsigned int, const uint64_t *, enum drm_plane_type, const char *, ...);
412:	void *__drmm_universal_plane_alloc(struct drm_device *, size_t, size_t, uint32_t, const struct drm_plane_funcs *, const uint32_t *, unsigned int, const uint64_t *, enum drm_plane_type, const char *, ...);
823:	bool drm_any_plane_has_format(struct drm_device *, u32, u64);
1509:	struct drm_property *drm_create_scaling_filter_prop(struct drm_device *, unsigned int);
1198:	int drm_mode_cursor2_ioctl(struct drm_device *, void *, struct drm_file *);
1181:	int drm_mode_cursor_ioctl(struct drm_device *, void *, struct drm_file *);
688:	int drm_mode_getplane(struct drm_device *, void *, struct drm_file *);
650:	int drm_mode_getplane_res(struct drm_device *, void *, struct drm_file *);
1206:	int drm_mode_page_flip_ioctl(struct drm_device *, void *, struct drm_file *);
634:	int drm_mode_plane_set_obj_prop(struct drm_plane *, struct drm_property *, uint64_t);
962:	int drm_mode_setplane(struct drm_device *, void *, struct drm_file *);
742:	int drm_plane_check_pixel_format(struct drm_plane *, u32, u64);
531:	void drm_plane_cleanup(struct drm_plane *);
1564:	int drm_plane_create_scaling_filter_property(struct drm_plane *, unsigned int);
1448:	void drm_plane_enable_fb_damage_clips(struct drm_plane *);
597:	void drm_plane_force_disable(struct drm_plane *);
570:	struct drm_plane *drm_plane_from_index(struct drm_device *, int);
1494:	struct drm_mode_rect *drm_plane_get_damage_clips(const struct drm_plane_state *);
1468:	unsigned int drm_plane_get_damage_clips_count(const struct drm_plane_state *);
489:	int drm_plane_register_all(struct drm_device *);
513:	void drm_plane_unregister_all(struct drm_device *);
380:	int drm_universal_plane_init(struct drm_device *, struct drm_plane *, uint32_t, const struct drm_plane_funcs *, const uint32_t *, unsigned int, const uint64_t *, enum drm_plane_type, const char *, ...);
229:	static int __drm_universal_plane_init(struct drm_device *, struct drm_plane *, uint32_t, const struct drm_plane_funcs *, const uint32_t *, unsigned int, const uint64_t *, enum drm_plane_type, const char *, va_list);
772:	static int __setplane_check(struct drm_plane *, struct drm_crtc *, struct drm_framebuffer *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t);
845:	static int __setplane_internal(struct drm_plane *, struct drm_crtc *, struct drm_framebuffer *, int32_t, int32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, struct drm_modeset_acquire_ctx *);
1101:	static int drm_mode_cursor_common(struct drm_device *, struct drm_mode_cursor2 *, struct drm_file *);
402:	static void drmm_universal_plane_alloc_release(struct drm_device *, void *);

File drivers/gpu/drm/drm_plane_helper.c:
308:	int drm_plane_helper_atomic_check(struct drm_plane *, struct drm_atomic_state *);
285:	void drm_plane_helper_destroy(struct drm_plane *);
266:	int drm_plane_helper_disable_primary(struct drm_plane *, struct drm_modeset_acquire_ctx *);
173:	int drm_plane_helper_update_primary(struct drm_plane *, struct drm_crtc *, struct drm_framebuffer *, int, int, unsigned int, unsigned int, uint32_t, uint32_t, uint32_t, uint32_t, struct drm_modeset_acquire_ctx *);
73:	static int get_connectors_for_crtc(struct drm_crtc *, struct drm_connector **, int);

File drivers/gpu/drm/drm_prime.c:
247:	struct dma_buf *drm_gem_dmabuf_export(struct drm_device *, struct dma_buf_export_info *);
779:	int drm_gem_dmabuf_mmap(struct dma_buf *, struct vm_area_struct *);
274:	void drm_gem_dmabuf_release(struct dma_buf *);
681:	int drm_gem_dmabuf_vmap(struct dma_buf *, struct iosys_map *);
697:	void drm_gem_dmabuf_vunmap(struct dma_buf *, struct iosys_map *);
581:	int drm_gem_map_attach(struct dma_buf *, struct dma_buf_attachment *);
599:	void drm_gem_map_detach(struct dma_buf *, struct dma_buf_attachment *);
620:	struct sg_table *drm_gem_map_dma_buf(struct dma_buf_attachment *, enum dma_data_direction);
883:	struct dma_buf *drm_gem_prime_export(struct drm_gem_object *, int);
300:	int drm_gem_prime_fd_to_handle(struct drm_device *, struct drm_file *, int, uint32_t *);
429:	int drm_gem_prime_handle_to_fd(struct drm_device *, struct drm_file *, uint32_t, uint32_t, int *);
985:	struct drm_gem_object *drm_gem_prime_import(struct drm_device *, struct dma_buf *);
915:	struct drm_gem_object *drm_gem_prime_import_dev(struct drm_device *, struct dma_buf *, struct device *);
717:	int drm_gem_prime_mmap(struct drm_gem_object *, struct vm_area_struct *);
657:	void drm_gem_unmap_dma_buf(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
229:	void drm_prime_destroy_file_private(struct drm_prime_file_private *);
370:	int drm_prime_fd_to_handle_ioctl(struct drm_device *, void *, struct drm_file *);
1054:	void drm_prime_gem_destroy(struct drm_gem_object *, struct sg_table *);
853:	unsigned long drm_prime_get_contiguous_size(struct sg_table *);
516:	int drm_prime_handle_to_fd_ioctl(struct drm_device *, void *, struct drm_file *);
222:	void drm_prime_init_file_private(struct drm_prime_file_private *);
817:	struct sg_table *drm_prime_pages_to_sg(struct drm_device *, struct page **, unsigned int);
193:	void drm_prime_remove_buf_handle(struct drm_prime_file_private *, uint32_t);
1031:	int drm_prime_sg_to_dma_addr_array(struct sg_table *, dma_addr_t *, int);
1004:	int drm_prime_sg_to_page_array(struct sg_table *, struct page **, int);
101:	static int drm_prime_add_buf_handle(struct drm_prime_file_private *, struct dma_buf *, uint32_t);

File drivers/gpu/drm/drm_print.c:
307:	void ___drm_dbg(struct _ddebug *, enum drm_debug_category, const char *, ...);
282:	void __drm_dev_dbg(struct _ddebug *, const struct device *, enum drm_debug_category, const char *, ...);
326:	void __drm_err(const char *, ...);
121:	void __drm_printfn_coredump(struct drm_printer *, struct va_format *);
185:	void __drm_printfn_debug(struct drm_printer *, struct va_format *);
192:	void __drm_printfn_err(struct drm_printer *, struct va_format *);
179:	void __drm_printfn_info(struct drm_printer *, struct va_format *);
173:	void __drm_printfn_seq_file(struct drm_printer *, struct va_format *);
79:	void __drm_puts_coredump(struct drm_printer *, const char *);
167:	void __drm_puts_seq_file(struct drm_printer *, const char *);
261:	void drm_dev_printk(const struct device *, const char *, const char *, ...);
240:	void drm_print_bits(struct drm_printer *, unsigned long, const char * const *, unsigned int);
354:	void drm_print_regset32(struct drm_printer *, struct debugfs_regset32 *);
220:	void drm_printf(struct drm_printer *, const char *, ...);
206:	void drm_puts(struct drm_printer *, const char *);

File drivers/gpu/drm/drm_probe_helper.c:
1129:	int drm_connector_helper_get_modes(struct drm_connector *);
1088:	int drm_connector_helper_get_modes_fixed(struct drm_connector *, const struct drm_display_mode *);
1054:	int drm_connector_helper_get_modes_from_ddc(struct drm_connector *);
929:	bool drm_connector_helper_hpd_irq_event(struct drm_connector *);
203:	int drm_connector_mode_valid(struct drm_connector *, struct drm_display_mode *, struct drm_modeset_acquire_ctx *, enum drm_mode_status *);
1025:	enum drm_mode_status drm_crtc_helper_mode_valid_fixed(struct drm_crtc *, const struct drm_display_mode *, const struct drm_display_mode *);
179:	enum drm_mode_status drm_crtc_mode_valid(struct drm_crtc *, const struct drm_display_mode *);
190:	enum drm_mode_status drm_encoder_mode_valid(struct drm_encoder *, const struct drm_display_mode *);
976:	bool drm_helper_hpd_irq_event(struct drm_device *);
327:	int drm_helper_probe_detect(struct drm_connector *, struct drm_modeset_acquire_ctx *, bool);
488:	int drm_helper_probe_single_connector_modes(struct drm_connector *, uint32_t, uint32_t);
677:	void drm_kms_helper_connector_hotplug_event(struct drm_connector *);
659:	void drm_kms_helper_hotplug_event(struct drm_device *);
797:	bool drm_kms_helper_is_poll_worker(void);
819:	void drm_kms_helper_poll_disable(struct drm_device *);
241:	void drm_kms_helper_poll_enable(struct drm_device *);
859:	void drm_kms_helper_poll_fini(struct drm_device *);
846:	void drm_kms_helper_poll_init(struct drm_device *);
374:	static int __drm_helper_update_and_validate(struct drm_connector *, uint32_t, uint32_t, struct drm_modeset_acquire_ctx *);
869:	static bool check_connector_changed(struct drm_connector *);
690:	static void output_poll_execute(struct work_struct *);

File drivers/gpu/drm/drm_property.c:
783:	int drm_mode_createblob_ioctl(struct drm_device *, void *, struct drm_file *);
819:	int drm_mode_destroyblob_ioctl(struct drm_device *, void *, struct drm_file *);
754:	int drm_mode_getblob_ioctl(struct drm_device *, void *, struct drm_file *);
457:	int drm_mode_getproperty_ioctl(struct drm_device *, void *, struct drm_file *);
389:	int drm_property_add_enum(struct drm_property *, uint64_t, const char *);
631:	struct drm_property_blob *drm_property_blob_get(struct drm_property_blob *);
600:	void drm_property_blob_put(struct drm_property_blob *);
874:	bool drm_property_change_valid_get(struct drm_property *, uint64_t, struct drm_mode_object **);
930:	void drm_property_change_valid_put(struct drm_property *, struct drm_mode_object *);
96:	struct drm_property *drm_property_create(struct drm_device *, u32, const char *, int);
209:	struct drm_property *drm_property_create_bitmask(struct drm_device *, u32, const char *, const struct drm_prop_enum_list *, int, uint64_t);
555:	struct drm_property_blob *drm_property_create_blob(struct drm_device *, size_t, const void *);
368:	struct drm_property *drm_property_create_bool(struct drm_device *, u32, const char *);
161:	struct drm_property *drm_property_create_enum(struct drm_device *, u32, const char *, const struct drm_prop_enum_list *, int);
331:	struct drm_property *drm_property_create_object(struct drm_device *, u32, const char *, uint32_t);
276:	struct drm_property *drm_property_create_range(struct drm_device *, u32, const char *, uint64_t, uint64_t);
304:	struct drm_property *drm_property_create_signed_range(struct drm_device *, u32, const char *, int64_t, int64_t);
440:	void drm_property_destroy(struct drm_device *, struct drm_property *);
609:	void drm_property_destroy_user_blobs(struct drm_device *, struct drm_file *);
650:	struct drm_property_blob *drm_property_lookup_blob(struct drm_device *, uint32_t);
738:	bool drm_property_replace_blob(struct drm_property_blob **, struct drm_property_blob *);
690:	int drm_property_replace_global_blob(struct drm_device *, struct drm_property_blob **, size_t, const void *, struct drm_mode_object *, struct drm_property *);
526:	static void drm_property_free_blob(struct kref *);

File drivers/gpu/drm/drm_rect.c:
169:	int drm_rect_calc_hscale(const struct drm_rect *, const struct drm_rect *, int, int);
204:	int drm_rect_calc_vscale(const struct drm_rect *, const struct drm_rect *, int, int);
92:	bool drm_rect_clip_scaled(struct drm_rect *, struct drm_rect *, const struct drm_rect *);
228:	void drm_rect_debug_print(const char *, const struct drm_rect *, bool);
44:	bool drm_rect_intersect(struct drm_rect *, const struct drm_rect *);
253:	void drm_rect_rotate(struct drm_rect *, int, int, unsigned int);
327:	void drm_rect_rotate_inv(struct drm_rect *, int, int, unsigned int);

File drivers/gpu/drm/drm_scatter.c:
78:	int drm_legacy_sg_alloc(struct drm_device *, void *, struct drm_file *);
64:	void drm_legacy_sg_cleanup(struct drm_device *);
197:	int drm_legacy_sg_free(struct drm_device *, void *, struct drm_file *);
46:	static void drm_sg_cleanup(struct drm_sg_mem *);

File drivers/gpu/drm/drm_self_refresh_helper.c:
187:	void drm_self_refresh_helper_alter_state(struct drm_atomic_state *);
268:	void drm_self_refresh_helper_cleanup(struct drm_crtc *);
232:	int drm_self_refresh_helper_init(struct drm_crtc *);
145:	void drm_self_refresh_helper_update_avg_times(struct drm_atomic_state *, unsigned int, unsigned int);
67:	static void drm_self_refresh_helper_entry_work(struct work_struct *);

File drivers/gpu/drm/drm_simple_kms_helper.c:
77:	void *__drmm_simple_encoder_alloc(struct drm_device *, size_t, size_t, int);
386:	int drm_simple_display_pipe_attach_bridge(struct drm_simple_display_pipe *, struct drm_bridge *);
417:	int drm_simple_display_pipe_init(struct drm_device *, struct drm_simple_display_pipe *, const struct drm_simple_display_pipe_funcs *, const uint32_t *, unsigned int, const uint64_t *, struct drm_connector *);
67:	int drm_simple_encoder_init(struct drm_device *, struct drm_encoder *, int);
99:	static int drm_simple_kms_crtc_check(struct drm_crtc *, struct drm_atomic_state *);
171:	static void drm_simple_kms_crtc_destroy_state(struct drm_crtc *, struct drm_crtc_state *);
130:	static void drm_simple_kms_crtc_disable(struct drm_crtc *, struct drm_atomic_state *);
193:	static void drm_simple_kms_crtc_disable_vblank(struct drm_crtc *);
160:	static struct drm_crtc_state *drm_simple_kms_crtc_duplicate_state(struct drm_crtc *);
116:	static void drm_simple_kms_crtc_enable(struct drm_crtc *, struct drm_atomic_state *);
182:	static int drm_simple_kms_crtc_enable_vblank(struct drm_crtc *);
86:	static enum drm_mode_status drm_simple_kms_crtc_mode_valid(struct drm_crtc *, const struct drm_display_mode *);
149:	static void drm_simple_kms_crtc_reset(struct drm_crtc *);
312:	static bool drm_simple_kms_format_mod_supported(struct drm_plane *, uint32_t, uint64_t);
215:	static int drm_simple_kms_plane_atomic_check(struct drm_plane *, struct drm_atomic_state *);
244:	static void drm_simple_kms_plane_atomic_update(struct drm_plane *, struct drm_atomic_state *);
288:	static int drm_simple_kms_plane_begin_fb_access(struct drm_plane *, struct drm_plane_state *);
276:	static void drm_simple_kms_plane_cleanup_fb(struct drm_plane *, struct drm_plane_state *);
350:	static void drm_simple_kms_plane_destroy_state(struct drm_plane *, struct drm_plane_state *);
339:	static struct drm_plane_state *drm_simple_kms_plane_duplicate_state(struct drm_plane *);
300:	static void drm_simple_kms_plane_end_fb_access(struct drm_plane *, struct drm_plane_state *);
258:	static int drm_simple_kms_plane_prepare_fb(struct drm_plane *, struct drm_plane_state *);
328:	static void drm_simple_kms_plane_reset(struct drm_plane *);

File drivers/gpu/drm/drm_syncobj.c:
286:	void drm_syncobj_add_point(struct drm_syncobj *, struct dma_fence_chain *, struct dma_fence *, uint64_t);
492:	int drm_syncobj_create(struct drm_syncobj **, uint32_t, struct dma_fence *);
777:	int drm_syncobj_create_ioctl(struct drm_device *, void *, struct drm_file *);
794:	int drm_syncobj_destroy_ioctl(struct drm_device *, void *, struct drm_file *);
833:	int drm_syncobj_fd_to_handle_ioctl(struct drm_device *, void *, struct drm_file *);
223:	struct drm_syncobj *drm_syncobj_find(struct drm_file *, u32);
383:	int drm_syncobj_find_fence(struct drm_file *, u32, u64, u64, struct dma_fence **);
470:	void drm_syncobj_free(struct kref *);
610:	int drm_syncobj_get_fd(struct drm_syncobj *, int *);
533:	int drm_syncobj_get_handle(struct drm_file *, struct drm_syncobj *, u32 *);
809:	int drm_syncobj_handle_to_fd_ioctl(struct drm_device *, void *, struct drm_file *);
745:	void drm_syncobj_open(struct drm_file *);
1450:	int drm_syncobj_query_ioctl(struct drm_device *, void *, struct drm_file *);
769:	void drm_syncobj_release(struct drm_file *);
322:	void drm_syncobj_replace_fence(struct drm_syncobj *, struct dma_fence *);
1309:	int drm_syncobj_reset_ioctl(struct drm_device *, void *, struct drm_file *);
1342:	int drm_syncobj_signal_ioctl(struct drm_device *, void *, struct drm_file *);
1378:	int drm_syncobj_timeline_signal_ioctl(struct drm_device *, void *, struct drm_file *);
1274:	int drm_syncobj_timeline_wait_ioctl(struct drm_device *, void *, struct drm_file *);
920:	int drm_syncobj_transfer_ioctl(struct drm_device *, void *, struct drm_file *);
1241:	int drm_syncobj_wait_ioctl(struct drm_device *, void *, struct drm_file *);
1124:	long drm_timeout_abs_to_jiffies(int64_t);
1183:	static int drm_syncobj_array_find(struct drm_file *, void *, uint32_t, struct drm_syncobj ***);
971:	static long drm_syncobj_array_wait_timeout(struct drm_syncobj **, void *, uint32_t, uint32_t, long, uint32_t *);
241:	static void drm_syncobj_fence_add_wait(struct drm_syncobj *, struct syncobj_wait_entry *);
589:	static int drm_syncobj_file_release(struct inode *, struct file *);
752:	static int drm_syncobj_release_handle(int, void *, void *);
940:	static void syncobj_wait_fence_func(struct dma_fence *, struct dma_fence_cb *);
949:	static void syncobj_wait_syncobj_func(struct drm_syncobj *, struct syncobj_wait_entry *);

File drivers/gpu/drm/drm_sysfs.c:
518:	int drm_class_device_register(struct device *);
536:	void drm_class_device_unregister(struct device *);
320:	int drm_sysfs_connector_add(struct drm_connector *);
421:	void drm_sysfs_connector_hotplug_event(struct drm_connector *);
366:	void drm_sysfs_connector_remove(struct drm_connector *);
448:	void drm_sysfs_connector_status_event(struct drm_connector *, struct drm_property *);
137:	void drm_sysfs_destroy(void);
402:	void drm_sysfs_hotplug_event(struct drm_device *);
111:	int drm_sysfs_init(void);
381:	void drm_sysfs_lease_event(struct drm_device *);
469:	struct device *drm_sysfs_minor_alloc(struct drm_minor *);
210:	static ssize_t dpms_show(struct device *, struct device_attribute *, char *);
94:	static char *drm_devnode(const struct device *, umode_t *);
147:	static void drm_sysfs_release(struct device *);
234:	static ssize_t edid_show(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
222:	static ssize_t enabled_show(struct device *, struct device_attribute *, char *);
267:	static ssize_t modes_show(struct device *, struct device_attribute *, char *);
197:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
155:	static ssize_t status_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/gpu/drm/drm_vblank.c:
608:	void drm_calc_timestamping_constants(struct drm_crtc *, const struct drm_display_mode *);
403:	u64 drm_crtc_accurate_vblank_count(struct drm_crtc *);
1057:	void drm_crtc_arm_vblank_event(struct drm_crtc *, struct drm_pending_vblank_event *);
2021:	int drm_crtc_get_sequence_ioctl(struct drm_device *, void *, struct drm_file *);
2007:	bool drm_crtc_handle_vblank(struct drm_crtc *);
2077:	int drm_crtc_queue_sequence_ioctl(struct drm_device *, void *, struct drm_file *);
1082:	void drm_crtc_send_vblank_event(struct drm_crtc *, struct drm_pending_vblank_event *);
1418:	void drm_crtc_set_max_vblank_count(struct drm_crtc *, u32);
915:	u64 drm_crtc_vblank_count(struct drm_crtc *);
975:	u64 drm_crtc_vblank_count_and_time(struct drm_crtc *, ktime_t *);
1197:	int drm_crtc_vblank_get(struct drm_crtc *);
835:	bool drm_crtc_vblank_helper_get_vblank_timestamp(struct drm_crtc *, int *, ktime_t *, bool);
691:	bool drm_crtc_vblank_helper_get_vblank_timestamp_internal(struct drm_crtc *, int *, ktime_t *, bool, drm_vblank_get_scanout_position_func);
1300:	void drm_crtc_vblank_off(struct drm_crtc *);
1442:	void drm_crtc_vblank_on(struct drm_crtc *);
1232:	void drm_crtc_vblank_put(struct drm_crtc *);
1379:	void drm_crtc_vblank_reset(struct drm_crtc *);
1527:	void drm_crtc_vblank_restore(struct drm_crtc *);
590:	wait_queue_head_t *drm_crtc_vblank_waitqueue(struct drm_crtc *);
1283:	void drm_crtc_wait_one_vblank(struct drm_crtc *);
576:	bool drm_dev_has_vblank(const struct drm_device *);
1933:	bool drm_handle_vblank(struct drm_device *, unsigned int);
1586:	int drm_legacy_modeset_ctl_ioctl(struct drm_device *, void *, struct drm_file *);
370:	u64 drm_vblank_count(struct drm_device *, unsigned int);
449:	void drm_vblank_disable_and_save(struct drm_device *, unsigned int);
1160:	int drm_vblank_get(struct drm_device *, unsigned int);
523:	int drm_vblank_init(struct drm_device *, unsigned int);
1203:	void drm_vblank_put(struct drm_device *, unsigned int);
1249:	void drm_wait_one_vblank(struct drm_device *, unsigned int);
1749:	int drm_wait_vblank_ioctl(struct drm_device *, void *, struct drm_file *);
202:	static u32 __get_vblank_counter(struct drm_device *, unsigned int);
1891:	static void drm_handle_vblank_events(struct drm_device *, unsigned int);
1618:	static int drm_queue_vblank_event(struct drm_device *, unsigned int, u64, union drm_wait_vblank *, struct drm_file *);
231:	static void drm_reset_vblank_timestamp(struct drm_device *, unsigned int);
278:	static void drm_update_vblank_count(struct drm_device *, unsigned int, bool);
935:	static u64 drm_vblank_count_and_time(struct drm_device *, unsigned int, ktime_t *);
1122:	static int drm_vblank_enable(struct drm_device *, unsigned int);
500:	static void drm_vblank_init_release(struct drm_device *, void *);
1723:	static void drm_wait_vblank_reply(struct drm_device *, unsigned int, struct drm_wait_vblank_reply *);
983:	static void send_vblank_event(struct drm_device *, struct drm_pending_vblank_event *, u64, ktime_t);
485:	static void vblank_disable_fn(struct timer_list *);

File drivers/gpu/drm/drm_vblank_work.c:
46:	void drm_handle_vblank_works(struct drm_vblank_crtc *);
70:	void drm_vblank_cancel_pending_works(struct drm_vblank_crtc *);
182:	bool drm_vblank_work_cancel_sync(struct drm_vblank_work *);
218:	void drm_vblank_work_flush(struct drm_vblank_work *);
240:	void drm_vblank_work_init(struct drm_vblank_work *, struct drm_crtc *, void (*)(struct kthread_work *));
106:	int drm_vblank_work_schedule(struct drm_vblank_work *, u64, bool);
249:	int drm_vblank_worker_init(struct drm_vblank_crtc *);

File drivers/gpu/drm/drm_vm.c:
637:	int drm_legacy_mmap(struct file *, struct vm_area_struct *);
655:	void drm_legacy_vma_flush(struct drm_device *);
440:	static void drm_vm_close(struct vm_area_struct *);
299:	static vm_fault_t drm_vm_dma_fault(struct vm_fault *);
183:	static vm_fault_t drm_vm_fault(struct vm_fault *);
405:	static void drm_vm_open(struct vm_area_struct *);
334:	static vm_fault_t drm_vm_sg_fault(struct vm_fault *);
230:	static void drm_vm_shm_close(struct vm_area_struct *);
199:	static vm_fault_t drm_vm_shm_fault(struct vm_fault *);

File drivers/gpu/drm/drm_vma_manager.c:
313:	int drm_vma_node_allow(struct drm_vma_offset_node *, struct drm_file *);
338:	int drm_vma_node_allow_once(struct drm_vma_offset_node *, struct drm_file *);
398:	bool drm_vma_node_is_allowed(struct drm_vma_offset_node *, struct drm_file *);
357:	void drm_vma_node_revoke(struct drm_vma_offset_node *, struct drm_file *);
201:	int drm_vma_offset_add(struct drm_vma_offset_manager *, struct drm_vma_offset_node *, unsigned long);
140:	struct drm_vma_offset_node *drm_vma_offset_lookup_locked(struct drm_vma_offset_manager *, unsigned long, unsigned long);
104:	void drm_vma_offset_manager_destroy(struct drm_vma_offset_manager *);
85:	void drm_vma_offset_manager_init(struct drm_vma_offset_manager *, unsigned long, unsigned long);
229:	void drm_vma_offset_remove(struct drm_vma_offset_manager *, struct drm_vma_offset_node *);
243:	static int vma_node_allow(struct drm_vma_offset_node *, struct drm_file *, bool);

File drivers/gpu/drm/drm_writeback.c:
364:	void drm_writeback_cleanup_job(struct drm_writeback_job *);
175:	int drm_writeback_connector_init(struct drm_device *, struct drm_writeback_connector *, const struct drm_connector_funcs *, const struct drm_encoder_helper_funcs *, const u32 *, int, u32);
233:	int drm_writeback_connector_init_with_encoder(struct drm_device *, struct drm_writeback_connector *, struct drm_encoder *, const struct drm_connector_funcs *, const u32 *, int);
450:	struct dma_fence *drm_writeback_get_out_fence(struct drm_writeback_connector *);
312:	int drm_writeback_prepare_job(struct drm_writeback_job *);
349:	void drm_writeback_queue_job(struct drm_writeback_connector *, struct drm_connector_state *);
293:	int drm_writeback_set_fb(struct drm_connector_state *, struct drm_framebuffer *);
416:	void drm_writeback_signal_completion(struct drm_writeback_connector *, int);
390:	static void cleanup_work(struct work_struct *);
103:	static bool drm_writeback_fence_enable_signaling(struct dma_fence *);
86:	static const char *drm_writeback_fence_get_driver_name(struct dma_fence *);
95:	static const char *drm_writeback_fence_get_timeline_name(struct dma_fence *);

File drivers/gpu/drm/etnaviv/etnaviv_buffer.c:
179:	u16 etnaviv_buffer_config_mmuv2(struct etnaviv_gpu *, u32, u32);
214:	u16 etnaviv_buffer_config_pta(struct etnaviv_gpu *, unsigned short);
232:	void etnaviv_buffer_end(struct etnaviv_gpu *);
162:	u16 etnaviv_buffer_init(struct etnaviv_gpu *);
339:	void etnaviv_buffer_queue(struct etnaviv_gpu *, u32, struct etnaviv_iommu_context *, unsigned int, struct etnaviv_cmdbuf *);
300:	void etnaviv_sync_point_queue(struct etnaviv_gpu *, unsigned int);

File drivers/gpu/drm/etnaviv/etnaviv_cmd_parser.c:
147:	bool etnaviv_cmd_validate_one(struct etnaviv_gpu *, u32 *, unsigned int, struct drm_etnaviv_gem_submit_reloc *, unsigned int);
80:	void etnaviv_validate_init(void);

File drivers/gpu/drm/etnaviv/etnaviv_cmdbuf.c:
118:	void etnaviv_cmdbuf_free(struct etnaviv_cmdbuf *);
139:	dma_addr_t etnaviv_cmdbuf_get_pa(struct etnaviv_cmdbuf *);
133:	u32 etnaviv_cmdbuf_get_va(struct etnaviv_cmdbuf *, struct etnaviv_vram_mapping *);
85:	int etnaviv_cmdbuf_init(struct etnaviv_cmdbuf_suballoc *, struct etnaviv_cmdbuf *, u32);
78:	void etnaviv_cmdbuf_suballoc_destroy(struct etnaviv_cmdbuf_suballoc *);
63:	int etnaviv_cmdbuf_suballoc_map(struct etnaviv_cmdbuf_suballoc *, struct etnaviv_iommu_context *, struct etnaviv_vram_mapping *, u32);
34:	struct etnaviv_cmdbuf_suballoc *etnaviv_cmdbuf_suballoc_new(struct device *);
72:	void etnaviv_cmdbuf_suballoc_unmap(struct etnaviv_iommu_context *, struct etnaviv_vram_mapping *);

File drivers/gpu/drm/etnaviv/etnaviv_drv.c:
497:	static int etnaviv_bind(struct device *);
234:	static void etnaviv_debugfs_init(struct drm_minor *);
703:	static void etnaviv_exit(void);
110:	static int etnaviv_gem_show(struct drm_device *, struct seq_file *);
650:	static int etnaviv_init(void);
297:	static int etnaviv_ioctl_gem_cpu_fini(struct drm_device *, void *, struct drm_file *);
276:	static int etnaviv_ioctl_gem_cpu_prep(struct drm_device *, void *, struct drm_file *);
318:	static int etnaviv_ioctl_gem_info(struct drm_device *, void *, struct drm_file *);
263:	static int etnaviv_ioctl_gem_new(struct drm_device *, void *, struct drm_file *);
363:	static int etnaviv_ioctl_gem_userptr(struct drm_device *, void *, struct drm_file *);
387:	static int etnaviv_ioctl_gem_wait(struct drm_device *, void *, struct drm_file *);
246:	static int etnaviv_ioctl_get_param(struct drm_device *, void *, struct drm_file *);
421:	static int etnaviv_ioctl_pm_query_dom(struct drm_device *, void *, struct drm_file *);
438:	static int etnaviv_ioctl_pm_query_sig(struct drm_device *, void *, struct drm_file *);
338:	static int etnaviv_ioctl_wait_fence(struct drm_device *, void *, struct drm_file *);
119:	static int etnaviv_mm_show(struct drm_device *, struct seq_file *);
130:	static int etnaviv_mmu_show(struct etnaviv_gpu *, struct seq_file *);
49:	static int etnaviv_open(struct drm_device *, struct drm_file *);
577:	static int etnaviv_pdev_probe(struct platform_device *);
633:	static int etnaviv_pdev_remove(struct platform_device *);
87:	static void etnaviv_postclose(struct drm_device *, struct drm_file *);
181:	static int etnaviv_ring_show(struct etnaviv_gpu *, struct seq_file *);
555:	static void etnaviv_unbind(struct device *);
202:	static int show_each_gpu(struct seq_file *, void *);
192:	static int show_unlocked(struct seq_file *, void *);

File drivers/gpu/drm/etnaviv/etnaviv_dump.c:
118:	void etnaviv_core_dump(struct etnaviv_gem_submit *);

File drivers/gpu/drm/etnaviv/etnaviv_gem.c:
407:	int etnaviv_gem_cpu_fini(struct drm_gem_object *);
367:	int etnaviv_gem_cpu_prep(struct drm_gem_object *, u32, struct drm_etnaviv_timespec *);
452:	void etnaviv_gem_describe_objects(struct etnaviv_drm_private *, struct seq_file *);
487:	void etnaviv_gem_free_object(struct drm_gem_object *);
89:	struct page **etnaviv_gem_get_pages(struct etnaviv_gem_object *);
241:	struct etnaviv_vram_mapping *etnaviv_gem_mapping_get(struct drm_gem_object *, struct etnaviv_iommu_context *, u64);
229:	void etnaviv_gem_mapping_unreference(struct etnaviv_vram_mapping *);
201:	int etnaviv_gem_mmap_offset(struct drm_gem_object *, u64 *);
585:	int etnaviv_gem_new_handle(struct drm_device *, struct drm_file *, u32, u32, u32 *);
624:	int etnaviv_gem_new_private(struct drm_device *, size_t, u32, const struct etnaviv_gem_ops *, struct etnaviv_gem_object **);
709:	int etnaviv_gem_new_userptr(struct drm_device *, struct drm_file *, uintptr_t, u32, u32, u32 *);
519:	void etnaviv_gem_obj_add(struct drm_device *, struct drm_gem_object *);
122:	void etnaviv_gem_put_pages(struct etnaviv_gem_object *);
324:	void *etnaviv_gem_vmap(struct drm_gem_object *);
423:	int etnaviv_gem_wait_bo(struct etnaviv_gpu *, struct drm_gem_object *, struct drm_etnaviv_timespec *);
163:	static vm_fault_t etnaviv_gem_fault(struct vm_fault *);
156:	static int etnaviv_gem_mmap(struct drm_gem_object *, struct vm_area_struct *);
128:	static int etnaviv_gem_mmap_obj(struct etnaviv_gem_object *, struct vm_area_struct *);
58:	static int etnaviv_gem_shmem_get_pages(struct etnaviv_gem_object *);
474:	static void etnaviv_gem_shmem_release(struct etnaviv_gem_object *);
641:	static int etnaviv_gem_userptr_get_pages(struct etnaviv_gem_object *);
696:	static int etnaviv_gem_userptr_mmap_obj(struct etnaviv_gem_object *, struct vm_area_struct *);
681:	static void etnaviv_gem_userptr_release(struct etnaviv_gem_object *);
343:	static void *etnaviv_gem_vmap_impl(struct etnaviv_gem_object *);

File drivers/gpu/drm/etnaviv/etnaviv_gem_prime.c:
17:	struct sg_table *etnaviv_gem_prime_get_sg_table(struct drm_gem_object *);
104:	struct drm_gem_object *etnaviv_gem_prime_import_sg_table(struct drm_device *, struct dma_buf_attachment *, struct sg_table *);
40:	int etnaviv_gem_prime_pin(struct drm_gem_object *);
52:	void etnaviv_gem_prime_unpin(struct drm_gem_object *);
28:	int etnaviv_gem_prime_vmap(struct drm_gem_object *, struct iosys_map *);
91:	static int etnaviv_gem_prime_mmap_obj(struct etnaviv_gem_object *, struct vm_area_struct *);
63:	static void etnaviv_gem_prime_release(struct etnaviv_gem_object *);
78:	static void *etnaviv_gem_prime_vmap_impl(struct etnaviv_gem_object *);

File drivers/gpu/drm/etnaviv/etnaviv_gem_submit.c:
414:	int etnaviv_ioctl_gem_submit(struct drm_device *, void *, struct drm_file *);
409:	void etnaviv_submit_put(struct etnaviv_gem_submit *);
199:	static void submit_attach_object_fences(struct etnaviv_gem_submit *);
31:	static struct etnaviv_gem_submit *submit_create(struct drm_device *, struct etnaviv_gpu *, size_t, size_t);
174:	static int submit_fence_sync(struct etnaviv_gem_submit *);
121:	static int submit_lock_objects(struct etnaviv_gem_submit *, struct ww_acquire_ctx *);
55:	static int submit_lookup_objects(struct etnaviv_gem_submit *, struct drm_file *, struct drm_etnaviv_gem_submit_bo *, unsigned int);
313:	static int submit_perfmon_validate(struct etnaviv_gem_submit *, u32, const struct drm_etnaviv_gem_submit_pmr *);
213:	static int submit_pin_objects(struct etnaviv_gem_submit *);
259:	static int submit_reloc(struct etnaviv_gem_submit *, void *, u32, const struct drm_etnaviv_gem_submit_reloc *, u32);

File drivers/gpu/drm/etnaviv/etnaviv_gpu.c:
895:	int etnaviv_gpu_debugfs(struct etnaviv_gpu *, struct seq_file *);
39:	int etnaviv_gpu_get_param(struct etnaviv_gpu *, u32, u64 *);
756:	int etnaviv_gpu_init(struct etnaviv_gpu *);
1056:	void etnaviv_gpu_recover_hang(struct etnaviv_gem_submit *);
642:	void etnaviv_gpu_start_fe(struct etnaviv_gpu *, u32, u16);
1361:	struct dma_fence *etnaviv_gpu_submit(struct etnaviv_gem_submit *);
1231:	int etnaviv_gpu_wait_fence_interruptible(struct etnaviv_gpu *, u32, struct drm_etnaviv_timespec *);
1588:	int etnaviv_gpu_wait_idle(struct etnaviv_gpu *, unsigned int);
1278:	int etnaviv_gpu_wait_obj_inactive(struct etnaviv_gpu *, struct etnaviv_gem_object *, struct drm_etnaviv_timespec *);
1111:	static const char *etnaviv_fence_get_driver_name(struct dma_fence *);
1116:	static const char *etnaviv_fence_get_timeline_name(struct dma_fence *);
1130:	static void etnaviv_fence_release(struct dma_fence *);
1123:	static bool etnaviv_fence_signaled(struct dma_fence *);
1691:	static int etnaviv_gpu_bind(struct device *, struct device *, void *);
1660:	static int etnaviv_gpu_cooling_get_cur_state(struct thermal_cooling_device *, unsigned long *);
1651:	static int etnaviv_gpu_cooling_get_max_state(struct thermal_cooling_device *, unsigned long *);
1671:	static int etnaviv_gpu_cooling_set_cur_state(struct thermal_cooling_device *, unsigned long);
706:	static void etnaviv_gpu_hw_init(struct etnaviv_gpu *);
1801:	static int etnaviv_gpu_platform_probe(struct platform_device *);
1876:	static int etnaviv_gpu_platform_remove(struct platform_device *);
1753:	static void etnaviv_gpu_unbind(struct device *, struct device *, void *);
498:	static int etnaviv_hw_reset(struct etnaviv_gpu *);
1480:	static irqreturn_t irq_handler(int, void *);
1333:	static void sync_point_perfmon_sample_post(struct etnaviv_gpu *, struct etnaviv_event *);
1315:	static void sync_point_perfmon_sample_pre(struct etnaviv_gpu *, struct etnaviv_event *);
1436:	static void sync_point_worker(struct work_struct *);

File drivers/gpu/drm/etnaviv/etnaviv_hwdb.c:
166:	bool etnaviv_fill_identity_from_hwdb(struct etnaviv_gpu *);

File drivers/gpu/drm/etnaviv/etnaviv_iommu.c:
127:	struct etnaviv_iommu_context *etnaviv_iommuv1_context_alloc(struct etnaviv_iommu_global *);
81:	static void etnaviv_iommuv1_dump(struct etnaviv_iommu_context *, void *);
76:	static size_t etnaviv_iommuv1_dump_size(struct etnaviv_iommu_context *);
33:	static void etnaviv_iommuv1_free(struct etnaviv_iommu_context *);
47:	static int etnaviv_iommuv1_map(struct etnaviv_iommu_context *, unsigned long, phys_addr_t, size_t, int);
89:	static void etnaviv_iommuv1_restore(struct etnaviv_gpu *, struct etnaviv_iommu_context *);
62:	static size_t etnaviv_iommuv1_unmap(struct etnaviv_iommu_context *, unsigned long, size_t);

File drivers/gpu/drm/etnaviv/etnaviv_iommu_v2.c:
270:	struct etnaviv_iommu_context *etnaviv_iommuv2_context_alloc(struct etnaviv_iommu_global *);
231:	u32 etnaviv_iommuv2_get_mtlb_addr(struct etnaviv_iommu_context *);
238:	unsigned short etnaviv_iommuv2_get_pta_id(struct etnaviv_iommu_context *);
151:	static void etnaviv_iommuv2_dump(struct etnaviv_iommu_context *, void *);
138:	static size_t etnaviv_iommuv2_dump_size(struct etnaviv_iommu_context *);
47:	static void etnaviv_iommuv2_free(struct etnaviv_iommu_context *);
92:	static int etnaviv_iommuv2_map(struct etnaviv_iommu_context *, unsigned long, phys_addr_t, size_t, int);
244:	static void etnaviv_iommuv2_restore(struct etnaviv_gpu *, struct etnaviv_iommu_context *);
121:	static size_t etnaviv_iommuv2_unmap(struct etnaviv_iommu_context *, unsigned long, size_t);

File drivers/gpu/drm/etnaviv/etnaviv_mmu.c:
370:	struct etnaviv_iommu_context *etnaviv_iommu_context_init(struct etnaviv_iommu_global *, struct etnaviv_cmdbuf_suballoc *);
364:	void etnaviv_iommu_context_put(struct etnaviv_iommu_context *);
485:	void etnaviv_iommu_dump(struct etnaviv_iommu_context *, void *);
480:	size_t etnaviv_iommu_dump_size(struct etnaviv_iommu_context *);
411:	int etnaviv_iommu_get_suballoc_va(struct etnaviv_iommu_context *, struct etnaviv_vram_mapping *, u32, dma_addr_t, size_t);
551:	void etnaviv_iommu_global_fini(struct etnaviv_gpu *);
490:	int etnaviv_iommu_global_init(struct etnaviv_gpu *);
278:	int etnaviv_iommu_map_gem(struct etnaviv_iommu_context *, struct etnaviv_gem_object *, u32, struct etnaviv_vram_mapping *, u64);
462:	void etnaviv_iommu_put_suballoc_va(struct etnaviv_iommu_context *, struct etnaviv_vram_mapping *);
138:	void etnaviv_iommu_reap_mapping(struct etnaviv_vram_mapping *);
405:	void etnaviv_iommu_restore(struct etnaviv_gpu *, struct etnaviv_iommu_context *);
333:	void etnaviv_iommu_unmap_gem(struct etnaviv_iommu_context *, struct etnaviv_vram_mapping *);
39:	static int etnaviv_context_map(struct etnaviv_iommu_context *, unsigned long, phys_addr_t, size_t, int);
151:	static int etnaviv_iommu_find_iova(struct etnaviv_iommu_context *, struct drm_mm_node *, size_t);
126:	static void etnaviv_iommu_remove_mapping(struct etnaviv_iommu_context *, struct etnaviv_vram_mapping *);

File drivers/gpu/drm/etnaviv/etnaviv_mmu.h:
110:	static struct etnaviv_iommu_context *etnaviv_iommu_context_get(struct etnaviv_iommu_context *);

File drivers/gpu/drm/etnaviv/etnaviv_perfmon.c:
569:	void etnaviv_perfmon_process(struct etnaviv_gpu *, const struct etnaviv_perfmon_request *, u32);
499:	int etnaviv_pm_query_dom(struct etnaviv_gpu *, struct drm_etnaviv_pm_domain *);
523:	int etnaviv_pm_query_sig(struct etnaviv_gpu *, struct drm_etnaviv_pm_signal *);
552:	int etnaviv_pm_req_validate(const struct drm_etnaviv_gem_submit_pmr *, u32);
95:	static u32 hi_total_cycle_read(struct etnaviv_gpu *, const struct etnaviv_pm_domain *, const struct etnaviv_pm_signal *);
109:	static u32 hi_total_idle_cycle_read(struct etnaviv_gpu *, const struct etnaviv_pm_domain *, const struct etnaviv_pm_signal *);
40:	static u32 perf_reg_read(struct etnaviv_gpu *, const struct etnaviv_pm_domain *, const struct etnaviv_pm_signal *);
57:	static u32 pipe_perf_reg_read(struct etnaviv_gpu *, const struct etnaviv_pm_domain *, const struct etnaviv_pm_signal *);
76:	static u32 pipe_reg_read(struct etnaviv_gpu *, const struct etnaviv_pm_domain *, const struct etnaviv_pm_signal *);

File drivers/gpu/drm/etnaviv/etnaviv_sched.c:
146:	void etnaviv_sched_fini(struct etnaviv_gpu *);
132:	int etnaviv_sched_init(struct etnaviv_gpu *);
98:	int etnaviv_sched_push_job(struct etnaviv_gem_submit *);
83:	static void etnaviv_sched_free_job(struct drm_sched_job *);
20:	static struct dma_fence *etnaviv_sched_run_job(struct drm_sched_job *);
33:	static enum drm_gpu_sched_stat etnaviv_sched_timedout_job(struct drm_sched_job *);

File drivers/gpu/drm/hisilicon/kirin/dw_drm_dsi.c:
798:	static int dsi_bind(struct device *, struct device *, void *);
122:	static u32 dsi_calc_phy_rate(u32, struct mipi_phy_params *);
902:	static void dsi_driver_exit(void);
902:	static int dsi_driver_init(void);
684:	static int dsi_encoder_atomic_check(struct drm_encoder *, struct drm_crtc_state *, struct drm_connector_state *);
572:	static void dsi_encoder_disable(struct drm_encoder *);
589:	static void dsi_encoder_enable(struct drm_encoder *);
675:	static void dsi_encoder_mode_set(struct drm_encoder *, struct drm_display_mode *, struct drm_display_mode *);
641:	static enum drm_mode_status dsi_encoder_mode_valid(struct drm_encoder *, const struct drm_display_mode *);
725:	static int dsi_host_attach(struct mipi_dsi_host *, struct mipi_dsi_device *);
748:	static int dsi_host_detach(struct mipi_dsi_host *, struct mipi_dsi_device *);
847:	static int dsi_probe(struct platform_device *);
877:	static int dsi_remove(struct platform_device *);
816:	static void dsi_unbind(struct device *, struct device *, void *);

File drivers/gpu/drm/hisilicon/kirin/kirin_drm_ade.c:
487:	static void ade_crtc_atomic_begin(struct drm_crtc *, struct drm_atomic_state *);
461:	static void ade_crtc_atomic_disable(struct drm_crtc *, struct drm_atomic_state *);
438:	static void ade_crtc_atomic_enable(struct drm_crtc *, struct drm_atomic_state *);
500:	static void ade_crtc_atomic_flush(struct drm_crtc *, struct drm_atomic_state *);
290:	static void ade_crtc_disable_vblank(struct drm_crtc *);
275:	static int ade_crtc_enable_vblank(struct drm_crtc *);
140:	static bool ade_crtc_mode_fixup(struct drm_crtc *, const struct drm_display_mode *, struct drm_display_mode *);
475:	static void ade_crtc_mode_set_nofb(struct drm_crtc *);
415:	static void ade_dump_regs(void *);
843:	static void *ade_hw_ctx_alloc(struct platform_device *, struct drm_crtc *);
911:	static void ade_hw_ctx_cleanup(void *);
305:	static irqreturn_t ade_irq_handler(int, void *);
170:	static void ade_ldi_set_mode(struct ade_hw_ctx *, struct drm_display_mode *, struct drm_display_mode *);
759:	static int ade_plane_atomic_check(struct drm_plane *, struct drm_atomic_state *);
820:	static void ade_plane_atomic_disable(struct drm_plane *, struct drm_atomic_state *);
806:	static void ade_plane_atomic_update(struct drm_plane *, struct drm_atomic_state *);
219:	static int ade_power_up(struct ade_hw_ctx *);

File drivers/gpu/drm/hisilicon/kirin/kirin_drm_drv.c:
215:	static int kirin_drm_bind(struct device *);
305:	static void kirin_drm_platform_driver_exit(void);
305:	static int kirin_drm_platform_driver_init(void);
265:	static int kirin_drm_platform_probe(struct platform_device *);
282:	static int kirin_drm_platform_remove(struct platform_device *);
251:	static void kirin_drm_unbind(struct device *);

File drivers/gpu/drm/i2c/ch7006_drv.c:
246:	static int ch7006_encoder_create_resources(struct drm_encoder *, struct drm_connector *);
41:	static void ch7006_encoder_destroy(struct drm_encoder *);
177:	static enum drm_connector_status ch7006_encoder_detect(struct drm_encoder *, struct drm_connector *);
53:	static void ch7006_encoder_dpms(struct drm_encoder *, int);
225:	static int ch7006_encoder_get_modes(struct drm_encoder *, struct drm_connector *);
436:	static int ch7006_encoder_init(struct i2c_client *, struct drm_device *, struct drm_encoder_slave *);
90:	static bool ch7006_encoder_mode_fixup(struct drm_encoder *, const struct drm_display_mode *, struct drm_display_mode *);
113:	static void ch7006_encoder_mode_set(struct drm_encoder *, struct drm_display_mode *, struct drm_display_mode *);
104:	static int ch7006_encoder_mode_valid(struct drm_encoder *, struct drm_display_mode *);
80:	static void ch7006_encoder_restore(struct drm_encoder *);
70:	static void ch7006_encoder_save(struct drm_encoder *);
33:	static void ch7006_encoder_set_config(struct drm_encoder *, void *);
281:	static int ch7006_encoder_set_property(struct drm_encoder *, struct drm_connector *, struct drm_property *, uint64_t);
520:	static void ch7006_exit(void);
515:	static int ch7006_init(void);
389:	static int ch7006_probe(struct i2c_client *, const struct i2c_device_id *);
420:	static void ch7006_remove(struct i2c_client *);
425:	static int ch7006_resume(struct device *);

File drivers/gpu/drm/i2c/ch7006_mode.c:
173:	const struct ch7006_mode *ch7006_lookup_mode(struct drm_encoder *, const struct drm_display_mode *);
379:	uint8_t ch7006_read(struct i2c_client *, uint8_t);
199:	void ch7006_setup_levels(struct drm_encoder *);
254:	void ch7006_setup_pll(struct drm_encoder *);
292:	void ch7006_setup_power_state(struct drm_encoder *);
325:	void ch7006_setup_properties(struct drm_encoder *);
230:	void ch7006_setup_subcarrier(struct drm_encoder *);
400:	void ch7006_state_load(struct i2c_client *, struct ch7006_state *);
434:	void ch7006_state_save(struct i2c_client *, struct ch7006_state *);
368:	void ch7006_write(struct i2c_client *, uint8_t, uint8_t);

File drivers/gpu/drm/i2c/sil164_drv.c:
310:	static int sil164_encoder_create_resources(struct drm_encoder *, struct drm_connector *);
326:	static void sil164_encoder_destroy(struct drm_encoder *);
291:	static enum drm_connector_status sil164_encoder_detect(struct drm_encoder *, struct drm_connector *);
218:	static void sil164_encoder_dpms(struct drm_encoder *, int);
303:	static int sil164_encoder_get_modes(struct drm_encoder *, struct drm_connector *);
394:	static int sil164_encoder_init(struct i2c_client *, struct drm_device *, struct drm_encoder_slave *);
273:	static void sil164_encoder_mode_set(struct drm_encoder *, struct drm_display_mode *, struct drm_display_mode *);
257:	static int sil164_encoder_mode_valid(struct drm_encoder *, struct drm_display_mode *);
244:	static void sil164_encoder_restore(struct drm_encoder *);
231:	static void sil164_encoder_save(struct drm_encoder *);
210:	static void sil164_encoder_set_config(struct drm_encoder *, void *);
317:	static int sil164_encoder_set_property(struct drm_encoder *, struct drm_connector *, struct drm_property *, uint64_t);
441:	static void sil164_exit(void);
435:	static int sil164_init(void);
171:	static void sil164_init_state(struct i2c_client *, struct sil164_encoder_params *, bool);
353:	static int sil164_probe(struct i2c_client *, const struct i2c_device_id *);
149:	static void sil164_restore_state(struct i2c_client *, uint8_t *);
158:	static void sil164_set_power_state(struct i2c_client *, bool);

File drivers/gpu/drm/i2c/tda998x_drv.c:
450:	static void cec_enamods(struct tda998x_priv *, u8, bool);
423:	static u8 cec_read(struct tda998x_priv *, u8);
406:	static void cec_write(struct tda998x_priv *, u16, u8);
1219:	static int read_edid_block(void *, u8 *, unsigned int, size_t);
579:	static int reg_read_range(struct tda998x_priv *, u16, char *, int);
689:	static void reg_set(struct tda998x_priv *, u16, u8);
651:	static void reg_write(struct tda998x_priv *, u16, u8);
670:	static void reg_write16(struct tda998x_priv *, u16, u16);
610:	static void reg_write_range(struct tda998x_priv *, u16, u8 *, int);
1171:	static int tda998x_audio_codec_init(struct tda998x_priv *, struct device *);
1150:	static int tda998x_audio_get_eld(struct device *, void *, uint8_t *, size_t);
1063:	static int tda998x_audio_hw_params(struct device *, void *, struct hdmi_codec_daifmt *, struct hdmi_codec_params *);
993:	static void tda998x_audio_mute(struct tda998x_priv *, bool);
1137:	static int tda998x_audio_mute_stream(struct device *, void *, bool, int);
1125:	static void tda998x_audio_shutdown(struct device *, void *);
2041:	static int tda998x_bind(struct device *, struct device *, void *);
1365:	static int tda998x_bridge_attach(struct drm_bridge *, enum drm_bridge_attach_flags);
1378:	static void tda998x_bridge_detach(struct drm_bridge *);
1419:	static void tda998x_bridge_disable(struct drm_bridge *);
1401:	static void tda998x_bridge_enable(struct drm_bridge *);
1433:	static void tda998x_bridge_mode_set(struct drm_bridge *, const struct drm_display_mode *, const struct drm_display_mode *);
1385:	static enum drm_mode_status tda998x_bridge_mode_valid(struct drm_bridge *, const struct drm_display_info *, const struct drm_display_mode *);
533:	static void tda998x_cec_hook_exit(void *);
516:	static int tda998x_cec_hook_init(void *);
541:	static int tda998x_cec_hook_open(void *);
551:	static void tda998x_cec_hook_release(void *);
1004:	static void tda998x_configure_audio(struct tda998x_priv *);
1324:	static struct drm_encoder *tda998x_connector_best_encoder(struct drm_connector *);
1205:	static void tda998x_connector_destroy(struct drm_connector *);
1196:	static enum drm_connector_status tda998x_connector_detect(struct drm_connector *, bool);
1283:	static int tda998x_connector_get_modes(struct drm_connector *);
1786:	static void tda998x_destroy(struct device *);
776:	static void tda998x_detect_work(struct work_struct *);
2111:	static void tda998x_driver_exit(void);
2111:	static int tda998x_driver_init(void);
751:	static void tda998x_edid_delay_done(struct timer_list *);
1693:	static int tda998x_get_audio_ports(struct tda998x_priv *, struct device_node *);
789:	static irqreturn_t tda998x_irq_thread(int, void *);
2062:	static int tda998x_probe(struct i2c_client *, const struct i2c_device_id *);
2081:	static void tda998x_remove(struct i2c_client *);
1748:	static int tda998x_set_config(struct tda998x_priv *, const struct tda998x_encoder_params *);
2048:	static void tda998x_unbind(struct device *, struct device *, void *);
829:	static void tda998x_write_if(struct tda998x_priv *, u8, u16, union hdmi_infoframe *);

File drivers/gpu/drm/lima/lima_bcast.c:
14:	void lima_bcast_enable(struct lima_device *, int);
58:	void lima_bcast_fini(struct lima_ip *);
46:	int lima_bcast_init(struct lima_ip *);
36:	int lima_bcast_resume(struct lima_ip *);
41:	void lima_bcast_suspend(struct lima_ip *);

File drivers/gpu/drm/lima/lima_ctx.c:
9:	int lima_ctx_create(struct lima_device *, struct lima_ctx_mgr *, u32 *);
52:	int lima_ctx_free(struct lima_ctx_mgr *, u32);
67:	struct lima_ctx *lima_ctx_get(struct lima_ctx_mgr *, u32);
90:	void lima_ctx_mgr_fini(struct lima_ctx_mgr *);
84:	void lima_ctx_mgr_init(struct lima_ctx_mgr *);
79:	void lima_ctx_put(struct lima_ctx *);

File drivers/gpu/drm/lima/lima_devfreq.c:
90:	void lima_devfreq_fini(struct lima_device *);
105:	int lima_devfreq_init(struct lima_device *);
178:	void lima_devfreq_record_busy(struct lima_devfreq *);
194:	void lima_devfreq_record_idle(struct lima_devfreq *);
210:	int lima_devfreq_resume(struct lima_devfreq *);
226:	int lima_devfreq_suspend(struct lima_devfreq *);
54:	static int lima_devfreq_get_dev_status(struct device *, struct devfreq_dev_status *);
34:	static int lima_devfreq_target(struct device *, unsigned long *, u32);

File drivers/gpu/drm/lima/lima_device.c:
440:	void lima_device_fini(struct lima_device *);
355:	int lima_device_init(struct lima_device *);
468:	int lima_device_resume(struct device *);
510:	int lima_device_suspend(struct device *);
80:	const char *lima_ip_name(struct lima_ip *);
85:	static int lima_clk_enable(struct lima_device *);
304:	static int lima_init_pp_pipe(struct lima_device *);

File drivers/gpu/drm/lima/lima_dlbu.c:
30:	void lima_dlbu_disable(struct lima_device *);
15:	void lima_dlbu_enable(struct lima_device *, int);
70:	void lima_dlbu_fini(struct lima_ip *);
65:	int lima_dlbu_init(struct lima_ip *);
55:	int lima_dlbu_resume(struct lima_ip *);
37:	void lima_dlbu_set_reg(struct lima_ip *, u32 *);
60:	void lima_dlbu_suspend(struct lima_ip *);

File drivers/gpu/drm/lima/lima_drv.c:
211:	static int lima_drm_driver_open(struct drm_device *, struct drm_file *);
237:	static void lima_drm_driver_postclose(struct drm_device *, struct drm_file *);
315:	static ssize_t lima_error_state_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
341:	static ssize_t lima_error_state_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
188:	static int lima_ioctl_ctx_create(struct drm_device *, void *, struct drm_file *);
200:	static int lima_ioctl_ctx_free(struct drm_device *, void *, struct drm_file *);
78:	static int lima_ioctl_gem_create(struct drm_device *, void *, struct drm_file *);
94:	static int lima_ioctl_gem_info(struct drm_device *, void *, struct drm_file *);
101:	static int lima_ioctl_gem_submit(struct drm_device *, void *, struct drm_file *);
178:	static int lima_ioctl_gem_wait(struct drm_device *, void *, struct drm_file *);
36:	static int lima_ioctl_get_param(struct drm_device *, void *, struct drm_file *);
372:	static int lima_pdev_probe(struct platform_device *);
442:	static int lima_pdev_remove(struct platform_device *);
485:	static void lima_platform_driver_exit(void);
485:	static int lima_platform_driver_init(void);

File drivers/gpu/drm/lima/lima_gem.c:
103:	int lima_gem_create_handle(struct drm_device *, struct drm_file *, u32, u32, u32 *);
220:	struct drm_gem_object *lima_gem_create_object(struct drm_device *, size_t);
236:	int lima_gem_get_info(struct drm_file *, u32, u32 *, u64 *);
300:	int lima_gem_submit(struct drm_file *, struct lima_submit *);
404:	int lima_gem_wait(struct drm_file *, u32, u32, s64);
21:	int lima_heap_alloc(struct lima_bo *, struct lima_vm *);
148:	static void lima_gem_free_object(struct drm_gem_object *);
196:	static int lima_gem_mmap(struct drm_gem_object *, struct vm_area_struct *);
167:	static void lima_gem_object_close(struct drm_gem_object *, struct drm_file *);
158:	static int lima_gem_object_open(struct drm_gem_object *, struct drm_file *);
176:	static int lima_gem_pin(struct drm_gem_object *);
186:	static int lima_gem_vmap(struct drm_gem_object *, struct iosys_map *);

File drivers/gpu/drm/lima/lima_gp.c:
318:	void lima_gp_fini(struct lima_ip *);
294:	int lima_gp_init(struct lima_ip *);
351:	void lima_gp_pipe_fini(struct lima_device *);
323:	int lima_gp_pipe_init(struct lima_device *);
284:	int lima_gp_resume(struct lima_ip *);
289:	void lima_gp_suspend(struct lima_ip *);
20:	static irqreturn_t lima_gp_irq_handler(int, void *);
79:	static int lima_gp_soft_reset_async_wait(struct lima_ip *);
200:	static void lima_gp_task_error(struct lima_sched_pipe *);
195:	static void lima_gp_task_fini(struct lima_sched_pipe *);
210:	static void lima_gp_task_mmu_error(struct lima_sched_pipe *);
215:	static int lima_gp_task_recover(struct lima_sched_pipe *);
127:	static void lima_gp_task_run(struct lima_sched_pipe *, struct lima_sched_task *);
103:	static int lima_gp_task_validate(struct lima_sched_pipe *, struct lima_sched_task *);

File drivers/gpu/drm/lima/lima_l2_cache.c:
95:	void lima_l2_cache_fini(struct lima_ip *);
30:	int lima_l2_cache_flush(struct lima_ip *);
67:	int lima_l2_cache_init(struct lima_ip *);
57:	int lima_l2_cache_resume(struct lima_ip *);
62:	void lima_l2_cache_suspend(struct lima_ip *);

File drivers/gpu/drm/lima/lima_mmu.c:
119:	void lima_mmu_fini(struct lima_ip *);
124:	void lima_mmu_flush_tlb(struct lima_ip *);
95:	int lima_mmu_init(struct lima_ip *);
148:	void lima_mmu_page_fault_resume(struct lima_ip *);
82:	int lima_mmu_resume(struct lima_ip *);
90:	void lima_mmu_suspend(struct lima_ip *);
129:	void lima_mmu_switch_vm(struct lima_ip *, struct lima_vm *);
62:	static int lima_mmu_hw_init(struct lima_ip *);
29:	static irqreturn_t lima_mmu_irq_handler(int, void *);

File drivers/gpu/drm/lima/lima_pmu.c:
128:	void lima_pmu_fini(struct lima_ip *);
123:	int lima_pmu_init(struct lima_ip *);
113:	int lima_pmu_resume(struct lima_ip *);
118:	void lima_pmu_suspend(struct lima_ip *);
91:	static void lima_pmu_hw_fini(struct lima_ip *);
14:	static int lima_pmu_wait_cmd(struct lima_ip *);

File drivers/gpu/drm/lima/lima_pp.c:
300:	void lima_pp_bcast_fini(struct lima_ip *);
284:	int lima_pp_bcast_init(struct lima_ip *);
272:	int lima_pp_bcast_resume(struct lima_ip *);
279:	void lima_pp_bcast_suspend(struct lima_ip *);
267:	void lima_pp_fini(struct lima_ip *);
243:	int lima_pp_init(struct lima_ip *);
454:	void lima_pp_pipe_fini(struct lima_device *);
422:	int lima_pp_pipe_init(struct lima_device *);
233:	int lima_pp_resume(struct lima_ip *);
238:	void lima_pp_suspend(struct lima_ip *);
60:	static irqreturn_t lima_pp_bcast_irq_handler(int, void *);
41:	static irqreturn_t lima_pp_irq_handler(int, void *);
121:	static int lima_pp_soft_reset_async_wait_one(struct lima_ip *);
399:	static void lima_pp_task_error(struct lima_sched_pipe *);
387:	static void lima_pp_task_fini(struct lima_sched_pipe *);
413:	static void lima_pp_task_mmu_error(struct lima_sched_pipe *);
329:	static void lima_pp_task_run(struct lima_sched_pipe *, struct lima_sched_task *);
305:	static int lima_pp_task_validate(struct lima_sched_pipe *, struct lima_sched_task *);
158:	static void lima_pp_write_frame(struct lima_ip *, u32 *, u32 *);

File drivers/gpu/drm/lima/lima_sched.c:
165:	void lima_sched_context_fini(struct lima_sched_pipe *, struct lima_sched_context *);
155:	int lima_sched_context_init(struct lima_sched_pipe *, struct lima_sched_context *, atomic_t *);
171:	struct dma_fence *lima_sched_context_queue_task(struct lima_sched_task *);
497:	void lima_sched_pipe_fini(struct lima_sched_pipe *);
481:	int lima_sched_pipe_init(struct lima_sched_pipe *, const char *);
502:	void lima_sched_pipe_task_done(struct lima_sched_pipe *);
41:	void lima_sched_slab_fini(void);
27:	int lima_sched_slab_init(void);
140:	void lima_sched_task_fini(struct lima_sched_task *);
112:	int lima_sched_task_init(struct lima_sched_task *, struct lima_sched_context *, struct lima_bo **, int, struct lima_vm *);
54:	static const char *lima_fence_get_driver_name(struct dma_fence *);
59:	static const char *lima_fence_get_timeline_name(struct dma_fence *);
74:	static void lima_fence_release(struct dma_fence *);
66:	static void lima_fence_release_rcu(struct callback_head *);
438:	static void lima_sched_free_job(struct drm_sched_job *);
461:	static void lima_sched_recover_work(struct work_struct *);
202:	static struct dma_fence *lima_sched_run_job(struct drm_sched_job *);
399:	static enum drm_gpu_sched_stat lima_sched_timedout_job(struct drm_sched_job *);

File drivers/gpu/drm/lima/lima_vm.c:
91:	int lima_vm_bo_add(struct lima_vm *, struct lima_bo *, bool);
155:	void lima_vm_bo_del(struct lima_vm *, struct lima_bo *);
200:	struct lima_vm *lima_vm_create(struct lima_device *);
185:	u32 lima_vm_get_va(struct lima_vm *, struct lima_bo *);
283:	int lima_vm_map_bo(struct lima_vm *, struct lima_bo *, int);
254:	void lima_vm_print(struct lima_vm *);
235:	void lima_vm_release(struct kref *);

File drivers/gpu/drm/mxsfb/mxsfb_drv.c:
85:	void mxsfb_disable_axi_clk(struct mxsfb_drm_private *);
79:	void mxsfb_enable_axi_clk(struct mxsfb_drm_private *);
92:	static struct drm_framebuffer *mxsfb_fb_create(struct drm_device *, struct drm_file *, const struct drm_mode_fb_cmd2 *);
182:	static void mxsfb_irq_disable(struct drm_device *);
159:	static irqreturn_t mxsfb_irq_handler(int, void *);
195:	static int mxsfb_irq_install(struct drm_device *, int);
432:	static void mxsfb_platform_driver_exit(void);
432:	static int mxsfb_platform_driver_init(void);
348:	static int mxsfb_probe(struct platform_device *);
382:	static int mxsfb_remove(struct platform_device *);
394:	static void mxsfb_shutdown(struct platform_device *);

File drivers/gpu/drm/mxsfb/mxsfb_kms.c:
665:	int mxsfb_kms_init(struct mxsfb_drm_private *);
311:	static int mxsfb_crtc_atomic_check(struct drm_crtc *, struct drm_atomic_state *);
400:	static void mxsfb_crtc_atomic_disable(struct drm_crtc *, struct drm_atomic_state *);
346:	static void mxsfb_crtc_atomic_enable(struct drm_crtc *, struct drm_atomic_state *);
327:	static void mxsfb_crtc_atomic_flush(struct drm_crtc *, struct drm_atomic_state *);
434:	static void mxsfb_crtc_disable_vblank(struct drm_crtc *);
423:	static int mxsfb_crtc_enable_vblank(struct drm_crtc *);
443:	static int mxsfb_crtc_set_crc_source(struct drm_crtc *, const char *);
462:	static int mxsfb_crtc_verify_crc_source(struct drm_crtc *, const char *, size_t *);
614:	static bool mxsfb_format_mod_supported(struct drm_plane *, uint32_t, uint64_t);
521:	static int mxsfb_plane_atomic_check(struct drm_plane *, struct drm_atomic_state *);
551:	static void mxsfb_plane_overlay_atomic_update(struct drm_plane *, struct drm_atomic_state *);
538:	static void mxsfb_plane_primary_atomic_update(struct drm_plane *, struct drm_atomic_state *);

File drivers/gpu/drm/panel/panel-boe-tv101wum-nl6.c:
1196:	static int boe_panel_disable(struct drm_panel *);
1683:	static void boe_panel_driver_exit(void);
1683:	static int boe_panel_driver_init(void);
1301:	static int boe_panel_enable(struct drm_panel *);
1500:	static int boe_panel_get_modes(struct drm_panel *, struct drm_connector *);
1530:	static enum drm_panel_orientation boe_panel_get_orientation(struct drm_panel *);
1242:	static int boe_panel_prepare(struct drm_panel *);
1596:	static int boe_panel_probe(struct mipi_dsi_device *);
1633:	static void boe_panel_remove(struct mipi_dsi_device *);
1625:	static void boe_panel_shutdown(struct mipi_dsi_device *);
1212:	static int boe_panel_unprepare(struct drm_panel *);

File drivers/gpu/drm/panel/panel-lvds.c:
258:	static void panel_lvds_driver_exit(void);
258:	static int panel_lvds_driver_init(void);
84:	static int panel_lvds_get_modes(struct drm_panel *, struct drm_connector *);
112:	static enum drm_panel_orientation panel_lvds_get_orientation(struct drm_panel *);
63:	static int panel_lvds_prepare(struct drm_panel *);
162:	static int panel_lvds_probe(struct platform_device *);
231:	static int panel_lvds_remove(struct platform_device *);
50:	static int panel_lvds_unprepare(struct drm_panel *);

File drivers/gpu/drm/panel/panel-mantix-mlaf057we51.c:
116:	static int mantix_disable(struct drm_panel *);
365:	static void mantix_driver_exit(void);
365:	static int mantix_driver_init(void);
82:	static int mantix_enable(struct drm_panel *);
228:	static int mantix_get_modes(struct drm_panel *, struct drm_connector *);
153:	static int mantix_prepare(struct drm_panel *);
264:	static int mantix_probe(struct mipi_dsi_device *);
339:	static void mantix_remove(struct mipi_dsi_device *);
331:	static void mantix_shutdown(struct mipi_dsi_device *);
134:	static int mantix_unprepare(struct drm_panel *);

File drivers/gpu/drm/panel/panel-raydium-rm67191.c:
464:	static int rad_bl_get_brightness(struct backlight_device *);
485:	static int rad_bl_update_status(struct backlight_device *);
402:	static int rad_panel_disable(struct drm_panel *);
655:	static void rad_panel_driver_exit(void);
655:	static int rad_panel_driver_init(void);
317:	static int rad_panel_enable(struct drm_panel *);
437:	static int rad_panel_get_modes(struct drm_panel *, struct drm_connector *);
265:	static int rad_panel_prepare(struct drm_panel *);
538:	static int rad_panel_probe(struct mipi_dsi_device *);
619:	static void rad_panel_remove(struct mipi_dsi_device *);
632:	static void rad_panel_shutdown(struct mipi_dsi_device *);
289:	static int rad_panel_unprepare(struct drm_panel *);

File drivers/gpu/drm/panel/panel-sitronix-st7703.c:
513:	static int allpixelson_fops_open(struct inode *, struct file *);
496:	static int allpixelson_set(void *, u64);
84:	static int jh057n_init_sequence(struct st7703 *);
516:	static void st7703_debugfs_init(struct st7703 *);
390:	static int st7703_disable(struct drm_panel *);
633:	static void st7703_driver_exit(void);
633:	static int st7703_driver_init(void);
358:	static int st7703_enable(struct drm_panel *);
460:	static int st7703_get_modes(struct drm_panel *, struct drm_connector *);
422:	static int st7703_prepare(struct drm_panel *);
530:	static int st7703_probe(struct mipi_dsi_device *);
601:	static void st7703_remove(struct mipi_dsi_device *);
587:	static void st7703_shutdown(struct mipi_dsi_device *);
407:	static int st7703_unprepare(struct drm_panel *);
174:	static int xbd599_init_sequence(struct st7703 *);

File drivers/gpu/drm/panel/panel-truly-nt35597.c:
311:	static int truly_nt35597_disable(struct drm_panel *);
650:	static void truly_nt35597_driver_exit(void);
650:	static int truly_nt35597_driver_init(void);
422:	static int truly_nt35597_enable(struct drm_panel *);
441:	static int truly_nt35597_get_modes(struct drm_panel *, struct drm_connector *);
288:	static int truly_nt35597_power_off(struct truly_nt35597 *);
361:	static int truly_nt35597_prepare(struct drm_panel *);
529:	static int truly_nt35597_probe(struct mipi_dsi_device *);
619:	static void truly_nt35597_remove(struct mipi_dsi_device *);
329:	static int truly_nt35597_unprepare(struct drm_panel *);

File drivers/gpu/drm/panfrost/panfrost_devfreq.c:
172:	void panfrost_devfreq_fini(struct panfrost_device *);
85:	int panfrost_devfreq_init(struct panfrost_device *);
204:	void panfrost_devfreq_record_busy(struct panfrost_devfreq *);
220:	void panfrost_devfreq_record_idle(struct panfrost_devfreq *);
182:	void panfrost_devfreq_resume(struct panfrost_device *);
194:	void panfrost_devfreq_suspend(struct panfrost_device *);
48:	static int panfrost_devfreq_get_dev_status(struct device *, struct devfreq_dev_status *);
28:	static int panfrost_devfreq_target(struct device *, unsigned long *, u32);

File drivers/gpu/drm/panfrost/panfrost_device.c:
281:	void panfrost_device_fini(struct panfrost_device *);
199:	int panfrost_device_init(struct panfrost_device *);
394:	void panfrost_device_reset(struct panfrost_device *);
372:	const char *panfrost_exception_name(u32);
381:	bool panfrost_exception_needs_reset(const struct panfrost_device *, u32);

File drivers/gpu/drm/panfrost/panfrost_drv.c:
459:	int panfrost_unstable_ioctl_check(void);
702:	static void panfrost_driver_exit(void);
702:	static int panfrost_driver_init(void);
78:	static int panfrost_ioctl_create_bo(struct drm_device *, void *, struct drm_file *);
372:	static int panfrost_ioctl_get_bo_offset(struct drm_device *, void *, struct drm_file *);
26:	static int panfrost_ioctl_get_param(struct drm_device *, void *, struct drm_file *);
399:	static int panfrost_ioctl_madvise(struct drm_device *, void *, struct drm_file *);
339:	static int panfrost_ioctl_mmap_bo(struct drm_device *, void *, struct drm_file *);
241:	static int panfrost_ioctl_submit(struct drm_device *, void *, struct drm_file *);
314:	static int panfrost_ioctl_wait_bo(struct drm_device *, void *, struct drm_file *);
468:	static int panfrost_open(struct drm_device *, struct drm_file *);
501:	static void panfrost_postclose(struct drm_device *, struct drm_file *);
555:	static int panfrost_probe(struct platform_device *);
621:	static int panfrost_remove(struct platform_device *);

File drivers/gpu/drm/panfrost/panfrost_dump.c:
103:	void panfrost_core_dump(struct panfrost_job *);

File drivers/gpu/drm/panfrost/panfrost_gem.c:
169:	void panfrost_gem_close(struct drm_gem_object *, struct drm_file *);
238:	struct panfrost_gem_object *panfrost_gem_create(struct drm_device *, size_t, u32);
220:	struct drm_gem_object *panfrost_gem_create_object(struct drm_device *, size_t);
56:	struct panfrost_gem_mapping *panfrost_gem_mapping_get(struct panfrost_gem_object *, struct panfrost_file_priv *);
98:	void panfrost_gem_mapping_put(struct panfrost_gem_mapping *);
114:	int panfrost_gem_open(struct drm_gem_object *, struct drm_file *);
259:	struct drm_gem_object *panfrost_gem_prime_import_sg_table(struct drm_device *, struct dma_buf_attachment *, struct sg_table *);
106:	void panfrost_gem_teardown_mappings_locked(struct panfrost_gem_object *);
17:	static void panfrost_gem_free_object(struct drm_gem_object *);
188:	static int panfrost_gem_pin(struct drm_gem_object *);

File drivers/gpu/drm/panfrost/panfrost_gem_shrinker.c:
115:	void panfrost_gem_shrinker_cleanup(struct drm_device *);
100:	void panfrost_gem_shrinker_init(struct drm_device *);
19:	static unsigned long panfrost_gem_shrinker_count(struct shrinker *, struct shrink_control *);
66:	static unsigned long panfrost_gem_shrinker_scan(struct shrinker *, struct shrink_control *);

File drivers/gpu/drm/panfrost/panfrost_gpu.c:
79:	void panfrost_gpu_amlogic_quirk(struct panfrost_device *);
400:	void panfrost_gpu_fini(struct panfrost_device *);
405:	u32 panfrost_gpu_get_latest_flush_id(struct panfrost_device *);
367:	int panfrost_gpu_init(struct panfrost_device *);
360:	void panfrost_gpu_power_off(struct panfrost_device *);
316:	void panfrost_gpu_power_on(struct panfrost_device *);
56:	int panfrost_gpu_soft_reset(struct panfrost_device *);
22:	static irqreturn_t panfrost_gpu_irq_handler(int, void *);

File drivers/gpu/drm/panfrost/panfrost_job.c:
874:	void panfrost_job_close(struct panfrost_file_priv *);
386:	void panfrost_job_enable_interrupts(struct panfrost_device *);
841:	void panfrost_job_fini(struct panfrost_device *);
106:	int panfrost_job_get_slot(struct panfrost_job *);
776:	int panfrost_job_init(struct panfrost_device *);
918:	int panfrost_job_is_idle(struct panfrost_device *);
856:	int panfrost_job_open(struct panfrost_file_priv *);
275:	int panfrost_job_push(struct panfrost_job *);
343:	void panfrost_job_put(struct panfrost_job *);
62:	static const char *panfrost_fence_get_driver_name(struct dma_fence *);
67:	static const char *panfrost_fence_get_timeline_name(struct dma_fence *);
348:	static void panfrost_job_free(struct drm_sched_job *);
568:	static void panfrost_job_handle_irqs(struct panfrost_device *);
764:	static irqreturn_t panfrost_job_irq_handler(int, void *);
753:	static irqreturn_t panfrost_job_irq_handler_thread(int, void *);
357:	static struct dma_fence *panfrost_job_run(struct drm_sched_job *);
709:	static enum drm_gpu_sched_stat panfrost_job_timedout(struct drm_sched_job *);
604:	static void panfrost_reset(struct panfrost_device *, struct drm_sched_job *);
739:	static void panfrost_reset_work(struct work_struct *);

File drivers/gpu/drm/panfrost/panfrost_mmu.c:
158:	u32 panfrost_mmu_as_get(struct panfrost_device *, struct panfrost_mmu *);
224:	void panfrost_mmu_as_put(struct panfrost_device *, struct panfrost_mmu *);
606:	struct panfrost_mmu *panfrost_mmu_ctx_create(struct panfrost_device *);
573:	struct panfrost_mmu *panfrost_mmu_ctx_get(struct panfrost_mmu *);
568:	void panfrost_mmu_ctx_put(struct panfrost_mmu *);
773:	void panfrost_mmu_fini(struct panfrost_device *);
751:	int panfrost_mmu_init(struct panfrost_device *);
321:	int panfrost_mmu_map(struct panfrost_gem_mapping *);
230:	void panfrost_mmu_reset(struct panfrost_device *);
347:	void panfrost_mmu_unmap(struct panfrost_gem_mapping *);
96:	static int mmu_hw_do_operation_locked(struct panfrost_device *, int, u64, u64, u32);
288:	static int mmu_map_sg(struct panfrost_device *, struct panfrost_mmu *, u64, int, struct sg_table *);
391:	static void mmu_tlb_flush_walk(unsigned long, size_t, size_t, void *);
382:	static void mmu_tlb_inv_context_s1(void *);
584:	static void panfrost_drm_mm_color_adjust(const struct drm_mm_node *, unsigned long, u64 *, u64 *);
124:	static void panfrost_mmu_enable(struct panfrost_device *, struct panfrost_mmu *);
666:	static irqreturn_t panfrost_mmu_irq_handler(int, void *);
677:	static irqreturn_t panfrost_mmu_irq_handler_thread(int, void *);
29:	static int wait_ready(struct panfrost_device *, u32);

File drivers/gpu/drm/panfrost/panfrost_perfcnt.c:
237:	int panfrost_ioctl_perfcnt_dump(struct drm_device *, void *, struct drm_file *);
210:	int panfrost_ioctl_perfcnt_enable(struct drm_device *, void *, struct drm_file *);
38:	void panfrost_perfcnt_clean_cache_done(struct panfrost_device *);
269:	void panfrost_perfcnt_close(struct drm_file *);
340:	void panfrost_perfcnt_fini(struct panfrost_device *);
284:	int panfrost_perfcnt_init(struct panfrost_device *);
43:	void panfrost_perfcnt_sample_done(struct panfrost_device *);
180:	static int panfrost_perfcnt_disable_locked(struct panfrost_device *, struct drm_file *);

File drivers/gpu/drm/pl111/pl111_debugfs.c:
54:	void pl111_debugfs_init(struct drm_minor *);
33:	static int pl111_debugfs_regs(struct seq_file *, void *);

File drivers/gpu/drm/pl111/pl111_display.c:
572:	int pl111_display_init(struct drm_device *);
27:	irqreturn_t pl111_irq(int, void *);
484:	static unsigned long pl111_clk_div_recalc_rate(struct clk_hw *, unsigned long);
476:	static long pl111_clk_div_round_rate(struct clk_hw *, unsigned long, unsigned long *);
503:	static int pl111_clk_div_set_rate(struct clk_hw *, unsigned long, unsigned long);
85:	static int pl111_display_check(struct drm_simple_display_pipe *, struct drm_plane_state *, struct drm_crtc_state *);
357:	static void pl111_display_disable(struct drm_simple_display_pipe *);
429:	static void pl111_display_disable_vblank(struct drm_simple_display_pipe *);
119:	static void pl111_display_enable(struct drm_simple_display_pipe *, struct drm_crtc_state *, struct drm_plane_state *);
418:	static int pl111_display_enable_vblank(struct drm_simple_display_pipe *);
389:	static void pl111_display_update(struct drm_simple_display_pipe *, struct drm_plane_state *);
51:	static enum drm_mode_status pl111_mode_valid(struct drm_simple_display_pipe *, const struct drm_display_mode *);

File drivers/gpu/drm/pl111/pl111_drv.c:
441:	static void pl111_amba_driver_exit(void);
441:	static int pl111_amba_driver_init(void);
237:	static int pl111_amba_probe(struct amba_device *, const struct amba_id *);
322:	static void pl111_amba_remove(struct amba_device *);
196:	static struct drm_gem_object *pl111_gem_import_sg_table(struct drm_device *, struct dma_buf_attachment *, struct sg_table *);

File drivers/gpu/drm/pl111/pl111_versatile.c:
473:	int pl111_versatile_init(struct device *, struct pl111_drm_dev_private *);
167:	static void pl111_impd1_disable(struct drm_device *);
154:	static void pl111_impd1_enable(struct drm_device *, u32);
114:	static void pl111_integrator_enable(struct drm_device *, u32);
247:	static void pl111_realview_clcd_disable(struct drm_device *);
256:	static void pl111_realview_clcd_enable(struct drm_device *, u32);
194:	static void pl111_versatile_disable(struct drm_device *);
203:	static void pl111_versatile_enable(struct drm_device *, u32);

File drivers/gpu/drm/rcar-du/rcar_dw_hdmi.c:
120:	static void rcar_dw_hdmi_platform_driver_exit(void);
120:	static int rcar_dw_hdmi_platform_driver_init(void);
83:	static int rcar_dw_hdmi_probe(struct platform_device *);
96:	static int rcar_dw_hdmi_remove(struct platform_device *);
41:	static enum drm_mode_status rcar_hdmi_mode_valid(struct dw_hdmi *, void *, const struct drm_display_info *, const struct drm_display_mode *);
55:	static int rcar_hdmi_phy_configure(struct dw_hdmi *, void *, unsigned long);

File drivers/gpu/drm/scheduler/sched_entity.c:
295:	void drm_sched_entity_destroy(struct drm_sched_entity *);
268:	void drm_sched_entity_fini(struct drm_sched_entity *);
222:	long drm_sched_entity_flush(struct drm_sched_entity *, long);
59:	int drm_sched_entity_init(struct drm_sched_entity *, enum drm_sched_priority, struct drm_gpu_scheduler **, unsigned int, atomic_t *);
132:	bool drm_sched_entity_is_ready(struct drm_sched_entity *);
108:	void drm_sched_entity_modify_sched(struct drm_sched_entity *, struct drm_gpu_scheduler **, unsigned int);
406:	struct drm_sched_job *drm_sched_entity_pop_job(struct drm_sched_entity *);
506:	void drm_sched_entity_push_job(struct drm_sched_job *);
454:	void drm_sched_entity_select_rq(struct drm_sched_entity *);
335:	void drm_sched_entity_set_priority(struct drm_sched_entity *, enum drm_sched_priority);
303:	static void drm_sched_entity_clear_dep(struct dma_fence *, struct dma_fence_cb *);
178:	static void drm_sched_entity_kill(struct drm_sched_entity *);
153:	static void drm_sched_entity_kill_jobs_cb(struct dma_fence *, struct dma_fence_cb *);
143:	static void drm_sched_entity_kill_jobs_work(struct work_struct *);
317:	static void drm_sched_entity_wakeup(struct dma_fence *, struct dma_fence_cb *);

File drivers/gpu/drm/scheduler/sched_fence.c:
150:	struct drm_sched_fence *drm_sched_fence_alloc(struct drm_sched_entity *, void *);
56:	void drm_sched_fence_finished(struct drm_sched_fence *);
89:	void drm_sched_fence_free(struct drm_sched_fence *);
165:	void drm_sched_fence_init(struct drm_sched_fence *, struct drm_sched_entity *);
51:	void drm_sched_fence_scheduled(struct drm_sched_fence *);
138:	struct drm_sched_fence *to_drm_sched_fence(struct dma_fence *);
72:	static void drm_sched_fence_free_rcu(struct callback_head *);
61:	static const char *drm_sched_fence_get_driver_name(struct dma_fence *);
66:	static const char *drm_sched_fence_get_timeline_name(struct dma_fence *);
119:	static void drm_sched_fence_release_finished(struct dma_fence *);
104:	static void drm_sched_fence_release_scheduled(struct dma_fence *);
45:	static void drm_sched_fence_slab_fini(void);
34:	static int drm_sched_fence_slab_init(void);

File drivers/gpu/drm/scheduler/sched_main.c:
309:	void drm_sched_fault(struct drm_gpu_scheduler *);
1092:	void drm_sched_fini(struct drm_gpu_scheduler *);
1137:	void drm_sched_increase_karma(struct drm_sched_job *);
1044:	int drm_sched_init(struct drm_gpu_scheduler *, const struct drm_sched_backend_ops *, unsigned int, unsigned int, long, struct workqueue_struct *, atomic_t *, const char *, struct device *);
674:	int drm_sched_job_add_dependency(struct drm_sched_job *, struct dma_fence *);
760:	int drm_sched_job_add_implicit_dependencies(struct drm_sched_job *, struct drm_gem_object *, bool);
722:	int drm_sched_job_add_resv_dependencies(struct drm_sched_job *, struct dma_resv *, enum dma_resv_usage);
647:	void drm_sched_job_arm(struct drm_sched_job *);
782:	void drm_sched_job_cleanup(struct drm_sched_job *);
614:	int drm_sched_job_init(struct drm_sched_job *, struct drm_sched_entity *, void *);
910:	struct drm_gpu_scheduler *drm_sched_pick_best(struct drm_gpu_scheduler **, unsigned int);
559:	void drm_sched_resubmit_jobs(struct drm_gpu_scheduler *);
353:	void drm_sched_resume_timeout(struct drm_gpu_scheduler *, unsigned long);
140:	void drm_sched_rq_add_entity(struct drm_sched_rq *, struct drm_sched_entity *);
162:	void drm_sched_rq_remove_entity(struct drm_sched_rq *, struct drm_sched_entity *);
93:	void drm_sched_rq_update_fifo(struct drm_sched_entity *, ktime_t);
513:	void drm_sched_start(struct drm_gpu_scheduler *, bool);
432:	void drm_sched_stop(struct drm_gpu_scheduler *, struct drm_sched_job *);
327:	unsigned long drm_sched_suspend_timeout(struct drm_gpu_scheduler *);
824:	void drm_sched_wakeup(struct drm_gpu_scheduler *);
867:	static struct drm_sched_job *drm_sched_get_cleanup_job(struct drm_gpu_scheduler *);
260:	static void drm_sched_job_done(struct drm_sched_job *);
281:	static void drm_sched_job_done_cb(struct dma_fence *, struct dma_fence_cb *);
377:	static void drm_sched_job_timedout(struct work_struct *);
961:	static int drm_sched_main(void *);
838:	static struct drm_sched_entity *drm_sched_select_entity(struct drm_gpu_scheduler *);

File drivers/gpu/drm/tidss/tidss_crtc.c:
404:	struct tidss_crtc *tidss_crtc_create(struct tidss_device *, u32, struct drm_plane *);
75:	void tidss_crtc_error_irq(struct drm_crtc *, u64);
68:	void tidss_crtc_framedone_irq(struct drm_crtc *);
59:	void tidss_crtc_vblank_irq(struct drm_crtc *);
85:	static int tidss_crtc_atomic_check(struct drm_crtc *, struct drm_atomic_state *);
261:	static void tidss_crtc_atomic_disable(struct drm_crtc *, struct drm_atomic_state *);
216:	static void tidss_crtc_atomic_enable(struct drm_crtc *, struct drm_atomic_state *);
163:	static void tidss_crtc_atomic_flush(struct drm_crtc *, struct drm_atomic_state *);
385:	static void tidss_crtc_destroy(struct drm_crtc *);
332:	static void tidss_crtc_disable_vblank(struct drm_crtc *);
362:	static struct drm_crtc_state *tidss_crtc_duplicate_state(struct drm_crtc *);
318:	static int tidss_crtc_enable_vblank(struct drm_crtc *);
297:	static enum drm_mode_status tidss_crtc_mode_valid(struct drm_crtc *, const struct drm_display_mode *);
120:	static void tidss_crtc_position_planes(struct tidss_device *, struct drm_crtc *, struct drm_crtc_state *, bool);
344:	static void tidss_crtc_reset(struct drm_crtc *);

File drivers/gpu/drm/tidss/tidss_dispc.c:
2670:	int dispc_init(struct tidss_device *);
1298:	void dispc_ovr_enable_layer(struct dispc_device *, u32, u32, bool);
1276:	void dispc_ovr_set_plane(struct dispc_device *, u32, u32, u32, u32, u32);
1917:	int dispc_plane_check(struct dispc_device *, u32, const struct drm_plane_state *, u32);
2073:	int dispc_plane_enable(struct dispc_device *, u32, bool);
1895:	const u32 *dispc_plane_formats(struct dispc_device *, unsigned int *);
1988:	int dispc_plane_setup(struct dispc_device *, u32, const struct drm_plane_state *, u32);
774:	dispc_irq_t dispc_read_and_clear_irqstatus(struct dispc_device *);
2604:	void dispc_remove(struct tidss_device *);
2569:	int dispc_runtime_resume(struct dispc_device *);
2558:	int dispc_runtime_suspend(struct dispc_device *);
788:	void dispc_set_irqenable(struct dispc_device *, dispc_irq_t);
840:	int dispc_vp_bus_check(struct dispc_device *, u32, const struct drm_crtc_state *);
1036:	void dispc_vp_disable(struct dispc_device *, u32);
1199:	void dispc_vp_disable_clk(struct dispc_device *, u32);
965:	void dispc_vp_enable(struct dispc_device *, u32, const struct drm_crtc_state *);
1188:	int dispc_vp_enable_clk(struct dispc_device *, u32);
1055:	void dispc_vp_go(struct dispc_device *, u32);
1050:	bool dispc_vp_go_busy(struct dispc_device *, u32);
1114:	enum drm_mode_status dispc_vp_mode_valid(struct dispc_device *, u32, const struct drm_display_mode *);
946:	void dispc_vp_prepare(struct dispc_device *, u32, const struct drm_crtc_state *);
1216:	int dispc_vp_set_clk_rate(struct dispc_device *, u32, unsigned long);
2551:	void dispc_vp_setup(struct dispc_device *, u32, const struct drm_crtc_state *, bool);
1041:	void dispc_vp_unprepare(struct dispc_device *, u32);
1350:	static void dispc_csc_yuv2rgb_regval(const struct dispc_csc_coef *, u32 *);
2627:	static int dispc_init_am65x_oldi_io_ctrl(struct device *, struct dispc_device *);
679:	static void dispc_k3_clear_irqstatus(struct dispc_device *, dispc_irq_t);
864:	static void dispc_oldi_tx_power(struct dispc_device *, bool);
1614:	static int dispc_vid_calc_scaling(struct dispc_device *, const struct drm_plane_state *, struct dispc_scaling_params *, bool);
1545:	static void dispc_vid_write_fir_coefs(struct dispc_device *, u32, enum dispc_vid_fir_coef_set, const struct tidss_scale_coefs *);

File drivers/gpu/drm/tidss/tidss_drv.c:
30:	int tidss_runtime_get(struct tidss_device *);
41:	void tidss_runtime_put(struct tidss_device *);
255:	static void tidss_platform_driver_exit(void);
255:	static int tidss_platform_driver_init(void);
118:	static int tidss_probe(struct platform_device *);
99:	static void tidss_release(struct drm_device *);
201:	static int tidss_remove(struct platform_device *);
229:	static void tidss_shutdown(struct platform_device *);

File drivers/gpu/drm/tidss/tidss_encoder.c:
72:	struct drm_encoder *tidss_encoder_create(struct tidss_device *, u32, u32);
18:	static int tidss_encoder_atomic_check(struct drm_encoder *, struct drm_crtc_state *, struct drm_connector_state *);
58:	static void tidss_encoder_destroy(struct drm_encoder *);

File drivers/gpu/drm/tidss/tidss_irq.c:
41:	void tidss_irq_disable_vblank(struct drm_crtc *);
26:	void tidss_irq_enable_vblank(struct drm_crtc *);
137:	int tidss_irq_install(struct drm_device *, unsigned int);
87:	void tidss_irq_resume(struct tidss_device *);
155:	void tidss_irq_uninstall(struct drm_device *);
56:	static irqreturn_t tidss_irq_handler(int, void *);

File drivers/gpu/drm/tidss/tidss_kms.c:
253:	int tidss_modeset_init(struct tidss_device *);
52:	static int tidss_atomic_check(struct drm_device *, struct drm_atomic_state *);
25:	static void tidss_atomic_commit_tail(struct drm_atomic_state *);

File drivers/gpu/drm/tidss/tidss_plane.c:
176:	struct tidss_plane *tidss_plane_create(struct tidss_device *, u32, u32, u32, const u32 *, u32);
153:	static void drm_plane_destroy(struct drm_plane *);
23:	static int tidss_plane_atomic_check(struct drm_plane *, struct drm_atomic_state *);
141:	static void tidss_plane_atomic_disable(struct drm_plane *, struct drm_atomic_state *);
108:	static void tidss_plane_atomic_update(struct drm_plane *, struct drm_atomic_state *);

File drivers/gpu/drm/tidss/tidss_scale_coefs.c:
148:	const struct tidss_scale_coefs *tidss_get_scale_coefs(struct device *, u32, bool);

File drivers/hid/hid-a4tech.c:
164:	static void a4_driver_exit(void);
164:	static int a4_driver_init(void);
73:	static int a4_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
56:	static int a4_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
34:	static int a4_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
113:	static int a4_probe(struct hid_device *, const struct hid_device_id *);

File drivers/hid/hid-apple.c:
750:	static int apple_backlight_led_set(struct led_classdev *, enum led_brightness);
580:	static void apple_battery_timer_tick(struct timer_list *);
1075:	static void apple_driver_exit(void);
1075:	static int apple_driver_init(void);
529:	static int apple_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
694:	static int apple_input_configured(struct hid_device *, struct hid_input *);
676:	static int apple_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
655:	static int apple_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
811:	static int apple_probe(struct hid_device *, const struct hid_device_id *);
852:	static void apple_remove(struct hid_device *);
595:	static __u8 *apple_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-belkin.c:
86:	static void belkin_driver_exit(void);
86:	static int belkin_driver_init(void);
26:	static int belkin_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
46:	static int belkin_probe(struct hid_device *, const struct hid_device_id *);

File drivers/hid/hid-cherry.c:
69:	static void ch_driver_exit(void);
69:	static int ch_driver_init(void);
38:	static int ch_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
25:	static __u8 *ch_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-chicony.c:
153:	static void ch_driver_exit(void);
153:	static int ch_driver_init(void);
59:	static int ch_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
113:	static int ch_probe(struct hid_device *, const struct hid_device_id *);
48:	static int ch_raw_event(struct hid_device *, struct hid_report *, u8 *, int);
91:	static __u8 *ch_switch12_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-core.c:
2858:	int __hid_register_driver(struct hid_driver *, struct module *, const char *);
1926:	int __hid_request(struct hid_device *, struct hid_report *, enum hid_class_request);
2702:	int hid_add_device(struct hid_device *);
1859:	u8 *hid_alloc_report_buf(struct hid_report *, gfp_t);
2774:	struct hid_device *hid_allocate_device(void);
2890:	int hid_check_keys_pressed(struct hid_device *);
2547:	bool hid_compare_device_paths(struct hid_device *, struct hid_device *, char);
2148:	int hid_connect(struct hid_device *, unsigned int);
2820:	void hid_destroy_device(struct hid_device *);
2251:	void hid_disconnect(struct hid_device *);
1380:	__u32 hid_field_extract(const struct hid_device *, u8 *, unsigned int, unsigned int);
2343:	void hid_hw_close(struct hid_device *);
2315:	int hid_hw_open(struct hid_device *);
2404:	int hid_hw_output_report(struct hid_device *, __u8 *, size_t);
2383:	int hid_hw_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, enum hid_report_type, enum hid_class_request);
2359:	void hid_hw_request(struct hid_device *, struct hid_report *, enum hid_class_request);
2273:	int hid_hw_start(struct hid_device *, unsigned int);
2300:	void hid_hw_stop(struct hid_device *);
2025:	int hid_input_report(struct hid_device *, enum hid_report_type, u8 *, u32, int);
2511:	const struct hid_device_id *hid_match_device(struct hid_device *, struct hid_driver *);
2086:	const struct hid_device_id *hid_match_id(const struct hid_device *, const struct hid_device_id *);
2077:	bool hid_match_one_id(const struct hid_device *, const struct hid_device_id *);
1195:	int hid_open_report(struct hid_device *);
1843:	void hid_output_report(struct hid_report *, __u8 *);
942:	int hid_parse_report(struct hid_device *, __u8 *, unsigned int);
57:	struct hid_report *hid_register_report(struct hid_device *, enum hid_report_type, unsigned int, unsigned int);
1960:	int hid_report_raw_event(struct hid_device *, enum hid_report_type, u8 *, u32, int);
1878:	int hid_set_field(struct hid_field *, unsigned int, __s32);
1158:	void hid_setup_resolution_multiplier(struct hid_device *);
1329:	s32 hid_snto32(__u32, unsigned int);
2881:	void hid_unregister_driver(struct hid_driver *);
969:	struct hid_report *hid_validate_values(struct hid_device *, enum hid_report_type, unsigned int, unsigned int, unsigned int);
2853:	static int __bus_removed_driver(struct device_driver *, void *);
2841:	static int __hid_bus_driver_added(struct device_driver *, void *);
2828:	static int __hid_bus_reprobe_drivers(struct device *, void *);
260:	static int hid_add_field(struct hid_parser *, unsigned int, unsigned int);
2529:	static int hid_bus_match(struct device *, struct device_driver *);
673:	static void hid_close_report(struct hid_device *);
2560:	static int hid_device_probe(struct device *);
706:	static void hid_device_release(struct device *);
2621:	static void hid_device_remove(struct device *);
2935:	static void hid_exit(void);
2908:	static int hid_init(void);
1616:	static void hid_input_array_field(struct hid_device *, struct hid_field *, int);
370:	static int hid_parser_global(struct hid_parser *, struct hid_item *);
476:	static int hid_parser_local(struct hid_parser *, struct hid_item *);
607:	static int hid_parser_main(struct hid_parser *, struct hid_item *);
646:	static int hid_parser_reserved(struct hid_parser *, struct hid_item *);
1510:	static void hid_process_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32, int);
831:	static int hid_scan_main(struct hid_parser *, struct hid_item *);
872:	static int hid_scan_report(struct hid_device *);
2667:	static int hid_uevent(struct device *, struct kobj_uevent_env *);
2643:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
2459:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
2110:	static ssize_t read_report_descriptor(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
2129:	static ssize_t show_country(struct device *, struct device_attribute *, char *);

File drivers/hid/hid-cypress.c:
177:	static void cp_driver_exit(void);
177:	static int cp_driver_init(void);
100:	static int cp_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
83:	static int cp_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
128:	static int cp_probe(struct hid_device *, const struct hid_device_id *);
70:	static __u8 *cp_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-debug.c:
688:	void hid_debug_event(struct hid_device *, char *);
1270:	void hid_debug_exit(void);
1265:	void hid_debug_init(void);
1246:	void hid_debug_register(struct hid_device *, const char *);
1256:	void hid_debug_unregister(struct hid_device *);
657:	void hid_dump_device(struct hid_device *, struct seq_file *);
559:	void hid_dump_field(struct hid_field *, int, struct seq_file *);
732:	void hid_dump_input(struct hid_device *, struct hid_usage *, __s32);
702:	void hid_dump_report(struct hid_device *, int, u8 *, int);
511:	char *hid_resolv_usage(unsigned int, struct seq_file *);
1120:	static int hid_debug_events_open(struct inode *, struct file *);
1208:	static __poll_t hid_debug_events_poll(struct file *, poll_table *);
1148:	static ssize_t hid_debug_events_read(struct file *, char *, size_t, loff_t *);
1220:	static int hid_debug_events_release(struct inode *, struct file *);
1234:	static int hid_debug_rdesc_open(struct inode *, struct file *);
1090:	static int hid_debug_rdesc_show(struct seq_file *, void *);

File drivers/hid/hid-ezkey.c:
76:	static void ez_driver_exit(void);
76:	static int ez_driver_init(void);
47:	static int ez_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
25:	static int ez_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);

File drivers/hid/hid-generic.c:
26:	static int __check_hid_generic(struct device_driver *, void *);
82:	static void hid_generic_exit(void);
82:	static int hid_generic_init(void);
37:	static bool hid_generic_match(struct hid_device *, bool);
56:	static int hid_generic_probe(struct hid_device *, const struct hid_device_id *);

File drivers/hid/hid-input.c:
246:	__s32 hidinput_calc_abs_res(const struct hid_field *, __u16);
2194:	int hidinput_connect(struct hid_device *, unsigned int);
1707:	unsigned int hidinput_count_leds(struct hid_device *);
2297:	void hidinput_disconnect(struct hid_device *);
1687:	struct hid_field *hidinput_get_led_field(struct hid_device *);
1454:	void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
1658:	void hidinput_report_event(struct hid_device *, struct hid_report *);
1426:	static void hid_report_release_tool(struct hid_report *, struct input_dev *, unsigned int);
1444:	static void hid_report_set_tool(struct hid_report *, struct input_dev *, unsigned int);
1808:	static void hidinput_close(struct input_dev *);
645:	static void hidinput_configure_usage(struct hid_input *, struct hid_field *, struct hid_usage *, unsigned int);
177:	static int hidinput_getkeycode(struct input_dev *, struct input_keymap_entry *);
1394:	static void hidinput_handle_scroll(struct hid_usage *, struct input_dev *, __s32);
1777:	static int hidinput_input_event(struct input_dev *, unsigned int, unsigned int, int);
1729:	static void hidinput_led_worker(struct work_struct *);
160:	static struct hid_usage *hidinput_locate_usage(struct hid_device *, const struct input_keymap_entry *, unsigned int *);
1801:	static int hidinput_open(struct input_dev *);
198:	static int hidinput_setkeycode(struct input_dev *, const struct input_keymap_entry *, unsigned int *);

File drivers/hid/hid-ite.c:
141:	static void ite_driver_exit(void);
141:	static int ite_driver_init(void);
67:	static int ite_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
41:	static int ite_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
93:	static int ite_probe(struct hid_device *, const struct hid_device_id *);
16:	static __u8 *ite_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-kensington.c:
47:	static void ks_driver_exit(void);
47:	static int ks_driver_init(void);
20:	static int ks_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);

File drivers/hid/hid-lg-g15.c:
314:	static ssize_t color_show(struct device *, struct device_attribute *, char *);
284:	static ssize_t color_store(struct device *, struct device_attribute *, const char *, size_t);
953:	static void lg_g15_driver_exit(void);
953:	static int lg_g15_driver_init(void);
442:	static int lg_g15_get_initial_led_brightness(struct lg_g15_data *);
720:	static void lg_g15_init_input_dev(struct hid_device *, struct input_dev *, const char *);
662:	static void lg_g15_input_close(struct input_dev *);
655:	static int lg_g15_input_open(struct input_dev *);
94:	static enum led_brightness lg_g15_led_get(struct led_classdev *);
109:	static int lg_g15_led_set(struct led_classdev *, enum led_brightness);
162:	static void lg_g15_leds_changed_work(struct work_struct *);
741:	static int lg_g15_probe(struct hid_device *, const struct hid_device_id *);
620:	static int lg_g15_raw_event(struct hid_device *, struct hid_report *, u8 *, int);
669:	static int lg_g15_register_led(struct lg_g15_data *, int, const char *);
193:	static int lg_g510_get_initial_led_brightness(struct lg_g15_data *, int);
276:	static enum led_brightness lg_g510_kbd_led_get(struct led_classdev *);
257:	static int lg_g510_kbd_led_set(struct led_classdev *, enum led_brightness);
347:	static void lg_g510_leds_sync_work(struct work_struct *);
381:	static enum led_brightness lg_g510_mkey_led_get(struct led_classdev *);
396:	static int lg_g510_mkey_led_set(struct led_classdev *, enum led_brightness);

File drivers/hid/hid-lg.c:
937:	static void lg_driver_exit(void);
937:	static int lg_driver_init(void);
722:	static int lg_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
681:	static int lg_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
632:	static int lg_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
750:	static int lg_probe(struct hid_device *, const struct hid_device_id *);
739:	static int lg_raw_event(struct hid_device *, struct hid_report *, u8 *, int);
850:	static void lg_remove(struct hid_device *);
430:	static __u8 *lg_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-microsoft.c:
467:	static void ms_driver_exit(void);
467:	static int ms_driver_init(void);
222:	static int ms_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
281:	static void ms_ff_worker(struct work_struct *);
209:	static int ms_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
182:	static int ms_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
307:	static int ms_play_effect(struct input_dev *, void *, struct ff_effect *);
365:	static int ms_probe(struct hid_device *, const struct hid_device_id *);
407:	static void ms_remove(struct hid_device *);
59:	static __u8 *ms_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-monterey.c:
63:	static void mr_driver_exit(void);
63:	static int mr_driver_init(void);
33:	static int mr_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
21:	static __u8 *mr_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/hid-multitouch.c:
2240:	static void mt_driver_exit(void);
2240:	static int mt_driver_init(void);
1410:	static int mt_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
1693:	static void mt_expired_timeout(struct timer_list *);
479:	static void mt_feature_mapping(struct hid_device *, struct hid_field *, struct hid_usage *);
651:	static struct mt_report_data *mt_find_report_data(struct mt_device *, struct hid_report *);
447:	static void mt_get_feature(struct hid_device *, struct hid_report *);
1572:	static int mt_input_configured(struct hid_device *, struct hid_input *);
1393:	static int mt_input_mapped(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
1320:	static int mt_input_mapping(struct hid_device *, struct hid_input *, struct hid_field *, struct hid_usage *, unsigned long **, int *);
1709:	static int mt_probe(struct hid_device *, const struct hid_device_id *);
1817:	static void mt_remove(struct hid_device *);
1423:	static void mt_report(struct hid_device *, struct hid_report *);
412:	static ssize_t mt_set_quirks(struct device *, struct device_attribute *, const char *, size_t);
402:	static ssize_t mt_show_quirks(struct device *, struct device_attribute *, char *);
669:	static void mt_store_field(struct hid_device *, struct mt_application *, __s32 *, size_t);
516:	static void set_abs(struct input_dev *, unsigned int, struct hid_field *, int);

File drivers/hid/hid-quirks.c:
959:	bool hid_ignore(struct hid_device *);
1266:	unsigned long hid_lookup_quirk(const struct hid_device *);
1220:	void hid_quirks_exit(__u16);
1181:	int hid_quirks_init(char **, __u16, int);

File drivers/hid/hid-redragon.c:
60:	static void redragon_driver_exit(void);
60:	static int redragon_driver_init(void);
36:	static __u8 *redragon_report_fixup(struct hid_device *, __u8 *, unsigned int *);

File drivers/hid/i2c-hid/i2c-hid-core.c:
953:	int i2c_hid_core_probe(struct i2c_client *, struct i2chid_ops *, u16, u32);
1068:	void i2c_hid_core_remove(struct i2c_client *);
1085:	void i2c_hid_core_shutdown(struct i2c_client *);
615:	static int i2c_hid_alloc_buffers(struct i2c_hid *, size_t);
837:	static void i2c_hid_close(struct hid_device *);
568:	static irqreturn_t i2c_hid_irq(int, void *);
156:	static u32 i2c_hid_lookup_quirk(const u16, const u16);
828:	static int i2c_hid_open(struct hid_device *);
676:	static int i2c_hid_output_raw_report(struct hid_device *, u8, const u8 *, size_t, bool);
708:	static int i2c_hid_output_report(struct hid_device *, u8 *, size_t);
730:	static int i2c_hid_parse(struct hid_device *);
714:	static int i2c_hid_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, unsigned char, int);
390:	static int i2c_hid_set_power(struct i2c_hid *, int);
798:	static int i2c_hid_start(struct hid_device *);
823:	static void i2c_hid_stop(struct hid_device *);
170:	static int i2c_hid_xfer(struct i2c_hid *, u8 *, int, u8 *, int);

File drivers/hid/i2c-hid/i2c-hid-of.c:
146:	static void i2c_hid_of_driver_exit(void);
146:	static int i2c_hid_of_driver_init(void);
61:	static void i2c_hid_of_power_down(struct i2chid_ops *);
42:	static int i2c_hid_of_power_up(struct i2chid_ops *);
69:	static int i2c_hid_of_probe(struct i2c_client *);

File drivers/hid/usbhid/hid-core.c:
1677:	struct usb_interface *usbhid_find_interface(int);
767:	void usbhid_init_reports(struct hid_device *);
473:	static void hid_ctrl(struct urb *);
1701:	static void hid_exit(void);
1682:	static int hid_init(void);
143:	static void hid_io_error(struct hid_device *);
271:	static void hid_irq_in(struct urb *);
425:	static void hid_irq_out(struct urb *);
1515:	static int hid_post_reset(struct usb_interface *);
1501:	static int hid_pre_reset(struct usb_interface *);
116:	static void hid_reset(struct work_struct *);
105:	static void hid_retry_timeout(struct timer_list *);
80:	static int hid_start_in(struct hid_device *);
365:	static int hid_submit_ctrl(struct hid_device *);
335:	static int hid_submit_out(struct hid_device *);
737:	static void usbhid_close(struct hid_device *);
1439:	static void usbhid_disconnect(struct usb_interface *);
1300:	static int usbhid_idle(struct hid_device *, int, int, int);
1314:	static bool usbhid_may_wakeup(struct hid_device *);
678:	static int usbhid_open(struct hid_device *);
939:	static int usbhid_output_report(struct hid_device *, __u8 *, size_t);
979:	static int usbhid_parse(struct hid_device *);
1256:	static int usbhid_power(struct hid_device *, int);
1337:	static int usbhid_probe(struct usb_interface *, const struct usb_device_id *);
1286:	static int usbhid_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, unsigned char, int);
1274:	static void usbhid_request(struct hid_device *, struct hid_report *, int);
228:	static int usbhid_restart_ctrl_queue(struct usbhid_device *);
190:	static int usbhid_restart_out_queue(struct usbhid_device *);
1060:	static int usbhid_start(struct hid_device *);
1207:	static void usbhid_stop(struct hid_device *);
630:	static void usbhid_submit_report(struct hid_device *, struct hid_report *, unsigned char);
640:	static int usbhid_wait_io(struct hid_device *);

File drivers/hwtracing/coresight/coresight-catu.c:
329:	static int catu_alloc_etr_buf(struct tmc_drvdata *, struct etr_buf *, int, void **);
472:	static int catu_disable(struct coresight_device *, void *);
444:	static int catu_enable(struct coresight_device *, void *);
599:	static void catu_exit(void);
284:	static void catu_free_etr_buf(struct etr_buf *);
296:	static ssize_t catu_get_data_etr_buf(struct etr_buf *, u64, size_t, char **);
588:	static int catu_init(void);
492:	static int catu_probe(struct amba_device *, const struct amba_id *);
563:	static void catu_remove(struct amba_device *);
304:	static void catu_sync_etr_buf(struct etr_buf *, u64, u64);

File drivers/hwtracing/coresight/coresight-cfg-preload.c:
32:	int cscfg_preload(void *);

File drivers/hwtracing/coresight/coresight-config.c:
269:	void cscfg_csdev_disable_config(struct cscfg_config_csdev *);
256:	int cscfg_csdev_enable_config(struct cscfg_config_csdev *, int);
103:	void cscfg_reset_feat(struct cscfg_feature_csdev *);
226:	static int cscfg_prog_config(struct cscfg_config_csdev *, bool);

File drivers/hwtracing/coresight/coresight-core.c:
1758:	char *coresight_alloc_device_name(struct coresight_dev_list *, struct device *);
873:	struct list_head *coresight_build_path(struct coresight_device *, struct coresight_device *);
246:	int coresight_claim_device(struct coresight_device *);
229:	int coresight_claim_device_unlocked(struct coresight_device *);
1197:	void coresight_disable(struct coresight_device *);
558:	void coresight_disable_path(struct list_head *);
283:	void coresight_disclaim_device(struct coresight_device *);
265:	void coresight_disclaim_device_unlocked(struct coresight_device *);
1117:	int coresight_enable(struct coresight_device *);
564:	int coresight_enable_path(struct list_head *, u32, void *);
1046:	struct coresight_device *coresight_find_default_sink(struct coresight_device *);
670:	struct coresight_device *coresight_get_enabled_sink(struct coresight_device *);
109:	struct coresight_device *coresight_get_percpu_sink(int);
621:	struct coresight_device *coresight_get_sink(struct list_head *);
709:	struct coresight_device *coresight_get_sink_by_id(u32);
1744:	bool coresight_loses_context_with_cpu(struct device *);
1532:	u32 coresight_read32(struct coresight_device *, u32);
1553:	u64 coresight_read64(struct coresight_device *, u32);
1596:	struct coresight_device *coresight_register(struct coresight_desc *);
1527:	u32 coresight_relaxed_read32(struct coresight_device *, u32);
1548:	u64 coresight_relaxed_read64(struct coresight_device *, u32);
1537:	void coresight_relaxed_write32(struct coresight_device *, u32, u32);
1558:	void coresight_relaxed_write64(struct coresight_device *, u64, u32);
904:	void coresight_release_path(struct list_head *);
1573:	void coresight_release_platform_data(struct coresight_device *, struct coresight_platform_data *);
97:	void coresight_remove_cti_ops(void);
340:	void coresight_set_assoc_ectdev_mutex(struct coresight_device *, struct coresight_device *);
91:	void coresight_set_cti_ops(const struct cti_assoc_op *);
103:	void coresight_set_percpu_sink(int, struct coresight_device *);
77:	ssize_t coresight_simple_show32(struct device *, struct device_attribute *, char *);
63:	ssize_t coresight_simple_show_pair(struct device *, struct device_attribute *, char *);
1496:	int coresight_timeout(struct csdev_access *, u32, int, int);
1713:	void coresight_unregister(struct coresight_device *);
1543:	void coresight_write32(struct coresight_device *, u32, u32);
1564:	void coresight_write64(struct coresight_device *, u64, u32);
817:	static int _coresight_build_path(struct coresight_device *, struct coresight_device *, struct list_head *);
1332:	static void coresight_device_release(struct device *);
511:	static void coresight_disable_path_from(struct list_head *, struct coresight_node *);
1818:	static void coresight_exit(void);
637:	static struct coresight_device *coresight_find_enabled_sink(struct coresight_device *);
990:	static struct coresight_device *coresight_find_sink(struct coresight_device *, int *);
115:	static int coresight_id_match(struct device *, void *);
1795:	static int coresight_init(void);
1341:	static int coresight_orphan_match(struct device *, void *);
1423:	static int coresight_remove_match(struct device *, void *);
1060:	static int coresight_remove_sink_ref(struct device *, void *);
678:	static int coresight_sink_by_id(struct device *, const void *);
1234:	static ssize_t enable_sink_show(struct device *, struct device_attribute *, char *);
1242:	static ssize_t enable_sink_store(struct device *, struct device_attribute *, const char *, size_t);
1264:	static ssize_t enable_source_show(struct device *, struct device_attribute *, char *);
1272:	static ssize_t enable_source_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/hwtracing/coresight/coresight-cpu-debug.c:
680:	static void debug_driver_exit(void);
680:	static int debug_driver_init(void);
508:	static ssize_t debug_func_knob_read(struct file *, char *, size_t, loff_t *);
474:	static ssize_t debug_func_knob_write(struct file *, const char *, size_t, loff_t *);
324:	static void debug_init_arch_data(void *);
377:	static int debug_notifier_call(struct notifier_block *, unsigned long, void *);
560:	static int debug_probe(struct amba_device *, const struct amba_id *);
632:	static void debug_remove(struct amba_device *);

File drivers/hwtracing/coresight/coresight-cti-core.c:
242:	int cti_add_connection_entry(struct device *, struct cti_drvdata *, struct cti_trig_con *, struct coresight_device *, const char *);
306:	int cti_add_default_connection(struct device *, struct cti_drvdata *);
273:	struct cti_trig_con *cti_allocate_trig_con(struct device *, int, int);
388:	int cti_channel_gate_op(struct device *, enum cti_chan_gate_op, u32);
426:	int cti_channel_setop(struct device *, enum cti_chan_set_op, u32);
329:	int cti_channel_trig_op(struct device *, enum cti_chan_op, enum cti_trig_dir, u32, u32);
798:	int cti_disable(struct coresight_device *);
791:	int cti_enable(struct coresight_device *);
61:	void cti_write_all_hw_regs(struct cti_drvdata *);
189:	void cti_write_intack(struct device *, u32);
182:	void cti_write_single_reg(struct cti_drvdata *, int, u32);
541:	static void cti_add_assoc_to_csdev(struct coresight_device *);
818:	static void cti_device_release(struct device *);
728:	static int cti_dying_cpu(unsigned int);
993:	static void cti_exit(void);
982:	static int cti_init(void);
849:	static int cti_probe(struct amba_device *, const struct amba_id *);
838:	static void cti_remove(struct amba_device *);
580:	static void cti_remove_assoc_from_csdev(struct coresight_device *);
717:	static int cti_starting_cpu(unsigned int);
616:	static void cti_update_conn_xrefs(struct cti_drvdata *);

File drivers/hwtracing/coresight/coresight-cti-platform.c:
461:	struct coresight_platform_data *coresight_cti_get_platform_data(struct device *);
81:	const char *cti_plat_get_node_name(struct fwnode_handle *);
267:	static int cti_plat_read_trig_types(struct cti_trig_grp *, const struct fwnode_handle *, const char *);

File drivers/hwtracing/coresight/coresight-cti-sysfs.c:
1128:	int cti_create_cons_sysfs(struct device *, struct cti_drvdata *);
446:	static ssize_t appclear_store(struct device *, struct device_attribute *, const char *, size_t);
470:	static ssize_t apppulse_store(struct device *, struct device_attribute *, const char *, size_t);
444:	static ssize_t appset_show(struct device *, struct device_attribute *, char *);
444:	static ssize_t appset_store(struct device *, struct device_attribute *, const char *, size_t);
443:	static ssize_t asicctl_show(struct device *, struct device_attribute *, char *);
443:	static ssize_t asicctl_store(struct device *, struct device_attribute *, const char *, size_t);
648:	static ssize_t chan_clear_store(struct device *, struct device_attribute *, const char *, size_t);
861:	static ssize_t chan_free_show(struct device *, struct device_attribute *, char *);
611:	static ssize_t chan_gate_disable_store(struct device *, struct device_attribute *, const char *, size_t);
593:	static ssize_t chan_gate_enable_show(struct device *, struct device_attribute *, char *);
580:	static ssize_t chan_gate_enable_store(struct device *, struct device_attribute *, const char *, size_t);
853:	static ssize_t chan_inuse_show(struct device *, struct device_attribute *, char *);
658:	static ssize_t chan_pulse_store(struct device *, struct device_attribute *, const char *, size_t);
638:	static ssize_t chan_set_store(struct device *, struct device_attribute *, const char *, size_t);
783:	static ssize_t chan_xtrigs_in_show(struct device *, struct device_attribute *, char *);
803:	static ssize_t chan_xtrigs_out_show(struct device *, struct device_attribute *, char *);
714:	static ssize_t chan_xtrigs_reset_store(struct device *, struct device_attribute *, const char *, size_t);
768:	static ssize_t chan_xtrigs_sel_show(struct device *, struct device_attribute *, char *);
750:	static ssize_t chan_xtrigs_sel_store(struct device *, struct device_attribute *, const char *, size_t);
900:	static ssize_t con_name_show(struct device *, struct device_attribute *, char *);
167:	static ssize_t coresight_cti_reg_show(struct device *, struct device_attribute *, char *);
136:	static ssize_t ctmid_show(struct device *, struct device_attribute *, char *);
79:	static ssize_t enable_show(struct device *, struct device_attribute *, char *);
99:	static ssize_t enable_store(struct device *, struct device_attribute *, const char *, size_t);
442:	static ssize_t gate_show(struct device *, struct device_attribute *, char *);
442:	static ssize_t gate_store(struct device *, struct device_attribute *, const char *, size_t);
350:	static ssize_t inen_show(struct device *, struct device_attribute *, char *);
365:	static ssize_t inen_store(struct device *, struct device_attribute *, const char *, size_t);
320:	static ssize_t inout_sel_show(struct device *, struct device_attribute *, char *);
331:	static ssize_t inout_sel_store(struct device *, struct device_attribute *, const char *, size_t);
428:	static ssize_t intack_store(struct device *, struct device_attribute *, const char *, size_t);
145:	static ssize_t nr_trigger_cons_show(struct device *, struct device_attribute *, char *);
389:	static ssize_t outen_show(struct device *, struct device_attribute *, char *);
404:	static ssize_t outen_store(struct device *, struct device_attribute *, const char *, size_t);
121:	static ssize_t powered_show(struct device *, struct device_attribute *, char *);
668:	static ssize_t trig_filter_enable_show(struct device *, struct device_attribute *, char *);
681:	static ssize_t trig_filter_enable_store(struct device *, struct device_attribute *, const char *, size_t);
543:	static ssize_t trigin_attach_store(struct device *, struct device_attribute *, const char *, size_t);
552:	static ssize_t trigin_detach_store(struct device *, struct device_attribute *, const char *, size_t);
911:	static ssize_t trigin_sig_show(struct device *, struct device_attribute *, char *);
951:	static ssize_t trigin_type_show(struct device *, struct device_attribute *, char *);
561:	static ssize_t trigout_attach_store(struct device *, struct device_attribute *, const char *, size_t);
570:	static ssize_t trigout_detach_store(struct device *, struct device_attribute *, const char *, size_t);
698:	static ssize_t trigout_filtered_show(struct device *, struct device_attribute *, char *);
925:	static ssize_t trigout_sig_show(struct device *, struct device_attribute *, char *);
969:	static ssize_t trigout_type_show(struct device *, struct device_attribute *, char *);

File drivers/hwtracing/coresight/coresight-etb10.c:
251:	static void __etb_disable_hw(struct etb_drvdata *);
375:	static void *etb_alloc_buffer(struct coresight_device *, struct perf_event *, void **, int, bool);
351:	static int etb_disable(struct coresight_device *);
857:	static void etb_driver_exit(void);
857:	static int etb_driver_init(void);
283:	static void etb_dump_hw(struct etb_drvdata *);
228:	static int etb_enable(struct coresight_device *, u32, void *);
133:	static int etb_enable_hw(struct etb_drvdata *);
396:	static void etb_free_buffer(void *);
601:	static int etb_open(struct inode *, struct file *);
716:	static int etb_probe(struct amba_device *, const struct amba_id *);
613:	static ssize_t etb_read(struct file *, char *, size_t, loff_t *);
640:	static int etb_release(struct inode *, struct file *);
795:	static void etb_remove(struct amba_device *);
427:	static unsigned long etb_update_buffer(struct coresight_device *, struct perf_output_handle *, void *);
670:	static ssize_t trigger_cntr_show(struct device *, struct device_attribute *, char *);
679:	static ssize_t trigger_cntr_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/hwtracing/coresight/coresight-etm-perf.c:
824:	int etm_perf_add_symlink_cscfg(struct device *, struct cscfg_config_desc *);
769:	int etm_perf_add_symlink_sink(struct coresight_device *);
844:	void etm_perf_del_symlink_cscfg(struct cscfg_config_desc *);
801:	void etm_perf_del_symlink_sink(struct coresight_device *);
881:	void etm_perf_exit(void);
853:	int etm_perf_init(void);
696:	int etm_perf_symlink(struct coresight_device *, bool);
55:	static ssize_t branch_broadcast_show(struct device *, struct device_attribute *, char *);
68:	static ssize_t configid_show(struct device *, struct device_attribute *, char *);
58:	static ssize_t contextid1_show(struct device *, struct device_attribute *, char *);
60:	static ssize_t contextid2_show(struct device *, struct device_attribute *, char *);
56:	static ssize_t cycacc_show(struct device *, struct device_attribute *, char *);
660:	static void etm_addr_filters_sync(struct perf_event *);
621:	static int etm_addr_filters_validate(struct list_head *);
600:	static int etm_event_add(struct perf_event *, int);
616:	static void etm_event_del(struct perf_event *, int);
167:	static void etm_event_destroy(struct perf_event *);
173:	static int etm_event_init(struct perf_event *);
147:	static void etm_event_read(struct perf_event *);
427:	static void etm_event_start(struct perf_event *, int);
504:	static void etm_event_stop(struct perf_event *, int);
272:	static void etm_free_aux(void *);
814:	static ssize_t etm_perf_cscfg_event_show(struct device *, struct device_attribute *, char *);
722:	static ssize_t etm_perf_sink_name_show(struct device *, struct device_attribute *, char *);
298:	static void *etm_setup_aux(struct perf_event *, void **, int, bool);
76:	static ssize_t format_attr_contextid_show(struct device *, struct device_attribute *, char *);
208:	static void free_event_data(struct work_struct *);
64:	static ssize_t preset_show(struct device *, struct device_attribute *, char *);
62:	static ssize_t retstack_show(struct device *, struct device_attribute *, char *);
66:	static ssize_t sinkid_show(struct device *, struct device_attribute *, char *);
61:	static ssize_t timestamp_show(struct device *, struct device_attribute *, char *);

File drivers/hwtracing/coresight/coresight-funnel.c:
370:	static int dynamic_funnel_probe(struct amba_device *, const struct amba_id *);
376:	static void dynamic_funnel_remove(struct amba_device *);
185:	static ssize_t funnel_ctrl_show(struct device *, struct device_attribute *, char *);
120:	static void funnel_disable(struct coresight_device *, int, int);
77:	static int funnel_enable(struct coresight_device *, int, int);
427:	static void funnel_exit(void);
408:	static int funnel_init(void);
208:	static int funnel_probe(struct device *, struct resource *);
148:	static ssize_t priority_show(struct device *, struct device_attribute *, char *);
157:	static ssize_t priority_store(struct device *, struct device_attribute *, const char *, size_t);
315:	static int static_funnel_probe(struct platform_device *);
334:	static int static_funnel_remove(struct platform_device *);

File drivers/hwtracing/coresight/coresight-platform.c:
66:	struct coresight_device *coresight_find_csdev_by_fwnode(struct fwnode_handle *);
830:	int coresight_get_cpu(struct device *);
841:	struct coresight_platform_data *coresight_get_platform_data(struct device *);

File drivers/hwtracing/coresight/coresight-replicator.c:
384:	static int dynamic_replicator_probe(struct amba_device *, const struct amba_id *);
390:	static void dynamic_replicator_remove(struct amba_device *);
171:	static void replicator_disable(struct coresight_device *, int, int);
117:	static int replicator_enable(struct coresight_device *, int, int);
434:	static void replicator_exit(void);
415:	static int replicator_init(void);
215:	static int replicator_probe(struct device *, struct resource *);
301:	static int static_replicator_probe(struct platform_device *);
320:	static int static_replicator_remove(struct platform_device *);

File drivers/hwtracing/coresight/coresight-stm.c:
463:	static ssize_t hwevent_enable_show(struct device *, struct device_attribute *, char *);
472:	static ssize_t hwevent_enable_store(struct device *, struct device_attribute *, const char *, size_t);
492:	static ssize_t hwevent_select_show(struct device *, struct device_attribute *, char *);
501:	static ssize_t hwevent_select_store(struct device *, struct device_attribute *, const char *, size_t);
566:	static ssize_t port_enable_show(struct device *, struct device_attribute *, char *);
583:	static ssize_t port_enable_store(struct device *, struct device_attribute *, const char *, size_t);
519:	static ssize_t port_select_show(struct device *, struct device_attribute *, char *);
536:	static ssize_t port_select_store(struct device *, struct device_attribute *, const char *, size_t);
257:	static void stm_disable(struct coresight_device *, struct perf_event *);
991:	static void stm_driver_exit(void);
991:	static int stm_driver_init(void);
194:	static int stm_enable(struct coresight_device *, struct perf_event *, u32);
336:	static int stm_generic_link(struct stm_data *, unsigned int, unsigned int);
405:	static ssize_t stm_generic_packet(struct stm_data *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, const unsigned char *);
375:	static long stm_generic_set_options(struct stm_data *, unsigned int, unsigned int, unsigned int, unsigned long);
347:	static void stm_generic_unlink(struct stm_data *, unsigned int, unsigned int);
795:	static void stm_init_default_data(struct stm_drvdata *);
359:	static phys_addr_t stm_mmio_addr(struct stm_data *, unsigned int, unsigned int, unsigned int);
839:	static int stm_probe(struct amba_device *, const struct amba_id *);
936:	static void stm_remove(struct amba_device *);
283:	static int stm_trace_id(struct coresight_device *);
609:	static ssize_t traceid_show(struct device *, struct device_attribute *, char *);
619:	static ssize_t traceid_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/hwtracing/coresight/coresight-syscfg-configfs.c:
395:	int cscfg_configfs_add_config(struct cscfg_config_desc *);
429:	int cscfg_configfs_add_feature(struct cscfg_feature_desc *);
409:	void cscfg_configfs_del_config(struct cscfg_config_desc *);
443:	void cscfg_configfs_del_feature(struct cscfg_feature_desc *);
451:	int cscfg_configfs_init(struct cscfg_manager *);
480:	void cscfg_configfs_release(struct cscfg_manager *);
27:	static ssize_t cscfg_cfg_description_show(struct config_item *, char *);
91:	static ssize_t cscfg_cfg_enable_show(struct config_item *, char *);
99:	static ssize_t cscfg_cfg_enable_store(struct config_item *, const char *, size_t);
36:	static ssize_t cscfg_cfg_feature_refs_show(struct config_item *, char *);
119:	static ssize_t cscfg_cfg_preset_show(struct config_item *, char *);
127:	static ssize_t cscfg_cfg_preset_store(struct config_item *, const char *, size_t);
52:	static ssize_t cscfg_cfg_values_show(struct config_item *, char *);
231:	static ssize_t cscfg_feat_description_show(struct config_item *, char *);
240:	static ssize_t cscfg_feat_matches_show(struct config_item *, char *);
258:	static ssize_t cscfg_feat_nr_params_show(struct config_item *, char *);
280:	static ssize_t cscfg_param_value_show(struct config_item *, char *);
289:	static ssize_t cscfg_param_value_store(struct config_item *, const char *, size_t);

File drivers/hwtracing/coresight/coresight-syscfg.c:
1003:	int cscfg_activate_config(unsigned long);
936:	int cscfg_config_sysfs_activate(struct cscfg_config_desc *, bool);
980:	void cscfg_config_sysfs_get_active_cfg(unsigned long *, int *);
969:	void cscfg_config_sysfs_set_preset(int);
1117:	void cscfg_csdev_disable_active_config(struct coresight_device *);
1046:	int cscfg_csdev_enable_active_config(struct coresight_device *, unsigned long, int);
853:	void cscfg_csdev_reset_feats(struct coresight_device *);
1022:	void cscfg_deactivate_config(unsigned long);
1146:	struct device *cscfg_device(void);
1295:	void cscfg_exit(void);
306:	const struct cscfg_feature_desc *cscfg_get_named_feat_desc(const char *);
1268:	int cscfg_init(void);
575:	int cscfg_load_config_sets(struct cscfg_config_desc **, struct cscfg_feature_desc **, struct cscfg_load_owner_info *);
798:	int cscfg_register_csdev(struct coresight_device *, u32, struct cscfg_csdev_feat_ops *);
657:	int cscfg_unload_config_sets(struct cscfg_load_owner_info *);
837:	void cscfg_unregister_csdev(struct coresight_device *);
337:	int cscfg_update_feat_param_val(struct cscfg_feature_desc *, int, u64);
63:	static int cscfg_add_csdev_cfg(struct coresight_device *, struct cscfg_config_desc *);
1260:	static void cscfg_clear_device(void);
1152:	static void cscfg_dev_release(struct device *);
175:	static int cscfg_load_feat_csdev(struct coresight_device *, struct cscfg_feature_desc *, struct cscfg_csdev_feat_ops *);
444:	static void cscfg_unload_owned_cfgs_feats(void *);

File drivers/hwtracing/coresight/coresight-sysfs.c:
67:	int coresight_add_sysfs_link(struct coresight_sysfs_link *);
41:	int coresight_create_conns_sysfs_group(struct coresight_device *);
143:	int coresight_make_links(struct coresight_device *, struct coresight_connection *, struct coresight_device *);
56:	void coresight_remove_conns_sysfs_group(struct coresight_device *);
193:	void coresight_remove_links(struct coresight_device *, struct coresight_connection *);
107:	void coresight_remove_sysfs_link(struct coresight_sysfs_link *);
16:	static ssize_t nr_links_show(struct device *, struct device_attribute *, char *);

File drivers/hwtracing/coresight/coresight-tmc-core.c:
71:	void tmc_disable_hw(struct tmc_drvdata *);
66:	void tmc_enable_hw(struct tmc_drvdata *);
46:	void tmc_flush_and_stop(struct tmc_drvdata *);
76:	u32 tmc_get_memwidth_mask(struct tmc_drvdata *);
34:	void tmc_wait_for_tmcready(struct tmc_drvdata *);
298:	static ssize_t buffer_size_show(struct device *, struct device_attribute *, char *);
306:	static ssize_t buffer_size_store(struct device *, struct device_attribute *, const char *, size_t);
601:	static void tmc_driver_exit(void);
601:	static int tmc_driver_init(void);
146:	static int tmc_open(struct inode *, struct file *);
430:	static int tmc_probe(struct amba_device *, const struct amba_id *);
176:	static ssize_t tmc_read(struct file *, char *, size_t, loff_t *);
199:	static int tmc_release(struct inode *, struct file *);
563:	static void tmc_remove(struct amba_device *);
541:	static void tmc_shutdown(struct amba_device *);
272:	static ssize_t trigger_cntr_show(struct device *, struct device_attribute *, char *);
281:	static ssize_t trigger_cntr_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/hwtracing/coresight/coresight-tmc-etf.c:
138:	ssize_t tmc_etb_get_sysfs_trace(struct tmc_drvdata *, loff_t, size_t, char **);
589:	int tmc_read_prepare_etb(struct tmc_drvdata *);
637:	int tmc_read_unprepare_etb(struct tmc_drvdata *);
72:	static void __tmc_etb_disable_hw(struct tmc_drvdata *);
391:	static void *tmc_alloc_etf_buffer(struct coresight_device *, struct perf_event *, void **, int, bool);
367:	static void tmc_disable_etf_link(struct coresight_device *, int, int);
307:	static int tmc_disable_etf_sink(struct coresight_device *);
337:	static int tmc_enable_etf_link(struct coresight_device *, int, int);
282:	static int tmc_enable_etf_sink(struct coresight_device *, u32, void *);
413:	static void tmc_free_etf_buffer(void *);
444:	static unsigned long tmc_update_etf_buffer(struct coresight_device *, struct perf_output_handle *, void *);

File drivers/hwtracing/coresight/coresight-tmc-etr.c:
316:	struct tmc_sg_table *tmc_alloc_sg_table(struct device *, int, int, int, void **);
1149:	void tmc_etr_disable_hw(struct tmc_drvdata *);
776:	struct coresight_device *tmc_etr_get_catu_device(struct tmc_drvdata *);
1079:	ssize_t tmc_etr_get_sysfs_trace(struct tmc_drvdata *, loff_t, size_t, char **);
824:	void tmc_etr_remove_catu_ops(void);
818:	void tmc_etr_set_catu_ops(const struct etr_buf_operations *);
253:	void tmc_free_sg_table(struct tmc_sg_table *);
1713:	int tmc_read_prepare_etr(struct tmc_drvdata *);
1749:	int tmc_read_unprepare_etr(struct tmc_drvdata *);
388:	ssize_t tmc_sg_table_get_data(struct tmc_sg_table *, u64, size_t, char **);
350:	void tmc_sg_table_sync_data_range(struct tmc_sg_table *, u64, u64);
368:	void tmc_sg_table_sync_table(struct tmc_sg_table *);
1131:	static void __tmc_etr_disable_hw(struct tmc_drvdata *);
986:	static void __tmc_etr_enable_hw(struct tmc_drvdata *);
860:	static struct etr_buf *tmc_alloc_etr_buf(struct tmc_drvdata *, ssize_t, int, int, void **);
1397:	static void *tmc_alloc_etr_buffer(struct coresight_device *, struct perf_event *, void **, int, bool);
1669:	static int tmc_disable_etr_sink(struct coresight_device *);
1655:	static int tmc_enable_etr_sink(struct coresight_device *, u32, void *);
595:	static int tmc_etr_alloc_flat_buf(struct tmc_drvdata *, struct etr_buf *, int, void **);
693:	static int tmc_etr_alloc_sg_buf(struct tmc_drvdata *, struct etr_buf *, int, void **);
1037:	static int tmc_etr_enable_hw(struct tmc_drvdata *, struct etr_buf *);
626:	static void tmc_etr_free_flat_buf(struct etr_buf *);
710:	static void tmc_etr_free_sg_buf(struct etr_buf *);
669:	static ssize_t tmc_etr_get_data_flat_buf(struct etr_buf *, u64, size_t, char **);
720:	static ssize_t tmc_etr_get_data_sg_buf(struct etr_buf *, u64, size_t, char **);
640:	static void tmc_etr_sync_flat_buf(struct etr_buf *, u64, u64);
728:	static void tmc_etr_sync_sg_buf(struct etr_buf *, u64, u64);
1419:	static void tmc_free_etr_buffer(void *);
188:	static int tmc_pages_alloc(struct tmc_pages *, struct device *, int, enum dma_data_direction, void **);
159:	static void tmc_pages_free(struct tmc_pages *, struct device *, enum dma_data_direction);
957:	static void tmc_sync_etr_buf(struct tmc_drvdata *);
1512:	static unsigned long tmc_update_etr_buffer(struct coresight_device *, struct perf_output_handle *, void *);

File drivers/hwtracing/coresight/coresight-tpiu.c:
96:	static int tpiu_disable(struct coresight_device *);
80:	static void tpiu_disable_hw(struct csdev_access *);
237:	static void tpiu_driver_exit(void);
237:	static int tpiu_driver_init(void);
72:	static int tpiu_enable(struct coresight_device *, u32, void *);
116:	static int tpiu_probe(struct amba_device *, const struct amba_id *);
173:	static void tpiu_remove(struct amba_device *);

File drivers/hwtracing/stm/core.c:
576:	ssize_t stm_data_write(struct stm_data *, unsigned int, unsigned int, bool, const void *, size_t);
104:	struct stm_device *stm_find_device(const char *);
466:	int stm_lookup_protocol(const char *, const struct stm_protocol_driver **, const struct config_item_type **);
133:	void stm_put_device(struct stm_device *);
461:	void stm_put_protocol(const struct stm_protocol_driver *);
852:	int stm_register_device(struct device *, struct stm_data *, struct module *);
397:	int stm_register_protocol(const struct stm_protocol_driver *);
1223:	int stm_source_register_device(struct device *, struct stm_source_data *);
1273:	void stm_source_unregister_device(struct stm_source_data *);
1283:	int stm_source_write(struct stm_source_data *, unsigned int, const char *, size_t);
928:	void stm_unregister_device(struct stm_data *);
433:	void stm_unregister_protocol(const struct stm_protocol_driver *);
1060:	static int __stm_source_link_drop(struct stm_source_device *, struct stm_device *);
50:	static ssize_t channels_show(struct device *, struct device_attribute *, char *);
64:	static ssize_t hw_override_show(struct device *, struct device_attribute *, char *);
357:	static int major_match(struct device *, const void *);
36:	static ssize_t masters_show(struct device *, struct device_attribute *, char *);
542:	static int stm_assign_first_policy(struct stm_device *, struct stm_output *, char **, unsigned int);
798:	static long stm_char_ioctl(struct file *, unsigned int, unsigned long);
691:	static int stm_char_mmap(struct file *, struct vm_area_struct *);
485:	static int stm_char_open(struct inode *, struct file *);
520:	static int stm_char_release(struct inode *, struct file *);
618:	static ssize_t stm_char_write(struct file *, const char *, size_t, loff_t *);
1351:	static void stm_core_exit(void);
1311:	static int stm_core_init(void);
845:	static void stm_device_release(struct device *);
677:	static void stm_mmap_close(struct vm_area_struct *);
669:	static void stm_mmap_open(struct vm_area_struct *);
340:	static void stm_output_free(struct stm_device *, struct stm_output *);
1206:	static void stm_source_device_release(struct device *);
1149:	static ssize_t stm_source_link_show(struct device *, struct device_attribute *, char *);
1166:	static ssize_t stm_source_link_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/hwtracing/stm/policy.c:
201:	const struct config_item_type *get_policy_node_type(struct configfs_attribute **);
567:	void stp_configfs_exit(void);
560:	int stp_configfs_init(void);
50:	void stp_policy_node_get_ranges(struct stp_policy_node *, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
533:	struct stp_policy_node *stp_policy_node_lookup(struct stm_device *, char *);
40:	void *stp_policy_node_priv(struct stp_policy_node *);
552:	void stp_policy_node_put(struct stp_policy_node *);
326:	void stp_policy_unbind(struct stp_policy *);
76:	void *to_pdrv_policy_node(struct config_item *);
288:	static ssize_t stp_policy_device_show(struct config_item *, char *);
383:	static struct config_group *stp_policy_make(struct config_group *, const char *);
132:	static ssize_t stp_policy_node_channels_show(struct config_item *, char *);
144:	static ssize_t stp_policy_node_channels_store(struct config_item *, const char *, size_t);
268:	static void stp_policy_node_drop(struct config_group *, struct config_item *);
223:	static struct config_group *stp_policy_node_make(struct config_group *, const char *);
85:	static ssize_t stp_policy_node_masters_show(struct config_item *, char *);
97:	static ssize_t stp_policy_node_masters_store(struct config_item *, const char *, size_t);
177:	static void stp_policy_node_release(struct config_item *);
304:	static ssize_t stp_policy_protocol_show(struct config_item *, char *);
351:	static void stp_policy_release(struct config_item *);

File drivers/i2c/algos/i2c-algo-bit.c:
681:	int i2c_bit_add_bus(struct i2c_adapter *);
687:	int i2c_bit_add_numbered_bus(struct i2c_adapter *);
646:	static int __i2c_bit_add_bus(struct i2c_adapter *, int (*)(struct i2c_adapter *));
400:	static int acknak(struct i2c_adapter *, int);
623:	static u32 bit_func(struct i2c_adapter *);
531:	static int bit_xfer(struct i2c_adapter *, struct i2c_msg *, int);
612:	static int bit_xfer_atomic(struct i2c_adapter *, struct i2c_msg *, int);
152:	static int i2c_outb(struct i2c_adapter *, unsigned char);
123:	static void i2c_repstart(struct i2c_algo_bit_data *);
134:	static void i2c_stop(struct i2c_algo_bit_data *);
75:	static int sclhi(struct i2c_algo_bit_data *);
59:	static void sdahi(struct i2c_algo_bit_data *);
334:	static int try_address(struct i2c_adapter *, unsigned char, int);

File drivers/i2c/busses/i2c-cadence.c:
1009:	static int cdns_i2c_calc_divs(unsigned long *, unsigned long, unsigned int *, unsigned int *);
1113:	static int cdns_i2c_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
1392:	static void cdns_i2c_drv_exit(void);
1392:	static int cdns_i2c_drv_init(void);
932:	static u32 cdns_i2c_func(struct i2c_adapter *);
549:	static irqreturn_t cdns_i2c_isr(int, void *);
818:	static int cdns_i2c_master_xfer(struct i2c_adapter *, struct i2c_msg *, int);
1245:	static int cdns_i2c_probe(struct platform_device *);
1367:	static int cdns_i2c_remove(struct platform_device *);
946:	static int cdns_reg_slave(struct i2c_client *);
971:	static int cdns_unreg_slave(struct i2c_client *);

File drivers/i2c/busses/i2c-designware-common.c:
442:	void __i2c_dw_disable(struct dw_i2c_dev *);
503:	int i2c_dw_acquire_lock(struct dw_i2c_dev *);
317:	void i2c_dw_adjust_bus_speed(struct dw_i2c_dev *);
468:	unsigned long i2c_dw_clk_rate(struct dw_i2c_dev *);
612:	void i2c_dw_disable(struct dw_i2c_dev *);
605:	u32 i2c_dw_func(struct i2c_adapter *);
549:	int i2c_dw_handle_tx_abort(struct dw_i2c_dev *);
126:	int i2c_dw_init_regmap(struct dw_i2c_dev *);
479:	int i2c_dw_prepare_clk(struct dw_i2c_dev *, bool);
519:	void i2c_dw_release_lock(struct dw_i2c_dev *);
335:	u32 i2c_dw_scl_hcnt(u32, u32, u32, int, int);
375:	u32 i2c_dw_scl_lcnt(u32, u32, u32, int);
572:	int i2c_dw_set_fifo_size(struct dw_i2c_dev *);
392:	int i2c_dw_set_sda_hold(struct dw_i2c_dev *);
191:	int i2c_dw_validate_speed(struct dw_i2c_dev *);
528:	int i2c_dw_wait_bus_not_busy(struct dw_i2c_dev *);
62:	static int dw_reg_read(void *, unsigned int, unsigned int *);
80:	static int dw_reg_read_swab(void *, unsigned int, unsigned int *);
98:	static int dw_reg_read_word(void *, unsigned int, unsigned int *);
71:	static int dw_reg_write(void *, unsigned int, unsigned int);
89:	static int dw_reg_write_swab(void *, unsigned int, unsigned int);
108:	static int dw_reg_write_word(void *, unsigned int, unsigned int);

File drivers/i2c/busses/i2c-designware-core.h:
358:	static int i2c_dw_probe(struct dw_i2c_dev *);

File drivers/i2c/busses/i2c-designware-master.c:
780:	void i2c_dw_configure_master(struct dw_i2c_dev *);
864:	int i2c_dw_probe_master(struct dw_i2c_dev *);
850:	static int amd_i2c_adap_quirk(struct dw_i2c_dev *);
255:	static int i2c_dw_check_stopbit(struct dw_i2c_dev *);
175:	static int i2c_dw_init_master(struct dw_i2c_dev *);
822:	static int i2c_dw_init_recovery_info(struct dw_i2c_dev *);
714:	static irqreturn_t i2c_dw_isr(int, void *);
804:	static void i2c_dw_prepare_recovery(struct i2c_adapter *);
813:	static void i2c_dw_unprepare_recovery(struct i2c_adapter *);
551:	static int i2c_dw_xfer(struct i2c_adapter *, struct i2c_msg *, int);
210:	static void i2c_dw_xfer_init(struct dw_i2c_dev *);

File drivers/i2c/busses/i2c-designware-platdrv.c:
73:	static int bt1_i2c_read(void *, unsigned int, unsigned int *);
90:	static int bt1_i2c_write(void *, unsigned int, unsigned int);
500:	static void dw_i2c_exit_driver(void);
494:	static int dw_i2c_init_driver(void);
265:	static int dw_i2c_plat_probe(struct platform_device *);
388:	static int dw_i2c_plat_remove(struct platform_device *);
38:	static u32 i2c_dw_get_clk_rate_khz(struct dw_i2c_dev *);
127:	static int mscc_twi_set_sda_hold_time(struct dw_i2c_dev *);

File drivers/i2c/busses/i2c-gpio.c:
513:	static void i2c_gpio_exit(void);
67:	static int i2c_gpio_getscl(void *);
60:	static int i2c_gpio_getsda(void *);
501:	static int i2c_gpio_init(void);
357:	static int i2c_gpio_probe(struct platform_device *);
470:	static int i2c_gpio_remove(struct platform_device *);
53:	static void i2c_gpio_setscl_val(void *, int);
40:	static void i2c_gpio_setsda_val(void *, int);

File drivers/i2c/busses/i2c-omap.c:
278:	static void __omap_i2c_init(struct omap_i2c_dev *);
1604:	static void omap_i2c_exit_driver(void);
848:	static u32 omap_i2c_func(struct i2c_adapter *);
1280:	static int omap_i2c_get_scl(struct i2c_adapter *);
1290:	static int omap_i2c_get_sda(struct i2c_adapter *);
1598:	static int omap_i2c_init_driver(void);
1053:	static irqreturn_t omap_i2c_isr(int, void *);
1202:	static irqreturn_t omap_i2c_isr_thread(int, void *);
1313:	static void omap_i2c_prepare_recovery(struct i2c_adapter *);
1354:	static int omap_i2c_probe(struct platform_device *);
1522:	static int omap_i2c_remove(struct platform_device *);
309:	static int omap_i2c_reset(struct omap_i2c_dev *);
1300:	static void omap_i2c_set_scl(struct i2c_adapter *, int);
1020:	static int omap_i2c_transmit_data(struct omap_i2c_dev *, u8, bool);
1330:	static void omap_i2c_unprepare_recovery(struct i2c_adapter *);
501:	static int omap_i2c_wait_for_bb(struct omap_i2c_dev *);
792:	static int omap_i2c_xfer_common(struct i2c_adapter *, struct i2c_msg *, int, bool);
1069:	static int omap_i2c_xfer_data(struct omap_i2c_dev *);
836:	static int omap_i2c_xfer_irq(struct i2c_adapter *, struct i2c_msg *, int);
842:	static int omap_i2c_xfer_polling(struct i2c_adapter *, struct i2c_msg *, int);

File drivers/i2c/busses/i2c-rk3x.c:
872:	static void rk3x_i2c_adapt_div(struct rk3x_i2c *, unsigned long);
924:	static int rk3x_i2c_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
1400:	static void rk3x_i2c_driver_exit(void);
1400:	static int rk3x_i2c_driver_init(void);
337:	static void rk3x_i2c_fill_transmit_buf(struct rk3x_i2c *);
1152:	static u32 rk3x_i2c_func(struct i2c_adapter *);
478:	static irqreturn_t rk3x_i2c_irq(int, void *);
1231:	static int rk3x_i2c_probe(struct platform_device *);
1375:	static int rk3x_i2c_remove(struct platform_device *);
563:	static int rk3x_i2c_v0_calc_timings(unsigned long, struct i2c_timings *, struct rk3x_i2c_calced_timings *);
742:	static int rk3x_i2c_v1_calc_timings(unsigned long, struct i2c_timings *, struct rk3x_i2c_calced_timings *);
1131:	static int rk3x_i2c_xfer(struct i2c_adapter *, struct i2c_msg *, int);
1057:	static int rk3x_i2c_xfer_common(struct i2c_adapter *, struct i2c_msg *, int, bool);
1137:	static int rk3x_i2c_xfer_polling(struct i2c_adapter *, struct i2c_msg *, int);

File drivers/i2c/i2c-boardinfo.c:
51:	int i2c_register_board_info(int, const struct i2c_board_info *, unsigned int);

File drivers/i2c/i2c-core-base.c:
2074:	int __i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
1752:	int devm_i2c_add_adapter(struct device *, struct i2c_adapter *);
1075:	struct i2c_client *devm_i2c_new_dummy_device(struct device *, struct i2c_adapter *, u16);
1145:	unsigned int i2c_adapter_depth(struct i2c_adapter *);
1559:	int i2c_add_adapter(struct i2c_adapter *);
1608:	int i2c_add_numbered_adapter(struct i2c_adapter *);
747:	int i2c_check_7bit_addr_validity_strict(unsigned short);
2245:	const struct i2c_device_id *i2c_client_get_device_id(const struct i2c_client *);
1917:	void i2c_clients_command(struct i2c_adapter *, unsigned int, void *);
1663:	void i2c_del_adapter(struct i2c_adapter *);
1886:	void i2c_del_driver(struct i2c_driver *);
874:	int i2c_dev_irq_from_resources(const struct resource *, unsigned int);
1821:	int i2c_for_each_dev(void *, int (*)(struct device *, void *));
80:	const char *i2c_freq_mode_string(u32);
200:	int i2c_generic_scl_recovery(struct i2c_adapter *);
2453:	struct i2c_adapter *i2c_get_adapter(int);
2215:	int i2c_get_device_id(const struct i2c_client *, struct i2c_device_identity *);
2496:	u8 *i2c_get_dma_safe_msg_buf(struct i2c_msg *, unsigned int);
1410:	int i2c_handle_smbus_host_notify(struct i2c_adapter *, unsigned short);
101:	const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *, const struct i2c_client *);
1116:	struct i2c_client *i2c_new_ancillary_device(struct i2c_client *, const char *, u16);
917:	struct i2c_client *i2c_new_client_device(struct i2c_adapter *, const struct i2c_board_info *);
1050:	struct i2c_client *i2c_new_dummy_device(struct i2c_adapter *, u16);
2412:	struct i2c_client *i2c_new_scanned_device(struct i2c_adapter *, struct i2c_board_info *, const unsigned short *, int (*)(struct i2c_adapter *, unsigned short));
1792:	void i2c_parse_fw_timings(struct device *, struct i2c_timings *, bool);
2404:	int i2c_probe_func_quick_read(struct i2c_adapter *, unsigned short);
2473:	void i2c_put_adapter(struct i2c_adapter *);
2524:	void i2c_put_dma_safe_msg_buf(u8 *, struct i2c_msg *, bool);
271:	int i2c_recover_bus(struct i2c_adapter *);
1845:	int i2c_register_driver(struct module *, struct i2c_driver *);
2141:	int i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
2187:	int i2c_transfer_buffer_flags(const struct i2c_client *, char *, int, u16);
69:	int i2c_transfer_trace_reg(void);
75:	void i2c_transfer_trace_unreg(void);
998:	void i2c_unregister_device(struct i2c_client *);
1307:	struct i2c_adapter *i2c_verify_adapter(struct device *);
703:	struct i2c_client *i2c_verify_client(struct device *);
764:	static int __i2c_check_addr_busy(struct device *, void *);
1343:	static int __process_new_adapter(struct device_driver *, void *);
1833:	static int __process_new_driver(struct device *, void *);
1649:	static int __process_removed_adapter(struct device_driver *, void *);
1874:	static int __process_removed_driver(struct device *, void *);
1634:	static int __unregister_client(struct device *, void *);
1642:	static int __unregister_dummy(struct device *, void *);
1238:	static ssize_t delete_device_store(struct device *, struct device_attribute *, const char *, size_t);
1738:	static void devm_i2c_del_adapter(void *);
1060:	static void devm_i2c_release_dummy(void *);
1021:	static int dummy_probe(struct i2c_client *);
156:	static int get_scl_gpio_value(struct i2c_adapter *);
166:	static int get_sda_gpio_value(struct i2c_adapter *);
1139:	static void i2c_adapter_dev_release(struct device *);
824:	static void i2c_adapter_lock_bus(struct i2c_adapter *, unsigned int);
836:	static int i2c_adapter_trylock_bus(struct i2c_adapter *, unsigned int);
848:	static void i2c_adapter_unlock_bus(struct i2c_adapter *, unsigned int);
790:	static int i2c_check_mux_children(struct device *, void *);
775:	static int i2c_check_mux_parents(struct i2c_adapter *, int);
638:	static void i2c_client_dev_release(struct device *);
1902:	static int i2c_cmd(struct device *, void *);
2271:	static int i2c_default_probe(struct i2c_adapter *, unsigned short);
116:	static int i2c_device_match(struct device *, struct device_driver *);
466:	static int i2c_device_probe(struct device *);
600:	static void i2c_device_remove(struct device *);
624:	static void i2c_device_shutdown(struct device *);
139:	static int i2c_device_uevent(struct device *, struct kobj_uevent_env *);
1334:	static int i2c_do_add_adapter(struct i2c_driver *, struct i2c_adapter *);
1972:	static void i2c_exit(void);
1369:	static int i2c_host_notify_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1927:	static int i2c_init(void);
1427:	static int i2c_register_adapter(struct i2c_adapter *);
652:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
644:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
1170:	static ssize_t new_device_store(struct device *, struct device_attribute *, const char *, size_t);
161:	static void set_scl_gpio_value(struct i2c_adapter *, int);
171:	static void set_sda_gpio_value(struct i2c_adapter *, int);

File drivers/i2c/i2c-core-of.c:
212:	const struct of_device_id *i2c_of_match_device(const struct of_device_id *, struct i2c_client *);
146:	struct i2c_adapter *of_find_i2c_adapter_by_node(struct device_node *);
128:	struct i2c_client *of_find_i2c_device_by_node(struct device_node *);
165:	struct i2c_adapter *of_get_i2c_adapter_by_node(struct device_node *);
22:	int of_i2c_get_board_info(struct device *, struct device_node *, struct i2c_board_info *);
85:	void of_i2c_register_devices(struct i2c_adapter *);
116:	static int of_dev_or_parent_node_match(struct device *, const void *);

File drivers/i2c/i2c-core-slave.c:
109:	bool i2c_detect_slave_mode(struct device *);
85:	int i2c_slave_event(struct i2c_client *, enum i2c_slave_event, u8 *);
20:	int i2c_slave_register(struct i2c_client *, i2c_slave_cb_t);
60:	int i2c_slave_unregister(struct i2c_client *);

File drivers/i2c/i2c-core-smbus.c:
553:	s32 __i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
693:	struct i2c_client *i2c_new_smbus_alert_device(struct i2c_adapter *, struct i2c_smbus_alert_setup *);
49:	u8 i2c_smbus_pec(u8, u8 *, size_t);
224:	s32 i2c_smbus_read_block_data(const struct i2c_client *, u8, u8 *);
102:	s32 i2c_smbus_read_byte(const struct i2c_client *);
137:	s32 i2c_smbus_read_byte_data(const struct i2c_client *, u8);
267:	s32 i2c_smbus_read_i2c_block_data(const struct i2c_client *, u8, u8, u8 *);
640:	s32 i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *, u8, u8, u8 *);
177:	s32 i2c_smbus_read_word_data(const struct i2c_client *, u8);
251:	s32 i2c_smbus_write_block_data(const struct i2c_client *, u8, u8, const u8 *);
122:	s32 i2c_smbus_write_byte(const struct i2c_client *, u8);
158:	s32 i2c_smbus_write_byte_data(const struct i2c_client *, u8, u8);
287:	s32 i2c_smbus_write_i2c_block_data(const struct i2c_client *, u8, u8, const u8 *);
198:	s32 i2c_smbus_write_word_data(const struct i2c_client *, u8, u16);
535:	s32 i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
60:	static u8 i2c_smbus_msg_pec(u8, struct i2c_msg *);

File drivers/i2c/i2c-dev.c:
768:	static void i2c_dev_exit(void);
732:	static int i2c_dev_init(void);
649:	static int i2cdev_attach_adapter(struct device *, void *);
180:	static int i2cdev_check(struct device *, void *);
204:	static int i2cdev_check_mux_children(struct device *, void *);
191:	static int i2cdev_check_mux_parents(struct i2c_adapter *, int);
688:	static int i2cdev_detach_adapter(struct device *, void *);
641:	static void i2cdev_dev_release(struct device *);
392:	static long i2cdev_ioctl(struct file *, unsigned int, unsigned long);
235:	static int i2cdev_ioctl_rdwr(struct i2c_client *, unsigned int, struct i2c_msg *);
311:	static int i2cdev_ioctl_smbus(struct i2c_client *, u8, u8, u32, union i2c_smbus_data *);
707:	static int i2cdev_notifier_call(struct notifier_block *, unsigned long, void *);
585:	static int i2cdev_open(struct inode *, struct file *);
134:	static ssize_t i2cdev_read(struct file *, char *, size_t, loff_t *);
615:	static int i2cdev_release(struct inode *, struct file *);
159:	static ssize_t i2cdev_write(struct file *, const char *, size_t, loff_t *);
98:	static ssize_t name_show(struct device *, struct device_attribute *, char *);

File drivers/i2c/i2c-mux.c:
283:	int i2c_mux_add_adapter(struct i2c_mux_core *, u32, u32, unsigned int);
239:	struct i2c_mux_core *i2c_mux_alloc(struct i2c_adapter *, struct device *, int, int, u32, int (*)(struct i2c_mux_core *, u32), int (*)(struct i2c_mux_core *, u32));
441:	void i2c_mux_del_adapters(struct i2c_mux_core *);
213:	struct i2c_adapter *i2c_root_adapter(struct device *);
39:	static int __i2c_mux_master_xfer(struct i2c_adapter *, struct i2c_msg *, int);
77:	static int __i2c_mux_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
122:	static u32 i2c_mux_functionality(struct i2c_adapter *);
143:	static void i2c_mux_lock_bus(struct i2c_adapter *, unsigned int);
58:	static int i2c_mux_master_xfer(struct i2c_adapter *, struct i2c_msg *, int);
99:	static int i2c_mux_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
154:	static int i2c_mux_trylock_bus(struct i2c_adapter *, unsigned int);
169:	static void i2c_mux_unlock_bus(struct i2c_adapter *, unsigned int);
179:	static void i2c_parent_lock_bus(struct i2c_adapter *, unsigned int);
189:	static int i2c_parent_trylock_bus(struct i2c_adapter *, unsigned int);
203:	static void i2c_parent_unlock_bus(struct i2c_adapter *, unsigned int);

File drivers/i2c/muxes/i2c-mux-pca954x.c:
274:	static ssize_t idle_state_show(struct device *, struct device_attribute *, char *);
285:	static ssize_t idle_state_store(struct device *, struct device_attribute *, const char *, size_t);
251:	static int pca954x_deselect_mux(struct i2c_mux_core *, u32);
562:	static void pca954x_driver_exit(void);
562:	static int pca954x_driver_init(void);
320:	static irqreturn_t pca954x_irq_handler(int, void *);
337:	static int pca954x_irq_set_type(struct irq_data *, unsigned int);
414:	static int pca954x_probe(struct i2c_client *);
524:	static void pca954x_remove(struct i2c_client *);
234:	static int pca954x_select_chan(struct i2c_mux_core *, u32);

File drivers/input/ff-core.c:
302:	int input_ff_create(struct input_dev *, unsigned int);
362:	void input_ff_destroy(struct input_dev *);
208:	int input_ff_erase(struct input_dev *, int, struct file *);
258:	int input_ff_event(struct input_dev *, unsigned int, unsigned int, int);
233:	int input_ff_flush(struct input_dev *, struct file *);
89:	int input_ff_upload(struct input_dev *, struct ff_effect *, struct file *);
169:	static int erase_effect(struct input_dev *, int, struct file *);

File drivers/input/ff-memless.c:
507:	int input_ff_create_memless(struct input_dev *, void *, int (*)(struct input_dev *, void *, struct ff_effect *));
149:	static int apply_envelope(struct ml_effect_state *, int, struct ff_envelope *);
400:	static void ml_effect_timer(struct timer_list *);
485:	static void ml_ff_destroy(struct ff_device *);
432:	static int ml_ff_playback(struct input_dev *, int, int);
416:	static void ml_ff_set_gain(struct input_dev *, u16);
462:	static int ml_ff_upload(struct input_dev *, struct ff_effect *, struct ff_effect *);
387:	static void ml_play_effects(struct ml_device *);
109:	static void ml_schedule_timer(struct ml_device *);

File drivers/input/input-compat.c:
99:	int input_event_from_user(const char *, struct input_event *);
108:	int input_event_to_user(char *, const struct input_event *);
117:	int input_ff_effect_from_user(const char *, size_t, struct ff_effect *);

File drivers/input/input-mt.c:
480:	int input_mt_assign_slots(struct input_dev *, int *, const struct input_mt_pos *, int, int);
111:	void input_mt_destroy_slots(struct input_dev *);
280:	void input_mt_drop_unused(struct input_dev *);
515:	int input_mt_get_slot_by_key(struct input_dev *, int);
39:	int input_mt_init_slots(struct input_dev *, unsigned int, unsigned int);
303:	void input_mt_release_slots(struct input_dev *);
175:	void input_mt_report_finger_count(struct input_dev *, int);
196:	void input_mt_report_pointer_emulation(struct input_dev *, bool);
135:	bool input_mt_report_slot_state(struct input_dev *, unsigned int, bool);
330:	void input_mt_sync_frame(struct input_dev *);

File drivers/input/input-poller.c:
46:	void input_dev_poller_finalize(struct input_dev_poller *);
54:	void input_dev_poller_start(struct input_dev_poller *);
63:	void input_dev_poller_stop(struct input_dev_poller *);
126:	int input_get_poll_interval(struct input_dev *);
119:	void input_set_max_poll_interval(struct input_dev *, unsigned int);
112:	void input_set_min_poll_interval(struct input_dev *, unsigned int);
105:	void input_set_poll_interval(struct input_dev *, unsigned int);
68:	int input_setup_polling(struct input_dev *, void (*)(struct input_dev *));
137:	static ssize_t input_dev_get_poll_interval(struct device *, struct device_attribute *, char *);
183:	static ssize_t input_dev_get_poll_max(struct device *, struct device_attribute *, char *);
193:	static ssize_t input_dev_get_poll_min(struct device *, struct device_attribute *, char *);
37:	static void input_dev_poller_work(struct work_struct *);
146:	static ssize_t input_dev_set_poll_interval(struct device *, struct device_attribute *, const char *, size_t);
203:	static umode_t input_poller_attrs_visible(struct kobject *, struct attribute *, int);

File drivers/input/input.c:
2002:	struct input_dev *devm_input_allocate_device(struct device *);
477:	void input_alloc_absinfo(struct input_dev *);
1937:	struct input_dev *input_allocate_device(void);
697:	void input_close_device(struct input_handle *);
528:	void input_copy_abs(struct input_dev *, unsigned int, const struct input_dev *, unsigned int);
2290:	bool input_device_enabled(struct input_dev *);
2282:	void input_enable_softrepeat(struct input_dev *, int, int);
424:	void input_event(struct input_dev *, unsigned int, unsigned int, int);
673:	int input_flush_device(struct input_handle *, struct file *);
2042:	void input_free_device(struct input_dev *);
2654:	void input_free_minor(unsigned int);
931:	int input_get_keycode(struct input_dev *, struct input_keymap_entry *);
2624:	int input_get_new_minor(int, unsigned int, bool);
2084:	ktime_t *input_get_timestamp(struct input_dev *);
560:	int input_grab_device(struct input_handle *);
391:	void input_handle_event(struct input_dev *, unsigned int, unsigned int, int);
2515:	int input_handler_for_each_handle(struct input_handler *, void *, int (*)(struct input_handle *, void *));
449:	void input_inject_event(struct input_handle *, unsigned int, unsigned int, int);
1001:	bool input_match_device_id(const struct input_dev *, const struct input_device_id *);
626:	int input_open_device(struct input_handle *);
2321:	int input_register_device(struct input_dev *);
2546:	int input_register_handle(struct input_handle *);
2455:	int input_register_handler(struct input_handler *);
609:	void input_release_device(struct input_handle *);
1758:	void input_reset_device(struct input_dev *);
789:	int input_scancode_to_scalar(const struct input_keymap_entry *, unsigned int *);
495:	void input_set_abs_params(struct input_dev *, unsigned int, int, int, int, int);
2104:	void input_set_capability(struct input_dev *, unsigned int, unsigned int);
952:	int input_set_keycode(struct input_dev *, const struct input_keymap_entry *);
2069:	void input_set_timestamp(struct input_dev *, ktime_t);
2428:	void input_unregister_device(struct input_dev *);
2596:	void input_unregister_handle(struct input_handle *);
2485:	void input_unregister_handler(struct input_handler *);
2214:	static void __input_unregister_device(struct input_dev *);
1967:	static int devm_input_device_match(struct device *, void *, void *);
1974:	static void devm_input_device_release(struct device *, void *);
2236:	static void devm_input_device_unregister(struct device *, void *);
1452:	static ssize_t inhibited_show(struct device *, struct device_attribute *, char *);
1461:	static ssize_t inhibited_store(struct device *, struct device_attribute *, const char *, size_t);
1623:	static int input_add_uevent_bm_var(struct kobj_uevent_env *, const char *, unsigned long *, int);
1641:	static int input_add_uevent_modalias_var(struct kobj_uevent_env *, struct input_dev *);
833:	static int input_default_getkeycode(struct input_dev *, struct input_keymap_entry *);
861:	static int input_default_setkeycode(struct input_dev *, const struct input_keymap_entry *, unsigned int *);
1605:	static void input_dev_release(struct device *);
729:	static bool input_dev_release_keys(struct input_dev *);
1572:	static ssize_t input_dev_show_cap_abs(struct device *, struct device_attribute *, char *);
1569:	static ssize_t input_dev_show_cap_ev(struct device *, struct device_attribute *, char *);
1576:	static ssize_t input_dev_show_cap_ff(struct device *, struct device_attribute *, char *);
1570:	static ssize_t input_dev_show_cap_key(struct device *, struct device_attribute *, char *);
1574:	static ssize_t input_dev_show_cap_led(struct device *, struct device_attribute *, char *);
1573:	static ssize_t input_dev_show_cap_msc(struct device *, struct device_attribute *, char *);
1571:	static ssize_t input_dev_show_cap_rel(struct device *, struct device_attribute *, char *);
1575:	static ssize_t input_dev_show_cap_snd(struct device *, struct device_attribute *, char *);
1577:	static ssize_t input_dev_show_cap_sw(struct device *, struct device_attribute *, char *);
1509:	static ssize_t input_dev_show_id_bustype(struct device *, struct device_attribute *, char *);
1511:	static ssize_t input_dev_show_id_product(struct device *, struct device_attribute *, char *);
1510:	static ssize_t input_dev_show_id_vendor(struct device *, struct device_attribute *, char *);
1512:	static ssize_t input_dev_show_id_version(struct device *, struct device_attribute *, char *);
1422:	static ssize_t input_dev_show_modalias(struct device *, struct device_attribute *, char *);
1370:	static ssize_t input_dev_show_name(struct device *, struct device_attribute *, char *);
1371:	static ssize_t input_dev_show_phys(struct device *, struct device_attribute *, char *);
1438:	static ssize_t input_dev_show_properties(struct device *, struct device_attribute *, char *);
1372:	static ssize_t input_dev_show_uniq(struct device *, struct device_attribute *, char *);
1736:	static void input_dev_toggle(struct input_dev *, bool);
1680:	static int input_dev_uevent(struct device *, struct kobj_uevent_env *);
1154:	static void *input_devices_seq_next(struct seq_file *, void *, loff_t *);
1193:	static int input_devices_seq_show(struct seq_file *, void *);
1135:	static void *input_devices_seq_start(struct seq_file *, loff_t *);
1917:	static char *input_devnode(const struct device *, umode_t *);
348:	static void input_event_dispose(struct input_dev *, int, unsigned int, unsigned int, int);
2688:	static void input_exit(void);
1278:	static void *input_handlers_seq_next(struct seq_file *, void *, loff_t *);
1286:	static int input_handlers_seq_show(struct seq_file *, void *);
1258:	static void *input_handlers_seq_start(struct seq_file *, loff_t *);
2660:	static int input_init(void);
141:	static void input_pass_values(struct input_dev *, struct input_value *, unsigned int);
1527:	static int input_print_bitmap(char *, int, unsigned long *, int, int);
1387:	static int input_print_modalias(char *, int, struct input_dev *, int);
1245:	static int input_proc_devices_open(struct inode *, struct file *);
1116:	static __poll_t input_proc_devices_poll(struct file *, poll_table *);
1345:	static void input_proc_exit(void);
1308:	static int input_proc_handlers_open(struct inode *, struct file *);
1320:	static int input_proc_init(void);
2251:	static void input_repeat_key(struct timer_list *);
1167:	static void input_seq_print_bitmap(struct seq_file *, const char *, unsigned long *, int);
1159:	static void input_seq_stop(struct seq_file *, void *);

File drivers/input/keyboard/atkbd.c:
312:	static umode_t atkbd_attr_is_visible(struct kobject *, struct attribute *, int);
1397:	static ssize_t atkbd_attr_set_helper(struct device *, const char *, size_t, ssize_t (*)(struct atkbd *, const char *, size_t));
910:	static void atkbd_cleanup(struct serio *);
1213:	static int atkbd_connect(struct serio *, struct serio_driver *);
923:	static void atkbd_disconnect(struct serio *);
275:	static ssize_t atkbd_do_set_extra(struct device *, struct device_attribute *, const char *, size_t);
276:	static ssize_t atkbd_do_set_force_release(struct device *, struct device_attribute *, const char *, size_t);
277:	static ssize_t atkbd_do_set_scroll(struct device *, struct device_attribute *, const char *, size_t);
278:	static ssize_t atkbd_do_set_set(struct device *, struct device_attribute *, const char *, size_t);
280:	static ssize_t atkbd_do_set_softraw(struct device *, struct device_attribute *, const char *, size_t);
279:	static ssize_t atkbd_do_set_softrepeat(struct device *, struct device_attribute *, const char *, size_t);
292:	static ssize_t atkbd_do_show_err_count(struct device *, struct device_attribute *, char *);
275:	static ssize_t atkbd_do_show_extra(struct device *, struct device_attribute *, char *);
276:	static ssize_t atkbd_do_show_force_release(struct device *, struct device_attribute *, char *);
293:	static ssize_t atkbd_do_show_function_row_physmap(struct device *, struct device_attribute *, char *);
277:	static ssize_t atkbd_do_show_scroll(struct device *, struct device_attribute *, char *);
278:	static ssize_t atkbd_do_show_set(struct device *, struct device_attribute *, char *);
280:	static ssize_t atkbd_do_show_softraw(struct device *, struct device_attribute *, char *);
279:	static ssize_t atkbd_do_show_softrepeat(struct device *, struct device_attribute *, char *);
668:	static int atkbd_event(struct input_dev *, unsigned int, unsigned int, int);
619:	static void atkbd_event_work(struct work_struct *);
1893:	static void atkbd_exit(void);
1886:	static int atkbd_init(void);
399:	static irqreturn_t atkbd_interrupt(struct serio *, unsigned char, unsigned int);
753:	static int atkbd_probe(struct atkbd *);
1296:	static int atkbd_reconnect(struct serio *);
820:	static int atkbd_select_set(struct atkbd *, int, int);
1120:	static void atkbd_set_device_attrs(struct atkbd *);
1422:	static ssize_t atkbd_set_extra(struct atkbd *, const char *, size_t);
1064:	static void atkbd_set_keycode_table(struct atkbd *);
588:	static int atkbd_set_leds(struct atkbd *);
1510:	static ssize_t atkbd_set_scroll(struct atkbd *, const char *, size_t);
1558:	static ssize_t atkbd_set_set(struct atkbd *, const char *, size_t);
1667:	static ssize_t atkbd_set_softraw(struct atkbd *, const char *, size_t);
1613:	static ssize_t atkbd_set_softrepeat(struct atkbd *, const char *, size_t);

File drivers/input/keyboard/gpio_keys.c:
197:	static ssize_t gpio_keys_attr_show_helper(struct gpio_keys_drvdata *, char *, unsigned int, bool);
241:	static ssize_t gpio_keys_attr_store_helper(struct gpio_keys_drvdata *, const char *, unsigned int);
712:	static void gpio_keys_close(struct input_dev *);
407:	static enum hrtimer_restart gpio_keys_debounce_timer(struct hrtimer *);
1064:	static void gpio_keys_exit(void);
417:	static irqreturn_t gpio_keys_gpio_isr(int, void *);
366:	static void gpio_keys_gpio_report_event(struct gpio_button_data *);
399:	static void gpio_keys_gpio_work_func(struct work_struct *);
1059:	static int gpio_keys_init(void);
467:	static irqreturn_t gpio_keys_irq_isr(int, void *);
451:	static enum hrtimer_restart gpio_keys_irq_timer(struct hrtimer *);
694:	static int gpio_keys_open(struct input_dev *);
800:	static int gpio_keys_probe(struct platform_device *);
128:	static void gpio_keys_quiesce_key(void *);
312:	static ssize_t gpio_keys_show_disabled_keys(struct device *, struct device_attribute *, char *);
313:	static ssize_t gpio_keys_show_disabled_switches(struct device *, struct device_attribute *, char *);
310:	static ssize_t gpio_keys_show_keys(struct device *, struct device_attribute *, char *);
311:	static ssize_t gpio_keys_show_switches(struct device *, struct device_attribute *, char *);
1039:	static void gpio_keys_shutdown(struct platform_device *);
341:	static ssize_t gpio_keys_store_disabled_keys(struct device *, struct device_attribute *, const char *, size_t);
342:	static ssize_t gpio_keys_store_disabled_switches(struct device *, struct device_attribute *, const char *, size_t);

File drivers/input/matrix-keymap.c:
150:	int matrix_keypad_build_keymap(const struct matrix_keymap_data *, const char *, unsigned int, unsigned int, unsigned short *, struct input_dev *);
52:	int matrix_keypad_parse_properties(struct device *, unsigned int *, unsigned int *);

File drivers/input/mouse/alps.c:
3173:	int alps_detect(struct psmouse *, bool);
3038:	int alps_init(struct psmouse *);
1750:	static int __alps_command_mode_write_reg(struct psmouse *, u8);
1743:	static int alps_command_mode_read_reg(struct psmouse *, int);
1706:	static int alps_command_mode_set_addr(struct psmouse *, int);
1759:	static int alps_command_mode_write_reg(struct psmouse *, int, u8);
688:	static int alps_decode_dolphin(struct alps_fields *, unsigned char *, struct psmouse *);
1026:	static int alps_decode_packet_v7(struct alps_fields *, unsigned char *, struct psmouse *);
634:	static int alps_decode_pinnacle(struct alps_fields *, unsigned char *, struct psmouse *);
660:	static int alps_decode_rushmore(struct alps_fields *, unsigned char *, struct psmouse *);
1177:	static int alps_decode_ss4_v2(struct alps_fields *, unsigned char *, struct psmouse *);
2968:	static void alps_disconnect(struct psmouse *);
1806:	static int alps_enter_command_mode(struct psmouse *);
1577:	static void alps_flush_packet(struct timer_list *);
2288:	static int alps_get_v3_v7_resolution(struct psmouse *, int);
2647:	static int alps_hw_init_dolphin_v1(struct psmouse *);
2327:	static int alps_hw_init_rushmore_v3(struct psmouse *);
2693:	static int alps_hw_init_ss4_v2(struct psmouse *);
2017:	static int alps_hw_init_v1_v2(struct psmouse *);
2217:	static int alps_hw_init_v3(struct psmouse *);
2388:	static int alps_hw_init_v4(struct psmouse *);
2065:	static int alps_hw_init_v6(struct psmouse *);
2664:	static int alps_hw_init_v7(struct psmouse *);
2882:	static int alps_identify(struct psmouse *, struct alps_data *);
2849:	static const struct alps_protocol_info *alps_match_table(unsigned char *, unsigned char *);
1872:	static int alps_monitor_mode_send_word(struct psmouse *, u16);
1836:	static int alps_passthrough_mode_v2(struct psmouse *, bool);
2092:	static int alps_passthrough_mode_v3(struct psmouse *, int, bool);
1987:	static int alps_poll(struct psmouse *);
392:	static int alps_process_bitmap(struct alps_data *, struct alps_fields *);
1606:	static psmouse_ret_t alps_process_byte(struct psmouse *);
1314:	static void alps_process_packet_ss4_v2(struct psmouse *);
248:	static void alps_process_packet_v1_v2(struct psmouse *);
803:	static void alps_process_packet_v3(struct psmouse *);
889:	static void alps_process_packet_v4(struct psmouse *);
823:	static void alps_process_packet_v6(struct psmouse *);
1138:	static void alps_process_packet_v7(struct psmouse *);
725:	static void alps_process_touchpad_packet_v3_v5(struct psmouse *);
2956:	static int alps_reconnect(struct psmouse *);
1399:	static void alps_register_bare_ps2_mouse(struct work_struct *);
221:	static void alps_report_buttons(struct input_dev *, struct input_dev *, int, int, int);
510:	static void alps_report_mt_data(struct psmouse *, int);
524:	static void alps_report_semi_mt_data(struct psmouse *, int);
1767:	static int alps_rpt_cmd(struct psmouse *, int, int, unsigned char *);
2989:	static void alps_set_abs_params_mt_common(struct alps_data *, struct input_dev *);
3002:	static void alps_set_abs_params_semi_mt(struct alps_data *, struct input_dev *);
3026:	static void alps_set_abs_params_ss4_v2(struct alps_data *, struct input_dev *);
2981:	static void alps_set_abs_params_st(struct alps_data *, struct input_dev *);
3013:	static void alps_set_abs_params_v7(struct alps_data *, struct input_dev *);
2722:	static int alps_set_protocol(struct psmouse *, struct alps_data *, const struct alps_protocol_info *);
2152:	static int alps_setup_trackstick_v3(struct psmouse *, int);
2051:	static int alps_trackstick_enter_extended_mode_v3_v6(struct psmouse *);

File drivers/input/mouse/byd.c:
435:	int byd_detect(struct psmouse *, bool);
464:	int byd_init(struct psmouse *);
252:	static void byd_clear_touch(struct timer_list *);
424:	static void byd_disconnect(struct psmouse *);
273:	static psmouse_ret_t byd_process_byte(struct psmouse *);
398:	static int byd_reconnect(struct psmouse *);
236:	static void byd_report_input(struct psmouse *);

File drivers/input/mouse/cypress_ps2.c:
201:	int cypress_detect(struct psmouse *, bool);
658:	int cypress_init(struct psmouse *);
628:	static void cypress_disconnect(struct psmouse *);
513:	static void cypress_process_packet(struct psmouse *, bool);
600:	static psmouse_ret_t cypress_protocol_handler(struct psmouse *);
60:	static int cypress_ps2_ext_cmd(struct psmouse *, unsigned short, unsigned char);
635:	static int cypress_reconnect(struct psmouse *);
356:	static void cypress_reset(struct psmouse *);
169:	static int cypress_send_ext_cmd(struct psmouse *, unsigned char, unsigned char *);
612:	static void cypress_set_rate(struct psmouse *, unsigned int);

File drivers/input/mouse/focaltech.c:
35:	int focaltech_detect(struct psmouse *, bool);
406:	int focaltech_init(struct psmouse *);
299:	static void focaltech_disconnect(struct psmouse *);
251:	static psmouse_ret_t focaltech_process_byte(struct psmouse *);
306:	static int focaltech_reconnect(struct psmouse *);
293:	static void focaltech_reset(struct psmouse *);
395:	static void focaltech_set_rate(struct psmouse *, unsigned int);
389:	static void focaltech_set_resolution(struct psmouse *, unsigned int);
400:	static void focaltech_set_scale(struct psmouse *, enum psmouse_scale);
265:	static int focaltech_switch_protocol(struct psmouse *);

File drivers/input/mouse/logips2pp.c:
357:	int ps2pp_detect(struct psmouse *, bool);
158:	static ssize_t ps2pp_attr_set_smartscroll(struct psmouse *, void *, const char *, size_t);
152:	static ssize_t ps2pp_attr_show_smartscroll(struct psmouse *, void *, char *);
201:	static void ps2pp_disconnect(struct psmouse *);
41:	static psmouse_ret_t ps2pp_process_byte(struct psmouse *);
185:	static void ps2pp_set_resolution(struct psmouse *, unsigned int);
136:	static void ps2pp_set_smartscroll(struct psmouse *, bool);

File drivers/input/mouse/psmouse-base.c:
1298:	int psmouse_activate(struct psmouse *);
1806:	ssize_t psmouse_attr_set_helper(struct device *, struct device_attribute *, const char *, size_t);
1792:	ssize_t psmouse_attr_show_helper(struct device *, struct device_attribute *, char *);
1314:	int psmouse_deactivate(struct psmouse *);
513:	bool psmouse_matches_pnp_id(struct psmouse *, const char * const *);
147:	psmouse_ret_t psmouse_process_byte(struct psmouse *);
237:	void psmouse_queue_work(struct psmouse *, struct delayed_work *, unsigned long);
119:	void psmouse_report_standard_buttons(struct input_dev *, u8);
126:	void psmouse_report_standard_motion(struct input_dev *, u8 *);
137:	void psmouse_report_standard_packet(struct input_dev *, u8 *);
433:	int psmouse_reset(struct psmouse *);
451:	void psmouse_set_resolution(struct psmouse *, unsigned int);
259:	void psmouse_set_state(struct psmouse *, enum psmouse_state);
1677:	static int __psmouse_reconnect(struct serio *, bool);
710:	static int cortron_detect(struct psmouse *, bool);
543:	static int genius_detect(struct psmouse *, bool);
608:	static int im_explorer_detect(struct psmouse *, bool);
575:	static int intellimouse_detect(struct psmouse *, bool);
688:	static int ps2bare_detect(struct psmouse *, bool);
1884:	static ssize_t psmouse_attr_set_protocol(struct psmouse *, void *, const char *, size_t);
1983:	static ssize_t psmouse_attr_set_rate(struct psmouse *, void *, const char *, size_t);
1996:	static ssize_t psmouse_attr_set_resolution(struct psmouse *, void *, const char *, size_t);
1879:	static ssize_t psmouse_attr_show_protocol(struct psmouse *, void *, char *);
1429:	static void psmouse_cleanup(struct serio *);
1578:	static int psmouse_connect(struct serio *, struct serio_driver *);
1477:	static void psmouse_disconnect(struct serio *);
995:	static bool psmouse_do_detect(int (*)(struct psmouse *, bool), struct psmouse *, bool, bool);
2066:	static void psmouse_exit(void);
1045:	static int psmouse_extensions(struct psmouse *, unsigned int, bool);
1754:	static int psmouse_fast_reconnect(struct serio *);
2027:	static int psmouse_get_maxproto(char *, const struct kernel_param *);
270:	static int psmouse_handle_byte(struct psmouse *);
2034:	static int psmouse_init(void);
1283:	static void psmouse_initialize(struct psmouse *);
336:	static irqreturn_t psmouse_interrupt(struct serio *, u8, unsigned int);
493:	static int psmouse_poll(struct psmouse *);
1749:	static int psmouse_reconnect(struct serio *);
1332:	static void psmouse_resync(struct work_struct *);
1864:	static ssize_t psmouse_set_int_attr(struct psmouse *, void *, const char *, size_t);
2010:	static int psmouse_set_maxproto(const char *, const struct kernel_param *);
467:	static void psmouse_set_rate(struct psmouse *, unsigned int);
483:	static void psmouse_set_scale(struct psmouse *, enum psmouse_scale);
1857:	static ssize_t psmouse_show_int_attr(struct psmouse *, void *, char *);
1518:	static int psmouse_switch_protocol(struct psmouse *, const struct psmouse_protocol *);
1010:	static bool psmouse_try_protocol(struct psmouse *, enum psmouse_type, unsigned int *, bool, bool);
654:	static int thinking_detect(struct psmouse *, bool);

File drivers/input/mouse/psmouse-smbus.c:
218:	void psmouse_smbus_cleanup(struct psmouse *);
234:	int psmouse_smbus_init(struct psmouse *, const struct i2c_board_info *, const void *, size_t, bool, bool);
324:	void psmouse_smbus_module_exit(void);
306:	int psmouse_smbus_module_init(void);
194:	static int psmouse_smbus_create_companion(struct device *, void *);
170:	static void psmouse_smbus_disconnect(struct psmouse *);
92:	static int psmouse_smbus_notifier_call(struct notifier_block *, unsigned long, void *);
116:	static psmouse_ret_t psmouse_smbus_process_byte(struct psmouse *);
121:	static int psmouse_smbus_reconnect(struct psmouse *);
136:	static void psmouse_smbus_remove_i2c_device(struct work_struct *);

File drivers/input/mouse/synaptics.c:
96:	int synaptics_detect(struct psmouse *, bool);
1858:	int synaptics_init(struct psmouse *);
1679:	int synaptics_init_absolute(struct psmouse *);
1684:	int synaptics_init_relative(struct psmouse *);
1819:	int synaptics_init_smbus(struct psmouse *);
1549:	void synaptics_module_init(void);
118:	void synaptics_reset(struct psmouse *);
1235:	static void set_abs_position_params(struct input_dev *, struct synaptics_device_info *, int, int);
1195:	static enum synaptics_pkt_type synaptics_detect_pkt_type(struct psmouse *);
1404:	static void synaptics_disconnect(struct psmouse *);
1556:	static int synaptics_init_ps2(struct psmouse *, struct synaptics_device_info *, bool);
1209:	static psmouse_ret_t synaptics_process_byte(struct psmouse *);
688:	static void synaptics_pt_activate(struct psmouse *);
706:	static void synaptics_pt_create(struct psmouse *);
646:	static int synaptics_pt_start(struct serio *);
658:	static void synaptics_pt_stop(struct serio *);
629:	static int synaptics_pt_write(struct serio *, u8);
420:	static int synaptics_query_hardware(struct psmouse *, struct synaptics_device_info *);
1424:	static int synaptics_reconnect(struct psmouse *);
967:	static void synaptics_report_buttons(struct psmouse *, const struct synaptics_hw_state *);
362:	static int synaptics_resolution(struct psmouse *, struct synaptics_device_info *);
207:	static int synaptics_send_cmd(struct psmouse *, u8, u8 *);
1370:	static ssize_t synaptics_set_disable_gesture(struct psmouse *, void *, const char *, size_t);
579:	static int synaptics_set_mode(struct psmouse *);
611:	static void synaptics_set_rate(struct psmouse *, unsigned int);
1362:	static ssize_t synaptics_show_disable_gesture(struct psmouse *, void *, char *);

File drivers/input/mouse/trackpoint.c:
396:	int trackpoint_detect(struct psmouse *, bool);
367:	static void trackpoint_disconnect(struct psmouse *);
214:	static umode_t trackpoint_is_attr_visible(struct kobject *, struct attribute *, int);
33:	static int trackpoint_power_on_reset(struct ps2dev *);
376:	static int trackpoint_reconnect(struct psmouse *);
146:	static ssize_t trackpoint_set_bit_attr(struct psmouse *, void *, const char *, size_t);
117:	static ssize_t trackpoint_set_int_attr(struct psmouse *, void *, const char *, size_t);
104:	static ssize_t trackpoint_show_int_attr(struct psmouse *, void *, char *);
303:	static int trackpoint_sync(struct psmouse *, bool);

File drivers/input/serio/libps2.c:
227:	int __ps2_command(struct ps2dev *, u8 *, unsigned int);
102:	void ps2_begin_command(struct ps2dev *);
483:	void ps2_cmd_aborted(struct ps2dev *);
330:	int ps2_command(struct ps2dev *, u8 *, unsigned int);
123:	void ps2_drain(struct ps2dev *, size_t, unsigned int);
110:	void ps2_end_command(struct ps2dev *);
393:	bool ps2_handle_ack(struct ps2dev *, u8);
463:	bool ps2_handle_response(struct ps2dev *, u8);
379:	void ps2_init(struct ps2dev *, struct serio *);
150:	bool ps2_is_keyboard_id(u8);
87:	int ps2_sendbyte(struct ps2dev *, u8, unsigned int);
350:	int ps2_sliced_command(struct ps2dev *, u8);
171:	static int ps2_adjust_timeout(struct ps2dev *, unsigned int, unsigned int);
26:	static int ps2_do_sendbyte(struct ps2dev *, u8, unsigned int, unsigned int);

File drivers/input/serio/serio.c:
810:	int __serio_register_driver(struct serio_driver *, struct module *, const char *);
692:	void __serio_register_port(struct serio *, struct module *);
980:	void serio_close(struct serio *);
989:	irqreturn_t serio_interrupt(struct serio *, unsigned char, unsigned int);
967:	int serio_open(struct serio *, struct serio_driver *);
682:	void serio_reconnect(struct serio *);
676:	void serio_rescan(struct serio *);
714:	void serio_unregister_child_port(struct serio *);
849:	void serio_unregister_driver(struct serio_driver *);
702:	void serio_unregister_port(struct serio *);
739:	static ssize_t bind_mode_show(struct device_driver *, char *);
745:	static ssize_t bind_mode_store(struct device_driver *, const char *, size_t);
732:	static ssize_t description_show(struct device_driver *, char *);
379:	static ssize_t drvctl_store(struct device *, struct device_attribute *, const char *, size_t);
373:	static ssize_t extra_show(struct device *, struct device_attribute *, char *);
433:	static ssize_t firmware_id_show(struct device *, struct device_attribute *, char *);
367:	static ssize_t id_show(struct device *, struct device_attribute *, char *);
347:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
361:	static ssize_t proto_show(struct device *, struct device_attribute *, char *);
880:	static int serio_bus_match(struct device *, struct device_driver *);
550:	static void serio_destroy_port(struct serio *);
62:	static void serio_disconnect_driver(struct serio *);
770:	static int serio_driver_probe(struct device *);
778:	static void serio_driver_remove(struct device *);
1037:	static void serio_exit(void);
196:	static void serio_handle_event(struct work_struct *);
1024:	static int serio_init(void);
237:	static int serio_queue_event(void *, struct module *, enum serio_event_type);
583:	static int serio_reconnect_port(struct serio *);
483:	static void serio_release_port(struct device *);
416:	static ssize_t serio_set_bind_mode(struct device *, struct device_attribute *, const char *, size_t);
410:	static ssize_t serio_show_bind_mode(struct device *, struct device_attribute *, char *);
341:	static ssize_t serio_show_description(struct device *, struct device_attribute *, char *);
793:	static void serio_shutdown(struct device *);
898:	static int serio_uevent(struct device *, struct kobj_uevent_env *);
355:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/input/touchscreen.c:
65:	void touchscreen_parse_properties(struct input_dev *, bool, struct touchscreen_properties *);
195:	void touchscreen_report_pos(struct input_dev *, const struct touchscreen_properties *, unsigned int, unsigned int, bool);
173:	void touchscreen_set_mt_pos(struct input_mt_pos *, const struct touchscreen_properties *, unsigned int, unsigned int);

File drivers/input/touchscreen/atmel_mxt_ts.c:
660:	static int __mxt_read_reg(struct i2c_client *, u16, u16, void *);
700:	static int __mxt_write_reg(struct i2c_client *, u16, u16, const void *);
1234:	static int mxt_acquire_irq(struct mxt_data *);
551:	static int mxt_check_bootloader(struct mxt_data *, unsigned int, bool);
2185:	static void mxt_config_cb(const struct firmware *, void *);
3385:	static void mxt_driver_exit(void);
3385:	static int mxt_driver_init(void);
1673:	static void mxt_free_object_table(struct mxt_data *);
2759:	static ssize_t mxt_fw_version_show(struct device *, struct device_attribute *, char *);
2769:	static ssize_t mxt_hw_version_show(struct device *, struct device_attribute *, char *);
2272:	static int mxt_init_t7_power_cfg(struct mxt_data *);
2191:	static int mxt_initialize(struct mxt_data *);
3073:	static void mxt_input_close(struct input_dev *);
3064:	static int mxt_input_open(struct input_dev *);
1182:	static irqreturn_t mxt_interrupt(int, void *);
2796:	static ssize_t mxt_object_show(struct device *, struct device_attribute *, char *);
3132:	static int mxt_probe(struct i2c_client *);
506:	static int mxt_probe_bootloader(struct mxt_data *, bool);
1002:	static int mxt_proc_message(struct mxt_data *, u8 *);
3287:	static void mxt_remove(struct i2c_client *);
1249:	static int mxt_soft_reset(struct mxt_data *);
1202:	static int mxt_t6_command(struct mxt_data *, u16, u8, bool);
2983:	static ssize_t mxt_update_fw_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/input/touchscreen/edt-ft5x06.c:
573:	static ssize_t crc_errors_show(struct device *, struct device_attribute *, char *);
756:	static int debugfs_mode_fops_open(struct inode *, struct file *);
727:	static int edt_ft5x06_debugfs_mode_get(void *, u64 *);
736:	static int edt_ft5x06_debugfs_mode_set(void *, u64);
759:	static ssize_t edt_ft5x06_debugfs_raw_data_read(struct file *, char *, size_t, loff_t *);
1126:	static void edt_ft5x06_disable_regulators(void *);
319:	static int edt_ft5x06_register_read(struct edt_ft5x06_ts_data *, u8);
290:	static int edt_ft5x06_register_write(struct edt_ft5x06_ts_data *, u8, u8);
387:	static ssize_t edt_ft5x06_setting_show(struct device *, struct device_attribute *, char *);
454:	static ssize_t edt_ft5x06_setting_store(struct device *, struct device_attribute *, const char *, size_t);
1511:	static void edt_ft5x06_ts_driver_exit(void);
1511:	static int edt_ft5x06_ts_driver_init(void);
197:	static irqreturn_t edt_ft5x06_ts_isr(int, void *);
842:	static void edt_ft5x06_ts_prepare_debugfs(struct edt_ft5x06_ts_data *, const char *);
1134:	static int edt_ft5x06_ts_probe(struct i2c_client *);
145:	static int edt_ft5x06_ts_readwrite(struct i2c_client *, u16, u8 *, u16, u8 *);
1349:	static void edt_ft5x06_ts_remove(struct i2c_client *);
549:	static ssize_t fw_version_show(struct device *, struct device_attribute *, char *);
561:	static ssize_t header_errors_show(struct device *, struct device_attribute *, char *);
538:	static ssize_t model_show(struct device *, struct device_attribute *, char *);

File drivers/input/touchscreen/elants_i2c.c:
1181:	static ssize_t calibrate_store(struct device *, struct device_attribute *, const char *, size_t);
298:	static int elants_i2c_calibrate(struct elants_data *);
1686:	static void elants_i2c_driver_exit(void);
1686:	static int elants_i2c_driver_init(void);
1047:	static void elants_i2c_event(struct elants_data *, u8 *, size_t);
224:	static int elants_i2c_execute_command(struct i2c_client *, const u8 *, size_t, u8 *, size_t, int, const char *);
603:	static int elants_i2c_initialize(struct elants_data *);
1065:	static irqreturn_t elants_i2c_irq(int, void *);
1362:	static void elants_i2c_power_off(void *);
1411:	static int elants_i2c_probe(struct i2c_client *);
1272:	static ssize_t elants_version_attribute_show(struct device *, struct device_attribute *, char *);
1229:	static ssize_t show_calibration_count(struct device *, struct device_attribute *, char *);
1218:	static ssize_t show_iap_mode(struct device *, struct device_attribute *, char *);
1199:	static ssize_t write_update_fw(struct device *, struct device_attribute *, const char *, size_t);

File drivers/input/touchscreen/goodix.c:
161:	int goodix_i2c_read(struct i2c_client *, u16, u8 *, int);
195:	int goodix_i2c_write(struct i2c_client *, u16, const u8 *, int);
226:	int goodix_i2c_write_u8(struct i2c_client *, u16, u8);
715:	int goodix_int_sync(struct goodix_ts_data *);
741:	int goodix_reset_no_int_sync(struct goodix_ts_data *);
619:	int goodix_send_cfg(struct goodix_ts_data *, const u8 *, int);
580:	static void goodix_calc_cfg_checksum_16(struct goodix_ts_data *);
543:	static void goodix_calc_cfg_checksum_8(struct goodix_ts_data *);
556:	static int goodix_check_cfg_16(struct goodix_ts_data *, const u8 *, int);
520:	static int goodix_check_cfg_8(struct goodix_ts_data *, const u8 *, int);
1249:	static void goodix_config_cb(const struct firmware *, void *);
1120:	static int goodix_configure_dev(struct goodix_ts_data *);
1277:	static void goodix_disable_regulators(void *);
231:	static const struct goodix_chip_data *goodix_get_chip_data(const char *);
1066:	static int goodix_read_version(struct goodix_ts_data *);
1549:	static void goodix_ts_driver_exit(void);
1549:	static int goodix_ts_driver_init(void);
498:	static irqreturn_t goodix_ts_irq_handler(int, void *);
1285:	static int goodix_ts_probe(struct i2c_client *);
424:	static void goodix_ts_release_keys(struct goodix_ts_data *);
1396:	static void goodix_ts_remove(struct i2c_client *);

File drivers/input/touchscreen/goodix_fwupload.c:
330:	int goodix_firmware_check(struct goodix_ts_data *);
348:	bool goodix_handle_fw_request(struct goodix_ts_data *);
406:	void goodix_save_bak_ref(struct goodix_ts_data *);
189:	static int goodix_firmware_upload(struct goodix_ts_data *);
156:	static int goodix_start_firmware(struct i2c_client *);

File drivers/input/vivaldi-fmap.c:
19:	ssize_t vivaldi_function_row_physmap_show(const struct vivaldi_data *, char *);

File drivers/interconnect/bulk.c:
139:	int devm_of_icc_bulk_get(struct device *, int, struct icc_bulk_data *);
112:	void icc_bulk_disable(int, const struct icc_bulk_data *);
86:	int icc_bulk_enable(int, const struct icc_bulk_data *);
46:	void icc_bulk_put(int, struct icc_bulk_data *);
62:	int icc_bulk_set_bw(int, const struct icc_bulk_data *);
15:	int of_icc_bulk_get(struct device *, int, struct icc_bulk_data *);
124:	static void devm_icc_bulk_release(struct device *, void *);

File drivers/interconnect/core.c:
402:	struct icc_path *devm_of_icc_get(struct device *, const char *);
702:	int icc_disable(struct icc_path *);
696:	int icc_enable(struct icc_path *);
724:	struct icc_path *icc_get(struct device *, const int, const int);
598:	const char *icc_get_name(struct icc_path *);
870:	int icc_link_create(struct icc_node *, const int);
916:	int icc_link_destroy(struct icc_node *, struct icc_node *);
960:	void icc_node_add(struct icc_node *, struct icc_provider *);
821:	struct icc_node *icc_node_create(int);
999:	void icc_node_del(struct icc_node *);
839:	void icc_node_destroy(int);
1015:	int icc_nodes_remove(struct icc_provider *);
1037:	int icc_provider_add(struct icc_provider *);
1061:	void icc_provider_del(struct icc_provider *);
763:	void icc_put(struct icc_path *);
622:	int icc_set_bw(struct icc_path *, u32, u32);
573:	void icc_set_tag(struct icc_path *, u32);
311:	int icc_std_aggregate(struct icc_node *, u32, u32, u32, u32 *, u32 *);
1102:	void icc_sync_state(struct device *);
533:	struct icc_path *of_icc_get(struct device *, const char *);
437:	struct icc_path *of_icc_get_by_index(struct device *, int);
356:	struct icc_node_data *of_icc_get_from_provider(struct of_phandle_args *);
331:	struct icc_node *of_icc_xlate_onecell(struct of_phandle_args *, void *);
397:	static void devm_icc_release(struct device *, void *);
144:	static int icc_graph_open(struct inode *, struct file *);
99:	static int icc_graph_show(struct seq_file *, void *);
1130:	static int icc_init(void);
790:	static struct icc_node *icc_node_create_nolock(int);
80:	static int icc_summary_open(struct inode *, struct file *);
43:	static int icc_summary_show(struct seq_file *, void *);
1082:	static int of_count_icc_providers(struct device_node *);
177:	static struct icc_path *path_find(struct device *, struct icc_node *, struct icc_node *);

File drivers/iommu/arm/arm-smmu-v3/arm-smmu-v3.c:
1794:	int arm_smmu_atc_inv_domain(struct arm_smmu_domain *, int, unsigned long, size_t);
1197:	bool arm_smmu_free_asid(struct arm_smmu_ctx_desc *);
945:	void arm_smmu_tlb_inv_asid(struct arm_smmu_device *, u16);
1954:	void arm_smmu_tlb_inv_range_asid(unsigned long, size_t, int, size_t, bool, struct arm_smmu_domain *);
1038:	int arm_smmu_write_ctx_desc(struct arm_smmu_domain *, int, struct arm_smmu_ctx_desc *);
1866:	static void __arm_smmu_tlb_inv_range(struct arm_smmu_cmdq_ent *, unsigned long, size_t, size_t, struct arm_smmu_domain *);
2399:	static int arm_smmu_attach_dev(struct iommu_domain *, struct device *);
1993:	static bool arm_smmu_capable(struct device *, enum iommu_cap);
235:	static int arm_smmu_cmdq_build_cmd(u64 *, struct arm_smmu_cmdq_ent *);
732:	static int arm_smmu_cmdq_issue_cmdlist(struct arm_smmu_device *, u64 *, int, bool);
1704:	static irqreturn_t arm_smmu_combined_irq_handler(int, void *);
1693:	static irqreturn_t arm_smmu_combined_irq_thread(int, void *);
2823:	static int arm_smmu_def_domain_type(struct device *);
2380:	static void arm_smmu_detach_dev(struct arm_smmu_master *);
2790:	static int arm_smmu_dev_disable_feature(struct device *, enum iommu_dev_features);
2763:	static int arm_smmu_dev_enable_feature(struct device *, enum iommu_dev_features);
3270:	static int arm_smmu_device_disable(struct arm_smmu_device *);
2710:	static struct iommu_group *arm_smmu_device_group(struct device *);
3740:	static int arm_smmu_device_probe(struct platform_device *);
3847:	static int arm_smmu_device_remove(struct platform_device *);
3281:	static int arm_smmu_device_reset(struct arm_smmu_device *, bool);
3859:	static void arm_smmu_device_shutdown(struct platform_device *);
2008:	static struct iommu_domain *arm_smmu_domain_alloc(unsigned int);
2082:	static int arm_smmu_domain_finalise_s1(struct arm_smmu_domain *, struct arm_smmu_master *, struct io_pgtable_cfg *);
2141:	static int arm_smmu_domain_finalise_s2(struct arm_smmu_domain *, struct arm_smmu_master *, struct io_pgtable_cfg *);
2056:	static void arm_smmu_domain_free(struct iommu_domain *);
3888:	static void arm_smmu_driver_exit(void);
3888:	static int arm_smmu_driver_init(void);
2727:	static int arm_smmu_enable_nesting(struct iommu_domain *);
1545:	static irqreturn_t arm_smmu_evtq_thread(int, void *);
2491:	static void arm_smmu_flush_iotlb_all(struct iommu_domain *);
1166:	static void arm_smmu_free_cd_tables(struct arm_smmu_domain *);
3125:	static void arm_smmu_free_msis(void *);
1647:	static irqreturn_t arm_smmu_gerror_handler(int, void *);
2747:	static void arm_smmu_get_resv_regions(struct device *, struct list_head *);
2874:	static int arm_smmu_init_one_queue(struct arm_smmu_device *, struct arm_smmu_queue *, void *, unsigned long, unsigned long, size_t, const char *);
2544:	static int arm_smmu_init_sid_strtab(struct arm_smmu_device *, u32);
2260:	static void arm_smmu_install_ste_for_dev(struct arm_smmu_master *);
2499:	static void arm_smmu_iotlb_sync(struct iommu_domain *, struct iommu_iotlb_gather *);
2513:	static phys_addr_t arm_smmu_iova_to_phys(struct iommu_domain *, dma_addr_t);
2466:	static int arm_smmu_map_pages(struct iommu_domain *, unsigned long, phys_addr_t, size_t, size_t, int, gfp_t, size_t *);
2742:	static int arm_smmu_of_xlate(struct device *, struct of_phandle_args *);
906:	static int arm_smmu_page_response(struct device *, struct iommu_fault_event *, struct iommu_page_response *);
1623:	static irqreturn_t arm_smmu_priq_thread(int, void *);
2638:	static struct iommu_device *arm_smmu_probe_device(struct device *);
2698:	static void arm_smmu_release_device(struct device *);
2835:	static void arm_smmu_remove_dev_pasid(struct device *, ioasid_t);
3710:	static void arm_smmu_rmr_install_bypass_ste(struct arm_smmu_device *);
956:	static void arm_smmu_sync_cd(struct arm_smmu_domain *, int, bool);
1843:	static void arm_smmu_tlb_inv_context(void *);
1970:	static void arm_smmu_tlb_inv_page_nosync(struct iommu_iotlb_gather *, unsigned long, size_t, void *);
1980:	static void arm_smmu_tlb_inv_walk(unsigned long, size_t, size_t, void *);
2478:	static size_t arm_smmu_unmap_pages(struct iommu_domain *, unsigned long, size_t, size_t, struct iommu_iotlb_gather *);
3104:	static int arm_smmu_update_gbpa(struct arm_smmu_device *, u32, u32);
3131:	static void arm_smmu_write_msi_msg(struct msi_desc *, struct msi_msg *);

File drivers/iommu/arm/arm-smmu/arm-smmu-impl.c:
110:	int arm_mmu500_reset(struct arm_smmu_device *);
194:	struct arm_smmu_device *arm_smmu_impl_init(struct arm_smmu_device *);
28:	static u32 arm_smmu_read_ns(struct arm_smmu_device *, int, int);
36:	static void arm_smmu_write_ns(struct arm_smmu_device *, int, int, u32);
56:	static int cavium_cfg_probe(struct arm_smmu_device *);
71:	static int cavium_init_context(struct arm_smmu_domain *, struct io_pgtable_cfg *, struct device *);
170:	static int mrvl_mmu500_cfg_probe(struct arm_smmu_device *);
151:	static u64 mrvl_mmu500_readq(struct arm_smmu_device *, int, int);
160:	static void mrvl_mmu500_writeq(struct arm_smmu_device *, int, int, u64);

File drivers/iommu/arm/arm-smmu/arm-smmu-nvidia.c:
307:	struct arm_smmu_device *nvidia_smmu_impl_init(struct arm_smmu_device *);

File drivers/iommu/arm/arm-smmu/arm-smmu.c:
512:	void arm_smmu_write_context_bank(struct arm_smmu_device *, int);
194:	static void __arm_smmu_tlb_sync(struct arm_smmu_device *, int, int, int);
1113:	static int arm_smmu_attach_dev(struct iommu_domain *, struct device *);
1313:	static bool arm_smmu_capable(struct device *, enum iommu_cap);
392:	static irqreturn_t arm_smmu_context_fault(int, void *);
1549:	static int arm_smmu_def_domain_type(struct device *);
1669:	static int arm_smmu_device_cfg_probe(struct arm_smmu_device *);
1447:	static struct iommu_group *arm_smmu_device_group(struct device *);
2052:	static int arm_smmu_device_probe(struct platform_device *);
2217:	static int arm_smmu_device_remove(struct platform_device *);
1588:	static void arm_smmu_device_reset(struct arm_smmu_device *);
2194:	static void arm_smmu_device_shutdown(struct platform_device *);
854:	static struct iommu_domain *arm_smmu_domain_alloc(unsigned int);
878:	static void arm_smmu_domain_free(struct iommu_domain *);
2308:	static void arm_smmu_driver_exit(void);
2308:	static int arm_smmu_driver_init(void);
1487:	static int arm_smmu_enable_nesting(struct iommu_domain *);
1215:	static void arm_smmu_flush_iotlb_all(struct iommu_domain *);
1533:	static void arm_smmu_get_resv_regions(struct device *, struct list_head *);
422:	static irqreturn_t arm_smmu_global_fault(int, void *);
1227:	static void arm_smmu_iotlb_sync(struct iommu_domain *, struct iommu_iotlb_gather *);
1297:	static phys_addr_t arm_smmu_iova_to_phys(struct iommu_domain *, dma_addr_t);
1179:	static int arm_smmu_map_pages(struct iommu_domain *, unsigned long, phys_addr_t, size_t, size_t, int, gfp_t, size_t *);
1518:	static int arm_smmu_of_xlate(struct device *, struct of_phandle_args *);
1343:	static struct iommu_device *arm_smmu_probe_device(struct device *);
1435:	static void arm_smmu_probe_finalize(struct device *);
1417:	static void arm_smmu_release_device(struct device *);
2004:	static void arm_smmu_rmr_install_bypass_smr(struct arm_smmu_device *);
1502:	static int arm_smmu_set_pgtable_quirks(struct iommu_domain *, unsigned long);
932:	static void arm_smmu_test_smr_masks(struct arm_smmu_device *);
325:	static void arm_smmu_tlb_add_page_s1(struct iommu_iotlb_gather *, unsigned long, size_t, void *);
341:	static void arm_smmu_tlb_add_page_s2(struct iommu_iotlb_gather *, unsigned long, size_t, void *);
361:	static void arm_smmu_tlb_add_page_s2_v1(struct iommu_iotlb_gather *, unsigned long, size_t, void *);
238:	static void arm_smmu_tlb_inv_context_s1(void *);
251:	static void arm_smmu_tlb_inv_context_s2(void *);
262:	static void arm_smmu_tlb_inv_range_s1(unsigned long, size_t, size_t, void *, int);
310:	static void arm_smmu_tlb_inv_walk_s1(unsigned long, size_t, size_t, void *);
333:	static void arm_smmu_tlb_inv_walk_s2(unsigned long, size_t, size_t, void *);
349:	static void arm_smmu_tlb_inv_walk_s2_v1(unsigned long, size_t, size_t, void *);
1197:	static size_t arm_smmu_unmap_pages(struct iommu_domain *, unsigned long, size_t, size_t, struct iommu_iotlb_gather *);
921:	static void arm_smmu_write_sme(struct arm_smmu_device *, int);

File drivers/iommu/dma-iommu.c:
1674:	void iommu_dma_compose_msi_msg(struct msi_desc *, struct msi_msg *);
388:	void iommu_dma_get_resv_regions(struct device *, struct list_head *);
241:	int iommu_dma_init_fq(struct iommu_domain *);
1641:	int iommu_dma_prepare_msi(struct msi_desc *, phys_addr_t);
307:	int iommu_get_dma_cookie(struct iommu_domain *);
332:	int iommu_get_msi_cookie(struct iommu_domain *, dma_addr_t);
357:	void iommu_put_dma_cookie(struct iommu_domain *);
1572:	void iommu_setup_dma_ops(struct device *, u64, u64);
1054:	static int __finalise_sg(struct device *, struct scatterlist *, int, dma_addr_t);
786:	static struct page **__iommu_dma_alloc_noncontiguous(struct device *, size_t, struct sg_table *, gfp_t, pgprot_t, unsigned long);
1364:	static void __iommu_dma_free(struct device *, size_t, void *);
697:	static dma_addr_t __iommu_dma_map(struct device *, phys_addr_t, size_t, int, u64);
674:	static void __iommu_dma_unmap(struct device *, dma_addr_t, size_t);
154:	static void fq_flush_timeout(struct timer_list *);
1439:	static void *iommu_dma_alloc(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
879:	static struct sg_table *iommu_dma_alloc_noncontiguous(struct device *, size_t, enum dma_data_direction, gfp_t, unsigned long);
75:	static int iommu_dma_forcedac_setup(char *);
1395:	static void iommu_dma_free(struct device *, size_t, void *, dma_addr_t, unsigned long);
657:	static void iommu_dma_free_iova(struct iommu_dma_cookie *, dma_addr_t, size_t, struct iommu_iotlb_gather *);
898:	static void iommu_dma_free_noncontiguous(struct device *, size_t, struct sg_table *, enum dma_data_direction);
1532:	static unsigned long iommu_dma_get_merge_boundary(struct device *);
1505:	static int iommu_dma_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
1690:	static int iommu_dma_init(void);
974:	static dma_addr_t iommu_dma_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
1350:	static dma_addr_t iommu_dma_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
1180:	static int iommu_dma_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
1474:	static int iommu_dma_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
1539:	static size_t iommu_dma_opt_mapping_size(void);
941:	static void iommu_dma_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
957:	static void iommu_dma_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
909:	static void iommu_dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
925:	static void iommu_dma_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
1028:	static void iommu_dma_unmap_page(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
1358:	static void iommu_dma_unmap_resource(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
1300:	static void iommu_dma_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);

File drivers/iommu/io-pgtable-arm-v7s.c:
239:	static void *__arm_v7s_alloc_table(int, gfp_t, struct arm_v7s_io_pgtable *);
497:	static int __arm_v7s_map(struct arm_v7s_io_pgtable *, unsigned long, phys_addr_t, size_t, int, int, arm_v7s_iopte *, gfp_t);
666:	static size_t __arm_v7s_unmap(struct arm_v7s_io_pgtable *, struct iommu_iotlb_gather *, unsigned long, size_t, int, arm_v7s_iopte *);
783:	static struct io_pgtable *arm_v7s_alloc_pgtable(struct io_pgtable_cfg *, void *);
578:	static void arm_v7s_free_pgtable(struct io_pgtable *);
468:	static arm_v7s_iopte arm_v7s_install_table(arm_v7s_iopte *, arm_v7s_iopte *, arm_v7s_iopte, struct io_pgtable_cfg *);
760:	static phys_addr_t arm_v7s_iova_to_phys(struct io_pgtable_ops *, unsigned long);
544:	static int arm_v7s_map_pages(struct io_pgtable_ops *, unsigned long, phys_addr_t, size_t, size_t, int, gfp_t, size_t *);
738:	static size_t arm_v7s_unmap_pages(struct io_pgtable_ops *, unsigned long, size_t, size_t, struct iommu_iotlb_gather *);
233:	static arm_v7s_iopte *iopte_deref(arm_v7s_iopte, int, struct arm_v7s_io_pgtable *);

File drivers/iommu/io-pgtable-arm.c:
190:	static void *__arm_lpae_alloc_pages(size_t, gfp_t, struct io_pgtable_cfg *);
499:	static void __arm_lpae_free_pgtable(struct arm_lpae_io_pgtable *, int, arm_lpae_iopte *);
343:	static int __arm_lpae_map(struct arm_lpae_io_pgtable *, unsigned long, phys_addr_t, size_t, size_t, arm_lpae_iopte, int, arm_lpae_iopte *, gfp_t, size_t *);
598:	static size_t __arm_lpae_unmap(struct arm_lpae_io_pgtable *, struct iommu_iotlb_gather *, unsigned long, size_t, size_t, int, arm_lpae_iopte *);
1004:	static struct io_pgtable *arm_32_lpae_alloc_pgtable_s1(struct io_pgtable_cfg *, void *);
1014:	static struct io_pgtable *arm_32_lpae_alloc_pgtable_s2(struct io_pgtable_cfg *, void *);
798:	static struct io_pgtable *arm_64_lpae_alloc_pgtable_s1(struct io_pgtable_cfg *, void *);
902:	static struct io_pgtable *arm_64_lpae_alloc_pgtable_s2(struct io_pgtable_cfg *, void *);
758:	static struct arm_lpae_io_pgtable *arm_lpae_alloc_pgtable(struct io_pgtable_cfg *);
530:	static void arm_lpae_free_pgtable(struct io_pgtable *);
311:	static arm_lpae_iopte arm_lpae_install_table(arm_lpae_iopte *, arm_lpae_iopte *, arm_lpae_iopte, struct arm_lpae_io_pgtable *);
678:	static phys_addr_t arm_lpae_iova_to_phys(struct io_pgtable_ops *, unsigned long);
464:	static int arm_lpae_map_pages(struct io_pgtable_ops *, unsigned long, phys_addr_t, size_t, size_t, int, gfp_t, size_t *);
657:	static size_t arm_lpae_unmap_pages(struct io_pgtable_ops *, unsigned long, size_t, size_t, struct iommu_iotlb_gather *);
1024:	static struct io_pgtable *arm_mali_lpae_alloc_pgtable(struct io_pgtable_cfg *, void *);

File drivers/iommu/io-pgtable-dart.c:
398:	static struct io_pgtable *apple_dart_alloc_pgtable(struct io_pgtable_cfg *, void *);
439:	static void apple_dart_free_pgtable(struct io_pgtable *);
341:	static phys_addr_t dart_iova_to_phys(struct io_pgtable_ops *, unsigned long);
236:	static int dart_map_pages(struct io_pgtable_ops *, unsigned long, phys_addr_t, size_t, size_t, int, gfp_t, size_t *);
298:	static size_t dart_unmap_pages(struct io_pgtable_ops *, unsigned long, size_t, size_t, struct iommu_iotlb_gather *);

File drivers/iommu/io-pgtable.c:
37:	struct io_pgtable_ops *alloc_io_pgtable_ops(enum io_pgtable_fmt, struct io_pgtable_cfg *, void *);
67:	void free_io_pgtable_ops(struct io_pgtable_ops *);

File drivers/iommu/iommu-sva.h:
70:	static enum iommu_page_response_code iommu_sva_handle_iopf(struct iommu_fault *, void *);

File drivers/iommu/iommu-sysfs.c:
106:	int iommu_device_link(struct iommu_device *, struct device *);
54:	int iommu_device_sysfs_add(struct iommu_device *, struct device *, const struct attribute_group **, const char *, ...);
92:	void iommu_device_sysfs_remove(struct iommu_device *);
127:	void iommu_device_unlink(struct iommu_device *, struct device *);
43:	static int iommu_dev_init(void);
32:	static void release_device(struct device *);

File drivers/iommu/iommu.c:
1827:	int bus_iommu_probe(struct bus_type *);
1885:	bool device_iommu_capable(struct device *, enum iommu_cap);
1590:	struct iommu_group *fsl_mc_device_group(struct device *);
1515:	struct iommu_group *generic_device_group(struct device *);
2647:	struct iommu_resv_region *iommu_alloc_resv_region(phys_addr_t, size_t, int, enum iommu_resv_type, gfp_t);
2007:	int iommu_attach_device(struct iommu_domain *, struct device *);
3319:	int iommu_attach_device_pasid(struct iommu_domain *, struct device *, ioasid_t);
2145:	int iommu_attach_group(struct iommu_domain *, struct iommu_group *);
2681:	bool iommu_default_passthrough(void);
2035:	int iommu_deferred_attach(struct device *, struct iommu_domain *);
2053:	void iommu_detach_device(struct iommu_domain *, struct device *);
3362:	void iommu_detach_device_pasid(struct iommu_domain *, struct device *, ioasid_t);
2205:	void iommu_detach_group(struct iommu_domain *, struct iommu_group *);
2783:	int iommu_dev_disable_feature(struct device *, enum iommu_dev_features);
2767:	int iommu_dev_enable_feature(struct device *, enum iommu_dev_features);
3186:	int iommu_device_claim_dma_owner(struct device *, void *);
213:	int iommu_device_register(struct iommu_device *, const struct iommu_ops *, struct device *);
3251:	void iommu_device_release_dma_owner(struct device *);
247:	void iommu_device_unregister(struct iommu_device *);
3089:	void iommu_device_unuse_default_domain(struct device *);
3055:	int iommu_device_use_default_domain(struct device *);
1948:	struct iommu_domain *iommu_domain_alloc(struct bus_type *);
1954:	void iommu_domain_free(struct iommu_domain *);
2598:	int iommu_enable_nesting(struct iommu_domain *);
2738:	int iommu_fwspec_add_ids(struct device *, u32 *, int);
2726:	void iommu_fwspec_free(struct device *);
2702:	int iommu_fwspec_init(struct device *, struct fwnode_handle *, const struct iommu_ops *);
2094:	struct iommu_domain *iommu_get_dma_domain(struct device *);
2073:	struct iommu_domain *iommu_get_domain_for_dev(struct device *);
3390:	struct iommu_domain *iommu_get_domain_for_dev_pasid(struct device *, ioasid_t, unsigned int);
607:	int iommu_get_group_resv_regions(struct iommu_group *, struct list_head *);
2619:	void iommu_get_resv_regions(struct device *, struct list_head *);
968:	int iommu_group_add_device(struct iommu_group *, struct device *);
733:	struct iommu_group *iommu_group_alloc(void);
3156:	int iommu_group_claim_dma_owner(struct iommu_group *, void *);
1690:	struct iommu_domain *iommu_group_default_domain(struct iommu_group *);
3272:	bool iommu_group_dma_owner_claimed(struct iommu_group *);
1120:	int iommu_group_for_each_dev(struct iommu_group *, void *, int (*)(struct device *, void *));
1141:	struct iommu_group *iommu_group_get(struct device *);
790:	struct iommu_group *iommu_group_get_by_id(int);
827:	void *iommu_group_get_iommudata(struct iommu_group *);
1397:	int iommu_group_id(struct iommu_group *);
1173:	void iommu_group_put(struct iommu_group *);
1159:	struct iommu_group *iommu_group_ref_get(struct iommu_group *);
3237:	void iommu_group_release_dma_owner(struct iommu_group *);
1049:	void iommu_group_remove_device(struct device *);
843:	void iommu_group_set_iommudata(struct iommu_group *, void *, void (*)(void *));
859:	int iommu_group_set_name(struct iommu_group *, const char *);
2213:	phys_addr_t iommu_iova_to_phys(struct iommu_domain *, dma_addr_t);
2376:	int iommu_map(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int);
2384:	int iommu_map_atomic(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int);
2530:	ssize_t iommu_map_sg(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int);
2538:	ssize_t iommu_map_sg_atomic(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int);
2687:	const struct iommu_ops *iommu_ops_from_fwnode(struct fwnode_handle *);
1327:	int iommu_page_response(struct device *, struct iommu_page_response *);
1871:	bool iommu_present(struct bus_type *);
374:	int iommu_probe_device(struct device *);
2634:	void iommu_put_resv_regions(struct device *, struct list_head *);
1198:	int iommu_register_device_fault_handler(struct device *, iommu_dev_fault_handler_t, void *);
431:	void iommu_release_device(struct device *);
1283:	int iommu_report_device_fault(struct device *, struct iommu_fault_event *);
2667:	void iommu_set_default_passthrough(bool);
2674:	void iommu_set_default_translated(bool);
477:	void iommu_set_dma_strict(void);
1912:	void iommu_set_fault_handler(struct iommu_domain *, iommu_fault_handler_t, void *);
2608:	int iommu_set_pgtable_quirks(struct iommu_domain *, unsigned long);
3412:	struct iommu_domain *iommu_sva_domain_alloc(struct device *, struct mm_struct *);
2458:	size_t iommu_unmap(struct iommu_domain *, unsigned long, size_t);
2472:	size_t iommu_unmap_fast(struct iommu_domain *, unsigned long, size_t, struct iommu_iotlb_gather *);
1243:	int iommu_unregister_device_fault_handler(struct device *);
1525:	struct iommu_group *pci_device_group(struct device *);
2568:	int report_iommu_fault(struct iommu_domain *, struct device *, unsigned long, int);
1923:	static struct iommu_domain *__iommu_domain_alloc(struct bus_type *, unsigned int);
1967:	static void __iommu_group_set_core_domain(struct iommu_group *);
2303:	static int __iommu_map(struct iommu_domain *, unsigned long, phys_addr_t, size_t, int, gfp_t);
2480:	static ssize_t __iommu_map_sg(struct iommu_domain *, unsigned long, struct scatterlist *, unsigned int, int, gfp_t);
304:	static int __iommu_probe_device(struct device *, struct list_head *);
3217:	static void __iommu_release_dma_ownership(struct iommu_group *);
3127:	static int __iommu_take_dma_ownership(struct iommu_group *, void *);
2404:	static size_t __iommu_unmap(struct iommu_domain *, unsigned long, size_t, struct iommu_iotlb_gather *);
1715:	static int iommu_bus_notifier(struct notifier_block *, unsigned long, void *);
886:	static int iommu_create_device_direct_mappings(struct iommu_group *, struct device *);
467:	static int iommu_dma_setup(char *);
137:	static const char *iommu_domain_type_str(unsigned int);
1615:	static int iommu_group_alloc_default_domain(struct bus_type *, struct iommu_group *, unsigned int);
484:	static ssize_t iommu_group_attr_show(struct kobject *, struct attribute *, char *);
496:	static ssize_t iommu_group_attr_store(struct kobject *, struct attribute *, const char *, size_t);
697:	static void iommu_group_release(struct kobject *);
526:	static ssize_t iommu_group_show_name(struct iommu_group *, char *);
636:	static ssize_t iommu_group_show_resv_regions(struct iommu_group *, char *);
658:	static ssize_t iommu_group_show_type(struct iommu_group *, char *);
2942:	static ssize_t iommu_group_store_type(struct iommu_group *, const char *, size_t);
2586:	static int iommu_init(void);
449:	static int iommu_set_def_domain_type(char *);
154:	static int iommu_subsys_init(void);
1695:	static int probe_iommu_group(struct device *, void *);
197:	static int remove_iommu_group(struct device *, void *);

File drivers/iommu/iova.c:
392:	void __free_iova(struct iova_domain *, struct iova *);
314:	struct iova *alloc_iova(struct iova_domain *, unsigned long, unsigned long, bool);
439:	unsigned long alloc_iova_fast(struct iova_domain *, unsigned long, unsigned long, bool);
372:	struct iova *find_iova(struct iova_domain *, unsigned long);
411:	void free_iova(struct iova_domain *, unsigned long);
487:	void free_iova_fast(struct iova_domain *, unsigned long, unsigned long);
52:	void init_iova_domain(struct iova_domain *, unsigned long, unsigned long);
254:	int iova_cache_get(void);
286:	void iova_cache_put(void);
714:	int iova_domain_init_rcaches(struct iova_domain *);
29:	unsigned long iova_rcache_range(void);
508:	void put_iova_domain(struct iova_domain *);
577:	struct iova *reserve_iova(struct iova_domain *, unsigned long, unsigned long);
915:	static void free_cpu_cached_iovas(unsigned int, struct iova_domain *);
887:	static void free_iova_rcaches(struct iova_domain *);
34:	static int iova_cpuhp_dead(unsigned int, struct hlist_node *);
659:	static void iova_magazine_free_pfns(struct iova_magazine *, struct iova_domain *);

File drivers/iommu/of_iommu.c:
109:	const struct iommu_ops *of_iommu_configure(struct device *, struct device_node *, const u32 *);

File drivers/irqchip/irq-gic-common.c:
41:	int gic_configure_irq(unsigned int, unsigned int, void *, void (*)(void));
120:	void gic_cpu_config(void *, int, void (*)(void));
87:	void gic_dist_config(void *, int, void (*)(void));
15:	void gic_enable_of_quirks(const struct device_node *, const struct gic_quirk *, void *);
27:	void gic_enable_quirks(u32, const struct gic_quirk *, void *);

File drivers/irqchip/irq-gic-v3-its-platform-msi.c:
41:	int iort_pmsi_get_dev_id(struct device *, u32 *);
157:	static int its_pmsi_init(void);
86:	static int its_pmsi_init_one(struct fwnode_handle *, const char *);
142:	static void its_pmsi_of_init(void);
46:	static int its_pmsi_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);

File drivers/irqchip/irq-gic-v3-its.c:
5219:	int its_cpu_init(void);
5548:	int its_init(struct fwnode_handle *, struct rdists *, struct irq_domain *);
5525:	int its_lpi_memreserve_init(void);
2976:	static int allocate_lpi_tables(void);
2074:	static int free_lpi_range(u32, u32);
2196:	static bool gic_check_reserved_range(phys_addr_t, unsigned long);
3265:	static bool its_alloc_table_entry(struct its_node *, struct its_baser *, u32);
996:	static struct its_cmd_block *its_allocate_entry(struct its_node *);
2940:	static struct page *its_allocate_pending_table(gfp_t);
2177:	static struct page *its_allocate_prop_table(gfp_t);
722:	static struct its_collection *its_build_clear_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
668:	static struct its_collection *its_build_discard_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
704:	static struct its_collection *its_build_int_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
686:	static struct its_collection *its_build_inv_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
740:	static struct its_collection *its_build_invall_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
940:	static struct its_vpe *its_build_invdb_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
615:	static struct its_collection *its_build_mapc_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
594:	static struct its_collection *its_build_mapd_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
629:	static struct its_collection *its_build_mapti_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
649:	static struct its_collection *its_build_movi_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
922:	static struct its_vpe *its_build_vclear_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
904:	static struct its_vpe *its_build_vint_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
886:	static struct its_vpe *its_build_vinv_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
752:	static struct its_vpe *its_build_vinvall_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
764:	static struct its_vpe *its_build_vmapp_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
817:	static struct its_vpe *its_build_vmapti_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
840:	static struct its_vpe *its_build_vmovi_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
863:	static struct its_vpe *its_build_vmovp_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
955:	static struct its_vpe *its_build_vsgi_cmd(struct its_node *, struct its_cmd_block *, struct its_cmd_desc *);
3038:	static u64 its_clear_vpend_valid(void *, u64, u64);
4967:	static int its_compute_its_list_map(struct resource *, void *);
3183:	static void its_cpu_init_collection(struct its_node *);
3363:	static struct its_device *its_create_device(struct its_node *, u32, int, bool);
4628:	static bool its_enable_quirk_cavium_22375(void *);
4640:	static bool its_enable_quirk_cavium_23144(void *);
4701:	static bool its_enable_quirk_hip07_161600802(void *);
4649:	static bool its_enable_quirk_qdf2400_e0065(void *);
4674:	static bool its_enable_quirk_socionext_synquacer(void *);
4595:	static int its_force_quiescent(void *);
2515:	static void its_free_tables(struct its_node *);
1692:	static void its_irq_compose_msi_msg(struct irq_data *, struct msi_msg *);
3585:	static int its_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
3548:	static int its_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
3605:	static void its_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
3616:	static void its_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
1685:	static u64 its_irq_get_msi_base(struct its_device *);
4660:	static u64 its_irq_get_msi_base_pre_its(struct its_device *);
1733:	static int its_irq_retrigger(struct irq_data *);
1708:	static int its_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
1952:	static int its_irq_set_vcpu_affinity(struct irq_data *, void *);
2130:	static unsigned long *its_lpi_alloc(int, u32 *, int *);
2107:	static int its_lpi_init(u32);
4871:	static void *its_map_one(struct resource *, int *);
1512:	static void its_mask_irq(struct irq_data *);
3461:	static int its_msi_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
5303:	static int its_of_probe(struct device_node *);
5005:	static int its_probe_one(struct resource *, struct fwnode_handle *, int);
5282:	static int its_reset_one(struct resource *);
4806:	static void its_restore_enable(void);
4770:	static int its_save_disable(void);
1573:	static int its_select_cpu(struct irq_data *, const struct cpumask *);
1141:	static void its_send_single_command(struct its_node *, its_cmd_builder_t, struct its_cmd_desc *);
1154:	static void its_send_single_vcommand(struct its_node *, its_cmd_vbuilder_t, struct its_cmd_desc *);
1645:	static int its_set_affinity(struct irq_data *, const struct cpumask *, bool);
2231:	static int its_setup_lpi_prop_table(void);
4246:	static int its_sgi_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
4356:	static int its_sgi_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
4326:	static int its_sgi_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
4364:	static void its_sgi_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
4349:	static void its_sgi_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
4195:	static void its_sgi_mask_irq(struct irq_data *);
4211:	static int its_sgi_set_affinity(struct irq_data *, const struct cpumask *, bool);
4224:	static int its_sgi_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
4299:	static int its_sgi_set_vcpu_affinity(struct irq_data *, void *);
4203:	static void its_sgi_unmask_irq(struct irq_data *);
1520:	static void its_unmask_irq(struct irq_data *);
4054:	static void its_vpe_4_1_mask_irq(struct irq_data *);
4139:	static int its_vpe_4_1_set_vcpu_affinity(struct irq_data *, void *);
4060:	static void its_vpe_4_1_unmask_irq(struct irq_data *);
3725:	static void its_vpe_db_proxy_map_locked(struct its_vpe *);
4528:	static int its_vpe_irq_domain_activate(struct irq_domain *, struct irq_data *, bool);
4469:	static int its_vpe_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
4558:	static void its_vpe_irq_domain_deactivate(struct irq_domain *, struct irq_data *);
4442:	static void its_vpe_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
3958:	static void its_vpe_mask_irq(struct irq_data *);
4006:	static int its_vpe_retrigger(struct irq_data *);
3940:	static void its_vpe_send_inv(struct irq_data *);
3778:	static int its_vpe_set_affinity(struct irq_data *, const struct cpumask *, bool);
3977:	static int its_vpe_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
3900:	static int its_vpe_set_vcpu_affinity(struct irq_data *, void *);
3970:	static void its_vpe_unmask_irq(struct irq_data *);
1047:	static int its_wait_for_range_completion(struct its_node *, u64, struct its_cmd_block *);
1465:	static void lpi_update_config(struct irq_data *, u8, u8);
1394:	static void lpi_write_config(struct irq_data *, u8, u8);

File drivers/irqchip/irq-gic-v3-mbi.c:
262:	int mbi_init(struct fwnode_handle *, struct irq_domain *);
231:	static int mbi_allocate_domains(struct irq_domain *);
202:	static void mbi_compose_mbi_msg(struct irq_data *, struct msi_msg *);
84:	static int mbi_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
130:	static void mbi_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);

File drivers/irqchip/irq-gic-v3.c:
149:	static enum gic_intid_range __get_intid_range(irq_hw_number_t);
1186:	static void gic_cpu_init(void);
832:	static void gic_dist_init(void);
226:	static void gic_dist_wait_for_rwp(void);
1693:	static bool gic_enable_quirk_cavium_38539(void *);
1702:	static bool gic_enable_quirk_hip06_07(void *);
1684:	static bool gic_enable_quirk_msm8996(void *);
561:	static void gic_eoi_irq(struct irq_data *);
567:	static void gic_eoimode1_eoi_irq(struct irq_data *);
379:	static void gic_eoimode1_mask_irq(struct irq_data *);
786:	static void gic_handle_irq(struct pt_regs *);
1820:	static int gic_init_bases(void *, struct redist_region *, u32, u64, struct fwnode_handle *);
1275:	static void gic_ipi_send_mask(struct irq_data *, const struct cpumask *);
1555:	static int gic_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1576:	static void gic_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
1609:	static int gic_irq_domain_select(struct irq_domain *, struct irq_fwspec *, enum irq_domain_bus_token);
1482:	static int gic_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
438:	static int gic_irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
491:	static int gic_irq_nmi_setup(struct irq_data *);
528:	static void gic_irq_nmi_teardown(struct irq_data *);
405:	static int gic_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
614:	static int gic_irq_set_vcpu_affinity(struct irq_data *, void *);
370:	static void gic_mask_irq(struct irq_data *);
2070:	static int gic_of_init(struct device_node *, struct device_node *);
2054:	static void *gic_of_iomap(struct device_node *, int, const char *, struct resource *);
2020:	static void gic_of_setup_kvm_info(struct device_node *);
354:	static void gic_poke_irq(struct irq_data *, u32);
1923:	static void gic_populate_ppi_partitions(struct device_node *);
232:	static void gic_redist_wait_for_rwp(void);
1370:	static int gic_retrigger(struct irq_data *);
1322:	static int gic_set_affinity(struct irq_data *, const struct cpumask *, bool);
578:	static int gic_set_type(struct irq_data *, unsigned int);
1300:	static void gic_smp_init(void);
1219:	static int gic_starting_cpu(unsigned int);
394:	static void gic_unmask_irq(struct irq_data *);
1173:	static int gicv3_nolpi_cfg(char *);
1646:	static int partition_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);

File drivers/irqchip/irq-gic-v4.c:
93:	bool gic_cpuif_has_vsgi(void);
159:	int its_alloc_vcpu_irqs(struct its_vm *);
286:	int its_commit_vpe(struct its_vpe *);
223:	void its_free_vcpu_irqs(struct its_vm *);
335:	int its_get_vlpi(int, struct its_vlpi_map *);
378:	int its_init_v4(struct irq_domain *, const struct irq_domain_ops *, const struct irq_domain_ops *);
303:	int its_invall_vpe(struct its_vpe *);
236:	int its_make_vpe_non_resident(struct its_vpe *, bool);
263:	int its_make_vpe_resident(struct its_vpe *, bool, bool);
312:	int its_map_vlpi(int, struct its_vlpi_map *);
353:	int its_prop_update_vlpi(int, u8, bool);
365:	int its_prop_update_vsgi(int, u8, bool);
347:	int its_unmap_vlpi(int);

File drivers/irqchip/irq-gic.c:
411:	void gic_cascade_irq(unsigned int, unsigned int);
530:	int gic_cpu_if_down(unsigned int);
1302:	void gic_init(void *, void *);
1520:	int gic_of_init(struct device_node *, struct device_node *);
1468:	int gic_of_init_child(struct device *, struct gic_chip_data **, int);
1273:	static int __gic_init_bases(struct gic_chip_data *, struct fwnode_handle *);
490:	static int gic_cpu_init(struct gic_chip_data *);
1418:	static bool gic_enable_rmw_access(void *);
221:	static void gic_eoi_irq(struct irq_data *);
231:	static void gic_eoimode1_eoi_irq(struct irq_data *);
201:	static void gic_eoimode1_mask_irq(struct irq_data *);
418:	static u8 gic_get_cpumask(struct gic_chip_data *);
377:	static void gic_handle_cascade_irq(struct irq_desc *);
337:	static void gic_handle_irq(struct pt_regs *);
1177:	static int gic_init_bases(struct gic_chip_data *, struct fwnode_handle *);
823:	static void gic_ipi_send_mask(struct irq_data *, const struct cpumask *);
1145:	static int gic_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1057:	static int gic_irq_domain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
1090:	static int gic_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1086:	static void gic_irq_domain_unmap(struct irq_domain *, unsigned int);
271:	static int gic_irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
401:	static void gic_irq_print_chip(struct irq_data *, struct seq_file *);
245:	static int gic_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
319:	static int gic_irq_set_vcpu_affinity(struct irq_data *, void *);
196:	static void gic_mask_irq(struct irq_data *);
1442:	static int gic_of_setup(struct gic_chip_data *, struct device_node *);
1495:	static void gic_of_setup_kvm_info(struct device_node *);
332:	static int gic_retrigger(struct irq_data *);
796:	static int gic_set_affinity(struct irq_data *, const struct cpumask *, bool);
294:	static int gic_set_type(struct irq_data *, unsigned int);
859:	static void gic_smp_init(void);
853:	static int gic_starting_cpu(unsigned int);
1319:	static void gic_teardown(struct gic_chip_data *);
216:	static void gic_unmask_irq(struct irq_data *);
1334:	static int gicv2_force_probe_cfg(char *);

File drivers/irqchip/irq-partition-percpu.c:
194:	struct partition_desc *partition_create_desc(struct fwnode_handle *, struct partition_affinity *, int, int, const struct irq_domain_ops *);
235:	struct irq_domain *partition_get_domain(struct partition_desc *);
174:	int partition_translate_id(struct partition_desc *, void *);
135:	static int partition_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
162:	static void partition_domain_free(struct irq_domain *, unsigned int, unsigned int);
113:	static void partition_handle_irq(struct irq_desc *);
68:	static int partition_irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
31:	static void partition_irq_mask(struct irq_data *);
95:	static void partition_irq_print_chip(struct irq_data *, struct seq_file *);
53:	static int partition_irq_set_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool);
83:	static int partition_irq_set_type(struct irq_data *, unsigned int);
42:	static void partition_irq_unmask(struct irq_data *);

File drivers/irqchip/irq-ti-sci-inta.c:
492:	static void ti_sci_inta_ack_irq(struct irq_data *);
570:	static int ti_sci_inta_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
742:	static void ti_sci_inta_irq_domain_driver_exit(void);
742:	static int ti_sci_inta_irq_domain_driver_init(void);
551:	static void ti_sci_inta_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
647:	static int ti_sci_inta_irq_domain_probe(struct platform_device *);
145:	static void ti_sci_inta_irq_handler(struct irq_desc *);
474:	static void ti_sci_inta_mask_irq(struct irq_data *);
592:	static void ti_sci_inta_msi_set_desc(msi_alloc_info_t *, struct msi_desc *);
443:	static void ti_sci_inta_release_resources(struct irq_data *);
423:	static int ti_sci_inta_request_resources(struct irq_data *);
502:	static int ti_sci_inta_set_affinity(struct irq_data *, const struct cpumask *, bool);
517:	static int ti_sci_inta_set_type(struct irq_data *, unsigned int);
483:	static void ti_sci_inta_unmask_irq(struct irq_data *);

File drivers/irqchip/irq-ti-sci-intr.c:
194:	static int ti_sci_intr_irq_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
301:	static void ti_sci_intr_irq_domain_driver_exit(void);
301:	static int ti_sci_intr_irq_domain_driver_init(void);
108:	static void ti_sci_intr_irq_domain_free(struct irq_domain *, unsigned int, unsigned int);
224:	static int ti_sci_intr_irq_domain_probe(struct platform_device *);
57:	static int ti_sci_intr_irq_domain_translate(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);

File drivers/irqchip/irqchip.c:
29:	void irqchip_init(void);
35:	int platform_irqchip_probe(struct platform_device *);

File drivers/leds/led-class-multicolor.c:
155:	int devm_led_classdev_multicolor_register_ext(struct device *, struct led_classdev_mc *, struct led_init_data *);
192:	void devm_led_classdev_multicolor_unregister(struct device *, struct led_classdev_mc *);
119:	int led_classdev_multicolor_register_ext(struct device *, struct led_classdev_mc *, struct led_init_data *);
141:	void led_classdev_multicolor_unregister(struct led_classdev_mc *);
15:	int led_mc_calc_color_components(struct led_classdev_mc *, enum led_brightness);
181:	static int devm_led_classdev_multicolor_match(struct device *, void *, void *);
150:	static void devm_led_classdev_multicolor_release(struct device *, void *);
90:	static ssize_t multi_index_show(struct device *, struct device_attribute *, char *);
69:	static ssize_t multi_intensity_show(struct device *, struct device_attribute *, char *);
30:	static ssize_t multi_intensity_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/leds/led-class.c:
480:	int devm_led_classdev_register_ext(struct device *, struct led_classdev *, struct led_init_data *);
519:	void devm_led_classdev_unregister(struct device *, struct led_classdev *);
279:	struct led_classdev *devm_of_led_get(struct device *, int);
335:	int led_classdev_register_ext(struct device *, struct led_classdev *, struct led_init_data *);
183:	void led_classdev_resume(struct led_classdev *);
171:	void led_classdev_suspend(struct led_classdev *);
433:	void led_classdev_unregister(struct led_classdev *);
255:	void led_put(struct led_classdev *);
226:	struct led_classdev *of_led_get(struct device_node *, int);
27:	static ssize_t brightness_show(struct device *, struct device_attribute *, char *);
38:	static ssize_t brightness_store(struct device *, struct device_attribute *, const char *, size_t);
504:	static int devm_led_classdev_match(struct device *, void *, void *);
468:	static void devm_led_classdev_release(struct device *, void *);
261:	static void devm_led_release(struct device *, void *);
538:	static void leds_exit(void);
528:	static int leds_init(void);
68:	static ssize_t max_brightness_show(struct device *, struct device_attribute *, char *);

File drivers/leds/led-core.c:
197:	void led_blink_set(struct led_classdev *, unsigned long *, unsigned long *);
211:	void led_blink_set_oneshot(struct led_classdev *, unsigned long *, unsigned long *, int);
415:	int led_compose_name(struct device *, struct led_init_data *, char *);
321:	u32 *led_get_default_pattern(struct led_classdev *, unsigned int *);
189:	void led_init_core(struct led_classdev *);
481:	enum led_default_state led_init_default_state_get(struct fwnode_handle *);
241:	void led_set_brightness(struct led_classdev *, unsigned int);
268:	void led_set_brightness_nopm(struct led_classdev *, unsigned int);
280:	void led_set_brightness_nosleep(struct led_classdev *, unsigned int);
291:	int led_set_brightness_sync(struct led_classdev *, unsigned int);
232:	void led_stop_software_blink(struct led_classdev *);
347:	void led_sysfs_disable(struct led_classdev *);
356:	void led_sysfs_enable(struct led_classdev *);
305:	int led_update_brightness(struct led_classdev *);
173:	static void led_blink_setup(struct led_classdev *, unsigned long *, unsigned long *);
60:	static void led_timer_function(struct timer_list *);
117:	static void set_brightness_delayed(struct work_struct *);

File drivers/leds/led-triggers.c:
355:	int devm_led_trigger_register(struct device *, struct led_trigger *);
417:	void led_trigger_blink(struct led_trigger *, unsigned long *, unsigned long *);
425:	void led_trigger_blink_oneshot(struct led_trigger *, unsigned long *, unsigned long *, int);
380:	void led_trigger_event(struct led_trigger *, enum led_brightness);
125:	ssize_t led_trigger_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
286:	int led_trigger_register(struct led_trigger *);
434:	void led_trigger_register_simple(const char *, struct led_trigger **);
241:	void led_trigger_remove(struct led_classdev *);
271:	void led_trigger_rename_static(const char *, struct led_trigger *);
158:	int led_trigger_set(struct led_classdev *, struct led_trigger *);
249:	void led_trigger_set_default(struct led_classdev *);
326:	void led_trigger_unregister(struct led_trigger *);
458:	void led_trigger_unregister_simple(struct led_trigger *);
36:	ssize_t led_trigger_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
350:	static void devm_led_trigger_release(struct device *, void *);
94:	static int led_trigger_format(char *, size_t, struct led_classdev *);
79:	static int led_trigger_snprintf(char *, ssize_t, const char *, ...);

File drivers/leds/leds-gpio.c:
75:	static int create_gpio_led(const struct gpio_led *, struct gpio_led_data *, struct device *, struct fwnode_handle *, gpio_blink_set_t);
65:	static int gpio_blink_set(struct led_classdev *, unsigned long *, unsigned long *);
307:	static void gpio_led_driver_exit(void);
307:	static int gpio_led_driver_init(void);
239:	static int gpio_led_probe(struct platform_device *);
35:	static void gpio_led_set(struct led_classdev *, enum led_brightness);
58:	static int gpio_led_set_blocking(struct led_classdev *, enum led_brightness);
285:	static void gpio_led_shutdown(struct platform_device *);

File drivers/leds/leds-lm3692x.c:
324:	static int lm3692x_brightness_set(struct led_classdev *, enum led_brightness);
525:	static void lm3692x_driver_exit(void);
525:	static int lm3692x_driver_init(void);
296:	static int lm3692x_leds_disable(struct lm3692x_led *);
168:	static int lm3692x_leds_enable(struct lm3692x_led *);
459:	static int lm3692x_probe(struct i2c_client *, const struct i2c_device_id *);
494:	static void lm3692x_remove(struct i2c_client *);

File drivers/leds/leds-pca9532.c:
556:	static void pca9532_driver_exit(void);
556:	static int pca9532_driver_init(void);
224:	static int pca9532_event(struct input_dev *, unsigned int, unsigned int, int);
243:	static void pca9532_input_work(struct work_struct *);
507:	static int pca9532_probe(struct i2c_client *, const struct i2c_device_id *);
549:	static void pca9532_remove(struct i2c_client *);
196:	static int pca9532_set_blink(struct led_classdev *, unsigned long *, unsigned long *);
174:	static int pca9532_set_brightness(struct led_classdev *, enum led_brightness);

File drivers/leds/leds-syscon.c:
140:	static int syscon_led_driver_init(void);
56:	static int syscon_led_probe(struct platform_device *);
35:	static void syscon_led_set(struct led_classdev *, enum led_brightness);

File drivers/leds/trigger/ledtrig-cpu.c:
51:	void ledtrig_cpu(enum cpu_led_event);
131:	static int ledtrig_cpu_init(void);
103:	static void ledtrig_cpu_syscore_resume(void);
108:	static void ledtrig_cpu_syscore_shutdown(void);
97:	static int ledtrig_cpu_syscore_suspend(void);
119:	static int ledtrig_online_cpu(unsigned int);
125:	static int ledtrig_prepare_down_cpu(unsigned int);

File drivers/leds/trigger/ledtrig-default-on.c:
26:	static void defon_led_trigger_exit(void);
26:	static int defon_led_trigger_init(void);
16:	static int defon_trig_activate(struct led_classdev *);

File drivers/leds/trigger/ledtrig-heartbeat.c:
173:	static int heartbeat_panic_notifier(struct notifier_block *, unsigned long, void *);
166:	static int heartbeat_reboot_notifier(struct notifier_block *, unsigned long, void *);
128:	static int heartbeat_trig_activate(struct led_classdev *);
149:	static void heartbeat_trig_deactivate(struct led_classdev *);
200:	static void heartbeat_trig_exit(void);
188:	static int heartbeat_trig_init(void);
33:	static void led_heartbeat_function(struct timer_list *);
94:	static ssize_t led_invert_show(struct device *, struct device_attribute *, char *);
103:	static ssize_t led_invert_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/leds/trigger/ledtrig-panic.c:
59:	static long led_panic_blink(int);
44:	static int led_trigger_panic_notifier(struct notifier_block *, unsigned long, void *);
65:	static int ledtrig_panic_init(void);

File drivers/leds/trigger/ledtrig-timer.c:
43:	static ssize_t led_delay_off_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t led_delay_off_store(struct device *, struct device_attribute *, const char *, size_t);
18:	static ssize_t led_delay_on_show(struct device *, struct device_attribute *, char *);
26:	static ssize_t led_delay_on_store(struct device *, struct device_attribute *, const char *, size_t);
136:	static void timer_led_trigger_exit(void);
136:	static int timer_led_trigger_init(void);
102:	static int timer_trig_activate(struct led_classdev *);
124:	static void timer_trig_deactivate(struct led_classdev *);

File drivers/mailbox/arm_mhu.c:
171:	static void arm_mhu_driver_exit(void);
171:	static int arm_mhu_driver_init(void);
57:	static bool mhu_last_tx_done(struct mbox_chan *);
109:	static int mhu_probe(struct amba_device *, const struct amba_id *);
40:	static irqreturn_t mhu_rx_interrupt(int, void *);
65:	static int mhu_send_data(struct mbox_chan *, void *);
95:	static void mhu_shutdown(struct mbox_chan *);
75:	static int mhu_startup(struct mbox_chan *);

File drivers/mailbox/arm_mhu_db.c:
348:	static void arm_mhu_db_driver_exit(void);
348:	static int arm_mhu_db_driver_init(void);
138:	static bool mhu_db_last_tx_done(struct mbox_chan *);
124:	static irqreturn_t mhu_db_mbox_rx_handler(int, void *);
187:	static struct mbox_chan *mhu_db_mbox_xlate(struct mbox_controller *, const struct of_phandle_args *);
248:	static int mhu_db_probe(struct amba_device *, const struct amba_id *);
149:	static int mhu_db_send_data(struct mbox_chan *, void *);
166:	static void mhu_db_shutdown(struct mbox_chan *);
160:	static int mhu_db_startup(struct mbox_chan *);

File drivers/mailbox/mailbox.c:
586:	int devm_mbox_controller_register(struct device *, struct mbox_controller *);
620:	void devm_mbox_controller_unregister(struct device *, struct mbox_controller *);
158:	void mbox_chan_received_data(struct mbox_chan *, void *);
176:	void mbox_chan_txdone(struct mbox_chan *, int);
223:	bool mbox_client_peek_data(struct mbox_chan *);
197:	void mbox_client_txdone(struct mbox_chan *, int);
484:	int mbox_controller_register(struct mbox_controller *);
536:	void mbox_controller_unregister(struct mbox_controller *);
305:	int mbox_flush(struct mbox_chan *, unsigned long);
444:	void mbox_free_channel(struct mbox_chan *);
337:	struct mbox_chan *mbox_request_channel(struct mbox_client *, int);
408:	struct mbox_chan *mbox_request_channel_byname(struct mbox_client *, const char *);
256:	int mbox_send_message(struct mbox_chan *, void *);
557:	static void __devm_mbox_controller_unregister(struct device *, void *);
564:	static int devm_mbox_controller_match(struct device *, void *, void *);
53:	static void msg_submit(struct mbox_chan *);
467:	static struct mbox_chan *of_mbox_index_xlate(struct mbox_controller *, const struct of_phandle_args *);
117:	static enum hrtimer_restart txdone_hrtimer(struct hrtimer *);

File drivers/mailbox/platform_mhu.c:
180:	static void platform_mhu_driver_exit(void);
180:	static int platform_mhu_driver_init(void);
63:	static bool platform_mhu_last_tx_done(struct mbox_chan *);
115:	static int platform_mhu_probe(struct platform_device *);
46:	static irqreturn_t platform_mhu_rx_interrupt(int, void *);
71:	static int platform_mhu_send_data(struct mbox_chan *, void *);
101:	static void platform_mhu_shutdown(struct mbox_chan *);
81:	static int platform_mhu_startup(struct mbox_chan *);

File drivers/mailbox/ti-msgmgr.c:
933:	static void ti_msgmgr_driver_exit(void);
933:	static int ti_msgmgr_driver_init(void);
345:	static bool ti_msgmgr_last_tx_done(struct mbox_chan *);
567:	static struct mbox_chan *ti_msgmgr_of_xlate(struct mbox_controller *, const struct of_phandle_args *);
804:	static int ti_msgmgr_probe(struct platform_device *);
318:	static bool ti_msgmgr_queue_peek_data(struct mbox_chan *);
272:	static irqreturn_t ti_msgmgr_queue_rx_interrupt(int, void *);
631:	static int ti_msgmgr_queue_setup(int, struct device *, struct device_node *, struct ti_msgmgr_inst *, const struct ti_msgmgr_desc *, const struct ti_msgmgr_valid_queue_desc *, struct ti_queue_inst *, struct mbox_chan *);
549:	static void ti_msgmgr_queue_shutdown(struct mbox_chan *);
503:	static int ti_msgmgr_queue_startup(struct mbox_chan *);
390:	static int ti_msgmgr_send_data(struct mbox_chan *, void *);

File drivers/media/cec/core/cec-adap.c:
1720:	int __cec_s_log_addrs(struct cec_adapter *, struct cec_log_addrs *, bool);
1638:	void __cec_s_phys_addr(struct cec_adapter *, u16, bool);
2232:	int cec_adap_status(struct seq_file *, void *);
60:	void cec_fill_conn_info_from_drm(struct cec_connector_info *, const struct drm_connector *);
47:	u16 cec_get_edid_phys_addr(const u8 *, unsigned int, unsigned int *);
2189:	void cec_monitor_all_cnt_dec(struct cec_adapter *);
2176:	int cec_monitor_all_cnt_inc(struct cec_adapter *);
2217:	void cec_monitor_pin_cnt_dec(struct cec_adapter *);
2204:	int cec_monitor_pin_cnt_inc(struct cec_adapter *);
78:	void cec_queue_event_fh(struct cec_fh *, const struct cec_event *, u64);
186:	void cec_queue_pin_5v_event(struct cec_adapter *, bool, ktime_t);
150:	void cec_queue_pin_cec_event(struct cec_adapter *, bool, bool, ktime_t);
170:	void cec_queue_pin_hpd_event(struct cec_adapter *, bool, ktime_t);
1046:	void cec_received_msg_ts(struct cec_adapter *, struct cec_msg *, ktime_t);
1696:	void cec_s_conn_info(struct cec_adapter *, const struct cec_connector_info *);
1883:	int cec_s_log_addrs(struct cec_adapter *, struct cec_log_addrs *, bool);
1673:	void cec_s_phys_addr(struct cec_adapter *, u16, bool);
1684:	void cec_s_phys_addr_from_edid(struct cec_adapter *, const struct edid *);
448:	int cec_thread_func(void *);
686:	void cec_transmit_attempt_done_ts(struct cec_adapter *, u8, ktime_t);
585:	void cec_transmit_done_ts(struct cec_adapter *, u8, u8, u8, u8, u8, ktime_t);
935:	int cec_transmit_msg(struct cec_adapter *, struct cec_msg *, bool);
742:	int cec_transmit_msg_fh(struct cec_adapter *, struct cec_msg *, struct cec_fh *, bool);
1585:	static int cec_adap_enable(struct cec_adapter *);
1338:	static void cec_adap_unconfigure(struct cec_adapter *);
1559:	static void cec_claim_log_addrs(struct cec_adapter *, bool);
1255:	static int cec_config_log_addr(struct cec_adapter *, unsigned int, unsigned int);
1353:	static int cec_config_thread_func(void *);
352:	static void cec_data_cancel(struct cec_data *, u8, u8);
1945:	static int cec_feature_abort(struct cec_adapter *, struct cec_msg *);
1951:	static int cec_feature_refused(struct cec_adapter *, struct cec_msg *);
1898:	static void cec_fill_msg_report_features(struct cec_adapter *, struct cec_msg *, unsigned int);
208:	static void cec_queue_msg_fh(struct cec_fh *, const struct cec_msg *);
716:	static void cec_wait_timeout(struct work_struct *);

File drivers/media/cec/core/cec-api.c:
504:	static long cec_ioctl(struct file *, unsigned int, unsigned long);
553:	static int cec_open(struct inode *, struct file *);
34:	static __poll_t cec_poll(struct file *, struct poll_table_struct *);
628:	static int cec_release(struct inode *, struct file *);

File drivers/media/cec/core/cec-core.c:
249:	struct cec_adapter *cec_allocate_adapter(const struct cec_adap_ops *, void *, const char *, u32, u8);
412:	void cec_delete_adapter(struct cec_adapter *);
54:	int cec_get_device(struct cec_devnode *);
78:	void cec_put_device(struct cec_devnode *);
333:	int cec_register_adapter(struct cec_adapter *, struct device *);
394:	void cec_unregister_adapter(struct cec_adapter *);
458:	static void cec_devnode_exit(void);
431:	static int cec_devnode_init(void);
84:	static void cec_devnode_release(struct device *);
235:	static int cec_error_inj_open(struct inode *, struct file *);
228:	static int cec_error_inj_show(struct seq_file *, void *);
201:	static ssize_t cec_error_inj_write(struct file *, const char *, size_t, loff_t *);

File drivers/media/cec/core/cec-notifier.c:
148:	struct cec_notifier *cec_notifier_cec_adap_register(struct device *, const char *, struct cec_adapter *);
171:	void cec_notifier_cec_adap_unregister(struct cec_notifier *, struct cec_adapter *);
105:	struct cec_notifier *cec_notifier_conn_register(struct device *, const char *, const struct cec_connector_info *);
129:	void cec_notifier_conn_unregister(struct cec_notifier *);
213:	struct device *cec_notifier_parse_hdmi_phandle(struct device *);
185:	void cec_notifier_set_phys_addr(struct cec_notifier *, u16);
198:	void cec_notifier_set_phys_addr_from_edid(struct cec_notifier *, const struct edid *);
51:	static struct cec_notifier *cec_notifier_get_conn(struct device *, const char *);
97:	static void cec_notifier_put(struct cec_notifier *);

File drivers/mfd/axp20x-i2c.c:
107:	static void axp20x_i2c_driver_exit(void);
107:	static int axp20x_i2c_driver_init(void);
25:	static int axp20x_i2c_probe(struct i2c_client *);
52:	static void axp20x_i2c_remove(struct i2c_client *);

File drivers/mfd/axp20x.c:
949:	int axp20x_device_probe(struct axp20x_dev *);
1016:	void axp20x_device_remove(struct axp20x_dev *);
841:	int axp20x_match_device(struct axp20x_dev *);
829:	static void axp20x_power_off(void);

File drivers/mfd/bd9571mwv.c:
284:	static void bd9571mwv_driver_exit(void);
284:	static int bd9571mwv_driver_init(void);
207:	static int bd9571mwv_probe(struct i2c_client *);

File drivers/mfd/hi6421-pmic-core.c:
124:	static void hi6421_pmic_driver_exit(void);
124:	static int hi6421_pmic_driver_init(void);
50:	static int hi6421_pmic_probe(struct platform_device *);

File drivers/mfd/max77620.c:
704:	static int max77620_driver_init(void);
231:	static int max77620_irq_global_mask(void *);
244:	static int max77620_irq_global_unmask(void *);
488:	static void max77620_pm_power_off(void);
497:	static int max77620_probe(struct i2c_client *);

File drivers/mfd/mfd-core.c:
437:	int devm_mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
342:	int mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
49:	int mfd_cell_disable(struct platform_device *);
36:	int mfd_cell_enable(struct platform_device *);
407:	void mfd_remove_devices(struct device *);
399:	void mfd_remove_devices_late(struct device *);
415:	static void devm_mfd_dev_release(struct device *, void *);
367:	static int mfd_remove_devices_fn(struct device *, void *);

File drivers/mfd/mt6358-irq.c:
228:	int mt6358_irq_init(struct mt6397_chip *);
181:	static irqreturn_t mt6358_irq_handler(int, void *);
85:	static void pmic_irq_disable(struct irq_data *);
210:	static int pmic_irq_domain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
76:	static void pmic_irq_enable(struct irq_data *);
94:	static void pmic_irq_lock(struct irq_data *);
101:	static void pmic_irq_sync_unlock(struct irq_data *);

File drivers/mfd/mt6360-core.c:
628:	static void mt6360_driver_exit(void);
628:	static int mt6360_driver_init(void);
509:	static bool mt6360_is_readwrite_reg(struct device *, unsigned int);
534:	static int mt6360_probe(struct i2c_client *);
399:	static int mt6360_regmap_read(void *, const void *, size_t, void *, size_t);
456:	static int mt6360_regmap_write(void *, const void *, size_t);

File drivers/mfd/mt6397-core.c:
385:	static void mt6397_driver_exit(void);
385:	static int mt6397_driver_init(void);
291:	static int mt6397_probe(struct platform_device *);

File drivers/mfd/mt6397-irq.c:
160:	int mt6397_irq_init(struct mt6397_chip *);
39:	static void mt6397_irq_disable(struct irq_data *);
113:	static int mt6397_irq_domain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
48:	static void mt6397_irq_enable(struct irq_data *);
80:	static void mt6397_irq_handle_reg(struct mt6397_chip *, int, int);
20:	static void mt6397_irq_lock(struct irq_data *);
130:	static int mt6397_irq_pm_notifier(struct notifier_block *, unsigned long, void *);
27:	static void mt6397_irq_sync_unlock(struct irq_data *);
103:	static irqreturn_t mt6397_irq_thread(int, void *);

File drivers/mfd/rk808.c:
874:	static void rk808_i2c_driver_exit(void);
874:	static int rk808_i2c_driver_init(void);
30:	static bool rk808_is_volatile_reg(struct device *, unsigned int);
552:	static void rk808_pm_power_off(void);
649:	static int rk808_probe(struct i2c_client *);
800:	static void rk808_remove(struct i2c_client *);
584:	static int rk808_restart_notify(struct notifier_block *, unsigned long, void *);
58:	static bool rk817_is_volatile_reg(struct device *, unsigned int);
612:	static void rk8xx_shutdown(struct i2c_client *);

File drivers/mfd/rohm-bd718x7.c:
222:	static void bd718xx_i2c_exit(void);
214:	static int bd718xx_i2c_init(void);
129:	static int bd718xx_i2c_probe(struct i2c_client *);

File drivers/mfd/sec-core.c:
125:	static bool s2mpa01_volatile(struct device *, unsigned int);
137:	static bool s2mps11_volatile(struct device *, unsigned int);
149:	static bool s2mpu02_volatile(struct device *, unsigned int);
161:	static bool s5m8763_volatile(struct device *, unsigned int);
502:	static void sec_pmic_driver_exit(void);
502:	static int sec_pmic_driver_init(void);
308:	static int sec_pmic_probe(struct i2c_client *);
430:	static void sec_pmic_shutdown(struct i2c_client *);

File drivers/mfd/sec-irq.c:
438:	int sec_irq_init(struct sec_pmic_dev *);

File drivers/mfd/syscon.c:
176:	struct regmap *device_node_to_regmap(struct device_node *);
182:	struct regmap *syscon_node_to_regmap(struct device_node *);
191:	struct regmap *syscon_regmap_lookup_by_compatible(const char *);
207:	struct regmap *syscon_regmap_lookup_by_phandle(struct device_node *, const char *);
228:	struct regmap *syscon_regmap_lookup_by_phandle_args(struct device_node *, const char *, int, unsigned int *);
262:	struct regmap *syscon_regmap_lookup_by_phandle_optional(struct device_node *, const char *);
152:	static struct regmap *device_node_get_regmap(struct device_node *, bool);
325:	static int syscon_init(void);
275:	static int syscon_probe(struct platform_device *);

File drivers/mfd/vexpress-sysreg.c:
134:	static void vexpress_sysreg_driver_exit(void);
134:	static int vexpress_sysreg_driver_init(void);
88:	static int vexpress_sysreg_probe(struct platform_device *);

File drivers/mfd/wcd934x.c:
76:	static bool wcd934x_is_volatile_register(struct device *, unsigned int);
298:	static void wcd934x_slim_driver_exit(void);
298:	static int wcd934x_slim_driver_init(void);
212:	static int wcd934x_slim_probe(struct slim_device *);
274:	static void wcd934x_slim_remove(struct slim_device *);
196:	static int wcd934x_slim_status(struct slim_device *, enum slim_device_status);

File drivers/mfd/wm8994-core.c:
689:	static void wm8994_i2c_driver_exit(void);
689:	static int wm8994_i2c_driver_init(void);
624:	static int wm8994_i2c_probe(struct i2c_client *);
658:	static void wm8994_i2c_remove(struct i2c_client *);

File drivers/mfd/wm8994-irq.c:
255:	void wm8994_irq_exit(struct wm8994 *);
180:	int wm8994_irq_init(struct wm8994 *);
152:	static irqreturn_t wm8994_edge_irq(int, void *);
142:	static void wm8994_edge_irq_disable(struct irq_data *);
138:	static void wm8994_edge_irq_enable(struct irq_data *);
162:	static int wm8994_edge_irq_map(struct irq_domain *, unsigned int, irq_hw_number_t);

File drivers/mfd/wm8994-regmap.c:
764:	static bool wm1811_readable_register(struct device *, unsigned int);
1192:	static bool wm1811_volatile_register(struct device *, unsigned int);
1065:	static bool wm8958_readable_register(struct device *, unsigned int);
1207:	static bool wm8958_volatile_register(struct device *, unsigned int);
1011:	static bool wm8994_readable_register(struct device *, unsigned int);
1175:	static bool wm8994_volatile_register(struct device *, unsigned int);

File drivers/misc/eeprom/at24.c:
853:	static void at24_exit(void);
841:	static int at24_init(void);
584:	static int at24_probe(struct i2c_client *);
418:	static int at24_read(void *, unsigned int, void *, size_t);
143:	static void at24_read_post_vaio(unsigned int, char *, size_t);
794:	static void at24_remove(struct i2c_client *);
465:	static int at24_write(void *, unsigned int, void *, size_t);

File drivers/misc/eeprom/at25.c:
531:	static void at25_driver_exit(void);
531:	static int at25_driver_init(void);
77:	static int at25_ee_read(void *, unsigned int, void *, size_t);
198:	static int at25_ee_write(void *, unsigned int, void *, size_t);
432:	static int at25_probe(struct spi_device *);
183:	static ssize_t sernum_show(struct device *, struct device_attribute *, char *);

File drivers/misc/sram.c:
340:	static int atmel_securam_wait(void);
146:	static void sram_free_partitions(struct sram_dev *);
470:	static int sram_init(void);
378:	static int sram_probe(struct platform_device *);
25:	static ssize_t sram_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
446:	static int sram_remove(struct platform_device *);
164:	static int sram_reserve_cmp(void *, const struct list_head *, const struct list_head *);
40:	static ssize_t sram_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);

File drivers/mmc/core/block.c:
1489:	void mmc_blk_cqe_recovery(struct mmc_queue *);
2056:	void mmc_blk_mq_complete(struct request *);
2169:	void mmc_blk_mq_complete_work(struct work_struct *);
2318:	enum mmc_issued mmc_blk_mq_issue_rq(struct mmc_queue *, struct request *);
2126:	void mmc_blk_mq_recovery(struct mmc_queue *);
292:	static ssize_t force_ro_show(struct device *, struct device_attribute *, char *);
305:	static ssize_t force_ro_store(struct device *, struct device_attribute *, const char *, size_t);
2392:	static struct mmc_blk_data *mmc_blk_alloc_req(struct mmc_card *, struct device *, sector_t, bool, const char *, int, unsigned int);
794:	static int mmc_blk_alternative_gpt_sector(struct gendisk *, sector_t *);
1923:	static int mmc_blk_busy_cb(void *, bool *);
1438:	static void mmc_blk_cqe_complete_rq(struct mmc_queue *, struct request *);
1505:	static void mmc_blk_cqe_req_done(struct mmc_request *);
1302:	static void mmc_blk_data_prep(struct mmc_queue *, struct mmc_queue_req *, int, bool *, bool *);
3123:	static void mmc_blk_exit(void);
1671:	static int mmc_blk_fix_state(struct mmc_card *, struct request *);
184:	static struct mmc_blk_data *mmc_blk_get(struct gendisk *);
390:	static int mmc_blk_getgeo(struct block_device *, struct hd_geometry *);
2021:	static void mmc_blk_hsq_req_done(struct mmc_request *);
3084:	static int mmc_blk_init(void);
750:	static int mmc_blk_ioctl(struct block_device *, fmode_t, unsigned int, unsigned long);
611:	static int mmc_blk_ioctl_cmd(struct mmc_blk_data *, struct mmc_ioc_cmd *, struct mmc_rpmb_data *);
405:	static struct mmc_blk_ioc_data *mmc_blk_ioctl_copy_from_user(struct mmc_ioc_cmd *);
448:	static int mmc_blk_ioctl_copy_to_user(struct mmc_ioc_cmd *, struct mmc_blk_ioc_data *);
660:	static int mmc_blk_ioctl_multi_cmd(struct mmc_blk_data *, struct mmc_ioc_multi_cmd *, struct mmc_rpmb_data *);
1133:	static void mmc_blk_issue_discard_rq(struct mmc_queue *, struct request *);
1023:	static void mmc_blk_issue_drv_op(struct mmc_queue *, struct request *);
1090:	static void mmc_blk_issue_erase_rq(struct mmc_queue *, struct request *, int, unsigned int);
1215:	static void mmc_blk_issue_flush(struct mmc_queue *, struct request *);
1145:	static void mmc_blk_issue_secdiscard_rq(struct mmc_queue *, struct request *);
2145:	static void mmc_blk_mq_complete_prev_req(struct mmc_queue *, struct request **);
1985:	static void mmc_blk_mq_complete_rq(struct mmc_queue *, struct request *);
2101:	static void mmc_blk_mq_post_req(struct mmc_queue *, struct request *, bool);
2177:	static void mmc_blk_mq_req_done(struct mmc_request *);
1800:	static void mmc_blk_mq_rw_recovery(struct mmc_queue *, struct request *);
362:	static int mmc_blk_open(struct block_device *, fmode_t);
857:	static int mmc_blk_part_switch(struct mmc_card *, unsigned int);
2950:	static int mmc_blk_probe(struct mmc_card *);
219:	static void mmc_blk_put(struct mmc_blk_data *);
1692:	static void mmc_blk_read_single(struct mmc_queue *, struct request *);
380:	static void mmc_blk_release(struct gendisk *, fmode_t);
3005:	static void mmc_blk_remove(struct mmc_card *);
2766:	static void mmc_blk_remove_parts(struct mmc_card *, struct mmc_blk_data *);
2638:	static void mmc_blk_rpmb_device_release(struct device *);
1589:	static void mmc_blk_rw_rq_prep(struct mmc_queue_req *, struct mmc_card *, int, struct mmc_queue *);
2259:	static int mmc_blk_rw_wait(struct mmc_queue *, struct request **);
3039:	static void mmc_blk_shutdown(struct mmc_card *);
2812:	static int mmc_dbg_card_status_fops_open(struct inode *, struct file *);
2789:	static int mmc_dbg_card_status_get(void *, u64 *);
332:	static umode_t mmc_disk_attrs_is_visible(struct kobject *, struct attribute *, int);
2818:	static int mmc_ext_csd_open(struct inode *, struct file *);
2868:	static ssize_t mmc_ext_csd_read(struct file *, char *, size_t, loff_t *);
2877:	static int mmc_ext_csd_release(struct inode *, struct file *);
2604:	static int mmc_rpmb_chrdev_open(struct inode *, struct file *);
2616:	static int mmc_rpmb_chrdev_release(struct inode *, struct file *);
2571:	static long mmc_rpmb_ioctl(struct file *, unsigned int, unsigned long);
224:	static ssize_t power_ro_lock_show(struct device *, struct device_attribute *, char *);
244:	static ssize_t power_ro_lock_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/mmc/core/bus.c:
298:	int mmc_add_card(struct mmc_card *);
275:	struct mmc_card *mmc_alloc_card(struct mmc_host *, struct device_type *);
227:	int mmc_register_bus(void);
241:	int mmc_register_driver(struct mmc_driver *);
380:	void mmc_remove_card(struct mmc_card *);
232:	void mmc_unregister_bus(void);
253:	void mmc_unregister_driver(struct mmc_driver *);
126:	static int mmc_bus_probe(struct device *);
134:	static void mmc_bus_remove(struct device *);
142:	static void mmc_bus_shutdown(struct device *);
58:	static int mmc_bus_uevent(struct device *, struct kobj_uevent_env *);
261:	static void mmc_release_card(struct device *);
31:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/mmc/core/card.h:
166:	static void add_limit_rate_quirk(struct mmc_card *, int);
156:	static void add_quirk(struct mmc_card *, int);
193:	static void add_quirk_mmc(struct mmc_card *, int);
209:	static void add_quirk_sd(struct mmc_card *, int);
172:	static void wl1251_quirk(struct mmc_card *, int);

File drivers/mmc/core/core.c:
779:	int __mmc_claim_host(struct mmc_host *, struct mmc_ctx *, atomic_t *);
2287:	void __mmc_stop_host(struct mmc_host *);
2100:	int _mmc_detect_card_removed(struct mmc_host *);
1408:	void _mmc_detect_change(struct mmc_host *, unsigned long, bool);
1395:	void mmc_attach_bus(struct mmc_host *, const struct mmc_bus_ops *);
1950:	unsigned int mmc_calc_max_discard(struct mmc_card *);
1831:	int mmc_can_discard(struct mmc_card *);
1814:	int mmc_can_erase(struct mmc_card *);
1843:	int mmc_can_sanitize(struct mmc_card *);
1852:	int mmc_can_secure_erase_trim(struct mmc_card *);
1822:	int mmc_can_trim(struct mmc_card *);
2167:	int mmc_card_alternative_gpt_sector(struct mmc_card *, sector_t *);
1978:	bool mmc_card_is_blockaddr(struct mmc_card *);
119:	void mmc_command_done(struct mmc_host *, struct mmc_request *);
515:	void mmc_cqe_post_req(struct mmc_host *, struct mmc_request *);
534:	int mmc_cqe_recovery(struct mmc_host *);
481:	void mmc_cqe_request_done(struct mmc_host *, struct mmc_request *);
431:	int mmc_cqe_start_req(struct mmc_host *, struct mmc_request *);
1403:	void mmc_detach_bus(struct mmc_host *);
2129:	int mmc_detect_card_removed(struct mmc_host *);
1432:	void mmc_detect_change(struct mmc_host *, unsigned long);
1754:	int mmc_erase(struct mmc_card *, unsigned int, unsigned int, unsigned int);
1861:	int mmc_erase_group_aligned(struct mmc_card *, unsigned int, unsigned int);
920:	int mmc_execute_tuning(struct mmc_card *);
856:	void mmc_get_card(struct mmc_card *, struct mmc_ctx *);
1177:	int mmc_host_set_uhs_voltage(struct mmc_host *);
2018:	int mmc_hw_reset(struct mmc_card *);
1438:	void mmc_init_erase(struct mmc_card *);
584:	bool mmc_is_req_done(struct mmc_host *, struct mmc_request *);
1090:	struct device_node *mmc_of_find_child_device(struct mmc_host *, unsigned int);
1383:	void mmc_power_cycle(struct mmc_host *, u32);
1361:	void mmc_power_off(struct mmc_host *);
1327:	void mmc_power_up(struct mmc_host *, u32);
867:	void mmc_put_card(struct mmc_card *, struct mmc_ctx *);
827:	void mmc_release_host(struct mmc_host *);
139:	void mmc_request_done(struct mmc_host *, struct mmc_request *);
2202:	void mmc_rescan(struct work_struct *);
1283:	int mmc_select_drive_strength(struct mmc_card *, unsigned int, int, int *);
1110:	u32 mmc_select_voltage(struct mmc_host *, u32);
1984:	int mmc_set_blocklen(struct mmc_card *, unsigned int);
957:	void mmc_set_bus_mode(struct mmc_host *, unsigned int);
966:	void mmc_set_bus_width(struct mmc_host *, unsigned int);
899:	void mmc_set_chip_select(struct mmc_host *, int);
909:	void mmc_set_clock(struct mmc_host *, unsigned int);
648:	void mmc_set_data_timeout(struct mmc_data *, const struct mmc_card *);
1277:	void mmc_set_driver_type(struct mmc_host *, unsigned int);
1166:	void mmc_set_initial_signal_voltage(struct mmc_host *);
975:	void mmc_set_initial_state(struct mmc_host *);
1150:	int mmc_set_signal_voltage(struct mmc_host *, int);
1268:	void mmc_set_timing(struct mmc_host *, unsigned int);
1200:	int mmc_set_uhs_voltage(struct mmc_host *, u32);
2272:	void mmc_start_host(struct mmc_host *);
335:	int mmc_start_request(struct mmc_host *, struct mmc_request *);
2298:	void mmc_stop_host(struct mmc_host *);
2032:	int mmc_sw_reset(struct mmc_card *);
1054:	u32 mmc_vddrange_to_ocrmask(int, int);
621:	int mmc_wait_for_cmd(struct mmc_host *, struct mmc_command *, int);
602:	void mmc_wait_for_req(struct mmc_host *, struct mmc_request *);
397:	void mmc_wait_for_req_done(struct mmc_host *, struct mmc_request *);
216:	static void __mmc_start_request(struct mmc_host *, struct mmc_request *);
1872:	static unsigned int mmc_do_calc_max_discard(struct mmc_card *, unsigned int);
1596:	static int mmc_do_erase(struct mmc_card *, unsigned int, unsigned int, unsigned int);
1586:	static unsigned int mmc_erase_timeout(struct mmc_card *, unsigned int, unsigned int);
2345:	static void mmc_exit(void);
2320:	static int mmc_init(void);
298:	static int mmc_mrq_prep(struct mmc_host *, struct mmc_request *);
361:	static void mmc_wait_done(struct mmc_request *);

File drivers/mmc/core/core.h:
63:	static void mmc_delay(unsigned int);

File drivers/mmc/core/debugfs.c:
333:	void mmc_add_card_debugfs(struct mmc_card *);
301:	void mmc_add_host_debugfs(struct mmc_host *);
347:	void mmc_remove_card_debugfs(struct mmc_card *);
328:	void mmc_remove_host_debugfs(struct mmc_host *);
223:	static int mmc_clock_fops_open(struct inode *, struct file *);
199:	static int mmc_clock_opt_get(void *, u64 *);
208:	static int mmc_clock_opt_set(void *, u64);
226:	static int mmc_err_state_get(void *, u64 *);
245:	static int mmc_err_state_open(struct inode *, struct file *);
278:	static int mmc_err_stats_open(struct inode *, struct file *);
247:	static int mmc_err_stats_show(struct seq_file *, void *);
283:	static ssize_t mmc_err_stats_write(struct file *, const char *, size_t, loff_t *);
197:	static int mmc_ios_open(struct inode *, struct file *);
34:	static int mmc_ios_show(struct seq_file *, void *);

File drivers/mmc/core/host.c:
618:	int mmc_add_host(struct mmc_host *);
522:	struct mmc_host *mmc_alloc_host(int, struct device *);
667:	void mmc_free_host(struct mmc_host *);
276:	int mmc_of_parse(struct mmc_host *);
238:	void mmc_of_parse_clk_phase(struct mmc_host *, struct mmc_clk_phase_map *);
448:	int mmc_of_parse_voltage(struct mmc_host *, u32 *);
98:	int mmc_register_host_class(void);
648:	void mmc_remove_host(struct mmc_host *);
179:	int mmc_retune(struct mmc_host *);
149:	void mmc_retune_disable(struct mmc_host *);
112:	void mmc_retune_enable(struct mmc_host *);
163:	void mmc_retune_hold(struct mmc_host *);
124:	void mmc_retune_pause(struct mmc_host *);
170:	void mmc_retune_release(struct mmc_host *);
157:	void mmc_retune_timer_stop(struct mmc_host *);
134:	void mmc_retune_unpause(struct mmc_host *);
103:	void mmc_unregister_host_class(void);
74:	static void mmc_host_classdev_release(struct device *);
83:	static int mmc_host_classdev_shutdown(struct device *);
216:	static void mmc_retune_timer(struct timer_list *);

File drivers/mmc/core/mmc.c:
2282:	int mmc_attach_mmc(struct mmc_host *);
1257:	int mmc_hs200_to_hs400(struct mmc_card *);
1262:	int mmc_hs400_to_hs200(struct mmc_card *);
2071:	static bool _mmc_cache_enabled(struct mmc_host *);
2080:	static int _mmc_flush_cache(struct mmc_host *);
2240:	static int _mmc_hw_reset(struct mmc_host *);
2096:	static int _mmc_suspend(struct mmc_host *, bool);
2040:	static int mmc_alive(struct mmc_host *);
787:	static ssize_t mmc_cid_show(struct device *, struct device_attribute *, char *);
815:	static ssize_t mmc_cmdq_en_show(struct device *, struct device_attribute *, char *);
789:	static ssize_t mmc_csd_show(struct device *, struct device_attribute *, char *);
791:	static ssize_t mmc_date_show(struct device *, struct device_attribute *, char *);
71:	static int mmc_decode_cid(struct mmc_card *);
142:	static int mmc_decode_csd(struct mmc_card *);
2048:	static void mmc_detect(struct mmc_host *);
832:	static ssize_t mmc_dsr_show(struct device *, struct device_attribute *, char *);
806:	static ssize_t mmc_enhanced_area_offset_show(struct device *, struct device_attribute *, char *);
808:	static ssize_t mmc_enhanced_area_size_show(struct device *, struct device_attribute *, char *);
810:	static ssize_t mmc_enhanced_rpmb_supported_show(struct device *, struct device_attribute *, char *);
792:	static ssize_t mmc_erase_size_show(struct device *, struct device_attribute *, char *);
794:	static ssize_t mmc_ffu_capable_show(struct device *, struct device_attribute *, char *);
817:	static ssize_t mmc_fwrev_show(struct device *, struct device_attribute *, char *);
1576:	static int mmc_hs200_tuning(struct mmc_card *);
795:	static ssize_t mmc_hwrev_show(struct device *, struct device_attribute *, char *);
1598:	static int mmc_init_card(struct mmc_host *, u32, struct mmc_card *);
802:	static ssize_t mmc_life_time_show(struct device *, struct device_attribute *, char *);
796:	static ssize_t mmc_manfid_show(struct device *, struct device_attribute *, char *);
797:	static ssize_t mmc_name_show(struct device *, struct device_attribute *, char *);
813:	static ssize_t mmc_ocr_show(struct device *, struct device_attribute *, char *);
798:	static ssize_t mmc_oemid_show(struct device *, struct device_attribute *, char *);
801:	static ssize_t mmc_pre_eol_info_show(struct device *, struct device_attribute *, char *);
793:	static ssize_t mmc_preferred_erase_size_show(struct device *, struct device_attribute *, char *);
799:	static ssize_t mmc_prv_show(struct device *, struct device_attribute *, char *);
809:	static ssize_t mmc_raw_rpmb_size_mult_show(struct device *, struct device_attribute *, char *);
814:	static ssize_t mmc_rca_show(struct device *, struct device_attribute *, char *);
676:	static int mmc_read_ext_csd(struct mmc_card *);
812:	static ssize_t mmc_rel_sectors_show(struct device *, struct device_attribute *, char *);
2031:	static void mmc_remove(struct mmc_host *);
2191:	static int mmc_resume(struct mmc_host *);
800:	static ssize_t mmc_rev_show(struct device *, struct device_attribute *, char *);
2218:	static int mmc_runtime_resume(struct mmc_host *);
2200:	static int mmc_runtime_suspend(struct mmc_host *);
1005:	static int mmc_select_bus_width(struct mmc_card *);
1162:	static int mmc_select_hs400(struct mmc_card *);
1092:	static int mmc_select_hs_ddr(struct mmc_card *);
951:	static int mmc_select_powerclass(struct mmc_card *);
1536:	static int mmc_select_timing(struct mmc_card *);
805:	static ssize_t mmc_serial_show(struct device *, struct device_attribute *, char *);
2170:	static int mmc_shutdown(struct mmc_host *);
1946:	static int mmc_sleep_busy_cb(void *, bool *);
2132:	static int mmc_suspend(struct mmc_host *);

File drivers/mmc/core/mmc_ops.c:
502:	int __mmc_poll_for_busy(struct mmc_host *, unsigned int, unsigned int, int (*)(void *, bool *), void *);
69:	int __mmc_send_status(struct mmc_card *, u32 *, unsigned int);
594:	int __mmc_switch(struct mmc_card *, u8, u8, u8, unsigned int, unsigned char, bool, bool, unsigned int);
838:	int mmc_bus_test(struct mmc_card *, u8);
938:	int mmc_can_ext_csd(struct mmc_card *);
1029:	int mmc_cmdq_disable(struct mmc_card *);
1023:	int mmc_cmdq_enable(struct mmc_card *);
122:	int mmc_deselect_cards(struct mmc_host *);
370:	int mmc_get_ext_csd(struct mmc_card *, u8 **);
147:	int mmc_go_idle(struct mmc_host *);
544:	int mmc_poll_for_busy(struct mmc_card *, unsigned int, bool, enum mmc_busy_cmd);
558:	bool mmc_prepare_busy_cmd(struct mmc_host *, struct mmc_command *, unsigned int);
965:	void mmc_run_bkops(struct mmc_card *);
1035:	int mmc_sanitize(struct mmc_card *, unsigned int);
116:	int mmc_select_card(struct mmc_card *);
736:	int mmc_send_abort_tuning(struct mmc_host *, u32);
283:	int mmc_send_adtc_data(struct mmc_card *, struct mmc_host *, u32, u32, void *, unsigned int);
362:	int mmc_send_cid(struct mmc_host *, u32 *);
353:	int mmc_send_csd(struct mmc_card *, u32 *);
223:	int mmc_send_op_cond(struct mmc_host *, u32, u32 *);
93:	int mmc_send_status(struct mmc_card *, u32 *);
667:	int mmc_send_tuning(struct mmc_host *, u32, int *);
135:	int mmc_set_dsr(struct mmc_host *);
249:	int mmc_set_relative_addr(struct mmc_card *);
400:	int mmc_spi_read_ocr(struct mmc_host *, int, u32 *);
415:	int mmc_spi_set_crc(struct mmc_host *, int);
659:	int mmc_switch(struct mmc_card *, u8, u8, u8, unsigned int);
446:	int mmc_switch_status(struct mmc_card *, bool);
897:	static int mmc_interrupt_hpi(struct mmc_card *);
762:	static int mmc_send_bus_test(struct mmc_card *, struct mmc_host *, u8, u8);
332:	static int mmc_spi_send_cxd(struct mmc_host *, u32 *, u32);

File drivers/mmc/core/pwrseq.c:
21:	int mmc_pwrseq_alloc(struct mmc_host *);
86:	void mmc_pwrseq_free(struct mmc_host *);
62:	void mmc_pwrseq_post_power_on(struct mmc_host *);
70:	void mmc_pwrseq_power_off(struct mmc_host *);
54:	void mmc_pwrseq_pre_power_on(struct mmc_host *);
96:	int mmc_pwrseq_register(struct mmc_pwrseq *);
78:	void mmc_pwrseq_reset(struct mmc_host *);
109:	void mmc_pwrseq_unregister(struct mmc_pwrseq *);

File drivers/mmc/core/pwrseq_emmc.c:
119:	static void mmc_pwrseq_emmc_driver_exit(void);
119:	static int mmc_pwrseq_emmc_driver_init(void);
59:	static int mmc_pwrseq_emmc_probe(struct platform_device *);
93:	static int mmc_pwrseq_emmc_remove(struct platform_device *);
32:	static void mmc_pwrseq_emmc_reset(struct mmc_host *);
42:	static int mmc_pwrseq_emmc_reset_nb(struct notifier_block *, unsigned long, void *);

File drivers/mmc/core/pwrseq_simple.c:
163:	static void mmc_pwrseq_simple_driver_exit(void);
163:	static int mmc_pwrseq_simple_driver_init(void);
73:	static void mmc_pwrseq_simple_post_power_on(struct mmc_host *);
83:	static void mmc_pwrseq_simple_power_off(struct mmc_host *);
61:	static void mmc_pwrseq_simple_pre_power_on(struct mmc_host *);
111:	static int mmc_pwrseq_simple_probe(struct platform_device *);
145:	static int mmc_pwrseq_simple_remove(struct platform_device *);

File drivers/mmc/core/queue.c:
486:	void mmc_cleanup_queue(struct mmc_queue *);
32:	void mmc_cqe_check_busy(struct mmc_queue *);
81:	void mmc_cqe_recovery_notifier(struct mmc_request *);
410:	struct gendisk *mmc_init_queue(struct mmc_queue *, struct mmc_card *);
60:	enum mmc_issue_type mmc_issue_type(struct mmc_queue *, struct request *);
519:	unsigned int mmc_queue_map_sg(struct mmc_queue *, struct mmc_queue_req *);
481:	void mmc_queue_resume(struct mmc_queue *);
469:	void mmc_queue_suspend(struct mmc_queue *);
218:	static void mmc_mq_exit_request(struct blk_mq_tag_set *, struct request *, unsigned int);
203:	static int mmc_mq_init_request(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
227:	static blk_status_t mmc_mq_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
136:	static void mmc_mq_recovery_handler(struct work_struct *);
120:	static enum blk_eh_timer_return mmc_mq_timed_out(struct request *);

File drivers/mmc/core/quirks.h:
181:	static void mmc_fixup_device(struct mmc_card *, const struct mmc_fixup *);

File drivers/mmc/core/regulator.c:
245:	int mmc_regulator_get_supply(struct mmc_host *);
106:	int mmc_regulator_set_ocr(struct mmc_host *, struct regulator *, unsigned short);
179:	int mmc_regulator_set_vqmmc(struct mmc_host *, struct mmc_ios *);

File drivers/mmc/core/sd.c:
1813:	int mmc_attach_sd(struct mmc_host *);
83:	void mmc_decode_cid(struct mmc_card *);
815:	int mmc_sd_get_cid(struct mmc_host *, u32, u32 *, u32 *);
889:	int mmc_sd_get_csd(struct mmc_card *);
992:	unsigned int mmc_sd_get_max_clock(struct mmc_card *);
927:	int mmc_sd_setup_card(struct mmc_host *, struct mmc_card *, bool);
383:	int mmc_sd_switch_hs(struct mmc_card *);
1685:	static int _mmc_sd_suspend(struct mmc_host *);
750:	static ssize_t info1_show(struct device *, struct device_attribute *, char *);
751:	static ssize_t info2_show(struct device *, struct device_attribute *, char *);
752:	static ssize_t info3_show(struct device *, struct device_attribute *, char *);
753:	static ssize_t info4_show(struct device *, struct device_attribute *, char *);
693:	static ssize_t mmc_cid_show(struct device *, struct device_attribute *, char *);
695:	static ssize_t mmc_csd_show(struct device *, struct device_attribute *, char *);
706:	static ssize_t mmc_date_show(struct device *, struct device_attribute *, char *);
734:	static ssize_t mmc_device_show(struct device *, struct device_attribute *, char *);
719:	static ssize_t mmc_dsr_show(struct device *, struct device_attribute *, char *);
707:	static ssize_t mmc_erase_size_show(struct device *, struct device_attribute *, char *);
709:	static ssize_t mmc_fwrev_show(struct device *, struct device_attribute *, char *);
710:	static ssize_t mmc_hwrev_show(struct device *, struct device_attribute *, char *);
711:	static ssize_t mmc_manfid_show(struct device *, struct device_attribute *, char *);
712:	static ssize_t mmc_name_show(struct device *, struct device_attribute *, char *);
715:	static ssize_t mmc_ocr_show(struct device *, struct device_attribute *, char *);
713:	static ssize_t mmc_oemid_show(struct device *, struct device_attribute *, char *);
708:	static ssize_t mmc_preferred_erase_size_show(struct device *, struct device_attribute *, char *);
716:	static ssize_t mmc_rca_show(struct device *, struct device_attribute *, char *);
735:	static ssize_t mmc_revision_show(struct device *, struct device_attribute *, char *);
697:	static ssize_t mmc_scr_show(struct device *, struct device_attribute *, char *);
1588:	static int mmc_sd_alive(struct mmc_host *);
1596:	static void mmc_sd_detect(struct mmc_host *);
1790:	static int mmc_sd_hw_reset(struct mmc_host *);
1403:	static int mmc_sd_init_card(struct mmc_host *, u32, struct mmc_card *);
623:	static int mmc_sd_init_uhs_card(struct mmc_card *);
1579:	static void mmc_sd_remove(struct mmc_host *);
1751:	static int mmc_sd_resume(struct mmc_host *);
1778:	static int mmc_sd_runtime_resume(struct mmc_host *);
1760:	static int mmc_sd_runtime_suspend(struct mmc_host *);
1713:	static int mmc_sd_suspend(struct mmc_host *);
714:	static ssize_t mmc_serial_show(struct device *, struct device_attribute *, char *);
698:	static ssize_t mmc_ssr_show(struct device *, struct device_attribute *, char *);
733:	static ssize_t mmc_vendor_show(struct device *, struct device_attribute *, char *);
1624:	static int sd_busy_poweroff_notify_cb(void *, bool *);
1307:	static bool sd_cache_enabled(struct mmc_host *);
1312:	static int sd_flush_cache(struct mmc_host *);
486:	static int sd_set_bus_speed_mode(struct mmc_card *, u8 *);
782:	static umode_t sd_std_is_visible(struct kobject *, struct attribute *, int);
1018:	static int sd_write_ext_reg(struct mmc_card *, u8, u8, u16, u8);

File drivers/mmc/core/sd_ops.c:
22:	int mmc_app_cmd(struct mmc_host *, struct mmc_card *);
327:	int mmc_app_sd_status(struct mmc_card *, void *);
256:	int mmc_app_send_scr(struct mmc_card *);
97:	int mmc_app_set_bus_width(struct mmc_card *, int);
310:	int mmc_sd_switch(struct mmc_card *, int, int, u8, u8 *);
118:	int mmc_send_app_op_cond(struct mmc_host *, u32, u32 *);
197:	int mmc_send_if_cond(struct mmc_host *, u32);
202:	int mmc_send_if_cond_pcie(struct mmc_host *, u32);
238:	int mmc_send_relative_addr(struct mmc_host *, unsigned int *);
52:	static int mmc_wait_for_app_cmd(struct mmc_host *, struct mmc_card *, struct mmc_command *);

File drivers/mmc/core/sdio.c:
1200:	int mmc_attach_sdio(struct mmc_host *);
50:	static ssize_t info1_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t info2_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t info3_show(struct device *, struct device_attribute *, char *);
53:	static ssize_t info4_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t mmc_device_show(struct device *, struct device_attribute *, char *);
34:	static ssize_t mmc_ocr_show(struct device *, struct device_attribute *, char *);
35:	static ssize_t mmc_rca_show(struct device *, struct device_attribute *, char *);
33:	static ssize_t mmc_revision_show(struct device *, struct device_attribute *, char *);
944:	static int mmc_sdio_alive(struct mmc_host *);
952:	static void mmc_sdio_detect(struct mmc_host *);
442:	static unsigned int mmc_sdio_get_max_clock(struct mmc_card *);
1145:	static int mmc_sdio_hw_reset(struct mmc_host *);
658:	static int mmc_sdio_init_card(struct mmc_host *, u32, struct mmc_card *);
591:	static int mmc_sdio_init_uhs_card(struct mmc_card *);
1002:	static int mmc_sdio_pre_suspend(struct mmc_host *);
926:	static void mmc_sdio_remove(struct mmc_host *);
1065:	static int mmc_sdio_resume(struct mmc_host *);
1126:	static int mmc_sdio_runtime_resume(struct mmc_host *);
1116:	static int mmc_sdio_runtime_suspend(struct mmc_host *);
1040:	static int mmc_sdio_suspend(struct mmc_host *);
1171:	static int mmc_sdio_sw_reset(struct mmc_host *);
31:	static ssize_t mmc_vendor_show(struct device *, struct device_attribute *, char *);
318:	static int sdio_disable_wide(struct mmc_card *);
370:	static int sdio_enable_4bit_bus(struct mmc_card *);
427:	static int sdio_enable_hs(struct mmc_card *);

File drivers/mmc/core/sdio_bus.c:
356:	int sdio_add_func(struct sdio_func *);
305:	struct sdio_func *sdio_alloc_func(struct mmc_card *);
257:	int sdio_register_bus(void);
271:	int sdio_register_driver(struct sdio_driver *);
378:	void sdio_remove_func(struct sdio_func *);
262:	void sdio_unregister_bus(void);
283:	void sdio_unregister_driver(struct sdio_driver *);
43:	static ssize_t class_show(struct device *, struct device_attribute *, char *);
45:	static ssize_t device_show(struct device *, struct device_attribute *, char *);
62:	static ssize_t info1_show(struct device *, struct device_attribute *, char *);
63:	static ssize_t info2_show(struct device *, struct device_attribute *, char *);
64:	static ssize_t info3_show(struct device *, struct device_attribute *, char *);
65:	static ssize_t info4_show(struct device *, struct device_attribute *, char *);
47:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t revision_show(struct device *, struct device_attribute *, char *);
111:	static int sdio_bus_match(struct device *, struct device_driver *);
153:	static int sdio_bus_probe(struct device *);
207:	static void sdio_bus_remove(struct device *);
123:	static int sdio_bus_uevent(struct device *, struct kobj_uevent_env *);
290:	static void sdio_release_func(struct device *);
44:	static ssize_t vendor_show(struct device *, struct device_attribute *, char *);

File drivers/mmc/core/sdio_cis.c:
383:	void sdio_free_common_cis(struct mmc_card *);
424:	void sdio_free_func_cis(struct sdio_func *);
378:	int sdio_read_common_cis(struct mmc_card *);
398:	int sdio_read_func_cis(struct sdio_func *);
222:	static int cistpl_funce(struct mmc_card *, struct sdio_func *, const unsigned char *, unsigned int);
155:	static int cistpl_funce_common(struct mmc_card *, struct sdio_func *, const unsigned char *, unsigned int);
172:	static int cistpl_funce_func(struct mmc_card *, struct sdio_func *, const unsigned char *, unsigned int);
83:	static int cistpl_manfid(struct mmc_card *, struct sdio_func *, const unsigned char *, unsigned int);
25:	static int cistpl_vers_1(struct mmc_card *, struct sdio_func *, const unsigned char *, unsigned int);
243:	static int sdio_read_cis(struct mmc_card *, struct sdio_func *);

File drivers/mmc/core/sdio_io.c:
233:	unsigned int sdio_align_size(struct sdio_func *, unsigned int);
27:	void sdio_claim_host(struct sdio_func *);
110:	int sdio_disable_func(struct sdio_func *);
59:	int sdio_enable_func(struct sdio_func *);
631:	unsigned char sdio_f0_readb(struct sdio_func *, unsigned int, int *);
667:	void sdio_f0_writeb(struct sdio_func *, unsigned char, unsigned int, int *);
700:	mmc_pm_flag_t sdio_get_host_pm_caps(struct sdio_func *);
468:	int sdio_memcpy_fromio(struct sdio_func *, void *, unsigned int, int);
485:	int sdio_memcpy_toio(struct sdio_func *, unsigned int, void *, int);
380:	u8 sdio_readb(struct sdio_func *, unsigned int, int *);
584:	u32 sdio_readl(struct sdio_func *, unsigned int, int *);
502:	int sdio_readsb(struct sdio_func *, void *, unsigned int, int);
536:	u16 sdio_readw(struct sdio_func *, unsigned int, int *);
43:	void sdio_release_host(struct sdio_func *);
759:	void sdio_retune_crc_disable(struct sdio_func *);
771:	void sdio_retune_crc_enable(struct sdio_func *);
794:	void sdio_retune_hold_now(struct sdio_func *);
810:	void sdio_retune_release(struct sdio_func *);
159:	int sdio_set_block_size(struct sdio_func *, unsigned int);
722:	int sdio_set_host_pm_flags(struct sdio_func *, mmc_pm_flag_t);
412:	void sdio_writeb(struct sdio_func *, u8, unsigned int, int *);
441:	u8 sdio_writeb_readb(struct sdio_func *, u8, unsigned int, int *);
609:	void sdio_writel(struct sdio_func *, u32, unsigned int, int *);
519:	int sdio_writesb(struct sdio_func *, unsigned int, void *, int);
561:	void sdio_writew(struct sdio_func *, u16, unsigned int, int *);
315:	static int sdio_io_rw_ext_helper(struct sdio_func *, int, unsigned int, int, u8 *, unsigned int);

File drivers/mmc/core/sdio_irq.c:
299:	int sdio_claim_irq(struct sdio_func *, sdio_irq_handler_t *);
124:	void sdio_irq_work(struct work_struct *);
342:	int sdio_release_irq(struct sdio_func *);
132:	void sdio_signal_irq(struct mmc_host *);
58:	static int process_sdio_pending_irqs(struct mmc_host *);
139:	static int sdio_irq_thread(void *);

File drivers/mmc/core/sdio_ops.c:
108:	int mmc_io_rw_direct(struct mmc_card *, int, unsigned int, unsigned int, u8, u8 *);
114:	int mmc_io_rw_extended(struct mmc_card *, int, unsigned int, unsigned int, int, u8 *, unsigned int, unsigned int);
18:	int mmc_send_io_op_cond(struct mmc_host *, u32, u32 *);
202:	int sdio_reset(struct mmc_host *);

File drivers/mmc/core/slot-gpio.c:
205:	bool mmc_can_gpio_cd(struct mmc_host *);
252:	bool mmc_can_gpio_ro(struct mmc_host *);
40:	int mmc_gpio_alloc(struct mmc_host *);
73:	int mmc_gpio_get_cd(struct mmc_host *);
62:	int mmc_gpio_get_ro(struct mmc_host *);
146:	void mmc_gpio_set_cd_isr(struct mmc_host *, irqreturn_t (*)(int, void *));
122:	int mmc_gpio_set_cd_wake(struct mmc_host *, bool);
169:	int mmc_gpiod_request_cd(struct mmc_host *, const char *, unsigned int, bool, unsigned int);
88:	void mmc_gpiod_request_cd_irq(struct mmc_host *);
222:	int mmc_gpiod_request_ro(struct mmc_host *, const char *, unsigned int, unsigned int);
28:	static irqreturn_t mmc_gpio_cd_irqt(int, void *);

File drivers/mmc/host/cqhci-core.c:
314:	int cqhci_deactivate(struct mmc_host *);
1174:	int cqhci_init(struct cqhci_host *, struct mmc_host *, bool);
812:	irqreturn_t cqhci_irq(struct mmc_host *, u32, int, int);
1133:	struct cqhci_host *cqhci_pltfm_init(struct platform_device *);
325:	int cqhci_resume(struct mmc_host *);
246:	static void __cqhci_enable(struct cqhci_host *);
925:	static bool cqhci_clear_all_tasks(struct mmc_host *, unsigned int);
397:	static void cqhci_disable(struct mmc_host *);
332:	static int cqhci_enable(struct mmc_host *, struct mmc_card *);
956:	static bool cqhci_halt(struct mmc_host *, unsigned int);
370:	static void cqhci_off(struct mmc_host *);
576:	static void cqhci_post_req(struct mmc_host *, struct mmc_request *);
1065:	static void cqhci_recovery_finish(struct mmc_host *);
992:	static void cqhci_recovery_start(struct mmc_host *);
592:	static int cqhci_request(struct mmc_host *, struct mmc_request *);
893:	static bool cqhci_timeout(struct mmc_host *, struct mmc_request *, bool *);
883:	static int cqhci_wait_for_idle(struct mmc_host *);

File drivers/mmc/host/dw_mmc-exynos.c:
279:	static void dw_mci_exynos_adjust_clock(struct dw_mci *, unsigned int);
503:	static int dw_mci_exynos_execute_tuning(struct dw_mci_slot *, u32);
585:	static u32 dw_mci_exynos_get_drto_clks(struct dw_mci *);
353:	static int dw_mci_exynos_parse_dt(struct dw_mci *);
697:	static void dw_mci_exynos_pltfm_driver_exit(void);
697:	static int dw_mci_exynos_pltfm_driver_init(void);
536:	static int dw_mci_exynos_prepare_hs400_tuning(struct dw_mci *, struct mmc_ios *);
114:	static int dw_mci_exynos_priv_init(struct dw_mci *);
642:	static int dw_mci_exynos_probe(struct platform_device *);
667:	static int dw_mci_exynos_remove(struct platform_device *);
547:	static void dw_mci_exynos_set_data_timeout(struct dw_mci *, unsigned int);
311:	static void dw_mci_exynos_set_ios(struct dw_mci *, struct mmc_ios *);

File drivers/mmc/host/dw_mmc-hi3798cv200.c:
202:	static void dw_mci_hi3798cv200_driver_exit(void);
202:	static int dw_mci_hi3798cv200_driver_init(void);
60:	static int dw_mci_hi3798cv200_execute_tuning(struct dw_mci_slot *, u32);
121:	static int dw_mci_hi3798cv200_init(struct dw_mci *);
169:	static int dw_mci_hi3798cv200_probe(struct platform_device *);
174:	static int dw_mci_hi3798cv200_remove(struct platform_device *);
26:	static void dw_mci_hi3798cv200_set_ios(struct dw_mci *, struct mmc_ios *);

File drivers/mmc/host/dw_mmc-k3.c:
367:	static int dw_mci_hi3660_execute_tuning(struct dw_mci_slot *, u32);
267:	static int dw_mci_hi3660_init(struct dw_mci *);
297:	static void dw_mci_hi3660_set_ios(struct dw_mci *, struct mmc_ios *);
401:	static int dw_mci_hi3660_switch_voltage(struct mmc_host *, struct mmc_ios *);
202:	static int dw_mci_hi6220_execute_tuning(struct dw_mci_slot *, u32);
117:	static int dw_mci_hi6220_parse_dt(struct dw_mci *);
188:	static void dw_mci_hi6220_set_ios(struct dw_mci *, struct mmc_ios *);
141:	static int dw_mci_hi6220_switch_voltage(struct mmc_host *, struct mmc_ios *);
216:	static void dw_mci_hs_set_timing(struct dw_mci *, int, int);
482:	static void dw_mci_k3_pltfm_driver_exit(void);
482:	static int dw_mci_k3_pltfm_driver_init(void);
452:	static int dw_mci_k3_probe(struct platform_device *);
102:	static void dw_mci_k3_set_ios(struct dw_mci *, struct mmc_ios *);

File drivers/mmc/host/dw_mmc-pltfm.c:
30:	int dw_mci_pltfm_register(struct platform_device *, const struct dw_mci_drv_data *);
125:	int dw_mci_pltfm_remove(struct platform_device *);
145:	static void dw_mci_pltfm_driver_exit(void);
145:	static int dw_mci_pltfm_driver_init(void);
112:	static int dw_mci_pltfm_probe(struct platform_device *);
71:	static int dw_mci_socfpga_priv_init(struct dw_mci *);

File drivers/mmc/host/dw_mmc.c:
3281:	int dw_mci_probe(struct dw_mci *);
3487:	void dw_mci_remove(struct dw_mci *);
1317:	static void __dw_mci_start_request(struct dw_mci *, struct dw_mci_slot *, struct mmc_command *);
1708:	static void dw_mci_ack_sdio_irq(struct mmc_host *);
990:	static void dw_mci_adjust_fifoth(struct dw_mci *, struct mmc_data *);
1547:	static int dw_mci_card_busy(struct mmc_host *);
3091:	static void dw_mci_cmd11_timer(struct timer_list *);
3105:	static void dw_mci_cto_timer(struct timer_list *);
192:	static bool dw_mci_ctrl_reset(struct dw_mci *, u32);
436:	static void dw_mci_dma_cleanup(struct dw_mci *);
474:	static void dw_mci_dmac_complete_dma(void *);
3160:	static void dw_mci_dto_timer(struct timer_list *);
855:	static void dw_mci_edmac_exit(struct dw_mci *);
835:	static int dw_mci_edmac_init(struct dw_mci *);
777:	static int dw_mci_edmac_start_dma(struct dw_mci *, unsigned int);
772:	static void dw_mci_edmac_stop_dma(struct dw_mci *);
3260:	static void dw_mci_enable_cd(struct dw_mci *);
1693:	static void dw_mci_enable_sdio_irq(struct mmc_host *, int);
1715:	static int dw_mci_execute_tuning(struct mmc_host *, u32);
3606:	static void dw_mci_exit(void);
949:	static int dw_mci_get_cd(struct mmc_host *);
1598:	static int dw_mci_get_ro(struct mmc_host *);
1617:	static void dw_mci_hw_reset(struct mmc_host *);
501:	static int dw_mci_idmac_init(struct dw_mci *);
724:	static int dw_mci_idmac_start_dma(struct dw_mci *, unsigned int);
457:	static void dw_mci_idmac_stop_dma(struct dw_mci *);
3600:	static int dw_mci_init(void);
169:	static void dw_mci_init_debugfs(struct dw_mci_slot *);
2916:	static int dw_mci_init_slot(struct dw_mci *);
2723:	static irqreturn_t dw_mci_interrupt(int, void *);
931:	static void dw_mci_post_req(struct mmc_host *, struct mmc_request *, int);
876:	static int dw_mci_pre_dma_transfer(struct dw_mci *, struct mmc_data *, int);
914:	static void dw_mci_pre_req(struct mmc_host *, struct mmc_request *);
1727:	static int dw_mci_prepare_hs400_tuning(struct mmc_host *, struct mmc_ios *);
2376:	static void dw_mci_pull_data16(struct dw_mci *, void *, int);
2459:	static void dw_mci_pull_data32(struct dw_mci *, void *, int);
2543:	static void dw_mci_pull_data64(struct dw_mci *, void *, int);
2326:	static void dw_mci_push_data16(struct dw_mci *, void *, int);
2409:	static void dw_mci_push_data32(struct dw_mci *, void *, int);
2492:	static void dw_mci_push_data64(struct dw_mci *, void *, int);
2592:	static void dw_mci_read_data_pio(struct dw_mci *, bool);
167:	static int dw_mci_regs_open(struct inode *, struct file *);
150:	static int dw_mci_regs_show(struct seq_file *, void *);
148:	static int dw_mci_req_open(struct inode *, struct file *);
109:	static int dw_mci_req_show(struct seq_file *, void *);
1416:	static void dw_mci_request(struct mmc_host *, struct mmc_request *);
1890:	static void dw_mci_request_end(struct dw_mci *, struct mmc_request *);
1740:	static bool dw_mci_reset(struct dw_mci *);
1999:	static void dw_mci_set_drto(struct dw_mci *);
1442:	static void dw_mci_set_ios(struct mmc_host *, struct mmc_ios *);
1204:	static void dw_mci_setup_bus(struct dw_mci_slot *, bool);
398:	static void dw_mci_start_command(struct dw_mci *, struct mmc_command *, u32);
1561:	static int dw_mci_switch_voltage(struct mmc_host *, struct mmc_ios *);
2060:	static void dw_mci_tasklet_func(struct tasklet_struct *);
213:	static void dw_mci_wait_while_busy(struct dw_mci *, u32);
235:	static void mci_send_cmd(struct dw_mci_slot *, u32, u32);

File drivers/mmc/host/mmc_spi.c:
422:	static int mmc_spi_command_send(struct mmc_spi_host *, struct mmc_request *, struct mmc_command *, int);
1259:	static irqreturn_t mmc_spi_detect_irq(int, void *);
1534:	static void mmc_spi_driver_exit(void);
1534:	static int mmc_spi_driver_init(void);
1314:	static int mmc_spi_probe(struct spi_device *);
1492:	static void mmc_spi_remove(struct spi_device *);
1021:	static void mmc_spi_request(struct mmc_host *, struct mmc_request *);
1157:	static void mmc_spi_set_ios(struct mmc_host *, struct mmc_ios *);
203:	static int mmc_spi_wait_unbusy(struct mmc_spi_host *, unsigned long);

File drivers/mmc/host/mmci.c:
840:	void mmci_dmae_error(struct mmci_host *);
857:	void mmci_dmae_finalize(struct mmci_host *, struct mmc_data *);
1017:	void mmci_dmae_get_next_data(struct mmci_host *, struct mmc_data *);
978:	int mmci_dmae_prep_data(struct mmci_host *, struct mmc_data *, bool);
815:	void mmci_dmae_release(struct mmci_host *);
737:	int mmci_dmae_setup(struct mmci_host *);
999:	int mmci_dmae_start(struct mmci_host *, unsigned int *);
1033:	void mmci_dmae_unprep_data(struct mmci_host *, struct mmc_data *, int);
368:	void mmci_write_clkreg(struct mmci_host *, u32);
379:	void mmci_write_pwrreg(struct mmci_host *, u32);
903:	static int _mmci_dmae_prep_data(struct mmci_host *, struct mmc_data *, struct dma_chan **, struct dma_async_tx_descriptor **);
336:	static int mmci_card_busy(struct mmc_host *);
1358:	static void mmci_cmd_irq(struct mmci_host *, struct mmc_command *, unsigned int);
1276:	static void mmci_data_irq(struct mmci_host *, struct mmc_data *, unsigned int);
2464:	static void mmci_driver_exit(void);
2464:	static int mmci_driver_init(void);
1855:	static int mmci_get_cd(struct mmc_host *);
647:	static u32 mmci_get_dctrl_cfg(struct mmci_host *);
1432:	static int mmci_get_rx_fifocnt(struct mmci_host *, u32, int);
1612:	static irqreturn_t mmci_irq(int, void *);
1673:	static irqreturn_t mmci_irq_thread(int, void *);
1537:	static irqreturn_t mmci_pio_irq(int, void *);
1117:	static void mmci_post_request(struct mmc_host *, struct mmc_request *, int);
1101:	static void mmci_pre_request(struct mmc_host *, struct mmc_request *);
1992:	static int mmci_probe(struct amba_device *, const struct amba_id *);
1437:	static int mmci_qcom_get_rx_fifocnt(struct mmci_host *, u32, int);
2273:	static void mmci_remove(struct amba_device *);
1697:	static void mmci_request(struct mmc_host *, struct mmc_request *);
1743:	static void mmci_set_ios(struct mmc_host *, struct mmc_ios *);
1870:	static int mmci_sig_volt_switch(struct mmc_host *, struct mmc_ios *);
1214:	static void mmci_start_command(struct mmci_host *, struct mmc_command *, u32);
1129:	static void mmci_start_data(struct mmci_host *, struct mmc_data *);
1083:	static void mmci_variant_init(struct mmci_host *);
657:	static bool ux500_busy_complete(struct mmci_host *, u32, u32);
1088:	static void ux500_variant_init(struct mmci_host *);
652:	static u32 ux500v2_get_dctrl_cfg(struct mmci_host *);
1094:	static void ux500v2_variant_init(struct mmci_host *);

File drivers/mmc/host/mmci.h:
468:	static void qcom_variant_init(struct mmci_host *);

File drivers/mmc/host/mmci_stm32_sdmmc.c:
577:	void sdmmc_variant_init(struct mmci_host *);
249:	static void mmci_sdmmc_set_clkreg(struct mmci_host *, unsigned int);
321:	static void mmci_sdmmc_set_pwrreg(struct mmci_host *, unsigned int);
385:	static bool sdmmc_busy_complete(struct mmci_host *, u32, u32);
510:	static int sdmmc_execute_tuning(struct mmc_host *, u32);
368:	static u32 sdmmc_get_dctrl_cfg(struct mmci_host *);
241:	static void sdmmc_idma_finalize(struct mmci_host *, struct mmc_data *);
135:	static int sdmmc_idma_prep_data(struct mmci_host *, struct mmc_data *, bool);
163:	static int sdmmc_idma_setup(struct mmci_host *);
194:	static int sdmmc_idma_start(struct mmci_host *, unsigned int *);
145:	static void sdmmc_idma_unprep_data(struct mmci_host *, struct mmc_data *, int);
57:	static int sdmmc_idma_validate_data(struct mmci_host *, struct mmc_data *);
532:	static int sdmmc_post_sig_volt_switch(struct mmci_host *, struct mmc_ios *);
524:	static void sdmmc_pre_sig_volt_vswitch(struct mmci_host *);

File drivers/mmc/host/mtk-sd.c:
2400:	static void msdc_ack_sdio_irq(struct mmc_host *);
1506:	static int msdc_card_busy(struct mmc_host *);
1183:	static bool msdc_cmd_done(struct msdc_host *, int, struct mmc_request *, struct mmc_command *);
2467:	static void msdc_cqe_disable(struct mmc_host *, bool);
2453:	static void msdc_cqe_enable(struct mmc_host *);
2503:	static void msdc_cqe_post_disable(struct mmc_host *);
2493:	static void msdc_cqe_pre_enable(struct mmc_host *);
1390:	static void msdc_data_xfer_done(struct msdc_host *, u32, struct mmc_request *, struct mmc_data *);
1833:	static void msdc_deinit_hw(struct msdc_host *);
2622:	static int msdc_drv_probe(struct platform_device *);
2844:	static int msdc_drv_remove(struct platform_device *);
1553:	static void msdc_enable_sdio_irq(struct mmc_host *, int);
2328:	static int msdc_execute_hs400_tuning(struct mmc_host *, struct mmc_card *);
2267:	static int msdc_execute_tuning(struct mmc_host *, u32);
841:	static void msdc_gate_clock(struct msdc_host *);
2410:	static int msdc_get_cd(struct mmc_host *);
2428:	static void msdc_hs400_enhanced_strobe(struct mmc_host *, struct mmc_ios *);
2391:	static void msdc_hw_reset(struct mmc_host *);
1851:	static void msdc_init_gpd_bd(struct msdc_host *, struct msdc_dma *);
1689:	static void msdc_init_hw(struct msdc_host *);
1626:	static irqreturn_t msdc_irq(int, void *);
2538:	static void msdc_of_property_parse(struct platform_device *, struct msdc_host *);
1332:	static void msdc_ops_request(struct mmc_host *, struct mmc_request *);
1883:	static void msdc_ops_set_ios(struct mmc_host *, struct mmc_ios *);
1478:	static int msdc_ops_switch_volt(struct mmc_host *, struct mmc_ios *);
1366:	static void msdc_post_req(struct mmc_host *, struct mmc_request *, int);
1354:	static void msdc_pre_req(struct mmc_host *, struct mmc_request *);
2310:	static int msdc_prepare_hs400_tuning(struct mmc_host *, struct mmc_ios *);
1132:	static void msdc_recheck_sdio_irq(struct msdc_host *);
1158:	static void msdc_request_done(struct msdc_host *, struct mmc_request *);
1515:	static void msdc_request_timeout(struct work_struct *);
668:	static void msdc_reset_hw(struct msdc_host *);
1286:	static void msdc_start_command(struct msdc_host *, struct mmc_request *, struct mmc_command *);
851:	static int msdc_ungate_clock(struct msdc_host *);
3020:	static void mt_msdc_driver_exit(void);
3020:	static int mt_msdc_driver_init(void);

File drivers/mmc/host/of_mmc_spi.c:
50:	struct mmc_spi_platform_data *mmc_spi_get_pdata(struct spi_device *);
86:	void mmc_spi_put_pdata(struct spi_device *);
43:	static void of_mmc_spi_exit(struct device *, void *);
34:	static int of_mmc_spi_init(struct device *, irqreturn_t (*)(int, void *), void *);

File drivers/mmc/host/sdhci-cadence.c:
473:	static void sdhci_cdns_driver_exit(void);
473:	static int sdhci_cdns_driver_init(void);
242:	static int sdhci_cdns_execute_tuning(struct sdhci_host *, u32);
177:	static unsigned int sdhci_cdns_get_timeout_clock(struct sdhci_host *);
330:	static void sdhci_cdns_hs400_enhanced_strobe(struct mmc_host *, struct mmc_ios *);
350:	static int sdhci_cdns_probe(struct platform_device *);
205:	static int sdhci_cdns_set_tune_val(struct sdhci_host *, unsigned int);
278:	static void sdhci_cdns_set_uhs_signaling(struct sdhci_host *, unsigned int);

File drivers/mmc/host/sdhci-cqhci.h:
15:	static void sdhci_and_cqhci_reset(struct sdhci_host *, u8);

File drivers/mmc/host/sdhci-of-arasan.c:
1068:	static void arasan_dt_parse_clk_phases(struct device *, struct sdhci_arasan_clk_data *);
916:	static int arasan_zynqmp_execute_tuning(struct mmc_host *, u32);
1585:	static int sdhci_arasan_add_host(struct sdhci_arasan_data *);
430:	static void sdhci_arasan_cqe_enable(struct mmc_host *);
412:	static u32 sdhci_arasan_cqhci_irq(struct sdhci_host *, u32);
1837:	static void sdhci_arasan_driver_exit(void);
1837:	static int sdhci_arasan_driver_init(void);
425:	static void sdhci_arasan_dumpregs(struct mmc_host *);
350:	static void sdhci_arasan_hs400_enhanced_strobe(struct mmc_host *, struct mmc_ios *);
1628:	static int sdhci_arasan_probe(struct platform_device *);
1804:	static int sdhci_arasan_remove(struct platform_device *);
365:	static void sdhci_arasan_reset(struct sdhci_host *, u8);
614:	static unsigned long sdhci_arasan_sampleclk_recalc_rate(struct clk_hw *, unsigned long);
587:	static unsigned long sdhci_arasan_sdcardclk_recalc_rate(struct clk_hw *, unsigned long);
1021:	static void sdhci_arasan_set_clk_delays(struct sdhci_host *);
262:	static void sdhci_arasan_set_clock(struct sdhci_host *, unsigned int);
224:	static int sdhci_arasan_syscon_write(struct sdhci_host *, const struct sdhci_arasan_soc_ctl_field *, u32);
1433:	static void sdhci_arasan_unregister_sdclk(struct device *);
380:	static int sdhci_arasan_voltage_switch(struct mmc_host *, struct mmc_ios *);
839:	static int sdhci_versal_sampleclk_set_phase(struct clk_hw *, int);
772:	static int sdhci_versal_sdcardclk_set_phase(struct clk_hw *, int);
706:	static int sdhci_zynqmp_sampleclk_set_phase(struct clk_hw *, int);
640:	static int sdhci_zynqmp_sdcardclk_set_phase(struct clk_hw *, int);

File drivers/mmc/host/sdhci-of-dwcmshc.c:
98:	static void dwcmshc_adma_write_desc(struct sdhci_host *, void **, dma_addr_t, int, unsigned int);
117:	static unsigned int dwcmshc_get_max_clock(struct sdhci_host *);
185:	static void dwcmshc_hs400_enhanced_strobe(struct mmc_host *, struct mmc_ios *);
451:	static int dwcmshc_probe(struct platform_device *);
559:	static int dwcmshc_remove(struct platform_device *);
143:	static void dwcmshc_request(struct mmc_host *, struct mmc_request *);
203:	static void dwcmshc_rk3568_set_clock(struct sdhci_host *, unsigned int);
410:	static void dwcmshc_rk35xx_postinit(struct sdhci_host *, struct dwcmshc_priv *);
150:	static void dwcmshc_set_uhs_signaling(struct sdhci_host *, unsigned int);
313:	static void rk35xx_sdhci_reset(struct sdhci_host *, u8);
644:	static void sdhci_dwcmshc_driver_exit(void);
644:	static int sdhci_dwcmshc_driver_init(void);

File drivers/mmc/host/sdhci-pltfm.c:
79:	void sdhci_get_property(struct platform_device *);
28:	unsigned int sdhci_pltfm_clk_get_max_clock(struct sdhci_host *);
165:	void sdhci_pltfm_free(struct platform_device *);
116:	struct sdhci_host *sdhci_pltfm_init(struct platform_device *, const struct sdhci_pltfm_data *, size_t);
173:	int sdhci_pltfm_register(struct platform_device *, const struct sdhci_pltfm_data *, size_t);
194:	int sdhci_pltfm_unregister(struct platform_device *);
260:	static void sdhci_pltfm_drv_exit(void);
252:	static int sdhci_pltfm_drv_init(void);

File drivers/mmc/host/sdhci-xenon-phy.c:
780:	int xenon_phy_adj(struct sdhci_host *, struct mmc_ios *);
840:	int xenon_phy_parse_params(struct device *, struct sdhci_host *);
728:	void xenon_soc_pad_ctrl(struct sdhci_host *, unsigned char);
279:	static void armada_3700_soc_pad_voltage_set(struct sdhci_host *, unsigned char);
818:	static int xenon_add_phy(struct device *, struct sdhci_host *, const char *);
320:	static int xenon_emmc_phy_enable_dll(struct sdhci_host *);

File drivers/mmc/host/sdhci-xenon.c:
711:	static void sdhci_xenon_driver_exit(void);
711:	static int sdhci_xenon_driver_init(void);
374:	static void xenon_enable_sdio_irq(struct mmc_host *, int);
355:	static int xenon_execute_tuning(struct mmc_host *, u32);
246:	static unsigned int xenon_get_max_clock(struct sdhci_host *);
345:	static void xenon_init_card(struct mmc_host *, struct mmc_card *);
489:	static int xenon_probe(struct platform_device *);
581:	static int xenon_remove(struct platform_device *);
183:	static void xenon_reset(struct sdhci_host *, u8);
132:	static void xenon_retune_setup(struct sdhci_host *);
276:	static void xenon_set_ios(struct mmc_host *, struct mmc_ios *);
222:	static void xenon_set_power(struct sdhci_host *, unsigned char, unsigned short);
196:	static void xenon_set_uhs_signaling(struct sdhci_host *, unsigned int);
311:	static int xenon_start_signal_voltage_switch(struct mmc_host *, struct mmc_ios *);
240:	static void xenon_voltage_switch(struct sdhci_host *);

File drivers/mmc/host/sdhci.c:
4794:	int __sdhci_add_host(struct sdhci_host *);
4093:	void __sdhci_read_caps(struct sdhci_host *, const u16 *, const u32 *, const u32 *);
1053:	void __sdhci_set_timeout(struct sdhci_host *, struct mmc_command *);
2770:	void sdhci_abort_tuning(struct sdhci_host *, u32);
4863:	int sdhci_add_host(struct sdhci_host *);
714:	void sdhci_adma_write_desc(struct sdhci_host *, void **, dma_addr_t, int, unsigned int);
4021:	struct sdhci_host *sdhci_alloc_host(struct device *, size_t);
1886:	u16 sdhci_calc_clk(struct sdhci_host *, unsigned int, unsigned int *);
4774:	void sdhci_cleanup_host(struct sdhci_host *);
3941:	void sdhci_cqe_disable(struct mmc_host *, bool);
3897:	void sdhci_cqe_enable(struct mmc_host *);
3963:	bool sdhci_cqe_irq(struct sdhci_host *, u32, int *, int *);
54:	void sdhci_dumpregs(struct sdhci_host *);
1978:	void sdhci_enable_clk(struct sdhci_host *, u16);
2582:	void sdhci_enable_sdio_irq(struct mmc_host *, int);
142:	void sdhci_enable_v4_mode(struct sdhci_host *);
2752:	void sdhci_end_tuning(struct sdhci_host *);
2883:	int sdhci_execute_tuning(struct mmc_host *, u32);
4938:	void sdhci_free_host(struct sdhci_host *);
2497:	int sdhci_get_cd_nogpio(struct mmc_host *);
4884:	void sdhci_remove_host(struct sdhci_host *, int);
2176:	void sdhci_request(struct mmc_host *, struct mmc_request *);
2208:	int sdhci_request_atomic(struct mmc_host *, struct mmc_request *);
202:	void sdhci_reset(struct sdhci_host *, u8);
2759:	void sdhci_reset_tuning(struct sdhci_host *);
2789:	void sdhci_send_tuning(struct sdhci_host *, u32);
2242:	void sdhci_set_bus_width(struct sdhci_host *, int);
2032:	void sdhci_set_clock(struct sdhci_host *, unsigned int);
1042:	void sdhci_set_data_timeout_irq(struct sdhci_host *, bool);
2318:	void sdhci_set_ios(struct mmc_host *, struct mmc_ios *);
2141:	void sdhci_set_power(struct sdhci_host *, unsigned char, unsigned short);
2157:	void sdhci_set_power_and_bus_voltage(struct sdhci_host *, unsigned char, unsigned short);
2061:	void sdhci_set_power_noreg(struct sdhci_host *, unsigned char, unsigned short);
2262:	void sdhci_set_uhs_signaling(struct sdhci_host *, unsigned int);
4225:	int sdhci_setup_host(struct sdhci_host *);
2609:	int sdhci_start_signal_voltage_switch(struct mmc_host *, struct mmc_ios *);
2727:	void sdhci_start_tuning(struct sdhci_host *);
1386:	void sdhci_switch_external_dma(struct sdhci_host *, bool);
1553:	static void __sdhci_finish_data(struct sdhci_host *, bool);
1521:	static void __sdhci_finish_mrq(struct sdhci_host *, struct mmc_request *);
2599:	static void sdhci_ack_sdio_irq(struct mmc_host *);
3338:	static void sdhci_adma_show_error(struct sdhci_host *);
2704:	static int sdhci_card_busy(struct mmc_host *);
3021:	static void sdhci_card_event(struct mmc_host *);
2516:	static int sdhci_check_ro(struct sdhci_host *);
3193:	static void sdhci_complete_work(struct work_struct *);
4960:	static void sdhci_drv_exit(void);
4951:	static int sdhci_drv_init(void);
2470:	static int sdhci_get_cd(struct mmc_host *);
1848:	static u16 sdhci_get_preset_value(struct sdhci_host *);
2542:	static int sdhci_get_ro(struct mmc_host *);
2561:	static void sdhci_hw_reset(struct mmc_host *);
359:	static void sdhci_init(struct sdhci_host *, int);
3514:	static irqreturn_t sdhci_irq(int, void *);
428:	static void sdhci_led_control(struct led_classdev *, enum led_brightness);
2981:	static void sdhci_post_req(struct mmc_host *, struct mmc_request *, int);
649:	static int sdhci_pre_dma_transfer(struct sdhci_host *, struct mmc_data *, int);
2993:	static void sdhci_pre_req(struct mmc_host *, struct mmc_request *);
2715:	static int sdhci_prepare_hs400_tuning(struct mmc_host *, struct mmc_ios *);
3073:	static bool sdhci_request_done(struct sdhci_host *);
1630:	static bool sdhci_send_command(struct sdhci_host *, struct mmc_command *);
1732:	static bool sdhci_send_command_retry(struct sdhci_host *, struct mmc_command *, unsigned long);
154:	static void sdhci_set_card_detection(struct sdhci_host *, bool);
3656:	static irqreturn_t sdhci_thread_irq(int, void *);
3224:	static void sdhci_timeout_data_timer(struct timer_list *);
3202:	static void sdhci_timeout_timer(struct timer_list *);

File drivers/mmc/host/sdhci_am654.c:
407:	static u32 sdhci_am654_cqhci_irq(struct sdhci_host *, u32);
886:	static void sdhci_am654_driver_exit(void);
886:	static int sdhci_am654_driver_init(void);
544:	static void sdhci_am654_dumpregs(struct mmc_host *);
391:	static int sdhci_am654_execute_tuning(struct mmc_host *, u32);
421:	static int sdhci_am654_platform_execute_tuning(struct sdhci_host *, u32);
775:	static int sdhci_am654_probe(struct platform_device *);
860:	static int sdhci_am654_remove(struct platform_device *);
376:	static void sdhci_am654_reset(struct sdhci_host *, u8);
260:	static void sdhci_am654_set_clock(struct sdhci_host *, unsigned int);
340:	static void sdhci_am654_write_b(struct sdhci_host *, u8, int);
306:	static void sdhci_j721e_4bit_set_clock(struct sdhci_host *, unsigned int);

File drivers/mmc/host/sdhci_f_sdh30.c:
258:	static void sdhci_f_sdh30_driver_exit(void);
258:	static int sdhci_f_sdh30_driver_init(void);
60:	static unsigned int sdhci_f_sdh30_get_min_clock(struct sdhci_host *);
98:	static int sdhci_f_sdh30_probe(struct platform_device *);
211:	static int sdhci_f_sdh30_remove(struct platform_device *);
65:	static void sdhci_f_sdh30_reset(struct sdhci_host *, u8);
32:	static void sdhci_f_sdh30_soft_voltage_switch(struct sdhci_host *);

File drivers/mtd/chips/cfi_cmdset_0001.c:
481:	struct mtd_info *cfi_cmdset_0001(struct map_info *, int);
2669:	static void cfi_intelext_destroy(struct mtd_info *);
2025:	static int cfi_intelext_erase_varsize(struct mtd_info *, struct erase_info *);
2212:	static int cfi_intelext_is_locked(struct mtd_info *, loff_t, uint64_t);
2164:	static int cfi_intelext_lock(struct mtd_info *, loff_t, uint64_t);
1383:	static int cfi_intelext_point(struct mtd_info *, loff_t, size_t, size_t *, void **, resource_size_t *);
1515:	static int cfi_intelext_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
2659:	static int cfi_intelext_reboot(struct notifier_block *, unsigned long, void *);
2634:	static int cfi_intelext_reset(struct mtd_info *);
2603:	static void cfi_intelext_resume(struct mtd_info *);
2508:	static int cfi_intelext_suspend(struct mtd_info *);
2031:	static void cfi_intelext_sync(struct mtd_info *);
2188:	static int cfi_intelext_unlock(struct mtd_info *, loff_t, uint64_t);
1436:	static int cfi_intelext_unpoint(struct mtd_info *, loff_t, size_t);
1924:	static int cfi_intelext_write_buffers(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1627:	static int cfi_intelext_write_words(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1872:	static int cfi_intelext_writev(struct mtd_info *, const struct kvec *, unsigned long, loff_t, size_t *);
810:	static int chip_ready(struct map_info *, struct flchip *, unsigned long, int);
1935:	static int do_erase_oneblock(struct map_info *, struct flchip *, unsigned long, int, void *);
2072:	static int do_getlockstatus_oneblock(struct map_info *, struct flchip *, unsigned long, int, void *);
1552:	static int do_write_oneword(struct map_info *, struct flchip *, unsigned long, map_word, int);
2104:	static int do_xxlock_oneblock(struct map_info *, struct flchip *, unsigned long, int, void *);
278:	static void fixup_LH28F640BF(struct mtd_info *);
211:	static void fixup_at49bv640dx_lock(struct mtd_info *);
171:	static void fixup_convert_atmel_pri(struct mtd_info *);
258:	static void fixup_st_m28w320cb(struct mtd_info *);
249:	static void fixup_st_m28w320ct(struct mtd_info *);
321:	static void fixup_unlock_powerup_lock(struct mtd_info *);
298:	static void fixup_use_point(struct mtd_info *);
307:	static void fixup_use_write_buffers(struct mtd_info *);
927:	static int get_chip(struct map_info *, struct flchip *, unsigned long, int);
1272:	static int inval_cache_and_wait_for_operation(struct map_info *, struct flchip *, unsigned long, unsigned long, int, unsigned int, unsigned int);
1023:	static void put_chip(struct map_info *, struct flchip *, unsigned long);

File drivers/mtd/chips/cfi_cmdset_0002.c:
602:	struct mtd_info *cfi_cmdset_0002(struct map_info *, int);
3099:	static void cfi_amdstd_destroy(struct mtd_info *);
2620:	static int cfi_amdstd_erase_chip(struct mtd_info *, struct erase_info *);
2613:	static int cfi_amdstd_erase_varsize(struct mtd_info *, struct erase_info *);
1600:	static int cfi_amdstd_get_fact_prot_info(struct mtd_info *, size_t, size_t *, struct otp_info *);
1607:	static int cfi_amdstd_get_user_prot_info(struct mtd_info *, size_t, size_t *, struct otp_info *);
1638:	static int cfi_amdstd_lock_user_prot_reg(struct mtd_info *, loff_t, size_t);
1482:	static int cfi_amdstd_otp_walk(struct mtd_info *, loff_t, size_t, size_t *, u_char *, otp_op_t, int);
2181:	static int cfi_amdstd_panic_wait(struct map_info *, struct flchip *, unsigned long);
2309:	static int cfi_amdstd_panic_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1237:	static int cfi_amdstd_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
1614:	static int cfi_amdstd_read_fact_prot_reg(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
1622:	static int cfi_amdstd_read_user_prot_reg(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
3088:	static int cfi_amdstd_reboot(struct notifier_block *, unsigned long, void *);
3061:	static int cfi_amdstd_reset(struct mtd_info *);
3029:	static void cfi_amdstd_resume(struct mtd_info *);
1345:	static int cfi_amdstd_secsi_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
2974:	static int cfi_amdstd_suspend(struct mtd_info *);
2912:	static void cfi_amdstd_sync(struct mtd_info *);
2097:	static int cfi_amdstd_write_buffers(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1630:	static int cfi_amdstd_write_user_prot_reg(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1817:	static int cfi_amdstd_write_words(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
2696:	static int cfi_atmel_lock(struct mtd_info *, loff_t, uint64_t);
2701:	static int cfi_atmel_unlock(struct mtd_info *, loff_t, uint64_t);
131:	static int cfi_check_err_status(struct map_info *, struct flchip *, unsigned long);
513:	static void cfi_fixup_major_minor(struct cfi_private *, struct cfi_pri_amdstd *);
2905:	static int cfi_ppb_is_locked(struct mtd_info *, loff_t, uint64_t);
2793:	static int cfi_ppb_lock(struct mtd_info *, loff_t, uint64_t);
2800:	static int cfi_ppb_unlock(struct mtd_info *, loff_t, uint64_t);
833:	static int chip_ready(struct map_info *, struct flchip *, unsigned long, map_word *);
2634:	static int do_atmel_lock(struct map_info *, struct flchip *, unsigned long, int, void *);
2669:	static int do_atmel_unlock(struct map_info *, struct flchip *, unsigned long, int, void *);
2514:	static int do_erase_oneblock(struct map_info *, struct flchip *, unsigned long, int, void *);
1418:	static int do_otp_lock(struct map_info *, struct flchip *, loff_t, size_t, u_char *, size_t);
1388:	static int do_otp_write(struct map_info *, struct flchip *, loff_t, size_t, u_char *, size_t);
2233:	static int do_panic_write_oneword(struct map_info *, struct flchip *, unsigned long, map_word);
2720:	static int do_ppb_xxlock(struct map_info *, struct flchip *, unsigned long, int, void *);
1309:	static int do_read_secsi_onechip(struct map_info *, struct flchip *, loff_t, size_t, u_char *, size_t);
1794:	static int do_write_oneword(struct map_info *, struct flchip *, unsigned long, map_word, int);
226:	static void fixup_amd_bootblock(struct mtd_info *);
292:	static void fixup_convert_atmel_pri(struct mtd_info *);
444:	static void fixup_quirks(struct mtd_info *);
418:	static void fixup_s29gl032n_sectors(struct mtd_info *);
406:	static void fixup_s29gl064n_sectors(struct mtd_info *);
430:	static void fixup_s29ns512p_sectors(struct mtd_info *);
390:	static void fixup_sst38vf640x_sectorsize(struct mtd_info *);
366:	static void fixup_sst39vf(struct mtd_info *);
377:	static void fixup_sst39vf_rev_b(struct mtd_info *);
345:	static void fixup_use_atmel_lock(struct mtd_info *);
330:	static void fixup_use_erase_chip(struct mtd_info *);
323:	static void fixup_use_secsi(struct mtd_info *);
276:	static void fixup_use_write_buffers(struct mtd_info *);
876:	static int get_chip(struct map_info *, struct flchip *, unsigned long, int);
982:	static void put_chip(struct map_info *, struct flchip *, unsigned long);

File drivers/mtd/chips/cfi_cmdset_0020.c:
113:	struct mtd_info *cfi_cmdset_0020(struct map_info *, int);
1393:	static void cfi_staa_destroy(struct mtd_info *);
890:	static int cfi_staa_erase_varsize(struct mtd_info *, struct erase_info *);
1126:	static int cfi_staa_lock(struct mtd_info *, loff_t, uint64_t);
383:	static int cfi_staa_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
1369:	static void cfi_staa_resume(struct mtd_info *);
1311:	static int cfi_staa_suspend(struct mtd_info *);
972:	static void cfi_staa_sync(struct mtd_info *);
1272:	static int cfi_staa_unlock(struct mtd_info *, loff_t, uint64_t);
606:	static int cfi_staa_write_buffers(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
663:	static int cfi_staa_writev(struct mtd_info *, const struct kvec *, unsigned long, loff_t, size_t *);

File drivers/mtd/chips/cfi_probe.c:
431:	struct mtd_info *cfi_probe(struct map_info *);
95:	static int cfi_probe_chip(struct map_info *, __u32, unsigned long *, struct cfi_private *);
452:	static void cfi_probe_exit(void);
446:	static int cfi_probe_init(void);

File drivers/mtd/chips/cfi_util.c:
67:	map_word cfi_build_cmd(u_long, struct map_info *, struct cfi_private *);
40:	uint32_t cfi_build_cmd_addr(uint32_t, struct map_info *, struct cfi_private *);
342:	void cfi_fixup(struct mtd_info *, struct cfi_fixup *);
133:	unsigned long cfi_merge_status(map_word, struct map_info *, struct cfi_private *);
286:	void cfi_qry_mode_off(uint32_t, struct map_info *, struct cfi_private *);
248:	int cfi_qry_mode_on(uint32_t, struct map_info *, struct cfi_private *);
220:	int cfi_qry_present(struct map_info *, __u32, struct cfi_private *);
299:	struct cfi_extquery *cfi_read_pri(struct map_info *, __u16, __u16, const char *);
203:	uint32_t cfi_send_gen_cmd(u_char, uint32_t, uint32_t, struct map_info *, struct cfi_private *, int, map_word *);
26:	void cfi_udelay(int);
358:	int cfi_varsize_frob(struct mtd_info *, varsize_frob_t, loff_t, size_t, void *);

File drivers/mtd/chips/chipreg.c:
55:	struct mtd_info *do_map_probe(const char *, struct map_info *);
83:	void map_destroy(struct mtd_info *);
18:	void register_mtd_chip_driver(struct mtd_chip_driver *);
25:	void unregister_mtd_chip_driver(struct mtd_chip_driver *);

File drivers/mtd/chips/fwh_lock.h:
101:	static void fixup_use_fwh_lock(struct mtd_info *);
80:	static int fwh_lock_varsize(struct mtd_info *, loff_t, uint64_t);
91:	static int fwh_unlock_varsize(struct mtd_info *, loff_t, uint64_t);
29:	static int fwh_xxlock_oneblock(struct map_info *, struct flchip *, unsigned long, int, void *);

File drivers/mtd/chips/gen_probe.c:
21:	struct mtd_info *mtd_do_chip_probe(struct map_info *, struct chip_probe *);
232:	static struct mtd_info *check_cmd_set(struct map_info *, int);

File drivers/mtd/devices/mtd_dataflash.c:
629:	static int add_dataflash_otp(struct spi_device *, char *, int, int, int, char);
951:	static void dataflash_driver_exit(void);
951:	static int dataflash_driver_init(void);
162:	static int dataflash_erase(struct mtd_info *, struct erase_info *);
854:	static int dataflash_probe(struct spi_device *);
243:	static int dataflash_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
926:	static void dataflash_remove(struct spi_device *);
307:	static int dataflash_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);

File drivers/mtd/devices/sst25l.c:
416:	static void sst25l_driver_exit(void);
416:	static int sst25l_driver_init(void);
166:	static int sst25l_erase(struct mtd_info *, struct erase_info *);
348:	static int sst25l_probe(struct spi_device *);
206:	static int sst25l_read(struct mtd_info *, loff_t, size_t, size_t *, unsigned char *);
401:	static void sst25l_remove(struct spi_device *);
249:	static int sst25l_write(struct mtd_info *, loff_t, size_t, size_t *, const unsigned char *);
91:	static int sst25l_write_enable(struct sst25l_flash *, int);

File drivers/mtd/maps/physmap-core.c:
665:	static void physmap_exit(void);
451:	static int physmap_flash_probe(struct platform_device *);
65:	static int physmap_flash_remove(struct platform_device *);
649:	static int physmap_init(void);
94:	static void physmap_set_vpp(struct map_info *, int);

File drivers/mtd/mtd_blkdevs.c:
276:	int add_mtd_blktrans_dev(struct mtd_blktrans_dev *);
411:	int del_mtd_blktrans_dev(struct mtd_blktrans_dev *);
512:	int deregister_mtd_blktrans(struct mtd_blktrans_ops *);
100:	int mtd_blktrans_cease_background(struct mtd_blktrans_dev *);
478:	int register_mtd_blktrans(struct mtd_blktrans_ops *);
39:	static void blktrans_dev_put(struct mtd_blktrans_dev *);
249:	static int blktrans_getgeo(struct block_device *, struct hd_geometry *);
462:	static void blktrans_notify_add(struct mtd_info *);
451:	static void blktrans_notify_remove(struct mtd_info *);
185:	static int blktrans_open(struct block_device *, fmode_t);
228:	static void blktrans_release(struct gendisk *, fmode_t);
531:	static void mtd_blktrans_exit(void);
166:	static blk_status_t mtd_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);

File drivers/mtd/mtdblock.c:
313:	static void mtdblock_add_mtd(struct mtd_blktrans_ops *, struct mtd_info *);
301:	static int mtdblock_flush(struct mtd_blktrans_dev *);
249:	static int mtdblock_open(struct mtd_blktrans_dev *);
226:	static int mtdblock_readsect(struct mtd_blktrans_dev *, unsigned long, char *);
278:	static void mtdblock_release(struct mtd_blktrans_dev *);
333:	static void mtdblock_remove_dev(struct mtd_blktrans_dev *);
353:	static void mtdblock_tr_exit(void);
353:	static int mtdblock_tr_init(void);
233:	static int mtdblock_writesect(struct mtd_blktrans_dev *, unsigned long, char *);
78:	static int write_cached_data(struct mtdblk_dev *);

File drivers/mtd/mtdchar.c:
1434:	void cleanup_mtdchar(void);
1419:	int init_mtdchar(void);
91:	static int mtdchar_close(struct inode *, struct file *);
39:	static loff_t mtdchar_lseek(struct file *, loff_t, int);
1377:	static int mtdchar_mmap(struct file *, struct vm_area_struct *);
45:	static int mtdchar_open(struct inode *, struct file *);
127:	static ssize_t mtdchar_read(struct file *, char *, size_t, loff_t *);
382:	static int mtdchar_readoob(struct file *, struct mtd_info *, uint64_t, uint32_t, void *, uint32_t *);
1231:	static long mtdchar_unlocked_ioctl(struct file *, u_int, u_long);
217:	static ssize_t mtdchar_write(struct file *, const char *, size_t, loff_t *);
340:	static int mtdchar_writeoob(struct file *, struct mtd_info *, uint64_t, uint32_t, void *, uint32_t *);

File drivers/mtd/mtdconcat.c:
637:	struct mtd_info *mtd_concat_create(struct mtd_info **, int, const char *);
901:	void mtd_concat_destroy(struct mtd_info *);
586:	static int concat_block_isbad(struct mtd_info *, loff_t);
609:	static int concat_block_markbad(struct mtd_info *, loff_t);
363:	static int concat_erase(struct mtd_info *, struct erase_info *);
529:	static int concat_is_locked(struct mtd_info *, loff_t, uint64_t);
519:	static int concat_lock(struct mtd_info *, loff_t, uint64_t);
106:	static int concat_panic_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
54:	static int concat_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
260:	static int concat_read_oob(struct mtd_info *, loff_t, struct mtd_oob_ops *);
575:	static void concat_resume(struct mtd_info *);
562:	static int concat_suspend(struct mtd_info *);
551:	static void concat_sync(struct mtd_info *);
524:	static int concat_unlock(struct mtd_info *, loff_t, uint64_t);
147:	static int concat_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
317:	static int concat_write_oob(struct mtd_info *, loff_t, struct mtd_oob_ops *);
185:	static int concat_writev(struct mtd_info *, const struct kvec *, unsigned long, loff_t, size_t *);

File drivers/mtd/mtdcore.c:
1200:	int __get_mtd_device(struct mtd_info *);
77:	struct mtd_info *__mtd_next_device(int);
1303:	void __put_mtd_device(struct mtd_info *);
613:	int add_mtd_device(struct mtd_info *);
779:	int del_mtd_device(struct mtd_info *);
1165:	struct mtd_info *get_mtd_device(struct mtd_info *, int);
1264:	struct mtd_info *get_mtd_device_nm(const char *);
2264:	int mtd_block_isbad(struct mtd_info *, loff_t);
2248:	int mtd_block_isreserved(struct mtd_info *, loff_t);
2280:	int mtd_block_markbad(struct mtd_info *, loff_t);
343:	bool mtd_check_expert_analysis_mode(void);
1017:	int mtd_device_parse_register(struct mtd_info *, const char * const *, struct mtd_part_parser_data *, const struct mtd_partition *, int);
1080:	int mtd_device_unregister(struct mtd_info *);
1327:	int mtd_erase(struct mtd_info *, struct erase_info *);
2175:	int mtd_erase_user_prot_reg(struct mtd_info *, loff_t, size_t);
2086:	int mtd_get_fact_prot_info(struct mtd_info *, size_t, size_t *, struct otp_info *);
1419:	unsigned long mtd_get_unmapped_area(struct mtd_info *, unsigned long, unsigned long, unsigned long);
2113:	int mtd_get_user_prot_info(struct mtd_info *, size_t, size_t *, struct otp_info *);
2228:	int mtd_is_locked(struct mtd_info *, loff_t, uint64_t);
2392:	void *mtd_kmalloc_up_to(const struct mtd_info *, size_t *);
2188:	int mtd_lock(struct mtd_info *, loff_t, uint64_t);
2163:	int mtd_lock_user_prot_reg(struct mtd_info *, loff_t, size_t);
2075:	int mtd_ooblayout_count_eccbytes(struct mtd_info *);
2061:	int mtd_ooblayout_count_freebytes(struct mtd_info *);
1733:	int mtd_ooblayout_ecc(struct mtd_info *, int, struct mtd_oob_region *);
1847:	int mtd_ooblayout_find_eccregion(struct mtd_info *, int, int *, struct mtd_oob_region *);
1767:	int mtd_ooblayout_free(struct mtd_info *, int, struct mtd_oob_region *);
2025:	int mtd_ooblayout_get_databytes(struct mtd_info *, u8 *, const u8 *, int, int);
1985:	int mtd_ooblayout_get_eccbytes(struct mtd_info *, u8 *, const u8 *, int, int);
2045:	int mtd_ooblayout_set_databytes(struct mtd_info *, const u8 *, u8 *, int, int);
2005:	int mtd_ooblayout_set_eccbytes(struct mtd_info *, const u8 *, u8 *, int, int);
492:	int mtd_pairing_groups(struct mtd_info *);
464:	int mtd_pairing_info_to_wunit(struct mtd_info *, const struct mtd_pairing_info *);
1495:	int mtd_panic_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1378:	int mtd_point(struct mtd_info *, loff_t, size_t, size_t *, void **, resource_size_t *);
1456:	int mtd_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
2099:	int mtd_read_fact_prot_reg(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
1645:	int mtd_read_oob(struct mtd_info *, loff_t, struct mtd_oob_ops *);
2126:	int mtd_read_user_prot_reg(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
2208:	int mtd_unlock(struct mtd_info *, loff_t, uint64_t);
1400:	int mtd_unpoint(struct mtd_info *, loff_t, size_t);
1472:	int mtd_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
1689:	int mtd_write_oob(struct mtd_info *, loff_t, struct mtd_oob_ops *);
2140:	int mtd_write_user_prot_reg(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);
2351:	int mtd_writev(struct mtd_info *, const struct kvec *, unsigned long, loff_t, size_t *);
421:	int mtd_wunit_to_pairing_info(struct mtd_info *, int, struct mtd_pairing_info *);
1233:	struct mtd_info *of_get_mtd_device_by_node(struct device_node *);
1294:	void put_mtd_device(struct mtd_info *);
1111:	void register_mtd_user(struct mtd_notifier *);
1137:	int unregister_mtd_user(struct mtd_notifier *);
2503:	static void cleanup_mtd(void);
2465:	static int init_mtd(void);
292:	static ssize_t mtd_bad_blocks_show(struct device *, struct device_attribute *, char *);
302:	static ssize_t mtd_bbt_blocks_show(struct device *, struct device_attribute *, char *);
2441:	static struct backing_dev_info *mtd_bdi_init(const char *);
236:	static ssize_t mtd_bitflip_threshold_show(struct device *, struct device_attribute *, char *);
245:	static ssize_t mtd_bitflip_threshold_store(struct device *, struct device_attribute *, const char *, size_t);
272:	static ssize_t mtd_corrected_bits_show(struct device *, struct device_attribute *, char *);
357:	static void mtd_debugfs_populate(struct mtd_info *);
282:	static ssize_t mtd_ecc_failures_show(struct device *, struct device_attribute *, char *);
262:	static ssize_t mtd_ecc_step_size_show(struct device *, struct device_attribute *, char *);
227:	static ssize_t mtd_ecc_strength_show(struct device *, struct device_attribute *, char *);
163:	static ssize_t mtd_erasesize_show(struct device *, struct device_attribute *, char *);
145:	static ssize_t mtd_flags_show(struct device *, struct device_attribute *, char *);
1582:	static int mtd_io_emulated_slc(struct mtd_info *, loff_t, bool, struct mtd_oob_ops *);
218:	static ssize_t mtd_name_show(struct device *, struct device_attribute *, char *);
209:	static ssize_t mtd_numeraseregions_show(struct device *, struct device_attribute *, char *);
927:	static int mtd_nvmem_fact_otp_reg_read(void *, unsigned int, void *, size_t);
503:	static int mtd_nvmem_reg_read(void *, unsigned int, void *, size_t);
913:	static int mtd_nvmem_user_otp_reg_read(void *, unsigned int, void *, size_t);
200:	static ssize_t mtd_oobavail_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t mtd_oobsize_show(struct device *, struct device_attribute *, char *);
845:	static ssize_t mtd_otp_size(struct mtd_info *, bool);
2422:	static int mtd_proc_show(struct seq_file *, void *);
384:	static int mtd_reboot_notifier(struct notifier_block *, unsigned long, void *);
91:	static void mtd_release(struct device *);
154:	static ssize_t mtd_size_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t mtd_subpagesize_show(struct device *, struct device_attribute *, char *);
106:	static ssize_t mtd_type_show(struct device *, struct device_attribute *, char *);
172:	static ssize_t mtd_writesize_show(struct device *, struct device_attribute *, char *);

File drivers/mtd/mtdpart.c:
476:	int __register_mtd_parser(struct mtd_part_parser *, struct module *);
393:	int add_mtd_partitions(struct mtd_info *, const struct mtd_partition *, int);
352:	int del_mtd_partitions(struct mtd_info *);
491:	void deregister_mtd_parser(struct mtd_part_parser *);
239:	int mtd_add_partition(struct mtd_info *, const char *, long long, long long);
366:	int mtd_del_partition(struct mtd_info *, int);
720:	uint64_t mtd_get_device_size(const struct mtd_info *);
703:	void mtd_part_parser_cleanup(struct mtd_partitions *);
653:	int parse_mtd_partitions(struct mtd_info *, const char * const *, struct mtd_part_parser_data *);
326:	static int __del_mtd_partitions(struct mtd_info *);
299:	static int __mtd_del_partition(struct mtd_info *);
35:	static struct mtd_info *allocate_partition(struct mtd_info *, const struct mtd_partition *, int, uint64_t);
470:	static void mtd_part_parser_cleanup_default(const struct mtd_partition *, int);
216:	static ssize_t offset_show(struct device *, struct device_attribute *, char *);

File drivers/mtd/mtdsuper.c:
119:	int get_tree_mtd(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
195:	void kill_mtd_super(struct super_block *);
99:	static int mtd_get_sb_by_nr(struct fs_context *, int, int (*)(struct super_block *, struct fs_context *));
46:	static int mtd_set_super(struct super_block *, struct fs_context *);
26:	static int mtd_test_super(struct super_block *, struct fs_context *);

File drivers/mtd/nand/bbt.c:
42:	void nanddev_bbt_cleanup(struct nand_device *);
71:	int nanddev_bbt_get_block_status(const struct nand_device *, unsigned int);
23:	int nanddev_bbt_init(struct nand_device *);
104:	int nanddev_bbt_set_block_status(struct nand_device *, unsigned int, enum nand_bbt_block_status);
57:	int nanddev_bbt_update(struct nand_device *);

File drivers/mtd/nand/core.c:
396:	void nanddev_cleanup(struct nand_device *);
331:	void nanddev_ecc_engine_cleanup(struct nand_device *);
297:	int nanddev_ecc_engine_init(struct nand_device *);
351:	int nanddev_init(struct nand_device *, const struct nand_ops *, struct module *);
22:	bool nanddev_isbad(struct nand_device *, const struct nand_pos *);
105:	bool nanddev_isreserved(struct nand_device *, const struct nand_pos *);
64:	int nanddev_markbad(struct nand_device *, const struct nand_pos *);
155:	int nanddev_mtd_erase(struct mtd_info *, struct erase_info *);
191:	int nanddev_mtd_max_bad_blocks(struct mtd_info *, loff_t, size_t);

File drivers/mtd/nand/ecc-sw-hamming.c:
115:	int ecc_sw_hamming_calculate(const unsigned char *, unsigned int, unsigned char *, bool);
373:	int ecc_sw_hamming_correct(unsigned char *, unsigned char *, unsigned char *, unsigned int, bool);
362:	int nand_ecc_sw_hamming_calculate(struct nand_device *, const unsigned char *, unsigned char *);
532:	void nand_ecc_sw_hamming_cleanup_ctx(struct nand_device *);
454:	int nand_ecc_sw_hamming_correct(struct nand_device *, unsigned char *, unsigned char *, unsigned char *);
652:	struct nand_ecc_engine *nand_ecc_sw_hamming_get_engine(void);
467:	int nand_ecc_sw_hamming_init_ctx(struct nand_device *);
582:	static int nand_ecc_sw_hamming_finish_io_req(struct nand_device *, struct nand_page_io_req *);
545:	static int nand_ecc_sw_hamming_prepare_io_req(struct nand_device *, struct nand_page_io_req *);

File drivers/mtd/nand/ecc.c:
125:	void nand_ecc_cleanup_ctx(struct nand_device *);
515:	void nand_ecc_cleanup_req_tweaking(struct nand_ecc_req_tweak_ctx *);
152:	int nand_ecc_finish_io_req(struct nand_device *, struct nand_page_io_req *);
708:	struct device *nand_ecc_get_engine_dev(struct device *);
614:	struct nand_ecc_engine *nand_ecc_get_on_die_hw_engine(struct nand_device *);
664:	struct nand_ecc_engine *nand_ecc_get_on_host_hw_engine(struct nand_device *);
594:	struct nand_ecc_engine *nand_ecc_get_sw_engine(struct nand_device *);
112:	int nand_ecc_init_ctx(struct nand_device *);
490:	int nand_ecc_init_req_tweaking(struct nand_ecc_req_tweak_ctx *, struct nand_device *);
467:	bool nand_ecc_is_strong_enough(struct nand_device *);
137:	int nand_ecc_prepare_io_req(struct nand_device *, struct nand_page_io_req *);
696:	void nand_ecc_put_on_host_hw_engine(struct nand_device *);
620:	int nand_ecc_register_on_host_hw_engine(struct nand_ecc_engine *);
568:	void nand_ecc_restore_req(struct nand_ecc_req_tweak_ctx *, struct nand_page_io_req *);
525:	void nand_ecc_tweak_req(struct nand_ecc_req_tweak_ctx *, struct nand_page_io_req *);
640:	int nand_ecc_unregister_on_host_hw_engine(struct nand_ecc_engine *);
332:	const struct mtd_ooblayout_ops *nand_get_large_page_hamming_ooblayout(void);
258:	const struct mtd_ooblayout_ops *nand_get_large_page_ooblayout(void);
217:	const struct mtd_ooblayout_ops *nand_get_small_page_ooblayout(void);
428:	void of_get_nand_ecc_user_config(struct nand_device *);
223:	static int nand_ooblayout_ecc_lp(struct mtd_info *, int, struct mtd_oob_region *);
268:	static int nand_ooblayout_ecc_lp_hamming(struct mtd_info *, int, struct mtd_oob_region *);
163:	static int nand_ooblayout_ecc_sp(struct mtd_info *, int, struct mtd_oob_region *);
238:	static int nand_ooblayout_free_lp(struct mtd_info *, int, struct mtd_oob_region *);
295:	static int nand_ooblayout_free_lp_hamming(struct mtd_info *, int, struct mtd_oob_region *);
189:	static int nand_ooblayout_free_sp(struct mtd_info *, int, struct mtd_oob_region *);

File drivers/mtd/nand/raw/brcmnand/bcm63138_nand.c:
97:	static void bcm63138_nand_driver_exit(void);
97:	static int bcm63138_nand_driver_init(void);
29:	static bool bcm63138_nand_intc_ack(struct brcmnand_soc *);
44:	static void bcm63138_nand_intc_set(struct brcmnand_soc *, bool);
59:	static int bcm63138_nand_probe(struct platform_device *);

File drivers/mtd/nand/raw/brcmnand/brcmnand.c:
3003:	int brcmnand_probe(struct platform_device *, struct brcmnand_soc *);
3254:	int brcmnand_remove(struct platform_device *);
2742:	static int brcmnand_attach_chip(struct nand_chip *);
1230:	static int brcmnand_bch_ooblayout_ecc(struct mtd_info *, int, struct mtd_oob_region *);
1248:	static int brcmnand_bch_ooblayout_free_lp(struct mtd_info *, int, struct mtd_oob_region *);
1274:	static int brcmnand_bch_ooblayout_free_sp(struct mtd_info *, int, struct mtd_oob_region *);
1610:	static void brcmnand_cmd_ctrl(struct nand_chip *, int, unsigned int);
1714:	static void brcmnand_cmdfunc(struct nand_chip *, unsigned int, int, int);
1543:	static irqreturn_t brcmnand_ctlrdy_irq(int, void *);
1576:	static irqreturn_t brcmnand_dma_irq(int, void *);
2077:	static int brcmnand_dma_trans(struct brcmnand_host *, u64, u32 *, u8 *, u32, u8);
1493:	static irqreturn_t brcmnand_edu_irq(int, void *);
2959:	static int brcmnand_edu_setup(struct platform_device *);
1901:	static int brcmnand_edu_trans(struct brcmnand_host *, u64, u32 *, u8 *, u32, u8);
1172:	static int brcmnand_hamming_ooblayout_ecc(struct mtd_info *, int, struct mtd_oob_region *);
1190:	static int brcmnand_hamming_ooblayout_free(struct mtd_info *, int, struct mtd_oob_region *);
2782:	static int brcmnand_init_cs(struct brcmnand_host *, const char * const *);
1566:	static irqreturn_t brcmnand_irq(int, void *);
2208:	static int brcmnand_read(struct mtd_info *, struct nand_chip *, u64, unsigned int, u32 *, u8 *);
1872:	static void brcmnand_read_buf(struct nand_chip *, uint8_t *, int);
2108:	static int brcmnand_read_by_pio(struct mtd_info *, struct nand_chip *, u64, unsigned int, u32 *, u8 *, u64 *);
1816:	static uint8_t brcmnand_read_byte(struct nand_chip *);
2331:	static int brcmnand_read_oob(struct nand_chip *, int);
2340:	static int brcmnand_read_oob_raw(struct nand_chip *, int);
2301:	static int brcmnand_read_page(struct nand_chip *, uint8_t *, int, int);
2314:	static int brcmnand_read_page_raw(struct nand_chip *, uint8_t *, int, int);
2895:	static int brcmnand_resume(struct device *);
2843:	static void brcmnand_save_restore_cs_config(struct brcmnand_host *, int);
1585:	static void brcmnand_send_cmd(struct brcmnand_host *, int);
2874:	static int brcmnand_suspend(struct device *);
1641:	static int brcmnand_waitfunc(struct nand_chip *);
1347:	static void brcmnand_wp(struct mtd_info *, int);
2353:	static int brcmnand_write(struct mtd_info *, struct nand_chip *, u64, const u32 *, u8 *);
1880:	static void brcmnand_write_buf(struct nand_chip *, const uint8_t *, int);
2452:	static int brcmnand_write_oob(struct nand_chip *, int);
2459:	static int brcmnand_write_oob_raw(struct nand_chip *, int);
2424:	static int brcmnand_write_page(struct nand_chip *, const uint8_t *, int, int);
2437:	static int brcmnand_write_page_raw(struct nand_chip *, const uint8_t *, int, int);

File drivers/mtd/nand/raw/brcmnand/brcmstb_nand.c:
33:	static void brcmstb_nand_driver_exit(void);
33:	static int brcmstb_nand_driver_init(void);
19:	static int brcmstb_nand_probe(struct platform_device *);

File drivers/mtd/nand/raw/brcmnand/iproc_nand.c:
69:	static void iproc_nand_apb_access(struct brcmnand_soc *, bool, bool);
147:	static void iproc_nand_driver_exit(void);
147:	static int iproc_nand_driver_init(void);
32:	static bool iproc_nand_intc_ack(struct brcmnand_soc *);
47:	static void iproc_nand_intc_set(struct brcmnand_soc *, bool);
101:	static int iproc_nand_probe(struct platform_device *);

File drivers/mtd/nand/raw/denali.c:
915:	int denali_calc_ecc_bytes(int, int);
1179:	int denali_chip_init(struct denali_controller *, struct denali_chip *);
1272:	int denali_init(struct denali_controller *);
1361:	void denali_remove(struct denali_controller *);
1012:	static int denali_attach_chip(struct nand_chip *);
59:	static u32 denali_direct_read(struct denali_controller *, u32);
64:	static void denali_direct_write(struct denali_controller *, u32, u32);
1148:	static int denali_exec_op(struct nand_chip *, const struct nand_operation *, bool);
76:	static u32 denali_indexed_read(struct denali_controller *, u32);
82:	static void denali_indexed_write(struct denali_controller *, u32, u32);
122:	static irqreturn_t denali_isr(int, void *);
279:	static int denali_oob_xfer(struct nand_chip *, void *, bool);
922:	static int denali_ooblayout_ecc(struct mtd_info *, int, struct mtd_oob_region *);
937:	static int denali_ooblayout_free(struct mtd_info *, int, struct mtd_oob_region *);
710:	static int denali_page_xfer(struct nand_chip *, void *, size_t, int, bool);
644:	static int denali_pio_xfer(struct denali_controller *, void *, size_t, int, bool);
397:	static int denali_read_oob(struct nand_chip *, int);
723:	static int denali_read_page(struct nand_chip *, u8 *, int, int);
383:	static int denali_read_page_raw(struct nand_chip *, u8 *, int, int);
192:	static void denali_select_target(struct nand_chip *, int);
572:	static void denali_setup_dma32(struct denali_controller *, dma_addr_t, int, bool);
547:	static void denali_setup_dma64(struct denali_controller *, dma_addr_t, int, bool);
764:	static int denali_setup_interface(struct nand_chip *, int, const struct nand_interface_config *);
402:	static int denali_write_oob(struct nand_chip *, int);
756:	static int denali_write_page(struct nand_chip *, const u8 *, int, int);
390:	static int denali_write_page_raw(struct nand_chip *, const u8 *, int, int);

File drivers/mtd/nand/raw/denali_dt.c:
82:	static int denali_dt_chip_init(struct denali_controller *, struct device_node *);
258:	static void denali_dt_driver_exit(void);
258:	static int denali_dt_driver_init(void);
113:	static int denali_dt_probe(struct platform_device *);
236:	static int denali_dt_remove(struct platform_device *);

File drivers/mtd/nand/raw/nand_amd.c:
11:	static void amd_nand_decode_id(struct nand_chip *);
36:	static int amd_nand_init(struct nand_chip *);

File drivers/mtd/nand/raw/nand_base.c:
226:	int nand_bbm_get_next_page(struct nand_chip *, int);
1314:	int nand_change_read_column_op(struct nand_chip *, unsigned int, void *, unsigned int, bool);
1622:	int nand_change_write_column_op(struct nand_chip *, unsigned int, const void *, unsigned int, bool);
2749:	int nand_check_erased_ecc_chunk(void *, int, void *, int, void *, int, int);
977:	int nand_choose_best_nvddr_timings(struct nand_chip *, struct nand_interface_config *, struct nand_nvddr_timings *);
926:	int nand_choose_best_sdr_timings(struct nand_chip *, struct nand_interface_config *, struct nand_sdr_timings *);
6428:	void nand_cleanup(struct nand_chip *);
4818:	void nand_decode_ext_id(struct nand_chip *);
195:	void nand_deselect_target(struct nand_chip *);
5988:	int nand_ecc_choose_conf(struct nand_chip *, const struct nand_ecc_caps *, int);
4471:	int nand_erase_nand(struct nand_chip *, struct erase_info *, int);
1827:	int nand_erase_op(struct nand_chip *, unsigned int);
1800:	int nand_exit_status_op(struct nand_chip *);
129:	void nand_extract_bits(u8 *, unsigned int, const u8 *, unsigned int, unsigned int);
2623:	int nand_get_features(struct nand_chip *, int, u8 *);
719:	int nand_gpio_waitrdy(struct nand_chip *, struct gpio_desc *, unsigned long);
538:	int nand_markbad_bbm(struct nand_chip *, loff_t);
2847:	int nand_monolithic_read_page_raw(struct nand_chip *, u8 *, int, int);
3910:	int nand_monolithic_write_page_raw(struct nand_chip *, const u8 *, int, int);
2385:	int nand_op_parser_exec_op(struct nand_chip *, const struct nand_op_parser *, const struct nand_operation *, bool);
1481:	int nand_prog_page_begin_op(struct nand_chip *, unsigned int, unsigned int, const void *, unsigned int);
1515:	int nand_prog_page_end_op(struct nand_chip *);
1567:	int nand_prog_page_op(struct nand_chip *, unsigned int, unsigned int, const void *, unsigned int);
2050:	int nand_read_data_op(struct nand_chip *, void *, unsigned int, bool, bool);
1378:	int nand_read_oob_op(struct nand_chip *, unsigned int, unsigned int, void *, unsigned int);
3576:	int nand_read_oob_std(struct nand_chip *, int);
3176:	int nand_read_page_hwecc_oob_first(struct nand_chip *, uint8_t *, int, int);
1224:	int nand_read_page_op(struct nand_chip *, unsigned int, unsigned int, void *, unsigned int);
2811:	int nand_read_page_raw(struct nand_chip *, uint8_t *, int, int);
2796:	int nand_read_page_raw_notsupp(struct nand_chip *, u8 *, int, int);
1265:	int nand_read_param_page_op(struct nand_chip *, u8, void *, unsigned int);
1685:	int nand_readid_op(struct nand_chip *, u8, void *, unsigned int);
2587:	int nand_reset(struct nand_chip *, int);
2013:	int nand_reset_op(struct nand_chip *);
6393:	int nand_scan_with_ids(struct nand_chip *, unsigned int, struct nand_flash_dev *);
172:	void nand_select_target(struct nand_chip *, unsigned int);
2644:	int nand_set_features(struct nand_chip *, int, u8 *);
651:	int nand_soft_waitrdy(struct nand_chip *, unsigned long);
1751:	int nand_status_op(struct nand_chip *, u8 *);
2479:	unsigned int nand_subop_get_addr_start_off(const struct nand_subop *, unsigned int);
2555:	unsigned int nand_subop_get_data_len(const struct nand_subop *, unsigned int);
2533:	unsigned int nand_subop_get_data_start_off(const struct nand_subop *, unsigned int);
2501:	unsigned int nand_subop_get_num_addr_cyc(const struct nand_subop *, unsigned int);
2133:	int nand_write_data_op(struct nand_chip *, const void *, unsigned int, bool);
3643:	int nand_write_oob_std(struct nand_chip *, int);
3873:	int nand_write_page_raw(struct nand_chip *, const uint8_t *, int, int);
3858:	int nand_write_page_raw_notsupp(struct nand_chip *, const u8 *, int, int);
750:	void panic_nand_wait(struct nand_chip *, unsigned long);
5339:	int rawnand_dt_parse_gpio_cs(struct device *, struct gpio_desc ***, unsigned int *);
5618:	void rawnand_sw_bch_cleanup(struct nand_chip *);
5609:	int rawnand_sw_bch_correct(struct nand_chip *, unsigned char *, unsigned char *, unsigned char *);
5575:	int rawnand_sw_bch_init(struct nand_chip *);
5546:	int rawnand_sw_hamming_calculate(struct nand_chip *, const unsigned char *, unsigned char *);
5567:	void rawnand_sw_hamming_cleanup(struct nand_chip *);
5556:	int rawnand_sw_hamming_correct(struct nand_chip *, unsigned char *, unsigned char *, unsigned char *);
5516:	int rawnand_sw_hamming_init(struct nand_chip *);
4727:	void sanitize_string(uint8_t *, size_t);
4587:	static int nand_block_isbad(struct mtd_info *, loff_t);
606:	static int nand_block_isreserved(struct mtd_info *, loff_t);
4611:	static int nand_block_markbad(struct mtd_info *, loff_t);
2675:	static int nand_check_erased_buf(void *, int, int);
1054:	static int nand_choose_interface_config(struct nand_chip *);
424:	static int nand_do_write_oob(struct nand_chip *, loff_t, struct mtd_oob_ops *);
4255:	static int nand_do_write_ops(struct nand_chip *, loff_t, struct mtd_oob_ops *);
4458:	static int nand_erase(struct mtd_info *, struct erase_info *);
1402:	static int nand_exec_prog_page_op(struct nand_chip *, unsigned int, unsigned int, const void *, unsigned int, bool);
385:	static uint8_t *nand_fill_oob(struct nand_chip *, uint8_t *, size_t, struct mtd_oob_ops *);
339:	static void nand_get_device(struct nand_chip *);
313:	static int nand_isbad_bbm(struct nand_chip *, loff_t);
4685:	static int nand_lock(struct mtd_info *, loff_t, uint64_t);
4939:	static void nand_manufacturer_detect(struct nand_chip *);
5910:	static int nand_maximize_ecc(struct nand_chip *, const struct nand_ecc_caps *, int);
50:	static int nand_pairing_dist3_get_info(struct mtd_info *, int, struct mtd_pairing_info *);
70:	static int nand_pairing_dist3_get_wunit(struct mtd_info *, const struct mtd_pairing_info *);
3815:	static int nand_read_oob(struct mtd_info *, loff_t, struct mtd_oob_ops *);
3590:	static int nand_read_oob_syndrome(struct nand_chip *, int);
3103:	static int nand_read_page_hwecc(struct nand_chip *, uint8_t *, int, int);
2882:	static int nand_read_page_raw_syndrome(struct nand_chip *, uint8_t *, int, int);
2944:	static int nand_read_page_swecc(struct nand_chip *, uint8_t *, int, int);
3242:	static int nand_read_page_syndrome(struct nand_chip *, uint8_t *, int, int);
2991:	static int nand_read_subpage(struct nand_chip *, uint32_t, uint32_t, uint8_t *, int);
4651:	static void nand_resume(struct mtd_info *);
4712:	static void nand_set_defaults(struct nand_chip *);
835:	static int nand_setup_interface(struct nand_chip *, int);
4674:	static void nand_shutdown(struct mtd_info *);
4632:	static int nand_suspend(struct mtd_info *);
4570:	static void nand_sync(struct mtd_info *);
4701:	static int nand_unlock(struct mtd_info *, loff_t, uint64_t);
3378:	static void nand_wait_readrdy(struct nand_chip *);
4421:	static int nand_write_oob(struct mtd_info *, loff_t, struct mtd_oob_ops *);
3658:	static int nand_write_oob_syndrome(struct nand_chip *, int);
4030:	static int nand_write_page_hwecc(struct nand_chip *, const uint8_t *, int, int);
3939:	static int nand_write_page_raw_syndrome(struct nand_chip *, const uint8_t *, int, int);
4001:	static int nand_write_page_swecc(struct nand_chip *, const uint8_t *, int, int);
4147:	static int nand_write_page_syndrome(struct nand_chip *, const uint8_t *, int, int);
4076:	static int nand_write_subpage_hwecc(struct nand_chip *, uint32_t, uint32_t, const uint8_t *, int, int);
5301:	static int of_get_nand_secure_regions(struct nand_chip *);
4391:	static int panic_nand_write(struct mtd_info *, loff_t, size_t, size_t *, const uint8_t *);
6010:	static int rawnand_erase(struct nand_device *, const struct nand_pos *);
6035:	static bool rawnand_isbad(struct nand_device *, const struct nand_pos *);
6026:	static int rawnand_markbad(struct nand_device *, const struct nand_pos *);

File drivers/mtd/nand/raw/nand_bbt.c:
1398:	int nand_create_bbt(struct nand_chip *);
1448:	int nand_isbad_bbt(struct nand_chip *, loff_t, int);
1434:	int nand_isreserved_bbt(struct nand_chip *, loff_t);
1477:	int nand_markbad_bbt(struct nand_chip *, loff_t);
490:	static int create_bbt(struct nand_chip *, uint8_t *, struct nand_bbt_descr *, int);
1130:	static void mark_bbt_region(struct nand_chip *, struct nand_bbt_descr *);
1074:	static int nand_update_bbt(struct nand_chip *, loff_t);
259:	static int read_abs_bbt(struct nand_chip *, uint8_t *, struct nand_bbt_descr *, int);
166:	static int read_bbt(struct nand_chip *, uint8_t *, int, int, struct nand_bbt_descr *, int);
414:	static int scan_block_fast(struct nand_chip *, struct nand_bbt_descr *, loff_t, uint8_t *);
552:	static int search_bbt(struct nand_chip *, uint8_t *, struct nand_bbt_descr *);
1191:	static void verify_bbt_descr(struct nand_chip *, struct nand_bbt_descr *);
745:	static int write_bbt(struct nand_chip *, uint8_t *, struct nand_bbt_descr *, struct nand_bbt_descr *, int);

File drivers/mtd/nand/raw/nand_esmt.c:
11:	static void esmt_nand_decode_id(struct nand_chip *);
41:	static int esmt_nand_init(struct nand_chip *);

File drivers/mtd/nand/raw/nand_hynix.c:
681:	static int h27ucg8t2atrbc_choose_interface_config(struct nand_chip *, struct nand_interface_config *);
159:	static int hynix_get_majority(const u8 *, int, u8 *);
668:	static void hynix_nand_cleanup(struct nand_chip *);
609:	static void hynix_nand_decode_id(struct nand_chip *);
699:	static int hynix_nand_init(struct nand_chip *);
88:	static int hynix_nand_reg_write_op(struct nand_chip *, u8, u8);
108:	static int hynix_nand_setup_read_retry(struct nand_chip *, int);

File drivers/mtd/nand/raw/nand_ids.c:
205:	const struct nand_manufacturer_desc *nand_get_manufacturer_desc(u8);

File drivers/mtd/nand/raw/nand_jedec.c:
24:	int nand_jedec_detect(struct nand_chip *);

File drivers/mtd/nand/raw/nand_legacy.c:
520:	int nand_get_set_features_notsupp(struct nand_chip *, int, u8 *);
614:	void nand_legacy_adjust_cmdfunc(struct nand_chip *);
623:	int nand_legacy_check_hooks(struct nand_chip *);
581:	void nand_legacy_set_defaults(struct nand_chip *);
193:	void nand_wait_ready(struct nand_chip *);
250:	static void nand_command(struct nand_chip *, unsigned int, int, int);
389:	static void nand_command_lp(struct nand_chip *, unsigned int, int, int);
130:	static void nand_read_buf(struct nand_chip *, uint8_t *, int);
159:	static void nand_read_buf16(struct nand_chip *, uint8_t *, int);
28:	static uint8_t nand_read_byte(struct nand_chip *);
40:	static uint8_t nand_read_byte16(struct nand_chip *);
52:	static void nand_select_chip(struct nand_chip *, int);
533:	static int nand_wait(struct nand_chip *);
117:	static void nand_write_buf(struct nand_chip *, const uint8_t *, int);
143:	static void nand_write_buf16(struct nand_chip *, const uint8_t *, int);
74:	static void nand_write_byte(struct nand_chip *, uint8_t);
86:	static void nand_write_byte16(struct nand_chip *, uint8_t);

File drivers/mtd/nand/raw/nand_macronix.c:
319:	static int macronix_nand_init(struct nand_chip *);
39:	static int macronix_nand_setup_read_retry(struct nand_chip *, int);
188:	static int mxic_nand_lock(struct nand_chip *, loff_t, uint64_t);
284:	static void mxic_nand_resume(struct nand_chip *);
271:	static int mxic_nand_suspend(struct nand_chip *);
204:	static int mxic_nand_unlock(struct nand_chip *, loff_t, uint64_t);

File drivers/mtd/nand/raw/nand_micron.c:
583:	static void micron_fixup_onfi_param_page(struct nand_chip *, struct nand_onfi_params *);
575:	static void micron_nand_cleanup(struct nand_chip *);
477:	static int micron_nand_init(struct nand_chip *);
100:	static int micron_nand_on_die_4_ooblayout_ecc(struct mtd_info *, int, struct mtd_oob_region *);
113:	static int micron_nand_on_die_4_ooblayout_free(struct mtd_info *, int, struct mtd_oob_region *);
131:	static int micron_nand_on_die_8_ooblayout_ecc(struct mtd_info *, int, struct mtd_oob_region *);
146:	static int micron_nand_on_die_8_ooblayout_free(struct mtd_info *, int, struct mtd_oob_region *);
166:	static int micron_nand_on_die_ecc_setup(struct nand_chip *, bool);
188:	static int micron_nand_on_die_ecc_status_4(struct nand_chip *, u8, void *, int, int);
275:	static int micron_nand_on_die_ecc_status_8(struct nand_chip *, u8);
304:	static int micron_nand_read_page_on_die_ecc(struct nand_chip *, uint8_t *, int, int);
69:	static int micron_nand_setup_read_retry(struct nand_chip *, int);
369:	static int micron_nand_write_page_on_die_ecc(struct nand_chip *, const uint8_t *, int, int);

File drivers/mtd/nand/raw/nand_onfi.c:
144:	int nand_onfi_detect(struct nand_chip *);
21:	u16 onfi_crc16(u16, const u8 *, size_t);
113:	static void nand_bit_wise_majority(const void **, unsigned int, void *, unsigned int);

File drivers/mtd/nand/raw/nand_samsung.c:
11:	static void samsung_nand_decode_id(struct nand_chip *);
121:	static int samsung_nand_init(struct nand_chip *);

File drivers/mtd/nand/raw/nand_timings.c:
551:	const struct nand_interface_config *nand_get_reset_interface_config(void);
728:	void onfi_fill_interface_config(struct nand_chip *, struct nand_interface_config *, enum nand_interface_type, unsigned int);
609:	unsigned int onfi_find_closest_nvddr_mode(const struct nand_nvddr_timings *);
562:	unsigned int onfi_find_closest_sdr_mode(const struct nand_sdr_timings *);

File drivers/mtd/nand/raw/nand_toshiba.c:
211:	static int tc58nvg0s3e_choose_interface_config(struct nand_chip *, struct nand_interface_config *);
202:	static int tc58teg5dclta00_choose_interface_config(struct nand_chip *, struct nand_interface_config *);
220:	static int th58nvg2s3hbai4_choose_interface_config(struct nand_chip *, struct nand_interface_config *);
50:	static int toshiba_nand_benand_eccstatus(struct nand_chip *);
146:	static void toshiba_nand_decode_id(struct nand_chip *);
274:	static int toshiba_nand_init(struct nand_chip *);
96:	static int toshiba_nand_read_page_benand(struct nand_chip *, uint8_t *, int, int);
109:	static int toshiba_nand_read_subpage_benand(struct nand_chip *, uint32_t, uint32_t, uint8_t *, int);

File drivers/mtd/parsers/ofpart_bcm4908.h:
8:	static int bcm4908_partitions_post_parse(struct mtd_info *, struct mtd_partition *, int);

File drivers/mtd/parsers/ofpart_core.c:
255:	static void ofpart_parser_exit(void);
248:	static int ofpart_parser_init(void);
41:	static int parse_fixed_partitions(struct mtd_info *, const struct mtd_partition **, struct mtd_part_parser_data *);
188:	static int parse_ofoldpart_partitions(struct mtd_info *, const struct mtd_partition **, struct mtd_part_parser_data *);

File drivers/mtd/parsers/ofpart_linksys_ns.h:
10:	static int linksys_ns_partitions_post_parse(struct mtd_info *, struct mtd_partition *, int);

File drivers/mtd/spi-nor/atmel.c:
40:	static int at25fs_nor_is_locked(struct spi_nor *, loff_t, uint64_t);
51:	static void at25fs_nor_late_init(struct spi_nor *);
19:	static int at25fs_nor_lock(struct spi_nor *, loff_t, uint64_t);
24:	static int at25fs_nor_unlock(struct spi_nor *, loff_t, uint64_t);
119:	static int atmel_nor_global_protect(struct spi_nor *, loff_t, uint64_t);
152:	static void atmel_nor_global_protection_late_init(struct spi_nor *);
125:	static int atmel_nor_global_unprotect(struct spi_nor *, loff_t, uint64_t);
131:	static int atmel_nor_is_global_protected(struct spi_nor *, loff_t, uint64_t);

File drivers/mtd/spi-nor/core.c:
161:	int spi_nor_controller_ops_read_reg(struct spi_nor *, u8, u8 *, size_t);
170:	int spi_nor_controller_ops_write_reg(struct spi_nor *, u8, const u8 *, size_t);
1003:	u8 spi_nor_convert_3to4_read(u8);
1108:	int spi_nor_erase_sector(struct spi_nor *, u32);
660:	int spi_nor_global_block_unlock(struct spi_nor *);
1879:	int spi_nor_hwcaps_pp2cmd(u32);
1854:	int spi_nor_hwcaps_read2cmd(u32);
2036:	void spi_nor_init_uniform_erase_map(struct spi_nor_erase_map *, u8, u64);
1074:	int spi_nor_lock_and_prep(struct spi_nor *);
2047:	int spi_nor_post_bfpt_fixups(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);
320:	int spi_nor_read_any_reg(struct spi_nor *, struct spi_mem_op *, enum spi_nor_protocol);
490:	int spi_nor_read_cr(struct spi_nor *, u8 *);
243:	ssize_t spi_nor_read_data(struct spi_nor *, loff_t, size_t, u8 *);
424:	int spi_nor_read_id(struct spi_nor *, u8, u8, u8 *, enum spi_nor_protocol);
450:	int spi_nor_read_sr(struct spi_nor *, u8 *);
1225:	struct spi_nor_erase_region *spi_nor_region_next(struct spi_nor_erase_region *);
2882:	void spi_nor_restore(struct spi_nor *);
3010:	int spi_nor_scan(struct spi_nor *, const char *, const struct spi_nor_hwcaps *);
519:	int spi_nor_set_4byte_addr_mode(struct spi_nor *, bool);
2019:	void spi_nor_set_erase_type(struct spi_nor_erase_type *, u32, u8);
1836:	void spi_nor_set_pp_settings(struct spi_nor_pp_command *, u8, enum spi_nor_protocol);
1824:	void spi_nor_set_read_settings(struct spi_nor_read_command *, u8, u8, u8, enum spi_nor_protocol);
81:	void spi_nor_spimem_setup_op(const struct spi_nor *, struct spi_mem_op *, const enum spi_nor_protocol);
1527:	int spi_nor_sr1_bit6_quad_enable(struct spi_nor *);
1552:	int spi_nor_sr2_bit1_quad_enable(struct spi_nor *);
1583:	int spi_nor_sr2_bit7_quad_enable(struct spi_nor *);
581:	int spi_nor_sr_ready(struct spi_nor *);
1090:	void spi_nor_unlock_and_unprep(struct spi_nor *);
648:	int spi_nor_wait_till_ready(struct spi_nor *);
836:	int spi_nor_write_16bit_cr_and_check(struct spi_nor *, u8);
342:	int spi_nor_write_any_volatile_reg(struct spi_nor *, struct spi_mem_op *, enum spi_nor_protocol);
302:	ssize_t spi_nor_write_data(struct spi_nor *, loff_t, size_t, const u8 *);
390:	int spi_nor_write_disable(struct spi_nor *);
363:	int spi_nor_write_enable(struct spi_nor *);
695:	int spi_nor_write_sr(struct spi_nor *, const u8 *, size_t);
888:	int spi_nor_write_sr_and_check(struct spi_nor *, u8);
551:	static int spansion_set_4byte_addr_mode(struct spi_nor *, bool);
1668:	static const struct flash_info *spi_nor_detect(struct spi_nor *);
3338:	static void spi_nor_driver_exit(void);
3338:	static int spi_nor_driver_init(void);
1431:	static int spi_nor_erase(struct mtd_info *, struct erase_info *);
2851:	static int spi_nor_get_device(struct mtd_info *);
2725:	static int spi_nor_init(struct spi_nor *);
2369:	static void spi_nor_no_sfdp_init_params(struct spi_nor *);
3161:	static int spi_nor_probe(struct spi_mem *);
2868:	static void spi_nor_put_device(struct mtd_info *);
1702:	static int spi_nor_read(struct mtd_info *, loff_t, size_t, size_t *, u_char *);
940:	static int spi_nor_read_sr2(struct spi_nor *, u8 *);
3236:	static int spi_nor_remove(struct spi_mem *);
2839:	static void spi_nor_resume(struct mtd_info *);
2959:	static void spi_nor_set_mtd_info(struct spi_nor *);
2330:	static int spi_nor_setup(struct spi_nor *, const struct spi_nor_hwcaps *);
3246:	static void spi_nor_shutdown(struct spi_mem *);
2825:	static int spi_nor_suspend(struct mtd_info *);
615:	static int spi_nor_wait_till_ready_with_timeout(struct spi_nor *, unsigned long);
1746:	static int spi_nor_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);

File drivers/mtd/spi-nor/debugfs.c:
229:	void spi_nor_debugfs_register(struct spi_nor *);
219:	static int spi_nor_capabilities_open(struct inode *, struct file *);
181:	static int spi_nor_capabilities_show(struct seq_file *, void *);
221:	static void spi_nor_debugfs_unregister(void *);
162:	static int spi_nor_params_open(struct inode *, struct file *);
73:	static int spi_nor_params_show(struct seq_file *, void *);

File drivers/mtd/spi-nor/gigadevice.c:
12:	static int gd25q256_post_bfpt(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);

File drivers/mtd/spi-nor/issi.c:
12:	static int is25lp256_post_bfpt_fixups(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);
92:	static void issi_nor_default_init(struct spi_nor *);
32:	static void pm25lv_nor_late_init(struct spi_nor *);

File drivers/mtd/spi-nor/macronix.c:
105:	static void macronix_nor_default_init(struct spi_nor *);
12:	static int mx25l25635_post_bfpt_fixups(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);

File drivers/mtd/spi-nor/micron-st.c:
372:	static void micron_st_nor_clear_fsr(struct spi_nor *);
447:	static void micron_st_nor_default_init(struct spi_nor *);
455:	static void micron_st_nor_late_init(struct spi_nor *);
123:	static int micron_st_nor_octal_dtr_enable(struct spi_nor *, bool);
399:	static int micron_st_nor_ready(struct spi_nor *);
313:	static int micron_st_nor_set_4byte_addr_mode(struct spi_nor *, bool);
129:	static void mt35xu512aba_default_init(struct spi_nor *);
134:	static void mt35xu512aba_post_sfdp_fixup(struct spi_nor *);

File drivers/mtd/spi-nor/otp.c:
137:	int spi_nor_otp_erase_secr(struct spi_nor *, loff_t);
207:	int spi_nor_otp_is_locked_sr2(struct spi_nor *, unsigned int);
175:	int spi_nor_otp_lock_sr2(struct spi_nor *, unsigned int);
36:	int spi_nor_otp_read_secr(struct spi_nor *, loff_t, size_t, u8 *);
83:	int spi_nor_otp_write_secr(struct spi_nor *, loff_t, size_t, const u8 *);
483:	void spi_nor_set_mtd_otp_ops(struct spi_nor *);
395:	static int spi_nor_mtd_otp_erase(struct mtd_info *, loff_t, size_t);
246:	static int spi_nor_mtd_otp_info(struct mtd_info *, size_t, size_t *, struct otp_info *);
448:	static int spi_nor_mtd_otp_lock(struct mtd_info *, loff_t, size_t);
383:	static int spi_nor_mtd_otp_read(struct mtd_info *, loff_t, size_t, size_t *, u8 *);
307:	static int spi_nor_mtd_otp_read_write(struct mtd_info *, loff_t, size_t, size_t *, const u8 *, bool);
389:	static int spi_nor_mtd_otp_write(struct mtd_info *, loff_t, size_t, size_t *, const u8 *);

File drivers/mtd/spi-nor/sfdp.c:
1267:	int spi_nor_check_sfdp_signature(struct spi_nor *);
1297:	int spi_nor_parse_sfdp(struct spi_nor *);
337:	static int spi_nor_map_cmp_erase_type(const void *, const void *);
1248:	static void spi_nor_post_sfdp_fixups(struct spi_nor *);
384:	static void spi_nor_regions_sort_erase_types(struct spi_nor_erase_map *);

File drivers/mtd/spi-nor/spansion.c:
278:	static int cypress_nor_octal_dtr_enable(struct spi_nor *, bool);
137:	static int cypress_nor_quad_enable_volatile(struct spi_nor *);
332:	static int s25fs_s_nor_post_bfpt_fixups(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);
251:	static void s25hx_t_late_init(struct spi_nor *);
217:	static int s25hx_t_post_bfpt_fixup(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);
227:	static void s25hx_t_post_sfdp_fixup(struct spi_nor *);
319:	static void s28hx_t_late_init(struct spi_nor *);
312:	static int s28hx_t_post_bfpt_fixup(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);
284:	static void s28hx_t_post_sfdp_fixup(struct spi_nor *);
542:	static void spansion_nor_late_init(struct spi_nor *);
510:	static int spansion_nor_sr_ready_and_clear(struct spi_nor *);

File drivers/mtd/spi-nor/sst.c:
41:	static int sst26vf_nor_is_locked(struct spi_nor *, loff_t, uint64_t);
52:	static void sst26vf_nor_late_init(struct spi_nor *);
16:	static int sst26vf_nor_lock(struct spi_nor *, loff_t, uint64_t);
21:	static int sst26vf_nor_unlock(struct spi_nor *, loff_t, uint64_t);
206:	static void sst_nor_late_init(struct spi_nor *);
120:	static int sst_nor_write(struct mtd_info *, loff_t, size_t, size_t *, const u_char *);

File drivers/mtd/spi-nor/swp.c:
341:	void spi_nor_init_default_locking_ops(struct spi_nor *);
417:	void spi_nor_set_mtd_locking_ops(struct spi_nor *);
403:	void spi_nor_try_unlock_all(struct spi_nor *);
87:	static bool spi_nor_check_lock_status_sr(struct spi_nor *, loff_t, uint64_t, u8, bool);
376:	static int spi_nor_is_locked(struct mtd_info *, loff_t, uint64_t);
346:	static int spi_nor_lock(struct mtd_info *, loff_t, uint64_t);
324:	static int spi_nor_sr_is_locked(struct spi_nor *, loff_t, uint64_t);
154:	static int spi_nor_sr_lock(struct spi_nor *, loff_t, uint64_t);
239:	static int spi_nor_sr_unlock(struct spi_nor *, loff_t, uint64_t);
361:	static int spi_nor_unlock(struct mtd_info *, loff_t, uint64_t);

File drivers/mtd/spi-nor/sysfs.c:
32:	static ssize_t jedec_id_show(struct device *, struct device_attribute *, char *);
10:	static ssize_t manufacturer_show(struct device *, struct device_attribute *, char *);
21:	static ssize_t partname_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t sfdp_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
87:	static umode_t spi_nor_sysfs_is_bin_visible(struct kobject *, struct bin_attribute *, int);
72:	static umode_t spi_nor_sysfs_is_visible(struct kobject *, struct attribute *, int);

File drivers/mtd/spi-nor/winbond.c:
21:	static int w25q256_post_bfpt_fixups(struct spi_nor *, const struct sfdp_parameter_header *, const struct sfdp_bfpt *);
219:	static void winbond_nor_default_init(struct spi_nor *);
224:	static void winbond_nor_late_init(struct spi_nor *);
187:	static int winbond_nor_set_4byte_addr_mode(struct spi_nor *, bool);

File drivers/mtd/spi-nor/xilinx.c:
56:	static u32 s3an_nor_convert_addr(struct spi_nor *, u32);
157:	static void xilinx_nor_late_init(struct spi_nor *);
115:	static int xilinx_nor_setup(struct spi_nor *, const struct spi_nor_hwcaps *);
104:	static int xilinx_nor_sr_ready(struct spi_nor *);

File drivers/mux/core.c:
237:	struct mux_chip *devm_mux_chip_alloc(struct device *, unsigned int, size_t);
276:	int devm_mux_chip_register(struct device *, struct mux_chip *);
654:	struct mux_control *devm_mux_control_get(struct device *, const char *);
729:	struct mux_state *devm_mux_state_get(struct device *, const char *);
94:	struct mux_chip *mux_chip_alloc(struct device *, unsigned int, size_t);
211:	void mux_chip_free(struct mux_chip *);
165:	int mux_chip_register(struct mux_chip *);
199:	void mux_chip_unregister(struct mux_chip *);
480:	int mux_control_deselect(struct mux_control *);
621:	struct mux_control *mux_control_get(struct device *, const char *);
633:	void mux_control_put(struct mux_control *);
368:	int mux_control_select_delay(struct mux_control *, unsigned int, unsigned int);
305:	unsigned int mux_control_states(struct mux_control *);
428:	int mux_control_try_select_delay(struct mux_control *, unsigned int, unsigned int);
506:	int mux_state_deselect(struct mux_state *);
406:	int mux_state_select_delay(struct mux_state *, unsigned int);
462:	int mux_state_try_select_delay(struct mux_state *, unsigned int);
260:	static void devm_mux_chip_reg_release(struct device *, void *);
220:	static void devm_mux_chip_release(struct device *, void *);
639:	static void devm_mux_control_release(struct device *, void *);
714:	static void devm_mux_state_release(struct device *, void *);
65:	static void mux_chip_release(struct device *);
59:	static void mux_exit(void);
531:	static struct mux_control *mux_get(struct device *, const char *, unsigned int *);
53:	static int mux_init(void);

File drivers/mux/mmio.c:
138:	static void mux_mmio_driver_exit(void);
138:	static int mux_mmio_driver_init(void);
36:	static int mux_mmio_probe(struct platform_device *);
18:	static int mux_mmio_set(struct mux_control *, int);

File drivers/net/loopback.c:
95:	void dev_lstats_read(struct net_device *, u64 *, u64 *);
132:	static u32 always_on(struct net_device *);
262:	static int blackhole_netdev_init(void);
256:	static void blackhole_netdev_setup(struct net_device *);
241:	static netdev_tx_t blackhole_netdev_xmit(struct sk_buff *, struct net_device *);
150:	static void loopback_dev_free(struct net_device *);
142:	static int loopback_dev_init(struct net_device *);
119:	static void loopback_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
208:	static int loopback_net_init(struct net *);
201:	static void loopback_setup(struct net_device *);
69:	static netdev_tx_t loopback_xmit(struct sk_buff *, struct net_device *);

File drivers/nvmem/core.c:
1314:	struct nvmem_cell *devm_nvmem_cell_get(struct device *, const char *);
1351:	void devm_nvmem_cell_put(struct device *, struct nvmem_cell *);
1105:	struct nvmem_device *devm_nvmem_device_get(struct device *, const char *);
1073:	void devm_nvmem_device_put(struct device *, struct nvmem_device *);
926:	struct nvmem_device *devm_nvmem_register(struct device *, const struct nvmem_config *);
1900:	void nvmem_add_cell_lookups(struct nvmem_cell_lookup *, size_t);
1873:	void nvmem_add_cell_table(struct nvmem_cell_table *);
1281:	struct nvmem_cell *nvmem_cell_get(struct device *, const char *);
1367:	void nvmem_cell_put(struct nvmem_cell *);
1450:	void *nvmem_cell_read(struct nvmem_cell *, size_t *);
1621:	int nvmem_cell_read_u16(struct device *, const char *, u16 *);
1636:	int nvmem_cell_read_u32(struct device *, const char *, u32 *);
1651:	int nvmem_cell_read_u64(struct device *, const char *, u64 *);
1606:	int nvmem_cell_read_u8(struct device *, const char *, u8 *);
1699:	int nvmem_cell_read_variable_le_u32(struct device *, const char *, u32 *);
1730:	int nvmem_cell_read_variable_le_u64(struct device *, const char *, u64 *);
1562:	int nvmem_cell_write(struct nvmem_cell *, void *, size_t);
1918:	void nvmem_del_cell_lookups(struct nvmem_cell_lookup *, size_t);
1886:	void nvmem_del_cell_table(struct nvmem_cell_table *);
1936:	const char *nvmem_dev_name(struct nvmem_device *);
1762:	ssize_t nvmem_device_cell_read(struct nvmem_device *, struct nvmem_cell_info *, void *);
1793:	int nvmem_device_cell_write(struct nvmem_device *, struct nvmem_cell_info *, void *);
1044:	struct nvmem_device *nvmem_device_find(void *, int (*)(struct device *, const void *));
1019:	struct nvmem_device *nvmem_device_get(struct device *, const char *);
1089:	void nvmem_device_put(struct nvmem_device *);
1821:	int nvmem_device_read(struct nvmem_device *, unsigned int, size_t, void *);
1849:	int nvmem_device_write(struct nvmem_device *, unsigned int, size_t, void *);
752:	struct nvmem_device *nvmem_register(const struct nvmem_config *);
559:	int nvmem_register_notifier(struct notifier_block *);
903:	void nvmem_unregister(struct nvmem_device *);
572:	int nvmem_unregister_notifier(struct notifier_block *);
1224:	struct nvmem_cell *of_nvmem_cell_get(struct device_node *, const char *);
989:	struct nvmem_device *of_nvmem_device_get(struct device_node *, const char *);
1526:	static int __nvmem_cell_entry_write(struct nvmem_cell_entry *, void *, size_t);
1412:	static int __nvmem_cell_read(struct nvmem_device *, struct nvmem_cell_entry *, void *, size_t *, const char *);
210:	static ssize_t bin_attr_nvmem_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
250:	static ssize_t bin_attr_nvmem_write(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
1334:	static int devm_nvmem_cell_match(struct device *, void *, void *);
1299:	static void devm_nvmem_cell_release(struct device *, void *);
1051:	static int devm_nvmem_device_match(struct device *, void *, void *);
1061:	static void devm_nvmem_device_release(struct device *, void *);
910:	static void devm_nvmem_unregister(void *);
100:	static int nvmem_access_with_keepouts(struct nvmem_device *, unsigned int, void *, size_t, int);
512:	static int nvmem_add_cells(struct nvmem_device *, const struct nvmem_cell_info *, int);
683:	static int nvmem_add_cells_from_of(struct nvmem_device *);
578:	static int nvmem_add_cells_from_table(struct nvmem_device *);
309:	static umode_t nvmem_bin_attr_is_visible(struct kobject *, struct bin_attribute *, int);
1569:	static int nvmem_cell_read_common(struct device *, const char *, void *, size_t);
1657:	static const void *nvmem_cell_read_variable_common(struct device *, const char *, size_t, size_t *);
443:	static void nvmem_device_remove_all_cells(const struct nvmem_device *);
1947:	static void nvmem_exit(void);
1942:	static int nvmem_init(void);
164:	static int nvmem_reg_read(struct nvmem_device *, unsigned int, void *, size_t);
415:	static void nvmem_release(struct device *);
359:	static int nvmem_sysfs_setup_compat(struct nvmem_device *, const struct nvmem_config *);
195:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/nvmem/rmem.c:
93:	static void rmem_driver_exit(void);
93:	static int rmem_driver_init(void);
52:	static int rmem_probe(struct platform_device *);
20:	static int rmem_read(void *, unsigned int, void *, size_t);

File drivers/of/address.c:
629:	const __be32 *__of_get_address(struct device_node *, int, int, u64 *, unsigned int *);
583:	struct device_node *__of_get_dma_parent(const struct device_node *);
846:	int of_address_to_resource(struct device_node *, int, struct resource *);
1019:	phys_addr_t of_dma_get_max_cpu_address(struct device_node *);
933:	int of_dma_get_range(struct device_node *, const struct bus_dma_region **);
1062:	bool of_dma_is_coherent(struct device_node *);
888:	void *of_io_request_and_map(struct device_node *, int, const char *);
860:	void *of_iomap(struct device_node *, int);
198:	int of_pci_address_to_resource(struct device_node *, int, struct resource *);
703:	int of_pci_dma_range_parser_init(struct of_pci_range_parser *, struct device_node *);
696:	int of_pci_range_parser_init(struct of_pci_range_parser *, struct device_node *);
711:	struct of_pci_range *of_pci_range_parser_one(struct of_pci_range_parser *, struct of_pci_range *);
224:	int of_pci_range_to_resource(struct of_pci_range *, struct device_node *, struct resource *);
566:	u64 of_translate_address(struct device_node *, const __be32 *);
612:	u64 of_translate_dma_address(struct device_node *, const __be32 *);
473:	static u64 __of_translate_address(struct device_node *, struct device_node *(*)(const struct device_node *), const __be32 *, const char *, struct device_node **);
61:	static void of_bus_default_count_cells(struct device_node *, int *, int *);
98:	static unsigned int of_bus_default_get_flags(const __be32 *);
70:	static u64 of_bus_default_map(__be32 *, const __be32 *, int, int, int);
86:	static int of_bus_default_translate(__be32 *, u64, int);
275:	static void of_bus_isa_count_cells(struct device_node *, int *, int *);
310:	static unsigned int of_bus_isa_get_flags(const __be32 *);
284:	static u64 of_bus_isa_map(__be32 *, const __be32 *, int, int, int);
270:	static int of_bus_isa_match(struct device_node *);
305:	static int of_bus_isa_translate(__be32 *, u64, int);
675:	static int parser_init(struct of_pci_range_parser *, struct device_node *, const char *);

File drivers/of/base.c:
1720:	int __of_add_property(struct device_node *, struct property *);
225:	struct device_node *__of_find_all_nodes(struct device_node *);
925:	struct device_node *__of_find_node_by_full_path(struct device_node *, const char *);
907:	struct device_node *__of_find_node_by_path(struct device_node *, const char *);
268:	const void *__of_get_property(const struct device_node *, const char *, int *);
1423:	int __of_parse_phandle_with_args(const struct device_node *, const char *, const char *, int, int, struct of_phandle_args *);
151:	void __of_phandle_cache_inv_entry(phandle);
1766:	int __of_remove_property(struct device_node *, struct property *);
1821:	int __of_update_property(struct device_node *, struct property *, struct property **);
367:	bool arch_find_n_match_cpu_physical_id(struct device_node *, int, unsigned int *);
325:	bool arch_match_cpu_phys_id(int, u64);
1743:	int of_add_property(struct device_node *, struct property *);
2004:	int of_alias_get_highest_id(const char *);
1976:	int of_alias_get_id(struct device_node *, const char *);
1903:	void of_alias_scan(void *(*)(u64, u64));
89:	int of_bus_n_addr_cells(struct device_node *);
110:	int of_bus_n_size_cells(struct device_node *);
2034:	bool of_console_check(struct device_node *, char *, int);
166:	void of_core_init(void);
1678:	int of_count_phandle_with_args(const struct device_node *, const char *, const char *);
422:	int of_cpu_node_to_id(struct device_node *);
564:	int of_device_compatible_match(const struct device_node *, const char * const *);
640:	bool of_device_is_available(const struct device_node *);
687:	bool of_device_is_big_endian(const struct device_node *);
547:	int of_device_is_compatible(const struct device_node *, const char *);
250:	struct device_node *of_find_all_nodes(struct device_node *);
1077:	struct device_node *of_find_compatible_node(struct device_node *, const char *, const char *);
2086:	int of_find_last_cache_level(unsigned int);
1184:	struct device_node *of_find_matching_node_and_match(struct device_node *, const struct of_device_id *, const struct of_device_id **);
2055:	struct device_node *of_find_next_cache_node(const struct device_node *);
1019:	struct device_node *of_find_node_by_name(struct device_node *, const char *);
1244:	struct device_node *of_find_node_by_phandle(phandle);
1047:	struct device_node *of_find_node_by_type(struct device_node *, const char *);
961:	struct device_node *of_find_node_opts_by_path(const char *, const char **);
1106:	struct device_node *of_find_node_with_property(struct device_node *, const char *);
210:	struct property *of_find_property(const struct device_node *, const char *, int *);
895:	struct device_node *of_get_child_by_name(const struct device_node *, const char *);
870:	struct device_node *of_get_compatible_child(const struct device_node *, const char *);
297:	u64 of_get_cpu_hwid(struct device_node *, unsigned int);
402:	struct device_node *of_get_cpu_node(int, unsigned int *);
455:	struct device_node *of_get_cpu_state_node(struct device_node *, int);
794:	struct device_node *of_get_next_available_child(const struct device_node *, struct device_node *);
773:	struct device_node *of_get_next_child(const struct device_node *, struct device_node *);
828:	struct device_node *of_get_next_cpu_node(struct device_node *);
731:	struct device_node *of_get_next_parent(struct device_node *);
705:	struct device_node *of_get_parent(const struct device_node *);
280:	const void *of_get_property(const struct device_node *, const char *, int *);
590:	int of_machine_is_compatible(const char *);
2122:	int of_map_id(struct device_node *, u32, const char *, const char *, struct device_node **, u32 *);
1158:	const struct of_device_id *of_match_node(const struct of_device_id *, const struct device_node *);
1223:	int of_modalias_node(struct device_node *, char *, int);
101:	int of_n_addr_cells(struct device_node *);
122:	int of_n_size_cells(struct device_node *);
58:	bool of_node_name_eq(const struct device_node *, const char *);
73:	bool of_node_name_prefix(const struct device_node *, const char *);
132:	int of_node_to_nid(struct device_node *);
1521:	int of_parse_phandle_with_args_map(const struct device_node *, const char *, const char *, int, struct of_phandle_args *);
1406:	int of_phandle_iterator_args(struct of_phandle_iterator *, uint32_t *, int);
1288:	int of_phandle_iterator_init(struct of_phandle_iterator *, const struct device_node *, const char *, const char *, int);
1321:	int of_phandle_iterator_next(struct of_phandle_iterator *);
1276:	void of_print_phandle_args(const char *, const struct of_phandle_args *);
1795:	int of_remove_property(struct device_node *, struct property *);
1856:	int of_update_property(struct device_node *, struct property *);
506:	static int __of_device_is_compatible(const struct device_node *, const char *, const char *, const char *);

File drivers/of/device.c:
37:	int of_device_add(struct platform_device *);
239:	const void *of_device_get_match_data(const struct device *);
319:	ssize_t of_device_modalias(struct device *, char *, ssize_t);
226:	int of_device_register(struct platform_device *);
290:	int of_device_request_module(struct device *);
338:	void of_device_uevent(const struct device *, struct kobj_uevent_env *);
375:	int of_device_uevent_modalias(struct device *, struct kobj_uevent_env *);
233:	void of_device_unregister(struct platform_device *);
114:	int of_dma_configure_id(struct device *, struct device_node *, bool, const u32 *);
28:	const struct of_device_id *of_match_device(const struct of_device_id *, const struct device *);
251:	static ssize_t of_device_get_modalias(struct device *, char *, ssize_t);

File drivers/of/fdt.c:
365:	void *__unflatten_device_tree(const void *, struct device_node *, struct device_node **, void *(*)(u64, u64), bool);
1085:	u64 dt_mem_next_cell(int, const __be32 **);
1218:	void early_init_dt_add_memory_arch(u64, u64);
977:	void early_init_dt_check_for_usable_mem_range(void);
1307:	bool early_init_dt_scan(void *);
1151:	int early_init_dt_scan_chosen(char *);
1009:	int early_init_dt_scan_chosen_stdout(void);
1096:	int early_init_dt_scan_memory(void);
1288:	void early_init_dt_scan_nodes(void);
1060:	int early_init_dt_scan_root(void);
1271:	bool early_init_dt_verify(void *);
654:	void early_init_fdt_reserve_self(void);
630:	void early_init_fdt_scan_reserved_mem(void);
43:	void of_fdt_limit_memory(int);
454:	void *of_fdt_unflatten_tree(const unsigned long *, struct device_node *, struct device_node **);
827:	const char *of_flat_dt_get_machine_name(void);
794:	int of_flat_dt_is_compatible(unsigned long, const char *);
847:	const void *of_flat_dt_match_machine(const void *, const void *(*)(const char * const **));
822:	uint32_t of_get_flat_dt_phandle(unsigned long);
751:	const void *of_get_flat_dt_prop(unsigned long, const char *, int *);
740:	unsigned long of_get_flat_dt_root(void);
732:	int of_get_flat_dt_subnode_by_name(unsigned long, const char *);
673:	int of_scan_flat_dt(int (*)(unsigned long, const char *, int, void *), void *);
703:	int of_scan_flat_dt_subnodes(unsigned long, int (*)(unsigned long, const char *, void *), void *);
1349:	void unflatten_and_copy_device_tree(void);
1327:	void unflatten_device_tree(void);
548:	static int __reserved_mem_check_root(unsigned long);
500:	static int __reserved_mem_reserve_reg(unsigned long, const char *);
1260:	static void *early_init_dt_alloc_memory_arch(u64, u64);
906:	static void early_init_dt_check_for_initrd(unsigned long);
479:	static int early_init_dt_reserve_memory(phys_addr_t, phys_addr_t, bool);
569:	static int fdt_scan_reserved_mem(void);
83:	static bool of_fdt_device_is_available(const void *, unsigned long);
767:	static int of_fdt_is_compatible(const void *, unsigned long, const char *);
1379:	static int of_fdt_raw_init(void);
1371:	static ssize_t of_fdt_raw_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
802:	static int of_flat_dt_match(unsigned long, const char * const *);
108:	static void populate_properties(const void *, int, void **, struct device_node *, const char *, bool);
251:	static void reverse_nodes(struct device_node *);
284:	static int unflatten_dt_nodes(const void *, void *, struct device_node *, struct device_node **);

File drivers/of/fdt_address.c:
246:	u64 of_flat_dt_translate_address(unsigned long);
48:	static void fdt_bus_default_count_cells(const void *, int, int *, int *);
70:	static u64 fdt_bus_default_map(__be32 *, const __be32 *, int, int, int);
87:	static int fdt_bus_default_translate(__be32 *, u64, int);
163:	static u64 fdt_translate_address(const void *, int);
109:	static int fdt_translate_one(const void *, int, const struct of_bus *, const struct of_bus *, __be32 *, int, int, int, const char *);

File drivers/of/irq.c:
36:	unsigned int irq_of_parse_and_map(struct device_node *, int);
476:	int of_irq_count(struct device_node *);
54:	struct device_node *of_irq_find_parent(struct device_node *);
430:	int of_irq_get(struct device_node *, int);
457:	int of_irq_get_byname(struct device_node *, const char *);
522:	void of_irq_init(const struct of_device_id *);
329:	int of_irq_parse_one(struct device_node *, int, struct of_phandle_args *);
113:	int of_irq_parse_raw(const __be32 *, struct of_phandle_args *);
392:	int of_irq_to_resource(struct device_node *, int, struct resource *);
495:	int of_irq_to_resource_table(struct device_node *, struct resource *, int);
740:	void of_msi_configure(struct device *, struct device_node *);
698:	struct irq_domain *of_msi_get_domain(struct device *, struct device_node *, enum irq_domain_bus_token);
678:	struct irq_domain *of_msi_map_get_device_domain(struct device *, u32, u32);
662:	u32 of_msi_map_id(struct device *, struct device_node *, u32);

File drivers/of/kobj.c:
63:	int __of_add_property_sysfs(struct device_node *, struct property *);
115:	int __of_attach_node_sysfs(struct device_node *);
149:	void __of_detach_node_sysfs(struct device_node *);
96:	void __of_remove_property_sysfs(struct device_node *, struct property *);
87:	void __of_sysfs_remove_bin_file(struct device_node *, struct property *);
103:	void __of_update_property_sysfs(struct device_node *, struct property *, struct property *);
14:	int of_node_is_attached(const struct device_node *);
31:	static ssize_t of_node_property_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
21:	static void of_node_release(struct kobject *);
40:	static const char *safe_name(struct kobject *, const char *);

File drivers/of/of_numa.c:
140:	int of_node_to_nid(struct device_node *);
177:	int of_numa_init(void);
23:	static void of_numa_parse_cpu_nodes(void);
126:	static int of_numa_parse_distance_map(void);
77:	static int of_numa_parse_distance_map_v1(struct device_node *);
42:	static int of_numa_parse_memory_nodes(void);

File drivers/of/of_reserved_mem.c:
252:	void fdt_init_reserved_mem(void);
60:	void fdt_reserved_mem_save_node(unsigned long, const char *, phys_addr_t, phys_addr_t);
329:	int of_reserved_mem_device_init_by_idx(struct device *, struct device_node *, int);
386:	int of_reserved_mem_device_init_by_name(struct device *, struct device_node *, const char *);
403:	void of_reserved_mem_device_release(struct device *);
433:	struct reserved_mem *of_reserved_mem_lookup(struct device_node *);
83:	static int __reserved_mem_alloc_size(unsigned long, const char *, phys_addr_t *, phys_addr_t *);
176:	static int __reserved_mem_init_node(struct reserved_mem *);
222:	static void __rmem_check_for_overlap(void);
199:	static int __rmem_cmp(const void *, const void *);
33:	static int early_init_dt_alloc_reserved_memory_arch(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, bool, phys_addr_t *);

File drivers/of/platform.c:
714:	void devm_of_platform_depopulate(struct device *);
668:	int devm_of_platform_populate(struct device *);
112:	struct platform_device *of_device_alloc(struct device_node *, const char *, struct device *);
48:	struct platform_device *of_find_device_by_node(struct device_node *);
413:	int of_platform_bus_probe(struct device_node *, const struct of_device_id *, struct device *);
496:	int of_platform_default_populate(struct device_node *, const struct of_dev_auxdata *, struct device *);
645:	void of_platform_depopulate(struct device *);
210:	struct platform_device *of_platform_device_create(struct device_node *, const char *, struct device *);
612:	int of_platform_device_destroy(struct device *, void *);
464:	int of_platform_populate(struct device_node *, const struct of_device_id *, const struct of_dev_auxdata *, struct device *);
693:	static int devm_of_platform_match(struct device *, void *, void *);
654:	static void devm_of_platform_populate_release(struct device *, void *);
74:	static void of_device_make_bus_id(struct device *);
342:	static int of_platform_bus_create(struct device_node *, const struct of_device_id *, const struct of_dev_auxdata *, struct device *, bool);
516:	static int of_platform_default_populate_init(void);
166:	static struct platform_device *of_platform_device_create_pdata(struct device_node *, const char *, void *, struct device *);
605:	static int of_platform_sync_state_init(void);

File drivers/of/property.c:
711:	struct device_node *of_graph_get_endpoint_by_regs(const struct device_node *, int, int);
814:	int of_graph_get_endpoint_count(const struct device_node *);
642:	struct device_node *of_graph_get_next_endpoint(const struct device_node *, struct device_node *);
610:	struct device_node *of_graph_get_port_by_id(struct device_node *, u32);
749:	struct device_node *of_graph_get_port_parent(struct device_node *);
735:	struct device_node *of_graph_get_remote_endpoint(const struct device_node *);
835:	struct device_node *of_graph_get_remote_node(const struct device_node *, u32, u32);
802:	struct device_node *of_graph_get_remote_port(const struct device_node *);
779:	struct device_node *of_graph_get_remote_port_parent(const struct device_node *);
41:	bool of_graph_is_present(const struct device_node *);
578:	int of_graph_parse_endpoint(const struct device_node *, struct of_endpoint *);
553:	const char *of_prop_next_string(struct property *, const char *);
530:	const __be32 *of_prop_next_u32(struct property *, const __be32 *, u32 *);
71:	int of_property_count_elems_of_size(const struct device_node *, const char *, int);
464:	int of_property_match_string(const struct device_node *, const char *, const char *);
440:	int of_property_read_string(const struct device_node *, const char *, const char **);
503:	int of_property_read_string_helper(const struct device_node *, const char *, const char **, size_t, int);
144:	int of_property_read_u32_index(const struct device_node *, const char *, u32, u32 *);
356:	int of_property_read_u64(const struct device_node *, const char *, u64 *);
178:	int of_property_read_u64_index(const struct device_node *, const char *, u32, u64 *);
268:	int of_property_read_variable_u16_array(const struct device_node *, const char *, u16 *, size_t, size_t);
315:	int of_property_read_variable_u32_array(const struct device_node *, const char *, u32 *, size_t, size_t);
393:	int of_property_read_variable_u64_array(const struct device_node *, const char *, u64 *, size_t, size_t);
218:	int of_property_read_variable_u8_array(const struct device_node *, const char *, u8 *, size_t, size_t);
1488:	static int of_fwnode_add_links(struct fwnode_handle *);
879:	static bool of_fwnode_device_dma_supported(const struct fwnode_handle *);
885:	static enum dev_dma_attr of_fwnode_device_get_dma_attr(const struct fwnode_handle *);
1059:	static const void *of_fwnode_device_get_match_data(const struct fwnode_handle *, const struct device *);
874:	static bool of_fwnode_device_is_available(const struct fwnode_handle *);
864:	static struct fwnode_handle *of_fwnode_get(struct fwnode_handle *);
936:	static const char *of_fwnode_get_name(const struct fwnode_handle *);
941:	static const char *of_fwnode_get_name_prefix(const struct fwnode_handle *);
965:	static struct fwnode_handle *of_fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
957:	static struct fwnode_handle *of_fwnode_get_next_child_node(const struct fwnode_handle *, struct fwnode_handle *);
951:	static struct fwnode_handle *of_fwnode_get_parent(const struct fwnode_handle *);
979:	static int of_fwnode_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
1011:	static struct fwnode_handle *of_fwnode_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
1026:	static struct fwnode_handle *of_fwnode_graph_get_port_parent(struct fwnode_handle *);
1019:	static struct fwnode_handle *of_fwnode_graph_get_remote_endpoint(const struct fwnode_handle *);
1042:	static int of_fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
1473:	static void *of_fwnode_iomap(struct fwnode_handle *, int);
1482:	static int of_fwnode_irq_get(const struct fwnode_handle *, unsigned int);
893:	static bool of_fwnode_property_present(const struct fwnode_handle *, const char *);
899:	static int of_fwnode_property_read_int_array(const struct fwnode_handle *, const char *, unsigned int, void *, size_t);
925:	static int of_fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
869:	static void of_fwnode_put(struct fwnode_handle *);
1326:	static struct device_node *parse_backlight(struct device_node *, const char *, int);
1300:	static struct device_node *parse_clocks(struct device_node *, const char *, int);
1306:	static struct device_node *parse_dmas(struct device_node *, const char *, int);
1309:	static struct device_node *parse_extcon(struct device_node *, const char *, int);
1328:	static struct device_node *parse_gpio(struct device_node *, const char *, int);
1349:	static struct device_node *parse_gpio_compat(struct device_node *, const char *, int);
1330:	static struct device_node *parse_gpios(struct device_node *, const char *, int);
1308:	static struct device_node *parse_hwlocks(struct device_node *, const char *, int);
1301:	static struct device_node *parse_interconnects(struct device_node *, const char *, int);
1305:	static struct device_node *parse_interrupt_parent(struct device_node *, const char *, int);
1371:	static struct device_node *parse_interrupts(struct device_node *, const char *, int);
1304:	static struct device_node *parse_io_channels(struct device_node *, const char *, int);
1340:	static struct device_node *parse_iommu_maps(struct device_node *, const char *, int);
1302:	static struct device_node *parse_iommus(struct device_node *, const char *, int);
1325:	static struct device_node *parse_leds(struct device_node *, const char *, int);
1303:	static struct device_node *parse_mboxes(struct device_node *, const char *, int);
1310:	static struct device_node *parse_nvmem_cells(struct device_node *, const char *, int);
1311:	static struct device_node *parse_phys(struct device_node *, const char *, int);
1313:	static struct device_node *parse_pinctrl0(struct device_node *, const char *, int);
1314:	static struct device_node *parse_pinctrl1(struct device_node *, const char *, int);
1315:	static struct device_node *parse_pinctrl2(struct device_node *, const char *, int);
1316:	static struct device_node *parse_pinctrl3(struct device_node *, const char *, int);
1317:	static struct device_node *parse_pinctrl4(struct device_node *, const char *, int);
1318:	static struct device_node *parse_pinctrl5(struct device_node *, const char *, int);
1319:	static struct device_node *parse_pinctrl6(struct device_node *, const char *, int);
1320:	static struct device_node *parse_pinctrl7(struct device_node *, const char *, int);
1321:	static struct device_node *parse_pinctrl8(struct device_node *, const char *, int);
1307:	static struct device_node *parse_power_domains(struct device_node *, const char *, int);
1323:	static struct device_node *parse_pwms(struct device_node *, const char *, int);
1327:	static struct device_node *parse_regulators(struct device_node *, const char *, int);
1322:	static struct device_node *parse_remote_endpoint(struct device_node *, const char *, int);
1324:	static struct device_node *parse_resets(struct device_node *, const char *, int);
1312:	static struct device_node *parse_wakeup_parent(struct device_node *, const char *, int);

File drivers/opp/core.c:
1280:	struct opp_device *_add_opp_dev(const struct device *, struct opp_table *);
1426:	struct opp_table *_add_opp_table_indexed(struct device *, int, bool);
84:	struct opp_table *_find_opp_table(struct device *);
401:	int _get_opp_count(struct opp_table *);
1357:	void _get_opp_table_kref(struct opp_table *);
1872:	int _opp_add(struct device *, struct dev_pm_opp *, struct opp_table *);
1932:	int _opp_add_v1(struct opp_table *, struct device *, unsigned long, long, bool);
1699:	struct dev_pm_opp *_opp_allocate(struct opp_table *);
1788:	int _opp_compare_key(struct opp_table *, struct dev_pm_opp *, struct dev_pm_opp *);
1538:	void _opp_free(struct dev_pm_opp *);
1658:	bool _opp_remove_all_static(struct opp_table *);
1847:	void _required_opps_available(struct dev_pm_opp *, int);
2747:	int dev_pm_opp_add(struct device *, unsigned long, unsigned long);
2854:	int dev_pm_opp_adjust_voltage(struct device *, unsigned long, unsigned long, unsigned long, unsigned long);
2565:	void dev_pm_opp_clear_config(int);
850:	int dev_pm_opp_config_clks_simple(struct device *, struct opp_table *, struct dev_pm_opp *, void *, bool);
2950:	int dev_pm_opp_disable(struct device *, unsigned long);
2930:	int dev_pm_opp_enable(struct device *, unsigned long);
749:	struct dev_pm_opp *dev_pm_opp_find_bw_ceil(struct device *, unsigned int *, int);
780:	struct dev_pm_opp *dev_pm_opp_find_bw_floor(struct device *, unsigned int *, int);
649:	struct dev_pm_opp *dev_pm_opp_find_freq_ceil(struct device *, unsigned long *);
616:	struct dev_pm_opp *dev_pm_opp_find_freq_exact(struct device *, unsigned long, bool);
674:	struct dev_pm_opp *dev_pm_opp_find_freq_floor(struct device *, unsigned long *);
718:	struct dev_pm_opp *dev_pm_opp_find_level_ceil(struct device *, unsigned int *);
696:	struct dev_pm_opp *dev_pm_opp_find_level_exact(struct device *, unsigned int);
1561:	void dev_pm_opp_get(struct dev_pm_opp *);
189:	unsigned long dev_pm_opp_get_freq(struct dev_pm_opp *);
210:	unsigned int dev_pm_opp_get_level(struct dev_pm_opp *);
274:	unsigned long dev_pm_opp_get_max_clock_latency(struct device *);
369:	unsigned long dev_pm_opp_get_max_transition_latency(struct device *);
297:	unsigned long dev_pm_opp_get_max_volt_latency(struct device *);
425:	int dev_pm_opp_get_opp_count(struct device *);
1482:	struct opp_table *dev_pm_opp_get_opp_table(struct device *);
166:	unsigned long dev_pm_opp_get_power(struct dev_pm_opp *);
230:	unsigned int dev_pm_opp_get_required_pstate(struct dev_pm_opp *, unsigned int);
143:	int dev_pm_opp_get_supplies(struct dev_pm_opp *, struct dev_pm_opp_supply *);
383:	unsigned long dev_pm_opp_get_suspend_opp_freq(struct device *);
121:	unsigned long dev_pm_opp_get_voltage(struct dev_pm_opp *);
257:	bool dev_pm_opp_is_turbo(struct dev_pm_opp *);
1566:	void dev_pm_opp_put(struct dev_pm_opp *);
1531:	void dev_pm_opp_put_opp_table(struct opp_table *);
2963:	int dev_pm_opp_register_notifier(struct device *, struct notifier_block *);
1579:	void dev_pm_opp_remove(struct device *, unsigned long);
1684:	void dev_pm_opp_remove_all_dynamic(struct device *);
3012:	void dev_pm_opp_remove_table(struct device *);
2450:	int dev_pm_opp_set_config(struct device *, struct dev_pm_opp_config *);
1253:	int dev_pm_opp_set_opp(struct device *, struct dev_pm_opp *);
1176:	int dev_pm_opp_set_rate(struct device *, unsigned long);
3049:	int dev_pm_opp_sync_regulators(struct device *);
2987:	int dev_pm_opp_unregister_notifier(struct device *, struct notifier_block *);
2679:	int dev_pm_opp_xlate_performance_state(struct opp_table *, struct opp_table *, unsigned int);
2625:	struct dev_pm_opp *dev_pm_opp_xlate_required_opp(struct opp_table *, struct opp_table *, struct dev_pm_opp *);
2599:	int devm_pm_opp_set_config(struct device *, struct dev_pm_opp_config *);
473:	static bool _compare_ceil(struct dev_pm_opp **, struct dev_pm_opp *, unsigned long, unsigned long);
462:	static bool _compare_exact(struct dev_pm_opp **, struct dev_pm_opp *, unsigned long, unsigned long);
484:	static bool _compare_floor(struct dev_pm_opp **, struct dev_pm_opp *, unsigned long, unsigned long);
2296:	static void _detach_genpd(struct opp_table *);
1039:	static int _disable_opp_table(struct device *, struct opp_table *);
1014:	static void _find_current_opp(struct device *, struct opp_table *);
624:	static struct dev_pm_opp *_find_freq_ceil(struct opp_table *, unsigned long *);
529:	static struct dev_pm_opp *_find_key(struct device *, unsigned long *, int, bool, unsigned long (*)(struct dev_pm_opp *, int), bool (*)(struct dev_pm_opp **, struct dev_pm_opp *, unsigned long, unsigned long), bool (*)(struct opp_table *));
59:	static struct opp_table *_find_opp_table_unlocked(struct device *);
2337:	static int _opp_attach_genpd(struct opp_table *, struct device *, const char * const *, struct device ***);
2414:	static void _opp_clear_config(struct opp_config_data *);
818:	static int _opp_config_clk_single(struct device *, struct opp_table *, struct dev_pm_opp *, void *, bool);
880:	static int _opp_config_regulator_single(struct device *, struct dev_pm_opp *, struct dev_pm_opp *, struct regulator **, unsigned int);
1644:	static void _opp_remove_all(struct opp_table *, bool);
2780:	static int _opp_set_availability(struct device *, unsigned long, bool);
495:	static struct dev_pm_opp *_opp_table_find_key(struct opp_table *, unsigned long *, int, bool, unsigned long (*)(struct dev_pm_opp *, int), bool (*)(struct dev_pm_opp **, struct dev_pm_opp *, unsigned long, unsigned long), bool (*)(struct opp_table *));
456:	static unsigned long _read_bw(struct dev_pm_opp *, int);
446:	static unsigned long _read_freq(struct dev_pm_opp *, int);
451:	static unsigned long _read_level(struct dev_pm_opp *, int);
1067:	static int _set_opp(struct device *, struct opp_table *, struct dev_pm_opp *, void *, bool);
957:	static int _set_required_opps(struct device *, struct opp_table *, struct dev_pm_opp *, bool);
107:	static bool assert_single_clk(struct opp_table *);
2584:	static void devm_pm_opp_config_release(void *);

File drivers/opp/cpu.c:
108:	void _dev_pm_opp_cpumask_remove_table(const struct cpumask *, int);
139:	void dev_pm_opp_cpumask_remove_table(const struct cpumask *);
205:	int dev_pm_opp_get_sharing_cpus(struct device *, struct cpumask *);
155:	int dev_pm_opp_set_sharing_cpus(struct device *, const struct cpumask *);

File drivers/opp/debugfs.c:
127:	void opp_debug_create_one(struct dev_pm_opp *, struct opp_table *);
206:	void opp_debug_register(struct opp_device *, struct opp_table *);
31:	void opp_debug_remove_one(struct dev_pm_opp *);
255:	void opp_debug_unregister(struct opp_device *, struct opp_table *);
36:	static ssize_t bw_name_read(struct file *, char *, size_t, loff_t *);
273:	static int opp_debug_init(void);

File drivers/opp/of.c:
42:	struct opp_table *_managed_opp(struct device *, int);
278:	void _of_clear_opp(struct opp_table *, struct dev_pm_opp *);
247:	void _of_clear_opp_table(struct opp_table *);
208:	void _of_init_opp_table(struct opp_table *, struct device *, int);
1410:	struct device_node *dev_pm_opp_get_of_node(struct dev_pm_opp *);
1192:	int dev_pm_opp_of_add_table(struct device *);
1208:	int dev_pm_opp_of_add_table_indexed(struct device *, int);
1248:	int dev_pm_opp_of_cpumask_add_table(const struct cpumask *);
1236:	void dev_pm_opp_of_cpumask_remove_table(const struct cpumask *);
461:	int dev_pm_opp_of_find_icc_paths(struct device *, struct opp_table *);
36:	struct device_node *dev_pm_opp_of_get_opp_desc_node(struct device *);
1305:	int dev_pm_opp_of_get_sharing_cpus(struct device *, struct cpumask *);
1533:	int dev_pm_opp_of_register_em(struct device *, struct cpumask *);
740:	void dev_pm_opp_of_remove_table(struct device *);
1169:	int devm_pm_opp_of_add_table(struct device *);
1221:	int devm_pm_opp_of_add_table_indexed(struct device *, int);
1369:	int of_get_required_opp_performance_state(struct device_node *, int);
1099:	static int _of_add_table_indexed(struct device *, int);
581:	static u32 *_parse_named_prop(struct dev_pm_opp *, struct device *, struct opp_table *, const char *, bool *);
790:	static int _read_bw(struct dev_pm_opp *, struct opp_table *, struct device_node *, bool);
1134:	static void devm_pm_opp_of_table_release(void *);

File drivers/pci/of.c:
619:	int of_pci_get_max_link_speed(struct device_node *);
647:	u32 of_pci_get_slot_power_limit(struct device_node *, u8 *, u8 *);

File drivers/perf/arm-cci.c:
678:	static void __cci_pmu_enable_sync(struct cci_pmu *);
312:	static int cci400_get_event_idx(struct cci_pmu *, struct cci_pmu_hw_events *, unsigned long);
304:	static ssize_t cci400_pmu_cycle_event_show(struct device *, struct device_attribute *, char *);
334:	static int cci400_validate_hw_event(struct cci_pmu *, unsigned long);
541:	static int cci500_validate_hw_event(struct cci_pmu *, unsigned long);
592:	static int cci550_validate_hw_event(struct cci_pmu *, unsigned long);
522:	static ssize_t cci5xx_pmu_global_event_show(struct device *, struct device_attribute *, char *);
949:	static void cci5xx_pmu_write_counters(struct cci_pmu *, unsigned long *);
1189:	static int cci_pmu_add(struct perf_event *, int);
1214:	static void cci_pmu_del(struct perf_event *, int);
1111:	static void cci_pmu_disable(struct pmu *);
1725:	static void cci_pmu_driver_exit(void);
1725:	static int cci_pmu_driver_init(void);
1095:	static void cci_pmu_enable(struct pmu *);
1316:	static int cci_pmu_event_init(struct perf_event *);
702:	static ssize_t cci_pmu_event_show(struct device *, struct device_attribute *, char *);
694:	static ssize_t cci_pmu_format_show(struct device *, struct device_attribute *, char *);
1068:	static int cci_pmu_get_hw(struct cci_pmu *);
1443:	static int cci_pmu_offline_cpu(unsigned int);
1641:	static int cci_pmu_probe(struct platform_device *);
1703:	static int cci_pmu_remove(struct platform_device *);
1132:	static void cci_pmu_start(struct perf_event *, int);
1166:	static void cci_pmu_stop(struct perf_event *, int);
1083:	static void hw_perf_event_destroy(struct perf_event *);
1361:	static ssize_t pmu_cpumask_attr_show(struct device *, struct device_attribute *, char *);
1027:	static irqreturn_t pmu_handle_irq(int, void *);
1001:	static void pmu_read(struct perf_event *);

File drivers/perf/arm-ccn.c:
1564:	static void arm_ccn_exit(void);
1545:	static int arm_ccn_init(void);
1428:	static irqreturn_t arm_ccn_irq_handler(int, void *);
468:	static ssize_t arm_ccn_pmu_cmp_mask_show(struct device *, struct device_attribute *, char *);
477:	static ssize_t arm_ccn_pmu_cmp_mask_store(struct device *, struct device_attribute *, const char *, size_t);
545:	static ssize_t arm_ccn_pmu_cpumask_show(struct device *, struct device_attribute *, char *);
1148:	static void arm_ccn_pmu_disable(struct pmu *);
1139:	static void arm_ccn_pmu_enable(struct pmu *);
1093:	static int arm_ccn_pmu_event_add(struct perf_event *, int);
1122:	static void arm_ccn_pmu_event_del(struct perf_event *, int);
713:	static int arm_ccn_pmu_event_init(struct perf_event *);
1134:	static void arm_ccn_pmu_event_read(struct perf_event *);
323:	static ssize_t arm_ccn_pmu_event_show(struct device *, struct device_attribute *, char *);
917:	static void arm_ccn_pmu_event_start(struct perf_event *, int);
930:	static void arm_ccn_pmu_event_stop(struct perf_event *, int);
365:	static umode_t arm_ccn_pmu_events_is_visible(struct kobject *, struct attribute *, int);
218:	static ssize_t arm_ccn_pmu_format_show(struct device *, struct device_attribute *, char *);
1220:	static int arm_ccn_pmu_init(struct arm_ccn *);
1200:	static int arm_ccn_pmu_offline_cpu(unsigned int, struct hlist_node *);
1157:	static irqreturn_t arm_ccn_pmu_overflow_handler(struct arm_ccn_dt *);
1185:	static enum hrtimer_restart arm_ccn_pmu_timer_handler(struct hrtimer *);
1460:	static int arm_ccn_probe(struct platform_device *);
1518:	static int arm_ccn_remove(struct platform_device *);

File drivers/perf/arm-cmn.c:
1753:	static int arm_cmn_commit_txn(struct pmu *);
1151:	static ssize_t arm_cmn_cpumask_show(struct device *, struct device_attribute *, char *);
524:	static void arm_cmn_debugfs_init(struct arm_cmn *, int);
1748:	static void arm_cmn_end_txn(struct pmu *);
1626:	static int arm_cmn_event_add(struct perf_event *, int);
619:	static umode_t arm_cmn_event_attr_is_visible(struct kobject *, struct attribute *, int);
1601:	static void arm_cmn_event_clear(struct arm_cmn *, struct perf_event *, int);
1723:	static void arm_cmn_event_del(struct perf_event *, int);
1527:	static int arm_cmn_event_init(struct perf_event *);
1284:	static void arm_cmn_event_read(struct perf_event *);
596:	static ssize_t arm_cmn_event_show(struct device *, struct device_attribute *, char *);
1348:	static void arm_cmn_event_start(struct perf_event *, int);
1379:	static void arm_cmn_event_stop(struct perf_event *, int);
2385:	static void arm_cmn_exit(void);
1104:	static ssize_t arm_cmn_format_show(struct device *, struct device_attribute *, char *);
1803:	static irqreturn_t arm_cmn_handle_irq(int, void *);
2363:	static int arm_cmn_init(void);
522:	static int arm_cmn_map_open(struct inode *, struct file *);
460:	static int arm_cmn_map_show(struct seq_file *, void *);
1896:	static int arm_cmn_node_cmp(const void *, const void *);
1226:	static void arm_cmn_pmu_disable(struct pmu *);
1221:	static void arm_cmn_pmu_enable(struct pmu *);
1781:	static int arm_cmn_pmu_offline_cpu(unsigned int, struct hlist_node *);
1769:	static int arm_cmn_pmu_online_cpu(unsigned int, struct hlist_node *);
2243:	static int arm_cmn_probe(struct platform_device *);
2320:	static int arm_cmn_remove(struct platform_device *);
437:	static void arm_cmn_show_logid(struct seq_file *, int, int, int, int);
1743:	static void arm_cmn_start_txn(struct pmu *, unsigned int);
1451:	static int arm_cmn_validate_group(struct arm_cmn *, struct perf_event *);

File drivers/perf/arm_dsu_pmu.c:
440:	static int dsu_pmu_add(struct perf_event *, int);
812:	static int dsu_pmu_cpu_online(unsigned int, struct hlist_node *);
830:	static int dsu_pmu_cpu_teardown(unsigned int, struct hlist_node *);
151:	static ssize_t dsu_pmu_cpumask_show(struct device *, struct device_attribute *, char *);
466:	static void dsu_pmu_del(struct perf_event *, int);
706:	static int dsu_pmu_device_probe(struct platform_device *);
777:	static int dsu_pmu_device_remove(struct platform_device *);
496:	static void dsu_pmu_disable(struct pmu *);
479:	static void dsu_pmu_enable(struct pmu *);
198:	static umode_t dsu_pmu_event_attr_is_visible(struct kobject *, struct attribute *, int);
543:	static int dsu_pmu_event_init(struct perf_event *);
349:	static void dsu_pmu_event_update(struct perf_event *);
868:	static void dsu_pmu_exit(void);
390:	static irqreturn_t dsu_pmu_handle_irq(int, void *);
850:	static int dsu_pmu_init(void);
364:	static void dsu_pmu_read(struct perf_event *);
381:	static void dsu_pmu_set_event_period(struct perf_event *);
415:	static void dsu_pmu_start(struct perf_event *, int);
429:	static void dsu_pmu_stop(struct perf_event *, int);
133:	static ssize_t dsu_pmu_sysfs_event_show(struct device *, struct device_attribute *, char *);
142:	static ssize_t dsu_pmu_sysfs_format_show(struct device *, struct device_attribute *, char *);
525:	static bool dsu_pmu_validate_group(struct perf_event *);

File drivers/perf/arm_pmu.c:
860:	struct arm_pmu *armpmu_alloc(void);
198:	int armpmu_event_set_period(struct perf_event *);
240:	u64 armpmu_event_update(struct perf_event *);
914:	void armpmu_free(struct arm_pmu *);
609:	void armpmu_free_irq(int, int);
172:	int armpmu_map_event(struct perf_event *, const unsigned int (*)[10], const unsigned int (*)[7][3][2], u32);
920:	int armpmu_register(struct arm_pmu *);
622:	int armpmu_request_irq(int, int);
702:	static int arm_perf_starting_cpu(unsigned int, struct hlist_node *);
721:	static int arm_perf_teardown_cpu(unsigned int, struct hlist_node *);
948:	static int arm_pmu_hp_init(void);
327:	static int armpmu_add(struct perf_event *, int);
311:	static void armpmu_del(struct perf_event *, int);
534:	static void armpmu_disable(struct pmu *);
83:	static void armpmu_disable_percpu_pmunmi(unsigned int);
417:	static irqreturn_t armpmu_dispatch_irq(int, void *);
520:	static void armpmu_enable(struct pmu *);
59:	static void armpmu_enable_percpu_pmuirq(unsigned int);
77:	static void armpmu_enable_percpu_pmunmi(unsigned int);
498:	static int armpmu_event_init(struct perf_event *);
550:	static bool armpmu_filter(struct pmu *, int);
64:	static void armpmu_free_percpu_pmuirq(unsigned int, int, void *);
89:	static void armpmu_free_percpu_pmunmi(unsigned int, int, void *);
37:	static void armpmu_free_pmuirq(unsigned int, int, void *);
48:	static void armpmu_free_pmunmi(unsigned int, int, void *);
264:	static void armpmu_read(struct perf_event *);
286:	static void armpmu_start(struct perf_event *, int);
270:	static void armpmu_stop(struct perf_event *, int);
562:	static ssize_t cpus_show(struct device *, struct device_attribute *, char *);

File drivers/perf/arm_pmu_platform.c:
187:	int arm_pmu_device_probe(struct platform_device *, const struct of_device_id *, const struct pmu_probe_info *);

File drivers/perf/arm_spe_pmu.c:
955:	static void __arm_spe_pmu_dev_probe(void *);
404:	static u64 __arm_spe_pmu_next_off(struct perf_output_handle *);
493:	static void arm_spe_perf_aux_output_begin(struct perf_output_handle *, struct perf_event *);
817:	static int arm_spe_pmu_add(struct perf_event *, int);
555:	static enum arm_spe_pmu_buf_fault_action arm_spe_pmu_buf_get_fault_act(struct perf_output_handle *);
140:	static ssize_t arm_spe_pmu_cap_show(struct device *, struct device_attribute *, char *);
1104:	static int arm_spe_pmu_cpu_startup(unsigned int, struct hlist_node *);
1116:	static int arm_spe_pmu_cpu_teardown(unsigned int, struct hlist_node *);
838:	static void arm_spe_pmu_del(struct perf_event *, int);
1157:	static void arm_spe_pmu_dev_teardown(struct arm_spe_pmu *);
1198:	static int arm_spe_pmu_device_probe(struct platform_device *);
1245:	static int arm_spe_pmu_device_remove(struct platform_device *);
689:	static int arm_spe_pmu_event_init(struct perf_event *);
1284:	static void arm_spe_pmu_exit(void);
898:	static void arm_spe_pmu_free_aux(void *);
1266:	static int arm_spe_pmu_init(void);
624:	static irqreturn_t arm_spe_pmu_irq_handler(int, void *);
843:	static void arm_spe_pmu_read(struct perf_event *);
847:	static void *arm_spe_pmu_setup_aux(struct perf_event *, void **, int, bool);
742:	static void arm_spe_pmu_start(struct perf_event *, int);
776:	static void arm_spe_pmu_stop(struct perf_event *, int);
230:	static ssize_t branch_filter_show(struct device *, struct device_attribute *, char *);
254:	static ssize_t cpumask_show(struct device *, struct device_attribute *, char *);
233:	static ssize_t event_filter_show(struct device *, struct device_attribute *, char *);
229:	static ssize_t jitter_show(struct device *, struct device_attribute *, char *);
231:	static ssize_t load_filter_show(struct device *, struct device_attribute *, char *);
234:	static ssize_t min_latency_show(struct device *, struct device_attribute *, char *);
227:	static ssize_t pa_enable_show(struct device *, struct device_attribute *, char *);
228:	static ssize_t pct_enable_show(struct device *, struct device_attribute *, char *);
232:	static ssize_t store_filter_show(struct device *, struct device_attribute *, char *);
226:	static ssize_t ts_enable_show(struct device *, struct device_attribute *, char *);

File drivers/phy/cadence/phy-cadence-sierra.c:
388:	static int cdns_regmap_read(void *, unsigned int, unsigned int *);
378:	static int cdns_regmap_write(void *, unsigned int, unsigned int);
891:	static int cdns_sierra_clk_register(struct cdns_sierra_phy *);
810:	static void cdns_sierra_derived_refclk_disable(struct clk_hw *);
798:	static int cdns_sierra_derived_refclk_enable(struct clk_hw *);
817:	static int cdns_sierra_derived_refclk_is_enabled(struct clk_hw *);
2529:	static void cdns_sierra_driver_exit(void);
2529:	static int cdns_sierra_driver_init(void);
918:	static int cdns_sierra_get_optional(struct cdns_sierra_inst *, struct device_node *);
650:	static int cdns_sierra_noop_phy_on(struct phy *);
1169:	static int cdns_sierra_phy_clk(struct cdns_sierra_phy *);
1239:	static int cdns_sierra_phy_configure_multilink(struct cdns_sierra_phy *);
1209:	static void cdns_sierra_phy_disable_clocks(struct cdns_sierra_phy *);
1189:	static int cdns_sierra_phy_enable_clocks(struct cdns_sierra_phy *);
1217:	static int cdns_sierra_phy_get_resets(struct cdns_sierra_phy *, struct device *);
505:	static int cdns_sierra_phy_init(struct phy *);
626:	static int cdns_sierra_phy_off(struct phy *);
574:	static int cdns_sierra_phy_on(struct phy *);
1354:	static int cdns_sierra_phy_probe(struct platform_device *);
1516:	static int cdns_sierra_phy_remove(struct platform_device *);
633:	static int cdns_sierra_phy_reset(struct phy *);
662:	static u8 cdns_sierra_pll_mux_get_parent(struct clk_hw *);
686:	static int cdns_sierra_pll_mux_set_parent(struct clk_hw *, u8);

File drivers/phy/cadence/phy-cadence-torrent.c:
451:	static int cdns_regmap_dptx_read(void *, unsigned int, unsigned int *);
440:	static int cdns_regmap_dptx_write(void *, unsigned int, unsigned int);
431:	static int cdns_regmap_read(void *, unsigned int, unsigned int *);
421:	static int cdns_regmap_write(void *, unsigned int, unsigned int);
2481:	static int cdns_torrent_clk(struct cdns_torrent_phy *);
1657:	static void cdns_torrent_derived_refclk_disable(struct clk_hw *);
1647:	static int cdns_torrent_derived_refclk_enable(struct clk_hw *);
1665:	static int cdns_torrent_derived_refclk_is_enabled(struct clk_hw *);
1467:	static int cdns_torrent_dp_configure(struct phy *, union phy_configure_opts *);
1145:	static void cdns_torrent_dp_pma_cmn_rate(struct cdns_torrent_phy *, u32, u32);
898:	static void cdns_torrent_dp_pma_cmn_vco_cfg_100mhz(struct cdns_torrent_phy *, u32, bool);
674:	static void cdns_torrent_dp_pma_cmn_vco_cfg_19_2mhz(struct cdns_torrent_phy *, u32, bool);
794:	static void cdns_torrent_dp_pma_cmn_vco_cfg_25mhz(struct cdns_torrent_phy *, u32, bool);
1954:	static int cdns_torrent_dp_regfield_init(struct cdns_torrent_phy *);
2039:	static int cdns_torrent_dp_regmap_init(struct cdns_torrent_phy *);
1096:	static int cdns_torrent_dp_run(struct cdns_torrent_phy *, u32);
983:	static int cdns_torrent_dp_set_pll_en(struct cdns_torrent_phy *, struct phy_configure_opts_dp *, bool);
1034:	static int cdns_torrent_dp_set_power_state(struct cdns_torrent_phy *, u32, enum phy_powerstate);
1128:	static int cdns_torrent_dp_wait_pma_cmn_ready(struct cdns_torrent_phy *);
2260:	static int cdns_torrent_noop_phy_on(struct phy *);
2274:	static int cdns_torrent_phy_configure_multilink(struct cdns_torrent_phy *);
4717:	static void cdns_torrent_phy_driver_exit(void);
4717:	static int cdns_torrent_phy_driver_init(void);
2142:	static int cdns_torrent_phy_init(struct phy *);
1544:	static int cdns_torrent_phy_off(struct phy *);
1502:	static int cdns_torrent_phy_on(struct phy *);
2525:	static int cdns_torrent_phy_probe(struct platform_device *);
2780:	static int cdns_torrent_phy_remove(struct platform_device *);
1740:	static void cdns_torrent_received_refclk_disable(struct clk_hw *);
1731:	static int cdns_torrent_received_refclk_enable(struct clk_hw *);
1747:	static int cdns_torrent_received_refclk_is_enabled(struct clk_hw *);
1825:	static void cdns_torrent_refclk_driver_disable(struct clk_hw *);
1814:	static int cdns_torrent_refclk_driver_enable(struct clk_hw *);
1842:	static u8 cdns_torrent_refclk_driver_get_parent(struct clk_hw *);
1832:	static int cdns_torrent_refclk_driver_is_enabled(struct clk_hw *);
1851:	static int cdns_torrent_refclk_driver_set_parent(struct clk_hw *, u8);
2460:	static int cdns_torrent_reset(struct cdns_torrent_phy *);

File drivers/phy/phy-core-mipi-dphy.c:
107:	int phy_mipi_dphy_config_validate(struct phy_configure_opts_mipi_dphy *);
81:	int phy_mipi_dphy_get_default_config(unsigned long, unsigned int, unsigned int, struct phy_configure_opts_mipi_dphy *);
91:	int phy_mipi_dphy_get_default_config_for_hsclk(unsigned long long, unsigned int, struct phy_configure_opts_mipi_dphy *);

File drivers/phy/phy-core.c:
1145:	struct phy_provider *__devm_of_phy_provider_register(struct device *, struct device_node *, struct module *, struct phy *(*)(struct device *, struct of_phandle_args *));
1082:	struct phy_provider *__of_phy_provider_register(struct device *, struct device_node *, struct module *, struct phy *(*)(struct device *, struct of_phandle_args *));
854:	struct phy *devm_of_phy_get(struct device *, struct device_node *, const char *);
894:	struct phy *devm_of_phy_get_by_index(struct device *, struct device_node *, int);
1196:	void devm_of_phy_provider_unregister(struct device *, struct phy_provider *);
1013:	struct phy *devm_phy_create(struct device *, struct device_node *, const struct phy_ops *);
1055:	void devm_phy_destroy(struct device *, struct phy *);
800:	struct phy *devm_phy_get(struct device *, const char *);
833:	struct phy *devm_phy_optional_get(struct device *, const char *);
679:	void devm_phy_put(struct device *, struct phy *);
615:	struct phy *of_phy_get(struct device_node *, const char *);
1175:	void of_phy_provider_unregister(struct phy_provider *);
642:	void of_phy_put(struct phy *);
701:	struct phy *of_phy_simple_xlate(struct device *, struct of_phandle_args *);
475:	int phy_calibrate(struct phy *);
501:	int phy_configure(struct phy *, union phy_configure_opts *);
937:	struct phy *phy_create(struct device *, struct device_node *, const struct phy_ops *);
64:	int phy_create_lookup(struct phy *, const char *, const char *);
1040:	void phy_destroy(struct phy *);
283:	int phy_exit(struct phy *);
732:	struct phy *phy_get(struct device *, const char *);
243:	int phy_init(struct phy *);
779:	struct phy *phy_optional_get(struct device *, const char *);
208:	void phy_pm_runtime_allow(struct phy *);
220:	void phy_pm_runtime_forbid(struct phy *);
148:	int phy_pm_runtime_get(struct phy *);
166:	int phy_pm_runtime_get_sync(struct phy *);
184:	int phy_pm_runtime_put(struct phy *);
196:	int phy_pm_runtime_put_sync(struct phy *);
370:	int phy_power_off(struct phy *);
320:	int phy_power_on(struct phy *);
664:	void phy_put(struct device *, struct phy *);
96:	void phy_remove_lookup(struct phy *, const char *, const char *);
444:	int phy_reset(struct phy *);
414:	int phy_set_media(struct phy *, enum phy_media);
397:	int phy_set_mode_ext(struct phy *, enum phy_mode, int);
429:	int phy_set_speed(struct phy *, int);
535:	int phy_validate(struct phy *, enum phy_mode, int, union phy_configure_opts *);
565:	static struct phy *_of_phy_get(struct device_node *, int);
42:	static void devm_phy_consume(struct device *, void *);
49:	static int devm_phy_match(struct device *, void *, void *);
35:	static void devm_phy_provider_release(struct device *, void *);
28:	static void devm_phy_release(struct device *, void *);
1225:	static int phy_core_init(void);
1214:	static void phy_release(struct device *);

File drivers/phy/phy-xgene.c:
624:	static void cmu_toggle1to0(struct xgene_phy_ctx *, enum cmu_type_t, u32, u32);
593:	static void cmu_wr(struct xgene_phy_ctx *, enum cmu_type_t, u32, u32);
683:	static void serdes_clrbits(struct xgene_phy_ctx *, int, u32, u32);
693:	static void serdes_setbits(struct xgene_phy_ctx *, int, u32, u32);
657:	static void serdes_wr(struct xgene_phy_ctx *, int, u32, u32);
1717:	static void xgene_phy_driver_exit(void);
1717:	static int xgene_phy_driver_init(void);
1579:	static int xgene_phy_hw_init(struct phy *);
1252:	static int xgene_phy_hw_init_sata(struct xgene_phy_ctx *, enum clk_type_t, int);
1644:	static int xgene_phy_probe(struct platform_device *);
1612:	static struct phy *xgene_phy_xlate(struct device *, struct of_phandle_args *);

File drivers/phy/qualcomm/phy-qcom-usb-hs.c:
287:	static void qcom_usb_hs_phy_driver_exit(void);
287:	static int qcom_usb_hs_phy_driver_init(void);
180:	static int qcom_usb_hs_phy_power_off(struct phy *);
108:	static int qcom_usb_hs_phy_power_on(struct phy *);
202:	static int qcom_usb_hs_phy_probe(struct ulpi *);
42:	static int qcom_usb_hs_phy_set_mode(struct phy *, enum phy_mode, int);
92:	static int qcom_usb_hs_phy_vbus_notifier(struct notifier_block *, unsigned long, void *);

File drivers/phy/ti/phy-am654-serdes.c:
567:	static u8 serdes_am654_clk_mux_get_parent(struct clk_hw *);
581:	static int serdes_am654_clk_mux_set_parent(struct clk_hw *, u8);
864:	static void serdes_am654_driver_exit(void);
864:	static int serdes_am654_driver_init(void);
454:	static int serdes_am654_init(struct phy *);
324:	static int serdes_am654_power_off(struct phy *);
301:	static int serdes_am654_power_on(struct phy *);
752:	static int serdes_am654_probe(struct platform_device *);
488:	static void serdes_am654_release(struct phy *);
845:	static int serdes_am654_remove(struct platform_device *);
468:	static int serdes_am654_reset(struct phy *);
497:	static struct phy *serdes_am654_xlate(struct device *, struct of_phandle_args *);

File drivers/phy/ti/phy-j721e-wiz.c:
905:	static unsigned long wiz_clk_div_recalc_rate(struct clk_hw *, unsigned long);
917:	static long wiz_clk_div_round_rate(struct clk_hw *, unsigned long, unsigned long *);
925:	static int wiz_clk_div_set_rate(struct clk_hw *, unsigned long, unsigned long);
764:	static u8 wiz_clk_mux_get_parent(struct clk_hw *);
774:	static int wiz_clk_mux_set_parent(struct clk_hw *, u8);
993:	static void wiz_clock_cleanup(struct wiz *, struct device_node *);
1619:	static void wiz_driver_exit(void);
1619:	static int wiz_driver_init(void);
697:	static void wiz_phy_en_refclk_disable(struct clk_hw *);
687:	static int wiz_phy_en_refclk_enable(struct clk_hw *);
705:	static int wiz_phy_en_refclk_is_enabled(struct clk_hw *);
1195:	static int wiz_phy_reset_assert(struct reset_controller_dev *, unsigned long);
1230:	static int wiz_phy_reset_deassert(struct reset_controller_dev *, unsigned long);
1396:	static int wiz_probe(struct platform_device *);
1593:	static int wiz_remove(struct platform_device *);

File drivers/pinctrl/core.c:
1362:	struct pinctrl *devm_pinctrl_get(struct device *);
1397:	void devm_pinctrl_put(struct pinctrl *);
2249:	struct pinctrl_dev *devm_pinctrl_register(struct device *, struct pinctrl_desc *, void *);
2283:	int devm_pinctrl_register_and_init(struct device *, struct pinctrl_desc *, void *, struct pinctrl_dev **);
2313:	void devm_pinctrl_unregister(struct device *, struct pinctrl_dev *);
101:	struct pinctrl_dev *get_pinctrl_dev_from_devname(const char *);
123:	struct pinctrl_dev *get_pinctrl_dev_from_of_node(struct device_node *);
145:	int pin_get_from_name(struct pinctrl_dev *, const char *);
168:	const char *pin_get_name(struct pinctrl_dev *, const unsigned int);
404:	void pinctrl_add_gpio_range(struct pinctrl_dev *, struct pinctrl_gpio_range *);
413:	void pinctrl_add_gpio_ranges(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int);
82:	const char *pinctrl_dev_get_devname(struct pinctrl_dev *);
88:	void *pinctrl_dev_get_drvdata(struct pinctrl_dev *);
75:	const char *pinctrl_dev_get_name(struct pinctrl_dev *);
2094:	int pinctrl_enable(struct pinctrl_dev *);
424:	struct pinctrl_dev *pinctrl_find_and_add_gpio_range(const char *, struct pinctrl_gpio_range *);
492:	struct pinctrl_gpio_range *pinctrl_find_gpio_range_from_pin(struct pinctrl_dev *, unsigned int);
463:	struct pinctrl_gpio_range *pinctrl_find_gpio_range_from_pin_nolock(struct pinctrl_dev *, unsigned int);
1514:	int pinctrl_force_default(struct pinctrl_dev *);
1502:	int pinctrl_force_sleep(struct pinctrl_dev *);
628:	int pinctrl_generic_add_group(struct pinctrl_dev *, const char *, int *, int, void *);
584:	struct group_desc *pinctrl_generic_get_group(struct pinctrl_dev *, unsigned int);
525:	int pinctrl_generic_get_group_count(struct pinctrl_dev *);
536:	const char *pinctrl_generic_get_group_name(struct pinctrl_dev *, unsigned int);
557:	int pinctrl_generic_get_group_pins(struct pinctrl_dev *, unsigned int, const unsigned int **, unsigned int *);
667:	int pinctrl_generic_remove_group(struct pinctrl_dev *, unsigned int);
1114:	struct pinctrl *pinctrl_get(struct device *);
445:	int pinctrl_get_group_pins(struct pinctrl_dev *, const char *, const unsigned int **, unsigned int *);
715:	int pinctrl_get_group_selector(struct pinctrl_dev *, const char *);
742:	bool pinctrl_gpio_can_use_line(unsigned int);
866:	int pinctrl_gpio_direction_input(unsigned int);
880:	int pinctrl_gpio_direction_output(unsigned int);
813:	void pinctrl_gpio_free(unsigned int);
778:	int pinctrl_gpio_request(unsigned int);
895:	int pinctrl_gpio_set_config(unsigned int, unsigned long);
1530:	int pinctrl_init_done(struct device *);
1205:	struct pinctrl_state *pinctrl_lookup_state(struct pinctrl *, const char *);
70:	void pinctrl_provide_dummies(void);
1194:	void pinctrl_put(struct pinctrl *);
2131:	struct pinctrl_dev *pinctrl_register(struct pinctrl_desc *, struct device *, void *);
2159:	int pinctrl_register_and_init(struct pinctrl_desc *, struct device *, void *, struct pinctrl_dev **);
1411:	int pinctrl_register_mappings(const struct pinctrl_map *, unsigned int);
510:	void pinctrl_remove_gpio_range(struct pinctrl_dev *, struct pinctrl_gpio_range *);
1573:	int pinctrl_select_default_state(struct device *);
1341:	int pinctrl_select_state(struct pinctrl *, struct pinctrl_state *);
2187:	void pinctrl_unregister(struct pinctrl_dev *);
1481:	void pinctrl_unregister_mappings(const struct pinctrl_map *);
1026:	static struct pinctrl *create_pinctrl(struct device *, struct pinctrl_dev *);
2228:	static int devm_pinctrl_dev_match(struct device *, void *, void *);
2221:	static void devm_pinctrl_dev_release(struct device *, void *);
1382:	static int devm_pinctrl_match(struct device *, void *, void *);
1350:	static void devm_pinctrl_release(struct device *, void *);
1239:	static int pinctrl_commit_state(struct pinctrl *, struct pinctrl_state *);
1787:	static int pinctrl_devices_open(struct inode *, struct file *);
1762:	static int pinctrl_devices_show(struct seq_file *, void *);
1155:	static void pinctrl_free(struct pinctrl *, bool);
184:	static void pinctrl_free_pindescs(struct pinctrl_dev *, const struct pinctrl_pin_desc *, unsigned int);
835:	static int pinctrl_gpio_direction(unsigned int, bool);
1760:	static int pinctrl_gpioranges_open(struct inode *, struct file *);
1728:	static int pinctrl_gpioranges_show(struct seq_file *, void *);
1726:	static int pinctrl_groups_open(struct inode *, struct file *);
1682:	static int pinctrl_groups_show(struct seq_file *, void *);
2320:	static int pinctrl_init(void);
1986:	static struct pinctrl_dev *pinctrl_init_controller(struct pinctrl_desc *, struct device *, void *);
1840:	static int pinctrl_maps_open(struct inode *, struct file *);
1805:	static int pinctrl_maps_show(struct seq_file *, void *);
1886:	static int pinctrl_open(struct inode *, struct file *);
1680:	static int pinctrl_pins_open(struct inode *, struct file *);
1623:	static int pinctrl_pins_show(struct seq_file *, void *);
1842:	static int pinctrl_show(struct seq_file *, void *);

File drivers/pinctrl/devicetree.c:
103:	struct pinctrl_dev *of_pinctrl_get(struct device_node *);
349:	int pinctrl_count_index_with_args(const struct device_node *, const char *);
50:	void pinctrl_dt_free_maps(struct pinctrl *);
196:	int pinctrl_dt_to_map(struct pinctrl *, struct pinctrl_dev *);
408:	int pinctrl_parse_index_with_args(const struct device_node *, const char *, int, struct of_phandle_args *);
65:	static int dt_remember_or_free_map(struct pinctrl *, const char *, struct pinctrl_dev *, struct pinctrl_map *, unsigned int);

File drivers/pinctrl/pinconf-generic.c:
411:	void pinconf_generic_dt_free_map(struct pinctrl_dev *, struct pinctrl_map *, unsigned int);
378:	int pinconf_generic_dt_node_to_map(struct pinctrl_dev *, struct device_node *, struct pinctrl_map **, unsigned int *, enum pinctrl_map_type);
294:	int pinconf_generic_dt_subnode_to_map(struct pinctrl_dev *, struct device_node *, struct pinctrl_map **, unsigned int *, unsigned int *, enum pinctrl_map_type);
131:	void pinconf_generic_dump_config(struct pinctrl_dev *, struct seq_file *, unsigned long);
110:	void pinconf_generic_dump_pins(struct pinctrl_dev *, struct seq_file *, const char *, unsigned int);
241:	int pinconf_generic_parse_dt_config(struct device_node *, struct pinctrl_dev *, unsigned long **, unsigned int *);
56:	static void pinconf_generic_dump_one(struct pinctrl_dev *, struct seq_file *, const char *, unsigned int, const struct pin_config_item *, int, int *);

File drivers/pinctrl/pinconf.c:
56:	int pin_config_get_for_pin(struct pinctrl_dev *, unsigned int, unsigned long *);
70:	int pin_config_group_get(const char *, const char *, unsigned long *);
148:	int pinconf_apply_setting(const struct pinctrl_setting *);
25:	int pinconf_check_ops(struct pinctrl_dev *);
144:	void pinconf_free_setting(const struct pinctrl_setting *);
370:	void pinconf_init_device_debugfs(struct dentry *, struct pinctrl_dev *);
107:	int pinconf_map_to_setting(const struct pinctrl_map *, struct pinctrl_setting *);
200:	int pinconf_set_config(struct pinctrl_dev *, unsigned int, unsigned long *, size_t);
236:	void pinconf_show_map(struct seq_file *, const struct pinctrl_map *);
259:	void pinconf_show_setting(struct seq_file *, const struct pinctrl_setting *);
38:	int pinconf_validate_map(const struct pinctrl_map *, int);
368:	static int pinconf_groups_open(struct inode *, struct file *);
345:	static int pinconf_groups_show(struct seq_file *, void *);
367:	static int pinconf_pins_open(struct inode *, struct file *);
302:	static int pinconf_pins_show(struct seq_file *, void *);

File drivers/pinctrl/pinctrl-single.c:
1988:	static void pcs_driver_exit(void);
1988:	static int pcs_driver_init(void);
316:	static void pcs_dt_free_map(struct pinctrl_dev *, struct pinctrl_map *, unsigned int);
1251:	static int pcs_dt_node_to_map(struct pinctrl_dev *, struct device_node *, struct pinctrl_map **, unsigned int *);
1326:	static void pcs_free_resources(struct pcs_device *);
1520:	static void pcs_irq_chain_handler(struct irq_desc *);
1506:	static irqreturn_t pcs_irq_handler(int, void *);
1571:	static int pcs_irq_init_chained_handler(struct pcs_device *, struct device_node *);
1429:	static void pcs_irq_mask(struct irq_data *);
1455:	static int pcs_irq_set_wake(struct irq_data *, unsigned int);
1440:	static void pcs_irq_unmask(struct irq_data *);
1532:	static int pcs_irqdomain_map(struct irq_domain *, unsigned int, irq_hw_number_t);
294:	static void pcs_pin_dbg_show(struct pinctrl_dev *, struct seq_file *, unsigned int);
660:	static void pcs_pinconf_config_dbg_show(struct pinctrl_dev *, struct seq_file *, unsigned long);
650:	static void pcs_pinconf_dbg_show(struct pinctrl_dev *, struct seq_file *, unsigned int);
483:	static int pcs_pinconf_get(struct pinctrl_dev *, unsigned int, unsigned long *);
655:	static void pcs_pinconf_group_dbg_show(struct pinctrl_dev *, struct seq_file *, unsigned int);
611:	static int pcs_pinconf_group_get(struct pinctrl_dev *, unsigned int, unsigned long *);
632:	static int pcs_pinconf_group_set(struct pinctrl_dev *, unsigned int, unsigned long *, unsigned int);
547:	static int pcs_pinconf_set(struct pinctrl_dev *, unsigned int, unsigned long *, unsigned int);
1776:	static int pcs_probe(struct platform_device *);
243:	static unsigned int pcs_readb(void *);
253:	static unsigned int pcs_readl(void *);
248:	static unsigned int pcs_readw(void *);
1927:	static int pcs_remove(struct platform_device *);
405:	static int pcs_request_gpio(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int);
362:	static int pcs_set_mux(struct pinctrl_dev *, unsigned int, unsigned int);
258:	static void pcs_writeb(unsigned int, void *);
268:	static void pcs_writel(unsigned int, void *);
263:	static void pcs_writew(unsigned int, void *);

File drivers/pinctrl/pinctrl-utils.c:
86:	int pinctrl_utils_add_config(struct pinctrl_dev *, unsigned long **, unsigned int *, unsigned long);
60:	int pinctrl_utils_add_map_configs(struct pinctrl_dev *, struct pinctrl_map **, unsigned int *, unsigned int *, const char *, unsigned long *, unsigned int, enum pinctrl_map_type);
43:	int pinctrl_utils_add_map_mux(struct pinctrl_dev *, struct pinctrl_map **, unsigned int *, unsigned int *, const char *, const char *);
110:	void pinctrl_utils_free_map(struct pinctrl_dev *, struct pinctrl_map *, unsigned int);
18:	int pinctrl_utils_reserve_map(struct pinctrl_dev *, struct pinctrl_map **, unsigned int *, unsigned int *, unsigned int);

File drivers/pinctrl/pinmux.c:
87:	bool pinmux_can_be_used_for_gpio(struct pinctrl_dev *, unsigned int);
35:	int pinmux_check_ops(struct pinctrl_dev *);
489:	void pinmux_disable_setting(const struct pinctrl_setting *);
408:	int pinmux_enable_setting(const struct pinctrl_setting *);
290:	void pinmux_free_gpio(struct pinctrl_dev *, unsigned int, struct pinctrl_gpio_range *);
403:	void pinmux_free_setting(const struct pinctrl_setting *);
879:	int pinmux_generic_add_function(struct pinctrl_dev *, const char *, const char * const *, const unsigned int, void *);
948:	void pinmux_generic_free_functions(struct pinctrl_dev *);
857:	struct function_desc *pinmux_generic_get_function(struct pinctrl_dev *, unsigned int);
798:	int pinmux_generic_get_function_count(struct pinctrl_dev *);
831:	int pinmux_generic_get_function_groups(struct pinctrl_dev *, unsigned int, const char * const **, unsigned int * const);
810:	const char *pinmux_generic_get_function_name(struct pinctrl_dev *, unsigned int);
921:	int pinmux_generic_remove_function(struct pinctrl_dev *, unsigned int);
306:	int pinmux_gpio_direction(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int, bool);
779:	void pinmux_init_device_debugfs(struct dentry *, struct pinctrl_dev *);
343:	int pinmux_map_to_setting(const struct pinctrl_map *, struct pinctrl_setting *);
265:	int pinmux_request_gpio(struct pinctrl_dev *, struct pinctrl_gpio_range *, unsigned int, unsigned int);
656:	void pinmux_show_map(struct seq_file *, const struct pinctrl_map *);
663:	void pinmux_show_setting(struct seq_file *, const struct pinctrl_setting *);
66:	int pinmux_validate_map(const struct pinctrl_map *, int);
111:	static int pin_request(struct pinctrl_dev *, int, const char *, struct pinctrl_gpio_range *);
677:	static int pinmux_functions_open(struct inode *, struct file *);
542:	static int pinmux_functions_show(struct seq_file *, void *);
678:	static int pinmux_pins_open(struct inode *, struct file *);
584:	static int pinmux_pins_show(struct seq_file *, void *);
681:	static ssize_t pinmux_select(struct file *, const char *, size_t, loff_t *);
766:	static int pinmux_select_open(struct inode *, struct file *);

File drivers/power/reset/brcmstb-reboot.c:
141:	static int brcmstb_reboot_init(void);
92:	static int brcmstb_reboot_probe(struct platform_device *);
35:	static int brcmstb_restart_handler(struct notifier_block *, unsigned long, void *);

File drivers/power/reset/reboot-mode.c:
146:	int devm_reboot_mode_register(struct device *, struct reboot_mode_driver *);
184:	void devm_reboot_mode_unregister(struct device *, struct reboot_mode_driver *);
62:	int reboot_mode_register(struct reboot_mode_driver *);
121:	int reboot_mode_unregister(struct reboot_mode_driver *);
169:	static int devm_reboot_mode_match(struct device *, void *, void *);
134:	static void devm_reboot_mode_release(struct device *, void *);
42:	static int reboot_mode_notify(struct notifier_block *, unsigned long, void *);

File drivers/power/reset/syscon-reboot-mode.c:
82:	static void syscon_reboot_mode_driver_exit(void);
82:	static int syscon_reboot_mode_driver_init(void);
39:	static int syscon_reboot_mode_probe(struct platform_device *);
23:	static int syscon_reboot_mode_write(struct reboot_mode_driver *, unsigned int);

File drivers/power/reset/syscon-reboot.c:
100:	static int syscon_reboot_driver_init(void);
42:	static int syscon_reboot_probe(struct platform_device *);
26:	static int syscon_restart_handle(struct notifier_block *, unsigned long, void *);

File drivers/power/reset/xgene-reboot.c:
91:	static int xgene_reboot_init(void);
47:	static int xgene_reboot_probe(struct platform_device *);
30:	static int xgene_restart_handler(struct notifier_block *, unsigned long, void *);

File drivers/power/supply/bq25890_charger.c:
774:	static irqreturn_t __bq25890_handle_irq(struct bq25890_device *);
704:	static void bq25890_charger_external_power_changed(struct power_supply *);
1533:	static void bq25890_driver_exit(void);
1533:	static int bq25890_driver_init(void);
740:	static int bq25890_get_chip_state(struct bq25890_device *, struct bq25890_state *);
808:	static irqreturn_t bq25890_irq_handler_thread(int, void *);
1320:	static void bq25890_non_devm_cleanup(void *);
457:	static int bq25890_power_supply_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
970:	static int bq25890_power_supply_init(struct bq25890_device *);
690:	static int bq25890_power_supply_property_is_writeable(struct power_supply *, enum power_supply_property);
665:	static int bq25890_power_supply_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
1327:	static int bq25890_probe(struct i2c_client *);
995:	static void bq25890_pump_express_work(struct work_struct *);
1414:	static void bq25890_remove(struct i2c_client *);
1429:	static void bq25890_shutdown(struct i2c_client *);
1064:	static int bq25890_usb_notifier(struct notifier_block *, unsigned long, void *);
1043:	static void bq25890_usb_work(struct work_struct *);
1084:	static int bq25890_vbus_disable(struct regulator_dev *);
1077:	static int bq25890_vbus_enable(struct regulator_dev *);
1098:	static int bq25890_vbus_get_voltage(struct regulator_dev *);
1091:	static int bq25890_vbus_is_enabled(struct regulator_dev *);
1105:	static int bq25890_vsys_get_voltage(struct regulator_dev *);

File drivers/power/supply/bq25980_charger.c:
1293:	static void bq25980_driver_exit(void);
1293:	static int bq25980_driver_init(void);
609:	static int bq25980_get_battery_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
696:	static int bq25980_get_charger_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
559:	static int bq25980_get_state(struct bq25980_device *, struct bq25980_state *);
831:	static irqreturn_t bq25980_irq_handler_thread(int, void *);
916:	static bool bq25980_is_volatile_reg(struct device *, unsigned int);
1210:	static int bq25980_probe(struct i2c_client *);
880:	static int bq25980_property_is_writeable(struct power_supply *, enum power_supply_property);
645:	static int bq25980_set_charger_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
293:	static int bq25980_set_input_curr_lim(struct bq25980_device *, int);

File drivers/power/supply/bq27xxx_battery.c:
2085:	int bq27xxx_battery_setup(struct bq27xxx_device_info *);
2128:	void bq27xxx_battery_teardown(struct bq27xxx_device_info *);
1764:	void bq27xxx_battery_update(struct bq27xxx_device_info *);
1912:	static int bq27xxx_battery_capacity_level(struct bq27xxx_device_info *, union power_supply_propval *);
1320:	static int bq27xxx_battery_cfgupdate_priv(struct bq27xxx_device_info *, bool);
1833:	static int bq27xxx_battery_current_and_status(struct bq27xxx_device_info *, union power_supply_propval *, union power_supply_propval *);
1980:	static int bq27xxx_battery_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
1806:	static void bq27xxx_battery_poll(struct work_struct *);
1890:	static int bq27xxx_battery_pwr_avg(struct bq27xxx_device_info *, union power_supply_propval *);
1231:	static int bq27xxx_battery_read_dm_block(struct bq27xxx_device_info *, struct bq27xxx_dm_buf *);
1573:	static int bq27xxx_battery_read_nac(struct bq27xxx_device_info *);
1582:	static int bq27xxx_battery_read_rc(struct bq27xxx_device_info *);
1271:	static void bq27xxx_battery_update_dm_block(struct bq27xxx_device_info *, struct bq27xxx_dm_buf *, enum bq27xxx_dm_reg_id, unsigned int);
1953:	static int bq27xxx_battery_voltage(struct bq27xxx_device_info *, union power_supply_propval *);
1366:	static int bq27xxx_battery_write_dm_block(struct bq27xxx_device_info *, struct bq27xxx_dm_buf *);
2077:	static void bq27xxx_external_power_changed(struct power_supply *);
1075:	static int poll_interval_param_set(const char *, const struct kernel_param *);

File drivers/power/supply/bq27xxx_battery_i2c.c:
95:	static int bq27xxx_battery_i2c_bulk_read(struct bq27xxx_device_info *, u8, u8 *, int);
112:	static int bq27xxx_battery_i2c_bulk_write(struct bq27xxx_device_info *, u8, u8 *, int);
302:	static void bq27xxx_battery_i2c_driver_exit(void);
302:	static int bq27xxx_battery_i2c_driver_init(void);
139:	static int bq27xxx_battery_i2c_probe(struct i2c_client *);
28:	static int bq27xxx_battery_i2c_read(struct bq27xxx_device_info *, u8, bool);
208:	static void bq27xxx_battery_i2c_remove(struct i2c_client *);
63:	static int bq27xxx_battery_i2c_write(struct bq27xxx_device_info *, u8, int, bool);
19:	static irqreturn_t bq27xxx_battery_irq_handler_thread(int, void *);

File drivers/power/supply/max17042_battery.c:
502:	static void max17042_external_power_changed(struct power_supply *);
230:	static int max17042_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
1226:	static void max17042_i2c_driver_exit(void);
1226:	static int max17042_i2c_driver_init(void);
892:	static void max17042_init_worker(struct work_struct *);
1034:	static int max17042_probe(struct i2c_client *);
485:	static int max17042_property_is_writeable(struct power_supply *, enum power_supply_property);
439:	static int max17042_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
869:	static irqreturn_t max17042_thread_handler(int, void *);

File drivers/power/supply/mt6360_charger.c:
860:	static void mt6360_charger_driver_exit(void);
860:	static int mt6360_charger_driver_init(void);
453:	static int mt6360_charger_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
784:	static int mt6360_charger_probe(struct platform_device *);
538:	static int mt6360_charger_property_is_writeable(struct power_supply *, enum power_supply_property);
503:	static int mt6360_charger_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
691:	static void mt6360_chrdet_work(struct work_struct *);
660:	static void mt6360_handle_chrdet_ext_evt(struct mt6360_chg_info *);
605:	static irqreturn_t mt6360_pmu_attach_i_handler(int, void *);
699:	static irqreturn_t mt6360_pmu_chrdet_ext_evt_handler(int, void *);

File drivers/power/supply/power_supply_core.c:
545:	struct power_supply *devm_power_supply_get_by_phandle(struct device *, const char *);
1470:	struct power_supply *devm_power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1506:	struct power_supply *devm_power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
328:	int power_supply_am_i_supplied(struct power_supply *);
1013:	int power_supply_batinfo_ocv2cap(struct power_supply_battery_info *, int, int);
1027:	bool power_supply_battery_bti_in_range(struct power_supply_battery_info *, int);
116:	void power_supply_changed(struct power_supply *);
1085:	void power_supply_external_power_changed(struct power_supply *);
986:	struct power_supply_battery_ocv_table *power_supply_find_ocv2cap_table(struct power_supply_battery_info *, int, int *);
569:	int power_supply_get_battery_info(struct power_supply *, struct power_supply_battery_info **);
455:	struct power_supply *power_supply_get_by_name(const char *);
504:	struct power_supply *power_supply_get_by_phandle(struct device_node *, const char *);
1550:	void *power_supply_get_drvdata(struct power_supply *);
939:	struct power_supply_maintenance_charge_table *power_supply_get_maintenance_charging_setting(struct power_supply_battery_info *, int);
1049:	int power_supply_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
397:	int power_supply_get_property_from_supplier(struct power_supply *, enum power_supply_property, union power_supply_propval *);
360:	int power_supply_is_system_supplied(void);
960:	int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table *, int, int);
1095:	int power_supply_powers(struct power_supply *, struct device *);
1074:	int power_supply_property_is_writeable(struct power_supply *, enum power_supply_property);
477:	void power_supply_put(struct power_supply *);
818:	void power_supply_put_battery_info(struct power_supply *, struct power_supply_battery_info *);
1108:	int power_supply_reg_notifier(struct notifier_block *);
1417:	struct power_supply *power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1440:	struct power_supply *power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
423:	int power_supply_set_battery_charged(struct power_supply *);
1063:	int power_supply_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
849:	int power_supply_temp2resist_simple(struct power_supply_resistance_temp_table *, int, int);
1114:	void power_supply_unreg_notifier(struct notifier_block *);
1534:	void power_supply_unregister(struct power_supply *);
887:	int power_supply_vbat2ri(struct power_supply_battery_info *, int, bool);
312:	static int __power_supply_am_i_supplied(struct device *, void *);
65:	static int __power_supply_changed_work(struct device *, void *);
199:	static int __power_supply_find_supply_from_node(struct device *, void *);
385:	static int __power_supply_get_supplier_property(struct device *, void *);
345:	static int __power_supply_is_system_supplied(struct device *, void *);
160:	static int __power_supply_populate_supplied_from(struct device *, void *);
1287:	static struct power_supply *__power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *, bool);
529:	static void devm_power_supply_put(struct device *, void *);
1448:	static void devm_power_supply_release(struct device *, void *);
78:	static void power_supply_changed_work(struct work_struct *);
1569:	static void power_supply_class_exit(void);
1556:	static int power_supply_class_init(void);
140:	static void power_supply_deferred_register_work(struct work_struct *);
1101:	static void power_supply_dev_release(struct device *);
436:	static int power_supply_match_device_by_name(struct device *, const void *);
487:	static int power_supply_match_device_node(struct device *, const void *);
1137:	static int power_supply_read_temp(struct thermal_zone_device *, int *);
1208:	static int ps_get_cur_charge_cntl_limit(struct thermal_cooling_device *, unsigned long *);
1190:	static int ps_get_max_charge_cntl_limit(struct thermal_cooling_device *, unsigned long *);
1226:	static int ps_set_cur_charge_cntl_limit(struct thermal_cooling_device *, unsigned long);
1247:	static int psy_register_cooler(struct power_supply *);
1160:	static int psy_register_thermal(struct power_supply *);

File drivers/power/supply/power_supply_leds.c:
156:	int power_supply_create_triggers(struct power_supply *);
163:	void power_supply_remove_triggers(struct power_supply *);
148:	void power_supply_update_leds(struct power_supply *);

File drivers/power/supply/power_supply_sysfs.c:
532:	int power_supply_charge_behaviour_parse(unsigned int, const char *);
497:	ssize_t power_supply_charge_behaviour_show(struct device *, unsigned int, enum power_supply_charge_behaviour, char *);
404:	void power_supply_init_attrs(struct device_type *);
461:	int power_supply_uevent(const struct device *, struct kobj_uevent_env *);
356:	static umode_t power_supply_attr_is_visible(struct kobject *, struct attribute *, int);
272:	static ssize_t power_supply_show_property(struct device *, struct device_attribute *, char *);
318:	static ssize_t power_supply_store_property(struct device *, struct device_attribute *, const char *, size_t);

File drivers/power/supply/sbs-battery.c:
1055:	static void sbs_alert(struct i2c_client *, enum i2c_alert_protocol, unsigned int);
506:	static bool sbs_bat_needs_calibration(struct i2c_client *);
1287:	static void sbs_battery_driver_exit(void);
1287:	static int sbs_battery_driver_init(void);
1072:	static void sbs_delayed_work(struct work_struct *);
1061:	static void sbs_external_power_changed(struct power_supply *);
575:	static int sbs_get_battery_presence_and_health(struct i2c_client *, enum power_supply_property, union power_supply_propval *);
824:	static int sbs_get_battery_serial_number(struct i2c_client *, union power_supply_propval *);
839:	static int sbs_get_chemistry(struct sbs_info *, union power_supply_propval *);
692:	static const char *sbs_get_constant_string(struct sbs_info *, enum power_supply_property);
905:	static int sbs_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
677:	static int sbs_get_property_index(struct i2c_client *, enum power_supply_property);
1049:	static irqreturn_t sbs_irq(int, void *);
1115:	static int sbs_probe(struct i2c_client *);
770:	static enum sbs_capacity_mode sbs_set_capacity_mode(struct i2c_client *, enum sbs_capacity_mode);
266:	static int sbs_update_presence(struct sbs_info *, bool);

File drivers/pps/kapi.c:
159:	void pps_event(struct pps_device *, struct pps_event_time *, int, void *);
65:	struct pps_device *pps_register_source(struct pps_source_info *, int);
136:	void pps_unregister_source(struct pps_device *);
41:	static void pps_echo_client_default(struct pps_device *, int, void *);

File drivers/pps/pps.c:
431:	struct pps_device *pps_lookup_dev(const void *);
347:	int pps_register_cdev(struct pps_device *);
406:	void pps_unregister_cdev(struct pps_device *);
47:	static int pps_cdev_fasync(int, struct file *, int);
90:	static long pps_cdev_ioctl(struct file *, unsigned int, unsigned long);
299:	static int pps_cdev_open(struct inode *, struct file *);
38:	static __poll_t pps_cdev_poll(struct file *, poll_table *);
308:	static int pps_cdev_release(struct inode *, struct file *);
331:	static void pps_device_destruct(struct device *);
449:	static void pps_exit(void);
455:	static int pps_init(void);

File drivers/pps/sysfs.c:
18:	static ssize_t assert_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t clear_show(struct device *, struct device_attribute *, char *);
55:	static ssize_t echo_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t mode_show(struct device *, struct device_attribute *, char *);
64:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
73:	static ssize_t path_show(struct device *, struct device_attribute *, char *);

File drivers/ptp/ptp_chardev.c:
109:	long ptp_ioctl(struct posix_clock *, unsigned int, unsigned long);
104:	int ptp_open(struct posix_clock *, fmode_t);
432:	__poll_t ptp_poll(struct posix_clock *, struct file *, poll_table *);
443:	ssize_t ptp_read(struct posix_clock *, uint, char *, size_t);
48:	int ptp_set_pinfunc(struct ptp_clock *, unsigned int, enum ptp_pin_function, unsigned int);

File drivers/ptp/ptp_clock.c:
444:	void ptp_cancel_worker_sync(struct ptp_clock *);
372:	void ptp_clock_event(struct ptp_clock *, struct ptp_clock_event *);
399:	int ptp_clock_index(struct ptp_clock *);
201:	struct ptp_clock *ptp_clock_register(struct ptp_clock_info *, struct device *);
348:	int ptp_clock_unregister(struct ptp_clock *);
405:	int ptp_find_pin(struct ptp_clock *, enum ptp_pin_function, unsigned int);
423:	int ptp_find_pin_unlocked(struct ptp_clock *, enum ptp_pin_function, unsigned int);
438:	int ptp_schedule_worker(struct ptp_clock *, unsigned long);
186:	static void ptp_aux_kworker(struct kthread_work *);
100:	static int ptp_clock_adjtime(struct posix_clock *, struct __kernel_timex *);
69:	static int ptp_clock_getres(struct posix_clock *, struct timespec64 *);
88:	static int ptp_clock_gettime(struct posix_clock *, struct timespec64 *);
165:	static void ptp_clock_release(struct device *);
76:	static int ptp_clock_settime(struct posix_clock *, const struct timespec64 *);
452:	static void ptp_exit(void);
178:	static int ptp_getcycles64(struct ptp_clock_info *, struct timespec64 *);
459:	static int ptp_init(void);
340:	static int unregister_vclock(struct device *, void *);

File drivers/ptp/ptp_kvm_arm.c:
25:	int kvm_arch_ptp_get_clock(struct timespec64 *);
14:	int kvm_arch_ptp_init(void);

File drivers/ptp/ptp_kvm_common.c:
69:	static int ptp_kvm_adjfine(struct ptp_clock_info *, long);
74:	static int ptp_kvm_adjtime(struct ptp_clock_info *, s64);
105:	static int ptp_kvm_enable(struct ptp_clock_info *, struct ptp_clock_request *, int);
130:	static void ptp_kvm_exit(void);
27:	static int ptp_kvm_get_time_fn(ktime_t *, struct system_counterval_t *, void *);
58:	static int ptp_kvm_getcrosststamp(struct ptp_clock_info *, struct system_device_crosststamp *);
85:	static int ptp_kvm_gettime(struct ptp_clock_info *, struct timespec64 *);
135:	static int ptp_kvm_init(void);
79:	static int ptp_kvm_settime(struct ptp_clock_info *, const struct timespec64 *);

File drivers/ptp/ptp_sysfs.c:
461:	void ptp_cleanup_pin_groups(struct ptp_clock *);
421:	int ptp_populate_pin_groups(struct ptp_clock *);
13:	static ssize_t clock_name_show(struct device *, struct device_attribute *, char *);
37:	static ssize_t extts_enable_store(struct device *, struct device_attribute *, const char *, size_t);
63:	static ssize_t extts_fifo_show(struct device *, struct device_attribute *, char *);
30:	static ssize_t max_adj_show(struct device *, struct device_attribute *, char *);
252:	static ssize_t max_vclocks_show(struct device *, struct device_attribute *, char *);
263:	static ssize_t max_vclocks_store(struct device *, struct device_attribute *, const char *, size_t);
31:	static ssize_t n_alarm_show(struct device *, struct device_attribute *, char *);
32:	static ssize_t n_ext_ts_show(struct device *, struct device_attribute *, char *);
33:	static ssize_t n_per_out_show(struct device *, struct device_attribute *, char *);
34:	static ssize_t n_pins_show(struct device *, struct device_attribute *, char *);
173:	static ssize_t n_vclocks_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t n_vclocks_store(struct device *, struct device_attribute *, const char *, size_t);
97:	static ssize_t period_store(struct device *, struct device_attribute *, const char *, size_t);
125:	static ssize_t pps_enable_store(struct device *, struct device_attribute *, const char *, size_t);
35:	static ssize_t pps_show(struct device *, struct device_attribute *, char *);
327:	static umode_t ptp_is_attribute_visible(struct kobject *, struct attribute *, int);
374:	static ssize_t ptp_pin_show(struct device *, struct device_attribute *, char *);
396:	static ssize_t ptp_pin_store(struct device *, struct device_attribute *, const char *, size_t);
152:	static int unregister_vclock(struct device *, void *);

File drivers/ptp/ptp_vclock.c:
268:	ktime_t ptp_convert_timestamp(const ktime_t *, int);
233:	int ptp_get_vclocks_index(int, int **);
185:	struct ptp_vclock *ptp_vclock_register(struct ptp_clock *);
224:	void ptp_vclock_unregister(struct ptp_vclock *);
43:	static int ptp_vclock_adjfine(struct ptp_clock_info *, long);
60:	static int ptp_vclock_adjtime(struct ptp_clock_info *, s64);
125:	static int ptp_vclock_getcrosststamp(struct ptp_clock_info *, struct system_device_crosststamp *);
72:	static int ptp_vclock_gettime(struct ptp_clock_info *, struct timespec64 *);
87:	static int ptp_vclock_gettimex(struct ptp_clock_info *, struct timespec64 *, struct ptp_system_timestamp *);
167:	static u64 ptp_vclock_read(const struct cyclecounter *);
147:	static long ptp_vclock_refresh(struct ptp_clock_info *);
111:	static int ptp_vclock_settime(struct ptp_clock_info *, const struct timespec64 *);

File drivers/ras/debugfs.c:
40:	int ras_add_daemon_trace(void);
56:	void ras_debugfs_init(void);
10:	int ras_userspace_consumers(void);
21:	static int trace_open(struct inode *, struct file *);
27:	static int trace_release(struct inode *, struct file *);
16:	static int trace_show(struct seq_file *, void *);

File drivers/ras/ras.c:
24:	void log_arm_hw_error(struct cper_sec_proc_arm *);
17:	void log_non_standard_event(const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
47:	static int parse_ras_param(char *);
29:	static int ras_init(void);

File drivers/regulator/axp20x-regulator.c:
1370:	static void axp20x_regulator_driver_exit(void);
1370:	static int axp20x_regulator_driver_init(void);
435:	static int axp20x_regulator_enable_regmap(struct regulator_dev *);
1206:	static int axp20x_regulator_probe(struct platform_device *);
368:	static int axp20x_set_ramp_delay(struct regulator_dev *, int);

File drivers/regulator/bd718x7-regulator.c:
107:	static int always_enabled_by_hwstate(struct regulator_dev *);
117:	static int bd71837_get_buck34_enable_hwctrl(struct regulator_dev *);
251:	static int bd71837_set_voltage_sel_pickable_restricted(struct regulator_dev *, unsigned int);
542:	static int bd718x7_set_buck_ovp(struct regulator_dev *, int, int, bool);
522:	static int bd718x7_set_buck_uvp(struct regulator_dev *, int, int, bool);
460:	static int bd718x7_set_ldo_uvp(struct regulator_dev *, int, int, bool);
1677:	static int bd718xx_probe(struct platform_device *);
1837:	static void bd718xx_regulator_exit(void);
1837:	static int bd718xx_regulator_init(void);
235:	static int bd718xx_set_voltage_sel_pickable_restricted(struct regulator_dev *, unsigned int);
219:	static int bd718xx_set_voltage_sel_restricted(struct regulator_dev *, unsigned int);
695:	static int buck_set_hw_dvs_levels(struct device_node *, const struct regulator_desc *, struct regulator_config *);
112:	static int never_enabled_by_hwstate(struct regulator_dev *);
151:	static int voltage_change_prepare(struct regulator_dev *, unsigned int, unsigned int *);

File drivers/regulator/bd9571mwv-regulator.c:
77:	static int bd9571mwv_avs_get_voltage_sel_regmap(struct regulator_dev *);
64:	static int bd9571mwv_avs_set_voltage_sel_regmap(struct regulator_dev *, unsigned int);
96:	static int bd9571mwv_reg_set_voltage_sel_regmap(struct regulator_dev *, unsigned int);
362:	static void bd9571mwv_regulator_driver_exit(void);
362:	static int bd9571mwv_regulator_driver_init(void);
274:	static int bd9571mwv_regulator_probe(struct platform_device *);

File drivers/regulator/core.c:
4789:	int _regulator_bulk_get(struct device *, int, struct regulator_bulk_data *, enum regulator_get_type);
2101:	struct regulator *_regulator_get(struct device *, const char *, enum regulator_get_type);
5847:	struct device *rdev_get_dev(struct regulator_dev *);
5807:	void *rdev_get_drvdata(struct regulator_dev *);
5841:	int rdev_get_id(struct regulator_dev *);
101:	const char *rdev_get_name(struct regulator_dev *);
5853:	struct regmap *rdev_get_regmap(struct regulator_dev *);
4699:	int regulator_allow_bypass(struct regulator *, bool);
4917:	int regulator_bulk_disable(int, struct regulator_bulk_data *);
4868:	int regulator_bulk_enable(int, struct regulator_bulk_data *);
4958:	int regulator_bulk_force_disable(int, struct regulator_bulk_data *);
4986:	void regulator_bulk_free(int, struct regulator_bulk_data *);
4842:	int regulator_bulk_get(struct device *, int, struct regulator_bulk_data *);
2433:	int regulator_bulk_register_supply_alias(struct device *, const char * const *, struct device *, const char * const *, int);
2473:	void regulator_bulk_unregister_supply_alias(struct device *, const char * const *, int);
454:	int regulator_check_consumers(struct regulator_dev *, int *, int *, suspend_state_t);
421:	int regulator_check_voltage(struct regulator_dev *, int *, int *);
3219:	int regulator_count_voltages(struct regulator *);
5214:	int regulator_coupler_register(struct regulator_coupler *);
2987:	int regulator_disable(struct regulator *);
3118:	int regulator_disable_deferred(struct regulator *, int);
3971:	int regulator_do_balance_voltage(struct regulator_dev *, suspend_state_t, bool);
2880:	int regulator_enable(struct regulator *);
3036:	int regulator_force_disable(struct regulator *);
2235:	struct regulator *regulator_get(struct device *, const char *);
4503:	int regulator_get_current_limit(struct regulator *);
5820:	void *regulator_get_drvdata(struct regulator *);
4627:	int regulator_get_error_flags(struct regulator *, unsigned int *);
2262:	struct regulator *regulator_get_exclusive(struct device *, const char *);
3277:	int regulator_get_hardware_vsel_register(struct regulator *, unsigned int *, unsigned int *);
5859:	void *regulator_get_init_drvdata(struct regulator_init_data *);
3329:	unsigned int regulator_get_linear_step(struct regulator *);
4581:	unsigned int regulator_get_mode(struct regulator *);
2288:	struct regulator *regulator_get_optional(struct device *, const char *);
3256:	struct regmap *regulator_get_regmap(struct regulator *);
4419:	int regulator_get_voltage(struct regulator *);
4364:	int regulator_get_voltage_rdev(struct regulator_dev *);
5794:	void regulator_has_full_constraints(void);
3196:	int regulator_is_enabled(struct regulator *);
3346:	int regulator_is_supported_voltage(struct regulator *, int, int);
3305:	int regulator_list_hardware_vsel(struct regulator *, unsigned int);
3243:	int regulator_list_voltage(struct regulator *, unsigned int);
5023:	int regulator_mode_to_status(unsigned int);
5007:	int regulator_notifier_call_chain(struct regulator_dev *, unsigned long, void *);
2348:	void regulator_put(struct regulator *);
5422:	struct regulator_dev *regulator_register(struct device *, const struct regulator_desc *, const struct regulator_config *);
4756:	int regulator_register_notifier(struct regulator *, struct notifier_block *);
2368:	int regulator_register_supply_alias(struct device *, const char *, struct device *, const char *);
4448:	int regulator_set_current_limit(struct regulator *, int, int);
5831:	void regulator_set_drvdata(struct regulator *, void *);
4668:	int regulator_set_load(struct regulator *, int);
4520:	int regulator_set_mode(struct regulator *, unsigned int);
4177:	int regulator_set_suspend_voltage(struct regulator *, int, int, suspend_state_t);
4098:	int regulator_set_voltage(struct regulator *, int, int);
3727:	int regulator_set_voltage_rdev(struct regulator_dev *, int, int, suspend_state_t);
4208:	int regulator_set_voltage_time(struct regulator *, int, int);
4265:	int regulator_set_voltage_time_sel(struct regulator_dev *, unsigned int, unsigned int);
4138:	int regulator_suspend_disable(struct regulator_dev *, suspend_state_t);
4131:	int regulator_suspend_enable(struct regulator_dev *, suspend_state_t);
4317:	int regulator_sync_voltage(struct regulator *);
4286:	int regulator_sync_voltage_rdev(struct regulator_dev *);
5685:	void regulator_unregister(struct regulator_dev *);
4771:	int regulator_unregister_notifier(struct regulator *, struct notifier_block *);
2404:	void regulator_unregister_supply_alias(struct device *, const char *);
3429:	static int _regulator_call_set_voltage_sel(struct regulator_dev *, int, unsigned int);
2923:	static int _regulator_disable(struct regulator *);
2894:	static int _regulator_do_disable(struct regulator_dev *);
2656:	static int _regulator_do_enable(struct regulator_dev *);
3537:	static int _regulator_do_set_voltage(struct regulator_dev *, int, int);
2805:	static int _regulator_enable(struct regulator *);
4599:	static int _regulator_get_error_flags(struct regulator_dev *, unsigned int *);
3148:	static int _regulator_list_voltage(struct regulator_dev *, unsigned int, int);
2320:	static void _regulator_put(struct regulator *);
894:	static ssize_t bypass_show(struct device *, struct device_attribute *, char *);
1746:	static ssize_t constraint_flags_read_file(struct file *, char *, size_t, loff_t *);
1796:	static struct regulator *create_regulator(struct regulator_dev *, struct device *, const char *);
942:	static int drms_uA_update(struct regulator_dev *);
932:	static ssize_t fail_show(struct device *, struct device_attribute *, char *);
5389:	static int generic_coupler_attach(struct regulator_coupler *, struct regulator_dev *);
731:	static ssize_t max_microamps_show(struct device *, struct device_attribute *, char *);
755:	static ssize_t max_microvolts_show(struct device *, struct device_attribute *, char *);
601:	static ssize_t microamps_show(struct device *, struct device_attribute *, char *);
585:	static ssize_t microvolts_show(struct device *, struct device_attribute *, char *);
719:	static ssize_t min_microamps_show(struct device *, struct device_attribute *, char *);
743:	static ssize_t min_microvolts_show(struct device *, struct device_attribute *, char *);
610:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
784:	static ssize_t num_users_show(struct device *, struct device_attribute *, char *);
365:	static struct device_node *of_get_child_regulator(struct device_node *, const char *);
639:	static ssize_t opmode_show(struct device *, struct device_attribute *, char *);
930:	static ssize_t over_current_show(struct device *, struct device_attribute *, char *);
935:	static ssize_t over_current_warn_show(struct device *, struct device_attribute *, char *);
933:	static ssize_t over_temp_show(struct device *, struct device_attribute *, char *);
937:	static ssize_t over_temp_warn_show(struct device *, struct device_attribute *, char *);
936:	static ssize_t over_voltage_warn_show(struct device *, struct device_attribute *, char *);
5177:	static void rdev_init_debugfs(struct regulator_dev *);
931:	static ssize_t regulation_out_show(struct device *, struct device_attribute *, char *);
5080:	static umode_t regulator_attr_is_visible(struct kobject *, struct attribute *, int);
4849:	static void regulator_bulk_enable_async(void *, async_cookie_t);
1938:	static struct regulator_dev *regulator_dev_lookup(struct device *, const char *);
5167:	static void regulator_dev_release(struct device *);
3063:	static void regulator_disable_work(struct work_struct *);
2525:	static void regulator_ena_gpio_free(struct regulator_dev *);
2486:	static int regulator_ena_gpio_request(struct regulator_dev *, const struct regulator_config *);
6105:	static int regulator_init(void);
6200:	static int regulator_init_complete(void);
6176:	static void regulator_init_complete_work_function(struct work_struct *);
5345:	static int regulator_init_coupling(struct regulator_dev *);
6132:	static int regulator_late_cleanup(struct device *, void *);
184:	static void regulator_lock(struct regulator_dev *);
321:	static void regulator_lock_dependent(struct regulator_dev *, struct ww_acquire_ctx *);
249:	static int regulator_lock_recursive(struct regulator_dev *, struct regulator_dev **, struct regulator_dev **, struct ww_acquire_ctx *);
1910:	static int regulator_match(struct device *, const void *);
511:	static int regulator_mode_constrain(struct regulator_dev *, unsigned int *);
5204:	static int regulator_register_resolve_supply(struct device *, void *);
5296:	static void regulator_remove_coupling(struct regulator_dev *);
5265:	static void regulator_resolve_coupling(struct regulator_dev *);
1994:	static int regulator_resolve_supply(struct regulator_dev *);
3668:	static int regulator_set_voltage_unlocked(struct regulator *, int, int, suspend_state_t);
5982:	static int regulator_summary_lock_one(struct device *, void *);
6102:	static int regulator_summary_open(struct inode *, struct file *);
6086:	static int regulator_summary_show(struct seq_file *, void *);
5890:	static int regulator_summary_show_children(struct device *, void *);
6075:	static int regulator_summary_show_roots(struct device *, void *);
5902:	static void regulator_summary_show_subtree(struct seq_file *, struct regulator_dev *, int);
6002:	static int regulator_summary_unlock_one(struct device *, void *);
196:	static void regulator_unlock(struct regulator_dev *);
225:	static void regulator_unlock_recursive(struct regulator_dev *, unsigned int);
767:	static ssize_t requested_microamps_show(struct device *, struct device_attribute *, char *);
1398:	static int set_machine_constraints(struct regulator_dev *);
658:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
672:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
5878:	static int supply_map_open(struct inode *, struct file *);
5866:	static int supply_map_show(struct seq_file *, void *);
816:	static ssize_t suspend_disk_microvolts_show(struct device *, struct device_attribute *, char *);
844:	static ssize_t suspend_disk_mode_show(struct device *, struct device_attribute *, char *);
874:	static ssize_t suspend_disk_state_show(struct device *, struct device_attribute *, char *);
807:	static ssize_t suspend_mem_microvolts_show(struct device *, struct device_attribute *, char *);
834:	static ssize_t suspend_mem_mode_show(struct device *, struct device_attribute *, char *);
864:	static ssize_t suspend_mem_state_show(struct device *, struct device_attribute *, char *);
825:	static ssize_t suspend_standby_microvolts_show(struct device *, struct device_attribute *, char *);
854:	static ssize_t suspend_standby_mode_show(struct device *, struct device_attribute *, char *);
884:	static ssize_t suspend_standby_state_show(struct device *, struct device_attribute *, char *);
792:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
929:	static ssize_t under_voltage_show(struct device *, struct device_attribute *, char *);
934:	static ssize_t under_voltage_warn_show(struct device *, struct device_attribute *, char *);
1732:	static void unset_regulator_supplies(struct regulator_dev *);

File drivers/regulator/devres.c:
228:	int devm_regulator_bulk_get(struct device *, int, struct regulator_bulk_data *);
272:	int devm_regulator_bulk_get_const(struct device *, int, const struct regulator_bulk_data *, struct regulator_bulk_data **);
345:	int devm_regulator_bulk_get_enable(struct device *, int, const char * const *);
251:	int devm_regulator_bulk_get_exclusive(struct device *, int, struct regulator_bulk_data *);
309:	void devm_regulator_bulk_put(struct regulator_bulk_data *);
526:	int devm_regulator_bulk_register_supply_alias(struct device *, const char * const *, struct device *, const char * const *, int);
51:	struct regulator *devm_regulator_get(struct device *, const char *);
126:	int devm_regulator_get_enable(struct device *, const char *);
110:	int devm_regulator_get_enable_optional(struct device *, const char *);
66:	struct regulator *devm_regulator_get_exclusive(struct device *, const char *);
141:	struct regulator *devm_regulator_get_optional(struct device *, const char *);
672:	void *devm_regulator_irq_helper(struct device *, const struct regulator_irq_desc *, int, int, int, int *, struct regulator_dev **, int);
166:	void devm_regulator_put(struct regulator *);
407:	struct regulator_dev *devm_regulator_register(struct device *, const struct regulator_desc *, const struct regulator_config *);
588:	int devm_regulator_register_notifier(struct regulator *, struct notifier_block *);
464:	int devm_regulator_register_supply_alias(struct device *, const char *, struct device *, const char *);
626:	void devm_regulator_unregister_notifier(struct regulator *, struct notifier_block *);
80:	static int _devm_regulator_get_enable(struct device *, const char *, int);
391:	static void devm_rdev_release(struct device *, void *);
321:	static void devm_regulator_bulk_disable(void *);
286:	static int devm_regulator_bulk_match(struct device *, void *, void *);
182:	static void devm_regulator_bulk_release(struct device *, void *);
571:	static void devm_regulator_destroy_notifier(struct device *, void *);
444:	static void devm_regulator_destroy_supply_alias(struct device *, void *);
148:	static int devm_regulator_match(struct device *, void *, void *);
562:	static int devm_regulator_match_notifier(struct device *, void *, void *);
435:	static int devm_regulator_match_supply_alias(struct device *, void *, void *);
17:	static void devm_regulator_release(struct device *, void *);
73:	static void regulator_action_disable(void *);
642:	static void regulator_irq_helper_drop(void *);

File drivers/regulator/dummy.c:
68:	void regulator_dummy_init(void);
40:	static int dummy_regulator_probe(struct platform_device *);

File drivers/regulator/fan53555.c:
372:	static int fan53555_device_setup(struct fan53555_device_info *, struct fan53555_platform_data *);
193:	static unsigned int fan53555_get_mode(struct regulator_dev *);
672:	static void fan53555_regulator_driver_exit(void);
672:	static int fan53555_regulator_driver_init(void);
552:	static int fan53555_regulator_probe(struct i2c_client *);
474:	static int fan53555_regulator_register(struct fan53555_device_info *, struct regulator_config *);
175:	static int fan53555_set_mode(struct regulator_dev *, unsigned int);
167:	static int fan53555_set_suspend_disable(struct regulator_dev *);
159:	static int fan53555_set_suspend_enable(struct regulator_dev *);
138:	static int fan53555_set_suspend_voltage(struct regulator_dev *, int);

File drivers/regulator/fixed-helper.c:
30:	struct platform_device *regulator_register_always_on(int, const char *, struct regulator_consumer_supply *, int, int);
14:	static void regulator_fixed_release(struct device *);

File drivers/regulator/fixed.c:
62:	static int reg_clock_disable(struct regulator_dev *);
48:	static int reg_clock_enable(struct regulator_dev *);
87:	static int reg_domain_disable(struct regulator_dev *);
72:	static int reg_domain_enable(struct regulator_dev *);
175:	static int reg_fixed_voltage_probe(struct platform_device *);
102:	static int reg_is_enabled(struct regulator_dev *);
347:	static void regulator_fixed_voltage_exit(void);
341:	static int regulator_fixed_voltage_init(void);

File drivers/regulator/gpio-regulator.c:
381:	static void gpio_regulator_exit(void);
45:	static int gpio_regulator_get_value(struct regulator_dev *);
375:	static int gpio_regulator_init(void);
86:	static int gpio_regulator_list_voltage(struct regulator_dev *, unsigned int);
234:	static int gpio_regulator_probe(struct platform_device *);
97:	static int gpio_regulator_set_current_limit(struct regulator_dev *, int, int);
57:	static int gpio_regulator_set_voltage(struct regulator_dev *, int, int, unsigned int *);

File drivers/regulator/helpers.c:
882:	void regulator_bulk_set_supply_names(struct regulator_bulk_data *, const char * const *, unsigned int);
523:	int regulator_desc_list_voltage_linear(const struct regulator_desc *, unsigned int);
617:	int regulator_desc_list_voltage_linear_range(const struct regulator_desc *, unsigned int);
85:	int regulator_disable_regmap(struct regulator_dev *);
59:	int regulator_enable_regmap(struct regulator_dev *);
744:	int regulator_get_bypass_regmap(struct regulator_dev *, bool *);
849:	int regulator_get_current_limit_regmap(struct regulator_dev *);
129:	int regulator_get_voltage_sel_pickable_regmap(struct regulator_dev *);
235:	int regulator_get_voltage_sel_regmap(struct regulator_dev *);
27:	int regulator_is_enabled_regmap(struct regulator_dev *);
899:	bool regulator_is_equal(struct regulator *, struct regulator *);
548:	int regulator_list_voltage_linear(struct regulator_dev *, unsigned int);
645:	int regulator_list_voltage_linear_range(struct regulator_dev *, unsigned int);
564:	int regulator_list_voltage_pickable_linear_range(struct regulator_dev *, unsigned int);
662:	int regulator_list_voltage_table(struct regulator_dev *, unsigned int);
330:	int regulator_map_voltage_ascend(struct regulator_dev *, int, int);
292:	int regulator_map_voltage_iterate(struct regulator_dev *, int, int);
361:	int regulator_map_voltage_linear(struct regulator_dev *, int, int);
407:	int regulator_map_voltage_linear_range(struct regulator_dev *, int, int);
456:	int regulator_map_voltage_pickable_linear_range(struct regulator_dev *, int, int);
770:	int regulator_set_active_discharge_regmap(struct regulator_dev *, bool);
685:	int regulator_set_bypass_regmap(struct regulator_dev *, bool);
797:	int regulator_set_current_limit_regmap(struct regulator_dev *, int, int);
725:	int regulator_set_pull_down_regmap(struct regulator_dev *);
946:	int regulator_set_ramp_delay_regmap(struct regulator_dev *, int);
707:	int regulator_set_soft_start_regmap(struct regulator_dev *);
173:	int regulator_set_voltage_sel_pickable_regmap(struct regulator_dev *, unsigned int);
261:	int regulator_set_voltage_sel_regmap(struct regulator_dev *, unsigned int);

File drivers/regulator/hi6421v530-regulator.c:
206:	static void hi6421v530_regulator_driver_exit(void);
206:	static int hi6421v530_regulator_driver_init(void);
111:	static unsigned int hi6421v530_regulator_ldo_get_mode(struct regulator_dev *);
126:	static int hi6421v530_regulator_ldo_set_mode(struct regulator_dev *, unsigned int);
163:	static int hi6421v530_regulator_probe(struct platform_device *);

File drivers/regulator/irq_helpers.c:
338:	void *regulator_irq_helper(struct device *, const struct regulator_irq_desc *, int, int, int, int *, struct regulator_dev **, int);
387:	void regulator_irq_helper_cancel(void **);
415:	int regulator_irq_map_event_simple(int, struct regulator_irq_data *, unsigned long *);
156:	static irqreturn_t regulator_notifier_isr(int, void *);
49:	static void regulator_notifier_isr_work(struct work_struct *);

File drivers/regulator/max77620-regulator.c:
602:	static int max77620_of_parse_cb(struct device_node *, const struct regulator_desc *, struct regulator_config *);
454:	static int max77620_regulator_disable(struct regulator_dev *);
923:	static void max77620_regulator_driver_exit(void);
923:	static int max77620_regulator_driver_init(void);
442:	static int max77620_regulator_enable(struct regulator_dev *);
540:	static unsigned int max77620_regulator_get_mode(struct regulator_dev *);
466:	static int max77620_regulator_is_enabled(struct regulator_dev *);
779:	static int max77620_regulator_probe(struct platform_device *);
485:	static int max77620_regulator_set_mode(struct regulator_dev *, unsigned int);
585:	static int max77620_regulator_set_ramp_delay(struct regulator_dev *, int);

File drivers/regulator/max8973-regulator.c:
819:	static void max8973_cleanup(void);
239:	static unsigned int max8973_dcdc_get_mode(struct regulator_dev *);
159:	static int max8973_dcdc_get_voltage_sel(struct regulator_dev *);
211:	static int max8973_dcdc_set_mode(struct regulator_dev *, unsigned int);
174:	static int max8973_dcdc_set_voltage_sel(struct regulator_dev *, unsigned int);
279:	static int max8973_get_current_limit(struct regulator_dev *);
813:	static int max8973_init(void);
318:	static int max8973_init_dcdc(struct max8973_chip *, struct max8973_regulator_platform_data *);
589:	static int max8973_probe(struct i2c_client *);
255:	static int max8973_set_current_limit(struct regulator_dev *, int, int);
472:	static int max8973_thermal_init(struct max8973_chip *);
458:	static irqreturn_t max8973_thermal_irq(int, void *);
437:	static int max8973_thermal_read_temp(struct thermal_zone_device *, int *);

File drivers/regulator/mp8859.c:
56:	static int mp8859_get_voltage_sel(struct regulator_dev *);
108:	static int mp8859_i2c_probe(struct i2c_client *);
153:	static void mp8859_regulator_driver_exit(void);
153:	static int mp8859_regulator_driver_init(void);
39:	static int mp8859_set_voltage_sel(struct regulator_dev *, unsigned int);

File drivers/regulator/mt6358-regulator.c:
385:	static int mt6358_get_buck_voltage_sel(struct regulator_dev *);
403:	static int mt6358_get_status(struct regulator_dev *);
359:	static int mt6358_get_voltage_sel(struct regulator_dev *);
336:	static unsigned int mt6358_map_mode(unsigned int);
741:	static void mt6358_regulator_driver_exit(void);
741:	static int mt6358_regulator_driver_init(void);
444:	static unsigned int mt6358_regulator_get_mode(struct regulator_dev *);
693:	static int mt6358_regulator_probe(struct platform_device *);
418:	static int mt6358_regulator_set_mode(struct regulator_dev *, unsigned int);
342:	static int mt6358_set_voltage_sel(struct regulator_dev *, unsigned int);

File drivers/regulator/mt6359-regulator.c:
250:	static int mt6359_get_status(struct regulator_dev *);
236:	static unsigned int mt6359_map_mode(unsigned int);
990:	static void mt6359_regulator_driver_exit(void);
990:	static int mt6359_regulator_driver_init(void);
268:	static unsigned int mt6359_regulator_get_mode(struct regulator_dev *);
948:	static int mt6359_regulator_probe(struct platform_device *);
299:	static int mt6359_regulator_set_mode(struct regulator_dev *, unsigned int);
394:	static int mt6359p_vemc_get_voltage_sel(struct regulator_dev *);
354:	static int mt6359p_vemc_set_voltage_sel(struct regulator_dev *, u32);

File drivers/regulator/mt6360-regulator.c:
58:	static irqreturn_t mt6360_oc_event_handler(int, void *);
66:	static irqreturn_t mt6360_ov_event_handler(int, void *);
50:	static irqreturn_t mt6360_pgb_event_handler(int, void *);
453:	static void mt6360_regulator_driver_exit(void);
453:	static int mt6360_regulator_driver_init(void);
252:	static unsigned int mt6360_regulator_get_mode(struct regulator_dev *);
279:	static int mt6360_regulator_get_status(struct regulator_dev *);
308:	static unsigned int mt6360_regulator_of_map_mode(unsigned int);
397:	static int mt6360_regulator_probe(struct platform_device *);
220:	static int mt6360_regulator_set_mode(struct regulator_dev *, unsigned int);
74:	static irqreturn_t mt6360_uv_event_handler(int, void *);

File drivers/regulator/mt6397-regulator.c:
218:	static int mt6397_get_status(struct regulator_dev *);
146:	static unsigned int mt6397_map_mode(unsigned int);
415:	static void mt6397_regulator_driver_exit(void);
415:	static int mt6397_regulator_driver_init(void);
193:	static unsigned int mt6397_regulator_get_mode(struct regulator_dev *);
349:	static int mt6397_regulator_probe(struct platform_device *);
158:	static int mt6397_regulator_set_mode(struct regulator_dev *, unsigned int);

File drivers/regulator/of_regulator.c:
615:	bool of_check_coupling_data(struct regulator_dev *);
544:	struct regulator_dev *of_find_regulator_by_node(struct device_node *);
556:	int of_get_n_coupled(struct regulator_dev *);
335:	struct regulator_init_data *of_get_regulator_init_data(struct device *, struct device_node *, const struct regulator_desc *);
687:	struct regulator_dev *of_parse_coupled_regulator(struct regulator_dev *, int);
743:	int of_regulator_bulk_get_all(struct device *, struct device_node *, struct regulator_bulk_data **);
387:	int of_regulator_match(struct device *, struct device_node *, struct of_regulator_match *, unsigned int);
500:	struct regulator_init_data *regulator_of_get_init_data(struct device *, const struct regulator_desc *, struct regulator_config *, struct device_node **);
360:	static void devm_of_regulator_put_matches(struct device *, void *);

File drivers/regulator/pca9450-regulator.c:
880:	static void pca9450_i2c_driver_exit(void);
880:	static int pca9450_i2c_driver_init(void);
704:	static int pca9450_i2c_probe(struct i2c_client *);
666:	static irqreturn_t pca9450_irq_handler(int, void *);
188:	static int pca9450_set_dvs_levels(struct device_node *, const struct regulator_desc *, struct regulator_config *);

File drivers/regulator/pf8x00-regulator.c:
545:	static int pf8x00_i2c_probe(struct i2c_client *);
272:	static int pf8x00_of_parse_cb(struct device_node *, const struct regulator_desc *, struct regulator_config *);
614:	static void pf8x00_regulator_driver_exit(void);
614:	static int pf8x00_regulator_driver_init(void);
302:	static int pf8x00_set_suspend_voltage(struct regulator_dev *, int);
293:	static int pf8x00_suspend_disable(struct regulator_dev *);
283:	static int pf8x00_suspend_enable(struct regulator_dev *);

File drivers/regulator/pfuze100-regulator.c:
686:	static int pfuze100_regulator_probe(struct i2c_client *);
118:	static int pfuze100_set_ramp_delay(struct regulator_dev *, int);
852:	static void pfuze_driver_exit(void);
852:	static int pfuze_driver_init(void);
640:	static int pfuze_identify(struct pfuze_chip *);
509:	static int pfuze_parse_regulators_dt(struct pfuze_chip *);
575:	static int pfuze_power_off_prepare(struct sys_off_data *);
617:	static int pfuze_power_off_prepare_init(struct pfuze_chip *);

File drivers/regulator/rk808-regulator.c:
385:	static int rk805_set_suspend_disable(struct regulator_dev *);
374:	static int rk805_set_suspend_enable(struct regulator_dev *);
219:	static int rk808_buck1_2_get_voltage_sel_regmap(struct regulator_dev *);
291:	static int rk808_buck1_2_set_voltage_sel(struct regulator_dev *, unsigned int);
329:	static int rk808_buck1_2_set_voltage_time_sel(struct regulator_dev *, unsigned int, unsigned int);
1361:	static void rk808_regulator_driver_exit(void);
1361:	static int rk808_regulator_driver_init(void);
1285:	static int rk808_regulator_probe(struct platform_device *);
407:	static int rk808_set_suspend_disable(struct regulator_dev *);
396:	static int rk808_set_suspend_enable(struct regulator_dev *);
344:	static int rk808_set_suspend_voltage(struct regulator_dev *, int);
359:	static int rk808_set_suspend_voltage_range(struct regulator_dev *, int);
450:	static int rk817_set_suspend_disable(struct regulator_dev *);
445:	static int rk817_set_suspend_enable(struct regulator_dev *);
493:	static unsigned int rk8xx_get_mode(struct regulator_dev *);
508:	static int rk8xx_is_enabled_wmsk_regmap(struct regulator_dev *);
531:	static unsigned int rk8xx_regulator_of_map_mode(unsigned int);
476:	static int rk8xx_set_mode(struct regulator_dev *, unsigned int);
455:	static int rk8xx_set_suspend_mode(struct regulator_dev *, unsigned int);

File drivers/regulator/rohm-regulator.c:
59:	int rohm_regulator_set_dvs_levels(const struct rohm_dvs_config *, struct device_node *, const struct regulator_desc *, struct regmap *);
121:	int rohm_regulator_set_voltage_sel_restricted(struct regulator_dev *, unsigned int);

File drivers/regulator/s2mps11.c:
1246:	static void s2mps11_pmic_driver_exit(void);
1246:	static int s2mps11_pmic_driver_init(void);
1120:	static int s2mps11_pmic_probe(struct platform_device *);
228:	static int s2mps11_regulator_enable(struct regulator_dev *);
264:	static int s2mps11_regulator_set_suspend_disable(struct regulator_dev *);
68:	static int s2mps11_regulator_set_voltage_time_sel(struct regulator_dev *, unsigned int, unsigned int);
110:	static int s2mps11_set_ramp_delay(struct regulator_dev *, int);
887:	static int s2mpu02_set_ramp_delay(struct regulator_dev *, int);

File drivers/regulator/tps65132-regulator.c:
278:	static void tps65132_i2c_driver_exit(void);
278:	static int tps65132_i2c_driver_init(void);
131:	static int tps65132_of_parse_cb(struct device_node *, const struct regulator_desc *, struct regulator_config *);
223:	static int tps65132_probe(struct i2c_client *);
87:	static int tps65132_regulator_disable(struct regulator_dev *);
61:	static int tps65132_regulator_enable(struct regulator_dev *);
108:	static int tps65132_regulator_is_enabled(struct regulator_dev *);

File drivers/regulator/vctrl-regulator.c:
314:	static int vctrl_cmp_ctrl_uV(const void *, const void *);
408:	static int vctrl_disable(struct regulator_dev *);
550:	static void vctrl_driver_exit(void);
550:	static int vctrl_driver_init(void);
399:	static int vctrl_enable(struct regulator_dev *);
81:	static int vctrl_get_voltage(struct regulator_dev *);
152:	static int vctrl_get_voltage_sel(struct regulator_dev *);
417:	static int vctrl_is_enabled(struct regulator_dev *);
226:	static int vctrl_list_voltage(struct regulator_dev *, unsigned int);
442:	static int vctrl_probe(struct platform_device *);
94:	static int vctrl_set_voltage(struct regulator_dev *, int, int, unsigned int *);
159:	static int vctrl_set_voltage_sel(struct regulator_dev *, unsigned int);

File drivers/remoteproc/remoteproc_core.c:
2331:	int devm_rproc_add(struct device *, struct rproc *);
2602:	struct rproc *devm_rproc_alloc(struct device *, const char *, const struct rproc_ops *, const char *, int);
2268:	int rproc_add(struct rproc *);
890:	void rproc_add_carveout(struct rproc *, struct rproc_mem_entry *);
436:	void rproc_add_rvdev(struct rproc *, struct rproc_vdev *);
2631:	void rproc_add_subdev(struct rproc *, struct rproc_subdev *);
2442:	struct rproc *rproc_alloc(struct device *, const char *, const struct rproc_ops *, const char *, int);
325:	int rproc_alloc_vring(struct rproc_vdev *, int);
1907:	int rproc_boot(struct rproc *);
193:	void *rproc_da_to_va(struct rproc *, u64, size_t, bool *);
2555:	int rproc_del(struct rproc *);
2052:	int rproc_detach(struct rproc *);
252:	struct rproc_mem_entry *rproc_find_carveout_by_name(struct rproc *, const char *, ...);
2518:	void rproc_free(struct rproc *);
410:	void rproc_free_vring(struct rproc_vring *);
2654:	struct rproc *rproc_get_by_child(struct device *);
2111:	struct rproc *rproc_get_by_phandle(phandle);
914:	struct rproc_mem_entry *rproc_mem_entry_init(struct device *, void *, dma_addr_t, size_t, u32, int (*)(struct rproc *, struct rproc_mem_entry *), int (*)(struct rproc *, struct rproc_mem_entry *), const char *, ...);
996:	int rproc_of_parse_firmware(struct device *, int, const char **);
960:	struct rproc_mem_entry *rproc_of_resm_mem_entry_init(struct device *, u32, size_t, u32, const char *, ...);
386:	int rproc_parse_vring(struct rproc_vdev *, struct fw_rsc_vdev *, int);
2533:	void rproc_put(struct rproc *);
442:	void rproc_remove_rvdev(struct rproc_vdev *);
2642:	void rproc_remove_subdev(struct rproc *, struct rproc_subdev *);
2676:	void rproc_report_crash(struct rproc *, enum rproc_crash_type);
1219:	void rproc_resource_cleanup(struct rproc *);
2166:	int rproc_set_firmware(struct rproc *, const char *);
1987:	int rproc_shutdown(struct rproc *);
1830:	int rproc_trigger_recovery(struct rproc *);
146:	phys_addr_t rproc_va_to_pa(void *);
1330:	static int __rproc_attach(struct rproc *);
1744:	static int __rproc_detach(struct rproc *);
2584:	static void devm_rproc_free(struct device *, void *);
2316:	static void devm_rproc_remove(void *);
2754:	static void remoteproc_exit(void);
2736:	static int remoteproc_init(void);
683:	static int rproc_alloc_carveout(struct rproc *, struct rproc_mem_entry *);
1152:	static int rproc_alloc_registered_carveouts(struct rproc *);
1779:	static int rproc_attach_recovery(struct rproc *);
1670:	static void rproc_auto_boot_callback(const struct firmware *, void *);
1790:	static int rproc_boot_recovery(struct rproc *);
1862:	static void rproc_crash_handler_work(struct work_struct *);
100:	static int rproc_enable_iommu(struct rproc *);
2731:	static void rproc_exit_panic(void);
822:	static int rproc_handle_carveout(struct rproc *, void *, int, int);
619:	static int rproc_handle_devmem(struct rproc *, void *, int, int);
1018:	static int rproc_handle_resources(struct rproc *, rproc_handle_resource_t *);
545:	static int rproc_handle_trace(struct rproc *, void *, int, int);
475:	static int rproc_handle_vdev(struct rproc *, void *, int, int);
84:	static int rproc_iommu_fault(struct iommu_domain *, struct device *, unsigned long, int, void *);
2693:	static int rproc_panic_handler(struct notifier_block *, unsigned long, void *);
791:	static int rproc_release_carveout(struct rproc *, struct rproc_mem_entry *);
1265:	static int rproc_start(struct rproc *, const struct firmware *);
1705:	static int rproc_stop(struct rproc *, bool);
2352:	static void rproc_type_release(struct device *);

File drivers/remoteproc/remoteproc_coredump.c:
234:	void rproc_coredump(struct rproc *);
78:	int rproc_coredump_add_custom_segment(struct rproc *, dma_addr_t, size_t, void (*)(struct rproc *, struct rproc_dump_segment *, void *, size_t, size_t), void *);
47:	int rproc_coredump_add_segment(struct rproc *, dma_addr_t, size_t);
26:	void rproc_coredump_cleanup(struct rproc *);
113:	int rproc_coredump_set_elf_info(struct rproc *, u8, u16);
343:	void rproc_coredump_using_sections(struct rproc *);
125:	static void rproc_coredump_free(void *);
176:	static ssize_t rproc_coredump_read(char *, loff_t, size_t, void *, size_t);

File drivers/remoteproc/remoteproc_debugfs.c:
398:	void rproc_create_debug_dir(struct rproc *);
386:	struct dentry *rproc_create_trace_file(const char *, struct rproc *, struct rproc_debug_trace *);
393:	void rproc_delete_debug_dir(struct rproc *);
427:	void rproc_exit_debugfs(void);
421:	void rproc_init_debugfs(void);
381:	void rproc_remove_trace_file(struct dentry *);
379:	static int rproc_carveouts_open(struct inode *, struct file *);
362:	static int rproc_carveouts_show(struct seq_file *, void *);
42:	static ssize_t rproc_coredump_read(struct file *, char *, size_t, loff_t *);
71:	static ssize_t rproc_coredump_write(struct file *, const char *, size_t, loff_t *);
252:	static ssize_t rproc_crash_write(struct file *, const char *, size_t, loff_t *);
155:	static ssize_t rproc_name_read(struct file *, char *, size_t, loff_t *);
175:	static ssize_t rproc_recovery_read(struct file *, char *, size_t, loff_t *);
209:	static ssize_t rproc_recovery_write(struct file *, const char *, size_t, loff_t *);
359:	static int rproc_rsc_table_open(struct inode *, struct file *);
275:	static int rproc_rsc_table_show(struct seq_file *, void *);
126:	static ssize_t rproc_trace_read(struct file *, char *, size_t, loff_t *);

File drivers/remoteproc/remoteproc_elf_loader.c:
372:	struct resource_table *rproc_elf_find_loaded_rsc_table(struct rproc *, const struct firmware *);
128:	u64 rproc_elf_get_boot_addr(struct rproc *, const struct firmware *);
326:	int rproc_elf_load_rsc_table(struct rproc *, const struct firmware *);
160:	int rproc_elf_load_segments(struct rproc *, const struct firmware *);
37:	int rproc_elf_sanity_check(struct rproc *, const struct firmware *);
248:	static const void *find_table(struct device *, const struct firmware *);

File drivers/remoteproc/remoteproc_sysfs.c:
272:	void rproc_exit_sysfs(void);
262:	int rproc_init_sysfs(void);
80:	static ssize_t coredump_show(struct device *, struct device_attribute *, char *);
104:	static ssize_t coredump_store(struct device *, struct device_attribute *, const char *, size_t);
131:	static ssize_t firmware_show(struct device *, struct device_attribute *, char *);
149:	static ssize_t firmware_store(struct device *, struct device_attribute *, const char *, size_t);
213:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
13:	static ssize_t recovery_show(struct device *, struct device_attribute *, char *);
45:	static ssize_t recovery_store(struct device *, struct device_attribute *, const char *, size_t);
222:	static umode_t rproc_is_visible(struct kobject *, struct attribute *, int);
178:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t state_store(struct device *, struct device_attribute *, const char *, size_t);

File drivers/remoteproc/remoteproc_virtio.c:
89:	irqreturn_t rproc_vq_interrupt(struct rproc *, int);
465:	static int rproc_remove_virtio_dev(struct device *, void *);
473:	static int rproc_vdev_do_start(struct rproc_subdev *);
480:	static void rproc_vdev_do_stop(struct rproc_subdev *, bool);
178:	static void rproc_virtio_del_vqs(struct virtio_device *);
347:	static void rproc_virtio_dev_release(struct device *);
603:	static int rproc_virtio_driver_init(void);
266:	static int rproc_virtio_finalize_features(struct virtio_device *);
183:	static int rproc_virtio_find_vqs(struct virtio_device *, unsigned int, struct virtqueue **, vq_callback_t **, const char * const *, const bool *, struct irq_affinity *);
291:	static void rproc_virtio_get(struct virtio_device *, unsigned int, void *, unsigned int);
246:	static u64 rproc_virtio_get_features(struct virtio_device *);
213:	static u8 rproc_virtio_get_status(struct virtio_device *);
65:	static bool rproc_virtio_notify(struct virtqueue *);
491:	static int rproc_virtio_probe(struct platform_device *);
572:	static int rproc_virtio_remove(struct platform_device *);
234:	static void rproc_virtio_reset(struct virtio_device *);
309:	static void rproc_virtio_set(struct virtio_device *, unsigned int, const void *, unsigned int);
223:	static void rproc_virtio_set_status(struct virtio_device *, u8);

File drivers/reset/core.c:
1106:	int __device_reset(struct device *, bool);
1070:	int __devm_reset_control_bulk_get(struct device *, int, struct reset_control_bulk_data *, bool, bool, bool);
1035:	struct reset_control *__devm_reset_control_get(struct device *, const char *, int, bool, bool, bool);
814:	struct reset_control *__of_reset_control_get(struct device_node *, const char *, int, bool, bool, bool);
955:	int __reset_control_bulk_get(struct device *, int, struct reset_control_bulk_data *, bool, bool, bool);
939:	struct reset_control *__reset_control_get(struct device *, const char *, int, bool, bool, bool);
1227:	struct reset_control *devm_reset_control_array_get(struct device *, bool, bool);
143:	int devm_reset_controller_register(struct device *, struct reset_controller_dev *);
1174:	struct reset_control *of_reset_control_array_get(struct device_node *, bool, bool, bool);
640:	int reset_control_acquire(struct reset_control *);
442:	int reset_control_assert(struct reset_control *);
686:	int reset_control_bulk_acquire(int, struct reset_control_bulk_data *);
499:	int reset_control_bulk_assert(int, struct reset_control_bulk_data *);
579:	int reset_control_bulk_deassert(int, struct reset_control_bulk_data *);
1017:	void reset_control_bulk_put(int, struct reset_control_bulk_data *);
738:	void reset_control_bulk_release(int, struct reset_control_bulk_data *);
371:	int reset_control_bulk_reset(int, struct reset_control_bulk_data *);
530:	int reset_control_deassert(struct reset_control *);
1282:	int reset_control_get_count(struct device *);
996:	void reset_control_put(struct reset_control *);
401:	int reset_control_rearm(struct reset_control *);
716:	void reset_control_release(struct reset_control *);
327:	int reset_control_reset(struct reset_control *);
605:	int reset_control_status(struct reset_control *);
172:	void reset_controller_add_lookup(struct reset_control_lookup *, unsigned int);
100:	int reset_controller_register(struct reset_controller_dev *);
121:	void reset_controller_unregister(struct reset_controller_dev *);
749:	static struct reset_control *__reset_control_get_internal(struct reset_controller_dev *, unsigned int, bool, bool);
1063:	static void devm_reset_control_bulk_release(struct device *, void *);
1029:	static void devm_reset_control_release(struct device *, void *);
129:	static void devm_reset_controller_release(struct device *, void *);
87:	static int of_reset_simple_xlate(struct reset_controller_dev *, const struct of_phandle_args *);

File drivers/reset/reset-scmi.c:
40:	static int scmi_reset_assert(struct reset_controller_dev *, unsigned long);
58:	static int scmi_reset_deassert(struct reset_controller_dev *, unsigned long);
128:	static void scmi_reset_driver_exit(void);
128:	static int scmi_reset_driver_init(void);
89:	static int scmi_reset_probe(struct scmi_device *);
76:	static int scmi_reset_reset(struct reset_controller_dev *, unsigned long);

File drivers/reset/reset-ti-sci.c:
106:	static int ti_sci_reset_assert(struct reset_controller_dev *, unsigned long);
124:	static int ti_sci_reset_deassert(struct reset_controller_dev *, unsigned long);
257:	static void ti_sci_reset_driver_exit(void);
257:	static int ti_sci_reset_driver_init(void);
184:	static int ti_sci_reset_of_xlate(struct reset_controller_dev *, const struct of_phandle_args *);
210:	static int ti_sci_reset_probe(struct platform_device *);
238:	static int ti_sci_reset_remove(struct platform_device *);
143:	static int ti_sci_reset_status(struct reset_controller_dev *, unsigned long);

File drivers/scsi/hosts.c:
218:	int scsi_add_host_with_dma(struct Scsi_Host *, struct device *, struct device *);
625:	void scsi_exit_hosts(void);
666:	void scsi_flush_work(struct Scsi_Host *);
393:	struct Scsi_Host *scsi_host_alloc(struct scsi_host_template *, int);
600:	int scsi_host_busy(struct Scsi_Host *);
732:	void scsi_host_busy_iter(struct Scsi_Host *, bool (*)(struct scsi_cmnd *, void *), void *);
702:	void scsi_host_complete_all_commands(struct Scsi_Host *, enum scsi_host_status);
576:	struct Scsi_Host *scsi_host_get(struct Scsi_Host *);
557:	struct Scsi_Host *scsi_host_lookup(unsigned short);
614:	void scsi_host_put(struct Scsi_Host *);
75:	int scsi_host_set_state(struct Scsi_Host *, enum scsi_host_state);
620:	int scsi_init_hosts(void);
631:	int scsi_is_host_device(const struct device *);
647:	int scsi_queue_work(struct Scsi_Host *, struct work_struct *);
165:	void scsi_remove_host(struct Scsi_Host *);
715:	static bool __scsi_host_busy_iter_fn(struct request *, void *);
537:	static int __scsi_host_match(struct device *, const void *);
680:	static bool complete_all_cmds_iter(struct request *, void *);
585:	static bool scsi_host_check_in_flight(struct request *, void *);
56:	static void scsi_host_cls_release(struct device *);
338:	static void scsi_host_dev_release(struct device *);

File drivers/scsi/libsas/sas_discover.c:
340:	void sas_destruct_devices(struct asd_sas_port *);
397:	void sas_device_set_phy(struct domain_device *, struct sas_port *);
278:	int sas_discover_end_dev(struct domain_device *);
548:	void sas_discover_event(struct asd_sas_port *, enum discover_event);
285:	void sas_free_device(struct kref *);
22:	void sas_init_dev(struct domain_device *);
568:	void sas_init_disc(struct sas_discovery *, struct asd_sas_port *);
169:	int sas_notify_lldd_dev_found(struct domain_device *);
192:	void sas_notify_lldd_dev_gone(struct domain_device *);
363:	void sas_unregister_dev(struct asd_sas_port *, struct domain_device *);
380:	void sas_unregister_domain_devices(struct asd_sas_port *, int);
428:	static void sas_discover_domain(struct work_struct *);
207:	static void sas_probe_devices(struct asd_sas_port *);
262:	static void sas_resume_devices(struct work_struct *);
489:	static void sas_revalidate_domain(struct work_struct *);
231:	static void sas_suspend_devices(struct work_struct *);
313:	static void sas_unregister_common_dev(struct asd_sas_port *, struct domain_device *);

File drivers/scsi/libsas/sas_event.c:
57:	void __sas_drain_work(struct sas_ha_struct *);
86:	void sas_disable_revalidation(struct sas_ha_struct *);
71:	int sas_drain_work(struct sas_ha_struct *);
93:	void sas_enable_revalidation(struct sas_ha_struct *);
191:	void sas_notify_phy_event(struct asd_sas_phy *, enum phy_event, gfp_t);
164:	void sas_notify_port_event(struct asd_sas_phy *, enum port_event, gfp_t);
41:	void sas_queue_deferred_work(struct sas_ha_struct *);
13:	bool sas_queue_work(struct sas_ha_struct *, struct sas_work *);
135:	static void sas_phy_event_worker(struct work_struct *);
124:	static void sas_port_event_worker(struct work_struct *);

File drivers/scsi/libsas/sas_expander.c:
1623:	int sas_discover_root_expander(struct domain_device *);
373:	int sas_ex_phy_discover(struct domain_device *, int);
2080:	int sas_ex_revalidate_domain(struct domain_device *);
328:	struct domain_device *sas_ex_to_ata(struct domain_device *, int);
2102:	int sas_find_attached_phy_id(struct expander_device *, struct domain_device *);
1691:	int sas_get_phy_attached_dev(struct domain_device *, int, u8 *, enum sas_device_type *);
637:	int sas_smp_get_phy_events(struct sas_phy *);
2118:	void sas_smp_handler(struct bsg_job *, struct Scsi_Host *, struct sas_rphy *);
555:	int sas_smp_phy_control(struct domain_device *, int, enum phy_func, struct sas_phy_linkrates *);
1496:	static int sas_configure_parent(struct domain_device *, struct domain_device *, u8 *, int);
1472:	static int sas_configure_phy(struct domain_device *, int, u8 *, int);
1901:	static int sas_discover_bfs_by_root(struct domain_device *);
1879:	static int sas_discover_bfs_by_root_level(struct domain_device *, const int);
1556:	static int sas_discover_expander(struct domain_device *);
1919:	static int sas_discover_new(struct domain_device *, int);
1148:	static int sas_ex_discover_devices(struct domain_device *, int);
352:	static int sas_ex_phy_discover_helper(struct domain_device *, u8 *, struct smp_disc_resp *, int);
1793:	static int sas_find_bcast_dev(struct domain_device *, struct domain_device **);
1713:	static int sas_find_bcast_phy(struct domain_device *, int *, int, bool);
1649:	static int sas_get_phy_discover(struct domain_device *, int, struct smp_disc_resp *);
1847:	static void sas_unregister_devs_sas_addr(struct domain_device *, int, bool);
1832:	static void sas_unregister_ex_tree(struct asd_sas_port *, struct domain_device *);
34:	static int smp_execute_task_sg(struct domain_device *, struct scatterlist *, struct scatterlist *);

File drivers/scsi/libsas/sas_host_smp.c:
225:	void sas_smp_host_handler(struct bsg_job *, struct Scsi_Host *);
100:	int try_test_sas_gpio_gp_bit(unsigned int, u8 *, u8, u8);
19:	static void sas_host_smp_discover(struct sas_ha_struct *, u8 *, u8);
180:	static void sas_phy_control(struct sas_ha_struct *, u8, u8, enum sas_linkrate, enum sas_linkrate, u8 *);
137:	static void sas_report_phy_sata(struct sas_ha_struct *, u8 *, u8);

File drivers/scsi/libsas/sas_init.c:
638:	struct asd_sas_event *sas_alloc_event(struct asd_sas_phy *, gfp_t);
39:	struct sas_task *sas_alloc_slow_task(gfp_t);
27:	struct sas_task *sas_alloc_task(gfp_t);
621:	struct scsi_transport_template *sas_domain_attach_transport(struct sas_domain_function_template *);
672:	void sas_free_event(struct asd_sas_event *);
59:	void sas_free_task(struct sas_task *);
68:	void sas_hash_addr(u8 *, const u8 *);
254:	int sas_phy_enable(struct sas_phy *, int);
288:	int sas_phy_reset(struct sas_phy *, int);
357:	void sas_prep_resume_ha(struct sas_ha_struct *);
93:	int sas_register_ha(struct sas_ha_struct *);
453:	void sas_resume_ha(struct sas_ha_struct *);
460:	void sas_resume_ha_no_sync(struct sas_ha_struct *);
318:	int sas_set_phy_speed(struct sas_phy *, struct sas_phy_linkrates *);
466:	void sas_suspend_ha(struct sas_ha_struct *);
194:	int sas_try_ata_reset(struct asd_sas_phy *);
162:	int sas_unregister_ha(struct sas_ha_struct *);
412:	static void _sas_resume_ha(struct sas_ha_struct *, bool);
498:	static void phy_enable_work(struct work_struct *);
589:	static ssize_t phy_event_threshold_show(struct device *, struct device_attribute *, char *);
598:	static ssize_t phy_event_threshold_store(struct device *, struct device_attribute *, const char *, size_t);
491:	static void phy_reset_work(struct work_struct *);
550:	static int queue_phy_enable(struct sas_phy *, int);
521:	static int queue_phy_reset(struct sas_phy *, int);
699:	static void sas_class_exit(void);
682:	static int sas_class_init(void);
179:	static int sas_get_linkerrors(struct sas_phy *);
485:	static void sas_phy_release(struct sas_phy *);
505:	static int sas_phy_setup(struct sas_phy *);
221:	static int transport_sas_phy_reset(struct sas_phy *, int);

File drivers/scsi/libsas/sas_internal.h:
216:	static void sas_put_device(struct domain_device *);

File drivers/scsi/libsas/sas_phy.c:
116:	int sas_register_phys(struct sas_ha_struct *);
17:	static void sas_phye_loss_of_signal(struct work_struct *);
26:	static void sas_phye_oob_done(struct work_struct *);
34:	static void sas_phye_oob_error(struct work_struct *);
75:	static void sas_phye_resume_timeout(struct work_struct *);
92:	static void sas_phye_shutdown(struct work_struct *);
63:	static void sas_phye_spinup_hold(struct work_struct *);

File drivers/scsi/libsas/sas_port.c:
210:	void sas_deform_port(struct asd_sas_phy *, int);
283:	void sas_porte_broadcast_rcvd(struct work_struct *);
275:	void sas_porte_bytes_dmaed(struct work_struct *);
317:	void sas_porte_hard_reset(struct work_struct *);
301:	void sas_porte_link_reset_err(struct work_struct *);
309:	void sas_porte_timer_event(struct work_struct *);
343:	int sas_register_ports(struct sas_ha_struct *);
357:	void sas_unregister_ports(struct sas_ha_struct *);

File drivers/scsi/libsas/sas_scsi_host.c:
1190:	int sas_abort_task(struct sas_task *, u16);
1144:	int sas_abort_task_set(struct domain_device *, u8 *);
884:	int sas_bios_param(struct scsi_device *, struct block_device *, sector_t, int *);
870:	int sas_change_queue_depth(struct scsi_device *, int);
1154:	int sas_clear_task_set(struct domain_device *, u8 *);
461:	int sas_eh_abort_handler(struct scsi_cmnd *);
493:	int sas_eh_device_reset_handler(struct scsi_cmnd *);
517:	int sas_eh_target_reset_handler(struct scsi_cmnd *);
1005:	int sas_execute_internal_abort_dev(struct domain_device *, unsigned int, void *);
997:	int sas_execute_internal_abort_single(struct domain_device *, u16, unsigned int, void *);
1013:	int sas_execute_tmf(struct domain_device *, void *, int, int, struct sas_tmf_task *);
798:	struct domain_device *sas_find_dev_by_rphy(struct sas_rphy *);
370:	struct sas_phy *sas_get_local_phy(struct domain_device *);
787:	int sas_ioctl(struct scsi_device *, unsigned int, void *);
1164:	int sas_lu_reset(struct domain_device *, u8 *);
1174:	int sas_query_task(struct sas_task *, u16);
161:	int sas_queuecommand(struct Scsi_Host *, struct scsi_cmnd *);
1256:	int sas_request_addr(struct Scsi_Host *, u8 *);
726:	void sas_scsi_recover_host(struct Scsi_Host *);
1233:	int sas_slave_alloc(struct scsi_device *);
843:	int sas_slave_configure(struct scsi_device *);
827:	int sas_target_alloc(struct scsi_target *);
1242:	void sas_target_destroy(struct scsi_target *);
1210:	void sas_task_abort(struct sas_task *);
897:	void sas_task_internal_done(struct sas_task *);
903:	void sas_task_internal_timedout(struct timer_list *);
37:	static void sas_end_task(struct scsi_cmnd *, struct sas_task *);
924:	static int sas_execute_internal_abort(struct domain_device *, enum sas_internal_abort, u16, unsigned int, void *);
419:	static int sas_queue_reset(struct domain_device *, int, u64, int);
99:	static void sas_scsi_task_done(struct sas_task *);

File drivers/scsi/libsas/sas_task.c:
11:	void sas_ssp_task_response(struct device *, struct sas_task *, struct ssp_response_iu *);

File drivers/scsi/scsi.c:
746:	struct scsi_device *__scsi_device_lookup(struct Scsi_Host *, uint, uint, u64);
688:	struct scsi_device *__scsi_device_lookup_by_target(struct scsi_target *, u64);
597:	struct scsi_device *__scsi_iterate_devices(struct Scsi_Host *, struct scsi_device *);
659:	void __starget_for_each_device(struct scsi_target *, void *, void (*)(struct scsi_device *, void *));
464:	void scsi_attach_vpd(struct scsi_device *);
217:	int scsi_change_queue_depth(struct scsi_device *, int);
562:	int scsi_device_get(struct scsi_device *);
774:	struct scsi_device *scsi_device_lookup(struct Scsi_Host *, uint, uint, u64);
713:	struct scsi_device *scsi_device_lookup_by_target(struct scsi_target *, u64);
205:	int scsi_device_max_queue_depth(struct scsi_device *);
587:	void scsi_device_put(struct scsi_device *);
158:	void scsi_finish_command(struct scsi_cmnd *);
362:	int scsi_get_vpd_page(struct scsi_device *, u8, unsigned char *, int);
507:	int scsi_report_opcode(struct scsi_device *, unsigned char *, unsigned int, unsigned char);
254:	int scsi_track_queue_full(struct scsi_device *, int);
631:	void starget_for_each_device(struct scsi_target *, void *, void (*)(struct scsi_device *, void *));
836:	static void exit_scsi(void);
796:	static int init_scsi(void);
400:	static struct scsi_vpd *scsi_get_vpd_buf(struct scsi_device *, u8);

File drivers/scsi/scsi_common.c:
114:	void int_to_scsilun(u64, struct scsi_lun *);
241:	void scsi_build_sense_buffer(int, u8 *, u8, u8, u8);
54:	const char *scsi_device_type(unsigned int);
147:	bool scsi_normalize_sense(const u8 *, int, struct scsi_sense_hdr *);
205:	const u8 *scsi_sense_desc_find(const u8 *, int, int);
319:	int scsi_set_sense_field_pointer(u8 *, int, u16, u8, bool);
269:	int scsi_set_sense_information(u8 *, int, u64);
86:	u64 scsilun_to_int(struct scsi_lun *);

File drivers/scsi/scsi_debugfs.c:
34:	void scsi_show_rq(struct seq_file *, struct request *);

File drivers/scsi/scsi_devinfo.c:
782:	int scsi_dev_info_add_list(enum scsi_devinfo_key, const char *);
349:	int scsi_dev_info_list_add_keyed(int, char *, char *, char *, blist_flags_t, enum scsi_devinfo_key);
497:	int scsi_dev_info_list_del_keyed(char *, char *, enum scsi_devinfo_key);
814:	int scsi_dev_info_remove_list(enum scsi_devinfo_key);
765:	void scsi_exit_devinfo(void);
576:	blist_flags_t scsi_get_device_flags(struct scsi_device *, const unsigned char *, const unsigned char *);
598:	blist_flags_t scsi_get_device_flags_keyed(struct scsi_device *, const unsigned char *, const unsigned char *, enum scsi_devinfo_key);
847:	int scsi_init_devinfo(void);
413:	static struct scsi_dev_info_list *scsi_dev_info_list_find(const char *, const char *, enum scsi_devinfo_key);

File drivers/scsi/scsi_error.c:
147:	void scmd_eh_abort_handler(struct work_struct *);
382:	int scsi_block_when_processing_errors(struct scsi_device *);
537:	enum scsi_disposition scsi_check_sense(struct scsi_cmnd *);
2479:	bool scsi_command_normalize_sense(const struct scsi_cmnd *, struct scsi_sense_hdr *);
1838:	enum scsi_disposition scsi_decide_disposition(struct scsi_cmnd *);
822:	void scsi_eh_done(struct scsi_cmnd *);
1242:	void scsi_eh_finish_cmd(struct scsi_cmnd *, struct list_head *);
2148:	void scsi_eh_flush_done_q(struct list_head *);
1268:	int scsi_eh_get_sense(struct list_head *, struct list_head *);
1004:	void scsi_eh_prep_cmnd(struct scsi_cmnd *, struct scsi_eh_save *, unsigned char *, int, unsigned int);
2130:	void scsi_eh_ready_devs(struct Scsi_Host *, struct list_head *, struct list_head *);
1074:	void scsi_eh_restore_cmnd(struct scsi_cmnd *, struct scsi_eh_save *);
297:	void scsi_eh_scmd_add(struct scsi_cmnd *);
64:	void scsi_eh_wakeup(struct Scsi_Host *);
2233:	int scsi_error_handler(void *);
2497:	bool scsi_get_sense_info_fld(const u8 *, int, u64 *);
2386:	int scsi_ioctl_reset(struct scsi_device *, int *);
1789:	bool scsi_noretry_cmd(struct scsi_cmnd *);
2335:	void scsi_report_bus_reset(struct Scsi_Host *, int);
2368:	void scsi_report_device_reset(struct Scsi_Host *, int, int);
82:	void scsi_schedule_eh(struct Scsi_Host *);
333:	enum blk_eh_timer_return scsi_timeout(struct request *);
894:	static void __scsi_report_device_reset(struct scsi_device *, void *);
2016:	static enum rq_end_io_ret eh_lock_door_done(struct request *, blk_status_t);
281:	static void scsi_eh_inc_host_failed(struct callback_head *);
1765:	static void scsi_eh_offline_sdevs(struct list_head *, struct list_head *);
1386:	static int scsi_eh_test_devices(struct list_head *, struct list_head *, struct list_head *, int);
732:	static void scsi_handle_queue_full(struct scsi_device *);
700:	static void scsi_handle_queue_ramp_up(struct scsi_device *);
1105:	static enum scsi_disposition scsi_send_eh_cmnd(struct scsi_cmnd *, unsigned char *, int, int, unsigned int);
868:	static enum scsi_disposition scsi_try_bus_reset(struct scsi_cmnd *);
838:	static enum scsi_disposition scsi_try_host_reset(struct scsi_cmnd *);
910:	static enum scsi_disposition scsi_try_target_reset(struct scsi_cmnd *);

File drivers/scsi/scsi_ioctl.c:
657:	int get_sg_io_hdr(struct sg_io_hdr *, const void *);
614:	int put_sg_io_hdr(const struct sg_io_hdr *, void *);
248:	bool scsi_cmd_allowed(unsigned char *, fmode_t);
860:	int scsi_ioctl(struct scsi_device *, fmode_t, int, void *);
944:	int scsi_ioctl_block_when_processing_errors(struct scsi_device *, int, bool);
121:	int scsi_set_medium_removal(struct scsi_device *, char);
67:	static int ioctl_internal_command(struct scsi_device *, char *, int, int);
369:	static int scsi_complete_sghdr_rq(struct request *, struct sg_io_hdr *, struct bio *);
407:	static int sg_io(struct scsi_device *, struct sg_io_hdr *, fmode_t);

File drivers/scsi/scsi_lib.c:
207:	int __scsi_execute(struct scsi_device *, const unsigned char *, int, void *, unsigned int, unsigned char *, struct scsi_sense_hdr *, int, int, blk_opf_t, req_flags_t, int *);
1875:	void __scsi_init_queue(struct Scsi_Host *, struct request_queue *);
1133:	struct request *scsi_alloc_request(struct request_queue *, blk_opf_t, blk_mq_req_flags_t);
1019:	blk_status_t scsi_alloc_sgtables(struct scsi_cmnd *);
2038:	void scsi_block_requests(struct Scsi_Host *);
3317:	void scsi_build_sense(struct scsi_cmnd *, int, u8, u8, u8);
2009:	struct scsi_device *scsi_device_from_queue(struct request_queue *);
2616:	int scsi_device_quiesce(struct scsi_device *);
2664:	void scsi_device_resume(struct scsi_device *);
2309:	int scsi_device_set_state(struct scsi_device *, enum scsi_device_state);
291:	void scsi_device_unbusy(struct scsi_device *, struct scsi_cmnd *);
1633:	void scsi_done(struct scsi_cmnd *);
1639:	void scsi_done_direct(struct scsi_cmnd *);
2483:	void scsi_evt_thread(struct work_struct *);
2061:	void scsi_exit_queue(void);
488:	void scsi_free_sgtables(struct scsi_cmnd *);
2936:	int scsi_host_block(struct Scsi_Host *);
2969:	int scsi_host_unblock(struct Scsi_Host *, int);
1158:	void scsi_init_command(struct scsi_device *, struct scsi_cmnd *);
61:	int scsi_init_sense_cache(struct Scsi_Host *);
2755:	int scsi_internal_device_block_nowait(struct scsi_device *);
2813:	int scsi_internal_device_unblock_nowait(struct scsi_device *, enum scsi_device_state);
955:	void scsi_io_completion(struct scsi_cmnd *, unsigned int);
2994:	void *scsi_kmap_atomic_sg(struct scatterlist *, int, size_t *, size_t *);
3039:	void scsi_kunmap_atomic_sg(void *);
2083:	int scsi_mode_select(struct scsi_device *, int, int, unsigned char *, int, int, int, struct scsi_mode_data *, struct scsi_sense_hdr *);
2161:	int scsi_mode_sense(struct scsi_device *, int, int, unsigned char *, int, int, int, struct scsi_mode_data *, struct scsi_sense_hdr *);
1993:	void scsi_mq_free_tags(struct kref *);
1961:	int scsi_mq_setup_tags(struct Scsi_Host *);
183:	void scsi_queue_insert(struct scsi_cmnd *, int);
460:	void scsi_requeue_run_queue(struct work_struct *);
470:	void scsi_run_host_queues(struct Scsi_Host *);
2715:	void scsi_start_queue(struct scsi_device *);
2899:	void scsi_target_block(struct device *);
2688:	void scsi_target_quiesce(struct scsi_target *);
2701:	void scsi_target_resume(struct scsi_target *);
2925:	void scsi_target_unblock(struct device *, enum scsi_device_state);
2278:	int scsi_test_unit_ready(struct scsi_device *, int, int, struct scsi_sense_hdr *);
2054:	void scsi_unblock_requests(struct Scsi_Host *);
3145:	int scsi_vpd_lun_id(struct scsi_device *, char *, size_t);
3269:	int scsi_vpd_tpg_id(struct scsi_device *, int *);
3045:	void sdev_disable_disk_events(struct scsi_device *);
3051:	void sdev_enable_disk_events(struct scsi_device *);
2551:	struct scsi_event *sdev_evt_alloc(enum scsi_device_event, gfp_t);
2523:	void sdev_evt_send(struct scsi_device *, struct scsi_event *);
2588:	void sdev_evt_send_simple(struct scsi_device *, enum scsi_device_event, gfp_t);
2879:	static void device_block(struct scsi_device *, void *);
2682:	static void device_quiesce_fn(struct scsi_device *, void *);
2695:	static void device_resume_fn(struct scsi_device *, void *);
2910:	static void device_unblock(struct scsi_device *, void *);
1149:	static void scsi_cleanup_rq(struct request *);
1933:	static void scsi_commit_rqs(struct blk_mq_hw_ctx *);
1422:	static void scsi_complete(struct request *);
276:	static void scsi_dec_host_busy(struct Scsi_Host *, struct scsi_cmnd *);
1198:	static blk_status_t scsi_device_state_check(struct scsi_device *, struct request *);
532:	static bool scsi_end_request(struct request *, blk_status_t, unsigned int);
1857:	static int scsi_init_hctx(struct blk_mq_hw_ctx *, void *, unsigned int);
2866:	static int scsi_internal_device_unblock(struct scsi_device *, enum scsi_device_state);
691:	static void scsi_io_completion_action(struct scsi_cmnd *, int);
866:	static int scsi_io_completion_nz_result(struct scsi_cmnd *, int, blk_status_t *);
314:	static void scsi_kick_sdev_queue(struct scsi_device *, void *);
1866:	static void scsi_map_queues(struct blk_mq_tag_set *);
1835:	static void scsi_mq_exit_request(struct blk_mq_tag_set *, struct request *, unsigned int);
1659:	static int scsi_mq_get_budget(struct request_queue *);
1697:	static int scsi_mq_get_rq_budget_token(struct request *);
1807:	static int scsi_mq_init_request(struct blk_mq_tag_set *, struct request *, unsigned int, unsigned int);
1396:	static bool scsi_mq_lld_busy(struct request_queue *);
1847:	static int scsi_mq_poll(struct blk_mq_hw_ctx *, struct io_comp_batch *);
1645:	static void scsi_mq_put_budget(struct request_queue *, int);
114:	static void scsi_mq_requeue_cmd(struct scsi_cmnd *, unsigned long);
1690:	static void scsi_mq_set_rq_budget_token(struct request *, int);
1704:	static blk_status_t scsi_queue_rq(struct blk_mq_hw_ctx *, const struct blk_mq_queue_data *);
448:	static void scsi_run_queue(struct request_queue *);
2890:	static int target_block(struct device *, void *);
2916:	static int target_unblock(struct device *, void *);

File drivers/scsi/scsi_lib_dma.c:
23:	int scsi_dma_map(struct scsi_cmnd *);
43:	void scsi_dma_unmap(struct scsi_cmnd *);

File drivers/scsi/scsi_logging.c:
157:	size_t __scsi_format_command(char *, size_t, const unsigned char *, size_t);
366:	void __scsi_print_sense(const struct scsi_device *, const char *, const unsigned char *, int);
83:	void scmd_printk(const char *, const struct scsi_cmnd *, const char *, ...);
180:	void scsi_print_command(struct scsi_cmnd *);
382:	void scsi_print_result(const struct scsi_cmnd *, const char *, int);
374:	void scsi_print_sense(const struct scsi_cmnd *);
358:	void scsi_print_sense_hdr(const struct scsi_device *, const char *, const struct scsi_sense_hdr *);
56:	void sdev_prefix_printk(const char *, const struct scsi_device *, const char *, const char *, ...);
240:	static size_t scsi_format_extd_sense(char *, size_t, unsigned char, unsigned char);
108:	static size_t scsi_format_opcode_name(char *, size_t, const unsigned char *);
343:	static void scsi_log_print_sense(const struct scsi_device *, const char *, int, const unsigned char *, int);
318:	static void scsi_log_print_sense_hdr(const struct scsi_device *, const char *, int, const struct scsi_sense_hdr *);
38:	static size_t sdev_format_header(char *, size_t, const char *, int);

File drivers/scsi/scsi_scan.c:
1561:	struct scsi_device *__scsi_add_device(struct Scsi_Host *, uint, uint, u64, void *);
1598:	int scsi_add_device(struct Scsi_Host *, uint, uint, u64);
149:	int scsi_complete_async_scans(void);
128:	void scsi_enable_async_suspend(struct device *);
1964:	void scsi_forget_host(struct Scsi_Host *);
420:	int scsi_is_target_device(const struct device *);
1611:	void scsi_rescan_device(struct device *);
616:	void scsi_sanitize_inquiry_string(unsigned char *, int);
1938:	void scsi_scan_host(struct Scsi_Host *);
1760:	int scsi_scan_host_selected(struct Scsi_Host *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
1704:	void scsi_scan_target(struct device *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
590:	void scsi_target_reap(struct scsi_target *);
1633:	static void __scsi_scan_target(struct device *, unsigned int, unsigned int, u64, enum scsi_scan_mode);
1925:	static void do_scan_async(void *, async_cookie_t);
278:	static struct scsi_device *scsi_alloc_sdev(struct scsi_target *, u64, void *);
491:	static struct scsi_target *scsi_alloc_target(struct device *, int, uint);
1147:	static int scsi_probe_and_add_lun(struct scsi_target *, u64, blist_flags_t *, struct scsi_device **, enum scsi_scan_mode, void *);
217:	static int scsi_realloc_sdev_budget_map(struct scsi_device *, unsigned int);
389:	static void scsi_target_destroy(struct scsi_target *);
406:	static void scsi_target_dev_release(struct device *);
201:	static void scsi_unlock_floptical(struct scsi_device *, unsigned char *);

File drivers/scsi/scsi_sysctl.c:
48:	void scsi_exit_sysctl(void);
40:	int scsi_init_sysctl(void);

File drivers/scsi/scsi_sysfs.c:
1420:	void __scsi_remove_device(struct scsi_device *);
47:	const char *scsi_device_state_name(enum scsi_device_state);
73:	const char *scsi_host_state_name(enum scsi_host_state);
1651:	int scsi_is_sdev_device(const struct device *);
1572:	int scsi_register_driver(struct device_driver *);
1580:	int scsi_register_interface(struct class_interface *);
1494:	void scsi_remove_device(struct scsi_device *);
1543:	void scsi_remove_target(struct device *);
1592:	int scsi_sysfs_add_host(struct Scsi_Host *);
1364:	int scsi_sysfs_add_sdev(struct scsi_device *);
1605:	void scsi_sysfs_device_initialize(struct scsi_device *);
561:	int scsi_sysfs_register(void);
575:	void scsi_sysfs_unregister(void);
526:	static int scsi_bus_match(struct device *, struct device_driver *);
539:	static int scsi_bus_uevent(struct device *, struct kobj_uevent_env *);
436:	static void scsi_device_cls_release(struct device *);
444:	static void scsi_device_dev_release(struct device *);
1224:	static umode_t scsi_sdev_attr_is_visible(struct kobject *, struct attribute *, int);
1242:	static umode_t scsi_sdev_bin_attr_is_visible(struct kobject *, struct bin_attribute *, int);
1075:	static ssize_t sdev_show_blacklist(struct device *, struct device_attribute *, char *);
684:	static ssize_t sdev_show_device_blocked(struct device *, struct device_attribute *, char *);
675:	static ssize_t sdev_show_device_busy(struct device *, struct device_attribute *, char *);
717:	static ssize_t sdev_show_eh_timeout(struct device *, struct device_attribute *, char *);
1017:	static ssize_t sdev_show_evt_capacity_change_reported(struct device *, struct device_attribute *, char *);
1016:	static ssize_t sdev_show_evt_inquiry_change_reported(struct device *, struct device_attribute *, char *);
1020:	static ssize_t sdev_show_evt_lun_change_reported(struct device *, struct device_attribute *, char *);
1015:	static ssize_t sdev_show_evt_media_change(struct device *, struct device_attribute *, char *);
1019:	static ssize_t sdev_show_evt_mode_parameter_change_reported(struct device *, struct device_attribute *, char *);
1018:	static ssize_t sdev_show_evt_soft_threshold_reached(struct device *, struct device_attribute *, char *);
974:	static ssize_t sdev_show_modalias(struct device *, struct device_attribute *, char *);
671:	static ssize_t sdev_show_model(struct device *, struct device_attribute *, char *);
1046:	static ssize_t sdev_show_queue_depth(struct device *, struct device_attribute *, char *);
1195:	static ssize_t sdev_show_queue_ramp_up_period(struct device *, struct device_attribute *, char *);
672:	static ssize_t sdev_show_rev(struct device *, struct device_attribute *, char *);
669:	static ssize_t sdev_show_scsi_level(struct device *, struct device_attribute *, char *);
696:	static ssize_t sdev_show_timeout(struct device *, struct device_attribute *, char *);
668:	static ssize_t sdev_show_type(struct device *, struct device_attribute *, char *);
670:	static ssize_t sdev_show_vendor(struct device *, struct device_attribute *, char *);
1052:	static ssize_t sdev_show_wwid(struct device *, struct device_attribute *, char *);
755:	static ssize_t sdev_store_delete(struct device *, struct device_attribute *, const char *, size_t);
725:	static ssize_t sdev_store_eh_timeout(struct device *, struct device_attribute *, const char *, size_t);
1017:	static ssize_t sdev_store_evt_capacity_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1016:	static ssize_t sdev_store_evt_inquiry_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1020:	static ssize_t sdev_store_evt_lun_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1015:	static ssize_t sdev_store_evt_media_change(struct device *, struct device_attribute *, const char *, size_t);
1019:	static ssize_t sdev_store_evt_mode_parameter_change_reported(struct device *, struct device_attribute *, const char *, size_t);
1018:	static ssize_t sdev_store_evt_soft_threshold_reached(struct device *, struct device_attribute *, const char *, size_t);
1023:	static ssize_t sdev_store_queue_depth(struct device *, struct device_attribute *, const char *, size_t);
1206:	static ssize_t sdev_store_queue_ramp_up_period(struct device *, struct device_attribute *, const char *, size_t);
704:	static ssize_t sdev_store_timeout(struct device *, struct device_attribute *, const char *, size_t);
374:	static ssize_t show_can_queue(struct device *, struct device_attribute *, char *);
373:	static ssize_t show_cmd_per_lun(struct device *, struct device_attribute *, char *);
382:	static ssize_t show_host_busy(struct device *, struct device_attribute *, char *);
925:	static ssize_t show_inquiry(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
949:	static ssize_t show_iostat_counterbits(struct device *, struct device_attribute *, char *);
969:	static ssize_t show_iostat_iodone_cnt(struct device *, struct device_attribute *, char *);
970:	static ssize_t show_iostat_ioerr_cnt(struct device *, struct device_attribute *, char *);
968:	static ssize_t show_iostat_iorequest_cnt(struct device *, struct device_attribute *, char *);
971:	static ssize_t show_iostat_iotmo_cnt(struct device *, struct device_attribute *, char *);
397:	static ssize_t show_nr_hw_queues(struct device *, struct device_attribute *, char *);
379:	static ssize_t show_proc_name(struct device *, struct device_attribute *, char *);
377:	static ssize_t show_prot_capabilities(struct device *, struct device_attribute *, char *);
378:	static ssize_t show_prot_guard_type(struct device *, struct device_attribute *, char *);
863:	static ssize_t show_queue_type_field(struct device *, struct device_attribute *, char *);
376:	static ssize_t show_sg_prot_tablesize(struct device *, struct device_attribute *, char *);
375:	static ssize_t show_sg_tablesize(struct device *, struct device_attribute *, char *);
271:	static ssize_t show_shost_active_mode(struct device *, struct device_attribute *, char *);
321:	static ssize_t show_shost_eh_deadline(struct device *, struct device_attribute *, char *);
223:	static ssize_t show_shost_state(struct device *, struct device_attribute *, char *);
255:	static ssize_t show_shost_supported_mode(struct device *, struct device_attribute *, char *);
849:	static ssize_t show_state_field(struct device *, struct device_attribute *, char *);
372:	static ssize_t show_unique_id(struct device *, struct device_attribute *, char *);
390:	static ssize_t show_use_blk_mq(struct device *, struct device_attribute *, char *);
923:	static ssize_t show_vpd_pg0(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
918:	static ssize_t show_vpd_pg80(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
917:	static ssize_t show_vpd_pg83(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
919:	static ssize_t show_vpd_pg89(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
920:	static ssize_t show_vpd_pgb0(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
921:	static ssize_t show_vpd_pgb1(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
922:	static ssize_t show_vpd_pgb2(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
295:	static ssize_t store_host_reset(struct device *, struct device_attribute *, const char *, size_t);
876:	static ssize_t store_queue_type_field(struct device *, struct device_attribute *, const char *, size_t);
746:	static ssize_t store_rescan_field(struct device *, struct device_attribute *, const char *, size_t);
185:	static ssize_t store_scan(struct device *, struct device_attribute *, const char *, size_t);
332:	static ssize_t store_shost_eh_deadline(struct device *, struct device_attribute *, const char *, size_t);
199:	static ssize_t store_shost_state(struct device *, struct device_attribute *, const char *, size_t);
790:	static ssize_t store_state_field(struct device *, struct device_attribute *, const char *, size_t);

File drivers/scsi/scsi_trace.c:
354:	const char *scsi_trace_parse_cdb(struct trace_seq *, unsigned char *, int);

File drivers/scsi/scsi_transport_sas.c:
1752:	struct scsi_transport_template *sas_attach_transport(struct sas_function_template *);
382:	void sas_disable_tlr(struct scsi_device *);
397:	void sas_enable_tlr(struct scsi_device *);
1438:	struct sas_rphy *sas_end_device_alloc(struct sas_port *);
1477:	struct sas_rphy *sas_expander_alloc(struct sas_port *, enum sas_device_type);
328:	u64 sas_get_address(struct scsi_device *);
412:	unsigned int sas_is_tlr_enabled(struct scsi_device *);
720:	int sas_phy_add(struct sas_phy *);
685:	struct sas_phy *sas_phy_alloc(struct device *, int);
764:	void sas_phy_delete(struct sas_phy *);
749:	void sas_phy_free(struct sas_phy *);
950:	int sas_port_add(struct sas_port *);
1073:	void sas_port_add_phy(struct sas_port *, struct sas_phy *);
879:	struct sas_port *sas_port_alloc(struct device *, int);
924:	struct sas_port *sas_port_alloc_num(struct device *);
993:	void sas_port_delete(struct sas_port *);
1107:	void sas_port_delete_phy(struct sas_port *, struct sas_phy *);
979:	void sas_port_free(struct sas_port *);
1042:	struct sas_phy *sas_port_get_phy(struct sas_port *);
1117:	void sas_port_mark_backlink(struct sas_port *);
1238:	int sas_read_port_mode_page(struct scsi_device *);
1860:	void sas_release_transport(struct scsi_transport_template *);
298:	void sas_remove_children(struct device *);
315:	void sas_remove_host(struct Scsi_Host *);
1514:	int sas_rphy_add(struct sas_rphy *);
1596:	void sas_rphy_delete(struct sas_rphy *);
1573:	void sas_rphy_free(struct sas_rphy *);
1624:	void sas_rphy_remove(struct sas_rphy *);
1609:	void sas_rphy_unlink(struct sas_rphy *);
345:	unsigned int sas_tlr_supported(struct scsi_device *);
785:	int scsi_is_sas_phy(const struct device *);
1032:	int scsi_is_sas_port(const struct device *);
1654:	int scsi_is_sas_rphy(const struct device *);
281:	static int do_sas_phy_delete(struct device *, void *);
142:	static ssize_t get_sas_protocol_names(u32, char *);
190:	static int sas_bsg_initialize(struct Scsi_Host *, struct sas_rphy *);
1352:	static int sas_end_dev_match(struct attribute_container *, struct device *);
1408:	static void sas_end_device_release(struct device *);
1375:	static int sas_expander_match(struct attribute_container *, struct device *);
1399:	static void sas_expander_release(struct device *);
261:	static int sas_host_match(struct attribute_container *, struct device *);
248:	static int sas_host_remove(struct transport_container *, struct device *, struct device *);
223:	static int sas_host_setup(struct transport_container *, struct device *, struct device *);
642:	static int sas_phy_match(struct attribute_container *, struct device *);
661:	static void sas_phy_release(struct device *);
626:	static int sas_phy_setup(struct transport_container *, struct device *, struct device *);
813:	static int sas_port_match(struct attribute_container *, struct device *);
833:	static void sas_port_release(struct device *);
1333:	static int sas_rphy_match(struct attribute_container *, struct device *);
172:	static int sas_smp_dispatch(struct bsg_job *);
1915:	static void sas_transport_exit(void);
1875:	static int sas_transport_init(void);
1666:	static int sas_user_scan(struct Scsi_Host *, uint, uint, u64);
159:	static ssize_t set_sas_linkspeed_names(u32 *, const char *);
519:	static ssize_t show_sas_device_type(struct device *, struct device_attribute *, char *);
1292:	static ssize_t show_sas_end_dev_I_T_nexus_loss_timeout(struct device *, struct device_attribute *, char *);
1294:	static ssize_t show_sas_end_dev_initiator_response_timeout(struct device *, struct device_attribute *, char *);
1291:	static ssize_t show_sas_end_dev_ready_led_meaning(struct device *, struct device_attribute *, char *);
1298:	static ssize_t show_sas_end_dev_tlr_enabled(struct device *, struct device_attribute *, char *);
1296:	static ssize_t show_sas_end_dev_tlr_supported(struct device *, struct device_attribute *, char *);
1325:	static ssize_t show_sas_expander_component_id(struct device *, struct device_attribute *, char *);
1326:	static ssize_t show_sas_expander_component_revision_id(struct device *, struct device_attribute *, char *);
1323:	static ssize_t show_sas_expander_component_vendor_id(struct device *, struct device_attribute *, char *);
1328:	static ssize_t show_sas_expander_level(struct device *, struct device_attribute *, char *);
1321:	static ssize_t show_sas_expander_product_id(struct device *, struct device_attribute *, char *);
1322:	static ssize_t show_sas_expander_product_rev(struct device *, struct device_attribute *, char *);
1320:	static ssize_t show_sas_expander_vendor_id(struct device *, struct device_attribute *, char *);
567:	static ssize_t show_sas_phy_enable(struct device *, struct device_attribute *, char *);
609:	static ssize_t show_sas_phy_initiator_port_protocols(struct device *, struct device_attribute *, char *);
621:	static ssize_t show_sas_phy_invalid_dword_count(struct device *, struct device_attribute *, char *);
623:	static ssize_t show_sas_phy_loss_of_dword_sync_count(struct device *, struct device_attribute *, char *);
620:	static ssize_t show_sas_phy_maximum_linkrate(struct device *, struct device_attribute *, char *);
619:	static ssize_t show_sas_phy_maximum_linkrate_hw(struct device *, struct device_attribute *, char *);
618:	static ssize_t show_sas_phy_minimum_linkrate(struct device *, struct device_attribute *, char *);
617:	static ssize_t show_sas_phy_minimum_linkrate_hw(struct device *, struct device_attribute *, char *);
616:	static ssize_t show_sas_phy_negotiated_linkrate(struct device *, struct device_attribute *, char *);
615:	static ssize_t show_sas_phy_phy_identifier(struct device *, struct device_attribute *, char *);
624:	static ssize_t show_sas_phy_phy_reset_problem_count(struct device *, struct device_attribute *, char *);
622:	static ssize_t show_sas_phy_running_disparity_error_count(struct device *, struct device_attribute *, char *);
613:	static ssize_t show_sas_phy_sas_address(struct device *, struct device_attribute *, char *);
611:	static ssize_t show_sas_phy_target_port_protocols(struct device *, struct device_attribute *, char *);
808:	static ssize_t show_sas_port_num_phys(struct device *, struct device_attribute *, char *);
1209:	static ssize_t show_sas_rphy_bay_identifier(struct device *, struct device_attribute *, char *);
1174:	static ssize_t show_sas_rphy_device_type(struct device *, struct device_attribute *, char *);
1189:	static ssize_t show_sas_rphy_enclosure_identifier(struct device *, struct device_attribute *, char *);
1227:	static ssize_t show_sas_rphy_initiator_port_protocols(struct device *, struct device_attribute *, char *);
1232:	static ssize_t show_sas_rphy_phy_identifier(struct device *, struct device_attribute *, char *);
1230:	static ssize_t show_sas_rphy_sas_address(struct device *, struct device_attribute *, char *);
1233:	static ssize_t show_sas_rphy_scsi_target_id(struct device *, struct device_attribute *, char *);
1229:	static ssize_t show_sas_rphy_target_port_protocols(struct device *, struct device_attribute *, char *);
602:	static ssize_t store_sas_hard_reset(struct device *, struct device_attribute *, const char *, size_t);
594:	static ssize_t store_sas_link_reset(struct device *, struct device_attribute *, const char *, size_t);
546:	static ssize_t store_sas_phy_enable(struct device *, struct device_attribute *, const char *, size_t);
620:	static ssize_t store_sas_phy_maximum_linkrate(struct device *, struct device_attribute *, const char *, size_t);
618:	static ssize_t store_sas_phy_minimum_linkrate(struct device *, struct device_attribute *, const char *, size_t);

File drivers/scsi/scsicam.c:
33:	unsigned char *scsi_bios_ptable(struct block_device *);
60:	bool scsi_partsize(struct block_device *, sector_t, int *);
218:	int scsicam_bios_param(struct block_device *, sector_t, int *);

File drivers/slimbus/core.c:
121:	int __slim_driver_register(struct slim_driver *, struct module *);
419:	struct slim_device *of_slim_get_device(struct slim_controller *, struct device_node *);
488:	int slim_device_report_present(struct slim_controller *, struct slim_eaddr *, u8 *);
139:	void slim_driver_unregister(struct slim_driver *);
371:	struct slim_device *slim_get_device(struct slim_controller *, struct slim_eaddr *);
528:	int slim_get_logical_addr(struct slim_device *);
249:	int slim_register_controller(struct slim_controller *);
314:	void slim_report_absent(struct slim_device *);
298:	int slim_unregister_controller(struct slim_controller *);
387:	static int of_slim_match_dev(struct device *, void *);
175:	static struct slim_device *slim_alloc_device(struct slim_controller *, struct slim_eaddr *, struct device_node *);
287:	static int slim_ctrl_remove_device(struct device *, void *);
145:	static void slim_dev_release(struct device *);
426:	static int slim_device_alloc_laddr(struct slim_device *, bool);
33:	static int slim_device_match(struct device *, struct device_driver *);
62:	static int slim_device_probe(struct device *);
84:	static void slim_device_remove(struct device *);
96:	static int slim_device_uevent(struct device *, struct kobj_uevent_env *);
339:	static int slim_match_dev(struct device *, void *);
537:	static void slimbus_exit(void);
543:	static int slimbus_init(void);

File drivers/slimbus/messaging.c:
63:	int slim_alloc_txn_tid(struct slim_controller *, struct slim_msg_txn *);
110:	int slim_do_transfer(struct slim_controller *, struct slim_msg_txn *);
87:	void slim_free_txn_tid(struct slim_controller *, struct slim_msg_txn *);
24:	void slim_msg_response(struct slim_controller *, u8 *, u8, u8);
296:	int slim_read(struct slim_device *, u32, size_t, u8 *);
314:	int slim_readb(struct slim_device *, u32);
339:	int slim_write(struct slim_device *, u32, size_t, u8 *);
361:	int slim_writeb(struct slim_device *, u32, u8);
233:	int slim_xfer_msg(struct slim_device *, struct slim_val_inf *, u8);

File drivers/slimbus/qcom-ctrl.c:
278:	static int qcom_clk_pause_wakeup(struct slim_controller *);
389:	static int qcom_set_laddr(struct slim_controller *, struct slim_eaddr *, u8);
731:	static void qcom_slim_driver_exit(void);
731:	static int qcom_slim_driver_init(void);
263:	static irqreturn_t qcom_slim_interrupt(int, void *);
487:	static int qcom_slim_probe(struct platform_device *);
629:	static int qcom_slim_remove(struct platform_device *);
439:	static void qcom_slim_rxwq(struct work_struct *);
325:	static int qcom_xfer_msg(struct slim_controller *, struct slim_msg_txn *);

File drivers/slimbus/sched.c:
25:	int slim_ctrl_clk_pause(struct slim_controller *, bool, u8);

File drivers/slimbus/stream.c:
99:	struct slim_stream_runtime *slim_stream_allocate(struct slim_device *, const char *);
410:	int slim_stream_disable(struct slim_stream_runtime *);
357:	int slim_stream_enable(struct slim_stream_runtime *);
477:	int slim_stream_free(struct slim_stream_runtime *);
202:	int slim_stream_prepare(struct slim_stream_runtime *, struct slim_stream_config *);
447:	int slim_stream_unprepare(struct slim_stream_runtime *);

File drivers/soc/bcm/brcmstb/biuctrl.c:
176:	static void a72_b53_rac_enable_all(struct device_node *);
328:	static int brcmstb_biuctrl_init(void);
206:	static void mcp_a72_b53_set(void);
114:	static int mcp_write_pairing_set(void);
253:	static int setup_hifcpubiuctrl_regs(struct device_node *);

File drivers/soc/bcm/brcmstb/common.c:
17:	u32 brcmstb_get_family_id(void);
23:	u32 brcmstb_get_product_id(void);
43:	static int brcmstb_soc_device_early_init(void);
71:	static int brcmstb_soc_device_init(void);

File drivers/soc/ti/k3-ringacc.c:
1463:	struct k3_ringacc *k3_ringacc_dmarings_init(struct platform_device *, struct k3_ringacc_init_data *);
633:	u32 k3_ringacc_get_ring_id(struct k3_ring *);
651:	int k3_ringacc_get_ring_irq_num(struct k3_ring *);
642:	u32 k3_ringacc_get_tisci_dev_id(struct k3_ring *);
332:	struct k3_ring *k3_ringacc_request_ring(struct k3_ringacc *, int, u32);
428:	int k3_ringacc_request_rings_pair(struct k3_ringacc *, int, int, struct k3_ring **, struct k3_ring **);
776:	int k3_ringacc_ring_cfg(struct k3_ring *, struct k3_ring_cfg *);
577:	int k3_ringacc_ring_free(struct k3_ring *);
889:	u32 k3_ringacc_ring_get_free(struct k3_ring *);
901:	u32 k3_ringacc_ring_get_occ(struct k3_ring *);
880:	u32 k3_ringacc_ring_get_size(struct k3_ring *);
910:	u32 k3_ringacc_ring_is_full(struct k3_ring *);
1228:	int k3_ringacc_ring_pop(struct k3_ring *, void *);
1251:	int k3_ringacc_ring_pop_tail(struct k3_ring *, void *);
1188:	int k3_ringacc_ring_push(struct k3_ring *, void *);
1208:	int k3_ringacc_ring_push_head(struct k3_ring *, void *);
473:	void k3_ringacc_ring_reset(struct k3_ring *);
502:	void k3_ringacc_ring_reset_dma(struct k3_ring *, u32);
1274:	struct k3_ringacc *of_k3_ringacc_get_by_phandle(struct device_node *, const char *);
1092:	static int k3_dmaring_fwd_pop(struct k3_ring *, void *);
1122:	static int k3_dmaring_reverse_pop(struct k3_ring *, void *);
1575:	static void k3_ringacc_driver_exit(void);
1575:	static int k3_ringacc_driver_init(void);
1358:	static int k3_ringacc_init(struct platform_device *, struct k3_ringacc *);
1524:	static int k3_ringacc_probe(struct platform_device *);
1556:	static int k3_ringacc_remove(struct platform_device *);
665:	static int k3_ringacc_ring_cfg_sci(struct k3_ring *);
999:	static int k3_ringacc_ring_pop_head_proxy(struct k3_ring *, void *);
1070:	static int k3_ringacc_ring_pop_io(struct k3_ring *, void *);
1171:	static int k3_ringacc_ring_pop_mem(struct k3_ring *, void *);
1076:	static int k3_ringacc_ring_pop_tail_io(struct k3_ring *, void *);
1005:	static int k3_ringacc_ring_pop_tail_proxy(struct k3_ring *, void *);
1058:	static int k3_ringacc_ring_push_head_io(struct k3_ring *, void *);
987:	static int k3_ringacc_ring_push_head_proxy(struct k3_ring *, void *);
1064:	static int k3_ringacc_ring_push_io(struct k3_ring *, void *);
1148:	static int k3_ringacc_ring_push_mem(struct k3_ring *, void *);
993:	static int k3_ringacc_ring_push_tail_proxy(struct k3_ring *, void *);

File drivers/soc/ti/k3-socinfo.c:
153:	static int k3_chipinfo_init(void);
64:	static int k3_chipinfo_probe(struct platform_device *);

File drivers/soc/ti/ti_sci_inta_msi.c:
47:	struct irq_domain *ti_sci_inta_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
92:	int ti_sci_inta_msi_domain_alloc_irqs(struct device *, struct ti_sci_resource *);
24:	static void ti_sci_inta_msi_compose_msi_msg(struct irq_data *, struct msi_msg *);
18:	static void ti_sci_inta_msi_write_msg(struct irq_data *, struct msi_msg *);

File drivers/spi/spi-cadence-quadspi.c:
454:	static int cqspi_enable_dtr(struct cqspi_flash_pdata *, const struct spi_mem_op *, unsigned int);
407:	static int cqspi_exec_flash_cmd(struct cqspi_st *, unsigned int);
1348:	static int cqspi_exec_mem_op(struct spi_mem *, const struct spi_mem_op *);
1527:	static const char *cqspi_get_name(struct spi_mem *);
304:	static u32 cqspi_get_versal_dma_status(struct cqspi_st *);
661:	static int cqspi_indirect_read_execute(struct cqspi_flash_pdata *, u8 *, loff_t, const size_t);
316:	static irqreturn_t cqspi_irq_handler(int, void *);
1868:	static void cqspi_platform_driver_exit(void);
1868:	static int cqspi_platform_driver_init(void);
1583:	static int cqspi_probe(struct platform_device *);
1753:	static int cqspi_remove(struct platform_device *);
1233:	static void cqspi_rx_dma_callback(void *);
1359:	static bool cqspi_supports_mem_op(struct spi_mem *, const struct spi_mem_op *);
774:	static int cqspi_versal_indirect_read_dma(struct cqspi_flash_pdata *, u_char *, loff_t, size_t);

File drivers/spi/spi-dw-core.c:
887:	int dw_spi_add_host(struct device *, struct dw_spi *);
180:	int dw_spi_check_status(struct dw_spi *, bool);
977:	void dw_spi_remove_host(struct dw_spi *);
1005:	int dw_spi_resume_host(struct dw_spi *);
93:	void dw_spi_set_cs(struct spi_device *, bool);
992:	int dw_spi_suspend_host(struct dw_spi *);
318:	void dw_spi_update_config(struct dw_spi *, struct spi_device *, struct dw_spi_cfg *);
480:	static int dw_spi_adjust_mem_op_size(struct spi_mem *, struct spi_mem_op *);
814:	static void dw_spi_cleanup(struct spi_device *);
664:	static int dw_spi_exec_mem_op(struct spi_mem *, const struct spi_mem_op *);
469:	static void dw_spi_handle_err(struct spi_controller *, struct spi_message *);
823:	static void dw_spi_hw_init(struct device *, struct dw_spi *);
254:	static irqreturn_t dw_spi_irq(int, void *);
778:	static int dw_spi_setup(struct spi_device *);
488:	static bool dw_spi_supports_mem_op(struct spi_mem *, const struct spi_mem_op *);
216:	static irqreturn_t dw_spi_transfer_handler(struct dw_spi *);
416:	static int dw_spi_transfer_one(struct spi_controller *, struct spi_device *, struct spi_transfer *);

File drivers/spi/spi-dw-dma.c:
667:	void dw_spi_dma_setup_generic(struct dw_spi *);
652:	void dw_spi_dma_setup_mfld(struct dw_spi *);
201:	static bool dw_spi_can_dma(struct spi_controller *, struct spi_device *, struct spi_transfer *);
179:	static void dw_spi_dma_exit(struct dw_spi *);
143:	static int dw_spi_dma_init_generic(struct device *, struct dw_spi *);
92:	static int dw_spi_dma_init_mfld(struct device *, struct dw_spi *);
374:	static void dw_spi_dma_rx_done(void *);
428:	static int dw_spi_dma_setup(struct dw_spi *, struct spi_transfer *);
631:	static void dw_spi_dma_stop(struct dw_spi *);
598:	static int dw_spi_dma_transfer(struct dw_spi *, struct spi_transfer *);
192:	static irqreturn_t dw_spi_dma_transfer_handler(struct dw_spi *);
273:	static void dw_spi_dma_tx_done(void *);

File drivers/spi/spi-dw-mmio.c:
191:	static int dw_spi_alpine_init(struct platform_device *, struct dw_spi_mmio *);
225:	static int dw_spi_canaan_k210_init(struct platform_device *, struct dw_spi_mmio *);
207:	static int dw_spi_hssi_init(struct platform_device *, struct dw_spi_mmio *);
217:	static int dw_spi_intel_init(struct platform_device *, struct dw_spi_mmio *);
376:	static void dw_spi_mmio_driver_exit(void);
376:	static int dw_spi_mmio_driver_init(void);
240:	static int dw_spi_mmio_probe(struct platform_device *);
331:	static int dw_spi_mmio_remove(struct platform_device *);
82:	static int dw_spi_mscc_init(struct platform_device *, struct dw_spi_mmio *, const char *, u32);
123:	static int dw_spi_mscc_jaguar2_init(struct platform_device *, struct dw_spi_mmio *);
116:	static int dw_spi_mscc_ocelot_init(struct platform_device *, struct dw_spi_mmio *);
63:	static void dw_spi_mscc_set_cs(struct spi_device *, bool);
162:	static int dw_spi_mscc_sparx5_init(struct platform_device *, struct dw_spi_mmio *);
199:	static int dw_spi_pssi_init(struct platform_device *, struct dw_spi_mmio *);

File drivers/spi/spi-mem.c:
614:	struct spi_mem_dirmap_desc *devm_spi_mem_dirmap_create(struct device *, struct spi_mem *, const struct spi_mem_dirmap_info *);
655:	void devm_spi_mem_dirmap_destroy(struct device *, struct spi_mem_dirmap_desc *);
36:	int spi_controller_dma_map_mem_op_data(struct spi_controller *, const struct spi_mem_op *, struct sg_table *);
82:	void spi_controller_dma_unmap_mem_op_data(struct spi_controller *, const struct spi_mem_op *, struct sg_table *);
455:	int spi_mem_adjust_op_size(struct spi_mem *, struct spi_mem_op *);
164:	bool spi_mem_default_supports_op(struct spi_mem *, const struct spi_mem_op *);
535:	struct spi_mem_dirmap_desc *spi_mem_dirmap_create(struct spi_mem *, const struct spi_mem_dirmap_info *);
583:	void spi_mem_dirmap_destroy(struct spi_mem_dirmap_desc *);
679:	ssize_t spi_mem_dirmap_read(struct spi_mem_dirmap_desc *, u64, size_t, void *);
725:	ssize_t spi_mem_dirmap_write(struct spi_mem_dirmap_desc *, u64, size_t, const void *);
898:	int spi_mem_driver_register_with_owner(struct spi_mem_driver *, struct module *);
915:	void spi_mem_driver_unregister(struct spi_mem_driver *);
312:	int spi_mem_exec_op(struct spi_mem *, const struct spi_mem_op *);
434:	const char *spi_mem_get_name(struct spi_mem *);
795:	int spi_mem_poll_status(struct spi_mem *, const struct spi_mem_op *, u16, u16, unsigned long, unsigned long, u16);
253:	bool spi_mem_supports_op(struct spi_mem *, const struct spi_mem_op *);
636:	static int devm_spi_mem_dirmap_match(struct device *, void *, void *);
594:	static void devm_spi_mem_dirmap_release(struct device *, void *);
199:	static int spi_mem_check_op(const struct spi_mem_op *);
845:	static int spi_mem_probe(struct spi_device *);
760:	static int spi_mem_read_status(struct spi_mem *, const struct spi_mem_op *, u16 *);
870:	static void spi_mem_remove(struct spi_device *);
879:	static void spi_mem_shutdown(struct spi_device *);

File drivers/spi/spi-nxp-fspi.c:
902:	static int nxp_fspi_adjust_op_size(struct spi_mem *, struct spi_mem_op *);
587:	static int nxp_fspi_clk_prep_enable(struct nxp_fspi *);
964:	static int nxp_fspi_default_setup(struct nxp_fspi *);
1262:	static void nxp_fspi_driver_exit(void);
1262:	static int nxp_fspi_driver_init(void);
862:	static int nxp_fspi_exec_op(struct spi_mem *, const struct spi_mem_op *);
1046:	static const char *nxp_fspi_get_name(struct spi_mem *);
408:	static irqreturn_t nxp_fspi_irq_handler(int, void *);
1075:	static int nxp_fspi_probe(struct platform_device *);
1198:	static int nxp_fspi_remove(struct platform_device *);
1220:	static int nxp_fspi_resume(struct device *);
436:	static bool nxp_fspi_supports_op(struct spi_mem *, const struct spi_mem_op *);
1215:	static int nxp_fspi_suspend(struct device *);

File drivers/spi/spi-pl022.c:
911:	static int configure_dma(struct pl022 *);
800:	static void dma_callback(void *);
474:	static void giveback(struct pl022 *);
642:	static void load_ssp_default_config(struct pl022 *);
2070:	static void pl022_cleanup(struct spi_device *);
1149:	static int pl022_dma_autoprobe(struct pl022 *);
1101:	static int pl022_dma_probe(struct pl022 *);
1201:	static void pl022_dma_remove(struct pl022 *);
2445:	static void pl022_exit(void);
2439:	static int pl022_init(void);
1246:	static irqreturn_t pl022_interrupt_handler(int, void *);
2102:	static int pl022_probe(struct amba_device *, const struct amba_id *);
2255:	static void pl022_remove(struct amba_device *);
1840:	static int pl022_setup(struct spi_device *);
1576:	static int pl022_transfer_one_message(struct spi_controller *, struct spi_message *);
1605:	static int pl022_unprepare_transfer_hardware(struct spi_controller *);
1370:	static void pump_transfers(unsigned long);
664:	static void readwriter(struct pl022 *);
857:	static void setup_dma_scatter(struct pl022 *, void *, unsigned int, struct sg_table *);

File drivers/spi/spi-rockchip.c:
708:	static bool rockchip_spi_can_dma(struct spi_controller *, struct spi_device *, struct spi_transfer *);
400:	static void rockchip_spi_dma_rxcb(void *);
416:	static void rockchip_spi_dma_txcb(void *);
1082:	static void rockchip_spi_driver_exit(void);
1082:	static int rockchip_spi_driver_init(void);
273:	static void rockchip_spi_handle_err(struct spi_controller *, struct spi_message *);
347:	static irqreturn_t rockchip_spi_isr(int, void *);
610:	static size_t rockchip_spi_max_transfer_size(struct spi_device *);
750:	static int rockchip_spi_probe(struct platform_device *);
950:	static int rockchip_spi_remove(struct platform_device *);
242:	static void rockchip_spi_set_cs(struct spi_device *, bool);
722:	static int rockchip_spi_setup(struct spi_device *);
666:	static int rockchip_spi_transfer_one(struct spi_controller *, struct spi_device *, struct spi_transfer *);

File drivers/spi/spi.c:
2949:	struct spi_controller *__devm_spi_alloc_controller(struct device *, unsigned int, bool);
2894:	struct spi_controller *__spi_alloc_controller(struct device *, unsigned int, bool);
480:	int __spi_register_driver(struct module *, struct spi_driver *);
3249:	int devm_spi_register_controller(struct device *, struct spi_controller *);
688:	int spi_add_device(struct spi_device *);
566:	struct spi_device *spi_alloc_device(struct spi_controller *);
4033:	int spi_async(struct spi_device *, struct spi_message *);
4276:	int spi_bus_lock(struct spi_controller *);
4305:	int spi_bus_unlock(struct spi_controller *);
3347:	int spi_controller_resume(struct spi_controller *);
3331:	int spi_controller_suspend(struct spi_controller *);
1444:	int spi_delay_exec(struct spi_delay *, struct spi_transfer *);
1405:	int spi_delay_to_ns(struct spi_delay *, struct spi_transfer *);
2009:	void spi_finalize_current_message(struct spi_controller *);
1614:	void spi_finalize_current_transfer(struct spi_controller *);
2214:	void spi_flush_queue(struct spi_controller *);
355:	const struct spi_device_id *spi_get_device_id(const struct spi_device *);
363:	const void *spi_get_device_match_data(const struct spi_device *);
1987:	struct spi_message *spi_get_next_queued_message(struct spi_controller *);
1102:	int spi_map_buf(struct spi_controller *, struct device *, struct sg_table *, void *, size_t, enum dma_data_direction);
2410:	struct spi_device *spi_new_ancillary_device(struct spi_device *, u8);
744:	struct spi_device *spi_new_device(struct spi_controller *, struct spi_board_info *);
855:	int spi_register_board_info(const struct spi_board_info *, unsigned int);
3091:	int spi_register_controller(struct spi_controller *);
3675:	int spi_setup(struct spi_device *);
3576:	int spi_split_transfers_maxsize(struct spi_controller *, struct spi_message *, size_t, gfp_t);
4227:	int spi_sync(struct spi_device *, struct spi_message *);
4255:	int spi_sync_locked(struct spi_device *, struct spi_message *);
1901:	void spi_take_timestamp_post(struct spi_controller *, struct spi_transfer *, size_t, bool);
1864:	void spi_take_timestamp_pre(struct spi_controller *, struct spi_transfer *, size_t, bool);
1122:	void spi_unmap_buf(struct spi_controller *, struct device *, struct sg_table *, enum dma_data_direction);
3289:	void spi_unregister_controller(struct spi_controller *);
802:	void spi_unregister_device(struct spi_device *);
4340:	int spi_write_then_read(struct spi_device *, const void *, unsigned int, void *, unsigned int);
627:	static int __spi_add_device(struct spi_device *);
3973:	static int __spi_async(struct spi_device *, struct spi_message *);
1747:	static void __spi_pump_messages(struct spi_controller *, bool);
1628:	static int __spi_pump_transfer_message(struct spi_controller *, struct spi_message *, bool);
3366:	static void __spi_replace_transfers_release(struct spi_controller *, struct spi_message *, void *);
4153:	static int __spi_sync(struct spi_device *, struct spi_message *);
1188:	static int __spi_unmap_msg(struct spi_controller *, struct spi_message *);
3823:	static int __spi_validate(struct spi_device *, struct spi_message *);
3271:	static int __unregister(struct device *, void *);
2929:	static void devm_spi_release_controller(struct device *, void *);
3231:	static void devm_spi_unregister(struct device *, void *);
85:	static ssize_t driver_override_show(struct device *, struct device_attribute *, char *);
71:	static ssize_t driver_override_store(struct device *, struct device_attribute *, const char *, size_t);
58:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
4148:	static void spi_complete(void *);
190:	static ssize_t spi_controller_bytes_rx_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t spi_controller_bytes_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t spi_controller_bytes_tx_show(struct device *, struct device_attribute *, char *);
182:	static ssize_t spi_controller_errors_show(struct device *, struct device_attribute *, char *);
180:	static ssize_t spi_controller_messages_show(struct device *, struct device_attribute *, char *);
2748:	static void spi_controller_release(struct device *);
187:	static ssize_t spi_controller_spi_async_show(struct device *, struct device_attribute *, char *);
186:	static ssize_t spi_controller_spi_sync_immediate_show(struct device *, struct device_attribute *, char *);
185:	static ssize_t spi_controller_spi_sync_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t spi_controller_timedout_show(struct device *, struct device_attribute *, char *);
197:	static ssize_t spi_controller_transfer_bytes_histo0_show(struct device *, struct device_attribute *, char *);
207:	static ssize_t spi_controller_transfer_bytes_histo10_show(struct device *, struct device_attribute *, char *);
208:	static ssize_t spi_controller_transfer_bytes_histo11_show(struct device *, struct device_attribute *, char *);
209:	static ssize_t spi_controller_transfer_bytes_histo12_show(struct device *, struct device_attribute *, char *);
210:	static ssize_t spi_controller_transfer_bytes_histo13_show(struct device *, struct device_attribute *, char *);
211:	static ssize_t spi_controller_transfer_bytes_histo14_show(struct device *, struct device_attribute *, char *);
212:	static ssize_t spi_controller_transfer_bytes_histo15_show(struct device *, struct device_attribute *, char *);
213:	static ssize_t spi_controller_transfer_bytes_histo16_show(struct device *, struct device_attribute *, char *);
198:	static ssize_t spi_controller_transfer_bytes_histo1_show(struct device *, struct device_attribute *, char *);
199:	static ssize_t spi_controller_transfer_bytes_histo2_show(struct device *, struct device_attribute *, char *);
200:	static ssize_t spi_controller_transfer_bytes_histo3_show(struct device *, struct device_attribute *, char *);
201:	static ssize_t spi_controller_transfer_bytes_histo4_show(struct device *, struct device_attribute *, char *);
202:	static ssize_t spi_controller_transfer_bytes_histo5_show(struct device *, struct device_attribute *, char *);
203:	static ssize_t spi_controller_transfer_bytes_histo6_show(struct device *, struct device_attribute *, char *);
204:	static ssize_t spi_controller_transfer_bytes_histo7_show(struct device *, struct device_attribute *, char *);
205:	static ssize_t spi_controller_transfer_bytes_histo8_show(struct device *, struct device_attribute *, char *);
206:	static ssize_t spi_controller_transfer_bytes_histo9_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t spi_controller_transfers_show(struct device *, struct device_attribute *, char *);
215:	static ssize_t spi_controller_transfers_split_maxsize_show(struct device *, struct device_attribute *, char *);
2116:	static int spi_destroy_queue(struct spi_controller *);
610:	static int spi_dev_check(struct device *, void *);
190:	static ssize_t spi_device_bytes_rx_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t spi_device_bytes_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t spi_device_bytes_tx_show(struct device *, struct device_attribute *, char *);
182:	static ssize_t spi_device_errors_show(struct device *, struct device_attribute *, char *);
180:	static ssize_t spi_device_messages_show(struct device *, struct device_attribute *, char *);
187:	static ssize_t spi_device_spi_async_show(struct device *, struct device_attribute *, char *);
186:	static ssize_t spi_device_spi_sync_immediate_show(struct device *, struct device_attribute *, char *);
185:	static ssize_t spi_device_spi_sync_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t spi_device_timedout_show(struct device *, struct device_attribute *, char *);
197:	static ssize_t spi_device_transfer_bytes_histo0_show(struct device *, struct device_attribute *, char *);
207:	static ssize_t spi_device_transfer_bytes_histo10_show(struct device *, struct device_attribute *, char *);
208:	static ssize_t spi_device_transfer_bytes_histo11_show(struct device *, struct device_attribute *, char *);
209:	static ssize_t spi_device_transfer_bytes_histo12_show(struct device *, struct device_attribute *, char *);
210:	static ssize_t spi_device_transfer_bytes_histo13_show(struct device *, struct device_attribute *, char *);
211:	static ssize_t spi_device_transfer_bytes_histo14_show(struct device *, struct device_attribute *, char *);
212:	static ssize_t spi_device_transfer_bytes_histo15_show(struct device *, struct device_attribute *, char *);
213:	static ssize_t spi_device_transfer_bytes_histo16_show(struct device *, struct device_attribute *, char *);
198:	static ssize_t spi_device_transfer_bytes_histo1_show(struct device *, struct device_attribute *, char *);
199:	static ssize_t spi_device_transfer_bytes_histo2_show(struct device *, struct device_attribute *, char *);
200:	static ssize_t spi_device_transfer_bytes_histo3_show(struct device *, struct device_attribute *, char *);
201:	static ssize_t spi_device_transfer_bytes_histo4_show(struct device *, struct device_attribute *, char *);
202:	static ssize_t spi_device_transfer_bytes_histo5_show(struct device *, struct device_attribute *, char *);
203:	static ssize_t spi_device_transfer_bytes_histo6_show(struct device *, struct device_attribute *, char *);
204:	static ssize_t spi_device_transfer_bytes_histo7_show(struct device *, struct device_attribute *, char *);
205:	static ssize_t spi_device_transfer_bytes_histo8_show(struct device *, struct device_attribute *, char *);
206:	static ssize_t spi_device_transfer_bytes_histo9_show(struct device *, struct device_attribute *, char *);
181:	static ssize_t spi_device_transfers_show(struct device *, struct device_attribute *, char *);
215:	static ssize_t spi_device_transfers_split_maxsize_show(struct device *, struct device_attribute *, char *);
4546:	static int spi_init(void);
1025:	static int spi_map_buf_attrs(struct spi_controller *, struct device *, struct sg_table *, void *, size_t, enum dma_data_direction, unsigned long);
375:	static int spi_match_device(struct device *, struct device_driver *);
410:	static int spi_probe(struct device *);
1836:	static void spi_pump_messages(struct kthread_work *);
2170:	static int spi_queued_transfer(struct spi_device *, struct spi_message *);
441:	static void spi_remove(struct device *);
965:	static void spi_set_cs(struct spi_device *, bool, bool);
451:	static void spi_shutdown(struct device *);
312:	static void spi_statistics_add_transfer_stats(struct spi_statistics *, struct spi_transfer *, struct spi_controller *);
2082:	static int spi_stop_queue(struct spi_controller *);
1494:	static int spi_transfer_one_message(struct spi_controller *, struct spi_message *);
398:	static int spi_uevent(struct device *, struct kobj_uevent_env *);
47:	static void spidev_release(struct device *);

File drivers/spi/spidev.c:
736:	static int spidev_acpi_check(struct device *);
882:	static void spidev_exit(void);
855:	static int spidev_init(void);
345:	static long spidev_ioctl(struct file *, unsigned int, unsigned long);
200:	static int spidev_message(struct spidev_data *, struct spi_ioc_transfer *, unsigned int);
713:	static int spidev_of_check(struct device *);
583:	static int spidev_open(struct inode *, struct file *);
758:	static int spidev_probe(struct spi_device *);
147:	static ssize_t spidev_read(struct file *, char *, size_t, loff_t *);
634:	static int spidev_release(struct inode *, struct file *);
817:	static void spidev_remove(struct spi_device *);
176:	static ssize_t spidev_write(struct file *, const char *, size_t, loff_t *);

File drivers/tee/optee/call.c:
453:	int optee_cancel_req(struct tee_context *, u32, u32);
509:	int optee_check_mem_type(unsigned long, size_t);
384:	int optee_close_session(struct tee_context *, u32);
363:	int optee_close_session_helper(struct tee_context *, u32);
94:	void optee_cq_wait_final(struct optee_call_queue *, struct optee_call_waiter *);
67:	void optee_cq_wait_for_completion(struct optee_call_queue *, struct optee_call_waiter *);
42:	void optee_cq_wait_init(struct optee_call_queue *, struct optee_call_waiter *);
258:	void optee_free_msg_arg(struct tee_context *, struct optee_shm_arg_entry *, u_int);
181:	struct optee_msg_arg *optee_get_msg_arg(struct tee_context *, size_t, struct optee_shm_arg_entry **, struct tee_shm **, u_int *);
402:	int optee_invoke_func(struct tee_context *, struct tee_ioctl_invoke_arg *, struct tee_param *);
161:	size_t optee_msg_arg_size(size_t);
280:	int optee_open_session(struct tee_context *, struct tee_ioctl_open_session_arg *, struct tee_param *);
135:	void optee_shm_arg_cache_init(struct optee *, u32);
142:	void optee_shm_arg_cache_uninit(struct optee *);

File drivers/tee/optee/core.c:
87:	int optee_open(struct tee_context *, bool);
21:	int optee_pool_op_alloc_helper(struct tee_shm_pool *, struct tee_shm *, size_t, size_t, int (*)(struct tee_context *, struct tee_shm *, struct page **, size_t, unsigned long));
72:	void optee_pool_op_free_helper(struct tee_shm_pool *, struct tee_shm *, int (*)(struct tee_context *, struct tee_shm *));
151:	void optee_release(struct tee_context *);
156:	void optee_release_supp(struct tee_context *);
168:	void optee_remove_common(struct optee *);
82:	static void optee_bus_scan(struct work_struct *);
213:	static void optee_core_exit(void);
191:	static int optee_core_init(void);

File drivers/tee/optee/device.c:
160:	int optee_enumerate_devices(u32);
173:	void optee_unregister_devices(void);
165:	static int __optee_unregister_device(struct device *, void *);
14:	static int optee_ctx_match(struct tee_ioctl_version_data *, const void *);
56:	static void optee_release_device(struct device *);

File drivers/tee/optee/ffa_abi.c:
910:	int optee_ffa_abi_register(void);
918:	void optee_ffa_abi_unregister(void);

File drivers/tee/optee/notif.c:
109:	int optee_notif_init(struct optee *, u_int);
85:	int optee_notif_send(struct optee *, u_int);
122:	void optee_notif_uninit(struct optee *);
32:	int optee_notif_wait(struct optee *, u_int);

File drivers/tee/optee/rpc.c:
258:	void optee_rpc_cmd(struct tee_context *, struct optee *, struct optee_msg_arg *);
210:	struct tee_shm *optee_rpc_cmd_alloc_suppl(struct tee_context *, size_t);
233:	void optee_rpc_cmd_free_suppl(struct tee_context *, struct tee_shm *);

File drivers/tee/optee/smc_abi.c:
1581:	int optee_smc_abi_register(void);
1586:	void optee_smc_abi_unregister(void);
286:	static void __optee_disable_shm_cache(struct optee *, bool);
994:	static irqreturn_t notif_irq_handler(int, void *);
1019:	static irqreturn_t notif_irq_thread_fn(int, void *);
338:	static void optee_disable_unmapped_shm_cache(struct optee *);
261:	static void optee_enable_shm_cache(struct optee *);
117:	static int optee_from_msg_param(struct optee *, struct tee_param *, size_t, const struct optee_msg_param *);
1063:	static void optee_get_version(struct tee_device *, struct tee_ioctl_version_data *);
1357:	static int optee_probe(struct platform_device *);
432:	static int optee_shm_register(struct tee_context *, struct tee_shm *, struct page **, size_t, unsigned long);
541:	static int optee_shm_register_supp(struct tee_context *, struct tee_shm *, struct page **, size_t, unsigned long);
500:	static int optee_shm_unregister(struct tee_context *, struct tee_shm *);
552:	static int optee_shm_unregister_supp(struct tee_context *, struct tee_shm *);
1349:	static void optee_shutdown(struct platform_device *);
867:	static int optee_smc_do_call_with_arg(struct tee_context *, struct tee_shm *, u_int);
1043:	static void optee_smc_notif_uninit_irq(struct optee *);
1080:	static int optee_smc_open(struct tee_context *);
1318:	static int optee_smc_remove(struct platform_device *);
1283:	static void optee_smccc_hvc(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, struct arm_smccc_res *);
1274:	static void optee_smccc_smc(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, struct arm_smccc_res *);
207:	static int optee_to_msg_param(struct optee *, struct optee_msg_param *, size_t, const struct tee_param *);
567:	static int pool_op_alloc(struct tee_shm_pool *, struct tee_shm *, size_t, size_t);
590:	static void pool_op_destroy_pool(struct tee_shm_pool *);
581:	static void pool_op_free(struct tee_shm_pool *, struct tee_shm *);

File drivers/tee/optee/supp.c:
22:	void optee_supp_init(struct optee_supp *);
229:	int optee_supp_recv(struct tee_context *, u32 *, u32 *, struct tee_param *);
38:	void optee_supp_release(struct optee_supp *);
338:	int optee_supp_send(struct tee_context *, u32, u32, struct tee_param *);
76:	u32 optee_supp_thrd_req(struct tee_context *, u32, size_t, struct tee_param *);
32:	void optee_supp_uninit(struct optee_supp *);

File drivers/tee/tee_core.c:
1183:	int tee_client_cancel_req(struct tee_context *, struct tee_ioctl_cancel_arg *);
1142:	void tee_client_close_context(struct tee_context *);
1165:	int tee_client_close_session(struct tee_context *, u32);
1148:	void tee_client_get_version(struct tee_context *, struct tee_ioctl_version_data *);
1173:	int tee_client_invoke_func(struct tee_context *, struct tee_ioctl_invoke_arg *, struct tee_param *);
1100:	struct tee_context *tee_client_open_context(struct tee_context *, int (*)(struct tee_ioctl_version_data *, const void *), const void *, struct tee_ioctl_version_data *);
1155:	int tee_client_open_session(struct tee_context *, struct tee_ioctl_open_session_arg *, struct tee_param *);
879:	struct tee_device *tee_device_alloc(const struct tee_desc *, struct device *, struct tee_shm_pool *, void *);
1031:	bool tee_device_get(struct tee_device *);
1017:	void tee_device_put(struct tee_device *);
992:	int tee_device_register(struct tee_device *);
1051:	void tee_device_unregister(struct tee_device *);
1078:	void *tee_get_drvdata(struct tee_device *);
198:	int tee_session_calc_client_uuid(uuid_t *, u32, const u8 *);
100:	void teedev_close_context(struct tee_context *);
75:	void teedev_ctx_get(struct tee_context *);
92:	void teedev_ctx_put(struct tee_context *);
46:	struct tee_context *teedev_open(struct tee_device *);
965:	static ssize_t implementation_id_show(struct device *, struct device_attribute *, char *);
1090:	static int match_dev(struct device *, const void *);
729:	static int params_from_supp(struct tee_param *, size_t, struct tee_ioctl_param *);
356:	static int params_from_user(struct tee_context *, struct tee_param *, size_t, struct tee_ioctl_param *);
634:	static int params_to_supp(struct tee_context *, struct tee_ioctl_param *, size_t, struct tee_param *);
435:	static int params_to_user(struct tee_ioctl_param *, size_t, struct tee_param *);
1192:	static int tee_client_device_match(struct device *, struct device_driver *);
1210:	static int tee_client_device_uevent(struct device *, struct kobj_uevent_env *);
1258:	static void tee_exit(void);
1225:	static int tee_init(void);
818:	static long tee_ioctl(struct file *, unsigned int, unsigned long);
109:	static int tee_open(struct inode *, struct file *);
126:	static int tee_release(struct inode *, struct file *);
855:	static void tee_release_device(struct device *);

File drivers/tee/tee_shm.c:
201:	struct tee_shm *tee_shm_alloc_kernel_buf(struct tee_context *, size_t);
225:	struct tee_shm *tee_shm_alloc_priv_buf(struct tee_context *, size_t);
156:	struct tee_shm *tee_shm_alloc_user_buf(struct tee_context *, size_t);
430:	void tee_shm_free(struct tee_shm *);
411:	int tee_shm_get_fd(struct tee_shm *);
478:	struct tee_shm *tee_shm_get_from_id(struct tee_context *, int);
461:	int tee_shm_get_pa(struct tee_shm *, size_t, phys_addr_t *);
443:	void *tee_shm_get_va(struct tee_shm *, size_t);
507:	void tee_shm_put(struct tee_shm *);
368:	struct tee_shm *tee_shm_register_kernel_buf(struct tee_context *, void *, size_t);
321:	struct tee_shm *tee_shm_register_user_buf(struct tee_context *, unsigned long, size_t);
234:	static struct tee_shm *register_shm_helper(struct tee_context *, unsigned long, size_t, u32, int);
94:	static struct tee_shm *shm_alloc_helper(struct tee_context *, size_t, size_t, u32, int);
383:	static int tee_shm_fop_mmap(struct file *, struct vm_area_struct *);
377:	static int tee_shm_fop_release(struct inode *, struct file *);

File drivers/tee/tee_shm_pool.c:
56:	struct tee_shm_pool *tee_shm_pool_alloc_res_mem(unsigned long, phys_addr_t, size_t, int);
12:	static int pool_op_gen_alloc(struct tee_shm_pool *, struct tee_shm *, size_t, size_t);
44:	static void pool_op_gen_destroy_pool(struct tee_shm_pool *);
37:	static void pool_op_gen_free(struct tee_shm_pool *, struct tee_shm *);

File drivers/thermal/devfreq_cooling.c:
492:	struct thermal_cooling_device *devfreq_cooling_em_register(struct devfreq *, struct devfreq_cooling_power *);
469:	struct thermal_cooling_device *devfreq_cooling_register(struct devfreq *);
525:	void devfreq_cooling_unregister(struct thermal_cooling_device *);
459:	struct thermal_cooling_device *of_devfreq_cooling_register(struct device_node *, struct devfreq *);
362:	struct thermal_cooling_device *of_devfreq_cooling_register_power(struct device_node *, struct devfreq *, struct devfreq_cooling_power *);
74:	static int devfreq_cooling_get_cur_state(struct thermal_cooling_device *, unsigned long *);
64:	static int devfreq_cooling_get_max_state(struct thermal_cooling_device *, unsigned long *);
84:	static int devfreq_cooling_set_cur_state(struct thermal_cooling_device *, unsigned long);

File drivers/thermal/gov_step_wise.c:
159:	static int step_wise_throttle(struct thermal_zone_device *, int);

File drivers/thermal/thermal_core.c:
409:	void __thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
1030:	struct thermal_cooling_device *devm_thermal_of_cooling_device_register(struct device *, struct device_node *, char *, void *, const struct thermal_cooling_device_ops *);
529:	int for_each_thermal_cooling_device(int (*)(struct thermal_cooling_device *, void *), void *);
512:	int for_each_thermal_governor(int (*)(struct thermal_governor *, void *), void *);
546:	int for_each_thermal_zone(int (*)(struct thermal_zone_device *, void *), void *);
224:	int thermal_build_list_of_policies(char *);
975:	struct thermal_cooling_device *thermal_cooling_device_register(const char *, void *, const struct thermal_cooling_device_ops *);
1072:	void thermal_cooling_device_unregister(struct thermal_cooling_device *);
998:	struct thermal_cooling_device *thermal_of_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
117:	int thermal_register_governor(struct thermal_governor *);
171:	void thermal_unregister_governor(struct thermal_governor *);
611:	int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *, unsigned long, unsigned long, unsigned int);
317:	void thermal_zone_device_critical(struct thermal_zone_device *);
481:	int thermal_zone_device_disable(struct thermal_zone_device *);
475:	int thermal_zone_device_enable(struct thermal_zone_device *);
487:	int thermal_zone_device_is_enabled(struct thermal_zone_device *);
1352:	struct thermal_zone_device *thermal_zone_device_register(const char *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
1195:	struct thermal_zone_device *thermal_zone_device_register_with_trips(const char *, struct thermal_trip *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
197:	int thermal_zone_device_set_policy(struct thermal_zone_device *, char *);
1367:	void thermal_zone_device_unregister(struct thermal_zone_device *);
494:	void thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
563:	struct thermal_zone_device *thermal_zone_get_by_id(int);
1439:	struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *);
731:	int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *);
51:	static struct thermal_governor *__find_governor(const char *);
875:	static struct thermal_cooling_device *__thermal_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
820:	static void bind_cdev(struct thermal_cooling_device *);
1122:	static void bind_tz(struct thermal_zone_device *);
1006:	static void thermal_cooling_device_release(struct device *, void *);
1498:	static int thermal_init(void);
250:	static int thermal_register_governors(void);
763:	static void thermal_release(struct device *);
95:	static int thermal_set_governor(struct thermal_zone_device *, struct thermal_governor *);
504:	static void thermal_zone_device_check(struct work_struct *);

File drivers/thermal/thermal_helpers.c:
221:	void __thermal_cdev_update(struct thermal_cooling_device *);
81:	int __thermal_zone_get_temp(struct thermal_zone_device *, int *);
165:	void __thermal_zone_set_trips(struct thermal_zone_device *);
44:	struct thermal_instance *get_thermal_instance(struct thermal_zone_device *, struct thermal_cooling_device *, int);
26:	int get_tz_trend(struct thermal_zone_device *, int);
248:	void thermal_cdev_update(struct thermal_cooling_device *);
280:	int thermal_zone_get_offset(struct thermal_zone_device *);
265:	int thermal_zone_get_slope(struct thermal_zone_device *);
124:	int thermal_zone_get_temp(struct thermal_zone_device *, int *);

File drivers/thermal/thermal_of.c:
697:	struct thermal_zone_device *devm_thermal_of_zone_register(struct device *, int, void *, const struct thermal_zone_device_ops *);
733:	void devm_thermal_of_zone_unregister(struct device *, struct thermal_zone_device *);
32:	int of_thermal_get_ntrips(struct thermal_zone_device *);
68:	const struct thermal_trip *of_thermal_get_trip_points(struct thermal_zone_device *);
48:	bool of_thermal_is_trip_valid(struct thermal_zone_device *, int);
587:	struct thermal_zone_device *thermal_of_zone_register(struct device_node *, int, void *, const struct thermal_zone_device_ops *);
553:	void thermal_of_zone_unregister(struct thermal_zone_device *);
434:	static int __thermal_of_bind(struct device_node *, int, int, struct thermal_zone_device *, struct thermal_cooling_device *);
403:	static int __thermal_of_unbind(struct device_node *, int, int, struct thermal_zone_device *, struct thermal_cooling_device *);
676:	static int devm_thermal_of_zone_match(struct device *, void *, void *);
671:	static void devm_thermal_of_zone_release(struct device *, void *);
119:	static int of_thermal_get_crit_temp(struct thermal_zone_device *, int *);
96:	static int of_thermal_get_trip_hyst(struct thermal_zone_device *, int, int *);
85:	static int of_thermal_get_trip_temp(struct thermal_zone_device *, int, int *);
74:	static int of_thermal_get_trip_type(struct thermal_zone_device *, int, enum thermal_trip_type *);
107:	static int of_thermal_set_trip_hyst(struct thermal_zone_device *, int, int);
533:	static int thermal_of_bind(struct thermal_zone_device *, struct thermal_cooling_device *);
502:	static int thermal_of_for_each_cooling_maps(struct thermal_zone_device *, struct thermal_cooling_device *, int (*)(struct device_node *, int, int, struct thermal_zone_device *, struct thermal_cooling_device *));
539:	static int thermal_of_unbind(struct thermal_zone_device *, struct thermal_cooling_device *);

File drivers/thermal/thermal_sysfs.c:
924:	void thermal_cooling_device_destroy_sysfs(struct thermal_cooling_device *);
918:	void thermal_cooling_device_setup_sysfs(struct thermal_cooling_device *);
587:	int thermal_zone_create_device_groups(struct thermal_zone_device *, int);
619:	void thermal_zone_destroy_device_groups(struct thermal_zone_device *);
931:	ssize_t trip_point_show(struct device *, struct device_attribute *, char *);
942:	ssize_t weight_show(struct device *, struct device_attribute *, char *);
951:	ssize_t weight_store(struct device *, struct device_attribute *, const char *, size_t);
298:	static ssize_t available_policies_show(struct device *, struct device_attribute *, char *);
632:	static ssize_t cdev_type_show(struct device *, struct device_attribute *, char *);
647:	static ssize_t cur_state_show(struct device *, struct device_attribute *, char *);
661:	static ssize_t cur_state_store(struct device *, struct device_attribute *, const char *, size_t);
306:	static ssize_t emul_temp_store(struct device *, struct device_attribute *, const char *, size_t);
405:	static ssize_t integral_cutoff_show(struct device *, struct device_attribute *, char *);
405:	static ssize_t integral_cutoff_store(struct device *, struct device_attribute *, const char *, size_t);
404:	static ssize_t k_d_show(struct device *, struct device_attribute *, char *);
404:	static ssize_t k_d_store(struct device *, struct device_attribute *, const char *, size_t);
403:	static ssize_t k_i_show(struct device *, struct device_attribute *, char *);
403:	static ssize_t k_i_store(struct device *, struct device_attribute *, const char *, size_t);
401:	static ssize_t k_po_show(struct device *, struct device_attribute *, char *);
401:	static ssize_t k_po_store(struct device *, struct device_attribute *, const char *, size_t);
402:	static ssize_t k_pu_show(struct device *, struct device_attribute *, char *);
402:	static ssize_t k_pu_store(struct device *, struct device_attribute *, const char *, size_t);
639:	static ssize_t max_state_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t mode_show(struct device *, struct device_attribute *, char *);
62:	static ssize_t mode_store(struct device *, struct device_attribute *, const char *, size_t);
407:	static ssize_t offset_show(struct device *, struct device_attribute *, char *);
407:	static ssize_t offset_store(struct device *, struct device_attribute *, const char *, size_t);
290:	static ssize_t policy_show(struct device *, struct device_attribute *, char *);
273:	static ssize_t policy_store(struct device *, struct device_attribute *, const char *, size_t);
406:	static ssize_t slope_show(struct device *, struct device_attribute *, char *);
406:	static ssize_t slope_store(struct device *, struct device_attribute *, const char *, size_t);
340:	static ssize_t sustainable_power_show(struct device *, struct device_attribute *, char *);
352:	static ssize_t sustainable_power_store(struct device *, struct device_attribute *, const char *, size_t);
35:	static ssize_t temp_show(struct device *, struct device_attribute *, char *);
247:	static ssize_t trip_point_hyst_show(struct device *, struct device_attribute *, char *);
207:	static ssize_t trip_point_hyst_store(struct device *, struct device_attribute *, const char *, size_t);
178:	static ssize_t trip_point_temp_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t trip_point_type_show(struct device *, struct device_attribute *, char *);
27:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/tty/hvc/hvc_console.c:
778:	void __hvc_resize(struct hvc_struct *, struct winsize);
911:	struct hvc_struct *hvc_alloc(uint32_t, int, const struct hv_ops *, int);
285:	int hvc_instantiate(uint32_t, int, const struct hv_ops *);
313:	void hvc_kick(void);
762:	int hvc_poll(struct hvc_struct *);
979:	int hvc_remove(struct hvc_struct *);
632:	static int __hvc_poll(struct hvc_struct *, bool);
599:	static unsigned int hvc_chars_in_buffer(struct tty_struct *);
432:	static void hvc_cleanup(struct tty_struct *);
389:	static void hvc_close(struct tty_struct *, struct file *);
197:	static struct tty_driver *hvc_console_device(struct console *, int *);
241:	static int hvc_console_init(void);
151:	static void hvc_console_print(struct console *, const char *, unsigned int);
206:	static int hvc_console_setup(struct console *, char *);
90:	static struct hvc_struct *hvc_get_by_index(int);
439:	static void hvc_hangup(struct tty_struct *);
325:	static int hvc_install(struct tty_driver *, struct tty_struct *);
347:	static int hvc_open(struct tty_struct *, struct file *);
249:	static void hvc_port_destruct(struct tty_port *);
563:	static void hvc_set_winsz(struct work_struct *);
836:	static int hvc_tiocmget(struct tty_struct *);
845:	static int hvc_tiocmset(struct tty_struct *, unsigned int, unsigned int);
320:	static void hvc_unthrottle(struct tty_struct *);
499:	static int hvc_write(struct tty_struct *, const unsigned char *, int);
589:	static unsigned int hvc_write_room(struct tty_struct *);
790:	static int khvcd(void *);

File drivers/tty/n_null.c:
18:	static void n_null_close(struct tty_struct *);
58:	static void n_null_exit(void);
52:	static int n_null_init(void);
13:	static int n_null_open(struct tty_struct *);
22:	static ssize_t n_null_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
35:	static void n_null_receivebuf(struct tty_struct *, const unsigned char *, const char *, int);
29:	static ssize_t n_null_write(struct tty_struct *, struct file *, const unsigned char *, size_t);

File drivers/tty/n_tty.c:
2512:	void n_tty_inherit_ops(struct tty_ldisc_ops *);
2519:	void n_tty_init(void);
614:	static size_t __process_echoes(struct tty_struct *);
1980:	static bool canon_copy_from_read_buf(struct tty_struct *, unsigned char **, size_t *);
760:	static void commit_echoes(struct tty_struct *);
424:	static int do_output_char(unsigned char, struct tty_struct *, int);
920:	static void echo_char(unsigned char, struct tty_struct *);
1100:	static void isig(int, struct tty_struct *);
271:	static void n_tty_check_unthrottle(struct tty_struct *);
1853:	static void n_tty_close(struct tty_struct *);
368:	static void n_tty_flush_buffer(struct tty_struct *);
2465:	static int n_tty_ioctl(struct tty_struct *, unsigned int, unsigned long);
202:	static void n_tty_kick_worker(struct tty_struct *);
1484:	static void n_tty_lookahead_flow_ctrl(struct tty_struct *, const unsigned char *, const unsigned char *, unsigned int);
1874:	static int n_tty_open(struct tty_struct *);
2419:	static __poll_t n_tty_poll(struct tty_struct *, struct file *, poll_table *);
2121:	static ssize_t n_tty_read(struct tty_struct *, struct file *, unsigned char *, size_t, void **, unsigned long);
1737:	static void n_tty_receive_buf(struct tty_struct *, const unsigned char *, const char *, int);
1743:	static int n_tty_receive_buf2(struct tty_struct *, const unsigned char *, const char *, int);
1542:	static void n_tty_receive_buf_closing(struct tty_struct *, const unsigned char *, const char *, int, bool);
1668:	static int n_tty_receive_buf_common(struct tty_struct *, const unsigned char *, const char *, int, int);
1555:	static void n_tty_receive_buf_standard(struct tty_struct *, const unsigned char *, const char *, int, bool);
1406:	static void n_tty_receive_char(struct tty_struct *, unsigned char);
1448:	static void n_tty_receive_char_flagged(struct tty_struct *, unsigned char, char);
1248:	static bool n_tty_receive_char_flow_ctrl(struct tty_struct *, unsigned char, bool);
1216:	static void n_tty_receive_signal_char(struct tty_struct *, int, unsigned char);
1761:	static void n_tty_set_termios(struct tty_struct *, const struct ktermios *);
2318:	static ssize_t n_tty_write(struct tty_struct *, struct file *, const unsigned char *, size_t);
241:	static void n_tty_write_wakeup(struct tty_struct *);

File drivers/tty/pty.c:
602:	int ptm_open_peer(struct file *, struct tty_struct *, int);
529:	static void legacy_pty_init(void);
688:	static struct tty_struct *ptm_unix98_lookup(struct tty_driver *, struct file *, int);
790:	static int ptmx_open(struct inode *, struct file *);
705:	static struct tty_struct *pts_unix98_lookup(struct tty_driver *, struct file *, int);
453:	static int pty_bsd_ioctl(struct tty_struct *, unsigned int, unsigned long);
431:	static void pty_cleanup(struct tty_struct *);
47:	static void pty_close(struct tty_struct *, struct file *);
359:	static int pty_common_install(struct tty_driver *, struct tty_struct *, bool);
204:	static void pty_flush_buffer(struct tty_struct *);
941:	static int pty_init(void);
439:	static int pty_install(struct tty_driver *, struct tty_struct *);
220:	static int pty_open(struct tty_struct *, struct file *);
444:	static void pty_remove(struct tty_driver *, struct tty_struct *);
283:	static int pty_resize(struct tty_struct *, struct winsize *);
242:	static void pty_set_termios(struct tty_struct *, const struct ktermios *);
740:	static void pty_show_fdinfo(struct tty_struct *, struct seq_file *);
322:	static void pty_start(struct tty_struct *);
335:	static void pty_stop(struct tty_struct *);
719:	static int pty_unix98_install(struct tty_driver *, struct tty_struct *);
642:	static int pty_unix98_ioctl(struct tty_struct *, unsigned int, unsigned long);
725:	static void pty_unix98_remove(struct tty_driver *, struct tty_struct *);
93:	static void pty_unthrottle(struct tty_struct *);
111:	static int pty_write(struct tty_struct *, const unsigned char *, int);
129:	static unsigned int pty_write_room(struct tty_struct *);
873:	static void unix98_pty_init(void);

File drivers/tty/serdev/core.c:
839:	int __serdev_device_driver_register(struct serdev_device_driver *, struct module *);
193:	int devm_serdev_device_open(struct device *, struct serdev_device *);
770:	int serdev_controller_add(struct serdev_controller *);
476:	struct serdev_controller *serdev_controller_alloc(struct device *, size_t);
820:	void serdev_controller_remove(struct serdev_controller *);
102:	int serdev_device_add(struct serdev_device *);
447:	struct serdev_device *serdev_device_alloc(struct serdev_controller *);
175:	void serdev_device_close(struct serdev_device *);
386:	int serdev_device_get_tiocm(struct serdev_device *);
147:	int serdev_device_open(struct serdev_device *);
138:	void serdev_device_remove(struct serdev_device *);
340:	unsigned int serdev_device_set_baudrate(struct serdev_device *, unsigned int);
352:	void serdev_device_set_flow_control(struct serdev_device *, bool);
363:	int serdev_device_set_parity(struct serdev_device *, enum serdev_parity);
397:	int serdev_device_set_tiocm(struct serdev_device *, int, int);
375:	void serdev_device_wait_until_sent(struct serdev_device *, long);
270:	int serdev_device_write(struct serdev_device *, const unsigned char *, size_t, long);
236:	int serdev_device_write_buf(struct serdev_device *, const unsigned char *, size_t);
318:	void serdev_device_write_flush(struct serdev_device *);
329:	int serdev_device_write_room(struct serdev_device *);
215:	void serdev_device_write_wakeup(struct serdev_device *);
188:	static void devm_serdev_device_release(struct device *, void *);
26:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
75:	static void serdev_ctrl_release(struct device *);
86:	static int serdev_device_match(struct device *, struct device_driver *);
58:	static void serdev_device_release(struct device *);
45:	static int serdev_device_uevent(struct device *, struct kobj_uevent_env *);
408:	static int serdev_drv_probe(struct device *);
424:	static void serdev_drv_remove(struct device *);
851:	static void serdev_exit(void);
858:	static int serdev_init(void);
805:	static int serdev_remove_device(struct device *, void *);

File drivers/tty/serdev/serdev-ttyport.c:
264:	struct device *serdev_tty_port_register(struct tty_port *, struct device *, struct tty_driver *, int);
304:	int serdev_tty_port_unregister(struct tty_port *);
154:	static void ttyport_close(struct serdev_controller *);
228:	static int ttyport_get_tiocm(struct serdev_controller *);
105:	static int ttyport_open(struct serdev_controller *);
25:	static int ttyport_receive_buf(struct tty_port *, const unsigned char *, const unsigned char *, size_t);
169:	static unsigned int ttyport_set_baudrate(struct serdev_controller *, unsigned int);
183:	static void ttyport_set_flow_control(struct serdev_controller *, bool);
197:	static int ttyport_set_parity(struct serdev_controller *, enum serdev_parity);
239:	static int ttyport_set_tiocm(struct serdev_controller *, unsigned int, unsigned int);
220:	static void ttyport_wait_until_sent(struct serdev_controller *, long);
77:	static int ttyport_write_buf(struct serdev_controller *, const unsigned char *, size_t);
89:	static void ttyport_write_flush(struct serdev_controller *);
97:	static int ttyport_write_room(struct serdev_controller *);
48:	static void ttyport_write_wakeup(struct tty_port *);

File drivers/tty/serial/8250/8250_core.c:
713:	int early_serial_setup(struct uart_port *);
407:	struct uart_8250_port *serial8250_get_port(int);
982:	int serial8250_register_8250_port(const struct uart_8250_port *);
779:	void serial8250_resume_port(int);
416:	void serial8250_set_isa_configurator(void (*)(int, struct uart_port *, u32 *));
755:	void serial8250_suspend_port(int);
1141:	void serial8250_unregister_port(int);
1283:	static void s8250_options(void);
256:	static void serial8250_backup_timeout(struct timer_list *);
1227:	static void serial8250_exit(void);
1170:	static int serial8250_init(void);
109:	static irqreturn_t serial8250_interrupt(int, void *);
491:	static void serial8250_isa_init_ports(void);
804:	static int serial8250_probe(struct platform_device *);
554:	static void serial8250_register_ports(struct uart_driver *, struct device *);
853:	static int serial8250_remove(struct platform_device *);
880:	static int serial8250_resume(struct platform_device *);
866:	static int serial8250_suspend(struct platform_device *, pm_message_t);
248:	static void serial8250_timeout(struct timer_list *);
954:	static void serial_8250_overrun_backoff_work(struct work_struct *);
609:	static int univ8250_console_exit(struct console *);
682:	static int univ8250_console_init(void);
635:	static int univ8250_console_match(struct console *, char *, int, char *);
587:	static int univ8250_console_setup(struct console *, char *);
579:	static void univ8250_console_write(struct console *, const char *, unsigned int);
337:	static void univ8250_release_irq(struct uart_8250_port *);
327:	static int univ8250_setup_irq(struct uart_8250_port *);
302:	static void univ8250_setup_timer(struct uart_8250_port *);

File drivers/tty/serial/8250/8250_dma.c:
277:	void serial8250_release_dma(struct uart_8250_port *);
181:	int serial8250_request_dma(struct uart_8250_port *);
142:	int serial8250_rx_dma(struct uart_8250_port *);
169:	void serial8250_rx_dma_flush(struct uart_8250_port *);
86:	int serial8250_tx_dma(struct uart_8250_port *);
14:	static void __dma_tx_complete(void *);
67:	static void dma_rx_complete(void *);

File drivers/tty/serial/8250/8250_dw.c:
104:	static void dw8250_check_lcr(struct uart_port *, int);
501:	static void dw8250_clk_disable_unprepare(void *);
315:	static int dw8250_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
300:	static void dw8250_clk_work_cb(struct work_struct *);
341:	static void dw8250_do_pm(struct uart_port *, unsigned int, unsigned int);
400:	static bool dw8250_fallback_dma_filter(struct dma_chan *, void *);
245:	static int dw8250_handle_irq(struct uart_port *);
405:	static bool dw8250_idma_filter(struct dma_chan *, void *);
813:	static void dw8250_platform_driver_exit(void);
813:	static int dw8250_platform_driver_init(void);
433:	static void dw8250_prepare_rx_dma(struct uart_8250_port *);
420:	static void dw8250_prepare_tx_dma(struct uart_8250_port *);
511:	static int dw8250_probe(struct platform_device *);
446:	static void dw8250_quirks(struct uart_port *, struct dw8250_data *);
684:	static int dw8250_remove(struct platform_device *);
506:	static void dw8250_reset_control_assert(void *);
179:	static unsigned int dw8250_serial_in(struct uart_port *, int);
220:	static unsigned int dw8250_serial_in32(struct uart_port *, int);
237:	static unsigned int dw8250_serial_in32be(struct uart_port *, int);
187:	static unsigned int dw8250_serial_inq(struct uart_port *, int);
160:	static void dw8250_serial_out(struct uart_port *, int, int);
210:	static void dw8250_serial_out32(struct uart_port *, int, int);
227:	static void dw8250_serial_out32be(struct uart_port *, int, int);
170:	static void dw8250_serial_out38x(struct uart_port *, int, int);
196:	static void dw8250_serial_outq(struct uart_port *, int, int);
376:	static void dw8250_set_ldisc(struct uart_port *, struct ktermios *);
352:	static void dw8250_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);

File drivers/tty/serial/8250/8250_dwlib.c:
95:	void dw8250_do_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
242:	void dw8250_setup_port(struct uart_port *);
75:	static unsigned int dw8250_get_divisor(struct uart_port *, unsigned int, unsigned int *);
180:	static int dw8250_rs485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
88:	static void dw8250_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);

File drivers/tty/serial/8250/8250_early.c:
155:	int early_serial8250_setup(struct earlycon_device *, const char *);
184:	static int early_omap8250_setup(struct earlycon_device *, const char *);
101:	static void early_serial8250_write(struct console *, const char *, unsigned int);
132:	static void init_port(struct earlycon_device *);
37:	static unsigned int serial8250_early_in(struct uart_port *, int);
60:	static void serial8250_early_out(struct uart_port *, int, int);
87:	static void serial_putc(struct uart_port *, unsigned char);

File drivers/tty/serial/8250/8250_fsl.c:
26:	int fsl8250_handle_irq(struct uart_port *);

File drivers/tty/serial/8250/8250_of.c:
353:	static void of_platform_serial_driver_exit(void);
353:	static int of_platform_serial_driver_init(void);
197:	static int of_platform_serial_probe(struct platform_device *);
263:	static int of_platform_serial_remove(struct platform_device *);

File drivers/tty/serial/8250/8250_omap.c:
936:	static void __dma_rx_complete(void *);
879:	static void __dma_rx_do_complete(struct uart_8250_port *);
171:	static void __omap8250_set_mctrl(struct uart_port *, unsigned int);
1733:	static int omap8250_console_fixup(void);
617:	static irqreturn_t omap8250_irq(int, void *);
1302:	static int omap8250_no_handle_irq(struct uart_port *);
1789:	static void omap8250_platform_driver_exit(void);
1789:	static int omap8250_platform_driver_init(void);
1349:	static int omap8250_probe(struct platform_device *);
1539:	static int omap8250_remove(struct platform_device *);
299:	static void omap8250_restore_regs(struct uart_8250_port *);
807:	static int omap8250_rs485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
195:	static void omap8250_set_mctrl(struct uart_port *, unsigned int);
605:	static void omap8250_uart_qos_work(struct work_struct *);
1054:	static void omap_8250_dma_tx_complete(void *);
519:	static void omap_8250_pm(struct uart_port *, unsigned int, unsigned int);
992:	static int omap_8250_rx_dma(struct uart_8250_port *);
367:	static void omap_8250_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
736:	static void omap_8250_shutdown(struct uart_port *);
671:	static int omap_8250_startup(struct uart_port *);
770:	static void omap_8250_throttle(struct uart_port *);
1098:	static int omap_8250_tx_dma(struct uart_8250_port *);
786:	static void omap_8250_unthrottle(struct uart_port *);
1289:	static bool the_no_dma_filter_fn(struct dma_chan *, void *);

File drivers/tty/serial/8250/8250_port.c:
556:	void serial8250_clear_and_reinit_fifos(struct uart_8250_port *);
3508:	int serial8250_console_exit(struct uart_port *);
3482:	int serial8250_console_setup(struct uart_port *, char *, bool);
3380:	void serial8250_console_write(struct uart_8250_port *, const char *, unsigned int);
2015:	unsigned int serial8250_do_get_mctrl(struct uart_port *);
2925:	void serial8250_do_pm(struct uart_port *, unsigned int, unsigned int);
2628:	void serial8250_do_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);
2898:	void serial8250_do_set_ldisc(struct uart_port *, struct ktermios *);
2040:	void serial8250_do_set_mctrl(struct uart_port *, unsigned int);
2751:	void serial8250_do_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2466:	void serial8250_do_shutdown(struct uart_port *);
2177:	int serial8250_do_startup(struct uart_port *);
669:	int serial8250_em485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
639:	void serial8250_em485_destroy(struct uart_8250_port *);
1598:	void serial8250_em485_start_tx(struct uart_8250_port *);
1437:	void serial8250_em485_stop_tx(struct uart_8250_port *);
1914:	int serial8250_handle_irq(struct uart_port *, unsigned int);
3267:	void serial8250_init_port(struct uart_8250_port *);
1871:	unsigned int serial8250_modem_status(struct uart_8250_port *);
1725:	void serial8250_read_char(struct uart_8250_port *, u16);
563:	void serial8250_rpm_get(struct uart_8250_port *);
698:	void serial8250_rpm_get_tx(struct uart_8250_port *);
571:	void serial8250_rpm_put(struct uart_8250_port *);
712:	void serial8250_rpm_put_tx(struct uart_8250_port *);
1794:	u16 serial8250_rx_chars(struct uart_8250_port *, u16);
3279:	void serial8250_set_defaults(struct uart_8250_port *);
1811:	void serial8250_tx_chars(struct uart_8250_port *);
2699:	void serial8250_update_uartclk(struct uart_port *, unsigned int);
1506:	static void __stop_tx(struct uart_8250_port *);
319:	static int default_serial_dl_read(struct uart_8250_port *);
329:	static void default_serial_dl_write(struct uart_8250_port *, int);
395:	static unsigned int hub6_serial_in(struct uart_port *, int);
402:	static void hub6_serial_out(struct uart_port *, int, int);
457:	static unsigned int io_serial_in(struct uart_port *, int);
463:	static void io_serial_out(struct uart_port *, int, int);
427:	static unsigned int mem16_serial_in(struct uart_port *, int);
421:	static void mem16_serial_out(struct uart_port *, int, int);
439:	static unsigned int mem32_serial_in(struct uart_port *, int);
433:	static void mem32_serial_out(struct uart_port *, int, int);
451:	static unsigned int mem32be_serial_in(struct uart_port *, int);
445:	static void mem32be_serial_out(struct uart_port *, int, int);
409:	static unsigned int mem_serial_in(struct uart_port *, int);
415:	static void mem_serial_out(struct uart_port *, int, int);
3097:	static ssize_t rx_trig_bytes_show(struct device *, struct device_attribute *, char *);
3143:	static ssize_t rx_trig_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
2064:	static void serial8250_break_ctl(struct uart_port *, int);
3183:	static void serial8250_config_port(struct uart_port *, int);
3308:	static void serial8250_console_putchar(struct uart_port *, unsigned char);
1959:	static int serial8250_default_handle_irq(struct uart_port *);
1649:	static enum hrtimer_restart serial8250_em485_handle_start_tx(struct hrtimer *);
1461:	static enum hrtimer_restart serial8250_em485_handle_stop_tx(struct hrtimer *);
1708:	static void serial8250_enable_ms(struct uart_port *);
2033:	static unsigned int serial8250_get_mctrl(struct uart_port *);
2935:	static void serial8250_pm(struct uart_port *, unsigned int, unsigned int);
3033:	static void serial8250_release_port(struct uart_port *);
3040:	static int serial8250_request_port(struct uart_port *);
2962:	static int serial8250_request_std_resource(struct uart_8250_port *);
2917:	static void serial8250_set_ldisc(struct uart_port *, struct ktermios *);
2053:	static void serial8250_set_mctrl(struct uart_port *, unsigned int);
2889:	static void serial8250_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2521:	static void serial8250_shutdown(struct uart_port *);
1666:	static void serial8250_start_tx(struct uart_port *);
2459:	static int serial8250_startup(struct uart_port *);
1418:	static void serial8250_stop_rx(struct uart_port *);
1546:	static void serial8250_stop_tx(struct uart_port *);
1684:	static void serial8250_throttle(struct uart_port *);
1998:	static unsigned int serial8250_tx_empty(struct uart_port *);
1980:	static int serial8250_tx_threshold_handle_irq(struct uart_port *);
3231:	static const char *serial8250_type(struct uart_port *);
1689:	static void serial8250_unthrottle(struct uart_port *);
3221:	static int serial8250_verify_port(struct uart_port *, struct serial_struct *);
838:	static int size_fifo(struct uart_8250_port *);
2100:	static void wait_for_xmitr(struct uart_8250_port *, int);

File drivers/tty/serial/amba-pl011.c:
121:	static unsigned int get_fifosize_arm(struct amba_device *);
199:	static unsigned int get_fifosize_st(struct amba_device *);
1652:	static void pl011_break_ctl(struct uart_port *, int);
2205:	static void pl011_config_port(struct uart_port *, int);
2467:	static int pl011_console_match(struct console *, char *, int, char *);
2307:	static void pl011_console_putchar(struct uart_port *, unsigned char);
2399:	static int pl011_console_setup(struct console *, char *);
2318:	static void pl011_console_write(struct console *, const char *, unsigned int);
802:	static void pl011_dma_flush_buffer(struct uart_port *);
992:	static void pl011_dma_rx_callback(void *);
1060:	static void pl011_dma_rx_poll(struct timer_list *);
825:	static int pl011_dma_rx_trigger_dma(struct uart_amba_port *);
545:	static void pl011_dma_tx_callback(void *);
595:	static int pl011_dma_tx_refill(struct uart_amba_port *);
2601:	static int pl011_early_console_setup(struct earlycon_device *, const char *);
2551:	static void pl011_early_write(struct console *, const char *, unsigned int);
1800:	static void pl011_enable_interrupts(struct uart_amba_port *);
1381:	static void pl011_enable_ms(struct uart_port *);
3004:	static void pl011_exit(void);
308:	static int pl011_fifo_to_tty(struct uart_amba_port *);
1604:	static unsigned int pl011_get_mctrl(struct uart_port *);
1727:	static int pl011_hwinit(struct uart_port *);
2995:	static int pl011_init(void);
1550:	static irqreturn_t pl011_int(int, void *);
2786:	static int pl011_probe(struct amba_device *, const struct amba_id *);
2539:	static void pl011_putc(struct uart_port *, unsigned char);
2752:	static int pl011_register_port(struct uart_amba_port *);
2840:	static void pl011_remove(struct amba_device *);
2228:	static int pl011_rs485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
1286:	static void pl011_rs485_tx_stop(struct uart_amba_port *);
1623:	static void pl011_set_mctrl(struct uart_port *, unsigned int);
2043:	static void pl011_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2723:	static int pl011_setup_port(struct device *, struct uart_amba_port *, struct resource *, int);
1962:	static void pl011_shutdown(struct uart_port *);
1351:	static void pl011_start_tx(struct uart_port *);
1846:	static int pl011_startup(struct uart_port *);
1360:	static void pl011_stop_rx(struct uart_port *);
1327:	static void pl011_stop_tx(struct uart_port *);
1372:	static void pl011_throttle_rx(struct uart_port *);
1464:	static bool pl011_tx_chars(struct uart_amba_port *, bool);
1592:	static unsigned int pl011_tx_empty(struct uart_port *);
2195:	static const char *pl011_type(struct uart_port *);
2684:	static void pl011_unregister_port(struct uart_amba_port *);
1830:	static void pl011_unthrottle_rx(struct uart_port *);
2214:	static int pl011_verify_port(struct uart_port *, struct serial_struct *);
2626:	static int qdf2400_e44_early_console_setup(struct earlycon_device *, const char *);
2532:	static void qdf2400_e44_early_write(struct console *, const char *, unsigned int);
2523:	static void qdf2400_e44_putc(struct uart_port *, unsigned char);
2278:	static unsigned int sbsa_uart_get_mctrl(struct uart_port *);
2872:	static int sbsa_uart_probe(struct platform_device *);
2934:	static int sbsa_uart_remove(struct platform_device *);
2274:	static void sbsa_uart_set_mctrl(struct uart_port *, unsigned int);
2175:	static void sbsa_uart_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
1997:	static void sbsa_uart_shutdown(struct uart_port *);
1893:	static int sbsa_uart_startup(struct uart_port *);

File drivers/tty/serial/earlycon.c:
246:	int of_setup_earlycon(const struct earlycon_id *, unsigned long, const char *);
176:	int setup_earlycon(char *);
55:	static void earlycon_init(struct earlycon_device *, const char *);
74:	static void earlycon_print_info(struct earlycon_device *);
223:	static int param_setup_earlycon(char *);
93:	static int parse_options(struct earlycon_device *, char *);
132:	static int register_earlycon(char *, const struct earlycon_id *);

File drivers/tty/serial/fsl_linflexuart.c:
310:	static void linflex_break_ctl(struct uart_port *, int);
529:	static void linflex_config_port(struct uart_port *, int);
555:	static void linflex_console_putchar(struct uart_port *, unsigned char);
692:	static int linflex_console_setup(struct console *, char *);
640:	static void linflex_console_write(struct console *, const char *, unsigned int);
778:	static int linflex_early_console_setup(struct earlycon_device *, const char *);
580:	static void linflex_earlycon_putchar(struct uart_port *, unsigned char);
770:	static void linflex_earlycon_write(struct console *, const char *, unsigned int);
301:	static unsigned int linflex_get_mctrl(struct uart_port *);
276:	static irqreturn_t linflex_int(int, void *);
806:	static int linflex_probe(struct platform_device *);
518:	static void linflex_release_port(struct uart_port *);
854:	static int linflex_remove(struct platform_device *);
523:	static int linflex_request_port(struct uart_port *);
910:	static void linflex_serial_exit(void);
895:	static int linflex_serial_init(void);
306:	static void linflex_set_mctrl(struct uart_port *, unsigned int);
402:	static void linflex_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
314:	static void linflex_setup_watermark(struct uart_port *);
384:	static void linflex_shutdown(struct uart_port *);
191:	static void linflex_start_tx(struct uart_port *);
367:	static int linflex_startup(struct uart_port *);
152:	static void linflex_stop_rx(struct uart_port *);
143:	static void linflex_stop_tx(struct uart_port *);
292:	static unsigned int linflex_tx_empty(struct uart_port *);
513:	static const char *linflex_type(struct uart_port *);

File drivers/tty/serial/fsl_lpuart.c:
1965:	static void __lpuart32_serial_setbrg(struct uart_port *, unsigned int, bool, bool);
378:	static int __lpuart_enable_clks(struct lpuart_port *, bool);
1463:	static void lpuart32_break_ctl(struct uart_port *, int);
1369:	static int lpuart32_config_rs485(struct uart_port *, struct ktermios *, struct serial_rs485 *);
2416:	static void lpuart32_console_get_options(struct lpuart_port *, int *, int *, int *);
2296:	static void lpuart32_console_putchar(struct uart_port *, unsigned char);
2333:	static void lpuart32_console_write(struct console *, const char *, unsigned int);
2542:	static int lpuart32_early_console_setup(struct earlycon_device *, const char *);
2525:	static void lpuart32_early_write(struct console *, const char *, unsigned int);
1411:	static unsigned int lpuart32_get_mctrl(struct uart_port *);
2579:	static int lpuart32_imx_early_console_setup(struct earlycon_device *, const char *);
1033:	static irqreturn_t lpuart32_int(int, void *);
1437:	static void lpuart32_set_mctrl(struct uart_port *, unsigned int);
2051:	static void lpuart32_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
1518:	static void lpuart32_setup_watermark(struct lpuart_port *);
1790:	static void lpuart32_shutdown(struct uart_port *);
781:	static void lpuart32_start_tx(struct uart_port *);
1716:	static int lpuart32_startup(struct uart_port *);
437:	static void lpuart32_stop_rx(struct uart_port *);
420:	static void lpuart32_stop_tx(struct uart_port *);
728:	static void lpuart32_transmit_buffer(struct lpuart_port *);
829:	static unsigned int lpuart32_tx_empty(struct uart_port *);
1451:	static void lpuart_break_ctl(struct uart_port *, int);
2212:	static void lpuart_config_port(struct uart_port *, int);
1339:	static int lpuart_config_rs485(struct uart_port *, struct ktermios *, struct serial_rs485 *);
2367:	static void lpuart_console_get_options(struct lpuart_port *, int *, int *, int *);
2290:	static void lpuart_console_putchar(struct uart_port *, unsigned char);
2461:	static int lpuart_console_setup(struct console *, char *);
2303:	static void lpuart_console_write(struct console *, const char *, unsigned int);
1094:	static void lpuart_copy_rx_to_tty(struct lpuart_port *);
1236:	static void lpuart_dma_rx_complete(void *);
1748:	static void lpuart_dma_shutdown(struct lpuart_port *);
445:	static void lpuart_dma_tx(struct lpuart_port *);
498:	static void lpuart_dma_tx_complete(void *);
2532:	static int lpuart_early_console_setup(struct earlycon_device *, const char *);
2518:	static void lpuart_early_write(struct console *, const char *, unsigned int);
574:	static void lpuart_flush_buffer(struct uart_port *);
1399:	static unsigned int lpuart_get_mctrl(struct uart_port *);
1008:	static irqreturn_t lpuart_int(int, void *);
2668:	static int lpuart_probe(struct platform_device *);
2201:	static void lpuart_release_port(struct uart_port *);
2790:	static int lpuart_remove(struct platform_device *);
2206:	static int lpuart_request_port(struct uart_port *);
1612:	static void lpuart_rx_dma_startup(struct lpuart_port *);
3064:	static void lpuart_serial_exit(void);
3050:	static int lpuart_serial_init(void);
1423:	static void lpuart_set_mctrl(struct uart_port *, unsigned int);
1811:	static void lpuart_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
1475:	static void lpuart_setup_watermark(struct lpuart_port *);
1771:	static void lpuart_shutdown(struct uart_port *);
1250:	static int lpuart_start_rx_dma(struct lpuart_port *);
763:	static void lpuart_start_tx(struct uart_port *);
1661:	static int lpuart_startup(struct uart_port *);
429:	static void lpuart_stop_rx(struct uart_port *);
411:	static void lpuart_stop_tx(struct uart_port *);
1243:	static void lpuart_timer_func(struct timer_list *);
718:	static void lpuart_transmit_buffer(struct lpuart_port *);
1580:	static void lpuart_tx_dma_startup(struct lpuart_port *);
813:	static unsigned int lpuart_tx_empty(struct uart_port *);
2196:	static const char *lpuart_type(struct uart_port *);
799:	static void lpuart_uart_pm(struct uart_port *, unsigned int, unsigned int);
2218:	static int lpuart_verify_port(struct uart_port *, struct serial_struct *);
2555:	static int ls1028a_early_console_setup(struct earlycon_device *, const char *);

File drivers/tty/serial/serial_core.c:
3053:	int uart_add_one_port(struct uart_driver *, struct uart_port *);
2811:	struct tty_driver *uart_console_device(struct console *, int *);
2075:	void uart_console_write(struct uart_port *, const char *, unsigned int, void (*)(struct uart_port *, unsigned char));
377:	unsigned int uart_get_baud_rate(struct uart_port *, struct ktermios *, const struct ktermios *, unsigned int, unsigned int);
2100:	struct uart_port *uart_get_console(struct uart_port *, int, struct console *);
472:	unsigned int uart_get_divisor(struct uart_port *, unsigned int);
3412:	int uart_get_rs485_mode(struct uart_port *);
3300:	void uart_handle_cts_change(struct uart_port *, unsigned int);
3265:	void uart_handle_dcd_change(struct uart_port *, unsigned int);
3336:	void uart_insert_char(struct uart_port *, unsigned int, unsigned int, unsigned int, unsigned int);
3233:	bool uart_match_port(const struct uart_port *, const struct uart_port *);
2135:	int uart_parse_earlycon(char *, unsigned char *, resource_size_t *, char **);
2190:	void uart_parse_options(const char *, int *, int *, int *, int *);
2725:	int uart_register_driver(struct uart_driver *);
3155:	int uart_remove_one_port(struct uart_driver *, struct uart_port *);
2392:	int uart_resume_port(struct uart_driver *, struct uart_port *);
2220:	int uart_set_options(struct uart_port *, struct console *, int, int, int, int);
2315:	int uart_suspend_port(struct uart_driver *, struct uart_port *);
3379:	bool uart_try_toggle_sysrq(struct uart_port *, unsigned int);
2796:	void uart_unregister_driver(struct uart_driver *);
344:	void uart_update_timeout(struct uart_port *, unsigned int, unsigned int);
111:	void uart_write_wakeup(struct uart_port *);
665:	void uart_xchar_out(struct uart_port *, int);
2893:	static ssize_t close_delay_show(struct device *, struct device_attribute *, char *);
2903:	static ssize_t closing_wait_show(struct device *, struct device_attribute *, char *);
2953:	static ssize_t console_show(struct device *, struct device_attribute *, char *);
2970:	static ssize_t console_store(struct device *, struct device_attribute *, const char *, size_t);
2913:	static ssize_t custom_divisor_show(struct device *, struct device_attribute *, char *);
2873:	static ssize_t flags_show(struct device *, struct device_attribute *, char *);
2923:	static ssize_t io_type_show(struct device *, struct device_attribute *, char *);
2933:	static ssize_t iomem_base_show(struct device *, struct device_attribute *, char *);
2943:	static ssize_t iomem_reg_shift_show(struct device *, struct device_attribute *, char *);
2863:	static ssize_t irq_show(struct device *, struct device_attribute *, char *);
2839:	static ssize_t line_show(struct device *, struct device_attribute *, char *);
2849:	static ssize_t port_show(struct device *, struct device_attribute *, char *);
2305:	static int serial_match_port(struct device *, void *);
2829:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1104:	static int uart_break_ctl(struct tty_struct *, int);
1864:	static int uart_carrier_raised(struct tty_port *);
489:	static void uart_change_speed(struct tty_struct *, struct uart_state *, const struct ktermios *);
619:	static unsigned int uart_chars_in_buffer(struct tty_struct *);
1683:	static void uart_close(struct tty_struct *, struct file *);
1889:	static void uart_dtr_rts(struct tty_port *, int);
632:	static void uart_flush_buffer(struct tty_struct *);
558:	static void uart_flush_chars(struct tty_struct *);
1255:	static int uart_get_icount(struct tty_struct *, struct serial_icounter_struct *);
757:	static int uart_get_info(struct tty_port *, struct serial_struct *);
797:	static int uart_get_info_user(struct tty_struct *, struct serial_struct *);
1458:	static int uart_get_iso7816_config(struct uart_port *, struct serial_iso7816 *);
1037:	static int uart_get_lsr_info(struct tty_struct *, struct uart_state *, unsigned int *);
1404:	static int uart_get_rs485_config(struct uart_port *, struct serial_rs485 *);
1811:	static void uart_hangup(struct tty_struct *);
1901:	static int uart_install(struct tty_driver *, struct tty_struct *);
1514:	static int uart_ioctl(struct tty_struct *, unsigned int, unsigned long);
1921:	static int uart_open(struct tty_struct *, struct file *);
1933:	static int uart_port_activate(struct tty_port *, struct tty_struct *);
2048:	static int uart_proc_show(struct seq_file *, void *);
534:	static int uart_put_char(struct tty_struct *, unsigned char);
1349:	static void uart_sanitize_serial_rs485(struct uart_port *, struct serial_rs485 *);
1317:	static void uart_sanitize_serial_rs485_delays(struct uart_port *, struct serial_rs485 *);
677:	static void uart_send_xchar(struct tty_struct *, char);
1010:	static int uart_set_info_user(struct tty_struct *, struct serial_struct *);
1477:	static int uart_set_iso7816_config(struct uart_port *, struct serial_iso7816 *);
1604:	static void uart_set_ldisc(struct tty_struct *);
1420:	static int uart_set_rs485_config(struct tty_struct *, struct uart_port *, struct serial_rs485 *);
1620:	static void uart_set_termios(struct tty_struct *, const struct ktermios *);
279:	static void uart_shutdown(struct tty_struct *, struct uart_state *);
144:	static void uart_start(struct tty_struct *);
256:	static int uart_startup(struct tty_struct *, struct uart_state *, int);
123:	static void uart_stop(struct tty_struct *);
699:	static void uart_throttle(struct tty_struct *);
1059:	static int uart_tiocmget(struct tty_struct *);
1083:	static int uart_tiocmset(struct tty_struct *, unsigned int, unsigned int);
1704:	static void uart_tty_port_shutdown(struct tty_port *);
728:	static void uart_unthrottle(struct tty_struct *);
1743:	static void uart_wait_until_sent(struct tty_struct *, int);
563:	static int uart_write(struct tty_struct *, const unsigned char *, int);
606:	static unsigned int uart_write_room(struct tty_struct *);
2819:	static ssize_t uartclk_show(struct device *, struct device_attribute *, char *);
2883:	static ssize_t xmit_fifo_size_show(struct device *, struct device_attribute *, char *);

File drivers/tty/serial/serial_mctrl_gpio.c:
369:	void mctrl_gpio_disable_irq_wake(struct mctrl_gpios *);
329:	void mctrl_gpio_disable_ms(struct mctrl_gpios *);
350:	void mctrl_gpio_enable_irq_wake(struct mctrl_gpios *);
300:	void mctrl_gpio_enable_ms(struct mctrl_gpios *);
278:	void mctrl_gpio_free(struct device *, struct mctrl_gpios *);
97:	unsigned int mctrl_gpio_get(struct mctrl_gpios *, unsigned int *);
118:	unsigned int mctrl_gpio_get_outputs(struct mctrl_gpios *, unsigned int *);
224:	struct mctrl_gpios *mctrl_gpio_init(struct uart_port *, unsigned int);
138:	struct mctrl_gpios *mctrl_gpio_init_noauto(struct device *, unsigned int);
52:	void mctrl_gpio_set(struct mctrl_gpios *, unsigned int);
79:	struct gpio_desc *mctrl_gpio_to_gpiod(struct mctrl_gpios *, enum mctrl_gpio_idx);
177:	static irqreturn_t mctrl_gpio_irq_handle(int, void *);

File drivers/tty/serial/xilinx_uartps.c:
1174:	static int cdns_early_console_setup(struct earlycon_device *, const char *);
1166:	static void cdns_early_write(struct console *, const char *, unsigned int);
650:	static void cdns_uart_break_ctl(struct uart_port *, int);
479:	static int cdns_uart_clk_notifier_cb(struct notifier_block *, unsigned long, void *);
985:	static void cdns_uart_config_port(struct uart_port *, int);
1132:	static void cdns_uart_console_putchar(struct uart_port *, unsigned char);
1270:	static int cdns_uart_console_setup(struct console *, char *);
1224:	static void cdns_uart_console_write(struct console *, const char *, unsigned int);
1716:	static void cdns_uart_exit(void);
997:	static unsigned int cdns_uart_get_mctrl(struct uart_port *);
313:	static void cdns_uart_handle_tx(void *);
1710:	static int cdns_uart_init(void);
344:	static irqreturn_t cdns_uart_isr(int, void *);
1087:	static void cdns_uart_pm(struct uart_port *, unsigned int, unsigned int);
1464:	static int cdns_uart_probe(struct platform_device *);
973:	static void cdns_uart_release_port(struct uart_port *);
1669:	static int cdns_uart_remove(struct platform_device *);
950:	static int cdns_uart_request_port(struct uart_port *);
445:	static unsigned int cdns_uart_set_baud_rate(struct uart_port *, unsigned int);
1019:	static void cdns_uart_set_mctrl(struct uart_port *, unsigned int);
677:	static void cdns_uart_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
887:	static void cdns_uart_shutdown(struct uart_port *);
571:	static void cdns_uart_start_tx(struct uart_port *);
806:	static int cdns_uart_startup(struct uart_port *);
616:	static void cdns_uart_stop_rx(struct uart_port *);
602:	static void cdns_uart_stop_tx(struct uart_port *);
635:	static unsigned int cdns_uart_tx_empty(struct uart_port *);
914:	static const char *cdns_uart_type(struct uart_port *);
926:	static int cdns_uart_verify_port(struct uart_port *, struct serial_struct *);

File drivers/tty/sysrq.c:
572:	void __handle_sysrq(int, bool);
631:	void handle_sysrq(int);
1139:	int register_sysrq_key(int, const struct sysrq_key_op *);
72:	int sysrq_mask(void);
1098:	int sysrq_toggle_support(int);
1145:	int unregister_sysrq_key(int, const struct sysrq_key_op *);
385:	static void moom_callback(struct work_struct *);
230:	static void showacpu(void *);
90:	static int sysrq_always_enabled_setup(char *);
959:	static int sysrq_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
1000:	static void sysrq_disconnect(struct input_handle *);
704:	static void sysrq_do_reset(struct timer_list *);
928:	static bool sysrq_filter(struct input_handle *, unsigned int, unsigned int, int);
118:	static void sysrq_handle_SAK(int);
150:	static void sysrq_handle_crash(int);
430:	static void sysrq_handle_kill(int);
101:	static void sysrq_handle_loglevel(int);
404:	static void sysrq_handle_moom(int);
201:	static void sysrq_handle_mountro(int);
164:	static void sysrq_handle_reboot(int);
190:	static void sysrq_handle_show_timers(int);
253:	static void sysrq_handle_showallcpus(int);
343:	static void sysrq_handle_showmem(int);
286:	static void sysrq_handle_showregs(int);
303:	static void sysrq_handle_showstate(int);
315:	static void sysrq_handle_showstate_blocked(int);
179:	static void sysrq_handle_sync(int);
373:	static void sysrq_handle_term(int);
416:	static void sysrq_handle_thaw(int);
135:	static void sysrq_handle_unraw(int);
442:	static void sysrq_handle_unrt(int);
1189:	static int sysrq_init(void);
1034:	static void sysrq_register_handler(void);
794:	static void sysrq_reinject_alt_sysrq(struct work_struct *);
1050:	static int sysrq_reset_seq_param_set(const char *, const struct kernel_param *);
246:	static void sysrq_showregs_othercpus(struct work_struct *);
1155:	static ssize_t write_sysrq_trigger(struct file *, const char *, size_t, loff_t *);

File drivers/tty/tty_audit.c:
202:	void tty_audit_add_data(struct tty_struct *, const void *, size_t);
112:	void tty_audit_exit(void);
129:	void tty_audit_fork(struct signal_struct *);
154:	int tty_audit_push(void);
137:	void tty_audit_tiocsti(struct tty_struct *, char);
61:	static void tty_audit_log(const char *, dev_t, unsigned char *, size_t);

File drivers/tty/tty_baudrate.c:
211:	void tty_encode_baud_rate(struct tty_struct *, speed_t, speed_t);
58:	speed_t tty_termios_baud_rate(const struct ktermios *);
129:	void tty_termios_encode_baud_rate(struct ktermios *, speed_t, speed_t);
88:	speed_t tty_termios_input_baud_rate(const struct ktermios *);

File drivers/tty/tty_buffer.c:
393:	int __tty_insert_flip_char(struct tty_port *, unsigned char, char);
690:	bool tty_buffer_cancel_work(struct tty_port *);
222:	void tty_buffer_flush(struct tty_struct *, struct tty_ldisc *);
695:	void tty_buffer_flush_work(struct tty_port *);
120:	void tty_buffer_free_all(struct tty_port *);
646:	void tty_buffer_init(struct tty_port *);
52:	void tty_buffer_lock_exclusive(struct tty_port *);
301:	int tty_buffer_request_room(struct tty_port *, size_t);
685:	bool tty_buffer_restart_work(struct tty_port *);
670:	int tty_buffer_set_limit(struct tty_port *, int);
680:	void tty_buffer_set_lock_subclass(struct tty_port *);
94:	unsigned int tty_buffer_space_avail(struct tty_port *);
69:	void tty_buffer_unlock_exclusive(struct tty_port *);
599:	void tty_flip_buffer_push(struct tty_port *);
622:	int tty_insert_flip_string_and_push_buffer(struct tty_port *, const unsigned char *, size_t);
319:	int tty_insert_flip_string_fixed_flag(struct tty_port *, const unsigned char *, char, size_t);
358:	int tty_insert_flip_string_flags(struct tty_port *, const unsigned char *, const char *, size_t);
453:	int tty_ldisc_receive_buf(struct tty_ldisc *, const unsigned char *, const char *, int);
424:	int tty_prepare_flip_string(struct tty_port *, unsigned char **, size_t);
262:	static int __tty_buffer_request_room(struct tty_port *, size_t, bool);
532:	static void flush_to_ldisc(struct work_struct *);

File drivers/tty/tty_io.c:
2999:	void __do_SAK(struct tty_struct *);
783:	void __start_tty(struct tty_struct *);
750:	void __stop_tty(struct tty_struct *);
3313:	struct tty_driver *__tty_alloc_driver(unsigned int, struct module *, unsigned long);
3084:	struct tty_struct *alloc_tty_struct(struct tty_driver *, int);
3589:	void console_sysfs_notify(void);
3058:	void do_SAK(struct tty_struct *);
1113:	ssize_t redirected_tty_write(struct kiocb *, struct iov_iter *);
804:	void start_tty(struct tty_struct *);
773:	void stop_tty(struct tty_struct *);
195:	void tty_add_file(struct tty_struct *, struct file *);
181:	int tty_alloc_file(struct file *);
3496:	void tty_default_fops(struct file_operations *);
336:	int tty_dev_name_to_number(const char *, dev_t *);
3490:	dev_t tty_devnum(struct tty_struct *);
2325:	int tty_do_resize(struct tty_struct *, struct winsize *);
3403:	void tty_driver_kref_put(struct tty_driver *);
251:	const char *tty_driver_name(const struct tty_struct *);
214:	void tty_free_file(struct file *);
2569:	int tty_get_icount(struct tty_struct *, struct serial_icounter_struct *);
683:	void tty_hangup(struct tty_struct *);
744:	int tty_hung_up_p(struct file *);
3637:	int tty_init(void);
1390:	struct tty_struct *tty_init_dev(struct tty_driver *, int);
1247:	void tty_init_termios(struct tty_struct *);
2651:	long tty_ioctl(struct file *, unsigned int, unsigned long);
1652:	void tty_kclose(struct tty_struct *);
1998:	struct tty_struct *tty_kopen_exclusive(dev_t);
2013:	struct tty_struct *tty_kopen_shared(dev_t);
1560:	void tty_kref_put(struct tty_struct *);
243:	const char *tty_name(const struct tty_struct *);
3136:	int tty_put_char(struct tty_struct *, unsigned char);
3181:	struct device *tty_register_device(struct tty_driver *, unsigned int, struct device *);
3213:	struct device *tty_register_device_attr(struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
3415:	int tty_register_driver(struct tty_driver *);
1721:	int tty_release(struct inode *, struct file *);
1682:	void tty_release_struct(struct tty_struct *, int);
1468:	void tty_save_termios(struct tty_struct *);
1145:	int tty_send_xchar(struct tty_struct *, char);
1277:	int tty_standard_install(struct tty_driver *, struct tty_struct *);
3293:	void tty_unregister_device(struct tty_driver *, unsigned int);
3480:	void tty_unregister_driver(struct tty_driver *);
698:	void tty_vhangup(struct tty_struct *);
711:	void tty_vhangup_self(void);
732:	void tty_vhangup_session(struct tty_struct *);
516:	void tty_wakeup(struct tty_struct *);
1058:	void tty_write_message(struct tty_struct *, char *);
578:	static void __tty_hangup(struct tty_struct *, int);
272:	static int check_tty_count(struct tty_struct *, const char *);
3045:	static void do_SAK_work(struct work_struct *);
668:	static void do_tty_hangup(struct work_struct *);
1070:	static ssize_t file_tty_write(struct file *, struct kiocb *, struct iov_iter *);
446:	static long hung_up_tty_compat_ioctl(struct file *, unsigned int, unsigned long);
452:	static int hung_up_tty_fasync(int, struct file *, int);
440:	static long hung_up_tty_ioctl(struct file *, unsigned int, unsigned long);
435:	static __poll_t hung_up_tty_poll(struct file *, poll_table *);
424:	static ssize_t hung_up_tty_read(struct kiocb *, struct iov_iter *);
429:	static ssize_t hung_up_tty_write(struct kiocb *, struct iov_iter *);
1520:	static void release_one_tty(struct work_struct *);
1580:	static void release_tty(struct tty_struct *, int);
2469:	static int send_break(struct tty_struct *, unsigned int);
3525:	static ssize_t show_cons_active(struct device *, struct device_attribute *, char *);
2973:	static int this_tty(const void *, struct file *, unsigned int);
2382:	static int tioccons(struct file *);
2445:	static int tiocgetd(struct tty_struct *, int *);
2306:	static int tiocgwinsz(struct tty_struct *, struct winsize *);
2422:	static int tiocsetd(struct tty_struct *, int *);
2272:	static int tiocsti(struct tty_struct *, char *);
2361:	static int tiocswinsz(struct tty_struct *, struct winsize *);
3511:	static int tty_class_init(void);
3188:	static void tty_device_create_release(struct device *);
3501:	static char *tty_devnode(const struct device *, umode_t *);
2245:	static int tty_fasync(int, struct file *, int);
1950:	static struct tty_struct *tty_kopen(dev_t, int);
1911:	static struct tty_driver *tty_lookup_driver(dev_t, struct file *, int *);
2110:	static int tty_open(struct inode *, struct file *);
2192:	static __poll_t tty_poll(struct file *, poll_table *);
906:	static ssize_t tty_read(struct kiocb *, struct iov_iter *);
1332:	static int tty_reopen(struct tty_struct *);
457:	static void tty_show_fdinfo(struct seq_file *, struct file *);
2581:	static int tty_tiocgicount(struct tty_struct *, void *);
2622:	static int tty_tiocgserial(struct tty_struct *, struct serial_struct *);
2506:	static int tty_tiocmget(struct tty_struct *, int *);
2612:	static int tty_tiocsserial(struct tty_struct *, struct serial_struct *);
1108:	static ssize_t tty_write(struct kiocb *, struct iov_iter *);

File drivers/tty/tty_ioctl.c:
402:	int kernel_termios_to_user_termio(struct termio *, struct ktermios *);
422:	int kernel_termios_to_user_termios(struct termios2 *, struct ktermios *);
432:	int kernel_termios_to_user_termios_1(struct termios *, struct ktermios *);
934:	int n_tty_ioctl_helper(struct tty_struct *, unsigned int, unsigned long);
58:	unsigned int tty_chars_in_buffer(struct tty_struct *);
93:	void tty_driver_flush_buffer(struct tty_struct *);
290:	unsigned char tty_get_char_size(unsigned int);
315:	unsigned char tty_get_frame_size(unsigned int);
763:	int tty_mode_ioctl(struct tty_struct *, unsigned int, unsigned long);
919:	int tty_perform_flush(struct tty_struct *, unsigned long);
341:	int tty_set_termios(struct tty_struct *, struct ktermios *);
253:	void tty_termios_copy_hw(struct ktermios *, const struct ktermios *);
273:	int tty_termios_hw_change(const struct ktermios *, const struct ktermios *);
137:	int tty_throttle_safe(struct tty_struct *);
113:	void tty_unthrottle(struct tty_struct *);
168:	int tty_unthrottle_safe(struct tty_struct *);
198:	void tty_wait_until_sent(struct tty_struct *, long);
77:	unsigned int tty_write_room(struct tty_struct *);
382:	int user_termio_to_kernel_termios(struct ktermios *, struct termio *);
417:	int user_termios_to_kernel_termios(struct ktermios *, struct termios2 *);
427:	int user_termios_to_kernel_termios_1(struct ktermios *, struct termios *);
893:	static int __tty_perform_flush(struct tty_struct *, unsigned long);
465:	static int set_termios(struct tty_struct *, void *, int);

File drivers/tty/tty_jobctrl.c:
33:	int __tty_check_change(struct tty_struct *, int);
265:	void disassociate_ctty(int);
160:	struct tty_struct *get_current_tty(void);
333:	void no_tty(void);
75:	void proc_clear_tty(struct task_struct *);
175:	void session_clear_tty(struct pid *);
69:	int tty_check_change(struct tty_struct *);
416:	struct pid *tty_get_pgrp(struct tty_struct *);
567:	long tty_jobctrl_ioctl(struct tty_struct *, struct tty_struct *, struct file *, unsigned int, unsigned long);
132:	void tty_open_proc_set_tty(struct file *, struct tty_struct *);
196:	int tty_signal_session_leader(struct tty_struct *, int);
98:	static void __proc_set_tty(struct tty_struct *);
436:	static struct pid *session_of_pgrp(struct pid *);

File drivers/tty/tty_ldisc.c:
813:	void tty_ldisc_deinit(struct tty_struct *);
280:	void tty_ldisc_deref(struct tty_ldisc *);
385:	void tty_ldisc_flush(struct tty_struct *);
685:	void tty_ldisc_hangup(struct tty_struct *, bool);
796:	int tty_ldisc_init(struct tty_struct *);
305:	int tty_ldisc_lock(struct tty_struct *, unsigned long);
260:	struct tty_ldisc *tty_ldisc_ref(struct tty_struct *);
240:	struct tty_ldisc *tty_ldisc_ref_wait(struct tty_struct *);
642:	int tty_ldisc_reinit(struct tty_struct *, int);
766:	void tty_ldisc_release(struct tty_struct *);
738:	int tty_ldisc_setup(struct tty_struct *, struct tty_struct *);
321:	void tty_ldisc_unlock(struct tty_struct *);
58:	int tty_register_ldisc(struct tty_ldisc_ops *);
520:	int tty_set_ldisc(struct tty_struct *, int);
84:	void tty_unregister_ldisc(struct tty_ldisc_ops *);
468:	static int tty_ldisc_failto(struct tty_struct *, int);
140:	static struct tty_ldisc *tty_ldisc_get(struct tty_struct *, int);
600:	static void tty_ldisc_kill(struct tty_struct *);
179:	static void tty_ldisc_put(struct tty_ldisc *);
492:	static void tty_ldisc_restore(struct tty_struct *, struct tty_ldisc *);
193:	static void *tty_ldiscs_seq_next(struct seq_file *, void *, loff_t *);
203:	static int tty_ldiscs_seq_show(struct seq_file *, void *);
188:	static void *tty_ldiscs_seq_start(struct seq_file *, loff_t *);
199:	static void tty_ldiscs_seq_stop(struct seq_file *, void *);

File drivers/tty/tty_ldsem.c:
57:	void __init_ldsem(struct ld_semaphore *, const char *, struct lock_class_key *);
337:	int ldsem_down_read(struct ld_semaphore *, long);
346:	int ldsem_down_read_trylock(struct ld_semaphore *);
363:	int ldsem_down_write(struct ld_semaphore *, long);
372:	int ldsem_down_write_trylock(struct ld_semaphore *);
389:	void ldsem_up_read(struct ld_semaphore *);
403:	void ldsem_up_write(struct ld_semaphore *);
74:	static void __ldsem_wake_readers(struct ld_semaphore *);

File drivers/tty/tty_mutex.c:
15:	void tty_lock(struct tty_struct *);
22:	int tty_lock_interruptible(struct tty_struct *);
40:	void tty_lock_slave(struct tty_struct *);
52:	void tty_set_lock_subclass(struct tty_struct *);
33:	void tty_unlock(struct tty_struct *);
46:	void tty_unlock_slave(struct tty_struct *);

File drivers/tty/tty_port.c:
245:	int tty_port_alloc_xmit_buf(struct tty_port *);
510:	int tty_port_block_til_ready(struct tty_port *, struct tty_struct *, struct file *);
447:	int tty_port_carrier_raised(struct tty_port *);
715:	void tty_port_close(struct tty_port *, struct tty_struct *, struct file *);
681:	void tty_port_close_end(struct tty_port *, struct tty_struct *);
625:	int tty_port_close_start(struct tty_port *, struct tty_struct *, struct file *);
279:	void tty_port_destroy(struct tty_port *);
261:	void tty_port_free_xmit_buf(struct tty_port *);
394:	void tty_port_hangup(struct tty_port *);
92:	void tty_port_init(struct tty_port *);
738:	int tty_port_install(struct tty_port *, struct tty_driver *, struct tty_struct *);
119:	void tty_port_link_device(struct tty_port *, struct tty_driver *, unsigned int);
478:	void tty_port_lower_dtr_rts(struct tty_port *);
765:	int tty_port_open(struct tty_port *, struct tty_struct *, struct file *);
308:	void tty_port_put(struct tty_port *);
463:	void tty_port_raise_dtr_rts(struct tty_port *);
139:	struct device *tty_port_register_device(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
160:	struct device *tty_port_register_device_attr(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
183:	struct device *tty_port_register_device_attr_serdev(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
213:	struct device *tty_port_register_device_serdev(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
322:	struct tty_struct *tty_port_tty_get(struct tty_port *);
419:	void tty_port_tty_hangup(struct tty_port *, bool);
342:	void tty_port_tty_set(struct tty_port *, struct tty_struct *);
433:	void tty_port_tty_wakeup(struct tty_port *);
232:	void tty_port_unregister_device(struct tty_port *, struct tty_driver *, unsigned int);
46:	static void tty_port_default_lookahead_buf(struct tty_port *, const unsigned char *, const unsigned char *, unsigned int);
23:	static int tty_port_default_receive_buf(struct tty_port *, const unsigned char *, const unsigned char *, size_t);
66:	static void tty_port_default_wakeup(struct tty_port *);

File drivers/tty/vt/consolemap.c:
572:	int con_clear_unimap(struct vc_data *);
763:	int con_copy_unimap(struct vc_data *, struct vc_data *);
453:	void con_free_unimap(struct vc_data *);
402:	int con_get_trans_new(ushort *);
371:	int con_get_trans_old(unsigned char *);
785:	int con_get_unimap(struct vc_data *, ushort, ushort *, struct unipair *);
706:	int con_set_default_unimap(struct vc_data *);
388:	int con_set_trans_new(ushort *);
352:	int con_set_trans_old(unsigned char *);
638:	int con_set_unimap(struct vc_data *, ushort, struct unipair *);
908:	void console_map_init(void);
847:	u32 conv_8bit_to_uni(unsigned char);
853:	int conv_uni_to_8bit(u32);
863:	int conv_uni_to_pc(struct vc_data *, long);
300:	u16 inverse_translate(const struct vc_data *, u16, bool);
287:	unsigned short *set_translate(enum translation_map, struct vc_data *);
426:	static void con_release_unimap(struct uni_pagedict *);
467:	static int con_unify_unimap(struct vc_data *, struct uni_pagedict *);
226:	static void set_inverse_transl(struct vc_data *, struct uni_pagedict *, enum translation_map);
327:	static void update_user_maps(void);

File drivers/tty/vt/keyboard.c:
1653:	int kbd_init(void);
312:	int kbd_rate(struct kbd_repeat *);
276:	void kd_mksound(unsigned int, unsigned int);
163:	int register_keyboard_notifier(struct notifier_block *);
1150:	void setledstate(struct kbd_struct *, unsigned int);
169:	int unregister_keyboard_notifier(struct notifier_block *);
2283:	void vt_clr_kbd_mode_bit(unsigned int, int);
1691:	int vt_do_diacrit(unsigned int, void *, int);
1901:	int vt_do_kbkeycode_ioctl(int, struct kbkeycode *, int);
2060:	int vt_do_kdgkb_ioctl(int, struct kbsentry *, int);
2178:	int vt_do_kdgkbmeta(unsigned int);
2154:	int vt_do_kdgkbmode(unsigned int);
2022:	int vt_do_kdsk_ioctl(int, struct kbentry *, int, unsigned int);
1880:	int vt_do_kdskbmeta(unsigned int, unsigned int);
1840:	int vt_do_kdskbmode(unsigned int, unsigned int);
2112:	int vt_do_kdskled(unsigned int, int, unsigned long, int);
2249:	int vt_get_kbd_mode_bit(unsigned int, int);
1181:	int vt_get_leds(unsigned int, int);
2206:	int vt_get_shift_state(void);
1222:	void vt_kbd_con_start(unsigned int);
1239:	void vt_kbd_con_stop(unsigned int);
2219:	void vt_reset_keyboard(unsigned int);
2191:	void vt_reset_unicode(unsigned int);
2264:	void vt_set_kbd_mode_bit(unsigned int, int);
1203:	void vt_set_led_state(unsigned int, int);
414:	void vt_set_leds_compute_shiftstate(void);
337:	static void applkey(struct vc_data *, int, char);
392:	static void do_compute_shiftstate(void);
638:	static void fn_SAK(struct vc_data *);
545:	static void fn_bare_num(struct vc_data *);
617:	static void fn_boot_it(struct vc_data *);
497:	static void fn_caps_on(struct vc_data *);
489:	static void fn_caps_toggle(struct vc_data *);
622:	static void fn_compose(struct vc_data *);
557:	static void fn_dec_console(struct vc_data *);
471:	static void fn_enter(struct vc_data *);
513:	static void fn_hold(struct vc_data *);
574:	static void fn_inc_console(struct vc_data *);
551:	static void fn_lastcons(struct vc_data *);
644:	static void fn_null(struct vc_data *);
531:	static void fn_num(struct vc_data *);
602:	static void fn_scroll_back(struct vc_data *);
597:	static void fn_scroll_forw(struct vc_data *);
591:	static void fn_send_intr(struct vc_data *);
607:	static void fn_show_mem(struct vc_data *);
505:	static void fn_show_ptregs(struct vc_data *);
612:	static void fn_show_state(struct vc_data *);
627:	static void fn_spawn_con(struct vc_data *);
190:	static int getkeycode_helper(struct input_handle *, void *);
438:	static unsigned int handle_diacr(struct vc_data *, unsigned int);
905:	static void k_ascii(struct vc_data *, unsigned char, char);
978:	static void k_brl(struct vc_data *, unsigned char, char);
758:	static void k_cons(struct vc_data *, unsigned char, char);
783:	static void k_cur(struct vc_data *, unsigned char, char);
723:	static void k_dead(struct vc_data *, unsigned char, char);
715:	static void k_dead2(struct vc_data *, unsigned char, char);
766:	static void k_fn(struct vc_data *, unsigned char, char);
652:	static void k_ignore(struct vc_data *, unsigned char, char);
929:	static void k_lock(struct vc_data *, unsigned char, char);
670:	static void k_lowercase(struct vc_data *, unsigned char, char);
893:	static void k_meta(struct vc_data *, unsigned char, char);
793:	static void k_pad(struct vc_data *, unsigned char, char);
710:	static void k_self(struct vc_data *, unsigned char, char);
852:	static void k_shift(struct vc_data *, unsigned char, char);
937:	static void k_slock(struct vc_data *, unsigned char, char);
656:	static void k_spec(struct vc_data *, unsigned char, char);
675:	static void k_unicode(struct vc_data *, unsigned int, char);
1255:	static void kbd_bh(struct tasklet_struct *);
1575:	static int kbd_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
1606:	static void kbd_disconnect(struct input_handle *);
1533:	static void kbd_event(struct input_handle *, unsigned int, unsigned int, int);
1552:	static bool kbd_match(struct input_handler *, struct input_dev *);
291:	static int kbd_rate_helper(struct input_handle *, void *);
1617:	static void kbd_start(struct input_handle *);
1113:	static int kbd_update_leds_helper(struct input_handle *, void *);
267:	static void kd_nosound(struct timer_list *);
249:	static int kd_sound_helper(struct input_handle *, void *);
217:	static int setkeycode_helper(struct input_handle *, void *);
352:	static void to_utf8(struct vc_data *, uint);

File drivers/tty/vt/selection.c:
81:	void clear_selection(void);
375:	int paste_selection(struct tty_struct *);
119:	int sel_loadlut(char *);
354:	int set_selection_kernel(struct tiocl_selection *, struct tty_struct *);
178:	int set_selection_user(const struct tiocl_selection *, struct tty_struct *);
91:	bool vc_is_sel(struct vc_data *);

File drivers/tty/vt/vc_screen.c:
802:	int vcs_init(void);
785:	void vcs_make_sysfs(int);
795:	void vcs_remove_sysfs(int);
729:	static int vcs_fasync(int, struct file *, int);
228:	static loff_t vcs_lseek(struct file *, loff_t, int);
85:	static int vcs_notifier(struct notifier_block *, unsigned long, void *);
746:	static int vcs_open(struct inode *, struct file *);
706:	static __poll_t vcs_poll(struct file *, poll_table *);
126:	static struct vcs_poll_data *vcs_poll_data_get(struct file *);
365:	static ssize_t vcs_read(struct file *, char *, size_t, loff_t *);
764:	static int vcs_release(struct inode *, struct file *);
591:	static ssize_t vcs_write(struct file *, const char *, size_t, loff_t *);

File drivers/tty/vt/vt.c:
973:	void clear_buffer_attributes(struct vc_data *);
805:	void complement_pos(struct vc_data *, int);
4029:	int con_debug_enter(struct vc_data *);
4085:	int con_debug_leave(void);
4709:	int con_font_op(struct vc_data *, struct console_font_op *);
4544:	int con_get_cmap(unsigned char *);
3986:	int con_is_bound(const struct consw *);
4009:	bool con_is_visible(const struct vc_data *);
4515:	int con_set_cmap(unsigned char *);
4344:	void do_blank_screen(int);
4260:	int do_take_over_console(const struct consw *, int, int, int);
3732:	int do_unbind_con_driver(const struct consw *, int, int, int);
4405:	void do_unblank_screen(int);
4183:	int do_unregister_con_driver(const struct consw *);
4758:	void getconsxy(const struct vc_data *, unsigned char *);
4284:	void give_up_console(const struct consw *);
756:	void invert_screen(struct vc_data *, int, int, bool);
1865:	void mouse_report(struct tty_struct *, int, int, int);
1876:	int mouse_reporting(void);
4470:	void poke_blanked_console(void);
4765:	void putconsxy(struct vc_data *, unsigned char * const);
984:	void redraw_screen(struct vc_data *, int);
249:	int register_vt_notifier(struct notifier_block *);
4563:	void reset_palette(struct vc_data *);
310:	void schedule_console_callback(void);
4730:	u16 screen_glyph(const struct vc_data *, int);
4741:	u32 screen_glyph_unicode(const struct vc_data *, int);
4752:	unsigned short *screen_pos(const struct vc_data *, int, bool);
1489:	void scrollback(struct vc_data *);
1494:	void scrollfront(struct vc_data *, int);
3013:	int set_console(int);
3184:	int tioclinux(struct tty_struct *, unsigned long);
255:	int unregister_vt_notifier(struct notifier_block *);
688:	void update_region(struct vc_data *, unsigned long, int);
1108:	int vc_allocate(unsigned int);
1048:	int vc_cons_allocated(unsigned int);
1388:	struct vc_data *vc_deallocate(unsigned int);
1360:	int vc_resize(struct vc_data *, unsigned int, unsigned int);
4793:	void vc_scrolldelta_helper(struct vc_data *, int, unsigned int, void *, unsigned int);
501:	int vc_uniscr_check(struct vc_data *);
547:	void vc_uniscr_copy_line(const struct vc_data *, void *, bool, unsigned int, unsigned int, unsigned int);
4772:	u16 vcs_scr_readw(const struct vc_data *, const u16 *);
4788:	void vcs_scr_updated(struct vc_data *);
4779:	void vcs_scr_writew(struct vc_data *, u16, u16 *);
3062:	int vt_kmsg_redirect(int);
3587:	int vty_init(const struct file_operations *);
869:	static void add_softcursor(struct vc_data *);
4464:	static void blank_screen_t(struct timer_list *);
3436:	static void con_cleanup(struct tty_struct *);
3422:	static void con_close(struct tty_struct *, struct file *);
4220:	static void con_driver_unregister_callback(struct work_struct *);
3357:	static void con_flush_chars(struct tty_struct *);
3482:	static int con_init(void);
3375:	static int con_install(struct tty_driver *, struct tty_struct *);
3415:	static int con_open(struct tty_struct *, struct file *);
3301:	static int con_put_char(struct tty_struct *, unsigned char);
620:	static void con_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
3427:	static void con_shutdown(struct tty_struct *);
3346:	static void con_start(struct tty_struct *);
3332:	static void con_stop(struct tty_struct *);
3318:	static void con_throttle(struct tty_struct *);
3322:	static void con_unthrottle(struct tty_struct *);
3291:	static int con_write(struct tty_struct *, const unsigned char *, int);
3306:	static unsigned int con_write_room(struct tty_struct *);
2978:	static void console_callback(struct work_struct *);
1530:	static void cr(struct vc_data *);
1552:	static void csi_J(struct vc_data *, int);
1589:	static void csi_K(struct vc_data *, int);
2028:	static void csi_L(struct vc_data *, unsigned int);
2049:	static void csi_M(struct vc_data *, unsigned int);
2039:	static void csi_P(struct vc_data *, unsigned int);
1619:	static void csi_X(struct vc_data *, unsigned int);
1731:	static void csi_m(struct vc_data *);
1839:	static void cursor_report(struct vc_data *, struct tty_struct *);
3629:	static int do_bind_con_driver(const struct consw *, int, int, int);
2894:	static int do_con_write(struct tty_struct *, const unsigned char *, int);
644:	static void do_update_region(struct vc_data *, unsigned long, int);
1484:	static void gotoxay(struct vc_data *, int, int);
1452:	static void gotoxy(struct vc_data *, int, int);
902:	static void hide_cursor(struct vc_data *);
840:	static void insert_char(struct vc_data *, unsigned int);
1501:	static void lf(struct vc_data *);
2082:	static void reset_terminal(struct vc_data *, int);
1857:	static void respond_ID(struct tty_struct *);
2066:	static void restore_cur(struct vc_data *);
1687:	static void rgb_background(struct vc_data *, const struct rgb *);
1665:	static void rgb_foreground(struct vc_data *, const struct rgb *);
1516:	static void ri(struct vc_data *);
1882:	static void set_mode(struct vc_data *, int);
925:	static void set_origin(struct vc_data *);
4502:	static void set_palette(struct vc_data *);
4333:	static int set_vesa_blanking(char *);
1953:	static void setterm_command(struct vc_data *);
3931:	static ssize_t show_bind(struct device *, struct device_attribute *, char *);
3944:	static ssize_t show_name(struct device *, struct device_attribute *, char *);
3573:	static ssize_t show_tty_active(struct device *, struct device_attribute *, char *);
1850:	static void status_report(struct tty_struct *);
3913:	static ssize_t store_bind(struct device *, struct device_attribute *, const char *, size_t);
2579:	static int ucs_cmp(const void *, const void *);
4454:	static void unblank_screen(void);
745:	static void update_attr(struct vc_data *);
1195:	static int vc_do_resize(struct tty_struct *, struct vc_data *, unsigned int, unsigned int);
3450:	static void vc_init(struct vc_data *, unsigned int, unsigned int, int);
1089:	static void vc_port_destruct(struct tty_port *);
2130:	static void vc_setGx(struct vc_data *, unsigned int, int);
1703:	static int vc_t416_color(struct vc_data *, int, void (*)(struct vc_data *, const struct rgb *));
3153:	static struct tty_driver *vt_console_device(struct console *, int *);
3078:	static void vt_console_print(struct console *, const char *, unsigned int);
1377:	static int vt_resize(struct tty_struct *, struct winsize *);
4291:	static int vtconsole_class_init(void);

File drivers/tty/vt/vt_ioctl.c:
1203:	void change_console(struct vc_data *);
1317:	void pm_set_vt_switch(int);
963:	void reset_vc(struct vc_data *);
978:	void vc_SAK(struct work_struct *);
111:	void vt_event_post(unsigned int, unsigned int, unsigned int);
736:	int vt_ioctl(struct tty_struct *, unsigned int, unsigned long);
1274:	int vt_move_to_console(unsigned int, int);
217:	int vt_waitactive(int);
1129:	static void complete_change_console(struct vc_data *);
630:	static int vt_disallocate(unsigned int);
649:	static void vt_disallocate_all(void);
189:	static int vt_event_wait_ioctl(struct vt_event *);
252:	static int vt_kdsetmode(struct vc_data *, unsigned long);
555:	static int vt_reldisp(struct vc_data *, unsigned int);
668:	static int vt_resizex(struct vc_data *, struct vt_consize *);
591:	static int vt_setactivate(struct vt_setactivate *);

File drivers/usb/cdns3/cdns3-plat.c:
331:	static void cdns3_driver_exit(void);
331:	static int cdns3_driver_init(void);
52:	static int cdns3_plat_probe(struct platform_device *);
178:	static int cdns3_plat_remove(struct platform_device *);
40:	static void set_phy_power_off(struct cdns *);
25:	static int set_phy_power_on(struct cdns *);

File drivers/usb/cdns3/cdns3-ti.c:
231:	static void cdns_ti_driver_exit(void);
231:	static int cdns_ti_driver_init(void);
87:	static int cdns_ti_probe(struct platform_device *);
202:	static int cdns_ti_remove(struct platform_device *);
193:	static int cdns_ti_remove_core(struct device *, void *);

File drivers/usb/cdns3/core.c:
297:	int cdns_hw_role_switch(struct cdns *);
427:	int cdns_init(struct cdns *);
497:	int cdns_remove(struct cdns *);
262:	static int cdns_idle_role_start(struct cdns *);
267:	static void cdns_idle_role_stop(struct cdns *);
341:	static enum usb_role cdns_role_get(struct usb_role_switch *);
357:	static int cdns_role_set(struct usb_role_switch *, enum usb_role);
28:	static int cdns_role_start(struct cdns *, enum usb_role);
405:	static irqreturn_t cdns_wakeup_irq(int, void *);

File drivers/usb/cdns3/drd.c:
106:	void cdns_clear_vbus(struct cdns *);
475:	int cdns_drd_exit(struct cdns *);
260:	void cdns_drd_gadget_off(struct cdns *);
228:	int cdns_drd_gadget_on(struct cdns *);
207:	void cdns_drd_host_off(struct cdns *);
178:	int cdns_drd_host_on(struct cdns *);
384:	int cdns_drd_init(struct cdns *);
309:	int cdns_drd_update_mode(struct cdns *);
86:	int cdns_get_id(struct cdns *);
96:	int cdns_get_vbus(struct cdns *);
142:	bool cdns_is_device(struct cdns *);
132:	bool cdns_is_host(struct cdns *);
484:	bool cdns_power_is_lost(struct cdns *);
119:	void cdns_set_vbus(struct cdns *);
349:	static irqreturn_t cdns_drd_irq(int, void *);
332:	static irqreturn_t cdns_drd_thread_irq(int, void *);

File drivers/usb/cdns3/gadget-export.h:
30:	static int cdns3_gadget_init(struct cdns *);

File drivers/usb/cdns3/host.c:
127:	int cdns_host_init(struct cdns *);
60:	static int __cdns_host_init(struct cdns *);
119:	static void cdns_host_exit(struct cdns *);
27:	static void xhci_cdns3_plat_start(struct usb_hcd *);
48:	static int xhci_cdns3_resume_quirk(struct usb_hcd *);

File drivers/usb/common/common.c:
276:	enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *, int);
328:	bool of_usb_host_tpl_support(struct device_node *);
342:	int of_usb_update_otg_caps(struct device_node *, struct usb_otg_caps *);
231:	unsigned int usb_decode_interval(const struct usb_endpoint_descriptor *, enum usb_device_speed);
34:	const char *usb_ep_type_string(int);
190:	enum usb_dr_mode usb_get_dr_mode(struct device *);
107:	enum usb_device_speed usb_get_maximum_speed(struct device *);
134:	enum usb_ssp_rate usb_get_maximum_ssp_rate(struct device *);
210:	enum usb_dr_mode usb_get_role_switch_default_mode(struct device *);
400:	struct device *usb_of_get_companion_dev(struct device *);
43:	const char *usb_otg_state_string(enum usb_otg_state);
91:	const char *usb_speed_string(enum usb_device_speed);
154:	const char *usb_state_string(enum usb_device_state);
426:	static void usb_common_exit(void);
419:	static int usb_common_init(void);

File drivers/usb/common/ulpi.c:
153:	int __ulpi_register_driver(struct ulpi_driver *, struct module *);
23:	int ulpi_read(struct ulpi *, u8);
321:	struct ulpi *ulpi_register_interface(struct device *, const struct ulpi_ops *);
171:	void ulpi_unregister_driver(struct ulpi_driver *);
350:	void ulpi_unregister_interface(struct ulpi *);
29:	int ulpi_write(struct ulpi *, u8, u8);
103:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
132:	static void ulpi_dev_release(struct device *);
373:	static void ulpi_exit(void);
360:	static int ulpi_init(void);
37:	static int ulpi_match(struct device *, struct device_driver *);
73:	static int ulpi_probe(struct device *);
272:	static int ulpi_regs_open(struct inode *, struct file *);
236:	static int ulpi_regs_show(struct seq_file *, void *);
85:	static void ulpi_remove(struct device *);
58:	static int ulpi_uevent(struct device *, struct kobj_uevent_env *);

File drivers/usb/common/usb-conn-gpio.c:
135:	static int usb_charger_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
64:	static void usb_conn_detect_cable(struct work_struct *);
349:	static void usb_conn_driver_exit(void);
349:	static int usb_conn_driver_init(void);
122:	static irqreturn_t usb_conn_isr(int, void *);
174:	static int usb_conn_probe(struct platform_device *);
270:	static int usb_conn_remove(struct platform_device *);

File drivers/usb/core/buffer.c:
115:	void *hcd_buffer_alloc(struct usb_bus *, size_t, gfp_t, dma_addr_t *);
65:	int hcd_buffer_create(struct usb_hcd *);
97:	void hcd_buffer_destroy(struct usb_hcd *);
144:	void hcd_buffer_free(struct usb_bus *, size_t, void *, dma_addr_t);
33:	void usb_init_pool_max(void);

File drivers/usb/core/config.c:
825:	void usb_destroy_configuration(struct usb_device *);
978:	int usb_get_bos_descriptor(struct usb_device *);
861:	int usb_get_configuration(struct usb_device *);
959:	void usb_release_bos_descriptor(struct usb_device *);
484:	void usb_release_interface_cache(struct kref *);

File drivers/usb/core/devices.c:
390:	static ssize_t usb_device_dump(char **, size_t *, loff_t *, loff_t *, struct usb_device *, struct usb_bus *, int, int, int);
510:	static ssize_t usb_device_read(struct file *, char *, size_t, loff_t *);

File drivers/usb/core/devio.c:
2906:	void usb_devio_cleanup(void);
2880:	int usb_devio_init(void);
748:	void usbfs_notify_resume(struct usb_device *);
743:	void usbfs_notify_suspend(struct usb_device *);
613:	static void async_completed(struct urb *);
869:	static int check_ctrlrecip(struct usb_dev_state *, unsigned int, unsigned int, unsigned int);
770:	static int claimintf(struct usb_dev_state *, unsigned int);
186:	static void dec_usb_memory_use_count(struct usb_memory *, int *);
653:	static void destroy_async(struct usb_dev_state *, struct list_head *);
707:	static void driver_disconnect(struct usb_interface *);
701:	static int driver_probe(struct usb_interface *, const struct usb_device_id *);
737:	static int driver_resume(struct usb_interface *);
732:	static int driver_suspend(struct usb_interface *, pm_message_t);
406:	static void free_async(struct async *);
937:	static int parse_usbdevfs_streams(struct usb_dev_state *, struct usbdevfs_streams *, unsigned int *, unsigned int *, struct usb_host_endpoint ***, struct usb_interface **);
2031:	static int processcompl(struct async *, void **);
524:	static void snoop_urb_data(struct urb *, unsigned int);
2802:	static long usbdev_ioctl(struct file *, unsigned int, unsigned long);
229:	static int usbdev_mmap(struct file *, struct vm_area_struct *);
2861:	static int usbdev_notify(struct notifier_block *, unsigned long, void *);
1023:	static int usbdev_open(struct inode *, struct file *);
2813:	static __poll_t usbdev_poll(struct file *, struct poll_table_struct *);
301:	static ssize_t usbdev_read(struct file *, char *, size_t, loff_t *);
1080:	static int usbdev_release(struct inode *, struct file *);
217:	static void usbdev_vm_close(struct vm_area_struct *);
207:	static void usbdev_vm_open(struct vm_area_struct *);
1118:	static void usbfs_blocking_completion(struct urb *);

File drivers/usb/core/driver.c:
1096:	void usb_deregister(struct usb_driver *);
1018:	void usb_deregister_device_driver(struct usb_device_driver *);
824:	const struct usb_device_id *usb_device_match_id(struct usb_device *, const struct usb_device_id *);
839:	bool usb_driver_applicable(struct usb_device *, struct usb_device_driver *);
535:	int usb_driver_claim_interface(struct usb_driver *, struct usb_interface *, void *);
609:	void usb_driver_release_interface(struct usb_driver *, struct usb_interface *);
1113:	void usb_forced_unbind_intf(struct usb_interface *);
638:	int usb_match_device(struct usb_device *, const struct usb_device_id *);
802:	const struct usb_device_id *usb_match_id(struct usb_interface *, const struct usb_device_id *);
709:	int usb_match_one_id(struct usb_interface *, const struct usb_device_id *);
674:	int usb_match_one_id_intf(struct usb_device *, struct usb_host_interface *, const struct usb_device_id *);
975:	int usb_register_device_driver(struct usb_device_driver *, struct module *);
1043:	int usb_register_driver(struct usb_driver *, struct module *, const char *);
114:	ssize_t usb_show_dynids(struct usb_dynids *, char *);
42:	ssize_t usb_store_new_id(struct usb_dynids *, const struct usb_device_id *, struct device_driver *, const char *, size_t);
1200:	void usb_unbind_and_rebind_marked_interfaces(struct usb_device *);
943:	static int __usb_bus_reprobe_drivers(struct device *, void *);
131:	static ssize_t new_id_show(struct device_driver *, char *);
138:	static ssize_t new_id_store(struct device_driver *, const char *, size_t);
178:	static ssize_t remove_id_show(struct device_driver *, char *);
150:	static ssize_t remove_id_store(struct device_driver *, const char *, size_t);
855:	static int usb_device_match(struct device *, struct device_driver *);
249:	static int usb_probe_device(struct device *);
318:	static int usb_probe_interface(struct device *);
902:	static int usb_uevent(struct device *, struct kobj_uevent_env *);
303:	static int usb_unbind_device(struct device *);
428:	static int usb_unbind_interface(struct device *);

File drivers/usb/core/endpoint.c:
149:	int usb_create_ep_devs(struct device *, struct usb_host_endpoint *, struct usb_device *);
183:	void usb_remove_ep_devs(struct usb_host_endpoint *);
47:	static ssize_t bEndpointAddress_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t bInterval_show(struct device *, struct device_attribute *, char *);
46:	static ssize_t bLength_show(struct device *, struct device_attribute *, char *);
48:	static ssize_t bmAttributes_show(struct device *, struct device_attribute *, char *);
102:	static ssize_t direction_show(struct device *, struct device_attribute *, char *);
137:	static void ep_device_release(struct device *);
83:	static ssize_t interval_show(struct device *, struct device_attribute *, char *);
59:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
51:	static ssize_t wMaxPacketSize_show(struct device *, struct device_attribute *, char *);

File drivers/usb/core/file.c:
230:	void usb_deregister_dev(struct usb_interface *, struct usb_class_driver *);
132:	void usb_major_cleanup(void);
120:	int usb_major_init(void);
156:	int usb_register_dev(struct usb_interface *, struct usb_class_driver *);
65:	static char *usb_devnode(const struct device *, umode_t *);
34:	static int usb_open(struct inode *, struct file *);

File drivers/usb/core/generic.c:
56:	int usb_choose_configuration(struct usb_device *);
253:	void usb_generic_driver_disconnect(struct usb_device *);
226:	int usb_generic_driver_probe(struct usb_device *);
198:	static int __check_for_non_generic_match(struct device_driver *, void *);
211:	static bool usb_generic_driver_match(struct usb_device *);

File drivers/usb/core/hcd.c:
2567:	struct usb_hcd *__usb_create_hcd(const struct hc_driver *, struct device *, struct device *, const char *, struct usb_hcd *);
2811:	int usb_add_hcd(struct usb_hcd *, unsigned int, unsigned long);
2036:	int usb_alloc_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
1094:	long usb_calc_bus_time(int, int, int, int);
2668:	struct usb_hcd *usb_create_hcd(const struct hc_driver *, struct device *, const char *);
2645:	struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *, struct device *, const char *, struct usb_hcd *);
2086:	int usb_free_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, gfp_t);
2702:	struct usb_hcd *usb_get_hcd(struct usb_hcd *);
2515:	void usb_hc_died(struct usb_hcd *);
1862:	int usb_hcd_alloc_bandwidth(struct usb_device *, struct usb_host_config *, struct usb_host_interface *, struct usb_host_interface *);
1211:	int usb_hcd_check_unlink_urb(struct usb_hcd *, struct urb *, int);
1984:	void usb_hcd_disable_endpoint(struct usb_device *, struct usb_host_endpoint *);
1068:	void usb_hcd_end_port_resume(struct usb_bus *, int);
2725:	int usb_hcd_find_raw_port_number(struct usb_hcd *, int);
1783:	void usb_hcd_flush_endpoint(struct usb_device *, struct usb_host_endpoint *);
2129:	int usb_hcd_get_frame_number(struct usb_device *);
1744:	void usb_hcd_giveback_urb(struct usb_hcd *, struct urb *, int);
2474:	irqreturn_t usb_hcd_irq(int, void *);
2717:	int usb_hcd_is_primary_hcd(struct usb_hcd *);
1153:	int usb_hcd_link_urb_to_ep(struct usb_hcd *, struct urb *);
1407:	int usb_hcd_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
3100:	void usb_hcd_platform_shutdown(struct platform_device *);
752:	void usb_hcd_poll_rh_status(struct usb_hcd *);
2003:	void usb_hcd_reset_endpoint(struct usb_device *, struct usb_host_endpoint *);
3112:	int usb_hcd_setup_local_mem(struct usb_hcd *, phys_addr_t, dma_addr_t, size_t);
1046:	void usb_hcd_start_port_resume(struct usb_bus *, int);
1529:	int usb_hcd_submit_urb(struct urb *, gfp_t);
2120:	void usb_hcd_synchronize_unlinks(struct usb_device *);
1611:	int usb_hcd_unlink_urb(struct urb *, int);
1244:	void usb_hcd_unlink_urb_from_ep(struct usb_hcd *, struct urb *);
1360:	void usb_hcd_unmap_urb_for_dma(struct usb_hcd *, struct urb *);
1332:	void usb_hcd_unmap_urb_setup_for_dma(struct usb_hcd *, struct urb *);
2710:	void usb_put_hcd(struct usb_hcd *);
3032:	void usb_remove_hcd(struct usb_hcd *);
1644:	static void __usb_hcd_giveback_urb(struct urb *);
2493:	static void hcd_died_work(struct work_struct *);
982:	static int register_root_hub(struct usb_hcd *);
803:	static void rh_timer_func(struct timer_list *);
1589:	static int unlink1(struct usb_hcd *, struct urb *, int);
1688:	static void usb_giveback_urb_bh(struct tasklet_struct *);
2733:	static int usb_hcd_request_irqs(struct usb_hcd *, unsigned int, unsigned long);
2787:	static void usb_stop_hcd(struct usb_hcd *);

File drivers/usb/core/hub.c:
4582:	int hub_port_debounce(struct usb_hub *, int, bool);
2644:	int usb_authorize_device(struct usb_device *);
431:	int usb_clear_port_feature(struct usb_device *, int, int);
2629:	int usb_deauthorize_device(struct usb_device *);
2011:	bool usb_device_is_owned(struct usb_device *);
148:	int usb_device_supports_lpm(struct usb_device *);
4485:	int usb_disable_lpm(struct usb_device *);
4503:	int usb_disable_ltm(struct usb_device *);
2208:	void usb_disconnect(struct usb_device **);
4491:	void usb_enable_lpm(struct usb_device *);
4509:	void usb_enable_ltm(struct usb_device *);
4625:	void usb_ep0_reinit(struct usb_device *);
6285:	void usb_hub_adjust_deviceremovable(struct usb_device *, struct usb_hub_descriptor *);
1966:	int usb_hub_claim_port(struct usb_device *, unsigned int, struct usb_dev_state *);
5918:	void usb_hub_cleanup(void);
869:	int usb_hub_clear_tt_buffer(struct urb *);
6274:	struct usb_device *usb_hub_find_child(struct usb_device *, int);
5893:	int usb_hub_init(void);
620:	int usb_hub_port_status(struct usb_hub *, int, u16 *, u16 *);
1998:	void usb_hub_release_all_ports(struct usb_device *, struct usb_dev_state *);
1982:	int usb_hub_release_port(struct usb_device *, unsigned int, struct usb_dev_state *);
835:	int usb_hub_set_port_power(struct usb_device *, struct usb_hub *, int, bool);
141:	struct usb_hub *usb_hub_to_struct_hub(struct usb_device *);
684:	void usb_kick_hub_wq(struct usb_device *);
2523:	int usb_new_device(struct usb_device *);
4560:	int usb_port_disable(struct usb_device *);
3130:	int usb_port_is_power_on(struct usb_hub *, unsigned int);
6254:	void usb_queue_reset_device(struct usb_interface *);
999:	int usb_remove_device(struct usb_device *);
6131:	int usb_reset_device(struct usb_device *);
2056:	void usb_set_device_state(struct usb_device *, enum usb_device_state);
4494:	int usb_unlocked_disable_lpm(struct usb_device *);
4500:	void usb_unlocked_enable_lpm(struct usb_device *);
700:	void usb_wakeup_notification(struct usb_device *, unsigned int);
5146:	static int descriptors_changed(struct usb_device *, struct usb_device_descriptor *, struct usb_host_bos *);
2701:	static enum usb_ssp_rate get_port_ssp_rate(struct usb_device *, u32);
1028:	static void hub_activate(struct usb_hub *, enum hub_activation_type);
1715:	static void hub_disconnect(struct usb_interface *);
5715:	static void hub_event(struct work_struct *);
591:	static int hub_ext_port_status(struct usb_hub *, int, int, u16 *, u16 *, u32 *);
936:	static int hub_hub_status(struct usb_hub *, u16 *, u16 *);
1301:	static void hub_init_func2(struct work_struct *);
1308:	static void hub_init_func3(struct work_struct *);
1910:	static int hub_ioctl(struct usb_interface *, unsigned int, void *);
722:	static void hub_irq(struct urb *);
4530:	static int hub_port_disable(struct usb_hub *, int, int);
4718:	static int hub_port_init(struct usb_hub *, struct usb_device *, int, int);
2946:	static int hub_port_reset(struct usb_hub *, int, struct usb_device *, unsigned int, bool);
1367:	static int hub_post_reset(struct usb_interface *);
5099:	static unsigned int hub_power_remaining(struct usb_hub *);
1356:	static int hub_pre_reset(struct usb_interface *);
1783:	static int hub_probe(struct usb_interface *, const struct usb_device_id *);
1319:	static void hub_quiesce(struct usb_hub *, enum hub_quiescing_type);
627:	static void hub_resubmit_irq_urb(struct usb_hub *);
649:	static void hub_retry_irq_urb(struct timer_list *);
786:	static void hub_tt_work(struct work_struct *);
657:	static void kick_hub_wq(struct usb_hub *);
481:	static void led_work(struct work_struct *);
2021:	static void recursively_mark_NOTATTACHED(struct usb_device *);
318:	static void usb_set_lpm_parameters(struct usb_device *);

File drivers/usb/core/message.c:
2285:	int cdc_parse_cdc_header(struct usb_cdc_parsed_header *, struct usb_interface *, u8 *, int);
1811:	void usb_authorize_interface(struct usb_interface *);
363:	int usb_bulk_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1018:	char *usb_cache_string(struct usb_device *, int);
1209:	int usb_clear_halt(struct usb_device *, int);
136:	int usb_control_msg(struct usb_device *, unsigned int, __u8, __u8, __u16, __u16, void *, __u16, int);
263:	int usb_control_msg_recv(struct usb_device *, __u8, __u8, __u8, __u16, __u16, void *, __u16, int, gfp_t);
198:	int usb_control_msg_send(struct usb_device *, __u8, __u8, __u8, __u16, __u16, const void *, __u16, int, gfp_t);
1789:	void usb_deauthorize_interface(struct usb_interface *);
1394:	void usb_disable_device(struct usb_device *, int);
1284:	void usb_disable_endpoint(struct usb_device *, unsigned int, bool);
1343:	void usb_disable_interface(struct usb_device *, struct usb_interface *, bool);
2249:	int usb_driver_set_configuration(struct usb_device *, int);
1455:	void usb_enable_endpoint(struct usb_device *, struct usb_host_endpoint *, bool);
1479:	void usb_enable_interface(struct usb_device *, struct usb_interface *, bool);
780:	int usb_get_descriptor(struct usb_device *, unsigned char, unsigned char, void *, int);
1061:	int usb_get_device_descriptor(struct usb_device *, unsigned int);
1128:	int usb_get_status(struct usb_device *, int, int, int, void *);
324:	int usb_interrupt_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1693:	int usb_reset_configuration(struct usb_device *);
1319:	void usb_reset_endpoint(struct usb_device *, unsigned int);
1958:	int usb_set_configuration(struct usb_device *, int);
1528:	int usb_set_interface(struct usb_device *, int, int);
1086:	int usb_set_isoch_delay(struct usb_device *);
720:	void usb_sg_cancel(struct usb_sg_request *);
501:	int usb_sg_init(struct usb_sg_request *, struct usb_device *, unsigned int, unsigned int, struct scatterlist *, int, size_t, gfp_t);
650:	void usb_sg_wait(struct usb_sg_request *);
967:	int usb_string(struct usb_device *, int, char *, size_t);
1896:	static void __usb_queue_reset_device(struct work_struct *);
2196:	static void driver_set_config_work(struct work_struct *);
404:	static void sg_complete(struct urb *);
34:	static void usb_api_blocking_completion(struct urb *);
1361:	static void usb_disable_device_endpoints(struct usb_device *, int);
832:	static int usb_get_string(struct usb_device *, unsigned short, unsigned char, void *, int);
1822:	static int usb_if_uevent(struct device *, struct kobj_uevent_env *);
1772:	static void usb_release_interface(struct device *);
49:	static int usb_start_wait_urb(struct urb *, int, int *);
872:	static int usb_string_sub(struct usb_device *, unsigned int, unsigned int, unsigned char *);

File drivers/usb/core/notify.c:
60:	void usb_notify_add_bus(struct usb_bus *);
49:	void usb_notify_add_device(struct usb_device *);
65:	void usb_notify_remove_bus(struct usb_bus *);
54:	void usb_notify_remove_device(struct usb_device *);
29:	void usb_register_notify(struct notifier_block *);
42:	void usb_unregister_notify(struct notifier_block *);

File drivers/usb/core/of.c:
25:	struct device_node *usb_of_get_device_node(struct usb_device *, int);
92:	struct device_node *usb_of_get_interface_node(struct usb_device *, u8, u8);
57:	bool usb_of_has_combined_node(struct usb_device *);

File drivers/usb/core/phy.c:
49:	struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *);
154:	int usb_phy_roothub_calibrate(struct usb_phy_roothub *);
105:	int usb_phy_roothub_exit(struct usb_phy_roothub *);
78:	int usb_phy_roothub_init(struct usb_phy_roothub *);
202:	void usb_phy_roothub_power_off(struct usb_phy_roothub *);
175:	int usb_phy_roothub_power_on(struct usb_phy_roothub *);
227:	int usb_phy_roothub_resume(struct device *, struct usb_phy_roothub *);
126:	int usb_phy_roothub_set_mode(struct usb_phy_roothub *, enum phy_mode);
214:	int usb_phy_roothub_suspend(struct device *, struct usb_phy_roothub *);

File drivers/usb/core/port.c:
669:	int usb_hub_create_port_device(struct usb_hub *, int);
759:	void usb_hub_remove_port_device(struct usb_hub *, int);
138:	static ssize_t connect_type_show(struct device *, struct device_attribute *, char *);
643:	static int connector_bind(struct device *, struct device *, void *);
658:	static void connector_unbind(struct device *, struct device *, void *);
47:	static ssize_t disable_show(struct device *, struct device_attribute *, char *);
82:	static ssize_t disable_store(struct device *, struct device_attribute *, const char *, size_t);
21:	static ssize_t early_stop_show(struct device *, struct device_attribute *, char *);
29:	static ssize_t early_stop_store(struct device *, struct device_attribute *, const char *, size_t);
502:	static void link_peers_report(struct usb_port *, struct usb_port *);
129:	static ssize_t location_show(struct device *, struct device_attribute *, char *);
557:	static int match_location(struct usb_device *, void *);
163:	static ssize_t over_current_count_show(struct device *, struct device_attribute *, char *);
172:	static ssize_t quirks_show(struct device *, struct device_attribute *, char *);
180:	static ssize_t quirks_store(struct device *, struct device_attribute *, const char *, size_t);
194:	static ssize_t usb3_lpm_permit_show(struct device *, struct device_attribute *, char *);
215:	static ssize_t usb3_lpm_permit_store(struct device *, struct device_attribute *, const char *, size_t);
294:	static void usb_port_device_release(struct device *);
406:	static void usb_port_shutdown(struct device *);

File drivers/usb/core/quirks.c:
709:	void usb_detect_interface_quirks(struct usb_device *);
681:	void usb_detect_quirks(struct usb_device *);
579:	bool usb_endpoint_is_ignored(struct usb_device *, struct usb_host_interface *, struct usb_endpoint_descriptor *);
722:	void usb_release_quirk_list(void);
28:	static int quirks_param_set(const char *, const struct kernel_param *);
639:	static u32 usb_detect_static_quirks(struct usb_device *, const struct usb_device_id *);

File drivers/usb/core/sysfs.c:
1021:	int usb_create_sysfs_dev_files(struct usb_device *);
1241:	void usb_create_sysfs_intf_files(struct usb_interface *);
1050:	void usb_remove_sysfs_dev_files(struct usb_device *);
1258:	void usb_remove_sysfs_intf_files(struct usb_interface *);
914:	static ssize_t authorized_default_show(struct device *, struct device_attribute *, char *);
925:	static ssize_t authorized_default_store(struct device *, struct device_attribute *, const char *, size_t);
727:	static ssize_t authorized_show(struct device *, struct device_attribute *, char *);
739:	static ssize_t authorized_store(struct device *, struct device_attribute *, const char *, size_t);
265:	static ssize_t avoid_reset_quirk_show(struct device *, struct device_attribute *, char *);
274:	static ssize_t avoid_reset_quirk_store(struct device *, struct device_attribute *, const char *, size_t);
1095:	static ssize_t bAlternateSetting_show(struct device *, struct device_attribute *, char *);
91:	static ssize_t bConfigurationValue_show(struct device *, struct device_attribute *, char *);
93:	static ssize_t bConfigurationValue_store(struct device *, struct device_attribute *, const char *, size_t);
719:	static ssize_t bDeviceClass_show(struct device *, struct device_attribute *, char *);
721:	static ssize_t bDeviceProtocol_show(struct device *, struct device_attribute *, char *);
720:	static ssize_t bDeviceSubClass_show(struct device *, struct device_attribute *, char *);
1097:	static ssize_t bInterfaceClass_show(struct device *, struct device_attribute *, char *);
1094:	static ssize_t bInterfaceNumber_show(struct device *, struct device_attribute *, char *);
1099:	static ssize_t bInterfaceProtocol_show(struct device *, struct device_attribute *, char *);
1098:	static ssize_t bInterfaceSubClass_show(struct device *, struct device_attribute *, char *);
723:	static ssize_t bMaxPacketSize0_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t bMaxPower_show(struct device *, struct device_attribute *, char *);
722:	static ssize_t bNumConfigurations_show(struct device *, struct device_attribute *, char *);
1096:	static ssize_t bNumEndpoints_show(struct device *, struct device_attribute *, char *);
49:	static ssize_t bNumInterfaces_show(struct device *, struct device_attribute *, char *);
705:	static ssize_t bcdDevice_show(struct device *, struct device_attribute *, char *);
50:	static ssize_t bmAttributes_show(struct device *, struct device_attribute *, char *);
203:	static ssize_t busnum_show(struct device *, struct device_attribute *, char *);
71:	static ssize_t configuration_show(struct device *, struct device_attribute *, char *);
829:	static umode_t dev_string_attrs_are_visible(struct kobject *, struct attribute *, int);
213:	static ssize_t devnum_show(struct device *, struct device_attribute *, char *);
223:	static ssize_t devpath_show(struct device *, struct device_attribute *, char *);
113:	static ssize_t devspec_show(struct device *, struct device_attribute *, char *);
1075:	static ssize_t iad_bFirstInterface_show(struct device *, struct device_attribute *, char *);
1077:	static ssize_t iad_bFunctionClass_show(struct device *, struct device_attribute *, char *);
1079:	static ssize_t iad_bFunctionProtocol_show(struct device *, struct device_attribute *, char *);
1078:	static ssize_t iad_bFunctionSubClass_show(struct device *, struct device_attribute *, char *);
1076:	static ssize_t iad_bInterfaceCount_show(struct device *, struct device_attribute *, char *);
704:	static ssize_t idProduct_show(struct device *, struct device_attribute *, char *);
703:	static ssize_t idVendor_show(struct device *, struct device_attribute *, char *);
955:	static ssize_t interface_authorized_default_show(struct device *, struct device_attribute *, char *);
971:	static ssize_t interface_authorized_default_store(struct device *, struct device_attribute *, const char *, size_t);
1163:	static ssize_t interface_authorized_show(struct device *, struct device_attribute *, char *);
1174:	static ssize_t interface_authorized_store(struct device *, struct device_attribute *, const char *, size_t);
1101:	static ssize_t interface_show(struct device *, struct device_attribute *, char *);
1219:	static umode_t intf_assoc_attrs_are_visible(struct kobject *, struct attribute *, int);
305:	static ssize_t ltm_capable_show(struct device *, struct device_attribute *, char *);
142:	static ssize_t manufacturer_show(struct device *, struct device_attribute *, char *);
245:	static ssize_t maxchild_show(struct device *, struct device_attribute *, char *);
1115:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
141:	static ssize_t product_show(struct device *, struct device_attribute *, char *);
255:	static ssize_t quirks_show(struct device *, struct device_attribute *, char *);
862:	static ssize_t read_descriptors(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
759:	static ssize_t remove_store(struct device *, struct device_attribute *, const char *, size_t);
183:	static ssize_t rx_lanes_show(struct device *, struct device_attribute *, char *);
143:	static ssize_t serial_show(struct device *, struct device_attribute *, char *);
145:	static ssize_t speed_show(struct device *, struct device_attribute *, char *);
1142:	static ssize_t supports_autosuspend_show(struct device *, struct device_attribute *, char *);
193:	static ssize_t tx_lanes_show(struct device *, struct device_attribute *, char *);
295:	static ssize_t urbnum_show(struct device *, struct device_attribute *, char *);
233:	static ssize_t version_show(struct device *, struct device_attribute *, char *);

File drivers/usb/core/urb.c:
71:	struct urb *usb_alloc_urb(int, gfp_t);
1048:	int usb_anchor_empty(struct usb_anchor *);
953:	void usb_anchor_resume_wakeups(struct usb_anchor *);
939:	void usb_anchor_suspend_wakeups(struct usb_anchor *);
127:	void usb_anchor_urb(struct urb *, struct usb_anchor *);
803:	void usb_block_urb(struct urb *);
94:	void usb_free_urb(struct urb *);
993:	struct urb *usb_get_from_anchor(struct usb_anchor *);
111:	struct urb *usb_get_urb(struct urb *);
44:	void usb_init_urb(struct urb *);
823:	void usb_kill_anchored_urbs(struct usb_anchor *);
714:	void usb_kill_urb(struct urb *);
204:	int usb_pipe_type_check(struct usb_device *, unsigned int);
861:	void usb_poison_anchored_urbs(struct usb_anchor *);
761:	void usb_poison_urb(struct urb *);
1020:	void usb_scuttle_anchored_urbs(struct usb_anchor *);
368:	int usb_submit_urb(struct urb *, gfp_t);
165:	void usb_unanchor_urb(struct urb *);
920:	void usb_unlink_anchored_urbs(struct usb_anchor *);
675:	int usb_unlink_urb(struct urb *);
895:	void usb_unpoison_anchored_urbs(struct usb_anchor *);
782:	void usb_unpoison_urb(struct urb *);
225:	int usb_urb_ep_type_check(const struct urb *);
974:	int usb_wait_anchor_empty_timeout(struct usb_anchor *, unsigned int);
150:	static void __usb_unanchor_urb(struct urb *, struct usb_anchor *);

File drivers/usb/core/usb.c:
880:	int __usb_get_extra_descriptor(char *, unsigned int, unsigned char, void **, size_t);
932:	void *usb_alloc_coherent(struct usb_device *, size_t, gfp_t, dma_addr_t *);
574:	struct usb_device *usb_alloc_dev(struct usb_device *, struct usb_bus *, unsigned int);
307:	struct usb_host_interface *usb_altnum_to_altsetting(const struct usb_interface *, unsigned int);
58:	int usb_disabled(void);
220:	struct usb_host_interface *usb_find_alt_setting(struct usb_host_config *, unsigned int, unsigned int);
134:	int usb_find_common_endpoints(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
180:	int usb_find_common_endpoints_reverse(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
351:	struct usb_interface *usb_find_interface(struct usb_driver *, int);
393:	int usb_for_each_dev(void *, int (*)(struct usb_device *, void *));
952:	void usb_free_coherent(struct usb_device *, size_t, void *, dma_addr_t);
868:	int usb_get_current_frame_number(struct usb_device *);
698:	struct usb_device *usb_get_dev(struct usb_device *);
736:	struct usb_interface *usb_get_intf(struct usb_interface *);
271:	struct usb_interface *usb_ifnum_to_if(const struct usb_device *, unsigned int);
773:	struct device *usb_intf_get_dma_device(struct usb_interface *);
821:	int usb_lock_device_for_reset(struct usb_device *, const struct usb_interface *);
713:	void usb_put_dev(struct usb_device *);
752:	void usb_put_intf(struct usb_interface *);
373:	static int __each_dev(struct device *, void *);
326:	static int __find_interface(struct device *, const void *);
966:	static int usb_bus_notify(struct notifier_block *, unsigned long, void *);
426:	static int usb_dev_uevent(struct device *, struct kobj_uevent_env *);
508:	static char *usb_devnode(struct device *, umode_t *, kuid_t *, kgid_t *);
1062:	static void usb_exit(void);
1007:	static int usb_init(void);
408:	static void usb_release_dev(struct device *);

File drivers/usb/host/xhci-dbg.c:
22:	void xhci_dbg_trace(struct xhci_hcd *, void (*)(struct va_format *), const char *, ...);
13:	char *xhci_get_slot_state(struct xhci_hcd *, struct xhci_container_ctx *);

File drivers/usb/host/xhci-debugfs.c:
443:	void xhci_debugfs_create_endpoint(struct xhci_hcd *, struct xhci_virt_device *, int);
716:	void xhci_debugfs_create_root(void);
591:	void xhci_debugfs_create_slot(struct xhci_hcd *, int);
566:	void xhci_debugfs_create_stream_files(struct xhci_hcd *, struct xhci_virt_device *, int);
704:	void xhci_debugfs_exit(struct xhci_hcd *);
652:	void xhci_debugfs_init(struct xhci_hcd *);
470:	void xhci_debugfs_remove_endpoint(struct xhci_hcd *, struct xhci_virt_device *, int);
721:	void xhci_debugfs_remove_root(void);
611:	void xhci_debugfs_remove_slot(struct xhci_hcd *, int);
320:	static int xhci_context_open(struct inode *, struct file *);
140:	static void xhci_debugfs_extcap_regset(struct xhci_hcd *, int, const struct debugfs_reg32 *, size_t, const char *);
114:	static void xhci_debugfs_regset(struct xhci_hcd *, u32, const struct debugfs_reg32 *, size_t, struct dentry *, const char *, ...);
304:	static int xhci_device_name_show(struct seq_file *, void *);
278:	static int xhci_endpoint_context_show(struct seq_file *, void *);
357:	static int xhci_port_open(struct inode *, struct file *);
362:	static ssize_t xhci_port_write(struct file *, const char *, size_t, loff_t *);
345:	static int xhci_portsc_show(struct seq_file *, void *);
186:	static int xhci_ring_cycle_show(struct seq_file *, void *);
175:	static int xhci_ring_dequeue_show(struct seq_file *, void *);
164:	static int xhci_ring_enqueue_show(struct seq_file *, void *);
235:	static int xhci_ring_open(struct inode *, struct file *);
214:	static int xhci_ring_trb_show(struct seq_file *, void *);
258:	static int xhci_slot_context_show(struct seq_file *, void *);
564:	static int xhci_stream_context_array_open(struct inode *, struct file *);
537:	static int xhci_stream_context_array_show(struct seq_file *, void *);
499:	static int xhci_stream_id_open(struct inode *, struct file *);
486:	static int xhci_stream_id_show(struct seq_file *, void *);
504:	static ssize_t xhci_stream_id_write(struct file *, const char *, size_t, loff_t *);

File drivers/usb/host/xhci-ext-caps.c:
84:	int xhci_ext_cap_init(struct xhci_hcd *);
23:	static void xhci_intel_unregister_pdev(void *);

File drivers/usb/host/xhci-hub.c:
460:	int xhci_find_slot_id_by_port(struct usb_hcd *, struct xhci_hcd *, u16);
655:	struct xhci_hub *xhci_get_rhub(struct usb_hcd *);
1196:	int xhci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
1635:	int xhci_hub_status_data(struct usb_hcd *, char *);
444:	u32 xhci_port_state_to_neutral(u32);
562:	void xhci_ring_device(struct xhci_hcd *, int);
783:	void xhci_set_link_state(struct xhci_hcd *, struct xhci_port *, u32);
827:	void xhci_test_and_clear_bit(struct xhci_hcd *, struct xhci_port *, u32);
720:	static int xhci_enter_test_mode(struct xhci_hcd *, u16, u16, unsigned long *);
764:	static int xhci_exit_test_mode(struct xhci_hcd *);
669:	static void xhci_set_port_power(struct xhci_hcd *, struct usb_hcd *, u16, bool, unsigned long *);
800:	static void xhci_set_remote_wake_mask(struct xhci_hcd *, struct xhci_port *, u16);
489:	static int xhci_stop_device(struct xhci_hcd *, int, int);

File drivers/usb/host/xhci-mem.c:
1733:	struct xhci_command *xhci_alloc_command(struct xhci_hcd *, bool, gfp_t);
1759:	struct xhci_command *xhci_alloc_command_with_ctx(struct xhci_hcd *, bool, gfp_t);
468:	struct xhci_container_ctx *xhci_alloc_container_ctx(struct xhci_hcd *, int, gfp_t);
1792:	int xhci_alloc_erst(struct xhci_hcd *, struct xhci_ring *, struct xhci_erst *, gfp_t);
603:	struct xhci_stream_info *xhci_alloc_stream_info(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, gfp_t);
820:	int xhci_alloc_tt_info(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_tt *, gfp_t);
964:	int xhci_alloc_virt_device(struct xhci_hcd *, int, struct usb_device *, gfp_t);
1534:	void xhci_clear_endpoint_bw_info(struct xhci_bw_info *);
1037:	void xhci_copy_ep0_dequeue_into_input_ctx(struct xhci_hcd *, struct usb_device *);
584:	struct xhci_ring *xhci_dma_to_transfer_ring(struct xhci_virt_ep *, u64);
1602:	void xhci_endpoint_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *, unsigned int);
1416:	int xhci_endpoint_init(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_host_endpoint *, gfp_t);
1515:	void xhci_endpoint_zero(struct xhci_hcd *, struct xhci_virt_device *, struct usb_host_endpoint *);
1783:	void xhci_free_command(struct xhci_hcd *, struct xhci_command *);
494:	void xhci_free_container_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
411:	void xhci_free_endpoint_ring(struct xhci_hcd *, struct xhci_virt_device *, unsigned int);
1822:	void xhci_free_erst(struct xhci_hcd *, struct xhci_erst *);
758:	void xhci_free_stream_info(struct xhci_hcd *, struct xhci_stream_info *);
865:	void xhci_free_virt_device(struct xhci_hcd *, int);
522:	struct xhci_ep_ctx *xhci_get_ep_ctx(struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
503:	struct xhci_input_control_ctx *xhci_get_input_control_ctx(struct xhci_container_ctx *);
512:	struct xhci_slot_ctx *xhci_get_slot_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
296:	void xhci_initialize_ring_info(struct xhci_ring *, unsigned int);
1835:	void xhci_mem_cleanup(struct xhci_hcd *);
2378:	int xhci_mem_init(struct xhci_hcd *, gfp_t);
371:	struct xhci_ring *xhci_ring_alloc(struct xhci_hcd *, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
423:	int xhci_ring_expansion(struct xhci_hcd *, struct xhci_ring *, unsigned int, gfp_t);
280:	void xhci_ring_free(struct xhci_hcd *, struct xhci_ring *);
1088:	int xhci_setup_addressable_virt_dev(struct xhci_hcd *, struct usb_device *);
745:	void xhci_setup_no_streams_ep_input_ctx(struct xhci_ep_ctx *, struct xhci_virt_ep *);
721:	void xhci_setup_streams_ep_input_ctx(struct xhci_hcd *, struct xhci_ep_ctx *, struct xhci_stream_info *);
1628:	void xhci_slot_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *);
1544:	void xhci_update_bw_info(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_input_control_ctx *, struct xhci_virt_device *);
1778:	void xhci_urb_free_priv(struct urb_priv *);
1645:	static int scratchpad_alloc(struct xhci_hcd *, gfp_t);
321:	static int xhci_alloc_segments_for_ring(struct xhci_hcd *, struct xhci_segment **, struct xhci_segment **, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
928:	static void xhci_free_virt_devices_depth_first(struct xhci_hcd *, int);
28:	static struct xhci_segment *xhci_segment_alloc(struct xhci_hcd *, unsigned int, unsigned int, gfp_t);
2090:	static void xhci_set_hc_event_deq(struct xhci_hcd *);
2272:	static int xhci_setup_port_arrays(struct xhci_hcd *, gfp_t);
1932:	static int xhci_test_trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, struct xhci_segment *, char *, int);
219:	static int xhci_update_stream_segment_mapping(struct xarray *, struct xhci_ring *, struct xhci_segment *, struct xhci_segment *, gfp_t);

File drivers/usb/host/xhci-mvebu.h:
22:	static int xhci_mvebu_a3700_init_quirk(struct usb_hcd *);
17:	static int xhci_mvebu_mbus_init_quirk(struct usb_hcd *);

File drivers/usb/host/xhci-plat.c:
536:	static void xhci_plat_exit(void);
529:	static int xhci_plat_init(void);
176:	static int xhci_plat_probe(struct platform_device *);
77:	static void xhci_plat_quirks(struct device *, struct xhci_hcd *);
390:	static int xhci_plat_remove(struct platform_device *);
90:	static int xhci_plat_setup(struct usb_hcd *);
102:	static int xhci_plat_start(struct usb_hcd *);

File drivers/usb/host/xhci-rcar.h:
24:	static int xhci_rcar_init_quirk(struct usb_hcd *);
29:	static int xhci_rcar_resume_quirk(struct usb_hcd *);
20:	static void xhci_rcar_start(struct usb_hcd *);

File drivers/usb/host/xhci-ring.c:
3281:	unsigned int count_trbs(u64, u64);
158:	void inc_deq(struct xhci_hcd *, struct xhci_ring *);
2020:	struct xhci_segment *trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, bool);
1555:	void xhci_cleanup_command_queue(struct xhci_hcd *);
1563:	void xhci_handle_command_timeout(struct work_struct *);
1220:	void xhci_hc_died(struct xhci_hcd *);
3015:	irqreturn_t xhci_irq(struct usb_hcd *);
2124:	int xhci_is_vendor_info_code(struct xhci_hcd *, unsigned int);
3103:	irqreturn_t xhci_msi_irq(int, void *);
4305:	int xhci_queue_address_device(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, enum xhci_setup_dev);
3519:	int xhci_queue_bulk_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4330:	int xhci_queue_configure_endpoint(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3680:	int xhci_queue_ctrl_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4341:	int xhci_queue_evaluate_context(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3391:	int xhci_queue_intr_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4170:	int xhci_queue_isoc_tx_prepare(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4321:	int xhci_queue_reset_device(struct xhci_hcd *, struct xhci_command *, u32);
4366:	int xhci_queue_reset_ep(struct xhci_hcd *, struct xhci_command *, int, unsigned int, enum xhci_ep_reset_type);
4297:	int xhci_queue_slot_control(struct xhci_hcd *, struct xhci_command *, u32, u32);
4354:	int xhci_queue_stop_endpoint(struct xhci_hcd *, struct xhci_command *, int, unsigned int, int);
4314:	int xhci_queue_vendor_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32);
301:	void xhci_ring_cmd_db(struct xhci_hcd *);
478:	void xhci_ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
426:	void xhci_ring_ep_doorbell(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
69:	dma_addr_t xhci_trb_virt_to_dma(struct xhci_segment *, union xhci_trb *);
529:	struct xhci_ring *xhci_triad_to_transfer_ring(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
2138:	static int finish_td(struct xhci_hcd *, struct xhci_virt_ep *, struct xhci_ring *, struct xhci_td *, u32);
1641:	static void handle_cmd_completion(struct xhci_hcd *, struct xhci_event_cmd *);
3140:	static int prepare_ring(struct xhci_hcd *, struct xhci_ring *, u32, unsigned int, gfp_t);
3232:	static int prepare_transfer(struct xhci_hcd *, struct xhci_virt_device *, unsigned int, unsigned int, unsigned int, struct urb *, unsigned int, gfp_t);
4255:	static int queue_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32, bool);
3117:	static void queue_trb(struct xhci_hcd *, struct xhci_ring *, bool, u32, u32, u32, u32);
453:	static void ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
485:	static struct xhci_virt_ep *xhci_get_virt_ep(struct xhci_hcd *, unsigned int, unsigned int);
1467:	static void xhci_handle_cmd_config_ep(struct xhci_hcd *, int, u32);
1059:	static void xhci_handle_cmd_stop_ep(struct xhci_hcd *, int, union xhci_trb *, u32);
898:	static int xhci_handle_halted_endpoint(struct xhci_hcd *, struct xhci_virt_ep *, struct xhci_td *, enum xhci_ep_reset_type);
331:	static void xhci_handle_stopped_cmd_ring(struct xhci_hcd *, struct xhci_command *);
948:	static int xhci_invalidate_cancelled_tds(struct xhci_virt_ep *);
1145:	static void xhci_kill_ring_urbs(struct xhci_hcd *, struct xhci_ring *);
801:	static int xhci_td_cleanup(struct xhci_hcd *, struct xhci_td *, struct xhci_ring *, int);
767:	static void xhci_unmap_td_bounce_buffer(struct xhci_hcd *, struct xhci_ring *, struct xhci_td *);
2979:	static void xhci_update_erst_dequeue(struct xhci_hcd *, union xhci_trb *);

File drivers/usb/host/xhci-trace.h:
38:	static void trace_xhci_dbg_address(struct va_format *);
58:	static void trace_xhci_dbg_cancel_urb(struct va_format *);
43:	static void trace_xhci_dbg_context_change(struct va_format *);
63:	static void trace_xhci_dbg_init(struct va_format *);
48:	static void trace_xhci_dbg_quirks(struct va_format *);
53:	static void trace_xhci_dbg_reset_ep(struct va_format *);
68:	static void trace_xhci_dbg_ring_expansion(struct va_format *);

File drivers/usb/host/xhci.c:
2003:	int xhci_add_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
4082:	int xhci_alloc_dev(struct usb_hcd *, struct usb_device *);
3039:	int xhci_check_bandwidth(struct usb_hcd *, struct usb_device *);
4011:	int xhci_disable_slot(struct xhci_hcd *, u32);
1920:	int xhci_drop_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
4371:	int xhci_find_raw_port_number(struct usb_hcd *, int);
3770:	void xhci_free_device_endpoint_resources(struct xhci_hcd *, struct xhci_virt_device *, bool);
5295:	int xhci_gen_setup(struct usb_hcd *, xhci_get_quirks_t);
1477:	unsigned int xhci_get_endpoint_index(struct usb_endpoint_descriptor *);
110:	int xhci_halt(struct xhci_hcd *);
68:	int xhci_handshake(void *, u32, u32, u64);
5497:	void xhci_init_driver(struct hc_driver *, const struct xhci_driver_overrides *);
1514:	unsigned int xhci_last_valid_endpoint(u32);
86:	void xhci_quiesce(struct xhci_hcd *);
170:	int xhci_reset(struct xhci_hcd *, u64);
3138:	void xhci_reset_bandwidth(struct usb_hcd *, struct usb_device *);
662:	int xhci_run(struct usb_hcd *);
793:	void xhci_shutdown(struct usb_hcd *);
133:	int xhci_start(struct xhci_hcd *);
5135:	int xhci_update_hub_device(struct usb_hcd *, struct usb_device *, struct usb_tt *, gfp_t);
2806:	void xhci_update_tt_active_eps(struct xhci_hcd *, struct xhci_virt_device *, int);
2732:	static void xhci_add_ep_to_interval_table(struct xhci_hcd *, struct xhci_bw_info *, struct xhci_interval_bw_table *, struct usb_device *, struct xhci_virt_ep *, struct xhci_tt_bw_info *);
4355:	static int xhci_address_device(struct usb_hcd *, struct usb_device *);
3511:	static int xhci_alloc_streams(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
1569:	static int xhci_check_maxpacket(struct xhci_hcd *, unsigned int, unsigned int, struct urb *, gfp_t);
5409:	static void xhci_clear_tt_buffer_complete(struct usb_hcd *, struct usb_host_endpoint *);
2919:	static int xhci_configure_endpoint(struct xhci_hcd *, struct usb_device *, struct xhci_command *, bool, bool);
5123:	static int xhci_disable_usb3_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3810:	static int xhci_discover_or_reset_device(struct usb_hcd *, struct usb_device *);
2668:	static void xhci_drop_ep_from_interval_table(struct xhci_hcd *, struct xhci_bw_info *, struct xhci_interval_bw_table *, struct usb_device *, struct xhci_virt_ep *, struct xhci_tt_bw_info *);
4360:	static int xhci_enable_device(struct usb_hcd *, struct usb_device *);
5117:	static int xhci_enable_usb3_lpm_timeout(struct usb_hcd *, struct usb_device *, enum usb3_link_state);
3175:	static void xhci_endpoint_disable(struct usb_hcd *, struct usb_host_endpoint *);
3227:	static void xhci_endpoint_reset(struct usb_hcd *, struct usb_host_endpoint *);
3972:	static void xhci_free_dev(struct usb_hcd *, struct usb_device *);
2312:	static void xhci_free_host_resources(struct xhci_hcd *, struct xhci_input_control_ctx *);
3678:	static int xhci_free_streams(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint **, unsigned int, gfp_t);
5237:	static int xhci_get_frame(struct usb_hcd *);
5562:	static void xhci_hcd_fini(void);
5529:	static int xhci_hcd_init(void);
5257:	static void xhci_hcd_init_usb3_data(struct xhci_hcd *, struct usb_hcd *);
1434:	static int xhci_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
614:	static int xhci_run_finished(struct xhci_hcd *);
5106:	static int xhci_set_usb2_hardware_lpm(struct usb_hcd *, struct usb_device *, int);
4171:	static int xhci_setup_device(struct usb_hcd *, struct usb_device *, enum xhci_setup_dev);
732:	static void xhci_stop(struct usb_hcd *);
1451:	static void xhci_unmap_urb_for_dma(struct usb_hcd *, struct urb *);
5112:	static int xhci_update_device(struct usb_hcd *, struct usb_device *);
1786:	static int xhci_urb_dequeue(struct usb_hcd *, struct urb *, int);
1643:	static int xhci_urb_enqueue(struct usb_hcd *, struct urb *, gfp_t);

File drivers/usb/host/xhci.h:
1982:	static bool xhci_hcd_is_usb3(struct usb_hcd *);

File drivers/usb/phy/of.c:
28:	enum usb_phy_interface of_usb_get_phy_mode(struct device_node *);

File drivers/usb/phy/phy-generic.c:
135:	int usb_gen_phy_init(struct usb_phy *);
157:	void usb_gen_phy_shutdown(struct usb_phy *);
206:	int usb_phy_gen_create_phy(struct device *, struct usb_phy_generic *);
33:	struct platform_device *usb_phy_generic_register(void);
40:	void usb_phy_generic_unregister(struct platform_device *);
101:	static irqreturn_t nop_gpio_vbus_thread(int, void *);
192:	static int nop_set_host(struct usb_otg *, struct usb_bus *);
173:	static int nop_set_peripheral(struct usb_otg *, struct usb_gadget *);
46:	static int nop_set_suspend(struct usb_phy *, int);
364:	static void usb_phy_generic_exit(void);
358:	static int usb_phy_generic_init(void);
286:	static int usb_phy_generic_probe(struct platform_device *);
333:	static int usb_phy_generic_remove(struct platform_device *);

File drivers/usb/phy/phy-ulpi-viewport.c:
29:	static int ulpi_viewport_read(struct usb_phy *, u32);
47:	static int ulpi_viewport_write(struct usb_phy *, u32, u32);

File drivers/usb/phy/phy-ulpi.c:
282:	struct usb_phy *devm_otg_ulpi_create(struct device *, struct usb_phy_io_ops *, unsigned int);
259:	struct usb_phy *otg_ulpi_create(struct usb_phy_io_ops *, unsigned int);
168:	static int ulpi_init(struct usb_phy *);
199:	static int ulpi_set_host(struct usb_otg *, struct usb_bus *);
225:	static int ulpi_set_vbus(struct usb_otg *, bool);

File drivers/usb/phy/phy.c:
464:	struct usb_phy *devm_usb_get_phy(struct device *, enum usb_phy_type);
535:	struct usb_phy *devm_usb_get_phy_by_node(struct device *, struct device_node *, struct notifier_block *);
594:	struct usb_phy *devm_usb_get_phy_by_phandle(struct device *, const char *, u8);
627:	void devm_usb_put_phy(struct device *, struct usb_phy *);
664:	int usb_add_phy(struct usb_phy *, enum usb_phy_type);
715:	int usb_add_phy_dev(struct usb_phy *);
493:	struct usb_phy *usb_get_phy(enum usb_phy_type);
280:	void usb_phy_get_charger_current(struct usb_phy *, unsigned int *, unsigned int *);
231:	void usb_phy_set_charger_current(struct usb_phy *, unsigned int);
317:	void usb_phy_set_charger_state(struct usb_phy *, enum usb_charger_state);
766:	void usb_phy_set_event(struct usb_phy *, unsigned long);
644:	void usb_put_phy(struct usb_phy *);
748:	void usb_remove_phy(struct usb_phy *);
177:	static void __usb_phy_get_charger_type(struct usb_phy *);
349:	static int devm_usb_phy_match(struct device *, void *, void *);
333:	static void devm_usb_phy_release(struct device *, void *);
340:	static void devm_usb_phy_release2(struct device *, void *);
364:	static int usb_add_extcon(struct usb_phy *);
208:	static int usb_phy_get_charger_type(struct notifier_block *, unsigned long, void *);
123:	static void usb_phy_notify_charger_work(struct work_struct *);
148:	static int usb_phy_uevent(struct device *, struct kobj_uevent_env *);

File drivers/usb/roles/class.c:
149:	struct usb_role_switch *fwnode_usb_role_switch_get(struct fwnode_handle *);
220:	const char *usb_role_string(enum usb_role);
187:	struct usb_role_switch *usb_role_switch_find_by_fwnode(const struct fwnode_handle *);
126:	struct usb_role_switch *usb_role_switch_get(struct device *);
388:	void *usb_role_switch_get_drvdata(struct usb_role_switch *);
70:	enum usb_role usb_role_switch_get_role(struct usb_role_switch *);
170:	void usb_role_switch_put(struct usb_role_switch *);
318:	struct usb_role_switch *usb_role_switch_register(struct device *, const struct usb_role_switch_desc *);
378:	void usb_role_switch_set_drvdata(struct usb_role_switch *, void *);
42:	int usb_role_switch_set_role(struct usb_role_switch *, enum usb_role);
366:	void usb_role_switch_unregister(struct usb_role_switch *);
230:	static ssize_t role_show(struct device *, struct device_attribute *, char *);
238:	static ssize_t role_store(struct device *, struct device_attribute *, const char *, size_t);
203:	static umode_t usb_role_switch_is_visible(struct kobject *, struct attribute *, int);
90:	static void *usb_role_switch_match(const struct fwnode_handle *, const char *, void *);
289:	static void usb_role_switch_release(struct device *);
278:	static int usb_role_switch_uevent(struct device *, struct kobj_uevent_env *);
401:	static void usb_roles_exit(void);
394:	static int usb_roles_init(void);

File drivers/usb/storage/initializers.c:
34:	int usb_stor_euscsi_init(struct us_data *);
84:	int usb_stor_huawei_e220_init(struct us_data *);
51:	int usb_stor_ucr61s2b_init(struct us_data *);

File drivers/usb/storage/option_ms.c:
125:	int option_ms_init(struct us_data *);

File drivers/usb/storage/protocol.c:
121:	unsigned int usb_stor_access_xfer_buf(unsigned char *, unsigned int, struct scsi_cmnd *, struct scatterlist **, unsigned int *, enum xfer_buf_dir);
45:	void usb_stor_pad12_command(struct scsi_cmnd *, struct us_data *);
169:	void usb_stor_set_xfer_buf(unsigned char *, unsigned int, struct scsi_cmnd *);
104:	void usb_stor_transparent_scsi_command(struct scsi_cmnd *, struct us_data *);
61:	void usb_stor_ufi_command(struct scsi_cmnd *, struct us_data *);

File drivers/usb/storage/scsiglue.c:
663:	void usb_stor_host_template_init(struct scsi_host_template *, const char *, struct module *);
500:	void usb_stor_report_bus_reset(struct us_data *);
483:	void usb_stor_report_device_reset(struct us_data *);
467:	static int bus_reset(struct scsi_cmnd *);
409:	static int command_abort(struct scsi_cmnd *);
451:	static int device_reset(struct scsi_cmnd *);
62:	static const char *host_info(struct Scsi_Host *);
568:	static ssize_t max_sectors_show(struct device *, struct device_attribute *, char *);
576:	static ssize_t max_sectors_store(struct device *, struct device_attribute *, const char *, size_t);
402:	static int queuecommand(struct Scsi_Host *, struct scsi_cmnd *);
519:	static int show_info(struct seq_file *, struct Scsi_Host *);
68:	static int slave_alloc(struct scsi_device *);
92:	static int slave_configure(struct scsi_device *);
337:	static int target_alloc(struct scsi_target *);
513:	static int write_info(struct Scsi_Host *, char *, int);

File drivers/usb/storage/sierra_ms.c:
127:	int sierra_ms_init(struct us_data *);
93:	static ssize_t truinst_show(struct device *, struct device_attribute *, char *);

File drivers/usb/storage/transport.c:
1075:	int usb_stor_Bulk_max_lun(struct us_data *);
1413:	int usb_stor_Bulk_reset(struct us_data *);
1115:	int usb_stor_Bulk_transport(struct scsi_cmnd *, struct us_data *);
1398:	int usb_stor_CB_reset(struct us_data *);
957:	int usb_stor_CB_transport(struct scsi_cmnd *, struct us_data *);
466:	int usb_stor_bulk_srb(struct us_data *, unsigned int, struct scsi_cmnd *);
385:	int usb_stor_bulk_transfer_buf(struct us_data *, unsigned int, void *, unsigned int, unsigned int *);
488:	int usb_stor_bulk_transfer_sg(struct us_data *, unsigned int, void *, unsigned int, int, int *);
227:	int usb_stor_clear_halt(struct us_data *, unsigned int);
185:	int usb_stor_control_msg(struct us_data *, unsigned int, u8, u8, u16, u16, void *, u16, int);
322:	int usb_stor_ctrl_transfer(struct us_data *, unsigned int, u8, u8, u16, u16, void *, u16);
604:	void usb_stor_invoke_transport(struct scsi_cmnd *, struct us_data *);
1425:	int usb_stor_port_reset(struct us_data *);
933:	void usb_stor_stop_transport(struct us_data *);
256:	static int interpret_urb_result(struct us_data *, unsigned int, unsigned int, int, unsigned int);
101:	static void usb_stor_blocking_completion(struct urb *);
411:	static int usb_stor_bulk_transfer_sglist(struct us_data *, unsigned int, struct scatterlist *, int, unsigned int, unsigned int *);
115:	static int usb_stor_msg_common(struct us_data *, int);
1347:	static int usb_stor_reset_common(struct us_data *, u8, u8, u16, u16, void *, u16);

File drivers/usb/storage/usb.c:
261:	void fill_inquiry_response(struct us_data *, unsigned char *, unsigned int);
475:	void usb_stor_adjust_quirks(struct usb_device *, unsigned long *);
1083:	void usb_stor_disconnect(struct usb_interface *);
235:	int usb_stor_post_reset(struct usb_interface *);
225:	int usb_stor_pre_reset(struct usb_interface *);
936:	int usb_stor_probe1(struct us_data **, struct usb_interface *, const struct usb_device_id *, const struct us_unusual_dev *, struct scsi_host_template *);
999:	int usb_stor_probe2(struct us_data *);
880:	static void release_everything(struct us_data *);
1095:	static int storage_probe(struct usb_interface *, const struct usb_device_id *);
298:	static int usb_stor_control_thread(void *);
893:	static void usb_stor_scan_dwork(struct work_struct *);
1159:	static void usb_storage_driver_exit(void);
1159:	static int usb_storage_driver_init(void);

File drivers/usb/storage/usual-tables.c:
91:	int usb_usual_ignore_device(struct usb_interface *);

File drivers/usb/typec/bus.c:
246:	int __typec_altmode_register_driver(struct typec_altmode_driver *, struct module *);
157:	void typec_altmode_attention(struct typec_altmode *, u32);
97:	int typec_altmode_enter(struct typec_altmode *, u32 *);
128:	int typec_altmode_exit(struct typec_altmode *);
201:	const struct typec_altmode *typec_altmode_get_partner(struct typec_altmode *);
221:	struct typec_altmode *typec_altmode_get_plug(struct typec_altmode *, enum typec_plug_index);
57:	int typec_altmode_notify(struct typec_altmode *, unsigned long, void *);
239:	void typec_altmode_put_plug(struct typec_altmode *);
259:	void typec_altmode_unregister_driver(struct typec_altmode_driver *);
177:	int typec_altmode_vdm(struct typec_altmode *, const u32, const u32 *, int);
278:	struct typec_altmode *typec_match_altmode(struct typec_altmode **, size_t, u16, u8);
297:	static ssize_t description_show(struct device *, struct device_attribute *, char *);
311:	static int typec_match(struct device *, struct device_driver *);
361:	static int typec_probe(struct device *);
385:	static void typec_remove(struct device *);
324:	static int typec_uevent(struct device *, struct kobj_uevent_env *);

File drivers/usb/typec/class.c:
319:	struct typec_port *typec_altmode2port(struct typec_altmode *);
290:	void typec_altmode_update_active(struct typec_altmode *, bool);
1111:	struct typec_cable *typec_cable_get(struct typec_port *);
1139:	int typec_cable_is_active(struct typec_cable *);
1127:	void typec_cable_put(struct typec_cable *);
1152:	int typec_cable_set_identity(struct typec_cable *);
1905:	int typec_find_orientation(const char *);
1949:	int typec_find_port_data_role(const char *);
1920:	int typec_find_port_power_role(const char *);
1935:	int typec_find_power_role(const char *);
1890:	int typec_find_pwr_opmode(const char *);
2046:	void *typec_get_drvdata(struct typec_port *);
2052:	int typec_get_fw_cap(struct typec_capability *, struct fwnode_handle *);
2026:	int typec_get_negotiated_svdm_version(struct typec_port *);
1989:	enum typec_orientation typec_get_orientation(struct typec_port *);
803:	struct typec_altmode *typec_partner_register_altmode(struct typec_partner *, const struct typec_altmode_desc *);
691:	int typec_partner_set_identity(struct typec_partner *);
771:	int typec_partner_set_num_altmodes(struct typec_partner *, int);
709:	void typec_partner_set_pd_revision(struct typec_partner *, u16);
817:	void typec_partner_set_svdm_version(struct typec_partner *, enum usb_pd_svdm_ver);
736:	int typec_partner_set_usb_power_delivery(struct typec_partner *, struct usb_power_delivery *);
836:	struct usb_power_delivery *typec_partner_usb_power_delivery_register(struct typec_partner *, struct usb_power_delivery_desc *);
996:	struct typec_altmode *typec_plug_register_altmode(struct typec_plug *, const struct typec_altmode_desc *);
964:	int typec_plug_set_num_altmodes(struct typec_plug *, int);
2106:	struct typec_altmode *typec_port_register_altmode(struct typec_port *, const struct typec_altmode_desc *);
2126:	void typec_port_register_altmodes(struct typec_port *, const struct typec_altmode_ops *, void *, struct typec_altmode **, size_t);
1237:	int typec_port_set_usb_power_delivery(struct typec_port *, struct usb_power_delivery *);
1172:	struct typec_cable *typec_register_cable(struct typec_port *, struct typec_cable_desc *);
852:	struct typec_partner *typec_register_partner(struct typec_port *, struct typec_partner_desc *);
1014:	struct typec_plug *typec_register_plug(struct typec_cable *, struct typec_plug_desc *);
2189:	struct typec_port *typec_register_port(struct device *, const struct typec_capability *);
1786:	void typec_set_data_role(struct typec_port *, enum typec_data_role);
2003:	int typec_set_mode(struct typec_port *, int);
1966:	int typec_set_orientation(struct typec_port *, enum typec_orientation);
1855:	void typec_set_pwr_opmode(struct typec_port *, enum typec_pwr_opmode);
1815:	void typec_set_pwr_role(struct typec_port *, enum typec_role);
1834:	void typec_set_vconn_role(struct typec_port *, enum typec_role);
582:	void typec_unregister_altmode(struct typec_altmode *);
1217:	void typec_unregister_cable(struct typec_cable *);
900:	void typec_unregister_partner(struct typec_partner *);
1052:	void typec_unregister_plug(struct typec_plug *);
2309:	void typec_unregister_port(struct typec_port *);
594:	static ssize_t accessory_mode_show(struct device *, struct device_attribute *, char *);
351:	static ssize_t active_show(struct device *, struct device_attribute *, char *);
358:	static ssize_t active_store(struct device *, struct device_attribute *, const char *, size_t);
225:	static int altmode_match(struct device *, void *);
1099:	static int cable_match(struct device *, void *);
109:	static ssize_t cert_stat_show(struct device *, struct device_attribute *, char *);
1441:	static ssize_t data_role_show(struct device *, struct device_attribute *, char *);
1409:	static ssize_t data_role_store(struct device *, struct device_attribute *, const char *, size_t);
342:	static ssize_t description_show(struct device *, struct device_attribute *, char *);
100:	static ssize_t id_header_show(struct device *, struct device_attribute *, char *);
421:	static ssize_t mode_show(struct device *, struct device_attribute *, char *);
614:	static ssize_t number_of_alternate_modes_show(struct device *, struct device_attribute *, char *);
1670:	static ssize_t orientation_show(struct device *, struct device_attribute *, char *);
1774:	static int partner_match(struct device *, void *);
1069:	static ssize_t plug_type_show(struct device *, struct device_attribute *, char *);
1308:	static umode_t port_attr_is_visible(struct kobject *, struct attribute *, int);
1545:	static ssize_t port_type_show(struct device *, struct device_attribute *, char *);
1507:	static ssize_t port_type_store(struct device *, struct device_attribute *, const char *, size_t);
1565:	static ssize_t power_operation_mode_show(struct device *, struct device_attribute *, char *);
1493:	static ssize_t power_role_show(struct device *, struct device_attribute *, char *);
1454:	static ssize_t power_role_store(struct device *, struct device_attribute *, const char *, size_t);
1394:	static ssize_t preferred_role_show(struct device *, struct device_attribute *, char *);
1360:	static ssize_t preferred_role_store(struct device *, struct device_attribute *, const char *, size_t);
118:	static ssize_t product_show(struct device *, struct device_attribute *, char *);
127:	static ssize_t product_type_vdo1_show(struct device *, struct device_attribute *, char *);
136:	static ssize_t product_type_vdo2_show(struct device *, struct device_attribute *, char *);
145:	static ssize_t product_type_vdo3_show(struct device *, struct device_attribute *, char *);
1275:	static ssize_t select_usb_power_delivery_show(struct device *, struct device_attribute *, char *);
1258:	static ssize_t select_usb_power_delivery_store(struct device *, struct device_attribute *, const char *, size_t);
1614:	static ssize_t supported_accessory_modes_show(struct device *, struct device_attribute *, char *);
398:	static ssize_t supported_roles_show(struct device *, struct device_attribute *, char *);
604:	static ssize_t supports_usb_power_delivery_show(struct device *, struct device_attribute *, char *);
430:	static ssize_t svid_show(struct device *, struct device_attribute *, char *);
205:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
446:	static umode_t typec_altmode_attr_is_visible(struct kobject *, struct attribute *, int);
496:	static void typec_altmode_release(struct device *);
1694:	static umode_t typec_attr_is_visible(struct kobject *, struct attribute *, int);
1086:	static void typec_cable_release(struct device *);
2361:	static void typec_exit(void);
2319:	static int typec_init(void);
644:	static umode_t typec_partner_attr_is_visible(struct kobject *, struct attribute *, int);
670:	static void typec_partner_release(struct device *);
923:	static umode_t typec_plug_attr_is_visible(struct kobject *, struct attribute *, int);
910:	static void typec_plug_release(struct device *);
174:	static void typec_product_type_notify(struct device *);
513:	static struct typec_altmode *typec_register_altmode(struct device *, const struct typec_altmode_desc *);
1751:	static void typec_release(struct device *);
1740:	static int typec_uevent(struct device *, struct kobj_uevent_env *);
1648:	static ssize_t usb_power_delivery_revision_show(struct device *, struct device_attribute *, char *);
1637:	static ssize_t usb_typec_revision_show(struct device *, struct device_attribute *, char *);
1604:	static ssize_t vconn_source_show(struct device *, struct device_attribute *, char *);
1575:	static ssize_t vconn_source_store(struct device *, struct device_attribute *, const char *, size_t);
333:	static ssize_t vdo_show(struct device *, struct device_attribute *, char *);

File drivers/usb/typec/hd3ss3220.c:
75:	static int hd3ss3220_dr_set(struct typec_port *, enum typec_data_role);
270:	static void hd3ss3220_driver_exit(void);
270:	static int hd3ss3220_driver_init(void);
137:	static irqreturn_t hd3ss3220_irq_handler(int, void *);
151:	static int hd3ss3220_probe(struct i2c_client *);
247:	static void hd3ss3220_remove(struct i2c_client *);
102:	static void hd3ss3220_set_role(struct hd3ss3220 *);

File drivers/usb/typec/mux.c:
338:	struct typec_mux *fwnode_typec_mux_get(struct fwnode_handle *, const struct typec_altmode_desc *);
71:	struct typec_switch *fwnode_typec_switch_get(struct fwnode_handle *);
509:	void *typec_mux_get_drvdata(struct typec_mux_dev *);
394:	void typec_mux_put(struct typec_mux *);
453:	struct typec_mux_dev *typec_mux_register(struct device *, const struct typec_mux_desc *);
411:	int typec_mux_set(struct typec_mux *, struct typec_mux_state *);
503:	void typec_mux_set_drvdata(struct typec_mux_dev *, void *);
496:	void typec_mux_unregister(struct typec_mux_dev *);
244:	void *typec_switch_get_drvdata(struct typec_switch_dev *);
126:	void typec_switch_put(struct typec_switch *);
165:	struct typec_switch_dev *typec_switch_register(struct device *, const struct typec_switch_desc *);
203:	int typec_switch_set(struct typec_switch *, enum typec_orientation);
238:	void typec_switch_set_drvdata(struct typec_switch_dev *, void *);
231:	void typec_switch_unregister(struct typec_switch_dev *);
257:	static int mux_fwnode_match(struct device *, const void *);
27:	static int switch_fwnode_match(struct device *, const void *);
265:	static void *typec_mux_match(const struct fwnode_handle *, const char *, void *);
432:	static void typec_mux_release(struct device *);
35:	static void *typec_switch_match(const struct fwnode_handle *, const char *, void *);
144:	static void typec_switch_release(struct device *);

File drivers/usb/typec/pd.c:
704:	void usb_power_delivery_exit(void);
580:	struct usb_power_delivery *usb_power_delivery_find(const char *);
699:	int usb_power_delivery_init(void);
661:	int usb_power_delivery_link_device(struct usb_power_delivery *, struct device *);
606:	struct usb_power_delivery *usb_power_delivery_register(struct device *, struct usb_power_delivery_desc *);
476:	struct usb_power_delivery_capabilities *usb_power_delivery_register_capabilities(struct usb_power_delivery *, struct usb_power_delivery_capabilities_desc *);
686:	void usb_power_delivery_unlink_device(struct usb_power_delivery *, struct device *);
644:	void usb_power_delivery_unregister(struct usb_power_delivery *);
516:	void usb_power_delivery_unregister_capabilities(struct usb_power_delivery_capabilities *);
103:	static ssize_t current_show(struct device *, struct device_attribute *, char *);
66:	static ssize_t dual_role_data_show(struct device *, struct device_attribute *, char *);
38:	static ssize_t dual_role_power_show(struct device *, struct device_attribute *, char *);
90:	static ssize_t fast_role_swap_current_show(struct device *, struct device_attribute *, char *);
138:	static umode_t fixed_attr_is_visible(struct kobject *, struct attribute *, int);
236:	static ssize_t maximum_power_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t maximum_voltage_show(struct device *, struct device_attribute *, char *);
198:	static ssize_t minimum_voltage_show(struct device *, struct device_attribute *, char *);
243:	static ssize_t operational_power_show(struct device *, struct device_attribute *, char *);
550:	static umode_t pd_attr_is_visible(struct kobject *, struct attribute *, int);
454:	static void pd_capabilities_release(struct device *);
566:	static void pd_release(struct device *);
29:	static void pdo_release(struct device *);
300:	static ssize_t pps_max_current_show(struct device *, struct device_attribute *, char *);
288:	static ssize_t pps_max_voltage_show(struct device *, struct device_attribute *, char *);
294:	static ssize_t pps_min_voltage_show(struct device *, struct device_attribute *, char *);
281:	static ssize_t pps_power_limited_show(struct device *, struct device_attribute *, char *);
441:	static int remove_pdo(struct device *, void *);
528:	static ssize_t revision_show(struct device *, struct device_attribute *, char *);
73:	static ssize_t unchunked_extended_messages_supported_show(struct device *, struct device_attribute *, char *);
52:	static ssize_t unconstrained_power_show(struct device *, struct device_attribute *, char *);
59:	static ssize_t usb_communication_capable_show(struct device *, struct device_attribute *, char *);
45:	static ssize_t usb_suspend_supported_show(struct device *, struct device_attribute *, char *);
536:	static ssize_t version_show(struct device *, struct device_attribute *, char *);
96:	static ssize_t voltage_show(struct device *, struct device_attribute *, char *);

File drivers/usb/typec/retimer.c:
47:	struct typec_retimer *fwnode_typec_retimer_get(struct fwnode_handle *);
152:	void *typec_retimer_get_drvdata(struct typec_retimer *);
65:	void typec_retimer_put(struct typec_retimer *);
105:	struct typec_retimer *typec_retimer_register(struct device *, const struct typec_retimer_desc *);
74:	int typec_retimer_set(struct typec_retimer *, struct typec_retimer_state *);
145:	void typec_retimer_unregister(struct typec_retimer *);
20:	static int retimer_fwnode_match(struct device *, const void *);
25:	static void *typec_retimer_match(const struct fwnode_handle *, const char *, void *);
83:	static void typec_retimer_release(struct device *);

File drivers/usb/typec/tcpm/fusb302.c:
1070:	static void fusb302_bc_lvl_handler_work(struct work_struct *);
208:	static int fusb302_debug_open(struct inode *, struct file *);
191:	static int fusb302_debug_show(struct seq_file *, void *);
1843:	static void fusb302_driver_exit(void);
1843:	static int fusb302_driver_init(void);
1243:	static int fusb302_get_src_cc_status(struct fusb302_chip *, enum typec_cc_polarity, enum typec_cc_status *);
1475:	static irqreturn_t fusb302_irq_intn(int, void *);
1493:	static void fusb302_irq_work(struct work_struct *);
182:	static void fusb302_log(struct fusb302_chip *, const char *, ...);
1422:	static int fusb302_pd_read_message(struct fusb302_chip *, struct pd_message *);
1800:	static int fusb302_pm_resume(struct device *);
1786:	static int fusb302_pm_suspend(struct device *);
1680:	static int fusb302_probe(struct i2c_client *);
1772:	static void fusb302_remove(struct i2c_client *);
1139:	static int fusb302_set_cc_polarity_and_pull(struct fusb302_chip *, enum typec_cc_polarity, bool, bool);
468:	static int fusb302_set_src_current(struct fusb302_chip *, enum src_current_status);
497:	static int fusb302_set_toggling(struct fusb302_chip *, enum toggling_mode);
703:	static int tcpm_get_cc(struct tcpc_dev *, enum typec_cc_status *, enum typec_cc_status *);
436:	static int tcpm_get_current_limit(struct tcpc_dev *);
423:	static int tcpm_get_vbus(struct tcpc_dev *);
392:	static int tcpm_init(struct tcpc_dev *);
1021:	static int tcpm_pd_transmit(struct tcpc_dev *, enum tcpm_transmit_type, const struct pd_message *, unsigned int);
597:	static int tcpm_set_cc(struct tcpc_dev *, enum typec_cc_status);
837:	static int tcpm_set_pd_rx(struct tcpc_dev *, bool);
719:	static int tcpm_set_polarity(struct tcpc_dev *, enum typec_cc_polarity);
883:	static int tcpm_set_roles(struct tcpc_dev *, bool, enum typec_role, enum typec_data_role);
756:	static int tcpm_set_vbus(struct tcpc_dev *, bool, bool);
725:	static int tcpm_set_vconn(struct tcpc_dev *, bool);
914:	static int tcpm_start_toggling(struct tcpc_dev *, enum typec_port_type, enum typec_cc_status);

File drivers/usb/typec/tcpm/tcpci.c:
48:	struct tcpm_port *tcpci_get_tcpm_port(struct tcpci *);
638:	irqreturn_t tcpci_irq(struct tcpci *);
750:	struct tcpci *tcpci_register_port(struct device *, struct tcpci_data *);
806:	void tcpci_unregister_port(struct tcpci *);
722:	static irqreturn_t _tcpci_irq(int, void *);
142:	static int tcpci_apply_rc(struct tcpc_dev *, enum typec_cc_status, enum typec_cc_polarity);
328:	static int tcpci_enable_auto_vbus_discharge(struct tcpc_dev *, bool);
382:	static int tcpci_enable_frs(struct tcpc_dev *, bool);
398:	static void tcpci_frs_sourcing_vbus(struct tcpc_dev *);
216:	static int tcpci_get_cc(struct tcpc_dev *, enum typec_cc_status *, enum typec_cc_status *);
448:	static int tcpci_get_vbus(struct tcpc_dev *);
887:	static void tcpci_i2c_driver_exit(void);
887:	static int tcpci_i2c_driver_init(void);
578:	static int tcpci_init(struct tcpc_dev *);
461:	static bool tcpci_is_vbus_vsafe0v(struct tcpc_dev *);
519:	static int tcpci_pd_transmit(struct tcpc_dev *, enum tcpm_transmit_type, const struct pd_message *, unsigned int);
813:	static int tcpci_probe(struct i2c_client *);
851:	static void tcpci_remove(struct i2c_client *);
338:	static int tcpci_set_auto_vbus_discharge_threshold(struct tcpc_dev *, enum typec_pwr_opmode, bool, u32);
406:	static int tcpci_set_bist_data(struct tcpc_dev *, bool);
69:	static int tcpci_set_cc(struct tcpc_dev *, enum typec_cc_status);
303:	static void tcpci_set_partner_usb_comm_capable(struct tcpc_dev *, bool);
433:	static int tcpci_set_pd_rx(struct tcpc_dev *, bool);
243:	static int tcpci_set_polarity(struct tcpc_dev *, enum typec_cc_polarity);
414:	static int tcpci_set_roles(struct tcpc_dev *, bool, enum typec_role, enum typec_data_role);
474:	static int tcpci_set_vbus(struct tcpc_dev *, bool, bool);
311:	static int tcpci_set_vconn(struct tcpc_dev *, bool);
169:	static int tcpci_start_toggling(struct tcpc_dev *, enum typec_port_type, enum typec_cc_status);

File drivers/usb/typec/tcpm/tcpm.c:
5434:	void tcpm_cc_change(struct tcpm_port *);
5452:	void tcpm_pd_hard_reset(struct tcpm_port *);
2976:	void tcpm_pd_receive(struct tcpm_port *, const struct pd_message *);
926:	void tcpm_pd_transmit_complete(struct tcpm_port *, enum tcpm_transmit_status);
6445:	struct tcpm_port *tcpm_register_port(struct device *, struct tcpc_dev *);
5461:	void tcpm_sink_frs(struct tcpm_port *);
5470:	void tcpm_sourcing_vbus(struct tcpm_port *);
5984:	void tcpm_tcpc_reset(struct tcpm_port *);
6555:	void tcpm_unregister_port(struct tcpm_port *);
5443:	void tcpm_vbus_change(struct tcpm_port *);
4902:	static void _tcpm_cc_change(struct tcpm_port *, enum typec_cc_status, enum typec_cc_status);
595:	static void _tcpm_log(struct tcpm_port *, const char *, va_list);
5108:	static void _tcpm_pd_vbus_on(struct tcpm_port *);
6375:	static int devm_tcpm_psy_register(struct tcpm_port *);
6427:	static enum hrtimer_restart enable_frs_timer_handler(struct hrtimer *);
3900:	static void run_state_machine(struct tcpm_port *);
6436:	static enum hrtimer_restart send_discover_timer_handler(struct hrtimer *);
6409:	static enum hrtimer_restart state_machine_timer_handler(struct hrtimer *);
1463:	static void svdm_consume_identity(struct tcpm_port *, const u32 *, int);
1515:	static void svdm_consume_modes(struct tcpm_port *, const u32 *, int);
1481:	static bool svdm_consume_svids(struct tcpm_port *, const u32 *, int);
3831:	static void tcpm_acc_detach(struct tcpm_port *);
2186:	static int tcpm_altmode_enter(struct typec_altmode *, u32 *);
2203:	static int tcpm_altmode_exit(struct typec_altmode *);
2220:	static int tcpm_altmode_vdm(struct typec_altmode *, u32, const u32 *, int);
856:	static void tcpm_ams_finish(struct tcpm_port *);
1342:	static int tcpm_ams_start(struct tcpm_port *, enum tcpm_ams);
807:	static void tcpm_apply_rc(struct tcpm_port *);
746:	static int tcpm_debug_open(struct inode *, struct file *);
729:	static int tcpm_debug_show(struct seq_file *, void *);
759:	static void tcpm_debugfs_exit(struct tcpm_port *);
748:	static void tcpm_debugfs_init(struct tcpm_port *);
5537:	static int tcpm_dr_set(struct typec_port *, enum typec_data_role);
792:	static int tcpm_enable_auto_vbus_discharge(struct tcpm_port *, bool);
5479:	static void tcpm_enable_frs_work(struct kthread_work *);
6055:	static int tcpm_fw_get_caps(struct tcpm_port *, struct fwnode_handle *);
5902:	static void tcpm_init(struct tcpm_port *);
643:	static void tcpm_log(struct tcpm_port *, const char *, ...);
659:	static void tcpm_log_force(struct tcpm_port *, const char *, ...);
3068:	static int tcpm_pd_check_request(struct tcpm_port *);
5364:	static void tcpm_pd_event_handler(struct kthread_work *);
2331:	static void tcpm_pd_handle_msg(struct tcpm_port *, enum pd_msg_request, enum tcpm_ams);
2298:	static void tcpm_pd_handle_state(struct tcpm_port *, enum tcpm_state, enum tcpm_ams, unsigned int);
2922:	static void tcpm_pd_rx_handler(struct kthread_work *);
2991:	static int tcpm_pd_send_control(struct tcpm_port *, enum pd_ctrl_msg_type);
3509:	static int tcpm_pd_send_pps_request(struct tcpm_port *);
3406:	static int tcpm_pd_send_request(struct tcpm_port *);
1125:	static int tcpm_pd_send_source_caps(struct tcpm_port *);
873:	static int tcpm_pd_transmit(struct tcpm_port *, enum tcpm_transmit_type, const struct pd_message *);
572:	static bool tcpm_port_is_disconnected(struct tcpm_port *);
6003:	static int tcpm_port_register_pd(struct tcpm_port *);
5949:	static int tcpm_port_type_set(struct typec_port *, enum typec_port_type);
5993:	static void tcpm_port_unregister_pd(struct tcpm_port *);
5609:	static int tcpm_pr_set(struct typec_port *, enum typec_role);
6258:	static int tcpm_psy_get_prop(struct power_supply *, enum power_supply_property, union power_supply_propval *);
6354:	static int tcpm_psy_prop_writeable(struct power_supply *, enum power_supply_property);
6315:	static int tcpm_psy_set_prop(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
1283:	static void tcpm_queue_message(struct tcpm_port *, enum pd_msg_request);
1542:	static void tcpm_register_partner_altmodes(struct tcpm_port *);
3712:	static void tcpm_reset_port(struct tcpm_port *);
825:	static enum typec_cc_status tcpm_rp_cc(struct tcpm_port *);
5511:	static void tcpm_send_discover_work(struct kthread_work *);
3010:	static bool tcpm_send_queued_message(struct tcpm_port *);
2280:	static int tcpm_set_auto_vbus_discharge_threshold(struct tcpm_port *, enum typec_pwr_opmode, bool, u32);
3550:	static int tcpm_set_charge(struct tcpm_port *, bool);
1013:	static int tcpm_set_current_limit(struct tcpm_port *, u32, u32);
3704:	static void tcpm_set_partner_usb_comm_capable(struct tcpm_port *, bool);
1088:	static int tcpm_set_pwr_role(struct tcpm_port *, enum typec_role);
1035:	static int tcpm_set_roles(struct tcpm_port *, bool, enum typec_role, enum typec_data_role);
1240:	static void tcpm_set_state(struct tcpm_port *, enum tcpm_state, unsigned int);
1269:	static void tcpm_set_state_cond(struct tcpm_port *, enum tcpm_state, unsigned int);
3533:	static int tcpm_set_vbus(struct tcpm_port *, bool);
973:	static int tcpm_set_vconn(struct tcpm_port *, bool);
3777:	static int tcpm_snk_attach(struct tcpm_port *);
3805:	static void tcpm_snk_detach(struct tcpm_port *);
3619:	static int tcpm_src_attach(struct tcpm_port *);
3772:	static void tcpm_src_detach(struct tcpm_port *);
3569:	static bool tcpm_start_toggling(struct tcpm_port *, enum typec_cc_status);
4865:	static void tcpm_state_machine_work(struct kthread_work *);
5703:	static int tcpm_try_role(struct typec_port *, int);
3600:	static void tcpm_typec_connect(struct tcpm_port *);
3691:	static void tcpm_unregister_altmodes(struct tcpm_port *);
2173:	static int tcpm_validate_caps(struct tcpm_port *, const u32 *, unsigned int);
5658:	static int tcpm_vconn_set(struct typec_port *, enum typec_role);
6418:	static enum hrtimer_restart vdm_state_machine_timer_handler(struct hrtimer *);
2042:	static void vdm_state_machine_work(struct kthread_work *);

File drivers/usb/typec/tipd/core.c:
477:	static irqreturn_t cd321x_interrupt(int, void *);
665:	static int devm_tps6598_psy_register(struct tps6598x *);
232:	static int tps6598x_connect(struct tps6598x *, u32);
276:	static void tps6598x_disconnect(struct tps6598x *, u32);
354:	static int tps6598x_dr_set(struct typec_port *, enum typec_data_role);
291:	static int tps6598x_exec_cmd(struct tps6598x *, const char *, size_t, u8 *, size_t, u8 *);
895:	static void tps6598x_i2c_driver_exit(void);
895:	static int tps6598x_i2c_driver_init(void);
522:	static irqreturn_t tps6598x_interrupt(int, void *);
384:	static int tps6598x_pr_set(struct typec_port *, enum typec_role);
694:	static int tps6598x_probe(struct i2c_client *);
614:	static int tps6598x_psy_get_prop(struct power_supply *, enum power_supply_property, union power_supply_propval *);
164:	static int tps6598x_read16(struct tps6598x *, u8, u16 *);
169:	static int tps6598x_read32(struct tps6598x *, u8, u32 *);
864:	static void tps6598x_remove(struct i2c_client *);
189:	static int tps6598x_write64(struct tps6598x *, u8, u64);

File drivers/video/backlight/backlight.c:
509:	struct backlight_device *backlight_device_get_by_name(const char *);
480:	struct backlight_device *backlight_device_get_by_type(enum backlight_type);
405:	struct backlight_device *backlight_device_register(const char *, struct device *, void *, const struct backlight_ops *, const struct backlight_properties *);
230:	int backlight_device_set_brightness(struct backlight_device *, unsigned long);
520:	void backlight_device_unregister(struct backlight_device *);
384:	void backlight_force_update(struct backlight_device *, enum backlight_update_reason);
574:	int backlight_register_notifier(struct notifier_block *);
591:	int backlight_unregister_notifier(struct notifier_block *);
614:	struct backlight_device *devm_backlight_device_register(struct device *, const char *, struct device *, void *, const struct backlight_ops *, const struct backlight_properties *);
648:	void devm_backlight_device_unregister(struct device *, struct backlight_device *);
731:	struct backlight_device *devm_of_find_backlight(struct device *);
677:	struct backlight_device *of_find_backlight_by_node(struct device_node *);
288:	static ssize_t actual_brightness_show(struct device *, struct device_attribute *, char *);
747:	static void backlight_class_exit(void);
752:	static int backlight_class_init(void);
355:	static void bl_device_release(struct device *);
181:	static ssize_t bl_power_show(struct device *, struct device_attribute *, char *);
189:	static ssize_t bl_power_store(struct device *, struct device_attribute *, const char *, size_t);
222:	static ssize_t brightness_show(struct device *, struct device_attribute *, char *);
253:	static ssize_t brightness_store(struct device *, struct device_attribute *, const char *, size_t);
555:	static int devm_backlight_device_match(struct device *, void *, void *);
548:	static void devm_backlight_device_release(struct device *, void *);
709:	static void devm_backlight_release(void *);
96:	static int fb_notifier_callback(struct notifier_block *, unsigned long, void *);
279:	static ssize_t max_brightness_show(struct device *, struct device_attribute *, char *);
660:	static int of_parent_match(struct device *, const void *);
308:	static ssize_t scale_show(struct device *, struct device_attribute *, char *);
270:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File drivers/video/console/dummycon.c:
89:	static int dummycon_blank(struct vc_data *, int, int);
111:	static void dummycon_clear(struct vc_data *, int, int, int, int);
113:	static void dummycon_cursor(struct vc_data *, int);
110:	static void dummycon_deinit(struct vc_data *);
100:	static void dummycon_init(struct vc_data *, int);
86:	static void dummycon_putc(struct vc_data *, int, int, int);
87:	static void dummycon_putcs(struct vc_data *, const unsigned short *, int, int, int);
115:	static bool dummycon_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
95:	static const char *dummycon_startup(void);
122:	static int dummycon_switch(struct vc_data *);

File drivers/video/display_timing.c:
12:	void display_timings_release(struct display_timings *);

File drivers/video/fbdev/core/bitblit.c:
394:	void fbcon_set_bitops(struct fbcon_ops *);
46:	static void bit_bmove(struct vc_data *, struct fb_info *, int, int, int, int, int, int);
61:	static void bit_clear(struct vc_data *, struct fb_info *, int, int, int, int);
205:	static void bit_clear_margins(struct vc_data *, struct fb_info *, int, int);
236:	static void bit_cursor(struct vc_data *, struct fb_info *, int, int, int);
143:	static void bit_putcs(struct vc_data *, struct fb_info *, const unsigned short *, int, int, int, int, int);
382:	static int bit_update_start(struct fb_info *);

File drivers/video/fbdev/core/cfbcopyarea.c:
381:	void cfb_copyarea(struct fb_info *, const struct fb_copyarea *);

File drivers/video/fbdev/core/cfbfillrect.c:
278:	void cfb_fillrect(struct fb_info *, const struct fb_fillrect *);
35:	static void bitfill_aligned(struct fb_info *, unsigned long *, int, unsigned long, unsigned int, int, u32);
146:	static void bitfill_aligned_rev(struct fb_info *, unsigned long *, int, unsigned long, unsigned int, int, u32);
92:	static void bitfill_unaligned(struct fb_info *, unsigned long *, int, unsigned long, int, int, unsigned int, int);
217:	static void bitfill_unaligned_rev(struct fb_info *, unsigned long *, int, unsigned long, int, int, unsigned int, int);

File drivers/video/fbdev/core/cfbimgblt.c:
318:	void cfb_imageblit(struct fb_info *, const struct fb_image *);

File drivers/video/fbdev/core/fb_cmdline.c:
35:	int fb_get_options(const char *, char **);
79:	static int video_setup(char *);

File drivers/video/fbdev/core/fb_defio.c:
316:	void fb_deferred_io_cleanup(struct fb_info *);
122:	int fb_deferred_io_fsync(struct file *, loff_t, loff_t, int);
269:	int fb_deferred_io_init(struct fb_info *);
232:	int fb_deferred_io_mmap(struct fb_info *, struct vm_area_struct *);
308:	void fb_deferred_io_open(struct fb_info *, struct inode *, struct file *);
94:	static vm_fault_t fb_deferred_io_fault(struct vm_fault *);
216:	static vm_fault_t fb_deferred_io_mkwrite(struct vm_fault *);
244:	static void fb_deferred_io_work(struct work_struct *);

File drivers/video/fbdev/core/fb_notify.c:
50:	int fb_notifier_call_chain(unsigned long, void *);
25:	int fb_register_client(struct notifier_block *);
37:	int fb_unregister_client(struct notifier_block *);

File drivers/video/fbdev/core/fb_sys_fops.c:
16:	ssize_t fb_sys_read(struct fb_info *, char *, size_t, loff_t *);
56:	ssize_t fb_sys_write(struct fb_info *, const char *, size_t, loff_t *);

File drivers/video/fbdev/core/fbcmap.c:
133:	int fb_alloc_cmap(struct fb_cmap *, int, int);
92:	int fb_alloc_cmap_gfp(struct fb_cmap *, int, int, gfp_t);
191:	int fb_cmap_to_user(const struct fb_cmap *, struct fb_cmap_user *);
166:	int fb_copy_cmap(const struct fb_cmap *, struct fb_cmap *);
147:	void fb_dealloc_cmap(struct fb_cmap *);
307:	const struct fb_cmap *fb_default_cmap(int);
326:	void fb_invert_cmaps(void);
231:	int fb_set_cmap(struct fb_cmap *, struct fb_info *);
267:	int fb_set_user_cmap(struct fb_cmap_user *, struct fb_info *);

File drivers/video/fbdev/core/fbcon.c:
3388:	void fb_console_init(void);
3042:	void fbcon_fb_blanked(struct fb_info *, int);
3023:	int fbcon_fb_registered(struct fb_info *);
2832:	void fbcon_fb_unbind(struct fb_info *);
2881:	void fbcon_fb_unregistered(struct fb_info *);
3141:	int fbcon_get_con2fb_map_ioctl(void *);
3085:	void fbcon_get_requirement(struct fb_info *, struct fb_blit_caps *);
2791:	int fbcon_mode_deleted(struct fb_info *, struct fb_videomode *);
2764:	int fbcon_modechange_possible(struct fb_info *, struct fb_var_screeninfo *);
3064:	void fbcon_new_modelist(struct fb_info *);
2925:	void fbcon_remap_all(struct fb_info *);
2668:	void fbcon_resumed(struct fb_info *);
3116:	int fbcon_set_con2fb_map_ioctl(void *);
2655:	void fbcon_suspended(struct fb_info *);
2754:	void fbcon_update_vcs(struct fb_info *, bool);
405:	static int fb_console_setup(char *);
348:	static void fb_flashcursor(struct work_struct *);
2208:	static int fbcon_blank(struct vc_data *, int, int);
1241:	static void fbcon_clear(struct vc_data *, int, int, int, int);
1309:	static void fbcon_cursor(struct vc_data *, int);
2250:	static int fbcon_debug_enter(struct vc_data *);
2263:	static int fbcon_debug_leave(struct vc_data *);
1169:	static void fbcon_deinit(struct vc_data *);
2398:	static int fbcon_do_set_font(struct vc_data *, int, int, int, const u8 *, int);
2274:	static int fbcon_get_font(struct vc_data *, struct console_font *);
2613:	static unsigned long fbcon_getxy(struct vc_data *, unsigned long, int *, int *);
991:	static void fbcon_init(struct vc_data *, int);
2639:	static void fbcon_invert_region(struct vc_data *, u16 *, int);
2680:	static void fbcon_modechanged(struct fb_info *);
706:	static int fbcon_open(struct fb_info *);
551:	static void fbcon_prepare_logo(struct vc_data *, struct fb_info *, int, int, int, int);
1292:	static void fbcon_putc(struct vc_data *, int, int, int);
1279:	static void fbcon_putcs(struct vc_data *, const unsigned short *, int, int, int);
1621:	static void fbcon_redraw(struct vc_data *, struct fbcon_display *, int, int, int);
684:	static void fbcon_release(struct fb_info *);
2002:	static int fbcon_resize(struct vc_data *, unsigned int, unsigned int, unsigned int);
2608:	static u16 *fbcon_screen_pos(const struct vc_data *, int);
1741:	static bool fbcon_scroll(struct vc_data *, unsigned int, unsigned int, enum con_scroll, unsigned int);
2549:	static int fbcon_set_def_font(struct vc_data *, struct console_font *, char *);
1338:	static void fbcon_set_disp(struct fb_info *, struct fb_var_screeninfo *, int);
2476:	static int fbcon_set_font(struct vc_data *, struct console_font *, unsigned int);
2573:	static void fbcon_set_palette(struct vc_data *, const unsigned char *);
920:	static const char *fbcon_startup(void);
2066:	static int fbcon_switch(struct vc_data *);
820:	static int set_con2fb_map(int, int, int);
3248:	static ssize_t show_cursor_blink(struct device *, struct device_attribute *, char *);
3229:	static ssize_t show_rotate(struct device *, struct device_attribute *, char *);
3273:	static ssize_t store_cursor_blink(struct device *, struct device_attribute *, const char *, size_t);
3185:	static ssize_t store_rotate(struct device *, struct device_attribute *, const char *, size_t);
3207:	static ssize_t store_rotate_all(struct device *, struct device_attribute *, const char *, size_t);

File drivers/video/fbdev/core/fbcvt.c:
294:	int fb_find_mode_cvt(struct fb_videomode *, int, int);

File drivers/video/fbdev/core/fbmem.c:
1077:	int fb_blank(struct fb_info *, int);
158:	char *fb_get_buffer_offset(struct fb_info *, struct fb_pixmap *, u32);
92:	int fb_get_color_depth(struct fb_var_screeninfo *, struct fb_fix_screeninfo *);
1849:	bool fb_modesetting_disabled(const char *);
1819:	int fb_new_modelist(struct fb_info *);
118:	void fb_pad_aligned_buffer(u8 *, u32, u8 *, u32, u32);
124:	void fb_pad_unaligned_buffer(u8 *, u32, u8 *, u32, u32, u32, u32, u32);
900:	int fb_pan_display(struct fb_info *, struct fb_var_screeninfo *);
615:	int fb_prepare_logo(struct fb_info *, int);
1744:	void fb_set_suspend(struct fb_info *, int);
958:	int fb_set_var(struct fb_info *, struct fb_var_screeninfo *);
688:	int fb_show_logo(struct fb_info *, int);
1692:	int register_framebuffer(struct fb_info *);
1727:	void unregister_framebuffer(struct fb_info *);
937:	static int fb_check_caps(struct fb_info *, struct fb_var_screeninfo *, u32);
1197:	static long fb_ioctl(struct file *, unsigned int, unsigned long);
1349:	static int fb_mmap(struct file *, struct vm_area_struct *);
1409:	static int fb_open(struct inode *, struct file *);
763:	static ssize_t fb_read(struct file *, char *, size_t, loff_t *);
1450:	static int fb_release(struct inode *, struct file *);
715:	static void *fb_seq_next(struct seq_file *, void *, loff_t *);
726:	static int fb_seq_show(struct seq_file *, void *);
709:	static void *fb_seq_start(struct seq_file *, loff_t *);
721:	static void fb_seq_stop(struct seq_file *, void *);
828:	static ssize_t fb_write(struct file *, const char *, size_t, loff_t *);
1768:	static int fbmem_init(void);

File drivers/video/fbdev/core/fbmon.c:
690:	void fb_destroy_modedb(struct fb_videomode *);
937:	void fb_edid_to_monspecs(unsigned char *, struct fb_monspecs *);
1509:	const unsigned char *fb_firmware_edid(struct device *);
1215:	int fb_get_mode(int, u32, struct fb_var_screeninfo *, struct fb_info *);
894:	int fb_parse_edid(unsigned char *, struct fb_var_screeninfo *);
1433:	int fb_validate_mode(const struct fb_var_screeninfo *, struct fb_info *);
1311:	int fb_videomode_from_videomode(const struct videomode *, struct fb_videomode *);
1379:	int of_get_fb_videomode(struct device_node *, struct fb_videomode *, int);
145:	static int check_edid(unsigned char *);
86:	static void copy_string(unsigned char *, unsigned char *);
616:	static struct fb_videomode *fb_create_modedb(unsigned char *, int *, const struct fb_monspecs *);
207:	static void fix_edid(unsigned char *, int);
494:	static int get_std_timing(unsigned char *, struct fb_videomode *, int, int, const struct fb_monspecs *);

File drivers/video/fbdev/core/fbsysfs.c:
544:	void fb_cleanup_device(struct fb_info *);
520:	int fb_init_device(struct fb_info *);
36:	struct fb_info *framebuffer_alloc(size_t, struct device *);
79:	void framebuffer_release(struct fb_info *);
328:	static ssize_t show_blank(struct device *, struct device_attribute *, char *);
239:	static ssize_t show_bpp(struct device *, struct device_attribute *, char *);
343:	static ssize_t show_console(struct device *, struct device_attribute *, char *);
358:	static ssize_t show_cursor(struct device *, struct device_attribute *, char *);
427:	static ssize_t show_fbstate(struct device *, struct device_attribute *, char *);
166:	static ssize_t show_mode(struct device *, struct device_attribute *, char *);
206:	static ssize_t show_modes(struct device *, struct device_attribute *, char *);
398:	static ssize_t show_name(struct device *, struct device_attribute *, char *);
390:	static ssize_t show_pan(struct device *, struct device_attribute *, char *);
265:	static ssize_t show_rotate(struct device *, struct device_attribute *, char *);
302:	static ssize_t show_stride(struct device *, struct device_attribute *, char *);
294:	static ssize_t show_virtual(struct device *, struct device_attribute *, char *);
309:	static ssize_t store_blank(struct device *, struct device_attribute *, const char *, size_t);
224:	static ssize_t store_bpp(struct device *, struct device_attribute *, const char *, size_t);
335:	static ssize_t store_console(struct device *, struct device_attribute *, const char *, size_t);
350:	static ssize_t store_cursor(struct device *, struct device_attribute *, const char *, size_t);
406:	static ssize_t store_fbstate(struct device *, struct device_attribute *, const char *, size_t);
135:	static ssize_t store_mode(struct device *, struct device_attribute *, const char *, size_t);
177:	static ssize_t store_modes(struct device *, struct device_attribute *, const char *, size_t);
365:	static ssize_t store_pan(struct device *, struct device_attribute *, const char *, size_t);
246:	static ssize_t store_rotate(struct device *, struct device_attribute *, const char *, size_t);
273:	static ssize_t store_virtual(struct device *, struct device_attribute *, const char *, size_t);

File drivers/video/fbdev/core/modedb.c:
1057:	int fb_add_videomode(const struct fb_videomode *, struct list_head *);
1092:	void fb_delete_videomode(const struct fb_videomode *, struct list_head *);
1113:	void fb_destroy_modelist(struct list_head *);
1143:	const struct fb_videomode *fb_find_best_display(const struct fb_monspecs *, struct list_head *);
954:	const struct fb_videomode *fb_find_best_mode(const struct fb_var_screeninfo *, struct list_head *);
617:	int fb_find_mode(struct fb_var_screeninfo *, struct fb_info *, const char *, const struct fb_videomode *, unsigned int, const struct fb_videomode *, unsigned int);
992:	const struct fb_videomode *fb_find_nearest_mode(const struct fb_videomode *, struct list_head *);
1032:	const struct fb_videomode *fb_match_mode(const struct fb_var_screeninfo *, struct list_head *);
921:	int fb_mode_is_equal(const struct fb_videomode *, const struct fb_videomode *);
846:	void fb_var_to_videomode(struct fb_videomode *, const struct fb_var_screeninfo *);
1130:	void fb_videomode_to_modelist(const struct fb_videomode *, int, struct list_head *);
893:	void fb_videomode_to_var(struct fb_var_screeninfo *, const struct fb_videomode *);

File drivers/video/fbdev/core/softcursor.c:
22:	int soft_cursor(struct fb_info *, struct fb_cursor *);

File drivers/video/fbdev/core/syscopyarea.c:
315:	void sys_copyarea(struct fb_info *, const struct fb_copyarea *);

File drivers/video/fbdev/core/sysfillrect.c:
233:	void sys_fillrect(struct fb_info *, const struct fb_fillrect *);
25:	static void bitfill_aligned(struct fb_info *, unsigned long *, int, unsigned long, unsigned int, int);
125:	static void bitfill_aligned_rev(struct fb_info *, unsigned long *, int, unsigned long, unsigned int, int);
71:	static void bitfill_unaligned(struct fb_info *, unsigned long *, int, unsigned long, int, int, unsigned int, int);
181:	static void bitfill_unaligned_rev(struct fb_info *, unsigned long *, int, unsigned long, int, int, unsigned int, int);

File drivers/video/fbdev/core/sysimgblt.c:
288:	void sys_imageblit(struct fb_info *, const struct fb_image *);

File drivers/video/hdmi.c:
385:	int hdmi_audio_infoframe_check(const struct hdmi_audio_infoframe *);
354:	int hdmi_audio_infoframe_init(struct hdmi_audio_infoframe *);
476:	ssize_t hdmi_audio_infoframe_pack(struct hdmi_audio_infoframe *, void *, size_t);
502:	ssize_t hdmi_audio_infoframe_pack_for_dp(const struct hdmi_audio_infoframe *, struct dp_sdp *, u8);
427:	ssize_t hdmi_audio_infoframe_pack_only(const struct hdmi_audio_infoframe *, void *, size_t);
90:	int hdmi_avi_infoframe_check(struct hdmi_avi_infoframe *);
58:	void hdmi_avi_infoframe_init(struct hdmi_avi_infoframe *);
201:	ssize_t hdmi_avi_infoframe_pack(struct hdmi_avi_infoframe *, void *, size_t);
110:	ssize_t hdmi_avi_infoframe_pack_only(const struct hdmi_avi_infoframe *, void *, size_t);
735:	int hdmi_drm_infoframe_check(struct hdmi_drm_infoframe *);
704:	int hdmi_drm_infoframe_init(struct hdmi_drm_infoframe *);
828:	ssize_t hdmi_drm_infoframe_pack(struct hdmi_drm_infoframe *, void *, size_t);
755:	ssize_t hdmi_drm_infoframe_pack_only(const struct hdmi_drm_infoframe *, void *, size_t);
1833:	int hdmi_drm_infoframe_unpack_only(struct hdmi_drm_infoframe *, const void *, size_t);
907:	int hdmi_infoframe_check(union hdmi_infoframe *);
1559:	void hdmi_infoframe_log(const char *, struct device *, const union hdmi_infoframe *);
992:	ssize_t hdmi_infoframe_pack(union hdmi_infoframe *, void *, size_t);
940:	ssize_t hdmi_infoframe_pack_only(const union hdmi_infoframe *, void *, size_t);
1923:	int hdmi_infoframe_unpack(union hdmi_infoframe *, const void *, size_t);
261:	int hdmi_spd_infoframe_check(struct hdmi_spd_infoframe *);
222:	int hdmi_spd_infoframe_init(struct hdmi_spd_infoframe *, const char *, const char *);
335:	ssize_t hdmi_spd_infoframe_pack(struct hdmi_spd_infoframe *, void *, size_t);
281:	ssize_t hdmi_spd_infoframe_pack_only(const struct hdmi_spd_infoframe *, void *, size_t);
589:	int hdmi_vendor_infoframe_check(struct hdmi_vendor_infoframe *);
532:	int hdmi_vendor_infoframe_init(struct hdmi_vendor_infoframe *);
674:	ssize_t hdmi_vendor_infoframe_pack(struct hdmi_vendor_infoframe *, void *, size_t);
611:	ssize_t hdmi_vendor_infoframe_pack_only(const struct hdmi_vendor_infoframe *, void *, size_t);

File drivers/video/logo/logo.c:
44:	const struct linux_logo *fb_find_logo(int);
32:	static int fb_logo_late_init(void);

File drivers/video/nomodeset.c:
10:	bool video_firmware_drivers_only(void);
16:	static int disable_modeset(char *);

File drivers/video/of_display_timing.c:
119:	int of_get_display_timing(const struct device_node *, const char *, struct display_timing *);
144:	struct display_timings *of_get_display_timings(const struct device_node *);
57:	static int of_parse_display_timing(const struct device_node *, struct display_timing *);
25:	static int parse_timing_property(const struct device_node *, const char *, struct timing_entry *);

File drivers/video/of_videomode.c:
30:	int of_get_videomode(struct device_node *, struct videomode *, int);

File drivers/video/videomode.c:
13:	void videomode_from_timing(const struct display_timing *, struct videomode *);
31:	int videomode_from_timings(const struct display_timings *, struct videomode *, unsigned int);

File drivers/virtio/virtio.c:
473:	bool is_virtio_device(struct device *);
418:	int register_virtio_device(struct virtio_device *);
352:	int register_virtio_driver(struct virtio_driver *);
479:	void unregister_virtio_device(struct virtio_device *);
361:	void unregister_virtio_driver(struct virtio_driver *);
163:	void virtio_add_status(struct virtio_device *, unsigned int);
106:	void virtio_check_driver_offered_feature(const struct virtio_device *, unsigned int);
136:	void virtio_config_changed(struct virtio_device *);
220:	void virtio_reset_device(struct virtio_device *);
14:	static ssize_t device_show(struct device *, struct device_attribute *, char *);
47:	static ssize_t features_show(struct device *, struct device_attribute *, char *);
38:	static ssize_t modalias_show(struct device *, struct device_attribute *, char *);
30:	static ssize_t status_show(struct device *, struct device_attribute *, char *);
22:	static ssize_t vendor_show(struct device *, struct device_attribute *, char *);
85:	static int virtio_dev_match(struct device *, struct device_driver *);
237:	static int virtio_dev_probe(struct device *);
325:	static void virtio_dev_remove(struct device *);
563:	static void virtio_exit(void);
556:	static int virtio_init(void);
98:	static int virtio_uevent(struct device *, struct kobj_uevent_env *);

File drivers/virtio/virtio_anchor.c:
5:	bool virtio_require_restricted_mem_acc(struct virtio_device *);
11:	static bool virtio_no_restricted_mem_acc(struct virtio_device *);

File drivers/virtio/virtio_ring.c:
2803:	void __virtio_unbreak_device(struct virtio_device *);
2748:	void __virtqueue_break(struct virtqueue *);
2760:	void __virtqueue_unbreak(struct virtqueue *);
2781:	void virtio_break_device(struct virtio_device *);
288:	size_t virtio_max_dma_size(struct virtio_device *);
2170:	int virtqueue_add_inbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
2193:	int virtqueue_add_inbuf_ctx(struct virtqueue *, struct scatterlist *, unsigned int, void *, void *, gfp_t);
2148:	int virtqueue_add_outbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
2114:	int virtqueue_add_sgs(struct virtqueue *, struct scatterlist **, unsigned int, unsigned int, void *, gfp_t);
2423:	void *virtqueue_detach_unused_buf(struct virtqueue *);
2308:	void virtqueue_disable_cb(struct virtqueue *);
2382:	bool virtqueue_enable_cb(struct virtqueue *);
2403:	bool virtqueue_enable_cb_delayed(struct virtqueue *);
2337:	unsigned int virtqueue_enable_cb_prepare(struct virtqueue *);
2831:	dma_addr_t virtqueue_get_avail_addr(struct virtqueue *);
2294:	void *virtqueue_get_buf(struct virtqueue *, unsigned int *);
2284:	void *virtqueue_get_buf_ctx(struct virtqueue *, unsigned int *, void **);
2818:	dma_addr_t virtqueue_get_desc_addr(struct virtqueue *);
2845:	dma_addr_t virtqueue_get_used_addr(struct virtqueue *);
2860:	const struct vring *virtqueue_get_vring(struct virtqueue *);
2736:	unsigned int virtqueue_get_vring_size(struct virtqueue *);
2769:	bool virtqueue_is_broken(struct virtqueue *);
2259:	bool virtqueue_kick(struct virtqueue *);
2214:	bool virtqueue_kick_prepare(struct virtqueue *);
2231:	bool virtqueue_notify(struct virtqueue *);
2358:	bool virtqueue_poll(struct virtqueue *, unsigned int);
2584:	int virtqueue_resize(struct virtqueue *, u32, void (*)(struct virtqueue *, void *));
2536:	struct virtqueue *vring_create_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2688:	void vring_del_virtqueue(struct virtqueue *);
2445:	irqreturn_t vring_interrupt(int, void *);
2630:	struct virtqueue *vring_new_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, void *, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2703:	void vring_transport_features(struct virtio_device *);
2477:	static struct virtqueue *__vring_new_virtqueue(unsigned int, struct vring_virtqueue_split *, struct virtio_device *, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
1544:	static void detach_buf_packed(struct vring_virtqueue *, unsigned int, void **);
731:	static void detach_buf_split(struct vring_virtqueue *, unsigned int, void **);
2083:	static int virtqueue_add(struct virtqueue *, struct scatterlist **, unsigned int, unsigned int, unsigned int, void *, void *, gfp_t);
2048:	static int virtqueue_resize_packed(struct virtqueue *, u32);
1126:	static int virtqueue_resize_split(struct virtqueue *, u32);
1865:	static int vring_alloc_queue_packed(struct vring_virtqueue_packed *, struct virtio_device *, u32);
1045:	static int vring_alloc_queue_split(struct vring_virtqueue_split *, struct virtio_device *, u32, unsigned int, bool);
2652:	static void vring_free(struct virtqueue *);
1843:	static void vring_free_packed(struct vring_virtqueue_packed *, struct virtio_device *);
376:	static dma_addr_t vring_map_single(const struct vring_virtqueue *, void *, size_t, enum dma_data_direction);
1173:	static void vring_unmap_extra_packed(const struct vring_virtqueue *, struct vring_desc_extra *);

File fs/aio.c:
2142:	long __arm64_sys_io_cancel(const struct pt_regs *);
1404:	long __arm64_sys_io_destroy(const struct pt_regs *);
2218:	long __arm64_sys_io_getevents(const struct pt_regs *);
2243:	long __arm64_sys_io_pgetevents(const struct pt_regs *);
1335:	long __arm64_sys_io_setup(const struct pt_regs *);
2048:	long __arm64_sys_io_submit(const struct pt_regs *);
886:	void exit_aio(struct mm_struct *);
588:	void kiocb_set_cancel_fn(struct kiocb *, kiocb_cancel_fn *);
1444:	static void aio_complete_rw(struct kiocb *, long);
328:	static void aio_free_ring(struct kioctx *);
1606:	static void aio_fsync_work(struct work_struct *);
279:	static int aio_init_fs_context(struct fs_context *);
403:	static int aio_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
1736:	static int aio_poll_cancel(struct kiocb *);
1690:	static void aio_poll_complete_work(struct work_struct *);
1637:	static void aio_poll_put_work(struct work_struct *);
1843:	static void aio_poll_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
1753:	static int aio_poll_wake(struct wait_queue_entry *, unsigned int, int, void *);
1468:	static int aio_prep_rw(struct kiocb *, const struct iocb *);
1538:	static int aio_read(struct kiocb *, const struct iocb *, bool, bool);
1276:	static bool aio_read_events(struct kioctx *, long, long, struct io_event *, long *);
391:	static int aio_ring_mmap(struct file *, struct vm_area_struct *);
354:	static int aio_ring_mremap(struct vm_area_struct *);
291:	static int aio_setup(void);
1565:	static int aio_write(struct kiocb *, const struct iocb *, bool, bool);
2185:	static long do_io_getevents(aio_context_t, long, long, struct io_event *, struct timespec64 *);
609:	static void free_ioctx(struct work_struct *);
622:	static void free_ioctx_reqs(struct percpu_ref *);
640:	static void free_ioctx_users(struct percpu_ref *);
1098:	static void iocb_destroy(struct aio_kiocb *);
1184:	static void iocb_put(struct aio_kiocb *);
842:	static int kill_ioctx(struct mm_struct *, struct kioctx *, struct ctx_rq_wait *);
1070:	static struct kioctx *lookup_ioctx(unsigned long);

File fs/anon_inodes.c:
226:	int anon_inode_getfd(const char *, const struct file_operations *, void *, int);
249:	int anon_inode_getfd_secure(const char *, const struct file_operations *, void *, int, const struct inode *);
143:	struct file *anon_inode_getfile(const char *, const struct file_operations *, void *, int);
171:	struct file *anon_inode_getfile_secure(const char *, const struct file_operations *, void *, int, const struct inode *);
180:	static int __anon_inode_getfd(const char *, const struct file_operations *, void *, int, const struct inode *, bool);
257:	static int anon_inode_init(void);
33:	static char *anon_inodefs_dname(struct dentry *, char *, int);
43:	static int anon_inodefs_init_fs_context(struct fs_context *);

File fs/attr.c:
247:	int inode_newsize_ok(const struct inode *, loff_t);
325:	int may_setattr(struct user_namespace *, struct inode *, unsigned int);
380:	int notify_change(struct user_namespace *, struct dentry *, struct iattr *, struct inode **);
302:	void setattr_copy(struct user_namespace *, struct inode *, const struct iattr *);
164:	int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
36:	int setattr_should_drop_sgid(struct user_namespace *, const struct inode *);
66:	int setattr_should_drop_suidgid(struct user_namespace *, struct inode *);

File fs/autofs/dev-ioctl.c:
738:	void autofs_dev_ioctl_exit(void);
725:	int autofs_dev_ioctl_init(void);
688:	static long autofs_dev_ioctl(struct file *, unsigned int, unsigned long);
473:	static int autofs_dev_ioctl_askumount(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
391:	static int autofs_dev_ioctl_catatonic(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
289:	static int autofs_dev_ioctl_closemount(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
459:	static int autofs_dev_ioctl_expire(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
314:	static int autofs_dev_ioctl_fail(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
504:	static int autofs_dev_ioctl_ismountpoint(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
258:	static int autofs_dev_ioctl_openmount(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
174:	static int autofs_dev_ioctl_protosubver(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
165:	static int autofs_dev_ioctl_protover(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
300:	static int autofs_dev_ioctl_ready(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
420:	static int autofs_dev_ioctl_requester(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
338:	static int autofs_dev_ioctl_setpipefd(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
400:	static int autofs_dev_ioctl_timeout(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);
154:	static int autofs_dev_ioctl_version(struct file *, struct autofs_sb_info *, struct autofs_dev_ioctl *);

File fs/autofs/expire.c:
575:	int autofs_do_expire_multi(struct super_block *, struct vfsmount *, struct autofs_sb_info *, unsigned int);
611:	int autofs_expire_multi(struct super_block *, struct vfsmount *, struct autofs_sb_info *, int *);
536:	int autofs_expire_run(struct super_block *, struct vfsmount *, struct autofs_sb_info *, struct autofs_packet_expire *);
489:	int autofs_expire_wait(const struct path *, int);
420:	static struct dentry *autofs_expire_indirect(struct super_block *, struct vfsmount *, struct autofs_sb_info *, unsigned int);
29:	static int autofs_mount_busy(struct vfsmount *, struct dentry *, unsigned int);
115:	static struct dentry *get_next_positive_dentry(struct dentry *, struct dentry *);
321:	static struct dentry *should_expire(struct dentry *, struct vfsmount *, unsigned long, unsigned int);

File fs/autofs/init.c:
10:	static struct dentry *autofs_mount(struct file_system_type *, int, const char *, void *);
38:	static void exit_autofs_fs(void);
25:	static int init_autofs_fs(void);

File fs/autofs/inode.c:
28:	void autofs_clean_ino(struct autofs_info *);
221:	int autofs_fill_super(struct super_block *, void *, int);
35:	void autofs_free_ino(struct autofs_info *);
361:	struct inode *autofs_get_inode(struct super_block *, umode_t);
40:	void autofs_kill_sb(struct super_block *);
13:	struct autofs_info *autofs_new_ino(struct autofs_sb_info *);
101:	static void autofs_evict_inode(struct inode *);
62:	static int autofs_show_options(struct seq_file *, struct dentry *);

File fs/autofs/root.c:
843:	int is_autofs_dentry(struct dentry *);
331:	static struct vfsmount *autofs_d_automount(struct path *);
419:	static int autofs_d_manage(const struct path *, bool);
109:	static void autofs_dentry_release(struct dentry *);
723:	static int autofs_dir_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
78:	static int autofs_dir_open(struct inode *, struct file *);
546:	static int autofs_dir_permission(struct user_namespace *, struct inode *, int);
692:	static int autofs_dir_rmdir(struct inode *, struct dentry *);
566:	static int autofs_dir_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
623:	static int autofs_dir_unlink(struct inode *, struct dentry *);
493:	static struct dentry *autofs_lookup(struct inode *, struct dentry *, unsigned int);
905:	static long autofs_root_ioctl(struct file *, unsigned int, unsigned long);
265:	static int do_expire_wait(const struct path *, bool);

File fs/autofs/symlink.c:
8:	static const char *autofs_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/autofs/waitq.c:
15:	void autofs_catatonic_mode(struct autofs_sb_info *);
302:	int autofs_wait(struct autofs_sb_info *, const struct path *, enum autofs_notify);
486:	int autofs_wait_release(struct autofs_sb_info *, autofs_wqt_t, int);
78:	static void autofs_notify_daemon(struct autofs_sb_info *, struct autofs_wait_queue *, int);

File fs/bad_inode.c:
246:	void iget_failed(struct inode *);
233:	bool is_bad_inode(struct inode *);
207:	void make_bad_inode(struct inode *);
20:	static int bad_file_open(struct inode *, struct file *);
142:	static int bad_inode_atomic_open(struct inode *, struct dentry *, struct file *, unsigned int, umode_t);
30:	static int bad_inode_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
129:	static int bad_inode_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64);
124:	static struct posix_acl *bad_inode_get_acl(struct inode *, int, bool);
117:	static const char *bad_inode_get_link(struct dentry *, struct inode *, struct delayed_call *);
98:	static int bad_inode_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
43:	static int bad_inode_link(struct dentry *, struct inode *, struct dentry *);
111:	static ssize_t bad_inode_listxattr(struct dentry *, char *, size_t);
37:	static struct dentry *bad_inode_lookup(struct inode *, struct dentry *, unsigned int);
61:	static int bad_inode_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
72:	static int bad_inode_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
92:	static int bad_inode_permission(struct user_namespace *, struct inode *, int);
86:	static int bad_inode_readlink(struct dentry *, char *, int);
78:	static int bad_inode_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
67:	static int bad_inode_rmdir(struct inode *, struct dentry *);
156:	static int bad_inode_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
105:	static int bad_inode_setattr(struct user_namespace *, struct dentry *, struct iattr *);
54:	static int bad_inode_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
149:	static int bad_inode_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
49:	static int bad_inode_unlink(struct inode *, struct dentry *);
136:	static int bad_inode_update_time(struct inode *, struct timespec64 *, int);

File fs/binfmt_elf.c:
174:	static int create_elf_tables(struct linux_binprm *, const struct elf64_hdr *, unsigned long, unsigned long, unsigned long);
2021:	static int elf_core_dump(struct coredump_params *);
365:	static unsigned long elf_map(struct file *, unsigned long, const struct elf64_phdr *, int, int, unsigned long);
2164:	static void exit_elf_binfmt(void);
2158:	static int init_elf_binfmt(void);
818:	static int load_elf_binary(struct linux_binprm *);
586:	static unsigned long load_elf_interp(struct elf64_hdr *, struct file *, unsigned long, struct elf64_phdr *, struct arch_elf_state *);
461:	static struct elf64_phdr *load_elf_phdrs(const struct elf64_hdr *, struct file *);
432:	static unsigned long maximum_alignment(struct elf64_phdr *, int);
136:	static int padzero(unsigned long);
761:	static int parse_elf_properties(struct file *, const struct elf64_phdr *, struct arch_elf_state *);
112:	static int set_brk(unsigned long, unsigned long, int);
404:	static unsigned long total_mapping_size(const struct elf64_phdr *, int);
1473:	static int writenote(struct memelfnote *, struct coredump_params *);

File fs/binfmt_script.c:
151:	static void exit_script_binfmt(void);
145:	static int init_script_binfmt(void);
34:	static int load_script(struct linux_binprm *);

File fs/btrfs/accessors.c:
164:	u16 btrfs_get_16(const struct extent_buffer *, const void *, unsigned long);
165:	u32 btrfs_get_32(const struct extent_buffer *, const void *, unsigned long);
166:	u64 btrfs_get_64(const struct extent_buffer *, const void *, unsigned long);
163:	u8 btrfs_get_8(const struct extent_buffer *, const void *, unsigned long);
164:	u16 btrfs_get_token_16(struct btrfs_map_token *, const void *, unsigned long);
165:	u32 btrfs_get_token_32(struct btrfs_map_token *, const void *, unsigned long);
166:	u64 btrfs_get_token_64(struct btrfs_map_token *, const void *, unsigned long);
163:	u8 btrfs_get_token_8(struct btrfs_map_token *, const void *, unsigned long);
27:	void btrfs_init_map_token(struct btrfs_map_token *, struct extent_buffer *);
168:	void btrfs_node_key(const struct extent_buffer *, struct btrfs_disk_key *, int);
164:	void btrfs_set_16(const struct extent_buffer *, void *, unsigned long, u16);
165:	void btrfs_set_32(const struct extent_buffer *, void *, unsigned long, u32);
166:	void btrfs_set_64(const struct extent_buffer *, void *, unsigned long, u64);
163:	void btrfs_set_8(const struct extent_buffer *, void *, unsigned long, u8);
164:	void btrfs_set_token_16(struct btrfs_map_token *, const void *, unsigned long, u16);
165:	void btrfs_set_token_32(struct btrfs_map_token *, const void *, unsigned long, u32);
166:	void btrfs_set_token_64(struct btrfs_map_token *, const void *, unsigned long, u64);
163:	void btrfs_set_token_8(struct btrfs_map_token *, const void *, unsigned long, u8);

File fs/btrfs/acl.c:
58:	int __btrfs_set_acl(struct btrfs_trans_handle *, struct inode *, struct posix_acl *, int);
19:	struct posix_acl *btrfs_get_acl(struct inode *, int, bool);
113:	int btrfs_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);

File fs/btrfs/async-thread.c:
74:	struct btrfs_workqueue *btrfs_alloc_workqueue(struct btrfs_fs_info *, const char *, unsigned int, int, int);
323:	void btrfs_destroy_workqueue(struct btrfs_workqueue *);
338:	void btrfs_flush_workqueue(struct btrfs_workqueue *);
297:	void btrfs_init_work(struct btrfs_work *, btrfs_func_t, btrfs_func_t, btrfs_func_t);
308:	void btrfs_queue_work(struct btrfs_workqueue *, struct btrfs_work *);
55:	struct btrfs_fs_info *btrfs_work_owner(const struct btrfs_work *);
60:	bool btrfs_workqueue_normal_congested(const struct btrfs_workqueue *);
50:	struct btrfs_fs_info *btrfs_workqueue_owner(const struct btrfs_workqueue *);
332:	void btrfs_workqueue_set_max(struct btrfs_workqueue *, int);
260:	static void btrfs_work_helper(struct work_struct *);

File fs/btrfs/backref.c:
1802:	struct btrfs_backref_share_check_ctx *btrfs_alloc_backref_share_check_ctx(void);
3301:	int btrfs_backref_add_tree_node(struct btrfs_backref_cache *, struct btrfs_path *, struct btrfs_backref_iter *, struct btrfs_key *, struct btrfs_backref_node *);
2969:	struct btrfs_backref_edge *btrfs_backref_alloc_edge(struct btrfs_backref_cache *);
2948:	struct btrfs_backref_node *btrfs_backref_alloc_node(struct btrfs_backref_cache *, u64, int);
2987:	void btrfs_backref_cleanup_node(struct btrfs_backref_cache *, struct btrfs_backref_node *);
3528:	void btrfs_backref_error_cleanup(struct btrfs_backref_cache *, struct btrfs_backref_node *);
3427:	int btrfs_backref_finish_upper_links(struct btrfs_backref_cache *, struct btrfs_backref_node *);
2931:	void btrfs_backref_init_cache(struct btrfs_fs_info *, struct btrfs_backref_cache *, int);
2759:	struct btrfs_backref_iter *btrfs_backref_iter_alloc(struct btrfs_fs_info *);
2879:	int btrfs_backref_iter_next(struct btrfs_backref_iter *);
2781:	int btrfs_backref_iter_start(struct btrfs_backref_iter *, u64);
3021:	void btrfs_backref_release_cache(struct btrfs_backref_cache *);
1695:	int btrfs_find_all_leafs(struct btrfs_backref_walk_ctx *);
1789:	int btrfs_find_all_roots(struct btrfs_backref_walk_ctx *, bool);
1980:	int btrfs_find_one_extref(struct btrfs_root *, u64, u64, struct btrfs_path *, struct btrfs_inode_extref **, u64 *);
1815:	void btrfs_free_backref_share_ctx(struct btrfs_backref_share_check_ctx *);
1844:	int btrfs_is_data_extent_shared(struct btrfs_inode *, u64, u64, struct btrfs_backref_share_check_ctx *);
209:	void btrfs_prelim_ref_exit(void);
197:	int btrfs_prelim_ref_init(void);
2062:	char *btrfs_ref_to_path(struct btrfs_root *, struct btrfs_path *, u32, unsigned long, struct extent_buffer *, u64, char *, u32);
2133:	int extent_from_logical(struct btrfs_fs_info *, u64, struct btrfs_path *, struct btrfs_key *, u64 *);
2751:	void free_ipath(struct inode_fs_paths *);
2698:	struct btrfs_data_container *init_data_container(u32);
2728:	struct inode_fs_paths *init_ipath(s32, struct btrfs_root *, struct btrfs_path *);
2340:	int iterate_extent_inodes(struct btrfs_backref_walk_ctx *, bool, iterate_extent_inodes_t *, void *);
2481:	int iterate_inodes_from_logical(u64, struct btrfs_fs_info *, struct btrfs_path *, void *, bool);
2680:	int paths_from_inode(u64, struct inode_fs_paths *);
2266:	int tree_backref_for_extent(unsigned long *, struct extent_buffer *, struct btrfs_key *, struct btrfs_extent_item *, u32, u64 *, u8 *);
1735:	static int btrfs_find_all_roots_safe(struct btrfs_backref_walk_ctx *);
2461:	static int build_ino_list(u64, u64, u64, u64, void *);
35:	static int check_extent_in_eb(struct btrfs_backref_walk_ctx *, const struct btrfs_key *, const struct extent_buffer *, const struct btrfs_file_extent_item *, struct extent_inode_elem **);
103:	static int find_extent_in_eb(struct btrfs_backref_walk_ctx *, const struct extent_buffer *, struct extent_inode_elem **);
1378:	static int find_parent_nodes(struct btrfs_backref_walk_ctx *, struct share_check *);
277:	static void prelim_ref_insert(const struct btrfs_fs_info *, struct preftree *, struct prelim_ref *, struct share_check *);

File fs/btrfs/bio.c:
39:	struct bio *btrfs_bio_alloc(unsigned int, blk_opf_t, btrfs_bio_end_io_t, void *);
49:	struct bio *btrfs_bio_clone_partial(struct bio *, u64, u64, btrfs_bio_end_io_t, void *);
387:	void btrfs_bioset_exit(void);
378:	int btrfs_bioset_init(void);
289:	int btrfs_repair_io_failure(struct btrfs_fs_info *, u64, u64, u64, u64, struct page *, unsigned int, int);
227:	void btrfs_submit_bio(struct btrfs_fs_info *, struct bio *, int);
152:	static void btrfs_clone_write_end_io(struct bio *);
89:	static void btrfs_end_bio_work(struct work_struct *);
66:	static void btrfs_log_dev_io_error(struct bio *, struct btrfs_device *);
126:	static void btrfs_orig_write_end_io(struct bio *);
114:	static void btrfs_raid56_end_io(struct bio *);
96:	static void btrfs_simple_end_io(struct bio *);
166:	static void btrfs_submit_dev_bio(struct btrfs_device *, struct bio *);

File fs/btrfs/block-group.c:
503:	u64 add_new_free_space(struct btrfs_block_group *, u64, u64);
3435:	int btrfs_add_reserved_bytes(struct btrfs_block_group *, u64, u64, int);
745:	int btrfs_cache_block_group(struct btrfs_block_group *, bool);
3745:	int btrfs_chunk_alloc(struct btrfs_trans_handle *, u64, enum btrfs_chunk_alloc_enum);
2462:	void btrfs_create_pending_block_groups(struct btrfs_trans_handle *);
368:	void btrfs_dec_block_group_reservations(struct btrfs_fs_info *, const u64);
2728:	void btrfs_dec_block_group_ro(struct btrfs_block_group *);
4213:	void btrfs_dec_block_group_swap_extents(struct btrfs_block_group *, int);
354:	void btrfs_dec_nocow_writers(struct btrfs_block_group *);
1300:	void btrfs_delete_unused_bgs(struct btrfs_fs_info *);
3537:	int btrfs_force_chunk_alloc(struct btrfs_trans_handle *, u64);
4047:	int btrfs_free_block_groups(struct btrfs_fs_info *);
3479:	void btrfs_free_reserved_bytes(struct btrfs_block_group *, u64, int);
4160:	void btrfs_freeze_block_group(struct btrfs_block_group *);
113:	u64 btrfs_get_alloc_profile(struct btrfs_fs_info *, u64);
133:	void btrfs_get_block_group(struct btrfs_block_group *);
405:	struct btrfs_caching_control *btrfs_get_caching_control(struct btrfs_block_group *);
2625:	int btrfs_inc_block_group_ro(struct btrfs_block_group *, bool);
4199:	bool btrfs_inc_block_group_swap_extents(struct btrfs_block_group *);
317:	struct btrfs_block_group *btrfs_inc_nocow_writers(struct btrfs_fs_info *, u64);
269:	struct btrfs_block_group *btrfs_lookup_block_group(struct btrfs_fs_info *, u64);
260:	struct btrfs_block_group *btrfs_lookup_first_block_group(struct btrfs_fs_info *, u64);
2534:	struct btrfs_block_group *btrfs_make_block_group(struct btrfs_trans_handle *, u64, u64, u64, u64);
1718:	void btrfs_mark_bg_to_reclaim(struct btrfs_block_group *);
1508:	void btrfs_mark_bg_unused(struct btrfs_block_group *);
275:	struct btrfs_block_group *btrfs_next_block_group(struct btrfs_block_group *);
138:	void btrfs_put_block_group(struct btrfs_block_group *);
4018:	void btrfs_put_block_group_cache(struct btrfs_fs_info *);
422:	void btrfs_put_caching_control(struct btrfs_caching_control *);
2227:	int btrfs_read_block_groups(struct btrfs_fs_info *);
1710:	void btrfs_reclaim_bgs(struct btrfs_fs_info *);
1567:	void btrfs_reclaim_bgs_work(struct work_struct *);
875:	int btrfs_remove_block_group(struct btrfs_trans_handle *, u64, struct extent_map *);
4002:	void btrfs_reserve_chunk_metadata(struct btrfs_trans_handle *, bool);
1829:	int btrfs_rmap_block(struct btrfs_fs_info *, u64, struct block_device *, u64, u64 **, int *, int *);
2983:	int btrfs_setup_space_cache(struct btrfs_trans_handle *);
3021:	int btrfs_start_dirty_block_groups(struct btrfs_trans_handle *);
1126:	struct btrfs_trans_handle *btrfs_start_trans_remove_block_group(struct btrfs_fs_info *, const u64);
4165:	void btrfs_unfreeze_block_group(struct btrfs_block_group *);
3311:	int btrfs_update_block_group(struct btrfs_trans_handle *, u64, u64, bool);
441:	void btrfs_wait_block_group_cache_progress(struct btrfs_block_group *, u64);
380:	void btrfs_wait_block_group_reservations(struct btrfs_block_group *);
363:	void btrfs_wait_nocow_writers(struct btrfs_block_group *);
3187:	int btrfs_write_dirty_block_groups(struct btrfs_trans_handle *);
3973:	void check_system_chunk(struct btrfs_trans_handle *, u64);
220:	static struct btrfs_block_group *block_group_cache_tree_search(struct btrfs_fs_info *, u64, int);
456:	static int btrfs_caching_ctl_wait_done(struct btrfs_block_group *, struct btrfs_caching_control *);
1961:	static struct btrfs_block_group *btrfs_create_block_group_cache(struct btrfs_fs_info *, u64);
463:	static int btrfs_wait_block_group_cache_done(struct btrfs_block_group *);
2818:	static int cache_save_setup(struct btrfs_block_group *, struct btrfs_trans_handle *, struct btrfs_path *);
672:	static void caching_thread(struct btrfs_work *);
1251:	static bool clean_pinned_extents(struct btrfs_trans_handle *, struct btrfs_block_group *);
1910:	static int exclude_super_stripes(struct btrfs_block_group *);
2176:	static int fill_dummy_bgs(struct btrfs_fs_info *);
1179:	static int inc_block_group_ro(struct btrfs_block_group *, int);
1525:	static int reclaim_bgs_cmp(void *, const struct list_head *, const struct list_head *);
3898:	static void reserve_chunk_space(struct btrfs_trans_handle *, u64, u64);
2756:	static int update_block_group_item(struct btrfs_trans_handle *, struct btrfs_path *, struct btrfs_block_group *);

File fs/btrfs/block-rsv.c:
192:	struct btrfs_block_rsv *btrfs_alloc_block_rsv(struct btrfs_fs_info *, enum btrfs_rsv_type);
214:	int btrfs_block_rsv_add(struct btrfs_fs_info *, struct btrfs_block_rsv *, u64, enum btrfs_reserve_flush_enum);
316:	void btrfs_block_rsv_add_bytes(struct btrfs_block_rsv *, u64, bool);
230:	int btrfs_block_rsv_check(struct btrfs_block_rsv *, int);
162:	int btrfs_block_rsv_migrate(struct btrfs_block_rsv *, struct btrfs_block_rsv *, u64, bool);
247:	int btrfs_block_rsv_refill(struct btrfs_fs_info *, struct btrfs_block_rsv *, u64, enum btrfs_reserve_flush_enum);
277:	u64 btrfs_block_rsv_release(struct btrfs_fs_info *, struct btrfs_block_rsv *, u64, u64 *);
301:	int btrfs_block_rsv_use_bytes(struct btrfs_block_rsv *, u64);
205:	void btrfs_free_block_rsv(struct btrfs_fs_info *, struct btrfs_block_rsv *);
176:	void btrfs_init_block_rsv(struct btrfs_block_rsv *, enum btrfs_rsv_type);
421:	void btrfs_init_global_block_rsv(struct btrfs_fs_info *);
183:	void btrfs_init_metadata_block_rsv(struct btrfs_fs_info *, struct btrfs_block_rsv *, enum btrfs_rsv_type);
396:	void btrfs_init_root_block_rsv(struct btrfs_root *);
438:	void btrfs_release_global_block_rsv(struct btrfs_fs_info *);
328:	void btrfs_update_global_block_rsv(struct btrfs_fs_info *);
474:	struct btrfs_block_rsv *btrfs_use_block_rsv(struct btrfs_trans_handle *, struct btrfs_root *, u32);

File fs/btrfs/btrfs_inode.h:
345:	static void btrfs_set_inode_full_sync(struct btrfs_inode *);

File fs/btrfs/compression.c:
1655:	int btrfs_compress_heuristic(struct inode *, u64, u64);
57:	bool btrfs_compress_is_valid_type(const char *, size_t);
1198:	int btrfs_compress_pages(unsigned int, struct address_space *, u64, struct page **, unsigned long *, unsigned long *, unsigned long *);
1734:	unsigned int btrfs_compress_str2level(unsigned int, const char *);
42:	const char *btrfs_compress_type2str(enum btrfs_compression_type);
1235:	int btrfs_decompress(int, const u8 *, struct page *, unsigned long, size_t, size_t);
1296:	int btrfs_decompress_buf2page(const char *, u32, struct compressed_bio *, u32);
1258:	void btrfs_exit_compress(void);
1016:	struct list_head *btrfs_get_workspace(int, unsigned int);
1249:	int btrfs_init_compress(void);
1115:	void btrfs_put_workspace(int, struct list_head *);
663:	void btrfs_submit_compressed_read(struct inode *, struct bio *, int);
379:	blk_status_t btrfs_submit_compressed_write(struct btrfs_inode *, u64, unsigned int, u64, unsigned int, struct page **, unsigned int, blk_opf_t, struct cgroup_subsys_state *, bool);
515:	static int add_ra_bio_pages(struct inode *, u64, struct compressed_bio *, int *, unsigned long *);
336:	static struct bio *alloc_compressed_bio(struct compressed_bio *, u64, blk_opf_t, btrfs_bio_end_io_t, u64 *);
938:	static struct list_head *alloc_workspace(int, unsigned int);
996:	static void btrfs_cleanup_workspace_manager(int);
288:	static void btrfs_finish_compressed_write_work(struct work_struct *);
970:	static void btrfs_init_workspace_manager(int);
172:	static void end_compressed_bio_read(struct btrfs_bio *);
303:	static void end_compressed_bio_write(struct btrfs_bio *);
220:	static void end_compressed_writeback(struct inode *, const struct compressed_bio *);
144:	static void finish_compressed_bio_read(struct compressed_bio *);
255:	static void finish_compressed_bio_write(struct compressed_bio *);
954:	static void free_workspace(int, struct list_head *);

File fs/btrfs/ctree.c:
229:	bool abort_should_print_stack(int);
185:	struct btrfs_path *btrfs_alloc_path(void);
932:	int btrfs_bin_search(struct extent_buffer *, const struct btrfs_key *, int *);
366:	int btrfs_block_can_be_shared(struct btrfs_root *, struct extent_buffer *);
751:	int btrfs_comp_cpu_keys(const struct btrfs_key *, const struct btrfs_key *);
305:	int btrfs_copy_root(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, struct extent_buffer **, u64);
659:	int btrfs_cow_block(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, struct extent_buffer *, int, struct extent_buffer **, enum btrfs_lock_nesting);
5037:	void btrfs_ctree_exit(void);
5027:	int btrfs_ctree_init(void);
4360:	int btrfs_del_items(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int, int);
4254:	int btrfs_duplicate_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, const struct btrfs_key *);
4014:	void btrfs_extend_item(struct btrfs_path *, u32);
1700:	int btrfs_find_item(struct btrfs_root *, struct btrfs_path *, u64, u64, u8, struct btrfs_key *);
4669:	int btrfs_find_next_key(struct btrfs_root *, struct btrfs_path *, struct btrfs_key *, int, u64);
193:	void btrfs_free_path(struct btrfs_path *);
2487:	int btrfs_get_next_valid_item(struct btrfs_root *, struct btrfs_key *, struct btrfs_path *);
180:	size_t btrfs_get_num_csums(void);
4196:	int btrfs_insert_empty_items(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, const struct btrfs_item_batch *);
4223:	int btrfs_insert_item(struct btrfs_trans_handle *, struct btrfs_root *, const struct btrfs_key *, void *, u32);
3023:	int btrfs_leaf_free_space(struct extent_buffer *);
4935:	int btrfs_next_old_item(struct btrfs_root *, struct btrfs_path *, u64);
4734:	int btrfs_next_old_leaf(struct btrfs_root *, struct btrfs_path *, u64);
4493:	int btrfs_prev_leaf(struct btrfs_root *, struct btrfs_path *);
4991:	int btrfs_previous_extent_item(struct btrfs_root *, struct btrfs_path *, u64);
4949:	int btrfs_previous_item(struct btrfs_root *, struct btrfs_path *, u64, int);
957:	struct extent_buffer *btrfs_read_node_slot(struct extent_buffer *, int);
773:	int btrfs_realloc_node(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, int, u64 *, struct btrfs_key *);
207:	void btrfs_release_path(struct btrfs_path *);
250:	struct extent_buffer *btrfs_root_node(struct btrfs_root *);
2461:	int btrfs_search_backwards(struct btrfs_root *, struct btrfs_key *, struct btrfs_path *);
4554:	int btrfs_search_forward(struct btrfs_root *, struct btrfs_key *, struct btrfs_path *, u64);
2285:	int btrfs_search_old_slot(struct btrfs_root *, const struct btrfs_key *, struct btrfs_path *, u64);
2034:	int btrfs_search_slot(struct btrfs_trans_handle *, struct btrfs_root *, const struct btrfs_key *, struct btrfs_path *, int, int);
2390:	int btrfs_search_slot_for_read(struct btrfs_root *, const struct btrfs_key *, struct btrfs_path *, int, int);
2550:	void btrfs_set_item_key_safe(struct btrfs_fs_info *, struct btrfs_path *, const struct btrfs_key *);
4177:	void btrfs_setup_item_for_insert(struct btrfs_root *, struct btrfs_path *, const struct btrfs_key *, u32);
3901:	int btrfs_split_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, const struct btrfs_key *, unsigned long);
172:	const char *btrfs_super_csum_driver(u16);
162:	const char *btrfs_super_csum_name(u16);
153:	int btrfs_super_csum_size(const struct btrfs_super_block *);
3923:	void btrfs_truncate_item(struct btrfs_path *, u32, int);
505:	static int __btrfs_cow_block(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, struct extent_buffer *, int, struct extent_buffer **, u64, u64, enum btrfs_lock_nesting);
3262:	static int __push_leaf_left(struct btrfs_path *, int, int, struct extent_buffer *, int, u32, u32);
3044:	static int __push_leaf_right(struct btrfs_path *, int, int, struct extent_buffer *, int, u32, u32);
992:	static int balance_level(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
2735:	static int balance_node_right(struct btrfs_trans_handle *, struct extent_buffer *, struct extent_buffer *);
4336:	static void btrfs_del_leaf(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct extent_buffer *);
2616:	static bool check_sibling_keys(struct extent_buffer *, struct extent_buffer *);
3465:	static void copy_for_split(struct btrfs_trans_handle *, struct btrfs_path *, struct extent_buffer *, struct extent_buffer *, int, int, int);
4286:	static void del_ptr(struct btrfs_root *, struct btrfs_path *, int, int);
866:	static int generic_bin_search(struct extent_buffer *, int, const struct btrfs_key *, int *);
2806:	static int insert_new_root(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
2868:	static void insert_ptr(struct btrfs_trans_handle *, struct btrfs_path *, struct btrfs_disk_key *, u64, int, int);
3529:	static int push_for_double_split(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
3399:	static int push_leaf_left(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int, int, int, u32);
3181:	static int push_leaf_right(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int, int, int, u32);
2655:	static int push_node_left(struct btrfs_trans_handle *, struct extent_buffer *, struct extent_buffer *, int);
1220:	static int push_nodes_for_insert(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
1530:	static int read_block_for_search(struct btrfs_root *, struct btrfs_path *, struct extent_buffer **, int, int, const struct btrfs_key *);
1443:	static void reada_for_balance(struct btrfs_path *, int);
1360:	static void reada_for_search(struct btrfs_fs_info *, struct btrfs_path *, int, int, u64);
4082:	static void setup_items_for_insert(struct btrfs_root *, struct btrfs_path *, const struct btrfs_item_batch *);
3759:	static int setup_leaf_for_split(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
3825:	static int split_item(struct btrfs_path *, const struct btrfs_key *, unsigned long);
3589:	static int split_leaf(struct btrfs_trans_handle *, struct btrfs_root *, const struct btrfs_key *, struct btrfs_path *, int, int);
2916:	static int split_node(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
1476:	static void unlock_up(struct btrfs_path *, int, int, int, int *);
384:	static int update_ref_for_cow(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, struct extent_buffer *, int *);

File fs/btrfs/defrag.c:
125:	int btrfs_add_inode_defrag(struct btrfs_trans_handle *, struct btrfs_inode *, u32);
1363:	void btrfs_auto_defrag_exit(void);
1368:	int btrfs_auto_defrag_init(void);
216:	void btrfs_cleanup_defrag_inodes(struct btrfs_fs_info *);
1221:	int btrfs_defrag_file(struct inode *, struct file_ra_state *, struct btrfs_ioctl_defrag_range_args *, u64, unsigned long);
346:	int btrfs_defrag_leaves(struct btrfs_trans_handle *, struct btrfs_root *);
298:	int btrfs_run_defrag_inodes(struct btrfs_fs_info *);
666:	static bool defrag_check_next_extent(struct inode *, struct extent_map *, u32, u64, bool);
823:	static int defrag_collect_targets(struct btrfs_inode *, u64, u64, u32, u64, bool, bool, struct list_head *, u64 *);
610:	static struct extent_map *defrag_lookup_extent(struct inode *, u64, u64, bool);

File fs/btrfs/delalloc-space.c:
116:	int btrfs_alloc_data_chunk_ondemand(struct btrfs_inode *, u64);
131:	int btrfs_check_data_free_space(struct btrfs_inode *, struct extent_changeset **, u64, u64, bool);
420:	void btrfs_delalloc_release_extents(struct btrfs_inode *, u64);
391:	void btrfs_delalloc_release_metadata(struct btrfs_inode *, u64, bool);
493:	void btrfs_delalloc_release_space(struct btrfs_inode *, struct extent_changeset *, u64, u64, bool);
300:	int btrfs_delalloc_reserve_metadata(struct btrfs_inode *, u64, u64, bool);
462:	int btrfs_delalloc_reserve_space(struct btrfs_inode *, struct extent_changeset **, u64, u64);
191:	void btrfs_free_reserved_data_space(struct btrfs_inode *, struct extent_changeset *, u64, u64);
173:	void btrfs_free_reserved_data_space_noquota(struct btrfs_fs_info *, u64);

File fs/btrfs/delayed-inode.c:
1372:	void btrfs_assert_delayed_root_empty(struct btrfs_fs_info *);
1390:	void btrfs_balance_delayed_items(struct btrfs_fs_info *);
1222:	int btrfs_commit_inode_delayed_inode(struct btrfs_inode *);
1185:	int btrfs_commit_inode_delayed_items(struct btrfs_trans_handle *, struct btrfs_inode *);
1912:	int btrfs_delayed_delete_inode_ref(struct btrfs_inode *);
41:	void btrfs_delayed_inode_exit(void);
29:	int btrfs_delayed_inode_init(void);
1880:	int btrfs_delayed_update_inode(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_inode *);
1561:	int btrfs_delete_delayed_dir_index(struct btrfs_trans_handle *, struct btrfs_inode *, u64);
2041:	void btrfs_destroy_delayed_inodes(struct btrfs_fs_info *);
1821:	int btrfs_fill_inode(struct inode *, u32 *);
1612:	int btrfs_inode_delayed_dir_index_count(struct btrfs_inode *);
1417:	int btrfs_insert_delayed_dir_index(struct btrfs_trans_handle *, const char *, int, struct btrfs_inode *, struct btrfs_disk_key *, u8, u64);
2005:	void btrfs_kill_all_delayed_nodes(struct btrfs_root *);
1993:	void btrfs_kill_delayed_inode_items(struct btrfs_inode *);
2055:	void btrfs_log_get_delayed_items(struct btrfs_inode *, struct list_head *, struct list_head *);
2123:	void btrfs_log_put_delayed_items(struct btrfs_inode *, struct list_head *, struct list_head *);
1727:	int btrfs_readdir_delayed_dir_index(struct dir_context *, struct list_head *);
1634:	bool btrfs_readdir_get_delayed_items(struct inode *, struct list_head *, struct list_head *);
1681:	void btrfs_readdir_put_delayed_items(struct inode *, struct list_head *, struct list_head *);
1276:	void btrfs_remove_delayed_node(struct btrfs_inode *);
1175:	int btrfs_run_delayed_items(struct btrfs_trans_handle *);
1180:	int btrfs_run_delayed_items_nr(struct btrfs_trans_handle *, int);
1706:	int btrfs_should_delete_dir_index(struct list_head *, u64);
359:	static int __btrfs_add_delayed_item(struct btrfs_delayed_node *, struct btrfs_delayed_item *);
1105:	static int __btrfs_commit_inode_delayed_items(struct btrfs_trans_handle *, struct btrfs_path *, struct btrfs_delayed_node *);
1956:	static void __btrfs_kill_delayed_node(struct btrfs_delayed_node *);
245:	static void __btrfs_release_delayed_node(struct btrfs_delayed_node *, int);
1129:	static int __btrfs_run_delayed_items(struct btrfs_trans_handle *, int);
997:	static int __btrfs_update_delayed_inode(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_delayed_node *);
1294:	static void btrfs_async_run_delayed_root(struct btrfs_work *);
60:	static struct btrfs_delayed_node *btrfs_get_delayed_node(struct btrfs_inode *);
116:	static struct btrfs_delayed_node *btrfs_get_or_create_delayed_node(struct btrfs_inode *);
218:	static struct btrfs_delayed_node *btrfs_next_delayed_node(struct btrfs_delayed_node *);
968:	static void btrfs_release_delayed_inode(struct btrfs_delayed_node *);
983:	static void btrfs_release_delayed_iref(struct btrfs_delayed_node *);
438:	static void btrfs_release_delayed_item(struct btrfs_delayed_item *);

File fs/btrfs/delayed-inode.h:
101:	static void btrfs_init_delayed_root(struct btrfs_delayed_root *);

File fs/btrfs/delayed-ref.c:
1005:	int btrfs_add_delayed_data_ref(struct btrfs_trans_handle *, struct btrfs_ref *, u64);
1094:	int btrfs_add_delayed_extent_op(struct btrfs_trans_handle *, u64, u64, struct btrfs_delayed_extent_op *);
912:	int btrfs_add_delayed_tree_ref(struct btrfs_trans_handle *, struct btrfs_ref *, struct btrfs_delayed_extent_op *);
532:	int btrfs_check_delayed_seq(struct btrfs_fs_info *, u64);
31:	bool btrfs_check_space_for_delayed_refs(struct btrfs_fs_info *);
1137:	void btrfs_delayed_ref_exit(void);
1145:	int btrfs_delayed_ref_init(void);
419:	int btrfs_delayed_ref_lock(struct btrfs_delayed_ref_root *, struct btrfs_delayed_ref_head *);
199:	int btrfs_delayed_refs_rsv_refill(struct btrfs_fs_info *, enum btrfs_reserve_flush_enum);
83:	void btrfs_delayed_refs_rsv_release(struct btrfs_fs_info *, int);
584:	void btrfs_delete_ref_head(struct btrfs_delayed_ref_root *, struct btrfs_delayed_ref_head *);
1130:	struct btrfs_delayed_ref_head *btrfs_find_delayed_ref_head(struct btrfs_delayed_ref_root *, u64);
502:	void btrfs_merge_delayed_refs(struct btrfs_trans_handle *, struct btrfs_delayed_ref_root *, struct btrfs_delayed_ref_head *);
151:	void btrfs_migrate_to_delayed_refs_rsv(struct btrfs_fs_info *, struct btrfs_block_rsv *, u64);
547:	struct btrfs_delayed_ref_head *btrfs_select_ref_head(struct btrfs_delayed_ref_root *);
56:	int btrfs_should_throttle_delayed_refs(struct btrfs_trans_handle *);
112:	void btrfs_update_delayed_refs_rsv(struct btrfs_trans_handle *);
806:	static struct btrfs_delayed_ref_head *add_delayed_ref_head(struct btrfs_trans_handle *, struct btrfs_delayed_ref_head *, struct btrfs_qgroup_extent_record *, int, int *);
274:	static int comp_refs(struct btrfs_delayed_ref_node *, struct btrfs_delayed_ref_node *, bool);
440:	static void drop_delayed_ref(struct btrfs_trans_handle *, struct btrfs_delayed_ref_root *, struct btrfs_delayed_ref_head *, struct btrfs_delayed_ref_node *);
604:	static int insert_delayed_ref(struct btrfs_trans_handle *, struct btrfs_delayed_ref_root *, struct btrfs_delayed_ref_head *, struct btrfs_delayed_ref_node *);
659:	static void update_existing_head_ref(struct btrfs_trans_handle *, struct btrfs_delayed_ref_head *, struct btrfs_delayed_ref_head *);

File fs/btrfs/dev-replace.c:
1278:	void btrfs_bio_counter_inc_blocked(struct btrfs_fs_info *);
1272:	void btrfs_bio_counter_sub(struct btrfs_fs_info *, s64);
729:	int btrfs_dev_replace_by_ioctl(struct btrfs_fs_info *, struct btrfs_ioctl_dev_replace_args *);
1054:	int btrfs_dev_replace_cancel(struct btrfs_fs_info *);
1245:	int btrfs_dev_replace_is_ongoing(struct btrfs_dev_replace *);
1034:	void btrfs_dev_replace_status(struct btrfs_fs_info *, struct btrfs_ioctl_dev_replace_args *);
1140:	void btrfs_dev_replace_suspend_for_unmount(struct btrfs_fs_info *);
547:	bool btrfs_finish_block_group_to_copy(struct btrfs_device *, struct btrfs_block_group *, u64);
73:	int btrfs_init_dev_replace(struct btrfs_fs_info *);
1167:	int btrfs_resume_dev_replace_async(struct btrfs_fs_info *);
345:	int btrfs_run_dev_replace(struct btrfs_trans_handle *);
835:	static int btrfs_dev_replace_finishing(struct btrfs_fs_info *, int);
1218:	static int btrfs_dev_replace_kthread(void *);
809:	static void btrfs_dev_replace_update_device_in_mapping_tree(struct btrfs_fs_info *, struct btrfs_device *, struct btrfs_device *);
762:	static void btrfs_rm_dev_replace_blocked(struct btrfs_fs_info *);
772:	static void btrfs_rm_dev_replace_unblocked(struct btrfs_fs_info *);

File fs/btrfs/dev-replace.h:
31:	static void btrfs_bio_counter_dec(struct btrfs_fs_info *);

File fs/btrfs/dir-item.c:
233:	int btrfs_check_dir_item_collision(struct btrfs_root *, u64, const struct fscrypt_str *);
417:	int btrfs_delete_one_dir_name(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_dir_item *);
109:	int btrfs_insert_dir_item(struct btrfs_trans_handle *, const struct fscrypt_str *, struct btrfs_inode *, struct btrfs_key *, u8, u64);
56:	int btrfs_insert_xattr_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, const char *, u16, const void *, u16);
308:	struct btrfs_dir_item *btrfs_lookup_dir_index_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, u64, const struct fscrypt_str *, int);
212:	struct btrfs_dir_item *btrfs_lookup_dir_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, const struct fscrypt_str *, int);
356:	struct btrfs_dir_item *btrfs_lookup_xattr(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, const char *, u16, int);
381:	struct btrfs_dir_item *btrfs_match_dir_item_name(struct btrfs_fs_info *, struct btrfs_path *, const char *, int);
329:	struct btrfs_dir_item *btrfs_search_dir_index_item(struct btrfs_root *, struct btrfs_path *, u64, const struct fscrypt_str *);
21:	static struct btrfs_dir_item *insert_with_overflow(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_key *, u32, const char *, int);

File fs/btrfs/discard.c:
545:	void btrfs_discard_calc_delay(struct btrfs_discard_ctl *);
307:	void btrfs_discard_cancel_work(struct btrfs_discard_ctl *, struct btrfs_block_group *);
249:	void btrfs_discard_check_filter(struct btrfs_block_group *, u64);
732:	void btrfs_discard_cleanup(struct btrfs_fs_info *);
708:	void btrfs_discard_init(struct btrfs_fs_info *);
645:	void btrfs_discard_punt_unused_bgs_list(struct btrfs_fs_info *);
324:	void btrfs_discard_queue_work(struct btrfs_discard_ctl *, struct btrfs_block_group *);
691:	void btrfs_discard_resume(struct btrfs_fs_info *);
401:	void btrfs_discard_schedule_work(struct btrfs_discard_ctl *, bool);
703:	void btrfs_discard_stop(struct btrfs_fs_info *);
601:	void btrfs_discard_update_discardable(struct btrfs_block_group *);
526:	bool btrfs_run_discard_work(struct btrfs_discard_ctl *);
339:	static void __btrfs_discard_schedule_work(struct btrfs_discard_ctl *, u64, bool);
97:	static void add_to_discard_list(struct btrfs_discard_ctl *, struct btrfs_block_group *);
446:	static void btrfs_discard_workfn(struct work_struct *);

File fs/btrfs/disk-io.c:
817:	blk_status_t btree_submit_bio_start(struct bio *);
1402:	int btrfs_add_log_tree(struct btrfs_trans_handle *, struct btrfs_root *);
1351:	int btrfs_alloc_log_tree_node(struct btrfs_trans_handle *, struct btrfs_root *);
1257:	struct btrfs_root *btrfs_block_group_root(struct btrfs_fs_info *);
4906:	void btrfs_btree_balance_dirty(struct btrfs_fs_info *);
4911:	void btrfs_btree_balance_dirty_nodelay(struct btrfs_fs_info *);
4828:	int btrfs_buffer_uptodate(struct extent_buffer *, u64, int);
3406:	int btrfs_check_features(struct btrfs_fs_info *, bool);
1650:	void btrfs_check_leaked_roots(struct btrfs_fs_info *);
178:	int btrfs_check_super_csum(struct btrfs_fs_info *, const struct btrfs_super_block *);
1038:	void btrfs_clean_tree_block(struct extent_buffer *);
5223:	void btrfs_cleanup_dirty_bgs(struct btrfs_transaction *, struct btrfs_fs_info *);
4537:	int btrfs_cleanup_fs_roots(struct btrfs_fs_info *);
5270:	void btrfs_cleanup_one_transaction(struct btrfs_transaction *, struct btrfs_fs_info *);
3278:	void btrfs_clear_oneshot_options(struct btrfs_fs_info *);
4587:	int btrfs_commit_super(struct btrfs_fs_info *);
1264:	struct btrfs_root *btrfs_create_tree(struct btrfs_trans_handle *, u64);
1235:	struct btrfs_root *btrfs_csum_root(struct btrfs_fs_info *, u64);
4513:	void btrfs_drop_and_free_fs_root(struct btrfs_fs_info *, struct btrfs_root *);
1246:	struct btrfs_root *btrfs_extent_root(struct btrfs_fs_info *, u64);
995:	struct extent_buffer *btrfs_find_create_tree_block(struct btrfs_fs_info *, u64, u64, int);
1682:	void btrfs_free_fs_info(struct btrfs_fs_info *);
2259:	void btrfs_free_fs_roots(struct btrfs_fs_info *);
5392:	int btrfs_get_free_objectid(struct btrfs_root *, u64 *);
1814:	struct btrfs_root *btrfs_get_fs_root(struct btrfs_fs_info *, u64, bool);
1848:	struct btrfs_root *btrfs_get_fs_root_commit_root(struct btrfs_fs_info *, struct btrfs_path *, u64);
1828:	struct btrfs_root *btrfs_get_new_fs_root(struct btrfs_fs_info *, u64, dev_t);
4371:	int btrfs_get_num_tolerated_disk_barrier_failures(u64);
1199:	struct btrfs_root *btrfs_global_root(struct btrfs_fs_info *, struct btrfs_key *);
1190:	void btrfs_global_root_delete(struct btrfs_root *);
1177:	int btrfs_global_root_insert(struct btrfs_root *);
3059:	void btrfs_init_fs_info(struct btrfs_fs_info *);
1379:	int btrfs_init_log_root_tree(struct btrfs_trans_handle *, struct btrfs_fs_info *);
5357:	int btrfs_init_root_free_objectid(struct btrfs_root *);
1627:	int btrfs_insert_fs_root(struct btrfs_fs_info *, struct btrfs_root *);
4845:	void btrfs_mark_buffer_dirty(struct extent_buffer *);
2238:	void btrfs_put_root(struct btrfs_root *);
4000:	struct btrfs_super_block *btrfs_read_dev_one_super(struct block_device *, int, bool);
4051:	struct btrfs_super_block *btrfs_read_dev_super(struct block_device *);
289:	int btrfs_read_extent_buffer(struct extent_buffer *, struct btrfs_tree_parent_check *);
1504:	struct btrfs_root *btrfs_read_tree_root(struct btrfs_root *, struct btrfs_key *);
3288:	int btrfs_start_pre_rw_mount(struct btrfs_fs_info *);
838:	void btrfs_submit_metadata_bio(struct btrfs_inode *, struct bio *, int);
656:	int btrfs_validate_metadata_buffer(struct btrfs_bio *, struct page *, u64, u64, int);
2703:	int btrfs_validate_super(struct btrfs_fs_info *, struct btrfs_super_block *, int);
200:	int btrfs_verify_level_key(struct extent_buffer *, int, struct btrfs_key *, u64);
770:	bool btrfs_wq_submit_bio(struct btrfs_inode *, struct bio *, int, u64, enum btrfs_wq_submit_cmd);
4649:	void close_ctree(struct btrfs_fs_info *);
3499:	int open_ctree(struct super_block *, struct btrfs_fs_devices *, char *);
1012:	struct extent_buffer *read_tree_block(struct btrfs_fs_info *, u64, struct btrfs_tree_parent_check *);
4400:	int write_all_supers(struct btrfs_fs_info *, int);
799:	static blk_status_t btree_csum_one_bio(struct bio *);
922:	static void btree_invalidate_folio(struct folio *, size_t, size_t);
870:	static int btree_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
914:	static bool btree_release_folio(struct folio *, gfp_t);
892:	static int btree_writepages(struct address_space *, struct writeback_control *);
1132:	static struct btrfs_root *btrfs_alloc_root(struct btrfs_fs_info *, u64, gfp_t);
3257:	static int btrfs_check_uuid_tree(struct btrfs_fs_info *);
5304:	static int btrfs_cleanup_transaction(struct btrfs_fs_info *);
4249:	static void btrfs_end_empty_barrier(struct bio *);
3970:	static void btrfs_end_super_write(struct bio *);
4916:	static void btrfs_error_commit_super(struct btrfs_fs_info *);
1591:	static struct btrfs_root *btrfs_get_global_root(struct btrfs_fs_info *, u64);
1729:	static struct btrfs_root *btrfs_get_root_ref(struct btrfs_fs_info *, u64, dev_t, bool);
2357:	static int btrfs_init_workqueues(struct btrfs_fs_info *);
1577:	static struct btrfs_root *btrfs_lookup_fs_root(struct btrfs_fs_info *, u64);
2439:	static int btrfs_replay_log(struct btrfs_fs_info *, struct btrfs_fs_devices *);
2173:	static void btrfs_stop_all_workers(struct btrfs_fs_info *);
3236:	static int btrfs_uuid_rescan_kthread(void *);
1880:	static int cleaner_kthread(void *);
331:	static int csum_one_extent_buffer(struct extent_buffer *);
101:	static void csum_tree_block(struct extent_buffer *, u8 *);
2223:	static void free_root_pointers(struct btrfs_fs_info *, bool);
2982:	static int init_tree_roots(struct btrfs_fs_info *);
2494:	static int load_global_roots_objectid(struct btrfs_root *, struct btrfs_path *, u64, const char *);
2938:	static int load_super_root(struct btrfs_root *, u64, u64, int);
1441:	static struct btrfs_root *read_tree_root_path(struct btrfs_root *, struct btrfs_path *, struct btrfs_key *);
733:	static void run_one_async_done(struct btrfs_work *);
755:	static void run_one_async_free(struct btrfs_work *);
703:	static void run_one_async_start(struct btrfs_work *);
1954:	static int transaction_kthread(void *);
488:	static int validate_extent_buffer(struct extent_buffer *, struct btrfs_tree_parent_check *);

File fs/btrfs/disk-io.h:
101:	static struct btrfs_root *btrfs_grab_root(struct btrfs_root *);

File fs/btrfs/export.c:
74:	struct dentry *btrfs_get_dentry(struct super_block *, u64, u64, u64);
147:	struct dentry *btrfs_get_parent(struct dentry *);
19:	static int btrfs_encode_fh(struct inode *, u32 *, int *, struct inode *);
125:	static struct dentry *btrfs_fh_to_dentry(struct super_block *, struct fid *, int, int);
101:	static struct dentry *btrfs_fh_to_parent(struct super_block *, struct fid *, int, int);
213:	static int btrfs_get_name(struct dentry *, char *, struct dentry *);

File fs/btrfs/extent-io-tree.c:
547:	int __clear_extent_bit(struct extent_io_tree *, u64, u64, u32, struct extent_state **, gfp_t, struct extent_changeset *);
905:	bool btrfs_find_delalloc_range(struct extent_io_tree *, u64 *, u64 *, u64, struct extent_state **);
1694:	int clear_record_extent_bits(struct extent_io_tree *, u64, u64, u32, struct extent_changeset *);
1215:	int convert_extent_bit(struct extent_io_tree *, u64, u64, u32, u32, struct extent_state **);
1542:	u64 count_range_bits(struct extent_io_tree *, u64 *, u64, u64, u32, int, struct extent_state **);
96:	void extent_io_tree_init(struct btrfs_fs_info *, struct extent_io_tree *, unsigned int);
108:	void extent_io_tree_release(struct extent_io_tree *);
1751:	void extent_state_free_cachep(void);
1757:	int extent_state_init_cachep(void);
877:	int find_contiguous_extent_bit(struct extent_io_tree *, u64, u64 *, u64 *, u32);
1424:	void find_first_clear_extent_bit(struct extent_io_tree *, u64, u64 *, u64 *, u32);
825:	int find_first_extent_bit(struct extent_io_tree *, u64, u64 *, u64 *, u32, struct extent_state **);
166:	void free_extent_state(struct extent_state *);
1728:	int lock_extent(struct extent_io_tree *, u64, u64, struct extent_state **);
1190:	int set_extent_bit(struct extent_io_tree *, u64, u64, u32, struct extent_state **, gfp_t);
1679:	int set_record_extent_bits(struct extent_io_tree *, u64, u64, u32, struct extent_changeset *);
1632:	int test_range_bit(struct extent_io_tree *, u64, u64, u32, int, struct extent_state *);
1707:	int try_lock_extent(struct extent_io_tree *, u64, u64, struct extent_state **);
717:	void wait_extent_bit(struct extent_io_tree *, u64, u64, u32, struct extent_state **);
967:	static int __set_extent_bit(struct extent_io_tree *, u64, u64, u32, u64 *, struct extent_state **, struct extent_state **, struct extent_changeset *, gfp_t);
158:	static struct extent_state *alloc_extent_state_atomic(struct extent_state *);
787:	static void cache_state(struct extent_state *, struct extent_state **);
502:	static struct extent_state *clear_state_bit(struct extent_io_tree *, struct extent_state *, u32, int, struct extent_changeset *);
393:	static int insert_state(struct extent_io_tree *, struct extent_state *, u32, struct extent_changeset *);
432:	static void insert_state_fast(struct extent_io_tree *, struct extent_state *, struct rb_node **, struct rb_node *, unsigned int, struct extent_changeset *);
339:	static void merge_state(struct extent_io_tree *, struct extent_state *);
368:	static void set_state_bits(struct extent_io_tree *, struct extent_state *, u32, struct extent_changeset *);
457:	static int split_state(struct extent_io_tree *, struct extent_state *, struct extent_state *, u64);

File fs/btrfs/extent-tree.c:
73:	int btrfs_add_excluded_extent(struct btrfs_fs_info *, u64, u64);
4824:	int btrfs_alloc_logged_file_extent(struct btrfs_trans_handle *, u64, u64, u64, struct btrfs_key *);
4801:	int btrfs_alloc_reserved_file_extent(struct btrfs_trans_handle *, struct btrfs_root *, u64, u64, u64, struct btrfs_key *);
4954:	struct extent_buffer *btrfs_alloc_tree_block(struct btrfs_trans_handle *, struct btrfs_root *, u64, u64, const struct btrfs_disk_key *, int, u64, u64, enum btrfs_lock_nesting);
1790:	void btrfs_cleanup_ref_head_accounting(struct btrfs_fs_info *, struct btrfs_delayed_ref_root *, struct btrfs_delayed_ref_head *);
2364:	int btrfs_cross_ref_exist(struct btrfs_root *, u64, u64, u64, bool, struct btrfs_path *);
2477:	int btrfs_dec_ref(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, int);
1319:	int btrfs_discard_extent(struct btrfs_fs_info *, u64, u64, u64 *);
5660:	int btrfs_drop_snapshot(struct btrfs_root *, int, int);
5925:	int btrfs_drop_subtree(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, struct extent_buffer *);
5990:	int btrfs_error_unpin_extent_range(struct btrfs_fs_info *, u64, u64);
2606:	int btrfs_exclude_logged_extents(struct extent_buffer *);
2766:	int btrfs_finish_extent_commit(struct btrfs_trans_handle *);
82:	void btrfs_free_excluded_extents(struct btrfs_block_group *);
3351:	int btrfs_free_extent(struct btrfs_trans_handle *, struct btrfs_ref *);
4603:	int btrfs_free_reserved_extent(struct btrfs_fs_info *, u64, u64, int);
3267:	void btrfs_free_tree_block(struct btrfs_trans_handle *, u64, struct extent_buffer *, u64, int);
363:	int btrfs_get_extent_inline_ref_type(const struct extent_buffer *, struct btrfs_extent_inline_ref *, enum btrfs_inline_ref_type);
1384:	int btrfs_inc_extent_ref(struct btrfs_trans_handle *, struct btrfs_ref *);
2471:	int btrfs_inc_ref(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, int);
95:	int btrfs_lookup_data_extent(struct btrfs_fs_info *, u64, u64);
123:	int btrfs_lookup_extent_info(struct btrfs_trans_handle *, struct btrfs_fs_info *, u64, u64, int, u64 *, u64 *);
2542:	int btrfs_pin_extent(struct btrfs_trans_handle *, u64, u64, int);
2559:	int btrfs_pin_extent_for_log_replay(struct btrfs_trans_handle *, u64, u64);
4623:	int btrfs_pin_reserved_extent(struct btrfs_trans_handle *, u64, u64);
4547:	int btrfs_reserve_extent(struct btrfs_root *, u64, u64, u64, u64, u64, struct btrfs_key *, int, int);
2124:	int btrfs_run_delayed_refs(struct btrfs_trans_handle *, unsigned long);
2181:	int btrfs_set_disk_extent_flags(struct btrfs_trans_handle *, struct extent_buffer *, u64, int);
6115:	int btrfs_trim_fs(struct btrfs_fs_info *, struct fstrim_range *);
415:	u64 hash_extent_data_ref(u64, u64, u64);
2924:	static int __btrfs_free_extent(struct btrfs_trans_handle *, struct btrfs_delayed_ref_node *, u64, u64, u64, u64, int, struct btrfs_delayed_extent_op *);
1442:	static int __btrfs_inc_extent_ref(struct btrfs_trans_handle *, struct btrfs_delayed_ref_node *, u64, u64, u64, u64, int, struct btrfs_delayed_extent_op *);
2385:	static int __btrfs_mod_ref(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, int, int);
1979:	static int __btrfs_run_delayed_refs(struct btrfs_trans_handle *, unsigned long);
4663:	static int alloc_reserved_file_extent(struct btrfs_trans_handle *, u64, u64, u64, u64, u64, struct btrfs_key *, int);
1207:	static int btrfs_issue_discard(struct block_device *, u64, u64, u64 *);
2289:	static int check_committed_ref(struct btrfs_root *, struct btrfs_path *, u64, u64, u64, bool);
2203:	static int check_delayed_ref(struct btrfs_root *, struct btrfs_path *, u64, u64, u64);
3218:	static int check_ref_cleanup(struct btrfs_trans_handle *, u64);
5259:	static int do_walk_down(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct walk_control *, int *);
651:	static u32 extent_data_ref_count(struct btrfs_path *, struct btrfs_extent_inline_ref *);
4261:	static int find_free_extent(struct btrfs_root *, struct btrfs_key *, struct find_free_extent_ctl *);
526:	static int insert_extent_data_ref(struct btrfs_trans_handle *, struct btrfs_path *, u64, u64, u64, u64, u64, int);
1149:	static int insert_inline_extent_backref(struct btrfs_trans_handle *, struct btrfs_path *, u64, u64, u64, u64, u64, u64, int, struct btrfs_delayed_extent_op *);
717:	static int insert_tree_block_ref(struct btrfs_trans_handle *, struct btrfs_path *, u64, u64, u64);
450:	static int lookup_extent_data_ref(struct btrfs_trans_handle *, struct btrfs_path *, u64, u64, u64, u64, u64);
792:	static int lookup_inline_extent_backref(struct btrfs_trans_handle *, struct btrfs_path *, struct btrfs_extent_inline_ref **, u64, u64, u64, u64, u64, u64, int);
693:	static int lookup_tree_block_ref(struct btrfs_trans_handle *, struct btrfs_path *, u64, u64, u64);
2519:	static int pin_down_extent(struct btrfs_trans_handle *, struct btrfs_block_group *, u64, u64, int);
5063:	static void reada_walk_down(struct btrfs_trans_handle *, struct btrfs_root *, struct walk_control *, struct btrfs_path *);
605:	static int remove_extent_data_ref(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int);
993:	static void setup_inline_extent_backref(struct btrfs_fs_info *, struct btrfs_path *, struct btrfs_extent_inline_ref *, u64, u64, u64, u64, int, struct btrfs_delayed_extent_op *);
2673:	static int unpin_extent_range(struct btrfs_fs_info *, u64, u64, const bool);
1084:	static void update_inline_extent_backref(struct btrfs_path *, struct btrfs_extent_inline_ref *, int, struct btrfs_delayed_extent_op *);
5151:	static int walk_down_proc(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct walk_control *, int);
5580:	static int walk_down_tree(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct walk_control *);
5474:	static int walk_up_proc(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct walk_control *);
5612:	static int walk_up_tree(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct walk_control *, int);

File fs/btrfs/extent_io.c:
4222:	struct extent_buffer *__alloc_dummy_extent_buffer(struct btrfs_fs_info *, u64, unsigned long);
4263:	struct extent_buffer *alloc_dummy_extent_buffer(struct btrfs_fs_info *, u64);
4448:	struct extent_buffer *alloc_extent_buffer(struct btrfs_fs_info *, u64, u64, int);
2856:	int btree_write_cache_pages(struct address_space *, struct writeback_control *);
1220:	int btrfs_alloc_page_array(unsigned int, struct page **);
572:	int btrfs_clean_io_failure(struct btrfs_inode *, u64, struct page *, unsigned int);
4181:	struct extent_buffer *btrfs_clone_extent_buffer(const struct extent_buffer *);
616:	void btrfs_free_io_failure_record(struct btrfs_inode *, u64, u64);
1800:	int btrfs_read_folio(struct file *, struct folio *);
5787:	void btrfs_readahead_node_child(struct extent_buffer *, int);
5752:	void btrfs_readahead_tree_block(struct btrfs_fs_info *, u64, u64, u64, int);
704:	int btrfs_repair_one_sector(struct btrfs_inode *, struct btrfs_bio *, u32, struct page *, unsigned int, bool);
4725:	void clear_extent_buffer_dirty(const struct extent_buffer *);
4792:	void clear_extent_buffer_uptodate(struct extent_buffer *);
1592:	void clear_page_extent_mapped(struct page *);
5310:	void copy_extent_buffer(const struct extent_buffer *, const struct extent_buffer *, unsigned long, unsigned long, unsigned long);
5286:	void copy_extent_buffer_full(const struct extent_buffer *, const struct extent_buffer *);
881:	void end_extent_writepage(struct page *, int, u64, u64);
5451:	void extent_buffer_bitmap_clear(const struct extent_buffer *, unsigned long, unsigned long, unsigned long);
5408:	void extent_buffer_bitmap_set(const struct extent_buffer *, unsigned long, unsigned long, unsigned long);
199:	void extent_buffer_free_cachep(void);
188:	int extent_buffer_init_cachep(void);
5385:	int extent_buffer_test_bit(const struct extent_buffer *, unsigned long, unsigned long);
4034:	int extent_buffer_under_io(const struct extent_buffer *);
508:	void extent_clear_unlock_delalloc(struct btrfs_inode *, u64, u64, struct page *, u32, unsigned long);
3802:	int extent_fiemap(struct btrfs_inode *, struct fiemap_extent_info *, u64, u64);
3243:	int extent_invalidate_folio(struct extent_io_tree *, struct folio *, size_t);
209:	void extent_range_clear_dirty_for_io(struct inode *, u64, u64);
224:	void extent_range_redirty_for_io(struct inode *, u64, u64);
3217:	void extent_readahead(struct readahead_control *);
3137:	int extent_write_locked_range(struct inode *, u64, u64);
3196:	int extent_writepages(struct address_space *, struct writeback_control *);
4321:	struct extent_buffer *find_extent_buffer(struct btrfs_fs_info *, u64);
4653:	void free_extent_buffer(struct extent_buffer *);
4683:	void free_extent_buffer_stale(struct extent_buffer *);
5138:	int memcmp_extent_buffer(const struct extent_buffer *, const void *, unsigned long, unsigned long);
5514:	void memcpy_extent_buffer(const struct extent_buffer *, unsigned long, unsigned long, unsigned long);
5549:	void memmove_extent_buffer(const struct extent_buffer *, unsigned long, unsigned long, unsigned long);
5258:	void memzero_extent_buffer(const struct extent_buffer *, unsigned long, unsigned long);
5073:	void read_extent_buffer(const struct extent_buffer *, void *, unsigned long, unsigned long);
4915:	int read_extent_buffer_pages(struct extent_buffer *, int, int, struct btrfs_tree_parent_check *);
5102:	int read_extent_buffer_to_user_nofault(const struct extent_buffer *, void *, unsigned long, unsigned long);
4748:	bool set_extent_buffer_dirty(struct extent_buffer *);
4818:	void set_extent_buffer_uptodate(struct extent_buffer *);
1574:	int set_page_extent_mapped(struct page *);
5695:	int try_release_extent_buffer(struct page *);
3313:	int try_release_extent_mapping(struct page *, gfp_t);
2242:	void wait_on_extent_buffer_writeback(struct extent_buffer *);
5226:	void write_extent_buffer(const struct extent_buffer *, const void *, unsigned long, unsigned long);
5204:	void write_extent_buffer_chunk_tree_uuid(const struct extent_buffer *, const void *);
5216:	void write_extent_buffer_fsid(const struct extent_buffer *, const void *);
2135:	static int __extent_writepage(struct page *, struct writeback_control *, struct btrfs_bio_ctrl *);
1967:	static int __extent_writepage_io(struct btrfs_inode *, struct page *, struct writeback_control *, struct btrfs_bio_ctrl *, loff_t, int *);
288:	static int __process_pages_contig(struct address_space *, struct page *, u64, u64, unsigned long, u64 *);
362:	static void __unlock_for_delalloc(struct inode *, struct page *, u64, u64);
5178:	static void assert_eb_page_uptodate(const struct extent_buffer *, struct page *);
1534:	static int attach_extent_buffer_page(struct extent_buffer *, struct page *, struct btrfs_subpage *);
4697:	static void btree_clear_page_dirty(struct page *);
1262:	static int btrfs_bio_add_page(struct btrfs_bio_ctrl *, struct page *, u64, unsigned int, unsigned int, enum btrfs_compression_type);
1641:	static int btrfs_do_readpage(struct page *, struct extent_map **, struct btrfs_bio_ctrl *, blk_opf_t, u64 *);
4126:	static void btrfs_release_extent_buffer_pages(struct extent_buffer *);
4608:	static void btrfs_release_extent_buffer_rcu(struct callback_head *);
4269:	static void check_buffer_tree_ref(struct extent_buffer *);
4061:	static void detach_extent_buffer_page(struct extent_buffer *, struct page *);
3416:	static int emit_fiemap_extent(struct fiemap_extent_info *, struct fiemap_cache *, u64, u64, u64, u32);
2507:	static void end_bio_extent_buffer_writepage(struct btrfs_bio *);
1076:	static void end_bio_extent_readpage(struct btrfs_bio *);
914:	static void end_bio_extent_writepage(struct btrfs_bio *);
2449:	static void end_bio_subpage_eb_writepage(struct btrfs_bio *);
778:	static void end_page_read(struct page *, bool, u64, u32);
3608:	static int fiemap_process_hole(struct btrfs_inode *, struct fiemap_extent_info *, struct fiemap_cache *, struct extent_state **, struct btrfs_backref_share_check_ctx *, u64, u64, u64, u64, u64);
1042:	static struct extent_buffer *find_extent_buffer_readpage(struct btrfs_fs_info *, struct page *, u64);
415:	static bool find_lock_delalloc_range(struct inode *, struct page *, u64 *, u64 *);
377:	static int lock_delalloc_pages(struct inode *, struct page *, u64, u64);
2265:	static int lock_extent_buffer_for_io(struct extent_buffer *, struct btrfs_bio_ctrl *);
4305:	static void mark_extent_buffer_accessed(struct extent_buffer *, struct page *);
2540:	static void prepare_eb_write(struct extent_buffer *);
4616:	static int release_extent_buffer(struct extent_buffer *);
2341:	static void set_btree_ioerr(struct page *, struct extent_buffer *);
815:	static void submit_data_read_repair(struct inode *, struct btrfs_bio *, u32, const struct bio_vec *, unsigned int);
1467:	static int submit_extent_page(blk_opf_t, struct writeback_control *, struct btrfs_bio_ctrl *, u64, struct page *, size_t, unsigned long, enum btrfs_compression_type, bool);
125:	static void submit_one_bio(struct btrfs_bio_ctrl *);
2619:	static int write_one_eb(struct extent_buffer *, struct writeback_control *, struct btrfs_bio_ctrl *);
1848:	static int writepage_delalloc(struct btrfs_inode *, struct page *, struct writeback_control *);

File fs/btrfs/extent_map.c:
401:	int add_extent_mapping(struct extent_map_tree *, struct extent_map *, int);
46:	struct extent_map *alloc_extent_map(void);
605:	int btrfs_add_extent_mapping(struct btrfs_fs_info *, struct extent_map_tree *, struct extent_map **, u64, u64);
705:	void btrfs_drop_extent_map_range(struct btrfs_inode *, u64, u64, bool);
930:	int btrfs_replace_extent_map_range(struct btrfs_inode *, struct extent_map *, bool);
334:	void clear_em_logging(struct extent_map_tree *, struct extent_map *);
26:	void extent_map_exit(void);
16:	int extent_map_init(void);
35:	void extent_map_tree_init(struct extent_map_tree *);
63:	void free_extent_map(struct extent_map *);
459:	struct extent_map *lookup_extent_mapping(struct extent_map_tree *, u64, u64);
492:	void remove_extent_mapping(struct extent_map_tree *, struct extent_map *);
505:	void replace_extent_mapping(struct extent_map_tree *, struct extent_map *, struct extent_map *, int);
477:	struct extent_map *search_extent_mapping(struct extent_map_tree *, u64, u64);
295:	int unpin_extent_cache(struct extent_map_tree *, u64, u64, u64);
422:	static struct extent_map *__lookup_extent_mapping(struct extent_map_tree *, u64, u64, int);
186:	static int mergable_maps(struct extent_map *, struct extent_map *);
548:	static int merge_extent_mapping(struct extent_map_tree *, struct extent_map *, struct extent_map *, u64);
231:	static void try_merge_map(struct extent_map_tree *, struct extent_map *);

File fs/btrfs/file-item.c:
1136:	int btrfs_csum_file_blocks(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_ordered_sum *);
796:	blk_status_t btrfs_csum_one_bio(struct btrfs_inode *, struct bio *, u64, bool);
961:	int btrfs_del_csums(struct btrfs_trans_handle *, struct btrfs_root *, u64, u64);
1361:	void btrfs_extent_item_to_extent_map(struct btrfs_inode *, const struct btrfs_path *, struct btrfs_file_extent_item *, struct extent_map *);
1431:	u64 btrfs_file_extent_end(const struct btrfs_path *);
114:	int btrfs_inode_clear_file_extent_range(struct btrfs_inode *, u64, u64);
49:	void btrfs_inode_safe_disk_i_size_write(struct btrfs_inode *, u64);
86:	int btrfs_inode_set_file_extent_range(struct btrfs_inode *, u64, u64);
160:	int btrfs_insert_hole_extent(struct btrfs_trans_handle *, struct btrfs_root *, u64, u64, u64);
392:	blk_status_t btrfs_lookup_bio_sums(struct inode *, struct bio *, u8 *);
673:	int btrfs_lookup_csums_bitmap(struct btrfs_root *, u64, u64, u8 *, unsigned long *);
530:	int btrfs_lookup_csums_list(struct btrfs_root *, u64, u64, struct list_head *, int, bool);
256:	int btrfs_lookup_file_extent(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, u64, int);
203:	static struct btrfs_csum_item *btrfs_lookup_csum(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, int);
912:	static void truncate_one_csum(struct btrfs_fs_info *, struct btrfs_path *, struct btrfs_key *, u64, u64);

File fs/btrfs/file.c:
1061:	int btrfs_check_nocow_lock(struct btrfs_inode *, loff_t, size_t *, bool);
1104:	void btrfs_check_nocow_unlock(struct btrfs_inode *);
127:	int btrfs_dirty_pages(struct btrfs_inode *, struct page **, size_t, loff_t, size_t, struct extent_state **, bool);
1648:	ssize_t btrfs_do_write_iter(struct kiocb *, struct iov_iter *, const struct btrfs_ioctl_encoded_io_args *);
200:	int btrfs_drop_extents(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_inode *, struct btrfs_drop_extents_args *);
3839:	int btrfs_fdatawrite_range(struct inode *, loff_t, loff_t);
3348:	bool btrfs_find_delalloc_in_range(struct btrfs_inode *, u64, u64, struct extent_state **, u64 *, u64 *);
593:	int btrfs_mark_extent_written(struct btrfs_trans_handle *, struct btrfs_inode *, u64, u64);
1701:	int btrfs_release_file(struct inode *, struct file *);
2327:	int btrfs_replace_file_extents(struct btrfs_inode *, struct btrfs_path *, const u64, const u64, struct btrfs_replace_extent_info *, struct btrfs_trans_handle **);
1779:	int btrfs_sync_file(struct file *, loff_t, loff_t, int);
1177:	static ssize_t btrfs_buffered_write(struct kiocb *, struct iov_iter *);
44:	static int btrfs_copy_from_user(loff_t, size_t, struct page **, struct iov_iter *);
97:	static void btrfs_drop_pages(struct btrfs_fs_info *, struct page **, size_t, u64, u64);
3026:	static long btrfs_fallocate(struct file *, int, loff_t, loff_t);
2796:	static int btrfs_fallocate_update_isize(struct inode *, const u64, const int);
3687:	static loff_t btrfs_file_llseek(struct file *, loff_t, int);
2022:	static int btrfs_file_mmap(struct file *, struct vm_area_struct *);
3708:	static int btrfs_file_open(struct inode *, struct file *);
3806:	static ssize_t btrfs_file_read_iter(struct kiocb *, struct iov_iter *);
1696:	static ssize_t btrfs_file_write_iter(struct kiocb *, struct iov_iter *);
2233:	static int btrfs_insert_replace_extent(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_replace_extent_info *, const u64, const u64);
2191:	static void btrfs_punch_hole_lock_range(struct inode *, const u64, const u64, struct extent_state **);
1127:	static int btrfs_write_check(struct kiocb *, struct iov_iter *, size_t);
2850:	static int btrfs_zero_range(struct inode *, loff_t, loff_t, const int);
553:	static int extent_mergeable(struct extent_buffer *, int, u64, u64, u64, u64 *, u64 *);
2064:	static int fill_holes(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, u64, u64);
2168:	static int find_first_non_hole(struct btrfs_inode *, u64 *, u64 *);
2035:	static int hole_mergeable(struct btrfs_inode *, struct extent_buffer *, int, u64, u64);
976:	static int lock_and_cleanup_extent_if_need(struct btrfs_inode *, struct page **, size_t, loff_t, size_t, u64 *, u64 *, bool, struct extent_state **);
905:	static int prepare_pages(struct inode *, struct page **, size_t, loff_t, size_t, bool, bool);
843:	static int prepare_uptodate_page(struct inode *, struct page *, u64, bool);
1724:	static int start_ordered_ops(struct inode *, loff_t, loff_t);

File fs/btrfs/free-space-cache.c:
2609:	int __btrfs_add_free_space(struct btrfs_block_group *, u64, u64, enum btrfs_trim_state);
2736:	int btrfs_add_free_space(struct btrfs_block_group *, u64, u64);
2766:	int btrfs_add_free_space_async_trimmed(struct btrfs_block_group *, u64, u64);
2751:	int btrfs_add_free_space_unused(struct btrfs_block_group *, u64, u64);
3204:	u64 btrfs_alloc_from_cluster(struct btrfs_block_group *, struct btrfs_free_cluster *, u64, u64, u64 *);
295:	int btrfs_check_trunc_cache_free_space(struct btrfs_fs_info *, struct btrfs_block_rsv *);
2895:	void btrfs_dump_free_space(struct btrfs_block_group *, u64);
3538:	int btrfs_find_space_cluster(struct btrfs_block_group *, struct btrfs_free_cluster *, u64, u64, u64);
3067:	u64 btrfs_find_space_for_alloc(struct btrfs_block_group *, u64, u64, u64, u64 *);
4080:	bool btrfs_free_space_cache_v1_active(struct btrfs_fs_info *);
4159:	void btrfs_free_space_exit(void);
4140:	int btrfs_free_space_init(void);
3619:	void btrfs_init_free_cluster(struct btrfs_free_cluster *);
2932:	void btrfs_init_free_space_ctl(struct btrfs_block_group *, struct btrfs_free_space_ctl *);
3042:	bool btrfs_is_free_space_trimmed(struct btrfs_block_group *);
2782:	int btrfs_remove_free_space(struct btrfs_block_group *, u64, u64);
3016:	void btrfs_remove_free_space_cache(struct btrfs_block_group *);
242:	int btrfs_remove_free_space_inode(struct btrfs_trans_handle *, struct inode *, struct btrfs_block_group *);
3136:	void btrfs_return_cluster_to_free_space(struct btrfs_block_group *, struct btrfs_free_cluster *);
4106:	int btrfs_set_free_space_cache_v1_active(struct btrfs_fs_info *, bool);
4001:	int btrfs_trim_block_group(struct btrfs_block_group *, u64 *, u64, u64, u64);
4056:	int btrfs_trim_block_group_bitmaps(struct btrfs_block_group *, u64 *, u64, u64, u64, u64, bool);
4034:	int btrfs_trim_block_group_extents(struct btrfs_block_group *, u64 *, u64, u64, u64, bool);
314:	int btrfs_truncate_free_space_cache(struct btrfs_trans_handle *, struct btrfs_block_group *, struct inode *);
1366:	int btrfs_wait_cache_io(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *);
1528:	int btrfs_write_out_cache(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *);
222:	int create_free_space_inode(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *);
952:	int load_free_space_cache(struct btrfs_block_group *);
129:	struct inode *lookup_free_space_inode(struct btrfs_block_group *, struct btrfs_path *);
2679:	static int __btrfs_add_free_space_zoned(struct btrfs_block_group *, u64, u64, bool);
60:	static void __btrfs_remove_free_space_cache(struct btrfs_free_space_ctl *);
2960:	static void __btrfs_return_cluster_to_free_space(struct btrfs_block_group *, struct btrfs_free_cluster *);
2218:	static u64 add_bytes_to_bitmap(struct btrfs_free_space_ctl *, struct btrfs_free_space *, u64, u64, enum btrfs_trim_state);
1868:	static void bitmap_clear_bits(struct btrfs_free_space_ctl *, struct btrfs_free_space *, u64, u64, bool);
1290:	static void cleanup_bitmap_list(struct list_head *);
1299:	static void cleanup_write_cache_enospc(struct inode *, struct btrfs_io_ctl *, struct extent_state **);
3630:	static int do_trimming(struct btrfs_block_group *, u64 *, u64, u64, u64, u64, enum btrfs_trim_state, struct btrfs_trim_range *);
2119:	static void free_bitmap(struct btrfs_free_space_ctl *, struct btrfs_free_space *);
596:	static int io_ctl_add_entry(struct btrfs_io_ctl *, u64, u64, void *);
570:	static int io_ctl_check_crc(struct btrfs_io_ctl *, int);
530:	static int io_ctl_check_generation(struct btrfs_io_ctl *, u64);
448:	static void io_ctl_drop_pages(struct btrfs_io_ctl *);
466:	static int io_ctl_prepare_pages(struct btrfs_io_ctl *, bool);
693:	static int io_ctl_read_bitmap(struct btrfs_io_ctl *, struct btrfs_free_space *);
666:	static int io_ctl_read_entry(struct btrfs_io_ctl *, struct btrfs_free_space *, u8 *);
649:	static void io_ctl_zero_remaining_pages(struct btrfs_io_ctl *);
1829:	static int link_free_space(struct btrfs_free_space_ctl *, struct btrfs_free_space *);
708:	static void recalculate_thresholds(struct btrfs_free_space_ctl *);
1852:	static void relink_bitmap_entry(struct btrfs_free_space_ctl *, struct btrfs_free_space *);
2141:	static int remove_from_bitmap(struct btrfs_free_space_ctl *, struct btrfs_free_space *, u64 *, u64 *);
3825:	static void reset_trimming_bitmap(struct btrfs_free_space_ctl *, u64);
1945:	static int search_bitmap(struct btrfs_free_space_ctl *, struct btrfs_free_space *, u64 *, u64 *, bool);
3488:	static int setup_cluster_bitmap(struct btrfs_block_group *, struct btrfs_free_cluster *, struct list_head *, u64, u64, u64, u64);
3396:	static int setup_cluster_no_bitmap(struct btrfs_block_group *, struct btrfs_free_cluster *, struct list_head *, u64, u64, u64, u64);
2584:	static void steal_from_bitmap(struct btrfs_free_space_ctl *, struct btrfs_free_space *, bool);
1701:	static struct btrfs_free_space *tree_search_offset(struct btrfs_free_space_ctl *, u64, int, int);
3857:	static int trim_bitmaps(struct btrfs_block_group *, u64 *, u64, u64, u64, u64, bool);
3691:	static int trim_no_bitmap(struct btrfs_block_group *, u64 *, u64, u64, u64, bool);
2440:	static bool try_merge_free_space(struct btrfs_free_space_ctl *, struct btrfs_free_space *, bool);
1157:	static int update_cache_item(struct btrfs_trans_handle *, struct btrfs_root *, struct inode *, struct btrfs_path *, u64, int, int);
2248:	static bool use_bitmap(struct btrfs_free_space_ctl *, struct btrfs_free_space *);
1261:	static int write_bitmap_entries(struct btrfs_io_ctl *, struct list_head *);
1080:	static int write_cache_extent_entries(struct btrfs_io_ctl *, struct btrfs_free_space_ctl *, struct btrfs_block_group *, int *, int *, struct list_head *);
1209:	static int write_pinned_extent_entries(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_io_ctl *, int *);

File fs/btrfs/free-space-tree.c:
1318:	int add_block_group_free_space(struct btrfs_trans_handle *, struct btrfs_block_group *);
1025:	int add_to_free_space_tree(struct btrfs_trans_handle *, u64, u64);
1255:	int btrfs_clear_free_space_tree(struct btrfs_fs_info *);
1159:	int btrfs_create_free_space_tree(struct btrfs_fs_info *);
1559:	int load_free_space_tree(struct btrfs_caching_control *);
1348:	int remove_block_group_free_space(struct btrfs_trans_handle *, struct btrfs_block_group *);
832:	int remove_from_free_space_tree(struct btrfs_trans_handle *, u64, u64);
38:	void set_free_space_tree_thresholds(struct btrfs_block_group *);
996:	static int __add_to_free_space_tree(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *, u64, u64);
69:	static int add_new_free_space_info(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *);
578:	static int free_space_next_bitmap(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *);
603:	static int modify_free_space_bitmap(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *, u64, u64, int);
101:	static struct btrfs_free_space_info *search_free_space_info(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *, int);
475:	static int update_free_space_extent_count(struct btrfs_trans_handle *, struct btrfs_block_group *, struct btrfs_path *, int);

File fs/btrfs/fs.c:
74:	void __btrfs_clear_fs_compat_ro(struct btrfs_fs_info *, u64, const char *);
30:	void __btrfs_clear_fs_incompat(struct btrfs_fs_info *, u64, const char *);
52:	void __btrfs_set_fs_compat_ro(struct btrfs_fs_info *, u64, const char *);
8:	void __btrfs_set_fs_incompat(struct btrfs_fs_info *, u64, const char *);

File fs/btrfs/inode-item.c:
178:	int btrfs_del_inode_ref(struct btrfs_trans_handle *, struct btrfs_root *, const struct fscrypt_str *, u64, u64, u64 *);
18:	struct btrfs_inode_ref *btrfs_find_name_in_backref(struct extent_buffer *, int, const struct fscrypt_str *);
45:	struct btrfs_inode_extref *btrfs_find_name_in_ext_backref(struct extent_buffer *, int, u64, const struct fscrypt_str *);
386:	int btrfs_insert_empty_inode(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64);
310:	int btrfs_insert_inode_ref(struct btrfs_trans_handle *, struct btrfs_root *, const struct fscrypt_str *, u64, u64, u64);
401:	int btrfs_lookup_inode(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_key *, int);
83:	struct btrfs_inode_extref *btrfs_lookup_inode_extref(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, const struct fscrypt_str *, u64, u64, int, int);
459:	int btrfs_truncate_inode_items(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_truncate_control *);

File fs/btrfs/inode.c:
2390:	void __btrfs_del_delalloc_inode(struct btrfs_root *, struct btrfs_inode *);
3592:	void btrfs_add_delayed_iput(struct btrfs_inode *);
6606:	int btrfs_add_link(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_inode *, const struct fscrypt_str *, int, u64);
8824:	struct inode *btrfs_alloc_inode(struct super_block *);
11330:	void btrfs_assert_inode_range_clean(struct btrfs_inode *, u64, u64);
3489:	int btrfs_check_data_csum(struct btrfs_inode *, struct btrfs_bio *, u32, struct page *, u32);
3450:	int btrfs_check_sector_csum(struct btrfs_fs_info *, struct page *, u32, u8 *, const u8 * const);
2472:	void btrfs_clear_delalloc_extent(struct btrfs_inode *, struct extent_state *, u32);
5097:	int btrfs_cont_expand(struct btrfs_inode *, loff_t, loff_t);
6368:	int btrfs_create_new_inode(struct btrfs_trans_handle *, struct btrfs_new_inode_args *);
4696:	int btrfs_delete_subvolume(struct btrfs_inode *, struct dentry *);
8976:	void btrfs_destroy_cachep(void);
8898:	void btrfs_destroy_inode(struct inode *);
8164:	ssize_t btrfs_dio_read(struct kiocb *, struct iov_iter *, size_t);
8172:	struct iomap_dio *btrfs_dio_write(struct kiocb *, struct iov_iter *, size_t);
10654:	ssize_t btrfs_do_encoded_write(struct kiocb *, struct iov_iter *, const struct btrfs_ioctl_encoded_io_args *);
8955:	int btrfs_drop_inode(struct inode *);
10175:	int btrfs_encoded_io_compression_from_extent(struct btrfs_fs_info *, int);
10511:	ssize_t btrfs_encoded_read(struct kiocb *, struct iov_iter *, struct btrfs_ioctl_encoded_io_args *);
10367:	int btrfs_encoded_read_regular_fill_pages(struct btrfs_inode *, u64, u64, u64, struct page **);
5442:	void btrfs_evict_inode(struct inode *);
3227:	int btrfs_finish_ordered_io(struct btrfs_ordered_extent *);
8893:	void btrfs_free_inode(struct inode *);
6939:	struct extent_map *btrfs_get_extent(struct btrfs_inode *, struct page *, size_t, u64, u64);
5819:	struct inode *btrfs_iget(struct super_block *, u64, struct btrfs_root *);
5787:	struct inode *btrfs_iget_path(struct super_block *, u64, struct btrfs_root *, struct btrfs_path *);
8987:	int btrfs_init_cachep(void);
175:	int btrfs_inode_lock(struct btrfs_inode *, unsigned int);
205:	void btrfs_inode_unlock(struct btrfs_inode *, unsigned int);
5868:	struct inode *btrfs_lookup_dentry(struct inode *, struct dentry *);
2315:	void btrfs_merge_delalloc_extent(struct btrfs_inode *, struct extent_state *, struct extent_state *);
6333:	void btrfs_new_inode_args_destroy(struct btrfs_new_inode_args *);
6279:	int btrfs_new_inode_prepare(struct btrfs_new_inode_args *, unsigned int *);
8805:	struct inode *btrfs_new_subvol_inode(struct user_namespace *, struct inode *);
3670:	int btrfs_orphan_add(struct btrfs_trans_handle *, struct btrfs_inode *);
3698:	int btrfs_orphan_cleanup(struct btrfs_root *);
8477:	vm_fault_t btrfs_page_mkwrite(struct vm_fault *);
10060:	int btrfs_prealloc_file_range(struct inode *, int, u64, u64, u64, loff_t, u64 *);
10069:	int btrfs_prealloc_file_range_trans(struct inode *, struct btrfs_trans_handle *, int, u64, u64, u64, loff_t, u64 *);
2233:	int btrfs_run_delalloc_range(struct btrfs_inode *, struct page *, u64, u64, int *, unsigned long *, struct writeback_control *);
3630:	void btrfs_run_delayed_iputs(struct btrfs_fs_info *);
2422:	void btrfs_set_delalloc_extent(struct btrfs_inode *, struct extent_state *, u32);
2859:	int btrfs_set_extent_delalloc(struct btrfs_inode *, u64, u64, unsigned int, struct extent_state **);
6248:	int btrfs_set_inode_index(struct btrfs_inode *, u64 *);
10155:	void btrfs_set_range_writeback(struct btrfs_inode *, u64, u64);
2278:	void btrfs_split_delalloc_extent(struct btrfs_inode *, struct extent_state *, u64);
9705:	int btrfs_start_delalloc_roots(struct btrfs_fs_info *, long, bool);
9689:	int btrfs_start_delalloc_snapshot(struct btrfs_root *, bool);
2546:	blk_status_t btrfs_submit_bio_start(struct btrfs_inode *, struct bio *);
7957:	blk_status_t btrfs_submit_bio_start_direct_io(struct btrfs_inode *, struct bio *, u64);
2764:	void btrfs_submit_data_read_bio(struct btrfs_inode *, struct bio *, int, enum btrfs_compression_type);
2726:	void btrfs_submit_data_write_bio(struct btrfs_inode *, struct bio *, int);
7914:	void btrfs_submit_dio_repair_bio(struct btrfs_inode *, struct bio *, int);
4911:	int btrfs_truncate_block(struct btrfs_inode *, loff_t, loff_t, int);
4391:	int btrfs_unlink_inode(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_inode *, const struct fscrypt_str *);
4243:	int btrfs_update_inode(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_inode *);
11301:	void btrfs_update_inode_bytes(struct btrfs_inode *, const u64, const u64);
4271:	int btrfs_update_inode_fallback(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_inode *);
3527:	unsigned int btrfs_verify_data_csum(struct btrfs_bio *, u32, struct page *, u64, u64);
3657:	int btrfs_wait_on_delayed_iputs(struct btrfs_fs_info *);
3032:	int btrfs_writepage_cow_fixup(struct page *);
3437:	void btrfs_writepage_endio_finish_ordered(struct btrfs_inode *, struct page *, u64, u64, bool);
7232:	int can_nocow_extent(struct inode *, u64, u64 *, u64 *, u64 *, u64 *, bool, bool);
9940:	static int __btrfs_prealloc_file_range(struct inode *, int, u64, u64, u64, loff_t, u64 *, struct btrfs_trans_handle *);
4287:	static int __btrfs_unlink_inode(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_inode *, const struct fscrypt_str *, struct btrfs_rename_ctx *);
3889:	static int acls_after_inode_item(struct extent_buffer *, int, u64, int *);
539:	static int add_async_extent(struct async_chunk *, u64, u64, u64, struct page **, unsigned long, int);
1529:	static void async_cow_free(struct btrfs_work *);
1487:	static void async_cow_start(struct btrfs_work *);
1504:	static void async_cow_submit(struct btrfs_work *);
10904:	static int btrfs_add_swapfile_pin(struct inode *, void *, bool);
225:	static void btrfs_cleanup_ordered_extents(struct btrfs_inode *, struct page *, u64, u64);
6741:	static int btrfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
6689:	static int btrfs_create_common(struct inode *, struct dentry *, struct inode *);
5929:	static int btrfs_dentry_delete(const struct dentry *);
7607:	static int btrfs_dio_iomap_begin(struct inode *, loff_t, loff_t, unsigned int, struct iomap *, struct iomap *);
7858:	static int btrfs_dio_iomap_end(struct inode *, loff_t, loff_t, ssize_t, unsigned int, struct iomap *);
7891:	static void btrfs_dio_private_put(struct btrfs_dio_private *);
6138:	static int btrfs_dirty_inode(struct btrfs_inode *);
10344:	static void btrfs_encoded_read_endio(struct btrfs_bio *);
10445:	static ssize_t btrfs_encoded_read_regular(struct kiocb *, struct iov_iter *, u64, u64, struct extent_state **, u64, u64, size_t, bool, bool *);
7964:	static void btrfs_end_dio_bio(struct btrfs_bio *);
8181:	static int btrfs_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64);
5757:	static int btrfs_find_actor(struct inode *, void *);
7471:	static int btrfs_get_blocks_direct_write(struct extent_map **, struct inode *, struct btrfs_dio_data *, u64, u64, unsigned int);
9007:	static int btrfs_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
5739:	static int btrfs_init_locked_inode(struct inode *, void *);
8295:	static void btrfs_invalidate_folio(struct folio *, size_t, size_t);
6756:	static int btrfs_link(struct dentry *, struct inode *, struct dentry *);
5948:	static struct dentry *btrfs_lookup(struct inode *, struct dentry *, unsigned int);
8275:	static int btrfs_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
6840:	static int btrfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
6727:	static int btrfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
5967:	static int btrfs_opendir(struct inode *, struct file *);
10078:	static int btrfs_permission(struct user_namespace *, struct inode *, int);
139:	static void btrfs_print_data_csum_error(struct btrfs_inode *, u64, u8 *, u8 *, int);
8218:	static void btrfs_readahead(struct readahead_control *);
6008:	static int btrfs_real_readdir(struct file *, struct dir_context *);
3169:	static void btrfs_release_delalloc_bytes(struct btrfs_fs_info *, u64, u64);
8267:	static bool btrfs_release_folio(struct folio *, gfp_t);
9548:	static int btrfs_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
4829:	static int btrfs_rmdir(struct inode *, struct dentry *);
9576:	static void btrfs_run_delalloc_work(struct btrfs_work *);
5284:	static int btrfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
8027:	static void btrfs_submit_direct(const struct iomap_iter *, struct bio *, loff_t);
11031:	static int btrfs_swap_activate(struct swap_info_struct *, struct file *, sector_t *);
11023:	static void btrfs_swap_deactivate(struct file *);
9761:	static int btrfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
10094:	static int btrfs_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
4428:	static int btrfs_unlink(struct inode *, struct dentry *);
4469:	static int btrfs_unlink_subvol(struct btrfs_trans_handle *, struct btrfs_inode *, struct dentry *);
4207:	static int btrfs_update_inode_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_inode *);
6173:	static int btrfs_update_time(struct inode *, struct timespec64 *, int);
2893:	static void btrfs_writepage_fixup_worker(struct btrfs_work *);
8212:	static int btrfs_writepages(struct address_space *, struct writeback_control *);
1826:	static int can_nocow_file_extent(struct btrfs_path *, struct btrfs_key *, struct btrfs_inode *, struct can_nocow_file_extent_args *);
649:	static int compress_file_range(struct async_chunk *);
1207:	static int cow_file_range(struct btrfs_inode *, struct page *, u64, u64, int *, unsigned long *, int, u64 *);
428:	static int cow_file_range_inline(struct btrfs_inode *, u64, size_t, int, struct page **, bool);
7426:	static struct extent_map *create_io_em(struct btrfs_inode *, u64, u64, u64, u64, u64, u64, u64, int, int);
1704:	static int csum_exist_in_range(struct btrfs_fs_info *, u64, u64, bool);
5394:	static struct btrfs_trans_handle *evict_refill_and_join(struct btrfs_root *, struct btrfs_block_rsv *);
2666:	static blk_status_t extract_ordered_extent(struct btrfs_inode *, struct bio *, loff_t);
1727:	static int fallback_to_cow(struct btrfs_inode *, struct page *, const u64, const u64, int *, unsigned long *);
4156:	static void fill_inode_item(struct btrfs_trans_handle *, struct extent_buffer *, struct btrfs_inode_item *, struct inode *);
927:	static void free_async_extent_pages(struct async_extent *);
1140:	static u64 get_extent_allocation_hint(struct btrfs_inode *, u64, u64);
8969:	static void init_once(void *);
5680:	static void inode_tree_add(struct btrfs_inode *);
318:	static int insert_inline_extent(struct btrfs_trans_handle *, struct btrfs_path *, struct btrfs_inode *, bool, size_t, size_t, int, struct page **, bool);
3073:	static int insert_reserved_file_extent(struct btrfs_trans_handle *, struct btrfs_inode *, u64, struct btrfs_file_extent_item *, const bool, u64);
4580:	static int may_destroy_subvol(struct btrfs_root *);
6893:	static int read_inline_extent(struct btrfs_inode *, struct btrfs_path *, struct page *);
1937:	static int run_delalloc_nocow(struct btrfs_inode *, struct page *, const u64, const u64, int *, unsigned long *);
1659:	static int run_delalloc_zoned(struct btrfs_inode *, struct page *, u64, u64, int *, unsigned long *);
9613:	static int start_delalloc_inodes(struct btrfs_root *, struct writeback_control *, bool, bool);
1113:	static void submit_compressed_extents(struct async_chunk *);
6854:	static int uncompress_inline(struct btrfs_path *, struct page *, struct btrfs_file_extent_item *);

File fs/btrfs/ioctl.c:
450:	void btrfs_exclop_balance(struct btrfs_fs_info *, enum btrfs_exclusive_operation);
442:	void btrfs_exclop_finish(struct btrfs_fs_info *);
398:	bool btrfs_exclop_start(struct btrfs_fs_info *, enum btrfs_exclusive_operation);
424:	bool btrfs_exclop_start_try_lock(struct btrfs_fs_info *, enum btrfs_exclusive_operation);
437:	void btrfs_exclop_start_unlock(struct btrfs_fs_info *);
238:	int btrfs_fileattr_get(struct dentry *, struct fileattr *);
246:	int btrfs_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
4531:	long btrfs_ioctl(struct file *, unsigned int, unsigned long);
4147:	int btrfs_ioctl_get_supported_features(void *);
543:	int btrfs_is_empty_uuid(u8 *);
173:	void btrfs_sync_inode_flags_to_i_flags(struct inode *);
3428:	void btrfs_update_ioctl_balance_args(struct btrfs_fs_info *, struct btrfs_ioctl_balance_args *);
1242:	static int __btrfs_ioctl_snap_create(struct file *, struct user_namespace *, const char *, unsigned long, int, bool, struct btrfs_qgroup_inherit *);
4313:	static int _btrfs_ioctl_send(struct inode *, void *, bool);
3909:	static long _btrfs_ioctl_set_received_subvol(struct file *, struct user_namespace *, struct btrfs_ioctl_received_subvol_args *);
2617:	static long btrfs_ioctl_add_dev(struct btrfs_fs_info *, void *);
3517:	static long btrfs_ioctl_balance(struct file *, void *);
3610:	static long btrfs_ioctl_balance_ctl(struct btrfs_fs_info *, int);
3625:	static long btrfs_ioctl_balance_progress(struct btrfs_fs_info *, void *);
2876:	static long btrfs_ioctl_default_subvol(struct file *, void *);
2554:	static int btrfs_ioctl_defrag(struct file *, void *);
2835:	static long btrfs_ioctl_dev_info(struct btrfs_fs_info *, void *);
3249:	static long btrfs_ioctl_dev_replace(struct btrfs_fs_info *, void *);
4348:	static int btrfs_ioctl_encoded_read(struct file *, void *, bool);
4431:	static int btrfs_ioctl_encoded_write(struct file *, void *, bool);
478:	static int btrfs_ioctl_fitrim(struct btrfs_fs_info *, void *);
2781:	static long btrfs_ioctl_fs_info(struct btrfs_fs_info *, void *);
3225:	static long btrfs_ioctl_get_dev_stats(struct btrfs_fs_info *, void *);
4161:	static int btrfs_ioctl_get_features(struct btrfs_fs_info *, void *);
4075:	static int btrfs_ioctl_get_fslabel(struct btrfs_fs_info *, void *);
2114:	static int btrfs_ioctl_get_subvol_info(struct inode *, void *);
2234:	static int btrfs_ioctl_get_subvol_rootref(struct btrfs_root *, void *);
473:	static int btrfs_ioctl_getversion(struct inode *, int *);
2031:	static int btrfs_ioctl_ino_lookup(struct btrfs_root *, void *);
2082:	static int btrfs_ioctl_ino_lookup_user(struct file *, void *);
3300:	static long btrfs_ioctl_ino_to_path(struct btrfs_root *, void *);
3361:	static long btrfs_ioctl_logical_to_ino(struct btrfs_fs_info *, void *, int);
3698:	static long btrfs_ioctl_qgroup_assign(struct file *, void *);
3749:	static long btrfs_ioctl_qgroup_create(struct file *, void *);
3799:	static long btrfs_ioctl_qgroup_limit(struct file *, void *);
3657:	static long btrfs_ioctl_quota_ctl(struct file *, void *);
3847:	static long btrfs_ioctl_quota_rescan(struct file *, void *);
3881:	static long btrfs_ioctl_quota_rescan_status(struct btrfs_fs_info *, void *);
3900:	static long btrfs_ioctl_quota_rescan_wait(struct btrfs_fs_info *, void *);
1091:	static int btrfs_ioctl_resize(struct file *, void *);
2732:	static long btrfs_ioctl_rm_dev(struct file *, void *);
2666:	static long btrfs_ioctl_rm_dev_v2(struct file *, void *);
3145:	static long btrfs_ioctl_scrub(struct file *, void *);
3195:	static long btrfs_ioctl_scrub_cancel(struct btrfs_fs_info *);
3203:	static long btrfs_ioctl_scrub_progress(struct btrfs_fs_info *, void *);
4242:	static int btrfs_ioctl_set_features(struct file *, void *);
4099:	static int btrfs_ioctl_set_fslabel(struct file *, void *);
4051:	static long btrfs_ioctl_set_received_subvol(struct file *, void *);
4001:	static long btrfs_ioctl_set_received_subvol_32(struct file *, void *);
1306:	static int btrfs_ioctl_snap_create(struct file *, void *, int);
1328:	static int btrfs_ioctl_snap_create_v2(struct file *, void *, int);
2325:	static int btrfs_ioctl_snap_destroy(struct file *, void *, bool);
2970:	static long btrfs_ioctl_space_info(struct btrfs_fs_info *, void *);
3107:	static long btrfs_ioctl_start_sync(struct btrfs_root *, void *);
1392:	static int btrfs_ioctl_subvol_getflags(struct inode *, void *);
1414:	static int btrfs_ioctl_subvol_setflags(struct file *, void *);
1729:	static int btrfs_ioctl_tree_search(struct inode *, void *);
1759:	static int btrfs_ioctl_tree_search_v2(struct inode *, void *);
3131:	static long btrfs_ioctl_wait_sync(struct btrfs_fs_info *, void *);
901:	static int btrfs_may_delete(struct user_namespace *, struct inode *, struct dentry *, int);
1009:	static int btrfs_mksnapshot(const struct path *, struct user_namespace *, const char *, int, struct btrfs_root *, bool, struct btrfs_qgroup_inherit *);
953:	static int btrfs_mksubvol(const struct path *, struct user_namespace *, const char *, int, struct btrfs_root *, bool, struct btrfs_qgroup_inherit *);
1796:	static int btrfs_search_path_in_tree(struct btrfs_fs_info *, u64, u64, char *);
4177:	static int check_feature_bits(struct btrfs_fs_info *, enum btrfs_feature_set, u64, u64, u64, u64, u64);
1527:	static int copy_to_sk(struct btrfs_path *, struct btrfs_key *, struct btrfs_ioctl_search_key *, size_t *, char *, unsigned long *, int *);
774:	static int create_snapshot(struct btrfs_root *, struct inode *, struct dentry *, bool, struct btrfs_qgroup_inherit *);
581:	static int create_subvol(struct user_namespace *, struct inode *, struct dentry *, struct btrfs_qgroup_inherit *);
1059:	static int exclop_start_or_cancel_reloc(struct btrfs_fs_info *, enum btrfs_exclusive_operation, bool);
1503:	static int key_in_sk(struct btrfs_key *, struct btrfs_ioctl_search_key *);
1660:	static int search_ioctl(struct inode *, struct btrfs_ioctl_search_key *, size_t *, char *);

File fs/btrfs/locking.c:
189:	void __btrfs_tree_lock(struct extent_buffer *, enum btrfs_lock_nesting);
128:	void __btrfs_tree_read_lock(struct extent_buffer *, enum btrfs_lock_nesting);
343:	void btrfs_drew_lock_destroy(struct btrfs_drew_lock *);
328:	int btrfs_drew_lock_init(struct btrfs_drew_lock *);
381:	void btrfs_drew_read_lock(struct btrfs_drew_lock *);
397:	void btrfs_drew_read_unlock(struct btrfs_drew_lock *);
349:	bool btrfs_drew_try_write_lock(struct btrfs_drew_lock *);
366:	void btrfs_drew_write_lock(struct btrfs_drew_lock *);
375:	void btrfs_drew_write_unlock(struct btrfs_drew_lock *);
249:	struct extent_buffer *btrfs_lock_root_node(struct btrfs_root *);
272:	struct extent_buffer *btrfs_read_lock_root_node(struct btrfs_root *);
202:	void btrfs_tree_lock(struct extent_buffer *);
139:	void btrfs_tree_read_lock(struct extent_buffer *);
176:	void btrfs_tree_read_unlock(struct extent_buffer *);
210:	void btrfs_tree_unlock(struct extent_buffer *);
296:	struct extent_buffer *btrfs_try_read_lock_root_node(struct btrfs_root *);
149:	int btrfs_try_tree_read_lock(struct extent_buffer *);
163:	int btrfs_try_tree_write_lock(struct extent_buffer *);
226:	void btrfs_unlock_up_safe(struct btrfs_path *, int);

File fs/btrfs/lzo.c:
82:	struct list_head *lzo_alloc_workspace(unsigned int);
211:	int lzo_compress_pages(struct list_head *, struct address_space *, u64, struct page **, unsigned long *, unsigned long *, unsigned long *);
430:	int lzo_decompress(struct list_head *, const u8 *, struct page *, unsigned long, size_t, size_t);
329:	int lzo_decompress_bio(struct list_head *, struct compressed_bio *);
72:	void lzo_free_workspace(struct list_head *);

File fs/btrfs/messages.c:
309:	void __btrfs_abort_transaction(struct btrfs_trans_handle *, const char *, unsigned int, int, bool);
113:	void __btrfs_handle_fs_error(struct btrfs_fs_info *, const char *, unsigned int, int, const char *, ...);
330:	void __btrfs_panic(struct btrfs_fs_info *, const char *, unsigned int, int, const char *, ...);
209:	void _btrfs_printk(const struct btrfs_fs_info *, const char *, ...);
71:	const char *btrfs_decode_error(int);
263:	void btrfs_print_v0_err(struct btrfs_fs_info *);
30:	static void btrfs_state_to_string(const struct btrfs_fs_info *, char *);

File fs/btrfs/ordered-data.c:
167:	int btrfs_add_ordered_extent(struct btrfs_inode *, u64, u64, u64, u64, u64, u64, unsigned int, int);
267:	void btrfs_add_ordered_sum(struct btrfs_ordered_extent *, struct btrfs_ordered_sum *);
440:	bool btrfs_dec_test_ordered_pending(struct btrfs_inode *, struct btrfs_ordered_extent **, u64, u64);
896:	void btrfs_get_ordered_extents_for_logging(struct btrfs_inode *, struct list_head *);
1038:	void btrfs_lock_and_flush_ordered_range(struct btrfs_inode *, u64, u64, struct extent_state **);
926:	struct btrfs_ordered_extent *btrfs_lookup_first_ordered_extent(struct btrfs_inode *, u64);
955:	struct btrfs_ordered_extent *btrfs_lookup_first_ordered_range(struct btrfs_inode *, u64, u64);
824:	struct btrfs_ordered_extent *btrfs_lookup_ordered_extent(struct btrfs_inode *, u64);
853:	struct btrfs_ordered_extent *btrfs_lookup_ordered_range(struct btrfs_inode *, u64, u64);
299:	void btrfs_mark_ordered_io_finished(struct btrfs_inode *, struct page *, u64, u64, bool);
495:	void btrfs_put_ordered_extent(struct btrfs_ordered_extent *);
522:	void btrfs_remove_ordered_extent(struct btrfs_inode *, struct btrfs_ordered_extent *);
1116:	int btrfs_split_ordered_extent(struct btrfs_ordered_extent *, u64, u64);
725:	void btrfs_start_ordered_extent(struct btrfs_ordered_extent *, int);
1076:	bool btrfs_try_lock_ordered_range(struct btrfs_inode *, u64, u64, struct extent_state **);
627:	u64 btrfs_wait_ordered_extents(struct btrfs_root *, u64, const u64, const u64);
758:	int btrfs_wait_ordered_range(struct inode *, u64, u64);
683:	void btrfs_wait_ordered_roots(struct btrfs_fs_info *, u64, const u64, const u64);
1171:	void ordered_data_exit(void);
1159:	int ordered_data_init(void);
614:	static void btrfs_run_ordered_extent_work(struct btrfs_work *);
278:	static void finish_ordered_fn(struct btrfs_work *);

File fs/btrfs/orphan.c:
31:	int btrfs_del_orphan_item(struct btrfs_trans_handle *, struct btrfs_root *, u64);
10:	int btrfs_insert_orphan_item(struct btrfs_trans_handle *, struct btrfs_root *, u64);

File fs/btrfs/print-tree.c:
202:	void btrfs_print_leaf(struct extent_buffer *);
358:	void btrfs_print_tree(struct extent_buffer *, bool);
33:	const char *btrfs_root_name(const struct btrfs_key *, char *);
52:	static void print_chunk(struct extent_buffer *, struct btrfs_chunk *);
65:	static void print_dev_item(struct extent_buffer *, struct btrfs_dev_item *);
73:	static void print_extent_data_ref(struct extent_buffer *, struct btrfs_extent_data_ref *);

File fs/btrfs/props.c:
95:	bool btrfs_ignore_prop(const struct btrfs_inode *, const char *);
385:	int btrfs_inode_inherit_props(struct btrfs_trans_handle *, struct inode *, struct inode *);
274:	int btrfs_load_inode_props(struct inode *, struct btrfs_path *);
461:	int btrfs_props_init(void);
105:	int btrfs_set_prop(struct btrfs_trans_handle *, struct inode *, const char *, const char *, size_t, int);
65:	int btrfs_validate_prop(const struct btrfs_inode *, const char *, const char *, size_t);
301:	static int prop_compression_apply(struct inode *, const char *, size_t);
360:	static const char *prop_compression_extract(struct inode *);
344:	static bool prop_compression_ignore(const struct btrfs_inode *);
282:	static int prop_compression_validate(const struct btrfs_inode *, const char *, size_t);

File fs/btrfs/qgroup.c:
4056:	void __btrfs_qgroup_free_meta(struct btrfs_root *, int, enum btrfs_qgroup_rsv_type);
4025:	int __btrfs_qgroup_reserve_meta(struct btrfs_root *, int, enum btrfs_qgroup_rsv_type, bool, bool);
1448:	int btrfs_add_qgroup_relation(struct btrfs_trans_handle *, u64, u64);
548:	bool btrfs_check_quota_leak(struct btrfs_fs_info *);
1592:	int btrfs_create_qgroup(struct btrfs_trans_handle *, u64);
1579:	int btrfs_del_qgroup_relation(struct btrfs_trans_handle *, u64, u64);
585:	void btrfs_free_qgroup_config(struct btrfs_fs_info *);
1683:	int btrfs_limit_qgroup(struct btrfs_trans_handle *, u64, struct btrfs_qgroup_limit *);
2646:	int btrfs_qgroup_account_extent(struct btrfs_trans_handle *, u64, u64, struct ulist *, struct ulist *);
2739:	int btrfs_qgroup_account_extents(struct btrfs_trans_handle *);
4219:	int btrfs_qgroup_add_swapped_blocks(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_block_group *, struct extent_buffer *, int, struct extent_buffer *, int, u64);
4140:	void btrfs_qgroup_check_reserved_leak(struct btrfs_inode *);
4184:	void btrfs_qgroup_clean_swapped_blocks(struct btrfs_root *);
4122:	void btrfs_qgroup_convert_reserved_meta(struct btrfs_root *, int);
4414:	void btrfs_qgroup_destroy_extent_records(struct btrfs_transaction *);
3932:	int btrfs_qgroup_free_data(struct btrfs_inode *, struct extent_changeset *, u64, u64);
4041:	void btrfs_qgroup_free_meta_all_pertrans(struct btrfs_root *);
3182:	void btrfs_qgroup_free_refroot(struct btrfs_fs_info *, u64, u64, enum btrfs_qgroup_rsv_type);
2875:	int btrfs_qgroup_inherit(struct btrfs_trans_handle *, u64, u64, struct btrfs_qgroup_inherit *);
4167:	void btrfs_qgroup_init_swapped_blocks(struct btrfs_qgroup_swapped_blocks *);
3953:	int btrfs_qgroup_release_data(struct btrfs_inode *, u64, u64);
3550:	int btrfs_qgroup_rescan(struct btrfs_fs_info *);
3619:	void btrfs_qgroup_rescan_resume(struct btrfs_fs_info *);
3814:	int btrfs_qgroup_reserve_data(struct btrfs_inode *, struct extent_changeset **, u64, u64);
3998:	int btrfs_qgroup_reserve_meta(struct btrfs_root *, int, enum btrfs_qgroup_rsv_type, bool);
1848:	int btrfs_qgroup_trace_extent(struct btrfs_trans_handle *, u64, u64);
1760:	int btrfs_qgroup_trace_extent_nolock(struct btrfs_fs_info *, struct btrfs_delayed_ref_root *, struct btrfs_qgroup_extent_record *);
1795:	int btrfs_qgroup_trace_extent_post(struct btrfs_trans_handle *, struct btrfs_qgroup_extent_record *);
1878:	int btrfs_qgroup_trace_leaf_items(struct btrfs_trans_handle *, struct extent_buffer *);
2308:	int btrfs_qgroup_trace_subtree(struct btrfs_trans_handle *, struct extent_buffer *, u64, int);
4328:	int btrfs_qgroup_trace_subtree_after_cow(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *);
3592:	int btrfs_qgroup_wait_for_completion(struct btrfs_fs_info *, bool);
1228:	int btrfs_quota_disable(struct btrfs_fs_info *);
952:	int btrfs_quota_enable(struct btrfs_fs_info *);
352:	int btrfs_read_qgroup_config(struct btrfs_fs_info *);
1629:	int btrfs_remove_qgroup(struct btrfs_trans_handle *, u64);
2833:	int btrfs_run_qgroups(struct btrfs_trans_handle *);
263:	static int __add_relation_rb(struct btrfs_qgroup *, struct btrfs_qgroup *);
3885:	static int __btrfs_qgroup_release_data(struct btrfs_inode *, struct extent_changeset *, u64, u64, int);
218:	static void __del_qgroup_rb(struct btrfs_fs_info *, struct btrfs_qgroup *);
1514:	static int __del_qgroup_relation(struct btrfs_trans_handle *, u64, u64);
662:	static int add_qgroup_item(struct btrfs_trans_handle *, struct btrfs_root *, u64);
184:	static struct btrfs_qgroup *add_qgroup_rb(struct btrfs_fs_info *, u64);
607:	static int add_qgroup_relation_item(struct btrfs_trans_handle *, u64, u64);
3361:	static void btrfs_qgroup_rescan_worker(struct btrfs_work *);
631:	static int del_qgroup_relation_item(struct btrfs_trans_handle *, u64, u64);
3470:	static int qgroup_rescan_init(struct btrfs_fs_info *, u64, int);
3531:	static void qgroup_rescan_zero_tracking(struct btrfs_fs_info *);
3098:	static int qgroup_reserve(struct btrfs_root *, u64, bool, enum btrfs_qgroup_rsv_type);
3750:	static int qgroup_reserve_data(struct btrfs_inode *, struct extent_changeset **, u64, u64);
2152:	static int qgroup_trace_new_subtree_blocks(struct btrfs_trans_handle *, struct extent_buffer *, struct btrfs_path *, int, int, u64, bool);
2528:	static int qgroup_update_counters(struct btrfs_fs_info *, struct ulist *, u64, u64, u64, u64);
2439:	static int qgroup_update_refcnt(struct btrfs_fs_info *, struct ulist *, struct ulist *, struct ulist *, u64, int);
1422:	static int quick_update_accounting(struct btrfs_fs_info *, struct ulist *, u64, u64, int);
3712:	static int try_flush_qgroup(struct btrfs_root *);
776:	static int update_qgroup_limit_item(struct btrfs_trans_handle *, struct btrfs_qgroup *);
864:	static int update_qgroup_status_item(struct btrfs_trans_handle *);

File fs/btrfs/raid56.c:
119:	int btrfs_alloc_stripe_hash_table(struct btrfs_fs_info *);
447:	void btrfs_free_stripe_hash_table(struct btrfs_fs_info *);
2452:	void raid56_add_scrub_pages(struct btrfs_raid_bio *, struct page *, unsigned int, u64);
2856:	struct btrfs_raid_bio *raid56_alloc_missing_rbio(struct bio *, struct btrfs_io_context *);
2414:	struct btrfs_raid_bio *raid56_parity_alloc_scrub_rbio(struct bio *, struct btrfs_io_context *, struct btrfs_device *, unsigned long *, int);
2115:	void raid56_parity_recover(struct bio *, struct btrfs_io_context *, int);
2847:	void raid56_parity_submit_scrub_rbio(struct btrfs_raid_bio *);
1665:	void raid56_parity_write(struct bio *, struct btrfs_io_context *);
2878:	void raid56_submit_missing_rbio(struct btrfs_raid_bio *);
347:	static void __remove_rbio_from_cache(struct btrfs_raid_bio *);
912:	static struct btrfs_raid_bio *alloc_rbio(struct btrfs_fs_info *, struct btrfs_io_context *);
86:	static void free_raid_bio(struct btrfs_raid_bio *);
1147:	static void index_rbio_pages(struct btrfs_raid_bio *);
655:	static int lock_stripe_add(struct btrfs_raid_bio *);
1585:	static int plug_cmp(void *, const struct list_head *, const struct list_head *);
1602:	static void raid_unplug(struct blk_plug_cb *, bool);
1485:	static void raid_wait_read_end_io(struct bio *);
2240:	static void raid_wait_write_end_io(struct bio *);
1045:	static int rbio_add_io_sector(struct btrfs_raid_bio *, struct bio_list *, struct sector_ptr *, unsigned int, unsigned int, enum req_op);
835:	static void rbio_orig_end_io(struct btrfs_raid_bio *, blk_status_t);
1423:	static void rbio_update_error_bitmap(struct btrfs_raid_bio *, struct bio *);
2003:	static int recover_rbio(struct btrfs_raid_bio *);
2039:	static void recover_rbio_work(struct work_struct *);
2053:	static void recover_rbio_work_locked(struct work_struct *);
1911:	static int recover_sectors(struct btrfs_raid_bio *);
1753:	static int recover_vertical(struct btrfs_raid_bio *, int, void **, void **);
2293:	static int rmw_rbio(struct btrfs_raid_bio *);
2379:	static void rmw_rbio_work(struct work_struct *);
2393:	static void rmw_rbio_work_locked(struct work_struct *);
2837:	static void scrub_rbio_work_locked(struct work_struct *);
881:	static struct sector_ptr *sector_in_rbio(struct btrfs_raid_bio *, int, int, bool);
1325:	static void set_rbio_range_error(struct btrfs_raid_bio *, struct bio *);
296:	static void steal_rbio(struct btrfs_raid_bio *, struct btrfs_raid_bio *);
741:	static void unlock_stripe(struct btrfs_raid_bio *);
1712:	static int verify_one_sector(struct btrfs_raid_bio *, int, int);

File fs/btrfs/reflink.c:
883:	loff_t btrfs_remap_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
338:	static int btrfs_clone(struct inode *, struct inode *, const u64, const u64, const u64, const u64, int);
726:	static int btrfs_clone_files(struct file *, struct file *, u64, u64, u64);
664:	static int btrfs_extent_same_range(struct inode *, u64, u64, struct inode *, u64);
21:	static int clone_finish_inode_update(struct btrfs_trans_handle *, struct inode *, u64, const u64, const u64, int);
58:	static int copy_inline_to_page(struct btrfs_inode *, const u64, char *, const u64, const u64, const u8);

File fs/btrfs/relocation.c:
844:	int btrfs_init_reloc_root(struct btrfs_trans_handle *, struct btrfs_root *);
4165:	int btrfs_recover_relocation(struct btrfs_fs_info *);
4345:	int btrfs_reloc_clone_csums(struct btrfs_inode *, u64, u64);
4392:	int btrfs_reloc_cow_block(struct btrfs_trans_handle *, struct btrfs_root *, struct extent_buffer *, struct extent_buffer *);
4484:	int btrfs_reloc_post_snapshot(struct btrfs_trans_handle *, struct btrfs_pending_snapshot *);
4449:	void btrfs_reloc_pre_snapshot(struct btrfs_pending_snapshot *, u64 *);
3980:	int btrfs_relocate_block_group(struct btrfs_fs_info *, u64);
2938:	int btrfs_should_cancel_balance(struct btrfs_fs_info *);
332:	int btrfs_should_ignore_reloc_root(struct btrfs_root *);
911:	int btrfs_update_reloc_root(struct btrfs_trans_handle *, struct btrfs_root *);
362:	struct btrfs_root *find_reloc_root(struct btrfs_fs_info *, u64);
634:	static int __add_reloc_root(struct btrfs_root *);
667:	static void __del_reloc_root(struct btrfs_root *);
3411:	static int add_data_references(struct reloc_control *, struct btrfs_key *, struct btrfs_path *, struct rb_root *);
3159:	static int add_tree_block(struct reloc_control *, struct btrfs_key *, struct btrfs_path *, struct rb_root *);
468:	static struct btrfs_backref_node *build_backref_tree(struct reloc_control *, struct btrfs_key *, int, u64);
2291:	static u64 calcu_metadata_size(struct reloc_control *, struct btrfs_backref_node *, int);
1640:	static int clean_dirty_subvols(struct reloc_control *);
3839:	static struct inode *create_reloc_inode(struct btrfs_fs_info *, struct btrfs_block_group *);
741:	static struct btrfs_root *create_reloc_root(struct btrfs_trans_handle *, struct btrfs_root *, u64);
3328:	static int delete_block_group_cache(struct btrfs_fs_info *, struct btrfs_block_group *, struct inode *, u64);
3956:	static void describe_relocation(struct btrfs_fs_info *, struct btrfs_block_group *);
2372:	static int do_relocation(struct btrfs_trans_handle *, struct reloc_control *, struct btrfs_backref_node *, struct btrfs_key *, struct btrfs_path *, int);
3461:	static int find_next_extent(struct reloc_control *, struct btrfs_path *, struct btrfs_key *);
961:	static struct inode *find_next_inode(struct btrfs_root *, u64);
1954:	static void free_reloc_roots(struct list_head *);
1519:	static int invalidate_extent_cache(struct btrfs_root *, struct btrfs_key *, struct btrfs_key *);
4136:	static int mark_garbage_root(struct btrfs_root *);
1190:	static int memcmp_node_keys(struct extent_buffer *, int, struct btrfs_path *, int);
1692:	static int merge_reloc_root(struct reloc_control *, struct btrfs_root *);
1963:	static void merge_reloc_roots(struct reloc_control *);
2801:	static int prealloc_file_extent_cluster(struct btrfs_inode *, struct file_extent_cluster *);
1858:	static int prepare_to_merge(struct reloc_control *, int);
3562:	static int prepare_to_relocate(struct reloc_control *);
3607:	static int relocate_block_group(struct reloc_control *);
3126:	static int relocate_data_extent(struct inode *, struct btrfs_key *, struct file_extent_cluster *);
3086:	static int relocate_file_extent_cluster(struct inode *, struct file_extent_cluster *);
2741:	static int relocate_tree_blocks(struct btrfs_trans_handle *, struct reloc_control *, struct rb_root *);
1063:	static int replace_file_extents(struct btrfs_trans_handle *, struct reloc_control *, struct btrfs_root *, struct extent_buffer *);
1210:	static int replace_path(struct btrfs_trans_handle *, struct reloc_control *, struct btrfs_root *, struct btrfs_root *, struct btrfs_path *, struct btrfs_key *, int, int);
2249:	static struct btrfs_root *select_one_root(struct btrfs_backref_node *);
2124:	static struct btrfs_root *select_reloc_root(struct btrfs_trans_handle *, struct reloc_control *, struct btrfs_backref_node *, struct btrfs_backref_edge **);
2910:	static int setup_relocation_extent_mapping(struct inode *, u64, u64, u64);
3552:	static void unset_reloc_control(struct reloc_control *);
252:	static int update_backref_cache(struct btrfs_trans_handle *, struct btrfs_backref_cache *);
1474:	static int walk_down_reloc_tree(struct btrfs_root *, struct btrfs_path *, int *);
1437:	static int walk_up_reloc_tree(struct btrfs_root *, struct btrfs_path *, int *);

File fs/btrfs/root-tree.c:
406:	int btrfs_add_root_ref(struct btrfs_trans_handle *, u64, u64, u64, u64, const struct fscrypt_str *);
461:	void btrfs_check_and_init_root_item(struct btrfs_root_item *);
312:	int btrfs_del_root(struct btrfs_trans_handle *, const struct btrfs_key *);
334:	int btrfs_del_root_ref(struct btrfs_trans_handle *, u64, u64, u64, u64 *, const struct fscrypt_str *);
210:	int btrfs_find_orphan_roots(struct btrfs_fs_info *);
67:	int btrfs_find_root(struct btrfs_root *, const struct btrfs_key *, struct btrfs_path *, struct btrfs_root_item *, struct btrfs_key *);
200:	int btrfs_insert_root(struct btrfs_trans_handle *, struct btrfs_root *, const struct btrfs_key *, struct btrfs_root_item *);
110:	void btrfs_set_root_node(struct btrfs_root_item *, struct extent_buffer *);
541:	void btrfs_subvolume_release_metadata(struct btrfs_root *, struct btrfs_block_rsv *);
501:	int btrfs_subvolume_reserve_metadata(struct btrfs_root *, struct btrfs_block_rsv *, int, bool);
121:	int btrfs_update_root(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_key *, struct btrfs_root_item *);
473:	void btrfs_update_root_times(struct btrfs_trans_handle *, struct btrfs_root *);

File fs/btrfs/scrub.c:
4452:	int btrfs_scrub_cancel(struct btrfs_fs_info *);
4473:	int btrfs_scrub_cancel_dev(struct btrfs_device *);
4446:	void btrfs_scrub_continue(struct btrfs_fs_info *);
4256:	int btrfs_scrub_dev(struct btrfs_fs_info *, u64, u64, u64, struct btrfs_scrub_progress *, int, int);
4431:	void btrfs_scrub_pause(struct btrfs_fs_info *);
4496:	int btrfs_scrub_progress(struct btrfs_fs_info *, u64, struct btrfs_scrub_progress *);
457:	static void __scrub_blocked_if_needed(struct btrfs_fs_info *);
2548:	static void __scrub_mark_bitmap(struct scrub_parity *, unsigned long *, u64, u32);
300:	static struct scrub_sector *alloc_scrub_sector(struct scrub_block *, u64);
3067:	static int find_first_extent_item(struct btrfs_root *, struct btrfs_path *, u64, u64);
3798:	static int finish_extent_writes_for_zoned(struct btrfs_root *, struct btrfs_block_group *);
2231:	static int scrub_add_sector_to_rd_bio(struct scrub_ctx *, struct scrub_sector *);
2495:	static void scrub_bio_end_io(struct bio *);
2506:	static void scrub_bio_end_io_worker(struct work_struct *);
1573:	static void scrub_bio_wait_endio(struct bio *);
2125:	static void scrub_block_put(struct scrub_block *);
483:	static void scrub_blocked_if_needed(struct btrfs_fs_info *);
1996:	static int scrub_checksum_data(struct scrub_block *);
2022:	static int scrub_checksum_tree_block(struct scrub_block *);
3749:	static int scrub_chunk(struct scrub_ctx *, struct btrfs_block_group *, struct btrfs_device *, u64, u64);
3818:	static int scrub_enumerate_chunks(struct scrub_ctx *, struct btrfs_device *, u64, u64);
2635:	static int scrub_find_csum(struct scrub_ctx *, u64, u8 *);
717:	static void scrub_free_ctx(struct scrub_ctx *);
2911:	static void scrub_free_parity(struct scrub_parity *);
2299:	static void scrub_missing_raid56_end_io(struct bio *);
2313:	static void scrub_missing_raid56_worker(struct work_struct *);
2944:	static void scrub_parity_bio_endio(struct bio *);
2933:	static void scrub_parity_bio_endio_worker(struct work_struct *);
3016:	static void scrub_parity_put(struct scrub_parity *);
473:	static void scrub_pause_off(struct btrfs_fs_info *);
901:	static void scrub_print_warning(const char *, struct scrub_block *);
811:	static int scrub_print_warning_inode(u64, u64, u64, u64, void *);
746:	static void scrub_put_ctx(struct scrub_ctx *);
3269:	static int scrub_raid56_parity(struct scrub_ctx *, struct map_lookup *, struct btrfs_device *, u64, u64);
1638:	static void scrub_recheck_block(struct btrfs_fs_info *, struct scrub_block *, int);
1718:	static int scrub_repair_sector_from_good_copy(struct scrub_block *, struct scrub_block *, int, int);
2418:	static int scrub_sectors(struct scrub_ctx *, u64, u32, u64, struct btrfs_device *, u64, u64, int, u8 *, u64);
752:	static struct scrub_ctx *scrub_setup_ctx(struct btrfs_fs_info *, int);
3381:	static int scrub_simple_mirror(struct scrub_ctx *, struct btrfs_root *, struct btrfs_root *, struct btrfs_block_group *, struct map_lookup *, u64, u64, struct btrfs_device *, u64, int);
3573:	static int scrub_stripe(struct scrub_ctx *, struct btrfs_block_group *, struct extent_map *, struct btrfs_device *, int);
2215:	static void scrub_submit(struct scrub_ctx *);
4140:	static int scrub_supers(struct scrub_ctx *, struct btrfs_device *);
4204:	static int scrub_workers_get(struct btrfs_fs_info *, int);
4177:	static void scrub_workers_put(struct btrfs_fs_info *);
1917:	static void scrub_wr_bio_end_io(struct bio *);
1929:	static void scrub_wr_bio_end_io_worker(struct work_struct *);
1895:	static void scrub_wr_submit(struct scrub_ctx *);
1780:	static int scrub_write_sector_to_dev_replace(struct scrub_block *, int);

File fs/btrfs/send.c:
8035:	long btrfs_ioctl_send(struct inode *, struct btrfs_ioctl_send_args *);
1294:	static int __clone_root_cmp_bsearch(const void *, const void *);
1306:	static int __clone_root_cmp_sort(const void *, const void *);
1209:	static int __copy_first_ref(int, u64, int, struct fs_path *, void *);
4984:	static int __find_xattr(int, struct btrfs_key *, const char *, int, const char *, int, void *);
3099:	static void __free_recorded_refs(struct list_head *);
2405:	static int __get_cur_name_and_parent(struct send_ctx *, u64, u64, u64 *, u64 *, struct fs_path *);
5062:	static int __process_changed_deleted_xattr(int, struct btrfs_key *, const char *, int, const char *, int, void *);
5032:	static int __process_changed_new_xattr(int, struct btrfs_key *, const char *, int, const char *, int, void *);
4937:	static int __process_deleted_xattr(int, struct btrfs_key *, const char *, int, const char *, int, void *);
4893:	static int __process_new_xattr(int, struct btrfs_key *, const char *, int, const char *, int, void *);
3366:	static int add_pending_dir_move(struct send_ctx *, u64, u64, u64, struct list_head *, struct list_head *, const bool);
3664:	static int apply_children_dir_moves(struct send_ctx *);
3218:	static int can_rmdir(struct send_ctx *, u64, u64, u64);
7164:	static int changed_cb(struct btrfs_path *, struct btrfs_path *, struct btrfs_key *, enum btrfs_compare_tree_result, struct send_ctx *);
7063:	static int changed_extent(struct send_ctx *, enum btrfs_compare_tree_result);
7008:	static int changed_ref(struct send_ctx *, enum btrfs_compare_tree_result);
7036:	static int changed_xattr(struct send_ctx *, enum btrfs_compare_tree_result);
1529:	static int check_extent_item(u64, const struct btrfs_extent_item *, const struct extent_buffer *, void *);
8028:	static void dedupe_in_progress_warn(const struct btrfs_root *);
2979:	static int did_create_dir(struct send_ctx *, u64);
2192:	static int did_overwrite_ref(struct send_ctx *, u64, u64, u64, u64, const char *, int);
3085:	static int dup_ref(struct recorded_ref *, struct list_head *);
7949:	static int ensure_commit_roots_uptodate(struct send_ctx *);
6602:	static int finish_inode_if_needed(struct send_ctx *, int);
7989:	static int flush_delalloc_roots(struct send_ctx *);
578:	static int fs_path_add_from_extent_buffer(struct fs_path *, struct extent_buffer *, unsigned long, int);
595:	static int fs_path_copy(struct fs_path *, struct fs_path *);
469:	static int fs_path_ensure_buf(struct fs_path *, int);
1813:	static int gen_unique_name(struct send_ctx *, u64, u64, struct fs_path *);
1889:	static int get_cur_inode_state(struct send_ctx *, u64, u64);
2547:	static int get_cur_path(struct send_ctx *, u64, u64, struct fs_path *);
2016:	static int get_first_ref(struct btrfs_root *, u64, u64 *, u64 *, struct fs_path *);
911:	static int get_inode_info(struct btrfs_root *, u64, struct btrfs_inode_info *);
6344:	static int get_last_extent(struct send_ctx *, u64);
358:	static void inconsistent_snapshot_error(struct send_ctx *, enum btrfs_compare_tree_result, const char *);
3858:	static int is_ancestor(struct btrfs_root *, const u64, const u64, const u64, struct fs_path *);
1322:	static int iterate_backrefs(u64, u64, u64, u64, void *);
1100:	static int iterate_dir_item(struct btrfs_root *, struct btrfs_path *, iterate_dir_item_t, void *);
982:	static int iterate_inode_ref(struct btrfs_root *, struct btrfs_path *, struct btrfs_key *, int, iterate_inode_ref_t, void *);
1404:	static bool lookup_backref_cache(u64, void *, const u64 **, int *);
1981:	static int lookup_dir_item_inode(struct btrfs_root *, u64, const char *, int, u64 *);
6440:	static int maybe_send_hole(struct send_ctx *, struct btrfs_path *, struct btrfs_key *);
2324:	static void name_cache_delete(struct send_ctx *, struct name_cache_entry *);
409:	static int need_send_hole(struct send_ctx *);
3120:	static int orphanize_inode(struct send_ctx *, u64, u64, struct fs_path *);
6543:	static int process_all_extents(struct send_ctx *);
5096:	static int process_all_new_xattrs(struct send_ctx *);
4791:	static int process_all_refs(struct send_ctx *, enum btrfs_compare_tree_result);
6483:	static int process_extent(struct send_ctx *, struct btrfs_path *, struct btrfs_key *);
4141:	static int process_recorded_refs(struct send_ctx *, int *);
5159:	static int process_verity(struct send_ctx *);
5216:	static int put_data_header(struct send_ctx *, u32);
1753:	static int read_symlink(struct btrfs_root *, u64, struct fs_path *);
4710:	static int record_deleted_ref_if_needed(int, u64, int, struct fs_path *, void *);
4680:	static int record_new_ref_if_needed(int, u64, int, struct fs_path *, void *);
4638:	static int record_ref_in_tree(struct rb_root *, struct list_head *, struct fs_path *, u64, u64, struct send_ctx *);
4113:	static int refresh_ref_path(struct send_ctx *, struct recorded_ref *);
5802:	static int send_capabilities(struct send_ctx *);
2732:	static int send_chmod(struct send_ctx *, u64, u64, u64);
2795:	static int send_chown(struct send_ctx *, u64, u64, u64, u64);
5351:	static int send_clone(struct send_ctx *, u64, u32, struct clone_root *);
779:	static int send_cmd(struct send_ctx *);
2891:	static int send_create_inode(struct send_ctx *, u64);
5679:	static int send_extent_data(struct send_ctx *, struct btrfs_path *, const u64, const u64);
2762:	static int send_fileattr(struct send_ctx *, u64, u64, u64);
5453:	static int send_hole(struct send_ctx *, u64);
804:	static int send_rename(struct send_ctx *, struct fs_path *, struct fs_path *);
877:	static int send_rmdir(struct send_ctx *, struct fs_path *);
4851:	static int send_set_xattr(struct send_ctx *, struct fs_path *, const char *, int, const char *, int);
7904:	static int send_subvol(struct send_ctx *);
2702:	static int send_truncate(struct send_ctx *, u64, u64, u64);
854:	static int send_unlink(struct send_ctx *, struct fs_path *);
5423:	static int send_update_extent(struct send_ctx *, u64, u32);
2827:	static int send_utimes(struct send_ctx *, u64, u64);
1566:	static bool skip_self_data_ref(u64, u64, u64, void *);
1443:	static void store_backref_cache(u64, const struct ulist *, void *);
696:	static int tlv_put_btrfs_timespec(struct send_ctx *, u16, struct extent_buffer *, struct btrfs_timespec *);
682:	static int tlv_put_string(struct send_ctx *, u16, const char *, int);
7459:	static int tree_advance(struct btrfs_path *, int *, int, int, struct btrfs_key *, u64);
4042:	static int update_ref_path(struct send_ctx *, struct recorded_ref *);
632:	static int write_buf(struct file *, const void *, u32, loff_t *);

File fs/btrfs/space-info.c:
1824:	u64 btrfs_account_ro_block_groups_free_space(struct btrfs_space_info *);
299:	void btrfs_add_bg_to_space_info(struct btrfs_fs_info *, struct btrfs_block_group *);
398:	int btrfs_can_overcommit(struct btrfs_fs_info *, struct btrfs_space_info *, u64, enum btrfs_reserve_flush_enum);
179:	void btrfs_clear_space_info_full(struct btrfs_fs_info *);
526:	void btrfs_dump_space_info(struct btrfs_fs_info *, struct btrfs_space_info *, u64, int);
1807:	void btrfs_dump_space_info_for_trans_abort(struct btrfs_fs_info *);
331:	struct btrfs_space_info *btrfs_find_space_info(struct btrfs_fs_info *, u64);
1360:	void btrfs_init_async_reclaim_work(struct btrfs_fs_info *);
262:	int btrfs_init_space_info(struct btrfs_fs_info *);
1785:	int btrfs_reserve_data_bytes(struct btrfs_fs_info *, u64, enum btrfs_reserve_flush_enum);
1755:	int btrfs_reserve_metadata_bytes(struct btrfs_fs_info *, struct btrfs_block_rsv *, u64, enum btrfs_reserve_flush_enum);
165:	u64 btrfs_space_info_used(struct btrfs_space_info *, bool);
435:	void btrfs_try_granting_tickets(struct btrfs_fs_info *, struct btrfs_space_info *);
219:	void btrfs_update_space_info_chunk_size(struct btrfs_space_info *, u64);
508:	static void __btrfs_dump_space_info(struct btrfs_fs_info *, struct btrfs_space_info *);
1615:	static int __reserve_bytes(struct btrfs_fs_info *, struct btrfs_space_info *, u64, enum btrfs_reserve_flush_enum);
1283:	static void btrfs_async_reclaim_data_space(struct work_struct *);
1063:	static void btrfs_async_reclaim_metadata_space(struct work_struct *);
1151:	static void btrfs_preempt_reclaim_metadata_space(struct work_struct *);
225:	static int create_space_info(struct btrfs_fs_info *, u64);
499:	static void dump_global_block_rsv(struct btrfs_fs_info *);
707:	static void flush_space(struct btrfs_fs_info *, struct btrfs_space_info *, u64, enum btrfs_flush_state, bool);
1013:	static bool maybe_fail_all_tickets(struct btrfs_fs_info *, struct btrfs_space_info *);
854:	static bool need_preemptive_reclaim(struct btrfs_fs_info *, struct btrfs_space_info *);
1386:	static void priority_reclaim_metadata_space(struct btrfs_fs_info *, struct btrfs_space_info *, struct reserve_ticket *, const enum btrfs_flush_state *, int);
967:	static bool steal_from_global_rsv(struct btrfs_fs_info *, struct btrfs_space_info *, struct reserve_ticket *);

File fs/btrfs/subpage.c:
159:	struct btrfs_subpage *btrfs_alloc_subpage(const struct btrfs_fs_info *, enum btrfs_subpage_type);
121:	int btrfs_attach_subpage(const struct btrfs_fs_info *, struct page *, enum btrfs_subpage_type);
145:	void btrfs_detach_subpage(const struct btrfs_fs_info *, struct page *);
183:	void btrfs_free_subpage(struct btrfs_subpage *);
90:	void btrfs_init_subpage_info(struct btrfs_subpage_info *, u32);
67:	bool btrfs_is_subpage(const struct btrfs_fs_info *, struct page *);
712:	void btrfs_page_assert_not_dirty(const struct btrfs_fs_info *, struct page *);
706:	void btrfs_page_clamp_clear_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
700:	void btrfs_page_clamp_clear_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
699:	void btrfs_page_clamp_clear_error(const struct btrfs_fs_info *, struct page *, u64, u32);
704:	void btrfs_page_clamp_clear_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
697:	void btrfs_page_clamp_clear_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
702:	void btrfs_page_clamp_clear_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
706:	void btrfs_page_clamp_set_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
700:	void btrfs_page_clamp_set_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
699:	void btrfs_page_clamp_set_error(const struct btrfs_fs_info *, struct page *, u64, u32);
704:	void btrfs_page_clamp_set_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
697:	void btrfs_page_clamp_set_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
702:	void btrfs_page_clamp_set_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
706:	bool btrfs_page_clamp_test_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
700:	bool btrfs_page_clamp_test_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
699:	bool btrfs_page_clamp_test_error(const struct btrfs_fs_info *, struct page *, u64, u32);
704:	bool btrfs_page_clamp_test_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
697:	bool btrfs_page_clamp_test_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
702:	bool btrfs_page_clamp_test_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
706:	void btrfs_page_clear_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
700:	void btrfs_page_clear_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
699:	void btrfs_page_clear_error(const struct btrfs_fs_info *, struct page *, u64, u32);
704:	void btrfs_page_clear_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
697:	void btrfs_page_clear_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
702:	void btrfs_page_clear_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
212:	void btrfs_page_dec_eb_refs(const struct btrfs_fs_info *, struct page *);
360:	void btrfs_page_end_writer_lock(const struct btrfs_fs_info *, struct page *, u64, u32);
197:	void btrfs_page_inc_eb_refs(const struct btrfs_fs_info *, struct page *);
706:	void btrfs_page_set_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
700:	void btrfs_page_set_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
699:	void btrfs_page_set_error(const struct btrfs_fs_info *, struct page *, u64, u32);
704:	void btrfs_page_set_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
697:	void btrfs_page_set_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
702:	void btrfs_page_set_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
343:	int btrfs_page_start_writer_lock(const struct btrfs_fs_info *, struct page *, u64, u32);
706:	bool btrfs_page_test_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
700:	bool btrfs_page_test_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
699:	bool btrfs_page_test_error(const struct btrfs_fs_info *, struct page *, u64, u32);
704:	bool btrfs_page_test_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
697:	bool btrfs_page_test_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
702:	bool btrfs_page_test_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
743:	void btrfs_page_unlock_writer(struct btrfs_fs_info *, struct page *, u64, u32);
494:	bool btrfs_subpage_clear_and_test_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
596:	void btrfs_subpage_clear_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
511:	void btrfs_subpage_clear_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
455:	void btrfs_subpage_clear_error(const struct btrfs_fs_info *, struct page *, u64, u32);
566:	void btrfs_subpage_clear_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
427:	void btrfs_subpage_clear_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
535:	void btrfs_subpage_clear_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
311:	bool btrfs_subpage_end_and_test_writer(const struct btrfs_fs_info *, struct page *, u64, u32);
255:	void btrfs_subpage_end_reader(const struct btrfs_fs_info *, struct page *, u64, u32);
581:	void btrfs_subpage_set_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
470:	void btrfs_subpage_set_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
441:	void btrfs_subpage_set_error(const struct btrfs_fs_info *, struct page *, u64, u32);
552:	void btrfs_subpage_set_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
412:	void btrfs_subpage_set_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
521:	void btrfs_subpage_set_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);
244:	void btrfs_subpage_start_reader(const struct btrfs_fs_info *, struct page *, u64, u32);
297:	void btrfs_subpage_start_writer(const struct btrfs_fs_info *, struct page *, u64, u32);
635:	bool btrfs_subpage_test_checked(const struct btrfs_fs_info *, struct page *, u64, u32);
632:	bool btrfs_subpage_test_dirty(const struct btrfs_fs_info *, struct page *, u64, u32);
631:	bool btrfs_subpage_test_error(const struct btrfs_fs_info *, struct page *, u64, u32);
634:	bool btrfs_subpage_test_ordered(const struct btrfs_fs_info *, struct page *, u64, u32);
630:	bool btrfs_subpage_test_uptodate(const struct btrfs_fs_info *, struct page *, u64, u32);
633:	bool btrfs_subpage_test_writeback(const struct btrfs_fs_info *, struct page *, u64, u32);

File fs/btrfs/super.c:
958:	char *btrfs_get_subvol_name_from_objectid(struct btrfs_fs_info *, u64);
305:	int btrfs_parse_options(struct btrfs_fs_info *, char *, unsigned long);
1177:	int btrfs_sync_fs(struct super_block *, int);
1873:	static int btrfs_cmp_device_free_bytes(const void *, const void *);
2168:	static long btrfs_control_ioctl(struct file *, unsigned int, unsigned long);
2154:	static int btrfs_control_open(struct inode *, struct file *);
1121:	static int btrfs_fill_super(struct super_block *, struct btrfs_fs_devices *, void *);
2222:	static int btrfs_freeze(struct super_block *);
2383:	static void btrfs_interface_exit(void);
2378:	static int btrfs_interface_init(void);
2129:	static void btrfs_kill_super(struct super_block *);
1563:	static struct dentry *btrfs_mount(struct file_system_type *, int, const char *, void *);
1430:	static struct dentry *btrfs_mount_root(struct file_system_type *, int, const char *, void *);
2388:	static int btrfs_print_mod_info(void);
79:	static void btrfs_put_super(struct super_block *);
1679:	static int btrfs_remount(struct super_block *, int *, char *);
1618:	static void btrfs_resize_thread_pool(struct btrfs_fs_info *, u32, u32);
1341:	static int btrfs_set_super(struct super_block *, void *);
2329:	static int btrfs_show_devname(struct seq_file *, struct dentry *);
1227:	static int btrfs_show_options(struct seq_file *, struct dentry *);
2020:	static int btrfs_statfs(struct dentry *, struct kstatfs *);
1333:	static int btrfs_test_super(struct super_block *, void *);
2296:	static int btrfs_unfreeze(struct super_block *);
2514:	static void exit_btrfs_fs(void);
2520:	static int init_btrfs_fs(void);
2418:	static int register_btrfs(void);
2423:	static void unregister_btrfs(void);

File fs/btrfs/sysfs.c:
2343:	void btrfs_exit_sysfs(void);
1433:	const char *btrfs_feature_set_name(enum btrfs_feature_set);
2307:	int btrfs_init_sysfs(void);
1870:	void btrfs_kobject_uevent(struct block_device *, enum kobject_action);
1438:	char *btrfs_printable_features(enum btrfs_feature_set, u64);
1506:	void btrfs_sysfs_add_block_group_type(struct btrfs_block_group *);
1798:	int btrfs_sysfs_add_device(struct btrfs_device *);
1917:	int btrfs_sysfs_add_fsid(struct btrfs_fs_devices *);
1951:	int btrfs_sysfs_add_mounted(struct btrfs_fs_info *);
2182:	int btrfs_sysfs_add_one_qgroup(struct btrfs_fs_info *, struct btrfs_qgroup *);
2223:	int btrfs_sysfs_add_qgroups(struct btrfs_fs_info *);
1611:	int btrfs_sysfs_add_space_info_type(struct btrfs_fs_info *, struct btrfs_space_info *);
2259:	void btrfs_sysfs_del_one_qgroup(struct btrfs_fs_info *, struct btrfs_qgroup *);
2204:	void btrfs_sysfs_del_qgroups(struct btrfs_fs_info *);
2275:	void btrfs_sysfs_feature_update(struct btrfs_fs_info *, u64, enum btrfs_feature_set);
1627:	void btrfs_sysfs_remove_device(struct btrfs_device *);
1370:	void btrfs_sysfs_remove_fsid(struct btrfs_fs_devices *);
1398:	void btrfs_sysfs_remove_mounted(struct btrfs_fs_info *);
1572:	void btrfs_sysfs_remove_space_info(struct btrfs_space_info *);
1896:	void btrfs_sysfs_update_devid(struct btrfs_device *);
1881:	void btrfs_sysfs_update_sprout_fsid(struct btrfs_fs_devices *);
1348:	static void __btrfs_sysfs_remove_fsid(struct btrfs_fs_devices *);
1307:	static int addrm_unknown_feature_attrs(struct btrfs_fs_info *, bool);
1202:	static ssize_t btrfs_bg_reclaim_threshold_show(struct kobject *, struct kobj_attribute *, char *);
1211:	static ssize_t btrfs_bg_reclaim_threshold_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1093:	static ssize_t btrfs_checksum_show(struct kobject *, struct kobj_attribute *, char *);
721:	static ssize_t btrfs_chunk_size_show(struct kobject *, struct kobj_attribute *, char *);
736:	static ssize_t btrfs_chunk_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1033:	static ssize_t btrfs_clone_alignment_show(struct kobject *, struct kobj_attribute *, char *);
991:	static ssize_t btrfs_commit_stats_show(struct kobject *, struct kobj_attribute *, char *);
1007:	static ssize_t btrfs_commit_stats_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1738:	static ssize_t btrfs_devinfo_error_stats_show(struct kobject *, struct kobj_attribute *, char *);
1728:	static ssize_t btrfs_devinfo_fsid_show(struct kobject *, struct kobj_attribute *, char *);
1648:	static ssize_t btrfs_devinfo_in_fs_metadata_show(struct kobject *, struct kobj_attribute *, char *);
1662:	static ssize_t btrfs_devinfo_missing_show(struct kobject *, struct kobj_attribute *, char *);
1675:	static ssize_t btrfs_devinfo_replace_target_show(struct kobject *, struct kobj_attribute *, char *);
1689:	static ssize_t btrfs_devinfo_scrub_speed_max_show(struct kobject *, struct kobj_attribute *, char *);
1699:	static ssize_t btrfs_devinfo_scrub_speed_max_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1715:	static ssize_t btrfs_devinfo_writeable_show(struct kobject *, struct kobj_attribute *, char *);
463:	static ssize_t btrfs_discard_bitmap_bytes_show(struct kobject *, struct kobj_attribute *, char *);
474:	static ssize_t btrfs_discard_bytes_saved_show(struct kobject *, struct kobj_attribute *, char *);
485:	static ssize_t btrfs_discard_extent_bytes_show(struct kobject *, struct kobj_attribute *, char *);
496:	static ssize_t btrfs_discard_iops_limit_show(struct kobject *, struct kobj_attribute *, char *);
506:	static ssize_t btrfs_discard_iops_limit_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
527:	static ssize_t btrfs_discard_kbps_limit_show(struct kobject *, struct kobj_attribute *, char *);
537:	static ssize_t btrfs_discard_kbps_limit_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
557:	static ssize_t btrfs_discard_max_discard_size_show(struct kobject *, struct kobj_attribute *, char *);
567:	static ssize_t btrfs_discard_max_discard_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
441:	static ssize_t btrfs_discardable_bytes_show(struct kobject *, struct kobj_attribute *, char *);
452:	static ssize_t btrfs_discardable_extents_show(struct kobject *, struct kobj_attribute *, char *);
1106:	static ssize_t btrfs_exclusive_operation_show(struct kobject *, struct kobj_attribute *, char *);
175:	static ssize_t btrfs_feature_attr_show(struct kobject *, struct kobj_attribute *, char *);
191:	static ssize_t btrfs_feature_attr_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
259:	static umode_t btrfs_feature_visible(struct kobject *, struct attribute *, int);
1145:	static ssize_t btrfs_generation_show(struct kobject *, struct kobj_attribute *, char *);
920:	static ssize_t btrfs_label_show(struct kobject *, struct kobj_attribute *, char *);
934:	static ssize_t btrfs_label_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1083:	static ssize_t btrfs_metadata_uuid_show(struct kobject *, struct kobj_attribute *, char *);
971:	static ssize_t btrfs_nodesize_show(struct kobject *, struct kobj_attribute *, char *);
2147:	static ssize_t btrfs_qgroup_rsv_show_data(struct kobject *, struct kobj_attribute *, char *);
2148:	static ssize_t btrfs_qgroup_rsv_show_meta_pertrans(struct kobject *, struct kobj_attribute *, char *);
2149:	static ssize_t btrfs_qgroup_rsv_show_meta_prealloc(struct kobject *, struct kobj_attribute *, char *);
2143:	static ssize_t btrfs_qgroup_show_excl(struct kobject *, struct kobj_attribute *, char *);
2146:	static ssize_t btrfs_qgroup_show_lim_flags(struct kobject *, struct kobj_attribute *, char *);
2145:	static ssize_t btrfs_qgroup_show_max_excl(struct kobject *, struct kobj_attribute *, char *);
2144:	static ssize_t btrfs_qgroup_show_max_rfer(struct kobject *, struct kobj_attribute *, char *);
2142:	static ssize_t btrfs_qgroup_show_rfer(struct kobject *, struct kobj_attribute *, char *);
1156:	static ssize_t btrfs_read_policy_show(struct kobject *, struct kobj_attribute *, char *);
1179:	static ssize_t btrfs_read_policy_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1783:	static void btrfs_release_devid_kobj(struct kobject *);
1254:	static void btrfs_release_fsid_kobj(struct kobject *);
981:	static ssize_t btrfs_sectorsize_show(struct kobject *, struct kobj_attribute *, char *);
839:	static ssize_t btrfs_sinfo_bg_reclaim_threshold_show(struct kobject *, struct kobj_attribute *, char *);
848:	static ssize_t btrfs_sinfo_bg_reclaim_threshold_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
832:	static ssize_t btrfs_space_info_show_bytes_may_use(struct kobject *, struct kobj_attribute *, char *);
830:	static ssize_t btrfs_space_info_show_bytes_pinned(struct kobject *, struct kobj_attribute *, char *);
833:	static ssize_t btrfs_space_info_show_bytes_readonly(struct kobject *, struct kobj_attribute *, char *);
831:	static ssize_t btrfs_space_info_show_bytes_reserved(struct kobject *, struct kobj_attribute *, char *);
829:	static ssize_t btrfs_space_info_show_bytes_used(struct kobject *, struct kobj_attribute *, char *);
834:	static ssize_t btrfs_space_info_show_bytes_zone_unusable(struct kobject *, struct kobj_attribute *, char *);
836:	static ssize_t btrfs_space_info_show_disk_total(struct kobject *, struct kobj_attribute *, char *);
835:	static ssize_t btrfs_space_info_show_disk_used(struct kobject *, struct kobj_attribute *, char *);
827:	static ssize_t btrfs_space_info_show_flags(struct kobject *, struct kobj_attribute *, char *);
828:	static ssize_t btrfs_space_info_show_total_bytes(struct kobject *, struct kobj_attribute *, char *);
1384:	static void btrfs_sysfs_remove_fs_devices(struct btrfs_fs_devices *);
651:	static ssize_t global_rsv_reserved_show(struct kobject *, struct kobj_attribute *, char *);
642:	static ssize_t global_rsv_size_show(struct kobject *, struct kobj_attribute *, char *);
2050:	static ssize_t qgroup_drop_subtree_thres_show(struct kobject *, struct kobj_attribute *, char *);
2064:	static ssize_t qgroup_drop_subtree_thres_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
2020:	static ssize_t qgroup_enabled_show(struct kobject *, struct kobj_attribute *, char *);
2035:	static ssize_t qgroup_inconsistent_show(struct kobject *, struct kobj_attribute *, char *);
2169:	static void qgroup_release(struct kobject *);
2101:	static void qgroups_release(struct kobject *);
1043:	static ssize_t quota_override_show(struct kobject *, struct kobj_attribute *, char *);
1053:	static ssize_t quota_override_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
668:	static ssize_t raid_bytes_show(struct kobject *, struct kobj_attribute *, char *);
700:	static void release_raid_kobj(struct kobject *);
342:	static ssize_t rmdir_subvol_show(struct kobject *, struct kobj_attribute *, char *);
370:	static ssize_t send_stream_version_show(struct kobject *, struct kobj_attribute *, char *);
897:	static void space_info_release(struct kobject *);
349:	static ssize_t supported_checksums_show(struct kobject *, struct kobj_attribute *, char *);
385:	static ssize_t supported_rescue_options_show(struct kobject *, struct kobj_attribute *, char *);
400:	static ssize_t supported_sectorsizes_show(struct kobject *, struct kobj_attribute *, char *);

File fs/btrfs/tests/btrfs-tests.h:
51:	static int btrfs_run_sanity_tests(void);

File fs/btrfs/transaction.c:
1379:	void btrfs_add_dead_root(struct btrfs_root *);
460:	void btrfs_add_dropped_root(struct btrfs_trans_handle *, struct btrfs_root *);
810:	struct btrfs_trans_handle *btrfs_attach_transaction(struct btrfs_root *);
824:	struct btrfs_trans_handle *btrfs_attach_transaction_barrier(struct btrfs_root *);
2578:	int btrfs_clean_one_deleted_snapshot(struct btrfs_fs_info *);
2118:	int btrfs_commit_transaction(struct btrfs_trans_handle *);
1951:	void btrfs_commit_transaction_async(struct btrfs_trans_handle *);
1471:	int btrfs_defrag_root(struct btrfs_root *);
1040:	int btrfs_end_transaction(struct btrfs_trans_handle *);
1045:	int btrfs_end_transaction_throttle(struct btrfs_trans_handle *);
775:	struct btrfs_trans_handle *btrfs_join_transaction(struct btrfs_root *);
791:	struct btrfs_trans_handle *btrfs_join_transaction_nostart(struct btrfs_root *);
781:	struct btrfs_trans_handle *btrfs_join_transaction_spacecache(struct btrfs_root *);
1352:	void btrfs_maybe_wake_unfinished_drop(struct btrfs_fs_info *);
137:	void btrfs_put_transaction(struct btrfs_transaction *);
479:	int btrfs_record_root_in_trans(struct btrfs_trans_handle *, struct btrfs_root *);
955:	bool btrfs_should_end_transaction(struct btrfs_trans_handle *);
760:	struct btrfs_trans_handle *btrfs_start_transaction(struct btrfs_root *, unsigned int);
767:	struct btrfs_trans_handle *btrfs_start_transaction_fallback_global_rsv(struct btrfs_root *, unsigned int);
940:	void btrfs_throttle(struct btrfs_fs_info *);
246:	void btrfs_trans_release_chunk_metadata(struct btrfs_trans_handle *);
1938:	int btrfs_transaction_blocked(struct btrfs_fs_info *);
2617:	void btrfs_transaction_exit(void);
1925:	int btrfs_transaction_in_commit(struct btrfs_fs_info *);
2607:	int btrfs_transaction_init(void);
882:	int btrfs_wait_for_commit(struct btrfs_fs_info *, u64);
1164:	int btrfs_wait_tree_log_extents(struct btrfs_root *, int);
1055:	int btrfs_write_marked_extents(struct btrfs_fs_info *, struct extent_io_tree *, int);
987:	static int __btrfs_end_transaction(struct btrfs_trans_handle *, int);
1111:	static int __btrfs_wait_marked_extents(struct btrfs_fs_info *, struct extent_io_tree *);
1194:	static int btrfs_write_and_wait_transaction(struct btrfs_trans_handle *);
1264:	static int commit_cowonly_roots(struct btrfs_trans_handle *);
1400:	static int commit_fs_roots(struct btrfs_trans_handle *);
1612:	static int create_pending_snapshot(struct btrfs_trans_handle *, struct btrfs_pending_snapshot *);
1886:	static int create_pending_snapshots(struct btrfs_trans_handle *);
261:	static int join_transaction(struct btrfs_fs_info *, unsigned int);
1513:	static int qgroup_account_snapshot(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_root *, struct btrfs_qgroup_inherit *, u64);
399:	static int record_root_in_trans(struct btrfs_trans_handle *, struct btrfs_root *, int);
560:	static struct btrfs_trans_handle *start_transaction(struct btrfs_root *, unsigned int, unsigned int, enum btrfs_reserve_flush_enum, bool);
172:	static void switch_commit_roots(struct btrfs_trans_handle *);
515:	static void wait_current_trans(struct btrfs_fs_info *);
837:	static void wait_for_commit(struct btrfs_transaction *, const enum btrfs_trans_state);

File fs/btrfs/tree-checker.c:
780:	int btrfs_check_chunk_valid(struct extent_buffer *, struct btrfs_chunk *, u64);
1884:	int btrfs_check_eb_owner(const struct extent_buffer *, u64);
1814:	int btrfs_check_leaf_full(struct extent_buffer *);
1820:	int btrfs_check_leaf_relaxed(struct extent_buffer *);
1825:	int btrfs_check_node(struct extent_buffer *);
621:	static void block_group_err(const struct extent_buffer *, int, const char *, ...);
388:	static int check_inode_key(struct extent_buffer *, struct btrfs_key *, int);
1663:	static int check_leaf(struct extent_buffer *, bool);
440:	static int check_root_key(struct extent_buffer *, struct btrfs_key *, int);
731:	static void chunk_err(const struct extent_buffer *, const struct btrfs_chunk *, u64, const char *, ...);
964:	static void dev_item_err(const struct extent_buffer *, int, const char *, ...);
140:	static void dir_item_err(const struct extent_buffer *, int, const char *, ...);
1210:	static void extent_err(const struct extent_buffer *, int, const char *, ...);
80:	static void file_extent_err(const struct extent_buffer *, int, const char *, ...);
55:	static void generic_err(const struct extent_buffer *, int, const char *, ...);

File fs/btrfs/tree-log.c:
3460:	void btrfs_del_dir_entries_in_log(struct btrfs_trans_handle *, struct btrfs_root *, const struct fscrypt_str *, struct btrfs_inode *, u64);
3499:	void btrfs_del_inode_ref_in_log(struct btrfs_trans_handle *, struct btrfs_root *, const struct fscrypt_str *, struct btrfs_inode *, u64);
274:	void btrfs_end_log_trans(struct btrfs_root *);
3265:	int btrfs_free_log(struct btrfs_trans_handle *, struct btrfs_root *);
3275:	int btrfs_free_log_root_tree(struct btrfs_trans_handle *, struct btrfs_fs_info *);
7118:	int btrfs_log_dentry_safe(struct btrfs_trans_handle *, struct dentry *, struct btrfs_log_ctx *);
7407:	void btrfs_log_new_name(struct btrfs_trans_handle *, struct dentry *, struct btrfs_inode *, u64, struct dentry *);
265:	void btrfs_pin_log_trans(struct btrfs_root *);
7382:	void btrfs_record_snapshot_destroy(struct btrfs_trans_handle *, struct btrfs_inode *);
7319:	void btrfs_record_unlink_dir(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_inode *, int);
7136:	int btrfs_recover_log_trees(struct btrfs_root *);
2902:	int btrfs_sync_log(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_log_ctx *);
1353:	static int add_inode_ref(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_root *, struct btrfs_path *, struct extent_buffer *, int, struct btrfs_key *);
1024:	static int backref_in_log(struct btrfs_root *, struct btrfs_key *, u64, const struct fscrypt_str *);
6673:	static int btrfs_log_all_parents(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_log_ctx *);
5016:	static int btrfs_log_all_xattrs(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_path *);
4864:	static int btrfs_log_changed_extents(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_log_ctx *);
5094:	static int btrfs_log_holes(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *);
6338:	static int btrfs_log_inode(struct btrfs_trans_handle *, struct btrfs_inode *, int, struct btrfs_log_ctx *);
6987:	static int btrfs_log_inode_parent(struct btrfs_trans_handle *, struct btrfs_inode *, struct dentry *, int, struct btrfs_log_ctx *);
4739:	static int btrfs_log_prealloc_extents(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *);
2104:	static int check_item_in_log(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_path *, struct inode *, struct btrfs_key *);
4293:	static int copy_items(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_path *, int, int, int, u64);
1785:	static int delete_conflicting_dir_entry(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_dir_item *, const struct btrfs_key *, u8, bool);
4070:	static int drop_inode_items(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_inode *, int);
932:	static int drop_one_dir_item(struct btrfs_trans_handle *, struct btrfs_path *, struct btrfs_inode *, struct btrfs_dir_item *);
4527:	static int extent_cmp(void *, const struct list_head *, const struct list_head *);
4138:	static void fill_inode_item(struct btrfs_trans_handle *, struct extent_buffer *, struct btrfs_inode_item *, struct inode *, int, u64);
2028:	static int find_dir_range(struct btrfs_root *, struct btrfs_path *, u64, u64 *, u64 *);
1603:	static int fixup_inode_link_count(struct btrfs_trans_handle *, struct btrfs_root *, struct inode *);
1655:	static int fixup_inode_link_counts(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *);
3212:	static void free_log_tree(struct btrfs_trans_handle *, struct btrfs_root *);
977:	static int inode_in_dir(struct btrfs_root *, struct btrfs_path *, u64, u64, u64, struct fscrypt_str *);
3295:	static int inode_logged(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *);
5959:	static int insert_delayed_items_batch(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, const struct btrfs_item_batch *, const struct btrfs_delayed_item *);
3535:	static int insert_dir_log_key(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64, u64, u64);
1755:	static int insert_one_name(struct btrfs_trans_handle *, struct btrfs_root *, u64, u64, const struct fscrypt_str *, struct btrfs_key *);
236:	static int join_running_log_trans(struct btrfs_root *);
1716:	static int link_to_fixup_dir(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, u64);
6898:	static int log_all_new_ancestors(struct btrfs_trans_handle *, struct btrfs_inode *, struct dentry *, struct btrfs_log_ctx *);
4247:	static int log_csums(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_root *, struct btrfs_ordered_sum *);
6233:	static int log_delayed_deletion_items(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, const struct list_head *, struct btrfs_log_ctx *);
5987:	static int log_delayed_insertion_items(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, const struct list_head *, struct btrfs_log_ctx *);
3773:	static int log_dir_items(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_path *, struct btrfs_log_ctx *, u64, u64 *);
4031:	static int log_directory_changes(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_path *, struct btrfs_path *, struct btrfs_log_ctx *);
4201:	static int log_inode_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct btrfs_inode *, bool);
5400:	static int log_new_dir_dentries(struct btrfs_trans_handle *, struct btrfs_inode *, struct btrfs_log_ctx *);
382:	static int overwrite_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct extent_buffer *, int, struct btrfs_key *);
333:	static int process_one_buffer(struct btrfs_root *, struct extent_buffer *, struct walk_control *, u64, int);
607:	static struct inode *read_one_inode(struct btrfs_root *, u64);
2288:	static int replay_dir_deletes(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_root *, struct btrfs_path *, u64, int);
2392:	static int replay_one_buffer(struct btrfs_root *, struct extent_buffer *, struct walk_control *, u64, int);
1958:	static int replay_one_dir_item(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct extent_buffer *, int, struct btrfs_key *);
630:	static int replay_one_extent(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct extent_buffer *, int, struct btrfs_key *);
1829:	static int replay_one_name(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, struct extent_buffer *, struct btrfs_dir_item *, struct btrfs_key *);
2552:	static void unaccount_log_buffer(struct btrfs_fs_info *, u64);
2824:	static void wait_log_commit(struct btrfs_root *, int);
2572:	static int walk_down_log_tree(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int *, struct walk_control *);
2729:	static int walk_log_tree(struct btrfs_trans_handle *, struct btrfs_root *, struct walk_control *);
2667:	static int walk_up_log_tree(struct btrfs_trans_handle *, struct btrfs_root *, struct btrfs_path *, int *, struct walk_control *);

File fs/btrfs/tree-log.h:
55:	static void btrfs_release_log_ctx_extents(struct btrfs_log_ctx *);

File fs/btrfs/tree-mod-log.c:
795:	struct extent_buffer *btrfs_get_old_root(struct btrfs_root *, u64);
60:	u64 btrfs_get_tree_mod_seq(struct btrfs_fs_info *, struct btrfs_seq_list *);
898:	int btrfs_old_root_level(struct btrfs_root *, u64);
74:	void btrfs_put_tree_mod_seq(struct btrfs_fs_info *, struct btrfs_seq_list *);
480:	int btrfs_tree_mod_log_eb_copy(struct extent_buffer *, struct extent_buffer *, unsigned long, unsigned long, int);
553:	int btrfs_tree_mod_log_free_eb(struct extent_buffer *);
225:	int btrfs_tree_mod_log_insert_key(struct extent_buffer *, int, enum btrfs_mod_log_op);
251:	int btrfs_tree_mod_log_insert_move(struct extent_buffer *, int, int, int);
346:	int btrfs_tree_mod_log_insert_root(struct extent_buffer *, struct extent_buffer *, bool);
922:	u64 btrfs_tree_mod_log_lowest_seq(struct btrfs_fs_info *);
735:	struct extent_buffer *btrfs_tree_mod_log_rewind(struct btrfs_fs_info *, struct btrfs_path *, struct extent_buffer *, u64);
202:	static struct tree_mod_elem *alloc_tree_mod_elem(struct extent_buffer *, int, enum btrfs_mod_log_op);
133:	static int tree_mod_log_insert(struct btrfs_fs_info *, struct tree_mod_elem *);
600:	static struct tree_mod_elem *tree_mod_log_oldest_root(struct extent_buffer *, u64);
656:	static void tree_mod_log_rewind(struct btrfs_fs_info *, struct extent_buffer *, u64, struct tree_mod_elem *);

File fs/btrfs/ulist.c:
193:	int ulist_add(struct ulist *, u64, u64, gfp_t);
198:	int ulist_add_merge(struct ulist *, u64, u64, u64 *, gfp_t);
97:	struct ulist *ulist_alloc(gfp_t);
235:	int ulist_del(struct ulist *, u64, u64);
116:	void ulist_free(struct ulist *);
49:	void ulist_init(struct ulist *);
269:	struct ulist_node *ulist_next(const struct ulist *, struct ulist_iterator *);
84:	void ulist_reinit(struct ulist *);
64:	void ulist_release(struct ulist *);

File fs/btrfs/uuid-tree.c:
85:	int btrfs_uuid_tree_add(struct btrfs_trans_handle *, u8 *, u8, u64);
293:	int btrfs_uuid_tree_iterate(struct btrfs_fs_info *);
149:	int btrfs_uuid_tree_remove(struct btrfs_trans_handle *, u8 *, u8, u64);

File fs/btrfs/volumes.c:
6368:	int __btrfs_map_block(struct btrfs_fs_info *, enum btrfs_map_op, u64, u64 *, struct btrfs_io_context **, struct btrfs_io_stripe *, int *, int);
6758:	struct btrfs_device *btrfs_alloc_device(struct btrfs_fs_info *, const u64 *, const u8 *, const char *);
1985:	void btrfs_assign_next_active_device(struct btrfs_device *, struct btrfs_device *);
4230:	int btrfs_balance(struct btrfs_fs_info *, struct btrfs_balance_control *, struct btrfs_ioctl_balance_args *);
167:	enum btrfs_raid_types btrfs_bg_flags_to_raid_index(u64);
7847:	int btrfs_bg_type_to_factor(u64);
177:	const char *btrfs_bg_type_to_raid_name(u64);
6823:	u64 btrfs_calc_stripe_length(const struct extent_map *);
4567:	int btrfs_cancel_balance(struct btrfs_fs_info *);
7317:	bool btrfs_check_rw_degradable(struct btrfs_fs_info *, struct btrfs_device *);
5512:	int btrfs_chunk_alloc_add_chunk_item(struct btrfs_trans_handle *, struct btrfs_block_group *);
5666:	bool btrfs_chunk_writeable(struct btrfs_fs_info *, u64);
416:	void btrfs_cleanup_fs_uuids(void);
1177:	void btrfs_close_devices(struct btrfs_fs_devices *);
7820:	void btrfs_commit_device_sizes(struct btrfs_transaction *);
5447:	struct btrfs_block_group *btrfs_create_chunk(struct btrfs_trans_handle *, u64);
4752:	int btrfs_create_uuid_tree(struct btrfs_fs_info *);
198:	void btrfs_describe_block_groups(u64, char *, u32);
2294:	void btrfs_destroy_dev_replace_tgtdev(struct btrfs_device *);
7738:	void btrfs_dev_stat_inc_and_print(struct btrfs_device *, int);
6689:	struct btrfs_device *btrfs_find_device(const struct btrfs_fs_devices *, const struct btrfs_dev_lookup_args *);
2392:	struct btrfs_device *btrfs_find_device_by_devspec(struct btrfs_fs_info *, u64, const char *);
1321:	int btrfs_forget_devices(dev_t);
394:	void btrfs_free_device(struct btrfs_device *);
1079:	void btrfs_free_extra_devids(struct btrfs_fs_devices *);
5767:	unsigned long btrfs_full_stripe_len(struct btrfs_fs_info *, u64);
5917:	void btrfs_get_bioc(struct btrfs_io_context *);
3014:	struct extent_map *btrfs_get_chunk_map(struct btrfs_fs_info *, u64, u64);
2339:	int btrfs_get_dev_args_from_path(struct btrfs_fs_info *, struct btrfs_dev_lookup_args *, const char *);
7774:	int btrfs_get_dev_stats(struct btrfs_fs_info *, struct btrfs_ioctl_get_dev_stats *);
354:	struct list_head *btrfs_get_fs_uuids(void);
6287:	int btrfs_get_io_geometry(struct btrfs_fs_info *, struct extent_map *, enum btrfs_map_op, u64, struct btrfs_io_geometry *);
2883:	int btrfs_grow_device(struct btrfs_trans_handle *, struct btrfs_device *, u64);
7602:	int btrfs_init_dev_stats(struct btrfs_fs_info *);
7508:	int btrfs_init_devices_late(struct btrfs_fs_info *);
2590:	int btrfs_init_new_device(struct btrfs_fs_info *, const char *);
5788:	int btrfs_is_parity_mirror(struct btrfs_fs_info *, u64, u64);
6638:	int btrfs_map_block(struct btrfs_fs_info *, enum btrfs_map_op, u64, u64 *, struct btrfs_io_context **, int);
5935:	struct btrfs_discard_stripe *btrfs_map_discard(struct btrfs_fs_info *, u64, u64 *, u32 *);
6647:	int btrfs_map_sblock(struct btrfs_fs_info *, enum btrfs_map_op, u64, u64 *, struct btrfs_io_context **);
5703:	void btrfs_mapping_tree_free(struct extent_map_tree *);
187:	int btrfs_nr_parity_stripes(u64);
5722:	int btrfs_num_copies(struct btrfs_fs_info *, u64, u64);
1245:	int btrfs_open_devices(struct btrfs_fs_devices *, fmode_t, void *);
4538:	int btrfs_pause_balance(struct btrfs_fs_info *);
8092:	bool btrfs_pinned_by_swapfile(struct btrfs_fs_info *, void *);
5923:	void btrfs_put_bioc(struct btrfs_io_context *);
2384:	void btrfs_put_dev_args_from_path(struct btrfs_dev_lookup_args *);
7383:	int btrfs_read_chunk_tree(struct btrfs_fs_info *);
7203:	int btrfs_read_sys_array(struct btrfs_fs_info *);
4466:	int btrfs_recover_balance(struct btrfs_fs_info *);
1270:	void btrfs_release_disk_super(struct btrfs_super_block *);
3223:	int btrfs_relocate_chunk(struct btrfs_fs_info *, u64);
3066:	int btrfs_remove_chunk(struct btrfs_trans_handle *, u64);
8160:	bool btrfs_repair_one_zone(struct btrfs_fs_info *, u64);
4433:	int btrfs_resume_balance_async(struct btrfs_fs_info *);
2267:	void btrfs_rm_dev_replace_free_srcdev(struct btrfs_device *);
2240:	void btrfs_rm_dev_replace_remove_srcdev(struct btrfs_device *);
2066:	int btrfs_rm_device(struct btrfs_fs_info *, struct btrfs_dev_lookup_args *, struct block_device **, fmode_t *);
7701:	int btrfs_run_dev_stats(struct btrfs_trans_handle *);
1337:	struct btrfs_device *btrfs_scan_one_device(const char *, fmode_t, void *);
2043:	void btrfs_scratch_superblocks(struct btrfs_fs_info *, struct block_device *, const char *);
4799:	int btrfs_shrink_device(struct btrfs_device *, u64);
4617:	int btrfs_uuid_scan_kthread(void *);
7992:	int btrfs_verify_dev_extents(struct btrfs_fs_info *);
1698:	int find_free_dev_extent(struct btrfs_device *, u64, u64 *, u64 *);
3832:	static int __btrfs_balance(struct btrfs_fs_info *);
1032:	static void __btrfs_free_extra_devids(struct btrfs_fs_devices *, struct btrfs_device **);
6714:	static struct btrfs_device *add_missing_dev(struct btrfs_fs_devices *, u64, u8 *);
4418:	static int balance_kthread(void *);
1825:	static int btrfs_add_dev_item(struct btrfs_trans_handle *, struct btrfs_device *);
5017:	static int btrfs_cmp_device_info(const void *, const void *);
7558:	static int btrfs_device_init_dev_stats(struct btrfs_device *, struct btrfs_path *);
2515:	static int btrfs_finish_sprout(struct btrfs_trans_handle *);
540:	static int btrfs_free_stale_devices(dev_t, struct btrfs_device *);
492:	static int btrfs_get_bdev_and_sb(const char *, fmode_t, void *, int, struct block_device **, struct btrfs_super_block **);
2418:	static struct btrfs_fs_devices *btrfs_init_sprout(struct btrfs_fs_info *);
3375:	static int btrfs_may_alloc_data_chunk(struct btrfs_fs_info *, u64);
1277:	static struct btrfs_super_block *btrfs_read_disk_super(struct block_device *, u64, u64);
3296:	static int btrfs_relocate_sys_chunks(struct btrfs_fs_info *);
1902:	static int btrfs_rm_dev_item(struct btrfs_trans_handle *, struct btrfs_device *);
2463:	static void btrfs_setup_sprout(struct btrfs_fs_info *, struct btrfs_fs_devices *);
2837:	static int btrfs_update_device(struct btrfs_trans_handle *, struct btrfs_device *);
978:	static struct btrfs_fs_devices *clone_fs_devices(struct btrfs_fs_devices *);
1158:	static void close_fs_devices(struct btrfs_fs_devices *);
4078:	static void describe_balance_args(struct btrfs_balance_args *, char *, u32);
4171:	static void describe_balance_start_or_resume(struct btrfs_fs_info *);
754:	static struct btrfs_device *device_list_add(const char *, struct btrfs_super_block *, bool *);
1230:	static int devid_cmp(void *, const struct list_head *, const struct list_head *);
428:	static struct btrfs_fs_devices *find_fsid(const u8 *, const u8 *);
5808:	static int find_live_mirror(struct btrfs_fs_info *, struct map_lookup *, int, int);
1778:	static int find_next_devid(struct btrfs_fs_info *, u64 *);
403:	static void free_fs_devices(struct btrfs_fs_devices *);
5618:	static int init_first_rw_device(struct btrfs_trans_handle *);
3412:	static int insert_balance_item(struct btrfs_fs_info *, struct btrfs_balance_control *);
1195:	static int open_fs_devices(struct btrfs_fs_devices *, fmode_t, void *);
6892:	static int read_one_chunk(struct btrfs_key *, struct extent_buffer *, struct btrfs_chunk *);
8112:	static int relocating_repair_kthread(void *);
3043:	static int remove_chunk_item(struct btrfs_trans_handle *, struct map_lookup *, u64);
3551:	static void reset_balance_state(struct btrfs_fs_info *);
3509:	static void update_balance_args(struct btrfs_balance_control *);
1887:	static void update_dev_time(const char *);
4056:	static int validate_convert_profile(struct btrfs_fs_info *, const struct btrfs_balance_args *, u64, const char *);

File fs/btrfs/xattr.c:
27:	int btrfs_getxattr(struct inode *, const char *, void *, size_t);
277:	ssize_t btrfs_listxattr(struct dentry *, char *, size_t);
83:	int btrfs_setxattr(struct btrfs_trans_handle *, struct inode *, const char *, const void *, size_t, int);
229:	int btrfs_setxattr_trans(struct inode *, const char *, const void *, size_t, int);
490:	int btrfs_xattr_security_init(struct btrfs_trans_handle *, struct inode *, struct inode *, const struct qstr *);
364:	static int btrfs_xattr_handler_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
372:	static int btrfs_xattr_handler_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
385:	static int btrfs_xattr_handler_set_prop(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/btrfs/zlib.c:
55:	struct list_head *zlib_alloc_workspace(unsigned int);
94:	int zlib_compress_pages(struct list_head *, struct address_space *, u64, struct page **, unsigned long *, unsigned long *, unsigned long *);
358:	int zlib_decompress(struct list_head *, const u8 *, struct page *, unsigned long, size_t, size_t);
271:	int zlib_decompress_bio(struct list_head *, struct compressed_bio *);
46:	void zlib_free_workspace(struct list_head *);
36:	struct list_head *zlib_get_workspace(unsigned int);

File fs/btrfs/zoned.h:
386:	static void btrfs_clear_treelog_bg(struct btrfs_block_group *);

File fs/btrfs/zstd.c:
347:	struct list_head *zstd_alloc_workspace(unsigned int);
200:	void zstd_cleanup_workspace_manager(void);
373:	int zstd_compress_pages(struct list_head *, struct address_space *, u64, struct page **, unsigned long *, unsigned long *, unsigned long *);
619:	int zstd_decompress(struct list_head *, const u8 *, struct page *, unsigned long, size_t, size_t);
542:	int zstd_decompress_bio(struct list_head *, struct compressed_bio *);
338:	void zstd_free_workspace(struct list_head *);
267:	struct list_head *zstd_get_workspace(unsigned int);
174:	void zstd_init_workspace_manager(void);
308:	void zstd_put_workspace(struct list_head *);
107:	static void zstd_reclaim_timer_fn(struct timer_list *);

File fs/buffer.c:
1153:	void __bforget(struct buffer_head *);
2964:	int __bh_read(struct buffer_head *, blk_opf_t, bool);
2992:	void __bh_read_batch(int, struct buffer_head **, blk_opf_t, bool);
2038:	int __block_write_begin(struct page *, loff_t, unsigned int, get_block_t *);
1953:	int __block_write_begin_int(struct folio *, loff_t, unsigned int, get_block_t *, const struct iomap *);
1694:	int __block_write_full_page(struct inode *, struct page *, get_block_t *, struct writeback_control *, bh_end_io_t *);
1364:	struct buffer_head *__bread_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
1341:	void __breadahead(struct block_device *, sector_t, unsigned int);
1139:	void __brelse(struct buffer_head *);
1301:	struct buffer_head *__find_get_block(struct block_device *, sector_t, unsigned int);
1326:	struct buffer_head *__getblk_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
67:	void __lock_buffer(struct buffer_head *);
2729:	int __sync_dirty_buffer(struct buffer_head *, blk_opf_t);
120:	void __wait_on_buffer(struct buffer_head *);
2897:	struct buffer_head *alloc_buffer_head(gfp_t);
811:	struct buffer_head *alloc_page_buffers(struct page *, unsigned long, bool);
2944:	int bh_uptodate_or_lock(struct buffer_head *);
2460:	int block_commit_write(struct page *, unsigned int, unsigned int);
616:	bool block_dirty_folio(struct address_space *, struct folio *);
1483:	void block_invalidate_folio(struct folio *, size_t, size_t);
2196:	bool block_is_partially_uptodate(struct folio *, size_t, size_t);
2486:	int block_page_mkwrite(struct vm_area_struct *, struct vm_fault *, get_block_t *);
2239:	int block_read_full_folio(struct folio *, get_block_t *);
2525:	int block_truncate_page(struct address_space *, loff_t, get_block_t *);
2091:	int block_write_begin(struct address_space *, loff_t, unsigned int, struct page **, get_block_t *);
2114:	int block_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2602:	int block_write_full_page(struct page *, get_block_t *, struct writeback_control *);
86:	void buffer_check_dirty_writeback(struct folio *, bool *, bool *);
3021:	void buffer_init(void);
1588:	void clean_bdev_aliases(struct block_device *, sector_t, sector_t);
2436:	int cont_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **, get_block_t *, loff_t *);
1538:	void create_empty_buffers(struct page *, unsigned long, unsigned long);
524:	void emergency_thaw_bdev(struct super_block *);
342:	void end_buffer_async_write(struct buffer_head *, int);
157:	void end_buffer_read_sync(struct buffer_head *, int);
164:	void end_buffer_write_sync(struct buffer_head *, int);
2912:	void free_buffer_head(struct buffer_head *);
2635:	sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);
2335:	int generic_cont_expand_simple(struct inode *, loff_t);
2150:	int generic_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1397:	bool has_bh_in_lru(int, void *);
484:	int inode_has_buffers(struct inode *);
1410:	void invalidate_bh_lrus(void);
1420:	void invalidate_bh_lrus_cpu(void);
758:	void invalidate_inode_buffers(struct inode *);
418:	void mark_buffer_async_write(struct buffer_head *);
1079:	void mark_buffer_dirty(struct buffer_head *);
570:	void mark_buffer_dirty_inode(struct buffer_head *, struct inode *);
1114:	void mark_buffer_write_io_error(struct buffer_head *);
1861:	void page_zero_new_buffers(struct page *, unsigned int, unsigned int);
779:	int remove_inode_buffers(struct inode *);
1430:	void set_bh_page(struct buffer_head *, struct page *, unsigned long);
2705:	void submit_bh(blk_opf_t, struct buffer_head *);
2756:	int sync_dirty_buffer(struct buffer_head *);
541:	int sync_mapping_buffers(struct address_space *);
60:	void touch_buffer(struct buffer_head *);
2815:	bool try_to_free_buffers(struct folio *);
73:	void unlock_buffer(struct buffer_head *);
559:	void write_boundary_block(struct block_device *, sector_t, unsigned int);
2711:	void write_dirty_buffer(struct buffer_head *, blk_opf_t);
2046:	static int __block_commit_write(struct inode *, struct page *, unsigned int, unsigned int);
2923:	static int buffer_exit_cpu_dead(unsigned int);
2789:	static bool drop_buffers(struct folio *, struct buffer_head **);
2648:	static void end_bio_bh_io_sync(struct bio *);
244:	static void end_buffer_async_read(struct buffer_head *, int);
320:	static void end_buffer_async_read_io(struct buffer_head *, int);
891:	static sector_t init_page_buffers(struct page *, struct block_device *, sector_t, int);
1389:	static void invalidate_bh_lru(void *);
2659:	static void submit_bh_wbc(blk_opf_t, struct buffer_head *, struct writeback_control *);

File fs/char_dev.c:
268:	int __register_chrdev(unsigned int, unsigned int, unsigned int, const char *, const struct file_operations *);
335:	void __unregister_chrdev(unsigned int, unsigned int, unsigned int, const char *);
236:	int alloc_chrdev_region(dev_t *, unsigned int, unsigned int, const char *);
426:	void cd_forget(struct inode *);
479:	int cdev_add(struct cdev *, dev_t, unsigned int);
640:	struct cdev *cdev_alloc(void);
601:	void cdev_del(struct cdev *);
544:	int cdev_device_add(struct cdev *, struct device *);
578:	void cdev_device_del(struct cdev *, struct device *);
658:	void cdev_init(struct cdev *, const struct file_operations *);
361:	void cdev_put(struct cdev *);
515:	void cdev_set_parent(struct cdev *, struct kobject *);
674:	void chrdev_init(void);
51:	void chrdev_show(struct seq_file *, off_t);
200:	int register_chrdev_region(dev_t, unsigned int, const char *);
311:	void unregister_chrdev_region(dev_t, unsigned int);
97:	static struct char_device_struct *__register_chrdev_region(unsigned int, unsigned int, int, const char *);
666:	static struct kobject *base_probe(dev_t, int *, void *);
608:	static void cdev_default_release(struct kobject *);
617:	static void cdev_dynamic_release(struct kobject *);
373:	static int chrdev_open(struct inode *, struct file *);
463:	static int exact_lock(dev_t, void *);
457:	static struct kobject *exact_match(dev_t, int *, void *);

File fs/configfs/dir.c:
362:	int configfs_create_link(struct configfs_dirent *, struct dentry *, struct dentry *, char *);
1108:	int configfs_depend_item(struct configfs_subsystem *, struct config_item *);
1190:	int configfs_depend_item_unlocked(struct configfs_subsystem *, struct config_item *);
351:	int configfs_dirent_is_ready(struct configfs_dirent *);
242:	int configfs_make_dirent(struct configfs_dirent *, struct dentry *, void *, umode_t, int, struct configfs_fragment *);
1817:	struct config_group *configfs_register_default_group(struct config_group *, const char *, const struct config_item_type *);
1728:	int configfs_register_group(struct config_group *, struct config_group *);
1849:	int configfs_register_subsystem(struct configfs_subsystem *);
709:	void configfs_remove_default_groups(struct config_group *);
1158:	void configfs_undepend_item(struct config_item *);
1842:	void configfs_unregister_default_group(struct config_group *);
1773:	void configfs_unregister_group(struct config_group *);
1909:	void configfs_unregister_subsystem(struct configfs_subsystem *);
178:	struct configfs_fragment *get_fragment(struct configfs_fragment *);
172:	void put_fragment(struct configfs_fragment *);
920:	static void client_drop_item(struct config_item *, struct config_item *);
846:	static int configfs_attach_group(struct config_item *, struct config_item *, struct dentry *, struct configfs_fragment *);
811:	static int configfs_attach_item(struct config_item *, struct config_item *, struct dentry *, struct configfs_fragment *);
45:	static void configfs_d_iput(struct dentry *, struct inode *);
1034:	static int configfs_depend_prep(struct dentry *, struct config_item *);
492:	static int configfs_detach_prep(struct dentry *, struct dentry **);
539:	static void configfs_detach_rollback(struct dentry *);
1586:	static int configfs_dir_close(struct inode *, struct file *);
1669:	static loff_t configfs_dir_lseek(struct file *, loff_t, int);
1562:	static int configfs_dir_open(struct inode *, struct file *);
331:	static void configfs_dir_set_ready(struct configfs_dirent *);
430:	static struct dentry *configfs_lookup(struct inode *, struct dentry *, unsigned int);
1254:	static int configfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
188:	static struct configfs_dirent *configfs_new_dirent(struct configfs_dirent *, void *, int, struct configfs_fragment *);
1608:	static int configfs_readdir(struct file *, struct dir_context *);
416:	static void configfs_remove_dir(struct config_item *);
260:	static void configfs_remove_dirent(struct dentry *);
1438:	static int configfs_rmdir(struct inode *, struct dentry *);
660:	static int create_default_group(struct config_group *, struct config_group *, struct configfs_fragment *);
551:	static void detach_attrs(struct config_item *);
616:	static void detach_groups(struct config_group *);
777:	static void link_group(struct config_group *, struct config_group *);
744:	static void link_obj(struct config_item *, struct config_item *);
766:	static void unlink_group(struct config_group *);
725:	static void unlink_obj(struct config_item *);

File fs/configfs/file.c:
468:	int configfs_create_bin_file(struct config_item *, const struct configfs_bin_attribute *);
447:	int configfs_create_file(struct config_item *, const struct configfs_attribute *);
290:	static int __configfs_open_file(struct inode *, struct file *, int);
106:	static ssize_t configfs_bin_read_iter(struct kiocb *, struct iov_iter *);
236:	static ssize_t configfs_bin_write_iter(struct kiocb *, struct iov_iter *);
396:	static int configfs_open_bin_file(struct inode *, struct file *);
391:	static int configfs_open_file(struct inode *, struct file *);
80:	static ssize_t configfs_read_iter(struct kiocb *, struct iov_iter *);
379:	static int configfs_release(struct inode *, struct file *);
401:	static int configfs_release_bin_file(struct inode *, struct file *);
220:	static ssize_t configfs_write_iter(struct kiocb *, struct iov_iter *);

File fs/configfs/inode.c:
157:	struct inode *configfs_create(struct dentry *, umode_t);
205:	void configfs_drop_dentry(struct configfs_dirent *, struct dentry *);
183:	const unsigned char *configfs_get_name(struct configfs_dirent *);
221:	void configfs_hash_and_remove(struct dentry *, const char *);
105:	struct inode *configfs_new_inode(umode_t, struct configfs_dirent *, struct super_block *);
35:	int configfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);

File fs/configfs/item.c:
174:	struct config_item *config_group_find_item(struct config_group *, const char *);
157:	void config_group_init(struct config_group *);
92:	void config_group_init_type_name(struct config_group *, const char *, const struct config_item_type *);
101:	struct config_item *config_item_get(struct config_item *);
109:	struct config_item *config_item_get_unless_zero(struct config_item *);
82:	void config_item_init_type_name(struct config_item *, const char *, const struct config_item_type *);
146:	void config_item_put(struct config_item *);
49:	int config_item_set_name(struct config_item *, const char *, ...);
135:	static void config_item_release(struct kref *);

File fs/configfs/mount.c:
50:	int configfs_is_root(struct config_item *);
122:	struct dentry *configfs_pin_fs(void);
129:	void configfs_release_fs(void);
164:	static void configfs_exit(void);
63:	static int configfs_fill_super(struct super_block *, struct fs_context *);
30:	static void configfs_free_inode(struct inode *);
99:	static int configfs_get_tree(struct fs_context *);
135:	static int configfs_init(void);
108:	static int configfs_init_fs_context(struct fs_context *);

File fs/configfs/symlink.c:
140:	int configfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
220:	int configfs_unlink(struct inode *, struct dentry *);

File fs/coredump.c:
517:	void do_coredump(const kernel_siginfo_t *);
927:	int dump_align(struct coredump_params *, int);
841:	int dump_emit(struct coredump_params *, const void *, int);
858:	void dump_skip(struct coredump_params *, size_t);
852:	void dump_skip_to(struct coredump_params *, unsigned long);
898:	int dump_user_range(struct coredump_params *, unsigned long, unsigned long);
940:	void validate_coredump_safety(void);
821:	static int __dump_skip(struct coredump_params *, size_t);
124:	static int cn_esc_printf(struct core_name *, const char *, ...);
161:	static int cn_print_exe_file(struct core_name *, bool);
111:	static int cn_printf(struct core_name *, const char *, ...);
87:	static int cn_vprintf(struct core_name *, const char *, va_list);
454:	static bool dump_interrupted(void);
1145:	static bool dump_vma_snapshot(struct coredump_params *);
1127:	static void free_vma_snapshot(struct coredump_params *);
987:	static int init_fs_coredump_sysctls(void);
952:	static int proc_dostring_coredump(struct ctl_table *, int, void *, size_t *, loff_t *);
499:	static int umh_pipe_setup(struct subprocess_info *, struct cred *);
465:	static void wait_for_dump_helpers(struct file *);

File fs/d_path.c:
411:	long __arm64_sys_getcwd(const struct pt_regs *);
214:	char *__d_path(const struct path *, const struct path *, char *, int);
226:	char *d_absolute_path(const struct path *, char *, int);
264:	char *d_path(const struct path *, char *, int);
370:	char *dentry_path(const struct dentry *, char *, int);
361:	char *dentry_path_raw(const struct dentry *, char *, int);
300:	char *dynamic_dname(char *, int, const char *, ...);
317:	char *simple_dname(struct dentry *, char *, int);
330:	static char *__dentry_path(const struct dentry *, struct prepend_buffer *);
56:	static bool prepend(struct prepend_buffer *, const char *, int);
155:	static int prepend_path(const struct path *, const struct path *, struct prepend_buffer *);

File fs/dcache.c:
504:	void __d_drop(struct dentry *);
2453:	struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
2344:	struct dentry *__d_lookup_rcu(const struct dentry *, const struct qstr *, unsigned int *);
2765:	void __d_lookup_unhash_wake(struct dentry *);
2811:	void d_add(struct dentry *, struct inode *);
2213:	struct dentry *d_add_ci(struct dentry *, struct inode *, struct qstr *);
1847:	struct dentry *d_alloc(struct dentry *, const struct qstr *);
1866:	struct dentry *d_alloc_anon(struct super_block *);
1872:	struct dentry *d_alloc_cursor(struct dentry *);
1905:	struct dentry *d_alloc_name(struct dentry *, const char *);
2631:	struct dentry *d_alloc_parallel(struct dentry *, const struct qstr *, wait_queue_head_t *);
1897:	struct dentry *d_alloc_pseudo(struct super_block *, const struct qstr *);
3064:	struct dentry *d_ancestor(struct dentry *, struct dentry *);
2554:	void d_delete(struct dentry *);
532:	void d_drop(struct dentry *);
2832:	struct dentry *d_exact_alias(struct dentry *, struct inode *);
3042:	void d_exchange(struct dentry *, struct dentry *);
1060:	struct dentry *d_find_alias(struct inode *);
1077:	struct dentry *d_find_alias_rcu(struct inode *);
1016:	struct dentry *d_find_any_alias(struct inode *);
3245:	void d_genocide(struct dentry *);
2516:	struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
2030:	void d_instantiate(struct dentry *, struct inode *);
2119:	struct dentry *d_instantiate_anon(struct dentry *, struct inode *);
2048:	void d_instantiate_new(struct dentry *, struct inode *);
1722:	void d_invalidate(struct dentry *);
2423:	struct dentry *d_lookup(const struct dentry *, const struct qstr *);
2064:	struct dentry *d_make_root(struct inode *);
691:	void d_mark_dontcache(struct inode *);
3029:	void d_move(struct dentry *, struct dentry *);
2170:	struct dentry *d_obtain_alias(struct inode *);
2191:	struct dentry *d_obtain_root(struct inode *);
1102:	void d_prune_aliases(struct inode *);
2590:	void d_rehash(struct dentry *);
2259:	bool d_same_name(const struct dentry *, const struct dentry *, const struct qstr *);
1915:	void d_set_d_op(struct dentry *, const struct dentry_operations *);
1953:	void d_set_fallthru(struct dentry *);
1501:	int d_set_mounted(struct dentry *);
3136:	struct dentry *d_splice_alias(struct inode *, struct dentry *);
3252:	void d_tmpfile(struct file *, struct inode *);
956:	struct dentry *dget_parent(struct dentry *);
894:	void dput(struct dentry *);
932:	void dput_to_list(struct dentry *, struct list_head *);
3203:	bool is_subdir(struct dentry *, struct dentry *);
1481:	int path_has_submounts(const struct path *);
1275:	long prune_dcache_sb(struct super_block *, struct shrink_control *);
328:	void release_dentry_name_snapshot(struct name_snapshot *);
1691:	void shrink_dcache_for_umount(struct super_block *);
1619:	void shrink_dcache_parent(struct dentry *);
1314:	void shrink_dcache_sb(struct super_block *);
1177:	void shrink_dentry_list(struct list_head *);
313:	void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
3344:	void vfs_caches_init(void);
3333:	void vfs_caches_init_early(void);
486:	static void ___d_drop(struct dentry *);
2775:	static void __d_add(struct dentry *, struct inode *);
1763:	static struct dentry *__d_alloc(struct super_block *, const struct qstr *);
294:	static void __d_free(struct callback_head *);
301:	static void __d_free_external(struct callback_head *);
1996:	static void __d_instantiate(struct dentry *, struct inode *);
2079:	static struct dentry *__d_instantiate_anon(struct dentry *, struct inode *, bool);
2277:	static struct dentry *__d_lookup_rcu_op_compare(const struct dentry *, const struct qstr *, unsigned int *);
2746:	static wait_queue_head_t *__d_lookup_unhash(struct dentry *);
2939:	static void __d_move(struct dentry *, struct dentry *, bool);
2125:	static struct dentry *__d_obtain_alias(struct inode *, bool);
2574:	static void __d_rehash(struct dentry *);
3084:	static int __d_unalias(struct inode *, struct dentry *, struct dentry *);
578:	static void __dentry_kill(struct dentry *);
918:	static void __dput_to_list(struct dentry *, struct list_head *);
625:	static struct dentry *__lock_parent(struct dentry *);
3230:	static enum d_walk_ret d_genocide_kill(void *, struct dentry *);
424:	static void d_lru_add(struct dentry *);
434:	static void d_lru_del(struct dentry *);
1348:	static void d_walk(struct dentry *, void *, enum d_walk_ret (*)(void *, struct dentry *));
3301:	static void dcache_init(void);
3280:	static void dcache_init_early(void);
711:	static struct dentry *dentry_kill(struct dentry *);
1205:	static enum lru_status dentry_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
1286:	static enum lru_status dentry_lru_isolate_shrink(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
384:	static void dentry_unlink_inode(struct dentry *);
1680:	static void do_one_tree(struct dentry *);
1707:	static enum d_walk_ret find_submount(void *, struct dentry *);
197:	static int init_fs_dcache_sysctls(void);
653:	static struct dentry *lock_parent(struct dentry *);
1459:	static enum d_walk_ret path_check_mount(void *, struct dentry *);
177:	static int proc_nr_dentry(struct ctl_table *, int, void *, size_t *, loff_t *);
663:	static bool retain_dentry(struct dentry *);
1553:	static enum d_walk_ret select_collect(void *, struct dentry *);
1582:	static enum d_walk_ret select_collect2(void *, struct dentry *);
3271:	static int set_dhash_entries(char *);
1136:	static bool shrink_lock_dentry(struct dentry *);
2598:	static unsigned int start_dir_add(struct inode *);
1657:	static enum d_walk_ret umount_check(void *, struct dentry *);

File fs/debugfs/file.c:
366:	ssize_t debugfs_attr_read(struct file *, char *, size_t, loff_t *);
398:	ssize_t debugfs_attr_write(struct file *, const char *, size_t, loff_t *);
405:	ssize_t debugfs_attr_write_signed(struct file *, const char *, size_t, loff_t *);
775:	void debugfs_create_atomic_t(const char *, umode_t, struct dentry *, atomic_t *);
1005:	struct dentry *debugfs_create_blob(const char *, umode_t, struct dentry *, struct debugfs_blob_wrapper *);
860:	void debugfs_create_bool(const char *, umode_t, struct dentry *, bool *);
1212:	void debugfs_create_devm_seqfile(struct device *, const char *, struct dentry *, int (*)(struct seq_file *, void *));
1172:	void debugfs_create_regset32(const char *, umode_t, struct dentry *, struct debugfs_regset32 *);
739:	void debugfs_create_size_t(const char *, umode_t, struct dentry *, size_t *);
952:	void debugfs_create_str(const char *, umode_t, struct dentry *, char **);
494:	void debugfs_create_u16(const char *, umode_t, struct dentry *, u16 *);
530:	void debugfs_create_u32(const char *, umode_t, struct dentry *, u32 *);
1093:	void debugfs_create_u32_array(const char *, umode_t, struct dentry *, struct debugfs_u32_array *);
567:	void debugfs_create_u64(const char *, umode_t, struct dentry *, u64 *);
458:	void debugfs_create_u8(const char *, umode_t, struct dentry *, u8 *);
606:	void debugfs_create_ulong(const char *, umode_t, struct dentry *, unsigned long *);
669:	void debugfs_create_x16(const char *, umode_t, struct dentry *, u16 *);
687:	void debugfs_create_x32(const char *, umode_t, struct dentry *, u32 *);
705:	void debugfs_create_x64(const char *, umode_t, struct dentry *, u64 *);
651:	void debugfs_create_x8(const char *, umode_t, struct dentry *, u8 *);
82:	int debugfs_file_get(struct dentry *);
132:	void debugfs_file_put(struct dentry *);
1124:	void debugfs_print_regs32(struct seq_file *, const struct debugfs_reg32 *, int, void *, char *);
783:	ssize_t debugfs_read_file_bool(struct file *, char *, size_t, loff_t *);
868:	ssize_t debugfs_read_file_str(struct file *, char *, size_t, loff_t *);
50:	const struct file_operations *debugfs_real_fops(const struct file *);
806:	ssize_t debugfs_write_file_bool(struct file *, const char *, size_t, loff_t *);
752:	static int debugfs_atomic_t_get(void *, u64 *);
747:	static int debugfs_atomic_t_set(void *, u64);
1187:	static int debugfs_devm_entry_open(struct inode *, struct file *);
1155:	static int debugfs_regset32_open(struct inode *, struct file *);
1140:	static int debugfs_regset32_show(struct seq_file *, void *);
719:	static int debugfs_size_t_get(void *, u64 *);
714:	static int debugfs_size_t_set(void *, u64);
471:	static int debugfs_u16_get(void *, u64 *);
466:	static int debugfs_u16_set(void *, u64);
507:	static int debugfs_u32_get(void *, u64 *);
502:	static int debugfs_u32_set(void *, u64);
544:	static int debugfs_u64_get(void *, u64 *);
538:	static int debugfs_u64_set(void *, u64);
435:	static int debugfs_u8_get(void *, u64 *);
430:	static int debugfs_u8_set(void *, u64);
581:	static int debugfs_ulong_get(void *, u64 *);
575:	static int debugfs_ulong_set(void *, u64);
903:	static ssize_t debugfs_write_file_str(struct file *, const char *, size_t, loff_t *);
29:	static ssize_t default_read_file(struct file *, char *, size_t, loff_t *);
35:	static ssize_t default_write_file(struct file *, const char *, size_t, loff_t *);
757:	static int fops_atomic_t_open(struct inode *, struct file *);
759:	static int fops_atomic_t_ro_open(struct inode *, struct file *);
761:	static int fops_atomic_t_wo_open(struct inode *, struct file *);
724:	static int fops_size_t_open(struct inode *, struct file *);
726:	static int fops_size_t_ro_open(struct inode *, struct file *);
727:	static int fops_size_t_wo_open(struct inode *, struct file *);
476:	static int fops_u16_open(struct inode *, struct file *);
477:	static int fops_u16_ro_open(struct inode *, struct file *);
478:	static int fops_u16_wo_open(struct inode *, struct file *);
512:	static int fops_u32_open(struct inode *, struct file *);
513:	static int fops_u32_ro_open(struct inode *, struct file *);
514:	static int fops_u32_wo_open(struct inode *, struct file *);
549:	static int fops_u64_open(struct inode *, struct file *);
550:	static int fops_u64_ro_open(struct inode *, struct file *);
551:	static int fops_u64_wo_open(struct inode *, struct file *);
440:	static int fops_u8_open(struct inode *, struct file *);
441:	static int fops_u8_ro_open(struct inode *, struct file *);
442:	static int fops_u8_wo_open(struct inode *, struct file *);
586:	static int fops_ulong_open(struct inode *, struct file *);
588:	static int fops_ulong_ro_open(struct inode *, struct file *);
589:	static int fops_ulong_wo_open(struct inode *, struct file *);
618:	static int fops_x16_open(struct inode *, struct file *);
620:	static int fops_x16_ro_open(struct inode *, struct file *);
621:	static int fops_x16_wo_open(struct inode *, struct file *);
623:	static int fops_x32_open(struct inode *, struct file *);
625:	static int fops_x32_ro_open(struct inode *, struct file *);
626:	static int fops_x32_wo_open(struct inode *, struct file *);
628:	static int fops_x64_open(struct inode *, struct file *);
630:	static int fops_x64_ro_open(struct inode *, struct file *);
631:	static int fops_x64_wo_open(struct inode *, struct file *);
614:	static int fops_x8_open(struct inode *, struct file *);
615:	static int fops_x8_ro_open(struct inode *, struct file *);
616:	static int fops_x8_wo_open(struct inode *, struct file *);
227:	static loff_t full_proxy_llseek(struct file *, loff_t, int);
299:	static int full_proxy_open(struct inode *, struct file *);
245:	static __poll_t full_proxy_poll(struct file *, struct poll_table_struct *);
231:	static ssize_t full_proxy_read(struct file *, char *, size_t, loff_t *);
261:	static int full_proxy_release(struct inode *, struct file *);
241:	static long full_proxy_unlocked_ioctl(struct file *, unsigned int, unsigned long);
236:	static ssize_t full_proxy_write(struct file *, const char *, size_t, loff_t *);
163:	static int open_proxy_open(struct inode *, struct file *);
959:	static ssize_t read_file_blob(struct file *, char *, size_t, loff_t *);
1031:	static int u32_array_open(struct inode *, struct file *);
1054:	static ssize_t u32_array_read(struct file *, char *, size_t, loff_t *);
1063:	static int u32_array_release(struct inode *, struct file *);

File fs/debugfs/inode.c:
632:	struct dentry *debugfs_create_automount(const char *, struct dentry *, debugfs_automount_t, void *);
588:	struct dentry *debugfs_create_dir(const char *, struct dentry *);
482:	struct dentry *debugfs_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
552:	void debugfs_create_file_size(const char *, umode_t, struct dentry *, void *, const struct file_operations *, loff_t);
521:	struct dentry *debugfs_create_file_unsafe(const char *, umode_t, struct dentry *, void *, const struct file_operations *);
691:	struct dentry *debugfs_create_symlink(const char *, struct dentry *, const char *);
867:	bool debugfs_initialized(void);
323:	struct dentry *debugfs_lookup(const char *, struct dentry *);
779:	void debugfs_lookup_and_remove(const char *, struct dentry *);
759:	void debugfs_remove(struct dentry *);
811:	struct dentry *debugfs_rename(struct dentry *, struct dentry *, struct dentry *, const char *);
409:	static struct dentry *__debugfs_create_file(const char *, umode_t, struct dentry *, void *, const struct file_operations *, const struct file_operations *);
259:	static int debug_fill_super(struct super_block *, void *, int);
293:	static struct dentry *debug_mount(struct file_system_type *, int, const char *, void *);
246:	static struct vfsmount *debugfs_automount(struct path *);
224:	static void debugfs_free_inode(struct inode *);
887:	static int debugfs_init(void);
873:	static int debugfs_kernel(char *);
107:	static int debugfs_parse_options(char *, struct debugfs_mount_opts *);
238:	static void debugfs_release_dentry(struct dentry *);
191:	static int debugfs_remount(struct super_block *, int *, char *);
45:	static int debugfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
207:	static int debugfs_show_options(struct seq_file *, struct dentry *);
395:	static struct dentry *failed_creating(struct dentry *);
739:	static void remove_one(struct dentry *);
340:	static struct dentry *start_creating(const char *, struct dentry *);

File fs/devpts/inode.c:
199:	struct pts_fs_info *devpts_acquire(struct file *);
605:	void *devpts_get_priv(struct dentry *);
547:	void devpts_kill_index(struct pts_fs_info *, int);
168:	struct vfsmount *devpts_mntget(struct file *, struct pts_fs_info *);
530:	int devpts_new_index(struct pts_fs_info *);
618:	void devpts_pty_kill(struct dentry *);
562:	struct dentry *devpts_pty_new(struct pts_fs_info *, int, void *);
231:	void devpts_release(struct pts_fs_info *);
445:	static int devpts_fill_super(struct super_block *, void *, int);
508:	static void devpts_kill_sb(struct super_block *);
502:	static struct dentry *devpts_mount(struct file_system_type *, int, const char *, void *);
384:	static int devpts_remount(struct super_block *, int *, char *);
403:	static int devpts_show_options(struct seq_file *, struct dentry *);
629:	static int init_devpts_fs(void);
246:	static int parse_mount_options(char *, int, struct pts_mount_opts *);

File fs/direct-io.c:
1122:	ssize_t __blockdev_direct_IO(struct kiocb *, struct inode *, struct block_device *, struct iov_iter *, get_block_t *, dio_iodone_t *, dio_submit_t *, int);
567:	int sb_init_dio_done_wq(struct super_block *);
317:	static void dio_aio_complete_work(struct work_struct *);
329:	static void dio_bio_end_aio(struct bio *);
376:	static void dio_bio_end_io(struct bio *);
234:	static ssize_t dio_complete(struct dio *, ssize_t, unsigned int);
1341:	static int dio_init(void);
680:	static int dio_new_bio(struct dio *, struct dio_submit *, sector_t, struct buffer_head *);
737:	static int dio_send_cur_page(struct dio *, struct dio_submit *, struct buffer_head *);
869:	static void dio_zero_block(struct dio *, struct dio_submit *, int, struct buffer_head *);
802:	static int submit_page_section(struct dio *, struct dio_submit *, struct page *, unsigned int, unsigned int, sector_t, struct buffer_head *);

File fs/drop_caches.c:
50:	int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
18:	static void drop_pagecache_sb(struct super_block *, void *);

File fs/eventfd.c:
463:	long __arm64_sys_eventfd(const struct pt_regs *);
458:	long __arm64_sys_eventfd2(const struct pt_regs *);
188:	void eventfd_ctx_do_read(struct eventfd_ctx *, __u64 *);
380:	struct eventfd_ctx *eventfd_ctx_fdget(int);
401:	struct eventfd_ctx *eventfd_ctx_fileget(struct file *);
115:	void eventfd_ctx_put(struct eventfd_ctx *);
210:	int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *, wait_queue_entry_t *, __u64 *);
355:	struct file *eventfd_fget(int);
88:	__u64 eventfd_signal(struct eventfd_ctx *, __u64);
46:	__u64 eventfd_signal_mask(struct eventfd_ctx *, __u64, unsigned int);
414:	static int do_eventfd(unsigned int, int);
130:	static __poll_t eventfd_poll(struct file *, poll_table *);
226:	static ssize_t eventfd_read(struct kiocb *, struct iov_iter *);
121:	static int eventfd_release(struct inode *, struct file *);
322:	static void eventfd_show_fdinfo(struct seq_file *, struct file *);
272:	static ssize_t eventfd_write(struct file *, const char *, size_t, loff_t *);

File fs/eventpoll.c:
2037:	long __arm64_sys_epoll_create(const struct pt_regs *);
2032:	long __arm64_sys_epoll_create1(const struct pt_regs *);
2207:	long __arm64_sys_epoll_ctl(const struct pt_regs *);
2299:	long __arm64_sys_epoll_pwait(const struct pt_regs *);
2310:	long __arm64_sys_epoll_pwait2(const struct pt_regs *);
2265:	long __arm64_sys_epoll_wait(const struct pt_regs *);
2057:	int do_epoll_ctl(int, int, int, struct epoll_event *, bool);
905:	void eventpoll_release_file(struct file *);
1017:	struct file *get_epoll_tfile_raw_ptr(struct file *, int, unsigned long);
804:	static __poll_t __ep_eventpoll_poll(struct file *, poll_table *, int);
1989:	static int do_epoll_create(int);
2223:	static int do_epoll_wait(int, struct epoll_event *, int, struct timespec64 *);
1758:	static int ep_autoremove_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
386:	static bool ep_busy_loop_end(void *, unsigned long);
1395:	static void ep_destroy_wakeup_source(struct epitem *);
629:	static void ep_done_scan(struct eventpoll *, struct list_head *);
861:	static __poll_t ep_eventpoll_poll(struct file *, poll_table *);
792:	static int ep_eventpoll_release(struct inode *, struct file *);
740:	static void ep_free(struct eventpoll *);
1446:	static int ep_insert(struct eventpoll *, const struct epoll_event *, struct file *, int, int);
1920:	static int ep_loop_check_proc(struct eventpoll *, int);
1567:	static int ep_modify(struct eventpoll *, struct epitem *, const struct epoll_event *);
1136:	static int ep_poll_callback(wait_queue_entry_t *, unsigned int, int, void *);
1241:	static void ep_ptable_queue_proc(struct file *, wait_queue_head_t *, poll_table *);
688:	static int ep_remove(struct eventpoll *, struct epitem *);
867:	static void ep_show_fdinfo(struct seq_file *, struct file *);
678:	static void epi_rcu_free(struct callback_head *);
2045:	static int epoll_mutex_lock(struct mutex *, int, bool);
2387:	static int eventpoll_init(void);
1325:	static int reverse_path_check_proc(struct hlist_head *, int);

File fs/exec.c:
2101:	long __arm64_sys_execve(const struct pt_regs *);
2109:	long __arm64_sys_execveat(const struct pt_regs *);
1212:	char *__get_task_comm(char *, size_t, struct task_struct *);
85:	void __register_binfmt(struct linux_binfmt *, int);
1227:	void __set_task_comm(struct task_struct *, const char *, bool);
1242:	int begin_new_exec(struct linux_binprm *);
1541:	int bprm_change_interp(const char *, struct linux_binprm *);
613:	int copy_string_kernel(const char *, struct linux_binprm *);
1456:	void finalize_exec(struct linux_binprm *);
1965:	int kernel_execve(const char *, const char * const *, const char * const *);
947:	struct file *open_exec(const char *);
109:	bool path_noexec(const struct path *);
1673:	int remove_arg_zero(struct linux_binprm *);
2077:	void set_binfmt(struct linux_binfmt *);
2093:	void set_dumpable(struct mm_struct *, int);
746:	int setup_arg_pages(struct linux_binprm *, unsigned long, int);
1436:	void setup_new_exec(struct linux_binprm *);
95:	void unregister_binfmt(struct linux_binfmt *);
1414:	void would_dump(struct linux_binprm *, struct file *);
186:	static void acct_arg_size(struct linux_binprm *, unsigned long);
1508:	static struct linux_binprm *alloc_bprm(int, struct filename *);
1808:	static int bprm_execve(struct linux_binprm *, int, struct filename *, int);
518:	static int copy_strings(int, struct user_arg_ptr, struct linux_binprm *);
1880:	static int do_execveat_common(int, struct filename *, struct user_arg_ptr, struct user_arg_ptr, int);
900:	static struct file *do_open_execat(int, struct filename *, int);
976:	static int exec_mmap(struct mm_struct *);
1484:	static void free_bprm(struct linux_binprm *);
198:	static struct page *get_arg_page(struct linux_binprm *, unsigned long, int);
2165:	static int init_fs_exec_sysctls(void);
2142:	static int proc_dointvec_minmax_coredump(struct ctl_table *, int, void *, size_t *, loff_t *);
1183:	static int unshare_sighand(struct task_struct *);

File fs/exportfs/expfs.c:
568:	struct dentry *exportfs_decode_fh(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
420:	struct dentry *exportfs_decode_fh_raw(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
396:	int exportfs_encode_fh(struct dentry *, struct fid *, int *, int);
384:	int exportfs_encode_inode_fh(struct inode *, struct fid *, int *, struct inode *);
27:	static int exportfs_get_name(struct vfsmount *, struct dentry *, char *, struct dentry *);
251:	static bool filldir_one(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
43:	static struct dentry *find_acceptable_alias(struct dentry *, int (*)(void *, struct dentry *), void *);
212:	static int reconnect_path(struct vfsmount *, struct dentry *, char *);

File fs/ext4/acl.c:
145:	struct posix_acl *ext4_get_acl(struct inode *, int, bool);
279:	int ext4_init_acl(handle_t *, struct inode *, struct inode *);
228:	int ext4_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
189:	static int __ext4_set_acl(handle_t *, struct inode *, int, struct posix_acl *, int);

File fs/ext4/balloc.c:
804:	int ext4_bg_has_super(struct super_block *, ext4_group_t);
860:	unsigned long ext4_bg_num_gdb(struct super_block *, ext4_group_t);
618:	int ext4_claim_free_clusters(struct ext4_sb_info *, s64, unsigned int);
720:	ext4_fsblk_t ext4_count_free_clusters(struct super_block *);
238:	unsigned int ext4_free_clusters_after_init(struct super_block *, ext4_group_t, struct ext4_group_desc *);
264:	struct ext4_group_desc *ext4_get_group_desc(struct super_block *, ext4_group_t, struct buffer_head **);
53:	void ext4_get_group_no_and_offset(struct super_block *, ext4_fsblk_t, ext4_group_t *, ext4_grpblk_t *);
35:	ext4_group_t ext4_get_group_number(struct super_block *, ext4_fsblk_t);
905:	ext4_fsblk_t ext4_inode_to_goal_block(struct inode *);
686:	ext4_fsblk_t ext4_new_meta_blocks(handle_t *, struct inode *, ext4_fsblk_t, unsigned int, unsigned long *, int *);
545:	struct buffer_head *ext4_read_block_bitmap(struct super_block *, ext4_group_t);
422:	struct buffer_head *ext4_read_block_bitmap_nowait(struct super_block *, ext4_group_t, bool);
639:	int ext4_should_retry_alloc(struct super_block *, int *);
519:	int ext4_wait_block_bitmap(struct super_block *, ext4_group_t, struct buffer_head *);
570:	static int ext4_has_free_clusters(struct ext4_sb_info *, s64, unsigned int);
179:	static int ext4_init_block_bitmap(struct super_block *, struct buffer_head *, ext4_group_t, struct ext4_group_desc *);
877:	static unsigned int ext4_num_base_meta_clusters(struct super_block *, ext4_group_t);
365:	static int ext4_validate_block_bitmap(struct super_block *, struct ext4_group_desc *, ext4_group_t, struct buffer_head *);

File fs/ext4/bitmap.c:
83:	void ext4_block_bitmap_csum_set(struct super_block *, ext4_group_t, struct ext4_group_desc *, struct buffer_head *);
57:	int ext4_block_bitmap_csum_verify(struct super_block *, ext4_group_t, struct ext4_group_desc *, struct buffer_head *);
14:	unsigned int ext4_count_free(char *, unsigned int);
41:	void ext4_inode_bitmap_csum_set(struct super_block *, ext4_group_t, struct ext4_group_desc *, struct buffer_head *, int);
19:	int ext4_inode_bitmap_csum_verify(struct super_block *, ext4_group_t, struct ext4_group_desc *, struct buffer_head *, int);

File fs/ext4/block_validity.c:
349:	int ext4_check_blockref(const char *, unsigned int, struct inode *, __le32 *, unsigned int);
40:	void ext4_exit_system_zone(void);
32:	int ext4_init_system_zone(void);
343:	int ext4_inode_block_valid(struct inode *, ext4_fsblk_t, unsigned int);
283:	void ext4_release_system_zone(struct super_block *);
295:	int ext4_sb_block_valid(struct super_block *, struct inode *, ext4_fsblk_t, unsigned int);
211:	int ext4_setup_system_zone(struct super_block *);
69:	static int add_system_zone(struct ext4_system_blocks *, ext4_fsblk_t, unsigned int, u32);
193:	static void ext4_destroy_system_zone(struct callback_head *);

File fs/ext4/dir.c:
78:	int __ext4_check_dir_entry(const char *, unsigned int, struct inode *, struct file *, struct ext4_dir_entry_2 *, struct buffer_head *, char *, int, unsigned int);
643:	int ext4_check_all_de(struct inode *, struct buffer_head *, void *, int);
446:	void ext4_htree_free_dir_info(struct dir_private_info *);
459:	int ext4_htree_store_dirent(struct file *, __u32, __u32, struct ext4_dir_entry_2 *, struct fscrypt_str *);
384:	static loff_t ext4_dir_llseek(struct file *, loff_t, int);
126:	static int ext4_readdir(struct file *, struct dir_context *);
635:	static int ext4_release_dir(struct inode *, struct file *);

File fs/ext4/ext4.h:
3840:	static int ext4_buffer_uptodate(struct buffer_head *);
2450:	static u32 ext4_chksum(struct ext4_sb_info *, u32, const void *, unsigned int);
3326:	static struct ext4_group_info *ext4_get_group_info(struct super_block *, ext4_group_t);
3262:	static int ext4_has_group_desc_csum(struct super_block *);
3253:	static int ext4_has_metadata_csum(struct super_block *);
3478:	static void ext4_lock_group(struct super_block *, ext4_group_t);
2816:	static void ext4_update_dx_flag(struct inode *);
3390:	static int ext4_update_inode_size(struct inode *, loff_t);

File fs/ext4/ext4_jbd2.c:
265:	int __ext4_forget(const char *, unsigned int, handle_t *, int, struct inode *, struct buffer_head *, ext4_fsblk_t);
343:	int __ext4_handle_dirty_metadata(const char *, unsigned int, handle_t *, struct inode *, struct buffer_head *);
166:	int __ext4_journal_ensure_credits(handle_t *, int, int, int);
319:	int __ext4_journal_get_create_access(const char *, unsigned int, handle_t *, struct super_block *, struct buffer_head *, enum ext4_journal_trigger_type);
228:	int __ext4_journal_get_write_access(const char *, unsigned int, handle_t *, struct super_block *, struct buffer_head *, enum ext4_journal_trigger_type);
142:	handle_t *__ext4_journal_start_reserved(handle_t *, unsigned int, int);
89:	handle_t *__ext4_journal_start_sb(struct inode *, struct super_block *, unsigned int, int, int, int, int);
115:	int __ext4_journal_stop(const char *, unsigned int, handle_t *);
10:	int ext4_inode_journal_mode(struct inode *);
181:	static void ext4_journal_abort_handle(const char *, unsigned int, const char *, struct buffer_head *, handle_t *, int);

File fs/ext4/ext4_jbd2.h:
399:	static int ext4_journal_ensure_credits(handle_t *, int, int);
500:	static int ext4_should_dioread_nolock(struct inode *);
438:	static void ext4_update_inode_fsync_trans(handle_t *, struct inode *, int);

File fs/ext4/extents.c:
5792:	int ext4_clu_mapped(struct inode *, ext4_lblk_t);
4782:	int ext4_convert_unwritten_extents(handle_t *, struct inode *, loff_t, ssize_t);
4832:	int ext4_convert_unwritten_io_end_vec(handle_t *, ext4_io_end_t *);
136:	int ext4_datasem_ensure_credits(handle_t *, struct inode *, int, int, int);
2357:	int ext4_ext_calc_credits_for_single_extent(struct inode *, int, struct ext4_ext_path *);
518:	int ext4_ext_check_inode(struct inode *);
6075:	int ext4_ext_clear_bb(struct inode *);
2394:	int ext4_ext_index_trans_blocks(struct inode *, int);
3078:	void ext4_ext_init(struct super_block *);
1967:	int ext4_ext_insert_extent(handle_t *, struct inode *, struct ext4_ext_path **, struct ext4_extent *, int);
4085:	int ext4_ext_map_blocks(handle_t *, struct inode *, struct ext4_map_blocks *, int);
1642:	ext4_lblk_t ext4_ext_next_allocated_block(struct ext4_ext_path *);
600:	int ext4_ext_precache(struct inode *);
3109:	void ext4_ext_release(struct super_block *);
2813:	int ext4_ext_remove_space(struct inode *, ext4_lblk_t, ext4_lblk_t);
5982:	int ext4_ext_replay_set_iblocks(struct inode *);
5934:	void ext4_ext_replay_shrink_inode(struct inode *, ext4_lblk_t);
5873:	int ext4_ext_replay_update_ex(struct inode *, ext4_lblk_t, int, int, ext4_fsblk_t);
869:	void ext4_ext_tree_init(handle_t *, struct inode *);
4386:	int ext4_ext_truncate(handle_t *, struct inode *);
4674:	long ext4_fallocate(struct file *, int, loff_t, loff_t);
4943:	int ext4_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64);
883:	struct ext4_ext_path *ext4_find_extent(struct inode *, ext4_lblk_t, struct ext4_ext_path **, int);
122:	void ext4_free_ext_path(struct ext4_ext_path *);
4973:	int ext4_get_es_cache(struct inode *, struct fiemap_extent_info *, __u64, __u64);
5607:	int ext4_swap_extents(handle_t *, struct inode *, struct inode *, ext4_lblk_t, ext4_lblk_t, ext4_lblk_t, int, int *);
454:	static int __ext4_ext_check(const char *, unsigned int, struct inode *, struct ext4_extent_header *, int, ext4_fsblk_t, ext4_lblk_t);
185:	static int __ext4_ext_dirty(const char *, unsigned int, handle_t *, struct inode *, struct ext4_ext_path *);
548:	static struct buffer_head *__read_extent_tree_block(const char *, unsigned int, struct inode *, struct ext4_extent_idx *, int, int);
4424:	static int ext4_alloc_file_blocks(struct file *, ext4_lblk_t, ext4_lblk_t, loff_t, int);
1918:	static unsigned int ext4_ext_check_overlap(struct ext4_sb_info *, struct inode *, struct ext4_extent *, struct ext4_ext_path *);
1705:	static int ext4_ext_correct_indexes(handle_t *, struct inode *, struct ext4_ext_path *);
210:	static ext4_fsblk_t ext4_ext_find_goal(struct inode *, struct ext4_ext_path *, ext4_lblk_t);
155:	static int ext4_ext_get_access(handle_t *, struct inode *, struct ext4_ext_path *);
974:	static int ext4_ext_insert_index(handle_t *, struct inode *, struct ext4_ext_path *, int, ext4_fsblk_t);
2301:	static int ext4_ext_rm_idx(handle_t *, struct inode *, struct ext4_ext_path *, int);
1534:	static int ext4_ext_search_right(struct inode *, struct ext4_ext_path *, ext4_lblk_t *, ext4_fsblk_t *, struct ext4_extent *);
5123:	static int ext4_ext_shift_extents(struct inode *, handle_t *, ext4_lblk_t, ext4_lblk_t, enum SHIFT_DIRECTION);
1888:	static void ext4_ext_try_to_merge(handle_t *, struct inode *, struct ext4_ext_path *, struct ext4_extent *);
1801:	static int ext4_ext_try_to_merge_right(struct inode *, struct ext4_ext_path *, struct ext4_extent *);
3144:	static int ext4_ext_zeroout(struct inode *, struct ext4_extent *);
4905:	static int ext4_iomap_xattr_begin(struct inode *, loff_t, loff_t, unsigned int, struct iomap *, struct iomap *);
3324:	static int ext4_split_extent(handle_t *, struct inode *, struct ext4_ext_path **, struct ext4_map_blocks *, int, int);
3176:	static int ext4_split_extent_at(handle_t *, struct inode *, struct ext4_ext_path **, ext4_lblk_t, int, int);
4511:	static long ext4_zero_range(struct file *, loff_t, loff_t, int);
3126:	static int ext4_zeroout_es(struct inode *, struct ext4_extent *);
4005:	static int get_implied_cluster_alloc(struct super_block *, struct ext4_map_blocks *, struct ext4_extent *, struct ext4_ext_path *);

File fs/ext4/extents_status.c:
1763:	void ext4_clear_inode_es(struct inode *);
877:	void ext4_es_cache_extent(struct inode *, ext4_lblk_t, ext4_lblk_t, ext4_fsblk_t, unsigned int);
2092:	unsigned int ext4_es_delayed_clu(struct inode *, ext4_lblk_t, ext4_lblk_t);
307:	void ext4_es_find_extent_range(struct inode *, int (*)(struct extent_status *), ext4_lblk_t, ext4_lblk_t, struct extent_status *);
169:	void ext4_es_init_tree(struct ext4_es_tree *);
1982:	int ext4_es_insert_delayed_block(struct inode *, ext4_lblk_t, bool);
812:	int ext4_es_insert_extent(struct inode *, ext4_lblk_t, ext4_lblk_t, ext4_fsblk_t, unsigned int);
913:	int ext4_es_lookup_extent(struct inode *, ext4_lblk_t, ext4_lblk_t *, struct extent_status *);
1625:	int ext4_es_register_shrinker(struct ext4_sb_info *);
1431:	int ext4_es_remove_extent(struct inode *, ext4_lblk_t, ext4_lblk_t);
405:	bool ext4_es_scan_clu(struct inode *, int (*)(struct extent_status *), ext4_lblk_t);
359:	bool ext4_es_scan_range(struct inode *, int (*)(struct extent_status *), ext4_lblk_t, ext4_lblk_t);
1672:	void ext4_es_unregister_shrinker(struct ext4_sb_info *);
164:	void ext4_exit_es(void);
1815:	void ext4_exit_pending(void);
156:	int ext4_init_es(void);
1807:	int ext4_init_pending(void);
1820:	void ext4_init_pending_tree(struct ext4_pending_tree *);
1957:	bool ext4_is_pending(struct inode *, ext4_lblk_t);
1938:	void ext4_remove_pending(struct inode *, ext4_lblk_t);
1582:	int ext4_seq_es_shrinker_info_show(struct seq_file *, void *);
254:	static void __es_find_extent_range(struct inode *, int (*)(struct extent_status *), ext4_lblk_t, ext4_lblk_t, struct extent_status *);
754:	static int __es_insert_extent(struct inode *, struct extent_status *);
1300:	static int __es_remove_extent(struct inode *, ext4_lblk_t, ext4_lblk_t, int *);
1464:	static int __es_shrink(struct ext4_sb_info *, int, struct ext4_inode_info *);
1049:	static void count_rsvd(struct inode *, ext4_lblk_t, long, struct extent_status *, struct rsvd_count *);
1689:	static int es_do_reclaim_extents(struct ext4_inode_info *, ext4_lblk_t, int *, int *);
1735:	static int es_reclaim_extents(struct ext4_inode_info *, int *);
1552:	static unsigned long ext4_es_count(struct shrinker *, struct shrink_control *);
479:	static void ext4_es_free_extent(struct inode *, struct extent_status *);
1564:	static unsigned long ext4_es_scan(struct shrinker *, struct shrink_control *);

File fs/ext4/extents_status.h:
172:	static int ext4_es_is_delayed(struct extent_status *);
187:	static int ext4_es_is_delonly(struct extent_status *);
182:	static int ext4_es_is_mapped(struct extent_status *);

File fs/ext4/fast_commit.c:
544:	void __ext4_fc_track_create(handle_t *, struct inode *, struct dentry *);
517:	void __ext4_fc_track_link(handle_t *, struct inode *, struct dentry *);
490:	void __ext4_fc_track_unlink(handle_t *, struct inode *, struct dentry *);
1189:	int ext4_fc_commit(journal_t *, tid_t);
284:	void ext4_fc_del(struct inode *);
2293:	void ext4_fc_destroy_dentry_cache(void);
2260:	int ext4_fc_info_show(struct seq_file *, void *);
2234:	void ext4_fc_init(struct super_block *, journal_t *);
2282:	int ext4_fc_init_dentry_cache(void);
195:	void ext4_fc_init_inode(struct inode *);
338:	void ext4_fc_mark_ineligible(struct super_block *, int, handle_t *);
1670:	int ext4_fc_record_regions(struct super_block *, int, ext4_lblk_t, ext4_fsblk_t, int, int);
1948:	bool ext4_fc_replay_check_excluded(struct super_block *, ext4_fsblk_t);
1966:	void ext4_fc_replay_cleanup(struct super_block *);
245:	void ext4_fc_start_update(struct inode *);
269:	void ext4_fc_stop_update(struct inode *);
558:	void ext4_fc_track_create(handle_t *, struct dentry *);
582:	void ext4_fc_track_inode(handle_t *, struct inode *);
531:	void ext4_fc_track_link(handle_t *, struct dentry *);
637:	void ext4_fc_track_range(handle_t *, struct inode *, ext4_lblk_t, ext4_lblk_t);
504:	void ext4_fc_track_unlink(handle_t *, struct dentry *);
416:	static int __track_dentry_update(struct inode *, void *, bool);
171:	static void ext4_end_buffer_io_sync(struct buffer_head *, int);
1266:	static void ext4_fc_cleanup(journal_t *, int, tid_t);
2142:	static int ext4_fc_replay(journal_t *, struct buffer_head *, enum passtype, int, tid_t);
1395:	static int ext4_fc_replay_link_internal(struct super_block *, struct dentry_info_args *, struct inode *);
689:	static u8 *ext4_fc_reserve_space(struct super_block *, int, u32 *);
1892:	static void ext4_fc_set_bitmaps_and_counters(struct super_block *);
660:	static void ext4_fc_submit_bh(struct super_block *, bool);
845:	static int ext4_fc_write_inode(struct inode *, u32 *);
889:	static int ext4_fc_write_inode_data(struct inode *, u32 *);

File fs/ext4/file.c:
901:	loff_t ext4_llseek(struct file *, loff_t, int);
270:	static ssize_t ext4_buffered_write_iter(struct kiocb *, struct iov_iter *);
386:	static int ext4_dio_write_end_io(struct kiocb *, ssize_t, int, unsigned int);
785:	static int ext4_file_mmap(struct file *, struct vm_area_struct *);
863:	static int ext4_file_open(struct inode *, struct file *);
130:	static ssize_t ext4_file_read_iter(struct kiocb *, struct iov_iter *);
686:	static ssize_t ext4_file_write_iter(struct kiocb *, struct iov_iter *);
155:	static int ext4_release_file(struct inode *, struct file *);

File fs/ext4/fsmap.c:
16:	void ext4_fsmap_from_internal(struct super_block *, struct fsmap *, struct ext4_fsmap *);
31:	void ext4_fsmap_to_internal(struct super_block *, struct ext4_fsmap *, struct fsmap *);
627:	int ext4_getfsmap(struct super_block *, struct ext4_fsmap_head *, ext4_fsmap_format_t, void *);
356:	static int ext4_getfsmap_compare(void *, const struct list_head *, const struct list_head *);
466:	static int ext4_getfsmap_datadev(struct super_block *, struct ext4_fsmap *, struct ext4_getfsmap_info *);
189:	static int ext4_getfsmap_datadev_helper(struct super_block *, ext4_group_t, ext4_grpblk_t, ext4_grpblk_t, void *);
65:	static int ext4_getfsmap_dev_compare(const void *, const void *);
84:	static int ext4_getfsmap_helper(struct super_block *, struct ext4_getfsmap_info *, struct ext4_fsmap *);
256:	static int ext4_getfsmap_logdev(struct super_block *, struct ext4_fsmap *, struct ext4_getfsmap_info *);

File fs/ext4/fsync.c:
129:	int ext4_sync_file(struct file *, loff_t, loff_t, int);

File fs/ext4/hash.c:
290:	int ext4fs_dirhash(const struct inode *, const char *, int, struct dx_hash_info *);
135:	static void str2hashbuf_signed(const char *, int, __u32 *, int);
161:	static void str2hashbuf_unsigned(const char *, int, __u32 *, int);

File fs/ext4/ialloc.c:
924:	struct inode *__ext4_new_inode(struct user_namespace *, handle_t *, struct inode *, umode_t, const struct qstr *, __u32, uid_t *, __u32, int, unsigned int, int);
1490:	unsigned long ext4_count_dirs(struct super_block *);
1439:	unsigned long ext4_count_free_inodes(struct super_block *);
69:	void ext4_end_bitmap_read(struct buffer_head *, int);
235:	void ext4_free_inode(handle_t *, struct inode *);
1512:	int ext4_init_inode_table(struct super_block *, ext4_group_t, int);
55:	void ext4_mark_bitmap_end(int, int, char *);
751:	int ext4_mark_inode_used(struct super_block *, int);
1367:	struct inode *ext4_orphan_get(struct super_block *, unsigned long);
124:	static struct buffer_head *ext4_read_inode_bitmap(struct super_block *, ext4_group_t);
867:	static int ext4_xattr_credits_for_new_inode(struct inode *, mode_t, bool);
423:	static int find_group_orlov(struct super_block *, struct inode *, ext4_group_t *, umode_t, const struct qstr *);
717:	static int find_inode_bit(struct super_block *, ext4_group_t, struct buffer_head *, unsigned long *);
376:	static void get_orlov_stats(struct super_block *, ext4_group_t, int, struct orlov_stats *);

File fs/ext4/indirect.c:
530:	int ext4_ind_map_blocks(handle_t *, struct inode *, struct ext4_map_blocks *, int);
1226:	int ext4_ind_remove_space(handle_t *, struct inode *, ext4_lblk_t, ext4_lblk_t);
678:	int ext4_ind_trans_blocks(struct inode *, int);
1111:	void ext4_ind_truncate(handle_t *, struct inode *);
856:	static int ext4_clear_blocks(handle_t *, struct inode *, struct buffer_head *, ext4_fsblk_t, unsigned long, __le32 *, __le32 *);
796:	static Indirect *ext4_find_shared(struct inode *, int, ext4_lblk_t *, Indirect *, __le32 *);
999:	static void ext4_free_branches(handle_t *, struct inode *, struct buffer_head *, __le32 *, __le32 *, int);
913:	static void ext4_free_data(handle_t *, struct inode *, struct buffer_head *, __le32 *, __le32 *);
144:	static Indirect *ext4_get_branch(struct inode *, int, ext4_lblk_t *, Indirect *, int *);
723:	static int ext4_ind_truncate_ensure_credits(handle_t *, struct inode *, struct buffer_head *, int);
425:	static int ext4_splice_branch(handle_t *, struct ext4_allocation_request *, Indirect *, int);

File fs/ext4/inline.c:
1807:	bool empty_inline_dir(struct inode *, int *);
2028:	int ext4_convert_inline_data(struct inode *);
908:	int ext4_da_write_inline_data_begin(struct address_space *, struct inode *, loff_t, unsigned int, struct page **, void **);
1724:	int ext4_delete_inline_entry(handle_t *, struct inode *, struct ext4_dir_entry_2 *, struct buffer_head *, int *);
1870:	int ext4_destroy_inline_data(handle_t *, struct inode *);
129:	int ext4_find_inline_data_nolock(struct inode *);
1676:	struct buffer_head *ext4_find_inline_entry(struct inode *, struct ext4_filename *, struct ext4_dir_entry_2 **, int *);
1623:	struct buffer_head *ext4_get_first_inline_block(struct inode *, struct ext4_dir_entry_2 **, int *);
96:	int ext4_get_max_inline_size(struct inode *);
1881:	int ext4_inline_data_iomap(struct inode *, struct iomap *);
1913:	int ext4_inline_data_truncate(struct inode *, int *);
1347:	int ext4_inlinedir_to_tree(struct file *, struct inode *, ext4_lblk_t, struct dx_hash_info *, __u32, __u32, int *);
819:	struct buffer_head *ext4_journalled_write_inline_data(struct inode *, unsigned int, struct page *);
1464:	int ext4_read_inline_dir(struct file *, struct dir_context *, int *);
1594:	void *ext4_read_inline_link(struct inode *);
505:	int ext4_readpage_inline(struct inode *, struct page *);
1278:	int ext4_try_add_inline_entry(handle_t *, struct ext4_filename *, struct inode *, struct inode *);
1643:	int ext4_try_create_inline_dir(handle_t *, struct inode *, struct inode *);
652:	int ext4_try_to_write_inline_data(struct address_space *, struct inode *, loff_t, unsigned int, struct page **);
736:	int ext4_write_inline_data_end(struct inode *, loff_t, unsigned int, unsigned int, struct page *);
1023:	static int ext4_add_dirent_to_inline(handle_t *, struct ext4_filename *, struct inode *, struct inode *, struct ext4_iloc *, void *, int);
1188:	static int ext4_convert_inline_data_nolock(handle_t *, struct inode *, struct ext4_iloc *);
253:	static int ext4_create_inline_data(handle_t *, struct inode *, unsigned int);
409:	static int ext4_destroy_inline_data_nolock(handle_t *, struct inode *);
1144:	static int ext4_finish_convert_inline_dir(handle_t *, struct inode *, struct buffer_head *, void *, int);
385:	static int ext4_prepare_inline_data(handle_t *, struct inode *, unsigned int);
471:	static int ext4_read_inline_page(struct inode *, struct page *);
318:	static int ext4_update_inline_data(handle_t *, struct inode *, unsigned int);

File fs/ext4/inode.c:
4828:	struct inode *__ext4_iget(struct super_block *, unsigned long, ext4_iget_flags, const char *, unsigned int);
6064:	int __ext4_mark_inode_dirty(handle_t *, struct inode *, const char *, unsigned int);
1032:	int do_journal_get_write_access(handle_t *, struct inode *, struct buffer_head *);
3181:	int ext4_alloc_da_blocks(struct inode *);
914:	struct buffer_head *ext4_bread(handle_t *, struct inode *, ext4_lblk_t, int);
935:	int ext4_bread_batch(struct inode *, ext4_lblk_t, int, bool, struct buffer_head **);
4035:	int ext4_break_layouts(struct inode *);
3986:	int ext4_can_truncate(struct inode *);
6114:	int ext4_change_inode_journal_flag(struct inode *, int);
5853:	int ext4_chunk_trans_blocks(struct inode *, int);
1853:	int ext4_da_get_block_prep(struct inode *, sector_t, struct buffer_head *, int);
1513:	void ext4_da_release_space(struct inode *, int);
360:	void ext4_da_update_reserve_space(struct inode *, int, int);
5655:	u32 ext4_dio_alignment(struct inode *);
6103:	void ext4_dirty_inode(struct inode *, int);
165:	void ext4_evict_inode(struct inode *);
6007:	int ext4_expand_extra_isize(struct inode *, unsigned int, struct ext4_iloc *);
5732:	int ext4_file_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
822:	int ext4_get_block(struct inode *, sector_t, struct buffer_head *, int);
834:	int ext4_get_block_unwritten(struct inode *, sector_t, struct buffer_head *, int);
4704:	int ext4_get_fc_inode_loc(struct super_block *, unsigned long, struct ext4_iloc *);
4688:	int ext4_get_inode_loc(struct inode *, struct ext4_iloc *);
4807:	int ext4_get_projid(struct inode *, kprojid_t *);
350:	qsize_t *ext4_get_reserved_space(struct inode *);
5671:	int ext4_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
849:	struct buffer_head *ext4_getblk(handle_t *, struct inode *, ext4_lblk_t, int);
4219:	int ext4_inode_attach_jinode(struct inode *);
105:	void ext4_inode_csum_set(struct inode *, struct ext4_inode *, struct ext4_inode_info *);
147:	int ext4_inode_is_fast_symlink(struct inode *);
423:	int ext4_issue_zeroout(struct inode *, ext4_lblk_t, ext4_fsblk_t, ext4_lblk_t);
506:	int ext4_map_blocks(handle_t *, struct inode *, struct ext4_map_blocks *, int);
5862:	int ext4_mark_iloc_dirty(handle_t *, struct inode *, struct ext4_iloc *);
2971:	int ext4_normal_submit_inode_data_buffers(struct jbd2_inode *);
6209:	vm_fault_t ext4_page_mkwrite(struct vm_fault *);
4068:	int ext4_punch_hole(struct file *, loff_t, loff_t);
5888:	int ext4_reserve_inode_write(handle_t *, struct inode *, struct ext4_iloc *);
3784:	void ext4_set_aops(struct inode *);
4734:	void ext4_set_inode_flags(struct inode *, bool);
5437:	int ext4_setattr(struct user_namespace *, struct dentry *, struct iattr *);
4272:	int ext4_truncate(struct inode *);
4003:	int ext4_update_disksize_before_punch(struct inode *, loff_t, loff_t);
977:	int ext4_walk_page_buffers(handle_t *, struct inode *, struct buffer_head *, unsigned int, unsigned int, int *, int (*)(handle_t *, struct inode *, struct buffer_head *));
5318:	int ext4_write_inode(struct inode *, struct writeback_control *);
5831:	int ext4_writepage_trans_blocks(struct inode *);
3948:	int ext4_zero_partial_blocks(handle_t *, struct inode *, loff_t, loff_t);
5910:	static int __ext4_expand_extra_isize(struct inode *, unsigned int, struct ext4_iloc *, handle_t *, int *);
4528:	static int __ext4_get_inode_loc(struct super_block *, unsigned long, struct inode *, struct ext4_iloc *, ext4_fsblk_t *);
796:	static int _ext4_get_block(struct inode *, sector_t, struct buffer_head *, int);
3902:	static int ext4_block_zero_page_range(handle_t *, struct address_space *, loff_t, loff_t);
3236:	static sector_t ext4_bmap(struct address_space *, sector_t);
1485:	static int ext4_da_reserve_space(struct inode *);
3042:	static int ext4_da_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
3131:	static int ext4_da_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
3711:	static bool ext4_dirty_folio(struct address_space *, struct folio *);
2721:	static int ext4_do_writepages(struct mpage_da_data *);
4427:	static int ext4_fill_raw_inode(struct inode *, struct ext4_inode *);
4791:	static int ext4_iget_extra_inode(struct inode *, struct ext4_inode *, struct ext4_inode_info *);
4769:	static blkcnt_t ext4_inode_blocks(struct ext4_inode *, struct ext4_inode_info *);
52:	static __u32 ext4_inode_csum(struct inode *, struct ext4_inode *, struct ext4_inode_info *);
84:	static int ext4_inode_csum_verify(struct inode *, struct ext4_inode *, struct ext4_inode_info *);
3325:	static void ext4_invalidate_folio(struct folio *, size_t, size_t);
3511:	static int ext4_iomap_begin(struct inode *, loff_t, loff_t, unsigned int, struct iomap *, struct iomap *);
3628:	static int ext4_iomap_begin_report(struct inode *, loff_t, loff_t, unsigned int, struct iomap *, struct iomap *);
3579:	static int ext4_iomap_end(struct inode *, loff_t, loff_t, ssize_t, unsigned int, struct iomap *);
3563:	static int ext4_iomap_overwrite_begin(struct inode *, loff_t, loff_t, unsigned int, struct iomap *, struct iomap *);
3718:	static int ext4_iomap_swap_activate(struct swap_info_struct *, struct file *, sector_t *);
3703:	static bool ext4_journalled_dirty_folio(struct address_space *, struct folio *);
3353:	static void ext4_journalled_invalidate_folio(struct folio *, size_t, size_t);
1406:	static int ext4_journalled_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1376:	static void ext4_journalled_zero_new_buffers(handle_t *, struct inode *, struct page *, unsigned int, unsigned int);
1630:	static void ext4_print_free_blocks(struct inode *);
3297:	static int ext4_read_folio(struct file *, struct folio *);
3314:	static void ext4_readahead(struct readahead_control *);
3360:	static bool ext4_release_folio(struct folio *, gfp_t);
3394:	static void ext4_set_iomap(struct inode *, struct iomap *, struct ext4_map_blocks *, loff_t, loff_t, unsigned int);
5373:	static void ext4_wait_for_tail_page_commit(struct inode *);
1152:	static int ext4_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
1304:	static int ext4_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2715:	static int ext4_writepage_cb(struct page *, struct writeback_control *, void *);
2950:	static int ext4_writepages(struct address_space *, struct writeback_control *);
2595:	static int mpage_prepare_extent_to_map(struct mpage_da_data *);
2214:	static int mpage_process_page_bufs(struct mpage_da_data *, struct buffer_head *, struct buffer_head *, ext4_lblk_t);
1573:	static void mpage_release_unused_pages(struct mpage_da_data *, bool);
1284:	static int write_end_fn(handle_t *, struct inode *, struct buffer_head *);

File fs/ext4/ioctl.c:
966:	int ext4_fileattr_get(struct dentry *, struct fileattr *);
982:	int ext4_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
1608:	long ext4_ioctl(struct file *, unsigned int, unsigned long);
340:	void ext4_reset_inode_seed(struct inode *);
1695:	int ext4_update_overhead(struct super_block *, bool);
540:	static void ext4_dax_dontcache(struct inode *, unsigned int);
850:	static int ext4_getfsmap_format(struct ext4_fsmap *, void *);
37:	static void ext4_sb_setlabel(struct ext4_super_block *, const void *);
49:	static void ext4_sb_setuuid(struct ext4_super_block *, const void *);
187:	static int ext4_update_superblocks_fn(struct super_block *, ext4_update_sb_callback *, const void *);
1690:	static void set_overhead(struct ext4_super_block *, const void *);
312:	static void swap_inode_data(struct inode *, struct inode *);

File fs/ext4/mballoc.c:
4938:	void ext4_discard_preallocations(struct inode *, unsigned int);
3722:	void ext4_exit_mballoc(void);
6084:	void ext4_free_blocks(handle_t *, struct inode *, struct buffer_head *, ext4_fsblk_t, unsigned long, int);
6186:	int ext4_group_add_blocks(handle_t *, struct super_block *, ext4_fsblk_t, unsigned long);
3695:	int ext4_init_mballoc(void);
3065:	int ext4_mb_add_groupinfo(struct super_block *, ext4_group_t, struct ext4_group_desc *);
3032:	int ext4_mb_alloc_groupinfo(struct super_block *, ext4_group_t);
3329:	int ext4_mb_init(struct super_block *);
3860:	void ext4_mb_mark_bb(struct super_block *, ext4_fsblk_t, int, int);
5524:	ext4_fsblk_t ext4_mb_new_blocks(handle_t *, struct ext4_allocation_request *, int *);
2518:	ext4_group_t ext4_mb_prefetch(struct super_block *, ext4_group_t, unsigned int, int *);
2569:	void ext4_mb_prefetch_fini(struct super_block *, ext4_group_t, unsigned int);
3506:	int ext4_mb_release(struct super_block *);
6560:	int ext4_mballoc_query_range(struct super_block *, ext4_group_t, ext4_grpblk_t, ext4_grpblk_t, ext4_mballoc_query_range_fn, void *);
3658:	void ext4_process_freed_data(struct super_block *, tid_t);
2877:	int ext4_seq_mb_stats_show(struct seq_file *, void *);
6466:	int ext4_trim_fs(struct super_block *, struct fstrim_range *);
1646:	void mb_set_bits(void *, int, int);
4240:	static void ext4_discard_allocated_blocks(struct ext4_allocation_context *);
3278:	static void ext4_discard_work(struct work_struct *);
2274:	static void ext4_mb_complex_scan_group(struct ext4_allocation_context *, struct ext4_buddy *);
4841:	static int ext4_mb_discard_group_preallocations(struct super_block *, ext4_group_t, int *);
5259:	static void ext4_mb_discard_lg_preallocations(struct super_block *, struct ext4_locality_group *, int, int);
5492:	static bool ext4_mb_discard_preallocations_should_retry(struct super_block *, struct ext4_allocation_context *, u64 *);
2155:	static int ext4_mb_find_by_goal(struct ext4_allocation_context *, struct ext4_buddy *);
5697:	static int ext4_mb_free_metadata(handle_t *, struct ext4_buddy *, struct ext4_free_data *);
1062:	static void ext4_mb_generate_buddy(struct super_block *, void *, void *, ext4_group_t);
4473:	static void ext4_mb_generate_from_pa(struct super_block *, void *, ext4_group_t);
2380:	static bool ext4_mb_good_group(struct ext4_allocation_context *, ext4_group_t, int);
1137:	static int ext4_mb_init_cache(struct page *, char *, gfp_t);
1364:	static int ext4_mb_init_group(struct super_block *, ext4_group_t, gfp_t);
5208:	static void ext4_mb_initialize_context(struct ext4_allocation_context *, struct ext4_allocation_request *);
1431:	static int ext4_mb_load_buddy_gfp(struct super_block *, ext4_group_t, struct ext4_buddy *, gfp_t);
3741:	static int ext4_mb_mark_diskspace_used(struct ext4_allocation_context *, handle_t *, unsigned int);
4691:	static void ext4_mb_new_group_pa(struct ext4_allocation_context *);
4602:	static void ext4_mb_new_inode_pa(struct ext4_allocation_context *);
3992:	static void ext4_mb_normalize_request(struct ext4_allocation_context *, struct ext4_allocation_request *);
4528:	static void ext4_mb_pa_callback(struct callback_head *);
5064:	static void ext4_mb_pa_free(struct ext4_allocation_context *);
2593:	static int ext4_mb_regular_allocator(struct ext4_allocation_context *);
4813:	static int ext4_mb_release_group_pa(struct ext4_buddy *, struct ext4_prealloc_space *);
4759:	static int ext4_mb_release_inode_pa(struct ext4_buddy *, struct buffer_head *, struct ext4_prealloc_space *);
2339:	static void ext4_mb_scan_aligned(struct ext4_allocation_context *, struct ext4_buddy *);
2803:	static void *ext4_mb_seq_groups_next(struct seq_file *, void *, loff_t *);
2815:	static int ext4_mb_seq_groups_show(struct seq_file *, void *);
2792:	static void *ext4_mb_seq_groups_start(struct seq_file *, loff_t *);
2866:	static void ext4_mb_seq_groups_stop(struct seq_file *, void *);
2954:	static void *ext4_mb_seq_structs_summary_next(struct seq_file *, void *, loff_t *);
2966:	static int ext4_mb_seq_structs_summary_show(struct seq_file *, void *);
2942:	static void *ext4_mb_seq_structs_summary_start(struct seq_file *, loff_t *);
3008:	static void ext4_mb_seq_structs_summary_stop(struct seq_file *, void *);
2223:	static void ext4_mb_simple_scan_group(struct ext4_allocation_context *, struct ext4_buddy *);
2127:	static int ext4_mb_try_best_found(struct ext4_allocation_context *, struct ext4_buddy *);
1573:	static void ext4_mb_unload_buddy(struct ext4_buddy *);
1968:	static void ext4_mb_use_best_found(struct ext4_allocation_context *, struct ext4_buddy *);
4273:	static void ext4_mb_use_inode_pa(struct ext4_allocation_context *, struct ext4_prealloc_space *);
4358:	static bool ext4_mb_use_preallocated(struct ext4_allocation_context *);
5672:	static void ext4_try_merge_freed_extent(struct ext4_sb_info *, struct ext4_free_data *, struct ext4_free_data *, struct rb_root *);
6354:	static int ext4_try_to_trim_range(struct super_block *, struct ext4_buddy *, ext4_grpblk_t, ext4_grpblk_t, ext4_grpblk_t);
1601:	static void mb_clear_bits(void *, int, int);
1818:	static int mb_find_extent(struct ext4_buddy *, int, int, struct ext4_free_extent *);
1735:	static void mb_free_blocks(struct inode *, struct ext4_buddy *, int, int);
1882:	static int mb_mark_used(struct ext4_buddy *, struct ext4_free_extent *);
1028:	static void mb_set_largest_free_order(struct super_block *, struct ext4_group_info *);
826:	static void mb_update_avg_fragment_size(struct super_block *, struct ext4_group_info *);

File fs/ext4/migrate.c:
409:	int ext4_ext_migrate(struct inode *);
596:	int ext4_ind_migrate(struct inode *);
286:	static int ext4_ext_swap_inode_data(handle_t *, struct inode *, struct inode *);
21:	static int finish_range(handle_t *, struct inode *, struct migrate_struct *);
178:	static int free_dind_blocks(handle_t *, struct inode *, __le32);
389:	static int free_ext_block(handle_t *, struct inode *);
352:	static int free_ext_idx(handle_t *, struct inode *, struct ext4_extent_idx *);
118:	static int update_dind_extent_range(handle_t *, struct inode *, ext4_fsblk_t, struct migrate_struct *);
89:	static int update_ind_extent_range(handle_t *, struct inode *, ext4_fsblk_t, struct migrate_struct *);
148:	static int update_tind_extent_range(handle_t *, struct inode *, ext4_fsblk_t, struct migrate_struct *);

File fs/ext4/mmp.c:
114:	void __dump_mmp_msg(struct super_block *, struct mmp_struct *, const char *, unsigned int, const char *);
271:	int ext4_multi_mount_protect(struct super_block *, ext4_fsblk_t);
250:	void ext4_stop_mmpd(struct ext4_sb_info *);
128:	static int kmmpd(void *);
68:	static int read_mmp_block(struct super_block *, struct buffer_head **, ext4_fsblk_t);
42:	static int write_mmp_block(struct super_block *, struct buffer_head *);

File fs/ext4/move_extent.c:
51:	void ext4_double_down_write_data_sem(struct inode *, struct inode *);
71:	void ext4_double_up_write_data_sem(struct inode *, struct inode *);
563:	int ext4_move_extents(struct file *, struct file *, __u64, __u64, __u64, __u64 *);
460:	static int mext_check_arguments(struct inode *, struct inode *, __u64, __u64, __u64 *);
249:	static int move_extent_per_page(struct file *, struct inode *, unsigned long, unsigned long, int, int, int, int *);

File fs/ext4/namei.c:
3432:	int __ext4_link(struct inode *, struct inode *, struct dentry *);
3207:	int __ext4_unlink(struct inode *, const struct qstr *, struct inode *, struct dentry *);
395:	int ext4_dirblock_csum_verify(struct inode *, struct buffer_head *);
3043:	bool ext4_empty_dir(struct inode *);
2077:	int ext4_find_dest_de(struct inode *, struct inode *, struct buffer_head *, void *, int, struct ext4_filename *, struct ext4_dir_entry_2 **);
2640:	int ext4_generic_delete_entry(struct inode *, struct ext4_dir_entry_2 *, struct buffer_head *, void *, int, int);
1868:	struct dentry *ext4_get_parent(struct dentry *);
433:	int ext4_handle_dirty_dirblock(handle_t *, struct inode *, struct buffer_head *);
1167:	int ext4_htree_fill_tree(struct file *, __u32, __u32, __u32 *);
2905:	struct ext4_dir_entry_2 *ext4_init_dot_dotdot(struct inode *, struct ext4_dir_entry_2 *, int, int, unsigned int, int);
2934:	int ext4_init_new_dir(handle_t *, struct inode *, struct inode *);
330:	void ext4_initialize_dirent_tail(struct buffer_head *, unsigned int);
2111:	void ext4_insert_dentry(struct inode *, struct inode *, struct ext4_dir_entry_2 *, int, struct ext4_filename *);
1510:	int ext4_search_dir(struct buffer_head *, char *, int, struct inode *, struct ext4_filename *, unsigned int, struct ext4_dir_entry_2 **);
1571:	static struct buffer_head *__ext4_find_entry(struct inode *, struct ext4_filename *, struct ext4_dir_entry_2 **, int *);
124:	static struct buffer_head *__ext4_read_dirblock(struct inode *, ext4_lblk_t, dirblock_type_t, const char *, unsigned int);
2151:	static int add_dirent_to_buf(handle_t *, struct ext4_filename *, struct inode *, struct inode *, struct ext4_dir_entry_2 *, struct buffer_head *);
1955:	static struct ext4_dir_entry_2 *do_split(handle_t *, struct inode *, struct buffer_head **, struct dx_frame *, struct dx_hash_info *);
1357:	static void dx_insert_block(struct dx_frame *, u32, ext4_lblk_t);
617:	static unsigned int dx_node_limit(struct inode *);
805:	static struct dx_frame *dx_probe(struct ext4_filename *, struct inode *, struct dx_hash_info *, struct dx_frame *);
2349:	static int ext4_add_entry(handle_t *, struct dentry *, struct inode *);
2767:	static int ext4_add_nondir(handle_t *, struct dentry *, struct inode **);
53:	static struct buffer_head *ext4_append(handle_t *, struct inode *, ext4_lblk_t *);
2795:	static int ext4_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
2690:	static int ext4_delete_entry(handle_t *, struct inode *, struct ext4_dir_entry_2 *, struct buffer_head *);
469:	static __le32 ext4_dx_csum(struct inode *, struct ext4_dir_entry *, int, int, struct dx_tail *);
487:	static int ext4_dx_csum_verify(struct inode *, struct ext4_dir_entry *);
543:	static int ext4_handle_dirty_dx_node(handle_t *, struct inode *, struct buffer_head *);
2742:	static void ext4_inc_count(struct inode *);
3470:	static int ext4_link(struct dentry *, struct inode *, struct dentry *);
1811:	static struct dentry *ext4_lookup(struct inode *, struct dentry *, unsigned int);
2975:	static int ext4_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
2830:	static int ext4_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
4161:	static int ext4_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
3680:	static void ext4_rename_delete(handle_t *, struct ext4_renament *, int);
3584:	static int ext4_rename_dir_finish(handle_t *, struct ext4_renament *, unsigned int);
3568:	static int ext4_rename_dir_prepare(handle_t *, struct ext4_renament *);
3638:	static void ext4_resetent(handle_t *, struct ext4_renament *, unsigned int, unsigned int);
3117:	static int ext4_rmdir(struct inode *, struct dentry *);
3610:	static int ext4_setent(handle_t *, struct ext4_renament *, unsigned int, unsigned int);
3342:	static int ext4_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
2864:	static int ext4_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
3280:	static int ext4_unlink(struct inode *, struct dentry *);
3712:	static void ext4_update_dir_count(handle_t *, struct ext4_renament *);
3723:	static struct inode *ext4_whiteout_for_rename(struct user_namespace *, struct ext4_renament *, int, handle_t **);
1059:	static int htree_dirblock_to_tree(struct file *, struct inode *, ext4_lblk_t, struct dx_hash_info *, __u32, __u32);

File fs/ext4/orphan.c:
571:	int ext4_init_orphan_info(struct super_block *);
99:	int ext4_orphan_add(handle_t *, struct inode *);
380:	void ext4_orphan_cleanup(struct super_block *, struct ext4_super_block *);
227:	int ext4_orphan_del(handle_t *, struct inode *);
552:	void ext4_orphan_file_block_trigger(struct jbd2_buffer_trigger_type *, struct buffer_head *, void *, size_t);
639:	int ext4_orphan_file_empty(struct super_block *);
511:	void ext4_release_orphan_info(struct super_block *);
323:	static void ext4_process_orphan(struct inode *, int *, int *);

File fs/ext4/page-io.c:
56:	struct ext4_io_end_vec *ext4_alloc_io_end_vec(ext4_io_end_t *);
431:	int ext4_bio_write_page(struct ext4_io_submit *, struct page *, int);
269:	void ext4_end_io_rsv_work(struct work_struct *);
50:	void ext4_exit_pageio(void);
317:	ext4_io_end_t *ext4_get_io_end(ext4_io_end_t *);
276:	ext4_io_end_t *ext4_init_io_end(struct inode *, gfp_t);
36:	int ext4_init_pageio(void);
371:	void ext4_io_submit(struct ext4_io_submit *);
383:	void ext4_io_submit_init(struct ext4_io_submit *, struct writeback_control *);
80:	struct ext4_io_end_vec *ext4_last_io_end_vec(ext4_io_end_t *);
301:	int ext4_put_io_end(ext4_io_end_t *);
289:	void ext4_put_io_end_defer(ext4_io_end_t *);
324:	static void ext4_end_bio(struct bio *);
100:	static void ext4_finish_bio(struct bio *);
150:	static void ext4_release_io_end(ext4_io_end_t *);

File fs/ext4/readpage.c:
426:	void ext4_exit_post_read_processing(void);
407:	int ext4_init_post_read_processing(void);
221:	int ext4_mpage_readpages(struct inode *, struct readahead_control *, struct page *);
69:	static void __read_end_io(struct bio *);
91:	static void decrypt_work(struct work_struct *);
171:	static void mpage_end_io(struct bio *);
103:	static void verity_work(struct work_struct *);

File fs/ext4/resize.c:
1701:	int ext4_group_add(struct super_block *, struct ext4_new_group_data *);
1835:	int ext4_group_extend(struct super_block *, struct ext4_super_block *, ext4_fsblk_t);
35:	void ext4_kvfree_array_rcu(void *);
734:	unsigned int ext4_list_backups(struct super_block *, unsigned int *, unsigned int *, unsigned int *);
48:	int ext4_resize_begin(struct super_block *);
100:	int ext4_resize_end(struct super_block *, bool);
1999:	int ext4_resize_fs(struct super_block *, ext4_fsblk_t);
416:	static struct buffer_head *bclean(handle_t *, struct super_block *, ext4_fsblk_t);
1534:	static int ext4_flex_group_add(struct super_block *, struct inode *, struct ext4_new_flex_group_data *);
1771:	static int ext4_group_extend_no_check(struct super_block *, ext4_fsblk_t, ext4_grpblk_t);
26:	static void ext4_rcu_ptr_callback(struct callback_head *);
1417:	static void ext4_update_super(struct super_block *, struct ext4_new_flex_group_data *);
453:	static int set_flexbg_block_bitmap(struct super_block *, handle_t *, struct ext4_new_flex_group_data *, ext4_fsblk_t, ext4_fsblk_t);
1139:	static void update_backups(struct super_block *, sector_t, char *, int, int);
778:	static int verify_reserved_gdb(struct super_block *, ext4_group_t, struct buffer_head *);

File fs/ext4/super.c:
754:	void __ext4_error(struct super_block *, const char *, unsigned int, bool, int, __u64, const char *, ...);
812:	void __ext4_error_file(struct file *, const char *, unsigned int, ext4_fsblk_t, const char *, ...);
779:	void __ext4_error_inode(struct inode *, const char *, unsigned int, ext4_fsblk_t, int, const char *, ...);
985:	void __ext4_grp_locked_error(const char *, unsigned int, struct super_block *, ext4_group_t, unsigned long, ext4_fsblk_t, const char *, ...);
920:	void __ext4_msg(struct super_block *, const char *, const char *, ...);
895:	void __ext4_std_error(struct super_block *, const char *, unsigned int, int);
950:	void __ext4_warning(struct super_block *, const char *, unsigned int, const char *, ...);
967:	void __ext4_warning_inode(const struct inode *, const char *, unsigned int, const char *, ...);
3068:	int ext4_alloc_flex_bg_array(struct super_block *, ext4_group_t);
306:	ext4_fsblk_t ext4_block_bitmap(struct super_block *, struct ext4_group_desc *);
362:	void ext4_block_bitmap_set(struct super_block *, struct ext4_group_desc *, ext4_fsblk_t);
4125:	int ext4_calculate_overhead(struct super_block *);
1431:	void ext4_clear_inode(struct inode *);
852:	const char *ext4_decode_error(struct super_block *, int, char *);
6946:	int ext4_enable_quotas(struct super_block *);
3528:	int ext4_feature_set_ok(struct super_block *, int);
6180:	int ext4_force_commit(struct super_block *);
330:	__u32 ext4_free_group_clusters(struct super_block *, struct ext4_group_desc *);
386:	void ext4_free_group_clusters_set(struct super_block *, struct ext4_group_desc *, __u32);
338:	__u32 ext4_free_inodes_count(struct super_block *, struct ext4_group_desc *);
394:	void ext4_free_inodes_set(struct super_block *, struct ext4_group_desc *, __u32);
3205:	void ext4_group_desc_csum_set(struct super_block *, __u32, struct ext4_group_desc *);
3195:	int ext4_group_desc_csum_verify(struct super_block *, __u32, struct ext4_group_desc *);
314:	ext4_fsblk_t ext4_inode_bitmap(struct super_block *, struct ext4_group_desc *);
370:	void ext4_inode_bitmap_set(struct super_block *, struct ext4_group_desc *, ext4_fsblk_t);
322:	ext4_fsblk_t ext4_inode_table(struct super_block *, struct ext4_group_desc *);
378:	void ext4_inode_table_set(struct super_block *, struct ext4_group_desc *, ext4_fsblk_t);
354:	__u32 ext4_itable_unused_count(struct super_block *, struct ext4_group_desc *);
410:	void ext4_itable_unused_set(struct super_block *, struct ext4_group_desc *, __u32);
1042:	void ext4_mark_group_bitmap_corrupted(struct super_block *, ext4_group_t, unsigned int);
189:	int ext4_read_bh(struct buffer_head *, blk_opf_t, bh_end_io_t *);
206:	int ext4_read_bh_lock(struct buffer_head *, blk_opf_t, bool);
177:	void ext4_read_bh_nowait(struct buffer_head *, blk_opf_t, bh_end_io_t *);
3933:	int ext4_register_li_request(struct super_block *, ext4_group_t);
243:	struct buffer_head *ext4_sb_bread(struct super_block *, sector_t, blk_opf_t);
249:	struct buffer_head *ext4_sb_bread_unmovable(struct super_block *, sector_t);
255:	void ext4_sb_breadahead_unmovable(struct super_block *, sector_t);
2999:	int ext4_seq_options_show(struct seq_file *, void *);
275:	__le32 ext4_superblock_csum(struct super_block *, struct ext4_super_block *);
296:	void ext4_superblock_csum_set(struct super_block *);
1072:	void ext4_update_dynamic_rev(struct super_block *);
346:	__u32 ext4_used_dirs_count(struct super_block *, struct ext4_group_desc *);
402:	void ext4_used_dirs_set(struct super_block *, struct ext4_group_desc *, __u32);
222:	static struct buffer_head *__ext4_sb_bread_gfp(struct super_block *, sector_t, blk_opf_t, gfp_t);
2892:	static int _ext4_show_options(struct seq_file *, struct super_block *, int);
2053:	static void ctx_set_mount_flag(struct ext4_fs_context *, int);
6731:	static int ext4_acquire_dquot(struct dquot *);
1317:	static struct inode *ext4_alloc_inode(struct super_block *);
2780:	static void ext4_apply_options(struct fs_context *, struct super_block *);
4584:	static int ext4_check_feature_compatibility(struct super_block *, struct ext4_super_block *, int);
2696:	static int ext4_check_opt_consistency(struct fs_context *, struct super_block *);
6138:	static int ext4_clear_journal_err(struct super_block *, struct ext4_super_block *);
6044:	static int ext4_commit_super(struct super_block *);
1377:	static void ext4_destroy_inode(struct inode *);
1356:	static int ext4_drop_inode(struct inode *);
589:	static int ext4_errno_to_code(int);
7286:	static void ext4_exit_fs(void);
4396:	static void ext4_fast_commit_init(struct super_block *);
1912:	static void ext4_fc_free(struct fs_context *);
1469:	static struct dentry *ext4_fh_to_dentry(struct super_block *, struct fid *, int, int);
1476:	static struct dentry *ext4_fh_to_parent(struct super_block *, struct fid *, int, int);
3115:	static int ext4_fill_flex_info(struct super_block *);
5624:	static int ext4_fill_super(struct super_block *, struct fs_context *);
1367:	static void ext4_free_in_core_inode(struct inode *);
6244:	static int ext4_freeze(struct super_block *);
4660:	static int ext4_geometry_check(struct super_block *, struct ext4_super_block *);
1511:	static struct dquot **ext4_get_dquots(struct inode *);
5704:	static struct inode *ext4_get_journal_inode(struct super_block *, unsigned int);
3496:	static unsigned long ext4_get_stripe_size(struct ext4_sb_info *);
5673:	static int ext4_get_tree(struct fs_context *);
3149:	static __le16 ext4_group_desc_csum(struct super_block *, __u32, struct ext4_group_desc *);
4720:	static void ext4_group_desc_free(struct ext4_sb_info *);
4733:	static int ext4_group_desc_init(struct super_block *, struct ext4_super_block *, ext4_fsblk_t, ext4_group_t *);
4338:	static int ext4_handle_clustersize(struct super_block *);
648:	static void ext4_handle_error(struct super_block *, bool, int, __u32, __u64, const char *, unsigned int);
7207:	static int ext4_init_fs(void);
1927:	static int ext4_init_fs_context(struct fs_context *);
5683:	static void ext4_init_journal_params(struct super_block *, journal_t *);
452:	static void ext4_journal_commit_callback(journal_t *, transaction_t *);
547:	static int ext4_journal_finish_inode_data_buffers(struct jbd2_inode *);
536:	static int ext4_journal_submit_inode_data_buffers(struct jbd2_inode *);
485:	static int ext4_journalled_writepage_callback(struct page *, struct writeback_control *, void *);
3729:	static int ext4_lazyinit_thread(void *);
4800:	static int ext4_load_and_init_journal(struct super_block *, struct ext4_super_block *, struct ext4_fs_context *);
6766:	static int ext4_mark_dquot_dirty(struct dquot *);
6098:	static int ext4_mark_recovery_complete(struct super_block *, struct ext4_super_block *);
3383:	static loff_t ext4_max_bitmap_size(int, int);
1483:	static int ext4_nfs_commit_metadata(struct inode *);
1449:	static struct inode *ext4_nfs_get_inode(struct super_block *, u64, u32);
2059:	static int ext4_parse_param(struct fs_context *, struct fs_parameter *);
1186:	static void ext4_put_super(struct super_block *);
6993:	static int ext4_quota_off(struct super_block *, int);
6811:	static int ext4_quota_on(struct super_block *, int, int, const struct path *);
7041:	static ssize_t ext4_quota_read(struct super_block *, int, char *, size_t, loff_t);
7077:	static ssize_t ext4_quota_write(struct super_block *, int, const char *, size_t, loff_t);
6601:	static int ext4_reconfigure(struct fs_context *);
6747:	static int ext4_release_dquot(struct dquot *);
4185:	static void ext4_set_resv_clusters(struct super_block *);
3010:	static int ext4_setup_super(struct super_block *, struct ext4_super_block *, int);
2994:	static int ext4_show_options(struct seq_file *, struct dentry *);
6665:	static int ext4_statfs(struct dentry *, struct kstatfs *);
6191:	static int ext4_sync_fs(struct super_block *, int);
6284:	static int ext4_unfreeze(struct super_block *);
3704:	static void ext4_unregister_li_request(struct super_block *);
5969:	static void ext4_update_super(struct super_block *);
6713:	static int ext4_write_dquot(struct dquot *);
6778:	static int ext4_write_info(struct super_block *, int);
701:	static void flush_stashed_error_work(struct work_struct *);
1407:	static int init_inodecache(void);
1396:	static void init_once(void *);
1945:	static int note_qf_name(struct fs_context *, int, struct fs_parameter *);
3587:	static void print_daily_error_info(struct timer_list *);
7139:	static void register_as_ext2(void);
7168:	static void register_as_ext3(void);
1985:	static int unnote_qf_name(struct fs_context *, int);

File fs/ext4/symlink.c:
26:	static const char *ext4_encrypted_get_link(struct dentry *, struct inode *, struct delayed_call *);
58:	static int ext4_encrypted_symlink_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
68:	static void ext4_free_link(void *);
73:	static const char *ext4_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/ext4/sysfs.c:
594:	void ext4_exit_sysfs(void);
563:	int ext4_init_sysfs(void);
511:	void ext4_notify_error_sysfs(struct ext4_sb_info *);
520:	int ext4_register_sysfs(struct super_block *);
554:	void ext4_unregister_sysfs(struct super_block *);
369:	static ssize_t ext4_attr_show(struct kobject *, struct attribute *, char *);
446:	static ssize_t ext4_attr_store(struct kobject *, struct attribute *, const char *, size_t);
487:	static void ext4_sb_release(struct kobject *);

File fs/ext4/truncate.h:
30:	static unsigned long ext4_blocks_for_truncate(struct inode *);

File fs/ext4/xattr.c:
924:	int __ext4_xattr_set_credits(struct super_block *, struct inode *, struct buffer_head *, size_t, bool);
442:	void ext4_evict_ea_inode(struct inode *);
2702:	int ext4_expand_extra_isize_ea(struct inode *, int, struct ext4_inode *, handle_t *);
835:	int ext4_get_inode_usage(struct inode *, qsize_t *);
793:	ssize_t ext4_listxattr(struct dentry *, char *, size_t);
3167:	struct mb_cache *ext4_xattr_create_cache(void);
2859:	int ext4_xattr_delete_inode(handle_t *, struct inode *, struct ext4_xattr_inode_array **, int);
3172:	void ext4_xattr_destroy_cache(struct mb_cache *);
670:	int ext4_xattr_get(struct inode *, int, const char *, void *, size_t);
2197:	int ext4_xattr_ibody_find(struct inode *, struct ext4_xattr_info *, struct ext4_xattr_ibody_find *);
605:	int ext4_xattr_ibody_get(struct inode *, int, const char *, void *, size_t);
2226:	int ext4_xattr_ibody_set(handle_t *, struct inode *, struct ext4_xattr_info *, struct ext4_xattr_ibody_find *);
2960:	void ext4_xattr_inode_array_free(struct ext4_xattr_inode_array *);
2484:	int ext4_xattr_set(struct inode *, int, const char *, const void *, size_t, int);
2448:	int ext4_xattr_set_credits(struct inode *, size_t, bool, int *);
2296:	int ext4_xattr_set_handle(handle_t *, struct inode *, int, const char *, const void *, size_t, int);
234:	static int __ext4_xattr_check_block(struct inode *, struct buffer_head *, const char *, unsigned int);
265:	static int __xattr_check_inode(struct inode *, struct ext4_xattr_ibody_header *, void *, const char *, unsigned int);
2981:	static void ext4_xattr_block_cache_insert(struct mb_cache *, struct buffer_head *);
132:	static __le32 ext4_xattr_block_csum(struct inode *, sector_t, struct ext4_xattr_header *);
168:	static void ext4_xattr_block_csum_set(struct inode *, struct buffer_head *);
1833:	static int ext4_xattr_block_find(struct inode *, struct ext4_xattr_info *, struct ext4_xattr_block_find *);
1871:	static int ext4_xattr_block_set(handle_t *, struct inode *, struct ext4_xattr_info *, struct ext4_xattr_block_find *);
1143:	static void ext4_xattr_inode_dec_ref_all(handle_t *, struct inode *, struct buffer_head *, struct ext4_xattr_entry *, bool, struct ext4_xattr_inode_array **, int, bool);
913:	static void ext4_xattr_inode_free_quota(struct inode *, struct inode *, size_t);
499:	static int ext4_xattr_inode_get(struct inode *, struct ext4_xattr_entry *, void *, size_t);
385:	static int ext4_xattr_inode_iget(struct inode *, unsigned long, u32, struct inode **);
1068:	static int ext4_xattr_inode_inc_ref_all(handle_t *, struct inode *, struct ext4_xattr_entry *);
344:	static int ext4_xattr_inode_read(struct inode *, void *, size_t);
1007:	static int ext4_xattr_inode_update_ref(handle_t *, struct inode *, int);
457:	static int ext4_xattr_inode_verify_hashes(struct inode *, struct ext4_xattr_entry *, void *, size_t);
1240:	static void ext4_xattr_release_block(handle_t *, struct inode *, struct buffer_head *, struct ext4_xattr_inode_array **, int);
1582:	static int ext4_xattr_set_entry(struct ext4_xattr_info *, struct ext4_xattr_search *, handle_t *, struct inode *, bool);
818:	static void ext4_xattr_update_super_block(handle_t *, struct super_block *);
2251:	static int ext4_xattr_value_same(struct ext4_xattr_search *, struct ext4_xattr_info *);

File fs/ext4/xattr_hurd.c:
22:	static int ext4_xattr_hurd_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
16:	static bool ext4_xattr_hurd_list(struct dentry *);
34:	static int ext4_xattr_hurd_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/ext4/xattr_trusted.c:
23:	static int ext4_xattr_trusted_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
17:	static bool ext4_xattr_trusted_list(struct dentry *);
32:	static int ext4_xattr_trusted_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/ext4/xattr_user.c:
22:	static int ext4_xattr_user_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
16:	static bool ext4_xattr_user_list(struct dentry *);
33:	static int ext4_xattr_user_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/fat/cache.c:
358:	int fat_bmap(struct inode *, sector_t, sector_t *, unsigned long *, int, bool);
57:	void fat_cache_destroy(void);
46:	int fat_cache_init(void);
204:	void fat_cache_inval_inode(struct inode *);
225:	int fat_get_cluster(struct inode *, int, int *, int *);
310:	int fat_get_mapped_cluster(struct inode *, sector_t, sector_t, unsigned long *, sector_t *);
134:	static void fat_cache_add(struct inode *, struct fat_cache_id *);
39:	static void init_once(void *);

File fs/fat/dir.c:
1281:	int fat_add_entries(struct inode *, void *, int, struct fat_slot_info *);
1133:	int fat_alloc_new_dir(struct inode *, struct timespec64 *);
905:	int fat_dir_empty(struct inode *);
890:	int fat_get_dotdot_entry(struct inode *, struct buffer_head **, struct msdos_dir_entry **);
1029:	int fat_remove_entries(struct inode *, struct fat_slot_info *);
951:	int fat_scan(struct inode *, const unsigned char *, struct fat_slot_info *);
975:	int fat_scan_logstart(struct inode *, int, struct fat_slot_info *);
463:	int fat_search_long(struct inode *, const unsigned char *, int, struct fat_slot_info *);
930:	int fat_subdirs(struct inode *);
553:	static int __fat_readdir(struct inode *, struct file *, struct dir_context *, int, struct fat_ioctl_filldir_callback *);
994:	static int __fat_remove_entries(struct inode *, loff_t, int);
787:	static long fat_dir_ioctl(struct file *, unsigned int, unsigned long);
116:	static int fat_get_entry(struct inode *, loff_t *, struct buffer_head **, struct msdos_dir_entry **);
759:	static bool fat_ioctl_filldir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
279:	static int fat_parse_long(struct inode *, loff_t *, struct buffer_head **, struct msdos_dir_entry **, wchar_t **, unsigned char *);
349:	static int fat_parse_short(struct super_block *, const struct msdos_dir_entry *, unsigned char *, int);
702:	static int fat_readdir(struct file *, struct dir_context *);
234:	static int fat_shortname2uni(struct nls_table *, unsigned char *, int, wchar_t *, unsigned short, int);
1081:	static int fat_zeroed_cluster(struct inode *, sector_t, int, struct buffer_head **, int);

File fs/fat/fat.h:
235:	static unsigned char fat_checksum(const __u8 *);

File fs/fat/fatent.c:
466:	int fat_alloc_clusters(struct inode *, int *, int);
716:	int fat_count_free_clusters(struct super_block *);
289:	void fat_ent_access_init(struct super_block *);
349:	int fat_ent_read(struct inode *, struct fat_entry *, int);
410:	int fat_ent_write(struct inode *, struct fat_entry *, int, int);
554:	int fat_free_clusters(struct inode *, int);
762:	int fat_trim_fs(struct inode *, struct fstrim_range *);
23:	static void fat12_ent_blocknr(struct super_block *, int, int *, sector_t *);
69:	static int fat12_ent_bread(struct super_block *, struct fat_entry *, int, sector_t);
120:	static int fat12_ent_get(struct fat_entry *);
195:	static int fat12_ent_next(struct fat_entry *);
156:	static void fat12_ent_put(struct fat_entry *, int);
43:	static void fat12_ent_set_ptr(struct fat_entry *, int);
138:	static int fat16_ent_get(struct fat_entry *);
228:	static int fat16_ent_next(struct fat_entry *);
178:	static void fat16_ent_put(struct fat_entry *, int);
57:	static void fat16_ent_set_ptr(struct fat_entry *, int);
147:	static int fat32_ent_get(struct fat_entry *);
240:	static int fat32_ent_next(struct fat_entry *);
187:	static void fat32_ent_put(struct fat_entry *, int);
63:	static void fat32_ent_set_ptr(struct fat_entry *, int);
33:	static void fat_ent_blocknr(struct super_block *, int, int *, sector_t *);
102:	static int fat_ent_bread(struct super_block *, struct fat_entry *, int, sector_t);
683:	static void fat_ent_reada(struct super_block *, struct fatent_ra *, struct fat_entry *);
376:	static int fat_mirror_bhs(struct super_block *, struct buffer_head **, int);
755:	static int fat_trim_clusters(struct super_block *, u32, u32);

File fs/fat/file.c:
186:	int fat_file_fsync(struct file *, loff_t, loff_t, int);
156:	long fat_generic_ioctl(struct file *, unsigned int, unsigned long);
398:	int fat_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
480:	int fat_setattr(struct user_namespace *, struct dentry *, struct iattr *);
379:	void fat_truncate_blocks(struct inode *, loff_t);
217:	static int fat_cont_expand(struct inode *, loff_t);
260:	static long fat_fallocate(struct file *, int, loff_t, loff_t);
175:	static int fat_file_release(struct inode *, struct file *);

File fs/fat/inode.c:
104:	int fat_add_cluster(struct inode *);
401:	void fat_attach(struct inode *, loff_t);
334:	int fat_block_truncate_page(struct inode *, loff_t);
588:	struct inode *fat_build_inode(struct super_block *, struct msdos_dir_entry *, loff_t);
430:	void fat_detach(struct inode *);
512:	int fat_fill_inode(struct inode *, struct msdos_dir_entry *);
1599:	int fat_fill_super(struct super_block *, void *, int, int, void (*)(struct super_block *));
1927:	int fat_flush_inodes(struct super_block *, struct inode *, struct inode *);
446:	struct inode *fat_iget(struct super_block *, loff_t);
919:	int fat_sync_inode(struct inode *);
846:	static int __fat_write_inode(struct inode *, int);
315:	static sector_t _fat_bmap(struct address_space *, sector_t);
719:	static void delayed_free(struct callback_head *);
1961:	static void exit_fat_fs(void);
742:	static struct inode *fat_alloc_inode(struct super_block *);
792:	static void fat_destroy_inodecache(void);
255:	static ssize_t fat_direct_IO(struct kiocb *, struct iov_iter *);
648:	static void fat_evict_inode(struct inode *);
762:	static void fat_free_inode(struct inode *);
183:	static int fat_get_block(struct inode *, sector_t, struct buffer_head *, int);
290:	static int fat_get_block_bmap(struct inode *, sector_t, struct buffer_head *, int);
728:	static void fat_put_super(struct super_block *);
203:	static int fat_read_folio(struct file *, struct folio *);
1382:	static int fat_read_root(struct inode *);
208:	static void fat_readahead(struct readahead_control *);
802:	static int fat_remount(struct super_block *, int *, char *);
663:	static void fat_set_state(struct super_block *, unsigned int, unsigned int);
939:	static int fat_show_options(struct seq_file *, struct dentry *);
821:	static int fat_statfs(struct dentry *, struct kstatfs *);
223:	static int fat_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
238:	static int fat_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
903:	static int fat_write_inode(struct inode *, struct writeback_control *);
197:	static int fat_writepages(struct address_space *, struct writeback_control *);
1942:	static int init_fat_fs(void);
767:	static void init_once(void *);

File fs/fat/misc.c:
21:	void __fat_fs_error(struct super_block *, int, const char *, ...);
54:	void _fat_msg(struct super_block *, const char *, const char *, ...);
107:	int fat_chain_add(struct inode *, int, int);
68:	int fat_clusters_flush(struct super_block *);
364:	int fat_sync_bhs(struct buffer_head **, int);
204:	void fat_time_fat2unix(struct msdos_sb_info *, struct timespec64 *, __le16, __le16, u8);
243:	void fat_time_unix2fat(struct msdos_sb_info *, struct timespec64 *, __le16 *, __le16 *, u8 *);
287:	struct timespec64 fat_truncate_atime(const struct msdos_sb_info *, const struct timespec64 *);
304:	struct timespec64 fat_truncate_mtime(const struct msdos_sb_info *, const struct timespec64 *);
314:	int fat_truncate_time(struct inode *, struct timespec64 *, int);
341:	int fat_update_time(struct inode *, struct timespec64 *, int);

File fs/fat/namei_vfat.c:
1224:	static void exit_vfat_fs(void);
1219:	static int init_vfat_fs(void);
1189:	static void setup(struct super_block *);
656:	static int vfat_add_entry(struct inode *, const struct qstr *, int, int, struct timespec64 *, struct fat_slot_info *);
174:	static int vfat_cmp(const struct dentry *, unsigned int, const char *, const struct qstr *);
155:	static int vfat_cmpi(const struct dentry *, unsigned int, const char *, const struct qstr *);
759:	static int vfat_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
1198:	static int vfat_fill_super(struct super_block *, void *, int);
122:	static int vfat_hash(const struct dentry *, struct qstr *);
134:	static int vfat_hashi(const struct dentry *, struct qstr *);
701:	static struct dentry *vfat_lookup(struct inode *, struct dentry *, unsigned int);
847:	static int vfat_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
1203:	static struct dentry *vfat_mount(struct file_system_type *, int, const char *, void *);
1161:	static int vfat_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
56:	static int vfat_revalidate(struct dentry *, unsigned int);
67:	static int vfat_revalidate_ci(struct dentry *, unsigned int);
790:	static int vfat_rmdir(struct inode *, struct dentry *);
821:	static int vfat_unlink(struct inode *, struct dentry *);

File fs/fat/nfs.c:
56:	static struct inode *__fat_nfs_get_inode(struct super_block *, u64, u32, loff_t);
100:	static int fat_encode_fh_nostale(struct inode *, __u32 *, int *, struct inode *);
142:	static struct dentry *fat_fh_to_dentry(struct super_block *, struct fid *, int, int);
149:	static struct dentry *fat_fh_to_dentry_nostale(struct super_block *, struct fid *, int, int);
180:	static struct dentry *fat_fh_to_parent(struct super_block *, struct fid *, int, int);
187:	static struct dentry *fat_fh_to_parent_nostale(struct super_block *, struct fid *, int, int);
262:	static struct dentry *fat_get_parent(struct dentry *);
92:	static struct inode *fat_nfs_get_inode(struct super_block *, u64, u32);

File fs/fcntl.c:
439:	long __arm64_sys_fcntl(const struct pt_regs *);
106:	void __f_setown(struct file *, struct pid *, enum pid_type, int);
145:	void f_delown(struct file *);
150:	pid_t f_getown(struct file *);
114:	int f_setown(struct file *, unsigned long, int);
888:	struct fasync_struct *fasync_alloc(void);
898:	void fasync_free(struct fasync_struct *);
973:	int fasync_helper(int, struct file *, int, struct fasync_struct **);
910:	struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
862:	int fasync_remove_entry(struct file *, struct fasync_struct **);
1010:	void kill_fasync(struct fasync_struct **, int, int);
771:	void send_sigio(struct fown_struct *, int, int);
809:	int send_sigurg(struct fown_struct *);
88:	static void f_modown(struct file *, struct pid *, enum pid_type, int);
847:	static void fasync_free_rcu(struct callback_head *);
1023:	static int fcntl_init(void);
715:	static void send_sigio_to_task(struct task_struct *, struct fown_struct *, int, int, enum pid_type);

File fs/fhandle.c:
93:	long __arm64_sys_name_to_handle_at(const struct pt_regs *);
256:	long __arm64_sys_open_by_handle_at(const struct pt_regs *);
134:	static int vfs_dentry_acceptable(void *, struct dentry *);

File fs/file.c:
1269:	long __arm64_sys_dup(const struct pt_regs *);
1254:	long __arm64_sys_dup2(const struct pt_regs *);
1249:	long __arm64_sys_dup3(const struct pt_regs *);
796:	struct file *__close_fd_get_file(unsigned int);
729:	int __close_range(unsigned int, unsigned int, unsigned int);
1052:	void __f_unlock_pos(struct file *);
1027:	unsigned long __fdget(unsigned int);
1038:	unsigned long __fdget_pos(unsigned int);
1033:	unsigned long __fdget_raw(unsigned int);
557:	int __get_unused_fd_flags(unsigned int, unsigned long);
1169:	int __receive_fd(struct file *, int *, unsigned int);
653:	int close_fd(unsigned int);
805:	struct file *close_fd_get_file(unsigned int);
817:	void do_close_on_exec(struct files_struct *);
316:	struct files_struct *dup_fd(struct files_struct *, unsigned int, int *);
456:	void exit_files(struct task_struct *);
1284:	int f_dupfd(unsigned int, struct file *, unsigned int);
602:	void fd_install(unsigned int, struct file *);
924:	struct file *fget(unsigned int);
930:	struct file *fget_raw(unsigned int);
936:	struct file *fget_task(struct task_struct *, unsigned int);
1076:	bool get_close_on_exec(unsigned int);
562:	int get_unused_fd_flags(unsigned int);
1298:	int iterate_fd(struct files_struct *, unsigned int, int (*)(const void *, struct file *, unsigned int), const void *);
444:	void put_files_struct(struct files_struct *);
576:	void put_unused_fd(unsigned int);
1209:	int receive_fd(struct file *, unsigned int);
1195:	int receive_fd_replace(int, struct file *, unsigned int);
1132:	int replace_fd(unsigned int, struct file *, unsigned int);
1063:	void set_close_on_exec(unsigned int, int);
948:	struct file *task_lookup_fd_rcu(struct task_struct *, unsigned int);
963:	struct file *task_lookup_next_fd_rcu(struct task_struct *, unsigned int *);
907:	static struct file *__fget_files(struct files_struct *, unsigned int, fmode_t);
34:	static void __free_fdtable(struct fdtable *);
499:	static int alloc_fd(unsigned int, unsigned int, unsigned int);
105:	static struct fdtable *alloc_fdtable(unsigned int);
1088:	static int do_dup2(struct files_struct *, struct file *, unsigned int, unsigned int);
214:	static int expand_files(struct files_struct *, unsigned int);
41:	static void free_fdtable_rcu(struct callback_head *);
1215:	static int ksys_dup3(unsigned int, unsigned int, int);
301:	static unsigned int sane_fdtable_size(struct fdtable *, unsigned int);

File fs/file_table.c:
398:	void __fput_sync(struct file *);
170:	struct file *alloc_empty_file(int, const struct cred *);
207:	struct file *alloc_empty_file_noaccount(int, const struct cred *);
281:	struct file *alloc_file_clone(struct file *, int, const struct file_operations *);
254:	struct file *alloc_file_pseudo(struct inode *, struct vfsmount *, const char *, int, const struct file_operations *);
410:	void files_init(void);
421:	void files_maxfiles_init(void);
361:	void flush_delayed_fput(void);
369:	void fput(struct file *);
73:	unsigned long get_max_files(void);
346:	static void ____fput(struct callback_head *);
294:	static void __fput(struct file *);
224:	static struct file *alloc_file(const struct path *, int, const struct file_operations *);
337:	static void delayed_fput(struct work_struct *);
46:	static void file_free_rcu(struct callback_head *);
120:	static int init_fs_stat_sysctls(void);
84:	static int proc_nr_files(struct ctl_table *, int, void *, size_t *, loff_t *);

File fs/filesystems.c:
191:	long __arm64_sys_sysfs(const struct pt_regs *);
38:	struct file_system_type *get_filesystem(struct file_system_type *);
273:	struct file_system_type *get_fs_type(const char *);
212:	int list_bdev_fs_names(char *, size_t);
44:	void put_filesystem(struct file_system_type *);
72:	int register_filesystem(struct file_system_type *);
108:	int unregister_filesystem(struct file_system_type *);
237:	static int filesystems_proc_show(struct seq_file *, void *);
253:	static int proc_filesystems_init(void);

File fs/fs-writeback.c:
240:	void __inode_attach_wb(struct inode *, struct page *);
2387:	void __mark_inode_dirty(struct inode *, int);
1016:	int cgroup_writeback_by_id(u64, int, enum wb_reason, struct wb_completion *);
1097:	void cgroup_writeback_umount(void);
624:	bool cleanup_offline_cgwb(struct bdi_writeback *);
2349:	int dirtytime_interval_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1235:	void inode_io_list_del(struct inode *);
1481:	void inode_wait_for_writeback(struct inode *);
1272:	void sb_clear_inode_writeback(struct inode *);
1254:	void sb_mark_inode_writeback(struct inode *);
2768:	int sync_inode_metadata(struct inode *, int);
2699:	void sync_inodes_sb(struct super_block *);
2682:	void try_to_writeback_inodes_sb(struct super_block *, enum wb_reason);
2293:	void wakeup_flusher_threads(enum wb_reason);
2282:	void wakeup_flusher_threads_bdi(struct backing_dev_info *, enum wb_reason);
1222:	void wb_start_background_writeback(struct bdi_writeback *);
189:	void wb_wait_for_completion(struct wb_completion *);
2229:	void wb_workfn(struct work_struct *);
859:	void wbc_account_cgroup_owner(struct writeback_control *, struct page *, size_t);
693:	void wbc_attach_and_unlock_inode(struct writeback_control *, struct inode *);
763:	void wbc_detach_inode(struct writeback_control *);
2742:	int write_inode_now(struct inode *, int);
2669:	void writeback_inodes_sb(struct super_block *, enum wb_reason);
2652:	void writeback_inodes_sb_nr(struct super_block *, unsigned long, enum wb_reason);
2270:	static void __wakeup_flusher_threads_bdi(struct backing_dev_info *, enum wb_reason);
1941:	static long __writeback_inodes_wb(struct bdi_writeback *, struct wb_writeback_work *);
1587:	static int __writeback_single_inode(struct inode *, struct writeback_control *);
938:	static void bdi_split_work_to_wbs(struct backing_dev_info *, struct wb_writeback_work *, bool);
1115:	static int cgroup_writeback_init(void);
279:	static void inode_cgwb_move_to_attached(struct inode *, struct bdi_writeback *);
118:	static bool inode_io_list_move_locked(struct inode *, struct bdi_writeback *, struct list_head *);
560:	static void inode_switch_wbs(struct inode *, int);
466:	static void inode_switch_wbs_work_fn(struct work_struct *);
303:	static struct bdi_writeback *locked_inode_to_wb_and_lock_list(struct inode *);
1365:	static int move_expired_inodes(struct list_head *, struct list_head *, unsigned long);
1427:	static void queue_io(struct bdi_writeback *, struct wb_writeback_work *, unsigned long);
1296:	static void redirty_tail_locked(struct inode *, struct bdi_writeback *);
1331:	static void requeue_io(struct inode *, struct bdi_writeback *);
2342:	static int start_dirtytime_writeback(void);
2326:	static void wakeup_dirtytime_writeback(struct work_struct *);
160:	static void wb_queue_work(struct bdi_writeback *, struct wb_writeback_work *);
2012:	static long wb_writeback(struct bdi_writeback *, struct wb_writeback_work *);
1975:	static long writeback_inodes_wb(struct bdi_writeback *, long, enum wb_reason);
1796:	static long writeback_sb_inodes(struct super_block *, struct bdi_writeback *, struct wb_writeback_work *);
1681:	static int writeback_single_inode(struct inode *, struct writeback_control *);

File fs/fs_context.c:
325:	void fc_drop_locked(struct fs_context *);
699:	int finish_clean_context(struct fs_context *);
301:	struct fs_context *fs_context_for_mount(struct file_system_type *, unsigned int);
309:	struct fs_context *fs_context_for_reconfigure(struct dentry *, unsigned int, unsigned int);
318:	struct fs_context *fs_context_for_submount(struct file_system_type *, struct dentry *);
201:	int generic_parse_monolithic(struct fs_context *, void *);
385:	void logfc(struct fc_log *, const char *, char, const char *, ...);
659:	int parse_monolithic_mount_data(struct fs_context *, void *);
457:	void put_fs_context(struct fs_context *);
683:	void vfs_clean_context(struct fs_context *);
339:	struct fs_context *vfs_dup_fs_context(struct fs_context *);
127:	int vfs_parse_fs_param(struct fs_context *, struct fs_parameter *);
94:	int vfs_parse_fs_param_source(struct fs_context *, struct fs_parameter *);
166:	int vfs_parse_fs_string(struct fs_context *, const char *, const char *, size_t);
247:	static struct fs_context *alloc_fs_context(struct file_system_type *, struct dentry *, unsigned int, unsigned int, enum fs_context_purpose);
499:	static int legacy_fs_context_dup(struct fs_context *, struct fs_context *);
485:	static void legacy_fs_context_free(struct fs_context *);
604:	static int legacy_get_tree(struct fs_context *);
650:	static int legacy_init_fs_context(struct fs_context *);
582:	static int legacy_parse_monolithic(struct fs_context *, void *);
525:	static int legacy_parse_param(struct fs_context *, struct fs_parameter *);
625:	static int legacy_reconfigure(struct fs_context *);

File fs/fs_parser.c:
103:	int __fs_parse(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
144:	int fs_lookup_param(struct fs_context *, struct fs_parameter *, bool, unsigned int, struct path *);
279:	int fs_param_is_blob(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
311:	int fs_param_is_blockdev(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
197:	int fs_param_is_bool(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
253:	int fs_param_is_enum(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
288:	int fs_param_is_fd(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
318:	int fs_param_is_path(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
227:	int fs_param_is_s32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
269:	int fs_param_is_string(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
213:	int fs_param_is_u32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
240:	int fs_param_is_u64(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
41:	int lookup_constant(const struct constant_table *, const char *, int);

File fs/fs_pin.c:
85:	void group_pin_kill(struct hlist_head *);
71:	void mnt_pin_kill(struct mount *);
22:	void pin_insert(struct fs_pin *, struct vfsmount *);
30:	void pin_kill(struct fs_pin *);
10:	void pin_remove(struct fs_pin *);

File fs/fs_struct.c:
58:	void chroot_fs_refs(const struct path *, const struct path *);
112:	struct fs_struct *copy_fs_struct(struct fs_struct *);
156:	int current_umask(void);
95:	void exit_fs(struct task_struct *);
88:	void free_fs_struct(struct fs_struct *);
34:	void set_fs_pwd(struct fs_struct *, const struct path *);
15:	void set_fs_root(struct fs_struct *, const struct path *);
133:	int unshare_fs_struct(void);

File fs/fs_types.c:
37:	unsigned char fs_ftype_to_dtype(unsigned int);
101:	unsigned char fs_umode_to_dtype(umode_t);
77:	unsigned char fs_umode_to_ftype(umode_t);

File fs/fsopen.c:
314:	long __arm64_sys_fsconfig(const struct pt_regs *);
115:	long __arm64_sys_fsopen(const struct pt_regs *);
158:	long __arm64_sys_fspick(const struct pt_regs *);
24:	static ssize_t fscontext_read(struct file *, char *, size_t, loff_t *);
67:	static int fscontext_release(struct inode *, struct file *);

File fs/fuse/acl.c:
68:	struct posix_acl *fuse_get_acl(struct user_namespace *, struct dentry *, int);
80:	struct posix_acl *fuse_get_inode_acl(struct inode *, int, bool);
97:	int fuse_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
14:	static struct posix_acl *__fuse_get_acl(struct fuse_conn *, struct user_namespace *, struct inode *, int, bool);

File fs/fuse/control.c:
256:	int fuse_ctl_add_conn(struct fuse_conn *);
381:	void fuse_ctl_cleanup(void);
376:	int fuse_ctl_init(void);
295:	void fuse_ctl_remove_conn(struct fuse_conn *);
34:	static ssize_t fuse_conn_abort_write(struct file *, const char *, size_t, loff_t *);
144:	static ssize_t fuse_conn_congestion_threshold_read(struct file *, char *, size_t, loff_t *);
161:	static ssize_t fuse_conn_congestion_threshold_write(struct file *, const char *, size_t, loff_t *);
102:	static ssize_t fuse_conn_max_background_read(struct file *, char *, size_t, loff_t *);
119:	static ssize_t fuse_conn_max_background_write(struct file *, const char *, size_t, loff_t *);
47:	static ssize_t fuse_conn_waiting_read(struct file *, char *, size_t, loff_t *);
213:	static struct dentry *fuse_ctl_add_dentry(struct dentry *, struct fuse_conn *, const char *, int, int, const struct inode_operations *, const struct file_operations *);
314:	static int fuse_ctl_fill_super(struct super_block *, struct fs_context *);
340:	static int fuse_ctl_get_tree(struct fs_context *);
349:	static int fuse_ctl_init_fs_context(struct fs_context *);
355:	static void fuse_ctl_kill_sb(struct super_block *);

File fs/fuse/cuse.c:
496:	static int cuse_channel_open(struct inode *, struct file *);
544:	static int cuse_channel_release(struct inode *, struct file *);
583:	static ssize_t cuse_class_abort_store(struct device *, struct device_attribute *, const char *, size_t);
574:	static ssize_t cuse_class_waiting_show(struct device *, struct device_attribute *, char *);
641:	static void cuse_exit(void);
475:	static void cuse_fc_release(struct fuse_conn *);
168:	static long cuse_file_compat_ioctl(struct file *, unsigned int, unsigned long);
155:	static long cuse_file_ioctl(struct file *, unsigned int, unsigned long);
297:	static void cuse_gendev_release(struct device *);
610:	static int cuse_init(void);
114:	static int cuse_open(struct inode *, struct file *);
317:	static void cuse_process_init_reply(struct fuse_mount *, struct fuse_args *, int);
94:	static ssize_t cuse_read_iter(struct kiocb *, struct iov_iter *);
144:	static int cuse_release(struct inode *, struct file *);
102:	static ssize_t cuse_write_iter(struct kiocb *, struct iov_iter *);

File fs/fuse/dev.c:
2123:	void fuse_abort_conn(struct fuse_conn *);
1077:	struct fuse_forget_link *fuse_dequeue_forget(struct fuse_iqueue *, unsigned int, unsigned int *);
2333:	void fuse_dev_cleanup(void);
2312:	int fuse_dev_init(void);
2195:	int fuse_dev_release(struct inode *, struct file *);
195:	u64 fuse_get_unique(struct fuse_iqueue *);
183:	unsigned int fuse_len_args(unsigned int, struct fuse_arg *);
236:	void fuse_queue_forget(struct fuse_conn *, struct fuse_forget_link *, u64, u64);
280:	void fuse_request_end(struct fuse_req *);
78:	void fuse_set_initialized(struct fuse_conn *);
548:	int fuse_simple_background(struct fuse_mount *, struct fuse_args *, gfp_t);
483:	ssize_t fuse_simple_request(struct fuse_mount *, struct fuse_args *);
2188:	void fuse_wait_aborted(struct fuse_conn *);
67:	static void __fuse_get_request(struct fuse_req *);
1820:	static int copy_out_args(struct fuse_copy_state *, struct fuse_args *, unsigned int);
1011:	static int fuse_copy_args(struct fuse_copy_state *, unsigned int, unsigned int, struct fuse_arg *, int);
687:	static int fuse_copy_fill(struct fuse_copy_state *);
665:	static void fuse_copy_finish(struct fuse_copy_state *);
997:	static int fuse_copy_one(struct fuse_copy_state *, void *, unsigned int);
926:	static int fuse_copy_page(struct fuse_copy_state *, struct page **, unsigned int, unsigned int, int);
1202:	static ssize_t fuse_dev_do_read(struct fuse_dev *, struct file *, struct fuse_copy_state *, size_t);
1848:	static ssize_t fuse_dev_do_write(struct fuse_dev *, struct fuse_copy_state *, size_t);
2224:	static int fuse_dev_fasync(int, struct file *, int);
2252:	static long fuse_dev_ioctl(struct file *, unsigned int, unsigned long);
1340:	static int fuse_dev_open(struct inode *, struct file *);
2055:	static __poll_t fuse_dev_poll(struct file *, poll_table *);
1351:	static ssize_t fuse_dev_read(struct kiocb *, struct iov_iter *);
1368:	static ssize_t fuse_dev_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
1961:	static ssize_t fuse_dev_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
210:	static void fuse_dev_wake_and_unlock(struct fuse_iqueue *);
1945:	static ssize_t fuse_dev_write(struct kiocb *, struct iov_iter *);
106:	static struct fuse_req *fuse_get_req(struct fuse_mount *, bool);
158:	static void fuse_put_request(struct fuse_req *);
1182:	static int fuse_read_forget(struct fuse_conn *, struct fuse_iqueue *, struct fuse_copy_state *, size_t);
1047:	static int fuse_read_interrupt(struct fuse_iqueue *, struct fuse_copy_state *, size_t, struct fuse_req *);
1649:	static void fuse_retrieve_end(struct fuse_mount *, struct fuse_args *, int);
334:	static int queue_interrupt(struct fuse_req *);

File fs/fuse/dir.c:
123:	u64 entry_attr_timeout(struct fuse_entry_out *);
1265:	bool fuse_allow_current_process(struct fuse_conn *);
112:	void fuse_change_entry_timeout(struct dentry *, struct fuse_entry_out *);
1672:	int fuse_do_setattr(struct dentry *, struct iattr *, struct file *);
860:	void fuse_flush_time_update(struct inode *);
1637:	int fuse_flush_times(struct inode *, struct fuse_file *);
1982:	void fuse_init_common(struct inode *);
1987:	void fuse_init_dir(struct inode *);
2017:	void fuse_init_symlink(struct inode *);
363:	bool fuse_invalid_attr(struct fuse_attr *);
152:	void fuse_invalidate_atime(struct inode *);
137:	void fuse_invalidate_attr(struct inode *);
128:	void fuse_invalidate_attr_mask(struct inode *, u32);
166:	void fuse_invalidate_entry_cache(struct dentry *);
369:	int fuse_lookup_name(struct super_block *, u64, const struct qstr *, struct fuse_entry_out *, struct inode **);
1610:	void fuse_release_nowrite(struct inode *);
1172:	int fuse_reverse_inval_entry(struct fuse_conn *, u64, u64, struct qstr *, u32);
1582:	void fuse_set_nowrite(struct inode *);
1167:	int fuse_update_attributes(struct inode *, struct file *, u32);
876:	void fuse_update_ctime(struct inode *);
357:	int fuse_valid_type(int);
118:	static u64 attr_timeout(struct fuse_attr_out *);
699:	static int create_new_entry(struct fuse_mount *, struct fuse_args *, struct inode *, struct dentry *, umode_t);
650:	static int fuse_atomic_open(struct inode *, struct dentry *, struct file *, unsigned int, umode_t);
799:	static int fuse_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
530:	static int fuse_create_open(struct inode *, struct dentry *, struct file *, unsigned int, umode_t, u32);
318:	static struct vfsmount *fuse_dentry_automount(struct path *);
308:	static int fuse_dentry_delete(const struct dentry *);
205:	static int fuse_dentry_revalidate(struct dentry *, unsigned int);
142:	static void fuse_dir_changed(struct inode *);
1512:	static long fuse_dir_compat_ioctl(struct file *, unsigned int, unsigned long);
1476:	static int fuse_dir_fsync(struct file *, loff_t, loff_t, int);
1500:	static long fuse_dir_ioctl(struct file *, unsigned int, unsigned long);
1464:	static int fuse_dir_open(struct inode *, struct file *);
1469:	static int fuse_dir_release(struct inode *, struct file *);
1090:	static int fuse_do_getattr(struct inode *, struct kstat *, struct file *);
882:	static void fuse_entry_unlinked(struct dentry *);
1427:	static const char *fuse_get_link(struct dentry *, struct inode *, struct delayed_call *);
1903:	static int fuse_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1034:	static int fuse_link(struct dentry *, struct inode *, struct dentry *);
419:	static struct dentry *fuse_lookup(struct inode *, struct dentry *, unsigned int);
822:	static int fuse_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
776:	static int fuse_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
1307:	static int fuse_perm_getattr(struct inode *, int);
1329:	static int fuse_permission(struct user_namespace *, struct inode *, int);
1392:	static int fuse_readlink_page(struct inode *, struct page *);
1001:	static int fuse_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
951:	static int fuse_rename_common(struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int, int, size_t);
928:	static int fuse_rmdir(struct inode *, struct dentry *);
1840:	static int fuse_setattr(struct user_namespace *, struct dentry *, struct iattr *);
844:	static int fuse_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
2001:	static int fuse_symlink_read_folio(struct file *, struct folio *);
805:	static int fuse_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
905:	static int fuse_unlink(struct inode *, struct dentry *);

File fs/fuse/file.c:
1448:	ssize_t fuse_direct_io(struct fuse_io_priv *, struct iov_iter *, loff_t *, int);
169:	int fuse_do_open(struct fuse_mount *, u64, struct file *, bool);
57:	struct fuse_file *fuse_file_alloc(struct fuse_mount *);
84:	void fuse_file_free(struct fuse_file *);
127:	struct fuse_file *fuse_file_open(struct fuse_mount *, u64, unsigned int, bool);
2795:	__poll_t fuse_file_poll(struct file *, poll_table *);
304:	void fuse_file_release(struct inode *, struct fuse_file *, unsigned int, fl_owner_t, bool);
196:	void fuse_finish_open(struct inode *, struct file *);
1759:	void fuse_flush_writepages(struct inode *);
537:	int fuse_fsync_common(struct file *, loff_t, loff_t, int, int);
3238:	void fuse_init_file_inode(struct inode *, unsigned int);
377:	u64 fuse_lock_owner_id(struct fuse_conn *, fl_owner_t);
2843:	int fuse_notify_poll_wakeup(struct fuse_conn *, struct fuse_notify_poll_wakeup_out *);
220:	int fuse_open_common(struct inode *, struct file *, bool);
607:	void fuse_read_args_fill(struct fuse_io_args *, struct file *, loff_t, size_t, int);
332:	void fuse_release_common(struct file *, bool);
360:	void fuse_sync_release(struct fuse_inode *, struct fuse_file *, unsigned int);
1895:	int fuse_write_inode(struct inode *, struct writeback_control *);
1093:	bool fuse_write_update_attr(struct inode *, loff_t, ssize_t);
671:	static void fuse_aio_complete(struct fuse_io_priv *, int, ssize_t);
729:	static void fuse_aio_complete_req(struct fuse_mount *, struct fuse_args *, int);
758:	static ssize_t fuse_async_req_send(struct fuse_mount *, struct fuse_io_args *, size_t);
2639:	static sector_t fuse_bmap(struct address_space *, sector_t);
3189:	static ssize_t fuse_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
2883:	static ssize_t fuse_direct_IO(struct kiocb *, struct iov_iter *);
829:	static int fuse_do_readpage(struct file *, struct page *);
2988:	static long fuse_file_fallocate(struct file *, int, loff_t, loff_t);
2620:	static int fuse_file_flock(struct file *, int, struct file_lock *);
2713:	static loff_t fuse_file_llseek(struct file *, loff_t, int);
2597:	static int fuse_file_lock(struct file *, int, struct file_lock *);
2464:	static int fuse_file_mmap(struct file *, struct vm_area_struct *);
106:	static void fuse_file_put(struct fuse_file *, bool, bool);
1625:	static ssize_t fuse_file_read_iter(struct kiocb *, struct iov_iter *);
1643:	static ssize_t fuse_file_write_iter(struct kiocb *, struct iov_iter *);
480:	static int fuse_flush(struct file *, fl_owner_t);
557:	static int fuse_fsync(struct file *, loff_t, loff_t, int);
2399:	static int fuse_launder_folio(struct folio *);
338:	static int fuse_open(struct inode *, struct file *);
2441:	static vm_fault_t fuse_page_mkwrite(struct vm_fault *);
1245:	static ssize_t fuse_perform_write(struct kiocb *, struct address_space *, struct iov_iter *, loff_t);
274:	static void fuse_prepare_release(struct fuse_inode *, struct fuse_file *, unsigned int, int);
873:	static int fuse_read_folio(struct file *, struct folio *);
967:	static void fuse_readahead(struct readahead_control *);
890:	static void fuse_readpages_end(struct fuse_mount *, struct fuse_args *, int);
343:	static int fuse_release(struct inode *, struct file *);
97:	static void fuse_release_end(struct fuse_mount *, struct fuse_args *, int);
627:	static void fuse_release_user_pages(struct fuse_args_pages *, bool);
1697:	static void fuse_send_writepage(struct fuse_mount *, struct fuse_writepage_args *, loff_t);
2567:	static int fuse_setlk(struct file *, struct file_lock *, int);
2418:	static void fuse_vma_close(struct vm_area_struct *);
458:	static void fuse_wait_on_page_writeback(struct inode *, unsigned long);
2324:	static int fuse_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
2368:	static int fuse_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2017:	static int fuse_writepage(struct page *, struct writeback_control *);
1813:	static void fuse_writepage_end(struct fuse_mount *, struct fuse_args *, int);
1679:	static void fuse_writepage_finish(struct fuse_mount *, struct fuse_writepage_args *);
1661:	static void fuse_writepage_free(struct fuse_writepage_args *);
1953:	static int fuse_writepage_locked(struct page *);
2280:	static int fuse_writepages(struct address_space *, struct writeback_control *);
2187:	static int fuse_writepages_fill(struct page *, struct writeback_control *, void *);
2079:	static void fuse_writepages_send(struct fuse_fill_wb_data *);

File fs/fuse/inode.c:
66:	struct fuse_forget_link *fuse_alloc_forget(void);
238:	void fuse_change_attributes(struct inode *, struct fuse_attr *, u64, u64);
165:	void fuse_change_attributes_common(struct inode *, struct fuse_attr *, u64, u32);
1772:	void fuse_conn_destroy(struct fuse_mount *);
886:	struct fuse_conn *fuse_conn_get(struct fuse_conn *);
828:	void fuse_conn_init(struct fuse_conn *, struct fuse_mount *, struct user_namespace *, const struct fuse_iqueue_ops *, void *);
864:	void fuse_conn_put(struct fuse_conn *);
1335:	struct fuse_dev *fuse_dev_alloc(void);
1366:	struct fuse_dev *fuse_dev_alloc_install(struct fuse_conn *);
1379:	void fuse_dev_free(struct fuse_dev *);
1357:	void fuse_dev_install(struct fuse_dev *, struct fuse_conn *);
1518:	int fuse_fill_super_common(struct super_block *, struct fuse_fs_context *);
1288:	void fuse_free_conn(struct fuse_conn *);
228:	u32 fuse_get_cache_mask(struct inode *);
361:	struct inode *fuse_iget(struct super_block *, u64, int, struct fuse_attr *, u64, u64);
416:	struct inode *fuse_ilookup(struct fuse_conn *, u64, struct fuse_mount **);
1511:	int fuse_init_fs_context_submount(struct fs_context *);
470:	bool fuse_lock_inode(struct inode *);
1803:	void fuse_mount_destroy(struct fuse_mount *);
1757:	bool fuse_mount_remove(struct fuse_mount *);
438:	int fuse_reverse_inval_inode(struct fuse_conn *, u64, loff_t, loff_t);
1234:	void fuse_send_init(struct fuse_mount *);
482:	void fuse_unlock_inode(struct inode *, bool);
71:	static struct inode *fuse_alloc_inode(struct super_block *);
956:	static int fuse_encode_fh(struct inode *, u32 *, int *, struct inode *);
116:	static void fuse_evict_inode(struct inode *);
1984:	static void fuse_exit(void);
988:	static struct dentry *fuse_fh_to_dentry(struct super_block *, struct fid *, int, int);
1002:	static struct dentry *fuse_fh_to_parent(struct super_block *, struct fid *, int, int);
1620:	static int fuse_fill_super(struct super_block *, struct fs_context *);
761:	static void fuse_free_fsc(struct fs_context *);
104:	static void fuse_free_inode(struct inode *);
1902:	static void fuse_fs_cleanup(void);
1872:	static int fuse_fs_init(void);
909:	static struct dentry *fuse_get_dentry(struct super_block *, struct fuse_inode_handle *);
1016:	static struct dentry *fuse_get_parent(struct dentry *);
1662:	static int fuse_get_tree(struct fs_context *);
1470:	static int fuse_get_tree_submount(struct fs_context *);
1945:	static int fuse_init(void);
1733:	static int fuse_init_fs_context(struct fs_context *);
314:	static void fuse_init_inode(struct inode *, struct fuse_attr *, struct fuse_conn *);
345:	static int fuse_inode_eq(struct inode *, void *);
1865:	static void fuse_inode_init_once(void *);
354:	static int fuse_inode_set(struct inode *, void *);
1810:	static void fuse_kill_sb_anon(struct super_block *);
1828:	static void fuse_kill_sb_blk(struct super_block *);
674:	static int fuse_parse_param(struct fs_context *, struct fs_parameter *);
142:	static int fuse_reconfigure(struct fs_context *);
1651:	static int fuse_set_no_super(struct super_block *, struct fs_context *);
771:	static int fuse_show_options(struct seq_file *, struct dentry *);
528:	static int fuse_statfs(struct dentry *, struct kstatfs *);
605:	static int fuse_sync_fs(struct super_block *, int);
1656:	static int fuse_test_super(struct super_block *, struct fs_context *);
488:	static void fuse_umount_begin(struct super_block *);
1121:	static void process_init_reply(struct fuse_mount *, struct fuse_args *, int);
1075:	static int set_global_limit(const char *, const struct kernel_param *);

File fs/fuse/ioctl.c:
158:	long fuse_do_ioctl(struct file *, unsigned int, unsigned long, unsigned int);
364:	long fuse_file_compat_ioctl(struct file *, unsigned int, unsigned long);
359:	long fuse_file_ioctl(struct file *, unsigned int, unsigned long);
433:	int fuse_fileattr_get(struct dentry *, struct fileattr *);
470:	int fuse_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
344:	long fuse_ioctl_common(struct file *, unsigned int, unsigned long, unsigned int);

File fs/fuse/readdir.c:
576:	int fuse_readdir(struct file *, struct dir_context *);
114:	static bool fuse_emit(struct file *, struct dir_context *, struct fuse_dirent *);

File fs/fuse/xattr.c:
51:	ssize_t fuse_getxattr(struct inode *, const char *, void *, size_t);
109:	ssize_t fuse_listxattr(struct dentry *, char *, size_t);
156:	int fuse_removexattr(struct inode *, const char *);
14:	int fuse_setxattr(struct inode *, const char *, const void *, size_t, int, unsigned int);
181:	static int fuse_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
191:	static int fuse_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/hugetlbfs/inode.c:
235:	unsigned long generic_hugetlb_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1576:	struct file *hugetlb_file_setup(const char *, size_t, vm_flags_t, int, int);
277:	static unsigned long hugetlb_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
523:	static void hugetlb_vmdelete_list(struct rb_root_cached *, unsigned long, unsigned long, zap_flags_t);
1233:	static struct inode *hugetlbfs_alloc_inode(struct super_block *);
1046:	static int hugetlbfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
1265:	static void hugetlbfs_destroy_inode(struct inode *);
1117:	static int hugetlbfs_error_remove_page(struct address_space *, struct page *);
656:	static void hugetlbfs_evict_inode(struct inode *);
769:	static long hugetlbfs_fallocate(struct file *, int, loff_t, loff_t);
119:	static int hugetlbfs_file_mmap(struct file *, struct vm_area_struct *);
1454:	static int hugetlbfs_fill_super(struct super_block *, struct fs_context *);
1260:	static void hugetlbfs_free_inode(struct inode *);
1514:	static void hugetlbfs_fs_context_free(struct fs_context *);
961:	static struct inode *hugetlbfs_get_inode(struct super_block *, struct inode *, umode_t, dev_t);
1506:	static int hugetlbfs_get_tree(struct fs_context *);
1221:	static void hugetlbfs_inc_free_inodes(struct hugetlbfs_sb_info *);
1525:	static int hugetlbfs_init_fs_context(struct fs_context *);
1090:	static int hugetlbfs_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
1036:	static int hugetlbfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
1022:	static int hugetlbfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
1349:	static int hugetlbfs_parse_param(struct fs_context *, struct fs_parameter *);
1192:	static void hugetlbfs_put_super(struct super_block *);
289:	static ssize_t hugetlbfs_read_iter(struct kiocb *, struct iov_iter *);
901:	static int hugetlbfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
1126:	static int hugetlbfs_show_options(struct seq_file *, struct dentry *);
1163:	static int hugetlbfs_statfs(struct dentry *, struct kstatfs *);
1067:	static int hugetlbfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
1053:	static int hugetlbfs_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
357:	static int hugetlbfs_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
365:	static int hugetlbfs_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
693:	static void hugetlbfs_zero_partial_page(struct hstate *, struct address_space *, loff_t, loff_t);
1649:	static int init_hugetlbfs_fs(void);
1280:	static void init_once(void *);
1629:	static struct vfsmount *mount_one_hugetlbfs(struct hstate *);
616:	static void remove_inode_hugepages(struct inode *, loff_t, loff_t);

File fs/init.c:
44:	int init_chdir(const char *);
100:	int init_chmod(const char *, umode_t);
82:	int init_chown(const char *, uid_t, gid_t, int);
59:	int init_chroot(const char *);
260:	int init_dup(struct file *);
113:	int init_eaccess(const char *);
166:	int init_link(const char *, const char *);
223:	int init_mkdir(const char *, umode_t);
141:	int init_mknod(const char *, umode_t, unsigned int);
16:	int init_mount(const char *, const char *, const char *, unsigned long, void *);
242:	int init_rmdir(const char *);
126:	int init_stat(const char *, struct kstat *, int);
201:	int init_symlink(const char *, const char *);
30:	int init_umount(const char *, int);
218:	int init_unlink(const char *);
247:	int init_utimes(char *, struct timespec64 *);

File fs/inode.c:
280:	void __destroy_inode(struct inode *);
440:	void __iget(struct inode *);
526:	void __insert_inode_hash(struct inode *, unsigned long);
544:	void __remove_inode_hash(struct inode *);
404:	void address_space_init_once(struct address_space *);
1885:	bool atime_needs_update(const struct path *, struct inode *);
1793:	int bmap(struct inode *, sector_t *);
603:	void clear_inode(struct inode *);
345:	void clear_nlink(struct inode *);
2444:	struct timespec64 current_time(struct inode *);
1956:	int dentry_needs_remove_privs(struct user_namespace *, struct dentry *);
1093:	void discard_new_inode(struct inode *);
328:	void drop_nlink(struct inode *);
554:	void dump_mapping(const struct address_space *);
711:	void evict_inodes(struct super_block *);
2144:	int file_modified(struct file *);
2023:	int file_remove_privs(struct file *);
2078:	int file_update_time(struct file *);
1608:	struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
1522:	struct inode *find_inode_nowait(struct super_block *, unsigned long, int (*)(struct inode *, unsigned long, void *), void *);
1570:	struct inode *find_inode_rcu(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
238:	void free_inode_nonrcu(struct inode *);
1691:	int generic_delete_inode(struct inode *);
1838:	int generic_update_time(struct inode *, struct timespec64 *, int);
982:	unsigned int get_next_ino(void);
93:	long get_nr_dirty_inodes(void);
1234:	struct inode *iget5_locked(struct super_block *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
1267:	struct inode *iget_locked(struct super_block *, unsigned long);
1386:	struct inode *igrab(struct inode *);
448:	void ihold(struct inode *);
1477:	struct inode *ilookup(struct super_block *, unsigned long);
1452:	struct inode *ilookup5(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
1421:	struct inode *ilookup5_nowait(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
2471:	bool in_group_or_capable(struct user_namespace *, const struct inode *, vfsgid_t);
384:	void inc_nlink(struct inode *);
2260:	void init_special_inode(struct inode *, umode_t, dev_t);
476:	void inode_add_lru(struct inode *);
2366:	void inode_dio_wait(struct inode *);
2234:	void inode_init(void);
156:	int inode_init_always(struct super_block *, struct inode *);
2214:	void inode_init_early(void);
416:	void inode_init_once(struct inode *);
2293:	void inode_init_owner(struct user_namespace *, struct inode *, const struct inode *, umode_t);
1161:	struct inode *inode_insert5(struct inode *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
2167:	int inode_needs_sync(struct inode *);
2397:	void inode_nohighmem(struct inode *);
2323:	bool inode_owner_or_capable(struct user_namespace *, const struct inode *);
491:	void inode_sb_list_add(struct inode *);
2389:	void inode_set_flags(struct inode *, unsigned int, unsigned int);
1868:	int inode_update_time(struct inode *, struct timespec64 *, int);
1627:	int insert_inode_locked(struct inode *);
1674:	int insert_inode_locked4(struct inode *, unsigned long, int (*)(struct inode *, void *), void *);
761:	int invalidate_inodes(struct super_block *, bool);
1759:	void iput(struct inode *);
1361:	ino_t iunique(struct super_block *, ino_t);
2161:	int kiocb_modified(struct kiocb *);
1115:	void lock_two_nondirectories(struct inode *, struct inode *);
2495:	umode_t mode_strip_sgid(struct user_namespace *, const struct inode *, umode_t);
1040:	struct inode *new_inode(struct super_block *);
1016:	struct inode *new_inode_pseudo(struct super_block *);
889:	long prune_icache_sb(struct super_block *, struct shrink_control *);
362:	void set_nlink(struct inode *, unsigned int);
2412:	struct timespec64 timestamp_truncate(struct timespec64, struct inode *);
1920:	void touch_atime(const struct path *);
1081:	void unlock_new_inode(struct inode *);
1132:	void unlock_two_nondirectories(struct inode *, struct inode *);
1988:	static int __file_remove_privs(struct file *, unsigned int);
2049:	static int __file_update_time(struct file *, struct timespec64 *, int);
454:	static void __inode_add_lru(struct inode *, bool);
302:	static void destroy_inode(struct inode *);
643:	static void evict(struct inode *);
2107:	static int file_modified_flags(struct file *, int);
904:	static struct inode *find_inode(struct super_block *, struct hlist_head *, int (*)(struct inode *, void *), void *);
937:	static struct inode *find_inode_fast(struct super_block *, struct hlist_head *, unsigned long);
244:	static void i_callback(struct callback_head *);
135:	static int init_fs_inode_sysctls(void);
430:	static void init_once(void *);
815:	static enum lru_status inode_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
143:	static int no_open(struct inode *, struct file *);
109:	static int proc_nr_inodes(struct ctl_table *, int, void *, size_t *, loff_t *);
2202:	static int set_ihash_entries(char *);

File fs/ioctl.c:
856:	long __arm64_sys_ioctl(const struct pt_regs *);
543:	int copy_fsxattr_to_user(const struct fileattr *, struct fsxattr *);
115:	int fiemap_fill_next_extent(struct fiemap_extent_info *, u64, u64, u64, u32);
167:	int fiemap_prep(struct inode *, struct fiemap_extent_info *, u64, u64 *, u32);
494:	void fileattr_fill_flags(struct fileattr *, u32);
464:	void fileattr_fill_xflags(struct fileattr *, u32);
525:	int vfs_fileattr_get(struct dentry *, struct fileattr *);
668:	int vfs_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
44:	long vfs_ioctl(struct file *, unsigned int, unsigned long);
269:	static int ioctl_preallocate(struct file *, int, void *);

File fs/iomap/buffered-io.c:
836:	ssize_t iomap_file_buffered_write(struct kiocb *, struct iov_iter *, const struct iomap_ops *);
1047:	int iomap_file_buffered_write_punch_delalloc(struct inode *, struct iomap *, loff_t, loff_t, ssize_t, int (*)(struct inode *, loff_t, loff_t));
1127:	int iomap_file_unshare(struct inode *, loff_t, loff_t, const struct iomap_ops *);
1340:	void iomap_finish_ioends(struct iomap_ioend *, int);
478:	void iomap_invalidate_folio(struct folio *, size_t, size_t);
1394:	void iomap_ioend_try_merge(struct iomap_ioend *, struct list_head *);
437:	bool iomap_is_partially_uptodate(struct folio *, size_t, size_t);
1240:	vm_fault_t iomap_page_mkwrite(struct vm_fault *, const struct iomap_ops *);
328:	int iomap_read_folio(struct folio *, const struct iomap_ops *);
405:	void iomap_readahead(struct readahead_control *, const struct iomap_ops *);
460:	bool iomap_release_folio(struct folio *, gfp_t);
1425:	void iomap_sort_ioends(struct list_head *);
1207:	int iomap_truncate_page(struct inode *, loff_t, bool *, const struct iomap_ops *);
1785:	int iomap_writepages(struct address_space *, struct writeback_control *, struct iomap_writepage_ctx *, const struct iomap_writeback_ops *);
1189:	int iomap_zero_range(struct inode *, loff_t, loff_t, bool *, const struct iomap_ops *);
90:	static void iomap_adjust_read_range(struct inode *, struct folio *, loff_t *, loff_t, size_t *, size_t *);
1689:	static int iomap_do_writepage(struct page *, struct writeback_control *, void *);
1291:	static u32 iomap_finish_ioend(struct iomap_ioend *, int);
1799:	static int iomap_init(void);
1411:	static int iomap_ioend_compare(void *, const struct list_head *, const struct list_head *);
47:	static struct iomap_page *iomap_page_create(struct inode *, struct folio *, unsigned int);
72:	static void iomap_page_release(struct folio *);
187:	static void iomap_read_end_io(struct bio *);
213:	static int iomap_read_inline_data(const struct iomap_iter *, struct folio *);
256:	static loff_t iomap_readpage_iter(const struct iomap_iter *, struct iomap_readpage_ctx *, loff_t);
162:	static void iomap_set_range_uptodate(struct folio *, struct iomap_page *, size_t, size_t);
587:	static int iomap_write_begin(struct iomap_iter *, loff_t, size_t, struct folio **);
712:	static size_t iomap_write_end(struct iomap_iter *, loff_t, size_t, size_t, struct folio *);
1431:	static void iomap_writepage_end_bio(struct bio *);

File fs/iomap/direct-io.c:
483:	struct iomap_dio *__iomap_dio_rw(struct kiocb *, struct iov_iter *, const struct iomap_ops *, const struct iomap_dio_ops *, unsigned int, void *, size_t);
157:	void iomap_dio_bio_end_io(struct bio *);
80:	ssize_t iomap_dio_complete(struct iomap_dio *);
683:	ssize_t iomap_dio_rw(struct kiocb *, struct iov_iter *, const struct iomap_ops *, const struct iomap_dio_ops *, unsigned int, void *, size_t);
238:	static loff_t iomap_dio_bio_iter(const struct iomap_iter *, struct iomap_dio *);
139:	static void iomap_dio_complete_work(struct work_struct *);
191:	static void iomap_dio_zero(const struct iomap_iter *, struct iomap_dio *, loff_t, unsigned int);

File fs/iomap/fiemap.c:
98:	sector_t iomap_bmap(struct address_space *, sector_t, const struct iomap_ops *);
62:	int iomap_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64, const struct iomap_ops *);

File fs/iomap/iter.c:
74:	int iomap_iter(struct iomap_iter *, const struct iomap_ops *);

File fs/iomap/seek.c:
80:	loff_t iomap_seek_data(struct inode *, loff_t, const struct iomap_ops *);
34:	loff_t iomap_seek_hole(struct inode *, loff_t, const struct iomap_ops *);

File fs/iomap/swapfile.c:
142:	int iomap_swapfile_activate(struct swap_info_struct *, struct file *, sector_t *, const struct iomap_ops *);

File fs/jbd2/checkpoint.c:
590:	void __jbd2_journal_clean_checkpoint_list(journal_t *, bool);
780:	void __jbd2_journal_drop_transaction(journal_t *, transaction_t *);
747:	void __jbd2_journal_insert_checkpoint(struct journal_head *, transaction_t *);
674:	int __jbd2_journal_remove_checkpoint(struct journal_head *);
100:	void __jbd2_log_wait_for_space(journal_t *);
382:	int jbd2_cleanup_journal_tail(journal_t *);
638:	void jbd2_journal_destroy_checkpoint(journal_t *);
505:	unsigned long jbd2_journal_shrink_checkpoint_list(journal_t *, unsigned long *);
198:	int jbd2_log_do_checkpoint(journal_t *);

File fs/jbd2/commit.c:
380:	void jbd2_journal_commit_transaction(journal_t *);
269:	int jbd2_journal_finish_inode_data_buffers(struct jbd2_inode *);
190:	int jbd2_journal_submit_inode_data_buffers(struct jbd2_inode *);
210:	int jbd2_submit_inode_data(journal_t *, struct jbd2_inode *);
221:	int jbd2_wait_inode_data(journal_t *, struct jbd2_inode *);
32:	static void journal_end_buffer_io_sync(struct buffer_head *, int);
118:	static int journal_submit_commit_record(journal_t *, transaction_t *, struct buffer_head **, __u32);

File fs/jbd2/journal.c:
1099:	int __jbd2_update_log_tail(journal_t *, tid_t, unsigned long);
2799:	void *jbd2_alloc(size_t, gfp_t);
825:	int jbd2_complete_transaction(journal_t *, tid_t);
1035:	void jbd2_descriptor_block_csum_set(journal_t *, struct buffer_head *);
727:	int jbd2_fc_begin_commit(journal_t *, tid_t);
783:	int jbd2_fc_end_commit(journal_t *);
789:	int jbd2_fc_end_commit_fallback(journal_t *);
870:	int jbd2_fc_get_buf(journal_t *, struct buffer_head **);
942:	int jbd2_fc_release_bufs(journal_t *);
912:	int jbd2_fc_wait_bufs(journal_t *, int);
2817:	void jbd2_free(void *, size_t);
2588:	void jbd2_journal_abort(journal_t *, int);
2689:	void jbd2_journal_ack_err(journal_t *);
2926:	struct journal_head *jbd2_journal_add_journal_head(struct buffer_head *);
2697:	int jbd2_journal_blocks_per_page(struct inode *);
968:	int jbd2_journal_bmap(journal_t *, unsigned long, unsigned long long *);
2252:	int jbd2_journal_check_available_features(journal_t *, unsigned long, unsigned long, unsigned long);
2217:	int jbd2_journal_check_used_features(journal_t *, unsigned long, unsigned long, unsigned long);
2669:	int jbd2_journal_clear_err(journal_t *);
2404:	void jbd2_journal_clear_features(journal_t *, unsigned long, unsigned long, unsigned long);
2123:	int jbd2_journal_destroy(journal_t *);
2649:	int jbd2_journal_errno(journal_t *);
2436:	int jbd2_journal_flush(journal_t *, unsigned int);
590:	int jbd2_journal_force_commit(journal_t *);
575:	int jbd2_journal_force_commit_nested(journal_t *);
1006:	struct buffer_head *jbd2_journal_get_descriptor_buffer(transaction_t *, int);
1060:	int jbd2_journal_get_log_tail(journal_t *, tid_t *, unsigned long *);
2967:	struct journal_head *jbd2_journal_grab_journal_head(struct buffer_head *);
1462:	journal_t *jbd2_journal_init_dev(struct block_device *, struct block_device *, unsigned long long, int, int);
1488:	journal_t *jbd2_journal_init_inode(struct inode *);
3037:	void jbd2_journal_init_jbd_inode(struct jbd2_inode *, struct inode *);
2053:	int jbd2_journal_load(journal_t *);
853:	int jbd2_journal_next_log_block(journal_t *, unsigned long long *);
3016:	void jbd2_journal_put_journal_head(struct journal_head *);
3053:	void jbd2_journal_release_jbd_inode(journal_t *, struct jbd2_inode *);
2314:	int jbd2_journal_set_features(journal_t *, unsigned long, unsigned long, unsigned long);
606:	int jbd2_journal_start_commit(journal_t *, tid_t *);
1862:	void jbd2_journal_update_sb_errno(journal_t *);
1672:	int jbd2_journal_update_sb_log_tail(journal_t *, tid_t, unsigned long, blk_opf_t);
2519:	int jbd2_journal_wipe(journal_t *, int);
335:	int jbd2_journal_write_metadata_buffer(transaction_t *, struct journal_head *, struct buffer_head **, sector_t);
518:	int jbd2_log_start_commit(journal_t *, tid_t);
678:	int jbd2_log_wait_commit(journal_t *, tid_t);
639:	int jbd2_trans_will_send_data_barrier(journal_t *, tid_t);
802:	int jbd2_transaction_committed(journal_t *, tid_t);
1142:	void jbd2_update_log_tail(journal_t *, tid_t, unsigned long);
2705:	size_t journal_tag_bytes(journal_t *);
535:	static int __jbd2_journal_force_commit(journal_t *);
144:	static void commit_timeout(struct timer_list *);
3160:	static void jbd2_journal_destroy_caches(void);
3115:	static int jbd2_journal_init_handle_cache(void);
3104:	static int jbd2_journal_init_inode_cache(void);
2833:	static int jbd2_journal_init_journal_head_cache(void);
1325:	static unsigned long jbd2_journal_shrink_count(struct shrinker *, struct shrink_control *);
1299:	static unsigned long jbd2_journal_shrink_scan(struct shrinker *, struct shrink_control *);
1716:	static void jbd2_mark_journal_empty(journal_t *, blk_opf_t);
3089:	static void jbd2_remove_jbd_stats_proc_entry(void);
1162:	static void *jbd2_seq_info_next(struct seq_file *, void *, loff_t *);
1216:	static int jbd2_seq_info_open(struct inode *, struct file *);
1248:	static int jbd2_seq_info_release(struct inode *, struct file *);
1168:	static int jbd2_seq_info_show(struct seq_file *, void *);
1157:	static void *jbd2_seq_info_start(struct seq_file *, loff_t *);
1205:	static void jbd2_seq_info_stop(struct seq_file *, void *);
1611:	static int jbd2_write_superblock(journal_t *, blk_opf_t);
3186:	static void journal_exit(void);
1897:	static int journal_get_superblock(journal_t *);
3171:	static int journal_init(void);
3142:	static int journal_init_caches(void);
1346:	static journal_t *journal_init_common(struct block_device *, struct block_device *, unsigned long long, int, int);
169:	static int kjournald2(void *);

File fs/jbd2/recovery.c:
289:	int jbd2_journal_recover(journal_t *);
354:	int jbd2_journal_skip_recovery(journal_t *);
395:	static int calc_chksums(journal_t *, struct buffer_head *, unsigned long *, __u32 *);
461:	static int do_one_pass(journal_t *, struct recovery_info *, enum passtype);
423:	static int jbd2_commit_block_csum_verify(journal_t *, void *);
128:	static int jread(struct buffer_head **, journal_t *, unsigned int);

File fs/jbd2/revoke.c:
484:	void jbd2_clear_buffer_revoked_flags(journal_t *);
423:	int jbd2_journal_cancel_revoke(handle_t *, struct journal_head *);
726:	void jbd2_journal_clear_revoke(journal_t *);
290:	void jbd2_journal_destroy_revoke(journal_t *);
181:	void jbd2_journal_destroy_revoke_record_cache(void);
187:	void jbd2_journal_destroy_revoke_table_cache(void);
263:	int jbd2_journal_init_revoke(journal_t *, int);
193:	int jbd2_journal_init_revoke_record_cache(void);
206:	int jbd2_journal_init_revoke_table_cache(void);
326:	int jbd2_journal_revoke(handle_t *, unsigned long long, struct buffer_head *);
683:	int jbd2_journal_set_revoke(journal_t *, unsigned long long, tid_t);
513:	void jbd2_journal_switch_revoke_table(journal_t *);
707:	int jbd2_journal_test_revoke(journal_t *, unsigned long long, tid_t);
530:	void jbd2_journal_write_revoke_records(transaction_t *, struct list_head *);
218:	static struct jbd2_revoke_table_s *jbd2_journal_init_revoke_table(int);

File fs/jbd2/transaction.c:
2504:	void __jbd2_journal_file_buffer(struct journal_head *, transaction_t *, int);
2593:	bool __jbd2_journal_refile_buffer(struct journal_head *);
778:	int jbd2__journal_restart(handle_t *, int, int, gfp_t);
485:	handle_t *jbd2__journal_start(journal_t *, int, int, int, gfp_t, unsigned int, unsigned int);
1450:	void jbd2_buffer_abort_trigger(struct journal_head *, struct jbd2_buffer_trigger_type *);
1439:	void jbd2_buffer_frozen_trigger(struct journal_head *, void *, struct jbd2_buffer_trigger_type *);
2755:	int jbd2_journal_begin_ordered_truncate(journal_t *, struct jbd2_inode *, loff_t);
52:	void jbd2_journal_destroy_transaction_cache(void);
1482:	int jbd2_journal_dirty_metadata(handle_t *, struct buffer_head *);
660:	int jbd2_journal_extend(handle_t *, int, int);
2570:	void jbd2_journal_file_buffer(struct journal_head *, transaction_t *, int);
1654:	int jbd2_journal_forget(handle_t *, struct buffer_head *);
573:	void jbd2_journal_free_reserved(handle_t *);
58:	void jbd2_journal_free_transaction(transaction_t *);
1267:	int jbd2_journal_get_create_access(handle_t *, struct buffer_head *);
1366:	int jbd2_journal_get_undo_access(handle_t *, struct buffer_head *);
1227:	int jbd2_journal_get_write_access(handle_t *, struct buffer_head *);
37:	int jbd2_journal_init_transaction_cache(void);
2728:	int jbd2_journal_inode_ranged_wait(handle_t *, struct jbd2_inode *, loff_t, loff_t);
2720:	int jbd2_journal_inode_ranged_write(handle_t *, struct jbd2_inode *, loff_t, loff_t);
2450:	int jbd2_journal_invalidate_folio(journal_t *, struct folio *, size_t, size_t);
878:	void jbd2_journal_lock_updates(journal_t *);
2649:	void jbd2_journal_refile_buffer(journal_t *, struct journal_head *);
825:	int jbd2_journal_restart(handle_t *, int);
1428:	void jbd2_journal_set_triggers(struct buffer_head *, struct jbd2_buffer_trigger_type *);
557:	handle_t *jbd2_journal_start(journal_t *, int);
599:	int jbd2_journal_start_reserved(handle_t *, unsigned int, unsigned int);
1822:	int jbd2_journal_stop(handle_t *);
2158:	bool jbd2_journal_try_to_free_buffers(journal_t *, struct folio *);
2080:	void jbd2_journal_unfile_buffer(journal_t *, struct journal_head *);
915:	void jbd2_journal_unlock_updates(journal_t *);
835:	void jbd2_journal_wait_updates(journal_t *);
2205:	static int __dispose_buffer(struct journal_head *, transaction_t *);
2023:	static void __jbd2_journal_temp_unlink_buffer(struct journal_head *);
970:	static int do_get_write_access(handle_t *, struct journal_head *, int);
2665:	static int jbd2_journal_file_inode(handle_t *, struct jbd2_inode *, unsigned long, loff_t, loff_t);
331:	static int start_this_handle(journal_t *, handle_t *, gfp_t);
716:	static void stop_this_handle(handle_t *);

File fs/kernel_read_file.c:
35:	ssize_t kernel_read_file(struct file *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
174:	ssize_t kernel_read_file_from_fd(int, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
127:	ssize_t kernel_read_file_from_path(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
147:	ssize_t kernel_read_file_from_path_initns(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);

File fs/kernfs/dir.c:
1369:	void kernfs_activate(struct kernfs_node *);
746:	int kernfs_add_one(struct kernfs_node *);
1514:	void kernfs_break_active_protection(struct kernfs_node *);
1023:	struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, void *, const void *);
1057:	struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *, const char *);
934:	struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *, unsigned int, void *);
989:	void kernfs_destroy_root(struct kernfs_root *);
696:	struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *, u64);
885:	struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *, const char *, const void *);
522:	void kernfs_get(struct kernfs_node *);
433:	struct kernfs_node *kernfs_get_active(struct kernfs_node *);
295:	struct kernfs_node *kernfs_get_parent(struct kernfs_node *);
197:	int kernfs_name(struct kernfs_node *, char *, size_t);
669:	struct kernfs_node *kernfs_new_node(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
593:	struct kernfs_node *kernfs_node_from_dentry(struct dentry *);
224:	int kernfs_path_from_node(struct kernfs_node *, struct kernfs_node *, char *, size_t);
537:	void kernfs_put(struct kernfs_node *);
453:	void kernfs_put_active(struct kernfs_node *);
1486:	void kernfs_remove(struct kernfs_node *);
1644:	int kernfs_remove_by_name_ns(struct kernfs_node *, const char *, const void *);
1582:	bool kernfs_remove_self(struct kernfs_node *);
1683:	int kernfs_rename_ns(struct kernfs_node *, struct kernfs_node *, const char *, const void *);
1006:	struct kernfs_node *kernfs_root_to_node(struct kernfs_root *);
1395:	void kernfs_show(struct kernfs_node *, bool);
1538:	void kernfs_unbreak_active_protection(struct kernfs_node *);
911:	struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *, const char *, const void *);
243:	void pr_cont_kernfs_name(struct kernfs_node *);
261:	void pr_cont_kernfs_path(struct kernfs_node *);
600:	static struct kernfs_node *__kernfs_new_node(struct kernfs_root *, struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
1418:	static void __kernfs_remove(struct kernfs_node *);
1760:	static int kernfs_dir_fop_release(struct inode *, struct file *);
1766:	static struct kernfs_node *kernfs_dir_pos(const void *, struct kernfs_node *, loff_t, struct kernfs_node *);
1083:	static int kernfs_dop_revalidate(struct dentry *, unsigned int);
477:	static void kernfs_drain(struct kernfs_node *);
810:	static struct kernfs_node *kernfs_find_ns(struct kernfs_node *, const unsigned char *, const void *);
1816:	static int kernfs_fop_readdir(struct file *, struct dir_context *);
1160:	static struct dentry *kernfs_iop_lookup(struct inode *, struct dentry *, unsigned int);
1203:	static int kernfs_iop_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
1241:	static int kernfs_iop_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1223:	static int kernfs_iop_rmdir(struct inode *, struct dentry *);
364:	static int kernfs_link_sibling(struct kernfs_node *);

File fs/kernfs/file.c:
1033:	struct kernfs_node *__kernfs_create_file(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, loff_t, const struct kernfs_ops *, void *, const void *, struct lock_class_key *);
832:	void kernfs_drain_open_files(struct kernfs_node *);
876:	__poll_t kernfs_generic_poll(struct kernfs_open_file *, poll_table *);
975:	void kernfs_notify(struct kernfs_node *);
813:	bool kernfs_should_drain_open_files(struct kernfs_node *);
488:	static int kernfs_fop_mmap(struct file *, struct vm_area_struct *);
639:	static int kernfs_fop_open(struct inode *, struct file *);
888:	static __poll_t kernfs_fop_poll(struct file *, poll_table *);
276:	static ssize_t kernfs_fop_read_iter(struct kiocb *, struct iov_iter *);
792:	static int kernfs_fop_release(struct inode *, struct file *);
293:	static ssize_t kernfs_fop_write_iter(struct kiocb *, struct iov_iter *);
906:	static void kernfs_notify_workfn(struct work_struct *);
169:	static void *kernfs_seq_next(struct seq_file *, void *, loff_t *);
199:	static int kernfs_seq_show(struct seq_file *, void *);
145:	static void *kernfs_seq_start(struct seq_file *, loff_t *);
190:	static void kernfs_seq_stop(struct seq_file *, void *);
605:	static void kernfs_unlink_open_file(struct kernfs_node *, struct kernfs_open_file *, bool);
411:	static int kernfs_vma_access(struct vm_area_struct *, unsigned long, void *, int, int);
369:	static vm_fault_t kernfs_vma_fault(struct vm_fault *);
454:	static struct mempolicy *kernfs_vma_get_policy(struct vm_area_struct *, unsigned long);
352:	static void kernfs_vma_open(struct vm_area_struct *);
389:	static vm_fault_t kernfs_vma_page_mkwrite(struct vm_fault *);
433:	static int kernfs_vma_set_policy(struct vm_area_struct *, struct mempolicy *);

File fs/kernfs/inode.c:
68:	int __kernfs_setattr(struct kernfs_node *, const struct iattr *);
266:	void kernfs_evict_inode(struct inode *);
248:	struct inode *kernfs_get_inode(struct super_block *, struct kernfs_node *);
184:	int kernfs_iop_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
139:	ssize_t kernfs_iop_listxattr(struct dentry *, char *, size_t);
275:	int kernfs_iop_permission(struct user_namespace *, struct inode *, int);
110:	int kernfs_iop_setattr(struct user_namespace *, struct dentry *, struct iattr *);
99:	int kernfs_setattr(struct kernfs_node *, const struct iattr *);
296:	int kernfs_xattr_get(struct kernfs_node *, const char *, void *, size_t);
306:	int kernfs_xattr_set(struct kernfs_node *, const char *, const void *, size_t, int);
27:	static struct kernfs_iattrs *__kernfs_iattrs(struct kernfs_node *, int);
393:	static int kernfs_vfs_user_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
316:	static int kernfs_vfs_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
326:	static int kernfs_vfs_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);

File fs/kernfs/mount.c:
363:	void kernfs_free_fs_context(struct fs_context *);
321:	int kernfs_get_tree(struct fs_context *);
411:	void kernfs_init(void);
378:	void kernfs_kill_sb(struct super_block *);
198:	struct dentry *kernfs_node_dentry(struct kernfs_node *, struct super_block *);
159:	struct kernfs_root *kernfs_root_from_sb(struct super_block *);
303:	const void *kernfs_super_ns(struct super_block *);
72:	static struct dentry *__kernfs_fh_to_dentry(struct super_block *, struct fid *, int, int, bool);
57:	static int kernfs_encode_fh(struct inode *, __u32 *, int *, struct inode *);
124:	static struct dentry *kernfs_fh_to_dentry(struct super_block *, struct fid *, int, int);
131:	static struct dentry *kernfs_fh_to_parent(struct super_block *, struct fid *, int, int);
138:	static struct dentry *kernfs_get_parent_dentry(struct dentry *);
403:	static void kernfs_lock_init(void);
289:	static int kernfs_set_super(struct super_block *, struct fs_context *);
25:	static int kernfs_sop_show_options(struct seq_file *, struct dentry *);
35:	static int kernfs_sop_show_path(struct seq_file *, struct dentry *);
281:	static int kernfs_test_super(struct super_block *, struct fs_context *);

File fs/kernfs/symlink.c:
25:	struct kernfs_node *kernfs_create_link(struct kernfs_node *, const char *, struct kernfs_node *);
126:	static const char *kernfs_iop_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/libfs.c:
1125:	int __generic_file_fsync(struct file *, loff_t, loff_t, int);
1237:	struct inode *alloc_anon_inode(struct super_block *);
55:	int always_delete_dentry(const struct dentry *);
89:	int dcache_dir_close(struct inode *, struct file *);
138:	loff_t dcache_dir_lseek(struct file *, loff_t, int);
81:	int dcache_dir_open(struct inode *, struct file *);
189:	int dcache_readdir(struct file *, struct dir_context *);
1189:	int generic_check_addressable(unsigned int, u64);
1060:	struct dentry *generic_fh_to_dentry(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1093:	struct dentry *generic_fh_to_parent(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1167:	int generic_file_fsync(struct file *, loff_t, loff_t, int);
226:	ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
1512:	void generic_set_encrypted_ci_d_ops(struct dentry *);
370:	struct pseudo_fs_context *init_pseudo(struct fs_context *, unsigned long);
1558:	bool inode_maybe_inc_iversion(struct inode *, bool);
1382:	bool is_empty_dir_inode(struct inode *);
1231:	void kfree_link(void *);
1366:	void make_empty_dir_inode(struct inode *);
827:	ssize_t memory_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
1218:	ssize_t noop_direct_IO(struct kiocb *, struct iov_iter *);
1212:	int noop_fsync(struct file *, loff_t, loff_t, int);
930:	int simple_attr_open(struct inode *, struct file *, int (*)(void *, u64 *), int (*)(void *, u64), const char *);
960:	ssize_t simple_attr_read(struct file *, char *, size_t, loff_t *);
952:	int simple_attr_release(struct inode *, struct file *);
1034:	ssize_t simple_attr_write(struct file *, const char *, size_t, loff_t *);
1041:	ssize_t simple_attr_write_signed(struct file *, const char *, size_t, loff_t *);
408:	int simple_empty(struct dentry *);
644:	int simple_fill_super(struct super_block *, unsigned long, const struct tree_descr *);
1298:	const char *simple_get_link(struct dentry *, struct inode *, struct delayed_call *);
31:	int simple_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
395:	int simple_link(struct dentry *, struct inode *, struct dentry *);
70:	struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int);
1277:	int simple_nosetlease(struct file *, long, struct file_lock **, void **);
387:	int simple_open(struct inode *, struct file *);
710:	int simple_pin_fs(struct file_system_type *, struct vfsmount **, int *);
757:	ssize_t simple_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
269:	void simple_recursive_removal(struct dentry *, void (*)(struct dentry *));
731:	void simple_release_fs(struct vfsmount **, int *);
476:	int simple_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
452:	int simple_rename_exchange(struct inode *, struct dentry *, struct inode *, struct dentry *);
440:	int simple_rmdir(struct inode *, struct dentry *);
525:	int simple_setattr(struct user_namespace *, struct dentry *, struct iattr *);
42:	int simple_statfs(struct dentry *, struct kstatfs *);
867:	char *simple_transaction_get(struct file *, const char *, size_t);
899:	ssize_t simple_transaction_read(struct file *, char *, size_t, loff_t *);
909:	int simple_transaction_release(struct inode *, struct file *);
852:	void simple_transaction_set(struct file *, size_t);
429:	int simple_unlink(struct inode *, struct dentry *);
552:	int simple_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
792:	ssize_t simple_write_to_buffer(void *, size_t, loff_t *, const void *, size_t);
1318:	static int empty_dir_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1333:	static ssize_t empty_dir_listxattr(struct dentry *, char *, size_t);
1346:	static loff_t empty_dir_llseek(struct file *, loff_t, int);
1313:	static struct dentry *empty_dir_lookup(struct inode *, struct dentry *, unsigned int);
1352:	static int empty_dir_readdir(struct file *, struct dir_context *);
1327:	static int empty_dir_setattr(struct user_namespace *, struct dentry *, struct iattr *);
320:	static int pseudo_fs_fill_super(struct super_block *, struct fs_context *);
356:	static void pseudo_fs_free(struct fs_context *);
351:	static int pseudo_fs_get_tree(struct fs_context *);
103:	static struct dentry *scan_positives(struct dentry *, struct list_head *, loff_t, struct dentry *);
998:	static ssize_t simple_attr_write_xsigned(struct file *, const char *, size_t, loff_t *, bool);
543:	static int simple_read_folio(struct file *, struct folio *);
598:	static int simple_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);

File fs/lockd/clnt4xdr.c:
325:	static void encode_nlm4_lock(struct xdr_stream *, const struct nlm_lock *);
532:	static int nlm4_xdr_dec_res(struct rpc_rqst *, struct xdr_stream *, void *);
511:	static int nlm4_xdr_dec_testres(struct rpc_rqst *, struct xdr_stream *, void *);
404:	static void nlm4_xdr_enc_cancargs(struct rpc_rqst *, struct xdr_stream *, const void *);
381:	static void nlm4_xdr_enc_lockargs(struct rpc_rqst *, struct xdr_stream *, const void *);
440:	static void nlm4_xdr_enc_res(struct rpc_rqst *, struct xdr_stream *, const void *);
359:	static void nlm4_xdr_enc_testargs(struct rpc_rqst *, struct xdr_stream *, const void *);
463:	static void nlm4_xdr_enc_testres(struct rpc_rqst *, struct xdr_stream *, const void *);
423:	static void nlm4_xdr_enc_unlockargs(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/lockd/clntlock.c:
131:	int nlmclnt_block(struct nlm_wait *, struct nlm_rqst *, long);
88:	void nlmclnt_done(struct nlm_host *);
118:	void nlmclnt_finish_block(struct nlm_wait *);
164:	__be32 nlmclnt_grant(const struct sockaddr *, const struct nlm_lock *);
54:	struct nlm_host *nlmclnt_init(const struct nlmclnt_initdata *);
100:	struct nlm_wait *nlmclnt_prepare_block(struct nlm_host *, struct file_lock *);
214:	void nlmclnt_recovery(struct nlm_host *);
229:	static int reclaimer(void *);

File fs/lockd/clntproc.c:
202:	struct nlm_rqst *nlm_alloc_call(struct nlm_host *);
381:	int nlm_async_call(struct nlm_rqst *, u32, const struct rpc_call_ops *);
390:	int nlm_async_reply(struct nlm_rqst *, u32, const struct rpc_call_ops *);
42:	void nlmclnt_next_cookie(struct nlm_cookie *);
158:	int nlmclnt_proc(struct nlm_host *, int, struct file_lock *, void *);
620:	int nlmclnt_reclaim(struct nlm_host *, struct file_lock *, struct nlm_rqst *);
223:	void nlmclnt_release_call(struct nlm_rqst *);
261:	static int nlmclnt_call(const struct cred *, struct nlm_rqst *, u32);
783:	static void nlmclnt_cancel_callback(struct rpc_task *, void *);
457:	static void nlmclnt_locks_copy_lock(struct file_lock *, struct file_lock *);
466:	static void nlmclnt_locks_release_private(struct file_lock *);
236:	static void nlmclnt_rpc_release(void *);
715:	static void nlmclnt_unlock_callback(struct rpc_task *, void *);
702:	static void nlmclnt_unlock_prepare(struct rpc_task *, void *);

File fs/lockd/clntxdr.c:
319:	static void encode_nlm_lock(struct xdr_stream *, const struct nlm_lock *);
530:	static int nlm_xdr_dec_res(struct rpc_rqst *, struct xdr_stream *, void *);
509:	static int nlm_xdr_dec_testres(struct rpc_rqst *, struct xdr_stream *, void *);
397:	static void nlm_xdr_enc_cancargs(struct rpc_rqst *, struct xdr_stream *, const void *);
374:	static void nlm_xdr_enc_lockargs(struct rpc_rqst *, struct xdr_stream *, const void *);
433:	static void nlm_xdr_enc_res(struct rpc_rqst *, struct xdr_stream *, const void *);
352:	static void nlm_xdr_enc_testargs(struct rpc_rqst *, struct xdr_stream *, const void *);
463:	static void nlm_xdr_enc_testres(struct rpc_rqst *, struct xdr_stream *, const void *);
416:	static void nlm_xdr_enc_unlockargs(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/lockd/host.c:
428:	struct rpc_clnt *nlm_bind_host(struct nlm_host *);
515:	struct nlm_host *nlm_get_host(struct nlm_host *);
557:	void nlm_host_rebooted(const struct net *, const struct nlm_reboot *);
501:	void nlm_rebind_host(struct nlm_host *);
645:	void nlm_shutdown_hosts(void);
614:	void nlm_shutdown_hosts_net(struct net *);
216:	struct nlm_host *nlmclnt_lookup_host(const struct sockaddr *, const size_t, const unsigned short, const u32, const char *, int, struct net *, const struct cred *);
291:	void nlmclnt_release_host(struct nlm_host *);
328:	struct nlm_host *nlmsvc_lookup_host(const struct svc_rqst *, const char *, const size_t);
413:	void nlmsvc_release_host(struct nlm_host *);
525:	static struct nlm_host *next_host_state(struct hlist_head *, struct nsm_handle *, const struct nlm_reboot *);
111:	static struct nlm_host *nlm_alloc_host(struct nlm_lookup_host_info *, struct nsm_handle *);
178:	static void nlm_destroy_host_locked(struct nlm_host *);
657:	static void nlm_gc_hosts(struct net *);

File fs/lockd/mon.c:
314:	struct nsm_handle *nsm_get_handle(const struct net *, const struct sockaddr *, const size_t, const char *, const size_t);
148:	int nsm_monitor(const struct nlm_host *);
376:	struct nsm_handle *nsm_reboot_lookup(const struct net *, const struct nlm_reboot *);
406:	void nsm_release(struct nsm_handle *);
189:	void nsm_unmonitor(const struct nlm_host *);
91:	static int nsm_mon_unmon(struct nsm_handle *, u32, struct nsm_res *, const struct nlm_host *);
512:	static int nsm_xdr_dec_stat(struct rpc_rqst *, struct xdr_stream *, void *);
494:	static int nsm_xdr_dec_stat_res(struct rpc_rqst *, struct xdr_stream *, void *);
481:	static void nsm_xdr_enc_mon(struct rpc_rqst *, struct xdr_stream *, const void *);
488:	static void nsm_xdr_enc_unmon(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/lockd/procfs.c:
71:	int lockd_create_procfs(void);
88:	void lockd_remove_procfs(void);
49:	static ssize_t nlm_end_grace_read(struct file *, char *, size_t, loff_t *);
21:	static ssize_t nlm_end_grace_write(struct file *, const char *, size_t, loff_t *);

File fs/lockd/svc.c:
444:	void lockd_down(struct net *);
418:	int lockd_up(struct net *, const struct cred *);
205:	static int create_lockd_family(struct svc_serv *, struct net *, const int, const struct cred *);
671:	static void exit_nlm(void);
95:	static void grace_ender(struct work_struct *);
641:	static int init_nlm(void);
131:	static int lockd(void *);
560:	static int lockd_authenticate(struct svc_rqst *);
614:	static void lockd_exit_net(struct net *);
325:	static int lockd_inet6addr_event(struct notifier_block *, unsigned long, void *);
299:	static int lockd_inetaddr_event(struct notifier_block *, unsigned long, void *);
603:	static int lockd_init_net(struct net *);
694:	static int nlmsvc_dispatch(struct svc_rqst *, __be32 *);
583:	static int param_set_grace_period(const char *, const struct kernel_param *);
582:	static int param_set_port(const char *, const struct kernel_param *);
585:	static int param_set_timeout(const char *, const struct kernel_param *);

File fs/lockd/svc4proc.c:
179:	static __be32 __nlm4svc_proc_cancel(struct svc_rqst *, struct nlm_res *);
130:	static __be32 __nlm4svc_proc_lock(struct svc_rqst *, struct nlm_res *);
94:	static __be32 __nlm4svc_proc_test(struct svc_rqst *, struct nlm_res *);
219:	static __be32 __nlm4svc_proc_unlock(struct svc_rqst *, struct nlm_res *);
300:	static __be32 nlm4svc_callback(struct svc_rqst *, u32, __be32 (*)(struct svc_rqst *, struct nlm_res *));
281:	static void nlm4svc_callback_exit(struct rpc_task *, void *);
285:	static void nlm4svc_callback_release(void *);
210:	static __be32 nlm4svc_proc_cancel(struct svc_rqst *);
343:	static __be32 nlm4svc_proc_cancel_msg(struct svc_rqst *);
449:	static __be32 nlm4svc_proc_free_all(struct svc_rqst *);
273:	static __be32 nlm4svc_proc_granted(struct svc_rqst *);
355:	static __be32 nlm4svc_proc_granted_msg(struct svc_rqst *);
488:	static __be32 nlm4svc_proc_granted_res(struct svc_rqst *);
173:	static __be32 nlm4svc_proc_lock(struct svc_rqst *);
337:	static __be32 nlm4svc_proc_lock_msg(struct svc_rqst *);
435:	static __be32 nlm4svc_proc_nm_lock(struct svc_rqst *);
84:	static __be32 nlm4svc_proc_null(struct svc_rqst *);
365:	static __be32 nlm4svc_proc_share(struct svc_rqst *);
467:	static __be32 nlm4svc_proc_sm_notify(struct svc_rqst *);
124:	static __be32 nlm4svc_proc_test(struct svc_rqst *);
331:	static __be32 nlm4svc_proc_test_msg(struct svc_rqst *);
250:	static __be32 nlm4svc_proc_unlock(struct svc_rqst *);
349:	static __be32 nlm4svc_proc_unlock_msg(struct svc_rqst *);
400:	static __be32 nlm4svc_proc_unshare(struct svc_rqst *);
502:	static __be32 nlm4svc_proc_unused(struct svc_rqst *);
23:	static __be32 nlm4svc_retrieve_args(struct svc_rqst *, struct nlm_args *, struct nlm_host **, struct nlm_file **);

File fs/lockd/svclock.c:
682:	__be32 nlmsvc_cancel_blocked(struct net *, struct nlm_file *, struct nlm_lock *);
954:	void nlmsvc_grant_reply(struct nlm_cookie *, __be32);
469:	__be32 nlmsvc_lock(struct svc_rqst *, struct nlm_file *, struct nlm_host *, struct nlm_lock *, int, struct nlm_cookie *, int);
399:	void nlmsvc_locks_init_private(struct file_lock *, struct nlm_host *, pid_t);
343:	void nlmsvc_put_lockowner(struct nlm_lockowner *);
393:	void nlmsvc_release_lockowner(struct nlm_lock *);
999:	unsigned long nlmsvc_retry_blocked(void);
586:	__be32 nlmsvc_testlock(struct svc_rqst *, struct nlm_file *, struct nlm_host *, struct nlm_lock *, struct nlm_lock *, struct nlm_cookie *);
312:	void nlmsvc_traverse_blocks(struct nlm_host *, struct nlm_file *, nlm_host_match_fn_t);
647:	__be32 nlmsvc_unlock(struct net *, struct nlm_file *, struct nlm_lock *);
443:	static __be32 nlmsvc_defer_lock_rqst(struct svc_rqst *, struct nlm_block *);
788:	static fl_owner_t nlmsvc_get_owner(fl_owner_t);
898:	static void nlmsvc_grant_callback(struct rpc_task *, void *);
731:	static int nlmsvc_grant_deferred(struct file_lock *, int);
938:	static void nlmsvc_grant_release(void *);
91:	static void nlmsvc_insert_block_locked(struct nlm_block *, unsigned long);
146:	static struct nlm_block *nlmsvc_lookup_block(struct nlm_file *, struct nlm_lock *);
770:	static void nlmsvc_notify_blocked(struct file_lock *);
793:	static void nlmsvc_put_owner(fl_owner_t);
302:	static void nlmsvc_release_block(struct nlm_block *);

File fs/lockd/svcproc.c:
310:	void nlmsvc_release_call(struct nlm_rqst *);
202:	static __be32 __nlmsvc_proc_cancel(struct svc_rqst *, struct nlm_res *);
285:	static __be32 __nlmsvc_proc_granted(struct svc_rqst *, struct nlm_res *);
153:	static __be32 __nlmsvc_proc_lock(struct svc_rqst *, struct nlm_res *);
115:	static __be32 __nlmsvc_proc_test(struct svc_rqst *, struct nlm_res *);
243:	static __be32 __nlmsvc_proc_unlock(struct svc_rqst *, struct nlm_res *);
333:	static __be32 nlmsvc_callback(struct svc_rqst *, u32, __be32 (*)(struct svc_rqst *, struct nlm_res *));
306:	static void nlmsvc_callback_exit(struct rpc_task *, void *);
318:	static void nlmsvc_callback_release(void *);
234:	static __be32 nlmsvc_proc_cancel(struct svc_rqst *);
376:	static __be32 nlmsvc_proc_cancel_msg(struct svc_rqst *);
484:	static __be32 nlmsvc_proc_free_all(struct svc_rqst *);
298:	static __be32 nlmsvc_proc_granted(struct svc_rqst *);
390:	static __be32 nlmsvc_proc_granted_msg(struct svc_rqst *);
523:	static __be32 nlmsvc_proc_granted_res(struct svc_rqst *);
196:	static __be32 nlmsvc_proc_lock(struct svc_rqst *);
370:	static __be32 nlmsvc_proc_lock_msg(struct svc_rqst *);
470:	static __be32 nlmsvc_proc_nm_lock(struct svc_rqst *);
105:	static __be32 nlmsvc_proc_null(struct svc_rqst *);
400:	static __be32 nlmsvc_proc_share(struct svc_rqst *);
502:	static __be32 nlmsvc_proc_sm_notify(struct svc_rqst *);
147:	static __be32 nlmsvc_proc_test(struct svc_rqst *);
364:	static __be32 nlmsvc_proc_test_msg(struct svc_rqst *);
275:	static __be32 nlmsvc_proc_unlock(struct svc_rqst *);
383:	static __be32 nlmsvc_proc_unlock_msg(struct svc_rqst *);
435:	static __be32 nlmsvc_proc_unshare(struct svc_rqst *);
537:	static __be32 nlmsvc_proc_unused(struct svc_rqst *);
52:	static __be32 nlmsvc_retrieve_args(struct svc_rqst *, struct nlm_args *, struct nlm_host **, struct nlm_file **);

File fs/lockd/svcshare.c:
28:	__be32 nlmsvc_share_file(struct nlm_host *, struct nlm_file *, struct nlm_args *);
93:	void nlmsvc_traverse_shares(struct nlm_host *, struct nlm_file *, nlm_host_match_fn_t);
69:	__be32 nlmsvc_unshare_file(struct nlm_host *, struct nlm_file *, struct nlm_args *);

File fs/lockd/svcsubs.c:
74:	int lock_to_openmode(struct file_lock *);
105:	__be32 nlm_lookup_file(struct svc_rqst *, struct nlm_file **, struct nlm_lock *);
344:	void nlm_release_file(struct nlm_file *);
429:	void nlmsvc_free_host_resources(struct nlm_host *);
448:	void nlmsvc_invalidate_all(void);
416:	void nlmsvc_mark_resources(struct net *);
498:	int nlmsvc_unlock_all_by_ip(struct sockaddr *);
475:	int nlmsvc_unlock_all_by_sb(struct super_block *);
299:	static int nlm_traverse_files(void *, nlm_host_match_fn_t, int (*)(void *, struct nlm_file *));
243:	static int nlmsvc_always_match(void *, struct nlm_host *);
396:	static int nlmsvc_is_client(void *, struct nlm_host *);
377:	static int nlmsvc_mark_host(void *, struct nlm_host *);
485:	static int nlmsvc_match_ip(void *, struct nlm_host *);
461:	static int nlmsvc_match_sb(void *, struct nlm_file *);
388:	static int nlmsvc_same_host(void *, struct nlm_host *);

File fs/lockd/xdr.c:
198:	bool nlmsvc_decode_cancargs(struct svc_rqst *, struct xdr_stream *);
173:	bool nlmsvc_decode_lockargs(struct svc_rqst *, struct xdr_stream *);
298:	bool nlmsvc_decode_notify(struct svc_rqst *, struct xdr_stream *);
245:	bool nlmsvc_decode_reboot(struct svc_rqst *, struct xdr_stream *);
232:	bool nlmsvc_decode_res(struct svc_rqst *, struct xdr_stream *);
271:	bool nlmsvc_decode_shareargs(struct svc_rqst *, struct xdr_stream *);
155:	bool nlmsvc_decode_testargs(struct svc_rqst *, struct xdr_stream *);
218:	bool nlmsvc_decode_unlockargs(struct svc_rqst *, struct xdr_stream *);
149:	bool nlmsvc_decode_void(struct svc_rqst *, struct xdr_stream *);
332:	bool nlmsvc_encode_res(struct svc_rqst *, struct xdr_stream *);
341:	bool nlmsvc_encode_shareres(struct svc_rqst *, struct xdr_stream *);
323:	bool nlmsvc_encode_testres(struct svc_rqst *, struct xdr_stream *);
317:	bool nlmsvc_encode_void(struct svc_rqst *, struct xdr_stream *);
72:	static bool svcxdr_decode_lock(struct xdr_stream *, struct nlm_lock *);

File fs/lockd/xdr4.c:
182:	bool nlm4svc_decode_cancargs(struct svc_rqst *, struct xdr_stream *);
157:	bool nlm4svc_decode_lockargs(struct svc_rqst *, struct xdr_stream *);
282:	bool nlm4svc_decode_notify(struct svc_rqst *, struct xdr_stream *);
229:	bool nlm4svc_decode_reboot(struct svc_rqst *, struct xdr_stream *);
216:	bool nlm4svc_decode_res(struct svc_rqst *, struct xdr_stream *);
255:	bool nlm4svc_decode_shareargs(struct svc_rqst *, struct xdr_stream *);
139:	bool nlm4svc_decode_testargs(struct svc_rqst *, struct xdr_stream *);
202:	bool nlm4svc_decode_unlockargs(struct svc_rqst *, struct xdr_stream *);
133:	bool nlm4svc_decode_void(struct svc_rqst *, struct xdr_stream *);
316:	bool nlm4svc_encode_res(struct svc_rqst *, struct xdr_stream *);
325:	bool nlm4svc_encode_shareres(struct svc_rqst *, struct xdr_stream *);
307:	bool nlm4svc_encode_testres(struct svc_rqst *, struct xdr_stream *);
301:	bool nlm4svc_encode_void(struct svc_rqst *, struct xdr_stream *);
63:	static bool svcxdr_decode_lock(struct xdr_stream *, struct nlm_lock *);

File fs/locks.c:
2084:	long __arm64_sys_flock(const struct pt_regs *);
1471:	int __break_lease(struct inode *, unsigned int, unsigned int);
1629:	int fcntl_getlease(struct file *);
2224:	int fcntl_getlk(struct file *, unsigned int, struct flock *);
2014:	int fcntl_setlease(unsigned int, struct file *, long);
2349:	int fcntl_setlk(unsigned int, struct file *, unsigned int, struct flock *);
1861:	int generic_setlease(struct file *, long, struct file_lock **, void **);
1585:	void lease_get_mtime(struct inode *, struct timespec64 *);
1373:	int lease_modify(struct file_lock *, int, struct list_head *);
1914:	int lease_register_notifier(struct notifier_block *);
1920:	void lease_unregister_notifier(struct notifier_block *);
268:	struct file_lock *locks_alloc_lock(void);
361:	void locks_copy_conflock(struct file_lock *, struct file_lock *);
380:	void locks_copy_lock(struct file_lock *, struct file_lock *);
694:	int locks_delete_block(struct file_lock *);
332:	void locks_free_lock(struct file_lock *);
248:	void locks_free_lock_context(struct inode *);
351:	void locks_init_lock(struct file_lock *);
2052:	int locks_lock_inode_wait(struct inode *, struct file_lock *);
312:	bool locks_owner_has_blockers(struct file_lock_context *, fl_owner_t);
279:	void locks_release_private(struct file_lock *);
2635:	void locks_remove_file(struct file *);
2554:	void locks_remove_posix(struct file *, fl_owner_t);
1330:	int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
886:	void posix_test_lock(struct file *, struct file_lock *);
2861:	void show_fd_locks(struct seq_file *, struct file *, struct files_struct *);
2666:	int vfs_cancel_lock(struct file *, struct file_lock *);
2682:	bool vfs_inode_has_locks(struct inode *);
2297:	int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
1968:	int vfs_setlease(struct file *, long, struct file_lock **, void **);
2147:	int vfs_test_lock(struct file *, struct file_lock *);
754:	static void __locks_insert_block(struct file_lock *, struct file_lock *, bool (*)(struct file_lock *, struct file_lock *));
2307:	static int do_lock_file_wait(struct file *, unsigned int, struct file_lock *);
2921:	static int filelock_init(void);
1006:	static int flock_lock_inode(struct inode *, struct file_lock *);
873:	static bool flock_locks_conflict(struct file_lock *, struct file_lock *);
116:	static int init_fs_locks_sysctls(void);
569:	static struct file_lock *lease_alloc(struct file *, long);
519:	static bool lease_break_callback(struct file_lock *);
526:	static void lease_setup(struct file_lock *, void **);
1421:	static bool leases_conflict(struct file_lock *, struct file_lock *);
2707:	static void lock_get_status(struct seq_file *, struct file_lock *, loff_t, char *, int);
215:	static void locks_check_ctx_lists(struct inode *);
829:	static void locks_delete_lock_ctx(struct file_lock *, struct list_head *);
340:	static void locks_dispose_list(struct list_head *);
205:	static void locks_dump_ctx_list(struct list_head *, char *);
2890:	static void *locks_next(struct seq_file *, void *, loff_t *);
2797:	static int locks_show(struct seq_file *, void *);
2879:	static void *locks_start(struct seq_file *, loff_t *);
2898:	static void locks_stop(struct seq_file *, void *);
821:	static void locks_unlink_lock_ctx(struct file_lock *);
796:	static void locks_wake_up_blocks(struct file_lock *);
1078:	static int posix_lock_inode(struct inode *, struct file_lock *, struct file_lock *);
2188:	static int posix_lock_to_flock(struct flock *, struct file_lock *);
854:	static bool posix_locks_conflict(struct file_lock *, struct file_lock *);
2912:	static int proc_locks_init(void);
1405:	static void time_out_leases(struct inode *, struct list_head *);

File fs/mbcache.c:
127:	void __mb_cache_entry_free(struct mb_cache *, struct mb_cache_entry *);
357:	struct mb_cache *mb_cache_create(int);
405:	void mb_cache_destroy(struct mb_cache *);
74:	int mb_cache_entry_create(struct mb_cache *, gfp_t, u32, u64, bool);
254:	struct mb_cache_entry *mb_cache_entry_delete_or_get(struct mb_cache *, u32, u64);
192:	struct mb_cache_entry *mb_cache_entry_find_first(struct mb_cache *, u32);
209:	struct mb_cache_entry *mb_cache_entry_find_next(struct mb_cache *, struct mb_cache_entry *);
222:	struct mb_cache_entry *mb_cache_entry_get(struct mb_cache *, u32, u64);
286:	void mb_cache_entry_touch(struct mb_cache *, struct mb_cache_entry *);
146:	void mb_cache_entry_wait_unused(struct mb_cache_entry *);
152:	static struct mb_cache_entry *__entry_find(struct mb_cache *, struct mb_cache_entry *, u32);
293:	static unsigned long mb_cache_count(struct shrinker *, struct shrink_control *);
333:	static unsigned long mb_cache_scan(struct shrinker *, struct shrink_control *);
303:	static unsigned long mb_cache_shrink(struct mb_cache *, unsigned long);
344:	static void mb_cache_shrink_worker(struct work_struct *);
435:	static void mbcache_exit(void);
425:	static int mbcache_init(void);

File fs/mpage.c:
443:	void clean_page_buffers(struct page *);
371:	int mpage_read_folio(struct folio *, get_block_t *);
349:	void mpage_readahead(struct readahead_control *, get_block_t *);
654:	int mpage_writepages(struct address_space *, struct writeback_control *, get_block_t *);
448:	static int __mpage_writepage(struct page *, struct writeback_control *, void *);
413:	static void clean_buffers(struct page *, unsigned int);
133:	static struct bio *do_mpage_readpage(struct mpage_readpage_args *);
46:	static void mpage_end_io(struct bio *);

File fs/namei.c:
4632:	long __arm64_sys_link(const struct pt_regs *);
4625:	long __arm64_sys_linkat(const struct pt_regs *);
4079:	long __arm64_sys_mkdir(const struct pt_regs *);
4074:	long __arm64_sys_mkdirat(const struct pt_regs *);
3996:	long __arm64_sys_mknod(const struct pt_regs *);
3990:	long __arm64_sys_mknodat(const struct pt_regs *);
4974:	long __arm64_sys_rename(const struct pt_regs *);
4967:	long __arm64_sys_renameat(const struct pt_regs *);
4960:	long __arm64_sys_renameat2(const struct pt_regs *);
4199:	long __arm64_sys_rmdir(const struct pt_regs *);
4450:	long __arm64_sys_symlink(const struct pt_regs *);
4444:	long __arm64_sys_symlinkat(const struct pt_regs *);
4366:	long __arm64_sys_unlink(const struct pt_regs *);
4356:	long __arm64_sys_unlinkat(const struct pt_regs *);
2883:	int __check_sticky(struct user_namespace *, struct inode *, struct inode *);
3750:	struct file *do_file_open_root(const struct path *, const char *, const struct open_flags *);
3733:	struct file *do_filp_open(int, struct filename *, const struct open_flags *);
4553:	int do_linkat(int, struct filename *, int, struct filename *, int);
4043:	int do_mkdirat(int, struct filename *, umode_t);
4818:	int do_renameat2(int, struct filename *, int, struct filename *, unsigned int);
4139:	int do_rmdir(int, struct filename *);
4408:	int do_symlinkat(struct filename *, int, struct filename *);
4280:	int do_unlinkat(int, struct filename *);
3854:	void done_path_create(struct path *, struct dentry *);
2495:	int filename_lookup(int, struct filename *, unsigned int, struct path *, struct path *);
1461:	int follow_down(struct path *);
1440:	int follow_down_one(struct path *);
1267:	int follow_up(struct path *);
2108:	unsigned int full_name_hash(const void *, const char *, unsigned int);
396:	int generic_permission(struct user_namespace *, struct inode *, int);
216:	struct filename *getname(const char *);
129:	struct filename *getname_flags(const char *, int, int *);
222:	struct filename *getname_kernel(const char *);
208:	struct filename *getname_uflags(const char *, int);
2129:	u64 hashlen_string(const void *, const char *);
500:	int inode_permission(struct user_namespace *, struct inode *, int);
2590:	int kern_path(const char *, unsigned int, struct path *);
3843:	struct dentry *kern_path_create(int, const char *, struct path *, unsigned int);
2581:	struct dentry *kern_path_locked(const char *, struct path *);
2985:	struct dentry *lock_rename(struct dentry *, struct dentry *);
2727:	struct dentry *lookup_one(struct user_namespace *, const char *, struct dentry *, int);
2698:	struct dentry *lookup_one_len(const char *, struct dentry *, int);
2823:	struct dentry *lookup_one_len_unlocked(const char *, struct dentry *, int);
2797:	struct dentry *lookup_one_positive_unlocked(struct user_namespace *, const char *, struct dentry *, int);
2758:	struct dentry *lookup_one_unlocked(struct user_namespace *, const char *, struct dentry *, int);
2838:	struct dentry *lookup_positive_unlocked(const char *, struct dentry *, int);
1181:	int may_linkat(struct user_namespace *, const struct path *);
3143:	bool may_open_dev(const struct path *);
989:	int nd_jump_link(const struct path *);
5062:	const char *page_get_link(struct dentry *, struct inode *, struct delayed_call *);
5091:	void page_put_link(void *);
5097:	int page_readlink(struct dentry *, char *, int);
5108:	int page_symlink(struct inode *, const char *, int);
543:	void path_get(const struct path *);
2846:	int path_pts(struct path *);
556:	void path_put(const struct path *);
257:	void putname(struct filename *);
4980:	int readlink_copy(char *, int, const char *);
2672:	struct dentry *try_lookup_one_len(const char *, struct dentry *, int);
3016:	void unlock_rename(struct dentry *, struct dentry *);
2872:	int user_path_at_empty(int, const char *, unsigned int, struct path *, int *);
3863:	struct dentry *user_path_create(int, const char *, struct path *, unsigned int);
3101:	int vfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
5047:	const char *vfs_get_link(struct dentry *, struct delayed_call *);
4481:	int vfs_link(struct dentry *, struct user_namespace *, struct inode *, struct dentry *, struct inode **);
4016:	int vfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
3890:	int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
3122:	int vfs_mkobj(struct dentry *, umode_t, int (*)(struct dentry *, umode_t, void *), void *);
2609:	int vfs_path_lookup(struct dentry *, struct vfsmount *, const char *, unsigned int, struct path *);
5005:	int vfs_readlink(struct dentry *, char *, int);
4682:	int vfs_rename(struct renamedata *);
4098:	int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
4386:	int vfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
3638:	struct file *vfs_tmpfile_open(struct user_namespace *, const struct path *, umode_t, int, const struct cred *);
4229:	int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *, struct inode **);
1583:	static struct dentry *__lookup_hash(const struct qstr *, struct dentry *, unsigned int);
1658:	static struct dentry *__lookup_slow(const struct qstr *, struct dentry *, unsigned int);
1372:	static int __traverse_mounts(struct path *, unsigned int, bool *, int *, unsigned int);
290:	static int check_acl(struct user_namespace *, struct inode *, int);
1310:	static bool choose_mountpoint(struct mount *, const struct path *, struct path *);
1290:	static bool choose_mountpoint_rcu(struct mount *, const struct path *, struct path *, unsigned int *);
871:	static int complete_walk(struct nameidata *);
3939:	static int do_mknodat(int, struct filename *, umode_t, unsigned int);
3682:	static int do_o_path(struct nameidata *, unsigned int, struct file *);
3657:	static int do_tmpfile(struct nameidata *, unsigned int, const struct open_flags *, struct file *);
658:	static void drop_links(struct nameidata *);
3776:	static struct dentry *filename_create(int, struct filename *, struct path *, unsigned int);
2534:	static int filename_parentat(int, struct filename *, unsigned int, struct path *, struct qstr *, int *);
1938:	static const char *handle_dots(struct nameidata *, int);
2453:	static int handle_lookup_down(struct nameidata *);
1071:	static int init_fs_namei_sysctls(void);
718:	static bool legitimize_links(struct nameidata *);
712:	static bool legitimize_path(struct nameidata *, struct path *, unsigned int);
2238:	static int link_path_walk(const char *, struct nameidata *);
1609:	static struct dentry *lookup_fast(struct nameidata *);
2625:	static int lookup_one_common(struct user_namespace *, const char *, struct dentry *, int, struct qstr *);
1695:	static struct dentry *lookup_slow(const struct qstr *, struct dentry *, unsigned int);
2916:	static int may_delete(struct user_namespace *, struct inode *, struct dentry *, bool);
3149:	static int may_open(struct user_namespace *, const struct path *, int, int);
628:	static bool nd_alloc_stack(struct nameidata *);
953:	static int nd_jump_root(struct nameidata *);
2341:	static const char *path_init(struct nameidata *, unsigned int);
2462:	static int path_lookupat(struct nameidata *, unsigned int, struct path *);
3694:	static struct file *path_openat(struct nameidata *, const struct open_flags *, unsigned int);
2517:	static int path_parentat(struct nameidata *, unsigned int, struct path *);
1746:	static const char *pick_link(struct nameidata *, struct path *, struct inode *, int);
1017:	static void put_link(struct nameidata *);
926:	static int set_root(struct nameidata *);
1826:	static const char *step_into(struct nameidata *, int, struct dentry *);
675:	static void terminate_walk(struct nameidata *);
768:	static bool try_to_unlazy(struct nameidata *);
804:	static bool try_to_unlazy_next(struct nameidata *, struct dentry *);
3586:	static int vfs_tmpfile(struct user_namespace *, const struct path *, struct file *, umode_t);
1976:	static const char *walk_component(struct nameidata *, int);

File fs/namespace.c:
3742:	long __arm64_sys_fsmount(const struct pt_regs *);
3674:	long __arm64_sys_mount(const struct pt_regs *);
4437:	long __arm64_sys_mount_setattr(const struct pt_regs *);
3871:	long __arm64_sys_move_mount(const struct pt_regs *);
2609:	long __arm64_sys_open_tree(const struct pt_regs *);
3974:	long __arm64_sys_pivot_root(const struct pt_regs *);
1933:	long __arm64_sys_umount(const struct pt_regs *);
1839:	void __detach_mounts(struct dentry *);
852:	bool __is_local_mountpoint(struct dentry *);
734:	int __legitimize_mnt(struct vfsmount *, unsigned int);
779:	struct mount *__lookup_mnt(struct vfsmount *, struct dentry *);
568:	void __mnt_drop_write(struct vfsmount *);
590:	void __mnt_drop_write_file(struct file *);
384:	bool __mnt_is_readonly(struct vfsmount *);
449:	int __mnt_want_write(struct vfsmount *);
525:	int __mnt_want_write_file(struct file *);
2116:	struct vfsmount *clone_private_mount(const struct path *);
2047:	struct vfsmount *collect_mounts(const struct path *);
3557:	struct mnt_namespace *copy_mnt_ns(unsigned long, struct mnt_namespace *, struct user_namespace *, struct fs_struct *);
1980:	struct mount *copy_tree(struct mount *, struct dentry *, int);
2217:	int count_mounts(struct mnt_namespace *, struct mount *);
4602:	bool current_chrooted(void);
2065:	void dissolve_on_fput(struct vfsmount *);
3479:	long do_mount(const char *, const char *, const char *, unsigned long, void *);
2083:	void drop_collected_mounts(struct vfsmount *);
1147:	struct vfsmount *fc_mount(struct fs_context *);
3153:	int finish_automount(struct vfsmount *, const struct path *);
1962:	struct ns_common *from_mnt_ns(struct mnt_namespace *);
3929:	bool is_path_reachable(struct mount *, struct dentry *, const struct path *);
2148:	int iterate_mounts(int (*)(struct vfsmount *, void *), void *, struct vfsmount *);
4558:	struct vfsmount *kern_mount(struct file_system_type *);
4573:	void kern_unmount(struct vfsmount *);
4584:	void kern_unmount_array(struct vfsmount **, unsigned int);
806:	struct vfsmount *lookup_mnt(const struct path *);
3243:	void mark_mounts_for_expiry(struct list_head *);
1868:	bool may_mount(void);
1571:	int may_umount(struct vfsmount *);
1534:	int may_umount_tree(struct vfsmount *);
1045:	void mnt_change_mountpoint(struct mount *, struct mountpoint *, struct mount *);
1430:	struct vfsmount *mnt_clone_internal(const struct path *);
1516:	void mnt_cursor_del(struct mnt_namespace *, struct mount *);
583:	void mnt_drop_write(struct vfsmount *);
596:	void mnt_drop_write_file(struct file *);
197:	int mnt_get_count(struct mount *);
227:	struct user_namespace *mnt_idmap_owner(const struct mnt_idmap *);
4515:	void mnt_init(void);
4718:	bool mnt_may_suid(struct vfsmount *);
174:	void mnt_release_group_id(struct mount *);
3228:	void mnt_set_expiry(struct vfsmount *, struct list_head *);
1015:	void mnt_set_mountpoint(struct mount *, struct mountpoint *, struct mount *);
247:	struct user_namespace *mnt_user_ns(const struct vfsmount *);
504:	int mnt_want_write(struct vfsmount *);
548:	int mnt_want_write_file(struct file *);
1392:	struct vfsmount *mntget(struct vfsmount *);
1380:	void mntput(struct vfsmount *);
3637:	struct dentry *mount_subtree(struct vfsmount *, const char *);
4597:	bool our_mnt(struct vfsmount *);
1411:	bool path_is_mountpoint(const struct path *);
3939:	bool path_is_under(const struct path *, const struct path *);
3400:	int path_mount(const char *, struct path *, const char *, unsigned long, void *);
1900:	int path_umount(struct path *, int);
4550:	void put_mnt_ns(struct mnt_namespace *);
685:	int sb_prepare_remount_readonly(struct super_block *);
1120:	struct vfsmount *vfs_create_mount(struct fs_context *);
1158:	struct vfsmount *vfs_kern_mount(struct file_system_type *, int, const char *, void *);
1189:	struct vfsmount *vfs_submount(const struct dentry *, struct file_system_type *, const char *, void *);
1296:	static void __cleanup_mnt(struct callback_head *);
2497:	static struct mount *__do_loopback(struct path *, int);
941:	static void __put_mountpoint(struct mountpoint *, struct list_head *);
3521:	static struct mnt_namespace *alloc_mnt_ns(struct user_namespace *, bool);
311:	static struct mount *alloc_vfsmnt(const char *);
1037:	static void attach_mnt(struct mount *, struct mount *, struct mountpoint *);
2303:	static int attach_recursive_mnt(struct mount *, struct mount *, struct mountpoint *, bool);
2839:	static bool check_for_nsfs_mounts(struct mount *);
1271:	static void cleanup_mnt(struct mount *);
1203:	static struct mount *clone_mnt(struct mount *, struct dentry *, int);
1063:	static void commit_tree(struct mount *);
728:	static void delayed_free_vfsmnt(struct callback_head *);
1302:	static void delayed_mntput(struct work_struct *);
2465:	static int do_change_type(struct path *, int);
2927:	static int do_move_mount(struct path *, struct path *);
3009:	static int do_move_mount_old(struct path *, const char *);
3104:	static int do_new_mount(struct path *, const char *, int, int, const char *, void *);
3503:	static void free_mnt_ns(struct mnt_namespace *);
718:	static void free_vfsmnt(struct mount *);
887:	static struct mountpoint *get_mountpoint(struct dentry *);
2433:	static int graft_tree(struct mount *, struct mount *, struct mountpoint *);
4823:	static int init_fs_namespace_sysctls(void);
4485:	static void init_mount_tree(void);
2200:	static int invent_group_ids(struct mount *, bool);
2163:	static void lock_mnt_tree(struct mount *);
2392:	static struct mountpoint *lock_mount(struct path *);
1479:	static void *m_next(struct seq_file *, void *, loff_t *);
1502:	static int m_show(struct seq_file *, void *);
1460:	static void *m_start(struct seq_file *, loff_t *);
1488:	static void m_stop(struct seq_file *, void *);
183:	static void mnt_add_count(struct mount *, int);
2714:	static void mnt_warn_timestamp_expiry(struct path *, struct vfsmount *);
4731:	static struct ns_common *mntns_get(struct task_struct *);
4752:	static int mntns_install(struct nsset *, struct ns_common *);
4796:	static struct user_namespace *mntns_owner(struct ns_common *);
4747:	static void mntns_put(struct ns_common *);
1312:	static void mntput_no_expire(struct mount *);
4695:	static bool mount_too_revealing(const struct super_block *, int *);
1585:	static void namespace_unlock(void);
956:	static void put_mountpoint(struct mountpoint *);
48:	static int set_mhash_entries(char *);
2707:	static void set_mount_attributes(struct mount *, unsigned int);
58:	static int set_mphash_entries(char *);
2823:	static int tree_contains_unbindable(struct mount *);
1007:	static void umount_mnt(struct mount *);
1654:	static void umount_tree(struct mount *, enum umount_tree_flags);
991:	static struct mountpoint *unhash_mnt(struct mount *);
2421:	static void unlock_mount(struct mountpoint *);

File fs/nfs/callback.c:
342:	int check_gss_callback_principal(struct nfs_client *, struct svc_rqst *);
321:	void nfs_callback_down(int, struct net *);
280:	int nfs_callback_up(u32, struct rpc_xprt *);
104:	static int nfs41_callback_svc(void *);
75:	static int nfs4_callback_svc(void *);
390:	static int nfs_callback_authenticate(struct svc_rqst *);

File fs/nfs/callback_proc.c:
358:	__be32 nfs4_callback_devicenotify(void *, void *, struct cb_process_state *);
28:	__be32 nfs4_callback_getattr(void *, void *, struct cb_process_state *);
336:	__be32 nfs4_callback_layoutrecall(void *, void *, struct cb_process_state *);
665:	__be32 nfs4_callback_notify_lock(void *, void *, struct cb_process_state *);
697:	__be32 nfs4_callback_offload(void *, void *, struct cb_process_state *);
78:	__be32 nfs4_callback_recall(void *, void *, struct cb_process_state *);
592:	__be32 nfs4_callback_recallany(void *, void *, struct cb_process_state *);
639:	__be32 nfs4_callback_recallslot(void *, void *, struct cb_process_state *);
488:	__be32 nfs4_callback_sequence(void *, void *, struct cb_process_state *);
328:	static u32 do_callback_layoutrecall(struct nfs_client *, struct cb_layoutrecallargs *);
445:	static int referring_call_exists(struct nfs_client *, uint32_t, struct referring_call_list *, spinlock_t *);

File fs/nfs/callback_xdr.c:
395:	static __be32 decode_cb_sequence_args(struct svc_rqst *, struct xdr_stream *, void *);
256:	static __be32 decode_devicenotify_args(struct svc_rqst *, struct xdr_stream *, void *);
176:	static __be32 decode_getattr_args(struct svc_rqst *, struct xdr_stream *, void *);
212:	static __be32 decode_layoutrecall_args(struct svc_rqst *, struct xdr_stream *, void *);
507:	static __be32 decode_notify_lock_args(struct svc_rqst *, struct xdr_stream *, void *);
548:	static __be32 decode_offload_args(struct svc_rqst *, struct xdr_stream *, void *);
188:	static __be32 decode_recall_args(struct svc_rqst *, struct xdr_stream *, void *);
443:	static __be32 decode_recallany_args(struct svc_rqst *, struct xdr_stream *, void *);
463:	static __be32 decode_recallslot_args(struct svc_rqst *, struct xdr_stream *, void *);
726:	static __be32 encode_cb_sequence_res(struct svc_rqst *, struct xdr_stream *, const void *);
680:	static __be32 encode_getattr_res(struct svc_rqst *, struct xdr_stream *, const void *);
921:	static __be32 nfs4_callback_compound(struct svc_rqst *);
61:	static __be32 nfs4_callback_null(struct svc_rqst *);
70:	static bool nfs4_encode_void(struct svc_rqst *, struct xdr_stream *);
983:	static int nfs_callback_dispatch(struct svc_rqst *, __be32 *);

File fs/nfs/client.c:
100:	struct nfs_subversion *get_nfs_version(unsigned int);
149:	struct nfs_client *nfs_alloc_client(const struct nfs_client_initdata *);
950:	struct nfs_server *nfs_alloc_server(void);
340:	bool nfs_client_init_is_complete(const struct nfs_client *);
352:	int nfs_client_init_status(const struct nfs_client *);
1149:	void nfs_clients_exit(struct net *);
1134:	void nfs_clients_init(struct net *);
1083:	struct nfs_server *nfs_clone_server(struct nfs_server *, struct nfs_fh *, struct nfs_fattr *, rpc_authflavor_t);
495:	int nfs_create_rpc_client(struct nfs_client *, const struct nfs_client_initdata *, rpc_authflavor_t);
1017:	struct nfs_server *nfs_create_server(struct fs_context *);
238:	void nfs_free_client(struct nfs_client *);
990:	void nfs_free_server(struct nfs_server *);
1385:	void nfs_fs_proc_exit(void);
1362:	int nfs_fs_proc_init(void);
1354:	void nfs_fs_proc_net_exit(struct net *);
1326:	int nfs_fs_proc_net_init(struct net *);
399:	struct nfs_client *nfs_get_client(const struct nfs_client_initdata *);
636:	struct nfs_client *nfs_init_client(struct nfs_client *, const struct nfs_client_initdata *);
601:	int nfs_init_server_rpcclient(struct nfs_server *, const struct rpc_timeout *, rpc_authflavor_t);
453:	void nfs_init_timeout_values(struct rpc_timeout *, int, int, int);
442:	void nfs_mark_client_ready(struct nfs_client *, int);
877:	int nfs_probe_server(struct nfs_server *, struct nfs_fh *);
255:	void nfs_put_client(struct nfs_client *);
898:	void nfs_server_copy_userdata(struct nfs_server *, struct nfs_server *);
914:	void nfs_server_insert_lists(struct nfs_server *);
928:	void nfs_server_remove_lists(struct nfs_server *);
363:	int nfs_wait_client_init_complete(const struct nfs_client *);
116:	void put_nfs_version(struct nfs_subversion *);
121:	void register_nfs_version(struct nfs_subversion *);
132:	void unregister_nfs_version(struct nfs_subversion *);
548:	static void nfs_destroy_server(struct nfs_server *);
828:	static int nfs_probe_fsinfo(struct nfs_server *, struct nfs_fh *, struct nfs_fattr *);
1200:	static void *nfs_server_list_next(struct seq_file *, void *, loff_t *);
1221:	static int nfs_server_list_show(struct seq_file *, void *);
1187:	static void *nfs_server_list_start(struct seq_file *, loff_t *);
1210:	static void nfs_server_list_stop(struct seq_file *, void *);
1267:	static void *nfs_volume_list_next(struct seq_file *, void *, loff_t *);
1288:	static int nfs_volume_list_show(struct seq_file *, void *);
1254:	static void *nfs_volume_list_start(struct seq_file *, loff_t *);
1277:	static void nfs_volume_list_stop(struct seq_file *, void *);

File fs/nfs/delegation.c:
140:	int nfs4_check_delegation(struct inode *, fmode_t);
1428:	bool nfs4_copy_delegation_stateid(struct inode *, fmode_t, nfs4_stateid *, const struct cred **);
1462:	bool nfs4_delegation_flush_on_close(const struct inode *);
96:	struct nfs_delegation *nfs4_get_valid_delegation(const struct inode *);
131:	int nfs4_have_delegation(struct inode *, fmode_t);
811:	int nfs4_inode_make_writeable(struct inode *);
750:	int nfs4_inode_return_delegation(struct inode *);
773:	void nfs4_inode_return_delegation_on_close(struct inode *);
1397:	bool nfs4_refresh_delegation_stateid(nfs4_stateid *, struct inode *);
1045:	int nfs_async_inode_return_delegation(struct inode *, const nfs4_stateid *);
707:	int nfs_client_return_marked_delegations(struct nfs_client *);
1112:	struct inode *nfs_delegation_find_inode(struct nfs_client *, const struct nfs_fh *);
1150:	void nfs_delegation_mark_reclaim(struct nfs_client *);
962:	void nfs_delegation_mark_returned(struct inode *, const nfs4_stateid *);
1201:	void nfs_delegation_reap_unclaimed(struct nfs_client *);
1374:	int nfs_delegations_present(struct nfs_client *);
867:	void nfs_expire_all_delegations(struct nfs_client *);
1026:	void nfs_expire_unreferenced_delegations(struct nfs_client *);
1004:	void nfs_expire_unused_delegation_types(struct nfs_client *, fmode_t);
727:	void nfs_inode_evict_delegation(struct inode *);
1347:	void nfs_inode_find_delegation_state_and_recover(struct inode *, const nfs4_stateid *);
230:	void nfs_inode_reclaim_delegation(struct inode *, const struct cred *, fmode_t, const nfs4_stateid *, unsigned long);
428:	int nfs_inode_set_delegation(struct inode *, const struct cred *, fmode_t, const nfs4_stateid *, unsigned long);
73:	void nfs_mark_delegation_referenced(struct nfs_delegation *);
1252:	void nfs_mark_test_expired_all_delegations(struct nfs_client *);
1341:	void nfs_reap_expired_delegations(struct nfs_client *);
955:	void nfs_remove_bad_delegation(struct inode *, const nfs4_stateid *);
878:	void nfs_server_return_all_delegations(struct nfs_server *);
1268:	void nfs_test_expired_all_delegations(struct nfs_client *);
1275:	static void nfs_delegation_test_free_expired(struct inode *, nfs4_stateid *, const struct cred *);
360:	static struct nfs_delegation *nfs_detach_delegation(struct nfs_inode *, struct nfs_delegation *, struct nfs_server *);
261:	static int nfs_do_return_delegation(struct inode *, struct nfs_delegation *, int);
528:	static int nfs_end_delegation_return(struct inode *, struct nfs_delegation *, int);
62:	static void nfs_free_delegation(struct nfs_delegation *);
1224:	static void nfs_inode_mark_test_expired_delegation(struct nfs_server *, struct inode *);
56:	static void nfs_put_delegation(struct nfs_delegation *);
1290:	static int nfs_server_reap_expired_delegations(struct nfs_server *, void *);
1160:	static int nfs_server_reap_unclaimed_delegations(struct nfs_server *, void *);
592:	static int nfs_server_return_marked_delegations(struct nfs_server *, void *);
292:	static struct nfs_delegation *nfs_start_delegation_return_locked(struct nfs_inode *);

File fs/nfs/dir.c:
3106:	void nfs_access_add_cache(struct inode *, struct nfs_access_entry *, const struct cred *);
2845:	unsigned long nfs_access_cache_count(struct shrinker *, struct shrink_control *);
2833:	unsigned long nfs_access_cache_scan(struct shrinker *, struct shrink_control *);
3054:	int nfs_access_get_cached(struct inode *, const struct cred *, u32 *, bool);
3173:	void nfs_access_set_mask(struct nfs_access_entry *, u32);
2881:	void nfs_access_zap_cache(struct inode *);
2240:	struct dentry *nfs_add_or_obtain(struct dentry *, struct nfs_fh *, struct nfs_fattr *);
2038:	int nfs_atomic_open(struct inode *, struct dentry *, struct file *, unsigned int, umode_t);
1468:	void nfs_clear_verifier_delegated(struct inode *);
2299:	int nfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
1989:	void nfs_d_prune_case_insensitive_aliases(struct inode *);
1384:	void nfs_force_lookup_revalidate(struct inode *);
2278:	int nfs_instantiate(struct dentry *, struct nfs_fh *, struct nfs_fattr *);
2589:	int nfs_link(struct dentry *, struct inode *, struct dentry *);
1925:	struct dentry *nfs_lookup(struct inode *, struct dentry *, unsigned int);
3242:	int nfs_may_open(struct inode *, const struct cred *, int);
2355:	int nfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
2328:	int nfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
3265:	int nfs_permission(struct user_namespace *, struct inode *, int);
681:	void nfs_readdir_record_entry_cache_hit(struct inode *);
700:	void nfs_readdir_record_entry_cache_miss(struct inode *);
2645:	int nfs_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
2400:	int nfs_rmdir(struct inode *, struct dentry *);
1448:	void nfs_set_verifier(struct dentry *, unsigned long);
2527:	int nfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
2469:	int nfs_unlink(struct inode *, struct dentry *);
1782:	static int __nfs_lookup_revalidate(struct dentry *, unsigned int, int (*)(struct inode *, struct dentry *, unsigned int));
2015:	static int do_open(struct inode *, struct file *);
2187:	static int nfs4_do_lookup_revalidate(struct inode *, struct dentry *, unsigned int);
2231:	static int nfs4_lookup_revalidate(struct dentry *, unsigned int);
2781:	static void nfs_access_free_list(struct list_head *);
1499:	static int nfs_check_verifier(struct inode *, struct dentry *, int);
131:	static int nfs_closedir(struct inode *, struct file *);
1904:	static void nfs_d_release(struct dentry *);
1855:	static int nfs_dentry_delete(const struct dentry *);
1895:	static void nfs_dentry_iput(struct dentry *, struct inode *);
2385:	static void nfs_dentry_remove_handle_error(struct inode *, struct dentry *, int);
3179:	static int nfs_do_access(struct inode *, const struct cred *, int);
2793:	static unsigned long nfs_do_access_cache_scan(unsigned int);
1082:	static void nfs_do_filldir(struct nfs_readdir_descriptor *, const __be32 *);
1729:	static int nfs_do_lookup_revalidate(struct inode *, struct dentry *, unsigned int);
1362:	static int nfs_fsync_dir(struct file *, loff_t, loff_t, int);
1317:	static loff_t nfs_llseek_dir(struct file *, loff_t, int);
1810:	static int nfs_lookup_revalidate(struct dentry *, unsigned int);
1659:	static int nfs_lookup_revalidate_dentry(struct inode *, struct dentry *, struct inode *, unsigned int);
1582:	static void nfs_mark_dir_for_revalidate(struct inode *);
111:	static int nfs_opendir(struct inode *, struct file *);
1214:	static int nfs_readdir(struct file *, struct dir_context *);
806:	static int nfs_readdir_entry_decode(struct nfs_readdir_descriptor *, struct nfs_entry *, struct xdr_stream *);
231:	static void nfs_readdir_free_folio(struct folio *);
896:	static void nfs_readdir_free_pages(struct page **, size_t);
314:	static int nfs_readdir_page_array_append(struct page *, const struct nfs_entry *, u64 *);
391:	static void nfs_readdir_page_init_and_validate(struct page *, u64, u64);
236:	static void nfs_readdir_page_reinit_array(struct page *, u64, u64);
928:	static int nfs_readdir_xdr_to_array(struct nfs_readdir_descriptor *, __be32 *, __be32 *, struct page **, size_t);
2613:	static void nfs_unblock_rename(struct rpc_task *, struct nfs_renamedata *);
1824:	static int nfs_weak_revalidate(struct dentry *, unsigned int);

File fs/nfs/direct.c:
982:	void nfs_destroy_directcache(void);
198:	ssize_t nfs_dreq_bytes_left(struct nfs_direct_req *);
408:	ssize_t nfs_file_direct_read(struct kiocb *, struct iov_iter *, bool);
875:	ssize_t nfs_file_direct_write(struct kiocb *, struct iov_iter *, bool);
152:	void nfs_init_cinfo_from_dreq(struct nfs_commit_info *, struct nfs_direct_req *);
965:	int nfs_init_directcache(void);
130:	int nfs_swap_rw(struct kiocb *, struct iov_iter *);
557:	static void nfs_direct_commit_complete(struct nfs_commit_data *);
294:	static void nfs_direct_pgio_init(struct nfs_pgio_header *);
252:	static void nfs_direct_read_completion(struct nfs_pgio_header *);
193:	static void nfs_direct_req_release(struct nfs_direct_req *);
599:	static void nfs_direct_resched_write(struct nfs_commit_info *, struct nfs_page *);
674:	static void nfs_direct_write_completion(struct nfs_pgio_header *);
506:	static void nfs_direct_write_reschedule(struct nfs_direct_req *);
733:	static void nfs_direct_write_reschedule_io(struct nfs_pgio_header *);
769:	static ssize_t nfs_direct_write_schedule_iovec(struct nfs_direct_req *, struct iov_iter *, loff_t, int);
648:	static void nfs_direct_write_schedule_work(struct work_struct *);
283:	static void nfs_read_sync_pgio_error(struct list_head *, int);
722:	static void nfs_write_sync_pgio_error(struct list_head *, int);

File fs/nfs/dns_resolve.c:
18:	ssize_t nfs_dns_resolve_name(struct net *, char *, size_t, struct __kernel_sockaddr_storage *, size_t);

File fs/nfs/export.c:
35:	static int nfs_encode_fh(struct inode *, __u32 *, int *, struct inode *);
148:	static u64 nfs_fetch_iversion(struct inode *);
64:	static struct dentry *nfs_fh_to_dentry(struct super_block *, struct fid *, int, int);
117:	static struct dentry *nfs_get_parent(struct dentry *);

File fs/nfs/file.c:
47:	int nfs_check_flags(int);
222:	int nfs_file_fsync(struct file *, loff_t, loff_t, int);
113:	loff_t nfs_file_llseek(struct file *, loff_t, int);
181:	int nfs_file_mmap(struct file *, struct vm_area_struct *);
156:	ssize_t nfs_file_read(struct kiocb *, struct iov_iter *);
78:	int nfs_file_release(struct inode *, struct file *);
603:	ssize_t nfs_file_write(struct kiocb *, struct iov_iter *);
837:	int nfs_flock(struct file *, int, struct file_lock *);
799:	int nfs_lock(struct file *, int, struct file_lock *);
755:	static int do_setlk(struct file *, int, struct file_lock *, int);
719:	static int do_unlk(struct file *, int, struct file_lock *, int);
430:	static void nfs_check_dirty_writeback(struct folio *, bool *, bool *);
138:	static int nfs_file_flush(struct file *, fl_owner_t);
60:	static int nfs_file_open(struct inode *, struct file *);
401:	static void nfs_invalidate_folio(struct folio *, size_t, size_t);
464:	static int nfs_launder_folio(struct folio *);
420:	static bool nfs_release_folio(struct folio *, gfp_t);
475:	static int nfs_swap_activate(struct swap_info_struct *, struct file *, sector_t *);
512:	static void nfs_swap_deactivate(struct file *);
547:	static vm_fault_t nfs_vm_page_mkwrite(struct vm_fault *);
315:	static int nfs_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
348:	static int nfs_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);

File fs/nfs/filelayout/filelayout.c:
249:	bool filelayout_test_devid_unavailable(struct nfs4_deviceid_node *);
1036:	static struct nfs4_deviceid_node *filelayout_alloc_deviceid_node(struct nfs_server *, struct pnfs_device *, gfp_t);
1054:	static struct pnfs_layout_hdr *filelayout_alloc_layout_hdr(struct inode *, gfp_t);
766:	static struct pnfs_layout_segment *filelayout_alloc_lseg(struct pnfs_layout_hdr *, struct nfs4_layoutget_res *, gfp_t);
123:	static int filelayout_async_handle_error(struct rpc_task *, struct nfs4_state *, struct nfs_client *, struct pnfs_layout_segment *);
421:	static void filelayout_commit_count_stats(struct rpc_task *, void *);
343:	static int filelayout_commit_done_cb(struct rpc_task *, struct nfs_commit_data *);
1028:	static int filelayout_commit_pagelist(struct inode *, struct list_head *, int, struct nfs_commit_info *);
411:	static void filelayout_commit_prepare(struct rpc_task *, void *);
1048:	static void filelayout_free_deviceid_node(struct nfs4_deviceid_node *);
1067:	static void filelayout_free_layout_hdr(struct pnfs_layout_hdr *);
744:	static void filelayout_free_lseg(struct pnfs_layout_segment *);
1073:	static struct pnfs_ds_commit_info *filelayout_get_ds_info(struct inode *);
993:	static int filelayout_initiate_commit(struct nfs_commit_data *, int);
944:	static void filelayout_mark_request_commit(struct nfs_page *, struct pnfs_layout_segment *, struct nfs_commit_info *, u32);
873:	static void filelayout_pg_init_read(struct nfs_pageio_descriptor *, struct nfs_page *);
897:	static void filelayout_pg_init_write(struct nfs_pageio_descriptor *, struct nfs_page *);
799:	static size_t filelayout_pg_test(struct nfs_pageio_descriptor *, struct nfs_page *, struct nfs_page *);
294:	static void filelayout_read_call_done(struct rpc_task *, void *);
308:	static void filelayout_read_count_stats(struct rpc_task *, void *);
205:	static int filelayout_read_done_cb(struct rpc_task *, struct nfs_pgio_header *);
450:	static enum pnfs_try_status filelayout_read_pagelist(struct nfs_pgio_header *);
268:	static void filelayout_read_prepare(struct rpc_task *, void *);
1104:	static void filelayout_release_ds_info(struct pnfs_ds_commit_info *, struct inode *);
1084:	static void filelayout_setup_ds_info(struct pnfs_ds_commit_info *, struct pnfs_layout_segment *);
390:	static void filelayout_write_call_done(struct rpc_task *, void *);
404:	static void filelayout_write_count_stats(struct rpc_task *, void *);
315:	static int filelayout_write_done_cb(struct rpc_task *, struct nfs_pgio_header *);
497:	static enum pnfs_try_status filelayout_write_pagelist(struct nfs_pgio_header *, int);
366:	static void filelayout_write_prepare(struct rpc_task *, void *);
837:	static struct pnfs_layout_segment *fl_pnfs_update_layout(struct inode *, struct nfs_open_context *, loff_t, u64, enum pnfs_iomode, bool, gfp_t);
1150:	static void nfs4filelayout_exit(void);
1143:	static int nfs4filelayout_init(void);

File fs/nfs/filelayout/filelayoutdev.c:
63:	struct nfs4_file_layout_dsaddr *nfs4_fl_alloc_deviceid_node(struct nfs_server *, struct pnfs_device *, gfp_t);
234:	u32 nfs4_fl_calc_ds_index(struct pnfs_layout_segment *, u32);
222:	u32 nfs4_fl_calc_j_index(struct pnfs_layout_segment *, loff_t);
45:	void nfs4_fl_free_deviceid(struct nfs4_file_layout_dsaddr *);
260:	struct nfs4_pnfs_ds *nfs4_fl_prepare_ds(struct pnfs_layout_segment *, u32);
212:	void nfs4_fl_put_deviceid(struct nfs4_file_layout_dsaddr *);
240:	struct nfs_fh *nfs4_fl_select_ds_fh(struct pnfs_layout_segment *, u32);

File fs/nfs/flexfilelayout/flexfilelayout.c:
2263:	void ff_layout_send_layouterror(struct pnfs_layout_segment *);
139:	static int decode_name(struct xdr_stream *, u32 *);
342:	static void ff_layout_add_lseg(struct pnfs_layout_hdr *, struct pnfs_layout_segment *, struct list_head *);
188:	static struct nfs4_ff_layout_mirror *ff_layout_add_mirror(struct pnfs_layout_hdr *, struct nfs4_ff_layout_mirror *);
2163:	static struct nfs4_deviceid_node *ff_layout_alloc_deviceid_node(struct nfs_server *, struct pnfs_device *, gfp_t);
52:	static struct pnfs_layout_hdr *ff_layout_alloc_layout_hdr(struct inode *, gfp_t);
366:	static struct pnfs_layout_segment *ff_layout_alloc_lseg(struct pnfs_layout_hdr *, struct nfs4_layoutget_res *, gfp_t);
1194:	static int ff_layout_async_handle_error(struct rpc_task *, struct nfs4_state *, struct nfs_client *, struct pnfs_layout_segment *, u32);
2005:	static void ff_layout_cancel_io(struct pnfs_layout_segment *);
1701:	static void ff_layout_commit_count_stats(struct rpc_task *, void *);
1696:	static void ff_layout_commit_done(struct rpc_task *, void *);
1502:	static int ff_layout_commit_done_cb(struct rpc_task *, struct nfs_commit_data *);
1969:	static int ff_layout_commit_pagelist(struct inode *, struct list_head *, int, struct nfs_commit_info *);
1676:	static void ff_layout_commit_prepare_v3(struct rpc_task *, void *);
1684:	static void ff_layout_commit_prepare_v4(struct rpc_task *, void *);
1645:	static void ff_layout_commit_record_layoutstats_done(struct rpc_task *, struct nfs_commit_data *);
1710:	static void ff_layout_commit_release(void *);
2422:	static void ff_layout_encode_ff_layoutupdate(struct xdr_stream *, const struct nfs42_layoutstat_devinfo *, struct nfs4_ff_layout_mirror *);
2175:	static void ff_layout_encode_layoutreturn(struct xdr_stream *, const void *, const struct nfs4_xdr_opaque_data *);
2453:	static void ff_layout_encode_layoutstats(struct xdr_stream *, const void *, const struct nfs4_xdr_opaque_data *);
2075:	static void ff_layout_free_deviceid_node(struct nfs4_deviceid_node *);
69:	static void ff_layout_free_layout_hdr(struct pnfs_layout_hdr *);
2207:	static void ff_layout_free_layoutreturn(struct nfs4_xdr_opaque_data *);
2468:	static void ff_layout_free_layoutstats(struct nfs4_xdr_opaque_data *);
560:	static void ff_layout_free_lseg(struct pnfs_layout_segment *);
238:	static void ff_layout_free_mirror(struct nfs4_ff_layout_mirror *);
2036:	static struct pnfs_ds_commit_info *ff_layout_get_ds_info(struct inode *);
1913:	static int ff_layout_initiate_commit(struct nfs_commit_data *, int);
1224:	static void ff_layout_io_track_ds_error(struct pnfs_layout_segment *, u32, u64, u64, u32 *, int, int);
1990:	static bool ff_layout_match_io(const struct rpc_task *, const void *);
2481:	static int ff_layout_mirror_prepare_stats(struct pnfs_layout_hdr *, struct nfs42_layoutstat_devinfo *, int, enum nfs4_ff_op_type);
952:	static unsigned int ff_layout_pg_get_mirror_count_write(struct nfs_pageio_descriptor *, struct nfs_page *);
989:	static struct nfs_pgio_mirror *ff_layout_pg_get_mirror_write(struct nfs_pageio_descriptor *, u32);
834:	static void ff_layout_pg_init_read(struct nfs_pageio_descriptor *, struct nfs_page *);
889:	static void ff_layout_pg_init_write(struct nfs_pageio_descriptor *, struct nfs_page *);
980:	static u32 ff_layout_pg_set_mirror_write(struct nfs_pageio_descriptor *, u32);
2229:	static int ff_layout_prepare_layoutreturn(struct nfs4_layoutreturn_args *);
2523:	static int ff_layout_prepare_layoutstats(struct nfs42_layoutstat_args *);
1419:	static void ff_layout_read_call_done(struct rpc_task *, void *);
1433:	static void ff_layout_read_count_stats(struct rpc_task *, void *);
1286:	static int ff_layout_read_done_cb(struct rpc_task *, struct nfs_pgio_header *);
1761:	static enum pnfs_try_status ff_layout_read_pagelist(struct nfs_pgio_header *);
1374:	static int ff_layout_read_prepare_common(struct rpc_task *, struct nfs_pgio_header *);
1396:	static void ff_layout_read_prepare_v3(struct rpc_task *, void *);
1406:	static void ff_layout_read_prepare_v4(struct rpc_task *, void *);
1362:	static void ff_layout_read_record_layoutstats_done(struct rpc_task *, struct nfs_pgio_header *);
1442:	static void ff_layout_read_release(void *);
2066:	static void ff_layout_release_ds_info(struct pnfs_ds_commit_info *, struct inode *);
2551:	static int ff_layout_set_layoutdriver(struct nfs_server *, const struct nfs_fh *);
2047:	static void ff_layout_setup_ds_info(struct pnfs_ds_commit_info *, struct pnfs_layout_segment *);
1599:	static void ff_layout_write_call_done(struct rpc_task *, void *);
1613:	static void ff_layout_write_count_stats(struct rpc_task *, void *);
1455:	static int ff_layout_write_done_cb(struct rpc_task *, struct nfs_pgio_header *);
1831:	static enum pnfs_try_status ff_layout_write_pagelist(struct nfs_pgio_header *, int);
1559:	static int ff_layout_write_prepare_common(struct rpc_task *, struct nfs_pgio_header *);
1576:	static void ff_layout_write_prepare_v3(struct rpc_task *, void *);
1586:	static void ff_layout_write_prepare_v4(struct rpc_task *, void *);
1622:	static void ff_layout_write_release(void *);
309:	static bool ff_lseg_merge(struct pnfs_layout_segment *, struct pnfs_layout_segment *);
292:	static bool ff_lseg_range_is_after(const struct pnfs_layout_range *, const struct pnfs_layout_range *);
707:	static void nfs4_ff_layout_stat_io_end_write(struct rpc_task *, struct nfs4_ff_layout_mirror *, __u64, __u64, enum nfs3_stable_how);
690:	static void nfs4_ff_layout_stat_io_start_write(struct inode *, struct nfs4_ff_layout_mirror *, __u64, ktime_t);
2602:	static void nfs4flexfilelayout_exit(void);
2595:	static int nfs4flexfilelayout_init(void);

File fs/nfs/flexfilelayout/flexfilelayoutdev.c:
602:	bool ff_layout_avoid_mds_available_ds(struct pnfs_layout_segment *);
608:	bool ff_layout_avoid_read_on_rw(struct pnfs_layout_segment *);
475:	int ff_layout_encode_ds_ioerr(struct xdr_stream *, const struct list_head *);
535:	unsigned int ff_layout_fetch_ds_ioerr(struct pnfs_layout_hdr *, const struct pnfs_layout_range *, struct list_head *, unsigned int);
461:	void ff_layout_free_ds_ioerr(struct list_head *);
421:	const struct cred *ff_layout_get_ds_cred(struct nfs4_ff_layout_mirror *, const struct pnfs_layout_range *, const struct cred *);
252:	int ff_layout_track_ds_error(struct nfs4_flexfile_layout *, struct nfs4_ff_layout_mirror *, u64, u64, int, enum nfs_opnum4, gfp_t);
42:	struct nfs4_ff_layout_ds *nfs4_ff_alloc_deviceid_node(struct nfs_server *, struct pnfs_device *, gfp_t);
447:	struct rpc_clnt *nfs4_ff_find_or_create_ds_client(struct nfs4_ff_layout_mirror *, struct nfs_client *, struct inode *);
32:	void nfs4_ff_layout_free_deviceid(struct nfs4_ff_layout_ds *);
369:	struct nfs4_pnfs_ds *nfs4_ff_layout_prepare_ds(struct pnfs_layout_segment *, struct nfs4_ff_layout_mirror *, bool);
26:	void nfs4_ff_layout_put_deviceid(struct nfs4_ff_layout_ds *);
307:	struct nfs_fh *nfs4_ff_layout_select_ds_fh(struct nfs4_ff_layout_mirror *);
314:	void nfs4_ff_layout_select_ds_stateid(const struct nfs4_ff_layout_mirror *, nfs4_stateid *);

File fs/nfs/fs_context.c:
1451:	static int nfs_fs_context_dup(struct fs_context *, struct fs_context *);
1477:	static void nfs_fs_context_free(struct fs_context *);
1302:	static int nfs_fs_context_parse_monolithic(struct fs_context *, void *);
475:	static int nfs_fs_context_parse_param(struct fs_context *, struct fs_parameter *);
1432:	static int nfs_get_tree(struct fs_context *);
1511:	static int nfs_init_fs_context(struct fs_context *);
374:	static int nfs_parse_security_flavors(struct fs_context *, struct fs_parameter *);
433:	static int nfs_parse_version_string(struct fs_context *, const char *);

File fs/nfs/getroot.c:
67:	int nfs_get_root(struct super_block *, struct fs_context *);

File fs/nfs/inode.c:
1186:	int __nfs_revalidate_inode(struct nfs_server *, struct inode *);
1023:	struct nfs_open_context *alloc_nfs_open_context(struct dentry *, fmode_t, struct file *);
1052:	struct nfs_open_context *get_nfs_open_context(struct nfs_open_context *);
1579:	struct nfs_fattr *nfs_alloc_fattr(void);
1592:	struct nfs_fattr *nfs_alloc_fattr_with_label(struct nfs_server *);
1609:	struct nfs_fh *nfs_alloc_fhandle(void);
2235:	struct inode *nfs_alloc_inode(struct super_block *);
1259:	int nfs_attribute_cache_expired(struct inode *);
170:	bool nfs_check_cache_invalid(struct inode *, unsigned long);
113:	void nfs_clear_inode(struct inode *);
1310:	int nfs_clear_invalid_mapping(struct address_space *);
997:	void nfs_close_context(struct nfs_open_context *, int);
91:	u64 nfs_compat_user_ino64(u64);
107:	int nfs_drop_inode(struct inode *);
126:	void nfs_evict_inode(struct inode *);
1553:	void nfs_fattr_init(struct nfs_fattr *);
1574:	void nfs_fattr_set_barrier(struct nfs_fattr *);
443:	struct inode *nfs_fhget(struct super_block *, struct nfs_fh *, struct nfs_fattr *);
1145:	void nfs_file_clear_open_context(struct file *);
1112:	void nfs_file_set_open_context(struct file *, struct nfs_open_context *);
1124:	struct nfs_open_context *nfs_find_open_context(struct inode *, const struct cred *, fmode_t);
2253:	void nfs_free_inode(struct inode *);
942:	struct nfs_lock_context *nfs_get_lock_context(struct nfs_open_context *);
831:	int nfs_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
401:	struct inode *nfs_ilookup(struct super_block *, struct nfs_fattr *, struct nfs_fh *);
1547:	unsigned long nfs_inc_attr_generation_counter(void);
1097:	void nfs_inode_attach_open_context(struct nfs_open_context *);
276:	void nfs_invalidate_atime(struct inode *);
1362:	bool nfs_mapping_need_revalidate_inode(struct inode *);
1167:	int nfs_open(struct inode *, struct file *);
1877:	int nfs_post_op_update_inode(struct inode *, struct nfs_fattr *);
1959:	int nfs_post_op_update_inode_force_wcc(struct inode *, struct nfs_fattr *);
1904:	int nfs_post_op_update_inode_force_wcc_locked(struct inode *, struct nfs_fattr *);
974:	void nfs_put_lock_context(struct nfs_lock_context *);
1838:	int nfs_refresh_inode(struct inode *, struct nfs_fattr *);
1273:	int nfs_revalidate_inode(struct inode *, unsigned long);
1394:	int nfs_revalidate_mapping(struct inode *, struct address_space *);
1368:	int nfs_revalidate_mapping_rcu(struct inode *);
190:	void nfs_set_cache_invalid(struct inode *, unsigned long);
295:	void nfs_set_inode_stale(struct inode *);
609:	int nfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
701:	void nfs_setattr_update_inode(struct inode *, struct iattr *, struct nfs_fattr *);
393:	void nfs_setsecurity(struct inode *, struct nfs_fattr *);
133:	int nfs_sync_inode(struct inode *);
144:	int nfs_sync_mapping(struct address_space *);
75:	int nfs_wait_bit_killable(struct wait_bit_key *, int);
263:	void nfs_zap_acl_cache(struct inode *);
247:	void nfs_zap_caches(struct inode *);
254:	void nfs_zap_mapping(struct inode *, struct address_space *);
1082:	void put_nfs_open_context(struct nfs_open_context *);
1060:	static void __put_nfs_open_context(struct nfs_open_context *, int);
2429:	static void exit_nfs_fs(void);
2359:	static int init_nfs_fs(void);
2269:	static void init_once(void *);
314:	static int nfs_find_actor(struct inode *, void *);
332:	static int nfs_init_locked(struct inode *, void *);
2343:	static void nfs_net_exit(struct net *);
2337:	static int nfs_net_init(struct net *);
1811:	static int nfs_refresh_inode_locked(struct inode *, struct nfs_fattr *);
1984:	static int nfs_update_inode(struct inode *, struct nfs_fattr *);
223:	static void nfs_zap_caches_locked(struct inode *);

File fs/nfs/internal.h:
858:	static bool nfs_error_is_fatal(int);
782:	static unsigned int nfs_page_length(struct page *);

File fs/nfs/io.c:
145:	void nfs_end_io_direct(struct inode *);
65:	void nfs_end_io_read(struct inode *);
92:	void nfs_end_io_write(struct inode *);
123:	void nfs_start_io_direct(struct inode *);
43:	void nfs_start_io_read(struct inode *);
78:	void nfs_start_io_write(struct inode *);

File fs/nfs/mount_clnt.c:
146:	int nfs_mount(struct nfs_mount_request *, int, int);
238:	void nfs_umount(const struct nfs_mount_request *);
364:	static int mnt_xdr_dec_mountres(struct rpc_rqst *, struct xdr_stream *, void *);
457:	static int mnt_xdr_dec_mountres3(struct rpc_rqst *, struct xdr_stream *, void *);
312:	static void mnt_xdr_enc_dirpath(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/nfs/namespace.c:
145:	struct vfsmount *nfs_d_automount(struct path *);
262:	int nfs_do_submount(struct fs_context *);
52:	char *nfs_path(char **, struct dentry *, char *, ssize_t, unsigned int);
251:	void nfs_release_automount_timer(void);
302:	int nfs_submount(struct fs_context *, struct nfs_server *);
241:	static void nfs_expire_automounts(struct work_struct *);
211:	static int nfs_namespace_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
223:	static int nfs_namespace_setattr(struct user_namespace *, struct dentry *, struct iattr *);
346:	static int param_get_nfs_timeout(char *, const struct kernel_param *);
321:	static int param_set_nfs_timeout(const char *, const struct kernel_param *);

File fs/nfs/nfs2super.c:
24:	static void exit_nfs_v2(void);
18:	static int init_nfs_v2(void);

File fs/nfs/nfs2xdr.c:
926:	int nfs2_decode_dirent(struct xdr_stream *, struct nfs_entry *, bool);
266:	static int decode_fattr(struct xdr_stream *, struct nfs_fattr *, struct user_namespace *);
340:	static void encode_sattr(struct xdr_stream *, const struct iattr *, struct user_namespace *);
818:	static int nfs2_xdr_dec_attrstat(struct rpc_rqst *, struct xdr_stream *, void *);
824:	static int nfs2_xdr_dec_diropres(struct rpc_rqst *, struct xdr_stream *, void *);
990:	static int nfs2_xdr_dec_readdirres(struct rpc_rqst *, struct xdr_stream *, void *);
840:	static int nfs2_xdr_dec_readlinkres(struct rpc_rqst *, struct xdr_stream *, void *);
869:	static int nfs2_xdr_dec_readres(struct rpc_rqst *, struct xdr_stream *, void *);
801:	static int nfs2_xdr_dec_stat(struct rpc_rqst *, struct xdr_stream *, void *);
1039:	static int nfs2_xdr_dec_statfsres(struct rpc_rqst *, struct xdr_stream *, void *);
892:	static int nfs2_xdr_dec_writeres(struct rpc_rqst *, struct xdr_stream *, void *);
685:	static void nfs2_xdr_enc_createargs(struct rpc_rqst *, struct xdr_stream *, const void *);
580:	static void nfs2_xdr_enc_diropargs(struct rpc_rqst *, struct xdr_stream *, const void *);
553:	static void nfs2_xdr_enc_fhandle(struct rpc_rqst *, struct xdr_stream *, const void *);
732:	static void nfs2_xdr_enc_linkargs(struct rpc_rqst *, struct xdr_stream *, const void *);
625:	static void nfs2_xdr_enc_readargs(struct rpc_rqst *, struct xdr_stream *, const void *);
783:	static void nfs2_xdr_enc_readdirargs(struct rpc_rqst *, struct xdr_stream *, const void *);
589:	static void nfs2_xdr_enc_readlinkargs(struct rpc_rqst *, struct xdr_stream *, const void *);
695:	static void nfs2_xdr_enc_removeargs(struct rpc_rqst *, struct xdr_stream *, const void *);
712:	static void nfs2_xdr_enc_renameargs(struct rpc_rqst *, struct xdr_stream *, const void *);
570:	static void nfs2_xdr_enc_sattrargs(struct rpc_rqst *, struct xdr_stream *, const void *);
751:	static void nfs2_xdr_enc_symlinkargs(struct rpc_rqst *, struct xdr_stream *, const void *);
667:	static void nfs2_xdr_enc_writeargs(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/nfs/nfs3client.c:
59:	struct nfs_server *nfs3_clone_server(struct nfs_server *, struct nfs_fh *, struct nfs_fattr *, rpc_authflavor_t);
49:	struct nfs_server *nfs3_create_server(struct fs_context *);
80:	struct nfs_client *nfs3_set_ds_client(struct nfs_server *, const struct __kernel_sockaddr_storage *, int, int, unsigned int, unsigned int);

File fs/nfs/nfs3proc.c:
156:	static int __nfs3_proc_lookup(struct inode *, const char *, size_t, struct nfs_fh *, struct nfs_fattr *, unsigned short);
61:	static int do_proc_get_root(struct rpc_clnt *, struct nfs_fh *, struct nfs_fsinfo *);
905:	static int nfs3_commit_done(struct rpc_task *, struct nfs_commit_data *);
317:	static struct dentry *nfs3_do_create(struct inode *, struct dentry *, struct nfs3_createdata *);
981:	static int nfs3_have_delegation(struct inode *, fmode_t);
922:	static void nfs3_nlm_alloc_call(void *);
940:	static void nfs3_nlm_release_call(void *);
931:	static bool nfs3_nlm_unlock_prepare(struct rpc_task *, void *);
224:	static int nfs3_proc_access(struct inode *, struct nfs_access_entry *, const struct cred *);
900:	static void nfs3_proc_commit_rpc_prepare(struct rpc_task *, struct nfs_commit_data *);
916:	static void nfs3_proc_commit_setup(struct nfs_commit_data *, struct rpc_message *, struct rpc_clnt **);
338:	static int nfs3_proc_create(struct inode *, struct dentry *, struct iattr *, int);
817:	static int nfs3_proc_fsinfo(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
88:	static int nfs3_proc_get_root(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
103:	static int nfs3_proc_getattr(struct nfs_server *, struct nfs_fh *, struct nfs_fattr *, struct inode *);
513:	static int nfs3_proc_link(struct inode *, struct inode *, const struct qstr *);
958:	static int nfs3_proc_lock(struct file *, int, struct file_lock *);
195:	static int nfs3_proc_lookup(struct inode *, struct dentry *, struct nfs_fh *, struct nfs_fattr *);
210:	static int nfs3_proc_lookupp(struct inode *, struct nfs_fh *, struct nfs_fattr *);
582:	static int nfs3_proc_mkdir(struct inode *, struct dentry *, struct iattr *);
712:	static int nfs3_proc_mknod(struct inode *, struct dentry *, struct iattr *, dev_t);
829:	static int nfs3_proc_pathconf(struct nfs_server *, struct nfs_fh *, struct nfs_pathconf *);
872:	static int nfs3_proc_pgio_rpc_prepare(struct rpc_task *, struct nfs_pgio_header *);
865:	static void nfs3_proc_read_setup(struct nfs_pgio_header *, struct rpc_message *);
664:	static int nfs3_proc_readdir(struct nfs_readdir_arg *, struct nfs_readdir_res *);
255:	static int nfs3_proc_readlink(struct inode *, struct page *, unsigned int, unsigned int);
433:	static int nfs3_proc_remove(struct inode *, struct dentry *);
498:	static int nfs3_proc_rename_done(struct rpc_task *, struct inode *, struct inode *);
492:	static void nfs3_proc_rename_rpc_prepare(struct rpc_task *, struct nfs_renamedata *);
485:	static void nfs3_proc_rename_setup(struct rpc_message *, struct dentry *, struct dentry *);
627:	static int nfs3_proc_rmdir(struct inode *, const struct qstr *);
126:	static int nfs3_proc_setattr(struct dentry *, struct nfs_fattr *, struct iattr *);
777:	static int nfs3_proc_statfs(struct nfs_server *, struct nfs_fh *, struct nfs_fsstat *);
546:	static int nfs3_proc_symlink(struct inode *, struct dentry *, struct page *, unsigned int, struct iattr *);
474:	static int nfs3_proc_unlink_done(struct rpc_task *, struct inode *);
468:	static void nfs3_proc_unlink_rpc_prepare(struct rpc_task *, struct nfs_unlinkdata *);
461:	static void nfs3_proc_unlink_setup(struct rpc_message *, struct dentry *, struct inode *);
893:	static void nfs3_proc_write_setup(struct nfs_pgio_header *, struct rpc_message *, struct rpc_clnt **);
846:	static int nfs3_read_done(struct rpc_task *, struct nfs_pgio_header *);
879:	static int nfs3_write_done(struct rpc_task *, struct nfs_pgio_header *);

File fs/nfs/nfs3super.c:
28:	static void exit_nfs_v3(void);
22:	static int init_nfs_v3(void);

File fs/nfs/nfs3xdr.c:
1967:	int nfs3_decode_dirent(struct xdr_stream *, struct nfs_entry *, bool);
623:	static int decode_fattr3(struct xdr_stream *, struct nfs_fattr *, struct user_namespace *);
747:	static int decode_wcc_data(struct xdr_stream *, struct nfs_fattr *, struct user_namespace *);
536:	static void encode_sattr3(struct xdr_stream *, const struct iattr *, struct user_namespace *);
1520:	static int nfs3_xdr_dec_access3res(struct rpc_rqst *, struct xdr_stream *, void *);
2329:	static int nfs3_xdr_dec_commit3res(struct rpc_rqst *, struct xdr_stream *, void *);
1777:	static int nfs3_xdr_dec_create3res(struct rpc_rqst *, struct xdr_stream *, void *);
2226:	static int nfs3_xdr_dec_fsinfo3res(struct rpc_rqst *, struct xdr_stream *, void *);
2150:	static int nfs3_xdr_dec_fsstat3res(struct rpc_rqst *, struct xdr_stream *, void *);
1393:	static int nfs3_xdr_dec_getattr3res(struct rpc_rqst *, struct xdr_stream *, void *);
1907:	static int nfs3_xdr_dec_link3res(struct rpc_rqst *, struct xdr_stream *, void *);
1471:	static int nfs3_xdr_dec_lookup3res(struct rpc_rqst *, struct xdr_stream *, void *);
2287:	static int nfs3_xdr_dec_pathconf3res(struct rpc_rqst *, struct xdr_stream *, void *);
1638:	static int nfs3_xdr_dec_read3res(struct rpc_rqst *, struct xdr_stream *, void *);
2084:	static int nfs3_xdr_dec_readdir3res(struct rpc_rqst *, struct xdr_stream *, void *);
1562:	static int nfs3_xdr_dec_readlink3res(struct rpc_rqst *, struct xdr_stream *, void *);
1819:	static int nfs3_xdr_dec_remove3res(struct rpc_rqst *, struct xdr_stream *, void *);
1861:	static int nfs3_xdr_dec_rename3res(struct rpc_rqst *, struct xdr_stream *, void *);
1430:	static int nfs3_xdr_dec_setattr3res(struct rpc_rqst *, struct xdr_stream *, void *);
1711:	static int nfs3_xdr_dec_write3res(struct rpc_rqst *, struct xdr_stream *, void *);
892:	static void nfs3_xdr_enc_access3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1314:	static void nfs3_xdr_enc_commit3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1036:	static void nfs3_xdr_enc_create3args(struct rpc_rqst *, struct xdr_stream *, const void *);
811:	static void nfs3_xdr_enc_getattr3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1206:	static void nfs3_xdr_enc_link3args(struct rpc_rqst *, struct xdr_stream *, const void *);
868:	static void nfs3_xdr_enc_lookup3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1054:	static void nfs3_xdr_enc_mkdir3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1152:	static void nfs3_xdr_enc_mknod3args(struct rpc_rqst *, struct xdr_stream *, const void *);
940:	static void nfs3_xdr_enc_read3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1239:	static void nfs3_xdr_enc_readdir3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1282:	static void nfs3_xdr_enc_readdirplus3args(struct rpc_rqst *, struct xdr_stream *, const void *);
908:	static void nfs3_xdr_enc_readlink3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1169:	static void nfs3_xdr_enc_remove3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1186:	static void nfs3_xdr_enc_rename3args(struct rpc_rqst *, struct xdr_stream *, const void *);
851:	static void nfs3_xdr_enc_setattr3args(struct rpc_rqst *, struct xdr_stream *, const void *);
1087:	static void nfs3_xdr_enc_symlink3args(struct rpc_rqst *, struct xdr_stream *, const void *);
986:	static void nfs3_xdr_enc_write3args(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/nfs/nfs42proc.c:
131:	int nfs42_proc_allocate(struct file *, loff_t, loff_t);
1107:	int nfs42_proc_clone(struct file *, struct file *, loff_t, loff_t, loff_t);
411:	ssize_t nfs42_proc_copy(struct file *, loff_t, struct file *, loff_t, size_t, struct nl4_server *, nfs4_stateid *, bool);
623:	int nfs42_proc_copy_notify(struct file *, struct file *, struct nfs42_copy_notify_res *);
152:	int nfs42_proc_deallocate(struct file *, loff_t, loff_t);
1347:	ssize_t nfs42_proc_getxattr(struct inode *, const char *, void *, size_t);
1004:	int nfs42_proc_layouterror(struct pnfs_layout_segment *, const struct nfs42_layout_error *, size_t);
848:	int nfs42_proc_layoutstats_generic(struct nfs_server *, struct nfs42_layoutstat_data *);
1410:	ssize_t nfs42_proc_listxattrs(struct inode *, void *, size_t, u64 *, bool *);
708:	loff_t nfs42_proc_llseek(struct file *, loff_t, int);
1428:	int nfs42_proc_removexattr(struct inode *, const char *);
1393:	int nfs42_proc_setxattr(struct inode *, const char *, const void *, size_t, int);
175:	static int handle_async_copy(struct nfs42_copy_res *, struct nfs_server *, struct nfs_server *, struct file *, struct file *, nfs4_stateid *, bool *);
290:	static void nfs42_copy_dest_done(struct inode *, loff_t, loff_t);
536:	static int nfs42_do_offload_cancel_async(struct file *, nfs4_stateid *);
525:	static void nfs42_free_offloadcancel_data(void *);
930:	static void nfs42_layouterror_done(struct rpc_task *, void *);
907:	static void nfs42_layouterror_prepare(struct rpc_task *, void *);
991:	static void nfs42_layouterror_release(void *);
760:	static void nfs42_layoutstat_done(struct rpc_task *, void *);
739:	static void nfs42_layoutstat_prepare(struct rpc_task *, void *);
822:	static void nfs42_layoutstat_release(void *);
513:	static void nfs42_offload_cancel_done(struct rpc_task *, void *);
504:	static void nfs42_offload_cancel_prepare(struct rpc_task *, void *);
98:	static int nfs42_proc_fallocate(struct rpc_message *, struct file *, loff_t, loff_t);
255:	static int process_copy_commit(struct file *, loff_t, struct nfs42_copy_res *);

File fs/nfs/nfs42xattr.c:
688:	void nfs4_xattr_cache_add(struct inode *, const char *, const char *, struct page **, ssize_t);
1048:	void nfs4_xattr_cache_exit(void);
608:	ssize_t nfs4_xattr_cache_get(struct inode *, const char *, char *, ssize_t);
994:	int nfs4_xattr_cache_init(void);
648:	ssize_t nfs4_xattr_cache_list(struct inode *, char *, ssize_t);
720:	void nfs4_xattr_cache_remove(struct inode *, const char *);
739:	void nfs4_xattr_cache_set_list(struct inode *, const char *, ssize_t);
770:	void nfs4_xattr_cache_zap(struct inode *);
823:	static enum lru_status cache_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
888:	static enum lru_status entry_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
175:	static struct nfs4_xattr_entry *nfs4_xattr_alloc_entry(const char *, const void *, struct page **, size_t);
879:	static unsigned long nfs4_xattr_cache_count(struct shrinker *, struct shrink_control *);
982:	static void nfs4_xattr_cache_init_once(void *);
858:	static unsigned long nfs4_xattr_cache_scan(struct shrinker *, struct shrink_control *);
384:	static void nfs4_xattr_discard_cache(struct nfs4_xattr_cache *);
969:	static unsigned long nfs4_xattr_entry_count(struct shrinker *, struct shrink_control *);
939:	static unsigned long nfs4_xattr_entry_scan(struct shrinker *, struct shrink_control *);
426:	static struct nfs4_xattr_cache *nfs4_xattr_get_cache(struct inode *, int);
504:	static struct nfs4_xattr_bucket *nfs4_xattr_hash_bucket(struct nfs4_xattr_cache *, const char *);
309:	static int nfs4_xattr_set_listcache(struct nfs4_xattr_cache *, struct nfs4_xattr_entry *);

File fs/nfs/nfs42xdr.c:
1187:	static int decode_clone(struct xdr_stream *);
970:	static int decode_copy(struct xdr_stream *, struct nfs42_copy_res *);
278:	static void encode_nl4_server(struct xdr_stream *, const struct nl4_server *);
1200:	static int nfs4_xdr_dec_allocate(struct rpc_rqst *, struct xdr_stream *, void *);
1426:	static int nfs4_xdr_dec_clone(struct rpc_rqst *, struct xdr_stream *, void *);
1228:	static int nfs4_xdr_dec_copy(struct rpc_rqst *, struct xdr_stream *, void *);
1289:	static int nfs4_xdr_dec_copy_notify(struct rpc_rqst *, struct xdr_stream *, void *);
1315:	static int nfs4_xdr_dec_deallocate(struct rpc_rqst *, struct xdr_stream *, void *);
1543:	static int nfs4_xdr_dec_getxattr(struct rpc_rqst *, struct xdr_stream *, void *);
1461:	static int nfs4_xdr_dec_layouterror(struct rpc_rqst *, struct xdr_stream *, void *);
1395:	static int nfs4_xdr_dec_layoutstats(struct rpc_rqst *, struct xdr_stream *, void *);
1584:	static int nfs4_xdr_dec_listxattrs(struct rpc_rqst *, struct xdr_stream *, void *);
1263:	static int nfs4_xdr_dec_offload_cancel(struct rpc_rqst *, struct xdr_stream *, void *);
1343:	static int nfs4_xdr_dec_read_plus(struct rpc_rqst *, struct xdr_stream *, void *);
1622:	static int nfs4_xdr_dec_removexattr(struct rpc_rqst *, struct xdr_stream *, void *);
1370:	static int nfs4_xdr_dec_seek(struct rpc_rqst *, struct xdr_stream *, void *);
1500:	static int nfs4_xdr_dec_setxattr(struct rpc_rqst *, struct xdr_stream *, void *);
657:	static void nfs4_xdr_enc_allocate(struct rpc_rqst *, struct xdr_stream *, const void *);
834:	static void nfs4_xdr_enc_clone(struct rpc_rqst *, struct xdr_stream *, const void *);
689:	static void nfs4_xdr_enc_copy(struct rpc_rqst *, struct xdr_stream *, const void *);
731:	static void nfs4_xdr_enc_copy_notify(struct rpc_rqst *, struct xdr_stream *, const void *);
750:	static void nfs4_xdr_enc_deallocate(struct rpc_rqst *, struct xdr_stream *, const void *);
1522:	static void nfs4_xdr_enc_getxattr(struct rpc_rqst *, struct xdr_stream *, const void *);
856:	static void nfs4_xdr_enc_layouterror(struct rpc_rqst *, struct xdr_stream *, const void *);
811:	static void nfs4_xdr_enc_layoutstats(struct rpc_rqst *, struct xdr_stream *, const void *);
1564:	static void nfs4_xdr_enc_listxattrs(struct rpc_rqst *, struct xdr_stream *, const void *);
712:	static void nfs4_xdr_enc_offload_cancel(struct rpc_rqst *, struct xdr_stream *, const void *);
770:	static void nfs4_xdr_enc_read_plus(struct rpc_rqst *, struct xdr_stream *, const void *);
1607:	static void nfs4_xdr_enc_removexattr(struct rpc_rqst *, struct xdr_stream *, const void *);
792:	static void nfs4_xdr_enc_seek(struct rpc_rqst *, struct xdr_stream *, const void *);
1485:	static void nfs4_xdr_enc_setxattr(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/nfs/nfs4client.c:
337:	int nfs40_init_client(struct nfs_client *);
190:	void nfs40_shutdown_client(struct nfs_client *);
581:	int nfs40_walk_client_list(struct nfs_client *, struct nfs_client **, const struct cred *);
366:	int nfs41_init_client(struct nfs_client *);
178:	void nfs41_shutdown_client(struct nfs_client *);
748:	int nfs41_walk_client_list(struct nfs_client *, struct nfs_client **, const struct cred *);
198:	struct nfs_client *nfs4_alloc_client(const struct nfs_client_initdata *);
665:	bool nfs4_check_serverowner_major_id(struct nfs41_server_owner *, struct nfs41_server_owner *);
1217:	struct nfs_server *nfs4_create_referral_server(struct fs_context *);
1183:	struct nfs_server *nfs4_create_server(struct fs_context *);
702:	int nfs4_detect_session_trunking(struct nfs_client *, struct nfs41_exchange_id_res *, struct rpc_xprt *);
807:	struct nfs_client *nfs4_find_client_ident(struct net *, int);
851:	struct nfs_client *nfs4_find_client_sessionid(struct net *, const struct sockaddr *, struct nfs4_sessionid *, u32);
132:	struct rpc_clnt *nfs4_find_or_create_ds_client(struct nfs_client *, struct inode *);
298:	void nfs4_free_client(struct nfs_client *);
441:	struct nfs_client *nfs4_init_client(struct nfs_client *, const struct nfs_client_initdata *);
1063:	void nfs4_server_set_init_caps(struct nfs_server *);
963:	struct nfs_client *nfs4_set_ds_client(struct nfs_server *, const struct __kernel_sockaddr_storage *, int, int, unsigned int, unsigned int, u32);
1306:	int nfs4_update_server(struct nfs_server *, const char *, struct __kernel_sockaddr_storage *, size_t, struct net *);
791:	static void nfs4_destroy_server(struct nfs_server *);
524:	static int nfs4_match_client(struct nfs_client *, struct nfs_client *, struct nfs_client **, struct nfs_net *);
1081:	static int nfs4_server_common_setup(struct nfs_server *, struct nfs_fh *, bool);
891:	static int nfs4_set_client(struct nfs_server *, const char *, const struct __kernel_sockaddr_storage *, const size_t, const char *, int, const struct rpc_timeout *, u32, unsigned int, unsigned int, struct net *);

File fs/nfs/nfs4file.c:
424:	void nfs42_ssc_register_ops(void);
435:	void nfs42_ssc_unregister_ops(void);
406:	static void __nfs42_ssc_close(struct file *);
316:	static struct file *__nfs42_ssc_open(struct vfsmount *, struct nfs_fh *, nfs4_stateid *);
219:	static long nfs42_fallocate(struct file *, int, loff_t, loff_t);
239:	static loff_t nfs42_remap_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
189:	static ssize_t nfs4_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
110:	static int nfs4_file_flush(struct file *, fl_owner_t);
203:	static loff_t nfs4_file_llseek(struct file *, loff_t, int);
28:	static int nfs4_file_open(struct inode *, struct file *);
441:	static int nfs4_setlease(struct file *, long, struct file_lock **, void **);

File fs/nfs/nfs4getroot.c:
13:	int nfs4_get_rootfh(struct nfs_server *, struct nfs_fh *, bool);

File fs/nfs/nfs4idmap.c:
141:	void nfs_fattr_free_names(struct nfs_fattr *);
89:	void nfs_fattr_init_names(struct nfs_fattr *, struct nfs4_string *, struct nfs4_string *);
157:	void nfs_fattr_map_and_free_names(struct nfs_server *, struct nfs_fattr *);
496:	void nfs_idmap_delete(struct nfs_client *);
197:	int nfs_idmap_init(void);
455:	int nfs_idmap_new(struct nfs_client *);
243:	void nfs_idmap_quit(void);
793:	int nfs_map_gid_to_group(const struct nfs_server *, kgid_t, char *, size_t);
762:	int nfs_map_group_to_gid(const struct nfs_server *, const char *, size_t, kgid_t *);
745:	int nfs_map_name_to_uid(const struct nfs_server *, const char *, size_t, kuid_t *);
165:	int nfs_map_string_to_numeric(const char *, size_t, __u32 *);
779:	int nfs_map_uid_to_name(const struct nfs_server *, kuid_t, char *, size_t);
722:	static void idmap_pipe_destroy_msg(struct rpc_pipe_msg *);
665:	static ssize_t idmap_pipe_downcall(struct file *, const char *, size_t);
734:	static void idmap_release_pipe(struct inode *);
305:	static ssize_t nfs_idmap_get_key(const char *, size_t, const char *, void *, size_t, struct idmap *);
580:	static int nfs_idmap_legacy_upcall(struct key *, void *);
435:	static int nfs_idmap_pipe_create(struct dentry *, struct rpc_pipe_dir_object *);
423:	static void nfs_idmap_pipe_destroy(struct dentry *, struct rpc_pipe_dir_object *);

File fs/nfs/nfs4namespace.c:
261:	struct rpc_clnt *nfs4_negotiate_security(struct rpc_clnt *, struct inode *, const struct qstr *);
541:	int nfs4_replace_transport(struct nfs_server *, const struct nfs4_fs_locations *);
451:	int nfs4_submount(struct fs_context *, struct nfs_server *);
167:	size_t nfs_parse_server_name(char *, size_t, struct __kernel_sockaddr_storage *, size_t, struct net *, int);

File fs/nfs/nfs4proc.c:
9684:	size_t max_response_pages(struct nfs_server *);
944:	int nfs41_sequence_done(struct rpc_task *, struct nfs4_sequence_res *);
654:	int nfs4_async_handle_error(struct rpc_task *, struct nfs_server *, struct nfs4_state *, long *);
5561:	void nfs4_bitmask_set(__u32 *, const __u32 *, struct inode *, unsigned long);
5806:	int nfs4_buf_to_pages_noslab(const void *, size_t, struct page **);
1175:	int nfs4_call_sync(struct rpc_clnt *, struct nfs_server *, struct rpc_message *, struct nfs4_sequence_args *, struct nfs4_sequence_res *, int);
8982:	int nfs4_destroy_clientid(struct nfs_client *);
3724:	int nfs4_do_close(struct nfs4_state *, gfp_t, int);
591:	int nfs4_handle_exception(struct nfs_server *, int, struct nfs4_exception *);
707:	void nfs4_init_sequence(struct nfs4_sequence_args *, struct nfs4_sequence_res *, int, int);
7595:	int nfs4_lock_delegation_recall(struct file_lock *, struct nfs4_state *, const nfs4_stateid *);
2303:	int nfs4_open_delegation_recall(struct nfs_open_context *, struct nfs4_state *, const nfs4_stateid *);
8544:	int nfs4_proc_bind_conn_to_session(struct nfs_client *, const struct cred *);
5677:	int nfs4_proc_commit(struct file *, __u64, __u32, struct nfs_commitres *);
9257:	int nfs4_proc_create_session(struct nfs_client *, const struct cred *);
6717:	int nfs4_proc_delegreturn(struct inode *, const struct cred *, const nfs4_stateid *, int);
9294:	int nfs4_proc_destroy_session(struct nfs4_session *, const struct cred *);
8877:	int nfs4_proc_exchange_id(struct nfs_client *, const struct cred *);
8004:	int nfs4_proc_fs_locations(struct rpc_clnt *, struct inode *, const struct qstr *, struct nfs4_fs_locations *, struct page *);
8287:	int nfs4_proc_fsid_present(struct inode *, const struct cred *);
9055:	int nfs4_proc_get_lease_time(struct nfs_client *, struct nfs_fsinfo *);
8158:	int nfs4_proc_get_locations(struct nfs_server *, struct nfs_fh *, struct nfs4_fs_locations *, struct page *, const struct cred *);
4196:	int nfs4_proc_get_rootfh(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *, bool);
4323:	int nfs4_proc_getattr(struct nfs_server *, struct nfs_fh *, struct nfs_fattr *, struct inode *);
9921:	int nfs4_proc_getdeviceinfo(struct nfs_server *, struct pnfs_device *, const struct cred *);
9993:	int nfs4_proc_layoutcommit(struct nfs4_layoutcommit_data *, bool);
9705:	struct pnfs_layout_segment *nfs4_proc_layoutget(struct nfs4_layoutget *, long *);
9840:	int nfs4_proc_layoutreturn(struct nfs4_layoutreturn *, bool);
4511:	struct rpc_clnt *nfs4_proc_lookup_mountpoint(struct inode *, struct dentry *, struct nfs_fh *, struct nfs_fattr *);
8371:	int nfs4_proc_secinfo(struct inode *, const struct qstr *, struct nfs4_secinfo_flavors *);
6418:	int nfs4_proc_setclientid(struct nfs_client *, u32, unsigned short, const struct cred *, struct nfs4_setclientid_res *);
6491:	int nfs4_proc_setclientid_confirm(struct nfs_client *, struct nfs4_setclientid_res *, const struct cred *);
7581:	int nfs4_proc_setlease(struct file *, long, struct file_lock **, void **);
974:	int nfs4_sequence_done(struct rpc_task *, struct nfs4_sequence_res *);
3934:	int nfs4_server_capabilities(struct nfs_server *, struct nfs_fh *);
5350:	int nfs4_set_rw_stateid(nfs4_stateid *, const struct nfs_open_context *, const struct nfs_lock_context *, fmode_t);
1048:	int nfs4_setup_sequence(struct nfs_client *, struct nfs4_sequence_args *, struct nfs4_sequence_res *, struct rpc_task *);
8909:	void nfs4_test_session_trunk(struct rpc_clnt *, struct rpc_xprt *, void *);
1256:	void nfs4_update_changeattr(struct inode *, struct nfs4_change_info *, unsigned long, unsigned long);
1793:	int update_open_stateid(struct nfs4_state *, const nfs4_stateid *, const nfs4_stateid *, fmode_t);
8194:	static int _nfs40_proc_fsid_present(struct inode *, const struct cred *);
8030:	static int _nfs40_proc_get_locations(struct nfs_server *, struct nfs_fh *, struct nfs4_fs_locations *, struct page *, const struct cred *);
8240:	static int _nfs41_proc_fsid_present(struct inode *, const struct cred *);
8087:	static int _nfs41_proc_get_locations(struct nfs_server *, struct nfs_fh *, struct nfs4_fs_locations *, struct page *, const struct cred *);
9392:	static struct rpc_task *_nfs41_proc_sequence(struct nfs_client *, const struct cred *, struct nfs4_slot *, bool);
7234:	static int _nfs4_do_setlk(struct nfs4_state *, int, struct file_lock *, int);
2045:	static struct nfs4_state *_nfs4_opendata_to_nfs4_state(struct nfs4_opendata *);
8806:	static int _nfs4_proc_exchange_id(struct nfs_client *, const struct cred *, u32);
2386:	static int _nfs4_proc_open_confirm(struct nfs4_opendata *);
4716:	static int _nfs4_proc_remove(struct inode *, const struct qstr *, u32);
8320:	static int _nfs4_proc_secinfo(struct inode *, const struct qstr *, struct nfs4_secinfo_flavors *, bool);
685:	static void do_renew_lease(struct nfs_client *, unsigned long);
1112:	static void nfs40_call_sync_done(struct rpc_task *, void *);
1105:	static void nfs40_call_sync_prepare(struct rpc_task *, void *);
2788:	static int nfs40_open_expired(struct nfs4_state_owner *, struct nfs4_state *);
2796:	static int nfs40_test_and_free_expired_stateid(struct nfs_server *, nfs4_stateid *, const struct cred *);
994:	static void nfs41_call_sync_done(struct rpc_task *, void *);
984:	static void nfs41_call_sync_prepare(struct rpc_task *, void *);
10129:	static int nfs41_find_root_sec(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
10370:	static void nfs41_free_lock_state(struct nfs_server *, struct nfs4_lock_state *);
10325:	static int nfs41_free_stateid(struct nfs_server *, const nfs4_stateid *, const struct cred *, bool);
10287:	static void nfs41_free_stateid_done(struct rpc_task *, void *);
10278:	static void nfs41_free_stateid_prepare(struct rpc_task *, void *);
10300:	static void nfs41_free_stateid_release(void *);
7340:	static int nfs41_lock_expired(struct nfs4_state *, struct file_lock *);
10378:	static bool nfs41_match_stateid(const nfs4_stateid *, const nfs4_stateid *);
2971:	static int nfs41_open_expired(struct nfs4_state_owner *, struct nfs4_state *);
9436:	static int nfs41_proc_async_sequence(struct nfs_client *, const struct cred *, unsigned int);
9546:	static int nfs41_proc_reclaim_complete(struct nfs_client *, const struct cred *);
742:	static void nfs41_release_slot(struct nfs4_slot *);
9351:	static void nfs41_sequence_call_done(struct rpc_task *, void *);
9373:	static void nfs41_sequence_prepare(struct rpc_task *, void *);
807:	static int nfs41_sequence_process(struct rpc_task *, struct nfs4_sequence_res *);
9328:	static void nfs41_sequence_release(void *);
2804:	static int nfs41_test_and_free_expired_stateid(struct nfs_server *, nfs4_stateid *, const struct cred *);
618:	static int nfs4_async_handle_exception(struct rpc_task *, struct nfs_server *, int, struct nfs4_exception *);
3799:	static struct inode *nfs4_atomic_open(struct inode *, struct nfs_open_context *, int, struct iattr *, int *);
8433:	static void nfs4_bind_one_conn_to_session_done(struct rpc_task *, void *);
3817:	static void nfs4_close_context(struct nfs_open_context *, int);
3543:	static void nfs4_close_done(struct rpc_task *, void *);
3617:	static void nfs4_close_prepare(struct rpc_task *, void *);
5641:	static int nfs4_commit_done(struct rpc_task *, struct nfs_commit_data *);
5628:	static int nfs4_commit_done_cb(struct rpc_task *, struct nfs_commit_data *);
6530:	static void nfs4_delegreturn_done(struct rpc_task *, void *);
6612:	static void nfs4_delegreturn_prepare(struct rpc_task *, void *);
6595:	static void nfs4_delegreturn_release(void *);
10602:	static void nfs4_disable_swap(struct inode *);
4047:	static int nfs4_discover_trunking(struct nfs_server *, struct nfs_fh *);
4985:	static int nfs4_do_create(struct inode *, struct dentry *, struct nfs4_createdata *);
5274:	static int nfs4_do_fsinfo(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
468:	static int nfs4_do_handle_exception(struct nfs_server *, int, struct nfs4_exception *);
3215:	static struct nfs4_state *nfs4_do_open(struct inode *, struct nfs_open_context *, int, struct iattr *, struct nfs4_label *, int *);
3348:	static int nfs4_do_setattr(struct inode *, const struct cred *, struct nfs_fattr *, struct iattr *, struct nfs_open_context *, struct nfs4_label *);
6958:	static struct rpc_task *nfs4_do_unlck(struct file_lock *, struct nfs_open_context *, struct nfs4_lock_state *, struct nfs_seqid *);
10592:	static void nfs4_enable_swap(struct inode *);
8688:	static void nfs4_exchange_id_release(void *);
4141:	static int nfs4_find_root_sec(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
3527:	static void nfs4_free_closedata(void *);
9530:	static void nfs4_free_reclaim_complete_data(void *);
9031:	static void nfs4_get_lease_time_done(struct rpc_task *, void *);
9013:	static void nfs4_get_lease_time_prepare(struct rpc_task *, void *);
6266:	static size_t nfs4_get_uniquifier(struct nfs_client *, char *, size_t);
2248:	static int nfs4_handle_delegation_recall_error(struct nfs_server *, struct nfs4_state *, const nfs4_stateid *, struct file_lock *, int);
6341:	static int nfs4_init_uniform_client_string(struct nfs_client *);
9949:	static void nfs4_layoutcommit_done(struct rpc_task *, void *);
9937:	static void nfs4_layoutcommit_prepare(struct rpc_task *, void *);
9974:	static void nfs4_layoutcommit_release(void *);
9588:	static void nfs4_layoutget_done(struct rpc_task *, void *);
9579:	static void nfs4_layoutget_prepare(struct rpc_task *, void *);
9690:	static void nfs4_layoutget_release(void *);
9776:	static void nfs4_layoutreturn_done(struct rpc_task *, void *);
9764:	static void nfs4_layoutreturn_prepare(struct rpc_task *, void *);
9818:	static void nfs4_layoutreturn_release(void *);
10564:	static ssize_t nfs4_listxattr(struct dentry *, char *, size_t);
7144:	static void nfs4_lock_done(struct rpc_task *, void *);
7307:	static int nfs4_lock_expired(struct nfs4_state *, struct file_lock *);
7103:	static void nfs4_lock_prepare(struct rpc_task *, void *);
7287:	static int nfs4_lock_reclaim(struct nfs4_state *, struct file_lock *);
7192:	static void nfs4_lock_release(void *);
6880:	static void nfs4_locku_done(struct rpc_task *, void *);
6925:	static void nfs4_locku_prepare(struct rpc_task *, void *);
6870:	static void nfs4_locku_release_calldata(void *);
4096:	static int nfs4_lookup_root(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
165:	static int nfs4_map_errors(int);
10395:	static bool nfs4_match_stateid(const nfs4_stateid *, const nfs4_stateid *);
2344:	static void nfs4_open_confirm_done(struct rpc_task *, void *);
2336:	static void nfs4_open_confirm_prepare(struct rpc_task *, void *);
2359:	static void nfs4_open_confirm_release(void *);
2493:	static void nfs4_open_done(struct rpc_task *, void *);
2762:	static int nfs4_open_expired(struct nfs4_state_owner *, struct nfs4_state *);
2425:	static void nfs4_open_prepare(struct rpc_task *, void *);
2233:	static int nfs4_open_reclaim(struct nfs4_state_owner *, struct nfs4_state *);
2161:	static int nfs4_open_recover(struct nfs4_opendata *, struct nfs4_state *);
2133:	static int nfs4_open_recover_helper(struct nfs4_opendata *, fmode_t);
2524:	static void nfs4_open_release(void *);
1348:	static struct nfs4_opendata *nfs4_opendata_alloc(struct dentry *, struct nfs4_state_owner *, fmode_t, int, const struct nfs4_open_createattrs *, enum open_claim_type4, gfp_t);
1929:	static void nfs4_opendata_check_deleg(struct nfs4_opendata *, struct nfs4_state *);
1471:	static void nfs4_opendata_put(struct nfs4_opendata *);
2072:	static struct nfs4_state *nfs4_opendata_to_nfs4_state(struct nfs4_opendata *);
799:	static void nfs4_probe_sequence(struct nfs_client *, const struct cred *, struct nfs4_slot *);
4610:	static int nfs4_proc_access(struct inode *, struct nfs_access_entry *, const struct cred *);
5746:	static int nfs4_proc_async_renew(struct nfs_client *, const struct cred *, unsigned int);
8535:	static int nfs4_proc_bind_conn_to_session_callback(struct rpc_clnt *, struct rpc_xprt *, void *);
5620:	static void nfs4_proc_commit_rpc_prepare(struct rpc_task *, struct nfs_commit_data *);
5648:	static void nfs4_proc_commit_setup(struct nfs_commit_data *, struct rpc_message *, struct rpc_clnt **);
4687:	static int nfs4_proc_create(struct inode *, struct dentry *, struct iattr *, int);
5293:	static int nfs4_proc_fsinfo(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
6018:	static ssize_t nfs4_proc_get_acl(struct inode *, void *, size_t, enum nfs4_acl_type);
4217:	static int nfs4_proc_get_root(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
4929:	static int nfs4_proc_link(struct inode *, struct inode *, const struct qstr *);
7505:	static int nfs4_proc_lock(struct file *, int, struct file_lock *);
4496:	static int nfs4_proc_lookup(struct inode *, struct dentry *, struct nfs_fh *, struct nfs_fattr *);
4450:	static int nfs4_proc_lookup_common(struct rpc_clnt **, struct inode *, struct dentry *, struct nfs_fh *, struct nfs_fattr *);
4559:	static int nfs4_proc_lookupp(struct inode *, struct nfs_fh *, struct nfs_fattr *);
5076:	static int nfs4_proc_mkdir(struct inode *, struct dentry *, struct iattr *);
5195:	static int nfs4_proc_mknod(struct inode *, struct dentry *, struct iattr *, dev_t);
5334:	static int nfs4_proc_pathconf(struct nfs_server *, struct nfs_fh *, struct nfs_pathconf *);
5481:	static int nfs4_proc_pgio_rpc_prepare(struct rpc_task *, struct nfs_pgio_header *);
5470:	static void nfs4_proc_read_setup(struct nfs_pgio_header *, struct rpc_message *);
5144:	static int nfs4_proc_readdir(struct nfs_readdir_arg *, struct nfs_readdir_res *);
4667:	static int nfs4_proc_readlink(struct inode *, struct page *, unsigned int, unsigned int);
4747:	static int nfs4_proc_remove(struct inode *, struct dentry *);
4856:	static int nfs4_proc_rename_done(struct rpc_task *, struct inode *, struct inode *);
4848:	static void nfs4_proc_rename_rpc_prepare(struct rpc_task *, struct nfs_renamedata *);
4830:	static void nfs4_proc_rename_setup(struct rpc_message *, struct dentry *, struct dentry *);
5770:	static int nfs4_proc_renew(struct nfs_client *, const struct cred *);
4770:	static int nfs4_proc_rmdir(struct inode *, const struct qstr *);
9452:	static int nfs4_proc_sequence(struct nfs_client *, const struct cred *);
6093:	static int nfs4_proc_set_acl(struct inode *, const void *, size_t, enum nfs4_acl_type);
4357:	static int nfs4_proc_setattr(struct dentry *, struct nfs_fattr *, struct iattr *);
7386:	static int nfs4_proc_setlk(struct nfs4_state *, int, struct file_lock *);
5241:	static int nfs4_proc_statfs(struct nfs_server *, struct nfs_fh *, struct nfs_fsstat *);
5036:	static int nfs4_proc_symlink(struct inode *, struct dentry *, struct page *, unsigned int, struct iattr *);
4813:	static int nfs4_proc_unlink_done(struct rpc_task *, struct inode *);
4805:	static void nfs4_proc_unlink_rpc_prepare(struct rpc_task *, struct nfs_unlinkdata *);
4786:	static void nfs4_proc_unlink_setup(struct rpc_message *, struct dentry *, struct inode *);
5594:	static void nfs4_proc_write_setup(struct nfs_pgio_header *, struct rpc_message *, struct rpc_clnt **);
5441:	static int nfs4_read_done(struct rpc_task *, struct nfs_pgio_header *);
5387:	static int nfs4_read_done_cb(struct rpc_task *, struct nfs_pgio_header *);
9514:	static void nfs4_reclaim_complete_done(struct rpc_task *, void *);
9477:	static void nfs4_reclaim_complete_prepare(struct rpc_task *, void *);
7667:	static void nfs4_release_lockowner(struct nfs_server *, struct nfs4_lock_state *);
7630:	static void nfs4_release_lockowner_done(struct rpc_task *, void *);
7620:	static void nfs4_release_lockowner_prepare(struct rpc_task *, void *);
7653:	static void nfs4_release_lockowner_release(void *);
5715:	static void nfs4_renew_done(struct rpc_task *, void *);
5704:	static void nfs4_renew_release(void *);
7460:	static int nfs4_retry_setlk(struct nfs4_state *, int, struct file_lock *);
8710:	static struct rpc_task *nfs4_run_exchange_id(struct nfs_client *, const struct cred *, u32, struct rpc_xprt *);
2551:	static int nfs4_run_open_task(struct nfs4_opendata *, struct nfs_open_context *);
6396:	static void nfs4_setclientid_done(struct rpc_task *, void *);
2106:	static struct nfs_open_context *nfs4_state_find_open_context(struct nfs4_state *);
1213:	static void nfs4_update_changeattr_locked(struct inode *, struct nfs4_change_info *, unsigned long, unsigned long);
7436:	static int nfs4_wake_lock_waiter(wait_queue_entry_t *, unsigned int, int, void *);
5539:	static int nfs4_write_done(struct rpc_task *, struct nfs_pgio_header *);
5498:	static int nfs4_write_done_cb(struct rpc_task *, struct nfs_pgio_header *);
7703:	static int nfs4_xattr_get_nfs4_acl(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
7727:	static int nfs4_xattr_get_nfs4_dacl(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
7750:	static int nfs4_xattr_get_nfs4_sacl(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
7856:	static int nfs4_xattr_get_nfs4_user(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
7710:	static bool nfs4_xattr_list_nfs4_acl(struct dentry *);
7734:	static bool nfs4_xattr_list_nfs4_dacl(struct dentry *);
7757:	static bool nfs4_xattr_list_nfs4_sacl(struct dentry *);
7694:	static int nfs4_xattr_set_nfs4_acl(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
7718:	static int nfs4_xattr_set_nfs4_dacl(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
7741:	static int nfs4_xattr_set_nfs4_sacl(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
7817:	static int nfs4_xattr_set_nfs4_user(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
5852:	static void nfs4_zap_acl_attr(struct inode *);
10488:	static struct nfs_seqid *nfs_alloc_no_seqid(struct nfs_seqid_counter *, gfp_t);

File fs/nfs/nfs4renewd.c:
131:	void nfs4_kill_renewd(struct nfs_client *);
55:	void nfs4_renew_state(struct work_struct *);
114:	void nfs4_schedule_state_renewal(struct nfs_client *);
142:	void nfs4_set_lease_period(struct nfs_client *, unsigned long);

File fs/nfs/nfs4session.c:
437:	void nfs41_set_target_slotid(struct nfs4_slot_table *, u32);
510:	void nfs41_update_target_slotid(struct nfs4_slot_table *, struct nfs4_slot *, struct nfs4_sequence_res *);
383:	bool nfs41_wake_and_assign_slot(struct nfs4_slot_table *, struct nfs4_slot *);
403:	void nfs41_wake_slot_table(struct nfs4_slot_table *);
559:	struct nfs4_session *nfs4_alloc_session(struct nfs_client *);
242:	struct nfs4_slot *nfs4_alloc_slot(struct nfs4_slot_table *);
581:	void nfs4_destroy_session(struct nfs4_session *);
83:	void nfs4_free_slot(struct nfs4_slot_table *, struct nfs4_slot *);
631:	int nfs4_init_ds_session(struct nfs_client *, unsigned long);
622:	int nfs4_init_session(struct nfs_client *);
172:	struct nfs4_slot *nfs4_lookup_slot(struct nfs4_slot_table *, u32);
536:	int nfs4_setup_session_slot_tables(struct nfs4_session *);
350:	int nfs4_setup_slot_table(struct nfs4_slot_table *, unsigned int, const char *);
336:	void nfs4_shutdown_slot_table(struct nfs4_slot_table *);
62:	void nfs4_slot_tbl_drain_complete(struct nfs4_slot_table *);
222:	int nfs4_slot_wait_on_seqid(struct nfs4_slot_table *, u32, u32, unsigned long);
159:	bool nfs4_try_to_lock_slot(struct nfs4_slot_table *, struct nfs4_slot *);
357:	static bool nfs41_assign_slot(struct rpc_task *, void *);
297:	static int nfs4_realloc_slot_table(struct nfs4_slot_table *, u32, u32);
201:	static bool nfs4_slot_seqid_in_use(struct nfs4_slot_table *, u32, u32);

File fs/nfs/nfs4state.c:
156:	int nfs40_discover_server_trunking(struct nfs_client *, struct nfs_client **, const struct cred *);
352:	int nfs41_discover_server_trunking(struct nfs_client *, struct nfs_client **, const struct cred *);
2455:	void nfs41_handle_sequence_flag_errors(struct nfs_client *, u32, bool);
319:	int nfs41_init_clientid(struct nfs_client *, const struct cred *);
2387:	void nfs41_notify_server(struct nfs_client *);
1328:	int nfs4_client_recover_expired_lease(struct nfs_client *);
821:	void nfs4_close_state(struct nfs4_state *, fmode_t);
826:	void nfs4_close_sync(struct nfs4_state *, fmode_t);
1018:	bool nfs4_copy_open_stateid(nfs4_stateid *, struct nfs4_state *);
2281:	int nfs4_discover_server_trunking(struct nfs_client *, struct nfs_client **);
889:	void nfs4_free_lock_state(struct nfs_server *, struct nfs4_lock_state *);
654:	void nfs4_free_state_owners(struct list_head *);
394:	const struct cred *nfs4_get_clid_cred(struct nfs_client *);
192:	const struct cred *nfs4_get_machine_cred(struct nfs_client *);
719:	struct nfs4_state *nfs4_get_open_state(struct inode *, struct nfs4_state_owner *);
231:	const struct cred *nfs4_get_renew_cred(struct nfs_client *);
573:	struct nfs4_state_owner *nfs4_get_state_owner(struct nfs_server *, const struct cred *, gfp_t);
111:	int nfs4_init_clientid(struct nfs_client *, const struct cred *);
634:	void nfs4_purge_state_owners(struct nfs_server *, struct list_head *);
932:	void nfs4_put_lock_state(struct nfs4_lock_state *);
755:	void nfs4_put_open_state(struct nfs4_state *);
610:	void nfs4_put_state_owner(struct nfs4_state_owner *);
1299:	void nfs4_schedule_lease_moved_recovery(struct nfs_client *);
1245:	void nfs4_schedule_lease_recovery(struct nfs_client *);
1265:	int nfs4_schedule_migration_recovery(const struct nfs_server *);
1362:	void nfs4_schedule_path_down_recovery(struct nfs_client *);
2372:	void nfs4_schedule_session_recovery(struct nfs4_session *, int);
1204:	void nfs4_schedule_state_manager(struct nfs_client *);
1395:	int nfs4_schedule_stateid_recovery(const struct nfs_server *, struct nfs4_state *);
1041:	int nfs4_select_rw_stateid(struct nfs4_state *, fmode_t, const struct nfs_lock_context *, nfs4_stateid *, const struct cred **);
973:	int nfs4_set_lock_state(struct nfs4_state *, struct file_lock *);
1384:	int nfs4_state_mark_reclaim_nograce(struct nfs_client *, struct nfs4_state *);
681:	void nfs4_state_set_mode_locked(struct nfs4_state *, fmode_t);
1309:	int nfs4_wait_clnt_recover(struct nfs_client *);
1073:	struct nfs_seqid *nfs_alloc_seqid(struct nfs_seqid_counter *, gfp_t);
1105:	void nfs_free_seqid(struct nfs_seqid *);
1165:	void nfs_increment_lock_seqid(int, struct nfs_seqid *);
1146:	void nfs_increment_open_seqid(int, struct nfs_seqid *);
1439:	void nfs_inode_find_state_and_recover(struct inode *, const nfs4_stateid *);
1086:	void nfs_release_seqid(struct nfs_seqid *);
1171:	int nfs_wait_on_sequence(struct nfs_seqid *, struct rpc_task *);
776:	static void __nfs4_close(struct nfs4_state *, fmode_t, gfp_t, int);
310:	static void nfs41_finish_session_reset(struct nfs_client *);
292:	static int nfs4_begin_drain_session(struct nfs_client *);
1911:	static int nfs4_do_reclaim(struct nfs_client *, const struct nfs4_state_recovery_ops *);
264:	static void nfs4_end_drain_session(struct nfs_client *);
2041:	static int nfs4_establish_lease(struct nfs_client *);
955:	static void nfs4_fl_copy_lock(struct file_lock *, struct file_lock *);
963:	static void nfs4_fl_release_lock(struct file_lock *);
1992:	static int nfs4_handle_reclaim_lease_error(struct nfs_client *, int);
1870:	static int nfs4_recovery_handle_error(struct nfs_client *, int);
2731:	static int nfs4_run_state_manager(void *);
1848:	static void nfs4_state_end_reclaim_reboot(struct nfs_client *);
1779:	static void nfs4_state_mark_reclaim_helper(struct nfs_client *, int (*)(struct nfs_client *, struct nfs4_state *));
1368:	static int nfs4_state_mark_reclaim_reboot(struct nfs_client *, struct nfs4_state *);
2102:	static int nfs4_try_migration(struct nfs_server *, const struct cred *);

File fs/nfs/nfs4super.c:
241:	int nfs4_get_referral_tree(struct fs_context *);
216:	int nfs4_try_get_tree(struct fs_context *);
142:	static int do_nfs4_mount(struct nfs_server *, struct fs_context *, const char *, const char *);
296:	static void exit_nfs_v4(void);
261:	static int init_nfs_v4(void);
62:	static void nfs4_evict_inode(struct inode *);
47:	static int nfs4_write_inode(struct inode *, struct writeback_control *);
127:	static void nfs_referral_loop_unprotect(void);

File fs/nfs/nfs4sysctl.c:
58:	int nfs4_register_sysctl(void);
66:	void nfs4_unregister_sysctl(void);

File fs/nfs/nfs4xdr.c:
7479:	int nfs4_decode_dirent(struct xdr_stream *, struct nfs_entry *, bool);
4327:	static int decode_access(struct xdr_stream *, u32 *, u32 *);
3534:	static int decode_attr_aclsupport(struct xdr_stream *, uint32_t *, uint32_t *);
3552:	static int decode_attr_case_insensitive(struct xdr_stream *, uint32_t *, uint32_t *);
3570:	static int decode_attr_case_preserving(struct xdr_stream *, uint32_t *, uint32_t *);
4897:	static int decode_attr_change_attr_type(struct xdr_stream *, uint32_t *, enum nfs4_change_attr_type *);
4880:	static int decode_attr_clone_blksize(struct xdr_stream *, uint32_t *, uint32_t *);
3486:	static int decode_attr_exclcreat_supported(struct xdr_stream *, uint32_t *, uint32_t *);
3332:	static int decode_attr_fh_expire_type(struct xdr_stream *, uint32_t *, uint32_t *);
3995:	static int decode_attr_group(struct xdr_stream *, uint32_t *, const struct nfs_server *, kgid_t *, struct nfs4_string *);
4860:	static int decode_attr_layout_blksize(struct xdr_stream *, uint32_t *, uint32_t *);
3392:	static int decode_attr_link_support(struct xdr_stream *, uint32_t *, uint32_t *);
3803:	static int decode_attr_maxfilesize(struct xdr_stream *, uint32_t *, uint64_t *);
3860:	static int decode_attr_maxread(struct xdr_stream *, uint32_t *, uint32_t *);
3883:	static int decode_attr_maxwrite(struct xdr_stream *, uint32_t *, uint32_t *);
4608:	static int decode_attr_mdsthreshold(struct xdr_stream *, uint32_t *, struct nfs4_threshold *);
3608:	static int decode_attr_mounted_on_fileid(struct xdr_stream *, uint32_t *, uint64_t *);
3928:	static int decode_attr_nlink(struct xdr_stream *, uint32_t *, uint32_t *);
3961:	static int decode_attr_owner(struct xdr_stream *, uint32_t *, const struct nfs_server *, kuid_t *, struct nfs4_string *);
4842:	static int decode_attr_pnfstype(struct xdr_stream *, uint32_t *, struct nfs_fsinfo *);
4029:	static int decode_attr_rdev(struct xdr_stream *, uint32_t *, dev_t *);
4210:	static int decode_attr_security_label(struct xdr_stream *, uint32_t *, struct nfs4_label *);
4113:	static int decode_attr_space_used(struct xdr_stream *, uint32_t *, uint64_t *);
3410:	static int decode_attr_symlink_support(struct xdr_stream *, uint32_t *, uint32_t *);
4156:	static int decode_attr_time_access(struct xdr_stream *, uint32_t *, struct timespec64 *);
4192:	static int decode_attr_time_delta(struct xdr_stream *, uint32_t *, struct timespec64 *);
4174:	static int decode_attr_time_metadata(struct xdr_stream *, uint32_t *, struct timespec64 *);
4259:	static int decode_attr_time_modify(struct xdr_stream *, uint32_t *, struct timespec64 *);
4277:	static int decode_attr_xattrsupport(struct xdr_stream *, uint32_t *, uint32_t *);
5731:	static int decode_chan_attrs(struct xdr_stream *, struct nfs4_channel_attrs *);
4407:	static int decode_commit(struct xdr_stream *, struct nfs_commitres *);
3185:	static int decode_compound_hdr(struct xdr_stream *, struct compound_hdr *);
4923:	static int decode_fsinfo(struct xdr_stream *, struct nfs_fsinfo *);
4639:	static int decode_getfattr_attrs(struct xdr_stream *, uint32_t *, struct nfs_fattr *, struct nfs_fh *, struct nfs4_fs_locations *, const struct nfs_server *);
4766:	static int decode_getfattr_generic(struct xdr_stream *, struct nfs_fattr *, struct nfs_fh *, struct nfs4_fs_locations *, const struct nfs_server *);
4987:	static int decode_getfh(struct xdr_stream *, struct nfs_fh *);
5976:	static int decode_layoutget(struct xdr_stream *, struct rpc_rqst *, struct nfs4_layoutget_res *);
6047:	static int decode_layoutreturn(struct xdr_stream *, struct nfs4_layoutreturn_res *);
5016:	static int decode_link(struct xdr_stream *, struct nfs4_change_info *);
5208:	static int decode_open(struct xdr_stream *, struct nfs_openres *);
3685:	static int decode_pathname(struct xdr_stream *, struct nfs4_pathname *);
5272:	static int decode_putfh(struct xdr_stream *);
5374:	static int decode_rename(struct xdr_stream *, struct nfs4_change_info *, struct nfs4_change_info *);
5389:	static int decode_renew(struct xdr_stream *);
5395:	static int decode_restorefh(struct xdr_stream *);
5578:	static int decode_secinfo_common(struct xdr_stream *, struct nfs4_secinfo_res *);
5837:	static int decode_sequence(struct xdr_stream *, struct nfs4_sequence_res *, struct rpc_rqst *);
5462:	static int decode_setattr(struct xdr_stream *);
1081:	static void encode_attrs(struct xdr_stream *, const struct iattr *, const struct nfs4_label *, const umode_t *, const struct nfs_server *, const uint32_t *);
1254:	static void encode_getattr(struct xdr_stream *, const __u32 *, const __u32 *, size_t, struct compound_hdr *);
1995:	static void encode_layoutget(struct xdr_stream *, const struct nfs4_layoutget_args *, struct compound_hdr *);
2059:	static void encode_layoutreturn(struct xdr_stream *, const struct nfs4_layoutreturn_args *, struct compound_hdr *);
1798:	static void encode_op_map(struct xdr_stream *, const struct nfs4_op_map *);
1536:	static void encode_open(struct xdr_stream *, const struct nfs_openargs *, struct compound_hdr *);
6180:	static int nfs4_xdr_dec_access(struct rpc_rqst *, struct xdr_stream *, void *);
7158:	static int nfs4_xdr_dec_bind_conn_to_session(struct rpc_rqst *, struct xdr_stream *, void *);
6523:	static int nfs4_xdr_dec_close(struct rpc_rqst *, struct xdr_stream *, void *);
6865:	static int nfs4_xdr_dec_commit(struct rpc_rqst *, struct xdr_stream *, void *);
6389:	static int nfs4_xdr_dec_create(struct rpc_rqst *, struct xdr_stream *, void *);
7190:	static int nfs4_xdr_dec_create_session(struct rpc_rqst *, struct xdr_stream *, void *);
7023:	static int nfs4_xdr_dec_delegreturn(struct rpc_rqst *, struct xdr_stream *, void *);
7222:	static int nfs4_xdr_dec_destroy_clientid(struct rpc_rqst *, struct xdr_stream *, void *);
7206:	static int nfs4_xdr_dec_destroy_session(struct rpc_rqst *, struct xdr_stream *, void *);
7174:	static int nfs4_xdr_dec_exchange_id(struct rpc_rqst *, struct xdr_stream *, void *);
7445:	static int nfs4_xdr_dec_free_stateid(struct rpc_rqst *, struct xdr_stream *, void *);
7059:	static int nfs4_xdr_dec_fs_locations(struct rpc_rqst *, struct xdr_stream *, void *);
7128:	static int nfs4_xdr_dec_fsid_present(struct rpc_rqst *, struct xdr_stream *, void *);
6890:	static int nfs4_xdr_dec_fsinfo(struct rpc_rqst *, struct xdr_stream *, void *);
7256:	static int nfs4_xdr_dec_get_lease_time(struct rpc_rqst *, struct xdr_stream *, void *);
6496:	static int nfs4_xdr_dec_getacl(struct rpc_rqst *, struct xdr_stream *, void *);
6428:	static int nfs4_xdr_dec_getattr(struct rpc_rqst *, struct xdr_stream *, void *);
7298:	static int nfs4_xdr_dec_getdeviceinfo(struct rpc_rqst *, struct xdr_stream *, void *);
7370:	static int nfs4_xdr_dec_layoutcommit(struct rpc_rqst *, struct xdr_stream *, void *);
7320:	static int nfs4_xdr_dec_layoutget(struct rpc_rqst *, struct xdr_stream *, void *);
7345:	static int nfs4_xdr_dec_layoutreturn(struct rpc_rqst *, struct xdr_stream *, void *);
6349:	static int nfs4_xdr_dec_link(struct rpc_rqst *, struct xdr_stream *, void *);
6674:	static int nfs4_xdr_dec_lock(struct rpc_rqst *, struct xdr_stream *, void *);
6698:	static int nfs4_xdr_dec_lockt(struct rpc_rqst *, struct xdr_stream *, void *);
6722:	static int nfs4_xdr_dec_locku(struct rpc_rqst *, struct xdr_stream *, void *);
6208:	static int nfs4_xdr_dec_lookup(struct rpc_rqst *, struct xdr_stream *, void *);
6268:	static int nfs4_xdr_dec_lookup_root(struct rpc_rqst *, struct xdr_stream *, void *);
6238:	static int nfs4_xdr_dec_lookupp(struct rpc_rqst *, struct xdr_stream *, void *);
6558:	static int nfs4_xdr_dec_open(struct rpc_rqst *, struct xdr_stream *, void *);
6592:	static int nfs4_xdr_dec_open_confirm(struct rpc_rqst *, struct xdr_stream *, void *);
6149:	static int nfs4_xdr_dec_open_downgrade(struct rpc_rqst *, struct xdr_stream *, void *);
6614:	static int nfs4_xdr_dec_open_noattr(struct rpc_rqst *, struct xdr_stream *, void *);
6910:	static int nfs4_xdr_dec_pathconf(struct rpc_rqst *, struct xdr_stream *, void *);
6807:	static int nfs4_xdr_dec_read(struct rpc_rqst *, struct xdr_stream *, void *);
6783:	static int nfs4_xdr_dec_readdir(struct rpc_rqst *, struct xdr_stream *, void *);
6758:	static int nfs4_xdr_dec_readlink(struct rpc_rqst *, struct xdr_stream *, void *);
7279:	static int nfs4_xdr_dec_reclaim_complete(struct rpc_rqst *, struct xdr_stream *, void *);
6743:	static int nfs4_xdr_dec_release_lockowner(struct rpc_rqst *, struct xdr_stream *, void *);
6295:	static int nfs4_xdr_dec_remove(struct rpc_rqst *, struct xdr_stream *, void *);
6319:	static int nfs4_xdr_dec_rename(struct rpc_rqst *, struct xdr_stream *, void *);
6975:	static int nfs4_xdr_dec_renew(struct rpc_rqst *, struct xdr_stream *, void *);
7103:	static int nfs4_xdr_dec_secinfo(struct rpc_rqst *, struct xdr_stream *, void *);
7398:	static int nfs4_xdr_dec_secinfo_no_name(struct rpc_rqst *, struct xdr_stream *, void *);
7238:	static int nfs4_xdr_dec_sequence(struct rpc_rqst *, struct xdr_stream *, void *);
6950:	static int nfs4_xdr_dec_server_caps(struct rpc_rqst *, struct xdr_stream *, void *);
6471:	static int nfs4_xdr_dec_setacl(struct rpc_rqst *, struct xdr_stream *, void *);
6646:	static int nfs4_xdr_dec_setattr(struct rpc_rqst *, struct xdr_stream *, void *);
6990:	static int nfs4_xdr_dec_setclientid(struct rpc_rqst *, struct xdr_stream *, void *);
7007:	static int nfs4_xdr_dec_setclientid_confirm(struct rpc_rqst *, struct xdr_stream *, void *);
6930:	static int nfs4_xdr_dec_statfs(struct rpc_rqst *, struct xdr_stream *, void *);
6419:	static int nfs4_xdr_dec_symlink(struct rpc_rqst *, struct xdr_stream *, void *);
7423:	static int nfs4_xdr_dec_test_stateid(struct rpc_rqst *, struct xdr_stream *, void *);
6834:	static int nfs4_xdr_dec_write(struct rpc_rqst *, struct xdr_stream *, void *);
2142:	static void nfs4_xdr_enc_access(struct rpc_rqst *, struct xdr_stream *, const void *);
2889:	static void nfs4_xdr_enc_bind_conn_to_session(struct rpc_rqst *, struct xdr_stream *, const void *);
2331:	static void nfs4_xdr_enc_close(struct rpc_rqst *, struct xdr_stream *, const void *);
2647:	static void nfs4_xdr_enc_commit(struct rpc_rqst *, struct xdr_stream *, const void *);
2282:	static void nfs4_xdr_enc_create(struct rpc_rqst *, struct xdr_stream *, const void *);
2923:	static void nfs4_xdr_enc_create_session(struct rpc_rqst *, struct xdr_stream *, const void *);
2792:	static void nfs4_xdr_enc_delegreturn(struct rpc_rqst *, struct xdr_stream *, const void *);
2957:	static void nfs4_xdr_enc_destroy_clientid(struct rpc_rqst *, struct xdr_stream *, const void *);
2940:	static void nfs4_xdr_enc_destroy_session(struct rpc_rqst *, struct xdr_stream *, const void *);
2906:	static void nfs4_xdr_enc_exchange_id(struct rpc_rqst *, struct xdr_stream *, const void *);
3159:	static void nfs4_xdr_enc_free_stateid(struct rpc_rqst *, struct xdr_stream *, const void *);
2815:	static void nfs4_xdr_enc_fs_locations(struct rpc_rqst *, struct xdr_stream *, const void *);
2867:	static void nfs4_xdr_enc_fsid_present(struct rpc_rqst *, struct xdr_stream *, const void *);
2665:	static void nfs4_xdr_enc_fsinfo(struct rpc_rqst *, struct xdr_stream *, const void *);
2992:	static void nfs4_xdr_enc_get_lease_time(struct rpc_rqst *, struct xdr_stream *, const void *);
2599:	static void nfs4_xdr_enc_getacl(struct rpc_rqst *, struct xdr_stream *, const void *);
2313:	static void nfs4_xdr_enc_getattr(struct rpc_rqst *, struct xdr_stream *, const void *);
3032:	static void nfs4_xdr_enc_getdeviceinfo(struct rpc_rqst *, struct xdr_stream *, const void *);
3081:	static void nfs4_xdr_enc_layoutcommit(struct rpc_rqst *, struct xdr_stream *, const void *);
3059:	static void nfs4_xdr_enc_layoutget(struct rpc_rqst *, struct xdr_stream *, const void *);
3103:	static void nfs4_xdr_enc_layoutreturn(struct rpc_rqst *, struct xdr_stream *, const void *);
2260:	static void nfs4_xdr_enc_link(struct rpc_rqst *, struct xdr_stream *, const void *);
2448:	static void nfs4_xdr_enc_lock(struct rpc_rqst *, struct xdr_stream *, const void *);
2466:	static void nfs4_xdr_enc_lockt(struct rpc_rqst *, struct xdr_stream *, const void *);
2484:	static void nfs4_xdr_enc_locku(struct rpc_rqst *, struct xdr_stream *, const void *);
2162:	static void nfs4_xdr_enc_lookup(struct rpc_rqst *, struct xdr_stream *, const void *);
2202:	static void nfs4_xdr_enc_lookup_root(struct rpc_rqst *, struct xdr_stream *, const void *);
2182:	static void nfs4_xdr_enc_lookupp(struct rpc_rqst *, struct xdr_stream *, const void *);
2353:	static void nfs4_xdr_enc_open(struct rpc_rqst *, struct xdr_stream *, const void *);
2381:	static void nfs4_xdr_enc_open_confirm(struct rpc_rqst *, struct xdr_stream *, const void *);
2427:	static void nfs4_xdr_enc_open_downgrade(struct rpc_rqst *, struct xdr_stream *, const void *);
2399:	static void nfs4_xdr_enc_open_noattr(struct rpc_rqst *, struct xdr_stream *, const void *);
2683:	static void nfs4_xdr_enc_pathconf(struct rpc_rqst *, struct xdr_stream *, const void *);
2558:	static void nfs4_xdr_enc_read(struct rpc_rqst *, struct xdr_stream *, const void *);
2537:	static void nfs4_xdr_enc_readdir(struct rpc_rqst *, struct xdr_stream *, const void *);
2516:	static void nfs4_xdr_enc_readlink(struct rpc_rqst *, struct xdr_stream *, const void *);
3014:	static void nfs4_xdr_enc_reclaim_complete(struct rpc_rqst *, struct xdr_stream *, const void *);
2499:	static void nfs4_xdr_enc_release_lockowner(struct rpc_rqst *, struct xdr_stream *, const void *);
2222:	static void nfs4_xdr_enc_remove(struct rpc_rqst *, struct xdr_stream *, const void *);
2240:	static void nfs4_xdr_enc_rename(struct rpc_rqst *, struct xdr_stream *, const void *);
2741:	static void nfs4_xdr_enc_renew(struct rpc_rqst *, struct xdr_stream *, const void *);
2848:	static void nfs4_xdr_enc_secinfo(struct rpc_rqst *, struct xdr_stream *, const void *);
3122:	static void nfs4_xdr_enc_secinfo_no_name(struct rpc_rqst *, struct xdr_stream *, const void *);
2974:	static void nfs4_xdr_enc_sequence(struct rpc_rqst *, struct xdr_stream *, const void *);
2721:	static void nfs4_xdr_enc_server_caps(struct rpc_rqst *, struct xdr_stream *, const void *);
6452:	static void nfs4_xdr_enc_setacl(struct rpc_rqst *, struct xdr_stream *, const void *);
2580:	static void nfs4_xdr_enc_setattr(struct rpc_rqst *, struct xdr_stream *, const void *);
2758:	static void nfs4_xdr_enc_setclientid(struct rpc_rqst *, struct xdr_stream *, const void *);
2775:	static void nfs4_xdr_enc_setclientid_confirm(struct rpc_rqst *, struct xdr_stream *, const void *);
2702:	static void nfs4_xdr_enc_statfs(struct rpc_rqst *, struct xdr_stream *, const void *);
2302:	static void nfs4_xdr_enc_symlink(struct rpc_rqst *, struct xdr_stream *, const void *);
3141:	static void nfs4_xdr_enc_test_stateid(struct rpc_rqst *, struct xdr_stream *, const void *);
2626:	static void nfs4_xdr_enc_write(struct rpc_rqst *, struct xdr_stream *, const void *);

File fs/nfs/nfsroot.c:
302:	int nfs_root_data(char **, char **);
137:	static int nfs_root_setup(char *);
172:	static int root_nfs_cat(char *, const char *, const size_t);
224:	static int root_nfs_data(char *);
192:	static int root_nfs_parse_options(char *, char *, const size_t);

File fs/nfs/pagelist.c:
132:	bool nfs_async_iocounter_wait(struct rpc_task *, struct nfs_lock_context *);
480:	struct nfs_page *nfs_create_request(struct nfs_open_context *, struct page *, unsigned int, unsigned int);
1448:	void nfs_destroy_nfspagecache(void);
579:	void nfs_free_request(struct nfs_page *);
629:	size_t nfs_generic_pg_test(struct nfs_pageio_descriptor *, struct nfs_page *, struct nfs_page *);
886:	int nfs_generic_pgio(struct nfs_pageio_descriptor *, struct nfs_pgio_header *);
1436:	int nfs_init_nfspagecache(void);
750:	int nfs_initiate_pgio(struct rpc_clnt *, struct nfs_pgio_header *, const struct cred *, const struct nfs_rpc_ops *, const struct rpc_call_ops *, int, int);
116:	int nfs_iocounter_wait(struct nfs_lock_context *);
272:	void nfs_page_clear_headlock(struct nfs_page *);
291:	int nfs_page_group_lock(struct nfs_page *);
156:	struct nfs_page *nfs_page_group_lock_head(struct nfs_page *);
228:	int nfs_page_group_lock_subrequests(struct nfs_page *);
350:	bool nfs_page_group_sync_on_bit(struct nfs_page *, unsigned int);
306:	void nfs_page_group_unlock(struct nfs_page *);
256:	int nfs_page_set_headlock(struct nfs_page *);
1275:	int nfs_pageio_add_request(struct nfs_pageio_descriptor *, struct nfs_page *);
1385:	void nfs_pageio_complete(struct nfs_pageio_descriptor *);
1410:	void nfs_pageio_cond_complete(struct nfs_pageio_descriptor *, unsigned long);
831:	void nfs_pageio_init(struct nfs_pageio_descriptor *, struct inode *, const struct nfs_pageio_ops *, const struct nfs_pgio_completion_ops *, const struct nfs_rw_ops *, size_t, int);
1356:	int nfs_pageio_resend(struct nfs_pageio_descriptor *, struct nfs_pgio_header *);
1431:	void nfs_pageio_stop_mirroring(struct nfs_pageio_descriptor *);
57:	void nfs_pgheader_init(struct nfs_pageio_descriptor *, struct nfs_pgio_header *, void (*)(struct nfs_pgio_header *));
43:	struct nfs_pgio_mirror *nfs_pgio_current_mirror(struct nfs_pageio_descriptor *);
653:	struct nfs_pgio_header *nfs_pgio_header_alloc(const struct nfs_rw_ops *);
685:	void nfs_pgio_header_free(struct nfs_pgio_header *);
595:	void nfs_release_request(struct nfs_page *);
80:	void nfs_set_pgio_error(struct nfs_pgio_header *, int, loff_t);
538:	void nfs_unlock_and_release_request(struct nfs_page *);
525:	void nfs_unlock_request(struct nfs_page *);
609:	int nfs_wait_on_request(struct nfs_page *);
434:	static struct nfs_page *__nfs_create_request(struct nfs_lock_context *, struct page *, unsigned int, unsigned int, unsigned int);
1160:	static int __nfs_pageio_add_request(struct nfs_pageio_descriptor *, struct nfs_page *);
496:	static struct nfs_page *nfs_create_subreq(struct nfs_page *, unsigned int, unsigned int, unsigned int);
1217:	static int nfs_do_recoalesce(struct nfs_pageio_descriptor *);
947:	static int nfs_generic_pg_pgios(struct nfs_pageio_descriptor *);
409:	static void nfs_page_group_destroy(struct kref *);
1139:	static void nfs_pageio_cleanup_request(struct nfs_pageio_descriptor *, struct nfs_page *);
741:	static void nfs_pgio_prepare(struct rpc_task *, void *);
804:	static void nfs_pgio_release(void *);
865:	static void nfs_pgio_result(struct rpc_task *, void *);

File fs/nfs/pnfs.c:
1330:	int _pnfs_return_layout(struct inode *);
411:	bool nfs4_layout_refresh_old_stateid(nfs4_stateid *, struct pnfs_layout_range *, struct inode *);
2379:	void nfs4_lgopen_release(struct nfs4_layoutget *);
3162:	void pnfs_cleanup_layoutcommit(struct nfs4_layoutcommit_data *);
1394:	int pnfs_commit_and_return_layout(struct inode *);
960:	void pnfs_destroy_all_layouts(struct nfs_client *);
785:	void pnfs_destroy_layout(struct nfs_inode *);
802:	void pnfs_destroy_layout_final(struct nfs_inode *);
932:	int pnfs_destroy_layouts_byclid(struct nfs_client *, bool);
905:	int pnfs_destroy_layouts_byfsid(struct nfs_client *, struct nfs_fsid *, bool);
2564:	void pnfs_error_mark_layout_for_return(struct inode *, struct pnfs_layout_segment *);
95:	const struct pnfs_layoutdriver_type *pnfs_find_layoutdriver(u32);
751:	void pnfs_free_lseg_list(struct list_head *);
1662:	void pnfs_generic_layout_insert_lseg(struct pnfs_layout_hdr *, struct pnfs_layout_segment *, bool (*)(const struct pnfs_layout_range *, const struct pnfs_layout_range *), bool (*)(struct pnfs_layout_segment *, struct pnfs_layout_segment *), struct list_head *);
2684:	void pnfs_generic_pg_check_layout(struct nfs_pageio_descriptor *);
2699:	void pnfs_generic_pg_check_range(struct nfs_pageio_descriptor *, struct nfs_page *);
2763:	void pnfs_generic_pg_cleanup(struct nfs_pageio_descriptor *);
2709:	void pnfs_generic_pg_init_read(struct nfs_pageio_descriptor *, struct nfs_page *);
2740:	void pnfs_generic_pg_init_write(struct nfs_pageio_descriptor *, struct nfs_page *, u64);
3071:	int pnfs_generic_pg_readpages(struct nfs_pageio_descriptor *);
2777:	size_t pnfs_generic_pg_test(struct nfs_pageio_descriptor *, struct nfs_page *, struct nfs_page *);
2926:	int pnfs_generic_pg_writepages(struct nfs_pageio_descriptor *);
3264:	int pnfs_generic_sync(struct inode *, bool);
264:	void pnfs_get_layout_hdr(struct pnfs_layout_hdr *);
2391:	struct pnfs_layout_segment *pnfs_layout_process(struct nfs4_layoutget *);
2670:	void pnfs_layout_return_unused_byclid(struct nfs_client *, enum pnfs_iomode);
3180:	int pnfs_layoutcommit_inode(struct inode *, bool);
1141:	void pnfs_layoutget_free(struct nfs4_layoutget *);
1166:	void pnfs_layoutreturn_free_lsegs(struct pnfs_layout_hdr *, const nfs4_stateid *, const struct pnfs_layout_range *, const nfs4_stateid *);
2971:	void pnfs_ld_read_done(struct nfs_pgio_header *);
2844:	void pnfs_ld_write_done(struct nfs_pgio_header *);
2311:	void pnfs_lgopen_prepare(struct nfs4_opendata *, struct nfs_open_context *);
457:	int pnfs_mark_layout_stateid_invalid(struct pnfs_layout_hdr *, struct list_head *);
707:	int pnfs_mark_matching_lsegs_invalid(struct pnfs_layout_hdr *, struct list_head *, const struct pnfs_layout_range *, u32);
2485:	int pnfs_mark_matching_lsegs_return(struct pnfs_layout_hdr *, struct list_head *, const struct pnfs_layout_range *, u32);
3270:	struct nfs4_threshold *pnfs_mdsthreshold_alloc(void);
2330:	void pnfs_parse_lgopen(struct inode *, struct nfs4_layoutget *, struct nfs_open_context *);
305:	void pnfs_put_layout_hdr(struct pnfs_layout_hdr *);
100:	void pnfs_put_layoutdriver(const struct pnfs_layoutdriver_type *);
595:	void pnfs_put_lseg(struct pnfs_layout_segment *);
2947:	int pnfs_read_done_resend_to_mds(struct nfs_pgio_header *);
3021:	void pnfs_read_resend_pnfs(struct nfs_pgio_header *, unsigned int);
216:	int pnfs_register_layoutdriver(struct pnfs_layoutdriver_type *);
3284:	int pnfs_report_layoutstat(struct inode *, gfp_t);
1420:	bool pnfs_roc(struct inode *, struct nfs4_layoutreturn_args *, struct nfs4_layoutreturn_res *, const struct cred *);
1528:	int pnfs_roc_done(struct rpc_task *, struct nfs4_layoutreturn_args **, struct nfs4_layoutreturn_res **, int *);
1572:	void pnfs_roc_release(struct nfs4_layoutreturn_args *, struct nfs4_layoutreturn_res *, int);
981:	void pnfs_set_layout_stateid(struct pnfs_layout_hdr *, const nfs4_stateid *, const struct cred *, bool);
3133:	void pnfs_set_layoutcommit(struct inode *, struct pnfs_layout_segment *, loff_t);
3126:	void pnfs_set_lo_fail(struct pnfs_layout_segment *);
249:	void pnfs_unregister_layoutdriver(struct pnfs_layoutdriver_type *);
1963:	struct pnfs_layout_segment *pnfs_update_layout(struct inode *, struct nfs_open_context *, loff_t, u64, enum pnfs_iomode, bool, gfp_t);
1604:	bool pnfs_wait_on_layoutreturn(struct inode *, struct rpc_task *);
2818:	int pnfs_write_done_resend_to_mds(struct nfs_pgio_header *);
160:	void set_pnfs_layoutdriver(struct nfs_server *, const struct nfs_fh *, struct nfs_fsinfo *);
107:	void unset_pnfs_layoutdriver(struct nfs_server *);
764:	static struct pnfs_layout_hdr *__pnfs_destroy_layout(struct nfs_inode *);
2228:	static struct pnfs_layout_hdr *_pnfs_grab_empty_layout(struct inode *, struct nfs_open_context *);
137:	static int ld_cmp(const void *, const void *);
1922:	static void nfs_layoutget_end(struct pnfs_layout_hdr *);
1083:	static struct nfs4_layoutget *pnfs_alloc_init_layoutget_args(struct inode *, struct nfs_open_context *, const nfs4_stateid *, const struct pnfs_layout_range *, gfp_t);
373:	static void pnfs_clear_layoutreturn_info(struct pnfs_layout_hdr *);
386:	static void pnfs_clear_layoutreturn_waitbit(struct pnfs_layout_hdr *);
1744:	static struct pnfs_layout_hdr *pnfs_find_alloc_layout(struct inode *, struct nfs_open_context *, gfp_t);
277:	static void pnfs_free_layout_hdr(struct pnfs_layout_hdr *);
830:	static int pnfs_layout_bulk_destroy_byserver_locked(struct nfs_client *, struct nfs_server *, struct list_head *);
495:	static void pnfs_layout_clear_fail_bit(struct pnfs_layout_hdr *, int);
870:	static int pnfs_layout_free_bulk_destroy_list(struct list_head *, bool);
563:	static void pnfs_layout_remove_lseg(struct pnfs_layout_hdr *, struct pnfs_layout_segment *);
2638:	static int pnfs_layout_return_unused_byserver(struct nfs_server *, void *);
487:	static void pnfs_layout_set_fail_bit(struct pnfs_layout_hdr *, int);
2957:	static void pnfs_ld_handle_read_error(struct nfs_pgio_header *);
2829:	static void pnfs_ld_handle_write_error(struct nfs_pgio_header *);
2531:	static void pnfs_mark_layout_for_return(struct inode *, const struct pnfs_layout_range *);
1194:	static bool pnfs_prepare_layoutreturn(struct pnfs_layout_hdr *, nfs4_stateid *, const struct cred **, enum pnfs_iomode *);
3064:	static void pnfs_readhdr_free(struct nfs_pgio_header *);
1238:	static int pnfs_send_layoutreturn(struct pnfs_layout_hdr *, const nfs4_stateid *, const struct cred **, enum pnfs_iomode, bool);
2919:	static void pnfs_writehdr_free(struct nfs_pgio_header *);

File fs/nfs/pnfs_dev.c:
231:	void nfs4_delete_deviceid(const struct pnfs_layoutdriver_type *, const struct nfs_client *, const struct nfs4_deviceid *);
372:	void nfs4_deviceid_mark_client_invalid(struct nfs_client *);
358:	void nfs4_deviceid_purge_client(const struct nfs_client *);
188:	struct nfs4_deviceid_node *nfs4_find_get_deviceid(struct nfs_server *, const struct nfs4_deviceid *, const struct cred *, gfp_t);
254:	void nfs4_init_deviceid_node(struct nfs4_deviceid_node *, struct nfs_server *, const struct nfs4_deviceid *);
294:	void nfs4_mark_deviceid_available(struct nfs4_deviceid_node *);
304:	void nfs4_mark_deviceid_unavailable(struct nfs4_deviceid_node *);
278:	bool nfs4_put_deviceid_node(struct nfs4_deviceid_node *);
314:	bool nfs4_test_deviceid_unavailable(struct nfs4_deviceid_node *);
173:	static struct nfs4_deviceid_node *__nfs4_find_get_deviceid(struct nfs_server *, const struct nfs4_deviceid *, long);

File fs/nfs/pnfs_nfs.c:
1043:	struct nfs4_pnfs_ds_addr *nfs4_decode_mp_ds_addr(struct net *, struct xdr_stream *, gfp_t);
766:	struct nfs4_pnfs_ds *nfs4_pnfs_ds_add(struct list_head *, gfp_t);
989:	int nfs4_pnfs_ds_connect(struct nfs_server *, struct nfs4_pnfs_ds *, struct nfs4_deviceid_node *, unsigned int, unsigned int, u32, u32);
701:	void nfs4_pnfs_ds_put(struct nfs4_pnfs_ds *);
840:	void nfs4_pnfs_v3_ds_connect_unload(void);
140:	struct pnfs_commit_array *pnfs_add_commit_array(struct pnfs_ds_commit_info *, struct pnfs_commit_array *, struct pnfs_layout_segment *);
97:	struct pnfs_commit_array *pnfs_alloc_commit_array(size_t, gfp_t);
120:	void pnfs_free_commit_array(struct pnfs_commit_array *);
78:	void pnfs_generic_clear_request_commit(struct nfs_page *, struct nfs_commit_info *);
507:	int pnfs_generic_commit_pagelist(struct inode *, struct list_head *, int, struct nfs_commit_info *, int (*)(struct nfs_commit_data *, int));
51:	void pnfs_generic_commit_release(void *);
227:	void pnfs_generic_ds_cinfo_destroy(struct pnfs_ds_commit_info *);
216:	void pnfs_generic_ds_cinfo_release_lseg(struct pnfs_ds_commit_info *, struct pnfs_layout_segment *);
32:	void pnfs_generic_prepare_to_resend_writes(struct nfs_commit_data *);
329:	void pnfs_generic_recover_commit_reqs(struct list_head *, struct nfs_commit_info *);
22:	void pnfs_generic_rw_release(void *);
277:	int pnfs_generic_scan_commit_lists(struct nfs_commit_info *, int);
385:	struct nfs_page *pnfs_generic_search_commit_reqs(struct nfs_commit_info *, struct page *);
42:	void pnfs_generic_write_commit_done(struct rpc_task *, void *);
1155:	void pnfs_layout_mark_request_commit(struct nfs_page *, struct pnfs_layout_segment *, struct nfs_commit_info *, u32);
1192:	int pnfs_nfs_generic_sync(struct inode *, bool);
402:	static struct pnfs_layout_segment *pnfs_bucket_get_committing(struct list_head *, struct pnfs_commit_bucket *, struct nfs_commit_info *);

File fs/nfs/proc.c:
689:	static int nfs_have_delegation(struct inode *, fmode_t);
667:	static int nfs_lock_check_bounds(const struct file_lock *);
645:	static void nfs_proc_commit_rpc_prepare(struct rpc_task *, struct nfs_commit_data *);
651:	static void nfs_proc_commit_setup(struct nfs_commit_data *, struct rpc_message *, struct rpc_clnt **);
241:	static int nfs_proc_create(struct inode *, struct dentry *, struct iattr *, int);
558:	static int nfs_proc_fsinfo(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
54:	static int nfs_proc_get_root(struct nfs_server *, struct nfs_fh *, struct nfs_fsinfo *);
103:	static int nfs_proc_getattr(struct nfs_server *, struct nfs_fh *, struct nfs_fattr *, struct inode *);
376:	static int nfs_proc_link(struct inode *, struct inode *, const struct qstr *);
658:	static int nfs_proc_lock(struct file *, int, struct file_lock *);
156:	static int nfs_proc_lookup(struct inode *, struct dentry *, struct nfs_fh *, struct nfs_fattr *);
449:	static int nfs_proc_mkdir(struct inode *, struct dentry *, struct iattr *);
270:	static int nfs_proc_mknod(struct inode *, struct dentry *, struct iattr *, dev_t);
589:	static int nfs_proc_pathconf(struct nfs_server *, struct nfs_fh *, struct nfs_pathconf *);
620:	static int nfs_proc_pgio_rpc_prepare(struct rpc_task *, struct nfs_pgio_header *);
614:	static void nfs_proc_read_setup(struct nfs_pgio_header *, struct rpc_message *);
502:	static int nfs_proc_readdir(struct nfs_readdir_arg *, struct nfs_readdir_res *);
187:	static int nfs_proc_readlink(struct inode *, struct page *, unsigned int, unsigned int);
314:	static int nfs_proc_remove(struct inode *, struct dentry *);
367:	static int nfs_proc_rename_done(struct rpc_task *, struct inode *, struct inode *);
361:	static void nfs_proc_rename_rpc_prepare(struct rpc_task *, struct nfs_renamedata *);
354:	static void nfs_proc_rename_setup(struct rpc_message *, struct dentry *, struct dentry *);
475:	static int nfs_proc_rmdir(struct inode *, const struct qstr *);
126:	static int nfs_proc_setattr(struct dentry *, struct nfs_fattr *, struct iattr *);
530:	static int nfs_proc_statfs(struct nfs_server *, struct nfs_fh *, struct nfs_fsstat *);
399:	static int nfs_proc_symlink(struct inode *, struct dentry *, struct page *, unsigned int, struct iattr *);
347:	static int nfs_proc_unlink_done(struct rpc_task *, struct inode *);
342:	static void nfs_proc_unlink_rpc_prepare(struct rpc_task *, struct nfs_unlinkdata *);
335:	static void nfs_proc_unlink_setup(struct rpc_message *, struct dentry *, struct inode *);
636:	static void nfs_proc_write_setup(struct nfs_pgio_header *, struct rpc_message *, struct rpc_clnt **);
597:	static int nfs_read_done(struct rpc_task *, struct nfs_pgio_header *);
627:	static int nfs_write_done(struct rpc_task *, struct nfs_pgio_header *);

File fs/nfs/read.c:
445:	void nfs_destroy_readpagecache(void);
433:	int nfs_init_readpagecache(void);
61:	void nfs_pageio_init_read(struct nfs_pageio_descriptor *, struct inode *, bool, const struct nfs_pgio_completion_ops *);
94:	void nfs_pageio_reset_read_mds(struct nfs_pageio_descriptor *);
332:	int nfs_read_folio(struct file *, struct folio *);
392:	void nfs_readahead(struct readahead_control *);
198:	static void nfs_async_read_error(struct list_head *, int);
188:	static void nfs_initiate_read(struct nfs_pgio_header *, struct rpc_message *, const struct nfs_rpc_ops *, struct rpc_task_setup *, int);
77:	static void nfs_pageio_complete_read(struct nfs_pageio_descriptor *);
141:	static void nfs_read_completion(struct nfs_pgio_header *);
38:	static struct nfs_pgio_header *nfs_readhdr_alloc(void);
47:	static void nfs_readhdr_free(struct nfs_pgio_header *);
218:	static int nfs_readpage_done(struct rpc_task *, struct nfs_pgio_header *, struct inode *);
111:	static void nfs_readpage_release(struct nfs_page *, int);
268:	static void nfs_readpage_result(struct rpc_task *, struct nfs_pgio_header *);
285:	static int readpage_async_filler(struct nfs_readdesc *, struct page *);

File fs/nfs/super.c:
748:	bool nfs_auth_info_match(const struct nfs_auth_info *, rpc_authflavor_t);
231:	int nfs_client_for_each_server(struct nfs_client *, int (*)(struct nfs_server *, void *), void *);
1254:	int nfs_get_tree_common(struct fs_context *);
1338:	void nfs_kill_super(struct super_block *);
1001:	int nfs_reconfigure(struct fs_context *);
183:	bool nfs_sb_active(struct super_block *);
195:	void nfs_sb_deactive(struct super_block *);
605:	int nfs_show_devname(struct seq_file *, struct dentry *);
536:	int nfs_show_options(struct seq_file *, struct dentry *);
622:	int nfs_show_path(struct seq_file *, struct dentry *);
632:	int nfs_show_stats(struct seq_file *, struct dentry *);
242:	int nfs_statfs(struct dentry *, struct kstatfs *);
948:	int nfs_try_get_tree(struct fs_context *);
728:	void nfs_umount_begin(struct super_block *);
137:	int register_nfs_fs(void);
172:	void unregister_nfs_fs(void);
1195:	static int nfs_compare_super(struct super_block *, struct fs_context *);
1126:	static int nfs_set_super(struct super_block *, struct fs_context *);
428:	static void nfs_show_mount_options(struct seq_file *, struct nfs_server *, int);
1382:	static int param_set_portnr(const char *, const struct kernel_param *);

File fs/nfs/symlink.c:
47:	static const char *nfs_get_link(struct dentry *, struct inode *, struct delayed_call *);
29:	static int nfs_symlink_filler(struct file *, struct folio *);

File fs/nfs/sysctl.c:
53:	int nfs_register_sysctl(void);
61:	void nfs_unregister_sysctl(void);

File fs/nfs/sysfs.c:
182:	void nfs_netns_sysfs_destroy(struct nfs_net *);
171:	void nfs_netns_sysfs_setup(struct nfs_net *, struct net *);
70:	void nfs_sysfs_exit(void);
56:	int nfs_sysfs_init(void);
133:	static const void *nfs_netns_client_namespace(const struct kobject *);
123:	static void nfs_netns_client_release(struct kobject *);
76:	static ssize_t nfs_netns_identifier_show(struct kobject *, struct kobj_attribute *, char *);
98:	static ssize_t nfs_netns_identifier_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
28:	static const struct kobj_ns_type_operations *nfs_netns_object_child_ns_type(const struct kobject *);
23:	static void nfs_netns_object_release(struct kobject *);

File fs/nfs/unlink.c:
338:	struct rpc_task *nfs_async_rename(struct inode *, struct inode *, struct dentry *, struct dentry *, void (*)(struct rpc_task *, struct nfs_renamedata *));
225:	void nfs_complete_unlink(struct dentry *, struct inode *);
441:	int nfs_sillyrename(struct inode *, struct dentry *);
263:	static void nfs_async_rename_done(struct rpc_task *, void *);
285:	static void nfs_async_rename_release(void *);
46:	static void nfs_async_unlink_done(struct rpc_task *, void *);
63:	static void nfs_async_unlink_release(void *);
241:	static void nfs_cancel_async_unlink(struct dentry *);
401:	static void nfs_complete_sillyrename(struct rpc_task *, struct nfs_renamedata *);
315:	static void nfs_rename_prepare(struct rpc_task *, void *);
76:	static void nfs_unlink_prepare(struct rpc_task *, void *);

File fs/nfs/write.c:
1662:	bool nfs_commit_end(struct nfs_mds_commit_info *);
89:	void nfs_commit_free(struct nfs_commit_data *);
1963:	int nfs_commit_inode(struct inode *, int);
1492:	void nfs_commit_prepare(struct rpc_task *, void *);
73:	struct nfs_commit_data *nfs_commitdata_alloc(void);
1671:	void nfs_commitdata_release(struct nfs_commit_data *);
1244:	bool nfs_ctx_key_to_expire(struct nfs_open_context *, struct inode *);
2192:	void nfs_destroy_writepagecache(void);
2012:	int nfs_filemap_write_and_wait_range(struct address_space *, loff_t, loff_t);
1184:	int nfs_flush_incompatible(struct file *, struct page *);
1917:	int nfs_generic_commit_list(struct inode *, struct list_head *, int, struct nfs_commit_info *);
927:	void nfs_init_cinfo(struct nfs_commit_info *, struct inode *, struct nfs_direct_req *);
1735:	void nfs_init_commit(struct nfs_commit_data *, struct list_head *, struct pnfs_layout_segment *, struct nfs_commit_info *);
2135:	int nfs_init_writepagecache(void);
1678:	int nfs_initiate_commit(struct rpc_clnt *, struct nfs_commit_data *, const struct nfs_rpc_ops *, const struct rpc_call_ops *, int, int);
506:	void nfs_join_page_group(struct nfs_page *, struct inode *);
1230:	int nfs_key_timeout_notify(struct file *, struct inode *);
942:	void nfs_mark_request_commit(struct nfs_page *, struct pnfs_layout_segment *, struct nfs_commit_info *, u32);
2111:	int nfs_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
1459:	void nfs_pageio_init_write(struct nfs_pageio_descriptor *, struct inode *, int, bool, const struct nfs_pgio_completion_ops *);
1475:	void nfs_pageio_reset_write_mds(struct nfs_pageio_descriptor *);
1028:	unsigned long nfs_reqs_to_commit(struct nfs_commit_info *);
885:	void nfs_request_add_commit_list(struct nfs_page *, struct nfs_commit_info *);
863:	void nfs_request_add_commit_list_locked(struct nfs_page *, struct list_head *, struct nfs_commit_info *);
907:	void nfs_request_remove_commit_list(struct nfs_page *, struct nfs_commit_info *);
1776:	void nfs_retry_commit(struct list_head *, struct pnfs_layout_segment *, struct nfs_commit_info *, u32);
1069:	int nfs_scan_commit(struct inode *, struct list_head *, struct nfs_commit_info *);
1035:	int nfs_scan_commit_list(struct list_head *, struct list_head *, struct nfs_commit_info *, int);
1361:	int nfs_updatepage(struct file *, struct page *, unsigned int, unsigned int);
2027:	int nfs_wb_all(struct inode *);
2048:	int nfs_wb_folio_cancel(struct inode *, struct folio *);
2076:	int nfs_wb_page(struct inode *, struct page *);
1969:	int nfs_write_inode(struct inode *, struct writeback_control *);
977:	int nfs_write_need_commit(struct nfs_pgio_header *);
1520:	void nfs_writeback_update_inode(struct nfs_pgio_header *);
682:	int nfs_writepage(struct page *, struct writeback_control *);
707:	int nfs_writepages(struct address_space *, struct writeback_control *);
1928:	static int __nfs_commit_inode(struct inode *, int, struct writeback_control *);
1433:	static void nfs_async_write_error(struct list_head *, int);
984:	static void nfs_async_write_init(struct nfs_pgio_header *);
1447:	static void nfs_async_write_reschedule_io(struct nfs_pgio_header *);
951:	static void nfs_clear_page_commit(struct page *);
1833:	static void nfs_commit_done(struct rpc_task *, void *);
1898:	static void nfs_commit_release(void *);
1842:	static void nfs_commit_release_pages(struct nfs_commit_data *);
1795:	static void nfs_commit_resched_write(struct nfs_commit_info *, struct nfs_page *);
652:	static int nfs_do_writepage(struct page *, struct writeback_control *, struct nfs_pageio_descriptor *);
422:	static void nfs_end_page_writeback(struct nfs_page *);
1403:	static void nfs_initiate_write(struct nfs_pgio_header *, struct rpc_message *, const struct nfs_rpc_ops *, struct rpc_task_setup *, int);
785:	static void nfs_inode_remove_request(struct nfs_page *);
702:	static void nfs_io_completion_commit(void *);
566:	static struct nfs_page *nfs_lock_and_join_requests(struct page *);
310:	static void nfs_mapping_set_error(struct page *, int);
232:	static struct nfs_page *nfs_page_find_head_request(struct page *);
1421:	static void nfs_redirty_request(struct nfs_page *);
989:	static void nfs_write_completion(struct nfs_pgio_header *);
593:	static void nfs_write_error(struct nfs_page *, int);
1535:	static int nfs_writeback_done(struct rpc_task *, struct nfs_pgio_header *, struct inode *);
1601:	static void nfs_writeback_result(struct rpc_task *, struct nfs_pgio_header *);
95:	static struct nfs_pgio_header *nfs_writehdr_alloc(void);
110:	static void nfs_writehdr_free(struct nfs_pgio_header *);
662:	static int nfs_writepage_locked(struct page *, struct writeback_control *);
692:	static int nfs_writepages_callback(struct page *, struct writeback_control *, void *);

File fs/nfs_common/grace.c:
54:	void locks_end_grace(struct lock_manager *);
90:	bool locks_in_grace(struct net *);
29:	void locks_start_grace(struct net *, struct lock_manager *);
96:	bool opens_in_grace(struct net *);
135:	static void exit_grace(void);
112:	static void grace_exit_net(struct net *);
103:	static int grace_init_net(struct net *);
129:	static int init_grace(void);

File fs/nfs_common/nfs_ssc.c:
28:	void nfs42_ssc_register(const struct nfs4_ssc_client_ops *);
42:	void nfs42_ssc_unregister(const struct nfs4_ssc_client_ops *);
60:	void nfs_ssc_register(const struct nfs_ssc_client_ops *);
74:	void nfs_ssc_unregister(const struct nfs_ssc_client_ops *);

File fs/nls/nls_base.c:
235:	int __register_nls(struct nls_table *, struct module *);
291:	struct nls_table *load_nls(char *);
532:	struct nls_table *load_nls_default(void);
296:	void unload_nls(struct nls_table *);
258:	int unregister_nls(struct nls_table *);
186:	int utf16s_to_utf8s(const wchar_t *, int, enum utf16_endian, u8 *, int);
86:	int utf32_to_utf8(unicode_t, u8 *, int);
55:	int utf8_to_utf32(const u8 *, int, unicode_t *);
132:	int utf8s_to_utf16s(const u8 *, int, enum utf16_endian, wchar_t *, int);
515:	static int char2uni(const unsigned char *, int, wchar_t *);
498:	static int uni2char(wchar_t, unsigned char *, int);

File fs/nls/nls_cp437.c:
358:	static int char2uni(const unsigned char *, int, wchar_t *);
379:	static void exit_nls_cp437(void);
374:	static int init_nls_cp437(void);
341:	static int uni2char(wchar_t, unsigned char *, int);

File fs/nls/nls_iso8859-1.c:
228:	static int char2uni(const unsigned char *, int, wchar_t *);
249:	static void exit_nls_iso8859_1(void);
244:	static int init_nls_iso8859_1(void);
211:	static int uni2char(wchar_t, unsigned char *, int);

File fs/notify/dnotify/dnotify.c:
153:	void dnotify_flush(struct file *, fl_owner_t);
261:	int fcntl_dirnotify(int, struct file *, unsigned long);
130:	static void dnotify_free_mark(struct fsnotify_mark *);
91:	static int dnotify_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
398:	static int dnotify_init(void);

File fs/notify/fanotify/fanotify.c:
402:	static int fanotify_encode_fh(struct fanotify_fh *, struct inode *, unsigned int, unsigned int *, gfp_t);
1027:	static void fanotify_free_event(struct fsnotify_group *, struct fsnotify_event *);
982:	static void fanotify_free_group_priv(struct fsnotify_group *);
1065:	static void fanotify_free_mark(struct fsnotify_mark *);
1058:	static void fanotify_freeing_mark(struct fsnotify_mark *, struct fsnotify_group *);
888:	static int fanotify_handle_event(struct fsnotify_group *, u32, const void *, int, struct inode *, const struct qstr *, u32, struct fsnotify_iter_info *);
870:	static void fanotify_insert_event(struct fsnotify_group *, struct fsnotify_event *);
187:	static int fanotify_merge(struct fsnotify_group *, struct fsnotify_event *);

File fs/notify/fanotify/fanotify_user.c:
1344:	long __arm64_sys_fanotify_init(const struct pt_regs *);
1822:	long __arm64_sys_fanotify_mark(const struct pt_regs *);
373:	static int copy_fid_info_to_user(__kernel_fsid_t *, struct fanotify_fh *, int, const char *, size_t, char *, size_t);
1230:	static int fanotify_add_mark(struct fsnotify_group *, fsnotify_connp_t *, unsigned int, __u32, unsigned int, __kernel_fsid_t *);
157:	static size_t fanotify_event_len(unsigned int, struct fanotify_event *);
911:	static long fanotify_ioctl(struct file *, unsigned int, unsigned long);
729:	static __poll_t fanotify_poll(struct file *, poll_table *);
743:	static ssize_t fanotify_read(struct file *, char *, size_t, loff_t *);
856:	static int fanotify_release(struct inode *, struct file *);
1030:	static int fanotify_remove_mark(struct fsnotify_group *, fsnotify_connp_t *, __u32, unsigned int, __u32);
1846:	static int fanotify_user_setup(void);
828:	static ssize_t fanotify_write(struct file *, const char *, size_t, loff_t *);

File fs/notify/fdinfo.c:
133:	void fanotify_show_fdinfo(struct seq_file *, struct file *);
96:	void inotify_show_fdinfo(struct seq_file *, struct file *);
42:	static void show_mark_fhandle(struct seq_file *, struct inode *);

File fs/notify/fsnotify.c:
20:	void __fsnotify_inode_delete(struct inode *);
178:	int __fsnotify_parent(struct dentry *, __u32, const void *, int);
106:	void __fsnotify_update_child_dentry_flags(struct inode *);
26:	void __fsnotify_vfsmount_delete(struct vfsmount *);
481:	int fsnotify(__u32, const void *, int, struct inode *, const struct qstr *, struct inode *, u32);
90:	void fsnotify_sb_delete(struct super_block *);
586:	static int fsnotify_init(void);

File fs/notify/group.c:
156:	struct fsnotify_group *fsnotify_alloc_group(const struct fsnotify_ops *, int);
50:	void fsnotify_destroy_group(struct fsnotify_group *);
166:	int fsnotify_fasync(int, struct file *, int);
99:	void fsnotify_get_group(struct fsnotify_group *);
37:	void fsnotify_group_stop_queueing(struct fsnotify_group *);
107:	void fsnotify_put_group(struct fsnotify_group *);

File fs/notify/inotify/inotify_fsnotify.c:
59:	int inotify_handle_inode_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
143:	static int idr_callback(int, void *, void *);
180:	static void inotify_free_event(struct fsnotify_group *, struct fsnotify_event *);
171:	static void inotify_free_group_priv(struct fsnotify_group *);
187:	static void inotify_free_mark(struct fsnotify_mark *);
131:	static void inotify_freeing_mark(struct fsnotify_mark *, struct fsnotify_group *);
49:	static int inotify_merge(struct fsnotify_group *, struct fsnotify_event *);

File fs/notify/inotify/inotify_user.c:
730:	long __arm64_sys_inotify_add_watch(const struct pt_regs *);
725:	long __arm64_sys_inotify_init(const struct pt_regs *);
720:	long __arm64_sys_inotify_init1(const struct pt_regs *);
794:	long __arm64_sys_inotify_rm_watch(const struct pt_regs *);
521:	void inotify_ignored_and_remove_idr(struct fsnotify_mark *, struct fsnotify_group *);
695:	static int do_inotify_init(int);
314:	static long inotify_ioctl(struct file *, unsigned int, unsigned long);
140:	static __poll_t inotify_poll(struct file *, poll_table *);
250:	static ssize_t inotify_read(struct file *, char *, size_t, loff_t *);
302:	static int inotify_release(struct inode *, struct file *);
453:	static void inotify_remove_from_idr(struct fsnotify_group *, struct inotify_inode_mark *);
832:	static int inotify_user_setup(void);

File fs/notify/mark.c:
744:	int fsnotify_add_mark(struct fsnotify_mark *, fsnotify_connp_t *, unsigned int, int, __kernel_fsid_t *);
704:	int fsnotify_add_mark_locked(struct fsnotify_mark *, fsnotify_connp_t *, unsigned int, int, __kernel_fsid_t *);
786:	void fsnotify_clear_marks_by_group(struct fsnotify_group *, unsigned int);
522:	int fsnotify_compare_groups(struct fsnotify_group *, struct fsnotify_group *);
111:	__u32 fsnotify_conn_mask(struct fsnotify_mark_connector *);
493:	void fsnotify_destroy_mark(struct fsnotify_mark *, struct fsnotify_group *);
831:	void fsnotify_destroy_marks(fsnotify_connp_t *);
442:	void fsnotify_detach_mark(struct fsnotify_mark *);
762:	struct fsnotify_mark *fsnotify_find_mark(fsnotify_connp_t *, struct fsnotify_group *);
422:	void fsnotify_finish_user_wait(struct fsnotify_iter_info *);
471:	void fsnotify_free_mark(struct fsnotify_mark *);
94:	void fsnotify_get_mark(struct fsnotify_mark *);
872:	void fsnotify_init_mark(struct fsnotify_mark *, struct fsnotify_group *);
394:	bool fsnotify_prepare_user_wait(struct fsnotify_iter_info *);
293:	void fsnotify_put_mark(struct fsnotify_mark *);
185:	void fsnotify_recalc_mask(struct fsnotify_mark_connector *);
907:	void fsnotify_wait_marks_destroyed(void);
156:	static void *__fsnotify_recalc_mask(struct fsnotify_mark_connector *);
199:	static void fsnotify_connector_destroy_workfn(struct work_struct *);
241:	static void *fsnotify_detach_connector_from_object(struct fsnotify_mark_connector *, unsigned int *);
888:	static void fsnotify_mark_destroy_workfn(struct work_struct *);

File fs/notify/notification.c:
50:	void fsnotify_destroy_event(struct fsnotify_group *, struct fsnotify_event *);
181:	void fsnotify_flush_notify(struct fsnotify_group *);
44:	u32 fsnotify_get_cookie(void);
81:	int fsnotify_insert_event(struct fsnotify_group *, struct fsnotify_event *, int (*)(struct fsnotify_group *, struct fsnotify_event *), void (*)(struct fsnotify_group *, struct fsnotify_event *));
148:	struct fsnotify_event *fsnotify_peek_first_event(struct fsnotify_group *);
163:	struct fsnotify_event *fsnotify_remove_first_event(struct fsnotify_group *);
132:	void fsnotify_remove_queued_event(struct fsnotify_group *, struct fsnotify_event *);

File fs/nsfs.c:
217:	int ns_get_name(char *, size_t, struct task_struct *, const struct proc_ns_operations *);
136:	int ns_get_path(struct path *, struct task_struct *, const struct proc_ns_operations *);
109:	int ns_get_path_cb(struct path *, ns_get_path_helper_t *, void *);
263:	bool ns_match(const struct ns_common *, dev_t, ino_t);
300:	void nsfs_init(void);
147:	int open_related_ns(struct ns_common *, struct ns_common *(*)(struct ns_common *));
237:	struct file *proc_ns_fget(int);
232:	bool proc_ns_file(const struct file *);
58:	static int __ns_get_path(struct path *, struct ns_common *);
26:	static char *ns_dname(struct dentry *, char *, int);
188:	static long ns_ioctl(struct file *, unsigned int, unsigned long);
35:	static void ns_prune_dentry(struct dentry *);
51:	static void nsfs_evict(struct inode *);
284:	static int nsfs_init_fs_context(struct fs_context *);
269:	static int nsfs_show_path(struct seq_file *, struct dentry *);

File fs/open.c:
503:	long __arm64_sys_access(const struct pt_regs *);
508:	long __arm64_sys_chdir(const struct pt_regs *);
661:	long __arm64_sys_chmod(const struct pt_regs *);
785:	long __arm64_sys_chown(const struct pt_regs *);
556:	long __arm64_sys_chroot(const struct pt_regs *);
1437:	long __arm64_sys_close(const struct pt_regs *);
1462:	long __arm64_sys_close_range(const struct pt_regs *);
1396:	long __arm64_sys_creat(const struct pt_regs *);
492:	long __arm64_sys_faccessat(const struct pt_regs *);
497:	long __arm64_sys_faccessat2(const struct pt_regs *);
352:	long __arm64_sys_fallocate(const struct pt_regs *);
534:	long __arm64_sys_fchdir(const struct pt_regs *);
625:	long __arm64_sys_fchmod(const struct pt_regs *);
655:	long __arm64_sys_fchmodat(const struct pt_regs *);
821:	long __arm64_sys_fchown(const struct pt_regs *);
779:	long __arm64_sys_fchownat(const struct pt_regs *);
202:	long __arm64_sys_ftruncate(const struct pt_regs *);
790:	long __arm64_sys_lchown(const struct pt_regs *);
1330:	long __arm64_sys_open(const struct pt_regs *);
1337:	long __arm64_sys_openat(const struct pt_regs *);
1345:	long __arm64_sys_openat2(const struct pt_regs *);
144:	long __arm64_sys_truncate(const struct pt_regs *);
1472:	long __arm64_sys_vhangup(const struct pt_regs *);
1118:	int build_open_flags(const struct open_how *, struct open_flags *);
1102:	struct open_how build_open_how(int, umode_t);
589:	int chmod_common(const struct path *, umode_t);
702:	int chown_common(const struct path *, uid_t, gid_t);
1056:	struct file *dentry_create(const struct path *, int, umode_t, const struct cred *);
1016:	struct file *dentry_open(const struct path *, int, const struct cred *);
747:	int do_fchownat(int, const char *, uid_t, gid_t, int);
156:	long do_sys_ftruncate(unsigned int, loff_t, int);
1323:	long do_sys_open(int, const char *, int, umode_t);
122:	long do_sys_truncate(const char *, loff_t);
39:	int do_truncate(struct user_namespace *, struct dentry *, loff_t, unsigned int, struct file *);
1248:	struct file *file_open_name(struct filename *, int, umode_t);
1282:	struct file *file_open_root(const struct path *, const char *, int, umode_t);
998:	char *file_path(struct file *, char *, int);
1410:	int filp_close(struct file *, fl_owner_t);
1269:	struct file *filp_open(const char *, int, umode_t);
991:	int finish_no_open(struct file *, struct dentry *);
967:	int finish_open(struct file *, struct dentry *, int (*)(struct inode *, struct file *));
1487:	int generic_file_open(struct inode *, struct file *);
340:	int ksys_fallocate(int, int, loff_t, loff_t);
809:	int ksys_fchown(unsigned int, uid_t, gid_t);
1502:	int nonseekable_open(struct inode *, struct file *);
1081:	struct file *open_with_fake_path(const struct path *, int, struct inode *, const struct cred *);
1520:	int stream_open(struct inode *, struct file *);
243:	int vfs_fallocate(struct file *, int, loff_t, loff_t);
619:	int vfs_fchmod(struct file *, umode_t);
796:	int vfs_fchown(struct file *, uid_t, gid_t);
1010:	int vfs_open(const struct path *, struct file *);
70:	long vfs_truncate(const struct path *, loff_t);
826:	static int do_dentry_open(struct file *, struct inode *, int (*)(struct inode *, struct file *));
420:	static long do_faccessat(int, const char *, int, int);
1294:	static long do_sys_openat2(int, const char *, struct open_how *);

File fs/overlayfs/copy_up.c:
1140:	int ovl_copy_up(struct dentry *);
1135:	int ovl_copy_up_with_data(struct dentry *);
76:	int ovl_copy_xattr(struct super_block *, const struct path *, struct dentry *);
375:	struct ovl_fh *ovl_encode_real_fh(struct ovl_fs *, struct dentry *, bool);
1120:	int ovl_maybe_copy_up(struct dentry *, int);
349:	int ovl_set_attr(struct ovl_fs *, struct dentry *, struct kstat *);
430:	int ovl_set_origin(struct ovl_fs *, struct dentry *, struct dentry *);
32:	static int ovl_ccup_get(char *, const struct kernel_param *);
26:	static int ovl_ccup_set(const char *, const struct kernel_param *);
234:	static int ovl_copy_up_file(struct ovl_fs *, struct dentry *, struct file *, loff_t);
1061:	static int ovl_copy_up_flags(struct dentry *, int);
609:	static int ovl_copy_up_metadata(struct ovl_copy_up_ctx *, struct dentry *);
480:	static int ovl_create_index(struct dentry *, struct dentry *, struct dentry *);
40:	static bool ovl_must_copy_xattr(const char *);

File fs/overlayfs/dir.c:
26:	int ovl_cleanup(struct ovl_fs *, struct inode *, struct dentry *);
109:	int ovl_cleanup_and_whiteout(struct ovl_fs *, struct inode *, struct dentry *);
171:	struct dentry *ovl_create_real(struct ovl_fs *, struct inode *, struct dentry *, struct ovl_cattr *);
227:	struct dentry *ovl_create_temp(struct ovl_fs *, struct dentry *, struct ovl_cattr *);
45:	struct dentry *ovl_lookup_temp(struct ovl_fs *, struct dentry *);
140:	int ovl_mkdir_real(struct ovl_fs *, struct inode *, struct dentry **, umode_t);
362:	static struct dentry *ovl_clear_empty(struct dentry *, struct list_head *);
658:	static int ovl_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
620:	static int ovl_create_object(struct dentry *, int, dev_t, const char *);
555:	static int ovl_create_or_link(struct dentry *, struct inode *, struct ovl_cattr *, bool);
881:	static int ovl_do_remove(struct dentry *, bool);
859:	static void ovl_drop_nlink(struct dentry *);
262:	static int ovl_instantiate(struct dentry *, struct inode *, struct dentry *, bool);
698:	static int ovl_link(struct dentry *, struct inode *, struct dentry *);
664:	static int ovl_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
670:	static int ovl_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
1078:	static int ovl_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
942:	static int ovl_rmdir(struct inode *, struct dentry *);
247:	static int ovl_set_opaque(struct dentry *, struct dentry *);
234:	static int ovl_set_opaque_xerr(struct dentry *, struct dentry *, int);
1047:	static int ovl_set_redirect(struct dentry *, bool);
437:	static int ovl_set_upper_acl(struct ovl_fs *, struct dentry *, const char *, struct posix_acl *);
680:	static int ovl_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
937:	static int ovl_unlink(struct inode *, struct dentry *);

File fs/overlayfs/export.c:
250:	static int ovl_encode_fh(struct inode *, u32 *, int *, struct inode *);
803:	static struct dentry *ovl_fh_to_dentry(struct super_block *, struct fid *, int, int);
843:	static struct dentry *ovl_fh_to_parent(struct super_block *, struct fid *, int, int);
653:	static struct dentry *ovl_get_dentry(struct super_block *, struct dentry *, struct ovl_path *, struct dentry *);
850:	static int ovl_get_name(struct dentry *, char *, struct dentry *);
861:	static struct dentry *ovl_get_parent(struct dentry *);
551:	static struct dentry *ovl_lookup_real(struct super_block *, struct dentry *, const struct ovl_layer *);
498:	static struct dentry *ovl_lookup_real_ancestor(struct super_block *, struct dentry *, const struct ovl_layer *);

File fs/overlayfs/file.c:
716:	void ovl_aio_request_cache_destroy(void);
705:	int ovl_aio_request_cache_init(void);
268:	static void ovl_aio_cleanup_handler(struct ovl_aio_req *);
287:	static void ovl_aio_rw_complete(struct kiocb *, long);
78:	static int ovl_change_flags(struct file *, unsigned int);
632:	static ssize_t ovl_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
572:	static loff_t ovl_copyfile(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int, enum ovl_copyop);
547:	static int ovl_fadvise(struct file *, loff_t, loff_t, int);
514:	static long ovl_fallocate(struct file *, int, loff_t, loff_t);
667:	static int ovl_flush(struct file *, fl_owner_t);
466:	static int ovl_fsync(struct file *, loff_t, loff_t, int);
177:	static loff_t ovl_llseek(struct file *, loff_t, int);
492:	static int ovl_mmap(struct file *, struct vm_area_struct *);
146:	static int ovl_open(struct inode *, struct file *);
40:	static struct file *ovl_open_realfile(const struct file *, const struct path *);
297:	static ssize_t ovl_read_iter(struct kiocb *, struct iov_iter *);
105:	static int ovl_real_fdget_meta(const struct file *, struct fd *, bool);
170:	static int ovl_release(struct inode *, struct file *);
640:	static loff_t ovl_remap_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
430:	static ssize_t ovl_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
348:	static ssize_t ovl_write_iter(struct kiocb *, struct iov_iter *);

File fs/overlayfs/inode.c:
558:	struct posix_acl *do_ovl_get_acl(struct user_namespace *, struct inode *, int, bool, bool);
839:	int ovl_fileattr_get(struct dentry *, struct fileattr *);
761:	int ovl_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
513:	struct posix_acl *ovl_get_acl_path(const struct path *, const char *, bool);
1323:	struct inode *ovl_get_inode(struct super_block *, struct ovl_inode_params *);
1115:	unsigned int ovl_get_nlink(struct ovl_fs *, struct dentry *, struct dentry *, unsigned int);
1255:	struct inode *ovl_get_trap_inode(struct super_block *, struct dentry *);
156:	int ovl_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1000:	void ovl_inode_init(struct inode *, struct ovl_inode_params *, unsigned long, int);
335:	bool ovl_is_private_xattr(struct super_block *, const char *);
425:	ssize_t ovl_listxattr(struct dentry *, char *, size_t);
1215:	struct inode *ovl_lookup_inode(struct super_block *, struct dentry *, bool);
1233:	bool ovl_lookup_trap_inode(struct super_block *, struct dentry *);
1155:	struct inode *ovl_new_inode(struct super_block *, umode_t, dev_t);
281:	int ovl_permission(struct user_namespace *, struct inode *, int);
825:	int ovl_real_fileattr_get(const struct path *, struct fileattr *);
750:	int ovl_real_fileattr_set(const struct path *, struct fileattr *);
654:	int ovl_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
1110:	int ovl_set_nlink_lower(struct dentry *);
1105:	int ovl_set_nlink_upper(struct dentry *);
22:	int ovl_setattr(struct user_namespace *, struct dentry *, struct iattr *);
689:	int ovl_update_time(struct inode *, struct timespec64 *, int);
397:	int ovl_xattr_get(struct dentry *, struct inode *, const char *, void *, size_t);
347:	int ovl_xattr_set(struct dentry *, struct inode *, const char *, const void *, size_t, int);
706:	static int ovl_fiemap(struct inode *, struct fiemap_extent_info *, u64, u64);
319:	static const char *ovl_get_link(struct dentry *, struct inode *, struct delayed_call *);
1171:	static int ovl_inode_set(struct inode *, void *);
1166:	static int ovl_inode_test(struct inode *, void *);

File fs/overlayfs/namei.c:
89:	int ovl_check_fb_len(struct ovl_fb *, int);
353:	int ovl_check_origin_fh(struct ovl_fs *, struct ovl_fh *, bool, struct dentry *, struct ovl_path **);
154:	struct dentry *ovl_decode_real_fh(struct ovl_fs *, struct ovl_fh *, struct vfsmount *, bool);
672:	struct dentry *ovl_get_index_fh(struct ovl_fs *, struct ovl_fh *);
655:	int ovl_get_index_name(struct ovl_fs *, struct dentry *, struct qstr *);
490:	struct dentry *ovl_index_upper(struct ovl_fs *, struct dentry *, bool);
830:	struct dentry *ovl_lookup(struct inode *, struct dentry *, unsigned int);
701:	struct dentry *ovl_lookup_index(struct ovl_fs *, struct dentry *, struct dentry *, bool);
1159:	bool ovl_lower_positive(struct dentry *);
791:	int ovl_path_next(int, struct dentry *, struct path *);
524:	int ovl_verify_index(struct ovl_fs *, struct dentry *);
456:	int ovl_verify_set_fh(struct ovl_fs *, struct dentry *, enum ovl_xattr, struct dentry *, bool, bool);
65:	static int ovl_acceptable(void *, struct dentry *);
29:	static int ovl_check_redirect(const struct path *, struct ovl_lookup_data *, size_t, const char *);
109:	static struct ovl_fh *ovl_get_fh(struct ovl_fs *, struct dentry *, enum ovl_xattr);
311:	static int ovl_lookup_layer(struct dentry *, struct ovl_lookup_data *, struct dentry **, bool);
223:	static int ovl_lookup_single(struct dentry *, struct ovl_lookup_data *, const char *, unsigned int, size_t, const char *, struct dentry **, bool);
429:	static int ovl_verify_fh(struct ovl_fs *, struct dentry *, enum ovl_xattr, const struct ovl_fh *);

File fs/overlayfs/overlayfs.h:
174:	static int ovl_do_create(struct ovl_fs *, struct inode *, struct dentry *, umode_t);
140:	static int ovl_do_notify_change(struct ovl_fs *, struct dentry *, struct iattr *);
295:	static int ovl_do_rename(struct ovl_fs *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
203:	static int ovl_do_symlink(struct ovl_fs *, struct inode *, struct dentry *, const char *);
620:	static struct posix_acl *ovl_get_acl(struct user_namespace *, struct dentry *, int);
615:	static struct posix_acl *ovl_get_inode_acl(struct inode *, int, bool);
339:	static struct dentry *ovl_lookup_upper(struct ovl_fs *, const char *, struct dentry *, int);

File fs/overlayfs/readdir.c:
217:	void ovl_cache_free(struct list_head *);
1053:	int ovl_check_d_type_supported(const struct path *);
963:	int ovl_check_empty_dir(struct dentry *, struct list_head *);
1006:	void ovl_cleanup_whiteouts(struct ovl_fs *, struct dentry *, struct list_head *);
228:	void ovl_dir_cache_free(struct inode *);
858:	struct file *ovl_dir_real_file(const struct file *, bool);
1152:	int ovl_indexdir_cleanup(struct ovl_fs *);
1129:	int ovl_workdir_cleanup(struct ovl_fs *, struct inode *, struct vfsmount *, struct dentry *, int);
143:	static struct ovl_cache_entry *ovl_cache_entry_new(struct ovl_readdir_data *, const char *, int, u64, unsigned int);
459:	static int ovl_cache_update_ino(const struct path *, struct ovl_cache_entry *);
1032:	static bool ovl_check_d_type(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
892:	static int ovl_dir_fsync(struct file *, loff_t, loff_t, int);
798:	static loff_t ovl_dir_llseek(struct file *, loff_t, int);
929:	static int ovl_dir_open(struct inode *, struct file *);
294:	static int ovl_dir_read(const struct path *, struct ovl_readdir_data *);
343:	static int ovl_dir_read_merged(struct dentry *, struct list_head *, struct rb_root *);
912:	static int ovl_dir_release(struct inode *, struct file *);
322:	static void ovl_dir_reset(struct file *);
253:	static bool ovl_fill_merge(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
532:	static bool ovl_fill_plain(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
653:	static bool ovl_fill_real(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
734:	static int ovl_iterate(struct file *, struct dir_context *);

File fs/overlayfs/super.c:
181:	static struct inode *ovl_alloc_inode(struct super_block *);
1787:	static int ovl_check_layer(struct super_block *, struct ovl_fs *, struct dentry *, const char *, bool);
1820:	static int ovl_check_overlapping_layers(struct super_block *, struct ovl_fs *);
1261:	static int ovl_create_volatile_dirty(struct ovl_fs *);
80:	static struct dentry *ovl_d_real(struct dentry *, const struct inode *);
70:	static void ovl_dentry_release(struct dentry *);
162:	static int ovl_dentry_revalidate(struct dentry *, unsigned int);
167:	static int ovl_dentry_weak_revalidate(struct dentry *, unsigned int);
210:	static void ovl_destroy_inode(struct inode *);
57:	static void ovl_entry_stack_free(struct ovl_entry *);
2135:	static void ovl_exit(void);
1893:	static int ovl_fill_super(struct super_block *, void *, int);
222:	static void ovl_free_fs(struct ovl_fs *);
201:	static void ovl_free_inode(struct inode *);
1452:	static int ovl_get_indexdir(struct super_block *, struct ovl_fs *, struct ovl_entry *, const struct path *);
1722:	static struct ovl_entry *ovl_get_lowerstack(struct super_block *, const char *, unsigned int, struct ovl_fs *, struct ovl_layer *);
1855:	static struct dentry *ovl_get_root(struct super_block *, struct dentry *, struct ovl_entry *);
1114:	static int ovl_get_upper(struct super_block *, struct ovl_fs *, struct ovl_layer *, struct path *);
1409:	static int ovl_get_workdir(struct super_block *, struct ovl_fs *, const struct path *);
2110:	static int ovl_init(void);
2103:	static void ovl_inode_init_once(void *);
2088:	static struct dentry *ovl_mount(struct file_system_type *, int, const char *, void *);
895:	static int ovl_mount_dir(const char *, struct path *);
865:	static int ovl_mount_dir_noesc(const char *, struct path *);
1023:	static int ovl_other_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
1030:	static int ovl_other_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
1007:	static int ovl_own_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
1014:	static int ovl_own_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
260:	static void ovl_put_super(struct super_block *);
397:	static int ovl_remount(struct super_block *, int *, char *);
364:	static int ovl_show_options(struct seq_file *, struct dentry *);
316:	static int ovl_statfs(struct dentry *, struct kstatfs *);
268:	static int ovl_sync_fs(struct super_block *, int);
762:	static struct dentry *ovl_workdir_create(struct ovl_fs *, const char *, bool);

File fs/overlayfs/util.c:
86:	struct ovl_entry *ovl_alloc_entry(unsigned int);
535:	bool ovl_already_copied_up(struct dentry *, int);
52:	int ovl_can_decode_fh(struct super_block *);
972:	int ovl_check_metacopy_xattr(struct ovl_fs *, const struct path *);
674:	void ovl_check_protattr(struct inode *, struct dentry *);
632:	int ovl_check_setxattr(struct ovl_fs *, struct dentry *, enum ovl_xattr, const void *, size_t, int);
574:	void ovl_copy_up_end(struct dentry *);
560:	int ovl_copy_up_start(struct dentry *, int);
1100:	void ovl_copyattr(struct inode *);
319:	void ovl_dentry_clear_flag(unsigned long, struct dentry *);
423:	const char *ovl_dentry_get_redirect(struct dentry *);
350:	bool ovl_dentry_has_upper_alias(struct dentry *);
329:	bool ovl_dentry_is_opaque(struct dentry *);
334:	bool ovl_dentry_is_whiteout(struct dentry *);
216:	struct dentry *ovl_dentry_lower(struct dentry *);
236:	struct dentry *ovl_dentry_lowerdata(struct dentry *);
408:	bool ovl_dentry_needs_data_copy_up(struct dentry *, int);
400:	bool ovl_dentry_needs_data_copy_up_locked(struct dentry *, int);
243:	struct dentry *ovl_dentry_real(struct dentry *);
97:	bool ovl_dentry_remote(struct dentry *);
314:	void ovl_dentry_set_flag(unsigned long, struct dentry *);
339:	void ovl_dentry_set_opaque(struct dentry *);
428:	void ovl_dentry_set_redirect(struct dentry *, const char *);
355:	void ovl_dentry_set_upper_alias(struct dentry *);
324:	bool ovl_dentry_test_flag(unsigned long, struct dentry *);
103:	void ovl_dentry_update_reval(struct dentry *, struct dentry *, unsigned int);
211:	struct dentry *ovl_dentry_upper(struct dentry *);
120:	bool ovl_dentry_weird(struct dentry *);
304:	struct ovl_dir_cache *ovl_dir_cache(struct inode *);
470:	void ovl_dir_modified(struct dentry *, bool);
25:	void ovl_drop_write(struct dentry *);
1016:	char *ovl_get_redirect_xattr(struct ovl_fs *, const struct path *, int);
371:	bool ovl_has_upperdata(struct inode *);
248:	struct dentry *ovl_i_dentry_upper(struct inode *);
253:	void ovl_i_path_real(struct inode *, struct path *);
71:	bool ovl_index_all(struct super_block *);
63:	struct dentry *ovl_indexdir(struct super_block *);
271:	struct inode *ovl_inode_lower(struct inode *);
284:	struct inode *ovl_inode_lowerdata(struct inode *);
278:	struct inode *ovl_inode_real(struct inode *);
293:	struct inode *ovl_inode_realdata(struct inode *);
436:	void ovl_inode_update(struct inode *, struct dentry *);
264:	struct inode *ovl_inode_upper(struct inode *);
478:	u64 ovl_inode_version_get(struct inode *);
757:	bool ovl_inuse_trylock(struct dentry *);
772:	void ovl_inuse_unlock(struct dentry *);
784:	bool ovl_is_inuse(struct dentry *);
1000:	bool ovl_is_metacopy_dentry(struct dentry *);
484:	bool ovl_is_whiteout(struct dentry *);
223:	const struct ovl_layer *ovl_layer_lower(struct dentry *);
952:	int ovl_lock_rename_workdir(struct dentry *, struct dentry *);
799:	bool ovl_need_index(struct dentry *);
937:	void ovl_nlink_end(struct dentry *);
884:	int ovl_nlink_start(struct dentry *);
37:	const struct cred *ovl_override_creds(struct super_block *);
592:	bool ovl_path_check_dir_xattr(struct ovl_fs *, const struct path *, enum ovl_xattr);
579:	bool ovl_path_check_origin_xattr(struct ovl_fs *, const struct path *);
161:	void ovl_path_lower(struct dentry *, struct path *);
173:	void ovl_path_lowerdata(struct dentry *, struct path *);
491:	struct file *ovl_path_open(const struct path *, int);
185:	enum ovl_path_type ovl_path_real(struct dentry *, struct path *);
197:	enum ovl_path_type ovl_path_realdata(struct dentry *, struct path *);
128:	enum ovl_path_type ovl_path_type(struct dentry *);
153:	void ovl_path_upper(struct dentry *, struct path *);
416:	bool ovl_redirect_dir(struct super_block *);
309:	void ovl_set_dir_cache(struct inode *, struct ovl_dir_cache *);
652:	int ovl_set_impure(struct dentry *, struct dentry *);
709:	int ovl_set_protattr(struct inode *, struct dentry *, struct fileattr *);
388:	void ovl_set_upperdata(struct inode *);
1075:	int ovl_sync_status(struct ovl_fs *);
79:	bool ovl_verify_lower(struct super_block *);
19:	int ovl_want_write(struct dentry *);
31:	struct dentry *ovl_workdir(struct dentry *);

File fs/pipe.c:
1031:	long __arm64_sys_pipe(const struct pt_regs *);
1026:	long __arm64_sys_pipe2(const struct pt_regs *);
757:	unsigned long account_pipe_buffers(struct user_struct *, unsigned long, unsigned long);
782:	struct pipe_inode_info *alloc_pipe_info(void);
911:	int create_pipe_files(struct file **, int);
989:	int do_pipe_flags(int *, int);
830:	void free_pipe_info(struct pipe_inode_info *);
193:	bool generic_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
207:	void generic_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
165:	bool generic_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1372:	struct pipe_inode_info *get_pipe_info(struct file *, bool);
111:	void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);
1385:	long pipe_fcntl(struct file *, unsigned int, unsigned long);
777:	bool pipe_is_unprivileged_user(void);
85:	void pipe_lock(struct pipe_inode_info *);
1253:	int pipe_resize_ring(struct pipe_inode_info *, unsigned int);
94:	void pipe_unlock(struct pipe_inode_info *);
1045:	void pipe_wait_readable(struct pipe_inode_info *);
1052:	void pipe_wait_writable(struct pipe_inode_info *);
1234:	unsigned int round_pipe_size(unsigned long);
770:	bool too_many_pipe_buffers_hard(unsigned long);
763:	bool too_many_pipe_buffers_soft(unsigned long);
954:	static int __do_pipe_flags(int *, struct file **, int);
125:	static void anon_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
141:	static bool anon_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1004:	static int do_pipe2(int *, int);
1441:	static int do_proc_dopipe_max_size_conv(unsigned long *, unsigned int *, int, void *);
1093:	static int fifo_open(struct inode *, struct file *);
1494:	static int init_pipe_fs(void);
739:	static int pipe_fasync(int, struct file *, int);
607:	static long pipe_ioctl(struct file *, unsigned int, unsigned long);
649:	static __poll_t pipe_poll(struct file *, poll_table *);
231:	static ssize_t pipe_read(struct kiocb *, struct iov_iter *);
715:	static int pipe_release(struct inode *, struct file *);
416:	static ssize_t pipe_write(struct kiocb *, struct iov_iter *);
861:	static char *pipefs_dname(struct dentry *, char *, int);
1424:	static int pipefs_init_fs_context(struct fs_context *);
1461:	static int proc_dopipe_max_size(struct ctl_table *, int, void *, size_t *, loff_t *);
1071:	static int wait_for_partner(struct pipe_inode_info *, unsigned int *);

File fs/pnode.c:
122:	void change_mnt_propagation(struct mount *, int);
60:	int get_dominating_id(struct mount *, const struct path *);
288:	int propagate_mnt(struct mount *, struct mountpoint *, struct mount *, struct hlist_head *);
369:	int propagate_mount_busy(struct mount *, int);
412:	void propagate_mount_unlock(struct mount *);
535:	int propagate_umount(struct list_head *);
225:	static int propagate_one(struct mount *);

File fs/posix_acl.c:
574:	int __posix_acl_chmod(struct posix_acl **, gfp_t, umode_t);
556:	int __posix_acl_create(struct posix_acl **, gfp_t, umode_t *);
1253:	ssize_t do_get_acl(struct mnt_idmap *, struct dentry *, const char *, void *, size_t);
1232:	int do_set_acl(struct mnt_idmap *, struct dentry *, const char *, const void *, size_t);
107:	void forget_all_cached_acls(struct inode *);
101:	void forget_cached_acl(struct inode *, int);
46:	struct posix_acl *get_cached_acl(struct inode *, int);
65:	struct posix_acl *get_cached_acl_rcu(struct inode *, int);
182:	struct posix_acl *get_inode_acl(struct inode *, int);
203:	struct posix_acl *posix_acl_alloc(int, gfp_t);
605:	int posix_acl_chmod(struct user_namespace *, struct dentry *, umode_t);
218:	struct posix_acl *posix_acl_clone(const struct posix_acl *, gfp_t);
634:	int posix_acl_create(struct inode *, umode_t *, struct posix_acl **, struct posix_acl **);
306:	int posix_acl_equiv_mode(const struct posix_acl *, umode_t *);
352:	struct posix_acl *posix_acl_from_mode(umode_t, gfp_t);
774:	struct posix_acl *posix_acl_from_xattr(struct user_namespace *, const void *, size_t);
192:	void posix_acl_init(struct posix_acl *, int);
375:	int posix_acl_permission(struct user_namespace *, struct inode *, const struct posix_acl *, int);
834:	int posix_acl_to_xattr(struct user_namespace *, const struct posix_acl *, void *, size_t);
706:	int posix_acl_update_mode(struct user_namespace *, struct inode *, umode_t *, struct posix_acl **);
237:	int posix_acl_valid(struct user_namespace *, const struct posix_acl *);
81:	void set_cached_acl(struct inode *, int, struct posix_acl *);
937:	int set_posix_acl(struct user_namespace *, struct dentry *, int, struct posix_acl *);
1001:	int simple_acl_create(struct inode *, struct inode *);
981:	int simple_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
1133:	struct posix_acl *vfs_get_acl(struct user_namespace *, struct dentry *, const char *);
1177:	int vfs_remove_acl(struct user_namespace *, struct dentry *, const char *);
1054:	int vfs_set_acl(struct user_namespace *, struct dentry *, const char *, struct posix_acl *);
114:	static struct posix_acl *__get_acl(struct user_namespace *, struct dentry *, struct inode *, int);
453:	static int posix_acl_create_masq(struct posix_acl *, umode_t *);
962:	static bool posix_acl_xattr_list(struct dentry *);

File fs/proc/array.c:
664:	int proc_pid_statm(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
431:	int proc_pid_status(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
98:	void proc_task_name(struct seq_file *, struct task_struct *, bool);
658:	int proc_tgid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
652:	int proc_tid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
224:	void render_sigset_t(struct seq_file *, const char *, sigset_t *);
457:	static int do_task_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *, int);

File fs/proc/base.c:
904:	loff_t mem_lseek(struct file *, loff_t, int);
2034:	int pid_delete_dentry(const struct dentry *);
1962:	int pid_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1995:	void pid_update_inode(struct task_struct *, struct inode *);
2063:	bool proc_fill_cache(struct file *, struct dir_context *, const char *, unsigned int, instantiate_t *, struct task_struct *, const void *);
3407:	void proc_flush_pid(struct pid *);
796:	struct mm_struct *proc_mem_open(struct inode *, unsigned int);
1875:	void proc_pid_evict_inode(struct proc_inode *);
3433:	struct dentry *proc_pid_lookup(struct dentry *, unsigned int);
1888:	struct inode *proc_pid_make_inode(struct super_block *, struct task_struct *, umode_t);
3502:	int proc_pid_readdir(struct file *, struct dir_context *);
688:	int proc_setattr(struct user_namespace *, struct dentry *, struct iattr *);
3923:	void set_proc_pid_nlink(void);
1817:	void task_dump_owner(struct task_struct *, umode_t, kuid_t *, kgid_t *);
3366:	struct pid *tgid_pidfd_to_pid(const struct file *);
1060:	static int __set_oom_adj(struct file *, int, bool);
1011:	static int auxv_open(struct inode *, struct file *);
1016:	static ssize_t auxv_read(struct file *, char *, size_t, loff_t *);
1709:	static int comm_open(struct inode *, struct file *);
1692:	static int comm_show(struct seq_file *, void *);
1664:	static ssize_t comm_write(struct file *, const char *, size_t, loff_t *);
2977:	static int do_io_accounting(struct task_struct *, struct seq_file *, int);
936:	static int environ_open(struct inode *, struct file *);
941:	static ssize_t environ_read(struct file *, char *, size_t, loff_t *);
2141:	static int map_files_d_revalidate(struct dentry *, unsigned int);
2192:	static int map_files_get_link(struct dentry *, struct path *);
827:	static int mem_open(struct inode *, struct file *);
892:	static ssize_t mem_read(struct file *, char *, size_t, loff_t *);
920:	static int mem_release(struct inode *, struct file *);
837:	static ssize_t mem_rw(struct file *, char *, size_t, loff_t *, int);
898:	static ssize_t mem_write(struct file *, const char *, size_t, loff_t *);
3476:	static struct tgid_iter next_tgid(struct pid_namespace *, struct tgid_iter);
1038:	static ssize_t oom_adj_read(struct file *, char *, size_t, loff_t *);
1153:	static ssize_t oom_adj_write(struct file *, const char *, size_t, loff_t *);
1197:	static ssize_t oom_score_adj_read(struct file *, char *, size_t, loff_t *);
1213:	static ssize_t oom_score_adj_write(struct file *, const char *, size_t, loff_t *);
2008:	static int pid_revalidate(struct dentry *, unsigned int);
2900:	static ssize_t proc_coredump_filter_read(struct file *, char *, size_t, loff_t *);
2927:	static ssize_t proc_coredump_filter_write(struct file *, const char *, size_t, loff_t *);
185:	static int proc_cwd_link(struct dentry *, struct path *);
1722:	static int proc_exe_link(struct dentry *, struct path *);
3082:	static int proc_gid_map_open(struct inode *, struct file *);
3037:	static int proc_id_map_open(struct inode *, struct file *, const struct seq_operations *);
3069:	static int proc_id_map_release(struct inode *, struct file *);
1250:	static ssize_t proc_loginuid_read(struct file *, char *, size_t, loff_t *);
1267:	static ssize_t proc_loginuid_write(struct file *, const char *, size_t, loff_t *);
2245:	static const char *proc_map_files_get_link(struct dentry *, struct inode *, struct delayed_call *);
2265:	static struct dentry *proc_map_files_instantiate(struct dentry *, struct task_struct *, const void *);
2288:	static struct dentry *proc_map_files_lookup(struct inode *, struct dentry *, unsigned int);
2344:	static int proc_map_files_readdir(struct file *, struct dir_context *);
549:	static int proc_oom_score(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
357:	static ssize_t proc_pid_cmdline_read(struct file *, char *, size_t, loff_t *);
1741:	static const char *proc_pid_get_link(struct dentry *, struct inode *, struct delayed_call *);
3412:	static struct dentry *proc_pid_instantiate(struct dentry *, struct task_struct *, const void *);
595:	static int proc_pid_limits(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
730:	static int proc_pid_permission(struct user_namespace *, struct inode *, int);
3168:	static int proc_pid_personality(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1788:	static int proc_pid_readlink(struct dentry *, char *, int);
427:	static int proc_pid_stack(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
639:	static int proc_pid_syscall(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
385:	static int proc_pid_wchan(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
2636:	static struct dentry *proc_pident_instantiate(struct dentry *, struct task_struct *, const void *);
2660:	static struct dentry *proc_pident_lookup(struct inode *, struct dentry *, const struct pid_entry *, const struct pid_entry *);
2688:	static int proc_pident_readdir(struct file *, struct dir_context *, const struct pid_entry *, unsigned int);
3087:	static int proc_projid_map_open(struct inode *, struct file *);
202:	static int proc_root_link(struct dentry *, struct path *);
1316:	static ssize_t proc_sessionid_read(struct file *, char *, size_t, loff_t *);
3116:	static int proc_setgroups_open(struct inode *, struct file *);
3150:	static int proc_setgroups_release(struct inode *, struct file *);
783:	static int proc_single_open(struct inode *, struct file *);
765:	static int proc_single_show(struct seq_file *, void *);
3894:	static int proc_task_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
3717:	static struct dentry *proc_task_instantiate(struct dentry *, struct task_struct *, const void *);
3737:	static struct dentry *proc_task_lookup(struct inode *, struct dentry *, unsigned int);
3852:	static int proc_task_readdir(struct file *, struct dir_context *);
3374:	static struct dentry *proc_tgid_base_lookup(struct inode *, struct dentry *, unsigned int);
3354:	static int proc_tgid_base_readdir(struct file *, struct dir_context *);
3029:	static int proc_tgid_io_accounting(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
3698:	static struct dentry *proc_tid_base_lookup(struct inode *, struct dentry *, unsigned int);
3692:	static int proc_tid_base_readdir(struct file *, struct dir_context *);
3560:	static int proc_tid_comm_permission(struct user_namespace *, struct inode *, int);
3023:	static int proc_tid_io_accounting(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
3077:	static int proc_uid_map_open(struct inode *, struct file *);
1539:	static int sched_autogroup_open(struct inode *, struct file *);
1491:	static int sched_autogroup_show(struct seq_file *, void *);
1507:	static ssize_t sched_autogroup_write(struct file *, const char *, size_t, loff_t *);
1650:	static int timens_offsets_open(struct inode *, struct file *);
1563:	static int timens_offsets_show(struct seq_file *, void *);
1577:	static ssize_t timens_offsets_write(struct file *, const char *, size_t, loff_t *);
2623:	static int timerslack_ns_open(struct inode *, struct file *);
2589:	static int timerslack_ns_show(struct seq_file *, void *);
2544:	static ssize_t timerslack_ns_write(struct file *, const char *, size_t, loff_t *);

File fs/proc/cmdline.c:
8:	static int cmdline_proc_show(struct seq_file *, void *);
15:	static int proc_cmdline_init(void);

File fs/proc/consoles.c:
88:	static void *c_next(struct seq_file *, void *, loff_t *);
70:	static void *c_start(struct seq_file *, loff_t *);
96:	static void c_stop(struct seq_file *, void *);
108:	static int proc_consoles_init(void);
15:	static int show_console_dev(struct seq_file *, void *);

File fs/proc/cpuinfo.c:
10:	static int cpuinfo_open(struct inode *, struct file *);
23:	static int proc_cpuinfo_init(void);

File fs/proc/devices.c:
36:	static void *devinfo_next(struct seq_file *, void *, loff_t *);
9:	static int devinfo_show(struct seq_file *, void *);
29:	static void *devinfo_start(struct seq_file *, loff_t *);
44:	static void devinfo_stop(struct seq_file *, void *);
56:	static int proc_devices_init(void);

File fs/proc/fd.c:
328:	int proc_fd_permission(struct user_namespace *, struct inode *, int);
347:	static int proc_fd_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
196:	static struct dentry *proc_fd_instantiate(struct dentry *, struct task_struct *, const void *);
168:	static int proc_fd_link(struct dentry *, struct path *);
373:	static struct dentry *proc_fdinfo_instantiate(struct dentry *, struct task_struct *, const void *);
318:	static struct dentry *proc_lookupfd(struct inode *, struct dentry *, unsigned int);
220:	static struct dentry *proc_lookupfd_common(struct inode *, struct dentry *, instantiate_t *);
395:	static struct dentry *proc_lookupfdinfo(struct inode *, struct dentry *, unsigned int);
406:	static int proc_open_fdinfo(struct inode *, struct file *);
307:	static int proc_readfd(struct file *, struct dir_context *);
242:	static int proc_readfd_common(struct file *, struct dir_context *, instantiate_t *);
400:	static int proc_readfdinfo(struct file *, struct dir_context *);
93:	static int seq_fdinfo_open(struct inode *, struct file *);
22:	static int seq_show(struct seq_file *, void *);
138:	static int tid_fd_revalidate(struct dentry *, unsigned int);

File fs/proc/generic.c:
482:	struct proc_dir_entry *_proc_mkdir(const char *, umode_t, struct proc_dir_entry *, void *, bool);
37:	void pde_free(struct proc_dir_entry *);
675:	void pde_put(struct proc_dir_entry *);
202:	int proc_alloc_inum(unsigned int *);
582:	struct proc_dir_entry *proc_create(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *);
567:	struct proc_dir_entry *proc_create_data(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *, void *);
525:	struct proc_dir_entry *proc_create_mount_point(const char *);
541:	struct proc_dir_entry *proc_create_reg(const char *, umode_t, struct proc_dir_entry **, void *);
616:	struct proc_dir_entry *proc_create_seq_private(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, unsigned int, void *);
647:	struct proc_dir_entry *proc_create_single_data(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
215:	void proc_free_inum(unsigned int);
783:	void *proc_get_parent_data(const struct inode *);
264:	struct dentry *proc_lookup(struct inode *, struct dentry *, unsigned int);
244:	struct dentry *proc_lookup_de(struct inode *, struct dentry *, struct proc_dir_entry *);
518:	struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
504:	struct proc_dir_entry *proc_mkdir_data(const char *, umode_t, struct proc_dir_entry *, void *);
511:	struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t, struct proc_dir_entry *);
325:	int proc_readdir(struct file *, struct dir_context *);
284:	int proc_readdir_de(struct file *, struct dir_context *, struct proc_dir_entry *);
367:	struct proc_dir_entry *proc_register(struct proc_dir_entry *, struct proc_dir_entry *);
790:	void proc_remove(struct proc_dir_entry *);
662:	void proc_set_size(struct proc_dir_entry *, loff_t);
668:	void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
802:	ssize_t proc_simple_write(struct file *, const char *, size_t, loff_t *);
459:	struct proc_dir_entry *proc_symlink(const char *, struct proc_dir_entry *, const char *);
686:	void remove_proc_entry(const char *, struct proc_dir_entry *);
725:	int remove_proc_subtree(const char *, struct proc_dir_entry *);
392:	static struct proc_dir_entry *__proc_create(struct proc_dir_entry **, const char *, umode_t, nlink_t);
163:	static int __xlate_proc_name(const char *, struct proc_dir_entry **, const char **);
137:	static int proc_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
230:	static int proc_misc_d_delete(const struct dentry *);
220:	static int proc_misc_d_revalidate(struct dentry *, unsigned int);
347:	static int proc_net_d_revalidate(struct dentry *, unsigned int);
118:	static int proc_notify_change(struct user_namespace *, struct dentry *, struct iattr *);
590:	static int proc_seq_open(struct inode *, struct file *);
599:	static int proc_seq_release(struct inode *, struct file *);
632:	static int proc_single_open(struct inode *, struct file *);

File fs/proc/inode.c:
261:	void proc_entry_rundown(struct proc_dir_entry *);
652:	struct inode *proc_get_inode(struct super_block *, struct proc_dir_entry *);
93:	void proc_init_kmemcache(void);
111:	void proc_invalidate_siblings_dcache(struct hlist_head *, spinlock_t *);
224:	static void close_pdeo(struct proc_dir_entry *, struct pde_opener *);
86:	static void init_once(void *);
63:	static struct inode *proc_alloc_inode(struct super_block *);
31:	static void proc_evict_inode(struct inode *);
81:	static void proc_free_inode(struct inode *);
637:	static const char *proc_get_link(struct dentry *, struct inode *, struct delayed_call *);
632:	static void proc_put_link(void *);
473:	static unsigned long proc_reg_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
281:	static loff_t proc_reg_llseek(struct file *, loff_t, int);
441:	static int proc_reg_mmap(struct file *, struct vm_area_struct *);
489:	static int proc_reg_open(struct inode *, struct file *);
368:	static __poll_t proc_reg_poll(struct file *, struct poll_table_struct *);
320:	static ssize_t proc_reg_read(struct file *, char *, size_t, loff_t *);
295:	static ssize_t proc_reg_read_iter(struct kiocb *, struct iov_iter *);
552:	static int proc_reg_release(struct inode *, struct file *);
392:	static long proc_reg_unlocked_ioctl(struct file *, unsigned int, unsigned long);
344:	static ssize_t proc_reg_write(struct file *, const char *, size_t, loff_t *);
179:	static int proc_show_options(struct seq_file *, struct dentry *);

File fs/proc/interrupts.c:
17:	static void *int_seq_next(struct seq_file *, void *, loff_t *);
12:	static void *int_seq_start(struct seq_file *, loff_t *);
25:	static void int_seq_stop(struct seq_file *, void *);
37:	static int proc_interrupts_init(void);

File fs/proc/kmsg.c:
20:	static int kmsg_open(struct inode *, struct file *);
40:	static __poll_t kmsg_poll(struct file *, poll_table *);
31:	static ssize_t kmsg_read(struct file *, char *, size_t, loff_t *);
25:	static int kmsg_release(struct inode *, struct file *);
58:	static int proc_kmsg_init(void);

File fs/proc/loadavg.c:
14:	static int loadavg_proc_show(struct seq_file *, void *);
29:	static int proc_loadavg_init(void);

File fs/proc/meminfo.c:
22:	void arch_report_meminfo(struct seq_file *);
32:	static int meminfo_proc_show(struct seq_file *, void *);
165:	static int proc_meminfo_init(void);

File fs/proc/namespaces.c:
151:	static struct dentry *proc_ns_dir_lookup(struct inode *, struct dentry *, unsigned int);
118:	static int proc_ns_dir_readdir(struct file *, struct dir_context *);
42:	static const char *proc_ns_get_link(struct dentry *, struct inode *, struct delayed_call *);
98:	static struct dentry *proc_ns_instantiate(struct dentry *, struct task_struct *, const void *);
71:	static int proc_ns_readlink(struct dentry *, char *, int);

File fs/proc/page.c:
110:	u64 stable_page_flags(struct page *);
279:	static ssize_t kpagecgroup_read(struct file *, char *, size_t, loff_t *);
45:	static ssize_t kpagecount_read(struct file *, char *, size_t, loff_t *);
230:	static ssize_t kpageflags_read(struct file *, char *, size_t, loff_t *);
334:	static int proc_page_init(void);

File fs/proc/proc_net.c:
105:	void bpf_iter_fini_seq_net(void *);
94:	int bpf_iter_init_seq_net(void *, struct bpf_iter_aux_info *);
114:	struct proc_dir_entry *proc_create_net_data(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, unsigned int, void *);
156:	struct proc_dir_entry *proc_create_net_data_write(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, proc_write_t, unsigned int, void *);
207:	struct proc_dir_entry *proc_create_net_single(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
248:	struct proc_dir_entry *proc_create_net_single_write(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), proc_write_t, void *);
411:	int proc_net_init(void);
267:	static struct net *get_proc_task_net(struct inode *);
400:	static void proc_net_ns_exit(struct net *);
346:	static int proc_net_ns_init(struct net *);
302:	static int proc_tgid_net_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
287:	static struct dentry *proc_tgid_net_lookup(struct inode *, struct dentry *, unsigned int);
326:	static int proc_tgid_net_readdir(struct file *, struct dir_context *);
39:	static int seq_open_net(struct inode *, struct file *);
77:	static int seq_release_net(struct inode *, struct file *);
176:	static int single_open_net(struct inode *, struct file *);
192:	static int single_release_net(struct inode *, struct file *);

File fs/proc/proc_sysctl.c:
1653:	int __register_sysctl_base(struct ctl_table *);
1426:	void __register_sysctl_init(const char *, struct ctl_table *, const char *);
1557:	struct ctl_table_header *__register_sysctl_paths(struct ctl_table_set *, const struct ctl_path *, struct ctl_table *);
1322:	struct ctl_table_header *__register_sysctl_table(struct ctl_table_set *, const char *, struct ctl_table *);
1909:	void do_sysctl_args(void);
496:	void proc_sys_evict_inode(struct inode *, struct ctl_table_header *);
1766:	int proc_sys_init(void);
67:	void proc_sys_poll_notify(struct ctl_table_poll *);
1399:	struct ctl_table_header *register_sysctl(const char *, struct ctl_table *);
45:	struct ctl_table_header *register_sysctl_mount_point(const char *);
1628:	struct ctl_table_header *register_sysctl_paths(const struct ctl_path *, struct ctl_table *);
1645:	struct ctl_table_header *register_sysctl_table(struct ctl_table *);
1761:	void retire_sysctl_set(struct ctl_table_set *);
1752:	void setup_sysctl_set(struct ctl_table_set *, struct ctl_table_root *, int (*)(struct ctl_table_set *));
1722:	void unregister_sysctl_table(struct ctl_table_header *);
1451:	static int count_subheaders(struct ctl_table *);
1696:	static void drop_sysctl_table(struct ctl_table_header *);
1211:	static bool get_links(struct ctl_dir *, struct ctl_table *, struct ctl_table_root *);
230:	static int insert_header(struct ctl_dir *, struct ctl_table_header *);
557:	static ssize_t proc_sys_call_handler(struct kiocb *, struct iov_iter *, int);
923:	static int proc_sys_compare(const struct dentry *, unsigned int, const char *, const struct qstr *);
903:	static int proc_sys_delete(const struct dentry *);
682:	static bool proc_sys_fill_cache(struct file *, struct dir_context *, struct ctl_table_header *, struct ctl_table *);
848:	static int proc_sys_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
731:	static bool proc_sys_link_fill_cache(struct file *, struct dir_context *, struct ctl_table_header *, struct ctl_table *);
513:	static struct dentry *proc_sys_lookup(struct inode *, struct dentry *, unsigned int);
445:	static struct inode *proc_sys_make_inode(struct super_block *, struct ctl_table_header *, struct ctl_table *);
633:	static int proc_sys_open(struct inode *, struct file *);
801:	static int proc_sys_permission(struct user_namespace *, struct inode *, int);
650:	static __poll_t proc_sys_poll(struct file *, poll_table *);
623:	static ssize_t proc_sys_read(struct kiocb *, struct iov_iter *);
772:	static int proc_sys_readdir(struct file *, struct dir_context *);
896:	static int proc_sys_revalidate(struct dentry *, unsigned int);
830:	static int proc_sys_setattr(struct user_namespace *, struct dentry *, struct iattr *);
628:	static ssize_t proc_sys_write(struct kiocb *, struct iov_iter *);
1814:	static int process_sysctl_arg(char *, char *, const char *, void *);
1662:	static void put_links(struct ctl_table_header *);
1470:	static int register_leaf_sysctl_tables(const char *, char *, struct ctl_table_header ***, struct ctl_table_set *, struct ctl_table *);
1096:	static int sysctl_err(const char *, struct ctl_table *, char *, ...);
1063:	static int sysctl_follow_link(struct ctl_table_header **, struct ctl_table **);
102:	static void sysctl_print_dir(struct ctl_dir *);
1050:	static struct ctl_dir *xlate_dir(struct ctl_table_set *, struct ctl_dir *);

File fs/proc/proc_tty.c:
163:	void proc_tty_init(void);
131:	void proc_tty_register_driver(struct tty_driver *);
147:	void proc_tty_unregister_driver(struct tty_driver *);
67:	static int show_tty_driver(struct seq_file *, void *);
26:	static void show_tty_range(struct seq_file *, struct tty_driver *, dev_t, int);
110:	static void *t_next(struct seq_file *, void *, loff_t *);
104:	static void *t_start(struct seq_file *, loff_t *);
115:	static void t_stop(struct seq_file *, void *);

File fs/proc/root.c:
285:	void proc_root_init(void);
159:	static int proc_fill_super(struct super_block *, struct fs_context *);
229:	static void proc_fs_context_free(struct fs_context *);
224:	static int proc_get_tree(struct fs_context *);
244:	static int proc_init_fs_context(struct fs_context *);
260:	static void proc_kill_sb(struct super_block *);
112:	static int proc_parse_param(struct fs_context *, struct fs_parameter *);
213:	static int proc_reconfigure(struct fs_context *);
313:	static int proc_root_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
322:	static struct dentry *proc_root_lookup(struct inode *, struct dentry *, unsigned int);
330:	static int proc_root_readdir(struct file *, struct dir_context *);

File fs/proc/self.c:
70:	void proc_self_init(void);
36:	int proc_setup_self(struct super_block *);
11:	static const char *proc_self_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/proc/softirqs.c:
29:	static int proc_softirqs_init(void);
11:	static int show_softirqs(struct seq_file *, void *);

File fs/proc/stat.c:
49:	u64 get_idle_time(struct kernel_cpustat *, int);
237:	static int proc_stat_init(void);
108:	static int show_stat(struct seq_file *, void *);
220:	static int stat_open(struct inode *, struct file *);

File fs/proc/task_mmu.c:
30:	void task_mem(struct seq_file *, struct mm_struct *);
87:	unsigned long task_statm(struct mm_struct *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
82:	unsigned long task_vsize(struct mm_struct *);
818:	static void __show_smap(struct seq_file *, const struct mem_size_stats *, bool);
1166:	static int clear_refs_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1225:	static int clear_refs_test_walk(unsigned long, unsigned long, struct mm_walk *);
1252:	static ssize_t clear_refs_write(struct file *, const char *, size_t, loff_t *);
1904:	static int gather_hugetlb_stats(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
1866:	static int gather_pte_stats(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1790:	static void gather_stats(struct page *, struct numa_maps *, int, unsigned long);
177:	static void *m_next(struct seq_file *, void *, loff_t *);
141:	static void *m_start(struct seq_file *, loff_t *);
186:	static void m_stop(struct seq_file *, void *);
1570:	static int pagemap_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
1744:	static int pagemap_open(struct inode *, struct file *);
1466:	static int pagemap_pmd_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1372:	static int pagemap_pte_hole(unsigned long, unsigned long, int, struct mm_walk *);
1655:	static ssize_t pagemap_read(struct file *, char *, size_t, loff_t *);
1755:	static int pagemap_release(struct inode *, struct file *);
368:	static int pid_maps_open(struct inode *, struct file *);
2021:	static int pid_numa_maps_open(struct inode *, struct file *);
1013:	static int pid_smaps_open(struct inode *, struct file *);
221:	static int proc_map_release(struct inode *, struct file *);
355:	static int show_map(struct seq_file *, void *);
275:	static void show_map_vma(struct seq_file *, struct vm_area_struct *);
1937:	static int show_numa_map(struct seq_file *, void *);
857:	static int show_smap(struct seq_file *, void *);
885:	static int show_smaps_rollup(struct seq_file *, void *);
254:	static void show_vma_header_prefix(struct seq_file *, unsigned long, unsigned long, vm_flags_t, unsigned long long, dev_t, unsigned long);
454:	static void smaps_account(struct mem_size_stats *, struct page *, bool, bool, bool, bool, bool);
731:	static int smaps_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
424:	static void smaps_page_accumulate(struct mem_size_stats *, struct page *, unsigned long, unsigned long, bool, bool, bool);
507:	static int smaps_pte_hole(unsigned long, unsigned long, int, struct mm_walk *);
620:	static int smaps_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1018:	static int smaps_rollup_open(struct inode *, struct file *);
1047:	static int smaps_rollup_release(struct inode *, struct file *);

File fs/proc/thread_self.c:
36:	int proc_setup_thread_self(struct super_block *);
70:	void proc_thread_self_init(void);
11:	static const char *proc_thread_self_get_link(struct dentry *, struct inode *, struct delayed_call *);

File fs/proc/uptime.c:
41:	static int proc_uptime_init(void);
12:	static int uptime_proc_show(struct seq_file *, void *);

File fs/proc/util.c:
4:	unsigned int name_to_int(const struct qstr *);

File fs/proc/version.c:
19:	static int proc_version_init(void);
10:	static int version_proc_show(struct seq_file *, void *);

File fs/proc_namespace.c:
314:	static int mountinfo_open(struct inode *, struct file *);
309:	static int mounts_open(struct inode *, struct file *);
242:	static int mounts_open_common(struct inode *, struct file *, int (*)(struct seq_file *, struct vfsmount *));
21:	static __poll_t mounts_poll(struct file *, poll_table *);
299:	static int mounts_release(struct inode *, struct file *);
319:	static int mountstats_open(struct inode *, struct file *);
64:	static void show_mnt_opts(struct seq_file *, struct vfsmount *);
135:	static int show_mountinfo(struct seq_file *, struct vfsmount *);
101:	static int show_vfsmnt(struct seq_file *, struct vfsmount *);
197:	static int show_vfsstat(struct seq_file *, struct vfsmount *);

File fs/pstore/inode.c:
507:	void pstore_exit_fs(void);
417:	void pstore_get_records(int);
490:	int pstore_init_fs(void);
346:	int pstore_mkfile(struct dentry *, struct pstore_record *);
312:	int pstore_put_backend_records(struct pstore_info *);
240:	static void parse_options(char *);
208:	static void pstore_evict_inode(struct inode *);
161:	static loff_t pstore_file_llseek(struct file *, loff_t, int);
141:	static int pstore_file_open(struct inode *, struct file *);
129:	static ssize_t pstore_file_read(struct file *, char *, size_t, loff_t *);
429:	static int pstore_fill_super(struct super_block *, void *, int);
89:	static void *pstore_ftrace_seq_next(struct seq_file *, void *, loff_t *);
102:	static int pstore_ftrace_seq_show(struct seq_file *, void *);
64:	static void *pstore_ftrace_seq_start(struct seq_file *, loff_t *);
84:	static void pstore_ftrace_seq_stop(struct seq_file *, void *);
468:	static void pstore_kill_sb(struct super_block *);
462:	static struct dentry *pstore_mount(struct file_system_type *, int, const char *, void *);
275:	static int pstore_remount(struct super_block *, int *, char *);
268:	static int pstore_show_options(struct seq_file *, struct dentry *);
181:	static int pstore_unlink(struct inode *, struct dentry *);

File fs/pstore/platform.c:
745:	void pstore_get_backend_records(struct pstore_info *, struct dentry *, int);
127:	enum pstore_type_id pstore_name_to_type(const char *);
373:	void pstore_record_init(struct pstore_record *, struct pstore_info *);
574:	int pstore_register(struct pstore_info *);
108:	void pstore_set_kmsg_bytes(int);
116:	const char *pstore_type_to_name(enum pstore_type_id);
642:	void pstore_unregister(struct pstore_info *);
287:	static void allocate_buf_for_compression(void);
806:	static void pstore_dowork(struct work_struct *);
388:	static void pstore_dump(struct kmsg_dumper *, enum kmsg_dump_reason);
857:	static void pstore_exit(void);
836:	static int pstore_init(void);
811:	static void pstore_timefunc(struct timer_list *);
544:	static int pstore_write_user_compat(struct pstore_record *, const char *);
172:	static int zbufsize_deflate(size_t);

File fs/quota/dquot.c:
1663:	int __dquot_alloc_space(struct inode *, qsize_t, int);
1862:	void __dquot_free_space(struct inode *, qsize_t, int);
1962:	int __dquot_transfer(struct inode *, struct dquot **);
137:	void __quota_error(struct super_block *, const char *, const char *, ...);
860:	struct dquot *dqget(struct super_block *, struct kqid);
766:	void dqput(struct dquot *);
426:	int dquot_acquire(struct dquot *);
825:	struct dquot *dquot_alloc(struct super_block *, int);
1734:	int dquot_alloc_inode(struct inode *);
1778:	int dquot_claim_space_nodirty(struct inode *, qsize_t);
473:	int dquot_commit(struct dquot *);
2137:	int dquot_commit_info(struct super_block *, int);
528:	void dquot_destroy(struct dquot *);
2205:	int dquot_disable(struct super_block *, int, unsigned int);
1593:	void dquot_drop(struct inode *);
2175:	int dquot_file_open(struct inode *, struct file *);
1917:	void dquot_free_inode(struct inode *);
2632:	int dquot_get_dqblk(struct super_block *, struct kqid, struct qc_dqblk *);
2647:	int dquot_get_next_dqblk(struct super_block *, struct kqid *, struct qc_dqblk *);
2145:	int dquot_get_next_id(struct super_block *, struct kqid *);
2784:	int dquot_get_state(struct super_block *, struct qc_state *);
1548:	int dquot_initialize(struct inode *);
1554:	bool dquot_initialize_needed(struct inode *);
2437:	int dquot_load_quota_inode(struct inode *, int, int, unsigned int);
2355:	int dquot_load_quota_sb(struct super_block *, int, int, unsigned int);
350:	int dquot_mark_dquot_dirty(struct dquot *);
2311:	int dquot_quota_off(struct super_block *, int);
2487:	int dquot_quota_on(struct super_block *, int, int, const struct path *);
2508:	int dquot_quota_on_mount(struct super_block *, char *, int, int);
688:	int dquot_quota_sync(struct super_block *, int);
1820:	void dquot_reclaim_space_nodirty(struct inode *, qsize_t);
499:	int dquot_release(struct dquot *);
2453:	int dquot_resume(struct super_block *, int);
589:	int dquot_scan_active(struct super_block *, int (*)(struct dquot *, unsigned long), unsigned long);
2765:	int dquot_set_dqblk(struct super_block *, struct kqid, struct qc_dqblk *);
2819:	int dquot_set_dqinfo(struct super_block *, int, struct qc_info *);
2088:	int dquot_transfer(struct user_namespace *, struct inode *, struct iattr *);
632:	int dquot_writeback_dquots(struct super_block *, int);
414:	void mark_info_dirty(struct super_block *, int);
166:	int register_quota_format(struct quota_format_type *);
176:	void unregister_quota_format(struct quota_format_type *);
1443:	static int __dquot_initialize(struct inode *, int);
960:	static int add_dquot_ref(struct super_block *, int);
2866:	static int do_proc_dqstats(struct ctl_table *, int, void *, size_t *, loff_t *);
751:	static unsigned long dqcache_shrink_count(struct shrinker *, struct shrink_control *);
731:	static unsigned long dqcache_shrink_scan(struct shrinker *, struct shrink_control *);
1279:	static int dquot_add_inodes(struct dquot *, qsize_t, struct dquot_warn *);
1324:	static int dquot_add_space(struct dquot *, qsize_t, qsize_t, unsigned int, struct dquot_warn *);
2969:	static int dquot_init(void);
2569:	static int dquot_quota_disable(struct super_block *, unsigned int);
2528:	static int dquot_quota_enable(struct super_block *, unsigned int);
1255:	static void flush_warnings(struct dquot_warn *);
1240:	static void prepare_warning(struct dquot_warn *, struct dquot *, int);

File fs/quota/kqid.c:
68:	qid_t from_kqid(struct user_namespace *, struct kqid);
101:	qid_t from_kqid_munged(struct user_namespace *, struct kqid);
13:	bool qid_eq(struct kqid, struct kqid);
37:	bool qid_lt(struct kqid, struct kqid);
120:	bool qid_valid(struct kqid);

File fs/quota/quota.c:
916:	long __arm64_sys_quotactl(const struct pt_regs *);
972:	long __arm64_sys_quotactl_fd(const struct pt_regs *);
73:	unsigned int qtype_enforce_flag(int);
600:	static void copy_qcinfo_from_xfs_dqblk(struct qc_info *, struct fs_disk_quota *);
767:	static int do_quotactl(struct super_block *, int, int, qid_t, void *, const struct path *);
324:	static int quota_disable(struct super_block *, void *);
313:	static int quota_enable(struct super_block *, void *);
107:	static int quota_getfmt(struct super_block *, int, void *);
119:	static int quota_getinfo(struct super_block *, int, void *);
237:	static int quota_getnextquota(struct super_block *, int, qid_t, void *);
731:	static int quota_getnextxquota(struct super_block *, int, qid_t, void *);
201:	static int quota_getquota(struct super_block *, int, qid_t, void *);
705:	static int quota_getxquota(struct super_block *, int, qid_t, void *);
434:	static int quota_getxstate(struct super_block *, int, void *);
497:	static int quota_getxstatev(struct super_block *, int, void *);
98:	static int quota_quotaoff(struct super_block *, int);
86:	static int quota_quotaon(struct super_block *, int, qid_t, const struct path *);
755:	static int quota_rmxquota(struct super_block *, void *);
147:	static int quota_setinfo(struct super_block *, int, void *);
287:	static int quota_setquota(struct super_block *, int, qid_t, void *);
624:	static int quota_setxquota(struct super_block *, int, qid_t, void *);
54:	static void quota_sync_one(struct super_block *, void *);

File fs/ramfs/file-mmu.c:
34:	static unsigned long ramfs_mmu_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);

File fs/ramfs/inode.c:
57:	struct inode *ramfs_get_inode(struct super_block *, const struct inode *, umode_t, dev_t);
267:	int ramfs_init_fs_context(struct fs_context *);
295:	static int init_ramfs_fs(void);
122:	static int ramfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
231:	static int ramfs_fill_super(struct super_block *, struct fs_context *);
256:	static void ramfs_free_fc(struct fs_context *);
251:	static int ramfs_get_tree(struct fs_context *);
281:	static void ramfs_kill_sb(struct super_block *);
113:	static int ramfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
98:	static int ramfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
200:	static int ramfs_parse_param(struct fs_context *, struct fs_parameter *);
176:	static int ramfs_show_options(struct seq_file *, struct dentry *);
128:	static int ramfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
148:	static int ramfs_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);

File fs/read_write.c:
1559:	long __arm64_sys_copy_file_range(const struct pt_regs *);
311:	long __arm64_sys_lseek(const struct pt_regs *);
672:	long __arm64_sys_pread64(const struct pt_regs *);
1053:	long __arm64_sys_preadv(const struct pt_regs *);
1061:	long __arm64_sys_preadv2(const struct pt_regs *);
706:	long __arm64_sys_pwrite64(const struct pt_regs *);
1073:	long __arm64_sys_pwritev(const struct pt_regs *);
1081:	long __arm64_sys_pwritev2(const struct pt_regs *);
621:	long __arm64_sys_read(const struct pt_regs *);
1041:	long __arm64_sys_readv(const struct pt_regs *);
1290:	long __arm64_sys_sendfile(const struct pt_regs *);
1309:	long __arm64_sys_sendfile64(const struct pt_regs *);
646:	long __arm64_sys_write(const struct pt_regs *);
1047:	long __arm64_sys_writev(const struct pt_regs *);
404:	ssize_t __kernel_read(struct file *, void *, size_t, loff_t *);
529:	ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
499:	ssize_t __kernel_write_iter(struct file *, struct iov_iter *, loff_t *);
230:	loff_t default_llseek(struct file *, loff_t, int);
162:	loff_t fixed_size_llseek(struct file *, loff_t, int, loff_t);
1387:	ssize_t generic_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
144:	loff_t generic_file_llseek(struct file *, loff_t, int);
86:	loff_t generic_file_llseek_size(struct file *, loff_t, int, loff_t, loff_t);
1704:	int generic_file_rw_checks(struct file *, struct file *);
1630:	int generic_write_check_limits(struct file *, loff_t, loff_t *);
1686:	ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
1656:	int generic_write_checks_count(struct kiocb *, loff_t *);
439:	ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
548:	ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
652:	ssize_t ksys_pread64(unsigned int, char *, size_t, loff_t);
686:	ssize_t ksys_pwrite64(unsigned int, const char *, size_t, loff_t);
602:	ssize_t ksys_read(unsigned int, char *, size_t);
626:	ssize_t ksys_write(unsigned int, const char *, size_t);
181:	loff_t no_seek_end_llseek(struct file *, loff_t, int);
201:	loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
224:	loff_t noop_llseek(struct file *, loff_t, int);
355:	int rw_verify_area(int, struct file *, const loff_t *, size_t);
1476:	ssize_t vfs_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
805:	ssize_t vfs_iocb_iter_read(struct file *, struct kiocb *, struct iov_iter *);
869:	ssize_t vfs_iocb_iter_write(struct file *, struct kiocb *, struct iov_iter *);
833:	ssize_t vfs_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
897:	ssize_t vfs_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
285:	loff_t vfs_llseek(struct file *, loff_t, int);
450:	ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
54:	loff_t vfs_setpos(struct file *, loff_t, loff_t);
564:	ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
777:	static ssize_t do_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
842:	static ssize_t do_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
995:	static ssize_t do_preadv(unsigned long, const struct iovec *, unsigned long, loff_t, rwf_t);
941:	static ssize_t do_readv(unsigned long, const struct iovec *, unsigned long, rwf_t);
1181:	static ssize_t do_sendfile(int, int, loff_t *, size_t, loff_t);
965:	static ssize_t do_writev(unsigned long, const struct iovec *, unsigned long, rwf_t);
923:	static ssize_t vfs_writev(struct file *, const struct iovec *, unsigned long, loff_t *, rwf_t);
396:	static int warn_unsupported(struct file *, const char *);

File fs/readdir.c:
271:	long __arm64_sys_getdents(const struct pt_regs *);
354:	long __arm64_sys_getdents64(const struct pt_regs *);
40:	int iterate_dir(struct file *, struct dir_context *);
222:	static bool filldir(struct dir_context *, const char *, int, loff_t, u64, unsigned int);
310:	static bool filldir64(struct dir_context *, const char *, int, loff_t, u64, unsigned int);

File fs/remap_range.c:
268:	int __generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int, const struct iomap_ops *);
367:	loff_t do_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
358:	int generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int);
404:	loff_t vfs_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
491:	int vfs_dedupe_file_range(struct file *, struct file_dedupe_range *);
436:	loff_t vfs_dedupe_file_range_one(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
124:	static int generic_remap_check_len(struct inode *, struct inode *, loff_t, loff_t *, unsigned int);
183:	static int vfs_dedupe_file_range_compare(struct file *, loff_t, struct file *, loff_t, loff_t, bool *);

File fs/select.c:
1068:	long __arm64_sys_poll(const struct pt_regs *);
1101:	long __arm64_sys_ppoll(const struct pt_regs *);
795:	long __arm64_sys_pselect6(const struct pt_regs *);
726:	long __arm64_sys_select(const struct pt_regs *);
625:	int core_sys_select(int, fd_set *, fd_set *, fd_set *, struct timespec64 *);
139:	void poll_freewait(struct poll_wqueues *);
122:	void poll_initwait(struct poll_wqueues *);
274:	int poll_select_set_timeout(struct timespec64 *, time64_t, long);
76:	u64 select_estimate_accuracy(struct timespec64 *);
222:	static void __pollwait(struct file *, wait_queue_head_t *, poll_table *);
1047:	static long do_restart_poll(struct restart_block *);
974:	static int do_sys_poll(struct pollfd *, unsigned int, struct timespec64 *);
298:	static int poll_select_finish(struct timespec64 *, void *, enum poll_time_type, int);
211:	static int pollwake(wait_queue_entry_t *, unsigned int, int, void *);

File fs/seq_file.c:
630:	void *__seq_open_private(struct file *, const struct seq_operations *, int);
440:	char *mangle_path(char *, const char *, const char *);
412:	void seq_bprintf(struct seq_file *, const char *, const u32 *);
537:	int seq_dentry(struct seq_file *, struct dentry *, const char *);
374:	void seq_escape_mem(struct seq_file *, const char *, size_t, unsigned int, const char *);
1147:	void seq_file_init(void);
498:	int seq_file_path(struct seq_file *, struct file *, const char *);
864:	void seq_hex_dump(struct seq_file *, const char *, int, int, int, const void *, size_t, bool);
1009:	struct hlist_node *seq_hlist_next(void *, struct hlist_head *, loff_t *);
1126:	struct hlist_node *seq_hlist_next_percpu(void *, struct hlist_head *, int *, loff_t *);
1079:	struct hlist_node *seq_hlist_next_rcu(void *, struct hlist_head *, loff_t *);
973:	struct hlist_node *seq_hlist_start(struct hlist_head *, loff_t);
992:	struct hlist_node *seq_hlist_start_head(struct hlist_head *, loff_t);
1057:	struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *, loff_t);
1102:	struct hlist_node *seq_hlist_start_percpu(struct hlist_head *, int *, loff_t);
1033:	struct hlist_node *seq_hlist_start_rcu(struct hlist_head *, loff_t);
924:	struct list_head *seq_list_next(void *, struct list_head *, loff_t *);
955:	struct list_head *seq_list_next_rcu(void *, struct list_head *, loff_t *);
903:	struct list_head *seq_list_start(struct list_head *, loff_t);
915:	struct list_head *seq_list_start_head(struct list_head *, loff_t);
946:	struct list_head *seq_list_start_head_rcu(struct list_head *, loff_t);
934:	struct list_head *seq_list_start_rcu(struct list_head *, loff_t);
308:	loff_t seq_lseek(struct file *, loff_t, int);
57:	int seq_open(struct file *, const struct seq_operations *);
656:	int seq_open_private(struct file *, const struct seq_operations *, int);
847:	void seq_pad(struct seq_file *, char);
470:	int seq_path(struct seq_file *, const struct path *, const char *);
507:	int seq_path_root(struct seq_file *, const struct path *, const struct path *, const char *);
401:	void seq_printf(struct seq_file *, const char *, ...);
783:	void seq_put_decimal_ll(struct seq_file *, const char *, long long);
730:	void seq_put_decimal_ull(struct seq_file *, const char *, unsigned long long);
698:	void seq_put_decimal_ull_width(struct seq_file *, const char *, unsigned long long, unsigned int);
749:	void seq_put_hex_ll(struct seq_file *, const char *, unsigned long long, unsigned int);
663:	void seq_putc(struct seq_file *, char);
672:	void seq_puts(struct seq_file *, const char *);
151:	ssize_t seq_read(struct file *, char *, size_t, loff_t *);
171:	ssize_t seq_read_iter(struct kiocb *, struct iov_iter *);
352:	int seq_release(struct inode *, struct file *);
620:	int seq_release_private(struct inode *, struct file *);
386:	void seq_vprintf(struct seq_file *, const char *, va_list);
830:	int seq_write(struct seq_file *, const void *, size_t);
572:	int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
593:	int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
611:	int single_release(struct inode *, struct file *);
557:	void *single_start(struct seq_file *, loff_t *);
562:	static void *single_next(struct seq_file *, void *, loff_t *);
568:	static void single_stop(struct seq_file *, void *);
90:	static int traverse(struct seq_file *, loff_t);

File fs/signalfd.c:
314:	long __arm64_sys_signalfd(const struct pt_regs *);
302:	long __arm64_sys_signalfd4(const struct pt_regs *);
36:	void signalfd_cleanup(struct sighand_struct *);
253:	static int do_signalfd4(int, sigset_t *, int);
51:	static __poll_t signalfd_poll(struct file *, poll_table *);
202:	static ssize_t signalfd_read(struct file *, char *, size_t, loff_t *);
45:	static int signalfd_release(struct inode *, struct file *);
232:	static void signalfd_show_fdinfo(struct seq_file *, struct file *);

File fs/splice.c:
1328:	long __arm64_sys_splice(const struct pt_regs *);
1694:	long __arm64_sys_tee(const struct pt_regs *);
1292:	long __arm64_sys_vmsplice(const struct pt_regs *);
549:	ssize_t __splice_from_pipe(struct pipe_inode_info *, struct splice_desc *, splice_actor *);
230:	ssize_t add_to_pipe(struct pipe_inode_info *, struct pipe_buffer *);
1023:	long do_splice(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
951:	long do_splice_direct(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
1661:	long do_tee(struct file *, struct file *, size_t, unsigned int);
298:	ssize_t generic_file_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
740:	ssize_t generic_splice_sendpage(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
615:	ssize_t iter_file_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
809:	ssize_t splice_direct_to_actor(struct file *, struct splice_desc *, splice_direct_actor *);
1003:	long splice_file_to_pipe(struct file *, struct pipe_inode_info *, loff_t *, size_t, unsigned int);
581:	ssize_t splice_from_pipe(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int, splice_actor *);
256:	int splice_grow_spd(const struct pipe_inode_info *, struct splice_pipe_desc *);
276:	void splice_shrink_spd(struct splice_pipe_desc *);
182:	ssize_t splice_to_pipe(struct pipe_inode_info *, struct splice_pipe_desc *);
926:	static int direct_splice_actor(struct pipe_inode_info *, struct splice_desc *);
1395:	static int opipe_prep(struct pipe_inode_info *, unsigned int);
102:	static int page_cache_pipe_buf_confirm(struct pipe_inode_info *, struct pipe_buffer *);
91:	static void page_cache_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
46:	static bool page_cache_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
345:	static int pipe_to_sendpage(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
1198:	static int pipe_to_user(struct pipe_inode_info *, struct pipe_buffer *, struct splice_desc *);
468:	static int splice_from_pipe_next(struct pipe_inode_info *, struct splice_desc *);
147:	static bool user_page_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);

File fs/squashfs/block.c:
140:	int squashfs_read_data(struct super_block *, u64, int, u64 *, struct squashfs_page_actor *);
33:	static int copy_bio_to_actor(struct bio *, struct squashfs_page_actor *, int, int);
79:	static int squashfs_bio_read(struct super_block *, u64, int, struct bio **, int *);

File fs/squashfs/cache.c:
197:	void squashfs_cache_delete(struct squashfs_cache *);
52:	struct squashfs_cache_entry *squashfs_cache_get(struct super_block *, struct squashfs_cache *, u64, int);
223:	struct squashfs_cache *squashfs_cache_init(char *, int, int);
173:	void squashfs_cache_put(struct squashfs_cache_entry *);
293:	int squashfs_copy_data(void *, struct squashfs_cache_entry *, int, int);
394:	struct squashfs_cache_entry *squashfs_get_datablock(struct super_block *, u64, int);
379:	struct squashfs_cache_entry *squashfs_get_fragment(struct super_block *, u64, int);
331:	int squashfs_read_metadata(struct super_block *, void *, u64 *, int *, int);
406:	void *squashfs_read_table(struct super_block *, u64, int);

File fs/squashfs/decompressor.c:
129:	void *squashfs_decompressor_setup(struct super_block *, unsigned short);
76:	const struct squashfs_decompressor *squashfs_lookup_decompressor(int);

File fs/squashfs/decompressor_single.c:
62:	static int squashfs_decompress(struct squashfs_sb_info *, struct bio *, int, int, struct squashfs_page_actor *);
27:	static void *squashfs_decompressor_create(struct squashfs_sb_info *, void *);
52:	static void squashfs_decompressor_destroy(struct squashfs_sb_info *);
81:	static int squashfs_max_decompressors(void);

File fs/squashfs/dir.c:
97:	static int squashfs_readdir(struct file *, struct dir_context *);

File fs/squashfs/export.c:
115:	__le64 *squashfs_read_inode_lookup_table(struct super_block *, u64, u64, unsigned int);
82:	static struct dentry *squashfs_fh_to_dentry(struct super_block *, struct fid *, int, int);
93:	static struct dentry *squashfs_fh_to_parent(struct super_block *, struct fid *, int, int);
103:	static struct dentry *squashfs_get_parent(struct dentry *);

File fs/squashfs/file.c:
383:	void squashfs_copy_cache(struct page *, struct squashfs_cache_entry *, int, int);
365:	void squashfs_fill_page(struct page *, struct squashfs_cache_entry *, int, int);
327:	static int read_blocklist(struct inode *, int, u64 *);
161:	static long long read_indexes(struct super_block *, int, u64 *, int *);
448:	static int squashfs_read_folio(struct file *, struct folio *);
536:	static void squashfs_readahead(struct readahead_control *);

File fs/squashfs/file_cache.c:
21:	int squashfs_readpage_block(struct page *, u64, int, int);

File fs/squashfs/fragment.c:
35:	int squashfs_frag_lookup(struct super_block *, unsigned int, u64 *);
63:	__le64 *squashfs_read_fragment_index_table(struct super_block *, u64, u64, unsigned int);

File fs/squashfs/id.c:
32:	int squashfs_get_id(struct super_block *, unsigned int, unsigned int *);
60:	__le64 *squashfs_read_id_index_table(struct super_block *, u64, u64, unsigned short);

File fs/squashfs/inode.c:
72:	struct inode *squashfs_iget(struct super_block *, long long, unsigned int);
100:	int squashfs_read_inode(struct inode *, long long);

File fs/squashfs/namei.c:
126:	static struct dentry *squashfs_lookup(struct inode *, struct dentry *, unsigned int);

File fs/squashfs/page_actor.c:
43:	struct squashfs_page_actor *squashfs_page_actor_init(void **, int, int);
105:	struct squashfs_page_actor *squashfs_page_actor_init_special(struct squashfs_sb_info *, struct page **, int, int);
38:	static void cache_finish_page(struct squashfs_page_actor *);
24:	static void *cache_first_page(struct squashfs_page_actor *);
30:	static void *cache_next_page(struct squashfs_page_actor *);
99:	static void direct_finish_page(struct squashfs_page_actor *);
84:	static void *direct_first_page(struct squashfs_page_actor *);
89:	static void *direct_next_page(struct squashfs_page_actor *);

File fs/squashfs/super.c:
638:	static void exit_squashfs_fs(void);
589:	static void init_once(void *);
619:	static int init_squashfs_fs(void);
645:	static struct inode *squashfs_alloc_inode(struct super_block *);
180:	static int squashfs_fill_super(struct super_block *, struct fs_context *);
487:	static void squashfs_free_fs_context(struct fs_context *);
654:	static void squashfs_free_inode(struct inode *);
468:	static int squashfs_get_tree(struct fs_context *);
525:	static int squashfs_init_fs_context(struct fs_context *);
127:	static int squashfs_parse_param(struct fs_context *, struct fs_parameter *);
568:	static void squashfs_put_super(struct super_block *);
473:	static int squashfs_reconfigure(struct fs_context *);
499:	static int squashfs_show_options(struct seq_file *, struct dentry *);
548:	static int squashfs_statfs(struct dentry *, struct kstatfs *);

File fs/squashfs/symlink.c:
33:	static int squashfs_symlink_read_folio(struct file *, struct folio *);

File fs/squashfs/xattr.h:
17:	static __le64 *squashfs_read_xattr_id_table(struct super_block *, u64, u64 *, unsigned int *);

File fs/squashfs/zlib_wrapper.c:
42:	static void zlib_free(void *);
24:	static void *zlib_init(struct squashfs_sb_info *, void *);
52:	static int zlib_uncompress(struct squashfs_sb_info *, void *, struct bio *, int, int, struct squashfs_page_actor *);

File fs/stack.c:
63:	void fsstack_copy_attr_all(struct inode *, const struct inode *);
11:	void fsstack_copy_inode_size(struct inode *, struct inode *);

File fs/stat.c:
447:	long __arm64_sys_newfstat(const struct pt_regs *);
434:	long __arm64_sys_newfstatat(const struct pt_regs *);
420:	long __arm64_sys_newlstat(const struct pt_regs *);
409:	long __arm64_sys_newstat(const struct pt_regs *);
501:	long __arm64_sys_readlink(const struct pt_regs *);
495:	long __arm64_sys_readlinkat(const struct pt_regs *);
664:	long __arm64_sys_statx(const struct pt_regs *);
767:	void __inode_add_bytes(struct inode *, loff_t);
788:	void __inode_sub_bytes(struct inode *, loff_t);
635:	int do_statx(int, struct filename *, unsigned int, unsigned int, struct statx *);
74:	void generic_fill_statx_attr(struct inode *, struct kstat *);
44:	void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
191:	int getname_statx_lookup_flags(int);
779:	void inode_add_bytes(struct inode *, loff_t);
810:	loff_t inode_get_bytes(struct inode *);
822:	void inode_set_bytes(struct inode *, loff_t);
801:	void inode_sub_bytes(struct inode *, loff_t);
178:	int vfs_fstat(int, struct kstat *);
262:	int vfs_fstatat(int, const char *, struct kstat *, int);
156:	int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
97:	int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
370:	static int cp_new_stat(struct kstat *, struct stat *);
599:	static int cp_statx(const struct kstat *, struct statx *);
459:	static int do_readlinkat(int, const char *, char *, int);
220:	static int vfs_statx(int, struct filename *, int, struct kstat *, u32);

File fs/statfs.c:
213:	long __arm64_sys_fstatfs(const struct pt_regs *);
222:	long __arm64_sys_fstatfs64(const struct pt_regs *);
192:	long __arm64_sys_statfs(const struct pt_regs *);
201:	long __arm64_sys_statfs64(const struct pt_regs *);
248:	long __arm64_sys_ustat(const struct pt_regs *);
115:	int fd_statfs(int, struct kstatfs *);
97:	int user_statfs(const char *, struct kstatfs *);
72:	int vfs_get_fsid(struct dentry *, __kernel_fsid_t *);
86:	int vfs_statfs(const struct path *, struct kstatfs *);

File fs/super.c:
327:	void deactivate_locked_super(struct super_block *);
359:	void deactivate_super(struct super_block *);
666:	void drop_super(struct super_block *);
674:	void drop_super_exclusive(struct super_block *);
993:	void emergency_remount(void);
1027:	void emergency_thaw_all(void);
1071:	void free_anon_bdev(dev_t);
1650:	int freeze_super(struct super_block *);
468:	void generic_shutdown_super(struct super_block *);
818:	struct super_block *get_active_super(struct block_device *);
1051:	int get_anon_bdev(dev_t *);
780:	struct super_block *get_super(struct block_device *);
1215:	int get_tree_bdev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1177:	int get_tree_keyed(struct fs_context *, int (*)(struct super_block *, struct fs_context *), void *);
1153:	int get_tree_nodev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1161:	int get_tree_single(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1169:	int get_tree_single_reconf(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
711:	void iterate_supers(void (*)(struct super_block *, void *), void *);
746:	void iterate_supers_type(struct file_system_type *, void (*)(struct super_block *, void *), void *);
1083:	void kill_anon_super(struct super_block *);
1380:	void kill_block_super(struct super_block *);
1091:	void kill_litter_super(struct super_block *);
1303:	struct dentry *mount_bdev(struct file_system_type *, int, const char *, void *, int (*)(struct super_block *, void *, int));
515:	bool mount_capable(struct fs_context *);
1395:	struct dentry *mount_nodev(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
1445:	struct dentry *mount_single(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
308:	void put_super(struct super_block *);
1415:	int reconfigure_single(struct super_block *, int, void *);
880:	int reconfigure_super(struct fs_context *);
441:	void retire_super(struct super_block *);
1077:	int set_anon_super(struct super_block *, void *);
1099:	int set_anon_super_fc(struct super_block *, struct fs_context *);
606:	struct super_block *sget(struct file_system_type *, int (*)(struct super_block *, void *), int (*)(struct super_block *, void *), int, void *);
541:	struct super_block *sget_fc(struct fs_context *, int (*)(struct super_block *, struct fs_context *), int (*)(struct super_block *, struct fs_context *));
1566:	int super_setup_bdi(struct super_block *);
1537:	int super_setup_bdi_name(struct super_block *, char *, ...);
1761:	int thaw_super(struct super_block *);
413:	bool trylock_super(struct super_block *);
841:	struct super_block *user_get_super(dev_t, bool);
1478:	int vfs_get_tree(struct fs_context *);
681:	static void __iterate_supers(void (*)(struct super_block *));
286:	static void __put_super(struct super_block *);
199:	static struct super_block *alloc_super(struct file_system_type *, int, struct user_namespace *);
1440:	static int compare_single(struct super_block *, void *);
167:	static void destroy_super_rcu(struct callback_head *);
156:	static void destroy_super_work(struct work_struct *);
175:	static void destroy_unused_super(struct super_block *);
986:	static void do_emergency_remount(struct work_struct *);
968:	static void do_emergency_remount_callback(struct super_block *);
1015:	static void do_thaw_all(struct work_struct *);
1004:	static void do_thaw_all_callback(struct super_block *);
382:	static int grab_super(struct super_block *);
1189:	static int set_bdev_super(struct super_block *, void *);
1200:	static int set_bdev_super_fc(struct super_block *, struct fs_context *);
117:	static unsigned long super_cache_count(struct shrinker *, struct shrink_control *);
60:	static unsigned long super_cache_scan(struct shrinker *, struct shrink_control *);
1298:	static int test_bdev_super(struct super_block *, void *);
1205:	static int test_bdev_super_fc(struct super_block *, struct fs_context *);
1105:	static int test_keyed_super(struct super_block *, struct fs_context *);
1110:	static int test_single_super(struct super_block *, struct fs_context *);
1720:	static int thaw_super_locked(struct super_block *);
1115:	static int vfs_get_super(struct fs_context *, bool, int (*)(struct super_block *, struct fs_context *), int (*)(struct super_block *, struct fs_context *));

File fs/sync.c:
223:	long __arm64_sys_fdatasync(const struct pt_regs *);
218:	long __arm64_sys_fsync(const struct pt_regs *);
111:	long __arm64_sys_sync(const struct pt_regs *);
370:	long __arm64_sys_sync_file_range(const struct pt_regs *);
387:	long __arm64_sys_sync_file_range2(const struct pt_regs *);
149:	long __arm64_sys_syncfs(const struct pt_regs *);
135:	void emergency_sync(void);
97:	void ksys_sync(void);
355:	int ksys_sync_file_range(int, loff_t, loff_t, unsigned int);
228:	int sync_file_range(struct file *, loff_t, loff_t, unsigned int);
30:	int sync_filesystem(struct super_block *);
200:	int vfs_fsync(struct file *, int);
180:	int vfs_fsync_range(struct file *, loff_t, loff_t, int);
117:	static void do_sync_work(struct work_struct *);
80:	static void sync_fs_one_sb(struct super_block *, void *);
74:	static void sync_inodes_one_sb(struct super_block *, void *);

File fs/sysfs/dir.c:
40:	int sysfs_create_dir_ns(struct kobject *, const void *);
134:	int sysfs_create_mount_point(struct kobject *, const char *);
117:	int sysfs_move_dir_ns(struct kobject *, struct kobject *, const void *);
79:	void sysfs_remove_dir(struct kobject *);
155:	void sysfs_remove_mount_point(struct kobject *, const char *);
105:	int sysfs_rename_dir_ns(struct kobject *, const char *, const void *);
21:	void sysfs_warn_dup(struct kernfs_node *, const char *);

File fs/sysfs/file.c:
304:	int sysfs_add_bin_file_mode_ns(struct kernfs_node *, const struct bin_attribute *, umode_t, kuid_t, kgid_t, const void *);
254:	int sysfs_add_file_mode_ns(struct kernfs_node *, const struct attribute *, umode_t, kuid_t, kgid_t, const void *);
379:	int sysfs_add_file_to_group(struct kobject *, const struct attribute *, const char *);
444:	struct kernfs_node *sysfs_break_active_protection(struct kobject *, const struct attribute *);
691:	int sysfs_change_owner(struct kobject *, kuid_t, kgid_t);
413:	int sysfs_chmod_file(struct kobject *, const struct attribute *, umode_t);
558:	int sysfs_create_bin_file(struct kobject *, const struct bin_attribute *);
345:	int sysfs_create_file_ns(struct kobject *, const struct attribute *, const void *);
359:	int sysfs_create_files(struct kobject *, const struct attribute * const *);
729:	int sysfs_emit(char *, const char *, ...);
757:	int sysfs_emit_at(char *, int, const char *, ...);
649:	int sysfs_file_change_owner(struct kobject *, const char *, kuid_t, kgid_t);
610:	int sysfs_link_change_owner(struct kobject *, struct kobject *, const char *, kuid_t, kgid_t);
180:	void sysfs_notify(struct kobject *, const char *, const char *);
578:	void sysfs_remove_bin_file(struct kobject *, const struct bin_attribute *);
534:	void sysfs_remove_file_from_group(struct kobject *, const struct attribute *, const char *);
486:	void sysfs_remove_file_ns(struct kobject *, const struct attribute *, const void *);
502:	bool sysfs_remove_file_self(struct kobject *, const struct attribute *);
519:	void sysfs_remove_files(struct kobject *, const struct attribute * const *);
468:	void sysfs_unbreak_active_protection(struct kernfs_node *);
161:	static int sysfs_kf_bin_mmap(struct kernfs_open_file *, struct vm_area_struct *);
170:	static int sysfs_kf_bin_open(struct kernfs_open_file *);
77:	static ssize_t sysfs_kf_bin_read(struct kernfs_open_file *, char *, size_t, loff_t);
140:	static ssize_t sysfs_kf_bin_write(struct kernfs_open_file *, char *, size_t, loff_t);
101:	static ssize_t sysfs_kf_read(struct kernfs_open_file *, char *, size_t, loff_t);
40:	static int sysfs_kf_seq_show(struct seq_file *, void *);
127:	static ssize_t sysfs_kf_write(struct kernfs_open_file *, char *, size_t, loff_t);

File fs/sysfs/group.c:
426:	int compat_only_sysfs_link_entry_to_kobj(struct kobject *, struct kobject *, const char *, const char *);
381:	int sysfs_add_link_to_group(struct kobject *, const char *, struct kobject *, const char *);
171:	int sysfs_create_group(struct kobject *, const struct attribute_group *);
211:	int sysfs_create_groups(struct kobject *, const struct attribute_group **);
516:	int sysfs_group_change_owner(struct kobject *, const struct attribute_group *, kuid_t, kgid_t);
559:	int sysfs_groups_change_owner(struct kobject *, const struct attribute_group **, kuid_t, kgid_t);
325:	int sysfs_merge_group(struct kobject *, const struct attribute_group *);
269:	void sysfs_remove_group(struct kobject *, const struct attribute_group *);
304:	void sysfs_remove_groups(struct kobject *, const struct attribute_group **);
404:	void sysfs_remove_link_from_group(struct kobject *, const char *, const char *);
359:	void sysfs_unmerge_group(struct kobject *, const struct attribute_group *);
254:	int sysfs_update_group(struct kobject *, const struct attribute_group *);
229:	int sysfs_update_groups(struct kobject *, const struct attribute_group **);
107:	static int internal_create_group(struct kobject *, int, const struct attribute_group *);

File fs/sysfs/mount.c:
97:	int sysfs_init(void);
40:	static void sysfs_fs_context_free(struct fs_context *);
26:	static int sysfs_get_tree(struct fs_context *);
55:	static int sysfs_init_fs_context(struct fs_context *);
82:	static void sysfs_kill_sb(struct super_block *);

File fs/sysfs/symlink.c:
89:	int sysfs_create_link(struct kobject *, struct kobject *, const char *);
105:	int sysfs_create_link_nowarn(struct kobject *, struct kobject *, const char *);
61:	int sysfs_create_link_sd(struct kernfs_node *, struct kobject *, const char *);
121:	void sysfs_delete_link(struct kobject *, struct kobject *, const char *);
143:	void sysfs_remove_link(struct kobject *, const char *);
166:	int sysfs_rename_link_ns(struct kobject *, struct kobject *, const char *, const char *, const void *);
20:	static int sysfs_do_create_link_sd(struct kernfs_node *, struct kobject *, const char *, int);

File fs/timerfd.c:
406:	long __arm64_sys_timerfd_create(const struct pt_regs *);
576:	long __arm64_sys_timerfd_gettime(const struct pt_regs *);
558:	long __arm64_sys_timerfd_settime(const struct pt_regs *);
97:	void timerfd_clock_was_set(void);
129:	void timerfd_resume(void);
82:	static enum alarmtimer_restart timerfd_alarmproc(struct alarm *, ktime_t);
249:	static __poll_t timerfd_poll(struct file *, poll_table *);
265:	static ssize_t timerfd_read(struct file *, char *, size_t, loff_t *);
235:	static int timerfd_release(struct inode *, struct file *);
118:	static void timerfd_resume_work(struct work_struct *);
321:	static void timerfd_show(struct seq_file *, struct file *);
74:	static enum hrtimer_restart timerfd_tmrproc(struct hrtimer *);

File fs/utimes.c:
147:	long __arm64_sys_utimensat(const struct pt_regs *);
139:	long do_utimes(int, const char *, struct timespec64 *, int);
19:	int vfs_utimes(const struct path *, struct timespec64 *);

File fs/xattr.c:
788:	long __arm64_sys_fgetxattr(const struct pt_regs *);
865:	long __arm64_sys_flistxattr(const struct pt_regs *);
934:	long __arm64_sys_fremovexattr(const struct pt_regs *);
676:	long __arm64_sys_fsetxattr(const struct pt_regs *);
776:	long __arm64_sys_getxattr(const struct pt_regs *);
782:	long __arm64_sys_lgetxattr(const struct pt_regs *);
853:	long __arm64_sys_listxattr(const struct pt_regs *);
859:	long __arm64_sys_llistxattr(const struct pt_regs *);
928:	long __arm64_sys_lremovexattr(const struct pt_regs *);
669:	long __arm64_sys_lsetxattr(const struct pt_regs *);
922:	long __arm64_sys_removexattr(const struct pt_regs *);
662:	long __arm64_sys_setxattr(const struct pt_regs *);
412:	ssize_t __vfs_getxattr(struct dentry *, struct inode *, const char *, void *, size_t);
483:	int __vfs_removexattr(struct user_namespace *, struct dentry *, const char *);
513:	int __vfs_removexattr_locked(struct user_namespace *, struct dentry *, const char *, struct inode **);
186:	int __vfs_setxattr(struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
277:	int __vfs_setxattr_locked(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int, struct inode **);
224:	int __vfs_setxattr_noperm(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int);
700:	ssize_t do_getxattr(struct mnt_idmap *, struct dentry *, struct xattr_ctx *);
601:	int do_setxattr(struct mnt_idmap *, struct dentry *, struct xattr_ctx *);
957:	ssize_t generic_listxattr(struct dentry *, char *, size_t);
97:	int may_write_xattr(struct user_namespace *, struct inode *);
572:	int setxattr_copy(const char *, struct xattr_ctx *);
1349:	void simple_xattr_add(struct simple_xattrs *, struct simple_xattr *);
1038:	struct simple_xattr *simple_xattr_alloc(const void *, size_t);
1109:	int simple_xattr_get(struct simple_xattrs *, const char *, void *, size_t);
1281:	ssize_t simple_xattr_list(struct inode *, struct simple_xattrs *, char *, size_t);
1158:	int simple_xattr_set(struct simple_xattrs *, const char *, const void *, size_t, int, ssize_t *);
1376:	void simple_xattrs_free(struct simple_xattrs *);
1363:	void simple_xattrs_init(struct simple_xattrs *);
430:	ssize_t vfs_getxattr(struct user_namespace *, struct dentry *, const char *, void *, size_t);
377:	int vfs_getxattr_alloc(struct user_namespace *, struct dentry *, const char *, char **, size_t, gfp_t);
463:	ssize_t vfs_listxattr(struct dentry *, char *, size_t);
545:	int vfs_removexattr(struct user_namespace *, struct dentry *, const char *);
306:	int vfs_setxattr(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int);
1005:	const char *xattr_full_name(const struct xattr_handler *, const char *);
162:	int xattr_supported_namespace(struct inode *, const char *);
807:	static ssize_t listxattr(struct dentry *, char *, size_t);
757:	static ssize_t path_getxattr(const char *, const char *, void *, size_t, unsigned int);
900:	static int path_removexattr(const char *, const char *, unsigned int);
637:	static int path_setxattr(const char *, const char *, const void *, size_t, int, unsigned int);
882:	static long removexattr(struct mnt_idmap *, struct dentry *, const char *);
613:	static long setxattr(struct mnt_idmap *, struct dentry *, const char *, const void *, size_t, int);
113:	static int xattr_permission(struct user_namespace *, struct inode *, const char *, int);

File init/calibrate.c:
275:	void calibrate_delay(void);
261:	unsigned long calibrate_delay_is_known(void);
271:	void calibration_delay_done(void);
17:	static int lpj_setup(char *);

File init/do_mounts.c:
666:	void init_rootfs(void);
394:	void mount_block_root(char *, int);
566:	void mount_root(void);
277:	dev_t name_to_dev_t(const char *);
600:	void prepare_namespace(void);
357:	static int do_mount_root(const char *, const char *, const int, const void *);
526:	static bool fs_is_nodev(char *);
323:	static int fs_names_setup(char *);
37:	static int load_ramdisk(char *);
160:	static int match_dev_by_label(struct device *, const void *);
76:	static int match_dev_by_uuid(struct device *, const void *);
456:	static int mount_nfs_root(void);
539:	static int mount_nodev_root(void);
44:	static int readonly(char *);
52:	static int readwrite(char *);
316:	static int root_data_setup(char *);
330:	static int root_delay_setup(char *);
297:	static int root_dev_setup(char *);
652:	static int rootfs_init_fs_context(struct fs_context *);
305:	static int rootwait_setup(char *);
341:	static int split_fs_names(char *, size_t, char *);

File init/do_mounts.h:
17:	static int create_dev(char *, dev_t);

File init/do_mounts_initrd.c:
136:	bool initrd_load(void);
68:	static int early_initrd(char *);
51:	static int early_initrdmem(char *);
35:	static int kernel_do_mounts_initrd_sysctls_init(void);
43:	static int no_initrd(char *);

File init/initramfs.c:
629:	void free_initrd_mem(unsigned long, unsigned long);
584:	void reserve_initrd_mem(void);
737:	void wait_for_initramfs(void);
335:	static void clean_path(char *, umode_t);
150:	static void dir_add(const char *, time64_t);
164:	static void dir_utime(void);
267:	static int do_collect(void);
407:	static int do_copy(void);
281:	static int do_header(void);
363:	static int do_name(void);
696:	static void do_populate_rootfs(void *, async_cookie_t);
326:	static int do_reset(void);
314:	static int do_skip(void);
261:	static int do_start(void);
429:	static int do_symlink(void);
56:	static void error(char *);
90:	static char *find_link(int, int, int, umode_t, char *);
462:	static long flush_buffer(void *, unsigned long);
118:	static void free_hash(void);
572:	static int initramfs_async_setup(char *);
563:	static int keepinitrd_setup(char *);
348:	static int maybe_link(void);
62:	static void panic_show_mem(const char *, ...);
192:	static void parse_header(char *);
753:	static int populate_rootfs(void);
553:	static int retain_initrd_param(char *);
489:	static char *unpack_to_rootfs(char *, unsigned long);
24:	static ssize_t xwrite(struct file *, const unsigned char *, size_t, loff_t *);

File init/main.c:
892:	void arch_call_rest_init(void);
775:	void arch_post_acpi_subsys_init(void);
1589:	void console_on_rootfs(void);
1296:	int do_one_initcall(initcall_t);
1508:	void free_initmem(void);
787:	void mem_encrypt_init(void);
754:	void parse_early_options(char *);
761:	void parse_early_param(void);
791:	void pgtable_cache_init(void);
789:	void poking_init(void);
686:	void rest_init(void);
777:	void smp_setup_processor_id(void);
940:	void start_kernel(void);
782:	void thread_stack_cache_init(void);
793:	void trap_init(void);
238:	static int debug_kernel(char *);
1408:	static void do_basic_setup(void);
736:	static int do_early_param(char *, char *, const char *, void *);
1367:	static void do_initcall_level(int, char *);
1382:	static void do_initcalls(void);
874:	static int early_randomize_kstack_offset(char *);
273:	static void *get_boot_config_from_initrd(size_t *);
1361:	static int ignore_unknown_bootoption(char *, char *, const char *, void *);
578:	static int init_setup(char *);
1178:	static int initcall_blacklist(char *);
1206:	static bool initcall_blacklisted(initcall_t);
1513:	static int kernel_init(void *);
1603:	static void kernel_init_freeable(void);
253:	static int loglevel(char *);
834:	static void mm_init(void);
202:	static bool obsolete_checksetup(char *);
897:	static void print_unknown_bootoptions(void);
244:	static int quiet_kernel(char *);
595:	static int rdinit_setup(char *);
494:	static void repair_env_string(char *, char *);
807:	static void report_meminit(void);
1426:	static int run_init_process(const char *);
1464:	static int set_debug_rodata(char *);
509:	static int set_init_arg(char *, char *, const char *, void *);
188:	static int set_reset_devices(char *);
619:	static void setup_command_line(char *);
1257:	static void trace_initcall_finish_cb(void *, initcall_t, int);
1248:	static void trace_initcall_start_cb(void *, initcall_t);
534:	static int unknown_bootoption(char *, char *, const char *, void *);
481:	static int warn_bootconfig(char *);

File init/version.c:
20:	static int early_hostname(char *);

File io_uring/advise.c:
78:	int io_fadvise(struct io_kiocb *, unsigned int);
65:	int io_fadvise_prep(struct io_kiocb *, const struct io_uring_sqe *);
48:	int io_madvise(struct io_kiocb *, unsigned int);
31:	int io_madvise_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/cancel.c:
201:	void init_hash_table(struct io_hash_table *, unsigned int);
165:	int io_async_cancel(struct io_kiocb *, unsigned int);
108:	int io_async_cancel_prep(struct io_kiocb *, const struct io_uring_sqe *);
233:	int io_sync_cancel(struct io_ring_ctx *, void *);
81:	int io_try_cancel(struct io_uring_task *, struct io_cancel_data *, unsigned int);
130:	static int __io_async_cancel(struct io_cancel_data *, struct io_uring_task *, unsigned int);
30:	static bool io_cancel_cb(struct io_wq_work *, void *);

File io_uring/epoll.c:
50:	int io_epoll_ctl(struct io_kiocb *, unsigned int);
24:	int io_epoll_ctl_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/fdinfo.c:
209:	void io_uring_show_fdinfo(struct seq_file *, struct file *);
51:	static void __io_uring_show_fdinfo(struct io_ring_ctx *, struct seq_file *);
19:	static int io_uring_show_cred(struct seq_file *, unsigned int, const struct cred *);

File io_uring/filetable.c:
107:	int __io_fixed_fd_install(struct io_ring_ctx *, struct file *, unsigned int);
36:	bool io_alloc_file_tables(struct io_file_table *, unsigned int);
131:	int io_fixed_fd_install(struct io_kiocb *, unsigned int, struct file *, unsigned int);
146:	int io_fixed_fd_remove(struct io_ring_ctx *, unsigned int);
52:	void io_free_file_tables(struct io_file_table *);
176:	int io_register_file_alloc_range(struct io_ring_ctx *, struct io_uring_file_index_range *);

File io_uring/filetable.h:
33:	static void io_file_bitmap_set(struct io_file_table *, int);

File io_uring/fs.c:
287:	void io_link_cleanup(struct io_kiocb *);
271:	int io_linkat(struct io_kiocb *, unsigned int);
241:	int io_linkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
176:	int io_mkdirat(struct io_kiocb *, unsigned int);
191:	void io_mkdirat_cleanup(struct io_kiocb *);
154:	int io_mkdirat_prep(struct io_kiocb *, const struct io_uring_sqe *);
80:	int io_renameat(struct io_kiocb *, unsigned int);
96:	void io_renameat_cleanup(struct io_kiocb *);
50:	int io_renameat_prep(struct io_kiocb *, const struct io_uring_sqe *);
226:	int io_symlinkat(struct io_kiocb *, unsigned int);
198:	int io_symlinkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
129:	int io_unlinkat(struct io_kiocb *, unsigned int);
147:	void io_unlinkat_cleanup(struct io_kiocb *);
104:	int io_unlinkat_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/io-wq.c:
1072:	enum io_wq_cancel io_wq_cancel_cb(struct io_wq *, work_cancel_fn *, void *, bool);
1343:	int io_wq_cpu_affinity(struct io_wq *, struct cpumask *);
1135:	struct io_wq *io_wq_create(unsigned int, struct io_wq_data *);
956:	void io_wq_enqueue(struct io_wq *, struct io_wq_work *);
1219:	void io_wq_exit_start(struct io_wq *);
967:	void io_wq_hash_work(struct io_wq_work *, void *);
1364:	int io_wq_max_workers(struct io_wq *, int *);
1290:	void io_wq_put_and_exit(struct io_wq *);
668:	void io_wq_worker_running(struct task_struct *);
686:	void io_wq_worker_sleeping(struct task_struct *);
793:	static bool create_io_worker(struct io_wq *, struct io_wqe *, int);
320:	static void create_worker_cb(struct callback_head *);
742:	static void create_worker_cont(struct callback_head *);
1024:	static bool io_acct_cancel_pending_work(struct io_wqe *, struct io_wqe_acct *, struct io_cb_cancel_data *);
701:	static void io_init_new_worker(struct io_wqe *, struct io_worker *, struct task_struct *);
348:	static bool io_queue_worker_create(struct io_worker *, struct io_wqe_acct *, task_work_func_t);
1209:	static bool io_task_work_match(struct callback_head *, void *);
199:	static bool io_task_worker_match(struct callback_head *, void *);
184:	static void io_worker_cancel_cb(struct io_worker *);
539:	static void io_worker_handle_work(struct io_worker *);
178:	static void io_worker_ref_put(struct io_wq *);
784:	static void io_workqueue_create(struct work_struct *);
1224:	static void io_wq_cancel_tw_create(struct io_wq *);
1336:	static int io_wq_cpu_offline(unsigned int, struct hlist_node *);
1329:	static int io_wq_cpu_online(unsigned int, struct hlist_node *);
838:	static bool io_wq_for_each_worker(struct io_wqe *, bool (*)(struct io_worker *, void *), void *);
1406:	static int io_wq_init(void);
717:	static bool io_wq_work_match_all(struct io_wq_work *, void *);
898:	static bool io_wq_work_match_item(struct io_wq_work *, void *);
1303:	static bool io_wq_worker_affinity(struct io_worker *, void *);
988:	static bool io_wq_worker_cancel(struct io_worker *, void *);
859:	static bool io_wq_worker_wake(struct io_worker *, void *);
259:	static bool io_wqe_activate_free_worker(struct io_wqe *, struct io_wqe_acct *);
395:	static void io_wqe_dec_running(struct io_worker *);
903:	static void io_wqe_enqueue(struct io_wqe *, struct io_wq_work *);
1116:	static int io_wqe_hash_wake(struct wait_queue_entry *, unsigned int, int, void *);
613:	static int io_wqe_worker(void *);

File io_uring/io_uring.c:
3275:	long __arm64_sys_io_uring_enter(const struct pt_regs *);
4174:	long __arm64_sys_io_uring_register(const struct pt_regs *);
3730:	long __arm64_sys_io_uring_setup(const struct pt_regs *);
1022:	bool __io_alloc_req_refill(struct io_ring_ctx *);
573:	void __io_commit_cqring_flush(struct io_ring_ctx *);
783:	struct io_uring_cqe *__io_get_cqe(struct io_ring_ctx *, bool);
696:	void __io_put_task(struct task_struct *, int);
1262:	void __io_req_task_work_add(struct io_kiocb *, bool);
1299:	int __io_run_local_work(struct io_ring_ctx *, bool *);
3155:	void __io_uring_cancel(bool);
1709:	bool io_alloc_async_data(struct io_kiocb *);
893:	bool io_aux_cqe(struct io_ring_ctx *, bool, u64, s32, u32, bool);
621:	void io_cq_unlock_post(struct io_ring_ctx *);
1954:	struct file *io_file_get_fixed(struct io_kiocb *, int, unsigned int);
1697:	unsigned int io_file_get_flags(struct file *);
1977:	struct file *io_file_get_normal(struct io_kiocb *, int);
1395:	void io_free_batch_list(struct io_ring_ctx *, struct io_wq_work_node *);
1073:	void io_free_req(struct io_kiocb *);
3424:	bool io_is_uring_fops(struct file *);
201:	bool io_match_task_safe(struct io_kiocb *, struct task_struct *, bool);
1874:	int io_poll_issue(struct io_kiocb *, bool *);
888:	bool io_post_aux_cqe(struct io_ring_ctx *, u64, s32, u32);
453:	void io_queue_iowq(struct io_kiocb *, bool *);
1387:	void io_queue_next(struct io_kiocb *);
963:	void io_req_complete_post(struct io_kiocb *, unsigned int);
767:	bool io_req_cqe_overflow(struct io_kiocb *);
980:	void io_req_defer_failed(struct io_kiocb *, s32);
1720:	int io_req_prep_async(struct io_kiocb *);
1595:	void io_req_task_complete(struct io_kiocb *, bool *);
1381:	void io_req_task_queue(struct io_kiocb *);
1374:	void io_req_task_queue_fail(struct io_kiocb *, int);
1364:	void io_req_task_submit(struct io_kiocb *, bool *);
1341:	int io_run_local_work(struct io_ring_ctx *);
2459:	int io_run_task_work_sig(struct io_ring_ctx *);
2364:	int io_submit_sqes(struct io_ring_ctx *, unsigned int);
706:	void io_task_refs_refill(struct io_uring_task *);
3082:	void io_uring_cancel_generic(bool, struct io_sq_data *);
156:	struct sock *io_uring_get_socket(struct file *);
1881:	struct io_wq_work *io_wq_free_work(struct io_wq_work *);
1889:	void io_wq_submit_work(struct io_wq_work *);
1185:	void tctx_task_work(struct callback_head *);
397:	static void __io_arm_ltimeout(struct io_kiocb *);
649:	static void __io_cqring_overflow_flush(struct io_ring_ctx *);
849:	static void __io_flush_post_cqes(struct io_ring_ctx *);
874:	static bool __io_post_aux_cqe(struct io_ring_ctx *, u64, s32, u32, bool);
376:	static struct io_kiocb *__io_prep_linked_timeout(struct io_kiocb *);
927:	static void __io_req_complete_post(struct io_kiocb *);
1113:	static void ctx_flush_and_put(struct io_ring_ctx *, bool *);
1127:	static unsigned int handle_tw_list(struct llist_node *, struct io_ring_ctx **, bool *, struct llist_node *);
261:	static int io_alloc_hash_table(struct io_hash_table *, unsigned int);
3429:	static int io_allocate_scq_urings(struct io_ring_ctx *, struct io_uring_params *);
1823:	static bool io_assign_file(struct io_kiocb *, unsigned int);
2835:	static bool io_cancel_ctx_cb(struct io_wq_work *, void *);
2974:	static bool io_cancel_defer_files(struct io_ring_ctx *, struct task_struct *, bool);
2966:	static bool io_cancel_task_cb(struct io_wq_work *, void *);
2066:	static bool io_check_restriction(struct io_ring_ctx *, struct io_kiocb *, unsigned int);
1790:	static void io_clean_op(struct io_kiocb *);
727:	static bool io_cqring_event_overflow(struct io_ring_ctx *, u64, s32, u32, u64, u64);
631:	static void io_cqring_overflow_kill(struct io_ring_ctx *);
1749:	static void io_drain_req(struct io_kiocb *);
495:	static void io_eventfd_ops(struct callback_head *);
2629:	static int io_eventfd_register(struct io_ring_ctx *, void *, unsigned int);
513:	static void io_eventfd_signal(struct io_ring_ctx *);
2667:	static int io_eventfd_unregister(struct io_ring_ctx *);
242:	static void io_fallback_req_func(struct work_struct *);
1220:	static void io_fallback_tw(struct io_uring_task *);
820:	static bool io_fill_cqe_aux(struct io_ring_ctx *, u64, s32, u32);
1505:	static void io_iopoll_try_reap_events(struct io_ring_ctx *);
1836:	static int io_issue_sqe(struct io_kiocb *, unsigned int);
2577:	static void io_mem_free(void *);
1285:	static void io_move_task_work_from_local(struct io_ring_ctx *);
408:	static void io_prep_async_work(struct io_kiocb *);
3736:	static int io_probe(struct io_ring_ctx *, void *, unsigned int);
1989:	static void io_queue_async(struct io_kiocb *, int);
480:	static void io_queue_deferred(struct io_ring_ctx *);
2035:	static void io_queue_sqe_fallback(struct io_kiocb *);
3880:	static int io_register_iowq_aff(struct io_ring_ctx *, void *, unsigned int);
3925:	static int io_register_iowq_max_workers(struct io_ring_ctx *, void *);
3793:	static int io_register_restrictions(struct io_ring_ctx *, void *, unsigned int);
2684:	static void io_req_caches_free(struct io_ring_ctx *);
1358:	static void io_req_task_cancel(struct io_kiocb *, bool *);
275:	static struct io_ring_ctx *io_ring_ctx_alloc(struct io_uring_params *);
2702:	static void io_ring_ctx_free(struct io_ring_ctx *);
235:	static void io_ring_ctx_ref_free(struct percpu_ref *);
2922:	static void io_ring_ctx_wait_and_kill(struct io_ring_ctx *);
2842:	static void io_ring_exit_work(struct work_struct *);
2197:	static int io_submit_fail_init(const struct io_uring_sqe *, struct io_kiocb *, int);
169:	static void io_submit_flush_completions(struct io_ring_ctx *);
2818:	static void io_tctx_exit_cb(struct callback_head *);
3915:	static int io_unregister_iowq_aff(struct io_ring_ctx *);
2799:	static int io_unregister_personality(struct io_ring_ctx *, unsigned int);
3522:	static int io_uring_create(unsigned int, struct io_uring_params *, struct io_uring_params *);
715:	static void io_uring_drop_tctx_refs(struct task_struct *);
3497:	static struct file *io_uring_get_file(struct io_ring_ctx *);
4203:	static int io_uring_init(void);
3474:	static int io_uring_install_fd(struct io_ring_ctx *, struct file *);
3189:	static int io_uring_mmap(struct file *, struct vm_area_struct *);
2765:	static __poll_t io_uring_poll(struct file *, poll_table *);
2952:	static int io_uring_release(struct inode *, struct file *);
3001:	static bool io_uring_try_cancel_iowq(struct io_ring_ctx *);
3025:	static bool io_uring_try_cancel_requests(struct io_ring_ctx *, struct task_struct *, bool);
2443:	static int io_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File io_uring/io_uring.h:
264:	static int io_run_task_work(void);

File io_uring/kbuf.c:
77:	unsigned int __io_put_kbuf(struct io_kiocb *, unsigned int);
171:	void *io_buffer_select(struct io_kiocb *, size_t *, unsigned int);
246:	void io_destroy_buffers(struct io_ring_ctx *);
50:	void io_kbuf_recycle_legacy(struct io_kiocb *, unsigned int);
421:	int io_provide_buffers(struct io_kiocb *, unsigned int);
316:	int io_provide_buffers_prep(struct io_kiocb *, const struct io_uring_sqe *);
466:	int io_register_pbuf_ring(struct io_ring_ctx *, void *);
292:	int io_remove_buffers(struct io_kiocb *, unsigned int);
273:	int io_remove_buffers_prep(struct io_kiocb *, const struct io_uring_sqe *);
525:	int io_unregister_pbuf_ring(struct io_ring_ctx *, void *);
40:	static int io_buffer_add_list(struct io_ring_ctx *, struct io_buffer_list *, unsigned int);
191:	static int io_init_bl_list(struct io_ring_ctx *);

File io_uring/msg_ring.c:
250:	int io_msg_ring(struct io_kiocb *, unsigned int);
50:	void io_msg_ring_cleanup(struct io_kiocb *);
230:	int io_msg_ring_prep(struct io_kiocb *, const struct io_uring_sqe *);
33:	static int io_double_lock_ctx(struct io_ring_ctx *, unsigned int);
68:	static int io_msg_exec_remote(struct io_kiocb *, task_work_func_t);
84:	static void io_msg_tw_complete(struct callback_head *);
193:	static void io_msg_tw_fd_complete(struct callback_head *);

File io_uring/net.c:
1304:	int io_accept(struct io_kiocb *, unsigned int);
1271:	int io_accept_prep(struct io_kiocb *, const struct io_uring_sqe *);
1438:	int io_connect(struct io_kiocb *, unsigned int);
1425:	int io_connect_prep(struct io_kiocb *, const struct io_uring_sqe *);
1417:	int io_connect_prep_async(struct io_kiocb *);
1494:	void io_netmsg_cache_free(struct io_cache_entry *);
844:	int io_recv(struct io_kiocb *, unsigned int);
730:	int io_recvmsg(struct io_kiocb *, unsigned int);
559:	int io_recvmsg_prep(struct io_kiocb *, const struct io_uring_sqe *);
545:	int io_recvmsg_prep_async(struct io_kiocb *);
343:	int io_send(struct io_kiocb *, unsigned int);
204:	int io_send_prep_async(struct io_kiocb *);
1083:	int io_send_zc(struct io_kiocb *, unsigned int);
938:	void io_send_zc_cleanup(struct io_kiocb *);
958:	int io_send_zc_prep(struct io_kiocb *, const struct io_uring_sqe *);
284:	int io_sendmsg(struct io_kiocb *, unsigned int);
254:	int io_sendmsg_prep(struct io_kiocb *, const struct io_uring_sqe *);
235:	int io_sendmsg_prep_async(struct io_kiocb *);
247:	void io_sendmsg_recvmsg_cleanup(struct io_kiocb *);
1183:	int io_sendmsg_zc(struct io_kiocb *, unsigned int);
1259:	void io_sendrecv_fail(struct io_kiocb *);
96:	int io_shutdown(struct io_kiocb *, unsigned int);
84:	int io_shutdown_prep(struct io_kiocb *, const struct io_uring_sqe *);
1384:	int io_socket(struct io_kiocb *, unsigned int);
1363:	int io_socket_prep(struct io_kiocb *, const struct io_uring_sqe *);
532:	static int io_recvmsg_copy_hdr(struct io_kiocb *, struct io_async_msghdr *);
219:	static int io_setup_async_addr(struct io_kiocb *, struct __kernel_sockaddr_storage *, unsigned int);
167:	static int io_setup_async_msg(struct io_kiocb *, struct io_async_msghdr *, unsigned int);
1032:	static int io_sg_from_iter(struct sock *, struct sk_buff *, struct iov_iter *, size_t);
1025:	static int io_sg_from_iter_iovec(struct sock *, struct sk_buff *, struct iov_iter *, size_t);

File io_uring/nop.c:
21:	int io_nop(struct io_kiocb *, unsigned int);
13:	int io_nop_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/notif.c:
65:	struct io_kiocb *io_alloc_notif(struct io_ring_ctx *);
51:	void io_notif_set_extended(struct io_kiocb *);
12:	static void io_notif_complete_tw_ext(struct io_kiocb *, bool *);
27:	static void io_tx_ubuf_callback(struct sk_buff *, struct ubuf_info *, bool);
37:	static void io_tx_ubuf_callback_ext(struct sk_buff *, struct ubuf_info *, bool);

File io_uring/opdef.c:
536:	const char *io_uring_get_opcode(u8);
543:	void io_uring_optable_init(void);
43:	static int io_eopnotsupp_prep(struct io_kiocb *, const struct io_uring_sqe *);
37:	static int io_no_issue(struct io_kiocb *, unsigned int);

File io_uring/openclose.c:
176:	int __io_close_fixed(struct io_ring_ctx *, unsigned int, unsigned int);
212:	int io_close(struct io_kiocb *, unsigned int);
195:	int io_close_prep(struct io_kiocb *, const struct io_uring_sqe *);
168:	void io_open_cleanup(struct io_kiocb *);
163:	int io_openat(struct io_kiocb *, unsigned int);
96:	int io_openat2(struct io_kiocb *, unsigned int);
77:	int io_openat2_prep(struct io_kiocb *, const struct io_uring_sqe *);
67:	int io_openat_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/poll.c:
1029:	void io_apoll_cache_free(struct io_cache_entry *);
679:	int io_arm_poll_handler(struct io_kiocb *, unsigned int);
936:	int io_poll_add(struct io_kiocb *, unsigned int);
919:	int io_poll_add_prep(struct io_kiocb *, const struct io_uring_sqe *);
857:	int io_poll_cancel(struct io_ring_ctx *, struct io_cancel_data *, unsigned int);
959:	int io_poll_remove(struct io_kiocb *, unsigned int);
758:	bool io_poll_remove_all(struct io_ring_ctx *, struct task_struct *, bool);
889:	int io_poll_remove_prep(struct io_kiocb *, const struct io_uring_sqe *);
563:	static int __io_arm_poll_handler(struct io_kiocb *, struct io_poll *, struct io_poll_table *, __poll_t, unsigned int);
839:	static int __io_poll_cancel(struct io_ring_ctx *, struct io_cancel_data *, struct io_hash_table *);
477:	static void __io_queue_proc(struct io_poll *, struct io_poll_table *, struct wait_queue_head *, struct io_poll **);
644:	static void io_async_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
543:	static bool io_poll_can_finish_inline(struct io_kiocb *, struct io_poll_table *);
380:	static void io_poll_cancel_req(struct io_kiocb *);
828:	static int io_poll_disarm(struct io_kiocb *);
452:	static bool io_poll_double_prepare(struct io_kiocb *);
68:	static bool io_poll_get_ownership_slowpath(struct io_kiocb *);
533:	static void io_poll_queue_proc(struct file *, struct wait_queue_head *, struct poll_table_struct *);
729:	static bool io_poll_remove_all_table(struct task_struct *, struct io_hash_table *, bool);
190:	static void io_poll_remove_entries(struct io_kiocb *);
327:	static void io_poll_task_func(struct io_kiocb *, bool *);
414:	static int io_poll_wake(struct wait_queue_entry *, unsigned int, int, void *);
389:	static int io_pollfree_wake(struct io_kiocb *, struct io_poll *);

File io_uring/refs.h:
20:	static bool req_ref_put_and_test(struct io_kiocb *);

File io_uring/rsrc.c:
45:	int __io_account_mem(struct user_struct *, unsigned long);
829:	int __io_scm_file_account(struct io_ring_ctx *, struct file *);
1038:	void __io_sqe_buffers_unregister(struct io_ring_ctx *);
773:	void __io_sqe_files_unregister(struct io_ring_ctx *);
727:	int io_files_update(struct io_kiocb *, unsigned int);
671:	int io_files_update_prep(struct io_kiocb *, const struct io_uring_sqe *);
1324:	int io_import_fixed(int, struct iov_iter *, struct io_mapped_ubuf *, u64, size_t);
1140:	struct page **io_pin_pages(unsigned long, unsigned long, int *);
756:	int io_queue_rsrc_removal(struct io_rsrc_data *, unsigned int, struct io_rsrc_node *, void *);
610:	int io_register_files_update(struct io_ring_ctx *, void *, unsigned int);
639:	int io_register_rsrc(struct io_ring_ctx *, void *, unsigned int, unsigned int);
625:	int io_register_rsrc_update(struct io_ring_ctx *, void *, unsigned int, unsigned int);
221:	void io_rsrc_node_destroy(struct io_rsrc_node *);
283:	void io_rsrc_node_switch(struct io_ring_ctx *, struct io_rsrc_data *);
311:	int io_rsrc_node_switch_start(struct io_ring_ctx *);
207:	void io_rsrc_put_tw(struct callback_head *);
189:	void io_rsrc_put_work(struct work_struct *);
36:	void io_rsrc_refs_drop(struct io_ring_ctx *);
154:	void io_rsrc_refs_refill(struct io_ring_ctx *);
1265:	int io_sqe_buffers_register(struct io_ring_ctx *, void *, unsigned int, u64 *);
1051:	int io_sqe_buffers_unregister(struct io_ring_ctx *);
952:	int io_sqe_files_register(struct io_ring_ctx *, void *, unsigned int, u64 *);
802:	int io_sqe_files_unregister(struct io_ring_ctx *);
215:	void io_wait_rsrc_data(struct io_rsrc_data *);
588:	static int __io_register_rsrc_update(struct io_ring_ctx *, unsigned int, struct io_uring_rsrc_update2 *, unsigned int);
385:	static void **io_alloc_page_table(size_t);
139:	static void io_buffer_unmap(struct io_ring_ctx *, struct io_mapped_ubuf **);
90:	static int io_copy_iov(struct io_ring_ctx *, struct iovec *, void *, unsigned int);
367:	static void io_free_page_table(void **, size_t);
1032:	static void io_rsrc_buf_put(struct io_ring_ctx *, struct io_rsrc_put *);
408:	static int io_rsrc_data_alloc(struct io_ring_ctx *, rsrc_put_fn *, u64 *, unsigned int, struct io_rsrc_data **);
376:	static void io_rsrc_data_free(struct io_rsrc_data *);
884:	static void io_rsrc_file_put(struct io_ring_ctx *, struct io_rsrc_put *);
227:	static void io_rsrc_node_ref_zero(struct percpu_ref *);
319:	static int io_rsrc_ref_quiesce(struct io_rsrc_data *, struct io_ring_ctx *);
1201:	static int io_sqe_buffer_register(struct io_ring_ctx *, struct iovec *, struct io_mapped_ubuf **, struct page **);

File io_uring/rsrc.h:
95:	static int io_scm_file_account(struct io_ring_ctx *, struct file *);

File io_uring/rw.c:
999:	int io_do_iopoll(struct io_ring_ctx *, bool);
76:	int io_prep_rw(struct io_kiocb *, const struct io_uring_sqe *);
702:	int io_read(struct io_kiocb *, unsigned int);
555:	int io_readv_prep_async(struct io_kiocb *);
125:	void io_readv_writev_cleanup(struct io_kiocb *);
991:	void io_rw_fail(struct io_kiocb *);
850:	int io_write(struct io_kiocb *, unsigned int);
560:	int io_writev_prep_async(struct io_kiocb *);
575:	static int io_async_buf_func(struct wait_queue_entry *, unsigned int, int, void *);
298:	static void io_complete_rw(struct kiocb *, long);
310:	static void io_complete_rw_iopoll(struct kiocb *, long);
408:	static int io_import_iovec(int, struct io_kiocb *, struct iovec **, struct io_rw_state *, unsigned int);
241:	static void io_req_io_end(struct io_kiocb *);
286:	static void io_req_rw_complete(struct io_kiocb *, bool *);
656:	static int io_rw_init_file(struct io_kiocb *, fmode_t);
187:	static bool io_rw_should_reissue(struct io_kiocb *);
516:	static int io_setup_async_rw(struct io_kiocb *, const struct iovec *, struct io_rw_state *, bool);
329:	static int kiocb_done(struct io_kiocb *, ssize_t, unsigned int);
223:	static void kiocb_end_write(struct io_kiocb *);
429:	static ssize_t loop_rw_iter(int, struct io_rw *, struct iov_iter *);

File io_uring/splice.c:
88:	int io_splice(struct io_kiocb *, unsigned int);
79:	int io_splice_prep(struct io_kiocb *, const struct io_uring_sqe *);
47:	int io_tee(struct io_kiocb *, unsigned int);
40:	int io_tee_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/sqpoll.c:
67:	void io_put_sq_data(struct io_sq_data *);
333:	int io_sq_offload_create(struct io_ring_ctx *, struct io_uring_params *);
87:	void io_sq_thread_finish(struct io_ring_ctx *);
42:	void io_sq_thread_park(struct io_sq_data *);
54:	void io_sq_thread_stop(struct io_sq_data *);
27:	void io_sq_thread_unpark(struct io_sq_data *);
315:	int io_sqpoll_wait_sq(struct io_ring_ctx *);
221:	static int io_sq_thread(void *);

File io_uring/statx.c:
54:	int io_statx(struct io_kiocb *, unsigned int);
67:	void io_statx_cleanup(struct io_kiocb *);
23:	int io_statx_prep(struct io_kiocb *, const struct io_uring_sqe *);

File io_uring/sync.c:
97:	int io_fallocate(struct io_kiocb *, unsigned int);
84:	int io_fallocate_prep(struct io_kiocb *, const struct io_uring_sqe *);
68:	int io_fsync(struct io_kiocb *, unsigned int);
52:	int io_fsync_prep(struct io_kiocb *, const struct io_uring_sqe *);
25:	int io_sfr_prep(struct io_kiocb *, const struct io_uring_sqe *);
38:	int io_sync_file_range(struct io_kiocb *, unsigned int);

File io_uring/tctx.c:
94:	int __io_uring_add_tctx_node(struct io_ring_ctx *);
136:	int __io_uring_add_tctx_node_from_submit(struct io_ring_ctx *);
47:	void __io_uring_free(struct task_struct *);
244:	int io_ringfd_register(struct io_ring_ctx *, void *, unsigned int);
303:	int io_ringfd_unregister(struct io_ring_ctx *, void *, unsigned int);
60:	int io_uring_alloc_task_context(struct task_struct *, struct io_ring_ctx *);
178:	void io_uring_clean_tctx(struct io_uring_task *);
155:	void io_uring_del_tctx_node(unsigned long);
198:	void io_uring_unreg_ringfd(void);

File io_uring/timeout.c:
178:	struct io_kiocb *__io_disarm_linked_timeout(struct io_kiocb *, struct io_kiocb *);
152:	void io_disarm_next(struct io_kiocb *);
71:	void io_flush_timeouts(struct io_ring_ctx *);
619:	bool io_kill_timeouts(struct io_ring_ctx *, struct task_struct *, bool);
521:	int io_link_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *);
577:	void io_queue_linked_timeout(struct io_kiocb *);
526:	int io_timeout(struct io_kiocb *, unsigned int);
253:	int io_timeout_cancel(struct io_ring_ctx *, struct io_cancel_data *);
516:	int io_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *);
429:	int io_timeout_remove(struct io_kiocb *, unsigned int);
389:	int io_timeout_remove_prep(struct io_kiocb *, const struct io_uring_sqe *);
458:	static int __io_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *, bool);
120:	static void io_fail_links(struct io_kiocb *);
52:	static bool io_kill_timeout(struct io_kiocb *, int);
293:	static enum hrtimer_restart io_link_timeout_fn(struct hrtimer *);
268:	static void io_req_task_link_timeout(struct io_kiocb *, bool *);
104:	static void io_req_tw_fail_links(struct io_kiocb *, bool *);
196:	static enum hrtimer_restart io_timeout_fn(struct hrtimer *);

File io_uring/uring_cmd.c:
104:	int io_uring_cmd(struct io_kiocb *, unsigned int);
22:	void io_uring_cmd_complete_in_task(struct io_uring_cmd *, void (*)(struct io_uring_cmd *));
45:	void io_uring_cmd_done(struct io_uring_cmd *, ssize_t, ssize_t);
151:	int io_uring_cmd_import_fixed(u64, unsigned long, int, struct iov_iter *, void *);
77:	int io_uring_cmd_prep(struct io_kiocb *, const struct io_uring_sqe *);
63:	int io_uring_cmd_prep_async(struct io_kiocb *);
15:	static void io_uring_cmd_work(struct io_kiocb *, bool *);

File io_uring/xattr.c:
107:	int io_fgetxattr(struct io_kiocb *, unsigned int);
81:	int io_fgetxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
221:	int io_fsetxattr(struct io_kiocb *, unsigned int);
201:	int io_fsetxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
123:	int io_getxattr(struct io_kiocb *, unsigned int);
86:	int io_getxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
233:	int io_setxattr(struct io_kiocb *, unsigned int);
180:	int io_setxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
25:	void io_xattr_cleanup(struct io_kiocb *);
44:	static int __io_getxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);

File ipc/ipc_sysctl.c:
273:	void retire_ipc_sysctls(struct ipc_namespace *);
214:	bool setup_ipc_sysctls(struct ipc_namespace *);
294:	static int ipc_mni_extend(char *);
193:	static int ipc_permissions(struct ctl_table_header *, struct ctl_table *);
283:	static int ipc_sysctl_init(void);
35:	static int proc_ipc_auto_msgmni(struct ctl_table *, int, void *, size_t *, loff_t *);
19:	static int proc_ipc_dointvec_minmax_orphans(struct ctl_table *, int, void *, size_t *, loff_t *);
50:	static int proc_ipc_sem_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
188:	static int set_is_seen(struct ctl_table_set *);
183:	static struct ctl_table_set *set_lookup(struct ctl_table_root *);

File ipc/mq_sysctl.c:
123:	void retire_mq_sysctls(struct ipc_namespace *);
83:	bool setup_mq_sysctls(struct ipc_namespace *);
74:	static int set_is_seen(struct ctl_table_set *);
69:	static struct ctl_table_set *set_lookup(struct ctl_table_root *);

File ipc/mqueue.c:
1496:	long __arm64_sys_mq_getsetattr(const struct pt_regs *);
1440:	long __arm64_sys_mq_notify(const struct pt_regs *);
942:	long __arm64_sys_mq_open(const struct pt_regs *);
1298:	long __arm64_sys_mq_timedreceive(const struct pt_regs *);
1284:	long __arm64_sys_mq_timedsend(const struct pt_regs *);
952:	long __arm64_sys_mq_unlink(const struct pt_regs *);
1707:	void mq_clear_sbinfo(struct ipc_namespace *);
1689:	int mq_init_ns(struct ipc_namespace *);
1712:	void mq_put_mnt(struct ipc_namespace *);
1717:	static int init_mqueue_fs(void);
490:	static void init_once(void *);
497:	static struct inode *mqueue_alloc_inode(struct super_block *);
611:	static int mqueue_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
566:	static int mqueue_create_attr(struct dentry *, umode_t, void *);
512:	static void mqueue_evict_inode(struct inode *);
404:	static int mqueue_fill_super(struct super_block *, struct fs_context *);
663:	static int mqueue_flush_file(struct file *, fl_owner_t);
507:	static void mqueue_free_inode(struct inode *);
440:	static void mqueue_fs_context_free(struct fs_context *);
290:	static struct inode *mqueue_get_inode(struct super_block *, struct ipc_namespace *, umode_t, struct mq_attr *);
425:	static int mqueue_get_tree(struct fs_context *);
448:	static int mqueue_init_fs_context(struct fs_context *);
675:	static __poll_t mqueue_poll_file(struct file *, struct poll_table_struct *);
635:	static ssize_t mqueue_read_file(struct file *, char *, size_t, loff_t *);
617:	static int mqueue_unlink(struct inode *, struct dentry *);
248:	static struct msg_msg *msg_get(struct mqueue_inode_info *);
191:	static int msg_insert(struct msg_msg *, struct mqueue_inode_info *);
233:	static void msg_tree_erase(struct posix_msg_tree_node *, struct mqueue_inode_info *);
853:	static void remove_notification(struct mqueue_inode_info *);
713:	static int wq_sleep(struct mqueue_inode_info *, int, ktime_t *, struct ext_wait_queue *);

File ipc/msg.c:
640:	long __arm64_sys_msgctl(const struct pt_regs *);
315:	long __arm64_sys_msgget(const struct pt_regs *);
1270:	long __arm64_sys_msgrcv(const struct pt_regs *);
971:	long __arm64_sys_msgsnd(const struct pt_regs *);
298:	long ksys_msgget(key_t, int);
1264:	long ksys_msgrcv(int, struct msgbuf *, size_t, long, int);
961:	long ksys_msgsnd(int, struct msgbuf *, size_t, int);
1330:	void msg_exit_ns(struct ipc_namespace *);
1369:	void msg_init(void);
1306:	int msg_init_ns(struct ipc_namespace *);
273:	static void freeque(struct ipc_namespace *, struct kern_ipc_perm *);
128:	static void msg_rcu_free(struct callback_head *);
401:	static int msgctl_down(struct ipc_namespace *, int, int, struct ipc64_perm *, int);
144:	static int newque(struct ipc_namespace *, struct ipc_params *);
1341:	static int sysvipc_msg_proc_show(struct seq_file *, void *);

File ipc/msgutil.c:
145:	struct msg_msg *copy_msg(struct msg_msg *, struct msg_msg *);
169:	void free_msg(struct msg_msg *);
84:	struct msg_msg *load_msg(const void *, size_t);
150:	int store_msg(void *, struct msg_msg *, size_t);

File ipc/namespace.c:
92:	struct ipc_namespace *copy_ipcs(unsigned long, struct user_namespace *, struct ipc_namespace *);
108:	void free_ipcs(struct ipc_namespace *, struct ipc_ids *, void (*)(struct ipc_namespace *, struct kern_ipc_perm *));
181:	void put_ipc_ns(struct ipc_namespace *);
151:	static void free_ipc(struct work_struct *);
197:	static struct ns_common *ipcns_get(struct task_struct *);
216:	static int ipcns_install(struct nsset *, struct ns_common *);
229:	static struct user_namespace *ipcns_owner(struct ns_common *);
211:	static void ipcns_put(struct ns_common *);

File ipc/sem.c:
1705:	long __arm64_sys_semctl(const struct pt_regs *);
624:	long __arm64_sys_semget(const struct pt_regs *);
2298:	long __arm64_sys_semop(const struct pt_regs *);
2270:	long __arm64_sys_semtimedop(const struct pt_regs *);
1985:	long __do_semtimedop(int, struct sembuf *, unsigned int, const struct timespec64 *, struct ipc_namespace *);
2308:	int copy_semundo(unsigned long, struct task_struct *);
2337:	void exit_sem(struct task_struct *);
602:	long ksys_semget(key_t, int, int);
2258:	long ksys_semtimedop(int, struct sembuf *, unsigned int, const struct __kernel_timespec *);
260:	void sem_exit_ns(struct ipc_namespace *);
268:	void sem_init(void);
249:	void sem_init_ns(struct ipc_namespace *);
2224:	static long do_semtimedop(int, struct sembuf *, unsigned int, const struct timespec64 *);
1029:	static void do_smart_update(struct sem_array *, struct sembuf *, int, int, struct wake_q_head *);
893:	static int do_smart_wakeup_zero(struct sem_array *, struct sembuf *, int, struct wake_q_head *);
1143:	static void freeary(struct ipc_namespace *, struct kern_ipc_perm *);
1881:	static struct sem_undo *lookup_undo(struct sem_undo_list *, int);
313:	static void merge_queues(struct sem_array *);
531:	static int newary(struct ipc_namespace *, struct ipc_params *);
719:	static int perform_atomic_semop(struct sem_array *, struct sem_queue *);
646:	static int perform_atomic_semop_slow(struct sem_array *, struct sem_queue *);
389:	static int sem_lock(struct sem_array *, struct sembuf *, int);
499:	static void sem_lock_and_putref(struct sem_array *);
591:	static int sem_more_checks(struct kern_ipc_perm *, struct ipc_params *);
323:	static void sem_rcu_free(struct callback_head *);
460:	static void sem_unlock(struct sem_array *, int);
2451:	static int sysvipc_sem_proc_show(struct seq_file *, void *);
949:	static int update_queue(struct sem_array *, int, struct wake_q_head *);
854:	static int wake_const_ops(struct sem_array *, int, struct wake_q_head *);

File ipc/shm.c:
1696:	long __arm64_sys_shmat(const struct pt_regs *);
1299:	long __arm64_sys_shmctl(const struct pt_regs *);
1837:	long __arm64_sys_shmdt(const struct pt_regs *);
850:	long __arm64_sys_shmget(const struct pt_regs *);
1522:	long do_shmat(int, char *, int, ulong *, unsigned long);
439:	void exit_shm(struct task_struct *);
681:	bool is_file_shm_hugepages(struct file *);
1731:	long ksys_shmdt(char *);
831:	long ksys_shmget(key_t, size_t, int);
430:	void shm_destroy_orphaned(struct ipc_namespace *);
139:	void shm_exit_ns(struct ipc_namespace *);
155:	void shm_init(void);
108:	void shm_init_ns(struct ipc_namespace *);
368:	static void __shm_close(struct shm_file_data *);
278:	static int __shm_open(struct shm_file_data *);
122:	static void do_shm_rmid(struct ipc_namespace *, struct kern_ipc_perm *);
147:	static int ipc_ns_init(void);
705:	static int newseg(struct ipc_namespace *, struct ipc_params *);
395:	static void shm_close(struct vm_area_struct *);
328:	static void shm_destroy(struct ipc_namespace *, struct shmid_kernel *);
639:	static long shm_fallocate(struct file *, int, loff_t, loff_t);
534:	static vm_fault_t shm_fault(struct vm_fault *);
630:	static int shm_fsync(struct file *, loff_t, loff_t, int);
576:	static struct mempolicy *shm_get_policy(struct vm_area_struct *, unsigned long);
649:	static unsigned long shm_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
542:	static int shm_may_split(struct vm_area_struct *, unsigned long);
592:	static int shm_mmap(struct file *, struct vm_area_struct *);
820:	static int shm_more_checks(struct kern_ipc_perm *, struct ipc_params *);
301:	static void shm_open(struct vm_area_struct *);
553:	static unsigned long shm_pagesize(struct vm_area_struct *);
228:	static void shm_rcu_free(struct callback_head *);
619:	static int shm_release(struct inode *, struct file *);
565:	static int shm_set_policy(struct vm_area_struct *, struct mempolicy *);
408:	static int shm_try_destroy_orphaned(int, void *, void *);
1843:	static int sysvipc_shm_proc_show(struct seq_file *, void *);

File ipc/util.c:
606:	void ipc64_perm_to_ipc_perm(struct ipc64_perm *, struct ipc_perm *);
278:	int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);
115:	void ipc_init_ids(struct ipc_ids *);
138:	void ipc_init_proc_interface(const char *, const char *, int, int (*)(struct seq_file *, void *));
650:	struct kern_ipc_perm *ipc_obtain_object_check(struct ipc_ids *, int);
627:	struct kern_ipc_perm *ipc_obtain_object_idr(struct ipc_ids *, int);
528:	bool ipc_rcu_getref(struct kern_ipc_perm *);
533:	void ipc_rcu_putref(struct kern_ipc_perm *, void (*)(struct callback_head *));
497:	void ipc_rmid(struct ipc_ids *, struct kern_ipc_perm *);
779:	struct pid_namespace *ipc_seq_pid_ns(struct seq_file *);
522:	void ipc_set_key_private(struct ipc_ids *, struct kern_ipc_perm *);
687:	int ipc_update_perm(struct ipc64_perm *, struct kern_ipc_perm *);
722:	struct kern_ipc_perm *ipcctl_obtain_check(struct ipc_namespace *, struct ipc_ids *, int, int, struct ipc64_perm *, int);
673:	int ipcget(struct ipc_namespace *, struct ipc_ids *, const struct ipc_ops *, struct ipc_params *);
553:	int ipcperms(struct ipc_namespace *, struct kern_ipc_perm *, short);
587:	void kernel_to_ipc64_perm(struct kern_ipc_perm *, struct ipc64_perm *);
90:	static int ipc_init(void);
447:	static void ipc_kht_remove(struct ipc_ids *, struct kern_ipc_perm *);
467:	static int ipc_search_maxidx(struct ipc_ids *, int);
819:	static void *sysvipc_proc_next(struct seq_file *, void *, loff_t *);
900:	static int sysvipc_proc_open(struct inode *, struct file *);
915:	static int sysvipc_proc_release(struct inode *, struct file *);
880:	static int sysvipc_proc_show(struct seq_file *, void *);
838:	static void *sysvipc_proc_start(struct seq_file *, loff_t *);
864:	static void sysvipc_proc_stop(struct seq_file *, void *);

File kernel/acct.c:
292:	long __arm64_sys_acct(const struct pt_regs *);
553:	void acct_collect(long, int);
316:	void acct_exit_ns(struct pid_namespace *);
608:	void acct_process(void);
189:	static void acct_pin_kill(struct fs_pin *);
202:	static void close_work(struct work_struct *);
492:	static void do_acct_process(struct bsd_acct_struct *);
90:	static int kernel_acct_sysctls_init(void);
593:	static void slow_acct_process(struct pid_namespace *);

File kernel/async.c:
228:	async_cookie_t async_schedule_node(async_func_t, void *, int);
165:	async_cookie_t async_schedule_node_domain(async_func_t, void *, int, struct async_domain *);
288:	void async_synchronize_cookie(async_cookie_t);
267:	void async_synchronize_cookie_domain(async_cookie_t, struct async_domain *);
239:	void async_synchronize_full(void);
252:	void async_synchronize_full_domain(struct async_domain *);
299:	bool current_is_async(void);
115:	static void async_run_entry_fn(struct work_struct *);

File kernel/audit.c:
234:	void audit_ctl_lock(void);
243:	void audit_ctl_unlock(void);
2212:	struct tty_struct *audit_get_tty(void);
2446:	void audit_log(struct audit_context *, gfp_t, int, const char *, ...);
2125:	void audit_log_d_path(struct audit_buffer *, const char *, const struct path *);
2193:	void audit_log_d_path_exe(struct audit_buffer *, struct mm_struct *);
2408:	void audit_log_end(struct audit_buffer *);
1990:	void audit_log_format(struct audit_buffer *, const char *, ...);
2156:	void audit_log_key(struct audit_buffer *, char *);
352:	void audit_log_lost(const char *);
2012:	void audit_log_n_hex(struct audit_buffer *, const unsigned char *, size_t);
2045:	void audit_log_n_string(struct audit_buffer *, const char *, size_t);
2102:	void audit_log_n_untrustedstring(struct audit_buffer *, const char *, size_t);
2270:	void audit_log_path_denied(int, const char *);
2148:	void audit_log_session_info(struct audit_buffer *);
1844:	struct audit_buffer *audit_log_start(struct audit_context *, gfp_t, int);
2165:	int audit_log_task_context(struct audit_buffer *);
2229:	void audit_log_task_info(struct audit_buffer *);
2119:	void audit_log_untrustedstring(struct audit_buffer *, const char *);
927:	struct sk_buff *audit_make_reply(int, int, int, int, const void *, int);
302:	void audit_panic(const char *);
2224:	void audit_put_tty(struct tty_struct *);
908:	int audit_send_list_thread(void *);
1813:	unsigned int audit_serial(void);
2345:	int audit_set_loginuid(kuid_t);
2380:	int audit_signal_info(int, struct task_struct *);
2078:	bool audit_string_contains_control(const char *, size_t);
218:	int auditd_test_task(struct task_struct *);
1744:	static int audit_backlog_limit_set(char *);
1718:	static int audit_enable(char *);
1673:	static int audit_init(void);
1076:	static void audit_log_common_recv_msg(struct audit_context *, struct audit_buffer **, u16);
384:	static int audit_log_config_change(char *, u32, u32, int);
1582:	static void audit_log_multicast(int, const char *, int);
1944:	static void audit_log_vformat(struct audit_buffer *, const char *, va_list);
1614:	static int audit_multicast_bind(struct net *, int);
1624:	static void audit_multicast_unbind(struct net *, int);
1652:	static void audit_net_exit(struct net *);
1629:	static int audit_net_init(struct net *);
1542:	static void audit_receive(struct sk_buff *);
990:	static void audit_send_reply(struct sk_buff *, int, int, int, int, const void *, int);
963:	static int audit_send_reply_thread(void *);
476:	static void auditd_conn_free(struct callback_head *);
639:	static void auditd_reset(const struct auditd_connection *);
567:	static void kauditd_hold_skb(struct sk_buff *, int);
614:	static void kauditd_retry_skb(struct sk_buff *, int);
796:	static void kauditd_send_multicast_skb(struct sk_buff *);
733:	static int kauditd_send_queue(struct sock *, u32, struct sk_buff_head *, unsigned int, void (*)(struct sk_buff *), void (*)(struct sk_buff *, int));
831:	static int kauditd_thread(void *);

File kernel/audit_fsnotify.c:
74:	struct audit_fsnotify_mark *audit_alloc_mark(struct audit_krule *, char *, int);
60:	int audit_mark_compare(struct audit_fsnotify_mark *, unsigned long, dev_t);
55:	char *audit_mark_path(struct audit_fsnotify_mark *);
133:	void audit_remove_mark(struct audit_fsnotify_mark *);
139:	void audit_remove_mark_rule(struct audit_krule *);
47:	static void audit_fsnotify_free_mark(struct fsnotify_mark *);
183:	static int audit_fsnotify_init(void);
156:	static int audit_mark_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);

File kernel/audit_tree.c:
800:	int audit_add_tree_rule(struct audit_krule *);
972:	void audit_kill_trees(struct audit_context *);
725:	int audit_make_tree(struct audit_krule *, char *, u32);
139:	void audit_put_chunk(struct audit_chunk *);
740:	void audit_put_tree(struct audit_tree *);
647:	int audit_remove_tree_rule(struct audit_krule *);
870:	int audit_tag_tree(char *, char *);
242:	struct audit_chunk *audit_tree_lookup(const struct inode *);
261:	bool audit_tree_match(struct audit_chunk *, struct audit_tree *);
123:	const char *audit_tree_path(struct audit_tree *);
677:	void audit_trim_trees(void);
145:	static void __put_chunk(struct callback_head *);
93:	static struct audit_tree *alloc_tree(const char *);
785:	static int audit_launch_prune(void);
171:	static void audit_tree_destroy_watch(struct fsnotify_mark *);
1042:	static void audit_tree_freeing_mark(struct fsnotify_mark *, struct fsnotify_group *);
1035:	static int audit_tree_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
1071:	static int audit_tree_init(void);
671:	static int compare_root(struct vfsmount *, void *);
542:	static void kill_rules(struct audit_context *, struct audit_tree *);
569:	static void prune_tree_chunks(struct audit_tree *, bool);
754:	static int prune_tree_thread(void *);
116:	static void put_tree(struct audit_tree *);
293:	static void replace_chunk(struct audit_chunk *, struct audit_chunk *);
745:	static int tag_mount(struct vfsmount *, void *);
609:	static void trim_marked(struct audit_tree *);

File kernel/audit_watch.c:
400:	int audit_add_watch(struct audit_krule *, struct list_head **);
505:	int audit_dupe_exe(struct audit_krule *, struct audit_krule *);
524:	int audit_exe_compare(struct task_struct *, struct audit_fsnotify_mark *);
100:	void audit_get_watch(struct audit_watch *);
105:	void audit_put_watch(struct audit_watch *);
447:	void audit_remove_watch_rule(struct audit_krule *);
178:	int audit_to_watch(struct audit_krule *, char *, int, u32);
128:	int audit_watch_compare(struct audit_watch *, unsigned long, dev_t);
123:	char *audit_watch_path(struct audit_watch *);
160:	static struct audit_watch *audit_init_watch(char *);
115:	static void audit_remove_watch(struct audit_watch *);
245:	static void audit_update_watch(struct audit_parent *, const struct qstr *, dev_t, unsigned long, unsigned int);
64:	static void audit_watch_free_mark(struct fsnotify_mark *);
468:	static int audit_watch_handle_event(struct fsnotify_mark *, u32, struct inode *, struct inode *, const struct qstr *, u32);
494:	static int audit_watch_init(void);

File kernel/auditfilter.c:
1204:	int audit_comparator(u32, u32, u32);
1310:	int audit_compare_dname_path(const struct qstr *, const char *, int);
1022:	int audit_del_rule(struct audit_entry *);
819:	struct audit_entry *audit_dupe_rule(struct audit_krule *);
1329:	int audit_filter(int, unsigned int);
99:	void audit_free_rule_rcu(struct callback_head *);
1250:	int audit_gid_comparator(kgid_t, u32, kgid_t);
1171:	int audit_list_rules_send(struct sk_buff *, int);
189:	int audit_match_class(int, unsigned int);
168:	int audit_register_class(int, unsigned int *);
1132:	int audit_rule_change(int, int, void *, size_t);
1228:	int audit_uid_comparator(kuid_t, u32, kuid_t);
127:	char *audit_unpack_string(void **, size_t *, size_t);
1437:	int audit_update_lsm_rules(void);
1276:	int parent_len(const char *);
704:	static int audit_compare_rule(struct audit_krule *, struct audit_krule *);
449:	static struct audit_entry *audit_data_to_entry(struct audit_rule_data *, size_t);
1107:	static void audit_log_rule_change(char *, struct audit_krule *, int);
211:	static int audit_match_signal(struct audit_entry *);

File kernel/auditsc.c:
2656:	void __audit_bprm(struct linux_binprm *);
2880:	void __audit_fanotify(unsigned int);
2689:	void __audit_fd_pair(int, int);
2392:	void __audit_file(const struct file *);
1826:	void __audit_free(struct task_struct *);
2228:	void __audit_getname(struct filename *);
2294:	void __audit_inode(struct filename *, const struct dentry *, unsigned int);
2411:	void __audit_inode_child(struct inode *, const struct dentry *, const unsigned char);
2624:	void __audit_ipc_obj(struct kern_ipc_perm *);
2645:	void __audit_ipc_set_perm(unsigned long, uid_t, gid_t, umode_t);
2795:	int __audit_log_bprm_fcaps(struct linux_binprm *, const struct cred *, const struct cred *);
2839:	void __audit_log_capset(const struct cred *, const struct cred *);
2870:	void __audit_log_kern_module(char *);
2910:	void __audit_log_nfcfg(const char *, u8, unsigned int, enum audit_nfcfgop, gfp_t);
2851:	void __audit_mmap_fd(int, int);
2610:	void __audit_mq_getsetattr(mqd_t, struct mq_attr *);
2591:	void __audit_mq_notify(mqd_t, const struct sigevent *);
2543:	void __audit_mq_open(int, umode_t, struct mq_attr *);
2566:	void __audit_mq_sendrecv(mqd_t, size_t, unsigned int, const struct timespec64 *);
2896:	void __audit_ntp_log(const struct audit_ntp_data *);
2860:	void __audit_openat2_how(struct open_how *);
2721:	void __audit_ptrace(struct task_struct *);
2205:	struct filename *__audit_reusename(const char *);
2704:	int __audit_sockaddr(int, void *);
2671:	int __audit_socketcall(int, unsigned long *);
2010:	void __audit_syscall_entry(int, unsigned long, unsigned long, unsigned long, unsigned long);
2059:	void __audit_syscall_exit(int, long);
2886:	void __audit_tk_injoffset(struct timespec64);
1900:	void __audit_uring_entry(u8);
1936:	void __audit_uring_exit(int, long);
1051:	int audit_alloc(struct task_struct *);
2959:	void audit_core_dumps(long);
894:	void audit_filter_inodes(struct task_struct *, struct audit_context *);
3022:	struct list_head *audit_killed_trees(void);
2989:	void audit_seccomp(unsigned long, long, int);
3003:	void audit_seccomp_actions_logged(const char *, const char *, int);
2740:	int audit_signal_info_syscall(struct task_struct *);
2519:	int auditsc_get_stamp(struct audit_context *, struct timespec64 *, unsigned int *);
1025:	static struct audit_context *audit_alloc_context(enum audit_state);
2171:	static struct audit_names *audit_alloc_name(struct audit_context *, unsigned char);
461:	static int audit_filter_rules(struct task_struct *, struct audit_krule *, struct audit_context *, struct audit_names *, enum audit_state *, bool);
864:	static void audit_filter_syscall(struct task_struct *, struct audit_context *);
773:	static enum audit_state audit_filter_task(struct task_struct *, char **);
847:	static void audit_filter_uring(struct task_struct *, struct audit_context *);
1677:	static void audit_log_exit(void);
1088:	static int audit_log_pid_context(struct audit_context *, pid_t, kuid_t, kuid_t, unsigned int, u32, char *);
2930:	static void audit_log_task(struct audit_buffer *);
1643:	static void audit_log_uring(struct audit_context *);
966:	static void audit_reset_context(struct audit_context *);
251:	static int grow_tree_refs(struct audit_context *);
268:	static void unroll_tree_refs(struct audit_context *, struct audit_tree_refs *, int);

File kernel/bpf/arraymap.c:
52:	int array_map_alloc_check(union bpf_attr *);
798:	int bpf_fd_array_map_lookup_elem(struct bpf_map *, void *, u32 *);
818:	int bpf_fd_array_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
263:	int bpf_percpu_array_copy(struct bpf_map *, void *, void *);
349:	int bpf_percpu_array_update(struct bpf_map *, void *, void *, u64);
589:	static int __bpf_array_map_seq_show(struct seq_file *, void *);
1177:	static void __bpf_event_entry_free(struct callback_head *);
80:	static struct bpf_map *array_map_alloc(union bpf_attr *);
488:	static int array_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
389:	static int array_map_delete_elem(struct bpf_map *, void *);
174:	static int array_map_direct_value_addr(const struct bpf_map *, u64 *, u32);
188:	static int array_map_direct_value_meta(const struct bpf_map *, u64, u32 *);
413:	static void array_map_free(struct bpf_map *);
399:	static void array_map_free_timers(struct bpf_map *);
205:	static int array_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
291:	static int array_map_get_next_key(struct bpf_map *, void *, void *);
163:	static void *array_map_lookup_elem(struct bpf_map *, void *);
536:	static bool array_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
520:	static int array_map_mmap(struct bpf_map *, struct vm_area_struct *);
444:	static void array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
310:	static int array_map_update_elem(struct bpf_map *, void *, void *, u64);
1298:	static struct bpf_map *array_of_map_alloc(union bpf_attr *);
1317:	static void array_of_map_free(struct bpf_map *);
1337:	static int array_of_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
1327:	static void *array_of_map_lookup_elem(struct bpf_map *, void *);
570:	static void *bpf_array_map_seq_next(struct seq_file *, void *, loff_t *);
629:	static int bpf_array_map_seq_show(struct seq_file *, void *);
551:	static void *bpf_array_map_seq_start(struct seq_file *, loff_t *);
634:	static void bpf_array_map_seq_stop(struct seq_file *, void *);
689:	static int bpf_for_each_array_elem(struct bpf_map *, bpf_callback_t, void *, u64);
667:	static void bpf_iter_fini_array_map(void *);
640:	static int bpf_iter_init_array_map(void *, struct bpf_iter_aux_info *);
1277:	static void cgroup_fd_array_free(struct bpf_map *);
1264:	static void *cgroup_fd_array_get_ptr(struct bpf_map *, struct file *, int);
1271:	static void cgroup_fd_array_put_ptr(void *);
769:	static int fd_array_map_alloc_check(union bpf_attr *);
850:	static int fd_array_map_delete_elem(struct bpf_map *, void *);
792:	static void *fd_array_map_lookup_elem(struct bpf_map *, void *);
238:	static void *percpu_array_map_lookup_elem(struct bpf_map *, void *);
249:	static void *percpu_array_map_lookup_percpu_elem(struct bpf_map *, void *, u32);
465:	static void percpu_array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1191:	static void *perf_event_fd_array_get_ptr(struct bpf_map *, struct file *, int);
1241:	static void perf_event_fd_array_map_free(struct bpf_map *);
1217:	static void perf_event_fd_array_put_ptr(void *);
1222:	static void perf_event_fd_array_release(struct bpf_map *, struct file *);
1100:	static struct bpf_map *prog_array_map_alloc(union bpf_attr *);
1092:	static void prog_array_map_clear(struct bpf_map *);
1084:	static void prog_array_map_clear_deferred(struct work_struct *);
1125:	static void prog_array_map_free(struct bpf_map *);
991:	static void prog_array_map_poke_run(struct bpf_map *, u32, struct bpf_prog *, struct bpf_prog *);
940:	static int prog_array_map_poke_track(struct bpf_map *, struct bpf_prog_aux *);
973:	static void prog_array_map_poke_untrack(struct bpf_map *, struct bpf_prog_aux *);
912:	static void prog_array_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
876:	static void *prog_fd_array_get_ptr(struct bpf_map *, struct file *, int);
892:	static void prog_fd_array_put_ptr(void *);
897:	static u32 prog_fd_array_sys_lookup_elem(void *);

File kernel/bpf/bloom_filter.c:
91:	static struct bpf_map *bloom_map_alloc(union bpf_attr *);
187:	static int bloom_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
81:	static int bloom_map_delete_elem(struct bpf_map *, void *);
166:	static void bloom_map_free(struct bpf_map *);
86:	static int bloom_map_get_next_key(struct bpf_map *, void *, void *);
174:	static void *bloom_map_lookup_elem(struct bpf_map *, void *);
44:	static int bloom_map_peek_elem(struct bpf_map *, void *);
76:	static int bloom_map_pop_elem(struct bpf_map *, void *);
59:	static int bloom_map_push_elem(struct bpf_map *, void *, u64);
180:	static int bloom_map_update_elem(struct bpf_map *, void *, void *, u64);
30:	static u32 hash(struct bpf_bloom_filter *, void *, u32, u32);

File kernel/bpf/bpf_cgrp_storage.c:
198:	u64 bpf_cgrp_storage_delete(u64, u64, u64, u64, u64);
46:	void bpf_cgrp_storage_free(struct cgroup *);
168:	u64 bpf_cgrp_storage_get(u64, u64, u64, u64, u64);
135:	static int bpf_cgrp_storage_delete_elem(struct bpf_map *, void *);
85:	static void *bpf_cgrp_storage_lookup_elem(struct bpf_map *, void *);
28:	static bool bpf_cgrp_storage_trylock(void);
103:	static int bpf_cgrp_storage_update_elem(struct bpf_map *, void *, void *, u64);
157:	static struct bpf_map *cgroup_storage_map_alloc(union bpf_attr *);
162:	static void cgroup_storage_map_free(struct bpf_map *);
39:	static struct bpf_local_storage **cgroup_storage_ptr(void *);
152:	static int notsupp_get_next_key(struct bpf_map *, void *, void *);

File kernel/bpf/bpf_iter.c:
728:	u64 bpf_for_each_map_elem(u64, u64, u64, u64, u64);
373:	const struct bpf_func_proto *bpf_iter_get_func_proto(enum bpf_func_id, const struct bpf_prog *);
672:	struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *, bool);
507:	int bpf_iter_link_attach(const union bpf_attr *, bpfptr_t, struct bpf_prog *);
636:	int bpf_iter_new_fd(struct bpf_link *);
339:	bool bpf_iter_prog_supported(struct bpf_prog *);
296:	int bpf_iter_reg_target(const struct bpf_iter_reg *);
695:	int bpf_iter_run_prog(struct bpf_prog *, void *);
314:	void bpf_iter_unreg_target(const struct bpf_iter_reg *);
502:	bool bpf_link_is_iter(struct bpf_link *);
744:	u64 bpf_loop(u64, u64, u64, u64, u64);
403:	static void bpf_iter_link_dealloc(struct bpf_link *);
454:	static int bpf_iter_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
394:	static void bpf_iter_link_release(struct bpf_link *);
411:	static int bpf_iter_link_replace(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
438:	static void bpf_iter_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
94:	static ssize_t bpf_seq_read(struct file *, char *, size_t, loff_t *);
256:	static int iter_open(struct inode *, struct file *);
263:	static int iter_release(struct inode *, struct file *);
591:	static int prepare_seq_file(struct file *, struct bpf_iter_link *, const struct bpf_iter_seq_info *);

File kernel/bpf/bpf_local_storage.c:
302:	int bpf_local_storage_alloc(void *, struct bpf_local_storage_map *, struct bpf_local_storage_elem *, gfp_t);
87:	void bpf_local_storage_free_rcu(struct callback_head *);
247:	struct bpf_local_storage_data *bpf_local_storage_lookup(struct bpf_local_storage *, struct bpf_local_storage_map *, bool);
640:	struct bpf_map *bpf_local_storage_map_alloc(union bpf_attr *, struct bpf_local_storage_cache *);
536:	int bpf_local_storage_map_alloc_check(union bpf_attr *);
589:	int bpf_local_storage_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
653:	void bpf_local_storage_map_free(struct bpf_map *, struct bpf_local_storage_cache *, int *);
606:	bool bpf_local_storage_unlink_nolock(struct bpf_local_storage *);
372:	struct bpf_local_storage_data *bpf_local_storage_update(void *, struct bpf_local_storage_map *, void *, u64, gfp_t);
65:	struct bpf_local_storage_elem *bpf_selem_alloc(struct bpf_local_storage_map *, void *, void *, bool, gfp_t);
223:	void bpf_selem_link_map(struct bpf_local_storage_map *, struct bpf_local_storage_elem *);
198:	void bpf_selem_link_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *);
235:	void bpf_selem_unlink(struct bpf_local_storage_elem *, bool);
205:	void bpf_selem_unlink_map(struct bpf_local_storage_elem *);
101:	static void bpf_selem_free_rcu(struct callback_head *);
116:	static bool bpf_selem_unlink_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *, bool, bool);

File kernel/bpf/bpf_lru_list.c:
689:	void bpf_lru_destroy(struct bpf_lru *);
646:	int bpf_lru_init(struct bpf_lru *, bool, u32, del_from_htab_func, void *);
494:	struct bpf_lru_node *bpf_lru_pop_free(struct bpf_lru *, u32);
608:	void bpf_lru_populate(struct bpf_lru *, void *, u32, u32, u32);
551:	void bpf_lru_push_free(struct bpf_lru *, struct bpf_lru_node *);
237:	static void __bpf_lru_list_rotate(struct bpf_lru *, struct bpf_lru_list *);
255:	static unsigned int __bpf_lru_list_shrink(struct bpf_lru *, struct bpf_lru_list *, unsigned int, struct list_head *, enum bpf_lru_list_type);

File kernel/bpf/bpf_task_storage.c:
293:	u64 bpf_task_storage_delete(u64, u64, u64, u64, u64);
272:	u64 bpf_task_storage_delete_recur(u64, u64, u64, u64, u64);
72:	void bpf_task_storage_free(struct task_struct *);
256:	u64 bpf_task_storage_get(u64, u64, u64, u64, u64);
237:	u64 bpf_task_storage_get_recur(u64, u64, u64, u64, u64);
183:	static int bpf_pid_task_storage_delete_elem(struct bpf_map *, void *);
97:	static void *bpf_pid_task_storage_lookup_elem(struct bpf_map *, void *);
130:	static int bpf_pid_task_storage_update_elem(struct bpf_map *, void *, void *, u64);
38:	static bool bpf_task_storage_trylock(void);
312:	static int notsupp_get_next_key(struct bpf_map *, void *, void *);
317:	static struct bpf_map *task_storage_map_alloc(union bpf_attr *);
322:	static void task_storage_map_free(struct bpf_map *);
49:	static struct bpf_local_storage **task_storage_ptr(void *);

File kernel/bpf/btf.c:
7417:	u64 bpf_btf_find_by_name_kind(u64, u64, u64, u64, u64);
8145:	int bpf_core_apply(struct bpf_core_ctx *, const struct bpf_core_relo *, int, void *);
7838:	size_t bpf_core_essential_name_len(const char *);
7814:	int bpf_core_types_are_compat(const struct btf *, __u32, const struct btf *, __u32);
7823:	int bpf_core_types_match(const struct btf *, u32, const struct btf *, u32);
5776:	struct btf *bpf_prog_get_target_btf(const struct bpf_prog *);
3722:	int btf_check_and_fixup_fields(const struct btf *, struct btf_record *);
6756:	int btf_check_subprog_arg_match(struct bpf_verifier_env *, int, struct bpf_reg_state *);
6799:	int btf_check_subprog_call(struct bpf_verifier_env *, int, struct bpf_reg_state *);
6624:	int btf_check_type_match(struct bpf_verifier_log *, const struct bpf_prog *, struct btf *, const struct btf_type *);
5842:	bool btf_ctx_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
6436:	int btf_distill_func_proto(struct bpf_verifier_log *, struct btf *, const struct btf_type *, const char *, struct btf_func_model *);
512:	s32 btf_find_by_name_kind(const struct btf *, const char *, u8);
7661:	s32 btf_find_dtor_kfunc(struct btf *, u32);
5337:	struct btf_struct_meta *btf_find_struct_meta(const struct btf *, u32);
1679:	void btf_get(struct btf *);
7094:	struct btf *btf_get_by_fd(int);
7176:	int btf_get_fd_by_id(u32);
7116:	int btf_get_info_by_fd(const struct btf *, const union bpf_attr *, union bpf_attr *);
5537:	const struct btf_member *btf_get_prog_ctx_type(struct bpf_verifier_log *, const struct btf *, const struct btf_type *, enum bpf_prog_type, int);
7202:	bool btf_is_kernel(const struct btf *);
7207:	bool btf_is_module(const struct btf *);
7597:	u32 *btf_kfunc_id_set_contains(const struct btf *, enum bpf_prog_type, u32);
7612:	u32 *btf_kfunc_is_modify_return(const struct btf *, u32);
844:	bool btf_member_is_reg_int(const struct btf *, const struct btf_type *, const struct btf_member *, u32, u32);
800:	const char *btf_name_by_offset(const struct btf *, u32);
7063:	int btf_new_fd(const union bpf_attr *, bpfptr_t);
500:	u32 btf_nr_types(const struct btf *);
7197:	u32 btf_obj_id(const struct btf *);
3809:	struct btf_field_offs *btf_parse_field_offs(struct btf_record *);
3639:	struct btf_record *btf_parse_fields(const struct btf *, const struct btf_type *, u32, u32);
5632:	struct btf *btf_parse_vmlinux(void);
6837:	int btf_prepare_func_args(struct bpf_verifier_env *, int, struct bpf_reg_state *);
1684:	void btf_put(struct btf *);
1914:	const struct btf_type *btf_resolve_size(const struct btf *, const struct btf_type *, u32 *);
6286:	int btf_struct_access(struct bpf_verifier_log *, const struct bpf_reg_state *, int, int, enum bpf_access_type, u32 *, enum bpf_type_flag *);
6374:	bool btf_struct_ids_match(struct bpf_verifier_log *, const struct btf *, u32, int, const struct btf *, u32, bool);
7357:	struct module *btf_try_get_module(const struct btf *);
805:	const struct btf_type *btf_type_by_id(const struct btf *, u32);
1944:	const struct btf_type *btf_type_id_size(const struct btf *, u32 *, u32 *);
463:	bool btf_type_is_void(const struct btf_type *);
604:	const struct btf_type *btf_type_resolve_func_ptr(const struct btf *, u32, u32 *);
592:	const struct btf_type *btf_type_resolve_ptr(const struct btf *, u32, u32 *);
6979:	void btf_type_seq_show(const struct btf *, u32, void *, struct seq_file *);
6965:	int btf_type_seq_show_flags(const struct btf *, u32, void *, struct seq_file *, u64);
576:	const struct btf_type *btf_type_skip_modifiers(const struct btf *, u32, u32 *);
7015:	int btf_type_snprintf_show(const struct btf *, u32, void *, char *, int, u64);
319:	const char *btf_type_str(const struct btf_type *);
6364:	bool btf_types_are_same(const struct btf *, u32, const struct btf *, u32);
5609:	int get_kern_ctx_btf_id(struct bpf_verifier_log *, enum bpf_prog_type);
7655:	int register_btf_fmodret_id_set(const struct btf_kfunc_id_set *);
7716:	int register_btf_id_dtor_kfuncs(const struct btf_id_dtor_kfunc *, u32, struct module *);
7644:	int register_btf_kfunc_id_set(enum bpf_prog_type, const struct btf_kfunc_id_set *);
2932:	static void __btf_array_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1844:	static const struct btf_type *__btf_resolve_size(const struct btf *, const struct btf_type *, u32 *, const struct btf_type **, u32 *, u32 *, u32 *);
3838:	static void __btf_struct_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1364:	static void __btf_verifier_log(struct bpf_verifier_log *, const char *, ...);
1388:	static void __btf_verifier_log_type(struct btf_verifier_env *, const struct btf_type *, bool, const char *, ...);
6413:	static int __get_type_size(struct btf *, u32, const struct btf_type **);
7883:	static void __print_cand_cache(struct bpf_verifier_log *, struct bpf_cand_cache **, int);
7617:	static int __register_btf_kfunc_id_set(enum btf_kfunc_hook, const struct btf_kfunc_id_set *);
7037:	static void bpf_btf_show_fdinfo(struct seq_file *, struct file *);
8007:	static struct bpf_cand_cache *bpf_core_add_cands(struct bpf_cand_cache *, const struct btf *, int);
532:	static s32 bpf_find_btf_id(const char *, u32, struct btf **);
1574:	static int btf_alloc_id(struct btf *);
2776:	static int btf_array_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2805:	static s32 btf_array_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2923:	static void btf_array_log(struct btf_verifier_env *, const struct btf_type *);
2858:	static int btf_array_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2985:	static void btf_array_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4916:	static int btf_check_all_metas(struct btf_verifier_env *);
6647:	static int btf_check_func_arg_match(struct bpf_verifier_env *, const struct btf *, u32, struct bpf_reg_state *, bool, bool);
5118:	static int btf_check_sec_info(struct btf_verifier_env *, u32);
5348:	static int btf_check_type_tags(struct btf_verifier_env *, struct btf *, int);
4399:	static s32 btf_datasec_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4511:	static void btf_datasec_log(struct btf_verifier_env *, const struct btf_type *);
4472:	static int btf_datasec_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
4517:	static void btf_datasec_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4625:	static s32 btf_decl_tag_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4714:	static void btf_decl_tag_log(struct btf_verifier_env *, const struct btf_type *);
4668:	static int btf_decl_tag_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
1997:	static int btf_df_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
1987:	static int btf_df_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2029:	static int btf_df_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2036:	static void btf_df_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
4096:	static s32 btf_enum64_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4156:	static void btf_enum64_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
3953:	static int btf_enum_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3928:	static int btf_enum_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3988:	static s32 btf_enum_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4047:	static void btf_enum_log(struct btf_verifier_env *, const struct btf_type *);
4053:	static void btf_enum_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
3783:	static int btf_field_offs_cmp(const void *, const void *, const void *);
3795:	static void btf_field_offs_swap(void *, void *, int, const void *);
3248:	static int btf_find_kptr(const struct btf *, const struct btf_type *, u32, int, struct btf_field_info *);
3308:	static int btf_find_list_head(const struct btf *, const struct btf_type *, const struct btf_type *, int, u32, int, struct btf_field_info *);
4575:	static int btf_float_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
4550:	static s32 btf_float_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4610:	static void btf_float_log(struct btf_verifier_env *, const struct btf_type *);
1660:	static void btf_free(struct btf *);
1610:	static void btf_free_kfunc_set_tab(struct btf *);
1672:	static void btf_free_rcu(struct callback_head *);
1652:	static void btf_free_struct_meta_tab(struct btf *);
4286:	static s32 btf_func_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4199:	static s32 btf_func_proto_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4227:	static void btf_func_proto_log(struct btf_verifier_env *, const struct btf_type *);
4311:	static int btf_func_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2735:	static s32 btf_fwd_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2761:	static void btf_fwd_type_log(struct btf_verifier_env *, const struct btf_type *);
2010:	static int btf_generic_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3343:	static int btf_get_field_type(const char *, u32, u32 *, int *, int *);
2213:	static void btf_int128_print(struct btf_show *, void *);
2081:	static int btf_int_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2043:	static int btf_int_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2137:	static s32 btf_int_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2201:	static void btf_int_log(struct btf_verifier_env *, const struct btf_type *);
2323:	static void btf_int_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2427:	static int btf_modifier_check_kflag_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2402:	static int btf_modifier_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2526:	static int btf_modifier_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2671:	static void btf_modifier_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
5171:	static int btf_parse_hdr(struct btf_verifier_env *);
5242:	static struct btf_struct_metas *btf_parse_struct_metas(struct bpf_verifier_log *, struct btf *);
5051:	static int btf_parse_type_sec(struct btf_verifier_env *);
2452:	static int btf_ptr_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
2614:	static int btf_ptr_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2693:	static void btf_ptr_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
2478:	static int btf_ref_type_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
2711:	static void btf_ref_type_log(struct btf_verifier_env *, const struct btf_type *);
7045:	static int btf_release(struct inode *, struct file *);
4984:	static int btf_resolve(struct btf_verifier_env *, const struct btf_type *, u32);
5110:	static int btf_sec_info_cmp(const void *, const void *);
6959:	static void btf_seq_show(struct btf_show *, const char *, va_list);
1096:	static void btf_show(struct btf_show *, const char *, ...);
905:	static const char *btf_show_name(struct btf_show *);
1267:	static void *btf_show_start_type(struct btf_show *, const struct btf_type *, u32, void *);
6993:	static void btf_snprintf_show(struct btf_show *, const char *, va_list);
3027:	static int btf_struct_check_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const struct btf_type *);
3052:	static s32 btf_struct_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
3204:	static void btf_struct_log(struct btf_verifier_env *, const struct btf_type *);
3133:	static int btf_struct_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
3885:	static void btf_struct_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
6042:	static int btf_struct_walk(struct bpf_verifier_log *, const struct btf *, const struct btf_type *, int, int, u32 *, enum bpf_type_flag *);
4335:	static s32 btf_var_check_meta(struct btf_verifier_env *, const struct btf_type *, u32);
4383:	static void btf_var_log(struct btf_verifier_env *, const struct btf_type *);
2568:	static int btf_var_resolve(struct btf_verifier_env *, const struct resolve_vertex *);
2684:	static void btf_var_show(const struct btf *, const struct btf_type *, u32, void *, u8, struct btf_show *);
1374:	static void btf_verifier_log(struct btf_verifier_env *, const char *, ...);
1432:	static void btf_verifier_log_member(struct btf_verifier_env *, const struct btf_type *, const struct btf_member *, const char *, ...);
1478:	static void btf_verifier_log_vsi(struct btf_verifier_env *, const struct btf_type *, const struct btf_var_secinfo *, const char *, ...);
1769:	static int env_stack_push(struct btf_verifier_env *, const struct btf_type *, u32);
1734:	static bool env_type_is_resolve_sink(const struct btf_verifier_env *, const struct btf_type *);
7915:	static u32 hash_cands(struct bpf_cand_cache *);
5786:	static bool is_int_ptr(struct btf *, const struct btf_type *);
7937:	static struct bpf_cand_cache *populate_cand_cache(struct bpf_cand_cache *, struct bpf_cand_cache **, int);

File kernel/bpf/cgroup.c:
1520:	int __cgroup_bpf_check_dev_permission(short, u32, u32, short, enum cgroup_bpf_attach_type);
1871:	int __cgroup_bpf_run_filter_getsockopt(struct sock *, int, int, char *, int *, int, int);
1942:	int __cgroup_bpf_run_filter_getsockopt_kern(struct sock *, int, int, void *, int *, int);
1787:	int __cgroup_bpf_run_filter_setsockopt(struct sock *, int *, int *, char *, int *, char **);
1437:	int __cgroup_bpf_run_filter_sk(struct sock *, enum cgroup_bpf_attach_type);
1356:	int __cgroup_bpf_run_filter_skb(struct sock *, struct sk_buff *, enum cgroup_bpf_attach_type);
1462:	int __cgroup_bpf_run_filter_sock_addr(struct sock *, struct sockaddr *, enum cgroup_bpf_attach_type, void *, u32 *);
1509:	int __cgroup_bpf_run_filter_sock_ops(struct sock *, struct bpf_sock_ops_kern *, enum cgroup_bpf_attach_type);
1681:	int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *, struct ctl_table *, int, char **, size_t *, loff_t *, enum cgroup_bpf_attach_type);
110:	unsigned int __cgroup_bpf_run_lsm_current(const void *, const struct bpf_insn *);
66:	unsigned int __cgroup_bpf_run_lsm_sock(const void *, const struct bpf_insn *);
88:	unsigned int __cgroup_bpf_run_lsm_socket(const void *, const struct bpf_insn *);
1540:	u64 bpf_get_local_storage(u64, u64, u64, u64, u64);
2261:	u64 bpf_get_netns_cookie_sockopt(u64, u64, u64, u64, u64);
1571:	u64 bpf_get_retval(u64, u64, u64, u64, u64);
1585:	u64 bpf_set_retval(u64, u64, u64, u64, u64);
2071:	u64 bpf_sysctl_get_current_value(u64, u64, u64, u64, u64);
2014:	u64 bpf_sysctl_get_name(u64, u64, u64, u64, u64);
2086:	u64 bpf_sysctl_get_new_value(u64, u64, u64, u64, u64);
2106:	u64 bpf_sysctl_set_new_value(u64, u64, u64, u64, u64);
461:	int cgroup_bpf_inherit(struct cgroup *);
1273:	int cgroup_bpf_link_attach(const union bpf_attr *, struct bpf_prog *);
192:	void cgroup_bpf_offline(struct cgroup *);
1129:	int cgroup_bpf_prog_attach(const union bpf_attr *, enum bpf_prog_type, struct bpf_prog *);
1158:	int cgroup_bpf_prog_detach(const union bpf_attr *, enum bpf_prog_type);
1317:	int cgroup_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
2481:	const struct bpf_func_proto *cgroup_common_func_proto(enum bpf_func_id, const struct bpf_prog *);
2523:	const struct bpf_func_proto *cgroup_current_func_proto(enum bpf_func_id, const struct bpf_prog *);
949:	static int __cgroup_bpf_detach(struct cgroup *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type);
1213:	static void bpf_cgroup_link_dealloc(struct bpf_link *);
1221:	static int bpf_cgroup_link_detach(struct bpf_link *);
1247:	static int bpf_cgroup_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
1180:	static void bpf_cgroup_link_release(struct bpf_link *);
1228:	static void bpf_cgroup_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
2384:	static u32 cg_sockopt_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
2277:	static const struct bpf_func_proto *cg_sockopt_func_proto(enum bpf_func_id, const struct bpf_prog *);
2460:	static int cg_sockopt_get_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
2317:	static bool cg_sockopt_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
724:	static int cgroup_bpf_attach(struct cgroup *, struct bpf_prog *, struct bpf_prog *, struct bpf_cgroup_link *, enum bpf_attach_type, u32);
275:	static void cgroup_bpf_release(struct work_struct *);
332:	static void cgroup_bpf_release_fn(struct percpu_ref *);
826:	static int cgroup_bpf_replace(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
1602:	static const struct bpf_func_proto *cgroup_dev_func_proto(enum bpf_func_id, const struct bpf_prog *);
1622:	static bool cgroup_dev_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
401:	static int compute_effective_progs(struct cgroup *, enum cgroup_bpf_attach_type, struct bpf_prog_array **);
2189:	static u32 sysctl_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
1983:	static ssize_t sysctl_cpy_dir(const struct ctl_dir *, char **, size_t *);
2132:	static const struct bpf_func_proto *sysctl_func_proto(enum bpf_func_id, const struct bpf_prog *);
2162:	static bool sysctl_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
504:	static int update_effective_progs(struct cgroup *, enum cgroup_bpf_attach_type);

File kernel/bpf/cgroup_iter.c:
272:	int bpf_iter_cgroup(struct bpf_iter_meta *, struct cgroup *);
290:	static int bpf_cgroup_iter_init(void);
194:	static int bpf_iter_attach_cgroup(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
264:	static int bpf_iter_cgroup_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
232:	static void bpf_iter_cgroup_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
227:	static void bpf_iter_detach_cgroup(struct bpf_iter_aux_info *);
180:	static void cgroup_iter_seq_fini(void *);
162:	static int cgroup_iter_seq_init(void *, struct bpf_iter_aux_info *);
101:	static void *cgroup_iter_seq_next(struct seq_file *, void *, loff_t *);
147:	static int cgroup_iter_seq_show(struct seq_file *, void *);
57:	static void *cgroup_iter_seq_start(struct seq_file *, loff_t *);
88:	static void cgroup_iter_seq_stop(struct seq_file *, void *);

File kernel/bpf/core.c:
1465:	u64 __bpf_call_base(u64, u64, u64, u64, u64);
2519:	void __bpf_free_used_btfs(struct bpf_prog_aux *, struct btf_mod_pair *, u32);
2499:	void __bpf_free_used_maps(struct bpf_prog_aux *, struct bpf_map **, u32);
264:	void __bpf_prog_free(struct bpf_prog *);
2742:	void *bpf_arch_text_copy(void *, void *, size_t);
2747:	int bpf_arch_text_invalidate(void *, size_t);
2736:	int bpf_arch_text_poke(void *, enum bpf_text_poke_type, void *, void *);
2665:	u64 bpf_event_output(struct bpf_map *, u64, void *, u64, void *, u64, bpf_ctx_copy_t);
2617:	u64 bpf_get_raw_cpu_id(u64, u64, u64, u64, u64);
2654:	const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
2659:	const struct bpf_func_proto *bpf_get_trace_vprintk_proto(void);
2698:	bool bpf_helper_changes_pkt_data(void *);
2686:	struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *);
71:	void *bpf_internal_load_pointer_neg_helper(const struct sk_buff *, int, unsigned int);
2694:	void bpf_jit_compile(struct bpf_prog *);
2711:	bool bpf_jit_needs_zext(void);
2722:	bool bpf_jit_supports_kfunc_call(void);
2717:	bool bpf_jit_supports_subprog_tailcalls(void);
1608:	bool bpf_opcode_in_insntable(u8);
2069:	void bpf_patch_call_args(struct bpf_insn *, u32);
453:	struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *, u32, const struct bpf_insn *, u32);
1630:	u64 bpf_probe_read_kernel(void *, u32, const void *);
127:	struct bpf_prog *bpf_prog_alloc(unsigned int, gfp_t);
155:	int bpf_prog_alloc_jited_linfo(struct bpf_prog *);
88:	struct bpf_prog *bpf_prog_alloc_no_stats(unsigned int, gfp_t);
2235:	struct bpf_prog_array *bpf_prog_array_alloc(u32, gfp_t);
2408:	int bpf_prog_array_copy(struct bpf_prog_array *, struct bpf_prog *, struct bpf_prog *, u64, struct bpf_prog_array **);
2479:	int bpf_prog_array_copy_info(struct bpf_prog_array *, u32 *, u32, u32 *);
2315:	int bpf_prog_array_copy_to_user(struct bpf_prog_array *, __u32 *, u32);
2341:	void bpf_prog_array_delete_safe(struct bpf_prog_array *, struct bpf_prog *);
2368:	int bpf_prog_array_delete_safe_at(struct bpf_prog_array *, int);
2246:	void bpf_prog_array_free(struct bpf_prog_array *);
2267:	void bpf_prog_array_free_sleepable(struct bpf_prog_array *);
2285:	bool bpf_prog_array_is_empty(struct bpf_prog_array *);
2274:	int bpf_prog_array_length(struct bpf_prog_array *);
2388:	int bpf_prog_array_update_at(struct bpf_prog_array *, int, struct bpf_prog *);
277:	int bpf_prog_calc_tag(struct bpf_prog *);
205:	void bpf_prog_fill_jited_linfo(struct bpf_prog *, const u32 *);
2580:	void bpf_prog_free(struct bpf_prog *);
169:	void bpf_prog_jit_attempt_done(struct bpf_prog *);
534:	void bpf_prog_kallsyms_del_all(struct bpf_prog *);
2090:	bool bpf_prog_map_compatible(struct bpf_map *, const struct bpf_prog *);
234:	struct bpf_prog *bpf_prog_realloc(struct bpf_prog *, unsigned int, gfp_t);
2163:	struct bpf_prog *bpf_prog_select_runtime(struct bpf_prog *, int *);
514:	int bpf_remove_insns(struct bpf_prog *, u32, u32);
2594:	void bpf_user_rnd_init_once(void);
2599:	u64 bpf_user_rnd_u32(u64, u64, u64, u64, u64);
2730:	int skb_copy_bits(const struct sk_buff *, int, void *, int);
1645:	static u64 ___bpf_prog_run(u64 *, const struct bpf_insn *);
2253:	static void __bpf_prog_array_free_sleepable_cb(struct callback_head *);
2216:	static unsigned int __bpf_prog_ret1(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run128(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run160(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run192(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run224(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run256(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run288(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run32(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run320(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run352(const void *, const struct bpf_insn *);
2044:	static unsigned int __bpf_prog_run384(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run416(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run448(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run480(const void *, const struct bpf_insn *);
2045:	static unsigned int __bpf_prog_run512(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run64(const void *, const struct bpf_insn *);
2043:	static unsigned int __bpf_prog_run96(const void *, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args128(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args160(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args192(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args224(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args256(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args288(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args32(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args320(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args352(u64, u64, u64, u64, u64, const struct bpf_insn *);
2048:	static u64 __bpf_prog_run_args384(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args416(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args448(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args480(u64, u64, u64, u64, u64, const struct bpf_insn *);
2049:	static u64 __bpf_prog_run_args512(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args64(u64, u64, u64, u64, u64, const struct bpf_insn *);
2047:	static u64 __bpf_prog_run_args96(u64, u64, u64, u64, u64, const struct bpf_insn *);
386:	static int bpf_adj_branches(struct bpf_prog *, u32, s32, s32, const bool);
2753:	static int bpf_global_ma_init(void);
2541:	static void bpf_prog_free_deferred(struct work_struct *);

File kernel/bpf/cpumap.c:
779:	void __cpu_map_flush(void);
750:	int cpu_map_enqueue(struct bpf_cpu_map_entry *, struct xdp_frame *, struct net_device *);
760:	int cpu_map_generic_redirect(struct bpf_cpu_map_entry *, struct sk_buff *);
495:	static void __cpu_map_entry_free(struct callback_head *);
690:	static void bq_flush_to_queue(struct xdp_bulk_queue *);
87:	static struct bpf_map *cpu_map_alloc(union bpf_attr *);
543:	static int cpu_map_delete_elem(struct bpf_map *, void *);
595:	static void cpu_map_free(struct bpf_map *);
653:	static int cpu_map_get_next_key(struct bpf_map *, void *, void *);
792:	static int cpu_map_init(void);
298:	static int cpu_map_kthread_run(void *);
130:	static void cpu_map_kthread_stop(struct work_struct *);
645:	static void *cpu_map_lookup_elem(struct bpf_map *, void *);
670:	static int cpu_map_redirect(struct bpf_map *, u64, u64);
556:	static int cpu_map_update_elem(struct bpf_map *, void *, void *, u64);
159:	static void put_cpu_map_entry(struct bpf_cpu_map_entry *);

File kernel/bpf/devmap.c:
412:	void __dev_flush(void);
525:	int dev_map_enqueue(struct bpf_dtab_netdev *, struct xdp_frame *, struct net_device *);
585:	int dev_map_enqueue_multi(struct xdp_frame *, struct net_device *, struct bpf_map *, bool);
659:	int dev_map_generic_redirect(struct bpf_dtab_netdev *, struct sk_buff *, struct bpf_prog *);
701:	int dev_map_redirect_multi(struct net_device *, struct sk_buff *, struct bpf_prog *, struct bpf_map *, bool);
519:	int dev_xdp_enqueue(struct net_device *, struct xdp_frame *, struct net_device *);
839:	static struct bpf_dtab_netdev *__dev_map_alloc_node(struct net *, struct bpf_dtab *, struct bpf_devmap_val *, unsigned int);
791:	static void __dev_map_entry_free(struct callback_head *);
365:	static void bq_xmit_all(struct xdp_dev_bulk_queue *, u32);
1002:	static int dev_hash_map_redirect(struct bpf_map *, u64, u64);
158:	static struct bpf_map *dev_map_alloc(union bpf_attr *);
802:	static int dev_map_delete_elem(struct bpf_map *, void *);
183:	static void dev_map_free(struct bpf_map *);
246:	static int dev_map_get_next_key(struct bpf_map *, void *, void *);
817:	static int dev_map_hash_delete_elem(struct bpf_map *, void *);
281:	static int dev_map_hash_get_next_key(struct bpf_map *, void *, void *);
784:	static void *dev_map_hash_lookup_elem(struct bpf_map *, void *);
988:	static int dev_map_hash_update_elem(struct bpf_map *, void *, void *, u64);
1119:	static int dev_map_init(void);
777:	static void *dev_map_lookup_elem(struct bpf_map *, void *);
1062:	static int dev_map_notification(struct notifier_block *, ulong, void *);
995:	static int dev_map_redirect(struct bpf_map *, u64, u64);
928:	static int dev_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/disasm.c:
54:	const char *func_id_name(int);
131:	void print_bpf_insn(const struct bpf_insn_cbs *, const struct bpf_insn *, bool);
16:	static const char *__func_get_name(const struct bpf_insn_cbs *, const struct bpf_insn *, char *, size_t);
43:	static const char *__func_imm_name(const struct bpf_insn_cbs *, const struct bpf_insn *, u64, char *, size_t);

File kernel/bpf/hashtab.c:
2419:	int bpf_fd_htab_map_lookup_elem(struct bpf_map *, void *, u32 *);
2439:	int bpf_fd_htab_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
2273:	int bpf_percpu_hash_copy(struct bpf_map *, void *, void *);
2305:	int bpf_percpu_hash_update(struct bpf_map *, void *, void *, u64);
2024:	static int __bpf_hash_map_seq_show(struct seq_file *, struct htab_elem *);
1286:	static int __htab_lru_percpu_map_update_elem(struct bpf_map *, void *, void *, u64, bool);
1642:	static int __htab_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *, bool, bool, bool);
1547:	static int __htab_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, bool, bool, u64);
653:	static void *__htab_map_lookup_elem(struct bpf_map *, void *);
1231:	static int __htab_percpu_map_update_elem(struct bpf_map *, void *, void *, u64, bool);
371:	static int alloc_extra_elems(struct bpf_htab *);
965:	static struct htab_elem *alloc_htab_elem(struct bpf_htab *, void *, void *, u32, u32, bool, bool, struct htab_elem *);
2122:	static int bpf_for_each_hash_elem(struct bpf_map *, bpf_callback_t, void *, u64);
1946:	static struct htab_elem *bpf_hash_map_seq_find_next(struct bpf_iter_seq_hash_map_info *, struct htab_elem *);
2015:	static void *bpf_hash_map_seq_next(struct seq_file *, void *, loff_t *);
2063:	static int bpf_hash_map_seq_show(struct seq_file *, void *);
2001:	static void *bpf_hash_map_seq_start(struct seq_file *, loff_t *);
2068:	static void bpf_hash_map_seq_stop(struct seq_file *, void *);
2100:	static void bpf_iter_fini_hash_map(void *);
2076:	static int bpf_iter_init_hash_map(void *, struct bpf_iter_aux_info *);
2390:	static int fd_htab_map_alloc_check(union bpf_attr *);
903:	static void free_htab_elem(struct bpf_htab *, struct htab_elem *);
1403:	static int htab_lru_map_delete_elem(struct bpf_map *, void *);
770:	static bool htab_lru_map_delete_node(void *, struct bpf_lru_node *);
734:	static int htab_lru_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
1929:	static int htab_lru_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1626:	static int htab_lru_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1921:	static int htab_lru_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
724:	static void *htab_lru_map_lookup_elem(struct bpf_map *, void *);
729:	static void *htab_lru_map_lookup_elem_sys(struct bpf_map *, void *);
1164:	static int htab_lru_map_update_elem(struct bpf_map *, void *, void *, u64);
1912:	static int htab_lru_percpu_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1633:	static int htab_lru_percpu_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1903:	static int htab_lru_percpu_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
2245:	static void *htab_lru_percpu_map_lookup_elem(struct bpf_map *, void *);
2257:	static void *htab_lru_percpu_map_lookup_percpu_elem(struct bpf_map *, void *, u32);
1359:	static int htab_lru_percpu_map_update_elem(struct bpf_map *, void *, void *, u64);
456:	static struct bpf_map *htab_map_alloc(union bpf_attr *);
395:	static int htab_map_alloc_check(union bpf_attr *);
1367:	static int htab_map_delete_elem(struct bpf_map *, void *);
1493:	static void htab_map_free(struct bpf_map *);
1479:	static void htab_map_free_timers(struct bpf_map *);
695:	static int htab_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
801:	static int htab_map_get_next_key(struct bpf_map *, void *, void *);
597:	static u32 htab_map_hash(const void *, u32, u32);
1894:	static int htab_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1611:	static int htab_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1886:	static int htab_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
674:	static void *htab_map_lookup_elem(struct bpf_map *, void *);
1526:	static void htab_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1062:	static int htab_map_update_elem(struct bpf_map *, void *, void *, u64);
2457:	static struct bpf_map *htab_of_map_alloc(union bpf_attr *);
2504:	static void htab_of_map_free(struct bpf_map *);
2486:	static int htab_of_map_gen_lookup(struct bpf_map *, struct bpf_insn *);
2476:	static void *htab_of_map_lookup_elem(struct bpf_map *, void *);
1877:	static int htab_percpu_map_lookup_and_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1618:	static int htab_percpu_map_lookup_and_delete_elem(struct bpf_map *, void *, void *, u64);
1869:	static int htab_percpu_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
2221:	static void *htab_percpu_map_lookup_elem(struct bpf_map *, void *);
2231:	static void *htab_percpu_map_lookup_percpu_elem(struct bpf_map *, void *, u32);
2323:	static void htab_percpu_map_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
1353:	static int htab_percpu_map_update_elem(struct bpf_map *, void *, void *, u64);
170:	static void htab_unlock_bucket(const struct bpf_htab *, struct bucket *, u32, unsigned long);
630:	static struct htab_elem *lookup_nulls_elem_raw(struct hlist_nulls_head *, u32, void *, u32, u32);
934:	static void pcpu_init_value(struct bpf_htab *, void *, void *, bool);
361:	static void prealloc_destroy(struct bpf_htab *);

File kernel/bpf/helpers.c:
1585:	const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id);
787:	void bpf_bprintf_cleanup(void);
809:	int bpf_bprintf_prepare(char *, u32, const u64 *, u32 **, u32);
2024:	void *bpf_cast_to_kern_ctx(void *);
1933:	struct cgroup *bpf_cgroup_acquire(struct cgroup *);
1992:	struct cgroup *bpf_cgroup_ancestor(struct cgroup *, int);
1945:	struct cgroup *bpf_cgroup_kptr_get(struct cgroup **);
1977:	void bpf_cgroup_release(struct cgroup *);
648:	u64 bpf_copy_from_user(u64, u64, u64, u64, u64);
671:	u64 bpf_copy_from_user_task(u64, u64, u64, u64, u64);
1422:	int bpf_dynptr_check_size(u32);
1550:	u64 bpf_dynptr_data(u64, u64, u64, u64, u64);
1451:	u64 bpf_dynptr_from_mem(u64, u64, u64, u64, u64);
1417:	u32 bpf_dynptr_get_size(const struct bpf_dynptr_kern *);
1427:	void bpf_dynptr_init(struct bpf_dynptr_kern *, void *, enum bpf_dynptr_type, u32, u32);
1486:	u64 bpf_dynptr_read(u64, u64, u64, u64, u64);
1436:	void bpf_dynptr_set_null(struct bpf_dynptr_kern *);
1518:	u64 bpf_dynptr_write(u64, u64, u64, u64, u64);
628:	u64 bpf_event_output_data(u64, u64, u64, u64, u64);
414:	u64 bpf_get_current_ancestor_cgroup_id(u64, u64, u64, u64, u64);
395:	u64 bpf_get_current_cgroup_id(u64, u64, u64, u64, u64);
252:	u64 bpf_get_current_comm(u64, u64, u64, u64, u64);
216:	u64 bpf_get_current_pid_tgid(u64, u64, u64, u64, u64);
232:	u64 bpf_get_current_uid_gid(u64, u64, u64, u64, u64);
579:	u64 bpf_get_ns_current_pid_tgid(u64, u64, u64, u64, u64);
158:	u64 bpf_get_numa_node_id(u64, u64, u64, u64, u64);
147:	u64 bpf_get_smp_processor_id(u64, u64, u64, u64, u64);
383:	u64 bpf_jiffies64(u64, u64, u64, u64, u64);
1378:	u64 bpf_kptr_xchg(u64, u64, u64, u64, u64);
181:	u64 bpf_ktime_get_boot_ns(u64, u64, u64, u64, u64);
193:	u64 bpf_ktime_get_coarse_ns(u64, u64, u64, u64, u64);
169:	u64 bpf_ktime_get_ns(u64, u64, u64, u64, u64);
204:	u64 bpf_ktime_get_tai_ns(u64, u64, u64, u64, u64);
1723:	void bpf_list_head_free(const struct btf_field *, void *, struct bpf_spin_lock *);
1831:	struct bpf_list_node *bpf_list_pop_back(struct bpf_list_head *);
1826:	struct bpf_list_node *bpf_list_pop_front(struct bpf_list_head *);
1808:	void bpf_list_push_back(struct bpf_list_head *, struct bpf_list_node *);
1803:	void bpf_list_push_front(struct bpf_list_head *, struct bpf_list_node *);
69:	u64 bpf_map_delete_elem(u64, u64, u64, u64, u64);
36:	u64 bpf_map_lookup_elem(u64, u64, u64, u64, u64);
125:	u64 bpf_map_lookup_percpu_elem(u64, u64, u64, u64, u64);
112:	u64 bpf_map_peek_elem(u64, u64, u64, u64, u64);
99:	u64 bpf_map_pop_elem(u64, u64, u64, u64, u64);
84:	u64 bpf_map_push_elem(u64, u64, u64, u64, u64);
51:	u64 bpf_map_update_elem(u64, u64, u64, u64, u64);
1782:	void bpf_obj_drop_impl(void *, void *);
1768:	void *bpf_obj_new_impl(u64, void *);
705:	u64 bpf_per_cpu_ptr(u64, u64, u64, u64, u64);
2034:	void bpf_rcu_read_lock(void);
2039:	void bpf_rcu_read_unlock(void);
2029:	void *bpf_rdonly_cast(void *, u32);
1028:	u64 bpf_snprintf(u64, u64, u64, u64, u64);
330:	u64 bpf_spin_lock(u64, u64, u64, u64, u64);
353:	u64 bpf_spin_unlock(u64, u64, u64, u64, u64);
565:	u64 bpf_strncmp(u64, u64, u64, u64, u64);
512:	u64 bpf_strtol(u64, u64, u64, u64, u64);
537:	u64 bpf_strtoul(u64, u64, u64, u64, u64);
1842:	struct task_struct *bpf_task_acquire(struct task_struct *);
1853:	struct task_struct *bpf_task_acquire_not_zero(struct task_struct *);
2011:	struct task_struct *bpf_task_from_pid(s32);
1905:	struct task_struct *bpf_task_kptr_get(struct task_struct **);
1918:	void bpf_task_release(struct task_struct *);
721:	u64 bpf_this_cpu_ptr(u64, u64, u64, u64, u64);
1293:	u64 bpf_timer_cancel(u64, u64, u64, u64, u64);
1334:	void bpf_timer_cancel_and_free(void *);
1139:	u64 bpf_timer_init(u64, u64, u64, u64, u64);
1199:	u64 bpf_timer_set_callback(u64, u64, u64, u64, u64);
1252:	u64 bpf_timer_start(u64, u64, u64, u64, u64);
367:	void copy_map_value_locked(struct bpf_map *, void *, void *, bool);
439:	static int __bpf_strtoull(const char *, size_t, u64, unsigned long long *, bool *);
1100:	static enum hrtimer_restart bpf_timer_cb(struct hrtimer *);
2095:	static int kfunc_init(void);

File kernel/bpf/inode.c:
530:	int bpf_obj_get_user(const char *, int);
481:	int bpf_obj_pin_user(u32, const char *);
586:	struct bpf_prog *bpf_prog_get_type_path(const char *, enum bpf_prog_type);
743:	static int bpf_fill_super(struct super_block *, struct fs_context *);
769:	static void bpf_free_fc(struct fs_context *);
613:	static void bpf_free_inode(struct inode *);
764:	static int bpf_get_tree(struct fs_context *);
806:	static int bpf_init(void);
783:	static int bpf_init_fs_context(struct fs_context *);
373:	static struct dentry *bpf_lookup(struct inode *, struct dentry *, unsigned int);
155:	static int bpf_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
363:	static int bpf_mklink(struct dentry *, umode_t, void *);
354:	static int bpf_mkmap(struct dentry *, umode_t, void *);
331:	static int bpf_mkobj_ops(struct dentry *, umode_t, void *, const struct inode_operations *, const struct file_operations *);
348:	static int bpf_mkprog(struct dentry *, umode_t, void *);
644:	static int bpf_parse_param(struct fs_context *, struct fs_parameter *);
604:	static int bpf_show_options(struct seq_file *, struct dentry *);
385:	static int bpf_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
274:	static int bpffs_map_open(struct inode *, struct file *);
297:	static int bpffs_map_release(struct inode *, struct file *);
322:	static int bpffs_obj_open(struct inode *, struct file *);
216:	static void *map_seq_next(struct seq_file *, void *, loff_t *);
252:	static int map_seq_show(struct seq_file *, void *);
240:	static void *map_seq_start(struct seq_file *, loff_t *);
248:	static void map_seq_stop(struct seq_file *, void *);

File kernel/bpf/link_iter.c:
42:	int bpf_iter_bpf_link(struct bpf_iter_meta *, struct bpf_link *);
101:	static int bpf_link_iter_init(void);
27:	static void *bpf_link_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_link_seq_show(struct seq_file *, void *);
13:	static void *bpf_link_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_link_seq_stop(struct seq_file *, void *);

File kernel/bpf/local_storage.c:
492:	struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *, enum bpf_cgroup_storage_type);
463:	int bpf_cgroup_storage_assign(struct bpf_prog_aux *, struct bpf_map *);
551:	void bpf_cgroup_storage_free(struct bpf_cgroup_storage *);
567:	void bpf_cgroup_storage_link(struct bpf_cgroup_storage *, struct cgroup *, enum bpf_attach_type);
588:	void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *);
182:	int bpf_percpu_cgroup_storage_copy(struct bpf_map *, void *, void *);
211:	int bpf_percpu_cgroup_storage_update(struct bpf_map *, void *, void *, u64);
67:	struct bpf_cgroup_storage *cgroup_storage_lookup(struct bpf_cgroup_storage_map *, void *, bool);
356:	static int cgroup_storage_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
351:	static int cgroup_storage_delete_elem(struct bpf_map *, void *);
245:	static int cgroup_storage_get_next_key(struct bpf_map *, void *, void *);
132:	static void *cgroup_storage_lookup_elem(struct bpf_map *, void *);
285:	static struct bpf_map *cgroup_storage_map_alloc(union bpf_attr *);
330:	static void cgroup_storage_map_free(struct bpf_map *);
414:	static void cgroup_storage_seq_show_elem(struct bpf_map *, void *, struct seq_file *);
144:	static int cgroup_storage_update_elem(struct bpf_map *, void *, void *, u64);
542:	static void free_percpu_cgroup_storage_rcu(struct callback_head *);
533:	static void free_shared_cgroup_storage_rcu(struct callback_head *);

File kernel/bpf/lpm_trie.c:
165:	static size_t longest_prefix_match(const struct lpm_trie *, const struct lpm_trie_node *, const struct bpf_lpm_trie_key *);
543:	static struct bpf_map *trie_alloc(union bpf_attr *);
713:	static int trie_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
434:	static int trie_delete_elem(struct bpf_map *, void *);
576:	static void trie_free(struct bpf_map *);
615:	static int trie_get_next_key(struct bpf_map *, void *, void *);
228:	static void *trie_lookup_elem(struct bpf_map *, void *);
303:	static int trie_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/map_in_map.c:
119:	void *bpf_map_fd_get_ptr(struct bpf_map *, struct file *, int);
141:	void bpf_map_fd_put_ptr(void *);
149:	u32 bpf_map_fd_sys_lookup_elem(void *);
10:	struct bpf_map *bpf_map_meta_alloc(int);
108:	bool bpf_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
100:	void bpf_map_meta_free(struct bpf_map *);

File kernel/bpf/map_iter.c:
42:	int bpf_iter_bpf_map(struct bpf_iter_meta *, struct bpf_map *);
165:	int bpf_iter_bpf_map_elem(struct bpf_iter_meta *, struct bpf_map *, void *, void *);
158:	int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
152:	void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
101:	static int bpf_iter_attach_map(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
147:	static void bpf_iter_detach_map(struct bpf_iter_aux_info *);
183:	static int bpf_map_iter_init(void);
27:	static void *bpf_map_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_map_seq_show(struct seq_file *, void *);
13:	static void *bpf_map_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_map_seq_stop(struct seq_file *, void *);

File kernel/bpf/memalloc.c:
633:	void *bpf_mem_alloc(struct bpf_mem_alloc *, size_t);
517:	void bpf_mem_alloc_destroy(struct bpf_mem_alloc *);
377:	int bpf_mem_alloc_init(struct bpf_mem_alloc *, int, bool);
663:	void *bpf_mem_cache_alloc(struct bpf_mem_alloc *);
671:	void bpf_mem_cache_free(struct bpf_mem_alloc *, void *);
649:	void bpf_mem_free(struct bpf_mem_alloc *, void *);
238:	static void __free_rcu_tasks_trace(struct callback_head *);
164:	static void alloc_bulk(struct bpf_mem_cache *, int, int);
310:	static void bpf_mem_refill(struct irq_work *);
489:	static void destroy_mem_alloc(struct bpf_mem_alloc *, int);
434:	static void drain_mem_cache(struct bpf_mem_cache *);
481:	static void free_mem_alloc_deferred(struct work_struct *);
565:	static void *unit_alloc(struct bpf_mem_cache *);
601:	static void unit_free(struct bpf_mem_cache *, void *);

File kernel/bpf/net_namespace.c:
477:	int netns_bpf_link_create(const union bpf_attr *, struct bpf_prog *);
297:	int netns_bpf_prog_attach(const union bpf_attr *, struct bpf_prog *);
383:	int netns_bpf_prog_detach(const union bpf_attr *, enum bpf_prog_type);
271:	int netns_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
156:	static void bpf_netns_link_dealloc(struct bpf_link *);
150:	static int bpf_netns_link_detach(struct bpf_link *);
204:	static int bpf_netns_link_fill_info(const struct bpf_link *, struct bpf_link_info *);
102:	static void bpf_netns_link_release(struct bpf_link *);
223:	static void bpf_netns_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
164:	static int bpf_netns_link_update_prog(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
562:	static int netns_bpf_init(void);
529:	static int netns_bpf_pernet_init(struct net *);
539:	static void netns_bpf_pernet_pre_exit(struct net *);

File kernel/bpf/offload.c:
462:	int bpf_map_offload_delete_elem(struct bpf_map *, void *);
475:	int bpf_map_offload_get_next_key(struct bpf_map *, void *, void *);
518:	int bpf_map_offload_info_fill(struct bpf_map_info *, struct bpf_map *);
431:	int bpf_map_offload_lookup_elem(struct bpf_map *, void *, void *);
359:	struct bpf_map *bpf_map_offload_map_alloc(union bpf_attr *);
417:	void bpf_map_offload_map_free(struct bpf_map *);
444:	int bpf_map_offload_update_elem(struct bpf_map *, void *, void *, u64);
670:	struct bpf_offload_dev *bpf_offload_dev_create(const struct bpf_prog_offload_ops *, void *);
698:	void bpf_offload_dev_destroy(struct bpf_offload_dev *);
564:	bool bpf_offload_dev_match(struct bpf_prog *, struct net_device *);
592:	int bpf_offload_dev_netdev_register(struct bpf_offload_dev *, struct net_device *);
625:	void bpf_offload_dev_netdev_unregister(struct bpf_offload_dev *, struct net_device *);
705:	void *bpf_offload_dev_priv(struct bpf_offload_dev *);
576:	bool bpf_offload_prog_map_match(struct bpf_prog *, struct bpf_map *);
253:	int bpf_prog_offload_compile(struct bpf_prog *);
224:	void bpf_prog_offload_destroy(struct bpf_prog *);
159:	int bpf_prog_offload_finalize(struct bpf_verifier_env *);
291:	int bpf_prog_offload_info_fill(struct bpf_prog_info *, struct bpf_prog *);
80:	int bpf_prog_offload_init(struct bpf_prog *, union bpf_attr *);
197:	void bpf_prog_offload_remove_insns(struct bpf_verifier_env *, u32, u32);
178:	void bpf_prog_offload_replace_insn(struct bpf_verifier_env *, u32, struct bpf_insn *);
127:	int bpf_prog_offload_verifier_prep(struct bpf_prog *);
143:	int bpf_prog_offload_verify_insn(struct bpf_verifier_env *, int, int);
493:	static struct ns_common *bpf_map_offload_info_fill_ns(void *);
265:	static struct ns_common *bpf_prog_offload_info_fill_ns(void *);
246:	static unsigned int bpf_prog_warn_on_exec(const void *, const struct bpf_insn *);

File kernel/bpf/percpu_freelist.c:
184:	struct pcpu_freelist_node *__pcpu_freelist_pop(struct pcpu_freelist *);
80:	void __pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);
25:	void pcpu_freelist_destroy(struct pcpu_freelist *);
6:	int pcpu_freelist_init(struct pcpu_freelist *);
191:	struct pcpu_freelist_node *pcpu_freelist_pop(struct pcpu_freelist *);
99:	void pcpu_freelist_populate(struct pcpu_freelist *, void *, u32, u32);
89:	void pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);

File kernel/bpf/prog_iter.c:
42:	int bpf_iter_bpf_prog(struct bpf_iter_meta *, struct bpf_prog *);
101:	static int bpf_prog_iter_init(void);
27:	static void *bpf_prog_seq_next(struct seq_file *, void *, loff_t *);
61:	static int bpf_prog_seq_show(struct seq_file *, void *);
13:	static void *bpf_prog_seq_start(struct seq_file *, loff_t *);
66:	static void bpf_prog_seq_stop(struct seq_file *, void *);

File kernel/bpf/queue_stack_maps.c:
159:	static int queue_map_peek_elem(struct bpf_map *, void *);
171:	static int queue_map_pop_elem(struct bpf_map *, void *);
68:	static struct bpf_map *queue_stack_map_alloc(union bpf_attr *);
47:	static int queue_stack_map_alloc_check(union bpf_attr *);
237:	static int queue_stack_map_delete_elem(struct bpf_map *, void *);
91:	static void queue_stack_map_free(struct bpf_map *);
243:	static int queue_stack_map_get_next_key(struct bpf_map *, void *, void *);
224:	static void *queue_stack_map_lookup_elem(struct bpf_map *, void *);
183:	static int queue_stack_map_push_elem(struct bpf_map *, void *, u64);
230:	static int queue_stack_map_update_elem(struct bpf_map *, void *, void *, u64);
165:	static int stack_map_peek_elem(struct bpf_map *, void *);
177:	static int stack_map_pop_elem(struct bpf_map *, void *);

File kernel/bpf/reuseport_array.c:
168:	int bpf_fd_reuseport_array_lookup_elem(struct bpf_map *, void *, void *);
235:	int bpf_fd_reuseport_array_update_elem(struct bpf_map *, void *, void *, u64);
22:	void bpf_sk_reuseport_detach(struct sock *);
149:	static struct bpf_map *reuseport_array_alloc(union bpf_attr *);
41:	static int reuseport_array_alloc_check(union bpf_attr *);
62:	static int reuseport_array_delete_elem(struct bpf_map *, void *);
94:	static void reuseport_array_free(struct bpf_map *);
319:	static int reuseport_array_get_next_key(struct bpf_map *, void *, void *);
50:	static void *reuseport_array_lookup_elem(struct bpf_map *, void *);

File kernel/bpf/ringbuf.c:
497:	u64 bpf_ringbuf_discard(u64, u64, u64, u64, u64);
624:	u64 bpf_ringbuf_discard_dynptr(u64, u64, u64, u64, u64);
510:	u64 bpf_ringbuf_output(u64, u64, u64, u64, u64);
538:	u64 bpf_ringbuf_query(u64, u64, u64, u64, u64);
437:	u64 bpf_ringbuf_reserve(u64, u64, u64, u64, u64);
565:	u64 bpf_ringbuf_reserve_dynptr(u64, u64, u64, u64, u64);
484:	u64 bpf_ringbuf_submit(u64, u64, u64, u64, u64);
605:	u64 bpf_ringbuf_submit_dynptr(u64, u64, u64, u64, u64);
712:	u64 bpf_user_ringbuf_drain(u64, u64, u64, u64, u64);
391:	static void *__bpf_ringbuf_reserve(struct bpf_ringbuf *, u64);
163:	static struct bpf_ringbuf *bpf_ringbuf_alloc(size_t, int);
156:	static void bpf_ringbuf_notify(struct irq_work *);
183:	static struct bpf_map *ringbuf_map_alloc(union bpf_attr *);
250:	static int ringbuf_map_delete_elem(struct bpf_map *, void *);
230:	static void ringbuf_map_free(struct bpf_map *);
255:	static int ringbuf_map_get_next_key(struct bpf_map *, void *, void *);
239:	static void *ringbuf_map_lookup_elem(struct bpf_map *, void *);
261:	static int ringbuf_map_mmap_kern(struct bpf_map *, struct vm_area_struct *);
279:	static int ringbuf_map_mmap_user(struct bpf_map *, struct vm_area_struct *);
313:	static __poll_t ringbuf_map_poll_kern(struct bpf_map *, struct file *, struct poll_table_struct *);
326:	static __poll_t ringbuf_map_poll_user(struct bpf_map *, struct file *, struct poll_table_struct *);
244:	static int ringbuf_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/stackmap.c:
455:	u64 bpf_get_stack(u64, u64, u64, u64, u64);
499:	u64 bpf_get_stack_pe(u64, u64, u64, u64, u64);
283:	u64 bpf_get_stackid(u64, u64, u64, u64, u64);
331:	u64 bpf_get_stackid_pe(u64, u64, u64, u64, u64);
471:	u64 bpf_get_task_stack(u64, u64, u64, u64, u64);
569:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
388:	static long __bpf_get_stack(struct pt_regs *, struct task_struct *, struct perf_callchain_entry *, void *, u32, u64);
213:	static long __bpf_get_stackid(struct bpf_map *, struct perf_callchain_entry *, u64);
45:	static int prealloc_elems_and_freelist(struct bpf_stack_map *);
70:	static struct bpf_map *stack_map_alloc(union bpf_attr *);
628:	static int stack_map_delete_elem(struct bpf_map *, void *);
647:	static void stack_map_free(struct bpf_map *);
127:	static void stack_map_get_build_id_offset(struct bpf_stack_build_id *, u64 *, u32, bool);
592:	static int stack_map_get_next_key(struct bpf_map *, void *, void *);
563:	static void *stack_map_lookup_elem(struct bpf_map *, void *);
621:	static int stack_map_update_elem(struct bpf_map *, void *, void *, u64);

File kernel/bpf/syscall.c:
5071:	long __arm64_sys_bpf(const struct pt_regs *);
1217:	struct bpf_map *__bpf_map_get(struct fd);
80:	int bpf_check_uarg_tail_zero(bpfptr_t, size_t, size_t);
934:	int bpf_get_file_flag(int);
5189:	u64 bpf_kallsyms_lookup_name(u64, u64, u64, u64, u64);
4710:	struct bpf_link *bpf_link_by_id(u32);
2708:	void bpf_link_cleanup(struct bpf_link_primer *);
4732:	struct bpf_link *bpf_link_get_curr_or_next(u32 *);
2881:	struct bpf_link *bpf_link_get_from_fd(u32);
2716:	void bpf_link_inc(struct bpf_link *);
2681:	void bpf_link_init(struct bpf_link *, enum bpf_link_type, const struct bpf_link_ops *, struct bpf_prog *);
2876:	int bpf_link_new_fd(struct bpf_link *);
2834:	int bpf_link_prime(struct bpf_link *, struct bpf_link_primer *);
2744:	void bpf_link_put(struct bpf_link *);
2864:	int bpf_link_settle(struct bpf_link_primer *);
473:	void *bpf_map_alloc_percpu(const struct bpf_map *, size_t, size_t, gfp_t);
337:	void *bpf_map_area_alloc(u64, int);
347:	void bpf_map_area_free(void *);
342:	void *bpf_map_area_mmapable_alloc(u64, int);
393:	void bpf_map_free_id(struct bpf_map *, bool);
551:	void bpf_map_free_record(struct bpf_map *);
1242:	struct bpf_map *bpf_map_get(u32);
3668:	struct bpf_map *bpf_map_get_curr_or_next(u32 *);
1258:	struct bpf_map *bpf_map_get_with_uref(u32);
1229:	void bpf_map_inc(struct bpf_map *);
1287:	struct bpf_map *bpf_map_inc_not_zero(struct bpf_map *);
1235:	void bpf_map_inc_with_uref(struct bpf_map *);
364:	void bpf_map_init_from_attr(struct bpf_map *, union bpf_attr *);
444:	void *bpf_map_kmalloc_node(const struct bpf_map *, size_t, gfp_t, int);
459:	void *bpf_map_kzalloc(const struct bpf_map *, size_t, gfp_t);
922:	int bpf_map_new_fd(struct bpf_map *, int);
725:	void bpf_map_put(struct bpf_map *);
731:	void bpf_map_put_with_uref(struct bpf_map *);
149:	bool bpf_map_write_active(const struct bpf_map *);
638:	void bpf_obj_free_fields(const struct btf_record *, void *);
631:	void bpf_obj_free_timer(const struct btf_record *, void *);
956:	int bpf_obj_name_cpy(char *, const char *, unsigned int);
2202:	void bpf_prog_add(struct bpf_prog *, int);
3708:	struct bpf_prog *bpf_prog_by_id(u32);
2004:	void bpf_prog_free_id(struct bpf_prog *);
2274:	struct bpf_prog *bpf_prog_get(u32);
3687:	struct bpf_prog *bpf_prog_get_curr_or_next(u32 *);
2239:	bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);
2279:	struct bpf_prog *bpf_prog_get_type_dev(u32, enum bpf_prog_type, bool);
2219:	void bpf_prog_inc(struct bpf_prog *);
2100:	void bpf_prog_inc_misses_counter(struct bpf_prog *);
2226:	struct bpf_prog *bpf_prog_inc_not_zero(struct bpf_prog *);
2178:	int bpf_prog_new_fd(struct bpf_prog *);
2080:	void bpf_prog_put(struct bpf_prog *);
2208:	void bpf_prog_sub(struct bpf_prog *, int);
1297:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
5088:	u64 bpf_sys_bpf(u64, u64, u64, u64, u64);
5172:	u64 bpf_sys_close(u64, u64, u64, u64, u64);
557:	struct btf_record *btf_record_dup(const struct btf_record *);
602:	bool btf_record_equal(const struct btf_record *, const struct btf_record *);
509:	struct btf_field *btf_record_find(const struct btf_record *, u32, enum btf_field_type);
522:	void btf_record_free(struct btf_record *);
1577:	int generic_map_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1690:	int generic_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1631:	int generic_map_update_batch(struct bpf_map *, struct file *, const union bpf_attr *, union bpf_attr *);
5115:	int kern_sys_bpf(int, union bpf_attr *, unsigned int);
977:	int map_check_no_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
5167:	const struct bpf_func_proto *tracing_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
5272:	void unpriv_ebpf_notify(int);
2033:	static void __bpf_prog_put_noref(struct bpf_prog *, bool);
2022:	static void __bpf_prog_put_rcu(struct callback_head *);
4915:	static int __sys_bpf(int, bpfptr_t, unsigned int);
3398:	static enum bpf_prog_type attach_type_to_prog_type(enum bpf_attach_type);
1966:	static void bpf_audit_prog(const struct bpf_prog *, unsigned int);
4333:	static int bpf_btf_get_fd_by_id(const union bpf_attr *);
4320:	static int bpf_btf_load(const union bpf_attr *, bpfptr_t);
812:	static ssize_t bpf_dummy_read(struct file *, char *, size_t, loff_t *);
821:	static ssize_t bpf_dummy_write(struct file *, const char *, size_t, loff_t *);
4812:	static int bpf_enable_stats(union bpf_attr *);
3814:	static struct bpf_insn *bpf_insn_prepare_dump(const struct bpf_prog *, const struct cred *);
4832:	static int bpf_iter_create(union bpf_attr *);
2722:	static void bpf_link_free(struct bpf_link *);
4753:	static int bpf_link_get_fd_by_id(const union bpf_attr *);
2734:	static void bpf_link_put_deferred(struct work_struct *);
2758:	static int bpf_link_release(struct inode *, struct file *);
2778:	static void bpf_link_show_fdinfo(struct seq_file *, struct file *);
375:	static int bpf_map_alloc_id(struct bpf_map *);
235:	static int bpf_map_copy_value(struct bpf_map *, void *, void *, __u64);
4476:	static int bpf_map_do_batch(const union bpf_attr *, union bpf_attr *, int);
677:	static void bpf_map_free_deferred(struct work_struct *);
3750:	static int bpf_map_get_fd_by_id(const union bpf_attr *);
436:	static struct mem_cgroup *bpf_map_get_memcg(const struct bpf_map *);
853:	static int bpf_map_mmap(struct file *, struct vm_area_struct *);
840:	static void bpf_map_mmap_close(struct vm_area_struct *);
831:	static void bpf_map_mmap_open(struct vm_area_struct *);
901:	static __poll_t bpf_map_poll(struct file *, struct poll_table_struct *);
737:	static int bpf_map_release(struct inode *, struct file *);
774:	static void bpf_map_show_fdinfo(struct seq_file *, struct file *);
178:	static int bpf_map_update_value(struct bpf_map *, struct file *, void *, void *, __u64);
154:	static u32 bpf_map_value_size(const struct bpf_map *);
2671:	static int bpf_obj_get(const union bpf_attr *);
4286:	static int bpf_obj_get_info_by_fd(const union bpf_attr *, union bpf_attr *);
3642:	static int bpf_obj_get_next_id(const union bpf_attr *, union bpf_attr *, struct idr *, spinlock_t *);
2663:	static int bpf_obj_pin(const union bpf_attr *);
3235:	static int bpf_perf_link_attach(const union bpf_attr *, struct bpf_prog *);
3223:	static void bpf_perf_link_dealloc(struct bpf_link *);
3214:	static void bpf_perf_link_release(struct bpf_link *);
1985:	static int bpf_prog_alloc_id(struct bpf_prog *);
3465:	static int bpf_prog_attach(const union bpf_attr *);
4855:	static int bpf_prog_bind_map(union bpf_attr *);
3526:	static int bpf_prog_detach(const union bpf_attr *);
3725:	static int bpf_prog_get_fd_by_id(const union bpf_attr *);
2467:	static int bpf_prog_load(union bpf_attr *, bpfptr_t);
2318:	static int bpf_prog_load_check_attach(enum bpf_prog_type, enum bpf_attach_type, struct btf *, u32, struct bpf_prog *);
2053:	static void bpf_prog_put_deferred(struct work_struct *);
3559:	static int bpf_prog_query(const union bpf_attr *, union bpf_attr *);
2086:	static int bpf_prog_release(struct inode *, struct file *);
2139:	static void bpf_prog_show_fdinfo(struct seq_file *, struct file *);
3612:	static int bpf_prog_test_run(const union bpf_attr *, union bpf_attr *);
3286:	static int bpf_raw_tp_link_attach(struct bpf_prog *, const char *);
3148:	static void bpf_raw_tp_link_dealloc(struct bpf_link *);
3167:	static int bpf_raw_tp_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
3139:	static void bpf_raw_tp_link_release(struct bpf_link *);
3156:	static void bpf_raw_tp_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
3356:	static int bpf_raw_tracepoint_open(const union bpf_attr *);
5241:	static int bpf_stats_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4778:	static int bpf_stats_release(struct inode *, struct file *);
5319:	static int bpf_syscall_sysctl_init(void);
4393:	static int bpf_task_fd_query(const union bpf_attr *, union bpf_attr *);
4344:	static int bpf_task_fd_query_copy(const union bpf_attr *, union bpf_attr *, u32, u32, const char *, u64, u64);
2916:	static void bpf_tracing_link_dealloc(struct bpf_link *);
2935:	static int bpf_tracing_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
2901:	static void bpf_tracing_link_release(struct bpf_link *);
2924:	static void bpf_tracing_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
2956:	static int bpf_tracing_prog_attach(struct bpf_prog *, int, u32, u64);
5276:	static int bpf_unpriv_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
498:	static int btf_field_cmp(const void *, const void *);
1936:	static int find_prog_type(enum bpf_prog_type, struct bpf_prog *);
4522:	static int link_create(union bpf_attr *, bpfptr_t);
4684:	static int link_detach(union bpf_attr *);
4631:	static int link_update(union bpf_attr *);
985:	static int map_check_btf(struct bpf_map *, const struct btf *, u32, u32);
1089:	static int map_create(union bpf_attr *);
1458:	static int map_delete_elem(union bpf_attr *, bpfptr_t);
1885:	static int map_freeze(const union bpf_attr *);
1513:	static int map_get_next_key(union bpf_attr *);
1792:	static int map_lookup_and_delete_elem(union bpf_attr *);
1327:	static int map_lookup_elem(union bpf_attr *);
1402:	static int map_update_elem(union bpf_attr *, bpfptr_t);
5215:	static const struct bpf_func_proto *syscall_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
5076:	static bool syscall_prog_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);

File kernel/bpf/task_iter.c:
780:	u64 bpf_find_vma(u64, u64, u64, u64, u64);
194:	int bpf_iter_task(struct bpf_iter_meta *, struct task_struct *);
368:	int bpf_iter_task_file(struct bpf_iter_meta *, struct task_struct *, u32, struct file *);
632:	int bpf_iter_task_vma(struct bpf_iter_meta *, struct task_struct *, struct vm_area_struct *);
226:	static int bpf_iter_attach_task(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
696:	static int bpf_iter_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
711:	static void bpf_iter_task_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
828:	static void do_mmap_read_unlock(struct irq_work *);
421:	static void fini_seq_pidns(void *);
410:	static int init_seq_pidns(void *, struct bpf_iter_aux_info *);
279:	static struct file *task_file_seq_get_next(struct bpf_iter_seq_task_file_info *);
351:	static void *task_file_seq_next(struct seq_file *, void *, loff_t *);
392:	static int task_file_seq_show(struct seq_file *, void *);
338:	static void *task_file_seq_start(struct seq_file *, loff_t *);
397:	static void task_file_seq_stop(struct seq_file *, void *);
839:	static int task_iter_init(void);
109:	static struct task_struct *task_seq_get_next(struct bpf_iter_seq_task_common *, u32 *, bool);
174:	static void *task_seq_next(struct seq_file *, void *, loff_t *);
213:	static int task_seq_show(struct seq_file *, void *);
160:	static void *task_seq_start(struct seq_file *, loff_t *);
218:	static void task_seq_stop(struct seq_file *, void *);
455:	static struct vm_area_struct *task_vma_seq_get_next(struct bpf_iter_seq_task_vma_info *);
618:	static void *task_vma_seq_next(struct seq_file *, void *, loff_t *);
653:	static int task_vma_seq_show(struct seq_file *, void *);
606:	static void *task_vma_seq_start(struct seq_file *, loff_t *);
658:	static void task_vma_seq_stop(struct seq_file *, void *);

File kernel/bpf/tnum.c:
62:	struct tnum tnum_add(struct tnum, struct tnum);
86:	struct tnum tnum_and(struct tnum, struct tnum);
47:	struct tnum tnum_arshift(struct tnum, u8, u8);
153:	struct tnum tnum_cast(struct tnum, u8);
206:	struct tnum tnum_clear_subreg(struct tnum);
16:	struct tnum tnum_const(u64);
211:	struct tnum tnum_const_subreg(struct tnum, u32);
167:	bool tnum_in(struct tnum, struct tnum);
144:	struct tnum tnum_intersect(struct tnum, struct tnum);
160:	bool tnum_is_aligned(struct tnum, u64);
37:	struct tnum tnum_lshift(struct tnum, u8);
122:	struct tnum tnum_mul(struct tnum, struct tnum);
96:	struct tnum tnum_or(struct tnum, struct tnum);
21:	struct tnum tnum_range(u64, u64);
42:	struct tnum tnum_rshift(struct tnum, u8);
181:	int tnum_sbin(char *, size_t, struct tnum);
175:	int tnum_strn(char *, size_t, struct tnum);
74:	struct tnum tnum_sub(struct tnum, struct tnum);
201:	struct tnum tnum_subreg(struct tnum);
105:	struct tnum tnum_xor(struct tnum, struct tnum);

File kernel/bpf/verifier.c:
16846:	int bpf_check(struct bpf_prog **, union bpf_attr *, bpfptr_t);
16495:	int bpf_check_attach_target(struct bpf_verifier_log *, const struct bpf_prog *, const struct bpf_prog *, u32, struct bpf_attach_target_info *);
2058:	void bpf_free_kfunc_btf_tab(struct bpf_kfunc_btf_tab *);
16835:	struct btf *bpf_get_btf_vmlinux(void);
2231:	const struct btf_func_model *bpf_jit_find_kfunc_model(const struct bpf_prog *, const struct bpf_insn *);
362:	void bpf_log(struct bpf_verifier_log *, const char *, ...);
2225:	bool bpf_prog_has_kfunc_call(const struct bpf_prog *);
335:	void bpf_verifier_log_write(struct bpf_verifier_env *, const char *, ...);
294:	void bpf_verifier_vlog(struct bpf_verifier_log *, const char *, va_list);
6297:	int check_func_arg_reg_off(struct bpf_verifier_env *, const struct bpf_reg_state *, int, enum bpf_arg_type);
5668:	int check_mem_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, u32);
3938:	int check_ptr_off_reg(struct bpf_verifier_env *, const struct bpf_reg_state *, int);
7254:	int map_set_for_each_callback_args(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *);
3171:	int mark_chain_precision(struct bpf_verifier_env *, int);
5944:	int process_dynptr_func(struct bpf_verifier_env *, int, enum bpf_arg_type, struct bpf_call_arg_meta *);
8351:	static bool __btf_type_is_scalar_struct(struct bpf_verifier_env *, const struct btf *, const struct btf_type *, int);
7122:	static int __check_func_call(struct bpf_verifier_env *, struct bpf_insn *, int *, int, set_callee_state_fn);
3815:	static int __check_mem_access(struct bpf_verifier_env *, int, int, int, u32, bool);
3906:	static int __check_ptr_off_reg(struct bpf_verifier_env *, const struct bpf_reg_state *, int, bool);
2983:	static int __mark_chain_precision(struct bpf_verifier_env *, int, int, int);
1405:	static void __mark_reg_known(struct bpf_reg_state *, u64);
1162:	static int acquire_reference_state(struct bpf_verifier_env *, int);
1920:	static int add_subprog(struct bpf_verifier_env *, int);
9738:	static int adjust_ptr_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *, const struct bpf_reg_state *, const struct bpf_reg_state *);
10696:	static int adjust_reg_min_max_vals(struct bpf_verifier_env *, struct bpf_insn *);
4743:	static int bpf_map_direct_read(struct bpf_map *, int, int, u64 *);
14644:	static struct bpf_prog *bpf_patch_insn_data(struct bpf_verifier_env *, u32, const struct bpf_insn *, u32);
16754:	static int check_attach_btf_id(struct bpf_verifier_env *);
7630:	static int check_bpf_snprintf_call(struct bpf_verifier_env *, struct bpf_reg_state *);
4666:	static int check_buffer_access(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, int, bool, u32 *);
12480:	static int check_cfg(struct bpf_verifier_env *);
11673:	static int check_cond_jmp_op(struct bpf_verifier_env *, struct bpf_insn *, int *);
4219:	static int check_ctx_access(struct bpf_verifier_env *, int, int, int, enum bpf_access_type, enum bpf_reg_type *, struct btf **, u32 *);
7295:	static int check_func_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
7667:	static int check_get_func_ip(struct bpf_verifier_env *);
7723:	static int check_helper_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
5523:	static int check_helper_mem_access(struct bpf_verifier_env *, int, int, bool, struct bpf_call_arg_meta *);
9082:	static int check_kfunc_call(struct bpf_verifier_env *, struct bpf_insn *, int *);
12023:	static int check_ld_abs(struct bpf_verifier_env *, struct bpf_insn *);
11904:	static int check_ld_imm(struct bpf_verifier_env *, struct bpf_insn *);
4072:	static int check_map_access(struct bpf_verifier_env *, u32, int, int, bool, enum bpf_access_src);
6705:	static int check_map_func_compatibility(struct bpf_verifier_env *, struct bpf_map *, int);
4016:	static int check_map_kptr_access(struct bpf_verifier_env *, u32, int, int, struct btf_field *);
14279:	static int check_map_prog_compatibility(struct bpf_verifier_env *, struct bpf_map *, struct bpf_prog *);
5043:	static int check_mem_access(struct bpf_verifier_env *, int, u32, int, int, enum bpf_access_type, int, bool);
3851:	static int check_mem_region_access(struct bpf_verifier_env *, u32, int, int, u32, bool);
5613:	static int check_mem_size_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, bool, struct bpf_call_arg_meta *);
16490:	static int check_non_sleepable_error_inject(u32);
4176:	static int check_packet_access(struct bpf_verifier_env *, u32, int, int, bool);
14135:	static int check_pseudo_btf_id(struct bpf_verifier_env *, struct bpf_insn *, struct bpf_insn_aux_data *);
4429:	static int check_ptr_alignment(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, bool);
4773:	static int check_ptr_to_btf_access(struct bpf_verifier_env *, struct bpf_reg_state *, int, int, int, enum bpf_access_type, int);
4891:	static int check_ptr_to_map_access(struct bpf_verifier_env *, struct bpf_reg_state *, int, int, int, enum bpf_access_type, int);
7611:	static int check_reference_leak(struct bpf_verifier_env *);
2524:	static int check_reg_arg(struct bpf_verifier_env *, u32, enum reg_arg_type);
9380:	static bool check_reg_sane_offset(struct bpf_verifier_env *, const struct bpf_reg_state *, enum bpf_reg_type);
12105:	static int check_return_code(struct bpf_verifier_env *);
4267:	static int check_sock_access(struct bpf_verifier_env *, int, u32, int, int, enum bpf_access_type);
4978:	static int check_stack_access_within_bounds(struct bpf_verifier_env *, int, int, int, enum bpf_access_src, enum bpf_access_type);
5395:	static int check_stack_range_initialized(struct bpf_verifier_env *, int, int, int, bool, enum bpf_access_src, struct bpf_call_arg_meta *);
3708:	static int check_stack_read(struct bpf_verifier_env *, int, int, int, int);
3769:	static int check_stack_write(struct bpf_verifier_env *, int, int, int, int, int);
4650:	static int check_tp_buffer_access(struct bpf_verifier_env *, const struct bpf_reg_state *, int, int, int);
7038:	static void clear_all_pkt_pointers(struct bpf_verifier_env *);
7101:	static void clear_caller_saved_regs(struct bpf_verifier_env *, struct bpf_reg_state *);
1902:	static int cmp_subprogs(const void *, const void *);
4695:	static void coerce_reg_to_size(struct bpf_reg_state *, int);
1107:	static int copy_reference_state(struct bpf_func_state *, const struct bpf_func_state *);
1246:	static int copy_verifier_state(struct bpf_verifier_state *, const struct bpf_verifier_state *);
2621:	static const char *disasm_kfunc_name(void *, const struct bpf_insn *);
16252:	static int do_check_common(struct bpf_verifier_env *, int);
16350:	static int do_check_subprogs(struct bpf_verifier_env *);
7507:	static void do_refine_retval_range(struct bpf_reg_state *, int, int, struct bpf_call_arg_meta *);
11661:	static void find_equal_scalars(struct bpf_verifier_state *, struct bpf_reg_state *);
10955:	static void find_good_pkt_pointers(struct bpf_verifier_state *, struct bpf_reg_state *, enum bpf_reg_type, bool);
2070:	static struct btf *find_kfunc_desc_btf(struct bpf_verifier_env *, s16);
1908:	static int find_subprog(struct bpf_verifier_env *, int);
1201:	static void free_func_state(struct bpf_func_state *);
543:	static bool helper_multiple_ref_obj_use(enum bpf_func_id, const struct bpf_map *);
1836:	static void init_func_state(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int);
489:	static bool is_acquire_function(enum bpf_func_id, const struct bpf_map *);
11187:	static int is_branch_taken(struct bpf_reg_state *, u64, u8, bool);
8260:	static bool is_kfunc_arg_mem_size(const struct btf *, const struct btf_param *, const struct bpf_reg_state *);
11236:	static int is_pkt_ptr_branch_taken(struct bpf_reg_state *, struct bpf_reg_state *, u8);
509:	static bool is_ptr_cast_function(enum bpf_func_id);
668:	static const char *kernel_type_name(const struct btf *, u32);
1978:	static int kfunc_btf_cmp_by_off(const void *, const void *);
1969:	static int kfunc_desc_cmp_by_id_off(const void *, const void *);
2201:	static int kfunc_desc_cmp_by_imm(const void *, const void *);
3944:	static int map_kptr_match_type(struct bpf_verifier_env *, struct btf_field *, struct bpf_reg_state *, u32);
2837:	static void mark_all_scalars_precise(struct bpf_verifier_env *, struct bpf_verifier_state *);
8155:	static void mark_btf_func_reg_size(struct bpf_verifier_env *, u32, size_t);
1799:	static void mark_btf_ld_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, enum bpf_reg_type, struct btf *, u32, enum bpf_type_flag);
1462:	static void mark_ptr_not_null_reg(struct bpf_reg_state *);
11536:	static void mark_ptr_or_null_regs(struct bpf_verifier_state *, u32, bool);
1436:	static void mark_reg_known_zero(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
1786:	static void mark_reg_not_init(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
2341:	static int mark_reg_read(struct bpf_verifier_env *, const struct bpf_reg_state *, struct bpf_reg_state *, u8);
3503:	static void mark_reg_stack_read(struct bpf_verifier_env *, struct bpf_func_state *, int, int, int);
1766:	static void mark_reg_unknown(struct bpf_verifier_env *, struct bpf_reg_state *, u32);
750:	static int mark_stack_slots_dynptr(struct bpf_verifier_env *, struct bpf_reg_state *, enum bpf_arg_type, int);
6667:	static bool may_update_sockmap(struct bpf_verifier_env *, int);
1305:	static int pop_stack(struct bpf_verifier_env *, int *, int *, bool);
7444:	static int prepare_func_exit(struct bpf_verifier_env *, int *);
1035:	static void print_insn_state(struct bpf_verifier_env *, const struct bpf_func_state *);
890:	static void print_verifier_state(struct bpf_verifier_env *, const struct bpf_func_state *, bool);
8568:	static int process_kf_arg_ptr_to_kptr(struct bpf_verifier_env *, struct bpf_reg_state *, const struct btf_type *, const char *, struct bpf_kfunc_call_arg_meta *, int);
8719:	static int process_kf_arg_ptr_to_list_head(struct bpf_verifier_env *, struct bpf_reg_state *, u32, struct bpf_kfunc_call_arg_meta *);
8762:	static int process_kf_arg_ptr_to_list_node(struct bpf_verifier_env *, struct bpf_reg_state *, u32, struct bpf_kfunc_call_arg_meta *);
5880:	static int process_kptr_func(struct bpf_verifier_env *, int, struct bpf_call_arg_meta *);
5750:	static int process_spin_lock(struct bpf_verifier_env *, int, bool);
5843:	static int process_timer_func(struct bpf_verifier_env *, int, struct bpf_call_arg_meta *);
1849:	static struct bpf_verifier_state *push_async_cb(struct bpf_verifier_env *, int, int, int);
12342:	static int push_insn(int, int, int, struct bpf_verifier_env *, bool);
1334:	static struct bpf_verifier_state *push_stack(struct bpf_verifier_env *, int, int, bool);
12945:	static bool range_within(struct bpf_reg_state *, struct bpf_reg_state *);
7575:	static int record_func_key(struct bpf_verifier_env *, struct bpf_call_arg_meta *, int, int);
7529:	static int record_func_map(struct bpf_verifier_env *, struct bpf_call_arg_meta *, int, int);
8602:	static int ref_set_release_on_unlock(struct bpf_verifier_env *, u32);
1666:	static void reg_bounds_sync(struct bpf_reg_state *);
11472:	static void reg_combine_min_max(struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_reg_state *, u8);
474:	static bool reg_may_point_to_spin_lock(const struct bpf_reg_state *);
11281:	static void reg_set_min_max(struct bpf_reg_state *, struct bpf_reg_state *, u64, u32, u8, bool);
570:	static const char *reg_type_str(struct bpf_verifier_env *, enum bpf_reg_type);
13084:	static bool regsafe(struct bpf_verifier_env *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_id_pair *);
7078:	static int release_reference(struct bpf_verifier_env *, int);
14367:	static int resolve_pseudo_ldimm64(struct bpf_verifier_env *);
9701:	static int sanitize_check_bounds(struct bpf_verifier_env *, const struct bpf_insn *, const struct bpf_reg_state *);
9628:	static int sanitize_err(struct bpf_verifier_env *, const struct bpf_insn *, int, const struct bpf_reg_state *, const struct bpf_reg_state *);
9519:	static int sanitize_ptr_alu(struct bpf_verifier_env *, struct bpf_insn *, const struct bpf_reg_state *, const struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_sanitize_info *, const bool);
9499:	static struct bpf_verifier_state *sanitize_speculative_path(struct bpf_verifier_env *, const struct bpf_insn *, u32, u32);
10481:	static void scalar32_min_max_arsh(struct bpf_reg_state *, struct bpf_reg_state *);
10352:	static void scalar32_min_max_lsh(struct bpf_reg_state *, struct bpf_reg_state *);
10415:	static void scalar32_min_max_rsh(struct bpf_reg_state *, struct bpf_reg_state *);
10504:	static void scalar_min_max_arsh(struct bpf_reg_state *, struct bpf_reg_state *);
10400:	static void scalar_min_max_lsh(struct bpf_reg_state *, struct bpf_reg_state *);
10447:	static void scalar_min_max_rsh(struct bpf_reg_state *, struct bpf_reg_state *);
7281:	static int set_callee_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7393:	static int set_find_vma_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7341:	static int set_loop_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7311:	static int set_map_elem_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7363:	static int set_timer_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
7421:	static int set_user_ringbuf_callback_state(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *, int);
13306:	static bool states_equal(struct bpf_verifier_env *, struct bpf_verifier_state *, struct bpf_verifier_state *);
11556:	static bool try_match_pkt_pointers(const struct bpf_insn *, struct bpf_reg_state *, struct bpf_reg_state *, struct bpf_verifier_state *, struct bpf_verifier_state *);
787:	static int unmark_stack_slots_dynptr(struct bpf_verifier_env *, struct bpf_reg_state *);
7705:	static void update_loop_inline_state(struct bpf_verifier_env *, u32);
349:	static void verbose(void *, const char *, ...);
412:	static void verbose_invalid_scalar(struct bpf_verifier_env *, struct bpf_reg_state *, struct tnum *, const char *, const char *);
384:	static void verbose_linfo(struct bpf_verifier_env *, u32, const char *, ...);
14792:	static int verifier_remove_insns(struct bpf_verifier_env *, u32, u32);
4686:	static void zext_32_to_64(struct bpf_reg_state *);

File kernel/capability.c:
148:	long __arm64_sys_capget(const struct pt_regs *);
222:	long __arm64_sys_capset(const struct pt_regs *);
448:	bool capable(int);
505:	bool capable_wrt_inode_uidgid(struct user_namespace *, const struct inode *, int);
467:	bool file_ns_capable(const struct file *, struct user_namespace *, int);
316:	bool has_capability(struct task_struct *, int);
359:	bool has_capability_noaudit(struct task_struct *, int);
294:	bool has_ns_capability(struct task_struct *, struct user_namespace *, int);
335:	bool has_ns_capability_noaudit(struct task_struct *, struct user_namespace *, int);
395:	bool ns_capable(struct user_namespace *, int);
413:	bool ns_capable_noaudit(struct user_namespace *, int);
432:	bool ns_capable_setid(struct user_namespace *, int);
488:	bool privileged_wrt_inode_uidgid(struct user_namespace *, struct user_namespace *, const struct inode *);
523:	bool ptracer_capable(struct task_struct *, struct user_namespace *);
82:	static int cap_validate_magic(cap_user_header_t, unsigned int *);
32:	static int file_caps_disable(char *);

File kernel/cgroup/cgroup-internal.h:
196:	static void put_css_set(struct css_set *);

File kernel/cgroup/cgroup-v1.c:
751:	void cgroup1_check_for_release(struct cgroup *);
1234:	int cgroup1_get_tree(struct fs_context *);
921:	int cgroup1_parse_param(struct fs_context *, struct fs_parameter *);
196:	void cgroup1_pidlist_destroy_all(struct cgroup *);
1070:	int cgroup1_reconfigure(struct fs_context *);
781:	void cgroup1_release_agent(struct work_struct *);
44:	bool cgroup1_ssid_disabled(int);
56:	int cgroup_attach_task_all(struct task_struct *, struct task_struct *);
94:	int cgroup_transfer_tasks(struct cgroup *, struct cgroup *);
699:	int cgroupstats_build(struct cgroupstats *, struct dentry *);
668:	int proc_cgroupstats_show(struct seq_file *, void *);
489:	static ssize_t __cgroup1_procs_write(struct kernfs_open_file *, char *, size_t, loff_t, bool);
533:	static ssize_t cgroup1_procs_write(struct kernfs_open_file *, char *, size_t, loff_t);
827:	static int cgroup1_rename(struct kernfs_node *, struct kernfs_node *, const char *);
863:	static int cgroup1_show_options(struct seq_file *, struct kernfs_root *);
539:	static ssize_t cgroup1_tasks_write(struct kernfs_open_file *, char *, size_t, loff_t);
1266:	static int cgroup1_wq_init(void);
606:	static u64 cgroup_clone_children_read(struct cgroup_subsys_state *, struct cftype *);
612:	static int cgroup_clone_children_write(struct cgroup_subsys_state *, struct cftype *, u64);
1279:	static int cgroup_no_v1(char *);
209:	static void cgroup_pidlist_destroy_work_fn(struct work_struct *);
461:	static void *cgroup_pidlist_next(struct seq_file *, void *, loff_t *);
482:	static int cgroup_pidlist_show(struct seq_file *, void *);
388:	static void *cgroup_pidlist_start(struct seq_file *, loff_t *);
449:	static void cgroup_pidlist_stop(struct seq_file *, void *);
590:	static u64 cgroup_read_notify_on_release(struct cgroup_subsys_state *, struct cftype *);
573:	static int cgroup_release_agent_show(struct seq_file *, void *);
545:	static ssize_t cgroup_release_agent_write(struct kernfs_open_file *, char *, size_t, loff_t);
584:	static int cgroup_sane_behavior_show(struct seq_file *, void *);
596:	static int cgroup_write_notify_on_release(struct cgroup_subsys_state *, struct cftype *, u64);
1016:	static int check_cgroupfs_options(struct fs_context *);
272:	static int cmppid(const void *, const void *);

File kernel/cgroup/cgroup.c:
629:	int __cgroup_task_count(const struct cgroup *);
4430:	int cgroup_add_dfl_cftypes(struct cgroup_subsys *, struct cftype *);
4447:	int cgroup_add_legacy_cftypes(struct cgroup_subsys *, struct cftype *);
2433:	void cgroup_attach_lock(bool);
2888:	int cgroup_attach_task(struct cgroup *, struct task_struct *, bool);
2444:	void cgroup_attach_unlock(bool);
6510:	int cgroup_can_fork(struct task_struct *, struct kernel_clone_args *);
6549:	void cgroup_cancel_fork(struct task_struct *, struct kernel_clone_args *);
2149:	int cgroup_do_get_tree(struct fs_context *);
562:	struct cgroup_subsys_state *cgroup_e_css(struct cgroup *, struct cgroup_subsys *);
6662:	void cgroup_exit(struct task_struct *);
1317:	void cgroup_favor_dynmods(struct cgroup_root *, bool);
4462:	void cgroup_file_notify(struct cgroup_file *);
4486:	void cgroup_file_show(struct cgroup_file *, bool);
6312:	void cgroup_fork(struct task_struct *);
6704:	void cgroup_free(struct task_struct *);
1352:	void cgroup_free_root(struct cgroup_root *);
592:	struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *, struct cgroup_subsys *);
6875:	struct cgroup *cgroup_get_from_fd(int);
6191:	struct cgroup *cgroup_get_from_id(u64);
6816:	struct cgroup *cgroup_get_from_path(const char *);
6060:	int cgroup_init(void);
6023:	int cgroup_init_early(void);
398:	bool cgroup_is_thread_root(struct cgroup *);
359:	bool cgroup_is_threaded(struct cgroup *);
1651:	struct cgroup *cgroup_kn_lock_live(struct kernfs_node *, bool);
1619:	void cgroup_kn_unlock(struct kernfs_node *);
3105:	void cgroup_lock_and_drain_offline(struct cgroup *);
2858:	int cgroup_migrate(struct task_struct *, bool, struct cgroup_mgctx *);
2744:	void cgroup_migrate_add_src(struct css_set *, struct cgroup *, struct cgroup_mgctx *);
2699:	void cgroup_migrate_finish(struct cgroup_mgctx *);
2791:	int cgroup_migrate_prepare_dst(struct cgroup_mgctx *);
2668:	int cgroup_migrate_vet_dst(struct cgroup *);
5710:	int cgroup_mkdir(struct kernfs_node *, const char *, umode_t);
318:	bool cgroup_on_dfl(const struct cgroup *);
6912:	int cgroup_parse_float(const char *, unsigned int, s64 *);
6174:	void cgroup_path_from_kernfs_id(u64, char *, size_t);
2354:	int cgroup_path_ns(struct cgroup *, char *, size_t, struct cgroup_namespace *);
2346:	int cgroup_path_ns_locked(struct cgroup *, char *, size_t, struct cgroup_namespace *);
6570:	void cgroup_post_fork(struct task_struct *, struct kernel_clone_args *);
2977:	void cgroup_procs_write_finish(struct task_struct *, bool);
2920:	struct task_struct *cgroup_procs_write_start(char *, bool, bool *);
3886:	bool cgroup_psi_enabled(void);
6689:	void cgroup_release(struct task_struct *);
4367:	int cgroup_rm_cftypes(struct cftype *);
5940:	int cgroup_rmdir(struct kernfs_node *);
1310:	struct cgroup_root *cgroup_root_from_kf(struct kernfs_root *);
2046:	int cgroup_setup_root(struct cgroup_root *, u16);
1887:	int cgroup_show_path(struct seq_file *, struct kernfs_node *, struct kernfs_root *);
6938:	void cgroup_sk_alloc(struct sock_cgroup_data *);
6966:	void cgroup_sk_clone(struct sock_cgroup_data *);
6979:	void cgroup_sk_free(struct sock_cgroup_data *);
265:	bool cgroup_ssid_enabled(int);
646:	int cgroup_task_count(const struct cgroup *);
2497:	struct task_struct *cgroup_taskset_first(struct cgroup_taskset *, struct cgroup_subsys_state **);
2514:	struct task_struct *cgroup_taskset_next(struct cgroup_taskset *, struct cgroup_subsys_state **);
6856:	struct cgroup *cgroup_v1v2_get_from_fd(int);
6801:	struct cgroup_subsys_state *css_from_id(int, struct cgroup_subsys *);
4714:	bool css_has_online_children(struct cgroup_subsys_state *);
4518:	struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4682:	struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4587:	struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4629:	struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *);
4973:	void css_task_iter_end(struct css_task_iter *);
4942:	struct task_struct *css_task_iter_next(struct css_task_iter *);
4912:	void css_task_iter_start(struct cgroup_subsys_state *, unsigned int, struct css_task_iter *);
6762:	struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *, struct cgroup_subsys *);
6743:	void enable_debug_cgroup(void);
2026:	void init_cgroup_root(struct cgroup_fs_context *);
657:	struct cgroup_subsys_state *of_css(struct kernfs_open_file *);
6232:	int proc_cgroup_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
961:	void put_css_set_locked(struct css_set *);
1787:	int rebind_subsystems(struct cgroup_root *, u16);
1486:	struct cgroup *task_cgroup_from_root(struct task_struct *, struct cgroup_root *);
2384:	int task_cgroup_path(struct task_struct *, char *, size_t);
5008:	static void *__cgroup_procs_start(struct seq_file *, loff_t *, unsigned int);
5125:	static ssize_t __cgroup_procs_write(struct kernfs_open_file *, char *, bool);
1930:	static int cgroup2_parse_param(struct fs_context *, struct fs_parameter *);
4397:	static int cgroup_add_cftypes(struct cgroup_subsys *, struct cftype *);
4222:	static int cgroup_addrm_files(struct cgroup_subsys_state *, struct cgroup *, struct cftype *, bool);
4260:	static int cgroup_apply_cftypes(struct cftype *, bool);
3315:	static int cgroup_apply_control(struct cgroup *);
3224:	static int cgroup_apply_control_enable(struct cgroup *);
5104:	static int cgroup_attach_permissions(struct cgroup *, struct cgroup *, struct super_block *, bool, struct cgroup_namespace *);
438:	static u16 cgroup_control(struct cgroup *);
3009:	static int cgroup_controllers_show(struct seq_file *, void *);
6476:	static void cgroup_css_set_put_fork(struct kernel_clone_args *);
5868:	static int cgroup_destroy_locked(struct cgroup *);
6710:	static int cgroup_disable(char *);
3666:	static int cgroup_events_show(struct seq_file *, void *);
4168:	static void cgroup_file_notify_timer(struct timer_list *);
4001:	static int cgroup_file_open(struct kernfs_open_file *);
4090:	static __poll_t cgroup_file_poll(struct kernfs_open_file *, poll_table *);
4026:	static void cgroup_file_release(struct kernfs_open_file *);
4037:	static ssize_t cgroup_file_write(struct kernfs_open_file *, char *, size_t, loff_t);
3340:	static void cgroup_finalize_control(struct cgroup *, int);
3893:	static int cgroup_freeze_show(struct seq_file *, void *);
3902:	static ssize_t cgroup_freeze_write(struct kernfs_open_file *, char *, size_t, loff_t);
2197:	static void cgroup_fs_context_free(struct fs_context *);
618:	static void cgroup_get_live(struct cgroup *);
2208:	static int cgroup_get_tree(struct fs_context *);
324:	static int cgroup_idr_alloc(struct idr *, void *, int, int, gfp_t);
4303:	static int cgroup_init_cftypes(struct cgroup_subsys *, struct cftype *);
2241:	static int cgroup_init_fs_context(struct fs_context *);
5964:	static void cgroup_init_subsys(struct cgroup_subsys *, bool);
2266:	static void cgroup_kill_sb(struct super_block *);
3968:	static ssize_t cgroup_kill_write(struct kernfs_open_file *, char *, size_t, loff_t);
3623:	static int cgroup_max_depth_show(struct seq_file *, void *);
3636:	static ssize_t cgroup_max_depth_write(struct kernfs_open_file *, char *, size_t, loff_t);
3580:	static int cgroup_max_descendants_show(struct seq_file *, void *);
3593:	static ssize_t cgroup_max_descendants_write(struct kernfs_open_file *, char *, size_t, loff_t);
2561:	static int cgroup_migrate_execute(struct cgroup_mgctx *);
4997:	static void *cgroup_procs_next(struct seq_file *, void *, loff_t *);
4989:	static void cgroup_procs_release(struct kernfs_open_file *);
5051:	static int cgroup_procs_show(struct seq_file *, void *);
5034:	static void *cgroup_procs_start(struct seq_file *, loff_t *);
5172:	static ssize_t cgroup_procs_write(struct kernfs_open_file *, char *, size_t, loff_t);
3166:	static void cgroup_propagate_control(struct cgroup *);
1993:	static int cgroup_reconfigure(struct fs_context *);
4105:	static void *cgroup_seqfile_next(struct seq_file *, void *, loff_t *);
4116:	static int cgroup_seqfile_show(struct seq_file *, void *);
4100:	static void *cgroup_seqfile_start(struct seq_file *, loff_t *);
4110:	static void cgroup_seqfile_stop(struct seq_file *, void *);
1980:	static int cgroup_show_options(struct seq_file *, struct kernfs_root *);
3676:	static int cgroup_stat_show(struct seq_file *, void *);
3018:	static int cgroup_subtree_control_show(struct seq_file *, void *);
3391:	static ssize_t cgroup_subtree_control_write(struct kernfs_open_file *, char *, size_t, loff_t);
7056:	static int cgroup_sysfs_init(void);
5178:	static void *cgroup_threads_start(struct seq_file *, loff_t *);
5183:	static ssize_t cgroup_threads_write(struct kernfs_open_file *, char *, size_t, loff_t);
3542:	static int cgroup_type_show(struct seq_file *, void *);
3558:	static ssize_t cgroup_type_write(struct kernfs_open_file *, char *, size_t, loff_t);
826:	static void cgroup_update_populated(struct cgroup *, bool);
6326:	static struct cgroup *cgroup_v1v2_get_from_file(struct file *);
6158:	static int cgroup_wq_init(void);
3707:	static int cpu_stat_show(struct seq_file *, void *);
2313:	static int cpuset_init_fs_context(struct fs_context *);
5331:	static void css_free_rwork_fn(struct work_struct *);
5790:	static void css_killed_ref_fn(struct percpu_ref *);
5772:	static void css_killed_work_fn(struct work_struct *);
1739:	static int css_populate_dir(struct cgroup_subsys_state *);
5435:	static void css_release(struct percpu_ref *);
5381:	static void css_release_work_fn(struct work_struct *);
906:	static void css_set_move_task(struct task_struct *, struct css_set *, struct css_set *, bool);
4848:	static void css_task_iter_advance(struct css_task_iter *);
4788:	static void css_task_iter_advance_css_set(struct css_task_iter *);
7012:	static ssize_t delegate_show(struct kobject *, struct kobj_attribute *, char *);
6745:	static int enable_cgroup_debug(char *);
7034:	static ssize_t features_show(struct kobject *, struct kobj_attribute *, char *);
1206:	static struct css_set *find_css_set(struct css_set *, struct cgroup *);
5444:	static void init_and_link_css(struct cgroup_subsys_state *, struct cgroup_subsys *, struct cgroup *);
5810:	static void kill_css(struct cgroup_subsys_state *);

File kernel/cgroup/cpuset.c:
4025:	void __cpuset_memory_pressure_bump(void);
3875:	bool __cpuset_node_allowed(int, gfp_t);
3702:	void cpuset_cpus_allowed(struct task_struct *, struct cpumask *);
3748:	bool cpuset_cpus_allowed_fallback(struct task_struct *);
3399:	void cpuset_force_rebuild(void);
3287:	int cpuset_init(void);
3782:	void cpuset_init_current_mems_allowed(void);
3673:	void cpuset_init_smp(void);
3941:	int cpuset_mem_spread_node(void);
3797:	nodemask_t cpuset_mems_allowed(struct task_struct *);
3972:	int cpuset_mems_allowed_intersects(const struct task_struct *, const struct task_struct *);
3817:	int cpuset_nodemask_valid_mems_allowed(nodemask_t *);
3984:	void cpuset_print_current_mems_allowed(void);
408:	void cpuset_read_lock(void);
413:	void cpuset_read_unlock(void);
3950:	int cpuset_slab_spread_node(void);
4073:	void cpuset_task_status_allowed(struct seq_file *, struct task_struct *);
3641:	void cpuset_update_active_cpus(void);
3651:	void cpuset_wait_for_hotplug(void);
2121:	bool current_cpuset_is_being_rebound(void);
4042:	int proc_cpuset_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1196:	void rebuild_sched_domains(void);
1247:	static void compute_effective_cpumask(struct cpumask *, struct cpuset *, struct cpuset *);
2512:	static void cpuset_attach(struct cgroup_taskset *);
3232:	static void cpuset_bind(struct cgroup_subsys_state *);
2449:	static int cpuset_can_attach(struct cgroup_taskset *);
2494:	static void cpuset_cancel_attach(struct cgroup_taskset *);
2775:	static int cpuset_common_seq_show(struct seq_file *, void *);
3090:	static struct cgroup_subsys_state *cpuset_css_alloc(struct cgroup_subsys_state *);
3225:	static void cpuset_css_free(struct cgroup_subsys_state *);
3197:	static void cpuset_css_offline(struct cgroup_subsys_state *);
3119:	static int cpuset_css_online(struct cgroup_subsys_state *);
3255:	static void cpuset_fork(struct task_struct *);
3543:	static void cpuset_hotplug_workfn(struct work_struct *);
1872:	static void cpuset_migrate_mm_workfn(struct work_struct *);
1905:	static void cpuset_post_attach(void);
2838:	static s64 cpuset_read_s64(struct cgroup_subsys_state *, struct cftype *);
2807:	static u64 cpuset_read_u64(struct cgroup_subsys_state *, struct cftype *);
2702:	static ssize_t cpuset_write_resmask(struct kernfs_open_file *, char *, size_t, loff_t);
2673:	static int cpuset_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
2624:	static int cpuset_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
501:	static void guarantee_online_cpus(struct task_struct *, struct cpumask *);
464:	static bool partition_is_populated(struct cpuset *, struct cpuset *);
1139:	static void rebuild_sched_domains_locked(void);
2853:	static int sched_partition_show(struct seq_file *, void *);
2884:	static ssize_t sched_partition_write(struct kernfs_open_file *, char *, size_t, loff_t);
1545:	static void update_cpumasks_hier(struct cpuset *, struct tmpmasks *, bool);
812:	static void update_domain_attr_tree(struct sched_domain_attr *, struct cpuset *);
2177:	static int update_flag(cpuset_flagbits_t, struct cpuset *, int);
1310:	static int update_parent_subparts_cpumask(struct cpuset *, int, struct cpumask *, struct tmpmasks *);
2226:	static int update_prstate(struct cpuset *, int);
1697:	static void update_sibling_cpumasks(struct cpuset *, struct cpuset *, struct tmpmasks *);
1214:	static void update_tasks_cpumask(struct cpuset *, struct cpumask *);
1948:	static void update_tasks_nodemask(struct cpuset *);
729:	static int validate_change(struct cpuset *, struct cpuset *);

File kernel/cgroup/freezer.c:
107:	void cgroup_enter_frozen(void);
260:	void cgroup_freeze(struct cgroup *, bool);
222:	void cgroup_freezer_migrate_task(struct task_struct *, struct cgroup *, struct cgroup *);
131:	void cgroup_leave_frozen(bool);
52:	void cgroup_update_frozen(struct cgroup *);

File kernel/cgroup/legacy_freezer.c:
65:	bool cgroup_freezing(struct task_struct *);
342:	static void freezer_apply_state(struct freezer *, bool, unsigned int);
158:	static void freezer_attach(struct cgroup_taskset *);
86:	static struct cgroup_subsys_state *freezer_css_alloc(struct cgroup_subsys_state *);
144:	static void freezer_css_free(struct cgroup_subsys_state *);
130:	static void freezer_css_offline(struct cgroup_subsys_state *);
105:	static int freezer_css_online(struct cgroup_subsys_state *);
204:	static void freezer_fork(struct task_struct *);
438:	static u64 freezer_parent_freezing_read(struct cgroup_subsys_state *, struct cftype *);
284:	static int freezer_read(struct seq_file *, void *);
430:	static u64 freezer_self_freezing_read(struct cgroup_subsys_state *, struct cftype *);
412:	static ssize_t freezer_write(struct kernfs_open_file *, char *, size_t, loff_t);

File kernel/cgroup/namespace.c:
50:	struct cgroup_namespace *copy_cgroup_ns(unsigned long, struct user_namespace *, struct cgroup_namespace *);
40:	void free_cgroup_ns(struct cgroup_namespace *);
153:	static int cgroup_namespaces_init(void);
118:	static struct ns_common *cgroupns_get(struct task_struct *);
98:	static int cgroupns_install(struct nsset *, struct ns_common *);
139:	static struct user_namespace *cgroupns_owner(struct ns_common *);
134:	static void cgroupns_put(struct ns_common *);

File kernel/cgroup/pids.c:
191:	static int pids_can_attach(struct cgroup_taskset *);
238:	static int pids_can_fork(struct task_struct *, struct css_set *);
216:	static void pids_cancel_attach(struct cgroup_taskset *);
262:	static void pids_cancel_fork(struct task_struct *, struct css_set *);
70:	static struct cgroup_subsys_state *pids_css_alloc(struct cgroup_subsys_state *);
84:	static void pids_css_free(struct cgroup_subsys_state *);
326:	static s64 pids_current_read(struct cgroup_subsys_state *, struct cftype *);
342:	static int pids_events_show(struct seq_file *, void *);
312:	static int pids_max_show(struct seq_file *, void *);
282:	static ssize_t pids_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
334:	static s64 pids_peak_read(struct cgroup_subsys_state *, struct cftype *);
275:	static void pids_release(struct task_struct *);

File kernel/cgroup/rstat.c:
409:	void __cgroup_account_cputime(struct cgroup *, u64);
419:	void __cgroup_account_cputime_field(struct cgroup *, enum cpu_usage_stat, u64);
166:	void bpf_rstat_flush(struct cgroup *, struct cgroup *, int);
490:	void cgroup_base_stat_cputime_show(struct seq_file *);
325:	void cgroup_rstat_boot(void);
306:	void cgroup_rstat_exit(struct cgroup *);
234:	void cgroup_rstat_flush(struct cgroup *);
267:	void cgroup_rstat_flush_hold(struct cgroup *);
249:	void cgroup_rstat_flush_irqsafe(struct cgroup *);
278:	void cgroup_rstat_flush_release(void);
284:	int cgroup_rstat_init(struct cgroup *);
29:	void cgroup_rstat_updated(struct cgroup *, int);
546:	static int bpf_rstat_kfunc_init(void);
400:	static void cgroup_base_stat_cputime_account_end(struct cgroup *, struct cgroup_rstat_cpu *, unsigned long);
174:	static void cgroup_rstat_flush_locked(struct cgroup *, bool);

File kernel/configs.c:
70:	static void ikconfig_cleanup(void);
55:	static int ikconfig_init(void);
41:	static ssize_t ikconfig_read_current(struct file *, char *, size_t, loff_t *);

File kernel/context_tracking.c:
317:	void ct_idle_enter(void);
333:	void ct_idle_exit(void);
365:	void ct_irq_enter(void);
402:	void ct_irq_enter_irqson(void);
390:	void ct_irq_exit(void);
417:	void ct_irq_exit_irqson(void);
258:	void ct_nmi_enter(void);
204:	void ct_nmi_exit(void);
163:	static void ct_kernel_enter(bool, int);
101:	static void ct_kernel_enter_state(int);
124:	static void ct_kernel_exit(bool, int);
81:	static void ct_kernel_exit_state(int);

File kernel/cpu.c:
2231:	void __cpuhp_remove_state(enum cpuhp_state, bool);
2193:	void __cpuhp_remove_state_cpuslocked(enum cpuhp_state, bool);
2129:	int __cpuhp_setup_state(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
2070:	int __cpuhp_setup_state_cpuslocked(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
2040:	int __cpuhp_state_add_instance(enum cpuhp_state, struct hlist_node *, bool);
1995:	int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state, struct hlist_node *, bool);
2145:	int __cpuhp_state_remove_instance(enum cpuhp_state, struct hlist_node *, bool);
1468:	int add_cpu(unsigned int);
413:	void arch_smt_update(void);
2711:	void boot_cpu_hotplug_init(void);
2693:	void boot_cpu_init(void);
1490:	int bringup_hibernate_cpu(unsigned int);
1505:	void bringup_nonboot_cpus(unsigned int);
997:	void clear_tasks_mm_cpumask(int);
1251:	int cpu_device_down(struct device *);
1463:	int cpu_device_up(struct device *);
374:	void cpu_hotplug_disable(void);
389:	void cpu_hotplug_enable(void);
288:	void cpu_maps_update_begin(void);
293:	void cpu_maps_update_done(void);
2757:	bool cpu_mitigations_auto_nosmt(void);
2750:	bool cpu_mitigations_off(void);
1340:	void cpuhp_online_idle(enum cpuhp_state);
1114:	void cpuhp_report_idle_dead(void);
927:	void cpuhp_threads_init(void);
308:	void cpus_read_lock(void);
314:	int cpus_read_trylock(void);
320:	void cpus_read_unlock(void);
326:	void cpus_write_lock(void);
331:	void cpus_write_unlock(void);
2664:	void init_cpu_online(const struct cpumask *);
2659:	void init_cpu_possible(const struct cpumask *);
2654:	void init_cpu_present(const struct cpumask *);
336:	void lockdep_assert_cpus_held(void);
1321:	void notify_cpu_starting(unsigned int);
1256:	int remove_cpu(unsigned int);
2669:	void set_cpu_online(unsigned int, bool);
1268:	void smp_shutdown_nonboot_cpus(unsigned int);
666:	static int __cpuhp_invoke_callback_range(bool, unsigned int, struct cpuhp_cpu_state *, enum cpuhp_state, bool);
1152:	static int _cpu_down(unsigned int, int, enum cpuhp_state);
2551:	static ssize_t active_show(struct device *, struct device_attribute *, char *);
589:	static int bringup_cpu(unsigned int);
2536:	static ssize_t control_show(struct device *, struct device_attribute *, char *);
2544:	static ssize_t control_store(struct device *, struct device_attribute *, const char *, size_t);
1231:	static int cpu_down(unsigned int, enum cpuhp_state);
1419:	static int cpu_up(unsigned int, enum cpuhp_state);
1107:	static void cpuhp_complete_idle_dead(void *);
915:	static void cpuhp_init_state(void);
167:	static int cpuhp_invoke_callback(unsigned int, enum cpuhp_state, bool, struct hlist_node *, struct hlist_node **);
1943:	static int cpuhp_issue_call(int, enum cpuhp_state, bool, struct hlist_node *);
545:	static int cpuhp_kick_ap(int, struct cpuhp_cpu_state *, enum cpuhp_state);
750:	static int cpuhp_should_run(unsigned int);
2576:	static int cpuhp_sysfs_init(void);
771:	static void cpuhp_thread_fun(unsigned int);
2421:	static ssize_t fail_show(struct device *, struct device_attribute *, char *);
2371:	static ssize_t fail_store(struct device *, struct device_attribute *, const char *, size_t);
615:	static int finish_cpu(unsigned int);
2733:	static int mitigations_parse_cmdline(char *);
2312:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
2444:	static ssize_t states_show(struct device *, struct device_attribute *, char *);
1027:	static int take_cpu_down(void *);
1058:	static int takedown_cpu(unsigned int);
2362:	static ssize_t target_show(struct device *, struct device_attribute *, char *);
2321:	static ssize_t target_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/cred.c:
135:	void __put_cred(struct cred *);
533:	void abort_creds(struct cred *);
447:	int commit_creds(struct cred *);
340:	int copy_creds(struct task_struct *, unsigned long);
216:	struct cred *cred_alloc_blank(void);
626:	int cred_fscmp(const struct cred *, const struct cred *);
689:	void cred_init(void);
160:	void exit_creds(struct task_struct *);
196:	const struct cred *get_task_cred(struct task_struct *);
554:	const struct cred *override_creds(const struct cred *);
252:	struct cred *prepare_creds(void);
307:	struct cred *prepare_exec_creds(void);
712:	struct cred *prepare_kernel_cred(struct task_struct *);
595:	void revert_creds(const struct cred *);
812:	int set_create_files_as(struct cred *, struct inode *);
666:	int set_cred_ucounts(struct cred *);
774:	int set_security_override(struct cred *, u32);
790:	int set_security_override_from_ctx(struct cred *, const char *);
94:	static void put_cred_rcu(struct callback_head *);

File kernel/dma/coherent.c:
185:	int dma_alloc_from_dev_coherent(struct device *, ssize_t, dma_addr_t *, void **);
117:	int dma_declare_coherent_memory(struct device *, phys_addr_t, dma_addr_t, size_t);
269:	int dma_mmap_from_dev_coherent(struct device *, struct vm_area_struct *, void *, size_t, int *);
133:	void dma_release_coherent_memory(struct device *);
225:	int dma_release_from_dev_coherent(struct device *, int, void *);
38:	static struct dma_coherent_mem *dma_init_coherent_memory(phys_addr_t, dma_addr_t, size_t, bool);
334:	static int rmem_dma_device_init(struct reserved_mem *, struct device *);
349:	static void rmem_dma_device_release(struct reserved_mem *, struct device *);
361:	static int rmem_dma_setup(struct reserved_mem *);

File kernel/dma/contiguous.c:
304:	struct page *dma_alloc_contiguous(struct device *, size_t, gfp_t);
257:	struct page *dma_alloc_from_contiguous(struct device *, size_t, unsigned int, bool);
206:	void dma_contiguous_early_fixup(phys_addr_t, unsigned long);
167:	void dma_contiguous_reserve(phys_addr_t);
227:	int dma_contiguous_reserve_area(phys_addr_t, phys_addr_t, phys_addr_t, struct cma **, bool);
347:	void dma_free_contiguous(struct device *, struct page *, size_t);
131:	void dma_pernuma_cma_reserve(void);
276:	bool dma_release_from_contiguous(struct device *, struct page *, int);
78:	static int early_cma(char *);
104:	static int early_cma_pernuma(char *);
383:	static int rmem_cma_device_init(struct reserved_mem *, struct device *);
389:	static void rmem_cma_device_release(struct reserved_mem *, struct device *);
400:	static int rmem_cma_setup(struct reserved_mem *);

File kernel/dma/direct.c:
208:	void *dma_direct_alloc(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
367:	struct page *dma_direct_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
549:	bool dma_direct_can_mmap(struct device *);
322:	void dma_direct_free(struct device *, size_t, void *, dma_addr_t, unsigned long);
391:	void dma_direct_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
39:	u64 dma_direct_get_required_mask(struct device *);
536:	int dma_direct_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
520:	dma_addr_t dma_direct_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
476:	int dma_direct_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
602:	size_t dma_direct_max_mapping_size(struct device *);
555:	int dma_direct_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
611:	bool dma_direct_need_sync(struct device *, dma_addr_t);
633:	int dma_direct_set_offset(struct device *, phys_addr_t, dma_addr_t, u64);
579:	int dma_direct_supported(struct device *, u64);
432:	void dma_direct_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
409:	void dma_direct_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
460:	void dma_direct_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
117:	static struct page *__dma_direct_alloc_pages(struct device *, size_t, gfp_t, bool);
68:	static bool dma_coherent_ok(struct device *, phys_addr_t, size_t);

File kernel/dma/dummy.c:
14:	static dma_addr_t dma_dummy_map_page(struct device *, struct page *, unsigned long, size_t, enum dma_data_direction, unsigned long);
21:	static int dma_dummy_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
7:	static int dma_dummy_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
28:	static int dma_dummy_supported(struct device *, u64);

File kernel/dma/mapping.c:
493:	void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
642:	struct sg_table *dma_alloc_noncontiguous(struct device *, size_t, enum dma_data_direction, gfp_t, unsigned long);
574:	struct page *dma_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
434:	bool dma_can_mmap(struct device *);
527:	void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
675:	void dma_free_noncontiguous(struct device *, size_t, struct sg_table *, enum dma_data_direction);
597:	void dma_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
834:	unsigned long dma_get_merge_boundary(struct device *);
472:	u64 dma_get_required_mask(struct device *);
395:	int dma_get_sgtable_attrs(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
143:	dma_addr_t dma_map_page_attrs(struct device *, struct page *, size_t, size_t, enum dma_data_direction, unsigned long);
295:	dma_addr_t dma_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
227:	unsigned int dma_map_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
266:	int dma_map_sgtable(struct device *, struct sg_table *, enum dma_data_direction, unsigned long);
798:	size_t dma_max_mapping_size(struct device *);
457:	int dma_mmap_attrs(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
709:	int dma_mmap_noncontiguous(struct device *, struct vm_area_struct *, size_t, struct sg_table *);
605:	int dma_mmap_pages(struct device *, struct vm_area_struct *, size_t, struct page *);
824:	bool dma_need_sync(struct device *, dma_addr_t);
812:	size_t dma_opt_mapping_size(struct device *);
741:	bool dma_pci_p2pdma_supported(struct device *);
415:	pgprot_t dma_pgprot(struct device *, pgprot_t, unsigned long);
782:	int dma_set_coherent_mask(struct device *, u64);
765:	int dma_set_mask(struct device *, u64);
356:	void dma_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
370:	void dma_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
328:	void dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
342:	void dma_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
167:	void dma_unmap_page_attrs(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
316:	void dma_unmap_resource(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
279:	void dma_unmap_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
688:	void *dma_vmap_noncontiguous(struct device *, size_t, struct sg_table *);
700:	void dma_vunmap_noncontiguous(struct device *, void *);
85:	void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
61:	void dmam_free_coherent(struct device *, size_t, void *, dma_addr_t);
40:	static int dmam_match(struct device *, void *, void *);
32:	static void dmam_release(struct device *, void *);

File kernel/dma/ops_helpers.c:
61:	struct page *dma_common_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
84:	void dma_common_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
18:	int dma_common_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
34:	int dma_common_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);

File kernel/dma/pool.c:
265:	struct page *dma_alloc_from_pool(struct device *, size_t, void **, gfp_t, bool (*)(struct device *, phys_addr_t, size_t));
283:	bool dma_free_from_pool(struct device *, void *, size_t);
162:	static struct gen_pool *__dma_atomic_pool_init(size_t, gfp_t);
79:	static int atomic_pool_expand(struct gen_pool *, size_t, gfp_t);
151:	static void atomic_pool_work_fn(struct work_struct *);
36:	static void dma_atomic_pool_debugfs_init(void);
187:	static int dma_atomic_pool_init(void);
29:	static int early_coherent_pool(char *);

File kernel/dma/remap.c:
38:	void *dma_common_contiguous_remap(struct page *, size_t, pgprot_t, const void *);
9:	struct page **dma_common_find_pages(void *);
60:	void dma_common_free_remap(void *, size_t);
22:	void *dma_common_pages_remap(struct page **, size_t, pgprot_t, const void *);

File kernel/dma/swiotlb.c:
927:	bool is_swiotlb_active(struct device *);
172:	void swiotlb_adjust_size(unsigned long);
480:	void swiotlb_exit(void);
393:	void swiotlb_init(bool, unsigned int);
403:	int swiotlb_init_late(size_t, gfp_t, int (*)(void *, unsigned long));
338:	void swiotlb_init_remap(bool, unsigned int, int (*)(void *, unsigned long));
882:	dma_addr_t swiotlb_map(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
911:	size_t swiotlb_max_mapping_size(struct device *);
159:	unsigned int swiotlb_max_segment(void);
189:	void swiotlb_print_info(void);
167:	unsigned long swiotlb_size_or_default(void);
869:	void swiotlb_sync_single_for_cpu(struct device *, phys_addr_t, size_t, enum dma_data_direction);
860:	void swiotlb_sync_single_for_device(struct device *, phys_addr_t, size_t, enum dma_data_direction);
741:	phys_addr_t swiotlb_tbl_map_single(struct device *, phys_addr_t, size_t, size_t, unsigned int, enum dma_data_direction, unsigned long);
846:	void swiotlb_tbl_unmap_single(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
246:	void swiotlb_update_mem_attributes(void);
940:	static int fops_io_tlb_used_open(struct inode *, struct file *);
935:	static int io_tlb_used_get(void *, u64 *);
107:	static bool round_up_default_nslabs(void);
137:	static int setup_io_tlb_npages(char *);
120:	static void swiotlb_adjust_nareas(unsigned int);
526:	static void swiotlb_bounce(struct device *, phys_addr_t, size_t, enum dma_data_direction);
954:	static int swiotlb_create_default_debugfs(void);
263:	static void swiotlb_init_io_tlb_mem(struct io_tlb_mem *, phys_addr_t, unsigned long, unsigned int, bool, unsigned int);

File kernel/events/callchain.c:
108:	int get_callchain_buffers(int);
152:	struct perf_callchain_entry *get_callchain_entry(int *);
180:	struct perf_callchain_entry *get_perf_callchain(struct pt_regs *, u32, bool, bool, u32, bool, bool);
38:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
43:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
232:	int perf_event_max_stack_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void put_callchain_buffers(void);
174:	void put_callchain_entry(int);
48:	static void release_callchain_buffers_rcu(struct callback_head *);

File kernel/events/core.c:
9761:	void ___perf_sw_event(u32, u64, struct pt_regs *, u64);
12296:	long __arm64_sys_perf_event_open(const struct pt_regs *);
3977:	void __perf_event_task_sched_in(struct task_struct *, struct task_struct *);
3623:	void __perf_event_task_sched_out(struct task_struct *, struct task_struct *);
9772:	void __perf_sw_event(u32, u64, struct pt_regs *, u64);
6021:	void arch_perf_update_userpage(struct perf_event *, struct perf_event_mmap_page *, u64);
10499:	void perf_bp_event(struct perf_event *, void *);
7535:	struct perf_callchain_entry *perf_callchain(struct perf_event *, struct pt_regs *);
183:	struct perf_event_context *perf_cpu_task_ctx(void);
476:	int perf_cpu_time_max_percent_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
7105:	void perf_event__output_id_sample(struct perf_event *, struct perf_output_handle *, struct perf_sample_data *);
9434:	int perf_event_account_interrupt(struct perf_event *);
3088:	void perf_event_addr_filters_sync(struct perf_event *);
13161:	const struct perf_event_attr *perf_event_attrs(struct perf_event *);
8847:	void perf_event_aux_event(struct perf_event *, unsigned long, unsigned long, u64);
9201:	void perf_event_bpf_event(struct bpf_prog *, enum perf_bpf_event_type, u16);
8237:	void perf_event_comm(struct task_struct *, bool);
12700:	struct perf_event *perf_event_create_kernel_counter(struct perf_event_attr *, int, struct task_struct *, perf_overflow_handler_t, void *);
13134:	void perf_event_delayed_put(struct task_struct *);
2456:	void perf_event_disable(struct perf_event *);
2466:	void perf_event_disable_inatomic(struct perf_event *);
2447:	void perf_event_disable_local(struct perf_event *);
2988:	void perf_event_enable(struct perf_event *);
7955:	void perf_event_exec(void);
13588:	int perf_event_exit_cpu(unsigned int);
13031:	void perf_event_exit_task(struct task_struct *);
8157:	void perf_event_fork(struct task_struct *);
10493:	void perf_event_free_bpf_prog(struct perf_event *);
13088:	void perf_event_free_task(struct task_struct *);
13139:	struct file *perf_event_get(unsigned int);
7073:	void perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
13614:	void perf_event_init(void);
13568:	int perf_event_init_cpu(unsigned int);
13472:	int perf_event_init_task(struct task_struct *, u64);
9327:	void perf_event_itrace_started(struct perf_event *);
9088:	void perf_event_ksymbol(u16, u64, u32, bool, const char *);
8812:	void perf_event_mmap(struct vm_area_struct *);
8334:	void perf_event_namespaces(struct task_struct *);
7797:	int perf_event_output(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7789:	void perf_event_output_backward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7781:	void perf_event_output_forward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
9531:	int perf_event_overflow(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
5650:	u64 perf_event_pause(struct perf_event *, bool);
5766:	int perf_event_period(struct perf_event *, u64);
576:	void perf_event_print_debug(void);
4526:	int perf_event_read_local(struct perf_event *, u64 *, u64 *, u64 *);
5426:	u64 perf_event_read_value(struct perf_event *, u64 *, u64 *);
3121:	int perf_event_refresh(struct perf_event *, int);
5279:	int perf_event_release_kernel(struct perf_event *);
10487:	int perf_event_set_bpf_prog(struct perf_event *, struct bpf_prog *, u64);
13642:	ssize_t perf_event_sysfs_show(struct device *, struct device_attribute *, char *);
5972:	int perf_event_task_disable(void);
5956:	int perf_event_task_enable(void);
4291:	void perf_event_task_tick(void);
9295:	void perf_event_text_poke(const void *, const void *, size_t, const void *, size_t);
6031:	void perf_event_update_userpage(struct perf_event *);
6622:	void perf_event_wakeup(struct perf_event *);
13153:	const struct perf_event *perf_get_event(struct file *);
8884:	void perf_log_lost_samples(struct perf_event *, u64);
7227:	void perf_output_sample(struct perf_output_handle *, struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
1132:	void perf_pmu_disable(struct pmu *);
1139:	void perf_pmu_enable(struct pmu *);
12861:	void perf_pmu_migrate_context(struct pmu *, int, int);
11389:	int perf_pmu_register(struct pmu *, const char *, int);
2705:	void perf_pmu_resched(struct pmu *);
11497:	void perf_pmu_unregister(struct pmu *);
7552:	void perf_prepare_sample(struct perf_event_header *, struct perf_sample_data *, struct perf_event *, struct pt_regs *);
452:	int perf_proc_update_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9368:	void perf_report_aux_output_id(struct perf_event *, u64);
519:	void perf_sample_event_took(u64);
3543:	void perf_sched_cb_dec(struct pmu *);
3555:	void perf_sched_cb_inc(struct pmu *);
9746:	int perf_swevent_get_recursion_context(void);
9754:	void perf_swevent_put_recursion_context(int);
9560:	u64 perf_swevent_set_period(struct perf_event *);
6194:	struct perf_buffer *ring_buffer_get(struct perf_event *);
6212:	void ring_buffer_put(struct perf_buffer *);
13716:	static int __perf_cgroup_move(void *);
9399:	static int __perf_event_account_interrupt(struct perf_event *, int);
2393:	static void __perf_event_disable(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
2900:	static void __perf_event_enable(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
13532:	static void __perf_event_exit_context(void *);
7044:	static void __perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *, u64);
9456:	static int __perf_event_overflow(struct perf_event *, int, struct perf_sample_data *, struct pt_regs *);
5702:	static void __perf_event_period(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
4444:	static void __perf_event_read(void *);
5397:	static u64 __perf_event_read_value(struct perf_event *, u64 *, u64 *);
3003:	static int __perf_event_stop(void *);
2721:	static int __perf_install_in_context(void *);
8005:	static int __perf_pmu_output_stop(void *);
12795:	static void __perf_pmu_remove(struct perf_event_context *, int, struct pmu *, struct perf_event_groups *, struct list_head *);
5439:	static int __perf_read_group_add(struct perf_event *, u64, u64 *);
2305:	static void __perf_remove_from_context(struct perf_event *, struct perf_cpu_context *, struct perf_event_context *, void *);
3200:	static void __pmu_ctx_sched_out(struct perf_event_pmu_context *, enum event_type_t);
5141:	static void _free_event(struct perf_event *);
2433:	static void _perf_event_disable(struct perf_event *);
2951:	static void _perf_event_enable(struct perf_event *);
3104:	static int _perf_event_refresh(struct perf_event *, int);
5642:	static void _perf_event_reset(struct perf_event *);
11691:	static void account_event(struct perf_event *);
2613:	static void add_event_to_ctx(struct perf_event *, struct perf_event_context *);
4693:	static struct perf_event_context *alloc_perf_context(struct task_struct *);
11050:	static int cpu_clock_event_add(struct perf_event *, int);
11059:	static void cpu_clock_event_del(struct perf_event *, int);
11069:	static int cpu_clock_event_init(struct perf_event *);
11064:	static void cpu_clock_event_read(struct perf_event *);
11038:	static void cpu_clock_event_start(struct perf_event *, int);
11044:	static void cpu_clock_event_stop(struct perf_event *, int);
4183:	static struct perf_event *ctx_event_to_rotate(struct perf_event_pmu_context *);
3840:	static void ctx_flexible_sched_in(struct perf_event_context *, struct pmu *);
3821:	static void ctx_pinned_sched_in(struct perf_event_context *, struct pmu *);
2665:	static void ctx_resched(struct perf_cpu_context *, struct perf_event_context *, enum event_type_t);
3865:	static void ctx_sched_in(struct perf_event_context *, enum event_type_t);
3242:	static void ctx_sched_out(struct perf_event_context *, enum event_type_t);
217:	static int event_function(void *);
263:	static void event_function_call(struct perf_event *, event_f, void *);
2478:	static int event_sched_in(struct perf_event *, struct perf_event_context *);
2216:	static void event_sched_out(struct perf_event *, struct perf_event_context *);
5095:	static void exclusive_event_destroy(struct perf_event *);
4732:	static struct perf_event_context *find_get_context(struct task_struct *, struct perf_event *);
4805:	static struct perf_event_pmu_context *find_get_pmu_context(struct pmu *, struct perf_event_context *, struct perf_event *);
1170:	static void free_ctx(struct callback_head *);
4887:	static void free_epc_rcu(struct callback_head *);
4929:	static void free_event_rcu(struct callback_head *);
13178:	static struct perf_event *inherit_event(struct perf_event *, struct task_struct *, struct perf_event_context *, struct task_struct *, struct perf_event *, struct perf_event_context *);
13333:	static int inherit_task_group(struct perf_event *, struct task_struct *, struct perf_event_context *, struct task_struct *, u64, int *);
1969:	static void list_del_event(struct perf_event *, struct perf_event_context *);
11250:	static ssize_t nr_addr_filters_show(struct device *, struct device_attribute *, char *);
10544:	static void perf_addr_filters_splice(struct perf_event *, struct list_head *);
4100:	static void perf_adjust_freq_unthr_context(struct perf_event_context *, bool);
4065:	static void perf_adjust_period(struct perf_event *, u64, u64, bool);
13727:	static void perf_cgroup_attach(struct cgroup_taskset *);
13685:	static struct cgroup_subsys_state *perf_cgroup_css_alloc(struct cgroup_subsys_state *);
13702:	static void perf_cgroup_css_free(struct cgroup_subsys_state *);
13710:	static int perf_cgroup_css_online(struct cgroup_subsys_state *);
812:	static void perf_cgroup_set_timestamp(struct perf_cpu_context *);
840:	static void perf_cgroup_switch(struct task_struct *);
11999:	static int perf_copy_attr(struct perf_event_attr *, struct perf_event_attr *);
508:	static void perf_duration_warn(struct irq_work *);
10593:	static void perf_event_addr_filters_apply(struct perf_event *);
11764:	static struct perf_event *perf_event_alloc(struct perf_event_attr *, int, struct task_struct *, struct perf_event *, struct perf_event *, perf_overflow_handler_t, void *, int);
9154:	static void perf_event_bpf_output(struct perf_event *, void *);
8412:	static void perf_event_cgroup_output(struct perf_event *, void *);
8185:	static void perf_event_comm_output(struct perf_event *, void *);
1256:	static struct perf_event_context *perf_event_ctx_lock_nested(struct perf_event *, int);
12915:	static void perf_event_exit_event(struct perf_event *, struct perf_event_context *);
1662:	static void perf_event_groups_insert(struct perf_event_groups *, struct perf_event *);
11237:	static int perf_event_idx_default(struct perf_event *);
13489:	static void perf_event_init_all_cpus(void);
5999:	static void perf_event_init_userpage(struct perf_event *);
9064:	static void perf_event_ksymbol_output(struct perf_event *, void *);
8529:	static void perf_event_mmap_output(struct perf_event *, void *);
3134:	static int perf_event_modify_breakpoint(struct perf_event *, struct perf_event_attr *);
11272:	static ssize_t perf_event_mux_interval_ms_show(struct device *, struct device_attribute *, char *);
11284:	static ssize_t perf_event_mux_interval_ms_store(struct device *, struct device_attribute *, const char *, size_t);
8284:	static void perf_event_namespaces_output(struct perf_event *, void *);
11195:	static int perf_event_nop_int(struct perf_event *, u64);
4591:	static int perf_event_read(struct perf_event *, bool);
12135:	static int perf_event_set_output(struct perf_event *, struct perf_event *);
654:	static void perf_event_set_state(struct perf_event *, enum perf_event_state);
8934:	static void perf_event_switch_output(struct perf_event *, void *);
13655:	static int perf_event_sysfs_init(void);
8081:	static void perf_event_task_output(struct perf_event *, void *);
9262:	static void perf_event_text_poke_output(struct perf_event *, void *);
636:	static void perf_event_update_time(struct perf_event *);
6580:	static int perf_fasync(int, struct file *, int);
7501:	static u64 perf_get_page_size(unsigned long);
2123:	static void perf_group_detach(struct perf_event *);
2789:	static void perf_install_in_context(struct perf_event_context *, struct perf_event *, int);
5916:	static long perf_ioctl(struct file *, unsigned int, unsigned long);
7894:	static void perf_iterate_sb(perf_iterate_f *, void *, struct perf_event_context *);
1359:	static struct perf_event_context *perf_lock_task_context(struct task_struct *, unsigned long *);
9006:	static void perf_log_throttle(struct perf_event *, int);
6364:	static int perf_mmap(struct file *, struct vm_area_struct *);
6246:	static void perf_mmap_close(struct vm_area_struct *);
6082:	static vm_fault_t perf_mmap_fault(struct vm_fault *);
6222:	static void perf_mmap_open(struct vm_area_struct *);
1070:	static enum hrtimer_restart perf_mux_hrtimer_handler(struct hrtimer *);
1127:	static int perf_mux_hrtimer_restart_ipi(void *);
7203:	static void perf_output_read(struct perf_output_handle *, struct perf_event *);
6706:	static void perf_pending_irq(struct irq_work *);
6732:	static void perf_pending_task(struct callback_head *);
11225:	static void perf_pmu_cancel_txn(struct pmu *);
11212:	static int perf_pmu_commit_txn(struct pmu *);
11190:	static int perf_pmu_nop_int(struct pmu *);
11186:	static void perf_pmu_nop_txn(struct pmu *, unsigned int);
11182:	static void perf_pmu_nop_void(struct pmu *);
3594:	static void perf_pmu_sched_task(struct task_struct *, struct task_struct *, bool);
11202:	static void perf_pmu_start_txn(struct pmu *, unsigned int);
5619:	static __poll_t perf_poll(struct file *, poll_table *);
5602:	static ssize_t perf_read(struct file *, char *, size_t, loff_t *);
13595:	static int perf_reboot(struct notifier_block *, unsigned long, void *);
5391:	static int perf_release(struct inode *, struct file *);
5218:	static void perf_remove_from_owner(struct perf_event *);
5044:	static void perf_sched_delayed(struct work_struct *);
9792:	static int perf_swevent_add(struct perf_event *, int);
9815:	static void perf_swevent_del(struct perf_event *, int);
9609:	static void perf_swevent_event(struct perf_event *, u64, struct perf_sample_data *, struct pt_regs *);
10936:	static enum hrtimer_restart perf_swevent_hrtimer(struct hrtimer *);
9929:	static int perf_swevent_init(struct perf_event *);
9788:	static void perf_swevent_read(struct perf_event *);
9820:	static void perf_swevent_start(struct perf_event *, int);
9825:	static void perf_swevent_stop(struct perf_event *, int);
11529:	static int perf_try_init_event(struct pmu *, struct perf_event *);
1428:	static void perf_unpin_context(struct perf_event_context *);
11339:	static int pmu_dev_alloc(struct pmu *);
11334:	static void pmu_dev_release(struct device *);
1178:	static void put_ctx(struct perf_event_context *);
4895:	static void put_pmu_ctx(struct perf_event_pmu_context *);
72:	static void remote_function(void *);
6117:	static void ring_buffer_attach(struct perf_event *, struct perf_buffer *);
9919:	static void sw_perf_event_destroy(struct perf_event *);
11127:	static int task_clock_event_add(struct perf_event *, int);
11136:	static void task_clock_event_del(struct perf_event *, int);
11150:	static int task_clock_event_init(struct perf_event *);
11141:	static void task_clock_event_read(struct perf_event *);
11115:	static void task_clock_event_start(struct perf_event *, int);
11121:	static void task_clock_event_stop(struct perf_event *, int);
11263:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
772:	static void update_cgrp_time_from_cpuctx(struct perf_cpu_context *, bool);
3685:	static int visit_groups_merge(struct perf_event_context *, struct perf_event_groups *, int, struct pmu *, int (*)(struct perf_event *, void *), void *);

File kernel/events/hw_breakpoint.c:
531:	void arch_release_bp_slot(struct perf_event *);
526:	int arch_reserve_bp_slot(struct perf_event *);
538:	void arch_unregister_hw_breakpoint(struct perf_event *);
704:	int dbg_release_bp_slot(struct perf_event *);
689:	int dbg_reserve_bp_slot(struct perf_event *);
923:	bool hw_breakpoint_is_used(void);
1034:	int init_hw_breakpoint(void);
825:	int modify_user_hw_breakpoint(struct perf_event *, struct perf_event_attr *);
789:	int modify_user_hw_breakpoint_check(struct perf_event *, struct perf_event_attr *, bool);
741:	int register_perf_hw_breakpoint(struct perf_event *);
769:	struct perf_event *register_user_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *, struct task_struct *);
870:	struct perf_event **register_wide_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *);
644:	void release_bp_slot(struct perf_event *);
623:	int reserve_bp_slot(struct perf_event *);
853:	void unregister_hw_breakpoint(struct perf_event *);
907:	void unregister_wide_hw_breakpoint(struct perf_event **);
592:	static int __reserve_bp_slot(struct perf_event *, u64);
115:	static struct mutex *bp_constraints_lock(struct perf_event *);
139:	static void bp_constraints_unlock(struct mutex *);
968:	static void bp_perf_event_destroy(struct perf_event *);
995:	static int hw_breakpoint_add(struct perf_event *, int);
1008:	static void hw_breakpoint_del(struct perf_event *, int);
973:	static int hw_breakpoint_event_init(struct perf_event *);
1013:	static void hw_breakpoint_start(struct perf_event *, int);
1018:	static void hw_breakpoint_stop(struct perf_event *, int);
197:	static int init_breakpoint_slots(void);
322:	static int task_bp_pinned(int, struct perf_event *, enum bp_type_idx);
409:	static int toggle_bp_slot(struct perf_event *, bool, enum bp_type_idx, int);

File kernel/events/internal.h:
63:	static void rb_free_rcu(struct callback_head *);

File kernel/events/ring_buffer.c:
364:	void *perf_aux_output_begin(struct perf_output_handle *, struct perf_event *);
480:	void perf_aux_output_end(struct perf_output_handle *, unsigned long);
337:	void perf_aux_output_flag(struct perf_output_handle *, u64);
538:	int perf_aux_output_skip(struct perf_output_handle *, unsigned long);
560:	void *perf_get_aux(struct perf_output_handle *);
947:	struct page *perf_mmap_to_page(struct perf_buffer *, unsigned long);
281:	int perf_output_begin(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
274:	int perf_output_begin_backward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
267:	int perf_output_begin_forward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
290:	unsigned int perf_output_copy(struct perf_output_handle *, const void *, unsigned int);
573:	long perf_output_copy_aux(struct perf_output_handle *, struct perf_output_handle *, unsigned long, unsigned long);
302:	void perf_output_end(struct perf_output_handle *);
296:	unsigned int perf_output_skip(struct perf_output_handle *, unsigned int);
808:	struct perf_buffer *rb_alloc(int, long, int, int);
670:	int rb_alloc_aux(struct perf_buffer *, struct perf_event *, unsigned long, int, long, int);
854:	void rb_free(struct perf_buffer *);
763:	void rb_free_aux(struct perf_buffer *);
643:	static void __rb_free_aux(struct perf_buffer *);
50:	static void perf_output_put_handle(struct perf_output_handle *);

File kernel/exec_domain.c:
38:	long __arm64_sys_personality(const struct pt_regs *);
24:	static int execdomains_proc_show(struct seq_file *, void *);
30:	static int proc_execdomains_init(void);

File kernel/exit.c:
977:	long __arm64_sys_exit(const struct pt_regs *);
1021:	long __arm64_sys_exit_group(const struct pt_regs *);
1792:	long __arm64_sys_wait4(const struct pt_regs *);
1700:	long __arm64_sys_waitid(const struct pt_regs *);
1527:	void __wake_up_parent(struct task_struct *, struct task_struct *);
1901:	void abort(void);
805:	void do_exit(long);
987:	void do_group_exit(int);
344:	int is_current_pgrp_orphaned(void);
1776:	int kernel_wait(pid_t, int *);
1733:	long kernel_wait4(pid_t, int *, int, struct rusage *);
922:	void make_task_dead(int);
442:	void mm_update_next_owner(struct mm_struct *);
228:	void put_task_struct_rcu_user(struct task_struct *);
288:	int rcuwait_wake_up(struct rcuwait *);
238:	void release_task(struct task_struct *);
234:	void release_thread(struct task_struct *);
1886:	bool thread_group_exited(struct pid *);
1511:	static int child_wait_callback(wait_queue_entry_t *, unsigned int, int, void *);
217:	static void delayed_put_task_struct(struct callback_head *);
1573:	static long do_wait(struct wait_opts *);
531:	static void exit_mm(void);
95:	static int kernel_exit_sysctls_init(void);
114:	static int kernel_exit_sysfs_init(void);
373:	static void kill_orphaned_pgrp(struct task_struct *, struct task_struct *);
106:	static ssize_t oops_count_show(struct kobject *, struct kobj_attribute *, char *);
1371:	static int wait_consider_task(struct wait_opts *, int, struct task_struct *);

File kernel/extable.c:
77:	int __kernel_text_address(unsigned long);
66:	int core_kernel_text(unsigned long);
163:	int func_ptr_is_kernel_text(void *);
94:	int kernel_text_address(unsigned long);
54:	const struct exception_table_entry *search_exception_tables(unsigned long);
47:	const struct exception_table_entry *search_kernel_exception_table(unsigned long);
36:	void sort_main_extable(void);

File kernel/fork.c:
2790:	long __arm64_sys_clone(const struct pt_regs *);
2964:	long __arm64_sys_clone3(const struct pt_regs *);
1788:	long __arm64_sys_set_tid_address(const struct pt_regs *);
3271:	long __arm64_sys_unshare(const struct pt_regs *);
1679:	void __cleanup_sighand(struct sighand_struct *);
788:	void __mmdrop(struct mm_struct *);
843:	void __put_task_struct(struct task_struct *);
957:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
162:	void arch_release_task_struct(struct task_struct *);
862:	void arch_task_cache_init(void);
2616:	struct task_struct *create_io_thread(int (*)(void *), void *, int);
1517:	void exec_mm_release(struct task_struct *, struct mm_struct *);
1511:	void exit_mm_release(struct task_struct *, struct mm_struct *);
506:	void exit_task_stack_account(struct task_struct *);
2590:	struct task_struct *fork_idle(int);
910:	void fork_init(void);
536:	void free_task(struct task_struct *);
1352:	struct file *get_mm_exe_file(struct mm_struct *);
1371:	struct file *get_task_exe_file(struct task_struct *);
1395:	struct mm_struct *get_task_mm(struct task_struct *);
2640:	pid_t kernel_clone(struct kernel_clone_args *);
2730:	pid_t kernel_thread(int (*)(void *), void *, unsigned long);
3152:	int ksys_unshare(unsigned long);
1412:	struct mm_struct *mm_access(struct task_struct *, unsigned int);
1187:	struct mm_struct *mm_alloc(void);
3028:	void mm_cache_init(void);
1224:	void mmput(struct mm_struct *);
1242:	void mmput_async(struct mm_struct *);
151:	int nr_processes(void);
1843:	struct pid *pidfd_pid(const struct file *);
3047:	void proc_caches_init(void);
529:	void put_task_stack(struct task_struct *);
1300:	int replace_mm_exe_file(struct mm_struct *, struct file *);
1263:	int set_mm_exe_file(struct mm_struct *, struct file *);
964:	void set_task_stack_end_magic(struct task_struct *);
3300:	int sysctl_max_threads(struct ctl_table *, int, void *, size_t *, loff_t *);
3128:	int unshare_fd(unsigned long, unsigned int, struct files_struct **);
3282:	int unshare_files(void);
2747:	pid_t user_mode_thread(int (*)(void *), void *, unsigned long);
454:	struct vm_area_struct *vm_area_alloc(struct mm_struct *);
464:	struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
482:	void vm_area_free(struct vm_area_struct *);
2984:	void walk_process_tree(struct task_struct *, proc_visitor, void *);
1956:	static void __delayed_free_task(struct callback_head *);
1199:	static void __mmput(struct mm_struct *);
2828:	static int copy_clone_args_from_user(struct kernel_clone_args *, struct clone_args *, size_t);
1627:	static int copy_files(unsigned long, struct task_struct *);
1607:	static int copy_fs(unsigned long, struct task_struct *);
1570:	static int copy_mm(unsigned long, struct task_struct *);
1971:	static void copy_oom_score_adj(u64, struct task_struct *);
2010:	static struct task_struct *copy_process(struct pid *, int, int, struct kernel_clone_args *);
1654:	static int copy_sighand(unsigned long, struct task_struct *);
1703:	static int copy_signal(unsigned long, struct task_struct *);
1077:	static int coredump_filter_setup(char *);
972:	static struct task_struct *dup_task_struct(struct task_struct *, int);
824:	static void free_signal_struct(struct signal_struct *);
2584:	static int idle_dummy(void *);
1120:	static struct mm_struct *mm_init(struct mm_struct *, struct task_struct *, struct user_namespace *);
1478:	static void mm_release(struct task_struct *, struct mm_struct *);
808:	static void mmdrop_async_fn(struct work_struct *);
1234:	static void mmput_async_fn(struct work_struct *);
1930:	static __poll_t pidfd_poll(struct file *, struct poll_table_struct *);
1851:	static int pidfd_release(struct inode *, struct file *);
1896:	static void pidfd_show_fdinfo(struct seq_file *, struct file *);
3020:	static void sighand_ctor(void *);
346:	static void thread_stack_free_rcu(struct callback_head *);

File kernel/freezer.c:
62:	bool __refrigerator(bool);
194:	void __thaw_task(struct task_struct *);
153:	bool freeze_task(struct task_struct *);
38:	bool freezing_slow_path(struct task_struct *);
56:	bool frozen(struct task_struct *);
220:	bool set_freezable(void);
104:	static int __set_task_frozen(struct task_struct *, void *);
178:	static int __set_task_special(struct task_struct *, void *);

File kernel/futex/core.c:
543:	void __futex_queue(struct futex_q *, struct futex_hash_bucket *);
499:	void __futex_unqueue(struct futex_q *);
409:	int fault_in_user_writeable(u32 *);
440:	int futex_cmpxchg_value_locked(u32 *, u32 *, u32, u32);
1098:	void futex_exec_release(struct task_struct *);
1050:	void futex_exit_recursive(struct task_struct *);
1116:	void futex_exit_release(struct task_struct *);
451:	int futex_get_value_locked(u32 *, u32 *);
115:	struct futex_hash_bucket *futex_hash(union futex_key *);
513:	struct futex_hash_bucket *futex_q_lock(struct futex_q *);
536:	void futex_q_unlock(struct futex_hash_bucket *);
135:	struct hrtimer_sleeper *futex_setup_timer(ktime_t *, struct hrtimer_sleeper *, int, u64);
429:	struct futex_q *futex_top_waiter(struct futex_hash_bucket *, union futex_key *);
573:	int futex_unqueue(struct futex_q *);
620:	void futex_unqueue_pi(struct futex_q *);
220:	int get_futex_key(u32 *, bool, union futex_key *, enum futex_access);
469:	void wait_for_owner_exiting(int, struct task_struct *);
943:	static void exit_pi_state_list(struct task_struct *);
773:	static void exit_robust_list(struct task_struct *);
1123:	static int futex_init(void);
637:	static int handle_futex_death(u32 *, struct task_struct *, bool, bool);

File kernel/futex/pi.c:
884:	int fixup_pi_owner(u32 *, struct futex_q *, int);
930:	int futex_lock_pi(u32 *, unsigned int, ktime_t *, int);
514:	int futex_lock_pi_atomic(u32 *, struct futex_hash_bucket *, union futex_key *, struct futex_pi_state **, struct task_struct *, struct task_struct **, int);
1100:	int futex_unlock_pi(u32 *, unsigned int);
68:	void get_pi_state(struct futex_pi_state *);
77:	void put_pi_state(struct futex_pi_state *);
12:	int refill_pi_state_cache(void);
855:	static int fixup_pi_state_owner(u32 *, struct futex_q *, struct task_struct *);
320:	static int handle_exit_race(u32 *, u32, struct task_struct *);
45:	static void pi_state_update_owner(struct futex_pi_state *, struct task_struct *);

File kernel/futex/requeue.c:
364:	int futex_requeue(u32 *, unsigned int, u32 *, int, int, u32 *, int);
762:	int futex_wait_requeue_pi(u32 *, unsigned int, u32, ktime_t *, u32, u32 *);
125:	static void futex_requeue_pi_complete(struct futex_q *, int);
74:	static void requeue_futex(struct futex_q *, struct futex_hash_bucket *, struct futex_hash_bucket *, union futex_key *);
223:	static void requeue_pi_wake_futex(struct futex_q *, union futex_key *, struct futex_hash_bucket *);

File kernel/futex/syscalls.c:
164:	long __arm64_sys_futex(const struct pt_regs *);
246:	long __arm64_sys_futex_waitv(const struct pt_regs *);
49:	long __arm64_sys_get_robust_list(const struct pt_regs *);
29:	long __arm64_sys_set_robust_list(const struct pt_regs *);
85:	long do_futex(u32 *, int, u32, ktime_t *, u32 *, u32, u32);

File kernel/futex/waitwake.c:
632:	int futex_wait(u32 *, unsigned int, u32, ktime_t *, u32);
524:	int futex_wait_multiple(struct futex_vector *, unsigned int, struct hrtimer_sleeper *);
328:	void futex_wait_queue(struct futex_hash_bucket *, struct futex_q *, struct hrtimer_sleeper *);
577:	int futex_wait_setup(u32 *, u32, unsigned int, struct futex_q *, struct futex_hash_bucket **);
143:	int futex_wake(u32 *, unsigned int, int, u32);
115:	void futex_wake_mark(struct wake_q_head *, struct futex_q *);
238:	int futex_wake_op(u32 *, unsigned int, u32 *, int, int, int);
694:	static long futex_wait_restart(struct restart_block *);

File kernel/groups.c:
161:	long __arm64_sys_getgroups(const struct pt_regs *);
198:	long __arm64_sys_setgroups(const struct pt_regs *);
15:	struct group_info *groups_alloc(int);
29:	void groups_free(struct group_info *);
92:	int groups_search(const struct group_info *, kgid_t);
84:	void groups_sort(struct group_info *);
239:	int in_egroup_p(kgid_t);
227:	int in_group_p(kgid_t);
185:	bool may_setgroups(void);
134:	int set_current_groups(struct group_info *);
118:	void set_groups(struct cred *, struct group_info *);
76:	static int gid_cmp(const void *, const void *);

File kernel/iomem.c:
139:	void *devm_memremap(struct device *, resource_size_t, size_t, unsigned long);
162:	void devm_memunmap(struct device *, void *);
71:	void *memremap(resource_size_t, size_t, unsigned long);
122:	void memunmap(void *);
134:	static int devm_memremap_match(struct device *, void *, void *);
129:	static void devm_memremap_release(struct device *, void *);

File kernel/irq/affinity.c:
497:	unsigned int irq_calc_affinity_vectors(unsigned int, unsigned int, const struct irq_affinity *);
417:	struct irq_affinity_desc *irq_create_affinity_masks(unsigned int, struct irq_affinity *);
247:	static int __irq_build_affinity_masks(unsigned int, unsigned int, unsigned int, cpumask_var_t *, const struct cpumask *, struct cpumask *, struct irq_affinity_desc *);
403:	static void default_calc_sets(struct irq_affinity *, unsigned int);
107:	static int ncpus_cmp_func(const void *, const void *);

File kernel/irq/autoprobe.c:
117:	unsigned int probe_irq_mask(unsigned long);
157:	int probe_irq_off(unsigned long);
30:	unsigned long probe_irq_on(void);

File kernel/irq/chip.c:
1046:	void __irq_set_handler(unsigned int, irq_flow_handler_t, int, const char *);
775:	void handle_edge_irq(struct irq_desc *);
689:	void handle_fasteoi_irq(struct irq_desc *);
739:	void handle_fasteoi_nmi(struct irq_desc *);
630:	void handle_level_irq(struct irq_desc *);
460:	void handle_nested_irq(unsigned int);
955:	void handle_percpu_devid_fasteoi_nmi(struct irq_desc *);
912:	void handle_percpu_devid_irq(struct irq_desc *);
882:	void handle_percpu_irq(struct irq_desc *);
540:	void handle_simple_irq(struct irq_desc *);
575:	void handle_untracked_irq(struct irq_desc *);
288:	int irq_activate(struct irq_desc *);
297:	int irq_activate_and_startup(struct irq_desc *, bool);
1370:	void irq_chip_ack_parent(struct irq_data *);
1548:	int irq_chip_compose_msi_msg(struct irq_data *, struct msi_msg *);
1356:	void irq_chip_disable_parent(struct irq_data *);
1341:	void irq_chip_enable_parent(struct irq_data *);
1414:	void irq_chip_eoi_parent(struct irq_data *);
1323:	int irq_chip_get_parent_state(struct irq_data *, enum irqchip_irq_state, bool *);
1392:	void irq_chip_mask_ack_parent(struct irq_data *);
1381:	void irq_chip_mask_parent(struct irq_data *);
1579:	int irq_chip_pm_get(struct irq_data *);
1598:	int irq_chip_pm_put(struct irq_data *);
1530:	void irq_chip_release_resources_parent(struct irq_data *);
1514:	int irq_chip_request_resources_parent(struct irq_data *);
1465:	int irq_chip_retrigger_hierarchy(struct irq_data *);
1429:	int irq_chip_set_affinity_parent(struct irq_data *, const struct cpumask *, bool);
1301:	int irq_chip_set_parent_state(struct irq_data *, enum irqchip_irq_state, bool);
1447:	int irq_chip_set_type_parent(struct irq_data *, unsigned int);
1480:	int irq_chip_set_vcpu_affinity_parent(struct irq_data *, void *);
1496:	int irq_chip_set_wake_parent(struct irq_data *, unsigned int);
1403:	void irq_chip_unmask_parent(struct irq_data *);
385:	void irq_disable(struct irq_desc *);
334:	void irq_enable(struct irq_desc *);
155:	struct irq_data *irq_get_irq_data(unsigned int);
1086:	void irq_modify_status(unsigned int, unsigned long, unsigned long);
399:	void irq_percpu_disable(struct irq_desc *, unsigned int);
390:	void irq_percpu_enable(struct irq_desc *, unsigned int);
1061:	void irq_set_chained_handler_and_data(unsigned int, irq_flow_handler_t, void *);
41:	int irq_set_chip(unsigned int, const struct irq_chip *);
1078:	void irq_set_chip_and_handler_name(unsigned int, const struct irq_chip *, irq_flow_handler_t, const char *);
142:	int irq_set_chip_data(unsigned int, void *);
87:	int irq_set_handler_data(unsigned int, void *);
65:	int irq_set_irq_type(unsigned int, unsigned int);
130:	int irq_set_msi_desc(unsigned int, struct msi_desc *);
108:	int irq_set_msi_desc_off(unsigned int, unsigned int, struct msi_desc *);
306:	void irq_shutdown(struct irq_desc *);
322:	void irq_shutdown_and_deactivate(struct irq_desc *);
254:	int irq_startup(struct irq_desc *, bool, bool);
420:	void mask_irq(struct irq_desc *);
431:	void unmask_irq(struct irq_desc *);
442:	void unmask_threaded_irq(struct irq_desc *);
973:	static void __irq_do_set_handler(struct irq_desc *, irq_flow_handler_t, int, const char *);
22:	static irqreturn_t bad_chained_irq(int, void *);

File kernel/irq/cpuhotplug.c:
218:	int irq_affinity_online_cpu(unsigned int);
155:	void irq_migrate_all_off_this_cpu(void);

File kernel/irq/devres.c:
178:	int __devm_irq_alloc_descs(struct device *, int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
139:	void devm_free_irq(struct device *, unsigned int, void *);
99:	int devm_request_any_context_irq(struct device *, unsigned int, irq_handler_t, unsigned long, const char *, void *);
51:	int devm_request_threaded_irq(struct device *, unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
154:	static void devm_irq_desc_release(struct device *, void *);
25:	static int devm_irq_match(struct device *, void *, void *);
18:	static void devm_irq_release(struct device *, void *);

File kernel/irq/dummychip.c:
18:	static void ack_bad(struct irq_data *);
29:	static void noop(struct irq_data *);
31:	static unsigned int noop_ret(struct irq_data *);

File kernel/irq/handle.c:
139:	irqreturn_t __handle_irq_event_percpu(struct irq_desc *);
61:	void __irq_wake_thread(struct irq_desc *, struct irqaction *);
33:	void handle_bad_irq(struct irq_desc *);
202:	irqreturn_t handle_irq_event(struct irq_desc *);
189:	irqreturn_t handle_irq_event_percpu(struct irq_desc *);
46:	irqreturn_t no_action(int, void *);
52:	static void warn_no_thread(unsigned int, struct irqaction *);

File kernel/irq/ipi.c:
265:	int __ipi_send_mask(struct irq_desc *, const struct cpumask *);
223:	int __ipi_send_single(struct irq_desc *, unsigned int);
163:	irq_hw_number_t ipi_get_hwirq(unsigned int, unsigned int);
330:	int ipi_send_mask(unsigned int, const struct cpumask *);
309:	int ipi_send_single(unsigned int, unsigned int);
115:	int irq_destroy_ipi(unsigned int, const struct cpumask *);
23:	int irq_reserve_ipi(struct irq_domain *, const struct cpumask *);

File kernel/irq/irqdesc.c:
790:	int __irq_alloc_descs(int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
843:	struct irq_desc *__irq_get_desc_lock(unsigned int, unsigned long *, bool, unsigned int);
866:	void __irq_put_desc_unlock(struct irq_desc *, unsigned long, bool);
525:	int early_irq_init(void);
705:	int generic_handle_domain_irq(struct irq_domain *, unsigned int);
723:	int generic_handle_domain_irq_safe(struct irq_domain *, unsigned int);
746:	int generic_handle_domain_nmi(struct irq_domain *, unsigned int);
664:	int generic_handle_irq(unsigned int);
681:	int generic_handle_irq_safe(unsigned int);
640:	int handle_irq_desc(struct irq_desc *);
760:	void irq_free_descs(unsigned int, unsigned int);
837:	unsigned int irq_get_next_irq(unsigned int);
904:	int irq_get_percpu_devid_partition(unsigned int, struct cpumask *);
382:	void irq_lock_sparse(void);
899:	int irq_set_percpu_devid(unsigned int);
874:	int irq_set_percpu_devid_partition(unsigned int, const struct cpumask *);
354:	struct irq_desc *irq_to_desc(unsigned int);
387:	void irq_unlock_sparse(void);
918:	void kstat_incr_irq_this_cpu(unsigned int);
932:	unsigned int kstat_irqs_cpu(unsigned int, int);
973:	unsigned int kstat_irqs_usr(unsigned int);
245:	static ssize_t actions_show(struct kobject *, struct kobj_attribute *, char *);
392:	static struct irq_desc *alloc_desc(int, int, unsigned int, const struct cpumask *, struct module *);
166:	static ssize_t chip_name_show(struct kobject *, struct kobj_attribute *, char *);
437:	static void delayed_free_desc(struct callback_head *);
183:	static ssize_t hwirq_show(struct kobject *, struct kobj_attribute *, char *);
41:	static void init_irq_default_affinity(void);
28:	static int irq_affinity_setup(char *);
428:	static void irq_kobj_release(struct kobject *);
313:	static int irq_sysfs_init(void);
230:	static ssize_t name_show(struct kobject *, struct kobj_attribute *, char *);
146:	static ssize_t per_cpu_count_show(struct kobject *, struct kobj_attribute *, char *);
198:	static ssize_t type_show(struct kobject *, struct kobj_attribute *, char *);
214:	static ssize_t wakeup_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/irq/irqdomain.c:
139:	struct irq_domain *__irq_domain_add(struct fwnode_handle *, unsigned int, irq_hw_number_t, int, const struct irq_domain_ops *, void *);
73:	struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int, int, const char *, phys_addr_t *);
1451:	int __irq_domain_alloc_irqs(struct irq_domain *, int, unsigned int, int, void *, bool, const struct irq_affinity_desc *);
895:	struct irq_desc *__irq_resolve_mapping(struct irq_domain *, irq_hw_number_t, unsigned int *);
760:	unsigned int irq_create_fwspec_mapping(struct irq_fwspec *);
682:	unsigned int irq_create_mapping_affinity(struct irq_domain *, irq_hw_number_t, const struct irq_affinity_desc *);
851:	unsigned int irq_create_of_mapping(struct of_phandle_args *);
866:	void irq_dispose_mapping(unsigned int);
1785:	int irq_domain_activate_irq(struct irq_data *, bool);
368:	struct irq_domain *irq_domain_add_legacy(struct device_node *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
1044:	int irq_domain_alloc_descs(int, unsigned int, irq_hw_number_t, int, const struct irq_affinity_desc *);
1417:	int irq_domain_alloc_irqs_hierarchy(struct irq_domain *, unsigned int, unsigned int, void *);
1716:	int irq_domain_alloc_irqs_parent(struct irq_domain *, unsigned int, unsigned int, void *);
562:	int irq_domain_associate(struct irq_domain *, unsigned int, irq_hw_number_t);
612:	void irq_domain_associate_many(struct irq_domain *, unsigned int, irq_hw_number_t, int);
446:	bool irq_domain_check_msi_remap(void);
1095:	struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *, unsigned int, unsigned int, struct fwnode_handle *, const struct irq_domain_ops *, void *);
380:	struct irq_domain *irq_domain_create_legacy(struct fwnode_handle *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
325:	struct irq_domain *irq_domain_create_simple(struct fwnode_handle *, unsigned int, unsigned int, const struct irq_domain_ops *, void *);
1804:	void irq_domain_deactivate_irq(struct irq_data *);
1209:	int irq_domain_disconnect_hierarchy(struct irq_domain *, unsigned int);
113:	void irq_domain_free_fwnode(struct fwnode_handle *);
1690:	void irq_domain_free_irqs(unsigned int, unsigned int);
1369:	void irq_domain_free_irqs_common(struct irq_domain *, unsigned int, unsigned int);
1734:	void irq_domain_free_irqs_parent(struct irq_domain *, unsigned int, unsigned int);
1390:	void irq_domain_free_irqs_top(struct irq_domain *, unsigned int, unsigned int);
1301:	struct irq_data *irq_domain_get_irq_data(struct irq_domain *, unsigned int);
1824:	bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *);
1624:	int irq_domain_pop_irq(struct irq_domain *, int);
1542:	int irq_domain_push_irq(struct irq_domain *, int, void *);
248:	void irq_domain_remove(struct irq_domain *);
1071:	void irq_domain_reset_irq_data(struct irq_data *);
1323:	int irq_domain_set_hwirq_and_chip(struct irq_domain *, unsigned int, irq_hw_number_t, const struct irq_chip *, void *);
1352:	void irq_domain_set_info(struct irq_domain *, unsigned int, irq_hw_number_t, const struct irq_chip *, void *, irq_flow_handler_t, void *, const char *);
1010:	int irq_domain_translate_onecell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1031:	int irq_domain_translate_twocell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
275:	void irq_domain_update_bus_token(struct irq_domain *, enum irq_domain_bus_token);
944:	int irq_domain_xlate_onecell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
985:	int irq_domain_xlate_onetwocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
963:	int irq_domain_xlate_twocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, irq_hw_number_t *, unsigned int *);
402:	struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *, enum irq_domain_bus_token);
490:	struct irq_domain *irq_get_default_host(void);
473:	void irq_set_default_host(struct irq_domain *);
747:	void of_phandle_args_to_fwspec(struct device_node *, const u32 *, unsigned int, struct irq_fwspec *);
1756:	static int __irq_domain_activate_irq(struct irq_data *, bool);
1744:	static void __irq_domain_deactivate_irq(struct irq_data *);
45:	static const char *irqchip_fwnode_get_name(const struct fwnode_handle *);

File kernel/irq/manage.c:
681:	void __disable_irq(struct irq_desc *);
776:	void __enable_irq(struct irq_desc *);
496:	int __irq_apply_affinity_hint(unsigned int, const struct cpumask *, bool);
2789:	int __irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
946:	int __irq_set_trigger(struct irq_desc *, unsigned long);
2592:	int __request_percpu_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
928:	int can_request_irq(unsigned int, unsigned long);
752:	bool disable_hardirq(unsigned int);
728:	void disable_irq(unsigned int);
710:	void disable_irq_nosync(unsigned int);
771:	void disable_nmi_nosync(unsigned int);
2430:	void disable_percpu_irq(unsigned int);
2444:	void disable_percpu_nmi(unsigned int);
815:	void enable_irq(unsigned int);
841:	void enable_nmi(unsigned int);
2366:	void enable_percpu_irq(unsigned int, unsigned int);
2400:	void enable_percpu_nmi(unsigned int, unsigned int);
2018:	const void *free_irq(unsigned int, void *);
2070:	const void *free_nmi(unsigned int, void *);
2522:	void free_percpu_irq(unsigned int, void *);
2535:	void free_percpu_nmi(unsigned int, void *);
159:	int irq_can_set_affinity(unsigned int);
171:	bool irq_can_set_affinity_usr(unsigned int);
2922:	bool irq_check_status_bit(unsigned int, unsigned int);
212:	int irq_do_set_affinity(struct irq_data *, const struct cpumask *, bool);
490:	int irq_force_affinity(unsigned int, const struct cpumask *);
2826:	int irq_get_irqchip_state(unsigned int, enum irqchip_irq_state, bool *);
2904:	bool irq_has_action(unsigned int);
2412:	bool irq_percpu_is_enabled(unsigned int);
473:	int irq_set_affinity(unsigned int, const struct cpumask *);
347:	int irq_set_affinity_locked(struct irq_data *, const struct cpumask *, bool);
549:	int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
879:	int irq_set_irq_wake(unsigned int, unsigned int);
2859:	int irq_set_irqchip_state(unsigned int, enum irqchip_irq_state, bool);
1002:	int irq_set_parent(int, int);
188:	void irq_set_thread_affinity(struct irq_desc *);
650:	int irq_set_vcpu_affinity(unsigned int, void *);
589:	int irq_setup_affinity(struct irq_desc *);
395:	int irq_update_affinity_desc(unsigned int, struct irq_affinity_desc *);
1337:	void irq_wake_thread(unsigned int, void *);
2726:	int prepare_percpu_nmi(unsigned int);
2502:	void remove_percpu_irq(unsigned int, struct irqaction *);
2246:	int request_any_context_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2296:	int request_nmi(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2658:	int request_percpu_nmi(unsigned int, irq_handler_t, const char *, void *);
2138:	int request_threaded_irq(unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
2555:	int setup_percpu_irq(unsigned int, struct irqaction *);
98:	bool synchronize_hardirq(unsigned int);
126:	void synchronize_irq(unsigned int);
2769:	void teardown_percpu_nmi(unsigned int);
2044:	static const void *__cleanup_nmi(unsigned int, struct irq_desc *);
2452:	static struct irqaction *__free_percpu_irq(unsigned int, void *);
1497:	static int __setup_irq(unsigned int, struct irq_desc *, struct irqaction *);
38:	static void __synchronize_hardirq(struct irq_desc *, bool);
512:	static void irq_affinity_notify(struct work_struct *);
1023:	static irqreturn_t irq_default_primary_handler(int, void *);
1074:	static void irq_finalize_oneshot(struct irq_desc *, struct irqaction *);
1038:	static irqreturn_t irq_forced_secondary_handler(int, void *);
1177:	static irqreturn_t irq_forced_thread_fn(struct irq_desc *, struct irqaction *);
1032:	static irqreturn_t irq_nested_primary_handler(int, void *);
1286:	static int irq_thread(void *);
1219:	static void irq_thread_dtor(struct callback_head *);
1200:	static irqreturn_t irq_thread_fn(struct irq_desc *, struct irqaction *);
30:	static int setup_forced_irqthreads(char *);
1272:	static void wake_up_and_wait_for_irq_thread_ready(struct irq_desc *, struct irqaction *);

File kernel/irq/msi.c:
256:	void __get_cached_msi_msg(struct msi_desc *, struct msi_msg *);
261:	void get_cached_msi_msg(unsigned int, struct msi_msg *);
945:	bool msi_create_device_irq_domain(struct device *, unsigned int, const struct msi_domain_template *, unsigned int, void *, void *);
850:	struct irq_domain *msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
1448:	struct msi_map msi_domain_alloc_irq_at(struct device *, unsigned int, unsigned int, const struct irq_affinity_desc *, union msi_instance_cookie *);
1411:	int msi_domain_alloc_irqs_all_locked(struct device *, unsigned int, int);
1386:	int msi_domain_alloc_irqs_range(struct device *, unsigned int, unsigned int, unsigned int);
1363:	int msi_domain_alloc_irqs_range_locked(struct device *, unsigned int, unsigned int, unsigned int);
376:	struct msi_desc *msi_domain_first_desc(struct device *, unsigned int, enum msi_desc_filter);
1613:	void msi_domain_free_irqs_all(struct device *, unsigned int);
1600:	void msi_domain_free_irqs_all_locked(struct device *, unsigned int);
1581:	void msi_domain_free_irqs_range(struct device *, unsigned int, unsigned int, unsigned int);
1561:	void msi_domain_free_irqs_range_locked(struct device *, unsigned int, unsigned int, unsigned int);
209:	void msi_domain_free_msi_descs_range(struct device *, unsigned int, unsigned int, unsigned int);
431:	unsigned int msi_domain_get_virq(struct device *, unsigned int, unsigned int);
132:	int msi_domain_insert_msi_desc(struct device *, unsigned int, struct msi_desc *);
1073:	int msi_domain_populate_irqs(struct irq_domain *, struct device *, int, int, msi_alloc_info_t *);
1064:	int msi_domain_prepare_irqs(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
647:	int msi_domain_set_affinity(struct irq_data *, const struct cpumask *, bool);
1626:	struct msi_domain_info *msi_get_domain_info(struct irq_domain *);
332:	void msi_lock_descs(struct device *);
1047:	bool msi_match_device_irq_domain(struct device *, unsigned int, enum irq_domain_bus_token);
405:	struct msi_desc *msi_next_desc(struct device *, unsigned int, enum msi_desc_filter);
884:	bool msi_parent_init_dev_msi_info(struct device *, struct irq_domain *, struct irq_domain *, struct msi_domain_info *);
1014:	void msi_remove_device_irq_domain(struct device *, unsigned int);
292:	int msi_setup_device_data(struct device *);
342:	void msi_unlock_descs(struct device *);
808:	static struct irq_domain *__msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, unsigned int, struct irq_domain *);
1229:	static int __msi_domain_alloc_irqs(struct device *, struct irq_domain *, struct msi_ctrl *);
269:	static void msi_device_data_release(struct device *, void *);
664:	static int msi_domain_activate(struct irq_domain *, struct irq_data *, bool);
228:	static int msi_domain_add_simple_msi_descs(struct device *, struct msi_ctrl *);
684:	static int msi_domain_alloc(struct irq_domain *, unsigned int, unsigned int, void *);
1340:	static int msi_domain_alloc_locked(struct device *, struct msi_ctrl *);
675:	static void msi_domain_deactivate(struct irq_domain *, struct irq_data *);
716:	static void msi_domain_free(struct irq_domain *, unsigned int, unsigned int);
180:	static void msi_domain_free_descs(struct device *, struct msi_ctrl *);
1524:	static void msi_domain_free_locked(struct device *, struct msi_ctrl *);
736:	static irq_hw_number_t msi_domain_ops_get_hwirq(struct msi_domain_info *, msi_alloc_info_t *);
755:	static int msi_domain_ops_init(struct irq_domain *, struct msi_domain_info *, unsigned int, irq_hw_number_t, msi_alloc_info_t *);
742:	static int msi_domain_ops_prepare(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
749:	static void msi_domain_ops_set_desc(msi_alloc_info_t *, struct msi_desc *);
84:	static int msi_insert_desc(struct device *, struct msi_desc *, unsigned int, unsigned int);
485:	static ssize_t msi_mode_show(struct device *, struct device_attribute *, char *);

File kernel/irq/proc.c:
451:	int arch_show_interrupts(struct seq_file *, int);
430:	void init_irq_proc(void);
319:	void register_handler_proc(unsigned int, struct irqaction *);
338:	void register_irq_proc(unsigned int, struct irq_desc *);
460:	int show_interrupts(struct seq_file *, void *);
417:	void unregister_handler_proc(unsigned int, struct irqaction *);
393:	void unregister_irq_proc(unsigned int, struct irq_desc *);
266:	static int default_affinity_open(struct inode *, struct file *);
229:	static int default_affinity_show(struct seq_file *, void *);
235:	static ssize_t default_affinity_write(struct file *, const char *, size_t, loff_t *);
83:	static int irq_affinity_hint_proc_show(struct seq_file *, void *);
196:	static int irq_affinity_list_proc_open(struct inode *, struct file *);
109:	static int irq_affinity_list_proc_show(struct seq_file *, void *);
185:	static ssize_t irq_affinity_list_proc_write(struct file *, const char *, size_t, loff_t *);
191:	static int irq_affinity_proc_open(struct inode *, struct file *);
104:	static int irq_affinity_proc_show(struct seq_file *, void *);
179:	static ssize_t irq_affinity_proc_write(struct file *, const char *, size_t, loff_t *);
223:	static int irq_effective_aff_list_proc_show(struct seq_file *, void *);
218:	static int irq_effective_aff_proc_show(struct seq_file *, void *);
279:	static int irq_node_proc_show(struct seq_file *, void *);
288:	static int irq_spurious_proc_show(struct seq_file *, void *);
137:	static ssize_t write_irq_affinity(int, struct file *, const char *, size_t, loff_t *);

File kernel/irq/resend.c:
106:	int check_irq_resend(struct irq_desc *, bool);
30:	static void resend_irqs(struct tasklet_struct *);

File kernel/irq/spurious.c:
36:	bool irq_wait_for_poll(struct irq_desc *);
436:	int noirqdebug_setup(char *);
272:	void note_interrupt(struct irq_desc *, irqreturn_t);
192:	static void __report_bad_irq(struct irq_desc *, irqreturn_t);
448:	static int irqfixup_setup(char *);
464:	static int irqpoll_setup(char *);
118:	static int misrouted_irq(int);
144:	static void poll_spurious_irqs(struct timer_list *);
62:	static int try_one_irq(struct irq_desc *, bool);

File kernel/irq_work.c:
70:	void arch_irq_work_raise(void);
174:	bool irq_work_needs_cpu(void);
106:	bool irq_work_queue(struct irq_work *);
127:	bool irq_work_queue_on(struct irq_work *, int);
249:	void irq_work_run(void);
191:	void irq_work_single(void *);
276:	void irq_work_sync(struct irq_work *);
259:	void irq_work_tick(void);
311:	static int irq_work_init_threads(void);

File kernel/jump_label.c:
321:	void __static_key_deferred_flush(void *, struct delayed_work *);
308:	void __static_key_slow_dec_deferred(struct static_key *, struct delayed_work *, unsigned long);
487:	void jump_label_init(void);
25:	void jump_label_lock(void);
328:	void jump_label_rate_limit(struct static_key_deferred *, unsigned long);
790:	int jump_label_text_reserved(void *, void *);
30:	void jump_label_unlock(void);
287:	void jump_label_update_timeout(struct work_struct *);
104:	int static_key_count(struct static_key *);
240:	void static_key_disable(struct static_key *);
223:	void static_key_disable_cpuslocked(struct static_key *);
215:	void static_key_enable(struct static_key *);
192:	void static_key_enable_cpuslocked(struct static_key *);
127:	bool static_key_fast_inc_not_disabled(struct static_key *);
295:	void static_key_slow_dec(struct static_key *);
302:	void static_key_slow_dec_cpuslocked(struct static_key *);
181:	bool static_key_slow_inc(struct static_key *);
148:	bool static_key_slow_inc_cpuslocked(struct static_key *);
267:	static void __static_key_slow_dec_cpuslocked(struct static_key *);
35:	static int jump_label_cmp(const void *, const void *);
63:	static void jump_label_swap(void *, void *, int);
805:	static void jump_label_update(struct static_key *);

File kernel/kallsyms.c:
663:	int arch_get_kallsym(unsigned int, unsigned long *, char *, char *);
932:	int bpf_iter_ksym(struct bpf_iter_meta *, struct kallsym_iter *);
453:	const char *kallsyms_lookup(unsigned long, unsigned long *, unsigned long *, char **, char *);
271:	unsigned long kallsyms_lookup_name(const char *);
391:	int kallsyms_lookup_size_offset(unsigned long, unsigned long *, unsigned long *);
310:	int kallsyms_on_each_match_symbol(int (*)(void *, unsigned long), const char *, void *);
291:	int kallsyms_on_each_symbol(int (*)(void *, const char *, struct module *, unsigned long), void *);
983:	bool kallsyms_show_value(const struct cred *);
149:	unsigned long kallsyms_sym_address(int);
488:	int lookup_symbol_attrs(unsigned long, unsigned long *, unsigned long *, char *, char *);
462:	int lookup_symbol_name(unsigned long, char *);
622:	int sprint_backtrace(char *, unsigned long);
642:	int sprint_backtrace_build_id(char *, unsigned long);
568:	int sprint_symbol(char *, unsigned long);
585:	int sprint_symbol_build_id(char *, unsigned long);
602:	int sprint_symbol_no_offset(char *, unsigned long);
517:	static int __sprint_symbol(char *, unsigned long, int, int, int);
918:	static int bpf_iter_ksym_init(void *, struct bpf_iter_aux_info *);
898:	static int bpf_iter_ksym_seq_show(struct seq_file *, void *);
903:	static void bpf_iter_ksym_seq_stop(struct seq_file *, void *);
955:	static int bpf_ksym_iter_register(void);
328:	static unsigned long get_symbol_pos(unsigned long, unsigned long *, unsigned long *);
1048:	static int kallsyms_init(void);
404:	static const char *kallsyms_lookup_buildid(unsigned long, unsigned long *, unsigned long *, char **, const unsigned char **, char *);
214:	static int kallsyms_lookup_names(const char *, unsigned int *, unsigned int *);
1000:	static int kallsyms_open(struct inode *, struct file *);
820:	static void *s_next(struct seq_file *, void *, loff_t *);
840:	static int s_show(struct seq_file *, void *);
829:	static void *s_start(struct seq_file *, loff_t *);
836:	static void s_stop(struct seq_file *, void *);
804:	static int update_iter(struct kallsym_iter *, loff_t);

File kernel/kcmp.c:
135:	long __arm64_sys_kcmp(const struct pt_regs *);
228:	static int kcmp_cookies_init(void);

File kernel/ksysfs.c:
47:	static ssize_t cpu_byteorder_show(struct kobject *, struct kobj_attribute *, char *);
163:	static ssize_t fscaps_show(struct kobject *, struct kobj_attribute *, char *);
261:	static int ksysfs_init(void);
213:	static ssize_t notes_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
77:	static ssize_t profiling_show(struct kobject *, struct kobj_attribute *, char *);
82:	static ssize_t profiling_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
172:	static ssize_t rcu_expedited_show(struct kobject *, struct kobj_attribute *, char *);
177:	static ssize_t rcu_expedited_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
189:	static ssize_t rcu_normal_show(struct kobject *, struct kobj_attribute *, char *);
194:	static ssize_t rcu_normal_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
39:	static ssize_t uevent_seqnum_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/kthread.c:
756:	void __kthread_init_worker(struct kthread_worker *, const char *, struct lock_class_key *);
161:	bool __kthread_should_park(struct task_struct *);
129:	void free_kthread_struct(struct task_struct *);
98:	void get_kthread_comm(char *, size_t, struct task_struct *);
1488:	void kthread_associate_blkcg(struct cgroup_subsys_state *);
554:	void kthread_bind(struct task_struct *, unsigned int);
540:	void kthread_bind_mask(struct task_struct *, const struct cpumask *);
1514:	struct cgroup_subsys_state *kthread_blkcg(void);
1353:	bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *);
1338:	bool kthread_cancel_work_sync(struct kthread_work *);
321:	void kthread_complete_and_exit(struct completion *, long);
570:	struct task_struct *kthread_create_on_cpu(int (*)(void *), void *, unsigned int, const char *);
503:	struct task_struct *kthread_create_on_node(int (*)(void *), void *, int, const char *, ...);
883:	struct kthread_worker *kthread_create_worker(unsigned int, const char *, ...);
932:	struct kthread_worker *kthread_create_worker_on_cpu(int, unsigned int, const char *, ...);
232:	void *kthread_data(struct task_struct *);
1019:	void kthread_delayed_work_timer_fn(struct timer_list *);
1386:	void kthread_destroy_worker(struct kthread_worker *);
302:	void kthread_exit(long);
1129:	void kthread_flush_work(struct kthread_work *);
1366:	void kthread_flush_worker(struct kthread_worker *);
193:	bool kthread_freezable_should_stop(bool *);
215:	void *kthread_func(struct task_struct *);
604:	bool kthread_is_per_cpu(struct task_struct *);
1238:	bool kthread_mod_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
652:	int kthread_park(struct task_struct *);
286:	void kthread_parkme(void);
247:	void *kthread_probe_data(struct task_struct *);
1091:	bool kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
995:	bool kthread_queue_work(struct kthread_worker *, struct kthread_work *);
587:	void kthread_set_per_cpu(struct task_struct *, int);
178:	bool kthread_should_park(void);
155:	bool kthread_should_stop(void);
696:	int kthread_stop(struct task_struct *);
621:	void kthread_unpark(struct task_struct *);
1450:	void kthread_unuse_mm(struct mm_struct *);
1405:	void kthread_use_mm(struct mm_struct *);
783:	int kthread_worker_fn(void *);
718:	int kthreadd(void *);
110:	bool set_kthread_struct(struct task_struct *);
382:	int tsk_fork_get_node(struct task_struct *);
1285:	static bool __kthread_cancel_work_sync(struct kthread_work *, bool);
414:	static struct task_struct *__kthread_create_on_node(int (*)(void *), void *, int, const char *, va_list);
257:	static void __kthread_parkme(struct kthread *);
1047:	static void __kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
330:	static int kthread(void *);
1116:	static void kthread_flush_work_fn(struct kthread_work *);

File kernel/locking/mutex.c:
46:	void __mutex_init(struct mutex *, const char *, struct lock_class_key *);
1136:	int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *);
89:	bool mutex_is_locked(struct mutex *);
281:	void mutex_lock(struct mutex *);
977:	int mutex_lock_interruptible(struct mutex *);
1022:	void mutex_lock_io(struct mutex *);
1001:	int mutex_lock_killable(struct mutex *);
1081:	int mutex_trylock(struct mutex *);
537:	void mutex_unlock(struct mutex *);
1097:	int ww_mutex_lock(struct ww_mutex *, struct ww_acquire_ctx *);
1112:	int ww_mutex_lock_interruptible(struct ww_mutex *, struct ww_acquire_ctx *);
770:	int ww_mutex_trylock(struct ww_mutex *, struct ww_acquire_ctx *);
558:	void ww_mutex_unlock(struct ww_mutex *);
744:	static int __mutex_lock(struct mutex *, unsigned int, unsigned int, struct lockdep_map *, unsigned long);
1045:	static int __mutex_lock_interruptible_slowpath(struct mutex *);
1039:	static int __mutex_lock_killable_slowpath(struct mutex *);
1033:	static void __mutex_lock_slowpath(struct mutex *);
901:	static void __mutex_unlock_slowpath(struct mutex *, unsigned long);
751:	static int __ww_mutex_lock(struct mutex *, unsigned int, unsigned int, unsigned long, struct ww_acquire_ctx *);
1058:	static int __ww_mutex_lock_interruptible_slowpath(struct ww_mutex *, struct ww_acquire_ctx *);
1051:	static int __ww_mutex_lock_slowpath(struct ww_mutex *, struct ww_acquire_ctx *);
352:	static bool mutex_spin_on_owner(struct mutex *, struct task_struct *, struct ww_acquire_ctx *, struct mutex_waiter *);

File kernel/locking/osq_lock.c:
90:	bool osq_lock(struct optimistic_spin_queue *);
207:	void osq_unlock(struct optimistic_spin_queue *);
42:	static struct optimistic_spin_node *osq_wait_next(struct optimistic_spin_queue *, struct optimistic_spin_node *, struct optimistic_spin_node *);

File kernel/locking/percpu-rwsem.c:
167:	bool __percpu_down_read(struct percpu_rw_semaphore *, bool);
14:	int __percpu_init_rwsem(struct percpu_rw_semaphore *, const char *, struct lock_class_key *);
224:	void percpu_down_write(struct percpu_rw_semaphore *);
33:	void percpu_free_rwsem(struct percpu_rw_semaphore *);
195:	bool percpu_is_read_locked(struct percpu_rw_semaphore *);
254:	void percpu_up_write(struct percpu_rw_semaphore *);
48:	static bool __percpu_down_read_trylock(struct percpu_rw_semaphore *);
141:	static void percpu_rwsem_wait(struct percpu_rw_semaphore *, bool);
119:	static int percpu_rwsem_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File kernel/locking/qrwlock.c:
21:	void queued_read_lock_slowpath(struct qrwlock *);
66:	void queued_write_lock_slowpath(struct qrwlock *);

File kernel/locking/qspinlock.c:
316:	void queued_spin_lock_slowpath(struct qspinlock *, u32);

File kernel/locking/rtmutex.c:
1231:	static void mark_wakeup_next_waiter(struct rt_wake_q_head *, struct rt_mutex_base *);
1456:	static void remove_waiter(struct rt_mutex_base *, struct rt_mutex_waiter *);
613:	static int rt_mutex_adjust_prio_chain(struct task_struct *, enum rtmutex_chainwalk, struct rt_mutex_base *, struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
1674:	static int rt_mutex_slowlock(struct rt_mutex_base *, struct ww_acquire_ctx *, unsigned int);
1520:	static int rt_mutex_slowlock_block(struct rt_mutex_base *, struct ww_acquire_ctx *, unsigned int, struct hrtimer_sleeper *, struct rt_mutex_waiter *);
1291:	static int rt_mutex_slowtrylock(struct rt_mutex_base *);
1328:	static void rt_mutex_slowunlock(struct rt_mutex_base *);
1124:	static int task_blocks_on_rt_mutex(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *, struct ww_acquire_ctx *, enum rtmutex_chainwalk);
1008:	static int try_to_take_rt_mutex(struct rt_mutex_base *, struct task_struct *, struct rt_mutex_waiter *);

File kernel/locking/rtmutex_api.c:
153:	int __rt_mutex_futex_trylock(struct rt_mutex_base *);
165:	bool __rt_mutex_futex_unlock(struct rt_mutex_base *, struct rt_wake_q_head *);
213:	void __rt_mutex_init(struct rt_mutex *, const char *, struct lock_class_key *);
292:	int __rt_mutex_start_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
453:	void rt_mutex_adjust_pi(struct task_struct *);
37:	void rt_mutex_base_init(struct rt_mutex_base *);
411:	bool rt_mutex_cleanup_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *);
148:	int rt_mutex_futex_trylock(struct rt_mutex_base *);
188:	void rt_mutex_futex_unlock(struct rt_mutex_base *);
236:	void rt_mutex_init_proxy_locked(struct rt_mutex_base *, struct task_struct *);
69:	void rt_mutex_lock(struct rt_mutex *);
85:	int rt_mutex_lock_interruptible(struct rt_mutex *);
100:	int rt_mutex_lock_killable(struct rt_mutex *);
479:	void rt_mutex_postunlock(struct rt_wake_q_head *);
267:	void rt_mutex_proxy_unlock(struct rt_mutex_base *);
339:	int rt_mutex_start_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
118:	int rt_mutex_trylock(struct rt_mutex *);
138:	void rt_mutex_unlock(struct rt_mutex *);
371:	int rt_mutex_wait_proxy_lock(struct rt_mutex_base *, struct hrtimer_sleeper *, struct rt_mutex_waiter *);

File kernel/locking/rwsem.c:
313:	void __init_rwsem(struct rw_semaphore *, const char *, struct lock_class_key *);
1506:	void down_read(struct rw_semaphore *);
1515:	int down_read_interruptible(struct rw_semaphore *);
1529:	int down_read_killable(struct rw_semaphore *);
1546:	int down_read_trylock(struct rw_semaphore *);
1559:	void down_write(struct rw_semaphore *);
1570:	int down_write_killable(struct rw_semaphore *);
1588:	int down_write_trylock(struct rw_semaphore *);
1622:	void downgrade_write(struct rw_semaphore *);
1602:	void up_read(struct rw_semaphore *);
1612:	void up_write(struct rw_semaphore *);
1255:	static int __down_read_common(struct rw_semaphore *, int);
1116:	static struct rw_semaphore *rwsem_down_write_slowpath(struct rw_semaphore *, int);
414:	static void rwsem_mark_wake(struct rw_semaphore *, enum rwsem_wake_type, struct wake_q_head *);
753:	static enum owner_state rwsem_spin_on_owner(struct rw_semaphore *);

File kernel/locking/semaphore.c:
54:	void down(struct semaphore *);
77:	int down_interruptible(struct semaphore *);
104:	int down_killable(struct semaphore *);
159:	int down_timeout(struct semaphore *, long);
134:	int down_trylock(struct semaphore *);
183:	void up(struct semaphore *);
252:	static void __down(struct semaphore *);
257:	static int __down_interruptible(struct semaphore *);
262:	static int __down_killable(struct semaphore *);
267:	static int __down_timeout(struct semaphore *, long);
272:	static void __up(struct semaphore *);

File kernel/locking/spinlock.c:
226:	void _raw_read_lock(rwlock_t *);
250:	void _raw_read_lock_bh(rwlock_t *);
242:	void _raw_read_lock_irq(rwlock_t *);
234:	unsigned long _raw_read_lock_irqsave(rwlock_t *);
218:	int _raw_read_trylock(rwlock_t *);
258:	void _raw_read_unlock(rwlock_t *);
282:	void _raw_read_unlock_bh(rwlock_t *);
274:	void _raw_read_unlock_irq(rwlock_t *);
266:	void _raw_read_unlock_irqrestore(rwlock_t *, unsigned long);
152:	void _raw_spin_lock(raw_spinlock_t *);
176:	void _raw_spin_lock_bh(raw_spinlock_t *);
168:	void _raw_spin_lock_irq(raw_spinlock_t *);
160:	unsigned long _raw_spin_lock_irqsave(raw_spinlock_t *);
136:	int _raw_spin_trylock(raw_spinlock_t *);
144:	int _raw_spin_trylock_bh(raw_spinlock_t *);
184:	void _raw_spin_unlock(raw_spinlock_t *);
208:	void _raw_spin_unlock_bh(raw_spinlock_t *);
200:	void _raw_spin_unlock_irq(raw_spinlock_t *);
192:	void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
298:	void _raw_write_lock(rwlock_t *);
332:	void _raw_write_lock_bh(rwlock_t *);
324:	void _raw_write_lock_irq(rwlock_t *);
316:	unsigned long _raw_write_lock_irqsave(rwlock_t *);
308:	void _raw_write_lock_nested(rwlock_t *, int);
290:	int _raw_write_trylock(rwlock_t *);
340:	void _raw_write_unlock(rwlock_t *);
364:	void _raw_write_unlock_bh(rwlock_t *);
356:	void _raw_write_unlock_irq(rwlock_t *);
348:	void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
407:	int in_lock_functions(unsigned long);

File kernel/locking/ww_mutex.h:
355:	static void __ww_mutex_check_waiters(struct mutex *, struct ww_acquire_ctx *);

File kernel/notifier.c:
219:	int atomic_notifier_call_chain(struct atomic_notifier_head *, unsigned long, void *);
241:	bool atomic_notifier_call_chain_is_empty(struct atomic_notifier_head *);
143:	int atomic_notifier_chain_register(struct atomic_notifier_head *, struct notifier_block *);
166:	int atomic_notifier_chain_register_unique_prio(struct atomic_notifier_head *, struct notifier_block *);
188:	int atomic_notifier_chain_unregister(struct atomic_notifier_head *, struct notifier_block *);
370:	int blocking_notifier_call_chain(struct blocking_notifier_head *, unsigned long, void *);
335:	int blocking_notifier_call_chain_robust(struct blocking_notifier_head *, unsigned long, unsigned long, void *);
281:	int blocking_notifier_chain_register(struct blocking_notifier_head *, struct notifier_block *);
298:	int blocking_notifier_chain_register_unique_prio(struct blocking_notifier_head *, struct notifier_block *);
315:	int blocking_notifier_chain_unregister(struct blocking_notifier_head *, struct notifier_block *);
580:	int notify_die(enum die_val, const char *, struct pt_regs *, long, int, int);
452:	int raw_notifier_call_chain(struct raw_notifier_head *, unsigned long, void *);
428:	int raw_notifier_call_chain_robust(struct raw_notifier_head *, unsigned long, unsigned long, void *);
404:	int raw_notifier_chain_register(struct raw_notifier_head *, struct notifier_block *);
421:	int raw_notifier_chain_unregister(struct raw_notifier_head *, struct notifier_block *);
597:	int register_die_notifier(struct notifier_block *);
567:	void srcu_init_notifier_head(struct srcu_notifier_head *);
542:	int srcu_notifier_call_chain(struct srcu_notifier_head *, unsigned long, void *);
475:	int srcu_notifier_chain_register(struct srcu_notifier_head *, struct notifier_block *);
505:	int srcu_notifier_chain_unregister(struct srcu_notifier_head *, struct notifier_block *);
603:	int unregister_die_notifier(struct notifier_block *);
22:	static int notifier_chain_register(struct notifier_block **, struct notifier_block *, bool);

File kernel/nsproxy.c:
546:	long __arm64_sys_setns(const struct pt_regs *);
151:	int copy_namespaces(unsigned long, struct task_struct *);
259:	int exec_task_namespaces(void);
254:	void exit_task_namespaces(struct task_struct *);
190:	void free_nsproxy(struct nsproxy *);
588:	int nsproxy_cache_init(void);
239:	void switch_task_namespaces(struct task_struct *, struct nsproxy *);
213:	int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **, struct cred *, struct fs_struct *);
67:	static struct nsproxy *create_new_namespaces(unsigned long, struct task_struct *, struct user_namespace *, struct fs_struct *);

File kernel/panic.c:
743:	void __stack_chk_fail(void);
643:	void __warn(const char *, int, void *, unsigned int, struct pt_regs *, struct warn_args *);
699:	void __warn_printk(const char *, ...);
525:	void add_taint(unsigned int, enum lockdep_ok);
233:	void check_panic_on_warn(const char *);
164:	void crash_smp_send_stop(void);
512:	unsigned long get_taint(void);
192:	void nmi_panic(struct pt_regs *, const char *);
153:	void nmi_panic_self_stop(struct pt_regs *);
611:	void oops_enter(void);
631:	void oops_exit(void);
592:	bool oops_may_print(void);
254:	void panic(const char *, ...);
143:	void panic_smp_self_stop(void);
483:	const char *print_tainted(void);
506:	int test_taint(unsigned int);
723:	static int clear_warn_once_fops_open(struct inode *, struct file *);
716:	static int clear_warn_once_set(void *, u64);
553:	static void do_oops_enter_exit(void);
104:	static int kernel_panic_sysctls_init(void);
123:	static int kernel_panic_sysfs_init(void);
131:	static long no_blink(int);
760:	static int oops_setup(char *);
770:	static int panic_on_taint_setup(char *);
206:	static void panic_print_sys_info(bool);
726:	static int register_warn_debugfs(void);
115:	static ssize_t warn_count_show(struct kobject *, struct kobj_attribute *, char *);

File kernel/params.c:
855:	ssize_t __modver_version_show(struct module_attribute *, struct module_kobject *, char *);
752:	void destroy_params(const struct kernel_param *, unsigned int);
602:	void kernel_param_lock(struct module *);
607:	void kernel_param_unlock(struct module *);
293:	void param_free_charp(void *);
317:	int param_get_bool(char *, const struct kernel_param *);
236:	int param_get_byte(char *, const struct kernel_param *);
287:	int param_get_charp(char *, const struct kernel_param *);
244:	int param_get_hexint(char *, const struct kernel_param *);
239:	int param_get_int(char *, const struct kernel_param *);
377:	int param_get_invbool(char *, const struct kernel_param *);
241:	int param_get_long(char *, const struct kernel_param *);
237:	int param_get_short(char *, const struct kernel_param *);
524:	int param_get_string(char *, const struct kernel_param *);
240:	int param_get_uint(char *, const struct kernel_param *);
243:	int param_get_ullong(char *, const struct kernel_param *);
242:	int param_get_ulong(char *, const struct kernel_param *);
238:	int param_get_ushort(char *, const struct kernel_param *);
389:	int param_set_bint(const char *, const struct kernel_param *);
307:	int param_set_bool(const char *, const struct kernel_param *);
331:	int param_set_bool_enable_only(const char *, const struct kernel_param *);
236:	int param_set_byte(const char *, const struct kernel_param *);
264:	int param_set_charp(const char *, const struct kernel_param *);
510:	int param_set_copystring(const char *, const struct kernel_param *);
244:	int param_set_hexint(const char *, const struct kernel_param *);
239:	int param_set_int(const char *, const struct kernel_param *);
363:	int param_set_invbool(const char *, const struct kernel_param *);
241:	int param_set_long(const char *, const struct kernel_param *);
237:	int param_set_short(const char *, const struct kernel_param *);
240:	int param_set_uint(const char *, const struct kernel_param *);
246:	int param_set_uint_minmax(const char *, const struct kernel_param *, unsigned int, unsigned int);
243:	int param_set_ullong(const char *, const struct kernel_param *);
242:	int param_set_ulong(const char *, const struct kernel_param *);
238:	int param_set_ushort(const char *, const struct kernel_param *);
95:	bool parameq(const char *, const char *);
84:	bool parameqn(const char *, const char *, size_t);
161:	char *parse_args(const char *, char *, const struct kernel_param *, unsigned int, s16, s16, void *, int (*)(char *, char *, const char *, void *));
625:	static int add_sysfs_param(struct module_kobject *, const struct kernel_param *, const char *);
796:	static void kernel_add_sysfs_param(const char *, const struct kernel_param *, unsigned int);
761:	static struct module_kobject *locate_module_kobject(const char *);
886:	static ssize_t module_attr_show(struct kobject *, struct attribute *, char *);
905:	static ssize_t module_attr_store(struct kobject *, struct attribute *, const char *, size_t);
944:	static void module_kobj_release(struct kobject *);
493:	static void param_array_free(void *);
472:	static int param_array_get(char *, const struct kernel_param *);
462:	static int param_array_set(const char *, const struct kernel_param *);
557:	static ssize_t param_attr_show(struct module_attribute *, struct module_kobject *, char *);
573:	static ssize_t param_attr_store(struct module_attribute *, struct module_kobject *, const char *, size_t);
830:	static void param_sysfs_builtin(void);
979:	static int param_sysfs_builtin_init(void);
962:	static int param_sysfs_init(void);
929:	static int uevent_filter(const struct kobject *);
867:	static void version_sysfs_builtin(void);

File kernel/pid.c:
724:	long __arm64_sys_pidfd_getfd(const struct pt_regs *);
629:	long __arm64_sys_pidfd_open(const struct pt_regs *);
492:	pid_t __task_pid_nr_ns(struct task_struct *, enum pid_type, struct pid_namespace *);
159:	struct pid *alloc_pid(struct pid_namespace *, pid_t *, size_t);
331:	void attach_pid(struct task_struct *, enum pid_type);
361:	void change_pid(struct task_struct *, enum pid_type, struct pid *);
356:	void detach_pid(struct task_struct *, enum pid_type);
302:	void disable_pid_allocation(struct pid_namespace *);
368:	void exchange_tids(struct task_struct *, struct task_struct *);
518:	struct pid *find_ge_pid(int, struct pid_namespace *);
460:	struct pid *find_get_pid(pid_t);
425:	struct task_struct *find_get_task_by_vpid(pid_t);
309:	struct pid *find_pid_ns(int, struct pid_namespace *);
413:	struct task_struct *find_task_by_pid_ns(pid_t, struct pid_namespace *);
420:	struct task_struct *find_task_by_vpid(pid_t);
315:	struct pid *find_vpid(int);
126:	void free_pid(struct pid *);
448:	struct task_struct *get_pid_task(struct pid *, enum pid_type);
438:	struct pid *get_task_pid(struct task_struct *, enum pid_type);
650:	void pid_idr_init(void);
472:	pid_t pid_nr_ns(struct pid *, struct pid_namespace *);
396:	struct task_struct *pid_task(struct pid *, enum pid_type);
486:	pid_t pid_vnr(struct pid *);
595:	int pidfd_create(struct pid *, unsigned int);
524:	struct pid *pidfd_get_pid(unsigned int, unsigned int *);
560:	struct task_struct *pidfd_get_task(int, unsigned int *);
105:	void put_pid(struct pid *);
507:	struct pid_namespace *task_active_pid_ns(struct task_struct *);
388:	void transfer_pid(struct task_struct *, struct task_struct *, enum pid_type);
120:	static void delayed_put_pid(struct callback_head *);

File kernel/pid_namespace.c:
142:	struct pid_namespace *copy_pid_ns(unsigned long, struct user_namespace *, struct pid_namespace *);
152:	void put_pid_ns(struct pid_namespace *);
300:	int reboot_pid_ns(struct pid_namespace *, int);
166:	void zap_pid_ns_processes(struct pid_namespace *);
124:	static void delayed_free_pidns(struct callback_head *);
451:	static int pid_namespaces_init(void);
347:	static struct ns_common *pidns_for_children_get(struct task_struct *);
334:	static struct ns_common *pidns_get(struct task_struct *);
407:	static struct ns_common *pidns_get_parent(struct ns_common *);
375:	static int pidns_install(struct nsset *, struct ns_common *);
425:	static struct user_namespace *pidns_owner(struct ns_common *);
370:	static void pidns_put(struct ns_common *);

File kernel/power/poweroff.c:
19:	static void do_poweroff(struct work_struct *);
26:	static void handle_poweroff(int);
39:	static int pm_sysrq_init(void);

File kernel/power/process.c:
165:	int freeze_kernel_threads(void);
121:	int freeze_processes(void);
217:	void thaw_kernel_threads(void);
179:	void thaw_processes(void);
28:	static int try_to_freeze_tasks(bool);

File kernel/power/qos.c:
433:	void freq_constraints_init(struct freq_constraints *);
615:	int freq_qos_add_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
528:	int freq_qos_add_request(struct freq_constraints *, struct freq_qos_request *, enum freq_qos_req_type, s32);
493:	int freq_qos_apply(struct freq_qos_request *, enum pm_qos_req_action, s32);
461:	s32 freq_qos_read_value(struct freq_constraints *, enum freq_qos_req_type);
648:	int freq_qos_remove_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
590:	int freq_qos_remove_request(struct freq_qos_request *);
564:	int freq_qos_update_request(struct freq_qos_request *, s32);
53:	s32 pm_qos_read_value(struct pm_qos_constraints *);
174:	bool pm_qos_update_flags(struct pm_qos_flags *, struct pm_qos_flags_request *, enum pm_qos_req_action, s32);
98:	int pm_qos_update_target(struct pm_qos_constraints *, struct plist_node *, enum pm_qos_req_action, int);

File kernel/printk/printk.c:
1853:	long __arm64_sys_syslog(const struct pt_regs *);
4187:	void __printk_cpu_sync_put(void);
4135:	int __printk_cpu_sync_try_get(void);
4116:	void __printk_cpu_sync_wait(void);
3809:	int __printk_ratelimit(const char *);
2374:	int _printk(const char *, ...);
3789:	int _printk_deferred(const char *, ...);
2570:	int add_preferred_console(char *, int, char *);
2998:	void console_conditional_schedule(void);
3081:	struct tty_driver *console_device(int *);
3045:	void console_flush_on_panic(enum con_flush_mode);
3500:	void console_force_preferred_locked(struct console *);
3542:	void console_init(void);
249:	void console_list_lock(void);
273:	void console_list_unlock(void);
2654:	void console_lock(void);
288:	int console_srcu_read_lock(void);
301:	void console_srcu_read_unlock(int);
3130:	void console_start(struct console *);
3113:	void console_stop(struct console *);
2674:	int console_trylock(void);
3005:	void console_unblank(void);
2938:	void console_unlock(void);
2591:	void console_verbose(void);
3765:	void defer_console_output(void);
204:	int devkmsg_sysctl_set_loglvl(struct ctl_table *, int, void *, size_t *, loff_t *);
1740:	int do_syslog(int, char *, int, int);
2688:	int is_console_locked(void);
3923:	void kmsg_dump(enum kmsg_dump_reason);
4023:	bool kmsg_dump_get_buffer(struct kmsg_dump_iter *, bool, char *, size_t, size_t *);
3965:	bool kmsg_dump_get_line(struct kmsg_dump_iter *, bool, char *, size_t, size_t *);
3898:	const char *kmsg_dump_reason_str(enum kmsg_dump_reason);
3848:	int kmsg_dump_register(struct kmsg_dumper *);
4097:	void kmsg_dump_rewind(struct kmsg_dump_iter *);
3877:	int kmsg_dump_unregister(struct kmsg_dumper *);
550:	char *log_buf_addr_get(void);
556:	u32 log_buf_len_get(void);
2145:	u16 printk_parse_prefix(const char *, int *, enum printk_info_flags *);
519:	bool printk_percpu_data_ready(void);
3824:	bool printk_timed_ratelimit(unsigned long *, unsigned int);
3774:	void printk_trigger_flush(void);
3312:	void register_console(struct console *);
2617:	void resume_console(void);
1155:	void setup_log_buf(int);
2606:	void suspend_console(void);
3483:	int unregister_console(struct console *);
2368:	int vprintk_default(const char *, va_list);
3779:	int vprintk_deferred(const char *, va_list);
2318:	int vprintk_emit(int, int, const struct dev_printk_info *, const char *, va_list);
2205:	int vprintk_store(int, int, const struct dev_printk_info *, const char *, va_list);
3760:	void wake_up_klogd(void);
2461:	static int __add_preferred_console(char *, int, char *, char *, bool);
3622:	static bool __pr_flush(struct console *, int, bool);
3735:	static void __wake_up_klogd(int);
1128:	static unsigned int add_to_rb(struct printk_ringbuffer *, struct printk_record *);
2636:	static int console_cpu_notify(unsigned int);
2769:	static bool console_emit_next_record(struct console *, char *, char *, char *, bool *, int);
2859:	static bool console_flush_all(bool, u64 *, bool *);
2494:	static int console_msg_format_setup(char *);
2508:	static int console_setup(char *);
2578:	static int console_suspend_disable(char *);
174:	static int control_devkmsg(char *);
727:	static int devkmsg_emit(int, int, const char *, ...);
876:	static loff_t devkmsg_llseek(struct file *, loff_t, int);
931:	static int devkmsg_open(struct inode *, struct file *);
909:	static __poll_t devkmsg_poll(struct file *, poll_table *);
801:	static ssize_t devkmsg_read(struct file *, char *, size_t, loff_t *);
965:	static int devkmsg_release(struct inode *, struct file *);
739:	static ssize_t devkmsg_write(struct kiocb *, struct iov_iter *);
1538:	static u64 find_first_fitting_seq(u64, u64, size_t, bool, bool);
1273:	static int ignore_loglevel_setup(char *);
3141:	static int keep_bootcon_setup(char *);
1093:	static void log_buf_add_cpu(void);
1075:	static int log_buf_len_setup(char *);
1061:	static void log_buf_len_update(u64);
679:	static ssize_t msg_add_dict_text(char *, size_t, const char *, const char *);
695:	static ssize_t msg_print_ext_body(char *, size_t, char *, size_t, struct dev_printk_info *);
3580:	static int printk_late_init(void);
1413:	static size_t record_print_text(struct printk_record *, bool, bool);
1576:	static int syslog_print(char *, int);
1680:	static int syslog_print_all(char *, int, bool);
3160:	static int try_enable_preferred_console(struct console *, bool);
3434:	static int unregister_console_locked(struct console *);
3718:	static void wake_up_klogd_work_func(struct irq_work *);

File kernel/printk/printk_ringbuffer.c:
1632:	void prb_commit(struct prb_reserved_entry *);
1664:	void prb_final_commit(struct prb_reserved_entry *);
1992:	u64 prb_first_valid_seq(struct printk_ringbuffer *);
2075:	void prb_init(struct printk_ringbuffer *, char *, unsigned int, struct prb_desc *, unsigned int, struct printk_info *);
2017:	u64 prb_next_seq(struct printk_ringbuffer *);
1937:	bool prb_read_valid(struct printk_ringbuffer *, u64, struct printk_record *);
1967:	bool prb_read_valid_info(struct printk_ringbuffer *, u64, struct printk_info *, unsigned int *);
2121:	unsigned int prb_record_text_space(struct prb_reserved_entry *);
1485:	bool prb_reserve(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *);
1350:	bool prb_reserve_in_last(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *, u32, unsigned int);
1885:	static bool _prb_read_valid(struct printk_ringbuffer *, u64 *, struct printk_record *, unsigned int *);
1024:	static char *data_alloc(struct printk_ringbuffer *, unsigned int, struct prb_data_blk_lpos *, unsigned long);
632:	static bool data_push_tail(struct printk_ringbuffer *, unsigned long);

File kernel/printk/printk_safe.c:
18:	void __printk_safe_enter(void);
24:	void __printk_safe_exit(void);
29:	int vprintk(const char *, va_list);

File kernel/printk/sysctl.c:
82:	void printk_sysctl_init(void);
14:	static int proc_dointvec_minmax_sysadmin(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/profile.c:
461:	int create_proc_profile(void);
384:	void create_prof_cpu_mask(void);
325:	void profile_hits(int, void *, unsigned int);
100:	int profile_init(void);
57:	int profile_setup(char *);
333:	void profile_tick(int);
425:	int setup_profiling_timer(unsigned int);
171:	static void __profile_flip_buffers(void *);
353:	static int prof_cpu_mask_proc_open(struct inode *, struct file *);
347:	static int prof_cpu_mask_proc_show(struct seq_file *, void *);
358:	static ssize_t prof_cpu_mask_proc_write(struct file *, const char *, size_t, loff_t *);
265:	static int profile_dead_cpu(unsigned int);
305:	static int profile_online_cpu(unsigned int);
283:	static int profile_prepare_cpu(unsigned int);
397:	static ssize_t read_profile(struct file *, char *, size_t, loff_t *);
436:	static ssize_t write_profile(struct file *, const char *, size_t, loff_t *);

File kernel/ptrace.c:
1269:	long __arm64_sys_ptrace(const struct pt_regs *);
68:	void __ptrace_link(struct task_struct *, struct task_struct *, const struct cred *);
116:	void __ptrace_unlink(struct task_struct *);
613:	void exit_ptrace(struct task_struct *, struct list_head *);
1306:	int generic_ptrace_peekdata(struct task_struct *, unsigned long, unsigned long);
1318:	int generic_ptrace_pokedata(struct task_struct *, unsigned long, unsigned long);
43:	int ptrace_access_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
359:	bool ptrace_may_access(struct task_struct *, unsigned int);
626:	int ptrace_readdata(struct task_struct *, unsigned long, char *, int);
1030:	int ptrace_request(struct task_struct *, long, unsigned long, unsigned long);
652:	int ptrace_writedata(struct task_struct *, char *, unsigned long, int);
557:	static bool __ptrace_detach(struct task_struct *, struct task_struct *);
286:	static int __ptrace_may_access(struct task_struct *, unsigned int);
907:	static int ptrace_regset(struct task_struct *, int, unsigned int, struct iovec *);
712:	static int ptrace_setsiginfo(struct task_struct *, const kernel_siginfo_t *);

File kernel/range.c:
12:	int add_range(struct range *, int, int, u64, u64);
29:	int add_range_with_merge(struct range *, int, int, u64, u64);
126:	int clean_sort_range(struct range *, int);
161:	void sort_range(struct range *, int);
65:	void subtract_range(struct range *, int, u64, u64);
114:	static int cmp_range(const void *, const void *);

File kernel/rcu/rcu_segcblist.c:
67:	struct callback_head *rcu_cblist_dequeue(struct rcu_cblist *);
28:	void rcu_cblist_enqueue(struct rcu_cblist *, struct callback_head *);
43:	void rcu_cblist_flush_enqueue(struct rcu_cblist *, struct rcu_cblist *, struct callback_head *);
18:	void rcu_cblist_init(struct rcu_cblist *);
537:	bool rcu_segcblist_accelerate(struct rcu_segcblist *, unsigned long);
210:	void rcu_segcblist_add_len(struct rcu_segcblist *, long);
480:	void rcu_segcblist_advance(struct rcu_segcblist *, unsigned long);
256:	void rcu_segcblist_disable(struct rcu_segcblist *);
340:	void rcu_segcblist_enqueue(struct rcu_segcblist *, struct callback_head *);
360:	bool rcu_segcblist_entrain(struct rcu_segcblist *, struct callback_head *);
385:	void rcu_segcblist_extract_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
410:	void rcu_segcblist_extract_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
298:	struct callback_head *rcu_segcblist_first_cb(struct rcu_segcblist *);
312:	struct callback_head *rcu_segcblist_first_pend_cb(struct rcu_segcblist *);
229:	void rcu_segcblist_inc_len(struct rcu_segcblist *);
237:	void rcu_segcblist_init(struct rcu_segcblist *);
432:	void rcu_segcblist_insert_count(struct rcu_segcblist *, struct rcu_cblist *);
442:	void rcu_segcblist_insert_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
465:	void rcu_segcblist_insert_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
607:	void rcu_segcblist_merge(struct rcu_segcblist *, struct rcu_segcblist *);
98:	long rcu_segcblist_n_segment_cbs(struct rcu_segcblist *);
323:	bool rcu_segcblist_nextgp(struct rcu_segcblist *, unsigned long *);
266:	void rcu_segcblist_offload(struct rcu_segcblist *, bool);
288:	bool rcu_segcblist_pend_cbs(struct rcu_segcblist *);
278:	bool rcu_segcblist_ready_cbs(struct rcu_segcblist *);

File kernel/rcu/srcutree.c:
662:	int __srcu_read_lock(struct srcu_struct *);
678:	void __srcu_read_unlock(struct srcu_struct *, int);
1256:	void call_srcu(struct srcu_struct *, struct callback_head *, rcu_callback_t);
599:	void cleanup_srcu_struct(struct srcu_struct *);
1378:	unsigned long get_state_synchronize_srcu(struct srcu_struct *);
295:	int init_srcu_struct(struct srcu_struct *);
1428:	bool poll_state_synchronize_srcu(struct srcu_struct *, unsigned long);
1479:	void srcu_barrier(struct srcu_struct *);
1523:	unsigned long srcu_batches_completed(struct srcu_struct *);
1799:	void srcu_init(void);
1732:	void srcu_torture_stats_print(struct srcu_struct *, char *, char *);
1708:	void srcutorture_get_gp_data(enum rcutorture_type, struct srcu_struct *, int *, unsigned long *);
1397:	unsigned long start_poll_synchronize_srcu(struct srcu_struct *);
1359:	void synchronize_srcu(struct srcu_struct *);
1306:	void synchronize_srcu_expedited(struct srcu_struct *);
1266:	static void __synchronize_srcu(struct srcu_struct *, bool);
237:	static int init_srcu_struct_fields(struct srcu_struct *, bool);
164:	static bool init_srcu_struct_nodes(struct srcu_struct *, gfp_t);
1682:	static void process_srcu(struct work_struct *);
1442:	static void srcu_barrier_cb(struct callback_head *);
1785:	static int srcu_bootup_announce(void);
749:	static void srcu_delay_timer(struct timer_list *);
908:	static void srcu_funnel_exp_start(struct srcu_struct *, struct srcu_node *, unsigned long);
723:	static void srcu_gp_start(struct srcu_struct *);
1143:	static unsigned long srcu_gp_start_if_needed(struct srcu_struct *, struct callback_head *, bool);
1604:	static void srcu_invoke_callbacks(struct work_struct *);
1026:	static bool try_check_zero(struct srcu_struct *, int, int);

File kernel/rcu/sync.c:
189:	void rcu_sync_dtor(struct rcu_sync *);
121:	void rcu_sync_enter(struct rcu_sync *);
36:	void rcu_sync_enter_start(struct rcu_sync *);
168:	void rcu_sync_exit(struct rcu_sync *);
21:	void rcu_sync_init(struct rcu_sync *);
73:	static void rcu_sync_func(struct callback_head *);

File kernel/rcu/tasks.h:
927:	void call_rcu_tasks(struct callback_head *, rcu_callback_t);
1688:	void call_rcu_tasks_trace(struct callback_head *, rcu_callback_t);
1000:	void exit_tasks_rcu_finish(void);
992:	void exit_tasks_rcu_start(void);
963:	void rcu_barrier_tasks(void);
1724:	void rcu_barrier_tasks_trace(void);
1896:	void rcu_init_tasks_generic(void);
1244:	void rcu_read_unlock_trace_special(struct task_struct *);
1275:	void rcu_tasks_trace_qs_blkd(struct task_struct *);
1226:	u8 rcu_trc_cmpxchg_need_qs(struct task_struct *, u8, u8);
984:	void show_rcu_tasks_classic_gp_kthread(void);
1772:	void show_rcu_tasks_gp_kthreads(void);
1753:	void show_rcu_tasks_trace_gp_kthread(void);
951:	void synchronize_rcu_tasks(void);
1711:	void synchronize_rcu_tasks_trace(void);
281:	static void call_rcu_tasks_generic(struct callback_head *, rcu_callback_t, struct rcu_tasks *);
271:	static void call_rcu_tasks_iw_wakeup(struct irq_work *);
225:	static void cblist_init_generic(struct rcu_tasks *);
872:	static void check_all_holdout_tasks(struct list_head *, bool, bool *);
1606:	static void check_all_holdout_tasks_trace(struct list_head *, bool, bool *);
348:	static void rcu_barrier_tasks_generic(struct rcu_tasks *);
335:	static void rcu_barrier_tasks_generic_cb(struct callback_head *);
969:	static int rcu_spawn_tasks_kthread(void);
575:	static void rcu_spawn_tasks_kthread_generic(struct rcu_tasks *);
1730:	static int rcu_spawn_tasks_trace_kthread(void);
590:	static void rcu_tasks_bootup_oddness(void);
451:	static void rcu_tasks_invoke_cbs(struct rcu_tasks *, struct rcu_tasks_percpu *);
493:	static void rcu_tasks_invoke_cbs_wq(struct work_struct *);
535:	static int rcu_tasks_kthread(void *);
503:	static void rcu_tasks_one_gp(struct rcu_tasks *, bool);
816:	static void rcu_tasks_pertask(struct task_struct *, struct list_head *);
884:	static void rcu_tasks_postgp(struct rcu_tasks *);
827:	static void rcu_tasks_postscan(struct list_head *);
797:	static void rcu_tasks_pregp_step(struct list_head *);
1639:	static void rcu_tasks_trace_empty_fn(void *);
1644:	static void rcu_tasks_trace_postgp(struct rcu_tasks *);
1534:	static void rcu_tasks_trace_postscan(struct list_head *);
1478:	static void rcu_tasks_trace_pregp_step(struct list_head *);
652:	static void rcu_tasks_wait_gp(struct rcu_tasks *);
618:	static void show_rcu_tasks_generic_gp_kthread(struct rcu_tasks *, char *);
1552:	static int trc_check_slow_task(struct task_struct *, void *);
1348:	static int trc_inspect_reader(struct task_struct *, void *);
1313:	static void trc_read_check_handler(void *);
1396:	static void trc_wait_for_one_reader(struct task_struct *, struct list_head *);

File kernel/rcu/tree.c:
2866:	void call_rcu(struct callback_head *, rcu_callback_t);
3808:	void cond_synchronize_rcu(unsigned long);
3835:	void cond_synchronize_rcu_full(struct rcu_gp_oldstate *);
3579:	void get_completed_synchronize_rcu_full(struct rcu_gp_oldstate *);
3593:	unsigned long get_state_synchronize_rcu(void);
3620:	void get_state_synchronize_rcu_full(struct rcu_gp_oldstate *);
3461:	void kfree_rcu_scheduler_running(void);
3345:	void kvfree_call_rcu(struct callback_head *, rcu_callback_t);
3730:	bool poll_state_synchronize_rcu(unsigned long);
3774:	bool poll_state_synchronize_rcu_full(struct rcu_gp_oldstate *);
3986:	void rcu_barrier(void);
4259:	void rcu_cpu_starting(unsigned int);
318:	bool rcu_dynticks_zero_in_eqs(int, int *);
512:	unsigned long rcu_exp_batches_completed(void);
2409:	void rcu_force_quiescent_state(void);
200:	int rcu_get_gp_kthreads_prio(void);
500:	unsigned long rcu_get_gp_seq(void);
1322:	void rcu_gp_set_torture_wait(int);
1288:	void rcu_gp_slow_register(atomic_t *);
1297:	void rcu_gp_slow_unregister(atomic_t *);
4799:	void rcu_init(void);
4653:	void rcu_init_geometry(void);
708:	bool rcu_is_watching(void);
344:	void rcu_momentary_dyntick_idle(void);
675:	int rcu_needs_cpu(void);
4315:	void rcu_report_dead(unsigned int);
726:	void rcu_request_urgent_qs_task(struct task_struct *);
2321:	void rcu_sched_clock_irq(int);
4520:	void rcu_scheduler_starting(void);
261:	void rcu_softirq_qs(void);
529:	void rcutorture_get_gp_data(enum rcutorture_type, int *, unsigned long *);
2164:	int rcutree_dead_cpu(unsigned int);
2098:	int rcutree_dying_cpu(unsigned int);
4354:	void rcutree_migrate_callbacks(int);
4229:	int rcutree_offline_cpu(unsigned int);
4204:	int rcutree_online_cpu(unsigned int);
4144:	int rcutree_prepare_cpu(unsigned int);
3674:	unsigned long start_poll_synchronize_rcu(void);
3697:	void start_poll_synchronize_rcu_full(struct rcu_gp_oldstate *);
3532:	void synchronize_rcu(void);
1215:	static bool __note_gp_changes(struct rcu_node *, struct rcu_data *);
799:	static int dyntick_save_progress_counter(struct rcu_data *);
3221:	static void fill_page_cache_func(struct work_struct *);
2552:	static void invoke_rcu_core(void);
4766:	static void kfree_rcu_batch_init(void);
3152:	static void kfree_rcu_monitor(struct work_struct *);
3414:	static unsigned long kfree_rcu_shrink_count(struct shrinker *, struct shrink_control *);
3432:	static unsigned long kfree_rcu_shrink_scan(struct shrinker *, struct shrink_control *);
3036:	static void kfree_rcu_work(struct work_struct *);
1264:	static void note_gp_changes(struct rcu_data *);
456:	static int param_set_first_fqs_jiffies(const char *, const struct kernel_param *);
468:	static int param_set_next_fqs_jiffies(const char *, const struct kernel_param *);
1131:	static void rcu_accelerate_cbs_unlocked(struct rcu_node *, struct rcu_data *);
3913:	static void rcu_barrier_callback(struct callback_head *);
3965:	static void rcu_barrier_handler(void *);
4114:	static void rcu_boot_init_percpu_data(int);
2452:	static void rcu_core(void);
2521:	static void rcu_core_si(struct softirq_action *);
2577:	static void rcu_cpu_kthread(unsigned int);
2562:	static void rcu_cpu_kthread_park(unsigned int);
2567:	static int rcu_cpu_kthread_should_run(unsigned int);
4746:	static void rcu_dump_rcu_node_tree(void);
1711:	static void rcu_gp_cleanup(void);
1625:	static void rcu_gp_fqs_loop(void);
1433:	static bool rcu_gp_init(void);
1829:	static int rcu_gp_kthread(void *);
816:	static int rcu_implicit_dynticks_qs(struct rcu_data *);
4543:	static void rcu_init_one(void);
1898:	static void rcu_report_qs_rnp(unsigned long, struct rcu_node *, unsigned long, unsigned long);
2622:	static int rcu_spawn_core_kthreads(void);
4471:	static int rcu_spawn_gp_kthread(void);
958:	static bool rcu_start_this_gp(struct rcu_node *, struct rcu_data *, unsigned long);
4629:	static void sanitize_kthread_prio(void);
3135:	static void schedule_delayed_monitor_work(struct kfree_rcu_cpu *);
3212:	static enum hrtimer_restart schedule_page_work_fn(struct hrtimer *);
3638:	static void start_poll_synchronize_rcu_common(void);
2445:	static void strict_work_handler(struct work_struct *);

File kernel/rcu/tree_exp.h:
1074:	void cond_synchronize_rcu_expedited(unsigned long);
1101:	void cond_synchronize_rcu_expedited_full(struct rcu_gp_oldstate *);
1012:	unsigned long start_poll_synchronize_rcu_expedited(void);
1047:	void start_poll_synchronize_rcu_expedited_full(struct rcu_gp_oldstate *);
908:	void synchronize_rcu_expedited(void);
184:	static void __rcu_report_exp_rnp(struct rcu_node *, bool, unsigned long);
734:	static void rcu_exp_handler(void *);
716:	static void rcu_exp_sel_wait_wake(unsigned long);
977:	static void sync_rcu_do_polled_gp(struct work_struct *);
473:	static void sync_rcu_exp_select_node_cpus(struct work_struct *);
507:	static void wait_rcu_exp_gp(struct work_struct *);

File kernel/rcu/tree_plugin.h:
398:	void __rcu_read_lock(void);
416:	void __rcu_read_unlock(void);
754:	void exit_rcu(void);
310:	void rcu_note_context_switch(bool);
598:	void rcu_preempt_deferred_qs(struct task_struct *);
776:	static void dump_blkd_tasks(struct rcu_node *, int);
44:	static void rcu_bootup_announce_oddness(void);
1003:	static void rcu_cpu_kthread_setup(unsigned int);
611:	static void rcu_preempt_deferred_qs_handler(struct irq_work *);
464:	static void rcu_preempt_deferred_qs_irqrestore(struct task_struct *, unsigned long);
624:	static void rcu_read_unlock_special(struct task_struct *);

File kernel/rcu/tree_stall.h:
793:	bool rcu_check_boost_fail(unsigned long, int *);
154:	void rcu_cpu_stall_reset(void);
28:	int rcu_exp_jiffies_till_stall_check(void);
965:	void rcu_fwd_progress_check(unsigned long);
89:	bool rcu_gp_might_be_stalled(void);
57:	int rcu_jiffies_till_stall_check(void);
113:	void rcu_sysrq_end(void);
107:	void rcu_sysrq_start(void);
837:	void show_rcu_gp_kthreads(void);
130:	static int check_cpu_stall_init(void);
271:	static int check_slow_task(struct task_struct *, void *);
442:	static void print_cpu_stall_info(int);
490:	static void rcu_check_gp_kthread_starvation(void);
359:	static void rcu_dump_cpu_stacks(void);
212:	static void rcu_iw_handler(struct irq_work *);
120:	static int rcu_panic(struct notifier_block *, unsigned long, void *);
190:	static void rcu_stall_kick_kthreads(void);
1019:	static int rcu_sysrq_init(void);
1007:	static void sysrq_show_rcu(int);

File kernel/rcu/update.c:
371:	void __wait_rcu_gp(bool, int, call_rcu_func_t *, struct rcu_synchronize *);
476:	void do_trace_rcu_torture_read(const char *, struct callback_head *, unsigned long, unsigned long, unsigned long);
410:	void finish_rcuwait(struct rcuwait *);
526:	unsigned long get_completed_synchronize_rcu(void);
599:	void rcu_early_boot_tests(void);
195:	void rcu_end_inkernel_boot(void);
169:	void rcu_expedite_gp(void);
156:	bool rcu_gp_is_expedited(void);
140:	bool rcu_gp_is_normal(void);
206:	bool rcu_inkernel_boot_has_ended(void);
219:	void rcu_test_sync_prims(void);
184:	void rcu_unexpedite_gp(void);
609:	void rcupdate_announce_bootup_oddness(void);
362:	void wakeme_after_rcu(struct callback_head *);
232:	static int rcu_set_runtime_mode(void);

File kernel/reboot.c:
700:	long __arm64_sys_reboot(const struct pt_regs *);
798:	void ctrl_alt_del(void);
530:	int devm_register_power_off_handler(struct device *, int (*)(struct sys_off_data *), void *);
125:	int devm_register_reboot_notifier(struct device *, struct notifier_block *);
552:	int devm_register_restart_handler(struct device *, int (*)(struct sys_off_data *), void *);
502:	int devm_register_sys_off_handler(struct device *, enum sys_off_mode, int, int (*)(struct sys_off_data *), void *);
639:	void do_kernel_power_off(void);
223:	void do_kernel_restart(char *);
74:	void emergency_restart(void);
970:	void hw_protection_shutdown(const char *, int);
666:	bool kernel_can_power_off(void);
293:	void kernel_halt(void);
678:	void kernel_power_off(void);
265:	void kernel_restart(char *);
81:	void kernel_restart_prepare(char *);
228:	void migrate_to_reboot_cpu(void);
884:	void orderly_poweroff(bool);
905:	void orderly_reboot(void);
585:	int register_platform_power_off(void (*)(void));
99:	int register_reboot_notifier(struct notifier_block *);
191:	int register_restart_handler(struct notifier_block *);
389:	struct sys_off_handler *register_sys_off_handler(enum sys_off_mode, int, int (*)(struct sys_off_data *), void *);
608:	void unregister_platform_power_off(void (*)(void));
114:	int unregister_reboot_notifier(struct notifier_block *);
206:	int unregister_restart_handler(struct notifier_block *);
462:	void unregister_sys_off_handler(struct sys_off_handler *);
1218:	static ssize_t cpu_show(struct kobject *, struct kobj_attribute *, char *);
1222:	static ssize_t cpu_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
788:	static void deferred_cad(struct work_struct *);
120:	static void devm_unregister_reboot_notifier(struct device *, void *);
483:	static void devm_unregister_sys_off_handler(void *);
918:	static void hw_failure_emergency_poweroff_func(struct work_struct *);
618:	static int legacy_pm_power_off(struct sys_off_data *);
1086:	static ssize_t mode_show(struct kobject *, struct kobj_attribute *, char *);
1112:	static ssize_t mode_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
565:	static int platform_power_off_notify(struct sys_off_data *);
870:	static void poweroff_work_func(struct work_struct *);
1290:	static int reboot_ksysfs_init(void);
989:	static int reboot_setup(char *);
892:	static void reboot_work_func(struct work_struct *);
316:	static int sys_off_notify(struct notifier_block *, unsigned long, void *);

File kernel/regset.c:
61:	int copy_regset_to_user(struct task_struct *, const struct user_regset_view *, unsigned int, unsigned int, unsigned int, void *);
33:	int regset_get(struct task_struct *, const struct user_regset *, unsigned int, void *);
42:	int regset_get_alloc(struct task_struct *, const struct user_regset *, unsigned int, void **);

File kernel/resource.c:
1595:	void __devm_release_region(struct device *, struct resource *, resource_size_t, resource_size_t);
1570:	struct resource *__devm_request_region(struct device *, struct resource *, resource_size_t, resource_size_t, const char *);
1251:	void __release_region(struct resource *, resource_size_t, resource_size_t);
1217:	struct resource *__request_region(struct resource *, resource_size_t, resource_size_t, const char *, int);
976:	int adjust_resource(struct resource *, resource_size_t, resource_size_t);
706:	int allocate_resource(struct resource *, struct resource *, resource_size_t, resource_size_t, resource_size_t, resource_size_t, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t), void *);
554:	void arch_remove_reservations(struct resource *);
1541:	void devm_release_resource(struct device *, struct resource *);
1503:	int devm_request_resource(struct device *, struct resource *, struct resource *);
853:	int insert_resource(struct resource *, struct resource *);
833:	struct resource *insert_resource_conflict(struct resource *, struct resource *);
870:	void insert_resource_expand_to_fit(struct resource *, struct resource *);
1147:	struct address_space *iomem_get_mapping(void);
1754:	bool iomem_is_exclusive(u64);
1656:	int iomem_map_sanity_check(resource_size_t, unsigned long);
750:	struct resource *lookup_resource(struct resource *, resource_size_t);
486:	int page_is_ram(unsigned long);
541:	int region_intersects(resource_size_t, size_t, unsigned long, unsigned long);
251:	void release_child_resources(struct resource *);
296:	int release_resource(struct resource *);
918:	int remove_resource(struct resource *);
282:	int request_resource(struct resource *, struct resource *);
265:	struct resource *request_resource_conflict(struct resource *, struct resource *);
1050:	void reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
1084:	resource_size_t resource_alignment(struct resource *);
1707:	bool resource_is_exclusive(struct resource *, u64, resource_size_t);
1760:	struct resource_entry *resource_list_create_entry(struct resource *, size_t);
1775:	void resource_list_free(struct list_head *);
411:	int walk_iomem_res_desc(unsigned long, unsigned long, u64, u64, void *, int (*)(struct resource *, void *));
438:	int walk_mem_res(u64, u64, void *, int (*)(struct resource *, void *));
452:	int walk_system_ram_range(unsigned long, unsigned long, void *, int (*)(unsigned long, unsigned long, void *));
425:	int walk_system_ram_res(u64, u64, void *, int (*)(struct resource *, void *));
579:	static int __find_resource(struct resource *, struct resource *, struct resource *, resource_size_t, struct resource_constraint *);
768:	static struct resource *__insert_resource(struct resource *, struct resource *);
228:	static void __release_child_resources(struct resource *);
171:	static struct resource *__request_resource(struct resource *, struct resource *);
989:	static void __reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
374:	static int __walk_iomem_res_desc(resource_size_t, resource_size_t, unsigned long, unsigned long, void *, int (*)(struct resource *, void *));
1561:	static int devm_region_match(struct device *, void *, void *);
1554:	static void devm_region_release(struct device *, void *);
1527:	static int devm_resource_match(struct device *, void *, void *);
1478:	static void devm_resource_release(struct device *, void *);
153:	static void free_resource(struct resource *);
1987:	static int iomem_fs_init_fs_context(struct fs_context *);
1999:	static int iomem_init_inode(void);
142:	static int ioresources_init(void);
80:	static void *r_next(struct seq_file *, void *, loff_t *);
108:	static int r_show(struct seq_file *, void *);
91:	static void *r_start(struct seq_file *, loff_t *);
102:	static void r_stop(struct seq_file *, void *);
1610:	static int reserve_setup(char *);
558:	static resource_size_t simple_align_resource(void *, const struct resource *, resource_size_t, resource_size_t);
1978:	static int strict_iomem(char *);

File kernel/rseq.c:
336:	long __arm64_sys_rseq(const struct pt_regs *);
286:	void __rseq_handle_notify_resume(struct ksignal *, struct pt_regs *);

File kernel/sched/autogroup.c:
42:	void autogroup_free(struct task_group *);
33:	void autogroup_init(struct task_struct *);
285:	int autogroup_path(struct task_group *, char *, int);
231:	int proc_sched_autogroup_set_nice(struct task_struct *, int);
269:	void proc_sched_autogroup_show_task(struct task_struct *, struct seq_file *);
193:	void sched_autogroup_create_attach(struct task_struct *);
205:	void sched_autogroup_detach(struct task_struct *);
216:	void sched_autogroup_exit(struct signal_struct *);
147:	void sched_autogroup_exit_task(struct task_struct *);
211:	void sched_autogroup_fork(struct signal_struct *);
129:	bool task_wants_autogroup(struct task_struct *, struct task_group *);
158:	static void autogroup_move_group(struct task_struct *, struct autogroup *);
71:	static struct autogroup *autogroup_task_get(struct task_struct *);
221:	static int setup_autogroup(char *);

File kernel/sched/clock.c:
477:	u64 running_clock(void);
62:	unsigned long long sched_clock(void);
459:	u64 sched_clock_cpu(int);
451:	void sched_clock_init(void);

File kernel/sched/completion.c:
28:	void complete(struct completion *);
57:	void complete_all(struct completion *);
327:	bool completion_done(struct completion *);
294:	bool try_wait_for_completion(struct completion *);
136:	void wait_for_completion(struct completion *);
204:	int wait_for_completion_interruptible(struct completion *);
226:	long wait_for_completion_interruptible_timeout(struct completion *, unsigned long);
169:	void wait_for_completion_io(struct completion *);
189:	unsigned long wait_for_completion_io_timeout(struct completion *, unsigned long);
242:	int wait_for_completion_killable(struct completion *);
275:	long wait_for_completion_killable_timeout(struct completion *, unsigned long);
252:	int wait_for_completion_state(struct completion *, unsigned int);
155:	unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
115:	static long wait_for_common(struct completion *, long, int);
121:	static long wait_for_common_io(struct completion *, long, int);

File kernel/sched/core.c:
8881:	long __arm64_sys_sched_get_priority_max(const struct pt_regs *);
8908:	long __arm64_sys_sched_get_priority_min(const struct pt_regs *);
8390:	long __arm64_sys_sched_getaffinity(const struct pt_regs *);
8121:	long __arm64_sys_sched_getattr(const struct pt_regs *);
8040:	long __arm64_sys_sched_getparam(const struct pt_regs *);
8011:	long __arm64_sys_sched_getscheduler(const struct pt_regs *);
8973:	long __arm64_sys_sched_rr_get_interval(const struct pt_regs *);
8338:	long __arm64_sys_sched_setaffinity(const struct pt_regs *);
7968:	long __arm64_sys_sched_setattr(const struct pt_regs *);
7957:	long __arm64_sys_sched_setparam(const struct pt_regs *);
7942:	long __arm64_sys_sched_setscheduler(const struct pt_regs *);
8443:	long __arm64_sys_sched_yield(const struct pt_regs *);
8515:	int __cond_resched_lock(spinlock_t *);
8533:	int __cond_resched_rwlock_read(rwlock_t *);
8551:	int __cond_resched_rwlock_write(rwlock_t *);
606:	struct rq *__task_rq_lock(struct task_struct *, struct rq_flags *);
2083:	void activate_task(struct rq *, struct task_struct *, int);
7260:	int available_idle_cpu(int);
11361:	void call_trace_sched_update_nr_running(struct rq *, int);
7173:	int can_nice(const struct task_struct *, const int);
2174:	void check_preempt_curr(struct rq *, struct task_struct *, int);
4376:	struct task_struct *cpu_curr_snapshot(int);
3864:	bool cpus_share_cache(int, int);
9165:	int cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2090:	void deactivate_task(struct rq *, struct task_struct *, int);
6926:	int default_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
8168:	int dl_task_check_affinity(struct task_struct *, const struct cpumask *);
2600:	void do_set_cpus_allowed(struct task_struct *, const struct cpumask *);
6616:	void do_task_dead(void);
588:	void double_rq_lock(struct rq *, struct rq *);
11301:	void dump_cpu_task(int);
2632:	int dup_user_cpus_ptr(struct task_struct *, struct task_struct *, int);
7303:	unsigned long effective_cpu_util(int, unsigned long, enum cpu_util_type, struct task_struct *);
3076:	void force_compatible_cpus_allowed_ptr(struct task_struct *);
1064:	int get_nohz_timer_target(void);
2030:	unsigned long get_wchan(struct task_struct *);
808:	void hrtick_start(struct rq *, u64);
7236:	int idle_cpu(int);
7277:	struct task_struct *idle_task(int);
9265:	void idle_task_exit(void);
9745:	int in_sched_functions(unsigned long);
9092:	void init_idle(struct task_struct *, int);
8863:	void io_schedule(void);
8841:	void io_schedule_finish(int);
8832:	int io_schedule_prepare(void);
8850:	long io_schedule_timeout(long);
3434:	void kick_process(struct task_struct *);
2216:	void migrate_disable(void);
2232:	void migrate_enable(void);
3276:	int migrate_swap(struct task_struct *, struct task_struct *, int, int);
9214:	int migrate_task_to(struct task_struct *, int);
10110:	void normalize_rt_tasks(void);
5334:	unsigned long long nr_context_switches(void);
5387:	unsigned int nr_iowait(void);
5352:	unsigned int nr_iowait_cpu(int);
5305:	unsigned int nr_running(void);
6791:	void preempt_schedule(void);
6906:	void preempt_schedule_irq(void);
6839:	void preempt_schedule_notrace(void);
2487:	int push_cpu_stop(void *);
530:	void raw_spin_rq_lock_nested(struct rq *, int);
555:	bool raw_spin_rq_trylock(struct rq *);
579:	void raw_spin_rq_unlock(struct rq *);
3125:	void relax_compatible_cpus_allowed_ptr(struct task_struct *);
2684:	void release_user_cpus_ptr(struct task_struct *);
1043:	void resched_cpu(int);
1019:	void resched_curr(struct rq *);
6974:	void rt_mutex_setprio(struct task_struct *, struct task_struct *);
4709:	void sched_cgroup_fork(struct task_struct *, struct kernel_clone_args *);
9500:	int sched_cpu_activate(unsigned int);
9545:	int sched_cpu_deactivate(unsigned int);
9683:	int sched_cpu_dying(unsigned int);
9620:	int sched_cpu_starting(unsigned int);
7391:	unsigned long sched_cpu_util(int);
9641:	int sched_cpu_wait_empty(unsigned int);
10239:	struct task_group *sched_create_group(struct task_group *);
10287:	void sched_destroy_group(struct task_group *);
5403:	void sched_exec(void);
4646:	int sched_fork(unsigned long, struct task_struct *);
8354:	long sched_getaffinity(pid_t, struct cpumask *);
9764:	void sched_init(void);
9706:	void sched_init_smp(void);
10345:	void sched_move_task(struct task_struct *);
10262:	void sched_online_group(struct task_group *, struct task_group *);
4738:	void sched_post_fork(struct task_struct *);
10293:	void sched_release_group(struct task_group *);
7825:	void sched_set_fifo(struct task_struct *);
7835:	void sched_set_fifo_low(struct task_struct *);
7842:	void sched_set_normal(struct task_struct *, int);
3568:	void sched_set_stop_task(int, struct task_struct *);
8255:	long sched_setaffinity(pid_t, const struct cpumask *);
7777:	int sched_setattr(struct task_struct *, const struct sched_attr *);
7782:	int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
9235:	void sched_setnuma(struct task_struct *, int);
7771:	int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
7801:	int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
8998:	void sched_show_task(struct task_struct *);
2025:	bool sched_task_on_rq(struct task_struct *);
3781:	void sched_ttwu_pending(void *);
6675:	void schedule(void);
6699:	void schedule_idle(void);
6738:	void schedule_preempt_disabled(void);
5216:	void schedule_tail(struct task_struct *);
5547:	void scheduler_tick(void);
3818:	void send_call_function_single_ipi(int);
2534:	void set_cpus_allowed_common(struct task_struct *, struct affinity_context *);
3014:	int set_cpus_allowed_ptr(struct task_struct *, const struct cpumask *);
4474:	void set_numabalancing_state(bool);
9435:	void set_rq_offline(struct rq *);
9420:	void set_rq_online(struct rq *);
3141:	void set_task_cpu(struct task_struct *, unsigned int);
7098:	void set_user_nice(struct task_struct *, long);
9053:	void show_state_filter(unsigned int);
5328:	bool single_task_running(void);
4324:	int task_call_func(struct task_struct *, task_call_f, void *);
9178:	int task_can_attach(struct task_struct *, const struct cpumask *);
2149:	int task_curr(const struct task_struct *);
7225:	int task_prio(const struct task_struct *);
630:	struct rq *task_rq_lock(struct task_struct *, struct rq_flags *);
5455:	unsigned long long task_sched_runtime(struct task_struct *);
1254:	int tg_nop(struct task_group *, void *);
4743:	unsigned long to_ratio(u64, u64);
728:	void update_rq_clock(struct rq *);
3329:	unsigned long wait_task_inactive(struct task_struct *, unsigned int);
962:	void wake_q_add(struct wake_q_head *, struct task_struct *);
985:	void wake_q_add_safe(struct wake_q_head *, struct task_struct *);
3844:	void wake_up_if_idle(int);
4766:	void wake_up_new_task(struct task_struct *);
1147:	void wake_up_nohz_cpu(int);
4397:	int wake_up_process(struct task_struct *);
991:	void wake_up_q(struct wake_q_head *);
4403:	int wake_up_state(struct task_struct *, unsigned int);
1223:	int walk_tg_tree_from(struct task_group *, tg_visitor, tg_visitor, void *);
8751:	void yield(void);
8773:	int yield_to(struct task_struct *, bool);
9280:	static int __balance_push_cpu_stop(void *);
2552:	static void __do_set_cpus_allowed(struct task_struct *, struct affinity_context *);
793:	static void __hrtick_start(void *);
3197:	static void __migrate_swap_task(struct task_struct *, int);
2367:	static struct rq *__migrate_task(struct rq *, struct rq_flags *, struct task_struct *, int);
8194:	static int __sched_setaffinity(struct task_struct *, struct affinity_context *);
7518:	static int __sched_setscheduler(struct task_struct *, const struct sched_attr *, bool, bool);
6487:	static void __schedule(unsigned int);
5816:	static void __schedule_bug(struct task_struct *);
2910:	static int __set_cpus_allowed_ptr_locked(struct task_struct *, struct affinity_context *, struct rq *, struct rq_flags *);
9313:	static void balance_push(struct rq *);
10455:	static void cpu_cgroup_attach(struct cgroup_taskset *);
10386:	static struct cgroup_subsys_state *cpu_cgroup_css_alloc(struct cgroup_subsys_state *);
10431:	static void cpu_cgroup_css_free(struct cgroup_subsys_state *);
10404:	static int cpu_cgroup_css_online(struct cgroup_subsys_state *);
10424:	static void cpu_cgroup_css_released(struct cgroup_subsys_state *);
11085:	static int cpu_extra_stat_show(struct seq_file *, struct cgroup_subsys_state *);
11009:	static s64 cpu_idle_read_s64(struct cgroup_subsys_state *, struct cftype *);
11015:	static int cpu_idle_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
10650:	static u64 cpu_shares_read_u64(struct cgroup_subsys_state *, struct cftype *);
10642:	static int cpu_shares_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
11139:	static s64 cpu_weight_nice_read_s64(struct cgroup_subsys_state *, struct cftype *);
11157:	static int cpu_weight_nice_write_s64(struct cgroup_subsys_state *, struct cftype *, s64);
11112:	static u64 cpu_weight_read_u64(struct cgroup_subsys_state *, struct cftype *);
11121:	static int cpu_weight_write_u64(struct cgroup_subsys_state *, struct cftype *, u64);
7853:	static int do_sched_setscheduler(pid_t, int, struct sched_param *);
8418:	static void do_sched_yield(void);
5129:	static struct rq *finish_task_switch(struct task_struct *);
765:	static enum hrtimer_restart hrtick(struct hrtimer *);
3232:	static int migrate_swap_stop(void *);
2385:	static int migration_cpu_stop(void *);
9731:	static int migration_init(void);
2321:	static struct rq *move_queued_task(struct rq *, struct rq_flags *, struct task_struct *, int);
1153:	static void nohz_csd_func(void *);
6757:	static void preempt_schedule_common(void);
4635:	static int sched_core_sysctl_init(void);
10222:	static void sched_free_group_rcu(struct callback_head *);
10281:	static void sched_unregister_group_rcu(struct callback_head *);
3468:	static int select_fallback_rq(int, struct task_struct *);
4495:	static int sysctl_numa_balancing(struct ctl_table *, int, void *, size_t *, loff_t *);
4116:	static int try_to_wake_up(struct task_struct *, unsigned int, int);
3713:	static void ttwu_do_activate(struct rq *, struct task_struct *, int, struct rq_flags *);
3912:	static bool ttwu_queue_wakelist(struct task_struct *, int, int);

File kernel/sched/cpuacct.c:
350:	void cpuacct_account_field(struct task_struct *, int, u64);
334:	void cpuacct_charge(struct task_struct *, u64);
209:	static int __cpuacct_percpu_seq_show(struct seq_file *, enum cpuacct_stat_index);
239:	static int cpuacct_all_seq_show(struct seq_file *, void *);
55:	static struct cgroup_subsys_state *cpuacct_css_alloc(struct cgroup_subsys_state *);
85:	static void cpuacct_css_free(struct cgroup_subsys_state *);
234:	static int cpuacct_percpu_seq_show(struct seq_file *, void *);
229:	static int cpuacct_percpu_sys_seq_show(struct seq_file *, void *);
224:	static int cpuacct_percpu_user_seq_show(struct seq_file *, void *);
260:	static int cpuacct_stats_show(struct seq_file *, void *);
186:	static u64 cpuusage_read(struct cgroup_subsys_state *, struct cftype *);
180:	static u64 cpuusage_sys_read(struct cgroup_subsys_state *, struct cftype *);
174:	static u64 cpuusage_user_read(struct cgroup_subsys_state *, struct cftype *);
191:	static int cpuusage_write(struct cgroup_subsys_state *, struct cftype *, u64);

File kernel/sched/cpudeadline.c:
291:	void cpudl_cleanup(struct cpudl *);
173:	void cpudl_clear(struct cpudl *, int);
254:	void cpudl_clear_freecpu(struct cpudl *, int);
116:	int cpudl_find(struct cpudl *, struct task_struct *, struct cpumask *);
263:	int cpudl_init(struct cpudl *);
213:	void cpudl_set(struct cpudl *, int, u64);
244:	void cpudl_set_freecpu(struct cpudl *, int);
94:	static void cpudl_heapify(struct cpudl *, int);

File kernel/sched/cpupri.c:
308:	void cpupri_cleanup(struct cpupri *);
120:	int cpupri_find(struct cpupri *, struct task_struct *, struct cpumask *);
143:	int cpupri_find_fitness(struct cpupri *, struct task_struct *, struct cpumask *, bool (*)(struct task_struct *, int));
277:	int cpupri_init(struct cpupri *);
209:	void cpupri_set(struct cpupri *, int, int);

File kernel/sched/cputime.c:
139:	void account_guest_time(struct task_struct *, u64);
515:	void account_idle_ticks(unsigned long);
218:	void account_idle_time(u64);
483:	void account_process_tick(struct task_struct *, int);
207:	void account_steal_time(u64);
164:	void account_system_index_time(struct task_struct *, u64, enum cpu_usage_stat);
184:	void account_system_time(struct task_struct *, int, u64);
117:	void account_user_time(struct task_struct *, u64);
554:	void cputime_adjust(struct task_cputime *, struct prev_cputime *, u64 *, u64 *);
28:	void disable_sched_clock_irqtime(void);
23:	void enable_sched_clock_irqtime(void);
49:	void irqtime_account_irq(struct task_struct *, unsigned int);
626:	void task_cputime_adjusted(struct task_struct *, u64 *, u64 *);
308:	void thread_group_cputime(struct task_struct *, struct task_cputime *);
638:	void thread_group_cputime_adjusted(struct task_struct *, u64 *, u64 *);
372:	static void irqtime_account_process_tick(struct task_struct *, int, int);

File kernel/sched/deadline.c:
2922:	bool __checkparam_dl(const struct sched_attr *);
2970:	void __dl_clear_params(struct task_struct *);
2900:	void __getparam_dl(struct task_struct *, struct sched_attr *);
2888:	void __setparam_dl(struct task_struct *, const struct sched_attr *);
2550:	void dl_add_task_root_domain(struct task_struct *);
2574:	void dl_clear_root_domain(struct root_domain *);
3024:	int dl_cpu_busy(int, struct task_struct *);
3005:	int dl_cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2991:	bool dl_param_changed(struct task_struct *, const struct sched_attr *);
492:	void init_dl_bandwidth(struct dl_bandwidth *, u64, u64);
499:	void init_dl_bw(struct dl_bw *);
1450:	void init_dl_inactive_task_timer(struct sched_dl_entity *);
509:	void init_dl_rq(struct dl_rq *);
1215:	void init_dl_task_timer(struct sched_dl_entity *);
2541:	void init_sched_dl_class(void);
2784:	void sched_dl_do_global(void);
2732:	int sched_dl_global_validate(void);
2822:	int sched_dl_overflow(struct task_struct *, int, const struct sched_attr *);
1754:	static void __dequeue_task_dl(struct rq *, struct task_struct *, int);
1929:	static int balance_dl(struct rq *, struct task_struct *, struct rq_flags *);
1951:	static void check_preempt_curr_dl(struct rq *, struct task_struct *, int);
1761:	static void dequeue_task_dl(struct rq *, struct task_struct *, int);
142:	static unsigned long dl_bw_capacity(int);
668:	static struct rq *dl_task_offline_migration(struct rq *, struct task_struct *);
1108:	static enum hrtimer_restart dl_task_timer(struct hrtimer *);
1670:	static void enqueue_task_dl(struct rq *, struct task_struct *, int);
2131:	static int find_later_rq(struct task_struct *);
2219:	static struct rq *find_lock_later_rq(struct task_struct *, struct rq *);
1408:	static enum hrtimer_restart inactive_task_timer(struct hrtimer *);
1875:	static void migrate_task_rq_dl(struct task_struct *, int);
2105:	static struct task_struct *pick_earliest_pushable_dl_task(struct rq *, int);
2031:	static struct task_struct *pick_next_task_dl(struct rq *);
2015:	static struct task_struct *pick_task_dl(struct rq *);
2663:	static void prio_changed_dl(struct rq *, struct task_struct *, int);
2381:	static void pull_dl_task(struct rq *);
2296:	static int push_dl_task(struct rq *);
2374:	static void push_dl_tasks(struct rq *);
2042:	static void put_prev_task_dl(struct rq *, struct task_struct *);
835:	static void replenish_dl_entity(struct sched_dl_entity *);
2532:	static void rq_offline_dl(struct rq *);
2521:	static void rq_online_dl(struct rq *);
47:	static int sched_dl_sysctl_init(void);
1827:	static int select_task_rq_dl(struct task_struct *, int, int);
2487:	static void set_cpus_allowed_dl(struct task_struct *, struct affinity_context *);
1981:	static void set_next_task_dl(struct rq *, struct task_struct *, bool);
1050:	static int start_dl_timer(struct task_struct *);
2585:	static void switched_from_dl(struct rq *, struct task_struct *);
2633:	static void switched_to_dl(struct rq *, struct task_struct *);
446:	static void task_contending(struct sched_dl_entity *, int);
2080:	static void task_fork_dl(struct task_struct *);
390:	static void task_non_contending(struct task_struct *);
2065:	static void task_tick_dl(struct rq *, struct task_struct *, int);
2475:	static void task_woken_dl(struct rq *, struct task_struct *);
1307:	static void update_curr_dl(struct rq *);
561:	static void update_dl_migration(struct dl_rq *);
1794:	static void yield_task_dl(struct rq *);

File kernel/sched/fair.c:
653:	struct sched_entity *__pick_first_entity(struct cfs_rq *);
6607:	void __update_idle_core(struct rq *);
12117:	int alloc_fair_sched_group(struct task_group *, struct task_group *);
146:	int arch_asym_cpu_priority(int);
12102:	void free_fair_sched_group(struct task_group *);
5937:	void init_cfs_bandwidth(struct cfs_bandwidth *);
12073:	void init_cfs_rq(struct cfs_rq *);
800:	void init_entity_runnable_average(struct sched_entity *);
3081:	void init_numa_balancing(unsigned long, struct task_struct *);
12475:	void init_sched_fair_class(void);
12203:	void init_tg_cfs_entry(struct task_group *, struct cfs_rq *, struct sched_entity *, int, struct sched_entity *);
11251:	void nohz_balance_enter_idle(int);
11217:	void nohz_balance_exit_idle(struct rq *);
11455:	void nohz_run_idle_balance(int);
12158:	void online_fair_sched_group(struct task_group *);
7700:	struct task_struct *pick_next_task_fair(struct rq *, struct task_struct *, struct rq_flags *);
844:	void post_init_entity_util_avg(struct task_struct *);
3345:	void reweight_task(struct task_struct *, int);
12286:	int sched_group_set_idle(struct task_group *, long);
12272:	int sched_group_set_shares(struct task_group *, unsigned long);
286:	void sched_init_granularity(void);
3629:	void set_task_rq_fair(struct sched_entity *, struct cfs_rq *, struct cfs_rq *);
1568:	bool should_numa_migrate_memory(struct task_struct *, struct page *, int, int);
2836:	void task_numa_fault(int, int, int, int);
2800:	void task_numa_free(struct task_struct *, bool);
1256:	pid_t task_numa_group_id(struct task_struct *);
11667:	void trigger_load_balance(struct rq *);
12176:	void unregister_fair_sched_group(struct task_group *);
8923:	void update_group_capacity(struct sched_domain *, int);
10896:	void update_max_interval(void);
7843:	static struct task_struct *__pick_next_task_fair(struct rq *);
12236:	static int __sched_group_set_shares(struct task_group *, unsigned long);
11331:	static void _nohz_idle_balance(struct rq *, unsigned int);
10812:	static int active_load_balance_cpu_stop(void *);
4099:	static void attach_entity_load_avg(struct cfs_rq *, struct sched_entity *);
12012:	static void attach_task_cfs_rq(struct task_struct *);
7480:	static int balance_fair(struct rq *, struct task_struct *, struct rq_flags *);
8224:	static int can_migrate_task(struct task_struct *, struct lb_env *);
7569:	static void check_preempt_wakeup(struct rq *, struct task_struct *, int);
6149:	static void dequeue_task_fair(struct rq *, struct task_struct *, int);
11995:	static void detach_task_cfs_rq(struct task_struct *);
6056:	static void enqueue_task_fair(struct rq *, struct task_struct *, int);
6514:	static int find_idlest_cpu(struct sched_domain *, struct task_struct *, int, int, int);
12375:	static unsigned int get_rr_interval_fair(struct rq *, struct task_struct *);
1434:	static unsigned long group_weight(struct task_struct *, int, int);
10503:	static int load_balance(int, struct rq *, struct sched_domain *, enum cpu_idle_type, int *);
7433:	static void migrate_task_rq_fair(struct task_struct *, int);
10430:	static int need_active_balance(struct lb_env *);
11516:	static int newidle_balance(struct rq *, struct rq_flags *);
4978:	static struct sched_entity *pick_next_entity(struct cfs_rq *, struct sched_entity *);
7667:	static struct task_struct *pick_task_fair(struct rq *);
11880:	static void prio_changed_fair(struct rq *, struct task_struct *, int);
11933:	static void propagate_entity_cfs_rq(struct sched_entity *);
2682:	static void put_numa_group(struct numa_group *);
7851:	static void put_prev_task_fair(struct rq *, struct task_struct *);
10931:	static void rebalance_domains(struct rq *, enum cpu_idle_type);
3318:	static void reweight_entity(struct cfs_rq *, struct sched_entity *, unsigned long);
11689:	static void rq_offline_fair(struct rq *);
11682:	static void rq_online_fair(struct rq *);
11642:	static void run_rebalance_domains(struct softirq_action *);
218:	static int sched_fair_sysctl_init(void);
741:	static u64 sched_slice(struct cfs_rq *, struct sched_entity *);
1344:	static unsigned long score_nearby_nodes(struct task_struct *, int, int, bool);
7363:	static int select_task_rq_fair(struct task_struct *, int, int);
11201:	static void set_cpu_sd_state_busy(int);
4930:	static void set_next_entity(struct cfs_rq *, struct sched_entity *);
12050:	static void set_next_task_fair(struct rq *, struct task_struct *, bool);
130:	static int setup_sched_thermal_decay_shift(char *);
12023:	static void switched_from_fair(struct rq *, struct task_struct *);
12028:	static void switched_to_fair(struct rq *, struct task_struct *);
12083:	static void task_change_group_fair(struct task_struct *);
7474:	static void task_dead_fair(struct task_struct *);
11844:	static void task_fork_fair(struct task_struct *);
1828:	static void task_numa_assign(struct task_numa_env *, struct task_struct *, long);
2104:	static void task_numa_find_cpu(struct task_numa_env *, long, long);
2935:	static void task_numa_work(struct callback_head *);
1209:	static unsigned int task_scan_max(struct task_struct *);
1187:	static unsigned int task_scan_start(struct task_struct *);
11820:	static void task_tick_fair(struct rq *, struct task_struct *, int);
1415:	static unsigned long task_weight(struct task_struct *, int, int);
8729:	static void update_blocked_averages(int);
897:	static void update_curr(struct cfs_rq *);
937:	static void update_curr_fair(struct rq *);
4185:	static void update_load_avg(struct cfs_rq *, struct sched_entity *, int);
4578:	static void update_misfit_status(struct task_struct *, struct rq *);
1788:	static void update_numa_stats(struct task_numa_env *, struct numa_stats *, int, bool);
274:	static void update_sysctl(void);
7867:	static void yield_task_fair(struct rq *);
7898:	static bool yield_to_task_fair(struct rq *, struct task_struct *);

File kernel/sched/idle.c:
75:	void arch_cpu_idle(void);
74:	void arch_cpu_idle_dead(void);
72:	void arch_cpu_idle_enter(void);
73:	void arch_cpu_idle_exit(void);
71:	void arch_cpu_idle_prepare(void);
24:	void cpu_idle_poll_ctrl(bool);
337:	bool cpu_in_idle(unsigned long);
395:	void cpu_startup_entry(enum cpuhp_state);
86:	void default_idle_call(void);
446:	struct task_struct *pick_next_task_idle(struct rq *);
358:	void play_idle_precise(u64, u64);
17:	void sched_idle_set_state(struct cpuidle_state *);
415:	static int balance_idle(struct rq *, struct task_struct *, struct rq_flags *);
424:	static void check_preempt_curr_idle(struct rq *, struct task_struct *, int);
43:	static int cpu_idle_nopoll_setup(char *);
52:	static int cpu_idle_poll(void);
35:	static int cpu_idle_poll_setup(char *);
460:	static void dequeue_task_idle(struct rq *, struct task_struct *, int);
258:	static void do_idle(void);
348:	static enum hrtimer_restart idle_inject_timer_fn(struct hrtimer *);
440:	static struct task_struct *pick_task_idle(struct rq *);
486:	static void prio_changed_idle(struct rq *, struct task_struct *, int);
429:	static void put_prev_task_idle(struct rq *, struct task_struct *);
409:	static int select_task_rq_idle(struct task_struct *, int, int);
433:	static void set_next_task_idle(struct rq *, struct task_struct *, bool);
480:	static void switched_to_idle(struct rq *, struct task_struct *);
476:	static void task_tick_idle(struct rq *, struct task_struct *, int);
491:	static void update_curr_idle(struct rq *);

File kernel/sched/isolation.c:
65:	void housekeeping_affine(struct task_struct *, enum hk_type);
39:	int housekeeping_any_cpu(enum hk_type);
56:	const struct cpumask *housekeeping_cpumask(enum hk_type);
33:	bool housekeeping_enabled(enum hk_type);
82:	void housekeeping_init(void);
73:	bool housekeeping_test_cpu(int, enum hk_type);
191:	static int housekeeping_isolcpus_setup(char *);
180:	static int housekeeping_nohz_full_setup(char *);
109:	static int housekeeping_setup(char *, unsigned long);

File kernel/sched/loadavg.c:
349:	void calc_global_load(void);
385:	void calc_global_load_tick(struct rq *);
78:	long calc_load_fold_active(struct rq *, long);
156:	unsigned long calc_load_n(unsigned long, unsigned long, unsigned long, unsigned int);
258:	void calc_load_nohz_remote(struct rq *);
245:	void calc_load_nohz_start(void);
263:	void calc_load_nohz_stop(void);
71:	void get_avenrun(unsigned long *, unsigned long, int);

File kernel/sched/membarrier.c:
579:	long __arm64_sys_membarrier(const struct pt_regs *);
216:	void membarrier_exec_mmap(struct mm_struct *);
232:	void membarrier_update_current_mm(struct mm_struct *);
164:	static void ipi_mb(void *);
186:	static void ipi_rseq(void *);
169:	static void ipi_sync_core(void *);
199:	static void ipi_sync_rq_state(void *);
309:	static int membarrier_private_expedited(int, int);
425:	static int sync_runqueues_membarrier_state(struct mm_struct *);

File kernel/sched/pelt.c:
295:	int __update_load_avg_blocked_se(u64, struct sched_entity *);
320:	int __update_load_avg_cfs_rq(u64, struct cfs_rq *);
306:	int __update_load_avg_se(u64, struct cfs_rq *, struct sched_entity *);
372:	int update_dl_rq_load_avg(u64, struct rq *, int);
430:	int update_irq_load_avg(struct rq *, u64);
346:	int update_rt_rq_load_avg(u64, struct rq *, int);

File kernel/sched/rt.c:
313:	int alloc_rt_sched_group(struct task_group *, struct task_group *);
311:	void free_rt_sched_group(struct task_group *);
90:	void init_rt_bandwidth(struct rt_bandwidth *, u64, u64);
130:	void init_rt_rq(struct rt_rq *);
2513:	void init_sched_rt_class(void);
2309:	void rto_push_irq_work_func(struct irq_work *);
716:	bool sched_rt_bandwidth_account(struct rt_rq *);
309:	void unregister_rt_sched_group(struct task_group *);
1697:	static int balance_rt(struct rq *, struct task_struct *, struct rq_flags *);
1718:	static void check_preempt_curr_rt(struct rq *, struct task_struct *, int);
1482:	static void dequeue_rt_stack(struct sched_rt_entity *, unsigned int);
1551:	static void dequeue_task_rt(struct rq *, struct task_struct *, int);
1535:	static void enqueue_task_rt(struct rq *, struct task_struct *, int);
1969:	static struct rq *find_lock_lowest_rq(struct task_struct *, struct rq *);
1877:	static int find_lowest_rq(struct task_struct *);
2666:	static unsigned int get_rr_interval_rt(struct rq *, struct task_struct *);
1811:	static struct task_struct *pick_next_task_rt(struct rq *);
1799:	static struct task_struct *pick_task_rt(struct rq *);
2560:	static void prio_changed_rt(struct rq *, struct task_struct *, int);
2346:	static void pull_rt_task(struct rq *);
2050:	static int push_rt_task(struct rq *, bool);
2168:	static void push_rt_tasks(struct rq *);
1821:	static void put_prev_task_rt(struct rq *, struct task_struct *);
2484:	static void rq_offline_rt(struct rq *);
2473:	static void rq_online_rt(struct rq *);
523:	static bool rt_task_fits_capacity(struct task_struct *, int);
3023:	static int sched_rr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2984:	static int sched_rt_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
66:	static enum hrtimer_restart sched_rt_period_timer(struct hrtimer *);
58:	static int sched_rt_sysctl_init(void);
1599:	static int select_task_rq_rt(struct task_struct *, int, int);
1743:	static void set_next_task_rt(struct rq *, struct task_struct *, bool);
2498:	static void switched_from_rt(struct rq *, struct task_struct *);
2529:	static void switched_to_rt(struct rq *, struct task_struct *);
2632:	static void task_tick_rt(struct rq *, struct task_struct *, int);
2459:	static void task_woken_rt(struct rq *, struct task_struct *);
2275:	static void tell_cpu_to_push(struct rq *);
1045:	static void update_curr_rt(struct rq *);
361:	static void update_rt_migration(struct rt_rq *);
1590:	static void yield_task_rt(struct rq *);

File kernel/sched/sched.h:
1373:	static unsigned long _raw_spin_rq_lock_irqsave(struct rq *);
2677:	static void double_lock_irq(spinlock_t *, spinlock_t *);
2305:	static struct task_struct *get_push_task(struct rq *);
1356:	static void raw_spin_rq_lock(struct rq *);

File kernel/sched/stop_task.c:
19:	static int balance_stop(struct rq *, struct task_struct *, struct rq_flags *);
26:	static void check_preempt_curr_stop(struct rq *, struct task_struct *, int);
61:	static void dequeue_task_stop(struct rq *, struct task_struct *, int);
55:	static void enqueue_task_stop(struct rq *, struct task_struct *, int);
44:	static struct task_struct *pick_next_task_stop(struct rq *);
36:	static struct task_struct *pick_task_stop(struct rq *);
105:	static void prio_changed_stop(struct rq *, struct task_struct *, int);
71:	static void put_prev_task_stop(struct rq *, struct task_struct *);
13:	static int select_task_rq_stop(struct task_struct *, int, int);
31:	static void set_next_task_stop(struct rq *, struct task_struct *, bool);
99:	static void switched_to_stop(struct rq *, struct task_struct *);
95:	static void task_tick_stop(struct rq *, struct task_struct *, int);
110:	static void update_curr_stop(struct rq *);
66:	static void yield_task_stop(struct rq *);

File kernel/sched/swait.c:
125:	void __finish_swait(struct swait_queue_head *, struct swait_queue *);
6:	void __init_swait_queue_head(struct swait_queue_head *, const char *, struct lock_class_key *);
84:	void __prepare_to_swait(struct swait_queue_head *, struct swait_queue *);
132:	void finish_swait(struct swait_queue_head *, struct swait_queue *);
102:	long prepare_to_swait_event(struct swait_queue_head *, struct swait_queue *, int);
91:	void prepare_to_swait_exclusive(struct swait_queue_head *, struct swait_queue *, int);
61:	void swake_up_all(struct swait_queue_head *);
41:	void swake_up_all_locked(struct swait_queue_head *);
21:	void swake_up_locked(struct swait_queue_head *);
47:	void swake_up_one(struct swait_queue_head *);

File kernel/sched/topology.c:
2425:	cpumask_var_t *alloc_sched_domains(unsigned int);
1718:	bool find_numa_distance(int);
2442:	void free_sched_domains(cpumask_var_t *, unsigned int);
786:	int group_balance_cpu(struct sched_group *);
581:	void init_defrootdomain(void);
2641:	void partition_sched_domains(int, cpumask_var_t *, struct sched_domain_attr *);
2535:	void partition_sched_domains_locked(int, cpumask_var_t *, struct sched_domain_attr *);
485:	void rq_attach_root(struct rq *, struct root_domain *);
2026:	void sched_domains_numa_masks_clear(unsigned int);
2009:	void sched_domains_numa_masks_set(unsigned int);
522:	void sched_get_rd(struct root_domain *);
2454:	int sched_init_domains(const struct cpumask *);
1806:	void sched_init_numa(int);
2046:	int sched_numa_find_closest(const struct cpumask *, int);
527:	void sched_put_rd(struct root_domain *);
1993:	void sched_update_numa(int, bool);
1677:	void set_sched_topology(struct sched_domain_topology_level *);
2420:	int topology_update_cpu_topology(void);
1381:	static void asym_cpu_capacity_scan(void);
2248:	static int build_sched_domains(const struct cpumask *, struct sched_domain_attr *);
707:	static void cpu_attach_domain(struct sched_domain *, struct root_domain *, int);
624:	static void destroy_sched_domain(struct sched_domain *);
638:	static void destroy_sched_domains_rcu(struct callback_head *);
471:	static void free_rootdomain(struct callback_head *);
1767:	static void init_numa_topology_type(int);
535:	static int init_rootdomain(struct root_domain *);
1688:	static const struct cpumask *sd_numa_mask(int);
1418:	static int setup_relax_domain_level(char *);

File kernel/sched/wait.c:
8:	void __init_waitqueue_head(struct wait_queue_head *, const char *, struct lock_class_key *);
157:	int __wake_up(struct wait_queue_head *, unsigned int, int, void *);
167:	void __wake_up_locked(struct wait_queue_head *, unsigned int, int);
173:	void __wake_up_locked_key(struct wait_queue_head *, unsigned int, void *);
179:	void __wake_up_locked_key_bookmark(struct wait_queue_head *, unsigned int, void *, wait_queue_entry_t *);
228:	void __wake_up_locked_sync_key(struct wait_queue_head *, unsigned int, void *);
244:	void __wake_up_pollfree(struct wait_queue_head *);
238:	void __wake_up_sync(struct wait_queue_head *, unsigned int);
202:	void __wake_up_sync_key(struct wait_queue_head *, unsigned int, void *);
17:	void add_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
28:	void add_wait_queue_exclusive(struct wait_queue_head *, struct wait_queue_entry *);
39:	void add_wait_queue_priority(struct wait_queue_head *, struct wait_queue_entry *);
417:	int autoremove_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
348:	int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
365:	int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
391:	void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
296:	void init_wait_entry(struct wait_queue_entry *, int);
264:	void prepare_to_wait(struct wait_queue_head *, struct wait_queue_entry *, int);
305:	long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
279:	bool prepare_to_wait_exclusive(struct wait_queue_head *, struct wait_queue_entry *, int);
50:	void remove_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
453:	long wait_woken(struct wait_queue_entry *, unsigned int, long);
478:	int woken_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
124:	static int __wake_up_common_lock(struct wait_queue_head *, unsigned int, int, int, void *);

File kernel/sched/wait_bit.c:
153:	wait_queue_head_t *__var_waitqueue(void *);
41:	int __wait_on_bit(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
82:	int __wait_on_bit_lock(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
121:	void __wake_up_bit(struct wait_queue_head *, void *, int);
197:	int bit_wait(struct wait_bit_key *, int);
207:	int bit_wait_io(struct wait_bit_key *, int);
231:	int bit_wait_io_timeout(struct wait_bit_key *, int);
217:	int bit_wait_timeout(struct wait_bit_key *, int);
12:	struct wait_queue_head *bit_waitqueue(void *, int);
174:	void init_wait_var_entry(struct wait_bit_queue_entry *, void *, int);
58:	int out_of_line_wait_on_bit(void *, int, wait_bit_action_f *, unsigned int);
111:	int out_of_line_wait_on_bit_lock(void *, int, wait_bit_action_f *, unsigned int);
68:	int out_of_line_wait_on_bit_timeout(void *, int, wait_bit_action_f *, unsigned int, unsigned long);
245:	void wait_bit_init(void);
21:	int wake_bit_function(struct wait_queue_entry *, unsigned int, int, void *);
147:	void wake_up_bit(void *, int);
191:	void wake_up_var(void *);
160:	static int var_wake_function(struct wait_queue_entry *, unsigned int, int, void *);

File kernel/signal.c:
3772:	long __arm64_sys_kill(const struct pt_regs *);
3847:	long __arm64_sys_pidfd_send_signal(const struct pt_regs *);
2999:	long __arm64_sys_restart_syscall(const struct pt_regs *);
4411:	long __arm64_sys_rt_sigaction(const struct pt_regs *);
3214:	long __arm64_sys_rt_sigpending(const struct pt_regs *);
3142:	long __arm64_sys_rt_sigprocmask(const struct pt_regs *);
3997:	long __arm64_sys_rt_sigqueueinfo(const struct pt_regs *);
4634:	long __arm64_sys_rt_sigsuspend(const struct pt_regs *);
3628:	long __arm64_sys_rt_sigtimedwait(const struct pt_regs *);
4037:	long __arm64_sys_rt_tgsigqueueinfo(const struct pt_regs *);
4228:	long __arm64_sys_sigaltstack(const struct pt_regs *);
3953:	long __arm64_sys_tgkill(const struct pt_regs *);
3969:	long __arm64_sys_tkill(const struct pt_regs *);
1454:	int __kill_pgrp_info(int, struct kernel_siginfo *, struct pid *);
1384:	struct sighand_struct *__lock_task_sighand(struct task_struct *, unsigned long *);
4253:	int __save_altstack(stack_t *, unsigned long);
3035:	void __set_current_blocked(const sigset_t *);
4679:	const char *arch_vma_name(struct vm_area_struct *);
190:	void calculate_sigpending(void);
3366:	int copy_siginfo_from_user(kernel_siginfo_t *, const siginfo_t *);
3324:	int copy_siginfo_to_user(siginfo_t *, const kernel_siginfo_t *);
629:	int dequeue_signal(struct task_struct *, sigset_t *, kernel_siginfo_t *, enum pid_type *);
3005:	long do_no_restart_syscall(struct restart_block *);
2025:	bool do_notify_parent(struct task_struct *, int);
1289:	int do_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
4088:	int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
2942:	void exit_signals(struct task_struct *);
512:	void flush_itimer_signals(void);
539:	void flush_signal_handlers(struct task_struct *, int);
476:	void flush_signals(struct task_struct *);
461:	void flush_sigqueue(struct sigpending *);
1677:	void force_exit_sig(int);
1664:	void force_fatal_sig(int);
1650:	void force_sig(int);
1778:	int force_sig_bnderr(void *, void *, void *);
1723:	int force_sig_fault(int, int, void *);
1704:	int force_sig_fault_to_task(int, int, void *, struct task_struct *);
1874:	int force_sig_fault_trapno(int, int, void *, int);
1355:	int force_sig_info(struct kernel_siginfo *);
1749:	int force_sig_mceerr(int, void *, short);
1793:	int force_sig_pkuerr(void *, u32);
1859:	int force_sig_ptrace_errno_trap(int, void *);
1841:	int force_sig_seccomp(int, int, bool);
1696:	void force_sigsegv(int);
2627:	bool get_signal(struct ksignal *);
1434:	int group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
524:	void ignore_signals(struct task_struct *);
4065:	void kernel_sigaction(int, __sighandler_t);
1904:	int kill_pgrp(struct pid *, int, int);
1916:	int kill_pid(struct pid *, int, int);
1469:	int kill_pid_info(int, struct kernel_siginfo *, struct pid *);
1536:	int kill_pid_usb_asyncio(int, int, sigval_t, struct pid *, const struct cred *);
207:	int next_signal(struct sigpending *, sigset_t *);
2348:	int ptrace_notify(int, unsigned long);
182:	void recalc_sigpending(void);
176:	void recalc_sigpending_and_wake(struct task_struct *);
4242:	int restore_altstack(const stack_t *);
1644:	int send_sig(int, struct task_struct *, int);
1730:	int send_sig_fault(int, int, void *, struct task_struct *);
1890:	int send_sig_fault_trapno(int, int, void *, int, struct task_struct *);
1627:	int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
1763:	int send_sig_mceerr(int, void *, short, struct task_struct *);
1807:	int send_sig_perf(void *, u32, u64);
1220:	int send_signal_locked(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
1961:	int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
3029:	void set_current_blocked(sigset_t *);
3096:	int set_user_sigmask(const sigset_t *, size_t);
4083:	void sigaction_compat_abi(struct k_sigaction *, struct k_sigaction *);
3279:	enum siginfo_layout siginfo_layout(unsigned int, int);
2902:	void signal_setup_done(int, struct ksignal *, int);
763:	void signal_wake_up_state(struct task_struct *, unsigned int);
4757:	void signals_init(void);
3059:	int sigprocmask(int, sigset_t *, sigset_t *);
1931:	struct sigqueue *sigqueue_alloc(void);
1936:	void sigqueue_free(struct sigqueue *);
336:	void task_clear_jobctl_pending(struct task_struct *, unsigned long);
312:	void task_clear_jobctl_trapping(struct task_struct *);
391:	void task_join_group_stop(struct task_struct *);
284:	bool task_set_jobctl_pending(struct task_struct *, unsigned long);
555:	bool unhandled_signal(struct task_struct *, int);
1363:	int zap_other_threads(struct task_struct *);
613:	static int __dequeue_signal(struct sigpending *, sigset_t *, kernel_siginfo_t *, bool *);
1079:	static int __send_signal_locked(int, struct kernel_siginfo *, struct task_struct *, enum pid_type, bool);
3010:	static void __set_task_blocked(struct task_struct *, const sigset_t *);
412:	static struct sigqueue *__sigqueue_alloc(int, struct task_struct *, gfp_t, int, const unsigned int);
834:	static int check_kill_permission(int, struct kernel_siginfo *, struct task_struct *);
998:	static void complete_signal(int, struct task_struct *, enum pid_type);
2532:	static void do_freezer_trap(void);
2504:	static void do_jobctl_trap(void);
2136:	static void do_notify_parent_cldstop(struct task_struct *, bool, int);
3900:	static int do_send_specific(pid_t, pid_t, int, struct kernel_siginfo *);
4171:	static int do_sigaltstack(const stack_t *, stack_t *, unsigned long, size_t);
2384:	static bool do_signal_stop(int);
1321:	static int force_sig_info_to_task(struct kernel_siginfo *, struct task_struct *, enum sig_handler);
3334:	static int post_copy_siginfo_from_user(kernel_siginfo_t *, const siginfo_t *);
906:	static bool prepare_signal(int, struct task_struct *, bool);
253:	static void print_dropped_signal(int);
2559:	static int ptrace_signal(int, kernel_siginfo_t *, enum pid_type);
2206:	static int ptrace_stop(int, int, unsigned long, kernel_siginfo_t *);
887:	static void ptrace_trap_notify(struct task_struct *);
2915:	static void retarget_shared_pending(struct task_struct *, sigset_t *);
1280:	static int setup_print_fatal_signals(char *);
365:	static bool task_participate_group_stop(struct task_struct *);

File kernel/smp.c:
471:	void __smp_call_single_queue(int, struct llist_node *);
1054:	void arch_disable_smp_support(void);
149:	void call_function_init(void);
699:	void flush_smp_call_function_queue(void);
542:	void generic_smp_call_function_single_interrupt(void);
1175:	void kick_all_cpus_sync(void);
1146:	void on_each_cpu_cond_mask(smp_cond_func_t, smp_call_func_t, void *, bool, const struct cpumask *);
1097:	void setup_nr_cpu_ids(void);
1030:	void smp_call_function(smp_call_func_t, void *, int);
844:	int smp_call_function_any(const struct cpumask *, smp_call_func_t, void *, int);
1008:	void smp_call_function_many(const struct cpumask *, smp_call_func_t, void *, bool);
727:	int smp_call_function_single(int, smp_call_func_t, void *, int);
807:	int smp_call_function_single_async(int, struct __call_single_data *);
1238:	int smp_call_on_cpu(unsigned int, int (*)(void *), void *, bool);
1103:	void smp_init(void);
123:	int smpcfd_dead_cpu(unsigned int);
133:	int smpcfd_dying_cpu(unsigned int);
101:	int smpcfd_prepare_cpu(unsigned int);
1189:	void wake_up_all_idle_cpus(void);
563:	static void __flush_smp_call_function_queue(bool);
1160:	static void do_nothing(void *);
506:	static int generic_exec_single(int, struct __call_single_data *);
1079:	static int maxcpus(char *);
1056:	static int nosmp(char *);
1067:	static int nrcpus(char *);
882:	static void smp_call_function_many_cond(const struct cpumask *, smp_call_func_t, void *, unsigned int, smp_cond_func_t);
1224:	static void smp_call_on_cpu_callback(struct work_struct *);

File kernel/smpboot.c:
352:	int cpu_check_up_prepare(int);
473:	bool cpu_report_death(void);
335:	int cpu_report_state(int);
415:	void cpu_set_state_online(int);
425:	bool cpu_wait_death(unsigned int, int);
30:	struct task_struct *idle_thread_get(unsigned int);
39:	void idle_thread_set_boot_cpu(void);
66:	void idle_threads_init(void);
213:	int smpboot_create_threads(unsigned int);
255:	int smpboot_park_threads(unsigned int);
289:	int smpboot_register_percpu_thread(struct smp_hotplug_thread *);
236:	int smpboot_unpark_threads(unsigned int);
318:	void smpboot_unregister_percpu_thread(struct smp_hotplug_thread *);
170:	static int __smpboot_create_thread(struct smp_hotplug_thread *, unsigned int);
266:	static void smpboot_destroy_threads(struct smp_hotplug_thread *);
106:	static int smpboot_thread_fn(void *);

File kernel/softirq.c:
528:	void __do_softirq(void);
373:	void __local_bh_enable_ip(unsigned long, unsigned int);
709:	void __raise_softirq_irqoff(unsigned int);
755:	void __tasklet_hi_schedule(struct tasklet_struct *);
748:	void __tasklet_schedule(struct tasklet_struct *);
366:	void _local_bh_enable(void);
1009:	unsigned int arch_dynirq_lower_bound(unsigned int);
1004:	int arch_early_irq_init(void);
999:	int arch_probe_nr_irqs(void);
459:	void do_softirq(void);
994:	int early_irq_init(void);
621:	void irq_enter(void);
607:	void irq_enter_rcu(void);
672:	void irq_exit(void);
660:	void irq_exit_rcu(void);
716:	void open_softirq(int, void (*)(struct softirq_action *));
700:	void raise_softirq(unsigned int);
683:	void raise_softirq_irqoff(unsigned int);
906:	void softirq_init(void);
838:	void tasklet_init(struct tasklet_struct *, void (*)(unsigned long), unsigned long);
876:	void tasklet_kill(struct tasklet_struct *);
826:	void tasklet_setup(struct tasklet_struct *, void (*)(struct tasklet_struct *));
890:	void tasklet_unlock(struct tasklet_struct *);
855:	void tasklet_unlock_spin_wait(struct tasklet_struct *);
899:	void tasklet_unlock_wait(struct tasklet_struct *);
640:	static void __irq_exit_rcu(void);
921:	static int ksoftirqd_should_run(unsigned int);
926:	static void run_ksoftirqd(unsigned int);
979:	static int spawn_ksoftirqd(void);
943:	static int takeover_tasklets(unsigned int);
816:	static void tasklet_action(struct softirq_action *);
776:	static void tasklet_action_common(struct softirq_action *, struct tasklet_head *, unsigned int);
821:	static void tasklet_hi_action(struct softirq_action *);

File kernel/stacktrace.c:
390:	unsigned int filter_irq_stacks(unsigned long *, unsigned int);
24:	void stack_trace_print(const unsigned long *, unsigned int, int);
112:	unsigned int stack_trace_save(unsigned long *, unsigned int, unsigned int);
164:	unsigned int stack_trace_save_regs(struct pt_regs *, unsigned long *, unsigned int, unsigned int);
136:	unsigned int stack_trace_save_tsk(struct task_struct *, unsigned long *, unsigned int, unsigned int);
47:	int stack_trace_snprint(char *, size_t, const unsigned long *, unsigned int, int);
82:	static bool stack_trace_consume_entry(void *, unsigned long);
97:	static bool stack_trace_consume_entry_nosched(void *, unsigned long);

File kernel/stop_machine.c:
52:	void print_stop_info(const char *, struct task_struct *);
635:	int stop_core_cpuslocked(unsigned int, cpu_stop_fn_t, void *);
622:	int stop_machine(cpu_stop_fn_t, void *, const struct cpumask *);
586:	int stop_machine_cpuslocked(cpu_stop_fn_t, void *, const struct cpumask *);
677:	int stop_machine_from_inactive_cpu(cpu_stop_fn_t, void *, const struct cpumask *);
526:	void stop_machine_park(int);
550:	void stop_machine_unpark(int);
197:	void stop_machine_yield(const struct cpumask *);
139:	int stop_one_cpu(unsigned int, cpu_stop_fn_t, void *);
384:	bool stop_one_cpu_nowait(unsigned int, cpu_stop_fn_t, void *, struct cpu_stop_work *);
334:	int stop_two_cpus(unsigned int, unsigned int, cpu_stop_fn_t, void *);
538:	static void cpu_stop_create(unsigned int);
568:	static int cpu_stop_init(void);
543:	static void cpu_stop_park(unsigned int);
93:	static bool cpu_stop_queue_work(unsigned int, struct cpu_stop_work *);
474:	static int cpu_stop_should_run(unsigned int);
486:	static void cpu_stopper_thread(unsigned int);
203:	static int multi_cpu_stop(void *);
391:	static bool queue_stop_cpus_work(const struct cpumask *, cpu_stop_fn_t, void *, struct cpu_stop_done *);
463:	static int stop_cpus(const struct cpumask *, cpu_stop_fn_t, void *);

File kernel/sys.c:
2638:	long __arm64_sys_getcpu(const struct pt_regs *);
986:	long __arm64_sys_getegid(const struct pt_regs *);
974:	long __arm64_sys_geteuid(const struct pt_regs *);
980:	long __arm64_sys_getgid(const struct pt_regs *);
1154:	long __arm64_sys_getpgid(const struct pt_regs *);
940:	long __arm64_sys_getpid(const struct pt_regs *);
957:	long __arm64_sys_getppid(const struct pt_regs *);
281:	long __arm64_sys_getpriority(const struct pt_regs *);
818:	long __arm64_sys_getresgid(const struct pt_regs *);
735:	long __arm64_sys_getresuid(const struct pt_regs *);
1500:	long __arm64_sys_getrlimit(const struct pt_regs *);
1840:	long __arm64_sys_getrusage(const struct pt_regs *);
1168:	long __arm64_sys_getsid(const struct pt_regs *);
946:	long __arm64_sys_gettid(const struct pt_regs *);
968:	long __arm64_sys_getuid(const struct pt_regs *);
1288:	long __arm64_sys_newuname(const struct pt_regs *);
2353:	long __arm64_sys_prctl(const struct pt_regs *);
1666:	long __arm64_sys_prlimit64(const struct pt_regs *);
1410:	long __arm64_sys_setdomainname(const struct pt_regs *);
925:	long __arm64_sys_setfsgid(const struct pt_regs *);
881:	long __arm64_sys_setfsuid(const struct pt_regs *);
467:	long __arm64_sys_setgid(const struct pt_regs *);
1356:	long __arm64_sys_sethostname(const struct pt_regs *);
1055:	long __arm64_sys_setpgid(const struct pt_regs *);
211:	long __arm64_sys_setpriority(const struct pt_regs *);
421:	long __arm64_sys_setregid(const struct pt_regs *);
813:	long __arm64_sys_setresgid(const struct pt_regs *);
730:	long __arm64_sys_setresuid(const struct pt_regs *);
587:	long __arm64_sys_setreuid(const struct pt_regs *);
1713:	long __arm64_sys_setrlimit(const struct pt_regs *);
1240:	long __arm64_sys_setsid(const struct pt_regs *);
650:	long __arm64_sys_setuid(const struct pt_regs *);
2718:	long __arm64_sys_sysinfo(const struct pt_regs *);
1005:	long __arm64_sys_times(const struct pt_regs *);
1866:	long __arm64_sys_umask(const struct pt_regs *);
889:	long __sys_setfsgid(gid_t);
845:	long __sys_setfsuid(uid_t);
431:	long __sys_setgid(gid_t);
365:	long __sys_setregid(gid_t, gid_t);
757:	long __sys_setresgid(gid_t, gid_t, gid_t);
660:	long __sys_setresuid(uid_t, uid_t, uid_t);
522:	long __sys_setreuid(uid_t, uid_t);
603:	long __sys_setuid(uid_t);
2276:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
2281:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
1765:	void getrusage(struct task_struct *, int, struct rusage *);
1207:	int ksys_setsid(void);
1437:	static int do_prlimit(struct task_struct *, unsigned int, struct rlimit *, struct rlimit *);
2258:	static int propagate_has_child_subreaper(struct task_struct *, void *);
187:	static int set_one_prio(struct task_struct *, int, int);

File kernel/sys_ni.c:
243:	long __arm64_sys_accept(const struct pt_regs *);
304:	long __arm64_sys_accept4(const struct pt_regs *);
132:	long __arm64_sys_acct(const struct pt_regs *);
266:	long __arm64_sys_add_key(const struct pt_regs *);
424:	long __arm64_sys_adjtimex_time32(const struct pt_regs *);
241:	long __arm64_sys_bind(const struct pt_regs *);
341:	long __arm64_sys_bpf(const struct pt_regs *);
135:	long __arm64_sys_capget(const struct pt_regs *);
136:	long __arm64_sys_capset(const struct pt_regs *);
460:	long __arm64_sys_chown16(const struct pt_regs *);
442:	long __arm64_sys_clock_adjtime32(const struct pt_regs *);
433:	long __arm64_sys_clock_getres_time32(const struct pt_regs *);
432:	long __arm64_sys_clock_gettime32(const struct pt_regs *);
434:	long __arm64_sys_clock_nanosleep_time32(const struct pt_regs *);
431:	long __arm64_sys_clock_settime32(const struct pt_regs *);
144:	long __arm64_sys_clone3(const struct pt_regs *);
244:	long __arm64_sys_connect(const struct pt_regs *);
353:	long __arm64_sys_copy_file_range(const struct pt_regs *);
165:	long __arm64_sys_delete_module(const struct pt_regs *);
404:	long __arm64_sys_epoll_create(const struct pt_regs *);
67:	long __arm64_sys_epoll_create1(const struct pt_regs *);
68:	long __arm64_sys_epoll_ctl(const struct pt_regs *);
69:	long __arm64_sys_epoll_pwait(const struct pt_regs *);
71:	long __arm64_sys_epoll_pwait2(const struct pt_regs *);
414:	long __arm64_sys_epoll_wait(const struct pt_regs *);
406:	long __arm64_sys_eventfd(const struct pt_regs *);
64:	long __arm64_sys_eventfd2(const struct pt_regs *);
344:	long __arm64_sys_execveat(const struct pt_regs *);
411:	long __arm64_sys_fadvise64(const struct pt_regs *);
279:	long __arm64_sys_fadvise64_64(const struct pt_regs *);
315:	long __arm64_sys_fanotify_init(const struct pt_regs *);
316:	long __arm64_sys_fanotify_mark(const struct pt_regs *);
461:	long __arm64_sys_fchown16(const struct pt_regs *);
333:	long __arm64_sys_finit_module(const struct pt_regs *);
88:	long __arm64_sys_flock(const struct pt_regs *);
147:	long __arm64_sys_futex(const struct pt_regs *);
148:	long __arm64_sys_futex_time32(const struct pt_regs *);
153:	long __arm64_sys_futex_waitv(const struct pt_regs *);
436:	long __arm64_sys_futimesat_time32(const struct pt_regs *);
297:	long __arm64_sys_get_mempolicy(const struct pt_regs *);
151:	long __arm64_sys_get_robust_list(const struct pt_regs *);
462:	long __arm64_sys_getegid16(const struct pt_regs *);
463:	long __arm64_sys_geteuid16(const struct pt_regs *);
464:	long __arm64_sys_getgid16(const struct pt_regs *);
188:	long __arm64_sys_getgroups(const struct pt_regs *);
465:	long __arm64_sys_getgroups16(const struct pt_regs *);
246:	long __arm64_sys_getpeername(const struct pt_regs *);
184:	long __arm64_sys_getresgid(const struct pt_regs *);
466:	long __arm64_sys_getresgid16(const struct pt_regs *);
182:	long __arm64_sys_getresuid(const struct pt_regs *);
467:	long __arm64_sys_getresuid16(const struct pt_regs *);
245:	long __arm64_sys_getsockname(const struct pt_regs *);
249:	long __arm64_sys_getsockopt(const struct pt_regs *);
468:	long __arm64_sys_getuid16(const struct pt_regs *);
164:	long __arm64_sys_init_module(const struct pt_regs *);
78:	long __arm64_sys_inotify_add_watch(const struct pt_regs *);
405:	long __arm64_sys_inotify_init(const struct pt_regs *);
77:	long __arm64_sys_inotify_init1(const struct pt_regs *);
79:	long __arm64_sys_inotify_rm_watch(const struct pt_regs *);
44:	long __arm64_sys_io_cancel(const struct pt_regs *);
41:	long __arm64_sys_io_destroy(const struct pt_regs *);
46:	long __arm64_sys_io_getevents(const struct pt_regs *);
45:	long __arm64_sys_io_getevents_time32(const struct pt_regs *);
48:	long __arm64_sys_io_pgetevents(const struct pt_regs *);
47:	long __arm64_sys_io_pgetevents_time32(const struct pt_regs *);
39:	long __arm64_sys_io_setup(const struct pt_regs *);
42:	long __arm64_sys_io_submit(const struct pt_regs *);
52:	long __arm64_sys_io_uring_enter(const struct pt_regs *);
53:	long __arm64_sys_io_uring_register(const struct pt_regs *);
51:	long __arm64_sys_io_uring_setup(const struct pt_regs *);
85:	long __arm64_sys_ioprio_get(const struct pt_regs *);
84:	long __arm64_sys_ioprio_set(const struct pt_regs *);
456:	long __arm64_sys_ipc(const struct pt_regs *);
331:	long __arm64_sys_kcmp(const struct pt_regs *);
383:	long __arm64_sys_kexec_file_load(const struct pt_regs *);
160:	long __arm64_sys_kexec_load(const struct pt_regs *);
268:	long __arm64_sys_keyctl(const struct pt_regs *);
273:	long __arm64_sys_landlock_add_rule(const struct pt_regs *);
272:	long __arm64_sys_landlock_create_ruleset(const struct pt_regs *);
274:	long __arm64_sys_landlock_restrict_self(const struct pt_regs *);
469:	long __arm64_sys_lchown16(const struct pt_regs *);
242:	long __arm64_sys_listen(const struct pt_regs *);
60:	long __arm64_sys_lookup_dcookie(const struct pt_regs *);
292:	long __arm64_sys_madvise(const struct pt_regs *);
296:	long __arm64_sys_mbind(const struct pt_regs *);
349:	long __arm64_sys_membarrier(const struct pt_regs *);
338:	long __arm64_sys_memfd_create(const struct pt_regs *);
361:	long __arm64_sys_memfd_secret(const struct pt_regs *);
299:	long __arm64_sys_migrate_pages(const struct pt_regs *);
291:	long __arm64_sys_mincore(const struct pt_regs *);
287:	long __arm64_sys_mlock(const struct pt_regs *);
351:	long __arm64_sys_mlock2(const struct pt_regs *);
289:	long __arm64_sys_mlockall(const struct pt_regs *);
381:	long __arm64_sys_modify_ldt(const struct pt_regs *);
300:	long __arm64_sys_move_pages(const struct pt_regs *);
285:	long __arm64_sys_mprotect(const struct pt_regs *);
204:	long __arm64_sys_mq_getsetattr(const struct pt_regs *);
202:	long __arm64_sys_mq_notify(const struct pt_regs *);
195:	long __arm64_sys_mq_open(const struct pt_regs *);
200:	long __arm64_sys_mq_timedreceive(const struct pt_regs *);
201:	long __arm64_sys_mq_timedreceive_time32(const struct pt_regs *);
198:	long __arm64_sys_mq_timedsend(const struct pt_regs *);
199:	long __arm64_sys_mq_timedsend_time32(const struct pt_regs *);
197:	long __arm64_sys_mq_unlink(const struct pt_regs *);
263:	long __arm64_sys_mremap(const struct pt_regs *);
210:	long __arm64_sys_msgctl(const struct pt_regs *);
208:	long __arm64_sys_msgget(const struct pt_regs *);
213:	long __arm64_sys_msgrcv(const struct pt_regs *);
215:	long __arm64_sys_msgsnd(const struct pt_regs *);
286:	long __arm64_sys_msync(const struct pt_regs *);
288:	long __arm64_sys_munlock(const struct pt_regs *);
290:	long __arm64_sys_munlockall(const struct pt_regs *);
319:	long __arm64_sys_name_to_handle_at(const struct pt_regs *);
426:	long __arm64_sys_nanosleep_time32(const struct pt_regs *);
209:	long __arm64_sys_old_msgctl(const struct pt_regs *);
220:	long __arm64_sys_old_semctl(const struct pt_regs *);
230:	long __arm64_sys_old_shmctl(const struct pt_regs *);
320:	long __arm64_sys_open_by_handle_at(const struct pt_regs *);
370:	long __arm64_sys_pciconfig_iobase(const struct pt_regs *);
368:	long __arm64_sys_pciconfig_read(const struct pt_regs *);
369:	long __arm64_sys_pciconfig_write(const struct pt_regs *);
303:	long __arm64_sys_perf_event_open(const struct pt_regs *);
357:	long __arm64_sys_pkey_alloc(const struct pt_regs *);
358:	long __arm64_sys_pkey_free(const struct pt_regs *);
356:	long __arm64_sys_pkey_mprotect(const struct pt_regs *);
439:	long __arm64_sys_ppoll_time32(const struct pt_regs *);
293:	long __arm64_sys_process_madvise(const struct pt_regs *);
294:	long __arm64_sys_process_mrelease(const struct pt_regs *);
325:	long __arm64_sys_process_vm_readv(const struct pt_regs *);
327:	long __arm64_sys_process_vm_writev(const struct pt_regs *);
437:	long __arm64_sys_pselect6_time32(const struct pt_regs *);
101:	long __arm64_sys_quotactl(const struct pt_regs *);
102:	long __arm64_sys_quotactl_fd(const struct pt_regs *);
415:	long __arm64_sys_recv(const struct pt_regs *);
253:	long __arm64_sys_recvfrom(const struct pt_regs *);
305:	long __arm64_sys_recvmmsg(const struct pt_regs *);
306:	long __arm64_sys_recvmmsg_time32(const struct pt_regs *);
257:	long __arm64_sys_recvmsg(const struct pt_regs *);
295:	long __arm64_sys_remap_file_pages(const struct pt_regs *);
267:	long __arm64_sys_request_key(const struct pt_regs *);
481:	long __arm64_sys_rseq(const struct pt_regs *);
427:	long __arm64_sys_rt_sigtimedwait_time32(const struct pt_regs *);
392:	long __arm64_sys_rtas(const struct pt_regs *);
388:	long __arm64_sys_s390_ipc(const struct pt_regs *);
386:	long __arm64_sys_s390_pci_mmio_read(const struct pt_regs *);
387:	long __arm64_sys_s390_pci_mmio_write(const struct pt_regs *);
425:	long __arm64_sys_sched_rr_get_interval_time32(const struct pt_regs *);
336:	long __arm64_sys_seccomp(const struct pt_regs *);
221:	long __arm64_sys_semctl(const struct pt_regs *);
219:	long __arm64_sys_semget(const struct pt_regs *);
226:	long __arm64_sys_semop(const struct pt_regs *);
224:	long __arm64_sys_semtimedop(const struct pt_regs *);
225:	long __arm64_sys_semtimedop_time32(const struct pt_regs *);
417:	long __arm64_sys_send(const struct pt_regs *);
323:	long __arm64_sys_sendmmsg(const struct pt_regs *);
255:	long __arm64_sys_sendmsg(const struct pt_regs *);
251:	long __arm64_sys_sendto(const struct pt_regs *);
298:	long __arm64_sys_set_mempolicy(const struct pt_regs *);
301:	long __arm64_sys_set_mempolicy_home_node(const struct pt_regs *);
149:	long __arm64_sys_set_robust_list(const struct pt_regs *);
186:	long __arm64_sys_setfsgid(const struct pt_regs *);
470:	long __arm64_sys_setfsgid16(const struct pt_regs *);
185:	long __arm64_sys_setfsuid(const struct pt_regs *);
471:	long __arm64_sys_setfsuid16(const struct pt_regs *);
178:	long __arm64_sys_setgid(const struct pt_regs *);
472:	long __arm64_sys_setgid16(const struct pt_regs *);
187:	long __arm64_sys_setgroups(const struct pt_regs *);
473:	long __arm64_sys_setgroups16(const struct pt_regs *);
177:	long __arm64_sys_setregid(const struct pt_regs *);
474:	long __arm64_sys_setregid16(const struct pt_regs *);
183:	long __arm64_sys_setresgid(const struct pt_regs *);
475:	long __arm64_sys_setresgid16(const struct pt_regs *);
181:	long __arm64_sys_setresuid(const struct pt_regs *);
476:	long __arm64_sys_setresuid16(const struct pt_regs *);
179:	long __arm64_sys_setreuid(const struct pt_regs *);
477:	long __arm64_sys_setreuid16(const struct pt_regs *);
247:	long __arm64_sys_setsockopt(const struct pt_regs *);
180:	long __arm64_sys_setuid(const struct pt_regs *);
478:	long __arm64_sys_setuid16(const struct pt_regs *);
449:	long __arm64_sys_sgetmask(const struct pt_regs *);
234:	long __arm64_sys_shmat(const struct pt_regs *);
231:	long __arm64_sys_shmctl(const struct pt_regs *);
236:	long __arm64_sys_shmdt(const struct pt_regs *);
229:	long __arm64_sys_shmget(const struct pt_regs *);
252:	long __arm64_sys_shutdown(const struct pt_regs *);
407:	long __arm64_sys_signalfd(const struct pt_regs *);
113:	long __arm64_sys_signalfd4(const struct pt_regs *);
239:	long __arm64_sys_socket(const struct pt_regs *);
373:	long __arm64_sys_socketcall(const struct pt_regs *);
240:	long __arm64_sys_socketpair(const struct pt_regs *);
394:	long __arm64_sys_spu_create(const struct pt_regs *);
393:	long __arm64_sys_spu_run(const struct pt_regs *);
450:	long __arm64_sys_ssetmask(const struct pt_regs *);
422:	long __arm64_sys_stime32(const struct pt_regs *);
395:	long __arm64_sys_subpage_prot(const struct pt_regs *);
284:	long __arm64_sys_swapoff(const struct pt_regs *);
283:	long __arm64_sys_swapon(const struct pt_regs *);
453:	long __arm64_sys_sysfs(const struct pt_regs *);
170:	long __arm64_sys_syslog(const struct pt_regs *);
421:	long __arm64_sys_time32(const struct pt_regs *);
430:	long __arm64_sys_timer_gettime32(const struct pt_regs *);
429:	long __arm64_sys_timer_settime32(const struct pt_regs *);
123:	long __arm64_sys_timerfd_create(const struct pt_regs *);
126:	long __arm64_sys_timerfd_gettime(const struct pt_regs *);
127:	long __arm64_sys_timerfd_gettime32(const struct pt_regs *);
124:	long __arm64_sys_timerfd_settime(const struct pt_regs *);
125:	long __arm64_sys_timerfd_settime32(const struct pt_regs *);
418:	long __arm64_sys_uselib(const struct pt_regs *);
346:	long __arm64_sys_userfaultfd(const struct pt_regs *);
423:	long __arm64_sys_utime32(const struct pt_regs *);
441:	long __arm64_sys_utimensat_time32(const struct pt_regs *);
435:	long __arm64_sys_utimes_time32(const struct pt_regs *);
382:	long __arm64_sys_vm86(const struct pt_regs *);
380:	long __arm64_sys_vm86old(const struct pt_regs *);
20:	long sys_ni_syscall(void);

File kernel/sysctl.c:
694:	int do_proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(unsigned long *, unsigned int *, int, void *), void *);
1386:	int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
1605:	int proc_do_static_key(struct ctl_table *, int, void *, size_t *, loff_t *);
718:	int proc_dobool(struct ctl_table *, int, void *, size_t *, loff_t *);
738:	int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1284:	int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
884:	int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1340:	int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
1291:	int proc_dointvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1317:	int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
260:	int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
981:	int proc_dou8vec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
778:	int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
953:	int proc_douintvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1140:	int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1163:	int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
2473:	int sysctl_init_bases(void);
487:	static int __do_proc_dointvec(void *, struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(bool *, unsigned long *, int *, int, void *), void *);
428:	static int do_proc_dobool_conv(bool *, unsigned long *, int *, int, void *);
443:	static int do_proc_dointvec_conv(bool *, unsigned long *, int *, int, void *);
1171:	static int do_proc_dointvec_jiffies_conv(bool *, unsigned long *, int *, int, void *);
842:	static int do_proc_dointvec_minmax_conv(bool *, unsigned long *, int *, int, void *);
1220:	static int do_proc_dointvec_ms_jiffies_conv(bool *, unsigned long *, int *, int, void *);
1245:	static int do_proc_dointvec_ms_jiffies_minmax_conv(bool *, unsigned long *, int *, int, void *);
1197:	static int do_proc_dointvec_userhz_jiffies_conv(bool *, unsigned long *, int *, int, void *);
470:	static int do_proc_douintvec_conv(unsigned long *, unsigned int *, int, void *);
909:	static int do_proc_douintvec_minmax_conv(unsigned long *, unsigned int *, int, void *);
1116:	static int do_proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *, unsigned long, unsigned long);
1347:	static int proc_do_cad_pid(struct ctl_table *, int, void *, size_t *, loff_t *);
745:	static int proc_dointvec_minmax_warn_RT_change(struct ctl_table *, int, void *, size_t *, loff_t *);
342:	static int proc_get_long(char **, size_t *, unsigned long *, bool *, const char *, unsigned int, char *);
789:	static int proc_taint(struct ctl_table *, int, void *, size_t *, loff_t *);
1024:	static int sysrq_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/task_work.c:
42:	int task_work_add(struct task_struct *, struct callback_head *, enum task_work_notify_mode);
133:	struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
86:	struct callback_head *task_work_cancel_match(struct task_struct *, bool (*)(struct callback_head *, void *), void *);
146:	void task_work_run(void);

File kernel/taskstats.c:
605:	void taskstats_exit(struct task_struct *, int);
696:	void taskstats_init_early(void);
296:	static int add_del_listener(pid_t, const struct cpumask *, int);
407:	static int cgroupstats_user_cmd(struct sk_buff *, struct genl_info *);
174:	static void fill_stats(struct user_namespace *, struct pid_namespace *, struct task_struct *, struct taskstats *);
377:	static struct taskstats *mk_reply(struct sk_buff *, int, u32);
66:	static int prepare_reply(struct genl_info *, u8, struct sk_buff **, size_t);
707:	static int taskstats_init(void);
558:	static int taskstats_user_cmd(struct sk_buff *, struct genl_info *);

File kernel/time/alarmtimer.c:
429:	int alarm_cancel(struct alarm *);
225:	ktime_t alarm_expires_remaining(const struct alarm *);
441:	u64 alarm_forward(struct alarm *, ktime_t, ktime_t);
473:	u64 alarm_forward_now(struct alarm *, ktime_t);
342:	void alarm_init(struct alarm *, enum alarmtimer_type, enum alarmtimer_restart (*)(struct alarm *, ktime_t));
385:	void alarm_restart(struct alarm *);
356:	void alarm_start(struct alarm *, ktime_t);
376:	void alarm_start_relative(struct alarm *, ktime_t);
405:	int alarm_try_to_cancel(struct alarm *);
687:	static ktime_t alarm_clock_get_ktime(clockid_t);
669:	static int alarm_clock_get_timespec(clockid_t, struct timespec64 *);
652:	static int alarm_clock_getres(const clockid_t, struct timespec64 *);
631:	static void alarm_timer_arm(struct k_itimer *, ktime_t, bool, bool);
703:	static int alarm_timer_create(struct k_itimer *);
583:	static s64 alarm_timer_forward(struct k_itimer *, ktime_t);
819:	static int alarm_timer_nsleep(const clockid_t, int, const struct timespec64 *);
570:	static void alarm_timer_rearm(struct k_itimer *);
595:	static ktime_t alarm_timer_remaining(struct k_itimer *, ktime_t);
606:	static int alarm_timer_try_to_cancel(struct k_itimer *);
619:	static void alarm_timer_wait_running(struct k_itimer *);
197:	static enum hrtimer_restart alarmtimer_fired(struct hrtimer *);
907:	static int alarmtimer_init(void);
319:	static int alarmtimer_resume(struct device *);
314:	static int alarmtimer_suspend(struct device *);
895:	static void get_boottime_timespec(struct timespec64 *);

File kernel/time/clockevents.c:
515:	int __clockevents_update_freq(struct clock_event_device *, u32);
85:	u64 clockevent_delta2ns(unsigned long, struct clock_event_device *);
504:	void clockevents_config_and_register(struct clock_event_device *, u32, unsigned long, unsigned long);
568:	void clockevents_exchange_device(struct clock_event_device *, struct clock_event_device *);
556:	void clockevents_handle_noop(struct clock_event_device *);
303:	int clockevents_program_event(struct clock_event_device *, ktime_t, bool);
443:	void clockevents_register_device(struct clock_event_device *);
602:	void clockevents_resume(void);
171:	void clockevents_shutdown(struct clock_event_device *);
590:	void clockevents_suspend(void);
147:	void clockevents_switch_state(struct clock_event_device *, enum clock_event_state);
181:	int clockevents_tick_resume(struct clock_event_device *);
428:	int clockevents_unbind_device(struct clock_event_device *, int);
540:	int clockevents_update_freq(struct clock_event_device *, u32);
632:	void tick_cleanup_dead_cpu(int);
620:	void tick_offline_cpu(unsigned int);
400:	static void __clockevents_unbind(void *);
471:	static void clockevents_config(struct clock_event_device *, u32);
769:	static int clockevents_init_sysfs(void);
670:	static ssize_t current_device_show(struct device *, struct device_attribute *, char *);
732:	static int tick_broadcast_init_sysfs(void);
748:	static int tick_init_sysfs(void);
687:	static ssize_t unbind_device_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/time/clocksource.c:
1156:	int __clocksource_register_scale(struct clocksource *, u32, u32);
1069:	void __clocksource_update_freq_scale(struct clocksource *, u32, u32);
885:	u64 clocks_calc_max_nsecs(u32, u32, u32, u64, u64 *);
47:	void clocks_calc_mult_shift(u32 *, u32 *, u32, u32, u32);
1202:	void clocksource_change_rating(struct clocksource *, int);
675:	void clocksource_mark_unstable(struct clocksource *);
831:	void clocksource_resume(void);
744:	void clocksource_start_suspend_timing(struct clocksource *, u64);
782:	u64 clocksource_stop_suspend_timing(struct clocksource *, u64);
819:	void clocksource_suspend(void);
849:	void clocksource_touch_watchdog(void);
1260:	int clocksource_unregister(struct clocksource *);
1294:	ssize_t sysfs_get_uname(const char *, char *, size_t);
949:	static void __clocksource_select(bool);
1382:	static ssize_t available_clocksource_show(struct device *, struct device_attribute *, char *);
1467:	static int boot_override_clock(char *);
1449:	static int boot_override_clocksource(char *);
1025:	static int clocksource_done_booting(void);
1221:	static int clocksource_unbind(struct clocksource *);
1281:	static ssize_t current_clocksource_show(struct device *, struct device_attribute *, char *);
1321:	static ssize_t current_clocksource_store(struct device *, struct device_attribute *, const char *, size_t);
1429:	static int init_clocksource_sysfs(void);
1348:	static ssize_t unbind_clocksource_store(struct device *, struct device_attribute *, const char *, size_t);

File kernel/time/hrtimer.c:
2118:	long __arm64_sys_nanosleep(const struct pt_regs *);
1457:	ktime_t __hrtimer_get_remaining(const struct hrtimer *, bool);
945:	void clock_was_set(unsigned int);
994:	void clock_was_set_delayed(void);
1604:	bool hrtimer_active(const struct hrtimer *);
1438:	int hrtimer_cancel(struct hrtimer *);
1037:	u64 hrtimer_forward(struct hrtimer *, ktime_t, ktime_t);
1479:	u64 hrtimer_get_next_event(void);
1589:	void hrtimer_init(struct hrtimer *, clockid_t, enum hrtimer_mode);
2007:	void hrtimer_init_sleeper(struct hrtimer_sleeper *, clockid_t, enum hrtimer_mode);
1781:	void hrtimer_interrupt(struct clock_event_device *);
2083:	long hrtimer_nanosleep(ktime_t, const enum hrtimer_mode, const clockid_t);
1502:	u64 hrtimer_next_event_without(const struct hrtimer *);
1894:	void hrtimer_run_queues(void);
1952:	void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *, enum hrtimer_mode);
1280:	void hrtimer_start_range_ns(struct hrtimer *, ktime_t, u64, const enum hrtimer_mode);
1316:	int hrtimer_try_to_cancel(struct hrtimer *);
2217:	int hrtimers_dead_cpu(unsigned int);
2264:	void hrtimers_init(void);
2160:	int hrtimers_prepare_cpu(unsigned int);
1004:	void hrtimers_resume_local(void);
327:	ktime_t ktime_add_safe(const ktime_t, const ktime_t);
2016:	int nanosleep_copyout(struct restart_block *, struct timespec64 *);
2382:	int schedule_hrtimeout(ktime_t *, const enum hrtimer_mode);
2348:	int schedule_hrtimeout_range(ktime_t *, u64, const enum hrtimer_mode);
2278:	int schedule_hrtimeout_range_clock(ktime_t *, u64, const enum hrtimer_mode, clockid_t);
569:	static ktime_t __hrtimer_get_next_event(struct hrtimer_cpu_base *, unsigned int);
1717:	static void __hrtimer_run_queues(struct hrtimer_cpu_base *, ktime_t, unsigned long, unsigned int);
983:	static void clock_was_set_work(struct work_struct *);
2035:	static int do_nanosleep(struct hrtimer_sleeper *, enum hrtimer_mode);
2070:	static long hrtimer_nanosleep_restart(struct restart_block *);
1756:	static void hrtimer_run_softirq(struct softirq_action *);
594:	static ktime_t hrtimer_update_next_event(struct hrtimer_cpu_base *);
1188:	static void hrtimer_update_softirq_timer(struct hrtimer_cpu_base *, bool);
1931:	static enum hrtimer_restart hrtimer_wakeup(struct hrtimer *);
771:	static void retrigger_next_event(void *);
715:	static int setup_hrtimer_hres(char *);

File kernel/time/itimer.c:
113:	long __arm64_sys_getitimer(const struct pt_regs *);
332:	long __arm64_sys_setitimer(const struct pt_regs *);
156:	enum hrtimer_restart it_real_fn(struct hrtimer *);
168:	static void set_cpu_itimer(struct task_struct *, unsigned int, const struct itimerspec64 * const, struct itimerspec64 * const);

File kernel/time/jiffies.c:
71:	struct clocksource *clocksource_default_clock(void);
78:	int register_refined_jiffies(long);
64:	static int init_jiffies_clocksource(void);
16:	static u64 jiffies_read(struct clocksource *);

File kernel/time/namespace.c:
133:	struct time_namespace *copy_time_ns(unsigned long, struct user_namespace *, struct time_namespace *);
23:	ktime_t do_timens_ktime_to_host(clockid_t, ktime_t, struct timens_offsets *);
195:	struct page *find_timens_vvar_page(struct vm_area_struct *);
247:	void free_time_ns(struct time_namespace *);
380:	int proc_timens_set_offset(struct file *, struct task_struct *, struct proc_timens_offset *, int);
365:	void proc_timens_show_offsets(struct task_struct *, struct seq_file *);
298:	void timens_commit(struct task_struct *, struct time_namespace *);
326:	void timens_on_fork(struct nsproxy *, struct task_struct *);
277:	static struct ns_common *timens_for_children_get(struct task_struct *);
261:	static struct ns_common *timens_get(struct task_struct *);
304:	static int timens_install(struct nsset *, struct ns_common *);
342:	static struct user_namespace *timens_owner(struct ns_common *);
293:	static void timens_put(struct ns_common *);

File kernel/time/ntp.c:
762:	int __do_adjtimex(struct __kernel_timex *, const struct timespec64 *, s32 *, struct audit_ntp_data *);
351:	void ntp_clear(void);
380:	ktime_t ntp_get_next_leap(void);
1092:	void ntp_init(void);
369:	u64 ntp_tick_length(void);
400:	int second_overflow(time64_t);
1080:	static int ntp_tick_adj_setup(char *);

File kernel/time/posix-clock.c:
162:	int posix_clock_register(struct posix_clock *, struct device *);
182:	void posix_clock_unregister(struct posix_clock *);
226:	static int pc_clock_adjtime(clockid_t, struct __kernel_timex *);
269:	static int pc_clock_getres(clockid_t, struct timespec64 *);
250:	static int pc_clock_gettime(clockid_t, struct timespec64 *);
288:	static int pc_clock_settime(clockid_t, const struct timespec64 *);
72:	static long posix_clock_ioctl(struct file *, unsigned int, unsigned long);
108:	static int posix_clock_open(struct inode *, struct file *);
56:	static __poll_t posix_clock_poll(struct file *, poll_table *);
39:	static ssize_t posix_clock_read(struct file *, char *, size_t, loff_t *);
134:	static int posix_clock_release(struct inode *, struct file *);

File kernel/time/posix-cpu-timers.c:
1171:	void clear_posix_cputimers_work(struct task_struct *);
544:	void posix_cpu_timers_exit(struct task_struct *);
548:	void posix_cpu_timers_exit_group(struct task_struct *);
24:	void posix_cputimers_group_init(struct posix_cputimers *, u64);
1188:	void posix_cputimers_init_work(void);
1376:	void run_posix_cpu_timers(void);
1403:	void set_process_cpu_timer(struct task_struct *, unsigned int, u64 *, u64 *);
274:	void thread_group_sample_cputime(struct task_struct *, u64 *);
42:	int update_rlimit_cpu(struct task_struct *, unsigned long);
857:	static void collect_posix_cputimers(struct posix_cputimers *, u64 *, struct list_head *);
340:	static u64 cpu_clock_sample_group(const clockid_t, struct task_struct *, bool);
584:	static void cpu_timer_fire(struct k_itimer *);
1443:	static int do_cpu_nanosleep(const clockid_t, int, const struct timespec64 *);
359:	static int posix_cpu_clock_get(const clockid_t, struct timespec64 *);
160:	static int posix_cpu_clock_getres(const clockid_t, struct timespec64 *);
180:	static int posix_cpu_clock_set(const clockid_t, const struct timespec64 *);
1541:	static int posix_cpu_nsleep(const clockid_t, int, const struct timespec64 *);
1568:	static long posix_cpu_nsleep_restart(struct restart_block *);
387:	static int posix_cpu_timer_create(struct k_itimer *);
472:	static int posix_cpu_timer_del(struct k_itimer *);
789:	static void posix_cpu_timer_get(struct k_itimer *, struct itimerspec64 *);
1046:	static void posix_cpu_timer_rearm(struct k_itimer *);
624:	static int posix_cpu_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1163:	static void posix_cpu_timers_work(struct callback_head *);
1586:	static int process_cpu_clock_get(const clockid_t, struct timespec64 *);
1581:	static int process_cpu_clock_getres(const clockid_t, struct timespec64 *);
1596:	static int process_cpu_nsleep(const clockid_t, int, const struct timespec64 *);
1591:	static int process_cpu_timer_create(struct k_itimer *);
1606:	static int thread_cpu_clock_get(const clockid_t, struct timespec64 *);
1601:	static int thread_cpu_clock_getres(const clockid_t, struct timespec64 *);
1611:	static int thread_cpu_timer_create(struct k_itimer *);

File kernel/time/posix-timers.c:
1121:	long __arm64_sys_clock_adjtime(const struct pt_regs *);
1138:	long __arm64_sys_clock_getres(const struct pt_regs *);
1091:	long __arm64_sys_clock_gettime(const struct pt_regs *);
1254:	long __arm64_sys_clock_nanosleep(const struct pt_regs *);
1076:	long __arm64_sys_clock_settime(const struct pt_regs *);
577:	long __arm64_sys_timer_create(const struct pt_regs *);
1004:	long __arm64_sys_timer_delete(const struct pt_regs *);
777:	long __arm64_sys_timer_getoverrun(const struct pt_regs *);
738:	long __arm64_sys_timer_gettime(const struct pt_regs *);
938:	long __arm64_sys_timer_settime(const struct pt_regs *);
983:	int common_timer_del(struct k_itimer *);
670:	void common_timer_get(struct k_itimer *, struct itimerspec64 *);
858:	int common_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1109:	int do_clock_adjtime(const clockid_t, struct __kernel_timex *);
1058:	void exit_itimers(struct task_struct *);
336:	int posix_timer_event(struct k_itimer *, int);
313:	void posixtimer_rearm(struct kernel_siginfo *);
614:	static struct k_itimer *__lock_timer(timer_t, unsigned long *);
793:	static void common_hrtimer_arm(struct k_itimer *, ktime_t, bool, bool);
647:	static s64 common_hrtimer_forward(struct k_itimer *, ktime_t);
293:	static void common_hrtimer_rearm(struct k_itimer *);
640:	static ktime_t common_hrtimer_remaining(struct k_itimer *, ktime_t);
823:	static int common_hrtimer_try_to_cancel(struct k_itimer *);
1231:	static int common_nsleep(const clockid_t, int, const struct timespec64 *);
1241:	static int common_nsleep_timens(const clockid_t, int, const struct timespec64 *);
491:	static int common_timer_create(struct k_itimer *);
828:	static void common_timer_wait_running(struct k_itimer *);
498:	static int do_timer_create(clockid_t, struct sigevent *, timer_t *);
273:	static int init_posix_timers(void);
469:	static void k_itimer_rcu_free(struct callback_head *);
188:	static int posix_clock_realtime_adj(const clockid_t, struct __kernel_timex *);
182:	static int posix_clock_realtime_set(const clockid_t, const struct timespec64 *);
247:	static ktime_t posix_get_boottime_ktime(const clockid_t);
240:	static int posix_get_boottime_timespec(const clockid_t, struct timespec64 *);
234:	static int posix_get_coarse_res(const clockid_t, struct timespec64 *);
263:	static int posix_get_hrtimer_res(clockid_t, struct timespec64 *);
226:	static int posix_get_monotonic_coarse(clockid_t, struct timespec64 *);
204:	static ktime_t posix_get_monotonic_ktime(clockid_t);
212:	static int posix_get_monotonic_raw(clockid_t, struct timespec64 *);
197:	static int posix_get_monotonic_timespec(clockid_t, struct timespec64 *);
220:	static int posix_get_realtime_coarse(clockid_t, struct timespec64 *);
176:	static ktime_t posix_get_realtime_ktime(clockid_t);
170:	static int posix_get_realtime_timespec(clockid_t, struct timespec64 *);
258:	static ktime_t posix_get_tai_ktime(clockid_t);
252:	static int posix_get_tai_timespec(clockid_t, struct timespec64 *);
366:	static enum hrtimer_restart posix_timer_fn(struct hrtimer *);

File kernel/time/sched_clock.c:
227:	void generic_sched_clock_init(void);
83:	unsigned long long sched_clock(void);
72:	struct clock_read_data *sched_clock_read_begin(unsigned int *);
78:	int sched_clock_read_retry(unsigned int);
154:	void sched_clock_register(u64 (*)(void), int, unsigned long);
276:	void sched_clock_resume(void);
265:	int sched_clock_suspend(void);
52:	static u64 jiffy_sched_clock_read(void);
145:	static enum hrtimer_restart sched_clock_poll(struct hrtimer *);
290:	static int sched_clock_syscore_init(void);
258:	static u64 suspended_sched_clock_read(void);
128:	static void update_sched_clock(void);

File kernel/time/tick-broadcast-hrtimer.c:
106:	void tick_setup_hrtimer_broadcast(void);
99:	static enum hrtimer_restart bc_handler(struct hrtimer *);
43:	static int bc_set_next(ktime_t, struct clock_event_device *);
20:	static int bc_shutdown(struct clock_event_device *);

File kernel/time/tick-broadcast.c:
958:	int __tick_broadcast_oneshot_control(enum tick_broadcast_state);
1082:	void hotplug_cpu__broadcast_tick_pull(int);
437:	void tick_broadcast_control(enum tick_broadcast_mode);
1145:	void tick_broadcast_init(void);
536:	void tick_broadcast_offline(unsigned int);
1118:	int tick_broadcast_oneshot_active(void);
1126:	bool tick_broadcast_oneshot_available(void);
1066:	void tick_broadcast_switch_to_oneshot(void);
213:	int tick_broadcast_update_freq(struct clock_event_device *, u32);
625:	int tick_check_broadcast_expired(void);
665:	void tick_check_oneshot_broadcast_this_cpu(void);
246:	int tick_device_uses_broadcast(struct clock_event_device *, int);
56:	struct tick_device *tick_get_broadcast_device(void);
61:	struct cpumask *tick_get_broadcast_mask(void);
613:	struct cpumask *tick_get_broadcast_oneshot_mask(void);
68:	const struct clock_event_device *tick_get_wakeup_device(int);
162:	void tick_install_broadcast_device(struct clock_event_device *, int);
208:	int tick_is_broadcast_device(struct clock_event_device *);
327:	int tick_receive_broadcast(void);
578:	void tick_resume_broadcast(void);
570:	bool tick_resume_check_broadcast(void);
514:	void tick_set_periodic_handler(struct clock_event_device *, int);
548:	void tick_suspend_broadcast(void);
646:	static void tick_broadcast_set_event(struct clock_event_device *, int, ktime_t);
1019:	static void tick_broadcast_setup_oneshot(struct clock_event_device *);
345:	static bool tick_do_broadcast(struct cpumask *);
685:	static void tick_handle_oneshot_broadcast(struct clock_event_device *);
399:	static void tick_handle_periodic_broadcast(struct clock_event_device *);
106:	static void tick_oneshot_wakeup_handler(struct clock_event_device *);

File kernel/time/tick-common.c:
390:	int tick_broadcast_oneshot_control(enum tick_broadcast_state);
341:	void tick_check_new_device(struct clock_event_device *);
328:	bool tick_check_replacement(struct clock_event_device *, struct clock_event_device *);
63:	struct tick_device *tick_get_device(int);
107:	void tick_handle_periodic(struct clock_event_device *);
408:	void tick_handover_do_timer(void);
575:	void tick_init(void);
277:	void tick_install_replacement(struct clock_event_device *);
71:	int tick_is_oneshot_available(void);
505:	void tick_resume(void);
461:	void tick_resume_local(void);
152:	void tick_setup_periodic(struct clock_event_device *, int);
421:	void tick_shutdown(unsigned int);
491:	void tick_suspend(void);
447:	void tick_suspend_local(void);
85:	static void tick_periodic(int);
205:	static void tick_setup_device(struct tick_device *, struct clock_event_device *, int, const struct cpumask *);

File kernel/time/tick-oneshot.c:
124:	int tick_init_highres(void);
106:	int tick_oneshot_mode_active(void);
23:	int tick_program_event(ktime_t, int);
50:	void tick_resume_oneshot(void);
61:	void tick_setup_oneshot(struct clock_event_device *, void (*)(struct clock_event_device *), ktime_t);
73:	int tick_switch_to_oneshot(void (*)(struct clock_event_device *));

File kernel/time/tick-sched.c:
691:	u64 get_cpu_idle_time_us(int, u64 *);
732:	u64 get_cpu_iowait_time_us(int, u64 *);
1535:	void tick_cancel_sched_timer(int);
1577:	int tick_check_oneshot_change(int);
1551:	void tick_clock_notify(void);
41:	struct tick_sched *tick_get_tick_sched(int);
1452:	void tick_irq_enter(void);
1270:	unsigned long tick_nohz_get_idle_calls(void);
1258:	unsigned long tick_nohz_get_idle_calls_cpu(int);
1204:	ktime_t tick_nohz_get_next_hrtimer(void);
1219:	ktime_t tick_nohz_get_sleep_length(ktime_t *);
1147:	void tick_nohz_idle_enter(void);
1327:	void tick_nohz_idle_exit(void);
1186:	bool tick_nohz_idle_got_tick(void);
1299:	void tick_nohz_idle_restart_tick(void);
1132:	void tick_nohz_idle_retain_tick(void);
1127:	void tick_nohz_idle_stop_tick(void);
1173:	void tick_nohz_irq_exit(void);
603:	bool tick_nohz_tick_stopped(void);
610:	bool tick_nohz_tick_stopped_cpu(int);
1562:	void tick_oneshot_notify(void);
1506:	void tick_setup_sched_timer(void);
596:	static int setup_tick_nohz(char *);
1495:	static int skew_tick(char *);
57:	static void tick_do_update_jiffies64(ktime_t);
1357:	static void tick_nohz_handler(struct clock_event_device *);
785:	static ktime_t tick_nohz_next_event(struct tick_sched *, int);
959:	static void tick_nohz_restart_sched_tick(struct tick_sched *, ktime_t);
1466:	static enum hrtimer_restart tick_sched_timer(struct hrtimer *);

File kernel/time/time.c:
269:	long __arm64_sys_adjtimex(const struct pt_regs *);
140:	long __arm64_sys_gettimeofday(const struct pt_regs *);
199:	long __arm64_sys_settimeofday(const struct pt_regs *);
552:	unsigned long __msecs_to_jiffies(const unsigned int);
563:	unsigned long __usecs_to_jiffies(const unsigned int);
635:	unsigned long clock_t_to_jiffies(unsigned long);
169:	int do_sys_settimeofday64(const struct timespec64 *, const struct timezone *);
860:	int get_itimerspec64(struct itimerspec64 *, const struct __kernel_itimerspec *);
890:	int get_old_itimerspec32(struct itimerspec64 *, const struct old_itimerspec32 *);
842:	int get_old_timespec32(struct timespec64 *, const void *);
781:	int get_timespec64(struct timespec64 *, const struct __kernel_timespec *);
700:	u64 jiffies64_to_msecs(const u64);
690:	u64 jiffies64_to_nsecs(u64);
652:	u64 jiffies_64_to_clock_t(u64);
621:	clock_t jiffies_to_clock_t(unsigned long);
374:	unsigned int jiffies_to_msecs(const unsigned long);
605:	void jiffies_to_timespec64(const unsigned long, struct timespec64 *);
391:	unsigned int jiffies_to_usecs(const unsigned long);
431:	time64_t mktime64(const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int);
452:	struct __kernel_old_timeval ns_to_kernel_old_timeval(s64);
506:	struct timespec64 ns_to_timespec64(s64);
674:	u64 nsec_to_clock_t(u64);
754:	unsigned long nsecs_to_jiffies(u64);
723:	u64 nsecs_to_jiffies64(u64);
875:	int put_itimerspec64(const struct itimerspec64 *, struct __kernel_itimerspec *);
901:	int put_old_itimerspec32(const struct itimerspec64 *, struct old_itimerspec32 *);
851:	int put_old_timespec32(const struct timespec64 *, void *);
804:	int put_timespec64(const struct timespec64 *, struct __kernel_timespec *);
478:	void set_normalized_timespec64(struct timespec64 *, time64_t, s64);
765:	struct timespec64 timespec64_add_safe(const struct timespec64, const struct timespec64);
588:	unsigned long timespec64_to_jiffies(const struct timespec64 *);

File kernel/time/timeconv.c:
47:	void time64_to_tm(time64_t, int, struct tm *);

File kernel/time/timecounter.c:
79:	u64 timecounter_cyc2time(const struct timecounter *, u64);
8:	void timecounter_init(struct timecounter *, const struct cyclecounter *, u64);
52:	u64 timecounter_read(struct timecounter *);

File kernel/time/timekeeping.c:
1044:	time64_t __ktime_get_real_seconds(void);
2422:	int do_adjtimex(struct __kernel_timex *);
1312:	int do_settimeofday64(const struct timespec64 *);
2289:	void do_timer(unsigned long);
1205:	int get_device_system_crosststamp(int (*)(ktime_t *, struct system_counterval_t *, void *), void *, struct system_time_snapshot *, struct system_device_crosststamp *);
2246:	void getboottime64(struct timespec64 *);
836:	ktime_t ktime_get(void);
532:	u64 ktime_get_boot_fast_ns(void);
2255:	void ktime_get_coarse_real_ts64(struct timespec64 *);
2268:	void ktime_get_coarse_ts64(struct timespec64 *);
900:	ktime_t ktime_get_coarse_with_offset(enum tk_offsets);
633:	void ktime_get_fast_timestamps(struct ktime_timestamps *);
490:	u64 ktime_get_mono_fast_ns(void);
943:	ktime_t ktime_get_raw(void);
502:	u64 ktime_get_raw_fast_ns(void);
1517:	void ktime_get_raw_ts64(struct timespec64 *);
581:	u64 ktime_get_real_fast_ns(void);
1020:	time64_t ktime_get_real_seconds(void);
815:	void ktime_get_real_ts64(struct timespec64 *);
856:	u32 ktime_get_resolution_ns(void);
1001:	time64_t ktime_get_seconds(void);
1055:	void ktime_get_snapshot(struct system_time_snapshot *);
549:	u64 ktime_get_tai_fast_ns(void);
969:	void ktime_get_ts64(struct timespec64 *);
2308:	ktime_t ktime_get_update_offsets_now(unsigned int *, ktime_t *, ktime_t *, ktime_t *);
879:	ktime_t ktime_get_with_offset(enum tk_offsets);
925:	ktime_t ktime_mono_to_any(ktime_t, enum tk_offsets);
679:	int pvclock_gtod_register_notifier(struct notifier_block *);
699:	int pvclock_gtod_unregister_notifier(struct notifier_block *);
2408:	unsigned long random_get_entropy_fallback(void);
1584:	void read_persistent_clock64(struct timespec64 *);
1604:	void read_persistent_wall_and_boot_offset(struct timespec64 *, struct timespec64 *);
1632:	void timekeeping_init(void);
1558:	u64 timekeeping_max_deferment(void);
1500:	int timekeeping_notify(struct clocksource *);
1777:	void timekeeping_resume(void);
1839:	int timekeeping_suspend(void);
1539:	int timekeeping_valid_for_hres(void);
1422:	void timekeeping_warp_clock(void);
2229:	void update_wall_time(void);
1448:	static int change_clocksource(void *);
79:	static u64 dummy_clock_read(struct clocksource *);
2150:	static bool timekeeping_advance(enum timekeeping_adv_mode);
1914:	static int timekeeping_init_ops(void);
1362:	static int timekeeping_inject_offset(const struct timespec64 *);
757:	static void timekeeping_update(struct timekeeper *, unsigned int);
151:	static void tk_set_wall_to_mono(struct timekeeper *, struct timespec64);
309:	static void tk_setup_internals(struct timekeeper *, struct clocksource *);

File kernel/time/timekeeping_debug.c:
46:	void tk_debug_account_sleep_time(const struct timespec64 *);
38:	static int tk_debug_sleep_time_init(void);
36:	static int tk_debug_sleep_time_open(struct inode *, struct file *);
22:	static int tk_debug_sleep_time_show(struct seq_file *, void *);

File kernel/time/timer.c:
358:	unsigned long __round_jiffies(unsigned long, int);
384:	unsigned long __round_jiffies_relative(unsigned long, int);
445:	unsigned long __round_jiffies_up(unsigned long, int);
461:	unsigned long __round_jiffies_up_relative(unsigned long, int);
1240:	void add_timer(struct timer_list *);
1257:	void add_timer_on(struct timer_list *, int);
1921:	u64 get_next_timer_interrupt(unsigned long, u64);
865:	void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, const char *, struct lock_class_key *);
2306:	void init_timers(void);
1188:	int mod_timer(struct timer_list *, unsigned long);
1155:	int mod_timer_pending(struct timer_list *, unsigned long);
2317:	void msleep(unsigned int);
2331:	unsigned long msleep_interruptible(unsigned int);
408:	unsigned long round_jiffies(unsigned long);
429:	unsigned long round_jiffies_relative(unsigned long);
479:	unsigned long round_jiffies_up(unsigned long);
494:	unsigned long round_jiffies_up_relative(unsigned long);
2128:	long schedule_timeout(long);
2209:	long schedule_timeout_idle(long);
2184:	long schedule_timeout_interruptible(long);
2191:	long schedule_timeout_killable(long);
2198:	long schedule_timeout_uninterruptible(long);
1977:	void timer_clear_idle(void);
1359:	int timer_delete(struct timer_list *);
1626:	int timer_delete_sync(struct timer_list *);
1214:	int timer_reduce(struct timer_list *, unsigned long);
1380:	int timer_shutdown(struct timer_list *);
1668:	int timer_shutdown_sync(struct timer_list *);
2246:	int timers_dead_cpu(unsigned int);
2230:	int timers_prepare_cpu(unsigned int);
285:	void timers_update_nohz(void);
1442:	int try_to_del_timer_sync(struct timer_list *);
2064:	void update_process_times(int);
2354:	void usleep_range_state(unsigned long, unsigned long, unsigned int);
1013:	static int __mod_timer(struct timer_list *, unsigned long, unsigned int);
1807:	static unsigned long __next_timer_interrupt(struct timer_base *);
1995:	static void __run_timers(struct timer_base *);
1315:	static int __timer_delete(struct timer_list *, bool);
1406:	static int __try_to_del_timer_sync(struct timer_list *, bool);
533:	static int calc_wheel_index(unsigned long, unsigned long, unsigned long *);
2298:	static void init_timer_cpus(void);
628:	static void internal_add_timer(struct timer_base *, struct timer_list *);
2090:	static void process_timeout(struct timer_list *);
2031:	static void run_timer_softirq(struct softirq_action *);
240:	static int timer_migration_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
266:	static int timer_sysctl_init(void);
277:	static void timer_update_keys(struct work_struct *);

File kernel/time/timer_list.c:
265:	void sysrq_timer_list_show(void);
31:	static void SEQ_printf(struct seq_file *, const char *, ...);
349:	static int init_timer_list_procfs(void);
115:	static void print_cpu(struct seq_file *, int, u64);
178:	static void print_tickdevice(struct seq_file *, struct tick_device *, int);
331:	static void *timer_list_next(struct seq_file *, void *, loff_t *);
284:	static int timer_list_show(struct seq_file *, void *);
320:	static void *timer_list_start(struct seq_file *, loff_t *);
338:	static void timer_list_stop(struct seq_file *, void *);

File kernel/time/vsyscall.c:
72:	void update_vsyscall(struct timekeeper *);
123:	void update_vsyscall_tz(void);
145:	unsigned long vdso_update_begin(void);
163:	void vdso_update_end(unsigned long);

File kernel/trace/trace_clock.c:
57:	u64 trace_clock(void);
155:	u64 trace_clock_counter(void);
94:	u64 trace_clock_global(void);
70:	u64 trace_clock_jiffies(void);
32:	u64 trace_clock_local(void);

File kernel/tsacct.c:
167:	void acct_account_cputime(struct task_struct *);
176:	void acct_clear_integrals(struct task_struct *);
152:	void acct_update_integrals(struct task_struct *);
20:	void bacct_add_tsk(struct user_namespace *, struct pid_namespace *, struct taskstats *, struct task_struct *);
91:	void xacct_add_tsk(struct taskstats *, struct task_struct *);

File kernel/ucount.c:
164:	struct ucounts *alloc_ucounts(struct user_namespace *, kuid_t);
305:	void dec_rlimit_put_ucounts(struct ucounts *, enum rlimit_type);
279:	bool dec_rlimit_ucounts(struct ucounts *, enum rlimit_type, long);
252:	void dec_ucount(struct ucounts *, enum ucount_type);
155:	struct ucounts *get_ucounts(struct ucounts *);
310:	long inc_rlimit_get_ucounts(struct ucounts *, enum rlimit_type);
262:	long inc_rlimit_ucounts(struct ucounts *, enum rlimit_type, long);
229:	struct ucounts *inc_ucount(struct user_namespace *, kuid_t, enum ucount_type);
342:	bool is_rlimit_overlimit(struct ucounts *, enum rlimit_type, unsigned long);
203:	void put_ucounts(struct ucounts *);
118:	void retire_userns_sysctls(struct user_namespace *);
94:	bool setup_userns_sysctls(struct user_namespace *);
35:	static int set_is_seen(struct ctl_table_set *);
30:	static struct ctl_table_set *set_lookup(struct ctl_table_root *);
40:	static int set_permissions(struct ctl_table_header *, struct ctl_table *);
357:	static int user_namespace_sysctl_init(void);

File kernel/umh.c:
297:	int __usermodehelper_disable(enum umh_disable_depth);
283:	void __usermodehelper_set_disable_depth(enum umh_disable_depth);
480:	int call_usermodehelper(const char *, char **, char **, int);
405:	int call_usermodehelper_exec(struct subprocess_info *, int);
359:	struct subprocess_info *call_usermodehelper_setup(const char *, char **, char **, gfp_t, int (*)(struct subprocess_info *, struct cred *), void (*)(struct subprocess_info *), void *);
243:	long usermodehelper_read_lock_wait(long);
213:	int usermodehelper_read_trylock(void);
270:	void usermodehelper_read_unlock(void);
67:	static int call_usermodehelper_exec_async(void *);
161:	static void call_usermodehelper_exec_work(struct work_struct *);
494:	static int proc_cap_handler(struct ctl_table *, int, void *, size_t *, loff_t *);

File kernel/user.c:
190:	struct user_struct *alloc_uid(kuid_t);
167:	struct user_struct *find_user(kuid_t);
178:	void free_uid(struct user_struct *);
232:	static int uid_cache_init(void);

File kernel/user_namespace.c:
225:	void __put_user_ns(struct user_namespace *);
82:	int create_user_ns(struct cred *);
1309:	bool current_in_userns(const struct user_namespace *);
495:	gid_t from_kgid(struct user_namespace *, kgid_t);
519:	gid_t from_kgid_munged(struct user_namespace *, kgid_t);
562:	projid_t from_kprojid(struct user_namespace *, kprojid_t);
587:	projid_t from_kprojid_munged(struct user_namespace *, kprojid_t);
427:	uid_t from_kuid(struct user_namespace *, kuid_t);
452:	uid_t from_kuid_munged(struct user_namespace *, kuid_t);
1300:	bool in_userns(const struct user_namespace *, const struct user_namespace *);
476:	kgid_t make_kgid(struct user_namespace *, gid_t);
543:	kprojid_t make_kprojid(struct user_namespace *, projid_t);
408:	kuid_t make_kuid(struct user_namespace *, uid_t);
1370:	struct ns_common *ns_get_owner(struct ns_common *);
1125:	ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
1142:	ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
1202:	int proc_setgroups_show(struct seq_file *, void *);
1213:	ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
1108:	ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
176:	int unshare_userns(unsigned long, struct cred **);
1280:	bool userns_may_setgroups(const struct user_namespace *);
810:	static int cmp_extents_forward(const void *, const void *);
825:	static int cmp_extents_reverse(const void *, const void *);
245:	static int cmp_map_id(const void *, const void *);
196:	static void free_user_ns(struct work_struct *);
620:	static int gid_m_show(struct seq_file *, void *);
685:	static void *gid_m_start(struct seq_file *, loff_t *);
699:	static void *m_next(struct seq_file *, void *, loff_t *);
705:	static void m_stop(struct seq_file *, void *);
920:	static ssize_t map_write(struct file *, const char *, size_t, loff_t *, int, struct uid_gid_map *, struct uid_gid_map *);
1160:	static bool new_idmap_permitted(const struct file *, struct user_namespace *, int, struct uid_gid_map *);
641:	static int projid_m_show(struct seq_file *, void *);
692:	static void *projid_m_start(struct seq_file *, loff_t *);
43:	static void set_cred_user_ns(struct cred *, struct user_namespace *);
843:	static int sort_idmaps(struct uid_gid_map *);
599:	static int uid_m_show(struct seq_file *, void *);
678:	static void *uid_m_start(struct seq_file *, loff_t *);
1403:	static int user_namespaces_init(void);
1320:	static struct ns_common *userns_get(struct task_struct *);
1336:	static int userns_install(struct nsset *, struct ns_common *);
1388:	static struct user_namespace *userns_owner(struct ns_common *);
1331:	static void userns_put(struct ns_common *);

File kernel/utsname.c:
89:	struct uts_namespace *copy_utsname(unsigned long, struct user_namespace *, struct uts_namespace *);
106:	void free_uts_ns(struct uts_namespace *);
169:	void uts_ns_init(void);
119:	static struct ns_common *utsns_get(struct task_struct *);
140:	static int utsns_install(struct nsset *, struct ns_common *);
155:	static struct user_namespace *utsns_owner(struct ns_common *);
135:	static void utsns_put(struct ns_common *);

File kernel/utsname_sysctl.c:
140:	void uts_proc_notify(enum uts_proc);
33:	static int proc_do_uts_string(struct ctl_table *, int, void *, size_t *, loff_t *);
148:	static int utsname_sysctl_init(void);

File kernel/workqueue.c:
2797:	void __flush_workqueue(struct workqueue_struct *);
6130:	void __warn_flushing_systemwide_wq(void);
4287:	struct workqueue_struct *alloc_workqueue(const char *, unsigned int, int, ...);
3390:	struct workqueue_attrs *alloc_workqueue_attrs(void);
4104:	int apply_workqueue_attrs(struct workqueue_struct *, const struct workqueue_attrs *);
3284:	bool cancel_delayed_work(struct delayed_work *);
3299:	bool cancel_delayed_work_sync(struct delayed_work *);
3262:	bool cancel_work(struct work_struct *);
3194:	bool cancel_work_sync(struct work_struct *);
4549:	bool current_is_workqueue_rescuer(void);
4533:	struct work_struct *current_work(void);
1638:	void delayed_work_timer_fn(struct timer_list *);
4406:	void destroy_workqueue(struct workqueue_struct *);
2959:	void drain_workqueue(struct workqueue_struct *);
3354:	int execute_in_process_context(work_func_t, struct execute_work *);
3212:	bool flush_delayed_work(struct delayed_work *);
3230:	bool flush_rcu_work(struct rcu_work *);
3092:	bool flush_work(struct work_struct *);
3374:	void free_workqueue_attrs(struct workqueue_attrs *);
5237:	void freeze_workqueues_begin(void);
5270:	bool freeze_workqueues_busy(void);
1728:	bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
4668:	void print_worker_info(const char *, struct task_struct *);
1690:	bool queue_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
1768:	bool queue_rcu_work(struct workqueue_struct *, struct rcu_work *);
1607:	bool queue_work_node(int, struct workqueue_struct *, struct work_struct *);
1536:	bool queue_work_on(int, struct workqueue_struct *, struct work_struct *);
3316:	int schedule_on_each_cpu(work_func_t);
4642:	void set_worker_desc(const char *, ...);
4893:	void show_all_workqueues(void);
4802:	void show_one_workqueue(struct workqueue_struct *);
5312:	void thaw_workqueues(void);
4609:	unsigned int work_busy(struct work_struct *);
5189:	long work_on_cpu(int, long (*)(void *), void *);
5212:	long work_on_cpu_safe(int, long (*)(void *), void *);
4574:	bool workqueue_congested(int, struct workqueue_struct *);
6076:	void workqueue_init(void);
5998:	void workqueue_init_early(void);
5145:	int workqueue_offline_cpu(unsigned int);
5118:	int workqueue_online_cpu(unsigned int);
5105:	int workqueue_prepare_cpu(unsigned int);
4503:	void workqueue_set_max_active(struct workqueue_struct *, int);
5383:	int workqueue_set_unbound_cpumask(struct cpumask *);
5723:	int workqueue_sysfs_register(struct workqueue_struct *);
4913:	void wq_worker_comm(char *, size_t, struct task_struct *);
954:	work_func_t wq_worker_last_func(struct task_struct *);
865:	void wq_worker_running(struct task_struct *);
892:	void wq_worker_sleeping(struct task_struct *);
3112:	static bool __cancel_work_timer(struct work_struct *, bool);
3059:	static bool __flush_work(struct work_struct *, bool);
1418:	static void __queue_work(int, struct workqueue_struct *, struct work_struct *);
3835:	static struct pool_workqueue *alloc_unbound_pwq(struct workqueue_struct *, const struct workqueue_attrs *);
3937:	static void apply_wqattrs_cleanup(struct apply_wqattrs_ctx *);
4024:	static void apply_wqattrs_commit(struct apply_wqattrs_ctx *);
3954:	static struct apply_wqattrs_ctx *apply_wqattrs_prepare(struct workqueue_struct *, const struct workqueue_attrs *);
2614:	static void check_flush_dependency(struct workqueue_struct *, struct work_struct *);
1926:	static struct worker *create_worker(struct worker_pool *);
3103:	static int cwt_wakefn(wait_queue_entry_t *, unsigned int, int, void *);
2750:	static bool flush_workqueue_prep_pwqs(struct workqueue_struct *, int, int);
2005:	static void idle_worker_timeout(struct timer_list *);
4259:	static int init_rescuer(struct workqueue_struct *);
3452:	static int init_worker_pool(struct worker_pool *);
1373:	static bool is_chained_work(struct workqueue_struct *);
5461:	static ssize_t max_active_show(struct device *, struct device_attribute *, char *);
5469:	static ssize_t max_active_store(struct device *, struct device_attribute *, const char *, size_t);
5452:	static ssize_t per_cpu_show(struct device *, struct device_attribute *, char *);
2053:	static void pool_mayday_timeout(struct timer_list *);
2181:	static void process_one_work(struct worker *, struct work_struct *);
1148:	static void put_pwq_unlocked(struct pool_workqueue *);
3566:	static void put_unbound_pool(struct worker_pool *);
3748:	static void pwq_adjust_max_active(struct pool_workqueue *);
1192:	static void pwq_dec_nr_in_flight(struct pool_workqueue *, unsigned long);
3702:	static void pwq_unbound_release_workfn(struct work_struct *);
3534:	static void rcu_free_pool(struct callback_head *);
3692:	static void rcu_free_pwq(struct callback_head *);
3519:	static void rcu_free_wq(struct callback_head *);
1748:	static void rcu_work_rcufn(struct callback_head *);
2482:	static int rescuer_thread(void *);
4726:	static void show_pwq(struct pool_workqueue *);
1258:	static int try_to_grab_pending(struct work_struct *, bool, unsigned long *);
5171:	static void work_for_cpu_fn(struct work_struct *);
996:	static void worker_clr_flags(struct worker *, unsigned int);
1792:	static void worker_enter_idle(struct worker *);
2378:	static int worker_thread(void *);
2641:	static void wq_barrier_func(struct work_struct *);
3879:	static bool wq_calc_node_cpumask(const struct workqueue_attrs *, int, int, cpumask_t *);
5566:	static ssize_t wq_cpumask_show(struct device *, struct device_attribute *, char *);
5579:	static ssize_t wq_cpumask_store(struct device *, struct device_attribute *, const char *, size_t);
5701:	static void wq_device_release(struct device *);
5513:	static ssize_t wq_nice_show(struct device *, struct device_attribute *, char *);
5541:	static ssize_t wq_nice_store(struct device *, struct device_attribute *, const char *, size_t);
5944:	static void wq_numa_init(void);
5603:	static ssize_t wq_numa_show(struct device *, struct device_attribute *, char *);
5617:	static ssize_t wq_numa_store(struct device *, struct device_attribute *, const char *, size_t);
5491:	static ssize_t wq_pool_ids_show(struct device *, struct device_attribute *, char *);
5689:	static int wq_sysfs_init(void);
5655:	static ssize_t wq_unbound_cpumask_show(struct device *, struct device_attribute *, char *);
5668:	static ssize_t wq_unbound_cpumask_store(struct device *, struct device_attribute *, const char *, size_t);
4140:	static void wq_update_unbound_numa(struct workqueue_struct *, int, bool);

File lib/../scripts/dtc/libfdt/fdt.c:
89:	int fdt_check_header(const void *);
223:	int fdt_check_node_offset_(const void *, int);
235:	int fdt_check_prop_offset_(const void *, int);
315:	const char *fdt_find_string_(const char *, int, const char *);
287:	int fdt_first_subnode(const void *, int);
83:	size_t fdt_header_size(const void *);
69:	size_t fdt_header_size_(uint32_t);
327:	int fdt_move(const void *, void *, int);
247:	int fdt_next_node(const void *, int, int *);
298:	int fdt_next_subnode(const void *, int);
162:	uint32_t fdt_next_tag(const void *, int, int *);
140:	const void *fdt_offset_ptr(const void *, int, unsigned int);
18:	int32_t fdt_ro_probe_(const void *);

File lib/../scripts/dtc/libfdt/fdt_ro.c:
114:	int fdt_find_max_phandle(const void *, uint32_t *);
338:	int fdt_first_property_offset(const void *, int);
142:	int fdt_generate_phandle(const void *, uint32_t *);
537:	const char *fdt_get_alias(const void *, const char *);
525:	const char *fdt_get_alias_namelen(const void *, const char *, int);
175:	int fdt_get_mem_rsv(const void *, int, uint64_t *, uint64_t *);
300:	const char *fdt_get_name(const void *, int, int *);
542:	int fdt_get_path(const void *, int, char *, int);
508:	uint32_t fdt_get_phandle(const void *, int);
443:	const struct fdt_property *fdt_get_property(const void *, int, const char *, int *);
378:	const struct fdt_property *fdt_get_property_by_offset(const void *, int, int *);
425:	const struct fdt_property *fdt_get_property_namelen(const void *, int, const char *, int, int *);
34:	const char *fdt_get_string(const void *, int, int *);
502:	const void *fdt_getprop(const void *, int, const char *, int *);
469:	const void *fdt_getprop_by_offset(const void *, int, const char **, int *);
451:	const void *fdt_getprop_namelen(const void *, int, const char *, int, int *);
348:	int fdt_next_property_offset(const void *, int);
823:	int fdt_node_check_compatible(const void *, int, const char *);
632:	int fdt_node_depth(const void *, int);
836:	int fdt_node_offset_by_compatible(const void *, int, const char *);
681:	int fdt_node_offset_by_phandle(const void *, uint32_t);
654:	int fdt_node_offset_by_prop_value(const void *, int, const char *, const void *, int);
189:	int fdt_num_mem_rsv(const void *);
644:	int fdt_parent_offset(const void *, int);
295:	int fdt_path_offset(const void *, const char *);
250:	int fdt_path_offset_namelen(const void *, const char *, int);
100:	const char *fdt_string(const void *, int);
706:	int fdt_stringlist_contains(const char *, int, const char *);
723:	int fdt_stringlist_count(const void *, int, const char *);
778:	const char *fdt_stringlist_get(const void *, int, const char *, int, int *);
748:	int fdt_stringlist_search(const void *, int, const char *, const char *);
244:	int fdt_subnode_offset(const void *, int, const char *);
225:	int fdt_subnode_offset_namelen(const void *, int, const char *, int);
594:	int fdt_supernode_atdepth_offset(const void *, int, int, int *);
394:	static const struct fdt_property *fdt_get_property_namelen_(const void *, int, const char *, int, int *, int *);

File lib/../scripts/dtc/libfdt/fdt_rw.c:
155:	int fdt_add_mem_rsv(void *, uint64_t, uint64_t);
377:	int fdt_add_subnode(void *, int, const char *);
333:	int fdt_add_subnode_namelen(void *, int, const char *, int);
291:	int fdt_appendprop(void *, int, const char *, const void *, int);
172:	int fdt_del_mem_rsv(void *, int);
382:	int fdt_del_node(void *, int);
318:	int fdt_delprop(void *, int, const char *);
419:	int fdt_open_into(const void *, void *, int);
487:	int fdt_pack(void *);
235:	int fdt_set_name(void *, int, const char *);
276:	int fdt_setprop(void *, int, const char *, const void *, int);
258:	int fdt_setprop_placeholder(void *, int, const char *, int, void **);
202:	static int fdt_add_property_(void *, int, const char *, int, struct fdt_property **);
13:	static int fdt_blocks_misordered_(const void *, int, int);
70:	static int fdt_splice_mem_rsv_(void *, struct fdt_reserve_entry *, int, int);
83:	static int fdt_splice_struct_(void *, void *, int, int);

File lib/../scripts/dtc/libfdt/fdt_wip.c:
73:	int fdt_node_end_offset_(void *, int);
83:	int fdt_nop_node(void *, int);
59:	int fdt_nop_property(void *, int, const char *);
33:	int fdt_setprop_inplace(void *, int, const char *, const void *, int);
13:	int fdt_setprop_inplace_namelen_partial(void *, int, const char *, int, uint32_t, const void *, int);

File lib/argv_split.c:
35:	void argv_free(char **);
60:	char **argv_split(gfp_t, const char *, int *);

File lib/asn1_decoder.c:
167:	int asn1_ber_decoder(const struct asn1_decoder *, void *, const unsigned char *, size_t);

File lib/assoc_array.c:
1345:	void assoc_array_apply_edit(struct assoc_array_edit *);
1409:	void assoc_array_cancel_edit(struct assoc_array_edit *);
1274:	struct assoc_array_edit *assoc_array_clear(struct assoc_array *, const struct assoc_array_ops *);
1078:	struct assoc_array_edit *assoc_array_delete(struct assoc_array *, const struct assoc_array_ops *, const void *);
441:	void assoc_array_destroy(struct assoc_array *, const struct assoc_array_ops *);
304:	void *assoc_array_find(const struct assoc_array *, const struct assoc_array_ops *, const void *);
1453:	int assoc_array_gc(struct assoc_array *, const struct assoc_array_ops *, bool (*)(void *, void *), void *);
963:	struct assoc_array_edit *assoc_array_insert(struct assoc_array *, const struct assoc_array_ops *, const void *, void *);
1030:	void assoc_array_insert_set_object(struct assoc_array_edit *, void *);
133:	int assoc_array_iterate(const struct assoc_array *, int (*)(const void *, void *), void *);
1045:	static int assoc_array_delete_collapse_iterator(const void *, void *);
343:	static void assoc_array_destroy_subtree(struct assoc_array_ptr *, const struct assoc_array_ops *);
1300:	static void assoc_array_rcu_cleanup(struct callback_head *);
19:	static int assoc_array_subtree_iterate(const struct assoc_array_ptr *, const struct assoc_array_ptr *, int (*)(const void *, void *), void *);
170:	static enum assoc_array_walk_status assoc_array_walk(const struct assoc_array *, const struct assoc_array_ops *, const void *, struct assoc_array_walk_result *);

File lib/audit.c:
32:	int audit_classify_arch(int);
40:	int audit_classify_syscall(int, unsigned int);
72:	static int audit_classes_init(void);

File lib/base64.c:
73:	int base64_decode(const char *, int, u8 *);
32:	int base64_encode(const u8 *, int, char *);

File lib/bcd.c:
5:	unsigned int _bcd2bin(unsigned char);
11:	unsigned char _bin2bcd(unsigned int);

File lib/bitmap.c:
240:	bool __bitmap_and(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
278:	bool __bitmap_andnot(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
383:	void __bitmap_clear(unsigned long *, unsigned int, int);
84:	void __bitmap_complement(unsigned long *, const unsigned long *, unsigned int);
48:	bool __bitmap_equal(const unsigned long *, const unsigned long *, unsigned int);
306:	bool __bitmap_intersects(const unsigned long *, const unsigned long *, unsigned int);
256:	void __bitmap_or(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
64:	bool __bitmap_or_equal(const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
294:	void __bitmap_replace(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
362:	void __bitmap_set(unsigned long *, unsigned int, int);
148:	void __bitmap_shift_left(unsigned long *, const unsigned long *, unsigned int, unsigned int);
103:	void __bitmap_shift_right(unsigned long *, const unsigned long *, unsigned int, unsigned int);
321:	bool __bitmap_subset(const unsigned long *, const unsigned long *, unsigned int);
349:	unsigned int __bitmap_weight(const unsigned long *, unsigned int);
355:	unsigned int __bitmap_weight_and(const unsigned long *, const unsigned long *, unsigned int);
267:	void __bitmap_xor(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1386:	unsigned long *bitmap_alloc(unsigned int, gfp_t);
1399:	unsigned long *bitmap_alloc_node(unsigned int, gfp_t, int);
1355:	int bitmap_allocate_region(unsigned long *, unsigned int, int);
1051:	int bitmap_bitremap(int, const unsigned long *, const unsigned long *, int);
210:	void bitmap_cut(unsigned long *, const unsigned long *, unsigned int, unsigned int, unsigned int);
1313:	int bitmap_find_free_region(unsigned long *, unsigned int, int);
417:	unsigned long bitmap_find_next_zero_area_off(unsigned long *, unsigned long, unsigned long, unsigned int, unsigned long, unsigned long);
1209:	void bitmap_fold(unsigned long *, const unsigned long *, unsigned int, unsigned int);
1412:	void bitmap_free(const unsigned long *);
1457:	void bitmap_from_arr32(unsigned long *, const u32 *, unsigned int);
1170:	void bitmap_onto(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
906:	int bitmap_parse(const char *, unsigned int, unsigned long *, int);
457:	int bitmap_parse_user(const char *, unsigned int, unsigned long *, int);
807:	int bitmap_parselist(const char *, unsigned long *, int);
848:	int bitmap_parselist_user(const char *, unsigned int, unsigned long *, int);
613:	int bitmap_print_bitmask_to_buf(char *, const unsigned long *, int, loff_t, size_t);
631:	int bitmap_print_list_to_buf(char *, const unsigned long *, int, loff_t, size_t);
491:	int bitmap_print_to_pagebuf(bool, char *, const unsigned long *, int);
1338:	void bitmap_release_region(unsigned long *, unsigned int, int);
1003:	void bitmap_remap(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1480:	void bitmap_to_arr32(u32 *, const unsigned long *, unsigned int);
1393:	unsigned long *bitmap_zalloc(unsigned int, gfp_t);
1406:	unsigned long *bitmap_zalloc_node(unsigned int, gfp_t, int);
1425:	unsigned long *devm_bitmap_alloc(struct device *, unsigned int, gfp_t);
1443:	unsigned long *devm_bitmap_zalloc(struct device *, unsigned int, gfp_t);
1418:	static void devm_bitmap_free(void *);

File lib/bsearch.c:
31:	void *bsearch(const void *, const void *, size_t, size_t, cmp_func_t);

File lib/bucket_locks.c:
14:	int __alloc_bucket_spinlocks(spinlock_t **, unsigned int *, size_t, unsigned int, gfp_t, const char *, struct lock_class_key *);
50:	void free_bucket_spinlocks(spinlock_t *);

File lib/bug.c:
129:	void bug_get_file_line(struct bug_entry *, const char **, unsigned int *);
145:	struct bug_entry *find_bug(unsigned long);
220:	void generic_bug_clear_once(void);
156:	enum bug_trap_type report_bug(unsigned long, struct pt_regs *);

File lib/buildid.c:
126:	int build_id_parse(struct vm_area_struct *, unsigned char *, __u32 *);
172:	int build_id_parse_buf(const void *, unsigned char *, u32);

File lib/bust_spinlocks.c:
20:	void bust_spinlocks(int);

File lib/checksum.c:
125:	__wsum csum_partial(const void *, int, __wsum);
158:	__wsum csum_tcpudp_nofold(__be32, __be32, __u32, __u8, __wsum);
142:	__sum16 ip_compute_csum(const void *, int);

File lib/clz_ctz.c:
49:	int __clzdi2(long);
25:	int __clzsi2(int);
55:	int __ctzdi2(long);
18:	int __ctzsi2(int);

File lib/cmdline.c:
56:	int get_option(char **, int *);
107:	char *get_options(const char *, int, int *);
150:	unsigned long long memparse(const char *, char **);
227:	char *next_arg(char *, char **, char **);
203:	bool parse_option_str(const char *, const char *);

File lib/cpu_rmap.c:
25:	struct cpu_rmap *alloc_cpu_rmap(unsigned int, gfp_t);
138:	int cpu_rmap_add(struct cpu_rmap *, void *);
85:	int cpu_rmap_put(struct cpu_rmap *);
155:	int cpu_rmap_update(struct cpu_rmap *, u16, const struct cpumask *);
225:	void free_irq_cpu_rmap(struct cpu_rmap *);
285:	int irq_cpu_rmap_add(struct cpu_rmap *, int);
250:	static void irq_cpu_rmap_notify(struct irq_affinity_notify *, const cpumask_t *);
265:	static void irq_cpu_rmap_release(struct kref *);

File lib/cpumask.c:
161:	unsigned int cpumask_any_and_distribute(const struct cpumask *, const struct cpumask *);
178:	unsigned int cpumask_any_distribute(const struct cpumask *);
123:	unsigned int cpumask_local_spread(unsigned int, int);
22:	unsigned int cpumask_next_wrap(int, const struct cpumask *, int, bool);

File lib/crc-ccitt.c:
99:	u16 crc_ccitt(u16, const u8 *, size_t);
114:	u16 crc_ccitt_false(u16, const u8 *, size_t);

File lib/crc-itu-t.c:
57:	u16 crc_itu_t(u16, const u8 *, size_t);

File lib/crc-t10dif.c:
86:	__u16 crc_t10dif(const unsigned char *, size_t);
63:	__u16 crc_t10dif_update(__u16, const unsigned char *, size_t);
100:	static void crc_t10dif_mod_fini(void);
92:	static int crc_t10dif_mod_init(void);
24:	static int crc_t10dif_notify(struct notifier_block *, unsigned long, void *);
36:	static void crc_t10dif_rehash(struct work_struct *);
110:	static int crc_t10dif_transform_show(char *, const struct kernel_param *);

File lib/crc16.c:
55:	u16 crc16(u16, const u8 *, size_t);

File lib/crc32.c:
199:	u32 __crc32c_le(u32, const unsigned char *, size_t);
277:	u32 __crc32c_le_shift(u32, size_t);
339:	u32 crc32_be(u32, const unsigned char *, size_t);
195:	u32 crc32_le(u32, const unsigned char *, size_t);
272:	u32 crc32_le_shift(u32, size_t);

File lib/crc64-rocksoft.c:
80:	u64 crc64_rocksoft(const unsigned char *, size_t);
57:	u64 crc64_rocksoft_update(u64, const unsigned char *, size_t);
94:	static void crc64_rocksoft_mod_fini(void);
86:	static int crc64_rocksoft_mod_init(void);
18:	static int crc64_rocksoft_notify(struct notifier_block *, unsigned long, void *);
30:	static void crc64_rocksoft_rehash(struct work_struct *);
104:	static int crc64_rocksoft_transform_show(char *, const struct kernel_param *);

File lib/crc64.c:
51:	u64 crc64_be(u64, const void *, size_t);
73:	u64 crc64_rocksoft_generic(u64, const void *, size_t);

File lib/crc7.c:
65:	u8 crc7_be(u8, const u8 *, size_t);

File lib/crc8.c:
74:	u8 crc8(const u8 *, const u8 *, size_t, u8);
51:	void crc8_populate_lsb(u8 *, u8);
29:	void crc8_populate_msb(u8 *, u8);

File lib/crypto/aes.c:
309:	void aes_decrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
258:	void aes_encrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
185:	int aes_expandkey(struct crypto_aes_ctx *, const u8 *, unsigned int);

File lib/crypto/arc4.c:
37:	void arc4_crypt(struct arc4_ctx *, u8 *, const u8 *, unsigned int);
13:	int arc4_setkey(struct arc4_ctx *, const u8 *, unsigned int);

File lib/crypto/blake2s-generic.c:
44:	void blake2s_compress_generic(struct blake2s_state *, const u8 *, size_t, const u32);

File lib/crypto/blake2s.c:
48:	void blake2s_final(struct blake2s_state *, u8 *);
24:	void blake2s_update(struct blake2s_state *, const u8 *, size_t);
61:	static int blake2s_mod_init(void);

File lib/crypto/chacha.c:
76:	void chacha_block_generic(u32 *, u8 *, int);
103:	void hchacha_block_generic(const u32 *, u32 *, int);
16:	static void chacha_permute(u32 *, int);

File lib/crypto/curve25519-hacl64.c:
759:	void curve25519_generic(u8 *, const u8 *, const u8 *);

File lib/crypto/des.c:
873:	void des3_ede_decrypt(const struct des3_ede_ctx *, u8 *, const u8 *);
844:	void des3_ede_encrypt(const struct des3_ede_ctx *, u8 *, const u8 *);
823:	int des3_ede_expand_key(struct des3_ede_ctx *, const u8 *, unsigned int);
802:	void des_decrypt(const struct des_ctx *, u8 *, const u8 *);
781:	void des_encrypt(const struct des_ctx *, u8 *, const u8 *);
699:	int des_expand_key(struct des_ctx *, const u8 *, unsigned int);
623:	static unsigned long des_ekey(u32 *, const u8 *);

File lib/crypto/gf128mul.c:
420:	void gf128mul_4k_bbe(be128 *, const struct gf128mul_4k *);
405:	void gf128mul_4k_lle(be128 *, const struct gf128mul_4k *);
332:	void gf128mul_64k_bbe(be128 *, const struct gf128mul_64k *);
228:	void gf128mul_bbe(be128 *, const be128 *);
322:	void gf128mul_free_64k(struct gf128mul_64k *);
383:	struct gf128mul_4k *gf128mul_init_4k_bbe(const be128 *);
361:	struct gf128mul_4k *gf128mul_init_4k_lle(const be128 *);
280:	struct gf128mul_64k *gf128mul_init_64k_bbe(const be128 *);
181:	void gf128mul_lle(be128 *, const be128 *);
170:	void gf128mul_x8_ble(le128 *, const le128 *);

File lib/crypto/libchacha.c:
15:	void chacha_crypt_generic(u32 *, u8 *, const u8 *, unsigned int, int);

File lib/crypto/memneq.c:
163:	unsigned long __crypto_memneq(const void *, const void *, size_t);

File lib/crypto/sha1.c:
130:	void sha1_init(__u32 *);
87:	void sha1_transform(__u32 *, const char *, __u32 *);

File lib/crypto/sha256.c:
193:	void sha224_final(struct sha256_state *, u8 *);
154:	void sha224_update(struct sha256_state *, const u8 *, unsigned int);
199:	void sha256(const u8 *, unsigned int, u8 *);
187:	void sha256_final(struct sha256_state *, u8 *);
122:	void sha256_update(struct sha256_state *, const u8 *, unsigned int);

File lib/crypto/utils.c:
17:	void __crypto_xor(u8 *, const u8 *, const u8 *, unsigned int);

File lib/debug_locks.c:
39:	int debug_locks_off(void);

File lib/dec_and_lock.c:
21:	int _atomic_dec_and_lock(atomic_t *, spinlock_t *);
37:	int _atomic_dec_and_lock_irqsave(atomic_t *, spinlock_t *, unsigned long *);
53:	int _atomic_dec_and_raw_lock(atomic_t *, raw_spinlock_t *);
68:	int _atomic_dec_and_raw_lock_irqsave(atomic_t *, raw_spinlock_t *, unsigned long *);

File lib/decompress.c:
63:	decompress_fn decompress_method(const unsigned char *, long, const char **);

File lib/decompress_bunzip2.c:
679:	int bunzip2(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
116:	static unsigned int get_bits(struct bunzip_data *, char);
156:	static int get_next_block(struct bunzip_data *);
621:	static long nofill(void *, unsigned long);
523:	static int read_bunzip(struct bunzip_data *, char *, int);
629:	static int start_bunzip(struct bunzip_data **, void *, long, long (*)(void *, unsigned long));

File lib/decompress_inflate.c:
42:	int __gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long, long *, void (*)(char *));
200:	int gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
36:	static long nofill(void *, unsigned long);

File lib/decompress_unlz4.c:
31:	int unlz4(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));

File lib/decompress_unlzma.c:
537:	int unlzma(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
335:	static int copy_bytes(struct writer *, uint32_t, int);
85:	static long nofill(void *, unsigned long);
298:	static uint8_t peek_old_byte(struct writer *, uint32_t);
347:	static int process_bit0(struct writer *, struct rc *, struct cstate *, uint16_t *, int, uint16_t *, int, uint32_t);
391:	static int process_bit1(struct writer *, struct rc *, struct cstate *, uint16_t *, int, uint16_t *);
201:	static void rc_bit_tree_decode(struct rc *, uint16_t *, int, int *);
188:	static int rc_direct_bit(struct rc *);
131:	static void rc_do_normalize(struct rc *);
174:	static int rc_get_bit(struct rc *, uint16_t *, int *);
154:	static int rc_is_bit_0(struct rc *, uint16_t *);
316:	static int write_byte(struct writer *, uint8_t);

File lib/decompress_unlzo.c:
41:	long parse_header(u8 *, long *, long);
97:	int unlzo(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));

File lib/decompress_unxz.c:
251:	int unxz(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));

File lib/decompress_unzstd.c:
331:	int unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
163:	static int __unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long, long *, void (*)(char *));
123:	static int decompress_single(const u8 *, long, u8 *, long, long *, void (*)(char *));
88:	static int handle_zstd_error(size_t, void (*)(char *));

File lib/devmem_is_allowed.c:
20:	int devmem_is_allowed(unsigned long);

File lib/devres.c:
579:	int devm_arch_io_reserve_memtype_wc(struct device *, resource_size_t, resource_size_t);
534:	int devm_arch_phys_wc_add(struct device *, unsigned long, unsigned long);
69:	void *devm_ioremap(struct device *, resource_size_t, resource_size_t);
16:	void devm_ioremap_release(struct device *, void *);
185:	void *devm_ioremap_resource(struct device *, const struct resource *);
201:	void *devm_ioremap_resource_wc(struct device *, const struct resource *);
84:	void *devm_ioremap_uc(struct device *, resource_size_t, resource_size_t);
99:	void *devm_ioremap_wc(struct device *, resource_size_t, resource_size_t);
113:	void devm_iounmap(struct device *, void *);
237:	void *devm_of_iomap(struct device *, struct device_node *, int, resource_size_t *);
122:	static void *__devm_ioremap_resource(struct device *, const struct resource *, enum devm_ioremap_type);
562:	static void devm_arch_io_free_memtype_wc_release(struct device *, void *);
520:	static void devm_arch_phys_ac_add_release(struct device *, void *);
21:	static int devm_ioremap_match(struct device *, void *, void *);

File lib/dump_stack.c:
111:	void dump_stack(void);
97:	void dump_stack_lvl(const char *);
55:	void dump_stack_print_info(const char *);
30:	void dump_stack_set_arch_desc(const char *, ...);
80:	void show_regs_print_info(const char *);

File lib/dynamic_queue_limits.c:
18:	void dql_completed(struct dql *, unsigned int);
131:	void dql_init(struct dql *, unsigned int);
116:	void dql_reset(struct dql *);

File lib/errname.c:
217:	const char *errname(int);

File lib/errseq.c:
145:	int errseq_check(errseq_t *, errseq_t);
175:	int errseq_check_and_advance(errseq_t *, errseq_t *);
123:	errseq_t errseq_sample(errseq_t *);
59:	errseq_t errseq_set(errseq_t *, int);

File lib/extable.c:
112:	const struct exception_table_entry *search_extable(const struct exception_table_entry *, const size_t, unsigned long);
63:	void sort_extable(struct exception_table_entry *, struct exception_table_entry *);
91:	static int cmp_ex_search(const void *, const void *);
51:	static int cmp_ex_sort(const void *, const void *);
27:	static void swap_ex(void *, void *, int);

File lib/find_bit.c:
144:	unsigned long __find_nth_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
151:	unsigned long __find_nth_andnot_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
138:	unsigned long __find_nth_bit(const unsigned long *, unsigned long, unsigned long);
110:	unsigned long _find_first_and_bit(const unsigned long *, const unsigned long *, unsigned long);
99:	unsigned long _find_first_bit(const unsigned long *, unsigned long);
123:	unsigned long _find_first_zero_bit(const unsigned long *, unsigned long);
186:	unsigned long _find_last_bit(const unsigned long *, unsigned long);
159:	unsigned long _find_next_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
168:	unsigned long _find_next_andnot_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
131:	unsigned long _find_next_bit(const unsigned long *, unsigned long, unsigned long);
177:	unsigned long _find_next_zero_bit(const unsigned long *, unsigned long, unsigned long);
205:	unsigned long find_next_clump8(unsigned long *, const unsigned long *, unsigned long, unsigned long);

File lib/flex_proportions.c:
216:	void __fprop_add_percpu(struct fprop_global *, struct fprop_local_percpu *, long);
256:	void __fprop_add_percpu_max(struct fprop_global *, struct fprop_local_percpu *, int, long);
127:	void __fprop_inc_single(struct fprop_global *, struct fprop_local_single *);
224:	void fprop_fraction_percpu(struct fprop_global *, struct fprop_local_percpu *, unsigned long *, unsigned long *);
135:	void fprop_fraction_single(struct fprop_global *, struct fprop_local_single *, unsigned long *, unsigned long *);
51:	void fprop_global_destroy(struct fprop_global *);
38:	int fprop_global_init(struct fprop_global *, gfp_t);
180:	void fprop_local_destroy_percpu(struct fprop_local_percpu *);
98:	void fprop_local_destroy_single(struct fprop_local_single *);
168:	int fprop_local_init_percpu(struct fprop_local_percpu *, gfp_t);
90:	int fprop_local_init_single(struct fprop_local_single *);
64:	bool fprop_new_period(struct fprop_global *, int);
185:	static void fprop_reflect_period_percpu(struct fprop_global *, struct fprop_local_percpu *);

File lib/fonts/fonts.c:
82:	const struct font_desc *find_font(const char *);
109:	const struct font_desc *get_default_font(int, int, u32, u32);

File lib/genalloc.c:
829:	struct gen_pool *devm_gen_pool_create(struct device *, int, int, const char *);
184:	int gen_pool_add_owner(struct gen_pool *, unsigned long, phys_addr_t, size_t, int, void *);
277:	unsigned long gen_pool_alloc_algo_owner(struct gen_pool *, size_t, genpool_algo_t, void *, void **);
580:	size_t gen_pool_avail(struct gen_pool *);
754:	unsigned long gen_pool_best_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
153:	struct gen_pool *gen_pool_create(int, int);
242:	void gen_pool_destroy(struct gen_pool *);
341:	void *gen_pool_dma_alloc(struct gen_pool *, size_t, dma_addr_t *);
362:	void *gen_pool_dma_alloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
395:	void *gen_pool_dma_alloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
419:	void *gen_pool_dma_zalloc(struct gen_pool *, size_t, dma_addr_t *);
440:	void *gen_pool_dma_zalloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
466:	void *gen_pool_dma_zalloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
647:	unsigned long gen_pool_first_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
666:	unsigned long gen_pool_first_fit_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
729:	unsigned long gen_pool_first_fit_order_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
694:	unsigned long gen_pool_fixed_alloc(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
531:	void gen_pool_for_each_chunk(struct gen_pool *, void (*)(struct gen_pool *, struct gen_pool_chunk *, void *), void *);
487:	void gen_pool_free_owner(struct gen_pool *, unsigned long, size_t, void **);
806:	struct gen_pool *gen_pool_get(struct device *, const char *);
553:	bool gen_pool_has_addr(struct gen_pool *, unsigned long, size_t);
622:	void gen_pool_set_algo(struct gen_pool *, genpool_algo_t, void *);
599:	size_t gen_pool_size(struct gen_pool *);
217:	phys_addr_t gen_pool_virt_to_phys(struct gen_pool *, unsigned long);
879:	struct gen_pool *of_gen_pool_get(struct device_node *, const char *, int);
121:	static unsigned long bitmap_clear_ll(unsigned long *, unsigned long, unsigned long);
785:	static int devm_gen_pool_match(struct device *, void *, void *);
780:	static void devm_gen_pool_release(struct device *, void *);

File lib/generic-radix-tree.c:
230:	void __genradix_free(struct __genradix *);
162:	void *__genradix_iter_peek(struct genradix_iter *, struct __genradix *, size_t);
217:	int __genradix_prealloc(struct __genradix *, size_t, gfp_t);
54:	void *__genradix_ptr(struct __genradix *, size_t);
104:	void *__genradix_ptr_alloc(struct __genradix *, size_t, gfp_t);
204:	static void genradix_free_recurse(struct genradix_node *, unsigned int);

File lib/glob.c:
40:	bool glob_match(const char *, const char *);

File lib/hexdump.c:
87:	char *bin2hex(char *, const void *, size_t);
63:	int hex2bin(u8 *, const char *, size_t);
127:	int hex_dump_to_buffer(const void *, size_t, int, int, char *, size_t, bool);
46:	int hex_to_bin(unsigned char);
261:	void print_hex_dump(const char *, const char *, int, int, int, const void *, size_t, bool);

File lib/hweight.c:
30:	unsigned int __sw_hweight16(unsigned int);
13:	unsigned int __sw_hweight32(unsigned int);
47:	unsigned long __sw_hweight64(__u64);
39:	unsigned int __sw_hweight8(unsigned int);

File lib/idr.c:
380:	int ida_alloc_range(struct ida *, unsigned int, unsigned int, gfp_t);
541:	void ida_destroy(struct ida *);
487:	void ida_free(struct ida *, unsigned int);
79:	int idr_alloc(struct idr *, void *, int, int, gfp_t);
117:	int idr_alloc_cyclic(struct idr *, void *, int, int, gfp_t);
33:	int idr_alloc_u32(struct idr *, void *, u32 *, unsigned long, gfp_t);
172:	void *idr_find(const struct idr *, unsigned long);
195:	int idr_for_each(const struct idr *, int (*)(int, void *, void *), void *);
264:	void *idr_get_next(struct idr *, int *);
227:	void *idr_get_next_ul(struct idr *, unsigned long *);
152:	void *idr_remove(struct idr *, unsigned long);
290:	void *idr_replace(struct idr *, void *, unsigned long);

File lib/iomap_copy.c:
42:	void __ioread32_copy(void *, const void *, size_t);
19:	void __iowrite32_copy(void *, const void *, size_t);
63:	void __iowrite64_copy(void *, const void *, size_t);

File lib/iov_iter.c:
1787:	ssize_t __import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *, bool);
627:	size_t _copy_from_iter(void *, size_t, struct iov_iter *);
643:	size_t _copy_from_iter_nocache(void *, size_t, struct iov_iter *);
521:	size_t _copy_to_iter(const void *, size_t, struct iov_iter *);
743:	size_t copy_page_from_iter(struct page *, size_t, size_t, struct iov_iter *);
809:	size_t copy_page_from_iter_atomic(struct page *, unsigned int, size_t, struct iov_iter *);
712:	size_t copy_page_to_iter(struct page *, size_t, size_t, struct iov_iter *);
1541:	size_t csum_and_copy_from_iter(void *, size_t, __wsum *, struct iov_iter *);
1562:	size_t csum_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1685:	const void *dup_iter(struct iov_iter *, struct iov_iter *, gfp_t);
352:	size_t fault_in_iov_iter_readable(const struct iov_iter *, size_t);
395:	size_t fault_in_iov_iter_writeable(const struct iov_iter *, size_t);
1596:	size_t hash_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1856:	ssize_t import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *);
1865:	int import_single_range(int, void *, size_t, struct iovec *, struct iov_iter *);
895:	void iov_iter_advance(struct iov_iter *, size_t);
1237:	unsigned long iov_iter_alignment(const struct iov_iter *);
1013:	void iov_iter_bvec(struct iov_iter *, unsigned int, const struct bio_vec *, unsigned long, size_t);
1084:	void iov_iter_discard(struct iov_iter *, unsigned int, size_t);
1268:	unsigned long iov_iter_gap_alignment(const struct iov_iter *);
1496:	ssize_t iov_iter_get_pages(struct iov_iter *, struct page **, size_t, unsigned int, size_t *, unsigned int);
1509:	ssize_t iov_iter_get_pages2(struct iov_iter *, struct page **, size_t, unsigned int, size_t *);
1516:	ssize_t iov_iter_get_pages_alloc(struct iov_iter *, struct page ***, size_t, size_t *, unsigned int);
1534:	ssize_t iov_iter_get_pages_alloc2(struct iov_iter *, struct page ***, size_t, size_t *);
424:	void iov_iter_init(struct iov_iter *, unsigned int, const struct iovec *, unsigned long, size_t);
1154:	bool iov_iter_is_aligned(const struct iov_iter *, unsigned int, unsigned int);
997:	void iov_iter_kvec(struct iov_iter *, unsigned int, const struct kvec *, unsigned long, size_t);
1653:	int iov_iter_npages(const struct iov_iter *, int);
1029:	void iov_iter_pipe(struct iov_iter *, unsigned int, struct pipe_inode_info *, size_t);
1892:	void iov_iter_restore(struct iov_iter *, struct iov_iter_state *);
915:	void iov_iter_revert(struct iov_iter *, size_t);
985:	size_t iov_iter_single_seg_count(const struct iov_iter *);
1060:	void iov_iter_xarray(struct iov_iter *, unsigned int, struct xarray *, loff_t, size_t);
796:	size_t iov_iter_zero(size_t, struct iov_iter *);
1752:	struct iovec *iovec_from_user(const struct iovec *, unsigned long, unsigned long, struct iovec *, bool);
1432:	static ssize_t __iov_iter_get_pages_alloc(struct iov_iter *, struct page ***, size_t, unsigned int, size_t *, unsigned int);
273:	static struct page *append_pipe(struct iov_iter *, size_t, unsigned int *);
1635:	static int bvec_npages(const struct iov_iter *, int);
305:	static size_t copy_page_to_iter_pipe(struct page *, size_t, size_t, struct iov_iter *);
458:	static size_t copy_pipe_to_iter(const void *, size_t, struct iov_iter *);
175:	static int copyin(void *, const void *, size_t);
164:	static int copyout(void *, const void *, size_t);
489:	static size_t csum_and_copy_to_pipe_iter(const void *, size_t, struct iov_iter *, __wsum *);
482:	static __wsum csum_and_memcpy(void *, const void *, size_t, __wsum, size_t);
1120:	static bool iov_iter_aligned_bvec(const struct iov_iter *, unsigned int, unsigned int);
1096:	static bool iov_iter_aligned_iovec(const struct iov_iter *, unsigned int, unsigned int);
1217:	static unsigned long iov_iter_alignment_bvec(const struct iov_iter *);
1195:	static unsigned long iov_iter_alignment_iovec(const struct iov_iter *);
856:	static void iov_iter_bvec_advance(struct iov_iter *, size_t);
876:	static void iov_iter_iovec_advance(struct iov_iter *, size_t);
1615:	static int iov_npages(const struct iov_iter *, int);
1369:	static ssize_t iter_xarray_get_pages(struct iov_iter *, struct page ***, size_t, unsigned int, size_t *);
830:	static void pipe_advance(struct iov_iter *, size_t);
1312:	static ssize_t pipe_get_pages(struct iov_iter *, struct page ***, size_t, unsigned int, size_t *);
770:	static size_t pipe_zero(size_t, struct iov_iter *);
196:	static bool sanity(const struct iov_iter *);
1296:	static int want_pages_array(struct page ***, size_t, size_t, unsigned int);

File lib/irq_poll.c:
68:	void irq_poll_complete(struct irq_poll *);
145:	void irq_poll_disable(struct irq_poll *);
162:	void irq_poll_enable(struct irq_poll *);
179:	void irq_poll_init(struct irq_poll *, int, irq_poll_fn *);
27:	void irq_poll_sched(struct irq_poll *);
188:	static int irq_poll_cpu_dead(unsigned int);
207:	static int irq_poll_setup(void);
78:	static void irq_poll_softirq(struct softirq_action *);

File lib/is_single_threaded.c:
15:	bool current_is_single_threaded(void);

File lib/kasprintf.c:
53:	char *kasprintf(gfp_t, const char *, ...);
15:	char *kvasprintf(gfp_t, const char *, va_list);
43:	const char *kvasprintf_const(gfp_t, const char *, va_list);

File lib/kfifo.c:
24:	int __kfifo_alloc(struct __kfifo *, unsigned int, size_t, gfp_t);
562:	void __kfifo_dma_in_finish_r(struct __kfifo *, unsigned int, size_t);
356:	unsigned int __kfifo_dma_in_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
548:	unsigned int __kfifo_dma_in_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
585:	void __kfifo_dma_out_finish_r(struct __kfifo *, size_t);
369:	unsigned int __kfifo_dma_out_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
571:	unsigned int __kfifo_dma_out_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
55:	void __kfifo_free(struct __kfifo *);
210:	int __kfifo_from_user(struct __kfifo *, const void *, unsigned long, unsigned int *);
499:	int __kfifo_from_user_r(struct __kfifo *, const void *, unsigned long, unsigned int *, size_t);
113:	unsigned int __kfifo_in(struct __kfifo *, const void *, unsigned int);
438:	unsigned int __kfifo_in_r(struct __kfifo *, const void *, unsigned int, size_t);
66:	int __kfifo_init(struct __kfifo *, void *, unsigned int, size_t);
432:	unsigned int __kfifo_len_r(struct __kfifo *, size_t);
382:	unsigned int __kfifo_max_r(unsigned int, size_t);
166:	unsigned int __kfifo_out(struct __kfifo *, void *, unsigned int);
152:	unsigned int __kfifo_out_peek(struct __kfifo *, void *, unsigned int);
464:	unsigned int __kfifo_out_peek_r(struct __kfifo *, void *, unsigned int, size_t);
476:	unsigned int __kfifo_out_r(struct __kfifo *, void *, unsigned int, size_t);
490:	void __kfifo_skip_r(struct __kfifo *, size_t);
270:	int __kfifo_to_user(struct __kfifo *, void *, unsigned long, unsigned int *);
523:	int __kfifo_to_user_r(struct __kfifo *, void *, unsigned long, unsigned int *, size_t);
175:	static unsigned long kfifo_copy_from_user(struct __kfifo *, const void *, unsigned int, unsigned int, unsigned int *);
236:	static unsigned long kfifo_copy_to_user(struct __kfifo *, void *, unsigned int, unsigned int, unsigned int *);
295:	static int setup_sgl_buf(struct scatterlist *, void *, int, unsigned int);

File lib/klist.c:
162:	void klist_add_before(struct klist_node *, struct klist_node *);
146:	void klist_add_behind(struct klist_node *, struct klist_node *);
122:	void klist_add_head(struct klist_node *, struct klist *);
134:	void klist_add_tail(struct klist_node *, struct klist *);
228:	void klist_del(struct klist_node *);
84:	void klist_init(struct klist *, void (*)(struct klist_node *), void (*)(struct klist_node *));
311:	void klist_iter_exit(struct klist_iter *);
297:	void klist_iter_init(struct klist *, struct klist_iter *);
280:	void klist_iter_init_node(struct klist *, struct klist_iter *, struct klist_node *);
375:	struct klist_node *klist_next(struct klist_iter *);
265:	int klist_node_attached(struct klist_node *);
333:	struct klist_node *klist_prev(struct klist_iter *);
238:	void klist_remove(struct klist_node *);
204:	static int klist_dec_and_del(struct klist_node *);

File lib/kobject.c:
1042:	const struct kobj_ns_type_operations *kobj_child_ns_ops(const struct kobject *);
1057:	bool kobj_ns_current_may_mount(enum kobj_ns_type);
1110:	void kobj_ns_drop(enum kobj_ns_type, void *);
1070:	void *kobj_ns_grab_current(enum kobj_ns_type);
1097:	const void *kobj_ns_initial(enum kobj_ns_type);
1084:	const void *kobj_ns_netlink(enum kobj_ns_type, struct sock *);
1052:	const struct kobj_ns_type_operations *kobj_ns_ops(const struct kobject *);
1003:	int kobj_ns_type_register(const struct kobj_ns_type_operations *);
1030:	int kobj_ns_type_registered(enum kobj_ns_type);
394:	int kobject_add(struct kobject *, struct kobject *, const char *, ...);
773:	struct kobject *kobject_create_and_add(const char *, struct kobject *);
603:	void kobject_del(struct kobject *);
620:	struct kobject *kobject_get(struct kobject *);
48:	void kobject_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
139:	char *kobject_get_path(const struct kobject *, gfp_t);
633:	struct kobject *kobject_get_unless_zero(struct kobject *);
317:	void kobject_init(struct kobject *, const struct kobj_type *);
432:	int kobject_init_and_add(struct kobject *, const struct kobj_type *, struct kobject *, const char *, ...);
522:	int kobject_move(struct kobject *, struct kobject *);
28:	const void *kobject_namespace(const struct kobject *);
714:	void kobject_put(struct kobject *);
458:	int kobject_rename(struct kobject *, const char *);
292:	int kobject_set_name(struct kobject *, const char *, ...);
249:	int kobject_set_name_vargs(struct kobject *, const char *, va_list);
980:	struct kset *kset_create_and_add(const char *, const struct kset_uevent_ops *, struct kobject *);
883:	struct kobject *kset_find_obj(struct kset *, const char *);
796:	void kset_init(struct kset *);
841:	int kset_register(struct kset *);
865:	void kset_unregister(struct kset *);
570:	static void __kobject_del(struct kobject *);
726:	static void dynamic_kobj_release(struct kobject *);
804:	static ssize_t kobj_attr_show(struct kobject *, struct attribute *, char *);
816:	static ssize_t kobj_attr_store(struct kobject *, struct attribute *, const char *, size_t);
169:	static void kobj_kset_leave(struct kobject *);
193:	static int kobject_add_internal(struct kobject *);
910:	static void kset_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
902:	static void kset_release(struct kobject *);

File lib/kobject_uevent.c:
654:	int add_uevent_var(struct kobj_uevent_env *, const char *, ...);
192:	int kobject_synth_uevent(struct kobject *, const char *, size_t);
640:	int kobject_uevent(struct kobject *, enum kobject_action);
457:	int kobject_uevent_env(struct kobject *, enum kobject_action, char **);
279:	static struct sk_buff *alloc_uevent_skb(struct kobj_uevent_env *, const char *, const char *);
808:	static int kobject_uevent_init(void);
381:	static int kobject_uevent_net_broadcast(struct kobject *, struct kobj_uevent_env *, const char *, const char *);
789:	static void uevent_net_exit(struct net *);
757:	static int uevent_net_init(struct net *);
752:	static void uevent_net_rcv(struct sk_buff *);
725:	static int uevent_net_rcv_skb(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
419:	static void zap_modalias_env(struct kobj_uevent_env *);

File lib/kstrtox.c:
197:	int _kstrtol(const char *, unsigned int, long *);
181:	int _kstrtoul(const char *, unsigned int, unsigned long *);
91:	unsigned int _parse_integer(const char *, unsigned int, unsigned long long *);
26:	const char *_parse_integer_fixup_radix(const char *, unsigned int *);
52:	unsigned int _parse_integer_limit(const char *, unsigned int, unsigned long long *, size_t);
348:	int kstrtobool(const char *, bool *);
395:	int kstrtobool_from_user(const char *, size_t, bool *);
259:	int kstrtoint(const char *, unsigned int, int *);
427:	int kstrtoint_from_user(const char *, size_t, unsigned int, int *);
425:	int kstrtol_from_user(const char *, size_t, unsigned int, long *);
156:	int kstrtoll(const char *, unsigned int, long long *);
423:	int kstrtoll_from_user(const char *, size_t, unsigned int, long long *);
291:	int kstrtos16(const char *, unsigned int, s16 *);
429:	int kstrtos16_from_user(const char *, size_t, unsigned int, s16 *);
323:	int kstrtos8(const char *, unsigned int, s8 *);
431:	int kstrtos8_from_user(const char *, size_t, unsigned int, s8 *);
275:	int kstrtou16(const char *, unsigned int, u16 *);
428:	int kstrtou16_from_user(const char *, size_t, unsigned int, u16 *);
307:	int kstrtou8(const char *, unsigned int, u8 *);
430:	int kstrtou8_from_user(const char *, size_t, unsigned int, u8 *);
228:	int kstrtouint(const char *, unsigned int, unsigned int *);
426:	int kstrtouint_from_user(const char *, size_t, unsigned int, unsigned int *);
424:	int kstrtoul_from_user(const char *, size_t, unsigned int, unsigned long *);
132:	int kstrtoull(const char *, unsigned int, unsigned long long *);
422:	int kstrtoull_from_user(const char *, size_t, unsigned int, unsigned long long *);

File lib/libcrc32c.c:
38:	u32 crc32c(u32, const void *, unsigned int);
68:	const char *crc32c_impl(void);
63:	static void libcrc32c_mod_fini(void);
57:	static int libcrc32c_mod_init(void);

File lib/linear_ranges.c:
70:	unsigned int linear_range_get_max_value(const struct linear_range *);
219:	int linear_range_get_selector_high(const struct linear_range *, unsigned int, unsigned int *, bool *);
138:	int linear_range_get_selector_low(const struct linear_range *, unsigned int, unsigned int *, bool *);
182:	int linear_range_get_selector_low_array(const struct linear_range *, int, unsigned int, unsigned int *, bool *);
255:	void linear_range_get_selector_within(const struct linear_range *, unsigned int, unsigned int *);
87:	int linear_range_get_value(const struct linear_range *, unsigned int, unsigned int *);
111:	int linear_range_get_value_array(const struct linear_range *, int, unsigned int, unsigned int *);
27:	unsigned int linear_range_values_in_range(const struct linear_range *);
46:	unsigned int linear_range_values_in_range_array(const struct linear_range *, int);

File lib/list_sort.c:
185:	void list_sort(void *, struct list_head *, list_cmp_func_t);

File lib/llist.c:
26:	bool llist_add_batch(struct llist_node *, struct llist_node *, struct llist_head *);
53:	struct llist_node *llist_del_first(struct llist_head *);
75:	struct llist_node *llist_reverse_order(struct llist_node *);

File lib/lockref.c:
42:	void lockref_get(struct lockref *);
172:	int lockref_get_not_dead(struct lockref *);
61:	int lockref_get_not_zero(struct lockref *);
160:	void lockref_mark_dead(struct lockref *);
89:	int lockref_put_not_zero(struct lockref *);
137:	int lockref_put_or_lock(struct lockref *);
119:	int lockref_put_return(struct lockref *);

File lib/logic_pio.c:
128:	struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *);
302:	u8 logic_inb(unsigned long);
314:	u32 logic_inl(unsigned long);
302:	void logic_insb(unsigned long, void *, unsigned int);
314:	void logic_insl(unsigned long, void *, unsigned int);
308:	void logic_insw(unsigned long, void *, unsigned int);
308:	u16 logic_inw(unsigned long);
302:	void logic_outb(u8, unsigned long);
314:	void logic_outl(u32, unsigned long);
302:	void logic_outsb(unsigned long, const void *, unsigned int);
314:	void logic_outsl(unsigned long, const void *, unsigned int);
308:	void logic_outsw(unsigned long, const void *, unsigned int);
308:	void logic_outw(u16, unsigned long);
36:	int logic_pio_register_range(struct logic_pio_hwaddr *);
173:	resource_size_t logic_pio_to_hwaddr(unsigned long);
210:	unsigned long logic_pio_trans_cpuaddr(resource_size_t);
192:	unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *, resource_size_t, resource_size_t);
112:	void logic_pio_unregister_range(struct logic_pio_hwaddr *);

File lib/lz4/lz4_decompress.c:
478:	int LZ4_decompress_fast(const char *, char *, int);
640:	int LZ4_decompress_fast_continue(LZ4_streamDecode_t *, const char *, char *, int);
697:	int LZ4_decompress_fast_usingDict(const char *, char *, int, const char *, int);
460:	int LZ4_decompress_safe(const char *, char *, int, int);
587:	int LZ4_decompress_safe_continue(LZ4_streamDecode_t *, const char *, char *, int, int);
469:	int LZ4_decompress_safe_partial(const char *, char *, int, int, int);
679:	int LZ4_decompress_safe_usingDict(const char *, char *, int, int, const char *, int);
564:	int LZ4_setStreamDecode(LZ4_streamDecode_t *, const char *, int);
521:	static int LZ4_decompress_fast_extDict(const char *, char *, int, const void *, size_t);
510:	static int LZ4_decompress_safe_forceExtDict(const char *, char *, int, int, const void *, size_t);
488:	static int LZ4_decompress_safe_withPrefix64k(const char *, char *, int, int);
498:	static int LZ4_decompress_safe_withSmallPrefix(const char *, char *, int, int, size_t);

File lib/lzo/lzo1x_compress.c:
379:	int lzo1x_1_compress(const unsigned char *, size_t, unsigned char *, size_t *, void *);
386:	int lzorle1x_1_compress(const unsigned char *, size_t, unsigned char *, size_t *, void *);
22:	static size_t lzo1x_1_do_compress(const unsigned char *, size_t, unsigned char *, size_t *, size_t, void *, signed char *, const unsigned char);
302:	static int lzogeneric1x_1_compress(const unsigned char *, size_t, unsigned char *, size_t *, void *, const unsigned char);

File lib/lzo/lzo1x_decompress_safe.c:
39:	int lzo1x_decompress_safe(const unsigned char *, size_t, unsigned char *, size_t *);

File lib/maple_tree.c:
6391:	void __mt_destroy(struct maple_tree *);
6138:	void maple_tree_init(void);
5745:	void mas_destroy(struct ma_state *);
5233:	int mas_empty_area(struct ma_state *, unsigned long, unsigned long, unsigned long);
5289:	int mas_empty_area_rev(struct ma_state *, unsigned long, unsigned long, unsigned long);
6083:	void *mas_erase(struct ma_state *);
5794:	int mas_expected_entries(struct ma_state *, unsigned long);
5994:	void *mas_find(struct ma_state *, unsigned long);
6038:	void *mas_find_rev(struct ma_state *, unsigned long);
248:	bool mas_is_err(struct ma_state *);
5855:	void *mas_next(struct ma_state *, unsigned long);
6115:	bool mas_nomem(struct ma_state *, gfp_t);
5976:	void mas_pause(struct ma_state *);
5720:	int mas_preallocate(struct ma_state *, void *, gfp_t);
5910:	void *mas_prev(struct ma_state *, unsigned long);
5639:	void *mas_store(struct ma_state *, void *);
5676:	int mas_store_gfp(struct ma_state *, void *, gfp_t);
5700:	void mas_store_prealloc(struct ma_state *, void *);
5041:	void *mas_walk(struct ma_state *);
6427:	void *mt_find(struct maple_tree *, unsigned long *, unsigned long);
6486:	void *mt_find_after(struct maple_tree *, unsigned long *, unsigned long);
5887:	void *mt_next(struct maple_tree *, unsigned long, unsigned long);
5951:	void *mt_prev(struct maple_tree *, unsigned long, unsigned long);
6291:	int mtree_alloc_range(struct maple_tree *, unsigned long *, void *, unsigned long, unsigned long, unsigned long, gfp_t);
6327:	int mtree_alloc_rrange(struct maple_tree *, unsigned long *, void *, unsigned long, unsigned long, unsigned long, gfp_t);
6409:	void mtree_destroy(struct maple_tree *);
6370:	void *mtree_erase(struct maple_tree *, unsigned long);
6284:	int mtree_insert(struct maple_tree *, unsigned long, void *, gfp_t);
6249:	int mtree_insert_range(struct maple_tree *, unsigned long, unsigned long, void *, gfp_t);
6152:	void *mtree_load(struct maple_tree *, unsigned long);
6231:	int mtree_store(struct maple_tree *, unsigned long, void *, gfp_t);
6194:	int mtree_store_range(struct maple_tree *, unsigned long, unsigned long, void *, gfp_t);
1837:	static int mab_calc_split(struct ma_state *, struct maple_big_node *, unsigned char *, unsigned long);
1987:	static void mab_mas_cp(struct maple_big_node *, unsigned char, unsigned char, struct ma_state *, bool);
1211:	static void mas_alloc_nodes(struct ma_state *, gfp_t);
1049:	static int mas_ascend(struct ma_state *);
5136:	static void mas_awalk(struct ma_state *, unsigned long);
1453:	static unsigned long mas_leaf_max_gap(struct ma_state *);
1965:	static void mas_leaf_set_meta(struct ma_state *, struct maple_node *, unsigned long *, enum maple_type, unsigned char);
3913:	static int mas_new_root(struct ma_state *, void *);
4737:	static void *mas_next_entry(struct ma_state *, unsigned long);
4569:	static int mas_next_node(struct ma_state *, struct maple_node *, unsigned long);
2210:	static bool mas_next_sibling(struct ma_state *);
4848:	static void *mas_prev_entry(struct ma_state *, unsigned long);
4478:	static int mas_prev_node(struct ma_state *, unsigned long);
3398:	static bool mas_push_data(struct ma_state *, int, struct maple_subtree_state *, bool);
1696:	static void mas_replace(struct ma_state *, bool);
3626:	static int mas_root_expand(struct ma_state *, void *);
2975:	static int mas_spanning_rebalance(struct ma_state *, struct maple_subtree_state *, unsigned char);
3286:	static bool mas_split_final_node(struct maple_subtree_state *, struct ma_state *, int);
3834:	static void *mas_state_walk(struct ma_state *);
2116:	static void mas_store_b_node(struct ma_wr_state *, struct maple_big_node *, unsigned char);
1644:	static void mas_update_gap(struct ma_state *);
2751:	static void mas_wmb_replace(struct ma_state *, struct ma_topiary *, struct ma_topiary *);
4329:	static void mas_wr_modify(struct ma_wr_state *);
3960:	static int mas_wr_spanning_store(struct ma_wr_state *);
4379:	static void *mas_wr_store_entry(struct ma_wr_state *);
3759:	static bool mas_wr_walk(struct ma_wr_state *);
3736:	static void mas_wr_walk_descend(struct ma_wr_state *);
2544:	static void mast_ascend_free(struct maple_subtree_state *);
3319:	static void mast_fill_bnode(struct maple_subtree_state *, struct ma_state *, unsigned char);
2430:	static bool mast_spanning_rebalance(struct maple_subtree_state *);
3365:	static void mast_split_data(struct maple_subtree_state *, struct ma_state *, unsigned char);
2329:	static void mast_topiary(struct maple_subtree_state *);
5531:	static void mt_destroy_walk(struct maple_enode *, unsigned char, bool);
166:	static void mt_free_rcu(struct callback_head *);
5461:	static void mt_free_walk(struct callback_head *);

File lib/math/div64.c:
179:	u32 iter_div_u64_rem(u64, u32, u64 *);
186:	u64 mul_u64_u64_div_u64(u64, u64, u64);

File lib/math/gcd.c:
23:	unsigned long gcd(unsigned long, unsigned long);

File lib/math/int_pow.c:
19:	u64 int_pow(u64, unsigned int);

File lib/math/int_sqrt.c:
20:	unsigned long int_sqrt(unsigned long);

File lib/math/lcm.c:
8:	unsigned long lcm(unsigned long, unsigned long);
17:	unsigned long lcm_not_zero(unsigned long, unsigned long);

File lib/math/rational.c:
35:	void rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);

File lib/math/reciprocal_div.c:
17:	struct reciprocal_value reciprocal_value(u32);
35:	struct reciprocal_value_adv reciprocal_value_adv(u32, u8);

File lib/memcat_p.c:
10:	void **__memcat_p(void **, void **);

File lib/memweight.c:
11:	size_t memweight(const void *, size_t);

File lib/mpi/ec.c:
1188:	void mpi_ec_add_points(MPI_POINT, MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);
1398:	int mpi_ec_curve_point(MPI_POINT, struct mpi_ec_ctx *);
648:	void mpi_ec_deinit(struct mpi_ec_ctx *);
678:	int mpi_ec_get_affine(MPI, MPI, MPI_POINT, struct mpi_ec_ctx *);
564:	void mpi_ec_init(struct mpi_ec_ctx *, enum gcry_mpi_ec_models, enum ecc_dialects, int, MPI, MPI, MPI);
1210:	void mpi_ec_mul_point(MPI_POINT, MPI, MPI_POINT, struct mpi_ec_ctx *);
72:	void mpi_point_free_parts(MPI_POINT);
63:	void mpi_point_init(MPI_POINT);
37:	MPI_POINT mpi_point_new(unsigned int);
51:	void mpi_point_release(MPI_POINT);
122:	static void ec_addm(MPI, MPI, MPI, struct mpi_ec_ctx *);
199:	static void ec_addm_25519(MPI, MPI, MPI, struct mpi_ec_ctx *);
306:	static void ec_addm_448(MPI, MPI, MPI, struct mpi_ec_ctx *);
143:	static void ec_mul2(MPI, MPI, struct mpi_ec_ctx *);
291:	static void ec_mul2_25519(MPI, MPI, struct mpi_ec_ctx *);
443:	static void ec_mul2_448(MPI, MPI, struct mpi_ec_ctx *);
136:	static void ec_mulm(MPI, MPI, MPI, struct mpi_ec_ctx *);
242:	static void ec_mulm_25519(MPI, MPI, MPI, struct mpi_ec_ctx *);
346:	static void ec_mulm_448(MPI, MPI, MPI, struct mpi_ec_ctx *);
160:	static void ec_pow2(MPI, const MPI, struct mpi_ec_ctx *);
296:	static void ec_pow2_25519(MPI, const MPI, struct mpi_ec_ctx *);
448:	static void ec_pow2_448(MPI, const MPI, struct mpi_ec_ctx *);
171:	static void ec_pow3(MPI, const MPI, struct mpi_ec_ctx *);
128:	static void ec_subm(MPI, MPI, MPI, struct mpi_ec_ctx *);
221:	static void ec_subm_25519(MPI, MPI, MPI, struct mpi_ec_ctx *);
326:	static void ec_subm_448(MPI, MPI, MPI, struct mpi_ec_ctx *);
915:	static void mpi_ec_dup_point(MPI_POINT, MPI_POINT, struct mpi_ec_ctx *);

File lib/mpi/generic_mpih-add1.c:
21:	mpi_limb_t mpihelp_add_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/generic_mpih-lshift.c:
28:	mpi_limb_t mpihelp_lshift(mpi_ptr_t, mpi_ptr_t, mpi_size_t, unsigned int);

File lib/mpi/generic_mpih-mul1.c:
20:	mpi_limb_t mpihelp_mul_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/generic_mpih-mul2.c:
20:	mpi_limb_t mpihelp_addmul_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/generic_mpih-mul3.c:
20:	mpi_limb_t mpihelp_submul_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/generic_mpih-rshift.c:
29:	mpi_limb_t mpihelp_rshift(mpi_ptr_t, mpi_ptr_t, mpi_size_t, unsigned int);

File lib/mpi/generic_mpih-sub1.c:
20:	mpi_limb_t mpihelp_sub_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpi-add.c:
67:	void mpi_add(MPI, MPI, MPI);
20:	void mpi_add_ui(MPI, MPI, unsigned long);
143:	void mpi_addm(MPI, MPI, MPI, MPI);
134:	void mpi_sub(MPI, MPI, MPI);
150:	void mpi_subm(MPI, MPI, MPI, MPI);

File lib/mpi/mpi-bit.c:
140:	void mpi_clear_bit(MPI, unsigned int);
122:	void mpi_clear_highbit(MPI, unsigned int);
40:	unsigned int mpi_get_nbits(MPI);
273:	void mpi_lshift(MPI, MPI, unsigned int);
251:	void mpi_lshift_limbs(MPI, unsigned int);
30:	void mpi_normalize(MPI);
178:	void mpi_rshift(MPI, MPI, unsigned int);
158:	void mpi_rshift_limbs(MPI, unsigned int);
80:	void mpi_set_bit(MPI, unsigned int);
99:	void mpi_set_highbit(MPI, unsigned int);
62:	int mpi_test_bit(MPI, unsigned int);

File lib/mpi/mpi-cmp.c:
84:	int mpi_cmp(MPI, MPI);
23:	int mpi_cmp_ui(MPI, unsigned long);
90:	int mpi_cmpabs(MPI, MPI);
44:	static int do_mpi_cmp(MPI, MPI, int);

File lib/mpi/mpi-div.c:
43:	void mpi_fdiv_q(MPI, MPI, MPI);
50:	void mpi_fdiv_qr(MPI, MPI, MPI, MPI);
20:	void mpi_fdiv_r(MPI, MPI, MPI);
83:	void mpi_tdiv_qr(MPI, MPI, MPI, MPI);
78:	void mpi_tdiv_r(MPI, MPI, MPI);

File lib/mpi/mpi-inline.h:
95:	static mpi_limb_t mpihelp_sub(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpi-inv.c:
27:	int mpi_invm(MPI, MPI, MPI);

File lib/mpi/mpi-mod.c:
67:	void mpi_barrett_free(mpi_barrett_t);
36:	mpi_barrett_t mpi_barrett_init(MPI, int);
25:	void mpi_mod(MPI, MPI, MPI);
95:	void mpi_mod_barrett(MPI, MPI, mpi_barrett_t);
153:	void mpi_mul_barrett(MPI, MPI, MPI, mpi_barrett_t);

File lib/mpi/mpi-mul.c:
16:	void mpi_mul(MPI, MPI, MPI);
87:	void mpi_mulm(MPI, MPI, MPI, MPI);

File lib/mpi/mpi-pow.c:
24:	int mpi_powm(MPI, MPI, MPI, MPI);

File lib/mpi/mpi-sub-ui.c:
37:	int mpi_sub_ui(MPI, MPI, unsigned long);

File lib/mpi/mpicoder.c:
116:	int mpi_fromstr(MPI, const char *);
310:	void *mpi_get_buffer(MPI, unsigned int *, int *);
554:	int mpi_print(enum gcry_mpi_format, unsigned char *, size_t, size_t *, MPI);
250:	int mpi_read_buffer(MPI, uint8_t *, unsigned int, unsigned int *, int *);
82:	MPI mpi_read_from_buffer(const void *, unsigned int *);
36:	MPI mpi_read_raw_data(const void *, size_t);
437:	MPI mpi_read_raw_from_sgl(struct scatterlist *, unsigned int);
202:	MPI mpi_scanval(const char *);
354:	int mpi_write_to_sgl(MPI, struct scatterlist *, unsigned int, int *);

File lib/mpi/mpih-cmp.c:
25:	int mpihelp_cmp(mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpih-div.c:
379:	mpi_limb_t mpihelp_divmod_1(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_limb_t);
189:	mpi_limb_t mpihelp_divrem(mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t);
29:	mpi_limb_t mpihelp_mod_1(mpi_ptr_t, mpi_size_t, mpi_limb_t);

File lib/mpi/mpih-mul.c:
245:	void mpih_sqr_n(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t);
207:	void mpih_sqr_n_basecase(mpi_ptr_t, mpi_ptr_t, mpi_size_t);
452:	int mpihelp_mul(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t, mpi_limb_t *);
346:	int mpihelp_mul_karatsuba_case(mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t, mpi_size_t, struct karatsuba_ctx *);
321:	void mpihelp_mul_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);
418:	void mpihelp_release_karatsuba_ctx(struct karatsuba_ctx *);
95:	static void mul_n(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t, mpi_ptr_t);
55:	static mpi_limb_t mul_n_basecase(mpi_ptr_t, mpi_ptr_t, mpi_ptr_t, mpi_size_t);

File lib/mpi/mpiutil.c:
87:	MPI mpi_alloc(unsigned int);
218:	MPI mpi_alloc_like(MPI);
114:	mpi_ptr_t mpi_alloc_limb_space(unsigned int);
286:	MPI mpi_alloc_set_ui(unsigned long);
132:	void mpi_assign_limb_space(MPI, mpi_ptr_t, unsigned int);
166:	void mpi_clear(MPI);
70:	MPI mpi_const(enum gcry_mpi_constants);
195:	MPI mpi_copy(MPI);
175:	void mpi_free(MPI);
124:	void mpi_free_limb_space(mpi_ptr_t);
143:	int mpi_resize(MPI, unsigned int);
250:	MPI mpi_set(MPI, MPI);
270:	MPI mpi_set_ui(MPI, unsigned long);
235:	void mpi_snatch(MPI, MPI);
300:	void mpi_swap_cond(MPI, MPI, unsigned long);
29:	static int mpi_init(void);

File lib/net_utils.c:
7:	bool mac_pton(const char *, u8 *);

File lib/nlattr.c:
695:	int __nla_parse(struct nlattr **, int, const struct nlattr *, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *);
1003:	void __nla_put(struct sk_buff *, int, int, const void *);
1024:	void __nla_put_64bit(struct sk_buff *, int, int, const void *, int);
1043:	void __nla_put_nohdr(struct sk_buff *, int, const void *);
870:	struct nlattr *__nla_reserve(struct sk_buff *, int, int);
898:	struct nlattr *__nla_reserve_64bit(struct sk_buff *, int, int, int);
917:	void *__nla_reserve_nohdr(struct sk_buff *, int);
641:	int __nla_validate(const struct nlattr *, int, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *);
1128:	int nla_append(struct sk_buff *, int, const void *);
713:	struct nlattr *nla_find(const struct nlattr *, int, int);
234:	void nla_get_range_signed(const struct nla_policy *, struct netlink_range_validation_signed *);
115:	void nla_get_range_unsigned(const struct nla_policy *, struct netlink_range_validation *);
822:	int nla_memcmp(const struct nlattr *, const void *, size_t);
804:	int nla_memcpy(void *, const struct nlattr *, int);
662:	int nla_policy_len(const struct nla_policy *, int);
1062:	int nla_put(struct sk_buff *, int, int, const void *);
1083:	int nla_put_64bit(struct sk_buff *, int, int, const void *, int);
1109:	int nla_put_nohdr(struct sk_buff *, int, const void *);
935:	struct nlattr *nla_reserve(struct sk_buff *, int, int);
958:	struct nlattr *nla_reserve_64bit(struct sk_buff *, int, int, int);
984:	void *nla_reserve_nohdr(struct sk_buff *, int);
839:	int nla_strcmp(const struct nlattr *, const char *);
776:	char *nla_strdup(const struct nlattr *, gfp_t);
740:	ssize_t nla_strscpy(char *, const struct nlattr *, size_t);
572:	static int __nla_validate_parse(const struct nlattr *, int, int, const struct nla_policy *, unsigned int, struct netlink_ext_ack *, struct nlattr **, unsigned int);

File lib/oid_registry.c:
26:	enum OID look_up_OID(const void *, size_t);
106:	int parse_OID(const void *, size_t, enum OID *);
186:	int sprint_OID(enum OID, char *, size_t);
130:	int sprint_oid(const void *, size_t, char *, size_t);

File lib/once.c:
60:	void __do_once_done(bool *, struct static_key_true *, unsigned long *, struct module *);
90:	void __do_once_sleepable_done(bool *, struct static_key_true *, struct module *);
72:	bool __do_once_sleepable_start(bool *);
42:	bool __do_once_start(bool *, unsigned long *);
14:	static void once_deferred(struct work_struct *);

File lib/packing.c:
77:	int packing(void *, u64 *, int, int, size_t, enum packing_op, u8);

File lib/parser.c:
264:	int match_hex(substring_t *, int *);
191:	int match_int(substring_t *, int *);
248:	int match_octal(substring_t *, int *);
358:	char *match_strdup(const substring_t *);
334:	size_t match_strlcpy(char *, const substring_t *, size_t);
106:	int match_token(char *, const struct match_token *, substring_t *);
232:	int match_u64(substring_t *, u64 *);
207:	int match_uint(substring_t *, unsigned int *);
282:	bool match_wildcard(const char *, const char *);

File lib/percpu-refcount.c:
130:	void percpu_ref_exit(struct percpu_ref *);
63:	int percpu_ref_init(struct percpu_ref *, percpu_ref_func_t *, unsigned int, gfp_t);
410:	bool percpu_ref_is_zero(struct percpu_ref *);
383:	void percpu_ref_kill_and_confirm(struct percpu_ref *, percpu_ref_func_t *);
441:	void percpu_ref_reinit(struct percpu_ref *);
463:	void percpu_ref_resurrect(struct percpu_ref *);
306:	void percpu_ref_switch_to_atomic(struct percpu_ref *, percpu_ref_func_t *);
328:	void percpu_ref_switch_to_atomic_sync(struct percpu_ref *);
353:	void percpu_ref_switch_to_percpu(struct percpu_ref *);
265:	static void __percpu_ref_switch_mode(struct percpu_ref *, percpu_ref_func_t *);
209:	static void percpu_ref_noop_confirm_switch(struct percpu_ref *);
167:	static void percpu_ref_switch_to_atomic_rcu(struct callback_head *);

File lib/percpu_counter.c:
238:	int __percpu_counter_compare(struct percpu_counter *, s64, s32);
158:	int __percpu_counter_init(struct percpu_counter *, s64, gfp_t, struct lock_class_key *);
141:	s64 __percpu_counter_sum(struct percpu_counter *);
82:	void percpu_counter_add_batch(struct percpu_counter *, s64, s32);
182:	void percpu_counter_destroy(struct percpu_counter *);
60:	void percpu_counter_set(struct percpu_counter *, s64);
152:	s64 percpu_counter_sum_all(struct percpu_counter *);
107:	void percpu_counter_sync(struct percpu_counter *);
204:	static int compute_batch_value(unsigned int);
212:	static int percpu_counter_cpu_dead(unsigned int);
261:	static int percpu_counter_startup(void);

File lib/plist.c:
73:	void plist_add(struct plist_node *, struct plist_head *);
112:	void plist_del(struct plist_node *, struct plist_head *);
145:	void plist_requeue(struct plist_node *, struct plist_head *);

File lib/radix-tree.c:
745:	void *__radix_tree_lookup(const struct xarray *, unsigned long, struct xa_node **, void ***);
873:	void __radix_tree_replace(struct xarray *, struct xa_node *, void **, void *);
1558:	void idr_destroy(struct idr *);
1475:	void **idr_get_free(struct xarray *, struct radix_tree_iter *, gfp_t, unsigned long);
1468:	void idr_preload(gfp_t);
1444:	void *radix_tree_delete(struct xarray *, unsigned long);
1412:	void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
1261:	unsigned int radix_tree_gang_lookup(const struct xarray *, void **, unsigned long, unsigned int);
1301:	unsigned int radix_tree_gang_lookup_tag(const struct xarray *, void **, unsigned long, unsigned int, unsigned int);
1342:	unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *, void ***, unsigned long, unsigned int, unsigned int);
1593:	void radix_tree_init(void);
701:	int radix_tree_insert(struct xarray *, unsigned long, void *);
1393:	void radix_tree_iter_delete(struct xarray *, struct radix_tree_iter *, void **);
929:	void radix_tree_iter_replace(struct xarray *, const struct radix_tree_iter *, void **, void *);
1134:	void **radix_tree_iter_resume(void **, struct radix_tree_iter *);
1058:	void radix_tree_iter_tag_clear(struct xarray *, const struct radix_tree_iter *, unsigned int);
815:	void *radix_tree_lookup(const struct xarray *, unsigned long);
792:	void **radix_tree_lookup_slot(const struct xarray *, unsigned long);
376:	int radix_tree_maybe_preload(gfp_t);
1153:	void **radix_tree_next_chunk(const struct xarray *, struct radix_tree_iter *, unsigned int);
288:	void radix_tree_node_rcu_free(struct callback_head *);
363:	int radix_tree_preload(gfp_t);
912:	void radix_tree_replace_slot(struct xarray *, void **, void *);
1027:	void *radix_tree_tag_clear(struct xarray *, unsigned long, unsigned int);
1079:	int radix_tree_tag_get(const struct xarray *, unsigned long, unsigned int);
965:	void *radix_tree_tag_set(struct xarray *, unsigned long, unsigned int);
1455:	int radix_tree_tagged(const struct xarray *, unsigned int);
1363:	static bool __radix_tree_delete(struct xarray *, struct xa_node *, void **);
320:	static int __radix_tree_preload(gfp_t, unsigned int);
541:	static bool delete_node(struct xarray *, struct xa_node *);
1577:	static int radix_tree_cpu_dead(unsigned int);
406:	static int radix_tree_extend(struct xarray *, gfp_t, unsigned long, unsigned int);
231:	static struct xa_node *radix_tree_node_alloc(gfp_t, struct xa_node *, struct xarray *, unsigned int, unsigned int, unsigned int, unsigned int);
1569:	static void radix_tree_node_ctor(void *);

File lib/raid6/algos.c:
230:	int raid6_select_algo(void);
271:	static void raid6_exit(void);

File lib/raid6/int1.c:
82:	static void raid6_int1_gen_syndrome(int, size_t, void **);
110:	static void raid6_int1_xor_syndrome(int, int, int, size_t, void **);

File lib/raid6/int2.c:
82:	static void raid6_int2_gen_syndrome(int, size_t, void **);
121:	static void raid6_int2_xor_syndrome(int, int, int, size_t, void **);

File lib/raid6/int4.c:
82:	static void raid6_int4_gen_syndrome(int, size_t, void **);
143:	static void raid6_int4_xor_syndrome(int, int, int, size_t, void **);

File lib/raid6/int8.c:
82:	static void raid6_int8_gen_syndrome(int, size_t, void **);
187:	static void raid6_int8_xor_syndrome(int, int, int, size_t, void **);

File lib/raid6/neon.c:
59:	static int raid6_have_neon(void);
64:	static void raid6_neon1_gen_syndrome(int, size_t, void **);
64:	static void raid6_neon1_xor_syndrome(int, int, int, size_t, void **);
65:	static void raid6_neon2_gen_syndrome(int, size_t, void **);
65:	static void raid6_neon2_xor_syndrome(int, int, int, size_t, void **);
66:	static void raid6_neon4_gen_syndrome(int, size_t, void **);
66:	static void raid6_neon4_xor_syndrome(int, int, int, size_t, void **);
67:	static void raid6_neon8_gen_syndrome(int, size_t, void **);
67:	static void raid6_neon8_xor_syndrome(int, int, int, size_t, void **);

File lib/raid6/neon1.c:
56:	void raid6_neon1_gen_syndrome_real(int, unsigned long, void **);
86:	void raid6_neon1_xor_syndrome_real(int, int, int, unsigned long, void **);

File lib/raid6/neon2.c:
56:	void raid6_neon2_gen_syndrome_real(int, unsigned long, void **);
97:	void raid6_neon2_xor_syndrome_real(int, int, int, unsigned long, void **);

File lib/raid6/neon4.c:
56:	void raid6_neon4_gen_syndrome_real(int, unsigned long, void **);
119:	void raid6_neon4_xor_syndrome_real(int, int, int, unsigned long, void **);

File lib/raid6/neon8.c:
56:	void raid6_neon8_gen_syndrome_real(int, unsigned long, void **);
163:	void raid6_neon8_xor_syndrome_real(int, int, int, unsigned long, void **);

File lib/raid6/recov.c:
20:	static void raid6_2data_recov_intx1(int, size_t, int, int, void **);
64:	static void raid6_datap_recov_intx1(int, size_t, int, void **);

File lib/raid6/recov_neon.c:
29:	static void raid6_2data_recov_neon(int, size_t, int, int, void **);
69:	static void raid6_datap_recov_neon(int, size_t, int, void **);
17:	static int raid6_has_neon(void);

File lib/raid6/recov_neon_inner.c:
27:	void __raid6_2data_recov_neon(int, uint8_t *, uint8_t *, uint8_t *, uint8_t *, const uint8_t *, const uint8_t *);
77:	void __raid6_datap_recov_neon(int, uint8_t *, uint8_t *, uint8_t *, const uint8_t *);

File lib/random32.c:
74:	void prandom_bytes_state(struct rnd_state *, void *, size_t);
110:	void prandom_seed_full_state(struct rnd_state *);
52:	u32 prandom_u32_state(struct rnd_state *);

File lib/ratelimit.c:
27:	int ___ratelimit(struct ratelimit_state *, const char *);

File lib/rbtree.c:
410:	void __rb_erase_color(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
456:	void __rb_insert_augmented(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
440:	void rb_erase(struct rb_node *, struct rb_root *);
466:	struct rb_node *rb_first(const struct rb_root *);
623:	struct rb_node *rb_first_postorder(const struct rb_root *);
434:	void rb_insert_color(struct rb_node *, struct rb_root *);
479:	struct rb_node *rb_last(const struct rb_root *);
492:	struct rb_node *rb_next(const struct rb_node *);
604:	struct rb_node *rb_next_postorder(const struct rb_node *);
524:	struct rb_node *rb_prev(const struct rb_node *);
553:	void rb_replace_node(struct rb_node *, struct rb_node *, struct rb_root *);
570:	void rb_replace_node_rcu(struct rb_node *, struct rb_node *, struct rb_root *);

File lib/refcount.c:
144:	bool refcount_dec_and_lock(refcount_t *, spinlock_t *);
172:	bool refcount_dec_and_lock_irqsave(refcount_t *, spinlock_t *, unsigned long *);
113:	bool refcount_dec_and_mutex_lock(refcount_t *, struct mutex *);
55:	bool refcount_dec_if_one(refcount_t *);
74:	bool refcount_dec_not_one(refcount_t *);
13:	void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);

File lib/rhashtable.c:
1178:	struct rhash_lock_head **__rht_bucket_nested(const struct bucket_table *, unsigned int);
1172:	void rhashtable_destroy(struct rhashtable *);
1134:	void rhashtable_free_and_destroy(struct rhashtable *, void (*)(void *, void *), void *);
1019:	int rhashtable_init(struct rhashtable *, const struct rhashtable_params *);
633:	void *rhashtable_insert_slow(struct rhashtable *, const void *, struct rhash_head *);
669:	void rhashtable_walk_enter(struct rhashtable *, struct rhashtable_iter *);
691:	void rhashtable_walk_exit(struct rhashtable_iter *);
863:	void *rhashtable_walk_next(struct rhashtable_iter *);
902:	void *rhashtable_walk_peek(struct rhashtable_iter *);
718:	int rhashtable_walk_start_check(struct rhashtable_iter *);
934:	void rhashtable_walk_stop(struct rhashtable_iter *);
1090:	int rhltable_init(struct rhltable *, const struct rhashtable_params *);
1207:	struct rhash_lock_head **rht_bucket_nested(const struct bucket_table *, unsigned int);
1218:	struct rhash_lock_head **rht_bucket_nested_insert(struct rhashtable *, struct bucket_table *, unsigned int);
791:	static void *__rhashtable_walk_find_next(struct rhashtable_iter *);
175:	static struct bucket_table *bucket_table_alloc(struct rhashtable *, size_t, gfp_t);
117:	static void bucket_table_free_rcu(struct callback_head *);
75:	static void nested_table_free(union nested_table *, unsigned int);
972:	static u32 rhashtable_jhash2(const void *, u32, u32);
354:	static int rhashtable_rehash_alloc(struct rhashtable *, struct bucket_table *, unsigned int);
410:	static void rht_deferred_worker(struct work_struct *);

File lib/sbitmap.c:
486:	int __sbitmap_queue_get(struct sbitmap_queue *);
492:	unsigned long __sbitmap_queue_get_batch(struct sbitmap_queue *, int, unsigned int *);
739:	void sbitmap_add_wait_queue(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
292:	bool sbitmap_any_bit_set(const struct sbitmap *);
353:	void sbitmap_bitmap_show(struct sbitmap *, struct seq_file *);
751:	void sbitmap_del_wait_queue(struct sbq_wait *);
773:	void sbitmap_finish_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
221:	int sbitmap_get(struct sbitmap *);
275:	int sbitmap_get_shallow(struct sbitmap *, unsigned long);
83:	int sbitmap_init_node(struct sbitmap *, unsigned int, int, gfp_t, int, bool, bool);
761:	void sbitmap_prepare_to_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *, int);
656:	void sbitmap_queue_clear(struct sbitmap_queue *, unsigned int, unsigned int);
622:	void sbitmap_queue_clear_batch(struct sbitmap_queue *, int, int *, int);
546:	int sbitmap_queue_get_shallow(struct sbitmap_queue *, unsigned int);
422:	int sbitmap_queue_init_node(struct sbitmap_queue *, unsigned int, int, bool, gfp_t, int);
555:	void sbitmap_queue_min_shallow_depth(struct sbitmap_queue *, unsigned int);
463:	void sbitmap_queue_recalculate_wake_batch(struct sbitmap_queue *, unsigned int);
479:	void sbitmap_queue_resize(struct sbitmap_queue *, unsigned int);
705:	void sbitmap_queue_show(struct sbitmap_queue *, struct seq_file *);
684:	void sbitmap_queue_wake_all(struct sbitmap_queue *);
595:	void sbitmap_queue_wake_up(struct sbitmap_queue *, int);
123:	void sbitmap_resize(struct sbitmap *, unsigned int);
331:	void sbitmap_show(struct sbitmap *, struct seq_file *);
325:	unsigned int sbitmap_weight(const struct sbitmap *);

File lib/scatterlist.c:
282:	int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int, struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
193:	void __sg_free_table(struct sg_table *, unsigned int, unsigned int, sg_free_fn *, unsigned int);
763:	bool __sg_page_iter_dma_next(struct sg_dma_page_iter *);
739:	bool __sg_page_iter_next(struct sg_page_iter *);
722:	void __sg_page_iter_start(struct sg_page_iter *, struct scatterlist *, unsigned int, unsigned long);
451:	int sg_alloc_append_table_from_pages(struct sg_append_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, unsigned int, gfp_t);
371:	int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
575:	int sg_alloc_table_from_pages_segment(struct sg_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, gfp_t);
958:	size_t sg_copy_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t, bool);
1004:	size_t sg_copy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t);
1021:	size_t sg_copy_to_buffer(struct scatterlist *, unsigned int, void *, size_t);
241:	void sg_free_append_table(struct sg_append_table *);
254:	void sg_free_table(struct sg_table *);
138:	void sg_init_one(struct scatterlist *, const void *, unsigned int);
124:	void sg_init_table(struct scatterlist *, unsigned int);
101:	struct scatterlist *sg_last(struct scatterlist *, unsigned int);
883:	bool sg_miter_next(struct sg_mapping_iter *);
847:	bool sg_miter_skip(struct sg_mapping_iter *, off_t);
796:	void sg_miter_start(struct sg_mapping_iter *, struct scatterlist *, unsigned int, unsigned int);
919:	void sg_miter_stop(struct sg_mapping_iter *);
45:	int sg_nents(struct scatterlist *);
68:	int sg_nents_for_len(struct scatterlist *, u64);
23:	struct scatterlist *sg_next(struct scatterlist *);
1039:	size_t sg_pcopy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t, off_t);
1057:	size_t sg_pcopy_to_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t);
1073:	size_t sg_zero_buffer(struct scatterlist *, unsigned int, size_t, off_t);
662:	struct scatterlist *sgl_alloc(unsigned long long, gfp_t, unsigned int *);
608:	struct scatterlist *sgl_alloc_order(unsigned long long, unsigned int, bool, gfp_t, unsigned int *);
714:	void sgl_free(struct scatterlist *);
682:	void sgl_free_n_order(struct scatterlist *, int, int);
704:	void sgl_free_order(struct scatterlist *, int);
807:	static bool sg_miter_get_next_page(struct sg_mapping_iter *);

File lib/seq_buf.c:
114:	int seq_buf_bprintf(struct seq_buf *, const char *, const u32 *);
361:	int seq_buf_hex_dump(struct seq_buf *, const char *, int, int, int, const void *, size_t, bool);
270:	int seq_buf_path(struct seq_buf *, const struct path *, const char *);
40:	int seq_buf_print_seq(struct seq_file *, struct seq_buf *);
83:	int seq_buf_printf(struct seq_buf *, const char *, ...);
170:	int seq_buf_putc(struct seq_buf *, unsigned char);
194:	int seq_buf_putmem(struct seq_buf *, const void *, unsigned int);
222:	int seq_buf_putmem_hex(struct seq_buf *, const void *, unsigned int);
142:	int seq_buf_puts(struct seq_buf *, const char *);
311:	int seq_buf_to_user(struct seq_buf *, char *, int);
57:	int seq_buf_vprintf(struct seq_buf *, const char *, va_list);

File lib/sg_pool.c:
112:	int sg_alloc_table_chained(struct sg_table *, int, struct scatterlist *, unsigned int);
84:	void sg_free_table_chained(struct sg_table *, unsigned int);
62:	static struct scatterlist *sg_pool_alloc(unsigned int, gfp_t);
54:	static void sg_pool_free(struct scatterlist *, unsigned int);
142:	static int sg_pool_init(void);

File lib/show_mem.c:
11:	void __show_mem(unsigned int, nodemask_t *, int);

File lib/siphash.c:
279:	u32 __hsiphash_unaligned(const void *, size_t, const hsiphash_key_t *);
79:	u64 __siphash_unaligned(const void *, size_t, const siphash_key_t *);
316:	u32 hsiphash_1u32(const u32, const hsiphash_key_t *);
330:	u32 hsiphash_2u32(const u32, const u32, const hsiphash_key_t *);
348:	u32 hsiphash_3u32(const u32, const u32, const u32, const hsiphash_key_t *);
369:	u32 hsiphash_4u32(const u32, const u32, const u32, const u32, const hsiphash_key_t *);
207:	u64 siphash_1u32(const u32, const siphash_key_t *);
116:	u64 siphash_1u64(const u64, const siphash_key_t *);
133:	u64 siphash_2u64(const u64, const u64, const siphash_key_t *);
215:	u64 siphash_3u32(const u32, const u32, const u32, const siphash_key_t *);
155:	u64 siphash_3u64(const u64, const u64, const u64, const siphash_key_t *);
183:	u64 siphash_4u64(const u64, const u64, const u64, const u64, const siphash_key_t *);

File lib/sort.c:
281:	void sort(void *, size_t, size_t, cmp_func_t, swap_func_t);
210:	void sort_r(void *, size_t, size_t, cmp_r_func_t, swap_r_func_t, const void *);

File lib/stackdepot.c:
419:	depot_stack_handle_t __stack_depot_save(unsigned long *, unsigned int, unsigned int, gfp_t, bool);
194:	int stack_depot_early_init(void);
364:	unsigned int stack_depot_fetch(depot_stack_handle_t, unsigned long **);
82:	unsigned int stack_depot_get_extra_bits(depot_stack_handle_t);
231:	int stack_depot_init(void);
344:	void stack_depot_print(depot_stack_handle_t);
529:	depot_stack_handle_t stack_depot_save(unsigned long *, unsigned int, gfp_t);
325:	int stack_depot_snprint(depot_stack_handle_t, char *, size_t, int);
186:	void stack_depot_want_early_init(void);
173:	static int is_stack_depot_disabled(char *);

File lib/string.c:
713:	int bcmp(const void *, const void *, size_t);
838:	void *memchr_inv(const void *, int, size_t);
730:	void *memscan(void *, int, size_t);
556:	void *memset16(uint16_t *, uint16_t, size_t);
578:	void *memset32(uint32_t *, uint32_t, size_t);
600:	void *memset64(uint64_t *, uint64_t, size_t);
207:	char *stpcpy(char * restrict, const char * restrict);
65:	int strcasecmp(const char *, const char *);
216:	char *strcat(char *, const char *);
346:	char *strchrnul(const char *, int);
79:	char *strcpy(char *, const char *);
462:	__kernel_size_t strcspn(const char *, const char *);
250:	size_t strlcat(char *, const char *, size_t);
107:	size_t strlcpy(char *, const char *, size_t);
39:	int strncasecmp(const char *, const char *, size_t);
230:	char *strncat(char *, const char *, size_t);
400:	char *strnchr(const char *, size_t, int);
365:	char *strnchrnul(const char *, size_t, int);
91:	char *strncpy(char *, const char *, size_t);
777:	char *strnstr(const char *, const char *, size_t);
481:	char *strpbrk(const char *, const char *);
122:	ssize_t strscpy(char *, const char *, size_t);
508:	char *strsep(char **, const char *);
443:	__kernel_size_t strspn(const char *, const char *);
751:	char *strstr(const char *, const char *);

File lib/string_helpers.c:
963:	int __sysfs_match_string(const char * const *, size_t, const char *);
790:	char **devm_kasprintf_strarray(struct device *, const char *, size_t);
734:	char **kasprintf_strarray(gfp_t, const char *, size_t);
765:	void kfree_strarray(char **, size_t);
638:	char *kstrdup_quotable(const char *, gfp_t);
666:	char *kstrdup_quotable_cmdline(struct task_struct *, gfp_t);
699:	char *kstrdup_quotable_file(struct file *, gfp_t);
929:	int match_string(const char * const *, size_t, const char *);
1005:	void memcpy_and_pad(void *, size_t, const void *, size_t, int);
147:	int parse_int_array_user(const char *, size_t, int **);
851:	char *skip_spaces(const char *);
867:	char *strim(char *);
564:	int string_escape_mem(const char *, size_t, char *, size_t, unsigned int, const char *);
35:	void string_get_size(u64, u64, const enum string_size_units, char *, int);
313:	int string_unescape(char *, char *, size_t, unsigned int);
988:	char *strreplace(char *, char, char);
831:	ssize_t strscpy_pad(char *, const char *, size_t);
895:	bool sysfs_streq(const char *, const char *);
783:	static void devm_kfree_strarray(struct device *, void *);

File lib/strncpy_from_user.c:
113:	long strncpy_from_user(char *, const char *, long);

File lib/strnlen_user.c:
92:	long strnlen_user(const char *, long);

File lib/syscall.c:
69:	int task_current_syscall(struct task_struct *, struct syscall_info *);
8:	static int collect_syscall(struct task_struct *, struct syscall_info *);

File lib/timerqueue.c:
35:	bool timerqueue_add(struct timerqueue_head *, struct timerqueue_node *);
53:	bool timerqueue_del(struct timerqueue_head *, struct timerqueue_node *);
73:	struct timerqueue_node *timerqueue_iterate_next(struct timerqueue_node *);

File lib/usercopy.c:
55:	int check_zeroed_user(const void *, size_t);

File lib/uuid.c:
43:	void generate_random_guid(unsigned char *);
33:	void generate_random_uuid(unsigned char *);
60:	void guid_gen(guid_t *);
123:	int guid_parse(const char *, guid_t *);
68:	void uuid_gen(uuid_t *);
88:	bool uuid_is_valid(const char *);
129:	int uuid_parse(const char *, uuid_t *);

File lib/vsprintf.c:
3389:	int bprintf(u32 *, size_t, const char *, ...);
3190:	int bstr_printf(char *, size_t, const char *, const u32 *);
2225:	int no_hash_pointers_enable(char *);
377:	int num_to_str(char *, int, unsigned long long, unsigned int);
800:	int ptr_to_hashval(const void *, unsigned long *);
2949:	int scnprintf(char *, size_t, const char *, ...);
123:	long simple_strtol(const char *, char **, unsigned int);
155:	long long simple_strtoll(const char *, char **, unsigned int);
109:	unsigned long simple_strtoul(const char *, char **, unsigned int);
95:	unsigned long long simple_strtoull(const char *, char **, unsigned int);
2925:	int snprintf(char *, size_t, const char *, ...);
2994:	int sprintf(char *, const char *, ...);
3689:	int sscanf(const char *, const char *, ...);
3031:	int vbin_printf(u32 *, size_t, const char *, va_list);
2895:	int vscnprintf(char *, size_t, const char *, va_list);
2726:	int vsnprintf(char *, size_t, const char *, va_list);
2976:	int vsprintf(char *, const char *, va_list);
3410:	int vsscanf(const char *, const char *, va_list);
1793:	static char *address_val(char *, char *, const void *, struct printf_spec, const char *);
957:	static char *bdev_name(char *, char *, struct block_device *, struct printf_spec, const char *);
1237:	static char *bitmap_list_string(char *, char *, const unsigned long *, struct printf_spec, const char *);
1193:	static char *bitmap_string(char *, char *, const unsigned long *, struct printf_spec, const char *);
1940:	static char *clock(char *, char *, struct clk *, struct printf_spec, const char *);
1818:	static char *date_str(char *, char *, const struct rtc_time *, bool);
746:	static int debug_boot_weak_hash_enable(char *);
835:	static char *default_pointer(char *, char *, const void *, struct printf_spec);
898:	static char *dentry_name(char *, char *, const struct dentry *, struct printf_spec, const char *);
2106:	static char *device_node_string(char *, char *, struct device_node *, struct printf_spec, const char *);
655:	static char *err_ptr(char *, char *, void *, struct printf_spec);
1614:	static char *escaped_string(char *, char *, u8 *, struct printf_spec, const char *);
947:	static char *file_dentry_name(char *, char *, const struct file *, struct printf_spec, const char *);
757:	static int fill_ptr_key(struct notifier_block *, unsigned long, void *);
2056:	static char *flags_string(char *, char *, void *, struct printf_spec, const char *);
2503:	static int format_decode(const char *, struct printf_spec *);
1755:	static char *fourcc_string(char *, char *, const u32 *, struct printf_spec, const char *);
2084:	static char *fwnode_full_name_string(struct fwnode_handle *, char *, char *);
2196:	static char *fwnode_string(char *, char *, struct fwnode_handle *, struct printf_spec, const char *);
1142:	static char *hex_string(char *, char *, u8 *, struct printf_spec, const char *);
1471:	static char *ip4_addr_string(char *, char *, const u8 *, struct printf_spec, const char *);
1544:	static char *ip4_addr_string_sa(char *, char *, const struct sockaddr_in *, struct printf_spec, const char *);
1308:	static char *ip4_string(char *, const u8 *, const char *);
1457:	static char *ip6_addr_string(char *, char *, const u8 *, struct printf_spec, const char *);
1482:	static char *ip6_addr_string_sa(char *, char *, const struct sockaddr_in6 *, struct printf_spec, const char *);
1358:	static char *ip6_compressed_string(char *, const char *);
1441:	static char *ip6_string(char *, const char *, const char *);
1579:	static char *ip_addr_string(char *, char *, const void *, struct printf_spec, const char *);
1267:	static char *mac_address_string(char *, char *, u8 *, struct printf_spec, const char *);
1733:	static char *netdev_bits(char *, char *, const void *, struct printf_spec, const char *);
455:	static char *number(char *, char *, unsigned long long, struct printf_spec);
2385:	static char *pointer(const char *, char *, char *, void *, struct printf_spec);
729:	static char *pointer_string(char *, char *, const void *, struct printf_spec);
288:	static char *put_dec(char *, unsigned long long);
262:	static char *put_dec_full8(char *, unsigned int);
220:	static char *put_dec_trunc8(char *, unsigned int);
1041:	static char *resource_string(char *, char *, struct resource *, struct printf_spec, const char *);
851:	static char *restricted_pointer(char *, char *, const void *, struct printf_spec);
1853:	static char *rtc_str(char *, char *, const struct rtc_time *, struct printf_spec, const char *);
62:	static unsigned long long simple_strntoull(const char *, size_t, char **, unsigned int);
162:	static int skip_atoi(const char **);
576:	static char *special_hex_number(char *, char *, unsigned long long, int);
720:	static char *string(char *, char *, const char *, struct printf_spec);
637:	static char *string_nocheck(char *, char *, const char *, struct printf_spec);
980:	static char *symbol_string(char *, char *, void *, struct printf_spec, const char *);
1903:	static char *time64_str(char *, char *, const time64_t, struct printf_spec, const char *);
1926:	static char *time_and_date(char *, char *, void *, struct printf_spec, const char *);
1837:	static char *time_str(char *, char *, const struct rtc_time *, bool);
1688:	static char *uuid_string(char *, char *, const u8 *, struct printf_spec, const char *);
767:	static int vsprintf_init_hashval(void);
616:	static char *widen_string(char *, int, char *, struct printf_spec);

File lib/win_minmax.c:
67:	u32 minmax_running_max(struct minmax *, u32, u32, u32);
85:	u32 minmax_running_min(struct minmax *, u32, u32, u32);

File lib/xarray.c:
1812:	int __xa_alloc(struct xarray *, u32 *, void *, struct xa_limit, gfp_t);
1861:	int __xa_alloc_cyclic(struct xarray *, u32 *, void *, struct xa_limit, u32 *, gfp_t);
1918:	void __xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
1605:	void *__xa_cmpxchg(struct xarray *, unsigned long, void *, void *, gfp_t);
1494:	void *__xa_erase(struct xarray *, unsigned long);
1643:	int __xa_insert(struct xarray *, unsigned long, void *, gfp_t);
1900:	void __xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1540:	void *__xa_store(struct xarray *, unsigned long, void *, gfp_t);
1191:	void *__xas_next(struct xa_state *);
1152:	void *__xas_prev(struct xa_state *);
1988:	void xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
2181:	void xa_delete_node(struct xa_node *, xa_update_node_t);
2207:	void xa_destroy(struct xarray *);
1513:	void *xa_erase(struct xarray *, unsigned long);
2160:	unsigned int xa_extract(struct xarray *, void **, unsigned long, unsigned long, unsigned int, xa_mark_t);
2013:	void *xa_find(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
2063:	void *xa_find_after(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
1940:	bool xa_get_mark(struct xarray *, unsigned long, xa_mark_t);
1761:	int xa_get_order(struct xarray *, unsigned long);
1456:	void *xa_load(struct xarray *, unsigned long);
1970:	void xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1577:	void *xa_store(struct xarray *, unsigned long, void *, gfp_t);
1718:	void *xa_store_range(struct xarray *, unsigned long, unsigned long, void *, gfp_t);
907:	void xas_clear_mark(const struct xa_state *, xa_mark_t);
706:	void xas_create_range(struct xa_state *);
270:	void xas_destroy(struct xa_state *);
1239:	void *xas_find(struct xa_state *, unsigned long);
1396:	void *xas_find_conflict(struct xa_state *);
1308:	void *xas_find_marked(struct xa_state *, unsigned long, xa_mark_t);
859:	bool xas_get_mark(const struct xa_state *, xa_mark_t);
941:	void xas_init_marks(const struct xa_state *);
233:	void *xas_load(struct xa_state *);
300:	bool xas_nomem(struct xa_state *, gfp_t);
1122:	void xas_pause(struct xa_state *);
878:	void xas_set_mark(const struct xa_state *, xa_mark_t);
1056:	void xas_split(struct xa_state *, void *, unsigned int);
1005:	void xas_split_alloc(struct xa_state *, void *, unsigned int, gfp_t);
777:	void *xas_store(struct xa_state *, void *);
327:	static bool __xas_nomem(struct xa_state *, gfp_t);
641:	static void *xas_create(struct xa_state *, bool);

File lib/xxhash.c:
102:	uint32_t xxh32(const void *, const size_t, const uint32_t);
79:	void xxh32_copy_state(struct xxh32_state *, const struct xxh32_state *);
339:	uint32_t xxh32_digest(const struct xxh32_state *);
242:	void xxh32_reset(struct xxh32_state *, const uint32_t);
270:	int xxh32_update(struct xxh32_state *, const void *, const size_t);
172:	uint64_t xxh64(const void *, const size_t, const uint64_t);
85:	void xxh64_copy_state(struct xxh64_state *, const struct xxh64_state *);
444:	uint64_t xxh64_digest(const struct xxh64_state *);
256:	void xxh64_reset(struct xxh64_state *, const uint64_t);
377:	int xxh64_update(struct xxh64_state *, const void *, const size_t);

File lib/xz/xz_dec_bcj.c:
527:	struct xz_dec_bcj *xz_dec_bcj_create(bool);
536:	enum xz_ret xz_dec_bcj_reset(struct xz_dec_bcj *, uint8_t);
417:	enum xz_ret xz_dec_bcj_run(struct xz_dec_bcj *, struct xz_dec_lzma2 *, struct xz_buf *);
345:	static void bcj_apply(struct xz_dec_bcj *, uint8_t *, size_t *, size_t);

File lib/xz/xz_dec_lzma2.c:
1141:	struct xz_dec_lzma2 *xz_dec_lzma2_create(enum xz_mode, uint32_t);
1201:	void xz_dec_lzma2_end(struct xz_dec_lzma2 *);
1165:	enum xz_ret xz_dec_lzma2_reset(struct xz_dec_lzma2 *, uint8_t);
964:	enum xz_ret xz_dec_lzma2_run(struct xz_dec_lzma2 *, struct xz_buf *);
651:	static void lzma_len(struct xz_dec_lzma2 *, struct lzma_len_dec *, uint32_t);
754:	static bool lzma_main(struct xz_dec_lzma2 *);

File lib/xz/xz_dec_stream.c:
828:	void xz_dec_end(struct xz_dec *);
786:	struct xz_dec *xz_dec_init(enum xz_mode, uint32_t);
816:	void xz_dec_reset(struct xz_dec *);
750:	enum xz_ret xz_dec_run(struct xz_dec *, struct xz_buf *);
346:	static enum xz_ret crc32_validate(struct xz_dec *, struct xz_buf *);
296:	static enum xz_ret dec_index(struct xz_dec *, struct xz_buf *);
422:	static enum xz_ret dec_stream_footer(struct xz_dec *);
157:	static bool fill_temp(struct xz_dec *, struct xz_buf *);
281:	static void index_update(struct xz_dec *, const struct xz_buf *);

File lib/zlib_deflate/deflate.c:
329:	int zlib_deflate(z_streamp, int);
468:	int zlib_deflateEnd(z_streamp);
188:	int zlib_deflateInit2(z_streamp, int, int, int, int, int);
282:	int zlib_deflateReset(z_streamp);
1143:	int zlib_deflate_dfltcc_enabled(void);
1127:	int zlib_deflate_workspacesize(int, int);
916:	static block_state deflate_fast(deflate_state *, int);
1010:	static block_state deflate_slow(deflate_state *, int);
857:	static block_state deflate_stored(deflate_state *, int);
737:	static void fill_window(deflate_state *);
558:	static uInt longest_match(deflate_state *, IPos);

File lib/zlib_deflate/deftree.c:
775:	void zlib_tr_align(deflate_state *);
802:	ulg zlib_tr_flush_block(deflate_state *, char *, ulg, int);
241:	void zlib_tr_init(deflate_state *);
738:	void zlib_tr_stored_block(deflate_state *, char *, ulg, int);
754:	void zlib_tr_stored_type_only(deflate_state *);
915:	int zlib_tr_tally(deflate_state *, unsigned int, unsigned int);
484:	static void build_tree(deflate_state *, tree_desc *);
964:	static void compress_block(deflate_state *, ct_data *, ct_data *);
441:	static void gen_codes(ct_data *, int, ush *);
272:	static void init_block(deflate_state *);
618:	static void send_tree(deflate_state *, ct_data *, int);

File lib/zlib_deflate/defutil.h:
419:	static void flush_pending(z_streamp);

File lib/zlib_inflate/inffast.c:
67:	void inflate_fast(z_streamp, unsigned int);

File lib/zlib_inflate/inflate.c:
331:	int zlib_inflate(z_streamp, int);
770:	int zlib_inflateEnd(z_streamp);
785:	int zlib_inflateIncomp(z_stream *);
59:	int zlib_inflateInit2(z_streamp, int);
33:	int zlib_inflateReset(z_streamp);
28:	int zlib_inflate_workspacesize(void);

File lib/zlib_inflate/inftrees.c:
23:	int zlib_inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *);

File lib/zlib_inflate/infutil.c:
9:	int zlib_inflate_blob(void *, unsigned int, const void *, unsigned int);

File lib/zstd/common/entropy_common.c:
32:	const char *FSE_getErrorName(size_t);
31:	unsigned int FSE_isError(size_t);
236:	size_t FSE_readNCount(short *, unsigned int *, unsigned int *, const void *, size_t);
223:	size_t FSE_readNCount_bmi2(short *, unsigned int *, unsigned int *, const void *, size_t, int);
27:	unsigned int FSE_versionNumber(void);
35:	const char *HUF_getErrorName(size_t);
34:	unsigned int HUF_isError(size_t);
251:	size_t HUF_readStats(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t);
344:	size_t HUF_readStats_wksp(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t, void *, size_t, int);
207:	static size_t FSE_readNCount_body_default(short *, unsigned int *, unsigned int *, const void *, size_t);

File lib/zstd/common/error_private.c:
15:	const char *ERR_getErrorString(ERR_enum);

File lib/zstd/common/fse_decompress.c:
205:	size_t FSE_buildDTable_raw(FSE_DTable *, unsigned int);
187:	size_t FSE_buildDTable_rle(FSE_DTable *, BYTE);
176:	size_t FSE_buildDTable_wksp(FSE_DTable *, const short *, unsigned int, unsigned int, void *, size_t);
60:	FSE_DTable *FSE_createDTable(unsigned int);
294:	size_t FSE_decompress_usingDTable(void *, size_t, const void *, size_t, const FSE_DTable *);
308:	size_t FSE_decompress_wksp(void *, size_t, const void *, size_t, unsigned int, void *, size_t);
374:	size_t FSE_decompress_wksp_bmi2(void *, size_t, const void *, size_t, unsigned int, void *, size_t, int);
66:	void FSE_freeDTable(FSE_DTable *);
71:	static size_t FSE_buildDTable_internal(FSE_DTable *, const short *, unsigned int, unsigned int, void *, size_t);

File lib/zstd/common/zstd_common.c:
63:	void *ZSTD_customCalloc(size_t, ZSTD_customMem);
75:	void ZSTD_customFree(void *, ZSTD_customMem);
56:	void *ZSTD_customMalloc(size_t, ZSTD_customMem);
45:	ZSTD_ErrorCode ZSTD_getErrorCode(size_t);
41:	const char *ZSTD_getErrorName(size_t);
49:	const char *ZSTD_getErrorString(ZSTD_ErrorCode);
37:	unsigned int ZSTD_isError(size_t);
25:	unsigned int ZSTD_versionNumber(void);
27:	const char *ZSTD_versionString(void);

File lib/zstd/compress/fse_compress.c:
222:	size_t FSE_NCountWriteBound(unsigned int, unsigned int);
537:	size_t FSE_buildCTable_raw(FSE_CTable *, unsigned int);
570:	size_t FSE_buildCTable_rle(FSE_CTable *, BYTE);
67:	size_t FSE_buildCTable_wksp(FSE_CTable *, const short *, unsigned int, unsigned int, void *, size_t);
665:	size_t FSE_compressBound(size_t);
652:	size_t FSE_compress_usingCTable(void *, size_t, const void *, size_t, const FSE_CTable *);
345:	FSE_CTable *FSE_createCTable(unsigned int, unsigned int);
353:	void FSE_freeCTable(FSE_CTable *);
473:	size_t FSE_normalizeCount(short *, unsigned int, const unsigned int *, size_t, unsigned int, unsigned int);
379:	unsigned int FSE_optimalTableLog(unsigned int, size_t, unsigned int);
365:	unsigned int FSE_optimalTableLog_internal(unsigned int, size_t, unsigned int, unsigned int);
328:	size_t FSE_writeNCount(void *, size_t, const short *, unsigned int, unsigned int);
593:	static size_t FSE_compress_usingCTable_generic(void *, size_t, const void *, size_t, const FSE_CTable *, const unsigned int);
233:	static size_t FSE_writeNCount_generic(void *, size_t, const short *, unsigned int, unsigned int, unsigned int);

File lib/zstd/compress/hist.c:
140:	size_t HIST_countFast_wksp(unsigned int *, unsigned int *, const void *, size_t, void *, size_t);
29:	unsigned int HIST_count_simple(unsigned int *, unsigned int *, const void *, size_t);
154:	size_t HIST_count_wksp(unsigned int *, unsigned int *, const void *, size_t, void *, size_t);
24:	unsigned int HIST_isError(size_t);
66:	static size_t HIST_count_parallel_wksp(unsigned int *, unsigned int *, const void *, size_t, HIST_checkInput_e, U32 * const);

File lib/zstd/compress/huf_compress.c:
677:	size_t HUF_buildCTable_wksp(HUF_CElt *, const unsigned int *, U32, U32, void *, size_t);
1293:	size_t HUF_compress1X_repeat(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t, HUF_CElt *, HUF_repeat *, int, int, unsigned int);
1069:	size_t HUF_compress1X_usingCTable(void *, size_t, const void *, size_t, const HUF_CElt *);
1074:	size_t HUF_compress1X_usingCTable_bmi2(void *, size_t, const void *, size_t, const HUF_CElt *, int);
1282:	size_t HUF_compress1X_wksp(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t);
1324:	size_t HUF_compress4X_repeat(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t, HUF_CElt *, HUF_repeat *, int, int, unsigned int);
1129:	size_t HUF_compress4X_usingCTable(void *, size_t, const void *, size_t, const HUF_CElt *);
1134:	size_t HUF_compress4X_usingCTable_bmi2(void *, size_t, const void *, size_t, const HUF_CElt *, int);
1309:	size_t HUF_compress4X_wksp(void *, size_t, const void *, size_t, unsigned int, unsigned int, void *, size_t);
728:	size_t HUF_compressBound(size_t);
707:	size_t HUF_estimateCompressedSize(const HUF_CElt *, const unsigned int *, unsigned int);
270:	U32 HUF_getNbBitsFromCTable(const HUF_CElt *, U32);
44:	unsigned int HUF_optimalTableLog(unsigned int, size_t, unsigned int);
218:	size_t HUF_readCTable(HUF_CElt *, unsigned int *, const void *, size_t, unsigned int *);
718:	int HUF_validateCTable(const HUF_CElt *, const unsigned int *, unsigned int);
210:	size_t HUF_writeCTable(void *, size_t, const HUF_CElt *, unsigned int, unsigned int);
169:	size_t HUF_writeCTable_wksp(void *, size_t, const HUF_CElt *, unsigned int, unsigned int, void *, size_t);
1059:	static size_t HUF_compress1X_usingCTable_internal(void *, size_t, const void *, size_t, const HUF_CElt *, const int);
1080:	static size_t HUF_compress4X_usingCTable_internal(void *, size_t, const void *, size_t, const HUF_CElt *, int);
1141:	static size_t HUF_compressCTable_internal(BYTE * const, BYTE *, BYTE * const, const void *, size_t, HUF_nbStreams_e, const HUF_CElt *, const int);
1175:	static size_t HUF_compress_internal(void *, size_t, const void *, size_t, unsigned int, unsigned int, HUF_nbStreams_e, void *, size_t, HUF_CElt *, HUF_repeat *, int, const int, unsigned int);
518:	static void HUF_simpleQuickSort(nodeElt *, int, int);

File lib/zstd/compress/zstd_compress.c:
878:	size_t ZSTD_CCtxParams_getParameter(const ZSTD_CCtx_params *, ZSTD_cParameter, int *);
321:	size_t ZSTD_CCtxParams_init(ZSTD_CCtx_params *, int);
352:	size_t ZSTD_CCtxParams_init_advanced(ZSTD_CCtx_params *, ZSTD_parameters);
316:	size_t ZSTD_CCtxParams_reset(ZSTD_CCtx_params *);
678:	size_t ZSTD_CCtxParams_setParameter(ZSTD_CCtx_params *, ZSTD_cParameter, int);
873:	size_t ZSTD_CCtx_getParameter(const ZSTD_CCtx *, ZSTD_cParameter, int *);
1096:	size_t ZSTD_CCtx_loadDictionary(ZSTD_CCtx *, const void *, size_t);
1062:	size_t ZSTD_CCtx_loadDictionary_advanced(ZSTD_CCtx *, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
1089:	size_t ZSTD_CCtx_loadDictionary_byReference(ZSTD_CCtx *, const void *, size_t);
1103:	size_t ZSTD_CCtx_refCDict(ZSTD_CCtx *, const ZSTD_CDict *);
1121:	size_t ZSTD_CCtx_refPrefix(ZSTD_CCtx *, const void *, size_t);
1126:	size_t ZSTD_CCtx_refPrefix_advanced(ZSTD_CCtx *, const void *, size_t, ZSTD_dictContentType_e);
1113:	size_t ZSTD_CCtx_refThreadPool(ZSTD_CCtx *, ZSTD_threadPool *);
1142:	size_t ZSTD_CCtx_reset(ZSTD_CCtx *, ZSTD_ResetDirective);
621:	size_t ZSTD_CCtx_setParameter(ZSTD_CCtx *, ZSTD_cParameter, int);
995:	size_t ZSTD_CCtx_setParametersUsingCCtxParams(ZSTD_CCtx *, const ZSTD_CCtx_params *);
1009:	size_t ZSTD_CCtx_setPledgedSrcSize(ZSTD_CCtx *, unsigned long long);
4534:	void ZSTD_CCtx_trace(ZSTD_CCtx *, size_t);
5062:	size_t ZSTD_CStreamInSize(void);
5064:	size_t ZSTD_CStreamOutSize(void);
1307:	ZSTD_compressionParameters ZSTD_adjustCParams(ZSTD_compressionParameters, unsigned long long, size_t);
3120:	size_t ZSTD_buildBlockEntropyStats(seqStore_t *, const ZSTD_entropyCTables_t *, ZSTD_entropyCTables_t *, const ZSTD_CCtx_params *, ZSTD_entropyCTablesMetadata_t *, void *, size_t);
376:	ZSTD_bounds ZSTD_cParam_getBounds(ZSTD_cParameter);
1163:	size_t ZSTD_checkCParams(ZSTD_compressionParameters);
4622:	size_t ZSTD_compress(void *, size_t, const void *, size_t, int);
5522:	size_t ZSTD_compress2(ZSTD_CCtx *, void *, size_t, const void *, size_t);
4486:	size_t ZSTD_compressBegin(ZSTD_CCtx *, int);
4462:	size_t ZSTD_compressBegin_advanced(ZSTD_CCtx *, const void *, size_t, ZSTD_parameters, unsigned long long);
4442:	size_t ZSTD_compressBegin_advanced_internal(ZSTD_CCtx *, const void *, size_t, ZSTD_dictContentType_e, ZSTD_dictTableLoadMethod_e, const ZSTD_CDict *, const ZSTD_CCtx_params *, unsigned long long);
4988:	size_t ZSTD_compressBegin_usingCDict(ZSTD_CCtx *, const ZSTD_CDict *);
4979:	size_t ZSTD_compressBegin_usingCDict_advanced(ZSTD_CCtx * const, const ZSTD_CDict * const, const ZSTD_frameParameters, const unsigned long long);
4474:	size_t ZSTD_compressBegin_usingDict(ZSTD_CCtx *, const void *, size_t, int);
4097:	size_t ZSTD_compressBlock(ZSTD_CCtx *, void *, size_t, const void *, size_t);
64:	size_t ZSTD_compressBound(size_t);
4612:	size_t ZSTD_compressCCtx(ZSTD_CCtx *, void *, size_t, const void *, size_t, int);
4081:	size_t ZSTD_compressContinue(ZSTD_CCtx *, void *, size_t, const void *, size_t);
4540:	size_t ZSTD_compressEnd(ZSTD_CCtx *, void *, size_t, const void *, size_t);
5914:	size_t ZSTD_compressSequences(ZSTD_CCtx * const, void *, size_t, const ZSTD_Sequence *, size_t, const void *, size_t);
5382:	size_t ZSTD_compressStream(ZSTD_CStream *, ZSTD_outBuffer *, ZSTD_inBuffer *);
5480:	size_t ZSTD_compressStream2(ZSTD_CCtx *, ZSTD_outBuffer *, ZSTD_inBuffer *, ZSTD_EndDirective);
5507:	size_t ZSTD_compressStream2_simpleArgs(ZSTD_CCtx *, void *, size_t, size_t *, const void *, size_t, size_t *, ZSTD_EndDirective);
4566:	size_t ZSTD_compress_advanced(ZSTD_CCtx *, void *, size_t, const void *, size_t, const void *, size_t, ZSTD_parameters);
4583:	size_t ZSTD_compress_advanced_internal(ZSTD_CCtx *, void *, size_t, const void *, size_t, const void *, size_t, const ZSTD_CCtx_params *);
5022:	size_t ZSTD_compress_usingCDict(ZSTD_CCtx *, void *, size_t, const void *, size_t, const ZSTD_CDict *);
5009:	size_t ZSTD_compress_usingCDict_advanced(ZSTD_CCtx *, void *, size_t, const void *, size_t, const ZSTD_CDict *, ZSTD_frameParameters);
4597:	size_t ZSTD_compress_usingDict(ZSTD_CCtx *, void *, size_t, const void *, size_t, const void *, size_t, int);
2207:	size_t ZSTD_copyCCtx(ZSTD_CCtx *, const ZSTD_CCtx *, unsigned long long);
89:	ZSTD_CCtx *ZSTD_createCCtx(void);
304:	ZSTD_CCtx_params *ZSTD_createCCtxParams(void);
106:	ZSTD_CCtx *ZSTD_createCCtx_advanced(ZSTD_customMem);
4825:	ZSTD_CDict *ZSTD_createCDict(const void *, size_t, int);
4758:	ZSTD_CDict *ZSTD_createCDict_advanced(const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, ZSTD_compressionParameters, ZSTD_customMem);
4775:	ZSTD_CDict *ZSTD_createCDict_advanced2(const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, const ZSTD_CCtx_params *, ZSTD_customMem);
4836:	ZSTD_CDict *ZSTD_createCDict_byReference(const void *, size_t, int);
5037:	ZSTD_CStream *ZSTD_createCStream(void);
5048:	ZSTD_CStream *ZSTD_createCStream_advanced(ZSTD_customMem);
1199:	U32 ZSTD_cycleLog(U32, ZSTD_strategy);
5988:	int ZSTD_defaultCLevel(void);
5967:	size_t ZSTD_endStream(ZSTD_CStream *, ZSTD_outBuffer *);
1479:	size_t ZSTD_estimateCCtxSize(int);
1434:	size_t ZSTD_estimateCCtxSize_usingCCtxParams(const ZSTD_CCtx_params *);
1449:	size_t ZSTD_estimateCCtxSize_usingCParams(ZSTD_compressionParameters);
4654:	size_t ZSTD_estimateCDictSize(size_t, int);
4639:	size_t ZSTD_estimateCDictSize_advanced(size_t, ZSTD_compressionParameters, ZSTD_dictLoadMethod_e);
1534:	size_t ZSTD_estimateCStreamSize(int);
1491:	size_t ZSTD_estimateCStreamSize_usingCCtxParams(const ZSTD_CCtx_params *);
1511:	size_t ZSTD_estimateCStreamSize_usingCParams(ZSTD_compressionParameters);
5960:	size_t ZSTD_flushStream(ZSTD_CStream *, ZSTD_outBuffer *);
169:	size_t ZSTD_freeCCtx(ZSTD_CCtx *);
309:	size_t ZSTD_freeCCtxParams(ZSTD_CCtx_params *);
4847:	size_t ZSTD_freeCDict(ZSTD_CDict *);
5053:	size_t ZSTD_freeCStream(ZSTD_CStream *);
2868:	size_t ZSTD_generateSequences(ZSTD_CCtx *, ZSTD_Sequence *, size_t, const void *, size_t);
4090:	size_t ZSTD_getBlockSize(const ZSTD_CCtx *);
6100:	ZSTD_compressionParameters ZSTD_getCParams(int, unsigned long long, size_t);
1332:	ZSTD_compressionParameters ZSTD_getCParamsFromCCtxParams(const ZSTD_CCtx_params *, U64, size_t, ZSTD_cParamMode_e);
4919:	ZSTD_compressionParameters ZSTD_getCParamsFromCDict(const ZSTD_CDict *);
4929:	unsigned int ZSTD_getDictID_fromCDict(const ZSTD_CDict *);
1549:	ZSTD_frameProgression ZSTD_getFrameProgression(const ZSTD_CCtx *);
6124:	ZSTD_parameters ZSTD_getParams(int, unsigned long long, size_t);
208:	const seqStore_t *ZSTD_getSeqStore(const ZSTD_CCtx *);
5187:	size_t ZSTD_initCStream(ZSTD_CStream *, int);
5145:	size_t ZSTD_initCStream_advanced(ZSTD_CStream *, const void *, size_t, ZSTD_parameters, unsigned long long);
5096:	size_t ZSTD_initCStream_internal(ZSTD_CStream *, const void *, size_t, const ZSTD_CDict *, const ZSTD_CCtx_params *, unsigned long long);
5172:	size_t ZSTD_initCStream_srcSize(ZSTD_CStream *, int, unsigned long long);
5132:	size_t ZSTD_initCStream_usingCDict(ZSTD_CStream *, const ZSTD_CDict *);
5118:	size_t ZSTD_initCStream_usingCDict_advanced(ZSTD_CStream *, const ZSTD_CDict *, ZSTD_frameParameters, unsigned long long);
5163:	size_t ZSTD_initCStream_usingDict(ZSTD_CStream *, const void *, size_t, int);
118:	ZSTD_CCtx *ZSTD_initStaticCCtx(void *, size_t);
4873:	const ZSTD_CDict *ZSTD_initStaticCDict(void *, size_t, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, ZSTD_compressionParameters);
5043:	ZSTD_CStream *ZSTD_initStaticCStream(void *, size_t);
1923:	void ZSTD_invalidateRepCodes(ZSTD_CCtx *);
4223:	size_t ZSTD_loadCEntropy(ZSTD_compressedBlockState_t *, void *, const void * const, size_t);
5986:	int ZSTD_maxCLevel(void);
2888:	size_t ZSTD_mergeBlockDelimiters(ZSTD_Sequence *, size_t);
5987:	int ZSTD_minCLevel(void);
4004:	size_t ZSTD_referenceExternalSequences(ZSTD_CCtx *, rawSeq *, size_t);
5079:	size_t ZSTD_resetCStream(ZSTD_CStream *, unsigned long long);
2714:	void ZSTD_resetSeqStore(seqStore_t *);
1588:	void ZSTD_reset_compressedBlockState(ZSTD_compressedBlockState_t *);
2633:	ZSTD_blockCompressor ZSTD_selectBlockCompressor(ZSTD_strategy, ZSTD_paramSwitch_e, ZSTD_dictMode_e);
2297:	void ZSTD_seqToCodes(const seqStore_t *);
192:	size_t ZSTD_sizeof_CCtx(const ZSTD_CCtx *);
4660:	size_t ZSTD_sizeof_CDict(const ZSTD_CDict *);
202:	size_t ZSTD_sizeof_CStream(const ZSTD_CStream *);
1568:	size_t ZSTD_toFlushNow(ZSTD_CCtx *);
3994:	size_t ZSTD_writeLastEmptyBlock(void *, size_t);
3975:	size_t ZSTD_writeSkippableFrame(void *, size_t, const void *, size_t, unsigned int);
5424:	static size_t ZSTD_CCtx_init_compressStream2(ZSTD_CCtx *, ZSTD_EndDirective, size_t);
3259:	static size_t ZSTD_buildEntropyStatisticsAndEstimateSubBlockSize(seqStore_t *, ZSTD_CCtx *);
2723:	static size_t ZSTD_buildSeqStore(ZSTD_CCtx *, const void *, size_t);
2360:	static ZSTD_symbolEncodingTypeStats_t ZSTD_buildSequencesStatistics(seqStore_t *, size_t, const ZSTD_fseCTables_t *, ZSTD_fseCTables_t *, BYTE *, const BYTE * const, ZSTD_strategy, unsigned int *, void *, size_t);
145:	static void ZSTD_clearAllDicts(ZSTD_CCtx *);
4398:	static size_t ZSTD_compressBegin_internal(ZSTD_CCtx *, const void *, size_t, ZSTD_dictContentType_e, ZSTD_dictTableLoadMethod_e, const ZSTD_CDict *, const ZSTD_CCtx_params *, U64, ZSTD_buffered_policy_e);
4938:	static size_t ZSTD_compressBegin_usingCDict_internal(ZSTD_CCtx * const, const ZSTD_CDict * const, const ZSTD_frameParameters, const unsigned long long);
3672:	static size_t ZSTD_compressBlock_internal(ZSTD_CCtx *, void *, size_t, const void *, size_t, U32);
4020:	static size_t ZSTD_compressContinue_internal(ZSTD_CCtx *, void *, size_t, const void *, size_t, U32, U32);
3407:	static size_t ZSTD_compressSeqStore_singleBlock(ZSTD_CCtx *, seqStore_t * const, repcodes_t * const, repcodes_t * const, void *, size_t, const void *, size_t, U32, U32);
4356:	static size_t ZSTD_compress_insertDictionary(ZSTD_compressedBlockState_t *, ZSTD_matchState_t *, ldmState_t *, ZSTD_cwksp *, const ZSTD_CCtx_params *, const void *, size_t, ZSTD_dictContentType_e, ZSTD_dictTableLoadMethod_e, void *);
2804:	static void ZSTD_copyBlockSequences(ZSTD_CCtx *);
5599:	static size_t ZSTD_copySequencesToSeqStoreExplicitBlockDelim(ZSTD_CCtx *, ZSTD_sequencePosition *, const ZSTD_Sequence * const, size_t, const void *, size_t);
5662:	static size_t ZSTD_copySequencesToSeqStoreNoBlockDelim(ZSTD_CCtx *, ZSTD_sequencePosition *, const ZSTD_Sequence * const, size_t, const void *, size_t);
3495:	static void ZSTD_deriveBlockSplitsHelper(seqStoreSplits *, size_t, size_t, ZSTD_CCtx *, const seqStore_t *);
3308:	static void ZSTD_deriveSeqStoreChunk(seqStore_t *, const seqStore_t *, size_t, size_t);
2601:	static size_t ZSTD_entropyCompressSeqStore(seqStore_t *, const ZSTD_entropyCTables_t *, ZSTD_entropyCTables_t *, const ZSTD_CCtx_params *, void *, size_t, size_t, void *, size_t, int);
1389:	static size_t ZSTD_estimateCCtxSize_usingCCtxParams_internal(const ZSTD_compressionParameters *, const ldmParams_t *, const int, const ZSTD_paramSwitch_e, const size_t, const size_t, const U64);
6072:	static ZSTD_compressionParameters ZSTD_getCParams_internal(int, unsigned long long, size_t, ZSTD_cParamMode_e);
4669:	static size_t ZSTD_initCDict_internal(ZSTD_CDict *, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, ZSTD_CCtx_params);
2905:	static int ZSTD_isRLE(const BYTE *, size_t);
4109:	static size_t ZSTD_loadDictionaryContent(ZSTD_matchState_t *, ldmState_t *, ZSTD_cwksp *, const ZSTD_CCtx_params *, const void *, size_t, ZSTD_dictTableLoadMethod_e);
3810:	static void ZSTD_overflowCorrectIfNeeded(ZSTD_matchState_t *, ZSTD_cwksp *, const ZSTD_CCtx_params *, const void *, const void *);
2258:	static void ZSTD_reduceTable(U32 * const, const U32, const U32);
1748:	static size_t ZSTD_resetCCtx_internal(ZSTD_CCtx *, const ZSTD_CCtx_params *, const U64, const size_t, const ZSTD_compResetPolicy_e, const ZSTD_buffered_policy_e);
1642:	static size_t ZSTD_reset_matchState(ZSTD_matchState_t *, ZSTD_cwksp *, const ZSTD_compressionParameters *, const ZSTD_paramSwitch_e, const ZSTD_compResetPolicy_e, const ZSTD_indexResetPolicy_e, const ZSTD_resetTarget_e);
3921:	static size_t ZSTD_writeFrameHeader(void *, size_t, const ZSTD_CCtx_params *, U64, U32);

File lib/zstd/compress/zstd_compress_internal.h:
767:	static size_t ZSTD_count_2segments(const BYTE *, const BYTE *, const BYTE *, const BYTE *, const BYTE *);

File lib/zstd/compress/zstd_compress_literals.c:
70:	size_t ZSTD_compressLiterals(const ZSTD_hufCTables_t *, ZSTD_hufCTables_t *, ZSTD_strategy, int, void *, size_t, const void *, size_t, void *, size_t, const int, unsigned int);
43:	size_t ZSTD_compressRleLiteralsBlock(void *, size_t, const void *, size_t);
16:	size_t ZSTD_noCompressLiterals(void *, size_t, const void *, size_t);

File lib/zstd/compress/zstd_compress_sequences.c:
243:	size_t ZSTD_buildCTable(void *, size_t, FSE_CTable *, U32, symbolEncodingType_e, unsigned int *, U32, const BYTE *, size_t, const S16 *, U32, U32, const FSE_CTable *, size_t, void *, size_t);
139:	size_t ZSTD_crossEntropyCost(const short *, unsigned int, const unsigned int *, const unsigned int);
419:	size_t ZSTD_encodeSequences(void *, size_t, const FSE_CTable *, const BYTE *, const FSE_CTable *, const BYTE *, const FSE_CTable *, const BYTE *, const seqDef *, size_t, int, int);
104:	size_t ZSTD_fseBitCost(const FSE_CTable *, const unsigned int *, const unsigned int);
157:	symbolEncodingType_e ZSTD_selectEncodingType(FSE_repeat *, const unsigned int *, const unsigned int, const size_t, size_t, const unsigned int, const FSE_CTable *, const short *, U32, const ZSTD_defaultPolicy_e, const ZSTD_strategy);

File lib/zstd/compress/zstd_compress_superblock.c:
551:	size_t ZSTD_compressSuperBlock(ZSTD_CCtx *, void *, size_t, const void *, size_t, unsigned int);

File lib/zstd/compress/zstd_double_fast.c:
490:	size_t ZSTD_compressBlock_doubleFast(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
510:	size_t ZSTD_compressBlock_doubleFast_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
679:	size_t ZSTD_compressBlock_doubleFast_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
15:	void ZSTD_fillDoubleHashTable(ZSTD_matchState_t *, const void *, ZSTD_dictTableLoadMethod_e);
530:	static size_t ZSTD_compressBlock_doubleFast_extDict_generic(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t, const U32);

File lib/zstd/compress/zstd_fast.c:
335:	size_t ZSTD_compressBlock_fast(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
527:	size_t ZSTD_compressBlock_fast_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
658:	size_t ZSTD_compressBlock_fast_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
15:	void ZSTD_fillHashTable(ZSTD_matchState_t *, const void * const, ZSTD_dictTableLoadMethod_e);
548:	static size_t ZSTD_compressBlock_fast_extDict_generic(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t, const U32, const U32);

File lib/zstd/compress/zstd_lazy.c:
1720:	size_t ZSTD_compressBlock_btlazy2(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1748:	size_t ZSTD_compressBlock_btlazy2_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2073:	size_t ZSTD_compressBlock_btlazy2_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1741:	size_t ZSTD_compressBlock_greedy(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1791:	size_t ZSTD_compressBlock_greedy_dedicatedDictSearch(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1856:	size_t ZSTD_compressBlock_greedy_dedicatedDictSearch_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1769:	size_t ZSTD_compressBlock_greedy_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1834:	size_t ZSTD_compressBlock_greedy_dictMatchState_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2050:	size_t ZSTD_compressBlock_greedy_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2081:	size_t ZSTD_compressBlock_greedy_extDict_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1813:	size_t ZSTD_compressBlock_greedy_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1734:	size_t ZSTD_compressBlock_lazy(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1727:	size_t ZSTD_compressBlock_lazy2(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1777:	size_t ZSTD_compressBlock_lazy2_dedicatedDictSearch(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1842:	size_t ZSTD_compressBlock_lazy2_dedicatedDictSearch_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1755:	size_t ZSTD_compressBlock_lazy2_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1820:	size_t ZSTD_compressBlock_lazy2_dictMatchState_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2065:	size_t ZSTD_compressBlock_lazy2_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2096:	size_t ZSTD_compressBlock_lazy2_extDict_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1799:	size_t ZSTD_compressBlock_lazy2_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1784:	size_t ZSTD_compressBlock_lazy_dedicatedDictSearch(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1849:	size_t ZSTD_compressBlock_lazy_dedicatedDictSearch_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1762:	size_t ZSTD_compressBlock_lazy_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1827:	size_t ZSTD_compressBlock_lazy_dictMatchState_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2057:	size_t ZSTD_compressBlock_lazy_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
2088:	size_t ZSTD_compressBlock_lazy_extDict_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1806:	size_t ZSTD_compressBlock_lazy_row(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
398:	void ZSTD_dedicatedDictSearch_lazy_loadDictionary(ZSTD_matchState_t *, const BYTE * const);
641:	U32 ZSTD_insertAndFindFirstIndex(ZSTD_matchState_t *, const BYTE *);
968:	void ZSTD_row_update(ZSTD_matchState_t * const, const BYTE *);
1381:	static size_t ZSTD_BtFindBestMatch_dictMatchState_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_dictMatchState_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_dictMatchState_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_extDict_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_extDict_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_extDict_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_noDict_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_noDict_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1381:	static size_t ZSTD_BtFindBestMatch_noDict_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_dedicatedDictSearch_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_dedicatedDictSearch_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_dedicatedDictSearch_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_dictMatchState_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_dictMatchState_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_dictMatchState_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_extDict_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_extDict_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_extDict_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_noDict_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_noDict_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1383:	static size_t ZSTD_HcFindBestMatch_noDict_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_4_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_4_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_4_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_5_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_5_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_5_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_6_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_6_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dedicatedDictSearch_6_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_4_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_4_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_4_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_5_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_5_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_5_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_6_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_6_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_dictMatchState_6_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_4_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_4_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_4_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_5_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_5_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_5_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_6_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_6_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_extDict_6_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_4_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_4_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_4_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_5_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_5_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_5_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_6_4(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_6_5(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);
1379:	static size_t ZSTD_RowFindBestMatch_noDict_6_6(ZSTD_matchState_t *, const BYTE *, const BYTE * const, size_t *);

File lib/zstd/compress/zstd_ldm.c:
135:	void ZSTD_ldm_adjustParameters(ldmParams_t *, const ZSTD_compressionParameters *);
660:	size_t ZSTD_ldm_blockCompress(rawSeqStore_t *, ZSTD_matchState_t *, seqStore_t *, U32 *, ZSTD_paramSwitch_e, const void *, size_t);
267:	void ZSTD_ldm_fillHashTable(ldmState_t *, const BYTE *, const BYTE *, const ldmParams_t *);
505:	size_t ZSTD_ldm_generateSequences(ldmState_t *, rawSeqStore_t *, const ldmParams_t *, const void *, size_t);
165:	size_t ZSTD_ldm_getMaxNbSeq(ldmParams_t, size_t);
155:	size_t ZSTD_ldm_getTableSize(ldmParams_t);
643:	void ZSTD_ldm_skipRawSeqStoreBytes(rawSeqStore_t *, size_t);
583:	void ZSTD_ldm_skipSequences(rawSeqStore_t *, size_t, const U32);
96:	static size_t ZSTD_ldm_gear_feed(ldmRollingHashState_t *, const BYTE *, size_t, size_t *, unsigned int *);

File lib/zstd/compress/zstd_opt.c:
1338:	size_t ZSTD_compressBlock_btopt(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1416:	size_t ZSTD_compressBlock_btopt_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1430:	size_t ZSTD_compressBlock_btopt_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1380:	size_t ZSTD_compressBlock_btultra(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1388:	size_t ZSTD_compressBlock_btultra2(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1423:	size_t ZSTD_compressBlock_btultra_dictMatchState(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
1437:	size_t ZSTD_compressBlock_btultra_extDict(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t);
551:	void ZSTD_updateTree(ZSTD_matchState_t *, const BYTE *, const BYTE *);
841:	static U32 ZSTD_btGetAllMatches_dictMatchState_3(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
841:	static U32 ZSTD_btGetAllMatches_dictMatchState_4(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
841:	static U32 ZSTD_btGetAllMatches_dictMatchState_5(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
841:	static U32 ZSTD_btGetAllMatches_dictMatchState_6(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
840:	static U32 ZSTD_btGetAllMatches_extDict_3(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
840:	static U32 ZSTD_btGetAllMatches_extDict_4(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
840:	static U32 ZSTD_btGetAllMatches_extDict_5(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
840:	static U32 ZSTD_btGetAllMatches_extDict_6(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
839:	static U32 ZSTD_btGetAllMatches_noDict_3(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
839:	static U32 ZSTD_btGetAllMatches_noDict_4(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
839:	static U32 ZSTD_btGetAllMatches_noDict_5(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
839:	static U32 ZSTD_btGetAllMatches_noDict_6(ZSTD_match_t *, ZSTD_matchState_t *, U32 *, const BYTE *, const BYTE * const, const U32 *, const U32, const U32);
1324:	static size_t ZSTD_compressBlock_opt0(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t, const ZSTD_dictMode_e);
1331:	static size_t ZSTD_compressBlock_opt2(ZSTD_matchState_t *, seqStore_t *, U32 *, const void *, size_t, const ZSTD_dictMode_e);
987:	static void ZSTD_optLdm_processMatchCandidate(ZSTD_optLdm_t *, ZSTD_match_t *, U32 *, U32, U32);
904:	static void ZSTD_opt_getNextMatchAndUpdateSeqStore(ZSTD_optLdm_t *, U32, U32);

File lib/zstd/decompress/huf_decompress.c:
759:	size_t HUF_decompress1X1_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1689:	size_t HUF_decompress1X1_DCtx_wksp_bmi2(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t, int);
749:	size_t HUF_decompress1X1_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1465:	size_t HUF_decompress1X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1455:	size_t HUF_decompress1X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1640:	size_t HUF_decompress1X_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1521:	size_t HUF_decompress1X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1671:	size_t HUF_decompress1X_usingDTable_bmi2(void *, size_t, const void *, size_t, const HUF_DTable *, int);
798:	size_t HUF_decompress4X1_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
774:	size_t HUF_decompress4X1_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1506:	size_t HUF_decompress4X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1481:	size_t HUF_decompress4X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1614:	size_t HUF_decompress4X_hufOnly_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1719:	size_t HUF_decompress4X_hufOnly_wksp_bmi2(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t, int);
1540:	size_t HUF_decompress4X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1702:	size_t HUF_decompress4X_usingDTable_bmi2(void *, size_t, const void *, size_t, const HUF_DTable *, int);
333:	size_t HUF_readDTableX1_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
338:	size_t HUF_readDTableX1_wksp_bmi2(HUF_DTable *, const void *, size_t, void *, size_t, int);
1041:	size_t HUF_readDTableX2_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
1048:	size_t HUF_readDTableX2_wksp_bmi2(HUF_DTable *, const void *, size_t, void *, size_t, int);
1589:	U32 HUF_selectDecoder(size_t, size_t);
724:	static size_t HUF_decompress1X1_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
1453:	static size_t HUF_decompress1X2_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
726:	static size_t HUF_decompress4X1_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
1431:	static size_t HUF_decompress4X2_usingDTable_internal(void *, size_t, const void *, size_t, const HUF_DTable *, int);
872:	static void HUF_fillDTableX2ForWeight(HUF_DEltX2 *, const sortedSymbol_t *, const sortedSymbol_t *, U32, U32, U16, const int);

File lib/zstd/decompress/zstd_ddict.c:
43:	const void *ZSTD_DDict_dictContent(const ZSTD_DDict *);
49:	size_t ZSTD_DDict_dictSize(const ZSTD_DDict *);
55:	void ZSTD_copyDDictParameters(ZSTD_DCtx *, const ZSTD_DDict *);
167:	ZSTD_DDict *ZSTD_createDDict(const void *, size_t);
142:	ZSTD_DDict *ZSTD_createDDict_advanced(const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, ZSTD_customMem);
177:	ZSTD_DDict *ZSTD_createDDict_byReference(const void *, size_t);
222:	size_t ZSTD_estimateDDictSize(size_t, ZSTD_dictLoadMethod_e);
209:	size_t ZSTD_freeDDict(ZSTD_DDict *);
237:	unsigned int ZSTD_getDictID_fromDDict(const ZSTD_DDict *);
184:	const ZSTD_DDict *ZSTD_initStaticDDict(void *, size_t, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
227:	size_t ZSTD_sizeof_DDict(const ZSTD_DDict *);

File lib/zstd/decompress/zstd_decompress.c:
1676:	size_t ZSTD_DCtx_getParameter(ZSTD_DCtx *, ZSTD_dParameter, int *);
1532:	size_t ZSTD_DCtx_loadDictionary(ZSTD_DCtx *, const void *, size_t);
1511:	size_t ZSTD_DCtx_loadDictionary_advanced(ZSTD_DCtx *, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
1527:	size_t ZSTD_DCtx_loadDictionary_byReference(ZSTD_DCtx *, const void *, size_t);
1588:	size_t ZSTD_DCtx_refDDict(ZSTD_DCtx *, const ZSTD_DDict *);
1544:	size_t ZSTD_DCtx_refPrefix(ZSTD_DCtx *, const void *, size_t);
1537:	size_t ZSTD_DCtx_refPrefix_advanced(ZSTD_DCtx *, const void *, size_t, ZSTD_dictContentType_e);
1732:	size_t ZSTD_DCtx_reset(ZSTD_DCtx *, ZSTD_ResetDirective);
1624:	size_t ZSTD_DCtx_setFormat(ZSTD_DCtx *, ZSTD_format_e);
1612:	size_t ZSTD_DCtx_setMaxWindowSize(ZSTD_DCtx *, size_t);
1699:	size_t ZSTD_DCtx_setParameter(ZSTD_DCtx *, ZSTD_dParameter, int);
1508:	size_t ZSTD_DStreamInSize(void);
1509:	size_t ZSTD_DStreamOutSize(void);
327:	void ZSTD_copyDCtx(ZSTD_DCtx *, const ZSTD_DCtx *);
295:	ZSTD_DCtx *ZSTD_createDCtx(void);
290:	ZSTD_DCtx *ZSTD_createDCtx_advanced(ZSTD_customMem);
1484:	ZSTD_DStream *ZSTD_createDStream(void);
1495:	ZSTD_DStream *ZSTD_createDStream_advanced(ZSTD_customMem);
1629:	ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter);
1754:	size_t ZSTD_decodingBufferSize_min(unsigned long long, unsigned long long);
1021:	size_t ZSTD_decompress(void *, size_t, const void *, size_t);
1376:	size_t ZSTD_decompressBegin(ZSTD_DCtx *);
1413:	size_t ZSTD_decompressBegin_usingDDict(ZSTD_DCtx *, const ZSTD_DDict *);
1400:	size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx *, const void *, size_t);
758:	unsigned long long ZSTD_decompressBound(const void *, size_t);
1093:	size_t ZSTD_decompressContinue(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1015:	size_t ZSTD_decompressDCtx(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1859:	size_t ZSTD_decompressStream(ZSTD_DStream *, ZSTD_outBuffer *, ZSTD_inBuffer *);
2119:	size_t ZSTD_decompressStream_simpleArgs(ZSTD_DCtx *, void *, size_t, size_t *, const void *, size_t, size_t *);
1468:	size_t ZSTD_decompress_usingDDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const ZSTD_DDict *);
989:	size_t ZSTD_decompress_usingDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t);
221:	size_t ZSTD_estimateDCtxSize(void);
1766:	size_t ZSTD_estimateDStreamSize(size_t);
1774:	size_t ZSTD_estimateDStreamSize_fromFrame(const void *, size_t);
586:	unsigned long long ZSTD_findDecompressedSize(const void *, size_t);
746:	size_t ZSTD_findFrameCompressedSize(const void *, size_t);
413:	size_t ZSTD_frameHeaderSize(const void *, size_t);
309:	size_t ZSTD_freeDCtx(ZSTD_DCtx *);
1500:	size_t ZSTD_freeDStream(ZSTD_DStream *);
635:	unsigned long long ZSTD_getDecompressedSize(const void *, size_t);
1436:	unsigned int ZSTD_getDictID_fromDict(const void *, size_t);
1456:	unsigned int ZSTD_getDictID_fromFrame(const void *, size_t);
521:	unsigned long long ZSTD_getFrameContentSize(const void *, size_t);
511:	size_t ZSTD_getFrameHeader(ZSTD_frameHeader *, const void *, size_t);
425:	size_t ZSTD_getFrameHeader_advanced(ZSTD_frameHeader *, const void *, size_t, ZSTD_format_e);
1562:	size_t ZSTD_initDStream(ZSTD_DStream *);
1571:	size_t ZSTD_initDStream_usingDDict(ZSTD_DStream *, const ZSTD_DDict *);
1553:	size_t ZSTD_initDStream_usingDict(ZSTD_DStream *, const void *, size_t);
266:	ZSTD_DCtx *ZSTD_initStaticDCtx(void *, size_t);
1490:	ZSTD_DStream *ZSTD_initStaticDStream(void *, size_t);
783:	size_t ZSTD_insertBlock(ZSTD_DCtx *, const void *, size_t);
366:	unsigned int ZSTD_isFrame(const void *, size_t);
380:	unsigned int ZSTD_isSkippableFrame(const void *, size_t);
1268:	size_t ZSTD_loadDEntropy(ZSTD_entropyDTables_t *, const void * const, const size_t);
1062:	ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx *);
1042:	size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx *);
561:	size_t ZSTD_readSkippableFrame(void *, size_t, unsigned int *, const void *, size_t);
1581:	size_t ZSTD_resetDStream(ZSTD_DStream *);
213:	size_t ZSTD_sizeof_DCtx(const ZSTD_DCtx *);
1749:	size_t ZSTD_sizeof_DStream(const ZSTD_DStream *);
647:	static size_t ZSTD_decodeFrameHeader(ZSTD_DCtx *, const void *, size_t);
919:	static size_t ZSTD_decompressMultiFrame(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t, const ZSTD_DDict *);
679:	static ZSTD_frameSizeInfo ZSTD_findFrameSizeInfo(const void *, size_t);
998:	static const ZSTD_DDict *ZSTD_getDDict(ZSTD_DCtx *);

File lib/zstd/decompress/zstd_decompress_block.c:
584:	void ZSTD_buildFSETable(ZSTD_seqSymbol *, const short *, unsigned int, const U32 *, const U8 *, unsigned int, void *, size_t, int);
2052:	void ZSTD_checkContinuity(ZSTD_DCtx *, const void *, size_t);
119:	size_t ZSTD_decodeLiteralsBlock(ZSTD_DCtx *, const void *, size_t, void *, size_t, const streaming_operation);
653:	size_t ZSTD_decodeSeqHeaders(ZSTD_DCtx *, int *, const void *, size_t);
2063:	size_t ZSTD_decompressBlock(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1978:	size_t ZSTD_decompressBlock_internal(ZSTD_DCtx *, void *, size_t, const void *, size_t, const int, const streaming_operation);
56:	size_t ZSTD_getcBlockSize(const void *, size_t, blockProperties_t *);
605:	static size_t ZSTD_buildSeqTable(ZSTD_seqSymbol *, const ZSTD_seqSymbol **, symbolEncodingType_e, unsigned int, U32, const void *, size_t, const U32 *, const U8 *, const ZSTD_seqSymbol *, U32, int, int, U32 *, size_t, int);
1894:	static size_t ZSTD_decompressSequences(ZSTD_DCtx *, void *, size_t, const void *, size_t, int, const ZSTD_longOffset_e, const int);
1908:	static size_t ZSTD_decompressSequencesSplitLitBuffer(ZSTD_DCtx *, void *, size_t, const void *, size_t, int, const ZSTD_longOffset_e, const int);
861:	static size_t ZSTD_execSequenceEnd(BYTE *, BYTE * const, seq_t, const BYTE **, const BYTE * const, const BYTE * const, const BYTE * const, const BYTE * const);
908:	static size_t ZSTD_execSequenceEndSplitLitBuffer(BYTE *, BYTE * const, const BYTE * const, seq_t, const BYTE **, const BYTE * const, const BYTE * const, const BYTE * const, const BYTE * const);
792:	static void ZSTD_safecopy(BYTE *, const BYTE * const, const BYTE *, ptrdiff_t, ZSTD_overlap_e);

File lib/zstd/zstd_compress_module.c:
82:	size_t zstd_cctx_workspace_bound(const zstd_compression_parameters *);
69:	size_t zstd_compress_bound(size_t);
96:	size_t zstd_compress_cctx(zstd_cctx *, void *, size_t, const void *, size_t, const zstd_parameters *);
144:	size_t zstd_compress_stream(zstd_cstream *, zstd_out_buffer *, zstd_in_buffer *);
104:	size_t zstd_cstream_workspace_bound(const zstd_compression_parameters *);
157:	size_t zstd_end_stream(zstd_cstream *, zstd_out_buffer *);
151:	size_t zstd_flush_stream(zstd_cstream *, zstd_out_buffer *);
75:	zstd_parameters zstd_get_params(int, unsigned long long);
88:	zstd_cctx *zstd_init_cctx(void *, size_t);
110:	zstd_cstream *zstd_init_cstream(const zstd_parameters *, unsigned long long, void *, size_t);
63:	int zstd_max_clevel(void);
57:	int zstd_min_clevel(void);
133:	size_t zstd_reset_cstream(zstd_cstream *, unsigned long long);
27:	static size_t zstd_cctx_init(zstd_cctx *, const zstd_parameters *, unsigned long long);

File lib/zstd/zstd_decompress_module.c:
41:	size_t zstd_dctx_workspace_bound(void);
55:	size_t zstd_decompress_dctx(zstd_dctx *, void *, size_t, const void *, size_t);
84:	size_t zstd_decompress_stream(zstd_dstream *, zstd_out_buffer *, zstd_in_buffer *);
62:	size_t zstd_dstream_workspace_bound(size_t);
91:	size_t zstd_find_frame_compressed_size(const void *, size_t);
27:	zstd_error_code zstd_get_error_code(size_t);
33:	const char *zstd_get_error_name(size_t);
97:	size_t zstd_get_frame_header(zstd_frame_header *, const void *, size_t);
47:	zstd_dctx *zstd_init_dctx(void *, size_t);
68:	zstd_dstream *zstd_init_dstream(size_t, void *, size_t);
21:	unsigned int zstd_is_error(size_t);
78:	size_t zstd_reset_dstream(zstd_dstream *);

File mm/backing-dev.c:
919:	struct backing_dev_info *bdi_alloc(int);
1116:	const char *bdi_dev_name(struct backing_dev_info *);
971:	struct backing_dev_info *bdi_get_by_id(u64);
904:	int bdi_init(struct backing_dev_info *);
1094:	void bdi_put(struct backing_dev_info *);
1022:	int bdi_register(struct backing_dev_info *, const char *, ...);
987:	int bdi_register_va(struct backing_dev_info *, const char *, va_list);
1034:	void bdi_set_owner(struct backing_dev_info *, struct device *);
1054:	void bdi_unregister(struct backing_dev_info *);
1100:	struct backing_dev_info *inode_to_bdi(struct inode *);
849:	void wb_blkcg_offline(struct cgroup_subsys_state *);
715:	struct bdi_writeback *wb_get_create(struct backing_dev_info *, struct cgroup_subsys_state *, gfp_t);
682:	struct bdi_writeback *wb_get_lookup(struct backing_dev_info *, struct cgroup_subsys_state *);
829:	void wb_memcg_offline(struct mem_cgroup *);
385:	void wb_wakeup_delayed(struct bdi_writeback *);
348:	static int bdi_class_init(void);
108:	static int bdi_debug_stats_open(struct inode *, struct file *);
51:	static int bdi_debug_stats_show(struct seq_file *, void *);
868:	static int cgwb_init(void);
539:	static void cgwb_release(struct percpu_ref *);
510:	static void cgwb_release_workfn(struct work_struct *);
782:	static void cleanup_offline_cgwbs_workfn(struct work_struct *);
361:	static int default_bdi_init(void);
268:	static ssize_t max_bytes_show(struct device *, struct device_attribute *, char *);
277:	static ssize_t max_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
238:	static ssize_t max_ratio_fine_show(struct device *, struct device_attribute *, char *);
221:	static ssize_t max_ratio_fine_store(struct device *, struct device_attribute *, const char *, size_t);
219:	static ssize_t max_ratio_show(struct device *, struct device_attribute *, char *);
202:	static ssize_t max_ratio_store(struct device *, struct device_attribute *, const char *, size_t);
240:	static ssize_t min_bytes_show(struct device *, struct device_attribute *, char *);
249:	static ssize_t min_bytes_store(struct device *, struct device_attribute *, const char *, size_t);
200:	static ssize_t min_ratio_fine_show(struct device *, struct device_attribute *, char *);
183:	static ssize_t min_ratio_fine_store(struct device *, struct device_attribute *, const char *, size_t);
181:	static ssize_t min_ratio_show(struct device *, struct device_attribute *, char *);
164:	static ssize_t min_ratio_store(struct device *, struct device_attribute *, const char *, size_t);
162:	static ssize_t read_ahead_kb_show(struct device *, struct device_attribute *, char *);
135:	static ssize_t read_ahead_kb_store(struct device *, struct device_attribute *, const char *, size_t);
296:	static ssize_t stable_pages_required_show(struct device *, struct device_attribute *, char *);
324:	static ssize_t strict_limit_show(struct device *, struct device_attribute *, char *);
306:	static ssize_t strict_limit_store(struct device *, struct device_attribute *, const char *, size_t);
409:	static int wb_init(struct bdi_writeback *, struct backing_dev_info *, gfp_t);
461:	static void wb_shutdown(struct bdi_writeback *);
396:	static void wb_update_bandwidth_workfn(struct work_struct *);

File mm/cma.c:
424:	struct page *cma_alloc(struct cma *, unsigned long, unsigned int, bool);
238:	int cma_declare_contiguous_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, unsigned int, bool, const char *, struct cma **, int);
576:	int cma_for_each_area(int (*)(struct cma *, void *), void *);
42:	phys_addr_t cma_get_base(const struct cma *);
52:	const char *cma_get_name(const struct cma *);
47:	unsigned long cma_get_size(const struct cma *);
173:	int cma_init_reserved_mem(phys_addr_t, phys_addr_t, unsigned int, const char *, struct cma **);
526:	bool cma_pages_valid(struct cma *, const struct page *, unsigned long);
555:	bool cma_release(struct cma *, const struct page *, unsigned long);
156:	void cma_reserve_pages_on_error(struct cma *);
96:	static void cma_activate_area(struct cma *);
145:	static int cma_init_reserved_areas(void);

File mm/compaction.c:
111:	bool PageMovable(struct page *);
135:	void __ClearPageMovable(struct page *);
127:	void __SetPageMovable(struct page *, const struct movable_operations *);
192:	void compaction_defer_reset(struct zone *, int, bool);
2722:	int compaction_proactiveness_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2777:	int compaction_register_node(struct node *);
2219:	enum compact_result compaction_suitable(struct zone *, int, unsigned int, int);
2782:	void compaction_unregister_node(struct node *);
2257:	bool compaction_zonelist_suitable(struct alloc_context *, int, int);
681:	unsigned long isolate_freepages_range(struct compact_control *, unsigned long, unsigned long);
1211:	int isolate_migratepages_range(struct compact_control *, unsigned long, unsigned long);
2997:	void kcompactd_run(int);
3015:	void kcompactd_stop(int);
377:	void reset_isolation_suitable(pg_data_t *);
2750:	int sysctl_compaction_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2569:	enum compact_result try_to_compact_pages(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, struct page **);
2892:	void wakeup_kcompactd(pg_data_t *, int, int);
252:	static bool __reset_isolation_pfn(struct zone *, unsigned long, bool, bool);
2674:	static void compact_node(int);
2760:	static ssize_t compact_store(struct device *, struct device_attribute *, const char *, size_t);
2290:	static enum compact_result compact_zone(struct compact_control *, struct capture_control *);
1676:	static struct page *compaction_alloc(struct page *, unsigned long);
1701:	static void compaction_free(struct page *, unsigned long);
541:	static unsigned long isolate_freepages_block(struct compact_control *, unsigned long *, unsigned long, struct list_head *, unsigned int, bool);
786:	static int isolate_migratepages_block(struct compact_control *, unsigned long, unsigned long, isolate_mode_t);
2922:	static int kcompactd(void *);
3031:	static int kcompactd_cpu_online(unsigned int);
3049:	static int kcompactd_init(void);
238:	static bool pageblock_skip_persistent(struct page *);

File mm/debug.c:
127:	void dump_page(struct page *, const char *);

File mm/dmapool.c:
314:	void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);
130:	struct dma_pool *dma_pool_create(const char *, struct device *, size_t, size_t, size_t);
267:	void dma_pool_destroy(struct dma_pool *);
404:	void dma_pool_free(struct dma_pool *, void *, dma_addr_t);
498:	struct dma_pool *dmam_pool_create(const char *, struct device *, size_t, size_t, size_t);
523:	void dmam_pool_destroy(struct dma_pool *);
479:	static int dmam_pool_match(struct device *, void *, void *);
472:	static void dmam_pool_release(struct device *, void *);
65:	static ssize_t pools_show(struct device *, struct device_attribute *, char *);

File mm/early_ioremap.c:
250:	void copy_from_early_mem(void *, phys_addr_t, unsigned long);
213:	void *early_ioremap(resource_size_t, unsigned long);
42:	void early_ioremap_reset(void);
71:	void early_ioremap_setup(void);
164:	void early_iounmap(void *, unsigned long);
220:	void *early_memremap(resource_size_t, unsigned long);
35:	pgprot_t early_memremap_pgprot_adjust(resource_size_t, unsigned long, pgprot_t);
229:	void *early_memremap_ro(resource_size_t, unsigned long);
296:	void early_memunmap(void *, unsigned long);
102:	static void *__early_ioremap(resource_size_t, unsigned long, pgprot_t);
83:	static int check_early_ioremap_leak(void);
25:	static int early_ioremap_debug_setup(char *);

File mm/fadvise.c:
205:	long __arm64_sys_fadvise64_64(const struct pt_regs *);
32:	int generic_fadvise(struct file *, loff_t, loff_t, int);
191:	int ksys_fadvise64_64(int, loff_t, loff_t, int);
180:	int vfs_fadvise(struct file *, loff_t, loff_t, int);

File mm/filemap.c:
840:	int __filemap_add_folio(struct address_space *, struct folio *, unsigned long, gfp_t, void **);
411:	int __filemap_fdatawrite_range(struct address_space *, loff_t, loff_t, int);
1910:	struct folio *__filemap_get_folio(struct address_space *, unsigned long, int, gfp_t);
217:	void __filemap_remove_folio(struct folio *, void *);
692:	void __filemap_set_wb_err(struct address_space *, int);
1658:	void __folio_lock(struct folio *);
1665:	int __folio_lock_killable(struct folio *);
1709:	bool __folio_lock_or_retry(struct folio *, struct mm_struct *, unsigned int);
3834:	ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
318:	void delete_from_page_cache_batch(struct address_space *, struct folio_batch *);
3635:	void dio_warn_stale_pagecache(struct file *);
724:	int file_check_and_advance_wb_err(struct file *);
591:	int file_fdatawait_range(struct file *, loff_t, loff_t);
768:	int file_write_and_wait_range(struct file *, loff_t, loff_t);
928:	int filemap_add_folio(struct address_space *, struct folio *, unsigned long, gfp_t);
957:	struct folio *filemap_alloc_folio(gfp_t, unsigned int);
344:	int filemap_check_errors(struct address_space *);
3118:	vm_fault_t filemap_fault(struct vm_fault *);
614:	int filemap_fdatawait_keep_errors(struct address_space *);
545:	int filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
567:	int filemap_fdatawait_range_keep_errors(struct address_space *, loff_t, loff_t);
430:	int filemap_fdatawrite(struct address_space *);
436:	int filemap_fdatawrite_range(struct address_space *, loff_t, loff_t);
378:	int filemap_fdatawrite_wbc(struct address_space *, struct writeback_control *);
452:	int filemap_flush(struct address_space *);
226:	void filemap_free_folio(struct address_space *, struct folio *);
2163:	unsigned int filemap_get_folios(struct address_space *, unsigned long *, unsigned long, struct folio_batch *);
2226:	unsigned int filemap_get_folios_contig(struct address_space *, unsigned long *, unsigned long, struct folio_batch *);
985:	void filemap_invalidate_lock_two(struct address_space *, struct address_space *);
1005:	void filemap_invalidate_unlock_two(struct address_space *, struct address_space *);
3356:	vm_fault_t filemap_map_pages(struct vm_fault *, unsigned long, unsigned long);
3433:	vm_fault_t filemap_page_mkwrite(struct vm_fault *);
470:	bool filemap_range_has_page(struct address_space *, loff_t, loff_t);
627:	bool filemap_range_has_writeback(struct address_space *, loff_t, loff_t);
2660:	ssize_t filemap_read(struct kiocb *, struct iov_iter *, ssize_t);
3958:	bool filemap_release_folio(struct folio *, gfp_t);
248:	void filemap_remove_folio(struct folio *);
665:	int filemap_write_and_wait_range(struct address_space *, loff_t, loff_t);
2052:	unsigned int find_get_entries(struct address_space *, unsigned long *, unsigned long, struct folio_batch *, unsigned long *);
2299:	unsigned int find_get_pages_range_tag(struct address_space *, unsigned long *, unsigned long, xa_mark_t, unsigned int, struct page **);
2098:	unsigned int find_lock_entries(struct address_space *, unsigned long *, unsigned long, struct folio_batch *, unsigned long *);
1476:	void folio_add_wait_queue(struct folio *, wait_queue_entry_t *);
1542:	void folio_end_private_2(struct folio *);
1593:	void folio_end_writeback(struct folio *);
1520:	void folio_unlock(struct folio *);
1439:	void folio_wait_bit(struct folio *, int);
1445:	int folio_wait_bit_killable(struct folio *, int);
1557:	void folio_wait_private_2(struct folio *);
1575:	int folio_wait_private_2_killable(struct folio *);
3653:	ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
3467:	int generic_file_mmap(struct file *, struct vm_area_struct *);
2790:	ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
3481:	int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
3923:	ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
3735:	ssize_t generic_perform_write(struct kiocb *, struct iov_iter *);
2902:	loff_t mapping_seek_hole_data(struct address_space *, loff_t, loff_t, int);
1373:	void migration_entry_wait_on_locked(swp_entry_t, pte_t *, spinlock_t *);
1761:	unsigned long page_cache_next_miss(struct address_space *, unsigned long, unsigned long);
1797:	unsigned long page_cache_prev_miss(struct address_space *, unsigned long, unsigned long);
1628:	void page_endio(struct page *, bool, int);
1034:	void pagecache_init(void);
3582:	struct folio *read_cache_folio(struct address_space *, unsigned long, filler_t *, struct file *);
3601:	struct page *read_cache_page(struct address_space *, unsigned long, filler_t *, struct file *);
3624:	struct page *read_cache_page_gfp(struct address_space *, unsigned long, gfp_t);
803:	void replace_page_cache_folio(struct folio *, struct folio *);
501:	static void __filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
3506:	static struct folio *do_read_cache_folio(struct address_space *, unsigned long, filler_t *, struct file *, gfp_t);
3002:	static struct file *do_sync_mmap_readahead(struct vm_fault *);
2373:	static void filemap_get_read_batch(struct address_space *, unsigned long, unsigned long, struct folio_batch *);
2409:	static int filemap_read_folio(struct file *, filler_t *, struct folio *);
148:	static void filemap_unaccount_folio(struct address_space *, struct folio *);
1997:	static struct folio *find_get_entry(struct xa_state *, unsigned long, xa_mark_t);
1218:	static int folio_wait_bit_common(struct folio *, int, int, enum behavior);
1129:	static void folio_wake_bit(struct folio *, int);
3299:	static struct folio *next_uptodate_page(struct folio *, struct address_space *, struct xa_state *, unsigned long);
1078:	static int wake_page_function(wait_queue_entry_t *, unsigned int, int, void *);

File mm/folio-compat.c:
60:	int __set_page_dirty_nobuffers(struct page *);
85:	int add_to_page_cache_lru(struct page *, struct address_space *, unsigned long, gfp_t);
66:	bool clear_page_dirty_for_io(struct page *);
24:	void end_page_writeback(struct page *);
105:	struct page *grab_cache_page_write_begin(struct address_space *, unsigned long);
115:	int isolate_lru_page(struct page *);
79:	void lru_cache_add_inactive_or_unevictable(struct page *, struct vm_area_struct *);
42:	void mark_page_accessed(struct page *);
12:	struct address_space *page_mapping(struct page *);
93:	struct page *pagecache_get_page(struct address_space *, unsigned long, int, gfp_t);
122:	void putback_lru_page(struct page *);
72:	bool redirty_page_for_writepage(struct writeback_control *, struct page *);
54:	bool set_page_dirty(struct page *);
48:	bool set_page_writeback(struct page *);
18:	void unlock_page(struct page *);
36:	void wait_for_stable_page(struct page *);
30:	void wait_on_page_writeback(struct page *);

File mm/gup.c:
1602:	int __mm_populate(unsigned long, unsigned long, int);
1817:	size_t fault_in_readable(const char *, size_t);
1783:	size_t fault_in_safe_writeable(const char *, size_t);
1748:	size_t fault_in_subpage_writeable(char *, size_t);
1708:	size_t fault_in_writeable(char *, size_t);
1555:	long faultin_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, bool, int *);
1261:	int fixup_user_fault(struct mm_struct *, unsigned long, unsigned int, bool *);
812:	struct page *follow_page(struct vm_area_struct *, unsigned long, unsigned int);
1862:	struct page *get_dump_page(unsigned long);
2215:	long get_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
3014:	int get_user_pages_fast(unsigned long, int, unsigned int, struct page **);
2969:	int get_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
2176:	long get_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2242:	long get_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
3158:	long pin_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
3047:	int pin_user_pages_fast(unsigned long, int, unsigned int, struct page **);
3068:	int pin_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
3123:	long pin_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
3180:	long pin_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
1485:	long populate_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, int *);
124:	struct folio *try_grab_folio(struct page *, int, unsigned int);
214:	int try_grab_page(struct page *, unsigned int);
255:	void unpin_user_page(struct page *);
380:	void unpin_user_page_range_dirty_lock(struct page *, unsigned long, bool);
425:	void unpin_user_pages(struct page **, unsigned long);
314:	void unpin_user_pages_dirty_lock(struct page **, unsigned long, bool);
1082:	static long __get_user_pages(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2042:	static long __gup_longterm_locked(struct mm_struct *, unsigned long, unsigned long, struct page **, struct vm_area_struct **, int *, unsigned int);
779:	static struct page *follow_page_mask(struct vm_area_struct *, unsigned long, unsigned int, struct follow_page_context *);
534:	static struct page *follow_page_pte(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int, struct dev_pagemap **);
476:	static int follow_pfn_pte(struct vm_area_struct *, unsigned long, pte_t *, unsigned int);
180:	static void gup_put_folio(struct folio *, int, unsigned int);
2900:	static int internal_get_user_pages_fast(unsigned long, unsigned long, unsigned int, struct page **);
2293:	static void undo_dev_pagemap(int *, int, unsigned int, struct page **);

File mm/huge_memory.c:
1956:	spinlock_t *__pmd_trans_huge_lock(pmd_t *, struct vm_area_struct *);
1973:	spinlock_t *__pud_trans_huge_lock(pud_t *, struct vm_area_struct *);
2281:	void __split_huge_pmd(struct vm_area_struct *, pmd_t *, unsigned long, bool, struct folio *);
2618:	bool can_split_folio(struct folio *, int *);
1823:	int change_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, pgprot_t, unsigned long);
1077:	int copy_huge_pmd(struct mm_struct *, struct mm_struct *, pmd_t *, pmd_t *, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
2817:	void deferred_split_huge_page(struct page *);
779:	vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *);
1509:	vm_fault_t do_huge_pmd_numa_page(struct vm_fault *);
1309:	vm_fault_t do_huge_pmd_wp_page(struct vm_fault *);
1032:	struct page *follow_devmap_pmd(struct vm_area_struct *, unsigned long, pmd_t *, int, struct dev_pagemap **);
1463:	struct page *follow_trans_huge_pmd(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int);
2803:	void free_transhuge_page(struct page *);
1295:	void huge_pmd_set_accessed(struct vm_fault *);
74:	bool hugepage_vma_check(struct vm_area_struct *, unsigned long, bool, bool, bool);
1601:	bool madvise_free_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, unsigned long);
554:	pmd_t maybe_pmd_mkwrite(pmd_t, struct vm_area_struct *);
190:	struct page *mm_get_huge_zero_page(struct mm_struct *);
204:	void mm_put_huge_zero_page(struct mm_struct *);
1768:	bool move_huge_pmd(struct vm_area_struct *, unsigned long, unsigned long, pmd_t *, pmd_t *);
581:	void prep_transhuge_page(struct page *);
3258:	void remove_migration_pmd(struct page_vma_mapped_walk *, struct page *);
3211:	int set_pmd_migration_entry(struct page_vma_mapped_walk *, struct page *);
282:	ssize_t single_hugepage_flag_show(struct kobject *, struct kobj_attribute *, char *, enum transparent_hugepage_flag);
290:	ssize_t single_hugepage_flag_store(struct kobject *, struct kobj_attribute *, const char *, size_t, enum transparent_hugepage_flag);
2652:	int split_huge_page_to_list(struct page *, struct list_head *);
2329:	void split_huge_pmd_address(struct vm_area_struct *, unsigned long, bool, struct folio *);
638:	unsigned long thp_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
2352:	void vma_adjust_trans_huge(struct vm_area_struct *, unsigned long, unsigned long, long);
738:	gfp_t vma_thp_gfp_mask(struct vm_area_struct *);
900:	vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *, pfn_t, pgprot_t, bool);
1680:	int zap_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long);
2854:	static unsigned long deferred_split_count(struct shrinker *, struct shrink_control *);
2867:	static unsigned long deferred_split_scan(struct shrinker *, struct shrink_control *);
312:	static ssize_t defrag_show(struct kobject *, struct kobj_attribute *, char *);
335:	static ssize_t defrag_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
238:	static ssize_t enabled_show(struct kobject *, struct kobj_attribute *, char *);
254:	static ssize_t enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
385:	static ssize_t hpage_pmd_size_show(struct kobject *, struct kobj_attribute *, char *);
439:	static void hugepage_exit_sysfs(struct kobject *);
456:	static int hugepage_init(void);
408:	static int hugepage_init_sysfs(struct kobject **);
765:	static void set_huge_zero_page(pgtable_t, struct mm_struct *, struct vm_area_struct *, unsigned long, pmd_t *, struct page *);
523:	static int setup_transparent_hugepage(char *);
210:	static unsigned long shrink_huge_zero_page_count(struct shrinker *, struct shrink_control *);
217:	static unsigned long shrink_huge_zero_page_scan(struct shrinker *, struct shrink_control *);
3201:	static int split_huge_pages_debugfs(void);
2980:	static int split_huge_pages_pid(int, unsigned long, unsigned long);
3127:	static ssize_t split_huge_pages_write(struct file *, const char *, size_t, loff_t *);
371:	static ssize_t use_zero_page_show(struct kobject *, struct kobj_attribute *, char *);
377:	static ssize_t use_zero_page_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File mm/hugetlb.c:
2059:	int PageHeadHuge(struct page *);
2045:	int PageHuge(struct page *);
3149:	int __alloc_bootmem_huge_page(struct hstate *, int);
5364:	void __unmap_hugepage_range_final(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
7024:	void adjust_range_if_pmd_sharing_possible(struct vm_area_struct *, unsigned long *, unsigned long *);
3015:	struct page *alloc_huge_page(struct vm_area_struct *, unsigned long, int);
2477:	struct page *alloc_huge_page_nodemask(struct hstate *, int, nodemask_t *, gfp_t);
2496:	struct page *alloc_huge_page_vma(struct hstate *, struct vm_area_struct *, unsigned long);
4276:	bool arch_hugetlb_valid_size(unsigned long);
1191:	void clear_vma_resv_huge_pages(struct vm_area_struct *);
4959:	int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);
2277:	int dissolve_free_huge_page(struct page *);
2354:	int dissolve_free_huge_pages(unsigned long, unsigned long);
6444:	long follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, unsigned long *, long, unsigned int, int *);
1854:	void free_huge_page(struct page *);
7298:	int get_huge_page_for_hwpoison(unsigned long, int, bool *);
7279:	int get_hwpoison_huge_page(struct page *, bool *, bool);
7055:	pte_t *huge_pmd_share(struct mm_struct *, struct vm_area_struct *, unsigned long, pud_t *);
7113:	int huge_pmd_unshare(struct mm_struct *, struct vm_area_struct *, unsigned long, pte_t *);
128:	struct hugepage_subpool *hugepage_new_subpool(struct hstate *, long, long);
152:	void hugepage_put_subpool(struct hugepage_subpool *);
4281:	void hugetlb_add_hstate(unsigned int);
5667:	int hugetlb_add_to_page_cache(struct page *, struct address_space *, unsigned long);
2088:	unsigned long hugetlb_basepage_index(struct page *);
6630:	unsigned long hugetlb_change_protection(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
7456:	void hugetlb_cma_reserve(int);
1160:	void hugetlb_dup_vma_private(struct vm_area_struct *);
5982:	vm_fault_t hugetlb_fault(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned int);
5959:	u32 hugetlb_fault_mutex_hash(struct address_space *, unsigned long);
907:	void hugetlb_fix_reserve_counts(struct inode *);
6388:	struct page *hugetlb_follow_page_mask(struct vm_area_struct *, unsigned long, unsigned int);
7246:	unsigned long hugetlb_mask_last_page(struct hstate *);
4598:	int hugetlb_mempolicy_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4306:	bool hugetlb_node_alloc_supported(void);
4606:	int hugetlb_overcommit_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2075:	struct address_space *hugetlb_page_mapping_lock_write(struct page *);
4117:	void hugetlb_register_node(struct node *);
4637:	void hugetlb_report_meminfo(struct seq_file *);
4667:	int hugetlb_report_node_meminfo(char *, int, int);
4699:	void hugetlb_report_usage(struct seq_file *, struct mm_struct *);
6770:	bool hugetlb_reserve_pages(struct inode *, long, long, struct vm_area_struct *, vm_flags_t);
4683:	void hugetlb_show_meminfo_node(int);
4589:	int hugetlb_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4706:	unsigned long hugetlb_total_pages(void);
4087:	void hugetlb_unregister_node(struct node *);
6928:	long hugetlb_unreserve_pages(struct inode *, long, long, long);
7408:	void hugetlb_unshare_all_pmds(struct vm_area_struct *);
315:	void hugetlb_vma_assert_locked(struct vm_area_struct *);
269:	void hugetlb_vma_lock_read(struct vm_area_struct *);
324:	void hugetlb_vma_lock_release(struct kref *);
287:	void hugetlb_vma_lock_write(struct vm_area_struct *);
305:	int hugetlb_vma_trylock_write(struct vm_area_struct *);
278:	void hugetlb_vma_unlock_read(struct vm_area_struct *);
296:	void hugetlb_vma_unlock_write(struct vm_area_struct *);
4922:	bool is_hugetlb_entry_migration(pte_t);
7261:	int isolate_hugetlb(struct page *, struct list_head *);
2979:	int isolate_or_dissolve_huge_page(struct page *, struct list_head *);
969:	unsigned long linear_hugepage_index(struct vm_area_struct *, unsigned long);
5171:	int move_hugetlb_page_tables(struct vm_area_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long);
7318:	void move_hugetlb_state(struct folio *, struct folio *, int);
7309:	void putback_active_hugepage(struct page *);
2818:	void restore_reserve_on_error(struct hstate *, struct vm_area_struct *, unsigned long, struct page *);
1057:	struct resv_map *resv_map_alloc(void);
1088:	void resv_map_release(struct kref *);
1843:	struct hstate *size_to_hstate(unsigned long);
5393:	void unmap_hugepage_range(struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
980:	unsigned long vma_kernel_pagesize(struct vm_area_struct *);
994:	unsigned long vma_mmu_pagesize(struct vm_area_struct *);
6998:	bool want_pmd_share(struct vm_area_struct *, unsigned long);
3720:	static ssize_t __nr_hugepages_store_common(bool, struct hstate *, int, unsigned long, size_t);
1949:	static bool __prep_compound_gigantic_folio(struct folio *, unsigned int, bool);
5235:	static void __unmap_hugepage_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
1707:	static void __update_and_free_page(struct hstate *, struct page *);
2688:	static long __vma_reservation_common(struct hstate *, struct vm_area_struct *, unsigned long, enum vma_resv_mode);
1661:	static void add_hugetlb_folio(struct hstate *, struct folio *, bool);
3402:	static int adjust_pool_surplus(struct hstate *, nodemask_t *, int);
2102:	static struct folio *alloc_buddy_hugetlb_folio(struct hstate *, gfp_t, int, nodemask_t *, nodemask_t *);
2172:	static struct folio *alloc_fresh_hugetlb_folio(struct hstate *, gfp_t, int, nodemask_t *, nodemask_t *);
2210:	static int alloc_pool_huge_page(struct hstate *, nodemask_t *, nodemask_t *);
2382:	static struct page *alloc_surplus_huge_page(struct hstate *, gfp_t, int, nodemask_t *);
607:	static int allocate_file_region_entries(struct resv_map *, int);
7417:	static int cmdline_parse_hugetlb_cma(char *);
426:	static void copy_hugetlb_cgroup_uncharge_info(struct file_region *, struct file_region *);
4471:	static int default_hugepagesz_setup(char *);
3931:	static ssize_t demote_size_show(struct kobject *, struct kobj_attribute *, char *);
3940:	static ssize_t demote_size_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3876:	static ssize_t demote_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1315:	static struct page *dequeue_huge_page_nodemask(struct hstate *, gfp_t, int, nodemask_t *);
1776:	static void free_hpage_workfn(struct work_struct *);
3834:	static ssize_t free_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3189:	static void gather_bootmem_prealloc(void);
1432:	static int hstate_next_node_to_alloc(struct hstate *, nodemask_t *);
215:	static long hugepage_subpool_put_pages(struct hugepage_subpool *, long);
4331:	static int hugepages_setup(char *);
4423:	static int hugepagesz_setup(char *);
4716:	static int hugetlb_acct_memory(struct hstate *, long);
3249:	static void hugetlb_hstate_alloc_pages(struct hstate *);
3218:	static void hugetlb_hstate_alloc_pages_onenode(struct hstate *, int);
4203:	static int hugetlb_init(void);
3312:	static void hugetlb_init_hstates(void);
4152:	static void hugetlb_register_all_nodes(void);
520:	static long hugetlb_resv_map_add(struct resv_map *, struct list_head *, long, long, struct hstate *, struct hugetlb_cgroup *, long *);
3997:	static int hugetlb_sysfs_add_hstate(struct hstate *, struct kobject *, struct kobject **, const struct attribute_group *);
4181:	static void hugetlb_sysfs_init(void);
7358:	static void hugetlb_unshare_pmds(struct vm_area_struct *, unsigned long, unsigned long);
4804:	static void hugetlb_vm_op_close(struct vm_area_struct *);
4872:	static vm_fault_t hugetlb_vm_op_fault(struct vm_fault *);
4766:	static void hugetlb_vm_op_open(struct vm_area_struct *);
4861:	static unsigned long hugetlb_vm_op_pagesize(struct vm_area_struct *);
4835:	static int hugetlb_vm_op_split(struct vm_area_struct *, unsigned long);
356:	static void hugetlb_vma_lock_free(struct vm_area_struct *);
5474:	static vm_fault_t hugetlb_wp(struct mm_struct *, struct vm_area_struct *, unsigned long, pte_t *, unsigned int, struct page *, spinlock_t *);
3789:	static ssize_t nr_hugepages_mempolicy_show(struct kobject *, struct kobj_attribute *, char *);
3796:	static ssize_t nr_hugepages_mempolicy_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3770:	static ssize_t nr_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3776:	static ssize_t nr_hugepages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3753:	static ssize_t nr_hugepages_store_common(bool, struct kobject *, const char *, size_t);
3805:	static ssize_t nr_overcommit_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3812:	static ssize_t nr_overcommit_hugepages_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
472:	static void put_uncharge_info(struct file_region *);
678:	static long region_add(struct resv_map *, long, long, long, struct hstate *, struct hugetlb_cgroup *);
745:	static long region_chg(struct resv_map *, long, long, long *);
804:	static long region_del(struct resv_map *, long, long);
2236:	static struct page *remove_pool_huge_page(struct hstate *, nodemask_t *, bool);
3343:	static void report_hugepages(void);
3851:	static ssize_t resv_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
3859:	static ssize_t surplus_hugepages_show(struct kobject *, struct kobj_attribute *, char *);
2780:	static void vma_end_reservation(struct hstate *, struct vm_area_struct *, unsigned long);
2768:	static long vma_needs_reservation(struct hstate *, struct vm_area_struct *, unsigned long);

File mm/hugetlb_cgroup.c:
298:	int hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **);
304:	int hugetlb_cgroup_charge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup **);
332:	void hugetlb_cgroup_commit_charge(int, unsigned long, struct hugetlb_cgroup *, struct page *);
341:	void hugetlb_cgroup_commit_charge_rsvd(int, unsigned long, struct hugetlb_cgroup *, struct page *);
872:	void hugetlb_cgroup_file_init(void);
891:	void hugetlb_cgroup_migrate(struct folio *, struct folio *);
415:	void hugetlb_cgroup_uncharge_cgroup(int, unsigned long, struct hugetlb_cgroup *);
421:	void hugetlb_cgroup_uncharge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup *);
427:	void hugetlb_cgroup_uncharge_counter(struct resv_map *, unsigned long, unsigned long);
439:	void hugetlb_cgroup_uncharge_file_region(struct resv_map *, struct file_region *, unsigned long, bool);
385:	void hugetlb_cgroup_uncharge_folio(int, unsigned long, struct folio *);
391:	void hugetlb_cgroup_uncharge_folio_rsvd(int, unsigned long, struct folio *);
255:	static int __hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **, bool);
718:	static void __hugetlb_cgroup_file_dfl_init(int);
789:	static void __hugetlb_cgroup_file_legacy_init(int);
136:	static struct cgroup_subsys_state *hugetlb_cgroup_css_alloc(struct cgroup_subsys_state *);
175:	static void hugetlb_cgroup_css_free(struct cgroup_subsys_state *);
224:	static void hugetlb_cgroup_css_offline(struct cgroup_subsys_state *);
471:	static int hugetlb_cgroup_read_numa_stat(struct seq_file *, void *);
524:	static u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *, struct cftype *);
556:	static int hugetlb_cgroup_read_u64_max(struct seq_file *, void *);
648:	static ssize_t hugetlb_cgroup_reset(struct kernfs_open_file *, char *, size_t, loff_t);
598:	static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *, char *, size_t, loff_t, const char *);
642:	static ssize_t hugetlb_cgroup_write_dfl(struct kernfs_open_file *, char *, size_t, loff_t);
636:	static ssize_t hugetlb_cgroup_write_legacy(struct kernfs_open_file *, char *, size_t, loff_t);
713:	static int hugetlb_events_local_show(struct seq_file *, void *);
708:	static int hugetlb_events_show(struct seq_file *, void *);

File mm/hugetlb_vmemmap.c:
555:	void hugetlb_vmemmap_optimize(const struct hstate *, struct page *);
459:	int hugetlb_vmemmap_restore(const struct hstate *, struct page *);
591:	static int hugetlb_vmemmap_init(void);
234:	static void vmemmap_remap_pte(pte_t *, unsigned long, struct vmemmap_remap_walk *);
186:	static int vmemmap_remap_range(unsigned long, unsigned long, struct vmemmap_remap_walk *);
282:	static void vmemmap_restore_pte(pte_t *, unsigned long, struct vmemmap_remap_walk *);

File mm/init-mm.c:
48:	void setup_initial_init_mm(void *, void *, void *, void *);

File mm/internal.h:
605:	static struct file *maybe_unlock_mmap_for_io(struct vm_fault *, struct file *);
577:	static unsigned long vma_address(struct page *, struct vm_area_struct *);

File mm/interval_tree.c:
75:	void anon_vma_interval_tree_insert(struct anon_vma_chain *, struct rb_root_cached *);
92:	struct anon_vma_chain *anon_vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
99:	struct anon_vma_chain *anon_vma_interval_tree_iter_next(struct anon_vma_chain *, unsigned long, unsigned long);
85:	void anon_vma_interval_tree_remove(struct anon_vma_chain *, struct rb_root_cached *);
23:	void vma_interval_tree_insert(struct vm_area_struct *, struct rb_root_cached *);
28:	void vma_interval_tree_insert_after(struct vm_area_struct *, struct vm_area_struct *, struct rb_root_cached *);
23:	struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
23:	struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *, unsigned long, unsigned long);
23:	void vma_interval_tree_remove(struct vm_area_struct *, struct rb_root_cached *);
71:	static void __anon_vma_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);
23:	static void vma_interval_tree_augment_rotate(struct rb_node *, struct rb_node *);

File mm/ioremap.c:
14:	void *ioremap_prot(phys_addr_t, size_t, unsigned long);
51:	void iounmap(volatile void *);

File mm/khugepaged.c:
416:	void __khugepaged_enter(struct mm_struct *);
460:	void __khugepaged_exit(struct mm_struct *);
1438:	int collapse_pte_mapped_thp(struct mm_struct *, unsigned long, bool);
2596:	bool current_is_khugepaged(void);
352:	int hugepage_madvise(struct vm_area_struct *, unsigned long *, int);
406:	void khugepaged_destroy(void);
450:	void khugepaged_enter_vma(struct vm_area_struct *, unsigned long);
389:	int khugepaged_init(void);
2588:	void khugepaged_min_free_kbytes_update(void);
2628:	int madvise_collapse(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
2560:	int start_stop_khugepaged(void);
958:	static int alloc_charge_hpage(struct page **, struct mm_struct *, struct collapse_control *);
164:	static ssize_t alloc_sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
171:	static ssize_t alloc_sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1399:	static void collapse_and_free_pmd(struct mm_struct *, struct vm_area_struct *, unsigned long, pmd_t *);
233:	static ssize_t defrag_show(struct kobject *, struct kobj_attribute *, char *);
239:	static ssize_t defrag_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
224:	static ssize_t full_scans_show(struct kobject *, struct kobj_attribute *, char *);
2131:	static int hpage_collapse_scan_file(struct mm_struct *, unsigned long, struct file *, unsigned long, struct collapse_control *);
1128:	static int hpage_collapse_scan_pmd(struct mm_struct *, struct vm_area_struct *, unsigned long, bool *, struct collapse_control *);
522:	static bool is_refcount_suitable(struct page *);
2488:	static int khugepaged(void *);
257:	static ssize_t max_ptes_none_show(struct kobject *, struct kobj_attribute *, char *);
263:	static ssize_t max_ptes_none_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
307:	static ssize_t max_ptes_shared_show(struct kobject *, struct kobj_attribute *, char *);
314:	static ssize_t max_ptes_shared_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
281:	static ssize_t max_ptes_swap_show(struct kobject *, struct kobj_attribute *, char *);
288:	static ssize_t max_ptes_swap_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
215:	static ssize_t pages_collapsed_show(struct kobject *, struct kobj_attribute *, char *);
191:	static ssize_t pages_to_scan_show(struct kobject *, struct kobj_attribute *, char *);
197:	static ssize_t pages_to_scan_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
493:	static void release_pte_page(struct page *);
137:	static ssize_t scan_sleep_millisecs_show(struct kobject *, struct kobj_attribute *, char *);
144:	static ssize_t scan_sleep_millisecs_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
1364:	static int set_huge_pmd(struct vm_area_struct *, unsigned long, pmd_t *, struct page *);
2509:	static void set_recommended_min_free_kbytes(void);

File mm/list_lru.c:
559:	int __list_lru_init(struct list_lru *, bool, struct lock_class_key *, struct shrinker *);
119:	bool list_lru_add(struct list_lru *, struct list_head *);
196:	unsigned long list_lru_count_node(struct list_lru *, int);
178:	unsigned long list_lru_count_one(struct list_lru *, int, struct mem_cgroup *);
143:	bool list_lru_del(struct list_lru *, struct list_head *);
589:	void list_lru_destroy(struct list_lru *);
163:	void list_lru_isolate(struct list_lru_one *, struct list_head *);
170:	void list_lru_isolate_move(struct list_lru_one *, struct list_head *, struct list_head *);
298:	unsigned long list_lru_walk_node(struct list_lru *, int, list_lru_walk_cb, void *, unsigned long *);
268:	unsigned long list_lru_walk_one(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
284:	unsigned long list_lru_walk_one_irq(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
472:	int memcg_list_lru_alloc(struct mem_cgroup *, struct list_lru *, gfp_t);
430:	void memcg_reparent_list_lrus(struct mem_cgroup *, struct mem_cgroup *);
206:	static unsigned long __list_lru_walk_one(struct list_lru *, int, int, list_lru_walk_cb, void *, unsigned long *);

File mm/maccess.c:
220:	void __copy_overflow(int, unsigned long);
23:	long copy_from_kernel_nofault(void *, const void *, size_t);
9:	bool copy_from_kernel_nofault_allowed(const void *, size_t);
113:	long copy_from_user_nofault(void *, const void *, size_t);
57:	long copy_to_kernel_nofault(void *, const void *, size_t);
137:	long copy_to_user_nofault(void *, const void *, size_t);
79:	long strncpy_from_kernel_nofault(char *, const void *, long);
171:	long strncpy_from_user_nofault(char *, const void *, long);
209:	long strnlen_user_nofault(const void *, long);

File mm/madvise.c:
1455:	long __arm64_sys_madvise(const struct pt_regs *);
1460:	long __arm64_sys_process_madvise(const struct pt_regs *);
1402:	int do_madvise(struct mm_struct *, unsigned long, size_t, int);
337:	static int madvise_cold_or_pageout_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
610:	static int madvise_free_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
193:	static int swapin_walk_pmd_entry(pmd_t *, unsigned long, unsigned long, struct mm_walk *);

File mm/memblock.c:
1221:	void __next_mem_pfn_range(int *, int, unsigned long *, unsigned long *, int *);
1042:	void __next_mem_range(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
1137:	void __next_mem_range_rev(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
709:	int memblock_add(phys_addr_t, phys_addr_t);
687:	int memblock_add_node(phys_addr_t, phys_addr_t, int, enum memblock_flags);
1542:	void *memblock_alloc_exact_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1372:	phys_addr_t memblock_alloc_range_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
1604:	void *memblock_alloc_try_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1574:	void *memblock_alloc_try_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1941:	void memblock_allow_resize(void);
1722:	void memblock_cap_memory_range(phys_addr_t, phys_addr_t);
928:	int memblock_clear_hotplug(phys_addr_t, phys_addr_t);
977:	int memblock_clear_nomap(phys_addr_t, phys_addr_t);
1935:	void memblock_dump_all(void);
1674:	phys_addr_t memblock_end_of_DRAM(void);
1702:	void memblock_enforce_memory_limit(phys_addr_t);
828:	void memblock_free(void *, size_t);
2133:	void memblock_free_all(void);
1631:	void memblock_free_late(phys_addr_t, phys_addr_t);
1890:	phys_addr_t memblock_get_current_limit(void);
1799:	bool memblock_is_map_memory(phys_addr_t);
1794:	bool memblock_is_memory(phys_addr_t);
1833:	bool memblock_is_region_memory(phys_addr_t, phys_addr_t);
1855:	bool memblock_is_region_reserved(phys_addr_t, phys_addr_t);
1789:	bool memblock_is_reserved(phys_addr_t);
916:	int memblock_mark_hotplug(phys_addr_t, phys_addr_t);
940:	int memblock_mark_mirror(phys_addr_t, phys_addr_t);
965:	int memblock_mark_nomap(phys_addr_t, phys_addr_t);
1755:	void memblock_mem_limit_remove_map(phys_addr_t);
184:	bool memblock_overlaps_region(struct memblock_type *, phys_addr_t, phys_addr_t);
1441:	phys_addr_t memblock_phys_alloc_range(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t);
1466:	phys_addr_t memblock_phys_alloc_try_nid(phys_addr_t, phys_addr_t, int);
842:	int memblock_phys_free(phys_addr_t, phys_addr_t);
1658:	phys_addr_t memblock_phys_mem_size(void);
810:	int memblock_remove(phys_addr_t, phys_addr_t);
853:	int memblock_reserve(phys_addr_t, phys_addr_t);
1663:	phys_addr_t memblock_reserved_size(void);
1808:	int memblock_search_pfn_nid(unsigned long, unsigned long *, unsigned long *);
1885:	void memblock_set_current_limit(phys_addr_t);
1264:	int memblock_set_node(phys_addr_t, phys_addr_t, struct memblock_type *, int);
1669:	phys_addr_t memblock_start_of_DRAM(void);
1860:	void memblock_trim_memory(phys_addr_t);
2117:	void reset_all_zones_managed_pages(void);
2109:	void reset_node_managed_pages(pg_data_t *);
2034:	static void __free_pages_memory(unsigned long, unsigned long);
1946:	static int early_memblock(char *);
2085:	static unsigned long free_low_memory_core_early(void);
577:	static int memblock_add_range(struct memblock_type *, phys_addr_t, phys_addr_t, int, enum memblock_flags);
1492:	static void *memblock_alloc_internal(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
2162:	static int memblock_debug_open(struct inode *, struct file *);
2146:	static int memblock_debug_show(struct seq_file *, void *);
408:	static int memblock_double_array(struct memblock_type *, phys_addr_t, phys_addr_t);
1895:	static void memblock_dump(struct memblock_type *);
287:	static phys_addr_t memblock_find_in_range_node(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, enum memblock_flags);
2164:	static int memblock_init_debugfs(void);
735:	static int memblock_isolate_range(struct memblock_type *, phys_addr_t, phys_addr_t, int *, int *);
795:	static int memblock_remove_range(struct memblock_type *, phys_addr_t, phys_addr_t);
343:	static void memblock_remove_region(struct memblock_type *, unsigned long);
886:	static int memblock_setclr_flag(phys_addr_t, phys_addr_t, int, int);
2065:	static void memmap_init_reserved_pages(void);

File mm/memcontrol.c:
879:	void __count_memcg_events(struct mem_cgroup *, enum vm_event_item, unsigned long);
6921:	int __mem_cgroup_charge(struct folio *, struct mm_struct *, gfp_t);
7416:	int __mem_cgroup_try_charge_swap(struct folio *, swp_entry_t);
7096:	void __mem_cgroup_uncharge(struct folio *);
7116:	void __mem_cgroup_uncharge_list(struct list_head *);
7462:	void __mem_cgroup_uncharge_swap(swp_entry_t, unsigned int);
3118:	int __memcg_kmem_charge_page(struct page *, gfp_t, int);
3141:	void __memcg_kmem_uncharge_page(struct page *, int);
849:	void __mod_lruvec_kmem_state(void *, enum node_stat_item, int);
826:	void __mod_lruvec_page_state(struct page *, enum node_stat_item, int);
815:	void __mod_lruvec_state(struct lruvec *, enum node_stat_item, int);
765:	void __mod_memcg_lruvec_state(struct lruvec *, enum node_stat_item, int);
741:	void __mod_memcg_state(struct mem_cgroup *, int, int);
1295:	struct lruvec *folio_lruvec_lock(struct folio *);
1318:	struct lruvec *folio_lruvec_lock_irq(struct folio *);
1342:	struct lruvec *folio_lruvec_lock_irqsave(struct folio *, unsigned long *);
2092:	void folio_memcg_lock(struct folio *);
2163:	void folio_memcg_unlock(struct folio *);
1010:	struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *);
3011:	struct obj_cgroup *get_obj_cgroup_from_current(void);
3029:	struct obj_cgroup *get_obj_cgroup_from_page(struct page *);
2136:	void lock_page_memcg(struct page *);
6853:	void mem_cgroup_calculate_protection(struct mem_cgroup *, struct mem_cgroup *);
7218:	bool mem_cgroup_charge_skmem(struct mem_cgroup *, unsigned int, gfp_t);
363:	struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *);
4693:	void mem_cgroup_flush_foreign(struct bdi_writeback *);
640:	void mem_cgroup_flush_stats(void);
646:	void mem_cgroup_flush_stats_delayed(void);
5174:	struct mem_cgroup *mem_cgroup_from_id(unsigned short);
2965:	struct mem_cgroup *mem_cgroup_from_obj(void *);
2990:	struct mem_cgroup *mem_cgroup_from_slab_obj(void *);
977:	struct mem_cgroup *mem_cgroup_from_task(struct task_struct *);
1664:	unsigned long mem_cgroup_get_max(struct mem_cgroup *);
7486:	long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *);
2028:	struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *, struct mem_cgroup *);
2552:	void mem_cgroup_handle_over_high(void);
1079:	struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *, struct mem_cgroup *, struct mem_cgroup_reclaim_cookie *);
1185:	void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);
251:	bool mem_cgroup_kmem_disabled(void);
7138:	void mem_cgroup_migrate(struct folio *, struct folio *);
1965:	bool mem_cgroup_oom_synchronize(bool);
1610:	void mem_cgroup_print_oom_context(struct mem_cgroup *, struct task_struct *);
2075:	void mem_cgroup_print_oom_group(struct mem_cgroup *);
1631:	void mem_cgroup_print_oom_meminfo(struct mem_cgroup *);
1242:	int mem_cgroup_scan_tasks(struct mem_cgroup *, int (*)(struct task_struct *, void *), void *);
1683:	unsigned long mem_cgroup_size(struct mem_cgroup *);
7180:	void mem_cgroup_sk_alloc(struct sock *);
7203:	void mem_cgroup_sk_free(struct sock *);
3518:	unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *, int, gfp_t, unsigned long *);
7499:	bool mem_cgroup_swap_full(struct folio *);
6945:	int mem_cgroup_swapin_charge_folio(struct folio *, struct mm_struct *, gfp_t, swp_entry_t);
6977:	void mem_cgroup_swapin_uncharge_swap(swp_entry_t);
7346:	void mem_cgroup_swapout(struct folio *, swp_entry_t);
4640:	void mem_cgroup_track_foreign_dirty_slowpath(struct folio *, struct bdi_writeback *);
7249:	void mem_cgroup_uncharge_skmem(struct mem_cgroup *, unsigned int);
1363:	void mem_cgroup_update_lru_size(struct lruvec *, enum lru_list, int, int);
4543:	struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *);
4571:	void mem_cgroup_wb_stats(struct bdi_writeback *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
2881:	int memcg_alloc_slab_cgroups(struct slab *, struct kmem_cache *, gfp_t, bool);
725:	unsigned long memcg_page_state(struct mem_cgroup *, int);
236:	struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *);
3156:	void mod_objcg_state(struct obj_cgroup *, struct pglist_data *, enum node_stat_item, int);
3352:	int obj_cgroup_charge(struct obj_cgroup *, gfp_t, size_t);
3396:	void obj_cgroup_uncharge(struct obj_cgroup *, size_t);
388:	ino_t page_cgroup_ino(struct page *);
3406:	void split_page_memcg(struct page *, unsigned int);
2168:	void unlock_page_memcg(struct page *);
243:	struct mem_cgroup *vmpressure_to_memcg(struct vmpressure *);
2998:	static struct obj_cgroup *__get_obj_cgroup_from_memcg(struct mem_cgroup *);
5988:	static void __mem_cgroup_clear_mc(void);
5236:	static void __mem_cgroup_free(struct mem_cgroup *);
526:	static struct mem_cgroup_per_node *__mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_node *);
4172:	static void __mem_cgroup_threshold(struct mem_cgroup *, bool);
4269:	static int __mem_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *, enum res_type);
4361:	static void __mem_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *, enum res_type);
2297:	static void __refill_stock(struct mem_cgroup *, unsigned int);
7261:	static int cgroup_memory(char *);
6900:	static int charge_memcg(struct folio *, struct mem_cgroup *, gfp_t);
4234:	static int compare_thresholds(const void *, const void *);
2326:	static void drain_all_stock(struct mem_cgroup *);
2270:	static void drain_local_stock(struct work_struct *);
3241:	static struct obj_cgroup *drain_obj_stock(struct memcg_stock_pcp *);
2252:	static void drain_stock(struct memcg_stock_pcp *);
652:	static void flush_memcg_stats_dwork(struct work_struct *);
5839:	static enum mc_target_type get_mctgt_type(struct vm_area_struct *, unsigned long, pte_t, union mc_target *);
5895:	static enum mc_target_type get_mctgt_type_thp(struct vm_area_struct *, unsigned long, pmd_t, union mc_target *);
2403:	static void high_work_func(struct work_struct *);
6311:	static void mem_cgroup_attach(struct cgroup_taskset *);
6047:	static int mem_cgroup_can_attach(struct cgroup_taskset *);
6117:	static void mem_cgroup_cancel_attach(struct cgroup_taskset *);
5927:	static int mem_cgroup_count_precharge_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
5321:	static struct cgroup_subsys_state *mem_cgroup_css_alloc(struct cgroup_subsys_state *);
5429:	static void mem_cgroup_css_free(struct cgroup_subsys_state *);
5393:	static void mem_cgroup_css_offline(struct cgroup_subsys_state *);
5363:	static int mem_cgroup_css_online(struct cgroup_subsys_state *);
5422:	static void mem_cgroup_css_released(struct cgroup_subsys_state *);
5464:	static void mem_cgroup_css_reset(struct cgroup_subsys_state *);
5480:	static void mem_cgroup_css_rstat_flush(struct cgroup_subsys_state *, int);
3624:	static ssize_t mem_cgroup_force_empty_write(struct kernfs_open_file *, char *, size_t, loff_t);
3635:	static u64 mem_cgroup_hierarchy_read(struct cgroup_subsys_state *, struct cftype *);
3641:	static int mem_cgroup_hierarchy_write(struct cgroup_subsys_state *, struct cftype *, u64);
5153:	static void mem_cgroup_id_put_many(struct mem_cgroup *, unsigned int);
7285:	static int mem_cgroup_init(void);
5695:	static int mem_cgroup_move_account(struct page *, bool, struct mem_cgroup *, struct mem_cgroup *);
6123:	static int mem_cgroup_move_charge_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
3905:	static u64 mem_cgroup_move_charge_read(struct cgroup_subsys_state *, struct cftype *);
3912:	static int mem_cgroup_move_charge_write(struct cgroup_subsys_state *, struct cftype *, u64);
6272:	static void mem_cgroup_move_task(void);
3943:	static unsigned long mem_cgroup_node_nr_lru_pages(struct mem_cgroup *, int, unsigned int, bool);
4497:	static int mem_cgroup_oom_control_read(struct seq_file *, void *);
4508:	static int mem_cgroup_oom_control_write(struct cgroup_subsys_state *, struct cftype *, u64);
4458:	static int mem_cgroup_oom_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
1779:	static bool mem_cgroup_oom_trylock(struct mem_cgroup *);
4480:	static void mem_cgroup_oom_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
1688:	static bool mem_cgroup_out_of_memory(struct mem_cgroup *, gfp_t, int);
3681:	static u64 mem_cgroup_read_u64(struct cgroup_subsys_state *, struct cftype *);
3868:	static ssize_t mem_cgroup_reset(struct kernfs_open_file *, char *, size_t, loff_t);
3464:	static int mem_cgroup_resize_max(struct mem_cgroup *, unsigned long, bool);
4975:	static int mem_cgroup_slab_show(struct seq_file *, void *);
7798:	static int mem_cgroup_swap_init(void);
4148:	static u64 mem_cgroup_swappiness_read(struct cgroup_subsys_state *, struct cftype *);
4156:	static int mem_cgroup_swappiness_write(struct cgroup_subsys_state *, struct cftype *, u64);
4223:	static void mem_cgroup_threshold(struct mem_cgroup *);
474:	static void mem_cgroup_update_tree(struct mem_cgroup *, int);
3654:	static unsigned long mem_cgroup_usage(struct mem_cgroup *, bool);
4349:	static int mem_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
4446:	static void mem_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
3822:	static ssize_t mem_cgroup_write(struct kernfs_open_file *, char *, size_t, loff_t);
4811:	static void memcg_event_ptable_queue_proc(struct file *, wait_queue_head_t *, poll_table *);
4755:	static void memcg_event_remove(struct work_struct *);
4778:	static int memcg_event_wake(wait_queue_entry_t *, unsigned int, int, void *);
2367:	static int memcg_hotplug_cpu_dead(unsigned int);
3981:	static int memcg_numa_stat_show(struct seq_file *, void *);
3749:	static void memcg_offline_kmem(struct mem_cgroup *);
1861:	static int memcg_oom_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
4065:	static int memcg_stat_show(struct seq_file *, void *);
3783:	static int memcg_update_tcp_max(struct mem_cgroup *, unsigned long);
4829:	static ssize_t memcg_write_event_control(struct kernfs_open_file *, char *, size_t, loff_t);
6326:	static u64 memory_current_read(struct cgroup_subsys_state *, struct cftype *);
6510:	static int memory_events_local_show(struct seq_file *, void *);
6502:	static int memory_events_show(struct seq_file *, void *);
6388:	static int memory_high_show(struct seq_file *, void *);
6394:	static ssize_t memory_high_write(struct kernfs_open_file *, char *, size_t, loff_t);
6365:	static int memory_low_show(struct seq_file *, void *);
6371:	static ssize_t memory_low_write(struct kernfs_open_file *, char *, size_t, loff_t);
6437:	static int memory_max_show(struct seq_file *, void *);
6443:	static ssize_t memory_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
6342:	static int memory_min_show(struct seq_file *, void *);
6348:	static ssize_t memory_min_write(struct kernfs_open_file *, char *, size_t, loff_t);
6538:	static int memory_numa_stat_show(struct seq_file *, void *);
6568:	static int memory_oom_group_show(struct seq_file *, void *);
6577:	static ssize_t memory_oom_group_write(struct kernfs_open_file *, char *, size_t, loff_t);
6334:	static u64 memory_peak_read(struct cgroup_subsys_state *, struct cftype *);
6599:	static ssize_t memory_reclaim(struct kernfs_open_file *, char *, size_t, loff_t);
1544:	static void memory_stat_format(struct mem_cgroup *, char *, int);
6518:	static int memory_stat_show(struct seq_file *, void *);
4355:	static int memsw_cgroup_usage_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
4452:	static void memsw_cgroup_usage_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
3091:	static int obj_cgroup_charge_pages(struct obj_cgroup *, gfp_t, unsigned int);
259:	static void obj_cgroup_release(struct percpu_ref *);
3070:	static void obj_cgroup_uncharge_pages(struct obj_cgroup *, unsigned int);
2377:	static unsigned long reclaim_high(struct mem_cgroup *, unsigned int, gfp_t);
3318:	static void refill_obj_stock(struct obj_cgroup *, unsigned int, bool);
7525:	static int setup_swap_account(char *);
7534:	static u64 swap_current_read(struct cgroup_subsys_state *, struct cftype *);
7588:	static int swap_events_show(struct seq_file *, void *);
2496:	static u64 swap_find_max_overage(struct mem_cgroup *);
7542:	static int swap_high_show(struct seq_file *, void *);
7548:	static ssize_t swap_high_write(struct kernfs_open_file *, char *, size_t, loff_t);
7565:	static int swap_max_show(struct seq_file *, void *);
7571:	static ssize_t swap_max_write(struct kernfs_open_file *, char *, size_t, loff_t);
2631:	static int try_charge_memcg(struct mem_cgroup *, gfp_t, unsigned int);
7014:	static void uncharge_batch(const struct uncharge_gather *);
7037:	static void uncharge_folio(struct folio *, struct uncharge_gather *);

File mm/memfd.c:
266:	long __arm64_sys_memfd_create(const struct pt_regs *);
237:	long memfd_fcntl(struct file *, unsigned int, unsigned long);

File mm/memory-failure.c:
1237:	void ClearPageHWPoisonTakenOff(struct page *);
1232:	void SetPageHWPoisonTakenOff(struct page *);
1806:	int __get_huge_page_for_hwpoison(unsigned long, int, bool *);
1788:	void hugetlb_clear_page_hwpoison(struct page *);
229:	int hwpoison_filter(struct page *);
2007:	int memory_failure(unsigned long, int);
2245:	void memory_failure_queue(unsigned long, int);
2291:	void memory_failure_queue_kick(int);
77:	void num_poisoned_pages_inc(unsigned long);
83:	void num_poisoned_pages_sub(unsigned long, long);
304:	void shake_page(struct page *);
2568:	int soft_offline_page(unsigned long, int);
2336:	int unpoison_memory(unsigned long);
1703:	static unsigned long __free_raw_hwp_pages(struct page *, bool);
1199:	static int action_result(unsigned long, enum mf_action_page_type, enum mf_result);
373:	static void add_to_kill(struct task_struct *, struct page *, unsigned long, struct vm_area_struct *, struct list_head *);
812:	static int delete_from_lru_cache(struct page *);
1396:	static int get_hwpoison_page(struct page *, unsigned long);
720:	static int hwpoison_hugetlb_range(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
687:	static int hwpoison_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
1414:	static bool hwpoison_user_mappings(struct page *, unsigned long, int, struct page *);
753:	static int kill_accessing_process(struct task_struct *, unsigned long, int);
1092:	static int me_huge_page(struct page_state *, struct page *);
905:	static int me_kernel(struct page_state *, struct page *);
924:	static int me_pagecache_clean(struct page_state *, struct page *);
983:	static int me_pagecache_dirty(struct page_state *, struct page *);
1070:	static int me_swapcache_clean(struct page_state *, struct page *);
1049:	static int me_swapcache_dirty(struct page_state *, struct page *);
914:	static int me_unknown(struct page_state *, struct page *);
2300:	static int memory_failure_init(void);
2266:	static void memory_failure_work_func(struct work_struct *);
109:	static bool page_handle_poison(struct page *, bool, bool);
837:	static int truncate_error_page(struct page *, unsigned long, struct address_space *);
1546:	static int try_to_split_thp_page(struct page *);

File mm/memory-tiers.c:
548:	struct memory_dev_type *alloc_memory_type(int);
579:	void clear_node_memory_type(int, struct memory_dev_type *);
564:	void destroy_memory_type(struct memory_dev_type *);
570:	void init_node_memory_type(int, struct memory_dev_type *);
294:	int next_demotion_node(int);
267:	void node_get_allowed_targets(pg_data_t *, nodemask_t *);
242:	bool node_is_toptier(int);
359:	static void establish_demotion_targets(void);
124:	static void memory_tier_device_release(struct device *);
628:	static int memory_tier_init(void);
134:	static ssize_t nodelist_show(struct device *, struct device_attribute *, char *);
676:	static ssize_t numa_demotion_enabled_show(struct kobject *, struct kobj_attribute *, char *);
683:	static ssize_t numa_demotion_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
709:	static int numa_init_sysfs(void);
476:	static struct memory_tier *set_node_memory_tier(int);

File mm/memory.c:
5502:	int __access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
1794:	pte_t *__get_locked_pte(struct mm_struct *, unsigned long, spinlock_t **);
5292:	int __pmd_alloc(struct mm_struct *, pud_t *, unsigned long);
419:	int __pte_alloc(struct mm_struct *, pmd_t *);
431:	int __pte_alloc_kernel(pmd_t *);
5269:	int __pud_alloc(struct mm_struct *, p4d_t *, unsigned long);
5588:	int access_process_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
5577:	int access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
2776:	int apply_to_existing_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
2762:	int apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
5727:	void clear_huge_page(struct page *, unsigned long, unsigned int);
5794:	long copy_huge_page_from_user(struct page *, const void *, unsigned int, bool);
1221:	int copy_page_range(struct vm_area_struct *, struct vm_area_struct *);
5773:	void copy_user_huge_page(struct page *, struct page *, unsigned long, struct vm_area_struct *, unsigned int);
4207:	vm_fault_t do_set_pmd(struct vm_fault *, struct page *);
4280:	void do_set_pte(struct vm_fault *, struct page *, unsigned long);
3689:	vm_fault_t do_swap_page(struct vm_fault *);
4335:	vm_fault_t finish_fault(struct vm_fault *);
3239:	vm_fault_t finish_mkwrite_fault(struct vm_fault *);
5385:	int follow_pfn(struct vm_area_struct *, unsigned long, unsigned long *);
5405:	int follow_phys(struct vm_area_struct *, unsigned long, unsigned int, unsigned long *, resource_size_t *);
5333:	int follow_pte(struct mm_struct *, unsigned long, pte_t **, spinlock_t **);
287:	void free_pgd_range(struct mmu_gather *, unsigned long, unsigned long, unsigned long, unsigned long);
349:	void free_pgtables(struct mmu_gather *, struct maple_tree *, struct vm_area_struct *, unsigned long, unsigned long);
5445:	int generic_access_phys(struct vm_area_struct *, unsigned long, void *, int, int);
5188:	vm_fault_t handle_mm_fault(struct vm_area_struct *, unsigned long, unsigned int, struct pt_regs *);
165:	void mm_trace_rss_stat(struct mm_struct *, int);
4657:	int numa_migrate_prep(struct page *, struct vm_area_struct *, unsigned long, int, int *);
393:	void pmd_install(struct mm_struct *, pmd_t *, pgtable_t *);
5609:	void print_vma_addr(char *, unsigned long);
2503:	int remap_pfn_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
2438:	int remap_pfn_range_notrack(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
3485:	void unmap_mapping_folio(struct folio *);
3520:	void unmap_mapping_pages(struct address_space *, unsigned long, unsigned long, bool);
3556:	void unmap_mapping_range(struct address_space *, const loff_t, const loff_t, int);
1581:	void unmap_page_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1665:	void unmap_vmas(struct mmu_gather *, struct maple_tree *, struct vm_area_struct *, unsigned long, unsigned long);
1998:	int vm_insert_page(struct vm_area_struct *, unsigned long, struct page *);
1939:	int vm_insert_pages(struct vm_area_struct *, unsigned long, struct page **, unsigned long *);
2534:	int vm_iomap_memory(struct vm_area_struct *, phys_addr_t, unsigned long);
2068:	int vm_map_pages(struct vm_area_struct *, struct page **, unsigned long);
2088:	int vm_map_pages_zero(struct vm_area_struct *, struct page **, unsigned long);
565:	struct page *vm_normal_page(struct vm_area_struct *, unsigned long, pte_t);
629:	struct page *vm_normal_page_pmd(struct vm_area_struct *, unsigned long, pmd_t);
2317:	vm_fault_t vmf_insert_mixed(struct vm_area_struct *, unsigned long, pfn_t);
2329:	vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *, unsigned long, pfn_t);
2310:	vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t);
2217:	vm_fault_t vmf_insert_pfn(struct vm_area_struct *, unsigned long, unsigned long);
2169:	vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t);
1694:	void zap_page_range(struct vm_area_struct *, unsigned long, unsigned long);
1725:	void zap_page_range_single(struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1761:	void zap_vma_ptes(struct vm_area_struct *, unsigned long, unsigned long);
2721:	static int __apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *, bool);
4137:	static vm_fault_t __do_fault(struct vm_fault *);
143:	static int disable_randmaps(char *);
3335:	static vm_fault_t do_wp_page(struct vm_fault *);
4421:	static int fault_around_bytes_fops_open(struct inode *, struct file *);
4401:	static int fault_around_bytes_get(void *, u64 *);
4411:	static int fault_around_bytes_set(void *, u64);
4424:	static int fault_around_debugfs(void);
2965:	static vm_fault_t fault_dirty_shared_page(struct vm_fault *);
158:	static int init_zero_pfn(void);
1812:	static int insert_page_into_pte_locked(struct vm_area_struct *, pte_t *, unsigned long, struct page *, pgprot_t);
2095:	static vm_fault_t insert_pfn(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t, bool);
472:	static void print_bad_pte(struct vm_area_struct *, unsigned long, pte_t, struct page *);
3453:	static void unmap_mapping_range_tree(struct rb_root_cached *, unsigned long, unsigned long, struct zap_details *);
1804:	static int validate_page_before_insert(struct page *);
3018:	static void wp_page_reuse(struct vm_fault *);

File mm/mempolicy.c:
1718:	long __arm64_sys_get_mempolicy(const struct pt_regs *);
1559:	long __arm64_sys_mbind(const struct pt_regs *);
1680:	long __arm64_sys_migrate_pages(const struct pt_regs *);
1586:	long __arm64_sys_set_mempolicy(const struct pt_regs *);
1488:	long __arm64_sys_set_mempolicy_home_node(const struct pt_regs *);
1753:	struct mempolicy *__get_vma_policy(struct vm_area_struct *, unsigned long);
2409:	struct mempolicy *__mpol_dup(struct mempolicy *);
2433:	bool __mpol_equal(struct mempolicy *, struct mempolicy *);
308:	void __mpol_put(struct mempolicy *);
2269:	struct page *alloc_pages(gfp_t, unsigned int);
2366:	unsigned long alloc_pages_bulk_array_mempolicy(gfp_t, unsigned long, struct page **);
1823:	bool apply_policy_zone(struct mempolicy *, enum zone_type);
631:	unsigned long change_prot_numa(struct vm_area_struct *, unsigned long, unsigned long);
1103:	int do_migrate_pages(struct mm_struct *, const nodemask_t *, const nodemask_t *, int);
2295:	struct folio *folio_alloc(gfp_t, unsigned int);
161:	struct mempolicy *get_task_policy(struct task_struct *);
2018:	int huge_node(struct vm_area_struct *, unsigned long, gfp_t, struct mempolicy **, nodemask_t **);
2055:	bool init_nodemask_of_mempolicy(nodemask_t *);
2095:	bool mempolicy_in_oom_domain(struct task_struct *, const nodemask_t *);
1907:	unsigned int mempolicy_slab_node(void);
2839:	void mpol_free_shared_policy(struct shared_policy *);
2569:	int mpol_misplaced(struct page *, struct vm_area_struct *, unsigned long);
2989:	int mpol_parse_str(char *, struct mempolicy **);
2651:	void mpol_put_task_policy(struct task_struct *);
381:	void mpol_rebind_mm(struct mm_struct *, nodemask_t *);
370:	void mpol_rebind_task(struct task_struct *, const nodemask_t *);
2814:	int mpol_set_shared_policy(struct shared_policy *, struct vm_area_struct *, struct mempolicy *);
2775:	void mpol_shared_policy_init(struct shared_policy *, struct mempolicy *);
2532:	struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *, unsigned long);
3123:	void mpol_to_str(char *, int, struct mempolicy *);
2958:	void numa_default_policy(void);
141:	int numa_map_to_online_node(int);
2904:	void numa_policy_init(void);
1847:	nodemask_t *policy_nodemask(gfp_t, struct mempolicy *);
2168:	struct folio *vma_alloc_folio(gfp_t, int, struct vm_area_struct *, unsigned long, bool);
2387:	int vma_dup_policy(struct vm_area_struct *, struct vm_area_struct *);
1725:	bool vma_migratable(struct vm_area_struct *);
1801:	bool vma_policy_mof(struct vm_area_struct *);
2859:	static void check_numabalancing_enable(void);
854:	static long do_set_mempolicy(unsigned short, unsigned short, nodemask_t *);
1363:	static int get_bitmap(unsigned long *, const unsigned long *, unsigned long);
1981:	static unsigned int interleave_nid(struct mempolicy *, struct vm_area_struct *, unsigned long, int);
788:	static int mbind_range(struct mm_struct *, unsigned long, unsigned long, struct mempolicy *);
1030:	static int migrate_page_add(struct page *, struct list_head *, unsigned long);
198:	static int mpol_new_nodemask(struct mempolicy *, const nodemask_t *);
206:	static int mpol_new_preferred(struct mempolicy *, const nodemask_t *);
315:	static void mpol_rebind_default(struct mempolicy *, const nodemask_t *);
319:	static void mpol_rebind_nodemask(struct mempolicy *, const nodemask_t *);
339:	static void mpol_rebind_preferred(struct mempolicy *, const nodemask_t *);
224:	static int mpol_set_nodemask(struct mempolicy *, const nodemask_t *, struct nodemask_scratch *);
1209:	static struct page *new_page(struct page *, unsigned long);
561:	static int queue_pages_hugetlb(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
502:	static int queue_pages_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
656:	static int queue_pages_test_walk(unsigned long, unsigned long, struct mm_walk *);
2877:	static int setup_numabalancing(char *);

File mm/mempool.c:
380:	void *mempool_alloc(mempool_t *, gfp_t);
550:	void *mempool_alloc_pages(gfp_t, void *);
514:	void *mempool_alloc_slab(gfp_t, void *);
258:	mempool_t *mempool_create(int, mempool_alloc_t *, mempool_free_t *, void *);
266:	mempool_t *mempool_create_node(int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
175:	void mempool_destroy(mempool_t *);
156:	void mempool_exit(mempool_t *);
457:	void mempool_free(void *, mempool_t *);
557:	void mempool_free_pages(void *, void *);
522:	void mempool_free_slab(void *, void *);
233:	int mempool_init(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *);
185:	int mempool_init_node(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
540:	void mempool_kfree(void *, void *);
533:	void *mempool_kmalloc(gfp_t, void *);
304:	int mempool_resize(mempool_t *, int);
135:	static void *remove_element(mempool_t *);

File mm/memtest.c:
100:	void early_memtest(phys_addr_t, phys_addr_t);
66:	static void do_one_pass(u64, phys_addr_t, phys_addr_t);
35:	static void memtest(u64, phys_addr_t, phys_addr_t);
86:	static int parse_memtest(char *);
28:	static void reserve_bad_mem(u64, phys_addr_t, phys_addr_t);

File mm/migrate.c:
2094:	long __arm64_sys_move_pages(const struct pt_regs *);
302:	void __migration_entry_wait(struct mm_struct *, pte_t *, spinlock_t *);
332:	void __migration_entry_wait_huge(pte_t *, spinlock_t *);
1643:	struct page *alloc_migration_target(struct page *, unsigned long);
806:	int buffer_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
827:	int buffer_migrate_folio_norefs(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
835:	int filemap_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
626:	void folio_migrate_copy(struct folio *, struct folio *);
535:	void folio_migrate_flags(struct folio *, struct folio *);
390:	int folio_migrate_mapping(struct address_space *, struct folio *, struct folio *, int);
61:	int isolate_movable_page(struct page *, isolate_mode_t);
668:	int migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
637:	int migrate_folio_extra(struct address_space *, struct folio *, struct folio *, enum migrate_mode, int);
505:	int migrate_huge_page_move_mapping(struct address_space *, struct folio *, struct folio *);
2194:	int migrate_misplaced_page(struct page *, struct vm_area_struct *, int);
1425:	int migrate_pages(struct list_head *, new_page_t *, free_page_t *, unsigned long, enum migrate_mode, int, unsigned int *);
323:	void migration_entry_wait(struct mm_struct *, pmd_t *, unsigned long);
345:	void migration_entry_wait_huge(struct vm_area_struct *, pte_t *);
354:	void pmd_migration_entry_wait(struct mm_struct *, pmd_t *);
147:	void putback_movable_pages(struct list_head *);
284:	void remove_migration_ptes(struct folio *, struct folio *, bool);
714:	static int __buffer_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode, bool);
2129:	static struct page *alloc_misplaced_dst_page(struct page *, unsigned long);
1789:	static int move_pages_and_store_status(struct mm_struct *, int, struct list_head *, int *, int, int, unsigned long);
936:	static int move_to_new_folio(struct folio *, struct folio *, enum migrate_mode);
183:	static bool remove_migration_pte(struct folio *, struct vm_area_struct *, unsigned long, void *);

File mm/mincore.c:
232:	long __arm64_sys_mincore(const struct pt_regs *);
72:	static int __mincore_unmapped_range(unsigned long, unsigned long, struct vm_area_struct *, unsigned char *);
25:	static int mincore_hugetlb(pte_t *, unsigned long, unsigned long, unsigned long, struct mm_walk *);
100:	static int mincore_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);
91:	static int mincore_unmapped_range(unsigned long, unsigned long, int, struct mm_walk *);

File mm/mlock.c:
614:	long __arm64_sys_mlock(const struct pt_regs *);
619:	long __arm64_sys_mlock2(const struct pt_regs *);
697:	long __arm64_sys_mlockall(const struct pt_regs *);
632:	long __arm64_sys_munlock(const struct pt_regs *);
726:	long __arm64_sys_munlockall(const struct pt_regs *);
40:	bool can_do_mlock(void);
243:	void mlock_folio(struct folio *);
268:	void mlock_new_page(struct page *);
213:	void mlock_page_drain_local(void);
224:	void mlock_page_drain_remote(int);
290:	void munlock_page(struct page *);
234:	bool need_mlock_page_drain(int);
743:	int user_shm_lock(size_t, struct ucounts *);
771:	void user_shm_unlock(size_t, struct ucounts *);
659:	static int apply_mlockall_flags(int);
468:	static int apply_vma_lock_flags(unsigned long, size_t, vm_flags_t);
567:	static int do_mlock(unsigned long, size_t, vm_flags_t);
404:	static int mlock_fixup(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, vm_flags_t);
186:	static void mlock_pagevec(struct pagevec *);
308:	static int mlock_pte_range(pmd_t *, unsigned long, unsigned long, struct mm_walk *);

File mm/mm_init.c:
146:	void mm_compute_batch(int);
61:	void mminit_verify_pageflags_layout(void);
23:	void mminit_verify_zonelist(void);
181:	static int mm_compute_batch_init(void);
192:	static int mm_sysfs_init(void);
132:	static int set_mminit_loglevel(char *);

File mm/mmap.c:
170:	long __arm64_sys_brk(const struct pt_regs *);
1464:	long __arm64_sys_mmap_pgoff(const struct pt_regs *);
2801:	long __arm64_sys_munmap(const struct pt_regs *);
2811:	long __arm64_sys_remap_file_pages(const struct pt_regs *);
2198:	int __split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
615:	int __vma_adjust(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
3438:	struct vm_area_struct *_install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, const struct vm_special_mapping *);
1684:	unsigned long arch_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1750:	unsigned long arch_get_unmapped_area_topdown(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3168:	struct vm_area_struct *copy_vma(struct vm_area_struct **, unsigned long, unsigned long, unsigned long, bool *);
2480:	int do_mas_munmap(struct ma_state *, struct mm_struct *, unsigned long, size_t, struct list_head *, bool);
1239:	unsigned long do_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, struct list_head *);
2511:	int do_munmap(struct mm_struct *, unsigned long, size_t, struct list_head *);
3063:	void exit_mmap(struct mm_struct *);
2002:	int expand_downwards(struct vm_area_struct *, unsigned long);
2118:	int expand_stack(struct vm_area_struct *, unsigned long);
2124:	struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long);
1140:	struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
1830:	struct vm_area_struct *find_vma(struct mm_struct *, unsigned long);
1811:	struct vm_area_struct *find_vma_intersection(struct mm_struct *, unsigned long, unsigned long);
1853:	struct vm_area_struct *find_vma_prev(struct mm_struct *, unsigned long, struct vm_area_struct **);
1649:	unsigned long generic_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1697:	unsigned long generic_get_unmapped_area_topdown(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1759:	unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3127:	int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
3447:	int install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, struct page **);
1419:	unsigned long ksys_mmap_pgoff(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
3260:	bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long);
1187:	int mlock_future_check(struct mm_struct *, unsigned long, unsigned long);
3621:	void mm_drop_all_locks(struct mm_struct *);
3538:	int mm_take_all_locks(struct mm_struct *);
3644:	void mmap_init(void);
2519:	unsigned long mmap_region(struct file *, unsigned long, unsigned long, vm_flags_t, unsigned long, struct list_head *);
2267:	int split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
121:	void unlink_file_vma(struct vm_area_struct *);
3056:	int vm_brk(unsigned long, unsigned long);
3009:	int vm_brk_flags(unsigned long, unsigned long, unsigned long);
2795:	int vm_munmap(unsigned long, size_t);
3285:	void vm_stat_account(struct mm_struct *, vm_flags_t, long);
1624:	unsigned long vm_unmapped_area(struct vm_unmapped_area_info *);
512:	int vma_expand(struct ma_state *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *);
3421:	bool vma_is_special_mapping(const struct vm_area_struct *, const struct vm_special_mapping *);
446:	void vma_mas_remove(struct vm_area_struct *, struct ma_state *);
430:	void vma_mas_store(struct vm_area_struct *, struct ma_state *);
999:	struct vm_area_struct *vma_merge(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct anon_vma *, struct file *, unsigned long, struct mempolicy *, struct vm_userfaultfd_ctx, struct anon_vma_name *);
89:	void vma_set_page_prot(struct vm_area_struct *);
1501:	int vma_wants_writenotify(struct vm_area_struct *, pgprot_t);
3380:	static struct vm_area_struct *__install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, void *, const struct vm_operations_struct *);
2769:	static int __vm_munmap(unsigned long, size_t, bool);
940:	static int can_vma_merge_after(struct vm_area_struct *, unsigned long, struct anon_vma *, struct file *, unsigned long, struct vm_userfaultfd_ctx, struct anon_vma_name *);
918:	static int can_vma_merge_before(struct vm_area_struct *, unsigned long, struct anon_vma *, struct file *, unsigned long, struct vm_userfaultfd_ctx, struct anon_vma_name *);
2083:	static int cmdline_parse_stack_guard_gap(char *);
2928:	static int do_brk_flags(struct ma_state *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long);
2302:	static int do_mas_align_munmap(struct ma_state *, struct vm_area_struct *, struct mm_struct *, unsigned long, unsigned long, struct list_head *, bool);
1223:	static bool file_mmap_ok(struct file *, struct inode *, unsigned long, unsigned long);
3683:	static int init_admin_reserve(void);
3751:	static int init_reserve_notifier(void);
3662:	static int init_user_reserve(void);
3302:	static void special_mapping_close(struct vm_area_struct *);
3350:	static vm_fault_t special_mapping_fault(struct vm_fault *);
3311:	static int special_mapping_mremap(struct vm_area_struct *);
3306:	static const char *special_mapping_name(struct vm_area_struct *);
3324:	static int special_mapping_split(struct vm_area_struct *, unsigned long);
2178:	static void unmap_region(struct mm_struct *, struct maple_tree *, struct vm_area_struct *, struct vm_area_struct *, struct vm_area_struct *, unsigned long, unsigned long);
470:	static int vma_link(struct mm_struct *, struct vm_area_struct *);

File mm/mmap_lock.c:
81:	int trace_mmap_lock_reg(void);
119:	void trace_mmap_lock_unreg(void);
56:	static void free_memcg_path_bufs(void);

File mm/mmu_gather.c:
118:	bool __tlb_remove_page_size(struct mmu_gather *, struct encoded_page *, int);
363:	void tlb_finish_mmu(struct mmu_gather *);
296:	void tlb_flush_mmu(struct mmu_gather *);
72:	void tlb_flush_rmaps(struct mmu_gather *, struct vm_area_struct *);
335:	void tlb_gather_mmu(struct mmu_gather *, struct mm_struct *);
351:	void tlb_gather_mmu_fullmm(struct mmu_gather *, struct mm_struct *);
257:	void tlb_remove_table(struct mmu_gather *, void *);
194:	void tlb_remove_table_sync_one(void);
206:	static void tlb_remove_table_rcu(struct callback_head *);
189:	static void tlb_remove_table_smp_sync(void *);

File mm/mmzone.c:
56:	struct zoneref *__next_zones_zonelist(struct zoneref *, enum zone_type, nodemask_t *);
13:	struct pglist_data *first_online_pgdat(void);
75:	void lruvec_init(struct lruvec *);
18:	struct pglist_data *next_online_pgdat(struct pglist_data *);
30:	struct zone *next_zone(struct zone *);
96:	int page_cpupid_xchg_last(struct page *, int);

File mm/mprotect.c:
815:	long __arm64_sys_mprotect(const struct pt_regs *);
42:	bool can_change_pte_writable(struct vm_area_struct *, unsigned long, pte_t);
510:	unsigned long change_protection(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
557:	int mprotect_fixup(struct mmu_gather *, struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, unsigned long);

File mm/mremap.c:
889:	long __arm64_sys_mremap(const struct pt_regs *);
481:	unsigned long move_page_tables(struct vm_area_struct *, unsigned long, struct vm_area_struct *, unsigned long, unsigned long, bool);
440:	static bool move_pgt_entry(enum pgt_entry, struct vm_area_struct *, unsigned long, unsigned long, void *, void *, bool);
571:	static unsigned long move_vma(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, unsigned long, bool *, unsigned long, struct vm_userfaultfd_ctx *, struct list_head *);
727:	static struct vm_area_struct *vma_to_resize(unsigned long, unsigned long, unsigned long, unsigned long);

File mm/msync.c:
32:	long __arm64_sys_msync(const struct pt_regs *);

File mm/oom_kill.c:
1200:	long __arm64_sys_process_mrelease(const struct pt_regs *);
785:	void exit_oom_victim(void);
133:	struct task_struct *find_lock_task_mm(struct task_struct *);
201:	long oom_badness(struct task_struct *, unsigned long);
817:	bool oom_killer_disable(long);
796:	void oom_killer_enable(void);
1106:	bool out_of_memory(struct oom_control *);
1185:	void pagefault_out_of_memory(void);
490:	bool process_shares_mm(struct task_struct *, struct mm_struct *);
1085:	int register_oom_notifier(struct notifier_block *);
1091:	int unregister_oom_notifier(struct notifier_block *);
916:	static void __oom_kill_process(struct task_struct *, const char *);
512:	static bool __oom_reap_task_mm(struct mm_struct *);
452:	static void dump_header(struct oom_control *, struct task_struct *);
381:	static int dump_task(struct task_struct *, void *);
758:	static void mark_oom_victim(struct task_struct *);
308:	static int oom_evaluate_task(struct task_struct *, void *);
733:	static int oom_init(void);
1003:	static int oom_kill_memcg_member(struct task_struct *, void *);
1013:	static void oom_kill_process(struct oom_control *, const char *);
640:	static int oom_reaper(void *);
692:	static void queue_oom_reaper(struct task_struct *);
869:	static bool task_will_free_mem(struct task_struct *);
662:	static void wake_oom_reaper(struct timer_list *);

File mm/page-writeback.c:
2902:	void __folio_cancel_dirty(struct folio *);
3023:	bool __folio_end_writeback(struct folio *);
2720:	void __folio_mark_dirty(struct folio *, struct address_space *, int);
3068:	bool __folio_start_writeback(struct folio *, bool);
2062:	void balance_dirty_pages_ratelimited(struct address_space *);
1992:	int balance_dirty_pages_ratelimited_flags(struct address_space *, unsigned int);
779:	u64 bdi_get_max_bytes(struct backing_dev_info *);
760:	u64 bdi_get_min_bytes(struct backing_dev_info *);
784:	int bdi_set_max_bytes(struct backing_dev_info *, u64);
754:	int bdi_set_max_ratio(struct backing_dev_info *, unsigned int);
744:	int bdi_set_max_ratio_no_scale(struct backing_dev_info *, unsigned int);
765:	int bdi_set_min_bytes(struct backing_dev_info *, u64);
749:	int bdi_set_min_ratio(struct backing_dev_info *, unsigned int);
739:	int bdi_set_min_ratio_no_scale(struct backing_dev_info *, unsigned int);
798:	int bdi_set_strict_limit(struct backing_dev_info *, unsigned int);
2570:	int do_writepages(struct address_space *, struct writeback_control *);
2754:	bool filemap_dirty_folio(struct address_space *, struct folio *);
2697:	void folio_account_cleaned(struct folio *, struct bdi_writeback *);
2785:	void folio_account_redirty(struct folio *);
2939:	bool folio_clear_dirty_for_io(struct folio *);
2843:	bool folio_mark_dirty(struct folio *);
2816:	bool folio_redirty_for_writepage(struct writeback_control *, struct folio *);
3191:	void folio_wait_stable(struct folio *);
3144:	void folio_wait_writeback(struct folio *);
3166:	int folio_wait_writeback_killable(struct folio *);
2618:	int folio_write_one(struct folio *);
2552:	int generic_writepages(struct address_space *, struct writeback_control *);
441:	void global_dirty_limits(unsigned long *, unsigned long *);
2171:	void laptop_io_completion(struct backing_dev_info *);
2158:	void laptop_mode_timer_fn(struct timer_list *);
2181:	void laptop_sync_completion(void);
484:	bool node_dirty_ok(struct pglist_data *);
2650:	bool noop_dirty_folio(struct address_space *, struct folio *);
2314:	void page_writeback_init(void);
2878:	int set_page_dirty_lock(struct page *);
2341:	void tag_pages_for_writeback(struct address_space *, unsigned long, unsigned long);
888:	unsigned long wb_calc_thresh(struct bdi_writeback *, unsigned long);
640:	void wb_domain_exit(struct wb_domain *);
626:	int wb_domain_init(struct wb_domain *, gfp_t);
2077:	bool wb_over_bg_thresh(struct bdi_writeback *);
1485:	void wb_update_bandwidth(struct bdi_writeback *);
593:	void wb_writeout_inc(struct bdi_writeback *);
2394:	int write_cache_pages(struct address_space *, struct writeback_control *, writepage_t, void *);
2202:	void writeback_set_ratelimit(void);
1442:	static void __wb_update_bandwidth(struct dirty_throttle_control *, struct dirty_throttle_control *, bool);
579:	static void __wb_writeout_add(struct bdi_writeback *, long);
2533:	static int __writepage(struct page *, struct writeback_control *, void *);
1669:	static int balance_dirty_pages(struct bdi_writeback *, unsigned long, unsigned int);
507:	static int dirty_background_bytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
496:	static int dirty_background_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
532:	static int dirty_bytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
518:	static int dirty_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2135:	static int dirty_writeback_centisecs_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
375:	static void domain_dirty_limits(struct dirty_throttle_control *);
2215:	static int page_writeback_cpu_online(unsigned int);
1621:	static void wb_dirty_limits(struct dirty_throttle_control *);
1001:	static void wb_position_ratio(struct dirty_throttle_control *);
1284:	static void wb_update_dirty_ratelimit(struct dirty_throttle_control *, unsigned long, unsigned long);
607:	static void writeout_period(struct timer_list *);

File mm/page_alloc.c:
7458:	unsigned long __absent_pages_in_range(int, unsigned long, unsigned long);
9176:	int __alloc_contig_migrate_range(struct compact_control *, unsigned long, unsigned long);
5513:	struct page *__alloc_pages(gfp_t, unsigned int, int, nodemask_t *);
5361:	unsigned long __alloc_pages_bulk(gfp_t, int, nodemask_t *, int, struct list_head *, struct page **);
5578:	struct folio *__folio_alloc(gfp_t, unsigned int, int, nodemask_t *);
5632:	void __free_pages(struct page *, unsigned int);
1723:	void __free_pages_core(struct page *, unsigned int);
5595:	unsigned long __get_free_pages(gfp_t, unsigned int);
3602:	int __isolate_free_page(struct page *, unsigned int);
5684:	void __page_frag_cache_drain(struct page *, unsigned int);
1831:	struct page *__pageblock_pfn_to_page(unsigned long, unsigned long, struct zone *);
3654:	void __putback_isolated_page(struct page *, unsigned int, int);
6083:	void __show_free_areas(unsigned int, nodemask_t *, int);
3968:	bool __zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int, long);
7481:	unsigned long absent_pages_in_range(unsigned long, unsigned long);
8452:	void adjust_managed_page_count(struct page *, long);
9439:	struct page *alloc_contig_pages(unsigned long, gfp_t, int, nodemask_t *);
9255:	int alloc_contig_range(unsigned long, unsigned long, unsigned int, gfp_t);
9042:	void *alloc_large_system_hash(const char *, unsigned long, unsigned long, int, int, unsigned int *, unsigned int *, unsigned long, unsigned long);
5813:	void *alloc_pages_exact(size_t, gfp_t);
5838:	void *alloc_pages_exact_nid(int, size_t, gfp_t);
8261:	bool arch_has_descending_max_zone_pfns(void);
6663:	void build_all_zonelists(pg_data_t *);
8820:	void calculate_min_free_kbytes(void);
1881:	void clear_zone_contiguous(struct zone *);
806:	void destroy_large_folio(struct folio *);
3304:	void drain_all_pages(struct zone *);
3211:	void drain_local_pages(struct zone *);
3167:	void drain_zone_pages(struct zone *, struct per_cpu_pages *);
1789:	int early_pfn_to_nid(unsigned long);
6374:	int find_next_best_node(int, nodemask_t *);
2837:	int find_suitable_fallback(struct free_area *, unsigned int, int, bool, bool *);
8279:	void free_area_init(unsigned long *);
770:	void free_compound_page(struct page *);
9477:	void free_contig_range(unsigned long, unsigned long);
5642:	void free_pages(unsigned long, unsigned int);
5859:	void free_pages_exact(void *, size_t);
8463:	unsigned long free_reserved_area(void *, void *, int, const char *);
3456:	void free_unref_page(struct page *, unsigned int);
3498:	void free_unref_page_list(struct list_head *);
7342:	void get_pfn_range_for_nid(unsigned int, unsigned long *, unsigned long *);
563:	unsigned long get_pfnblock_flags_mask(const struct page *, unsigned long, unsigned long);
5606:	unsigned long get_zeroed_page(gfp_t);
4894:	bool gfp_pfmemalloc_allowed(gfp_t);
9696:	bool has_managed_dma(void);
2306:	void init_cma_reserved_pageblock(struct page *);
7309:	void init_currently_empty_zone(struct zone *, unsigned long, unsigned long);
889:	void init_mem_debugging_and_hardening(void);
8836:	int init_per_zone_wmark_min(void);
9581:	bool is_free_buddy_page(struct page *);
8956:	int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8499:	void mem_init_print_info(void);
1804:	void memblock_free_pages(struct page *, unsigned long, unsigned int);
7034:	void *memmap_alloc(phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
6727:	void memmap_init_range(unsigned long, int, unsigned long, unsigned long, unsigned long, enum meminit_context, struct vmem_altmap *, int);
8859:	int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2644:	int move_freepages_block(struct zone *, struct page *, int, int *);
7968:	unsigned long node_map_pfn_alignment(void);
5912:	unsigned long nr_free_buffer_pages(void);
6348:	int numa_zonelist_order_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8619:	void page_alloc_init(void);
2266:	void page_alloc_init_late(void);
5693:	void *page_frag_alloc_align(struct page_frag_cache *, unsigned int, gfp_t, unsigned int);
5769:	void page_frag_free(void *);
8977:	int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2466:	void post_alloc_hook(struct page *, unsigned int, gfp_t);
794:	void prep_compound_page(struct page *, unsigned int);
9673:	bool put_page_back_buddy(struct page *);
1670:	void reserve_bootmem_region(phys_addr_t, phys_addr_t);
8561:	void set_dma_reserve(unsigned long);
608:	void set_pageblock_migratetype(struct page *, int);
7651:	void set_pageblock_order(void);
582:	void set_pfnblock_flags_mask(struct page *, unsigned long, unsigned long, unsigned long);
1859:	void set_zone_contiguous(struct zone *);
7940:	void setup_nr_node_ids(void);
7264:	void setup_per_cpu_pageset(void);
8779:	void setup_per_zone_wmarks(void);
7228:	void setup_zone_pageset(struct zone *);
3933:	bool should_fail_alloc_page(gfp_t, unsigned int);
5924:	long si_mem_available(void);
5970:	void si_meminfo(struct sysinfo *);
5984:	void si_meminfo_node(struct sysinfo *, int);
1186:	int split_free_page(struct page *, unsigned int, unsigned long);
3588:	void split_page(struct page *, unsigned int);
8932:	int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8905:	int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9636:	bool take_page_off_buddy(struct page *);
4335:	void warn_alloc(gfp_t, nodemask_t *, const char *, ...);
8875:	int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9499:	void zone_pcp_disable(struct zone *);
9506:	void zone_pcp_enable(struct zone *);
9512:	void zone_pcp_reset(struct zone *);
4032:	bool zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int);
4083:	bool zone_watermark_ok_safe(struct zone *, unsigned int, unsigned long, int);
4476:	static struct page *__alloc_pages_direct_compact(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, enum compact_result *);
5015:	static struct page *__alloc_pages_slowpath(gfp_t, unsigned int, struct alloc_context *);
6584:	static void __build_all_zonelists(void *);
3231:	static void __drain_all_pages(struct zone *, bool);
1770:	static int __early_pfn_to_nid(unsigned long, struct mminit_pfnnid_cache *);
1092:	static void __free_one_page(struct page *, unsigned long, struct zone *, unsigned int, int, fpi_t);
1694:	static void __free_pages_ok(struct page *, unsigned int, fpi_t);
5663:	static struct page *__page_frag_cache_refill(struct page_frag_cache *, gfp_t);
3731:	static struct page *__rmqueue_pcplist(struct zone *, unsigned int, int, unsigned int, struct per_cpu_pages *, struct list_head *);
7391:	static void adjust_zone_range_for_zone_movable(int, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);
668:	static void bad_page(struct page *, const char *);
6631:	static void build_all_zonelists_init(void);
6466:	static void build_zonelists(pg_data_t *);
7538:	static void calculate_node_totalpages(struct pglist_data *, unsigned long, unsigned long);
8639:	static void calculate_totalreserve_pages(void);
2388:	static bool check_new_pages(struct page *, unsigned int);
8396:	static int cmdline_parse_core(char *, unsigned long *, unsigned long *);
8427:	static int cmdline_parse_kernelcore(char *);
8443:	static int cmdline_parse_movablecore(char *);
3199:	static void drain_pages(unsigned int);
8004:	static unsigned long early_calculate_totalpages(void);
258:	static int early_init_on_alloc(char *);
267:	static int early_init_on_free(char *);
8026:	static void find_zone_movable_pfns_for_nodes(void);
7780:	static void free_area_init_core(struct pglist_data *);
7900:	static void free_area_init_node(int);
1604:	static void free_one_page(struct zone *, struct page *, unsigned long, unsigned int, int, fpi_t);
1276:	static void free_page_is_bad_report(struct page *);
1533:	static void free_pcppages_bulk(struct zone *, int, struct per_cpu_pages *, int);
747:	static void free_the_page(struct page *, unsigned int);
3424:	static void free_unref_page_commit(struct zone *, struct per_cpu_pages *, struct page *, int, unsigned int);
3364:	static bool free_unref_page_prepare(struct page *, unsigned long, unsigned int);
4166:	static struct page *get_page_from_freelist(gfp_t, unsigned int, int, const struct alloc_context *);
6951:	static void init_unavailable_range(unsigned long, unsigned long, int, int);
6997:	static void memmap_init(void);
6973:	static void memmap_init_zone_range(struct zone *, unsigned long, unsigned long, unsigned long *);
6698:	static bool overlap_memmap_init(unsigned long, unsigned long *);
8566:	static int page_alloc_cpu_dead(unsigned int);
8597:	static int page_alloc_cpu_online(unsigned int);
7173:	static void per_cpu_pages_init(struct per_cpu_pages *, struct per_cpu_zonestat *);
7699:	static void pgdat_init_internals(struct pglist_data *);
2528:	static void prep_new_page(struct page *, unsigned int, gfp_t, unsigned int);
2872:	static void reserve_highatomic_pageblock(struct page *, struct zone *, unsigned int);
8609:	static int set_hashdist(char *);
8919:	static void setup_min_slab_ratio(void);
8891:	static void setup_min_unmapped_ratio(void);
8680:	static void setup_per_zone_lowmem_reserve(void);
2914:	static bool unreserve_highatomic_pageblock(const struct alloc_context *, bool);
4796:	static void wake_all_kswapds(unsigned int, gfp_t, const struct alloc_context *);
7488:	static unsigned long zone_absent_pages_in_node(int, unsigned long, unsigned long, unsigned long);
7211:	static void zone_set_pageset_high_and_batch(struct zone *, int);
7422:	static unsigned long zone_spanned_pages_in_node(int, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);

File mm/page_counter.c:
49:	void page_counter_cancel(struct page_counter *, unsigned long);
70:	void page_counter_charge(struct page_counter *, unsigned long);
246:	int page_counter_memparse(const char *, const char *, unsigned long *);
227:	void page_counter_set_low(struct page_counter *, unsigned long);
171:	int page_counter_set_max(struct page_counter *, unsigned long);
210:	void page_counter_set_min(struct page_counter *, unsigned long);
97:	bool page_counter_try_charge(struct page_counter *, unsigned long, struct page_counter **);
153:	void page_counter_uncharge(struct page_counter *, unsigned long);

File mm/page_io.c:
527:	void __swap_read_unplug(struct swap_iocb *);
336:	int __swap_writepage(struct page *, struct writeback_control *);
80:	int generic_swapfile_activate(struct swap_info_struct *, struct file *, sector_t *);
247:	int sio_pool_init(void);
448:	int swap_readpage(struct page *, bool, struct swap_iocb **);
373:	void swap_write_unplug(struct swap_iocb *);
181:	int swap_writepage(struct page *, struct writeback_control *);
211:	static void count_swpout_vm_event(struct page *);
55:	static void end_swap_bio_read(struct bio *);
31:	static void end_swap_bio_write(struct bio *);
385:	static void sio_read_complete(struct kiocb *, long);
260:	static void sio_write_complete(struct kiocb *, long);

File mm/page_isolation.c:
529:	int start_isolate_page_range(unsigned long, unsigned long, int, int, gfp_t);
635:	int test_pages_isolated(unsigned long, unsigned long, int);
577:	void undo_isolate_page_range(unsigned long, unsigned long, int);
305:	static int isolate_single_pageblock(unsigned long, int, gfp_t, bool, bool, int);
147:	static int set_migratetype_isolate(struct page *, int, int, unsigned long, unsigned long);
206:	static void unset_migratetype_isolate(struct page *, int);

File mm/page_reporting.c:
87:	void __page_reporting_notify(void);
352:	int page_reporting_register(struct page_reporting_dev_info *);
400:	void page_reporting_unregister(struct page_reporting_dev_info *);
17:	static int page_order_update_notify(const char *, const struct kernel_param *);
105:	static void page_reporting_drain(struct page_reporting_dev_info *, struct scatterlist *, unsigned int, bool);
307:	static void page_reporting_process(struct work_struct *);

File mm/page_vma_mapped.c:
300:	int page_mapped_in_vma(struct page *, struct vm_area_struct *);
151:	bool page_vma_mapped_walk(struct page_vma_mapped_walk *);
75:	static bool check_pte(struct page_vma_mapped_walk *);

File mm/pagewalk.c:
587:	int walk_page_mapping(struct address_space *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
427:	int walk_page_range(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
499:	int walk_page_range_novma(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, pgd_t *, void *);
520:	int walk_page_range_vma(struct vm_area_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
540:	int walk_page_vma(struct vm_area_struct *, const struct mm_walk_ops *, void *);
362:	static int __walk_page_range(unsigned long, unsigned long, struct mm_walk *);
248:	static int walk_pgd_range(unsigned long, unsigned long, struct mm_walk *);

File mm/percpu-vm.c:
333:	static struct pcpu_chunk *pcpu_create_chunk(gfp_t);
312:	static void pcpu_depopulate_chunk(struct pcpu_chunk *, int, int);
276:	static int pcpu_populate_chunk(struct pcpu_chunk *, int, int, gfp_t);

File mm/percpu.c:
1941:	void *__alloc_percpu(size_t, size_t);
1928:	void *__alloc_percpu_gfp(size_t, size_t, gfp_t);
1963:	void *__alloc_reserved_percpu(size_t, size_t);
2305:	bool __is_kernel_percpu_address(unsigned long, unsigned long *);
2254:	void free_percpu(void *);
2341:	bool is_kernel_percpu_address(unsigned long);
2428:	struct pcpu_alloc_info *pcpu_alloc_alloc_info(int, int);
3055:	int pcpu_embed_first_chunk(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *, pcpu_fc_cpu_to_node_fn_t *);
2463:	void pcpu_free_alloc_info(struct pcpu_alloc_info *);
3438:	unsigned long pcpu_nr_pages(void);
3250:	int pcpu_page_first_chunk(size_t, pcpu_fc_cpu_to_node_fn_t *);
3184:	void pcpu_populate_pte(unsigned long);
2579:	void pcpu_setup_first_chunk(const struct pcpu_alloc_info *, void *);
2369:	phys_addr_t per_cpu_ptr_to_phys(void *);
1719:	static void *pcpu_alloc(size_t, size_t, bool, gfp_t);
1216:	static int pcpu_alloc_area(struct pcpu_chunk *, int, size_t, int);
1345:	static struct pcpu_chunk *pcpu_alloc_first_chunk(unsigned long, int);
1979:	static void pcpu_balance_free(bool);
2224:	static void pcpu_balance_workfn(struct work_struct *);
774:	static void pcpu_block_refresh_hint(struct pcpu_chunk *, int);
630:	static void pcpu_block_update(struct pcpu_block_md *, int, int);
808:	static void pcpu_block_update_hint_alloc(struct pcpu_chunk *, int, int);
2844:	static struct pcpu_alloc_info *pcpu_build_alloc_info(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *);
745:	static void pcpu_chunk_refresh_hint(struct pcpu_chunk *, bool);
2475:	static void pcpu_dump_alloc_info(const char *, const struct pcpu_alloc_info *);
2986:	static void *pcpu_fc_alloc(unsigned int, size_t, size_t, pcpu_fc_cpu_to_node_fn_t *);
1110:	static int pcpu_find_block_fit(struct pcpu_chunk *, int, size_t, bool);
1276:	static int pcpu_free_area(struct pcpu_chunk *, int);
1644:	static void pcpu_memcg_post_alloc_hook(struct obj_cgroup *, struct pcpu_chunk *, int, size_t);
420:	static void pcpu_next_fit_region(struct pcpu_chunk *, int, int, int *, int *);
2784:	static int percpu_alloc_setup(char *);
3448:	static int percpu_enable_async(void);

File mm/pgtable-generic.c:
22:	void pgd_clear_bad(pgd_t *);
162:	void pgtable_trans_huge_deposit(struct mm_struct *, pmd_t *, pgtable_t);
178:	pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *, pmd_t *);
49:	void pmd_clear_bad(pmd_t *);
121:	int pmdp_clear_flush_young(struct vm_area_struct *, unsigned long, pmd_t *);
213:	pmd_t pmdp_collapse_flush(struct vm_area_struct *, unsigned long, pmd_t *);
134:	pmd_t pmdp_huge_clear_flush(struct vm_area_struct *, unsigned long, pmd_t *);
195:	pmd_t pmdp_invalidate(struct vm_area_struct *, unsigned long, pmd_t *);
205:	pmd_t pmdp_invalidate_ad(struct vm_area_struct *, unsigned long, pmd_t *);
91:	pte_t ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
37:	void pud_clear_bad(pud_t *);

File mm/process_vm_access.c:
291:	long __arm64_sys_process_vm_readv(const struct pt_regs *);
298:	long __arm64_sys_process_vm_writev(const struct pt_regs *);
253:	static ssize_t process_vm_rw(pid_t, const struct iovec *, unsigned long, const struct iovec *, unsigned long, unsigned long, int);

File mm/readahead.c:
761:	long __arm64_sys_readahead(const struct pt_regs *);
140:	void file_ra_state_init(struct file_ra_state *, struct address_space *);
307:	void force_page_cache_ra(struct readahead_control *, unsigned long);
735:	ssize_t ksys_readahead(int, loff_t, size_t);
713:	void page_cache_async_ra(struct readahead_control *, struct folio *, unsigned long);
500:	void page_cache_ra_order(struct readahead_control *, struct file_ra_state *, unsigned int);
206:	void page_cache_ra_unbounded(struct readahead_control *, unsigned long, unsigned long);
685:	void page_cache_sync_ra(struct readahead_control *, unsigned long);
791:	void readahead_expand(struct readahead_control *, loff_t, size_t);
282:	static void do_page_cache_ra(struct readahead_control *, unsigned long, unsigned long);
566:	static void ondemand_readahead(struct readahead_control *, struct folio *, unsigned long);
147:	static void read_pages(struct readahead_control *);

File mm/rmap.c:
187:	int __anon_vma_prepare(struct vm_area_struct *);
2363:	void __put_anon_vma(struct anon_vma *);
279:	int anon_vma_clone(struct vm_area_struct *, struct vm_area_struct *);
333:	int anon_vma_fork(struct vm_area_struct *, struct vm_area_struct *);
459:	void anon_vma_init(void);
492:	struct anon_vma *folio_get_anon_vma(struct folio *);
536:	struct anon_vma *folio_lock_anon_vma_read(struct folio *, struct rmap_walk_control *);
1031:	int folio_mkclean(struct folio *);
896:	int folio_referenced(struct folio *, int, struct mem_cgroup *, unsigned long *);
2543:	void hugepage_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, rmap_t);
2560:	void hugepage_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
773:	pmd_t *mm_find_pmd(struct mm_struct *, unsigned long);
1217:	void page_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, rmap_t);
1324:	void page_add_file_rmap(struct page *, struct vm_area_struct *, bool);
1291:	void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
747:	unsigned long page_address_in_vma(struct page *, struct vm_area_struct *);
1121:	void page_move_anon_rmap(struct page *, struct vm_area_struct *);
1381:	void page_remove_rmap(struct page *, struct vm_area_struct *, bool);
1068:	int pfn_mkclean_range(unsigned long, unsigned long, unsigned long, struct vm_area_struct *);
2514:	void rmap_walk(struct folio *, struct rmap_walk_control *);
2525:	void rmap_walk_locked(struct folio *, struct rmap_walk_control *);
1088:	int total_compound_mapcount(struct page *);
2140:	void try_to_migrate(struct folio *, enum ttu_flags);
1812:	void try_to_unmap(struct folio *, enum ttu_flags);
395:	void unlink_anon_vmas(struct vm_area_struct *);
1146:	static void __page_set_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, int);
450:	static void anon_vma_ctor(void *);
1796:	static int folio_not_mapped(struct folio *);
806:	static bool folio_referenced_one(struct folio *, struct vm_area_struct *, unsigned long, void *);
873:	static bool invalid_folio_referenced_vma(struct vm_area_struct *, void *);
1791:	static bool invalid_migration_vma(struct vm_area_struct *, void *);
1023:	static bool invalid_mkclean_vma(struct vm_area_struct *, void *);
1012:	static bool page_mkclean_one(struct folio *, struct vm_area_struct *, unsigned long, void *);
942:	static int page_vma_mkclean_one(struct page_vma_mapped_walk *);
2413:	static void rmap_walk_anon(struct folio *, struct rmap_walk_control *, bool);
2461:	static void rmap_walk_file(struct folio *, struct rmap_walk_control *, bool);
1833:	static bool try_to_migrate_one(struct folio *, struct vm_area_struct *, unsigned long, void *);
1462:	static bool try_to_unmap_one(struct folio *, struct vm_area_struct *, unsigned long, void *);

File mm/secretmem.c:
231:	long __arm64_sys_memfd_secret(const struct pt_regs *);
45:	bool secretmem_active(void);
137:	bool vma_is_secretmem(struct vm_area_struct *);
50:	static vm_fault_t secretmem_fault(struct vm_fault *);
153:	static void secretmem_free_folio(struct folio *);
279:	static int secretmem_init(void);
268:	static int secretmem_init_fs_context(struct fs_context *);
147:	static int secretmem_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
121:	static int secretmem_mmap(struct file *, struct vm_area_struct *);
115:	static int secretmem_release(struct inode *, struct file *);
165:	static int secretmem_setattr(struct user_namespace *, struct dentry *, struct iattr *);

File mm/shmem.c:
367:	bool shmem_charge(struct inode *, long);
4259:	struct file *shmem_file_setup(const char *, loff_t, unsigned long);
4272:	struct file *shmem_file_setup_with_mnt(struct vfsmount *, const char *, loff_t, unsigned long);
2048:	int shmem_get_folio(struct inode *, unsigned long, struct folio **, enum sgp_type);
2144:	unsigned long shmem_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
4048:	void shmem_init(void);
4020:	int shmem_init_fs_context(struct fs_context *);
471:	bool shmem_is_huge(struct vm_area_struct *, struct inode *, unsigned long, bool);
4248:	struct file *shmem_kernel_file_setup(const char *, loff_t, unsigned long);
2251:	int shmem_lock(struct file *, int, struct ucounts *);
803:	unsigned long shmem_partial_swap_usage(struct address_space *, unsigned long, unsigned long);
4321:	struct page *shmem_read_mapping_page_gfp(struct address_space *, unsigned long, gfp_t);
835:	unsigned long shmem_swap_usage(struct vm_area_struct *);
1040:	void shmem_truncate_range(struct inode *, loff_t, loff_t);
387:	void shmem_uncharge(struct inode *, long);
864:	void shmem_unlock_mapping(struct address_space *);
1283:	int shmem_unuse(unsigned int);
4283:	int shmem_zero_setup(struct vm_area_struct *);
243:	bool vma_is_anon_shmem(struct vm_area_struct *);
248:	bool vma_is_shmem(struct vm_area_struct *);
4205:	static struct file *__shmem_file_setup(struct vfsmount *, const char *, loff_t, unsigned long, unsigned int);
695:	static int shmem_add_to_page_cache(struct folio *, struct address_space *, unsigned long, void *, gfp_t, struct mm_struct *);
1575:	static struct folio *shmem_alloc_and_acct_folio(gfp_t, struct inode *, unsigned long, bool);
3862:	static struct inode *shmem_alloc_inode(struct super_block *);
2983:	static int shmem_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
3878:	static void shmem_destroy_inode(struct inode *);
4083:	static ssize_t shmem_enabled_show(struct kobject *, struct kobj_attribute *, char *);
4109:	static ssize_t shmem_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
3411:	static int shmem_encode_fh(struct inode *, __u32 *, int *, struct inode *);
3903:	static int shmem_error_remove_page(struct address_space *, struct page *);
1142:	static void shmem_evict_inode(struct inode *);
2734:	static long shmem_fallocate(struct file *, int, loff_t, loff_t);
2067:	static vm_fault_t shmem_fault(struct vm_fault *);
3388:	static struct dentry *shmem_fh_to_dentry(struct super_block *, struct fid *, int, int);
2714:	static loff_t shmem_file_llseek(struct file *, loff_t, int);
2595:	static ssize_t shmem_file_read_iter(struct kiocb *, struct iov_iter *);
3221:	static int shmem_fileattr_get(struct dentry *, struct fileattr *);
3230:	static int shmem_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
3750:	static int shmem_fill_super(struct super_block *, struct fs_context *);
3840:	static void shmem_free_fc(struct fs_context *);
3871:	static void shmem_free_in_core_inode(struct inode *);
1834:	static int shmem_get_folio_gfp(struct inode *, unsigned long, struct folio **, enum sgp_type, gfp_t, struct vm_area_struct *, struct vm_fault *, vm_fault_t *);
2330:	static struct inode *shmem_get_inode(struct super_block *, struct inode *, umode_t, dev_t, unsigned long);
3186:	static const char *shmem_get_link(struct dentry *, struct inode *, struct delayed_call *);
3366:	static struct dentry *shmem_get_parent(struct dentry *);
2240:	static struct mempolicy *shmem_get_policy(struct vm_area_struct *, unsigned long);
3835:	static int shmem_get_tree(struct fs_context *);
1048:	static int shmem_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
3884:	static void shmem_init_inode(void *);
2992:	static int shmem_link(struct dentry *, struct inode *, struct dentry *);
3343:	static ssize_t shmem_listxattr(struct dentry *, char *, size_t);
3371:	static int shmem_match(struct inode *, void *);
2971:	static int shmem_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
2916:	static int shmem_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
2279:	static int shmem_mmap(struct file *, struct vm_area_struct *);
3482:	static int shmem_parse_one(struct fs_context *, struct fs_parameter *);
3571:	static int shmem_parse_options(struct fs_context *, void *);
3180:	static void shmem_put_link(void *);
3739:	static void shmem_put_super(struct super_block *);
354:	static void shmem_recalc_inode(struct inode *);
3622:	static int shmem_reconfigure(struct fs_context *);
3079:	static int shmem_rename2(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
1623:	static int shmem_replace_folio(struct folio **, gfp_t, struct shmem_inode_info *, unsigned long);
3036:	static int shmem_rmdir(struct inode *, struct dentry *);
2234:	static int shmem_set_policy(struct vm_area_struct *, struct mempolicy *);
1083:	static int shmem_setattr(struct user_namespace *, struct dentry *, struct iattr *);
3688:	static int shmem_show_options(struct seq_file *, struct dentry *);
2888:	static int shmem_statfs(struct dentry *, struct kstatfs *);
1728:	static int shmem_swapin_folio(struct inode *, unsigned long, struct folio **, enum sgp_type, gfp_t, struct vm_area_struct *, vm_fault_t *);
3125:	static int shmem_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
2947:	static int shmem_tmpfile(struct user_namespace *, struct inode *, struct file *, umode_t);
906:	static void shmem_undo_range(struct inode *, loff_t, loff_t, bool);
3021:	static int shmem_unlink(struct inode *, struct dentry *);
669:	static long shmem_unused_huge_count(struct super_block *, struct shrink_control *);
658:	static long shmem_unused_huge_scan(struct super_block *, struct shrink_control *);
546:	static unsigned long shmem_unused_huge_shrink(struct shmem_sb_info *, struct shrink_control *, unsigned long);
2524:	static int shmem_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
2560:	static int shmem_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1326:	static int shmem_writepage(struct page *, struct writeback_control *);
3293:	static int shmem_xattr_handler_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);
3303:	static int shmem_xattr_handler_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
2060:	static int synchronous_wake_function(wait_queue_entry_t *, unsigned int, int, void *);

File mm/slab.h:
661:	static struct kmem_cache *cache_from_obj(struct kmem_cache *, void *);
731:	static void slab_post_alloc_hook(struct kmem_cache *, struct obj_cgroup *, gfp_t, size_t, void **, bool, unsigned int);
713:	static struct kmem_cache *slab_pre_alloc_hook(struct kmem_cache *, struct list_lru *, struct obj_cgroup **, size_t, gfp_t);

File mm/slab_common.c:
979:	void *__kmalloc(size_t, gfp_t);
973:	void *__kmalloc_node(size_t, gfp_t, int);
985:	void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
1036:	size_t __ksize(const void *);
630:	void create_boot_cache(struct kmem_cache *, const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
662:	struct kmem_cache *create_kmalloc_cache(const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
901:	void create_kmalloc_caches(slab_flags_t);
1268:	void dump_unreclaimable_slab(void);
160:	struct kmem_cache *find_mergeable(unsigned int, unsigned int, slab_flags_t, const char *, void (*)(void *));
932:	void free_large_kmalloc(struct folio *, void *);
1001:	void kfree(const void *);
1417:	void kfree_sensitive(const void *);
1085:	gfp_t kmalloc_fix_flags(gfp_t);
1128:	void *kmalloc_large(size_t, gfp_t);
1138:	void *kmalloc_large_node(size_t, gfp_t, int);
1072:	void *kmalloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);
744:	size_t kmalloc_size_roundup(size_t);
726:	struct kmem_cache *kmalloc_slab(size_t, gfp_t);
1060:	void *kmalloc_trace(struct kmem_cache *, gfp_t, size_t);
392:	struct kmem_cache *kmem_cache_create(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
278:	struct kmem_cache *kmem_cache_create_usercopy(const char *, unsigned int, unsigned int, slab_flags_t, unsigned int, unsigned int, void (*)(void *));
480:	void kmem_cache_destroy(struct kmem_cache *);
517:	int kmem_cache_shrink(struct kmem_cache *);
83:	unsigned int kmem_cache_size(struct kmem_cache *);
573:	void kmem_dump_obj(void *);
539:	bool kmem_valid_obj(void *);
1389:	void *krealloc(const void *, size_t, gfp_t);
1431:	size_t ksize(const void *);
832:	void setup_kmalloc_cache_index_table(void);
1461:	int should_failslab(struct kmem_cache *, gfp_t);
525:	bool slab_is_available(void);
473:	void slab_kmem_cache_release(struct kmem_cache *);
138:	int slab_unmergeable(struct kmem_cache *);
1103:	static void *__kmalloc_large_node(size_t, gfp_t, int);
869:	static void new_kmalloc_cache(int, enum kmalloc_cache_type, slab_flags_t);
66:	static int setup_slab_merge(char *);
60:	static int setup_slab_nomerge(char *);
422:	static void slab_caches_to_rcu_destroy_workfn(struct work_struct *);
1229:	static void *slab_next(struct seq_file *, void *, loff_t *);
1336:	static int slab_proc_init(void);
1258:	static int slab_show(struct seq_file *, void *);
1223:	static void *slab_start(struct seq_file *, loff_t *);
1234:	static void slab_stop(struct seq_file *, void *);
1322:	static int slabinfo_open(struct inode *, struct file *);

File mm/slub.c:
5063:	struct kmem_cache *__kmem_cache_alias(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
3487:	void *__kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int, size_t, unsigned long);
5086:	int __kmem_cache_create(struct kmem_cache *, slab_flags_t);
4595:	bool __kmem_cache_empty(struct kmem_cache *);
3798:	void __kmem_cache_free(struct kmem_cache *, void *, unsigned long);
4278:	void __kmem_cache_release(struct kmem_cache *);
4838:	int __kmem_cache_shrink(struct kmem_cache *);
4609:	int __kmem_cache_shutdown(struct kmem_cache *);
4625:	void __kmem_obj_info(struct kmem_obj_info *, void *, struct slab *);
6450:	void debugfs_slab_release(struct kmem_cache *);
223:	void *fixup_red_left(struct kmem_cache *, void *);
6474:	void get_slabinfo(struct kmem_cache *, struct slabinfo *);
3474:	void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
4012:	int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
3480:	void *kmem_cache_alloc_lru(struct kmem_cache *, struct list_lru *, gfp_t);
3495:	void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int);
1639:	slab_flags_t kmem_cache_flags(unsigned int, slab_flags_t, const char *);
3803:	void kmem_cache_free(struct kmem_cache *, void *);
3893:	void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
4999:	void kmem_cache_init(void);
5054:	void kmem_cache_init_late(void);
815:	void print_tracking(struct kmem_cache *, void *);
878:	void skip_orig_size_check(struct kmem_cache *, const void *);
6496:	void slabinfo_show_stats(struct seq_file *, struct kmem_cache *);
6500:	ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);
6174:	void sysfs_slab_release(struct kmem_cache *);
6168:	void sysfs_slab_unlink(struct kmem_cache *);
5180:	long validate_slab_cache(struct kmem_cache *);
3065:	static void *___slab_alloc(struct kmem_cache *, gfp_t, int, unsigned long, struct kmem_cache_cpu *, unsigned int);
522:	static bool __cmpxchg_double_slab(struct kmem_cache *, struct slab *, void *, unsigned long, void *, unsigned long, const char *);
2055:	static void __free_slab(struct kmem_cache *, struct slab *);
4776:	static int __kmem_cache_do_shrink(struct kmem_cache *);
3574:	static void __slab_free(struct kmem_cache *, struct slab *, void *, void *, int, unsigned long);
2582:	static void __unfreeze_partials(struct kmem_cache *, struct slab *);
5597:	static ssize_t aliases_show(struct kmem_cache *, char *);
5517:	static ssize_t align_show(struct kmem_cache *, char *);
1421:	static bool alloc_debug_processing(struct kmem_cache *, struct slab *, void *, int);
4970:	static struct kmem_cache *bootstrap(struct kmem_cache *);
5681:	static ssize_t cache_dma_show(struct kmem_cache *, char *);
4349:	static int calculate_sizes(struct kmem_cache *);
1032:	static int check_bytes_and_report(struct kmem_cache *, struct slab *, u8 *, char *, u8 *, unsigned int, unsigned int);
1161:	static int check_object(struct kmem_cache *, struct slab *, void *, u8);
1229:	static int check_slab(struct kmem_cache *, struct slab *);
6338:	static int cmp_loc_by_count(const void *, const void *, const void *);
560:	static bool cmpxchg_double_slab(struct kmem_cache *, struct slab *, void *, unsigned long, void *, unsigned long, const char *);
5561:	static ssize_t cpu_partial_show(struct kmem_cache *, char *);
5571:	static ssize_t cpu_partial_store(struct kmem_cache *, const char *, size_t);
5609:	static ssize_t cpu_slabs_show(struct kmem_cache *, char *);
5589:	static ssize_t ctor_show(struct kmem_cache *, char *);
2474:	static void deactivate_slab(struct kmem_cache *, struct slab *, void *);
5696:	static ssize_t destroy_by_rcu_show(struct kmem_cache *, char *);
2095:	static void discard_slab(struct kmem_cache *, struct slab *);
2805:	static void flush_all_cpus_locked(struct kmem_cache *);
2778:	static void flush_cpu_slab(struct work_struct *);
2079:	static void free_slab(struct kmem_cache *, struct slab *);
3505:	static void free_to_partial_list(struct kmem_cache *, struct slab *, void *, void *, int, unsigned long);
2254:	static void *get_partial_node(struct kmem_cache *, struct kmem_cache_node *, struct partial_context *);
5674:	static ssize_t hwcache_align_show(struct kmem_cache *, char *);
1360:	static void inc_slabs_node(struct kmem_cache *, int, int);
6051:	static void kmem_cache_release(struct kobject *);
5541:	static ssize_t min_partial_show(struct kmem_cache *, char *);
5546:	static ssize_t min_partial_store(struct kmem_cache *, const char *, size_t);
2044:	static struct slab *new_slab(struct kmem_cache *, gfp_t, int);
5523:	static ssize_t object_size_show(struct kmem_cache *, char *);
5621:	static ssize_t objects_partial_show(struct kmem_cache *, char *);
5615:	static ssize_t objects_show(struct kmem_cache *, char *);
5529:	static ssize_t objs_per_slab_show(struct kmem_cache *, char *);
1258:	static int on_freelist(struct kmem_cache *, struct slab *, void *);
5535:	static ssize_t order_show(struct kmem_cache *, char *);
1492:	static char *parse_slub_debug_flags(char *, slab_flags_t *, char **, bool);
5603:	static ssize_t partial_show(struct kmem_cache *, char *);
5734:	static ssize_t poison_show(struct kmem_cache *, char *);
913:	static void print_trailer(struct kmem_cache *, struct slab *, u8 *);
5349:	static void process_slab(struct loc_track *, struct kmem_cache *, struct slab *, enum track_item, unsigned long *);
2678:	static void put_cpu_partial(struct kmem_cache *, struct slab *, int);
2072:	static void rcu_free_slab(struct callback_head *);
5668:	static ssize_t reclaim_account_show(struct kmem_cache *, char *);
5727:	static ssize_t red_zone_show(struct kmem_cache *, char *);
5808:	static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *, char *);
5813:	static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *, const char *, size_t);
5715:	static ssize_t sanity_checks_show(struct kmem_cache *, char *);
745:	static depot_stack_handle_t set_track_prepare(void);
1569:	static int setup_slub_debug(char *);
4696:	static int setup_slub_max_order(char *);
4706:	static int setup_slub_min_objects(char *);
4687:	static int setup_slub_min_order(char *);
5383:	static ssize_t show_slab_objects(struct kmem_cache *, char *, unsigned long);
5791:	static ssize_t shrink_show(struct kmem_cache *, char *);
5796:	static ssize_t shrink_store(struct kmem_cache *, const char *, size_t);
6019:	static ssize_t slab_attr_show(struct kobject *, struct attribute *, char *);
6035:	static ssize_t slab_attr_store(struct kobject *, struct attribute *, const char *, size_t);
883:	static void slab_bug(struct kmem_cache *, char *, ...);
6364:	static int slab_debug_trace_open(struct inode *, struct file *);
6418:	static int slab_debug_trace_release(struct inode *, struct file *);
6455:	static int slab_debugfs_init(void);
6327:	static void *slab_debugfs_next(struct seq_file *, void *, loff_t *);
6257:	static int slab_debugfs_show(struct seq_file *, void *);
6349:	static void *slab_debugfs_start(struct seq_file *, loff_t *);
6323:	static void slab_debugfs_stop(struct seq_file *, void *);
980:	static void slab_err(struct kmem_cache *, struct slab *, const char *, ...);
898:	static void slab_fix(struct kmem_cache *, char *, ...);
2965:	static void slab_out_of_memory(struct kmem_cache *, gfp_t, int);
1126:	static void slab_pad_check(struct kmem_cache *, struct slab *);
5511:	static ssize_t slab_size_show(struct kmem_cache *, char *);
6216:	static int slab_sysfs_init(void);
5627:	static ssize_t slabs_cpu_partial_show(struct kmem_cache *, char *);
5703:	static ssize_t slabs_show(struct kmem_cache *, char *);
2846:	static int slub_cpu_dead(unsigned int);
5741:	static ssize_t store_user_show(struct kmem_cache *, char *);
6117:	static int sysfs_slab_add(struct kmem_cache *);
5709:	static ssize_t total_objects_show(struct kmem_cache *, char *);
5721:	static ssize_t trace_show(struct kmem_cache *, char *);
5748:	static ssize_t validate_show(struct kmem_cache *, char *);
5123:	static void validate_slab(struct kmem_cache *, struct slab *, unsigned long *);
5753:	static ssize_t validate_store(struct kmem_cache *, const char *, size_t);

File mm/sparse-vmemmap.c:
449:	struct page *__populate_section_memmap(unsigned long, unsigned long, int, struct vmem_altmap *, struct dev_pagemap *);
199:	void pmd_init(void *);
216:	void pud_init(void *);
49:	void *vmemmap_alloc_block(unsigned long, int);
77:	void *vmemmap_alloc_block_buf(unsigned long, int, struct vmem_altmap *);
303:	int vmemmap_check_pmd(pmd_t *, int, unsigned long, unsigned long);
220:	p4d_t *vmemmap_p4d_populate(pgd_t *, unsigned long, int);
233:	pgd_t *vmemmap_pgd_populate(unsigned long, int);
187:	pmd_t *vmemmap_pmd_populate(pud_t *, unsigned long, int);
292:	int vmemmap_populate_basepages(unsigned long, unsigned long, int, struct vmem_altmap *);
309:	int vmemmap_populate_hugepages(unsigned long, unsigned long, int, struct vmem_altmap *);
144:	pte_t *vmemmap_pte_populate(pmd_t *, unsigned long, int, struct vmem_altmap *, struct page *);
203:	pud_t *vmemmap_pud_populate(p4d_t *, unsigned long, int);
298:	void vmemmap_set_pmd(pmd_t *, void *, int, unsigned long, unsigned long);
133:	void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
40:	static void *__earlyonly_bootmem_alloc(int, unsigned long, unsigned long, unsigned long);
106:	static void *altmap_alloc_block_buf(unsigned long, struct vmem_altmap *);
381:	static pte_t *compound_section_tail_page(unsigned long);
245:	static pte_t *vmemmap_populate_address(unsigned long, int, struct vmem_altmap *, struct page *);
398:	static int vmemmap_populate_compound_pages(unsigned long, unsigned long, unsigned long, int, struct dev_pagemap *);

File mm/sparse.c:
316:	size_t mem_section_usage_size(void);
480:	void *sparse_buffer_alloc(unsigned long);
559:	void sparse_init(void);
194:	void subsection_map_init(unsigned long, unsigned long);
498:	void vmemmap_populate_print_last(void);
266:	static void memblocks_present(void);
226:	static void memory_present(int, unsigned long, unsigned long);
129:	static void mminit_validate_memmodel_limits(unsigned long *, unsigned long *);
471:	static void sparse_buffer_fini(void);
458:	static void sparse_buffer_init(unsigned long, int);
63:	static struct mem_section *sparse_index_alloc(int);
506:	static void sparse_init_nid(int, unsigned long, unsigned long, unsigned long);

File mm/swap.c:
122:	void __folio_put(struct folio *);
1090:	void __pagevec_release(struct pagevec *);
720:	void deactivate_file_folio(struct folio *);
743:	void deactivate_page(struct page *);
382:	void folio_activate(struct folio *);
531:	void folio_add_lru(struct folio *);
560:	void folio_add_lru_vma(struct folio *, struct vm_area_struct *);
1110:	void folio_batch_remove_exceptionals(struct folio_batch *);
488:	void folio_mark_accessed(struct folio *);
284:	void folio_rotate_reclaimable(struct folio *);
174:	int get_kernel_pages(const struct kvec *, int, int, struct page **);
783:	void lru_add_drain(void);
937:	void lru_add_drain_all(void);
676:	void lru_add_drain_cpu(int);
806:	void lru_add_drain_cpu_zone(struct zone *);
958:	void lru_cache_disable(void);
299:	void lru_note_cost(struct lruvec *, bool, unsigned int, unsigned int);
351:	void lru_note_cost_refault(struct folio *);
766:	void mark_page_lazyfree(struct page *);
1122:	unsigned int pagevec_lookup_range_tag(struct pagevec *, struct address_space *, unsigned long *, unsigned long, xa_mark_t);
139:	void put_pages_list(struct list_head *);
994:	void release_pages(release_pages_arg, int);
1135:	void swap_setup(void);
109:	static void __folio_put_large(struct folio *);
846:	static void __lru_add_drain_all(bool);
81:	static void __page_cache_release(struct folio *);
357:	static void folio_activate_fn(struct lruvec *, struct folio *);
233:	static void folio_batch_move_lru(struct folio_batch *, move_fn_t);
819:	static void lru_add_drain_per_cpu(struct work_struct *);
193:	static void lru_add_fn(struct lruvec *, struct folio *);
591:	static void lru_deactivate_file_fn(struct lruvec *, struct folio *);
632:	static void lru_deactivate_fn(struct lruvec *, struct folio *);
648:	static void lru_lazyfree_fn(struct lruvec *, struct folio *);
267:	static void lru_move_tail_fn(struct lruvec *, struct folio *);

File mm/swap_cgroup.c:
162:	unsigned short lookup_swap_cgroup_id(swp_entry_t);
97:	unsigned short swap_cgroup_cmpxchg(swp_entry_t, unsigned short, unsigned short);
126:	unsigned short swap_cgroup_record(swp_entry_t, unsigned short, unsigned int);
204:	void swap_cgroup_swapoff(int);
167:	int swap_cgroup_swapon(int, unsigned long);

File mm/swap_slots.c:
68:	void disable_swap_slots_cache_lock(void);
238:	void enable_swap_slots_cache(void);
302:	swp_entry_t folio_alloc_swap(struct folio *);
272:	void free_swap_slot(swp_entry_t);
85:	void reenable_swap_slots_cache_unlock(void);
113:	static int alloc_swap_slot_cache(unsigned int);
168:	static void drain_slots_cache_cpu(unsigned int, unsigned int, bool);
230:	static int free_slot_cache(unsigned int);

File mm/swap_state.c:
139:	void __delete_from_swap_cache(struct folio *, swp_entry_t, void *);
409:	struct page *__read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool *);
174:	bool add_to_swap(struct folio *);
88:	int add_to_swap_cache(struct folio *, swp_entry_t, gfp_t, void **);
244:	void clear_shadow_from_swap_cache(int, unsigned long, unsigned long);
231:	void delete_from_swap_cache(struct folio *);
684:	void exit_swap_address_space(unsigned int);
382:	struct folio *filemap_get_incore_folio(struct address_space *, unsigned long);
295:	void free_page_and_swap_cache(struct page *);
306:	void free_pages_and_swap_cache(struct encoded_page **, int);
280:	void free_swap_cache(struct page *);
72:	void *get_shadow_from_swap_cache(swp_entry_t);
661:	int init_swap_address_space(unsigned int, unsigned long);
513:	struct page *read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool, struct swap_iocb **);
64:	void show_swap_cache_info(void);
325:	struct folio *swap_cache_get_folio(swp_entry_t, struct vm_area_struct *, unsigned long);
607:	struct page *swap_cluster_readahead(swp_entry_t, gfp_t, struct vm_fault *);
847:	struct page *swapin_readahead(swp_entry_t, gfp_t, struct vm_fault *);
885:	static int swap_init_sysfs(void);
856:	static ssize_t vma_ra_enabled_show(struct kobject *, struct kobj_attribute *, char *);
862:	static ssize_t vma_ra_enabled_store(struct kobject *, struct kobj_attribute *, const char *, size_t);

File mm/swapfile.c:
2381:	long __arm64_sys_swapoff(const struct pt_regs *);
2976:	long __arm64_sys_swapon(const struct pt_regs *);
3631:	void __cgroup_throttle_swaprate(struct page *, gfp_t);
3394:	unsigned long __page_file_index(struct page *);
1434:	int __swap_count(swp_entry_t);
1470:	int __swp_swapcount(swp_entry_t);
3416:	int add_swap_count_continuation(swp_entry_t, gfp_t);
2179:	int add_swap_extent(struct swap_info_struct *, unsigned long, unsigned long, sector_t);
2814:	unsigned long arch_max_swapfile_size(void);
1579:	bool folio_free_swap(struct folio *);
1617:	int free_swap_and_cache(swp_entry_t);
2807:	unsigned long generic_max_swapfile_size(void);
1251:	struct swap_info_struct *get_swap_device(swp_entry_t);
1046:	int get_swap_pages(int, swp_entry_t *, int);
2370:	bool has_usable_swap(void);
3379:	struct swap_info_struct *page_swap_info(struct page *);
1335:	void put_swap_folio(struct folio *, swp_entry_t);
3246:	void si_swapinfo(struct sysinfo *);
1383:	int split_swap_cluster(swp_entry_t);
3352:	int swap_duplicate(swp_entry_t);
1323:	void swap_free(swp_entry_t);
228:	sector_t swap_page_sector(struct page *);
3340:	void swap_shmem_alloc(swp_entry_t);
1406:	void swapcache_free_entries(swp_entry_t *, int);
3388:	struct address_space *swapcache_mapping(struct folio *);
3369:	int swapcache_prepare(swp_entry_t);
3374:	struct swap_info_struct *swp_swap_info(swp_entry_t);
1487:	int swp_swapcount(swp_entry_t);
3274:	static int __swap_duplicate(swp_entry_t, unsigned char);
1286:	static unsigned char __swap_entry_free(struct swap_info_struct *, swp_entry_t);
131:	static int __try_to_reclaim_swap(struct swap_info_struct *, unsigned long, unsigned long);
2316:	static void _enable_swap_info(struct swap_info_struct *);
537:	static void free_cluster(struct swap_info_struct *, unsigned long);
2690:	static int max_swapfiles_check(void);
2681:	static int procswaps_init(void);
624:	static bool scan_swap_map_try_ssd_cluster(struct swap_info_struct *, unsigned long *, unsigned long *);
3528:	static bool swap_count_continued(struct swap_info_struct *, unsigned long, unsigned char);
509:	static void swap_discard_work(struct work_struct *);
486:	static void swap_do_scheduled_discard(struct swap_info_struct *);
2599:	static void *swap_next(struct seq_file *, void *, loff_t *);
1529:	static bool swap_page_trans_huge_swapped(struct swap_info_struct *, swp_entry_t);
693:	static void swap_range_alloc(struct swap_info_struct *, unsigned long, unsigned int);
722:	static void swap_range_free(struct swap_info_struct *, unsigned long, unsigned int);
2624:	static int swap_show(struct seq_file *, void *);
2578:	static void *swap_start(struct seq_file *, loff_t *);
2619:	static void swap_stop(struct seq_file *, void *);
520:	static void swap_users_ref_free(struct percpu_ref *);
3661:	static int swapfile_init(void);
2658:	static int swaps_open(struct inode *, struct file *);
2563:	static __poll_t swaps_poll(struct file *, poll_table *);
1399:	static int swp_entry_cmp(const void *, const void *);

File mm/truncate.c:
154:	void folio_invalidate(struct folio *, size_t, size_t);
254:	int generic_error_remove_page(struct address_space *, struct page *);
295:	long invalidate_inode_page(struct page *);
707:	int invalidate_inode_pages2(struct address_space *);
620:	int invalidate_inode_pages2_range(struct address_space *, unsigned long, unsigned long);
556:	unsigned long invalidate_mapping_pages(struct address_space *, unsigned long, unsigned long);
498:	unsigned long invalidate_mapping_pagevec(struct address_space *, unsigned long, unsigned long, unsigned long *);
791:	void pagecache_isize_extended(struct inode *, loff_t, loff_t);
190:	int truncate_inode_folio(struct address_space *, struct folio *);
446:	void truncate_inode_pages(struct address_space *, loff_t);
461:	void truncate_inode_pages_final(struct address_space *);
330:	void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);
211:	bool truncate_inode_partial_folio(struct folio *, loff_t, loff_t);
728:	void truncate_pagecache(struct inode *, loff_t);
836:	void truncate_pagecache_range(struct inode *, loff_t, loff_t);
761:	void truncate_setsize(struct inode *, loff_t);
43:	static void clear_shadow_entry(struct address_space *, unsigned long, void *);
173:	static void truncate_cleanup_folio(struct folio *);
60:	static void truncate_folio_batch_exceptionals(struct address_space *, struct folio_batch *, unsigned long *);

File mm/util.c:
448:	int __account_locked_vm(struct mm_struct *, unsigned long, bool, struct task_struct *, bool);
697:	void *__vcalloc(size_t, size_t, gfp_t);
911:	int __vm_enough_memory(struct mm_struct *, long, int);
670:	void *__vmalloc_array(size_t, size_t, gfp_t);
491:	int account_locked_vm(struct mm_struct *, unsigned long, bool);
357:	unsigned long arch_mmap_rnd(void);
410:	void arch_pick_mmap_layout(struct mm_struct *, struct rlimit *);
348:	unsigned long arch_randomize_brk(struct mm_struct *);
1106:	void flush_dcache_folio(struct folio *);
720:	struct anon_vma *folio_anon_vma(struct folio *);
770:	void folio_copy(struct folio *, struct folio *);
741:	struct address_space *folio_mapping(struct folio *);
965:	int get_cmdline(struct task_struct *, char *, int);
38:	void kfree_const(const void *);
125:	void *kmemdup(const void *, size_t, gfp_t);
145:	char *kmemdup_nul(const char *, size_t, gfp_t);
52:	char *kstrdup(const char *, gfp_t);
79:	const char *kstrdup_const(const char *, gfp_t);
98:	char *kstrndup(const char *, size_t, gfp_t);
622:	void kvfree(const void *);
640:	void kvfree_sensitive(const void *, size_t);
559:	void *kvmalloc_node(size_t, gfp_t, int);
649:	void *kvrealloc(const void *, size_t, size_t, gfp_t);
1039:	void mem_dump_obj(void *);
1014:	int memcmp_pages(struct page *, struct page *);
170:	void *memdup_user(const void *, size_t);
252:	void *memdup_user_nul(const void *, size_t);
842:	int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
806:	int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
790:	int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1093:	void page_offline_begin(void);
1099:	void page_offline_end(void);
1083:	void page_offline_freeze(void);
1088:	void page_offline_thaw(void);
715:	void *page_rmapping(struct page *);
329:	unsigned long randomize_page(unsigned long, unsigned long);
299:	unsigned long randomize_stack_top(unsigned long);
220:	char *strndup_user(const char *, long);
708:	void *vcalloc(size_t, size_t);
856:	unsigned long vm_commit_limit(void);
889:	unsigned long vm_memory_committed(void);
530:	unsigned long vm_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
507:	unsigned long vm_mmap_pgoff(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
276:	int vma_is_stack_for_current(struct vm_area_struct *);
286:	void vma_set_file(struct vm_area_struct *, struct file *);
685:	void *vmalloc_array(size_t, size_t);
196:	void *vmemdup_user(const void *, size_t);
801:	static void sync_overcommit_as(struct work_struct *);

File mm/vmalloc.c:
2538:	struct vm_struct *__get_vm_area_caller(unsigned long, unsigned long, unsigned long, unsigned long, const void *);
3304:	void *__vmalloc(unsigned long, gfp_t);
3289:	void *__vmalloc_node(unsigned long, unsigned long, gfp_t, int, const void *);
3142:	void *__vmalloc_node_range(unsigned long, unsigned long, unsigned long, unsigned long, gfp_t, pgprot_t, unsigned long, int, const void *);
590:	int __vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
425:	void __vunmap_range_noflush(unsigned long, unsigned long);
2583:	struct vm_struct *find_vm_area(const void *);
1863:	struct vmap_area *find_vmap_area(unsigned long);
3688:	void free_vm_area(struct vm_struct *);
2557:	struct vm_struct *get_vm_area(unsigned long, unsigned long);
2565:	struct vm_struct *get_vm_area_caller(unsigned long, unsigned long, const void *);
318:	int ioremap_page_range(unsigned long, unsigned long, phys_addr_t, pgprot_t);
78:	bool is_vmalloc_addr(const void *);
645:	int is_vmalloc_or_module_addr(const void *);
4035:	void pcpu_free_vm_areas(struct vm_struct **, int);
3789:	struct vm_struct **pcpu_get_vm_areas(const unsigned long *, const size_t *, int, size_t);
1678:	int register_vmap_purge_notifier(struct notifier_block *);
3679:	int remap_vmalloc_range(struct vm_area_struct *, void *, unsigned long);
3619:	int remap_vmalloc_range_partial(struct vm_area_struct *, unsigned long, void *, unsigned long, unsigned long);
2604:	struct vm_struct *remove_vm_area(const void *);
1684:	int unregister_vmap_purge_notifier(struct notifier_block *);
2795:	void vfree(const void *);
2759:	void vfree_atomic(const void *);
2330:	void vm_area_add_early(struct vm_struct *);
2358:	void vm_area_register_early(struct vm_struct *, size_t);
2261:	void *vm_map_ram(struct page **, unsigned int, int);
2205:	void vm_unmap_aliases(void);
2219:	void vm_unmap_ram(const void *, unsigned int);
3323:	void *vmalloc(unsigned long);
3447:	void *vmalloc_32(unsigned long);
3463:	void *vmalloc_32_user(unsigned long);
4046:	bool vmalloc_dump_obj(void *);
3342:	void *vmalloc_huge(unsigned long, gfp_t);
2419:	void vmalloc_init(void);
3401:	void *vmalloc_node(unsigned long, int);
807:	unsigned long vmalloc_nr_pages(void);
665:	struct page *vmalloc_to_page(const void *);
725:	unsigned long vmalloc_to_pfn(const void *);
3379:	void *vmalloc_user(unsigned long);
2843:	void *vmap(struct page **, unsigned int, unsigned long, pgprot_t);
616:	int vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
3537:	long vread(char *, char *, unsigned long);
2819:	void vunmap(const void *);
462:	void vunmap_range(unsigned long, unsigned long);
447:	void vunmap_range_noflush(unsigned long, unsigned long);
3363:	void *vzalloc(unsigned long);
3419:	void *vzalloc_node(unsigned long, int);
2490:	static struct vm_struct *__get_vm_area_node(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, int, gfp_t, const void *);
1730:	static bool __purge_vmap_area_lazy(unsigned long, unsigned long);
2738:	static void __vfree_deferred(const void *);
2690:	static void __vunmap(const void *, int);
2152:	static void _vm_unmap_aliases(unsigned long, unsigned long, int);
1589:	static struct vmap_area *alloc_vmap_area(unsigned long, unsigned long, unsigned long, unsigned long, int, gfp_t);
1803:	static void drain_vmap_area_work(struct work_struct *);
1853:	static void free_unmap_vmap_area(struct vmap_area *);
1822:	static void free_vmap_area_noflush(struct vmap_area *);
797:	static void free_vmap_area_rb_augment_cb_rotate(struct rb_node *, struct rb_node *);
94:	static void free_work(struct work_struct *);
1085:	static void insert_vmap_area(struct vmap_area *, struct rb_root *, struct list_head *);
1097:	static void insert_vmap_area_augment(struct vmap_area *, struct rb_node *, struct rb_root *, struct list_head *);
4192:	static int proc_vmalloc_init(void);
2057:	static void purge_fragmented_blocks_allcpus(void);
1795:	static void purge_vmap_area_lazy(void);
4071:	static void *s_next(struct seq_file *, void *, loff_t *);
4121:	static int s_show(struct seq_file *, void *);
4061:	static void *s_start(struct seq_file *, loff_t *);
4076:	static void s_stop(struct seq_file *, void *);
55:	static int set_nohugeiomap(char *);
68:	static int set_nohugevmalloc(char *);
289:	static int vmap_range_noflush(unsigned long, unsigned long, phys_addr_t, pgprot_t, unsigned int);

File mm/vmpressure.c:
239:	void vmpressure(gfp_t, struct mem_cgroup *, bool, unsigned long, unsigned long);
466:	void vmpressure_cleanup(struct vmpressure *);
451:	void vmpressure_init(struct vmpressure *);
327:	void vmpressure_prio(gfp_t, struct mem_cgroup *, int);
366:	int vmpressure_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
427:	void vmpressure_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
180:	static void vmpressure_work_fn(struct work_struct *);

File mm/vmscan.c:
1211:	void __acct_reclaim_writeback(pg_data_t *, struct folio *, int);
283:	int alloc_shrinker_info(struct mem_cgroup *);
7760:	void check_move_unevictable_folios(struct folio_batch *);
7734:	void check_move_unevictable_pages(struct pagevec *);
1037:	void drop_slab(void);
2333:	int folio_isolate_lru(struct folio *);
1454:	void folio_putback_lru(struct folio *);
676:	void free_prealloced_shrinker(struct shrinker *);
269:	void free_shrinker_info(struct mem_cgroup *);
7516:	void kswapd_run(int);
7537:	void kswapd_stop(int);
6718:	unsigned long mem_cgroup_shrink_node(struct mem_cgroup *, gfp_t, bool, pg_data_t *, unsigned long *);
7687:	int node_reclaim(struct pglist_data *, gfp_t, unsigned int);
670:	int prealloc_shrinker(struct shrinker *, const char *, ...);
2129:	unsigned int reclaim_clean_pages_from_list(struct zone *, struct list_head *);
2723:	unsigned long reclaim_pages(struct list_head *);
1137:	void reclaim_throttle(pg_data_t *, enum vmscan_throttle_state);
732:	int register_shrinker(struct shrinker *, const char *, ...);
693:	void register_shrinker_prepared(struct shrinker *);
1431:	long remove_mapping(struct address_space *, struct folio *);
423:	void reparent_shrinker_deferred(struct mem_cgroup *);
352:	void set_shrinker_bit(struct mem_cgroup *, int, int);
768:	void synchronize_shrinkers(void);
6757:	unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *, unsigned long, gfp_t, unsigned int);
6672:	unsigned long try_to_free_pages(struct zonelist *, int, gfp_t, nodemask_t *);
742:	void unregister_shrinker(struct shrinker *);
7429:	void wakeup_kswapd(struct zone *, gfp_t, int, enum zone_type);
583:	unsigned long zone_reclaimable_pages(struct zone *);
625:	static int __prealloc_shrinker(struct shrinker *);
1322:	static int __remove_mapping(struct address_space *, struct folio *, bool, struct mem_cgroup *);
1557:	static struct page *alloc_demote_page(struct page *, unsigned long);
6543:	static bool allow_direct_reclaim(pg_data_t *);
7021:	static int balance_pgdat(pg_data_t *, int, int);
777:	static unsigned long do_shrink_slab(struct shrink_control *, struct shrinker *, int);
6454:	static unsigned long do_try_to_free_pages(struct zonelist *, struct scan_control *);
2217:	static unsigned long isolate_lru_folios(unsigned long, struct lruvec *, struct list_head *, unsigned long *, struct scan_control *, enum lru_list);
7343:	static int kswapd(void *);
7551:	static int kswapd_init(void);
2402:	static unsigned int move_folios_to_lru(struct lruvec *, struct list_head *);
7606:	static unsigned long node_pagecache_reclaimable(struct pglist_data *);
6902:	static bool prepare_kswapd_sleep(pg_data_t *, int, int);
2699:	static unsigned int reclaim_folio_list(struct list_head *, struct pglist_data *);
2600:	static void shrink_active_list(unsigned long, struct lruvec *, struct scan_control *, enum lru_list);
1647:	static unsigned int shrink_folio_list(struct list_head *, struct pglist_data *, struct scan_control *, struct reclaim_stat *, bool);
5908:	static void shrink_lruvec(struct lruvec *, struct scan_control *);
6155:	static void shrink_node(pg_data_t *, struct scan_control *);
976:	static unsigned long shrink_slab(gfp_t, int, struct mem_cgroup *, int);

File mm/vmstat.c:
538:	void __dec_node_page_state(struct page *, enum node_stat_item);
509:	void __dec_node_state(struct pglist_data *, enum node_stat_item);
532:	void __dec_zone_page_state(struct page *, enum zone_stat_item);
488:	void __dec_zone_state(struct zone *, enum zone_stat_item);
482:	void __inc_node_page_state(struct page *, enum node_stat_item);
453:	void __inc_node_state(struct pglist_data *, enum node_stat_item);
476:	void __inc_zone_page_state(struct page *, enum zone_stat_item);
432:	void __inc_zone_state(struct zone *, enum zone_stat_item);
373:	void __mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
342:	void __mod_zone_page_state(struct zone *, enum zone_stat_item, long);
130:	void all_vm_events(unsigned long *);
222:	int calculate_normal_threshold(struct zone *);
198:	int calculate_pressure_threshold(struct zone *);
892:	void cpu_vm_stats_fold(int);
681:	void dec_node_page_state(struct page *, enum node_stat_item);
608:	void dec_zone_page_state(struct page *, enum zone_stat_item);
951:	void drain_zonestat(struct zone *, struct per_cpu_zonestat *);
1115:	unsigned int extfrag_for_order(struct zone *, unsigned int);
187:	void fold_vm_numa_events(void);
1129:	int fragmentation_index(struct zone *, unsigned int);
675:	void inc_node_page_state(struct page *, enum node_stat_item);
670:	void inc_node_state(struct pglist_data *, enum node_stat_item);
602:	void inc_zone_page_state(struct page *, enum zone_stat_item);
2090:	void init_mm_internals(void);
663:	void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
595:	void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
1023:	unsigned long node_page_state(struct pglist_data *, enum node_stat_item);
1012:	unsigned long node_page_state_pages(struct pglist_data *, enum node_stat_item);
1980:	void quiet_vmstat(void);
272:	void refresh_zone_stat_thresholds(void);
317:	void set_pgdat_percpu_threshold(pg_data_t *, int (*)(struct zone *));
982:	unsigned long sum_zone_node_page_state(int, enum zone_stat_item);
996:	unsigned long sum_zone_numa_event_state(int, enum numa_stat_item);
77:	int sysctl_vm_numa_stat_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void vm_events_fold_cpu(int);
1873:	int vmstat_refresh(struct ctl_table *, int, void *, size_t *, loff_t *);
2238:	static int extfrag_debug_init(void);
2236:	static int extfrag_open(struct inode *, struct file *);
2220:	static int extfrag_show(struct seq_file *, void *);
2196:	static void extfrag_show_print(struct seq_file *, pg_data_t *, struct zone *);
1421:	static void *frag_next(struct seq_file *, void *, loff_t *);
1477:	static int frag_show(struct seq_file *, void *);
1459:	static void frag_show_print(struct seq_file *, pg_data_t *, struct zone *);
1408:	static void *frag_start(struct seq_file *, loff_t *);
1429:	static void frag_stop(struct seq_file *, void *);
2042:	static void init_cpu_node_state(void);
69:	static void invalid_numa_statistics(void);
614:	static void mod_node_state(struct pglist_data *, enum node_stat_item, int, int);
557:	static void mod_zone_state(struct zone *, enum zone_stat_item, long, int);
1950:	static bool need_update(int);
1617:	static int pagetypeinfo_show(struct seq_file *, void *);
1541:	static void pagetypeinfo_showblockcount_print(struct seq_file *, pg_data_t *, struct zone *);
1484:	static void pagetypeinfo_showfree_print(struct seq_file *, pg_data_t *, struct zone *);
806:	static int refresh_cpu_vm_stats(bool);
1868:	static void refresh_vm_stats(struct work_struct *);
2030:	static void start_shepherd_timer(void);
2194:	static int unusable_open(struct inode *, struct file *);
2174:	static int unusable_show(struct seq_file *, void *);
2146:	static void unusable_show_print(struct seq_file *, pg_data_t *, struct zone *);
2069:	static int vmstat_cpu_dead(unsigned int);
2063:	static int vmstat_cpu_down_prep(unsigned int);
2052:	static int vmstat_cpu_online(unsigned int);
1822:	static void *vmstat_next(struct seq_file *, void *, loff_t *);
2010:	static void vmstat_shepherd(struct work_struct *);
1830:	static int vmstat_show(struct seq_file *, void *);
1779:	static void *vmstat_start(struct seq_file *, loff_t *);
1849:	static void vmstat_stop(struct seq_file *, void *);
1932:	static void vmstat_update(struct work_struct *);
1437:	static void walk_zones_in_node(struct seq_file *, pg_data_t *, bool, bool, void (*)(struct seq_file *, pg_data_t *, struct zone *));
1757:	static int zoneinfo_show(struct seq_file *, void *);
1663:	static void zoneinfo_show_print(struct seq_file *, pg_data_t *, struct zone *);

File mm/workingset.c:
510:	void workingset_activation(struct folio *);
325:	void workingset_age_nonresident(struct lruvec *, unsigned long);
351:	void *workingset_eviction(struct folio *, struct mem_cgroup *);
385:	void workingset_refault(struct folio *, void *);
544:	void workingset_update_node(struct xa_node *);
572:	static unsigned long count_shadow_nodes(struct shrinker *, struct shrink_control *);
695:	static unsigned long scan_shadow_nodes(struct shrinker *, struct shrink_control *);
629:	static enum lru_status shadow_lru_isolate(struct list_head *, struct list_lru_one *, spinlock_t *, void *);
716:	static int workingset_init(void);

File net/802/garp.c:
569:	int garp_init_applicant(struct net_device *, struct garp_application *);
637:	int garp_register_application(struct garp_application *);
354:	int garp_request_join(const struct net_device *, const struct garp_application *, const void *, u8, u8);
374:	void garp_request_leave(const struct net_device *, const struct garp_application *, const void *, u8, u8);
610:	void garp_uninit_applicant(struct net_device *, struct garp_application *);
645:	void garp_unregister_application(struct garp_application *);
393:	static void garp_gid_event(struct garp_applicant *, enum garp_event);
414:	static void garp_join_timer(struct timer_list *);
287:	static int garp_pdu_append_attr(struct garp_applicant *, const struct garp_attr *, enum garp_attr_event);
249:	static void garp_pdu_queue(struct garp_applicant *);
511:	static void garp_pdu_rcv(const struct stp_proto *, struct sk_buff *, struct net_device *);

File net/802/mrp.c:
854:	int mrp_init_applicant(struct net_device *, struct mrp_application *);
931:	int mrp_register_application(struct mrp_application *);
529:	int mrp_request_join(const struct net_device *, const struct mrp_application *, const void *, u8, u8);
554:	void mrp_request_leave(const struct net_device *, const struct mrp_application *, const void *, u8, u8);
898:	void mrp_uninit_applicant(struct net_device *, struct mrp_application *);
939:	void mrp_unregister_application(struct mrp_application *);
480:	static void mrp_attr_event(struct mrp_applicant *, struct mrp_attr *, enum mrp_event);
599:	static void mrp_join_timer(struct timer_list *);
403:	static int mrp_pdu_append_vecattr_event(struct mrp_applicant *, const struct mrp_attr *, enum mrp_vecattr_event);
342:	static void mrp_pdu_queue(struct mrp_applicant *);
621:	static void mrp_periodic_timer(struct timer_list *);
783:	static int mrp_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);

File net/802/p8022.c:
32:	struct datalink_proto *register_8022_client(unsigned char, int (*)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *));
54:	void unregister_8022_client(struct datalink_proto *);
25:	static int p8022_request(struct datalink_proto *, struct sk_buff *, const unsigned char *);

File net/802/psnap.c:
122:	struct datalink_proto *register_snap_client(const unsigned char *, int (*)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *));
152:	void unregister_snap_client(struct datalink_proto *);
111:	static void snap_exit(void);
98:	static int snap_init(void);
45:	static int snap_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
81:	static int snap_request(struct datalink_proto *, struct sk_buff *, const u8 *);

File net/802/stp.c:
62:	int stp_proto_register(const struct stp_proto *);
85:	void stp_proto_unregister(const struct stp_proto *);
30:	static int stp_pdu_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);

File net/8021q/vlan.c:
148:	int register_vlan_dev(struct net_device *, struct netlink_ext_ack *);
89:	void unregister_vlan_dev(struct net_device *, struct list_head *);
128:	int vlan_check_real_dev(struct net_device *, __be16, u16, struct netlink_ext_ack *);
214:	static int register_vlan_device(struct net_device *, u16);
723:	static void vlan_cleanup_module(void);
360:	static int vlan_device_event(struct notifier_block *, unsigned long, void *);
670:	static void vlan_exit_net(struct net *);
658:	static int vlan_init_net(struct net *);
540:	static int vlan_ioctl_handler(struct net *, void *);
682:	static int vlan_proto_init(void);

File net/8021q/vlan_core.c:
76:	struct net_device *__vlan_find_dev_deep_rcu(struct net_device *, __be16, u16);
102:	struct net_device *vlan_dev_real_dev(const struct net_device *);
113:	u16 vlan_dev_vlan_id(const struct net_device *);
119:	__be16 vlan_dev_vlan_proto(const struct net_device *);
10:	bool vlan_do_receive(struct sk_buff **);
283:	void vlan_filter_drop_vids(struct vlan_info *, __be16);
254:	int vlan_filter_push_vids(struct vlan_info *, __be16);
227:	int vlan_for_each(struct net_device *, int (*)(struct net_device *, int, void *), void *);
444:	bool vlan_uses_dev(const struct net_device *);
318:	int vlan_vid_add(struct net_device *, __be16, u16);
371:	void vlan_vid_del(struct net_device *, __be16, u16);
396:	int vlan_vids_add_by_dev(struct net_device *, const struct net_device *);
427:	void vlan_vids_del_by_dev(struct net_device *, const struct net_device *);
506:	static int vlan_gro_complete(struct sk_buff *, int);
457:	static struct sk_buff *vlan_gro_receive(struct list_head *, struct sk_buff *);
144:	static void vlan_info_rcu_free(struct callback_head *);
541:	static int vlan_offload_init(void);

File net/8021q/vlan_dev.c:
214:	int vlan_dev_change_flags(const struct net_device *, u32, u32);
624:	void vlan_dev_free_egress_priority(const struct net_device *);
242:	void vlan_dev_get_realdev_name(const struct net_device *, char *, size_t);
247:	bool vlan_dev_inherit_address(struct net_device *, struct net_device *);
169:	int vlan_dev_set_egress_priority(const struct net_device *, u32, u16);
156:	void vlan_dev_set_ingress_priority(const struct net_device *, u32, u16);
858:	void vlan_setup(struct net_device *);
141:	static int vlan_dev_change_mtu(struct net_device *, int);
473:	static void vlan_dev_change_rx_flags(struct net_device *, int);
786:	static int vlan_dev_fill_forward_path(struct net_device_path_ctx *, struct net_device_path *);
643:	static netdev_features_t vlan_dev_fix_features(struct net_device *, netdev_features_t);
847:	static void vlan_dev_free(struct net_device *);
779:	static int vlan_dev_get_iflink(const struct net_device *);
702:	static void vlan_dev_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
44:	static int vlan_dev_hard_header(struct sk_buff *, struct net_device *, unsigned short, const void *, const void *, unsigned int);
98:	static netdev_tx_t vlan_dev_hard_start_xmit(struct sk_buff *, struct net_device *);
552:	static int vlan_dev_init(struct net_device *);
356:	static int vlan_dev_ioctl(struct net_device *, struct ifreq *, int);
386:	static int vlan_dev_neigh_setup(struct net_device *, struct neigh_parms *);
258:	static int vlan_dev_open(struct net_device *);
330:	static int vlan_dev_set_mac_address(struct net_device *, void *);
485:	static void vlan_dev_set_rx_mode(struct net_device *);
310:	static int vlan_dev_stop(struct net_device *);
638:	static void vlan_dev_uninit(struct net_device *);
674:	static void vlan_ethtool_get_drvinfo(struct net_device *, struct ethtool_drvinfo *);
666:	static int vlan_ethtool_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
682:	static int vlan_ethtool_get_ts_info(struct net_device *, struct ethtool_ts_info *);
513:	static __be16 vlan_parse_protocol(const struct sk_buff *);
526:	static int vlan_passthru_hard_header(struct sk_buff *, struct net_device *, unsigned short, const void *, const void *, unsigned int);

File net/8021q/vlan_gvrp.c:
59:	int vlan_gvrp_init(void);
49:	int vlan_gvrp_init_applicant(struct net_device *);
27:	int vlan_gvrp_request_join(const struct net_device *);
38:	void vlan_gvrp_request_leave(const struct net_device *);
64:	void vlan_gvrp_uninit(void);
54:	void vlan_gvrp_uninit_applicant(struct net_device *);

File net/8021q/vlan_mvrp.c:
65:	int vlan_mvrp_init(void);
55:	int vlan_mvrp_init_applicant(struct net_device *);
33:	int vlan_mvrp_request_join(const struct net_device *);
44:	void vlan_mvrp_request_leave(const struct net_device *);
70:	void vlan_mvrp_uninit(void);
60:	void vlan_mvrp_uninit_applicant(struct net_device *);

File net/8021q/vlan_netlink.c:
307:	void vlan_netlink_fini(void);
302:	int vlan_netlink_init(void);
104:	static int vlan_changelink(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
218:	static int vlan_fill_info(struct sk_buff *, const struct net_device *);
280:	static struct net *vlan_get_link_net(const struct net_device *);
207:	static size_t vlan_get_size(const struct net_device *);
136:	static int vlan_newlink(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
39:	static int vlan_validate(struct nlattr **, struct nlattr **, struct netlink_ext_ack *);

File net/8021q/vlanproc.c:
136:	int vlan_proc_add_dev(struct net_device *);
92:	void vlan_proc_cleanup(struct net *);
111:	int vlan_proc_init(struct net *);
153:	void vlan_proc_rem_dev(struct net_device *);
189:	static void *vlan_seq_next(struct seq_file *, void *, loff_t *);
216:	static int vlan_seq_show(struct seq_file *, void *);
167:	static void *vlan_seq_start(struct seq_file *, loff_t *);
210:	static void vlan_seq_stop(struct seq_file *, void *);
241:	static int vlandev_seq_show(struct seq_file *, void *);

File net/bluetooth/af_bluetooth.c:
196:	struct sock *bt_accept_dequeue(struct sock *, struct socket *);
159:	void bt_accept_enqueue(struct sock *, struct sock *, bool);
185:	void bt_accept_unlink(struct sock *);
691:	void bt_procfs_cleanup(struct net *, const char *);
680:	int bt_procfs_init(struct net *, const char *, struct bt_sock_list *, int (*)(struct seq_file *, void *));
495:	int bt_sock_ioctl(struct socket *, unsigned int, unsigned long);
143:	void bt_sock_link(struct bt_sock_list *, struct sock *);
454:	__poll_t bt_sock_poll(struct file *, struct socket *, poll_table *);
71:	void bt_sock_reclassify_lock(struct sock *, int);
253:	int bt_sock_recvmsg(struct socket *, struct msghdr *, size_t, int);
82:	int bt_sock_register(int, const struct net_proto_family *);
333:	int bt_sock_stream_recvmsg(struct socket *, struct msghdr *, size_t, int);
151:	void bt_sock_unlink(struct bt_sock_list *, struct sock *);
102:	void bt_sock_unregister(int);
572:	int bt_sock_wait_ready(struct sock *, unsigned int);
536:	int bt_sock_wait_state(struct sock *, int, unsigned long);
781:	static void bt_exit(void);
722:	static int bt_init(void);
621:	static void *bt_seq_next(struct seq_file *, void *, loff_t *);
636:	static int bt_seq_show(struct seq_file *, void *);
612:	static void *bt_seq_start(struct seq_file *, loff_t *);
628:	static void bt_seq_stop(struct seq_file *, void *);
113:	static int bt_sock_create(struct net *, struct socket *, int, int);

File net/bluetooth/ecdh_helper.c:
60:	int compute_ecdh_secret(struct crypto_kpp *, const u8 *, u8 *);
219:	int generate_ecdh_keys(struct crypto_kpp *, u8 *);
166:	int generate_ecdh_public_key(struct crypto_kpp *, u8 *);
122:	int set_ecdh_privkey(struct crypto_kpp *, const u8 *);
33:	static void ecdh_complete(struct crypto_async_request *, int);

File net/bluetooth/eir.c:
64:	u8 eir_append_appearance(struct hci_dev *, u8 *, u8);
30:	u8 eir_append_local_name(struct hci_dev *, u8 *, u8);
69:	u8 eir_append_service_data(u8 *, u16, u16, u8 *, u8);
190:	void eir_create(struct hci_dev *, u8 *);
260:	u8 eir_create_adv_data(struct hci_dev *, u8, u8 *);
239:	u8 eir_create_per_adv_data(struct hci_dev *, u8, u8 *);
357:	u8 eir_create_scan_rsp(struct hci_dev *, u8, u8 *);
382:	void *eir_get_service_data(u8 *, size_t, u16, size_t *);

File net/bluetooth/hci_codec.c:
38:	void hci_codec_list_clear(struct list_head *);
120:	void hci_read_supported_codecs(struct hci_dev *);
189:	void hci_read_supported_codecs_v2(struct hci_dev *);
48:	static void hci_read_codec_capabilities(struct hci_dev *, __u8, struct hci_op_read_local_codec_caps *);

File net/bluetooth/hci_conn.c:
2771:	int hci_abort_conn(struct hci_conn *, u8);
1772:	struct hci_conn *hci_bind_cis(struct hci_dev *, bdaddr_t *, __u8, struct bt_iso_qos *);
2581:	struct hci_chan *hci_chan_create(struct hci_conn *);
2606:	void hci_chan_del(struct hci_chan *);
2626:	void hci_chan_list_flush(struct hci_conn *);
2649:	struct hci_chan *hci_chan_lookup_handle(struct hci_dev *, __u16);
955:	struct hci_conn *hci_conn_add(struct hci_dev *, int, bdaddr_t *, u8);
2195:	int hci_conn_check_link_mode(struct hci_conn *);
2443:	void hci_conn_check_pending(struct hci_dev *);
2364:	int hci_conn_check_secure(struct hci_conn *, __u8);
1052:	int hci_conn_del(struct hci_conn *);
2402:	void hci_conn_enter_active_mode(struct hci_conn *, __u8);
1208:	void hci_conn_failed(struct hci_conn *, u8);
2668:	u32 hci_conn_get_phy(struct hci_conn *);
2427:	void hci_conn_hash_flush(struct hci_dev *);
2286:	int hci_conn_security(struct hci_conn *, __u8, __u8, bool);
2383:	int hci_conn_switch_role(struct hci_conn *, __u8);
1552:	struct hci_conn *hci_connect_acl(struct hci_dev *, bdaddr_t *, u8, u8, enum conn_reasons);
2110:	struct hci_conn *hci_connect_bis(struct hci_dev *, bdaddr_t *, __u8, struct bt_iso_qos *, __u8, __u8 *);
2150:	struct hci_conn *hci_connect_cis(struct hci_dev *, bdaddr_t *, __u8, struct bt_iso_qos *);
1261:	struct hci_conn *hci_connect_le(struct hci_dev *, bdaddr_t *, u8, bool, u8, u16, u8);
1495:	struct hci_conn *hci_connect_le_scan(struct hci_dev *, bdaddr_t *, u8, u8, u16, enum conn_reasons);
1585:	struct hci_conn *hci_connect_sco(struct hci_dev *, int, bdaddr_t *, __u16, struct bt_codec *);
270:	int hci_disconnect(struct hci_conn *, __u8);
2561:	int hci_get_auth_info(struct hci_dev *, void *);
2533:	int hci_get_conn_info(struct hci_dev *, void *);
2480:	int hci_get_conn_list(void *);
1110:	struct hci_dev *hci_get_route(bdaddr_t *, bdaddr_t *, uint8_t);
1833:	bool hci_iso_setup_path(struct hci_conn *);
2071:	int hci_le_big_create_sync(struct hci_dev *, struct bt_iso_qos *, __u16, __u8, __u8 *);
563:	u8 hci_le_conn_update(struct hci_conn *, u16, u16, u16, u16);
1925:	int hci_le_create_cis(struct hci_conn *);
599:	void hci_le_start_enc(struct hci_conn *, __le16, __le64, __u8 *, __u8);
2049:	int hci_pa_create_sync(struct hci_dev *, bdaddr_t *, __u8, __u8);
618:	void hci_sco_setup(struct hci_conn *, __u8);
539:	bool hci_setup_sync(struct hci_conn *, __u16);
843:	static int big_terminate_sync(struct hci_dev *, void *);
890:	static void bis_cleanup(struct hci_conn *);
937:	static void cis_cleanup(struct hci_conn *);
1645:	static void cis_list(struct hci_conn *, void *);
2097:	static void create_big_complete(struct hci_dev *, void *, int);
1996:	static int create_big_sync(struct hci_dev *, void *);
1229:	static void create_le_conn_complete(struct hci_dev *, void *, int);
2022:	static void create_pa_complete(struct hci_dev *, void *, int);
2034:	static int create_pa_sync(struct hci_dev *, void *);
212:	static void hci_acl_create_connection(struct hci_conn *);
703:	static void hci_conn_auto_accept(struct work_struct *);
122:	static void hci_conn_cleanup(struct hci_conn *);
669:	static void hci_conn_idle(struct work_struct *);
638:	static void hci_conn_timeout(struct work_struct *);
71:	static void hci_connect_le_scan_cleanup(struct hci_conn *);
1252:	static int hci_connect_le_sync(struct hci_dev *, void *);
1865:	static int hci_create_cis_sync(struct hci_dev *, void *);
363:	static int hci_enhanced_setup_sync(struct hci_dev *, void *);
729:	static void le_conn_timeout(struct work_struct *);
161:	static void le_scan_cleanup(struct work_struct *);
908:	static int remove_cig_sync(struct hci_dev *, void *);
816:	static void terminate_big_destroy(struct hci_dev *, void *, int);
797:	static int terminate_big_sync(struct hci_dev *, void *);

File net/bluetooth/hci_core.c:
3020:	int __hci_cmd_send(struct hci_dev *, u16, u32, const void *);
1714:	struct adv_info *hci_add_adv_instance(struct hci_dev *, u8, u32, u16, u8 *, u16, u8 *, u16, u16, s8, u32, u32, u8);
1925:	int hci_add_adv_monitor(struct hci_dev *, struct adv_monitor *);
1378:	struct smp_irk *hci_add_irk(struct hci_dev *, bdaddr_t *, u8, u8 *, bdaddr_t *);
1302:	struct link_key *hci_add_link_key(struct hci_dev *, struct hci_conn *, bdaddr_t *, u8 *, u8, u8, bool *);
1349:	struct smp_ltk *hci_add_ltk(struct hci_dev *, bdaddr_t *, u8, u8, u8, u8 *, u8, __le16, __le64);
1772:	struct adv_info *hci_add_per_instance(struct hci_dev *, u8, u32, u8, u8 *, u32, u32);
1570:	int hci_add_remote_oob_data(struct hci_dev *, bdaddr_t *, u8, u8 *, u8 *, u8 *, u8 *);
1829:	u32 hci_adv_instance_flags(struct hci_dev *, u8);
1863:	bool hci_adv_instance_is_scannable(struct hci_dev *, u8);
1684:	void hci_adv_instances_clear(struct hci_dev *);
1675:	void hci_adv_instances_set_rpa_expired(struct hci_dev *, bool);
1883:	void hci_adv_monitors_clear(struct hci_dev *);
2426:	struct hci_dev *hci_alloc_dev_priv(int);
1451:	bool hci_bdaddr_is_paired(struct hci_dev *, bdaddr_t *, u8);
2102:	int hci_bdaddr_list_add(struct list_head *, bdaddr_t *, u8);
2153:	int hci_bdaddr_list_add_with_flags(struct list_head *, bdaddr_t *, u8, u32);
2124:	int hci_bdaddr_list_add_with_irk(struct list_head *, bdaddr_t *, u8, u8 *, u8 *);
2092:	void hci_bdaddr_list_clear(struct list_head *);
2177:	int hci_bdaddr_list_del(struct list_head *, bdaddr_t *, u8);
2216:	int hci_bdaddr_list_del_with_flags(struct list_head *, bdaddr_t *, u8);
2196:	int hci_bdaddr_list_del_with_irk(struct list_head *, bdaddr_t *, u8);
2051:	struct bdaddr_list *hci_bdaddr_list_lookup(struct list_head *, bdaddr_t *, u8);
2079:	struct bdaddr_list_with_flags *hci_bdaddr_list_lookup_with_flags(struct list_head *, bdaddr_t *, u8);
2064:	struct bdaddr_list_with_irk *hci_bdaddr_list_lookup_with_irk(struct list_head *, bdaddr_t *, u8);
1105:	void hci_blocked_keys_clear(struct hci_dev *);
2268:	struct hci_conn_params *hci_conn_params_add(struct hci_dev *, bdaddr_t *, u8);
2329:	void hci_conn_params_clear_disabled(struct hci_dev *);
2313:	void hci_conn_params_del(struct hci_dev *, bdaddr_t *, u8);
2237:	struct hci_conn_params *hci_conn_params_lookup(struct hci_dev *, bdaddr_t *, u8);
2376:	void hci_copy_identity_address(struct hci_dev *, bdaddr_t *, u8 *);
561:	int hci_dev_close(__u16);
732:	int hci_dev_cmd(unsigned int, void *);
546:	int hci_dev_do_close(struct hci_dev *);
112:	struct hci_dev *hci_dev_get(int);
491:	int hci_dev_open(__u16);
639:	int hci_dev_reset(__u16);
670:	int hci_dev_reset_stat(__u16);
134:	bool hci_discovery_active(struct hci_dev *);
148:	void hci_discovery_set_state(struct hci_dev *, int);
1617:	struct adv_info *hci_find_adv_instance(struct hci_dev *, u8);
1269:	struct smp_irk *hci_find_irk_by_addr(struct hci_dev *, bdaddr_t *, u8);
1235:	struct smp_irk *hci_find_irk_by_rpa(struct hci_dev *, bdaddr_t *);
1132:	struct link_key *hci_find_link_key(struct hci_dev *, bdaddr_t *);
1206:	struct smp_ltk *hci_find_ltk(struct hci_dev *, bdaddr_t *, u8, u8);
1527:	struct oob_data *hci_find_remote_oob_data(struct hci_dev *, bdaddr_t *, u8);
1897:	void hci_free_adv_monitor(struct hci_dev *, struct adv_monitor *);
2557:	void hci_free_dev(struct hci_dev *);
2043:	int hci_get_adv_monitor_offload_ext(struct hci_dev *);
888:	int hci_get_dev_info(void *);
838:	int hci_get_dev_list(void *);
1630:	struct adv_info *hci_get_next_instance(struct hci_dev *, u8);
372:	int hci_inquiry(void *);
178:	void hci_inquiry_cache_flush(struct hci_dev *);
192:	struct inquiry_entry *hci_inquiry_cache_lookup(struct hci_dev *, bdaddr_t *);
224:	struct inquiry_entry *hci_inquiry_cache_lookup_resolve(struct hci_dev *, bdaddr_t *, int);
208:	struct inquiry_entry *hci_inquiry_cache_lookup_unknown(struct hci_dev *, bdaddr_t *);
262:	u32 hci_inquiry_cache_update(struct hci_dev *, struct inquiry_data *, bool);
243:	void hci_inquiry_cache_update_resolve(struct hci_dev *, struct inquiry_entry *);
2038:	bool hci_is_adv_monitoring(struct hci_dev *);
1115:	bool hci_is_blocked_key(struct hci_dev *, u8, u8 *);
1075:	void hci_link_keys_clear(struct hci_dev *);
2253:	struct hci_conn_params *hci_pend_le_action_lookup(struct list_head *, bdaddr_t *, u8);
2896:	int hci_recv_diag(struct hci_dev *, struct sk_buff *);
3070:	void *hci_recv_event_data(struct hci_dev *, __u8);
2866:	int hci_recv_frame(struct hci_dev *, struct sk_buff *);
2935:	int hci_register_cb(struct hci_cb *);
2565:	int hci_register_dev(struct hci_dev *);
2763:	int hci_register_suspend_notifier(struct hci_dev *);
2730:	void hci_release_dev(struct hci_dev *);
1560:	void hci_remote_oob_data_clear(struct hci_dev *);
1647:	int hci_remove_adv_instance(struct hci_dev *, u8);
2016:	int hci_remove_all_adv_monitor(struct hci_dev *);
1436:	void hci_remove_irk(struct hci_dev *, bdaddr_t *, u8);
1401:	int hci_remove_link_key(struct hci_dev *, bdaddr_t *);
1417:	int hci_remove_ltk(struct hci_dev *, bdaddr_t *, u8);
1543:	int hci_remove_remote_oob_data(struct hci_dev *, bdaddr_t *, u8);
2005:	int hci_remove_single_adv_monitor(struct hci_dev *, u16);
3928:	void hci_req_cmd_complete(struct hci_dev *, u16, u8, hci_req_complete_t *, hci_req_complete_skb_t *);
2846:	int hci_reset_dev(struct hci_dev *);
2818:	int hci_resume_dev(struct hci_dev *);
3175:	void hci_send_acl(struct hci_chan *, struct sk_buff *, __u16);
2996:	int hci_send_cmd(struct hci_dev *, __u16, __u32, const void *);
3265:	void hci_send_iso(struct hci_conn *, struct sk_buff *);
3187:	void hci_send_sco(struct hci_conn *, struct sk_buff *);
3052:	void *hci_sent_cmd_data(struct hci_dev *, __u16);
1794:	int hci_set_adv_instance_data(struct hci_dev *, u8, u16, u8 *, u16, u8 *);
2922:	void hci_set_fw_info(struct hci_dev *, const char *, ...);
2911:	void hci_set_hw_info(struct hci_dev *, const char *, ...);
1095:	void hci_smp_irks_clear(struct hci_dev *);
1085:	void hci_smp_ltks_clear(struct hci_dev *);
2790:	int hci_suspend_dev(struct hci_dev *);
2947:	int hci_unregister_cb(struct hci_cb *);
2684:	void hci_unregister_dev(struct hci_dev *);
2776:	int hci_unregister_suspend_notifier(struct hci_dev *);
1065:	void hci_uuids_clear(struct hci_dev *);
3496:	static void __check_timeout(struct hci_dev *, unsigned int, u8);
1703:	static void adv_instance_rpa_expired(struct work_struct *);
77:	static int hci_auth_req(struct hci_request *, unsigned long);
3377:	static struct hci_chan *hci_chan_sent(struct hci_dev *, __u8, int *);
1488:	static void hci_cmd_timeout(struct work_struct *);
4068:	static void hci_cmd_work(struct work_struct *);
2300:	static void hci_conn_params_free(struct hci_conn_params *);
88:	static int hci_encrypt_req(struct hci_request *, unsigned long);
1048:	static void hci_error_reset(struct work_struct *);
352:	static int hci_inq_req(struct hci_request *, unsigned long);
99:	static int hci_linkpol_req(struct hci_request *, unsigned long);
3318:	static struct hci_conn *hci_low_sent(struct hci_dev *, __u8, int *);
1510:	static void hci_ncmd_timeout(struct work_struct *);
1038:	static void hci_power_off(struct work_struct *);
968:	static void hci_power_on(struct work_struct *);
943:	static int hci_rfkill_set_block(void *, bool);
3993:	static void hci_rx_work(struct work_struct *);
66:	static int hci_scan_req(struct hci_request *, unsigned long);
2959:	static int hci_send_frame(struct hci_dev *, struct sk_buff *);
2402:	static int hci_suspend_notifier(struct notifier_block *, unsigned long, void *);
3763:	static void hci_tx_work(struct work_struct *);
696:	static void hci_update_passive_scan_state(struct hci_dev *, u8);
324:	static int inquiry_cache_dump(struct hci_dev *, int, __u8 *);

File net/bluetooth/hci_event.c:
7488:	void hci_event_packet(struct hci_dev *, struct sk_buff *);
2859:	static void cs_le_create_conn(struct hci_dev *, bdaddr_t *, u8, u8, u8);
3474:	static void hci_auth_complete_evt(struct hci_dev *, void *, struct sk_buff *);
327:	static u8 hci_cc_delete_stored_link_key(struct hci_dev *, void *, struct sk_buff *);
139:	static u8 hci_cc_exit_periodic_inq(struct hci_dev *, void *, struct sk_buff *);
84:	static u8 hci_cc_inquiry_cancel(struct hci_dev *, void *, struct sk_buff *);
1899:	static u8 hci_cc_le_add_to_accept_list(struct hci_dev *, void *, struct sk_buff *);
1997:	static u8 hci_cc_le_add_to_resolv_list(struct hci_dev *, void *, struct sk_buff *);
1882:	static u8 hci_cc_le_clear_accept_list(struct hci_dev *, void *, struct sk_buff *);
1494:	static u8 hci_cc_le_clear_adv_sets(struct hci_dev *, void *, struct sk_buff *);
2044:	static u8 hci_cc_le_clear_resolv_list(struct hci_dev *, void *, struct sk_buff *);
1922:	static u8 hci_cc_le_del_from_accept_list(struct hci_dev *, void *, struct sk_buff *);
2021:	static u8 hci_cc_le_del_from_resolv_list(struct hci_dev *, void *, struct sk_buff *);
1867:	static u8 hci_cc_le_read_accept_list_size(struct hci_dev *, void *, struct sk_buff *);
1266:	static u8 hci_cc_le_read_adv_tx_power(struct hci_dev *, void *, struct sk_buff *);
1231:	static u8 hci_cc_le_read_buffer_size(struct hci_dev *, void *, struct sk_buff *);
3794:	static u8 hci_cc_le_read_buffer_size_v2(struct hci_dev *, void *, struct sk_buff *);
1960:	static u8 hci_cc_le_read_def_data_len(struct hci_dev *, void *, struct sk_buff *);
1251:	static u8 hci_cc_le_read_local_features(struct hci_dev *, void *, struct sk_buff *);
2103:	static u8 hci_cc_le_read_max_data_len(struct hci_dev *, void *, struct sk_buff *);
1851:	static u8 hci_cc_le_read_num_adv_sets(struct hci_dev *, void *, struct sk_buff *);
2061:	static u8 hci_cc_le_read_resolv_list_size(struct hci_dev *, void *, struct sk_buff *);
1945:	static u8 hci_cc_le_read_supported_states(struct hci_dev *, void *, struct sk_buff *);
1525:	static u8 hci_cc_le_read_transmit_power(struct hci_dev *, void *, struct sk_buff *);
1466:	static u8 hci_cc_le_remove_adv_set(struct hci_dev *, void *, struct sk_buff *);
2076:	static u8 hci_cc_le_set_addr_resolution_enable(struct hci_dev *, void *, struct sk_buff *);
1568:	static u8 hci_cc_le_set_adv_enable(struct hci_dev *, void *, struct sk_buff *);
1428:	static u8 hci_cc_le_set_adv_set_random_addr(struct hci_dev *, void *, struct sk_buff *);
3818:	static u8 hci_cc_le_set_cig_params(struct hci_dev *, void *, struct sk_buff *);
1403:	static u8 hci_cc_le_set_default_phy(struct hci_dev *, void *, struct sk_buff *);
1607:	static u8 hci_cc_le_set_ext_adv_enable(struct hci_dev *, void *, struct sk_buff *);
1831:	static u8 hci_cc_le_set_ext_scan_enable(struct hci_dev *, void *, struct sk_buff *);
1696:	static u8 hci_cc_le_set_ext_scan_param(struct hci_dev *, void *, struct sk_buff *);
3939:	static u8 hci_cc_le_set_per_adv_enable(struct hci_dev *, void *, struct sk_buff *);
1541:	static u8 hci_cc_le_set_privacy_mode(struct hci_dev *, void *, struct sk_buff *);
1373:	static u8 hci_cc_le_set_random_addr(struct hci_dev *, void *, struct sk_buff *);
1811:	static u8 hci_cc_le_set_scan_enable(struct hci_dev *, void *, struct sk_buff *);
1672:	static u8 hci_cc_le_set_scan_param(struct hci_dev *, void *, struct sk_buff *);
3869:	static u8 hci_cc_le_setup_iso_path(struct hci_dev *, void *, struct sk_buff *);
1976:	static u8 hci_cc_le_write_def_data_len(struct hci_dev *, void *, struct sk_buff *);
124:	static u8 hci_cc_periodic_inq(struct hci_dev *, void *, struct sk_buff *);
1213:	static u8 hci_cc_pin_code_neg_reply(struct hci_dev *, void *, struct sk_buff *);
1183:	static u8 hci_cc_pin_code_reply(struct hci_dev *, void *, struct sk_buff *);
773:	static u8 hci_cc_read_auth_payload_timeout(struct hci_dev *, void *, struct sk_buff *);
942:	static u8 hci_cc_read_bd_addr(struct hci_dev *, void *, struct sk_buff *);
913:	static u8 hci_cc_read_buffer_size(struct hci_dev *, void *, struct sk_buff *);
510:	static u8 hci_cc_read_class_of_dev(struct hci_dev *, void *, struct sk_buff *);
1075:	static u8 hci_cc_read_clock(struct hci_dev *, void *, struct sk_buff *);
1053:	static u8 hci_cc_read_data_block_size(struct hci_dev *, void *, struct sk_buff *);
1148:	static u8 hci_cc_read_def_err_data_reporting(struct hci_dev *, void *, struct sk_buff *);
237:	static u8 hci_cc_read_def_link_policy(struct hci_dev *, void *, struct sk_buff *);
715:	static u8 hci_cc_read_enc_key_size(struct hci_dev *, void *, struct sk_buff *);
898:	static u8 hci_cc_read_flow_control_mode(struct hci_dev *, void *, struct sk_buff *);
1133:	static u8 hci_cc_read_inq_rsp_tx_power(struct hci_dev *, void *, struct sk_buff *);
188:	static u8 hci_cc_read_link_policy(struct hci_dev *, void *, struct sk_buff *);
1109:	static u8 hci_cc_read_local_amp_info(struct hci_dev *, void *, struct sk_buff *);
756:	static u8 hci_cc_read_local_commands(struct hci_dev *, void *, struct sk_buff *);
879:	static u8 hci_cc_read_local_ext_features(struct hci_dev *, void *, struct sk_buff *);
827:	static u8 hci_cc_read_local_features(struct hci_dev *, void *, struct sk_buff *);
372:	static u8 hci_cc_read_local_name(struct hci_dev *, void *, struct sk_buff *);
1353:	static u8 hci_cc_read_local_oob_data(struct hci_dev *, void *, struct sk_buff *);
1363:	static u8 hci_cc_read_local_oob_ext_data(struct hci_dev *, void *, struct sk_buff *);
961:	static u8 hci_cc_read_local_pairing_opts(struct hci_dev *, void *, struct sk_buff *);
693:	static u8 hci_cc_read_local_version(struct hci_dev *, void *, struct sk_buff *);
610:	static u8 hci_cc_read_num_supported_iac(struct hci_dev *, void *, struct sk_buff *);
980:	static u8 hci_cc_read_page_scan_activity(struct hci_dev *, void *, struct sk_buff *);
1019:	static u8 hci_cc_read_page_scan_type(struct hci_dev *, void *, struct sk_buff *);
2213:	static u8 hci_cc_read_rssi(struct hci_dev *, void *, struct sk_buff *);
307:	static u8 hci_cc_read_stored_link_key(struct hci_dev *, void *, struct sk_buff *);
2235:	static u8 hci_cc_read_tx_power(struct hci_dev *, void *, struct sk_buff *);
553:	static u8 hci_cc_read_voice_setting(struct hci_dev *, void *, struct sk_buff *);
156:	static u8 hci_cc_remote_name_req_cancel(struct hci_dev *, void *, struct sk_buff *);
272:	static u8 hci_cc_reset(struct hci_dev *, void *, struct sk_buff *);
166:	static u8 hci_cc_role_discovery(struct hci_dev *, void *, struct sk_buff *);
2157:	static u8 hci_cc_set_adv_param(struct hci_dev *, void *, struct sk_buff *);
484:	static u8 hci_cc_set_event_filter(struct hci_dev *, void *, struct sk_buff *);
2179:	static u8 hci_cc_set_ext_adv_param(struct hci_dev *, void *, struct sk_buff *);
3920:	static u8 hci_cc_set_per_adv_param(struct hci_dev *, void *, struct sk_buff *);
1299:	static u8 hci_cc_user_confirm_neg_reply(struct hci_dev *, void *, struct sk_buff *);
1281:	static u8 hci_cc_user_confirm_reply(struct hci_dev *, void *, struct sk_buff *);
1335:	static u8 hci_cc_user_passkey_neg_reply(struct hci_dev *, void *, struct sk_buff *);
1317:	static u8 hci_cc_user_passkey_reply(struct hci_dev *, void *, struct sk_buff *);
389:	static u8 hci_cc_write_auth_enable(struct hci_dev *, void *, struct sk_buff *);
795:	static u8 hci_cc_write_auth_payload_timeout(struct hci_dev *, void *, struct sk_buff *);
528:	static u8 hci_cc_write_class_of_dev(struct hci_dev *, void *, struct sk_buff *);
1163:	static u8 hci_cc_write_def_err_data_reporting(struct hci_dev *, void *, struct sk_buff *);
252:	static u8 hci_cc_write_def_link_policy(struct hci_dev *, void *, struct sk_buff *);
420:	static u8 hci_cc_write_encrypt_mode(struct hci_dev *, void *, struct sk_buff *);
2121:	static u8 hci_cc_write_le_host_supported(struct hci_dev *, void *, struct sk_buff *);
210:	static u8 hci_cc_write_link_policy(struct hci_dev *, void *, struct sk_buff *);
348:	static u8 hci_cc_write_local_name(struct hci_dev *, void *, struct sk_buff *);
998:	static u8 hci_cc_write_page_scan_activity(struct hci_dev *, void *, struct sk_buff *);
1035:	static u8 hci_cc_write_page_scan_type(struct hci_dev *, void *, struct sk_buff *);
660:	static u8 hci_cc_write_sc_support(struct hci_dev *, void *, struct sk_buff *);
446:	static u8 hci_cc_write_scan_enable(struct hci_dev *, void *, struct sk_buff *);
2271:	static u8 hci_cc_write_ssp_debug_mode(struct hci_dev *, void *, struct sk_buff *);
627:	static u8 hci_cc_write_ssp_mode(struct hci_dev *, void *, struct sk_buff *);
579:	static u8 hci_cc_write_voice_setting(struct hci_dev *, void *, struct sk_buff *);
3704:	static void hci_change_link_key_complete_evt(struct hci_dev *, void *, struct sk_buff *);
2491:	static void hci_check_pending_name(struct hci_dev *, struct hci_conn *, bdaddr_t *, u8 *, u8);
4744:	static void hci_clock_offset_evt(struct hci_dev *, void *, struct sk_buff *);
4181:	static void hci_cmd_complete_evt(struct hci_dev *, void *, struct sk_buff *, u16 *, u8 *, hci_req_complete_t *, hci_req_complete_skb_t *);
4294:	static void hci_cmd_status_evt(struct hci_dev *, void *, struct sk_buff *, u16 *, u8 *, hci_req_complete_t *, hci_req_complete_skb_t *);
3131:	static void hci_conn_complete_evt(struct hci_dev *, void *, struct sk_buff *);
3275:	static void hci_conn_request_evt(struct hci_dev *, void *, struct sk_buff *);
2339:	static void hci_cs_add_sco(struct hci_dev *, __u8);
2374:	static void hci_cs_auth_requested(struct hci_dev *, __u8);
2301:	static void hci_cs_create_conn(struct hci_dev *, __u8);
2758:	static void hci_cs_disconnect(struct hci_dev *, u8);
2669:	static void hci_cs_enhanced_setup_sync_conn(struct hci_dev *, __u8);
2731:	static void hci_cs_exit_sniff_mode(struct hci_dev *, __u8);
2289:	static void hci_cs_inquiry(struct hci_dev *, __u8);
3915:	static void hci_cs_le_create_big(struct hci_dev *, u8);
4226:	static void hci_cs_le_create_cis(struct hci_dev *, u8);
2896:	static void hci_cs_le_create_conn(struct hci_dev *, u8);
2921:	static void hci_cs_le_ext_create_conn(struct hci_dev *, u8);
2946:	static void hci_cs_le_read_remote_features(struct hci_dev *, u8);
2973:	static void hci_cs_le_start_enc(struct hci_dev *, u8);
2607:	static void hci_cs_read_remote_ext_features(struct hci_dev *, __u8);
2580:	static void hci_cs_read_remote_features(struct hci_dev *, __u8);
2537:	static void hci_cs_remote_name_req(struct hci_dev *, __u8);
2401:	static void hci_cs_set_conn_encrypt(struct hci_dev *, __u8);
2634:	static void hci_cs_setup_sync_conn(struct hci_dev *, __u8);
2704:	static void hci_cs_sniff_mode(struct hci_dev *, __u8);
3003:	static void hci_cs_switch_role(struct hci_dev *, u8);
3389:	static void hci_disconn_complete_evt(struct hci_dev *, void *, struct sk_buff *);
3588:	static void hci_encrypt_change_evt(struct hci_dev *, void *, struct sk_buff *);
5088:	static void hci_extended_inquiry_result_evt(struct hci_dev *, void *, struct sk_buff *);
4336:	static void hci_hardware_error_evt(struct hci_dev *, void *, struct sk_buff *);
3026:	static void hci_inquiry_complete_evt(struct hci_dev *, void *, struct sk_buff *);
3087:	static void hci_inquiry_result_evt(struct hci_dev *, void *, struct sk_buff *);
4804:	static void hci_inquiry_result_with_rssi_evt(struct hci_dev *, void *, struct sk_buff *);
5323:	static void hci_io_capa_reply_evt(struct hci_dev *, void *, struct sk_buff *);
5253:	static void hci_io_capa_request_evt(struct hci_dev *, void *, struct sk_buff *);
5143:	static void hci_key_refresh_complete_evt(struct hci_dev *, void *, struct sk_buff *);
5461:	static void hci_keypress_notify_evt(struct hci_dev *, void *, struct sk_buff *);
6402:	static void hci_le_adv_report_evt(struct hci_dev *, void *, struct sk_buff *);
7004:	static void hci_le_big_info_adv_report_evt(struct hci_dev *, void *, struct sk_buff *);
6959:	static void hci_le_big_sync_established_evt(struct hci_dev *, void *, struct sk_buff *);
6788:	static void hci_le_cis_estabilished_evt(struct hci_dev *, void *, struct sk_buff *);
6865:	static void hci_le_cis_req_evt(struct hci_dev *, void *, struct sk_buff *);
5977:	static void hci_le_conn_complete_evt(struct hci_dev *, void *, struct sk_buff *);
6075:	static void hci_le_conn_update_complete_evt(struct hci_dev *, void *, struct sk_buff *);
6916:	static void hci_le_create_big_complete_evt(struct hci_dev *, void *, struct sk_buff *);
6736:	static void hci_le_direct_adv_report_evt(struct hci_dev *, void *, struct sk_buff *);
5991:	static void hci_le_enh_conn_complete_evt(struct hci_dev *, void *, struct sk_buff *);
6485:	static void hci_le_ext_adv_report_evt(struct hci_dev *, void *, struct sk_buff *);
6005:	static void hci_le_ext_adv_term_evt(struct hci_dev *, void *, struct sk_buff *);
6599:	static void hci_le_ltk_request_evt(struct hci_dev *, void *, struct sk_buff *);
7112:	static void hci_le_meta_evt(struct hci_dev *, void *, struct sk_buff *, u16 *, u8 *, hci_req_complete_t *, hci_req_complete_skb_t *);
6534:	static void hci_le_pa_sync_estabilished_evt(struct hci_dev *, void *, struct sk_buff *);
6764:	static void hci_le_phy_update_evt(struct hci_dev *, void *, struct sk_buff *);
6676:	static void hci_le_remote_conn_param_req_evt(struct hci_dev *, void *, struct sk_buff *);
6557:	static void hci_le_remote_feat_complete_evt(struct hci_dev *, void *, struct sk_buff *);
4683:	static void hci_link_key_notify_evt(struct hci_dev *, void *, struct sk_buff *);
4625:	static void hci_link_key_request_evt(struct hci_dev *, void *, struct sk_buff *);
4525:	static void hci_mode_change_evt(struct hci_dev *, void *, struct sk_buff *);
4474:	static void hci_num_comp_blocks_evt(struct hci_dev *, void *, struct sk_buff *);
4371:	static void hci_num_comp_pkts_evt(struct hci_dev *, void *, struct sk_buff *);
4554:	static void hci_pin_code_request_evt(struct hci_dev *, void *, struct sk_buff *);
4768:	static void hci_pkt_type_change_evt(struct hci_dev *, void *, struct sk_buff *);
4785:	static void hci_pscan_rep_mode_evt(struct hci_dev *, void *, struct sk_buff *);
4891:	static void hci_remote_ext_features_evt(struct hci_dev *, void *, struct sk_buff *);
3727:	static void hci_remote_features_evt(struct hci_dev *, void *, struct sk_buff *);
5531:	static void hci_remote_host_features_evt(struct hci_dev *, void *, struct sk_buff *);
3545:	static void hci_remote_name_evt(struct hci_dev *, void *, struct sk_buff *);
5553:	static void hci_remote_oob_data_request_evt(struct hci_dev *, void *, struct sk_buff *);
4348:	static void hci_role_change_evt(struct hci_dev *, void *, struct sk_buff *);
5500:	static void hci_simple_pair_complete_evt(struct hci_dev *, void *, struct sk_buff *);
4955:	static void hci_sync_conn_complete_evt(struct hci_dev *, void *, struct sk_buff *);
5344:	static void hci_user_confirm_request_evt(struct hci_dev *, void *, struct sk_buff *);
5440:	static void hci_user_passkey_notify_evt(struct hci_dev *, void *, struct sk_buff *);
5429:	static void hci_user_passkey_request_evt(struct hci_dev *, void *, struct sk_buff *);
5804:	static void le_conn_complete_evt(struct hci_dev *, u8, bdaddr_t *, u8, bdaddr_t *, u8, u16, u16, u16, u16);
1755:	static void le_set_scan_enable_complete(struct hci_dev *, u8);
6190:	static void process_adv_report(struct hci_dev *, u8, bdaddr_t *, u8, bdaddr_t *, u8, s8, u8 *, u8, bool, bool, u64);

File net/bluetooth/hci_request.c:
115:	int __hci_req_sync(struct hci_dev *, int (*)(struct hci_request *, unsigned long), unsigned long, u32, u8 *);
212:	struct sk_buff *hci_prepare_cmd(struct hci_dev *, u16, u32, const void *);
269:	void hci_req_add(struct hci_request *, u16, u32, const void *);
239:	void hci_req_add_ev(struct hci_request *, u16, u32, const void *, u8);
747:	void hci_req_add_le_passive_scan(struct hci_request *);
328:	void hci_req_add_le_scan_disable(struct hci_request *, bool);
35:	void hci_req_init(struct hci_request *, struct hci_dev *);
42:	void hci_req_purge(struct hci_request *);
90:	int hci_req_run(struct hci_request *, hci_req_complete_t);
95:	int hci_req_run_skb(struct hci_request *, hci_req_complete_skb_t);
47:	bool hci_req_status_pend(struct hci_dev *);
191:	int hci_req_sync(struct hci_dev *, int (*)(struct hci_request *, unsigned long), unsigned long, u32, u8 *);
100:	void hci_req_sync_complete(struct hci_dev *, u8, u16, struct sk_buff *);
917:	void hci_request_cancel_all(struct hci_dev *);
912:	void hci_request_setup(struct hci_dev *);
389:	static int add_to_accept_list(struct hci_request *, struct hci_conn_params *, u8 *, bool);
832:	static int hci_req_add_le_interleaved_scan(struct hci_request *, unsigned long);
863:	static void interleave_scan_work(struct work_struct *);
52:	static int req_run(struct hci_request *, hci_req_complete_t, hci_req_complete_skb_t);

File net/bluetooth/hci_sock.c:
809:	int hci_mgmt_chan_register(struct hci_mgmt_chan *);
828:	void hci_mgmt_chan_unregister(struct hci_mgmt_chan *);
370:	void hci_send_monitor_ctrl_event(struct hci_dev *, u16, void *, u16, ktime_t, int, struct sock *);
302:	void hci_send_to_channel(unsigned short, struct sk_buff *, int, struct sock *);
311:	void hci_send_to_monitor(struct hci_dev *, struct sk_buff *);
203:	void hci_send_to_sock(struct hci_dev *, struct sk_buff *);
2167:	void hci_sock_cleanup(void);
79:	void hci_sock_clear_flag(struct sock *, int);
746:	void hci_sock_dev_event(struct hci_dev *, int);
89:	unsigned short hci_sock_get_channel(struct sock *);
94:	u32 hci_sock_get_cookie(struct sock *);
2135:	int hci_sock_init(void);
74:	void hci_sock_set_flag(struct sock *, int);
84:	int hci_sock_test_flag(struct sock *, int);
268:	static void __hci_send_to_channel(unsigned short, struct sk_buff *, int, struct sock *);
560:	static struct sk_buff *create_monitor_ctrl_close(struct sock *);
502:	static struct sk_buff *create_monitor_ctrl_open(struct sock *);
424:	static struct sk_buff *create_monitor_event(struct hci_dev *, int);
1629:	static int hci_logging_frame(struct sock *, struct sk_buff *, unsigned int);
798:	static struct hci_mgmt_chan *hci_mgmt_chan_find(unsigned short);
1514:	static int hci_mgmt_cmd(struct hci_mgmt_chan *, struct sock *, struct sk_buff *);
1091:	static int hci_sock_bind(struct socket *, struct sockaddr *, int);
1422:	static void hci_sock_cmsg(struct sock *, struct msghdr *, struct sk_buff *);
2099:	static int hci_sock_create(struct net *, struct socket *, int, int);
2063:	static void hci_sock_destruct(struct sock *);
99:	static bool hci_sock_gen_cookie(struct sock *);
1391:	static int hci_sock_getname(struct socket *, struct sockaddr *, int);
2030:	static int hci_sock_getsockopt(struct socket *, int, int, char *, int *);
981:	static int hci_sock_ioctl(struct socket *, unsigned int, unsigned long);
1459:	static int hci_sock_recvmsg(struct socket *, struct msghdr *, size_t, int);
903:	static int hci_sock_reject_list_add(struct hci_dev *, void *);
920:	static int hci_sock_reject_list_del(struct hci_dev *, void *);
836:	static int hci_sock_release(struct socket *);
1695:	static int hci_sock_sendmsg(struct socket *, struct msghdr *, size_t);
1915:	static int hci_sock_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
699:	static void send_monitor_control_replay(struct sock *);
626:	static void send_monitor_note(struct sock *, const char *, ...);
657:	static void send_monitor_replay(struct sock *);

File net/bluetooth/hci_sync.c:
204:	struct sk_buff *__hci_cmd_sync(struct hci_dev *, u16, u32, const void *, u32);
655:	void __hci_cmd_sync_cancel(struct hci_dev *, int);
231:	struct sk_buff *__hci_cmd_sync_ev(struct hci_dev *, u16, u32, const void *, u8, u32);
146:	struct sk_buff *__hci_cmd_sync_sk(struct hci_dev *, u16, u32, const void *, u8, u32, struct sock *);
269:	int __hci_cmd_sync_status(struct hci_dev *, u16, u32, const void *, u32);
240:	int __hci_cmd_sync_status_sk(struct hci_dev *, u16, u32, const void *, u8, u32, struct sock *);
5137:	int hci_abort_conn_sync(struct hci_dev *, struct hci_conn *, u8);
530:	int hci_clear_adv_instance_sync(struct hci_dev *, struct sock *, u8, bool);
212:	struct sk_buff *hci_cmd_sync(struct hci_dev *, u16, u32, const void *, u32);
671:	void hci_cmd_sync_cancel(struct hci_dev *, int);
639:	void hci_cmd_sync_clear(struct hci_dev *);
626:	void hci_cmd_sync_init(struct hci_dev *);
684:	int hci_cmd_sync_queue(struct hci_dev *, hci_cmd_sync_work_func_t, void *, hci_cmd_sync_work_destroy_t);
4782:	int hci_dev_close_sync(struct hci_dev *);
4634:	int hci_dev_open_sync(struct hci_dev *);
1930:	int hci_disable_advertising_sync(struct hci_dev *);
1577:	int hci_enable_advertising(struct hci_dev *);
1486:	int hci_enable_advertising_sync(struct hci_dev *);
1226:	int hci_enable_ext_advertising_sync(struct hci_dev *, u8);
6115:	int hci_get_random_address(struct hci_dev *, bool, bool, struct adv_info *, u8 *, bdaddr_t *);
6093:	int hci_le_big_terminate_sync(struct hci_dev *, u8);
5981:	int hci_le_create_conn_sync(struct hci_dev *, struct hci_conn *);
6104:	int hci_le_pa_terminate_sync(struct hci_dev *, u16);
6082:	int hci_le_remove_cig_sync(struct hci_dev *, u8);
1631:	int hci_le_terminate_big_sync(struct hci_dev *, u8, u8);
3060:	int hci_powered_update_sync(struct hci_dev *);
1914:	int hci_read_clock_sync(struct hci_dev *, struct hci_cp_read_clock *);
2370:	struct sk_buff *hci_read_local_oob_data_sync(struct hci_dev *, bool, struct sock *);
1905:	int hci_read_rssi_sync(struct hci_dev *, __le16);
1920:	int hci_read_tx_power_sync(struct hci_dev *, __le16, u8);
1861:	int hci_remove_advertising_sync(struct hci_dev *, struct sock *, u8, bool);
1618:	int hci_remove_ext_adv_instance(struct hci_dev *, u8);
1586:	int hci_remove_ext_adv_instance_sync(struct hci_dev *, u8, struct sock *);
3192:	int hci_reset_sync(struct hci_dev *);
5764:	int hci_resume_sync(struct hci_dev *);
1719:	int hci_schedule_adv_instance_sync(struct hci_dev *, u8, bool);
5218:	int hci_set_powered_sync(struct hci_dev *, u8);
1019:	int hci_setup_ext_adv_instance_sync(struct hci_dev *, u8);
5474:	int hci_start_discovery_sync(struct hci_dev *);
1272:	int hci_start_ext_adv_sync(struct hci_dev *, u8);
1409:	int hci_start_per_adv_sync(struct hci_dev *, u8, u8, u8 *, u32, u16, u16, u16);
4991:	int hci_stop_discovery_sync(struct hci_dev *);
5644:	int hci_suspend_sync(struct hci_dev *);
6195:	int hci_update_adv_data(struct hci_dev *, u8);
1708:	int hci_update_adv_data_sync(struct hci_dev *, u8);
752:	int hci_update_class_sync(struct hci_dev *);
5315:	int hci_update_connectable_sync(struct hci_dev *);
5302:	int hci_update_discoverable(struct hci_dev *);
5257:	int hci_update_discoverable_sync(struct hci_dev *);
710:	int hci_update_eir_sync(struct hci_dev *);
3035:	int hci_update_name_sync(struct hci_dev *);
2794:	int hci_update_passive_scan(struct hci_dev *);
2708:	int hci_update_passive_scan_sync(struct hci_dev *);
866:	int hci_update_random_address_sync(struct hci_dev *, bool, bool, u8 *);
2784:	int hci_update_scan(struct hci_dev *);
1215:	int hci_update_scan_rsp_data_sync(struct hci_dev *, u8);
3003:	int hci_update_scan_sync(struct hci_dev *);
2934:	int hci_write_fast_connectable_sync(struct hci_dev *, bool);
2852:	int hci_write_le_host_supported_sync(struct hci_dev *, u8, u8);
2808:	int hci_write_sc_support_sync(struct hci_dev *, u8);
2831:	int hci_write_ssp_mode_sync(struct hci_dev *, u8);
6188:	static int _update_adv_data_sync(struct hci_dev *, void *);
600:	static void adv_timeout_expire(struct work_struct *);
586:	static int adv_timeout_expire_sync(struct hci_dev *, void *);
2978:	static bool disconnected_accept_list_entries(struct hci_dev *);
1572:	static int enable_advertising_sync(struct hci_dev *, void *);
5374:	static int hci_active_scan_sync(struct hci_dev *, uint16_t);
1791:	static int hci_clear_adv_sync(struct hci_dev *, struct sock *, bool);
3427:	static int hci_clear_event_filter_sync(struct hci_dev *);
314:	static void hci_cmd_sync_cancel_work(struct work_struct *);
23:	static void hci_cmd_sync_complete(struct hci_dev *, u8, u16, struct sk_buff *);
277:	static void hci_cmd_sync_work(struct work_struct *);
956:	static int hci_disable_ext_adv_instance_sync(struct hci_dev *, u8);
5346:	static int hci_inquiry_sync(struct hci_dev *, u8);
2508:	static bool hci_is_le_conn_scanning(struct hci_dev *);
2219:	static int hci_le_add_accept_list_sync(struct hci_dev *, struct hci_conn_params *, u8 *);
2134:	static int hci_le_add_resolve_list_sync(struct hci_dev *, struct hci_conn_params *);
4018:	static int hci_le_clear_accept_list_sync(struct hci_dev *);
4038:	static int hci_le_clear_resolv_list_sync(struct hci_dev *);
2078:	static int hci_le_del_resolve_list_sync(struct hci_dev *, bdaddr_t *, u8);
4008:	static int hci_le_read_accept_list_size_sync(struct hci_dev *);
3979:	static int hci_le_read_adv_tx_power_sync(struct hci_dev *);
3572:	static int hci_le_read_buffer_size_sync(struct hci_dev *);
4071:	static int hci_le_read_def_data_len_sync(struct hci_dev *);
3585:	static int hci_le_read_local_features_sync(struct hci_dev *);
4061:	static int hci_le_read_max_data_len_sync(struct hci_dev *);
4081:	static int hci_le_read_num_support_adv_sets_sync(struct hci_dev *);
4028:	static int hci_le_read_resolv_list_size_sync(struct hci_dev *);
3592:	static int hci_le_read_supported_states_sync(struct hci_dev *);
3997:	static int hci_le_read_tx_power_sync(struct hci_dev *);
1985:	static int hci_le_set_addr_resolution_enable_sync(struct hci_dev *, u8);
4374:	static int hci_le_set_default_phy_sync(struct hci_dev *);
3861:	static int hci_le_set_event_mask_sync(struct hci_dev *);
4115:	static int hci_le_set_host_feature_sync(struct hci_dev *);
4048:	static int hci_le_set_rpa_timeout_sync(struct hci_dev *);
1965:	static int hci_le_set_scan_enable_sync(struct hci_dev *, u8, u8);
4358:	static int hci_le_set_write_def_data_len_sync(struct hci_dev *);
2613:	static int hci_passive_scan_sync(struct hci_dev *);
2282:	static int hci_pause_advertising_sync(struct hci_dev *);
3359:	static int hci_read_buffer_size_sync(struct hci_dev *);
3394:	static int hci_read_current_iac_lap_sync(struct hci_dev *);
3288:	static int hci_read_data_block_size_sync(struct hci_dev *);
3799:	static int hci_read_def_err_data_reporting_sync(struct hci_dev *);
3366:	static int hci_read_dev_class_sync(struct hci_dev *);
3295:	static int hci_read_flow_control_mode_sync(struct hci_dev *);
3524:	static int hci_read_inq_rsp_tx_power_sync(struct hci_dev *);
3281:	static int hci_read_local_amp_info_sync(struct hci_dev *);
3262:	static int hci_read_local_cmds_sync(struct hci_dev *);
3547:	static int hci_read_local_ext_features_1_sync(struct hci_dev *);
3824:	static int hci_read_local_ext_features_all_sync(struct hci_dev *);
3373:	static int hci_read_local_name_sync(struct hci_dev *);
3166:	static int hci_read_local_version_sync(struct hci_dev *);
3302:	static int hci_read_location_data_sync(struct hci_dev *);
3387:	static int hci_read_num_supported_iac_sync(struct hci_dev *);
3810:	static int hci_read_page_scan_type_sync(struct hci_dev *);
3749:	static int hci_read_stored_link_key_sync(struct hci_dev *);
4290:	static int hci_read_sync_train_params_sync(struct hci_dev *);
3380:	static int hci_read_voice_setting_sync(struct hci_dev *);
2326:	static int hci_resume_advertising_sync(struct hci_dev *);
1998:	static int hci_scan_disable_sync(struct hci_dev *);
993:	static int hci_set_adv_set_random_addr_sync(struct hci_dev *, u8, bdaddr_t *);
4316:	static int hci_set_err_data_report_sync(struct hci_dev *);
4208:	static int hci_set_event_mask_page_2_sync(struct hci_dev *);
3642:	static int hci_set_event_mask_sync(struct hci_dev *);
1152:	static int hci_set_ext_scan_rsp_data_sync(struct hci_dev *, u8);
4092:	static int hci_set_le_support_sync(struct hci_dev *);
843:	static int hci_set_random_addr_sync(struct hci_dev *, bdaddr_t *);
3765:	static int hci_setup_link_policy_sync(struct hci_dev *);
2594:	static int hci_start_scan_sync(struct hci_dev *, u8, u16, u16, u8, u8, u8);
2921:	static int hci_write_auth_enable_sync(struct hci_dev *);
3444:	static int hci_write_ca_timeout_sync(struct hci_dev *);
3492:	static int hci_write_eir_sync(struct hci_dev *);
3506:	static int hci_write_inquiry_mode_sync(struct hci_dev *);
4300:	static int hci_write_sc_support_1_sync(struct hci_dev *);
2996:	static int hci_write_scan_enable_sync(struct hci_dev *, u8);
3473:	static int hci_write_ssp_mode_1_sync(struct hci_dev *);
332:	static int interleaved_inquiry_sync(struct hci_dev *, void *);
337:	static void le_scan_disable(struct work_struct *);
419:	static void le_scan_restart(struct work_struct *);
414:	static int le_scan_restart_sync(struct hci_dev *, void *);
494:	static void reenable_adv(struct work_struct *);
469:	static int reenable_adv_sync(struct hci_dev *, void *);
1607:	static int remove_ext_adv_sync(struct hci_dev *, void *);
326:	static int scan_disable_sync(struct hci_dev *, void *);
5297:	static int update_discoverable_sync(struct hci_dev *, void *);
2789:	static int update_passive_scan_sync(struct hci_dev *, void *);
2779:	static int update_scan_sync(struct hci_dev *, void *);

File net/bluetooth/hci_sysfs.c:
120:	void bt_sysfs_cleanup(void);
113:	int bt_sysfs_init(void);
45:	void hci_conn_add_sysfs(struct hci_conn *);
64:	void hci_conn_del_sysfs(struct hci_conn *);
32:	void hci_conn_init_sysfs(struct hci_conn *);
102:	void hci_init_sysfs(struct hci_dev *);
27:	static int __match_tty(struct device *, void *);
86:	static void bt_host_release(struct device *);
11:	static void bt_link_release(struct device *);

File net/bluetooth/hidp/core.c:
1346:	int hidp_connection_add(const struct hidp_connadd_req *, struct socket *, struct socket *);
1392:	int hidp_connection_del(struct hidp_conndel_req *);
1447:	int hidp_get_conninfo(struct hidp_conninfo *);
1417:	int hidp_get_connlist(struct hidp_connlist_req *);
715:	static void hidp_close(struct hid_device *);
72:	static void hidp_copy_session(struct hidp_session *, struct hidp_conninfo *);
433:	static void hidp_del_timer(struct hidp_session *);
1467:	static void hidp_exit(void);
406:	static void hidp_idle_timeout(struct timer_list *);
1460:	static int hidp_init(void);
147:	static int hidp_input_event(struct input_dev *, unsigned int, unsigned int, int);
178:	static void hidp_input_report(struct hidp_session *, struct sk_buff *);
710:	static int hidp_open(struct hid_device *);
383:	static int hidp_output_report(struct hid_device *, __u8 *, size_t);
719:	static int hidp_parse(struct hid_device *);
631:	static void hidp_process_transmit(struct hidp_session *, struct sk_buff_head *, struct socket *);
392:	static int hidp_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, unsigned char, int);
98:	static int hidp_send_message(struct hidp_session *, struct socket *, struct sk_buff_head *, unsigned char, const unsigned char *, int);
889:	static void hidp_session_dev_work(struct work_struct *);
1023:	static struct hidp_session *hidp_session_find(const bdaddr_t *);
1098:	static int hidp_session_probe(struct l2cap_conn *, struct l2cap_user *);
995:	static void hidp_session_put(struct hidp_session *);
1159:	static void hidp_session_remove(struct l2cap_conn *, struct l2cap_user *);
1188:	static void hidp_session_run(struct hidp_session *);
1264:	static int hidp_session_thread(void *);
1249:	static int hidp_session_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
727:	static int hidp_start(struct hid_device *);
732:	static void hidp_stop(struct hid_device *);

File net/bluetooth/hidp/sock.c:
315:	void hidp_cleanup_sockets(void);
285:	int hidp_init_sockets(void);
249:	static int hidp_sock_create(struct net *, struct socket *, int, int);
126:	static int hidp_sock_ioctl(struct socket *, unsigned int, unsigned long);
33:	static int hidp_sock_release(struct socket *);

File net/bluetooth/l2cap_core.c:
583:	void __l2cap_chan_add(struct l2cap_conn *, struct l2cap_chan *);
4004:	void __l2cap_connect_rsp_defer(struct l2cap_chan *);
3965:	void __l2cap_ecred_conn_rsp_defer(struct l2cap_chan *);
3948:	void __l2cap_le_connect_rsp_defer(struct l2cap_chan *);
5222:	void __l2cap_physical_cfm(struct l2cap_chan *, int);
206:	int l2cap_add_psm(struct l2cap_chan *, bdaddr_t *, __le16);
251:	int l2cap_add_scid(struct l2cap_chan *, __u16);
635:	void l2cap_chan_add(struct l2cap_conn *, struct l2cap_chan *);
6685:	void l2cap_chan_busy(struct l2cap_chan *, int);
922:	int l2cap_chan_check_security(struct l2cap_chan *, bool);
818:	void l2cap_chan_close(struct l2cap_chan *, int);
7918:	int l2cap_chan_connect(struct l2cap_chan *, __le16, u16, bdaddr_t *, u8);
462:	struct l2cap_chan *l2cap_chan_create(void);
642:	void l2cap_chan_del(struct l2cap_chan *, int);
512:	void l2cap_chan_hold(struct l2cap_chan *);
519:	struct l2cap_chan *l2cap_chan_hold_unless_zero(struct l2cap_chan *);
721:	void l2cap_chan_list(struct l2cap_conn *, l2cap_chan_func_t, void *);
529:	void l2cap_chan_put(struct l2cap_chan *);
8123:	int l2cap_chan_reconfigure(struct l2cap_chan *, __u16);
2671:	int l2cap_chan_send(struct l2cap_chan *, struct msghdr *, size_t);
537:	void l2cap_chan_set_defaults(struct l2cap_chan *);
1956:	struct l2cap_conn *l2cap_conn_get(struct l2cap_conn *);
1963:	void l2cap_conn_put(struct l2cap_conn *);
8139:	int l2cap_connect_ind(struct hci_dev *, bdaddr_t *);
8265:	int l2cap_disconn_ind(struct hci_conn *);
3301:	int l2cap_ertm_init(struct l2cap_chan *);
8615:	void l2cap_exit(void);
8596:	int l2cap_init(void);
5076:	void l2cap_logical_cfm(struct l2cap_chan *, struct hci_chan *, u8);
5096:	void l2cap_move_start(struct l2cap_chan *);
8459:	void l2cap_recv_acldata(struct hci_conn *, struct sk_buff *, u16);
1826:	int l2cap_register_user(struct l2cap_conn *, struct l2cap_user *);
1277:	void l2cap_send_conn_req(struct l2cap_chan *);
1864:	void l2cap_unregister_user(struct l2cap_conn *, struct l2cap_user *);
313:	static void __set_monitor_timer(struct l2cap_chan *);
304:	static void __set_retrans_timer(struct l2cap_chan *);
3281:	static void l2cap_ack_timeout(struct work_struct *);
3463:	static int l2cap_build_conf_req(struct l2cap_chan *, void *, size_t);
7897:	static void l2cap_chan_by_pid(struct l2cap_chan *, void *);
776:	static void l2cap_chan_ecred_connect_reject(struct l2cap_chan *);
753:	static void l2cap_chan_le_connect_reject(struct l2cap_chan *);
7487:	static void l2cap_chan_le_send_credits(struct l2cap_chan *);
1362:	static void l2cap_chan_ready(struct l2cap_chan *);
429:	static void l2cap_chan_timeout(struct work_struct *);
6825:	static u8 l2cap_classify_txseq(struct l2cap_chan *, u16);
7812:	static struct l2cap_conn *l2cap_conn_add(struct hci_conn *);
1892:	static void l2cap_conn_del(struct hci_conn *, int);
1631:	static void l2cap_conn_start(struct l2cap_conn *);
1786:	static void l2cap_conn_unreliable(struct l2cap_conn *, int);
734:	static void l2cap_conn_update_id_addr(struct work_struct *);
4114:	static struct l2cap_chan *l2cap_connect(struct l2cap_conn *, struct l2cap_cmd_hdr *, u8 *, u8, u8);
8204:	static void l2cap_connect_cfm(struct hci_conn *, u8);
8592:	static int l2cap_debugfs_open(struct inode *, struct file *);
8573:	static int l2cap_debugfs_show(struct seq_file *, void *);
8276:	static void l2cap_disconn_cfm(struct hci_conn *, u8);
4622:	static int l2cap_disconnect_req(struct l2cap_conn *, struct l2cap_cmd_hdr *, u16, u8 *);
4669:	static int l2cap_disconnect_rsp(struct l2cap_conn *, struct l2cap_cmd_hdr *, u16, u8 *);
989:	static void l2cap_do_send(struct l2cap_chan *, struct sk_buff *);
1560:	static void l2cap_do_start(struct l2cap_chan *);
7512:	static int l2cap_ecred_recv(struct l2cap_chan *, struct sk_buff *);
2175:	static void l2cap_ertm_resend(struct l2cap_chan *);
2105:	static int l2cap_ertm_send(struct l2cap_chan *);
869:	static u8 l2cap_get_auth_type(struct l2cap_chan *);
140:	static struct l2cap_chan *l2cap_get_chan_by_dcid(struct l2cap_conn *, u16);
119:	static struct l2cap_chan *l2cap_get_chan_by_scid(struct l2cap_conn *, u16);
1974:	static struct l2cap_chan *l2cap_global_chan_by_psm(int, __le16, bdaddr_t *, bdaddr_t *, u8);
8172:	static struct l2cap_chan *l2cap_global_fixed_chan(struct l2cap_chan *, struct hci_conn *);
6788:	static void l2cap_handle_rej(struct l2cap_chan *, struct l2cap_ctrl *);
6730:	static void l2cap_handle_srej(struct l2cap_chan *, struct l2cap_ctrl *);
1802:	static void l2cap_info_timeout(struct work_struct *);
558:	static void l2cap_le_flowctl_init(struct l2cap_chan *, u16);
2655:	static void l2cap_le_flowctl_send(struct l2cap_chan *);
1489:	static void l2cap_le_start(struct l2cap_chan *);
2025:	static void l2cap_monitor_timeout(struct work_struct *);
1305:	static void l2cap_move_setup(struct l2cap_chan *);
3815:	static int l2cap_parse_conf_rsp(struct l2cap_chan *, void *, int, void *, size_t, u16 *);
2864:	static void l2cap_process_reqseq(struct l2cap_chan *, u16);
6594:	static int l2cap_reassemble_sdu(struct l2cap_chan *, struct sk_buff *, struct l2cap_ctrl *);
7745:	static void l2cap_recv_frame(struct l2cap_conn *, struct sk_buff *);
2046:	static void l2cap_retrans_timeout(struct work_struct *);
2265:	static void l2cap_retransmit_all(struct l2cap_chan *, struct l2cap_ctrl *);
7305:	static int l2cap_rx(struct l2cap_chan *, struct l2cap_ctrl *, struct sk_buff *, u8);
6911:	static int l2cap_rx_state_recv(struct l2cap_chan *, struct l2cap_ctrl *, struct sk_buff *, u8);
8303:	static void l2cap_security_cfm(struct hci_conn *, u8, u8);
2299:	static void l2cap_send_ack(struct l2cap_chan *);
958:	static void l2cap_send_cmd(struct l2cap_conn *, u8, u8, u16, void *);
1603:	static void l2cap_send_disconn_req(struct l2cap_chan *, int);
6541:	static void l2cap_send_i_or_rr_or_rnr(struct l2cap_chan *);
4938:	static void l2cap_send_move_chan_cfm(struct l2cap_chan *, u16);
4906:	static void l2cap_send_move_chan_req(struct l2cap_chan *, u8);
1175:	static void l2cap_send_sframe(struct l2cap_chan *, struct l2cap_ctrl *);
2799:	static void l2cap_send_srej(struct l2cap_chan *, u16);
2349:	static int l2cap_skbuff_fromiovec(struct l2cap_chan *, struct msghdr *, int, int, struct sk_buff *);
1509:	static void l2cap_start_connection(struct l2cap_chan *);
2066:	static void l2cap_streaming_send(struct l2cap_chan *, struct sk_buff_head *);
3055:	static void l2cap_tx(struct l2cap_chan *, struct l2cap_ctrl *, struct sk_buff_head *, u8);
7800:	static void process_pending_rx(struct work_struct *);

File net/bluetooth/l2cap_sock.c:
1966:	void l2cap_cleanup_sockets(void);
1933:	int l2cap_init_sockets(void);
50:	bool l2cap_is_socket(struct socket *);
858:	static int l2cap_set_mode(struct l2cap_chan *, u8);
1760:	static void l2cap_skb_msg_name(struct sk_buff *, void *, int *);
346:	static int l2cap_sock_accept(struct socket *, struct socket *, int, bool);
1612:	static struct sk_buff *l2cap_sock_alloc_skb_cb(struct l2cap_chan *, unsigned long, unsigned long, int);
82:	static int l2cap_sock_bind(struct socket *, struct sockaddr *, int);
1537:	static void l2cap_sock_close_cb(struct l2cap_chan *);
195:	static int l2cap_sock_connect(struct socket *, struct sockaddr *, int, int);
1879:	static int l2cap_sock_create(struct net *, struct socket *, int, int);
1654:	static void l2cap_sock_defer_cb(struct l2cap_chan *);
1742:	static void l2cap_sock_destruct(struct sock *);
1711:	static int l2cap_sock_filter(struct l2cap_chan *, struct sk_buff *);
1696:	static struct pid *l2cap_sock_get_peer_pid_cb(struct l2cap_chan *);
1689:	static long l2cap_sock_get_sndtimeo_cb(struct l2cap_chan *);
402:	static int l2cap_sock_getname(struct socket *, struct sockaddr *, int);
571:	static int l2cap_sock_getsockopt(struct socket *, int, int, char *, int *);
1773:	static void l2cap_sock_init(struct sock *, struct sock *);
180:	static void l2cap_sock_init_pid(struct sock *);
287:	static int l2cap_sock_listen(struct socket *, int);
1461:	static struct l2cap_chan *l2cap_sock_new_connection_cb(struct l2cap_chan *);
1634:	static void l2cap_sock_ready_cb(struct l2cap_chan *);
1492:	static int l2cap_sock_recv_cb(struct l2cap_chan *, struct sk_buff *);
1178:	static int l2cap_sock_recvmsg(struct socket *, struct msghdr *, size_t, int);
1407:	static int l2cap_sock_release(struct socket *);
1667:	static void l2cap_sock_resume_cb(struct l2cap_chan *);
1146:	static int l2cap_sock_sendmsg(struct socket *, struct msghdr *, size_t);
1680:	static void l2cap_sock_set_shutdown_cb(struct l2cap_chan *);
897:	static int l2cap_sock_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
1305:	static int l2cap_sock_shutdown(struct socket *, int);
1601:	static void l2cap_sock_state_change_cb(struct l2cap_chan *, int, int);
1703:	static void l2cap_sock_suspend_cb(struct l2cap_chan *);
1547:	static void l2cap_sock_teardown_cb(struct l2cap_chan *, int);

File net/bluetooth/leds.c:
97:	void bt_leds_cleanup(void);
92:	void bt_leds_init(void);
86:	void hci_leds_init(struct hci_dev *);
21:	void hci_leds_update_powered(struct hci_dev *, bool);
43:	static int power_activate(struct led_classdev *);

File net/bluetooth/lib.c:
33:	void baswap(bdaddr_t *, const bdaddr_t *);
241:	void bt_err(const char *, ...);
306:	void bt_err_ratelimited(const char *, ...);
209:	void bt_info(const char *, ...);
139:	__u8 bt_status(int);
45:	int bt_to_errno(__u16);
225:	void bt_warn(const char *, ...);
290:	void bt_warn_ratelimited(const char *, ...);

File net/bluetooth/mgmt.c:
9460:	void __mgmt_power_off(struct hci_dev *);
10193:	void mgmt_adv_monitor_device_lost(struct hci_dev *, u16, bdaddr_t *, u8);
5189:	void mgmt_adv_monitor_removed(struct hci_dev *, u16);
1252:	void mgmt_advertising_added(struct sock *, struct hci_dev *, u8);
1261:	void mgmt_advertising_removed(struct sock *, struct hci_dev *, u8);
9982:	void mgmt_auth_enable_complete(struct hci_dev *, u8);
9961:	void mgmt_auth_failed(struct hci_conn *, u8);
10539:	void mgmt_cleanup(struct sock *);
9811:	void mgmt_connect_failed(struct hci_dev *, bdaddr_t *, u8, u8, u8);
9659:	void mgmt_device_connected(struct hci_dev *, struct hci_conn *, u8 *, u8);
9745:	void mgmt_device_disconnected(struct hci_dev *, bdaddr_t *, u8, u8, u8, bool);
10366:	void mgmt_device_found(struct hci_dev *, bdaddr_t *, u8, u8, u8 *, s8, u32, u8 *, u16, u8 *, u8, u64);
9785:	void mgmt_disconnect_failed(struct hci_dev *, bdaddr_t *, u8, u8, u8);
10485:	void mgmt_discovering(struct hci_dev *, u8);
10534:	void mgmt_exit(void);
358:	void mgmt_fill_version_info(void *);
943:	u8 mgmt_get_adv_discov_flags(struct hci_dev *);
967:	bool mgmt_get_connectable(struct hci_dev *);
9363:	void mgmt_index_added(struct hci_dev *);
9395:	void mgmt_index_removed(struct hci_dev *);
10529:	int mgmt_init(void);
9638:	void mgmt_new_conn_param(struct hci_dev *, bdaddr_t *, u8, u8, u16, u16, u16, u16);
9608:	void mgmt_new_csrk(struct hci_dev *, struct smp_csrk *, bool);
9592:	void mgmt_new_irk(struct hci_dev *, struct smp_irk *, bool);
9513:	void mgmt_new_link_key(struct hci_dev *, struct link_key *, bool);
9549:	void mgmt_new_ltk(struct hci_dev *, struct smp_ltk *, bool);
1401:	int mgmt_new_settings(struct hci_dev *);
3961:	int mgmt_phy_configuration_changed(struct hci_dev *, struct sock *);
9855:	void mgmt_pin_code_neg_reply_complete(struct hci_dev *, bdaddr_t *, u8);
9842:	void mgmt_pin_code_reply_complete(struct hci_dev *, bdaddr_t *, u8);
9831:	void mgmt_pin_code_request(struct hci_dev *, bdaddr_t *, u8);
9437:	void mgmt_power_on(struct hci_dev *, int);
9729:	bool mgmt_powering_down(struct hci_dev *);
10458:	void mgmt_remote_name(struct hci_dev *, bdaddr_t *, u8, u8, s8, u8 *, u8);
10506:	void mgmt_resuming(struct hci_dev *, u8, bdaddr_t *, u8);
10019:	void mgmt_set_class_of_dev_complete(struct hci_dev *, u8 *, u8);
10038:	void mgmt_set_local_name_complete(struct hci_dev *, u8 *, u8);
9494:	void mgmt_set_powered_failed(struct hci_dev *, int);
3385:	void mgmt_smp_complete(struct hci_conn *, bool);
5822:	void mgmt_start_discovery_complete(struct hci_dev *, u8);
6094:	void mgmt_stop_discovery_complete(struct hci_dev *, u8);
10498:	void mgmt_suspending(struct hci_dev *, u8);
9922:	int mgmt_user_confirm_neg_reply_complete(struct hci_dev *, bdaddr_t *, u8, u8, u8);
9915:	int mgmt_user_confirm_reply_complete(struct hci_dev *, bdaddr_t *, u8, u8, u8);
9868:	int mgmt_user_confirm_request(struct hci_dev *, bdaddr_t *, u8, u8, u32, u8);
9937:	int mgmt_user_passkey_neg_reply_complete(struct hci_dev *, bdaddr_t *, u8, u8, u8);
9945:	int mgmt_user_passkey_notify(struct hci_dev *, bdaddr_t *, u8, u8, u32, u8);
9930:	int mgmt_user_passkey_reply_complete(struct hci_dev *, bdaddr_t *, u8, u8, u8);
9885:	int mgmt_user_passkey_request(struct hci_dev *, bdaddr_t *, u8, u8);
5294:	static int __add_adv_patterns_monitor(struct sock *, struct hci_dev *, struct adv_monitor *, u8, void *, u16, u16);
3563:	static int abort_conn_sync(struct hci_dev *, void *);
8574:	static void add_adv_complete(struct hci_dev *, struct sock *, u8, int);
5398:	static int add_adv_patterns_monitor(struct sock *, struct hci_dev *, void *, u16);
5435:	static int add_adv_patterns_monitor_rssi(struct sock *, struct hci_dev *, void *, u16);
8636:	static int add_advertising(struct sock *, struct hci_dev *, void *, u16);
8606:	static void add_advertising_complete(struct hci_dev *, void *, int);
8628:	static int add_advertising_sync(struct hci_dev *, void *);
7618:	static int add_device(struct sock *, struct hci_dev *, void *, u16);
7613:	static int add_device_sync(struct hci_dev *, void *);
8989:	static int add_ext_adv_data(struct sock *, struct hci_dev *, void *, u16);
8946:	static void add_ext_adv_data_complete(struct hci_dev *, void *, int);
8968:	static int add_ext_adv_data_sync(struct hci_dev *, void *);
8830:	static int add_ext_adv_params(struct sock *, struct hci_dev *, void *, u16);
8771:	static void add_ext_adv_params_complete(struct hci_dev *, void *, int);
8822:	static int add_ext_adv_params_sync(struct hci_dev *, void *);
5677:	static int add_remote_oob_data(struct sock *, struct hci_dev *, void *, u16);
2626:	static int add_uuid(struct sock *, struct hci_dev *, void *, u16);
2615:	static int add_uuid_sync(struct hci_dev *, void *);
1456:	static int addr_cmd_complete(struct mgmt_pending_cmd *, u8);
3900:	static int appearance_changed_sync(struct hci_dev *, void *);
1164:	static u16 append_eir_data_to_buf(struct hci_dev *, u8 *);
6220:	static int block_device(struct sock *, struct hci_dev *, void *, u16);
3575:	static int cancel_pair_device(struct sock *, struct hci_dev *, void *, u16);
1436:	static void cmd_complete_rsp(struct mgmt_pending_cmd *, void *);
1428:	static void cmd_status_rsp(struct mgmt_pending_cmd *, void *);
6178:	static int confirm_name(struct sock *, struct hci_dev *, void *, u16);
3093:	static int disconnect(struct sock *, struct hci_dev *, void *, u16);
9706:	static void disconnect_rsp(struct mgmt_pending_cmd *, void *);
1030:	static void discov_off(struct work_struct *);
5845:	static bool discovery_type_is_valid(struct hci_dev *, uint8_t, uint8_t *);
10078:	static bool eir_has_uuids(u8 *, u16, u16, u8 (*)[16]);
6597:	static void fast_connectable_complete(struct hci_dev *, void *, int);
1450:	static int generic_cmd_complete(struct mgmt_pending_cmd *, u8);
9194:	static int get_adv_size_info(struct sock *, struct hci_dev *, void *, u16);
7475:	static int get_clock_info(struct sock *, struct hci_dev *, void *, u16);
7422:	static void get_clock_info_complete(struct hci_dev *, void *, int);
7453:	static int get_clock_info_sync(struct hci_dev *, void *);
7331:	static int get_conn_info(struct sock *, struct hci_dev *, void *, u16);
7264:	static void get_conn_info_complete(struct hci_dev *, void *, int);
7293:	static int get_conn_info_sync(struct hci_dev *, void *);
3178:	static int get_connections(struct sock *, struct hci_dev *, void *, u16);
867:	static u32 get_current_settings(struct hci_dev *);
5036:	static int get_device_flags(struct sock *, struct hci_dev *, void *, u16);
3940:	static int get_phy_configuration(struct sock *, struct hci_dev *, void *, u16);
751:	static u32 get_selected_phys(struct hci_dev *);
3413:	static void le_pairing_complete_cb(struct hci_conn *, u8);
7864:	static int load_conn_param(struct sock *, struct hci_dev *, void *, u16);
7078:	static int load_irks(struct sock *, struct hci_dev *, void *, u16);
2832:	static int load_link_keys(struct sock *, struct hci_dev *, void *, u16);
7168:	static int load_long_term_keys(struct sock *, struct hci_dev *, void *, u16);
2323:	static int mesh_features(struct sock *, struct hci_dev *, void *, u16);
1085:	static void mesh_next(struct hci_dev *, void *, int);
2411:	static int mesh_send(struct sock *, struct hci_dev *, void *, u16);
2377:	static int mesh_send_cancel(struct sock *, struct hci_dev *, void *, u16);
1101:	static void mesh_send_done(struct work_struct *);
1069:	static int mesh_send_done_sync(struct hci_dev *, void *);
2238:	static void mesh_send_start_complete(struct hci_dev *, void *, int);
2259:	static int mesh_send_sync(struct hci_dev *, void *);
5258:	static void mgmt_add_adv_patterns_monitor_complete(struct hci_dev *, void *, int);
5286:	static int mgmt_add_adv_patterns_monitor_sync(struct hci_dev *, void *);
2603:	static void mgmt_class_complete(struct hci_dev *, void *, int);
1112:	static void mgmt_init_hdev(struct sock *, struct hci_dev *);
5472:	static void mgmt_remove_adv_monitor_complete(struct hci_dev *, void *, int);
5495:	static int mgmt_remove_adv_monitor_sync(struct hci_dev *, void *);
1656:	static void mgmt_set_connectable_complete(struct hci_dev *, void *, int);
1482:	static void mgmt_set_discoverable_complete(struct hci_dev *, void *, int);
1312:	static void mgmt_set_powered_complete(struct hci_dev *, void *, int);
3791:	static int name_changed_sync(struct hci_dev *, void *);
1304:	static int new_settings(struct hci_dev *, struct sock *);
3432:	static int pair_device(struct sock *, struct hci_dev *, void *, u16);
3356:	static int pairing_complete(struct mgmt_pending_cmd *, u8);
3397:	static void pairing_complete_cb(struct hci_conn *, u8);
3704:	static int pin_code_neg_reply(struct sock *, struct hci_dev *, void *, u16);
3253:	static int pin_code_reply(struct sock *, struct hci_dev *, void *, u16);
8400:	static int read_adv_features(struct sock *, struct hci_dev *, void *, u16);
5209:	static int read_adv_mon_features(struct sock *, struct hci_dev *, void *, u16);
379:	static int read_commands(struct sock *, struct hci_dev *, void *, u16);
671:	static int read_config_info(struct sock *, struct hci_dev *, void *, u16);
4276:	static int read_controller_cap(struct sock *, struct hci_dev *, void *, u16);
1134:	static int read_controller_info(struct sock *, struct hci_dev *, void *, u16);
4387:	static int read_exp_features_info(struct sock *, struct hci_dev *, void *, u16);
1188:	static int read_ext_controller_info(struct sock *, struct hci_dev *, void *, u16);
551:	static int read_ext_index_list(struct sock *, struct hci_dev *, void *, u16);
431:	static int read_index_list(struct sock *, struct hci_dev *, void *, u16);
5635:	static int read_local_oob_data(struct sock *, struct hci_dev *, void *, u16);
5553:	static void read_local_oob_data_complete(struct hci_dev *, void *, int);
5620:	static int read_local_oob_data_sync(struct hci_dev *, void *);
8202:	static int read_local_oob_ext_data(struct sock *, struct hci_dev *, void *, u16);
8057:	static void read_local_oob_ext_data_complete(struct hci_dev *, void *, int);
491:	static int read_unconf_index_list(struct sock *, struct hci_dev *, void *, u16);
366:	static int read_version(struct sock *, struct hci_dev *, void *, u16);
5507:	static int remove_adv_monitor(struct sock *, struct hci_dev *, void *, u16);
9146:	static int remove_advertising(struct sock *, struct hci_dev *, void *, u16);
9108:	static void remove_advertising_complete(struct hci_dev *, void *, int);
9130:	static int remove_advertising_sync(struct hci_dev *, void *);
7736:	static int remove_device(struct sock *, struct hci_dev *, void *, u16);
7731:	static int remove_device_sync(struct hci_dev *, void *);
5785:	static int remove_remote_oob_data(struct sock *, struct hci_dev *, void *, u16);
2697:	static int remove_uuid(struct sock *, struct hci_dev *, void *, u16);
2686:	static int remove_uuid_sync(struct hci_dev *, void *);
1015:	static void rpa_expired(struct work_struct *);
1003:	static int rpa_expired_sync(struct hci_dev *, void *);
2350:	static int send_cancel(struct hci_dev *, void *);
2313:	static void send_count(struct mgmt_mesh_tx *, void *);
1244:	static int send_settings_rsp(struct sock *, u16, struct hci_dev *);
992:	static void service_cache_off(struct work_struct *);
984:	static int service_cache_sync(struct hci_dev *, void *);
6385:	static int set_adv_sync(struct hci_dev *, void *);
6419:	static int set_advertising(struct sock *, struct hci_dev *, void *, u16);
6337:	static void set_advertising_complete(struct hci_dev *, void *, int);
3905:	static int set_appearance(struct sock *, struct hci_dev *, void *, u16);
4178:	static int set_blocked_keys(struct sock *, struct hci_dev *, void *, u16);
1781:	static int set_bondable(struct sock *, struct hci_dev *, void *, u16);
6726:	static int set_bredr(struct sock *, struct hci_dev *, void *, u16);
6685:	static void set_bredr_complete(struct hci_dev *, void *, int);
6708:	static int set_bredr_sync(struct hci_dev *, void *);
2765:	static int set_class_sync(struct hci_dev *, void *);
1721:	static int set_connectable(struct sock *, struct hci_dev *, void *, u16);
1714:	static int set_connectable_sync(struct hci_dev *, void *);
6958:	static int set_debug_keys(struct sock *, struct hci_dev *, void *, u16);
3973:	static void set_default_phy_complete(struct hci_dev *, void *, int);
4010:	static int set_default_phy_sync(struct hci_dev *, void *);
2780:	static int set_dev_class(struct sock *, struct hci_dev *, void *, u16);
5102:	static int set_device_flags(struct sock *, struct hci_dev *, void *, u16);
6297:	static int set_device_id(struct sock *, struct hci_dev *, void *, u16);
6292:	static int set_device_id_sync(struct hci_dev *, void *);
1523:	static int set_discoverable(struct sock *, struct hci_dev *, void *, u16);
1516:	static int set_discoverable_sync(struct hci_dev *, void *);
5002:	static int set_exp_feature(struct sock *, struct hci_dev *, void *, u16);
7949:	static int set_external_config(struct sock *, struct hci_dev *, void *, u16);
6629:	static int set_fast_connectable(struct sock *, struct hci_dev *, void *, u16);
2035:	static int set_hs(struct sock *, struct hci_dev *, void *, u16);
3315:	static int set_io_capability(struct sock *, struct hci_dev *, void *, u16);
2472:	static int set_le(struct sock *, struct hci_dev *, void *, u16);
2096:	static void set_le_complete(struct hci_dev *, void *, int);
4871:	static int set_le_simultaneous_roles_func(struct sock *, struct hci_dev *, struct mgmt_cp_set_exp_feature *, u16);
2117:	static int set_le_sync(struct hci_dev *, void *);
1819:	static int set_link_security(struct sock *, struct hci_dev *, void *, u16);
3837:	static int set_local_name(struct sock *, struct hci_dev *, void *, u16);
2200:	static int set_mesh(struct sock *, struct hci_dev *, void *, u16);
2161:	static void set_mesh_complete(struct hci_dev *, void *, int);
2177:	static int set_mesh_sync(struct hci_dev *, void *);
4617:	static int set_mgmt_mesh_func(struct sock *, struct hci_dev *, struct mgmt_cp_set_exp_feature *, u16);
3796:	static void set_name_complete(struct hci_dev *, void *, int);
3821:	static int set_name_sync(struct hci_dev *, void *);
4813:	static int set_offload_codec_func(struct sock *, struct hci_dev *, struct mgmt_cp_set_exp_feature *, u16);
4049:	static int set_phy_configuration(struct sock *, struct hci_dev *, void *, u16);
1358:	static int set_powered(struct sock *, struct hci_dev *, void *, u16);
1348:	static int set_powered_sync(struct hci_dev *, void *);
7005:	static int set_privacy(struct sock *, struct hci_dev *, void *, u16);
8005:	static int set_public_address(struct sock *, struct hci_dev *, void *, u16);
4739:	static int set_quality_report_func(struct sock *, struct hci_dev *, struct mgmt_cp_set_exp_feature *, u16);
4674:	static int set_rpa_resolution_func(struct sock *, struct hci_dev *, struct mgmt_cp_set_exp_feature *, u16);
6548:	static int set_scan_params(struct sock *, struct hci_dev *, void *, u16);
6877:	static int set_secure_conn(struct sock *, struct hci_dev *, void *, u16);
6827:	static void set_secure_conn_complete(struct hci_dev *, void *, int);
6865:	static int set_secure_conn_sync(struct hci_dev *, void *);
1955:	static int set_ssp(struct sock *, struct hci_dev *, void *, u16);
1888:	static void set_ssp_complete(struct hci_dev *, void *, int);
1937:	static int set_ssp_sync(struct hci_dev *, void *);
6504:	static int set_static_address(struct sock *, struct hci_dev *, void *, u16);
4227:	static int set_wideband_speech(struct sock *, struct hci_dev *, void *, u16);
4534:	static int set_zero_key_func(struct sock *, struct hci_dev *, struct mgmt_cp_set_exp_feature *, u16);
1412:	static void settings_rsp(struct mgmt_pending_cmd *, void *);
10009:	static void sk_lookup(struct mgmt_pending_cmd *, void *);
5967:	static int start_discovery(struct sock *, struct hci_dev *, void *, u16);
5872:	static void start_discovery_complete(struct hci_dev *, void *, int);
5896:	static int start_discovery_internal(struct sock *, struct hci_dev *, u16, void *, u16);
5891:	static int start_discovery_sync(struct hci_dev *, void *);
5974:	static int start_limited_discovery(struct sock *, struct hci_dev *, void *, u16);
5982:	static int start_service_discovery(struct sock *, struct hci_dev *, void *, u16);
6133:	static int stop_discovery(struct sock *, struct hci_dev *, void *, u16);
6111:	static void stop_discovery_complete(struct hci_dev *, void *, int);
6128:	static int stop_discovery_sync(struct hci_dev *, void *);
8508:	static bool tlv_data_is_valid(struct hci_dev *, u32, u8 *, u8, bool);
8462:	static u8 tlv_data_max_len(struct hci_dev *, u32, bool);
6256:	static int unblock_device(struct sock *, struct hci_dev *, void *, u16);
2964:	static int unpair_device(struct sock *, struct hci_dev *, void *, u16);
2933:	static void unpair_device_complete(struct hci_dev *, void *, int);
9718:	static void unpair_device_rsp(struct mgmt_pending_cmd *, void *);
2945:	static int unpair_device_sync(struct hci_dev *, void *);
3732:	static int user_confirm_neg_reply(struct sock *, struct hci_dev *, void *, u16);
3716:	static int user_confirm_reply(struct sock *, struct hci_dev *, void *, u16);
3633:	static int user_pairing_resp(struct sock *, struct hci_dev *, struct mgmt_addr_info *, u16, u16, __le32);
3756:	static int user_passkey_neg_reply(struct sock *, struct hci_dev *, void *, u16);
3744:	static int user_passkey_reply(struct sock *, struct hci_dev *, void *, u16);
6621:	static int write_fast_connectable_sync(struct hci_dev *, void *);

File net/bluetooth/mgmt_config.c:
330:	int read_def_runtime_config(struct sock *, struct hci_dev *, void *, u16);
44:	int read_def_system_config(struct sock *, struct hci_dev *, void *, u16);
339:	int set_def_runtime_config(struct sock *, struct hci_dev *, void *, u16);
128:	int set_def_system_config(struct sock *, struct hci_dev *, void *, u16);

File net/bluetooth/mgmt_util.c:
59:	struct sk_buff *mgmt_alloc_skb(struct hci_dev *, u16, unsigned int);
169:	int mgmt_cmd_complete(struct sock *, u16, u16, u8, void *, size_t);
126:	int mgmt_cmd_status(struct sock *, u16, u16, u8);
360:	struct mgmt_mesh_tx *mgmt_mesh_add(struct sock *, struct hci_dev *, void *, u16);
345:	struct mgmt_mesh_tx *mgmt_mesh_find(struct hci_dev *, u8);
318:	void mgmt_mesh_foreach(struct hci_dev *, void (*)(struct mgmt_mesh_tx *, void *), void *, struct sock *);
330:	struct mgmt_mesh_tx *mgmt_mesh_next(struct hci_dev *, struct sock *);
385:	void mgmt_mesh_remove(struct mgmt_mesh_tx *);
290:	struct mgmt_pending_cmd *mgmt_pending_add(struct sock *, u16, struct hci_dev *, void *, u16);
217:	struct mgmt_pending_cmd *mgmt_pending_find(unsigned short, u16, struct hci_dev *);
232:	struct mgmt_pending_cmd *mgmt_pending_find_data(unsigned short, u16, struct hci_dev *, const void *);
249:	void mgmt_pending_foreach(u16, struct hci_dev *, void (*)(struct mgmt_pending_cmd *, void *), void *);
305:	void mgmt_pending_free(struct mgmt_pending_cmd *);
263:	struct mgmt_pending_cmd *mgmt_pending_new(struct sock *, u16, struct hci_dev *, void *, u16);
312:	void mgmt_pending_remove(struct mgmt_pending_cmd *);
111:	int mgmt_send_event(u16, struct hci_dev *, unsigned short, void *, u16, int, struct sock *);
75:	int mgmt_send_event_skb(unsigned short, struct sk_buff *, int, struct sock *);
33:	static struct sk_buff *create_monitor_ctrl_event(__le16, u32, u16, u16, void *);

File net/bluetooth/msft.h:
41:	static void msft_vendor_evt(struct hci_dev *, void *, struct sk_buff *);

File net/bluetooth/sco.c:
1328:	int sco_connect_ind(struct hci_dev *, bdaddr_t *, __u8 *);
1493:	void sco_exit(void);
1453:	int sco_init(void);
1382:	void sco_recv_scodata(struct hci_conn *, struct sk_buff *);
406:	static void __sco_sock_close(struct sock *);
154:	static void sco_chan_del(struct sock *, int);
179:	static void sco_conn_del(struct hci_conn *, int);
1355:	static void sco_connect_cfm(struct hci_conn *, __u8);
1422:	static int sco_debugfs_open(struct inode *, struct file *);
1406:	static int sco_debugfs_show(struct seq_file *, void *);
1372:	static void sco_disconn_cfm(struct hci_conn *, __u8);
450:	static void sco_skb_put_cmsg(struct sk_buff *, struct msghdr *, struct sock *);
652:	static int sco_sock_accept(struct socket *, struct socket *, int, bool);
530:	static int sco_sock_bind(struct socket *, struct sockaddr *, int);
564:	static int sco_sock_connect(struct socket *, struct sockaddr *, int, int);
508:	static int sco_sock_create(struct net *, struct socket *, int, int);
366:	static void sco_sock_destruct(struct sock *);
707:	static int sco_sock_getname(struct socket *, struct sockaddr *, int);
1032:	static int sco_sock_getsockopt(struct socket *, int, int, char *, int *);
612:	static int sco_sock_listen(struct socket *, int);
808:	static int sco_sock_recvmsg(struct socket *, struct msghdr *, size_t, int);
1244:	static int sco_sock_release(struct socket *);
725:	static int sco_sock_sendmsg(struct socket *, struct msghdr *, size_t);
830:	static int sco_sock_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
1214:	static int sco_sock_shutdown(struct socket *, int);
80:	static void sco_sock_timeout(struct work_struct *);

File net/bluetooth/smp.c:
2441:	int smp_cancel_and_remove_pairing(struct hci_dev *, bdaddr_t *, u8);
2349:	int smp_conn_security(struct hci_conn *, __u8);
3372:	int smp_force_bredr(struct hci_dev *, bool);
537:	int smp_generate_oob(struct hci_dev *, u8 *, u8 *);
515:	int smp_generate_rpa(struct hci_dev *, const u8 *, bdaddr_t *);
496:	bool smp_irk_matches(struct hci_dev *, const u8 *, const bdaddr_t *);
3398:	int smp_register(struct hci_dev *);
2262:	bool smp_sufficient_security(struct hci_conn *, u8, enum smp_key_pref);
3448:	void smp_unregister(struct hci_dev *);
1624:	int smp_user_confirm_reply(struct hci_conn *, u16, __le32);
168:	static int aes_cmac(struct crypto_shash *, const u8 *, const u8 *, size_t, u8 *);
3068:	static void bredr_pairing(struct l2cap_chan *);
1689:	static void build_bredr_pairing_cmd(struct smp_chan *, struct smp_cmd_pairing *, struct smp_cmd_pairing *);
646:	static void build_pairing_cmd(struct l2cap_conn *, struct smp_cmd_pairing *, struct smp_cmd_pairing *, __u8);
1438:	static void sc_dhkey_check(struct smp_chan *);
1417:	static int sc_mackey_and_ltk(struct smp_chan *, u8 *, u8 *);
1495:	static u8 sc_passkey_round(struct smp_chan *, u8);
1474:	static u8 sc_passkey_send_confirm(struct smp_chan *);
1869:	static u8 sc_send_public_key(struct smp_chan *);
3278:	static struct l2cap_chan *smp_add_cid(struct hci_dev *, u16);
3197:	static struct sk_buff *smp_alloc_skb_cb(struct l2cap_chan *, unsigned long, unsigned long, int);
1377:	static struct smp_chan *smp_chan_create(struct l2cap_conn *);
741:	static void smp_chan_destroy(struct l2cap_conn *);
947:	static u8 smp_confirm(struct smp_chan *);
3355:	static void smp_del_chan(struct l2cap_chan *);
1233:	static void smp_distribute_keys(struct smp_chan *);
374:	static int smp_e(const u8 *, u8 *);
795:	static void smp_failure(struct l2cap_conn *, u8);
2238:	static bool smp_ltk_encrypt(struct l2cap_conn *, u8);
3230:	static struct l2cap_chan *smp_new_conn_cb(struct l2cap_chan *);
3159:	static void smp_ready_cb(struct l2cap_chan *);
3178:	static int smp_recv_cb(struct l2cap_chan *, struct sk_buff *);
3135:	static void smp_resume_cb(struct l2cap_chan *);
588:	static void smp_send_cmd(struct l2cap_conn *, u8, u16, void *);
3055:	static void smp_teardown_cb(struct l2cap_chan *, int);
1366:	static void smp_timeout(struct work_struct *);
849:	static int tk_request(struct l2cap_conn *, u8, u8, u8, u8);

File net/bpf/test_run.c:
487:	int bpf_fentry_test1(int);
493:	int bpf_fentry_test2(int, u64);
498:	int bpf_fentry_test3(char, int, u64);
503:	int bpf_fentry_test4(void *, char, int, u64);
508:	int bpf_fentry_test5(u64, void *, short, int, u64);
513:	int bpf_fentry_test6(u64, void *, short, int, void *, u64);
522:	int bpf_fentry_test7(struct bpf_fentry_test_t *);
527:	int bpf_fentry_test8(struct bpf_fentry_test_t *);
636:	void bpf_kfunc_call_int_mem_release(int *);
603:	void bpf_kfunc_call_memb1_release(struct prog_test_member1 *);
585:	struct prog_test_member *bpf_kfunc_call_memb_acquire(void);
599:	void bpf_kfunc_call_memb_release(struct prog_test_member *);
538:	u64 bpf_kfunc_call_test1(struct sock *, u32, u64, u32, u64);
543:	int bpf_kfunc_call_test2(struct sock *, u32, u32);
548:	struct sock *bpf_kfunc_call_test3(struct sock *);
631:	int *bpf_kfunc_call_test_acq_rdonly_mem(struct prog_test_ref_kfunc *, const int);
578:	struct prog_test_ref_kfunc *bpf_kfunc_call_test_acquire(unsigned long *);
729:	void bpf_kfunc_call_test_destructive(void);
701:	void bpf_kfunc_call_test_fail1(struct prog_test_fail1 *);
705:	void bpf_kfunc_call_test_fail2(struct prog_test_fail2 *);
709:	void bpf_kfunc_call_test_fail3(struct prog_test_fail3 *);
621:	int *bpf_kfunc_call_test_get_rdonly_mem(struct prog_test_ref_kfunc *, const int);
616:	int *bpf_kfunc_call_test_get_rdwr_mem(struct prog_test_ref_kfunc *, const int);
641:	struct prog_test_ref_kfunc *bpf_kfunc_call_test_kptr_get(struct prog_test_ref_kfunc **, int, int);
717:	void bpf_kfunc_call_test_mem_len_fail1(void *, int);
721:	void bpf_kfunc_call_test_mem_len_fail2(u64 *, int);
713:	void bpf_kfunc_call_test_mem_len_pass1(void *, int);
693:	void bpf_kfunc_call_test_pass1(struct prog_test_pass1 *);
697:	void bpf_kfunc_call_test_pass2(struct prog_test_pass2 *);
689:	void bpf_kfunc_call_test_pass_ctx(struct __sk_buff *);
725:	void bpf_kfunc_call_test_ref(struct prog_test_ref_kfunc *);
591:	void bpf_kfunc_call_test_release(struct prog_test_ref_kfunc *);
532:	int bpf_modify_return_test(int, int *);
1439:	int bpf_prog_test_run_flow_dissector(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
857:	int bpf_prog_test_run_raw_tp(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
1508:	int bpf_prog_test_run_sk_lookup(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
1085:	int bpf_prog_test_run_skb(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
1608:	int bpf_prog_test_run_syscall(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
797:	int bpf_prog_test_run_tracing(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
1279:	int bpf_prog_test_run_xdp(struct bpf_prog *, const union bpf_attr *, union bpf_attr *);
848:	static void __bpf_prog_test_run_raw_tp(void *);
946:	static int bpf_ctx_finish(const union bpf_attr *, union bpf_attr *, const void *, u32);
915:	static void *bpf_ctx_init(const union bpf_attr *, u32);
1662:	static int bpf_prog_test_run_init(void);
413:	static int bpf_test_finish(const union bpf_attr *, union bpf_attr *, const void *, struct skb_shared_info *, u32, u32, u32);
772:	static void *bpf_test_init(const union bpf_attr *, u32, u32, u32, u32);
372:	static int bpf_test_run(struct bpf_prog *, void *, u32, u32 *, u32 *, bool);
344:	static int bpf_test_run_xdp_live(struct bpf_prog *, struct xdp_buff *, u32, u32, u32 *);
57:	static bool bpf_test_timer_continue(struct bpf_test_timer *, int, u32, int *, u32 *);
33:	static void bpf_test_timer_enter(struct bpf_test_timer *);
45:	static void bpf_test_timer_leave(struct bpf_test_timer *);
986:	static int convert___skb_to_skb(struct sk_buff *, struct __sk_buff *);
1061:	static void convert_skb_to___skb(struct sk_buff *, struct __sk_buff *);
1424:	static int verify_user_bpf_flow_keys(struct bpf_flow_keys *);
1267:	static void xdp_convert_buff_to_md(struct xdp_buff *, struct xdp_md *);
1221:	static int xdp_convert_md_to_buff(struct xdp_md *, struct xdp_buff *);
119:	static void xdp_test_run_init_page(struct page *, void *);

File net/bridge/br.c:
281:	int br_boolopt_get(const struct net_bridge *, enum br_boolopt_id);
321:	void br_boolopt_multi_get(const struct net_bridge *, struct br_boolopt_multi *);
299:	int br_boolopt_multi_toggle(struct net_bridge *, struct br_boolopt_multi *, struct netlink_ext_ack *);
257:	int br_boolopt_toggle(struct net_bridge *, enum br_boolopt_id, bool, struct netlink_ext_ack *);
335:	void br_opt_toggle(struct net_bridge *, enum net_bridge_opts, bool);
448:	static void br_deinit(void);
28:	static int br_device_event(struct notifier_block *, unsigned long, void *);
377:	static int br_init(void);
351:	static void br_net_exit_batch(struct list_head *);
206:	static int br_switchdev_blocking_event(struct notifier_block *, unsigned long, void *);
150:	static int br_switchdev_event(struct notifier_block *, unsigned long, void *);

File net/bridge/br_arp_nd_proxy.c:
125:	void br_do_proxy_suppress_arp(struct sk_buff *, struct net_bridge *, u16, struct net_bridge_port *);
399:	void br_do_suppress_nd(struct sk_buff *, struct net_bridge *, u16, struct net_bridge_port *, struct nd_msg *);
232:	struct nd_msg *br_is_nd_neigh_msg(struct sk_buff *, struct nd_msg *);
27:	void br_recalculate_neigh_suppress_enabled(struct net_bridge *);
43:	static void br_arp_send(struct net_bridge *, struct net_bridge_port *, struct net_device *, __be32, __be32, const unsigned char *, const unsigned char *, const unsigned char *, __be16, u16);
91:	static int br_chk_addr_ip(struct net_device *, struct netdev_nested_priv *);
371:	static int br_chk_addr_ip6(struct net_device *, struct netdev_nested_priv *);
109:	static bool br_is_local_ip(struct net_device *, __be32);
249:	static void br_nd_send(struct net_bridge *, struct net_bridge_port *, struct sk_buff *, struct neighbour *, __be16, u16, struct nd_msg *);

File net/bridge/br_device.c:
482:	void br_dev_setup(struct net_device *);
28:	netdev_tx_t br_dev_xmit(struct sk_buff *, struct net_device *);
376:	static int br_add_slave(struct net_device *, struct net_device *, struct netlink_ext_ack *);
211:	static int br_change_mtu(struct net_device *, int);
385:	static int br_del_slave(struct net_device *, struct net_device *);
190:	static void br_dev_change_rx_flags(struct net_device *, int);
117:	static int br_dev_init(struct net_device *);
171:	static int br_dev_open(struct net_device *);
186:	static void br_dev_set_multicast_list(struct net_device *);
196:	static int br_dev_stop(struct net_device *);
159:	static void br_dev_uninit(struct net_device *);
392:	static int br_fill_forward_path(struct net_device_path_ctx *, struct net_device_path *);
291:	static netdev_features_t br_fix_features(struct net_device *, netdev_features_t);
260:	static int br_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
252:	static void br_getinfo(struct net_device *, struct ethtool_drvinfo *);
228:	static int br_set_mac_address(struct net_device *, void *);

File net/bridge/br_fdb.c:
1158:	int br_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, const unsigned char *, u16, u16, struct netlink_ext_ack *);
835:	int br_fdb_add_local(struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16);
487:	void br_fdb_change_mac_address(struct net_bridge *, const u8 *);
445:	void br_fdb_changeaddr(struct net_bridge_port *, const unsigned char *);
522:	void br_fdb_cleanup(struct work_struct *);
1492:	void br_fdb_clear_offload(const struct net_device *, u16);
1278:	int br_fdb_delete(struct ndmsg *, struct nlattr **, struct net_device *, const unsigned char *, u16, struct netlink_ext_ack *);
664:	int br_fdb_delete_bulk(struct ndmsg *, struct nlattr **, struct net_device *, u16, struct netlink_ext_ack *);
729:	void br_fdb_delete_by_port(struct net_bridge *, const struct net_bridge_port *, u16, int);
918:	int br_fdb_dump(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *);
1379:	int br_fdb_external_learn_add(struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, bool, bool);
1458:	int br_fdb_external_learn_del(struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, bool);
790:	int br_fdb_fillbuf(struct net_bridge *, void *, unsigned long, unsigned long);
371:	void br_fdb_find_delete_local(struct net_bridge *, const struct net_bridge_port *, const unsigned char *, u16);
245:	struct net_device *br_fdb_find_port(const struct net_device *, const unsigned char *, __u16);
269:	struct net_bridge_fdb_entry *br_fdb_find_rcu(struct net_bridge *, const unsigned char *, __u16);
48:	void br_fdb_fini(void);
586:	void br_fdb_flush(struct net_bridge *, const struct net_bridge_fdb_flush_desc *);
970:	int br_fdb_get(struct sk_buff *, struct nlattr **, struct net_device *, const unsigned char *, u16, u32, u32, struct netlink_ext_ack *);
58:	void br_fdb_hash_fini(struct net_bridge *);
53:	int br_fdb_hash_init(struct net_bridge *);
36:	int br_fdb_init(void);
1478:	void br_fdb_offloaded_set(struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, bool);
1327:	int br_fdb_sync_static(struct net_bridge *, struct net_bridge_port *);
1362:	void br_fdb_unsync_static(struct net_bridge *, struct net_bridge_port *);
853:	void br_fdb_update(struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, unsigned long);
1115:	static int __br_fdb_add(struct ndmsg *, struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16, u16, struct nlattr **, struct netlink_ext_ack *);
281:	static void fdb_add_hw_addr(struct net_bridge *, const unsigned char *);
415:	static int fdb_add_local(struct net_bridge *, struct net_bridge_port *, const unsigned char *, u16);
385:	static struct net_bridge_fdb_entry *fdb_create(struct net_bridge *, struct net_bridge_port *, const unsigned char *, __u16, unsigned long);
309:	static void fdb_del_hw_addr(struct net_bridge *, const unsigned char *);
321:	static void fdb_delete(struct net_bridge *, struct net_bridge_fdb_entry *, bool);
337:	static void fdb_delete_local(struct net_bridge *, const struct net_bridge_port *, struct net_bridge_fdb_entry *);
99:	static int fdb_fill_info(struct sk_buff *, const struct net_bridge *, const struct net_bridge_fdb_entry *, u32, u32, int, unsigned int);
215:	static struct net_bridge_fdb_entry *fdb_find_rcu(struct rhashtable *, const unsigned char *, __u16);
187:	static void fdb_notify(struct net_bridge *, const struct net_bridge_fdb_entry *, int, bool);
79:	static void fdb_rcu_free(struct callback_head *);

File net/bridge/br_forward.c:
33:	int br_dev_queue_push_xmit(struct net *, struct sock *, struct sk_buff *);
199:	void br_flood(struct net_bridge *, struct sk_buff *, enum br_pkt_type, bool, bool);
144:	void br_forward(const struct net_bridge_port *, struct sk_buff *, bool, bool);
63:	int br_forward_finish(struct net *, struct sock *, struct sk_buff *);
277:	void br_multicast_flood(struct net_bridge_mdb_entry *, struct sk_buff *, struct net_bridge_mcast *, bool, bool);
73:	static void __br_forward(const struct net_bridge_port *, struct sk_buff *, bool);
174:	static struct net_bridge_port *maybe_deliver(struct net_bridge_port *, struct net_bridge_port *, struct sk_buff *, bool);

File net/bridge/br_if.c:
454:	int br_add_bridge(struct net *, const char *);
566:	int br_add_if(struct net_bridge *, struct net_device *, struct netlink_ext_ack *);
474:	int br_del_bridge(struct net *, const char *);
725:	int br_del_if(struct net_bridge *, struct net_device *);
379:	void br_dev_delete(struct net_device *, struct list_head *);
544:	netdev_features_t br_features_recompute(struct net_bridge *, netdev_features_t);
144:	void br_manage_promisc(struct net_bridge *);
512:	void br_mtu_auto_adjust(struct net_bridge *);
73:	void br_port_carrier_check(struct net_bridge_port *, bool *);
766:	bool br_port_flag_is_set(const struct net_device *, unsigned long);
755:	void br_port_flags_change(struct net_bridge_port *, unsigned long);
178:	int nbp_backup_change(struct net_bridge_port *, struct net_device *);
527:	static void br_set_gso_limits(struct net_bridge *);
265:	static void brport_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
332:	static void del_nbp(struct net_bridge_port *);
291:	static void destroy_nbp_rcu(struct callback_head *);
230:	static void nbp_update_port_count(struct net_bridge *);
420:	static struct net_bridge_port *new_nbp(struct net_bridge *, struct net_device *);
35:	static int port_cost(struct net_device *);
258:	static void release_nbp(struct kobject *);

File net/bridge/br_input.c:
444:	void br_add_frame(struct net_bridge *, struct br_frame_type *);
449:	void br_del_frame(struct net_bridge *, struct br_frame_type *);
436:	rx_handler_func_t *br_get_rx_handler(const struct net_device *);
74:	int br_handle_frame_finish(struct net *, struct sock *, struct sk_buff *);
226:	static void __br_handle_local_finish(struct sk_buff *);
320:	static rx_handler_result_t br_handle_frame(struct sk_buff **);
240:	static int br_handle_local_finish(struct net *, struct sock *, struct sk_buff *);
27:	static int br_netif_receive_skb(struct net *, struct sock *, struct sk_buff *);
33:	static int br_pass_frame_up(struct sk_buff *);

File net/bridge/br_ioctl.c:
144:	int br_dev_siocdevprivate(struct net_device *, struct ifreq *, void *, int);
397:	int br_ioctl_stub(struct net *, struct net_bridge *, unsigned int, struct ifreq *, void *);

File net/bridge/br_mdb.c:
1534:	void br_mdb_init(void);
557:	void br_mdb_notify(struct net_device *, struct net_bridge_mdb_entry *, struct net_bridge_port_group *, int);
1541:	void br_mdb_uninit(void);
70:	int br_rports_fill_info(struct sk_buff *, const struct net_bridge_mcast *);
50:	size_t br_rports_size(const struct net_bridge_mcast *);
636:	void br_rtr_notify(struct net_device *, struct net_bridge_mcast_port *, int);
1150:	static int __br_mdb_add(const struct br_mdb_config *, struct netlink_ext_ack *);
1458:	static int __br_mdb_del(const struct br_mdb_config *);
149:	static void __mdb_entry_to_br_ip(struct br_mdb_entry *, struct br_ip *, struct nlattr **);
230:	static int __mdb_fill_info(struct sk_buff *, struct net_bridge_mdb_entry *, struct net_bridge_port_group *);
174:	static int __mdb_fill_srcs(struct sk_buff *, struct net_bridge_port_group *);
1396:	static int br_mdb_add(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
826:	static int br_mdb_add_group_sg(const struct br_mdb_config *, struct net_bridge_mdb_entry *, struct net_bridge_mcast *, unsigned char, struct netlink_ext_ack *);
968:	static int br_mdb_add_group_srcs(const struct br_mdb_config *, struct net_bridge_port_group *, struct net_bridge_mcast *, struct netlink_ext_ack *);
1232:	static int br_mdb_config_attrs_init(struct nlattr *, struct br_mdb_config *, struct netlink_ext_ack *);
1300:	static int br_mdb_config_init(struct net *, const struct nlmsghdr *, struct br_mdb_config *, struct netlink_ext_ack *);
1188:	static int br_mdb_config_src_list_init(struct nlattr *, struct br_mdb_config *, struct netlink_ext_ack *);
1499:	static int br_mdb_del(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
406:	static int br_mdb_dump(struct sk_buff *, struct netlink_callback *);
688:	static bool is_valid_mdb_entry(struct br_mdb_entry *, struct netlink_ext_ack *);
735:	static bool is_valid_mdb_source(struct nlattr *, __be16, struct netlink_ext_ack *);

File net/bridge/br_mst.c:
16:	bool br_mst_enabled(const struct net_device *);
259:	int br_mst_fill_info(struct sk_buff *, const struct net_bridge_vlan_group *);
25:	int br_mst_get_info(const struct net_device *, u16, unsigned long *);
51:	int br_mst_get_state(const struct net_device *, u16, u8 *);
233:	size_t br_mst_info_size(const struct net_bridge_vlan_group *);
325:	int br_mst_process(struct net_bridge_port *, const struct nlattr *, struct netlink_ext_ack *);
194:	int br_mst_set_enabled(struct net_bridge *, bool, struct netlink_ext_ack *);
90:	int br_mst_set_state(struct net_bridge_port *, u16, u8, struct netlink_ext_ack *);
183:	void br_mst_vlan_init_state(struct net_bridge_vlan *);
148:	int br_mst_vlan_set_msti(struct net_bridge_vlan *, u16);

File net/bridge/br_multicast.c:
654:	void __br_multicast_del_group_src(struct net_bridge_group_src *);
147:	struct net_bridge_mdb_entry *br_mdb_get(struct net_bridge_mcast *, struct sk_buff *, u16);
4948:	void br_mdb_hash_fini(struct net_bridge *);
4931:	int br_mdb_hash_init(struct net_bridge *);
104:	struct net_bridge_mdb_entry *br_mdb_ip_get(struct net_bridge *, struct br_ip *);
1870:	int br_multicast_add_port(struct net_bridge_port *);
4844:	void br_multicast_count(struct net_bridge *, const struct net_bridge_port *, const struct sk_buff *, u8, u8);
3903:	void br_multicast_ctx_deinit(struct net_bridge_mcast *);
3859:	void br_multicast_ctx_init(struct net_bridge *, struct net_bridge_vlan *, struct net_bridge_mcast *);
664:	void br_multicast_del_group_src(struct net_bridge_group_src *, bool);
684:	void br_multicast_del_pg(struct net_bridge_mdb_entry *, struct net_bridge_port_group *, struct net_bridge_port_group **);
1891:	void br_multicast_del_port(struct net_bridge_port *);
4184:	void br_multicast_dev_del(struct net_bridge *);
1970:	void br_multicast_disable_port(struct net_bridge_port *);
2952:	int br_multicast_dump_querier_state(struct sk_buff *, const struct net_bridge_mcast *, int);
1938:	void br_multicast_enable_port(struct net_bridge_port *);
4441:	bool br_multicast_enabled(const struct net_device *);
1219:	struct net_bridge_group_src *br_multicast_find_group_src(struct net_bridge_port_group *, struct br_ip *);
4885:	void br_multicast_get_stats(const struct net_bridge *, const struct net_bridge_port *, struct br_mcast_stats *);
4670:	bool br_multicast_has_querier_adjacent(struct net_device *, int);
4633:	bool br_multicast_has_querier_anywhere(struct net_device *, int);
4724:	bool br_multicast_has_router_adjacent(struct net_device *, int);
1325:	void br_multicast_host_join(const struct net_bridge_mcast *, struct net_bridge_mdb_entry *, bool);
1342:	void br_multicast_host_leave(struct net_bridge_mdb_entry *, bool);
3908:	void br_multicast_init(struct net_bridge *);
4864:	int br_multicast_init_stats(struct net_bridge *);
3948:	void br_multicast_join_snoopers(struct net_bridge *);
3979:	void br_multicast_leave_snoopers(struct net_bridge *);
4584:	int br_multicast_list_adjacent(struct net_device *, struct list_head *);
1157:	struct net_bridge_mdb_entry *br_multicast_new_group(struct net_bridge *, struct br_ip *);
1242:	struct net_bridge_group_src *br_multicast_new_group_src(struct net_bridge_port_group *, struct br_ip *);
1280:	struct net_bridge_port_group *br_multicast_new_port_group(struct net_bridge_port *, const struct br_ip *, struct net_bridge_port_group *, unsigned char, const unsigned char *, u8, u8);
4004:	void br_multicast_open(struct net_bridge *);
1862:	void br_multicast_port_ctx_deinit(struct net_bridge_mcast_port *);
1843:	void br_multicast_port_ctx_init(struct net_bridge_port *, struct net_bridge_vlan *, struct net_bridge_mcast_port *);
2937:	size_t br_multicast_querier_state_size(void);
3763:	int br_multicast_rcv(struct net_bridge_mcast **, struct net_bridge_mcast_port **, struct net_bridge_vlan *, struct sk_buff *, u16);
4449:	bool br_multicast_router(const struct net_device *);
4495:	int br_multicast_set_igmp_version(struct net_bridge_mcast *, unsigned long);
4515:	int br_multicast_set_mld_version(struct net_bridge_mcast *, unsigned long);
4257:	int br_multicast_set_port_router(struct net_bridge_mcast_port *, unsigned long);
4461:	int br_multicast_set_querier(struct net_bridge_mcast *, unsigned long);
4535:	void br_multicast_set_query_intvl(struct net_bridge_mcast *, unsigned long);
4203:	int br_multicast_set_router(struct net_bridge_mcast *, unsigned long);
4551:	void br_multicast_set_startup_query_intvl(struct net_bridge_mcast *, unsigned long);
4321:	int br_multicast_set_vlan_router(struct net_bridge_vlan *, u8);
445:	void br_multicast_sg_add_exclude_ports(struct net_bridge_mdb_entry *, struct net_bridge_port_group *);
319:	void br_multicast_star_g_handle_mode(struct net_bridge_port_group *, u8);
4160:	void br_multicast_stop(struct net_bridge *);
4384:	int br_multicast_toggle(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
4144:	bool br_multicast_toggle_global_vlan(struct net_bridge_vlan *, bool);
4040:	void br_multicast_toggle_one_vlan(struct net_bridge_vlan *, bool);
4105:	int br_multicast_toggle_vlan_snooping(struct net_bridge *, bool, struct netlink_ext_ack *);
4873:	void br_multicast_uninit_stats(struct net_bridge *);
1355:	static struct net_bridge_port_group *__br_multicast_add_group(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct br_ip *, const unsigned char *, u8, bool, bool);
1947:	static void __br_multicast_disable_port_ctx(struct net_bridge_mcast_port *);
1918:	static void __br_multicast_enable_port_ctx(struct net_bridge_mcast_port *);
2917:	static struct net_bridge_port *__br_multicast_get_querier_port(struct net_bridge *, const struct bridge_mcast_querier *);
3996:	static void __br_multicast_open(struct net_bridge_mcast *);
1628:	static void __br_multicast_send_query(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct net_bridge_port_group *, struct br_ip *, struct br_ip *, bool, u8, bool *);
1977:	static int __grp_src_delete_marked(struct net_bridge_port_group *);
1999:	static void __grp_src_query_marked_and_rexmit(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct net_bridge_port_group *);
1565:	static void br_ip4_multicast_local_router_expired(struct timer_list *);
1766:	static void br_ip4_multicast_port_query_expired(struct timer_list *);
1598:	static void br_ip4_multicast_querier_expired(struct timer_list *);
3826:	static void br_ip4_multicast_query_expired(struct timer_list *);
1519:	static void br_ip4_multicast_router_expired(struct timer_list *);
1574:	static void br_ip6_multicast_local_router_expired(struct timer_list *);
1775:	static void br_ip6_multicast_port_query_expired(struct timer_list *);
1607:	static void br_ip6_multicast_querier_expired(struct timer_list *);
3836:	static void br_ip6_multicast_query_expired(struct timer_list *);
1528:	static void br_ip6_multicast_router_expired(struct timer_list *);
3109:	static void br_multicast_add_router(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct hlist_node *, struct hlist_head *);
2562:	static bool br_multicast_block(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct net_bridge_port_group *, void *, void *, u32, size_t, int);
643:	static void br_multicast_destroy_group_src(struct net_bridge_mcast_gc *);
601:	static void br_multicast_destroy_mdb_entry(struct net_bridge_mcast_gc *);
671:	static void br_multicast_destroy_port_group(struct net_bridge_mcast_gc *);
568:	static void br_multicast_fwd_src_handle(struct net_bridge_group_src *);
532:	static void br_multicast_fwd_src_remove(struct net_bridge_group_src *, bool);
3846:	static void br_multicast_gc_work(struct work_struct *);
624:	static void br_multicast_group_expired(struct timer_list *);
1193:	static void br_multicast_group_src_expired(struct timer_list *);
2202:	static bool br_multicast_isexc(const struct net_bridge_mcast *, struct net_bridge_port_group *, void *, void *, u32, size_t, int);
2086:	static bool br_multicast_isinc_allow(const struct net_bridge_mcast *, struct net_bridge_port_group *, void *, void *, u32, size_t, int);
3423:	static void br_multicast_leave_group(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct br_ip *, struct bridge_mcast_other_query *, struct bridge_mcast_own_query *, const unsigned char *);
3160:	static void br_multicast_mark_router(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct timer_list *, struct hlist_node *, struct hlist_head *);
736:	static void br_multicast_port_group_expired(struct timer_list *);
1784:	static void br_multicast_port_group_rexmit(struct timer_list *);
1746:	static void br_multicast_port_query_expired(struct net_bridge_mcast_port *, struct bridge_mcast_own_query *);
1500:	static void br_multicast_router_expired(struct net_bridge_mcast_port *, struct timer_list *, struct hlist_node *);
1696:	static void br_multicast_send_query(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct bridge_mcast_own_query *);
382:	static void br_multicast_star_g_host_state(struct net_bridge_mdb_entry *);
4334:	static void br_multicast_start_querier(struct net_bridge_mcast *, struct bridge_mcast_own_query *);
2453:	static bool br_multicast_toex(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct net_bridge_port_group *, void *, void *, u32, size_t, int);
2326:	static bool br_multicast_toin(struct net_bridge_mcast *, struct net_bridge_mcast_port *, struct net_bridge_port_group *, void *, void *, u32, size_t, int);
4879:	static void mcast_stats_add_dir(u64 *, u64 *);

File net/bridge/br_multicast_eht.c:
196:	void br_multicast_eht_clean_sets(struct net_bridge_port_group *);
776:	bool br_multicast_eht_handle(const struct net_bridge_mcast *, struct net_bridge_port_group *, void *, void *, u32, size_t, int);
806:	int br_multicast_eht_set_hosts_limit(struct net_bridge_port *, u32);
161:	static void __eht_del_set_entry(struct net_bridge_group_eht_set_entry *);
603:	static bool __eht_inc_exc(const struct net_bridge_mcast *, struct net_bridge_port_group *, union net_bridge_eht_addr *, void *, u32, size_t, unsigned char, bool);
417:	static void br_multicast_create_eht_set_entry(const struct net_bridge_mcast *, struct net_bridge_port_group *, union net_bridge_eht_addr *, union net_bridge_eht_addr *, int, bool);
179:	static void br_multicast_del_eht_set(struct net_bridge_group_eht_set *);
460:	static bool br_multicast_del_eht_set_entry(struct net_bridge_port_group *, union net_bridge_eht_addr *, union net_bridge_eht_addr *);
149:	static void br_multicast_destroy_eht_set(struct net_bridge_mcast_gc *);
138:	static void br_multicast_destroy_eht_set_entry(struct net_bridge_mcast_gc *);
556:	static bool br_multicast_eht_allow(const struct net_bridge_mcast *, struct net_bridge_port_group *, union net_bridge_eht_addr *, void *, u32, size_t);
579:	static bool br_multicast_eht_block(const struct net_bridge_mcast *, struct net_bridge_port_group *, union net_bridge_eht_addr *, void *, u32, size_t);
208:	static void br_multicast_eht_set_entry_expired(struct timer_list *);
224:	static void br_multicast_eht_set_expired(struct timer_list *);

File net/bridge/br_netfilter_hooks.c:
1000:	int br_nf_hook_thresh(unsigned int, struct net *, struct sock *, struct sk_buff *, struct net_device *, struct net_device *, int (*)(struct net *, struct sock *, struct sk_buff *));
266:	int br_nf_pre_routing_finish_bridge(struct net *, struct sock *, struct sk_buff *);
163:	unsigned int nf_bridge_encap_header_len(const struct sk_buff *);
245:	void nf_bridge_update_protocol(struct sk_buff *);
448:	struct net_device *setup_pre_routing(struct sk_buff *, const struct net *);
1202:	static void br_netfilter_fini(void);
1183:	static int br_netfilter_init(void);
732:	static int br_nf_dev_queue_xmit(struct net *, struct sock *, struct sk_buff *);
909:	static int br_nf_dev_xmit(struct sk_buff *);
643:	static unsigned int br_nf_forward_arp(void *, struct sk_buff *, const struct nf_hook_state *);
542:	static int br_nf_forward_finish(struct net *, struct sock *, struct sk_buff *);
577:	static unsigned int br_nf_forward_ip(void *, struct sk_buff *, const struct nf_hook_state *);
816:	static unsigned int br_nf_post_routing(void *, struct sk_buff *, const struct nf_hook_state *);
477:	static unsigned int br_nf_pre_routing(void *, struct sk_buff *, const struct nf_hook_state *);
352:	static int br_nf_pre_routing_finish(struct net *, struct sock *, struct sk_buff *);
682:	static int br_nf_push_frag_xmit(struct net *, struct sock *, struct sk_buff *);
196:	static int br_validate_ipv4(struct net *, struct sk_buff *);
965:	static int brnf_device_event(struct notifier_block *, unsigned long, void *);
1159:	static void brnf_exit_net(struct net *);
1153:	static int brnf_init_net(struct net *);
1049:	static int brnf_sysctl_call_tables(struct ctl_table *, int, void *, size_t *, loff_t *);
865:	static unsigned int ip_sabotage_in(void *, struct sk_buff *, const struct nf_hook_state *);
122:	static bool is_pppoe_ipv6(const struct sk_buff *, const struct net *);

File net/bridge/br_netfilter_ipv6.c:
216:	unsigned int br_nf_pre_routing_ipv6(void *, struct sk_buff *, const struct nf_hook_state *);
99:	int br_validate_ipv6(struct net *, struct sk_buff *);
46:	static int br_nf_check_hbh_len(struct sk_buff *);
160:	static int br_nf_pre_routing_finish_ipv6(struct net *, struct sock *, struct sk_buff *);

File net/bridge/br_netlink.c:
1108:	int br_dellink(struct net_device *, struct nlmsghdr *, u16);
661:	int br_getlink(struct sk_buff *, u32, u32, struct net_device *, u32, int);
650:	void br_ifinfo_notify(int, const struct net_bridge *, const struct net_bridge_port *);
609:	void br_info_notify(int, const struct net_bridge *, const struct net_bridge_port *, u32);
1888:	void br_netlink_fini(void);
1868:	int br_netlink_init(void);
718:	int br_process_vlan_info(struct net_bridge *, struct net_bridge_port *, int, struct bridge_vlan_info *, struct bridge_vlan_info **, bool *, struct netlink_ext_ack *);
1049:	int br_setlink(struct net_device *, struct nlmsghdr *, u16, struct netlink_ext_ack *);
788:	static int br_afspec(struct net_bridge *, struct net_bridge_port *, struct nlattr *, int, bool *, struct netlink_ext_ack *);
1235:	static int br_changelink(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
1510:	static int br_dev_newlink(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
438:	static int br_fill_ifinfo(struct sk_buff *, const struct net_bridge_port *, u32, u32, int, unsigned int, u32, const struct net_device *, bool);
403:	static int br_fill_ifvlaninfo(struct sk_buff *, struct net_bridge_vlan_group *);
348:	static int br_fill_ifvlaninfo_compressed(struct sk_buff *, struct net_bridge_vlan_group *);
1590:	static int br_fill_info(struct sk_buff *, const struct net_device *);
1748:	static int br_fill_linkxstats(struct sk_buff *, const struct net_device *, int *, int);
93:	static size_t br_get_link_af_size_filtered(const struct net_device *, u32);
1713:	static size_t br_get_linkxstats_size(const struct net_device *, int);
1534:	static size_t br_get_size(const struct net_device *);
229:	static int br_port_fill_attrs(struct sk_buff *, const struct net_bridge_port *);
1183:	static int br_port_fill_slave_info(struct sk_buff *, const struct net_device *, const struct net_device *);
1190:	static size_t br_port_get_slave_size(const struct net_device *, const struct net_device *);
1164:	static int br_port_slave_changelink(struct net_device *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
922:	static int br_setport(struct net_bridge_port *, struct nlattr **, struct netlink_ext_ack *);
1135:	static int br_validate(struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
677:	static int br_vlan_info(struct net_bridge *, struct net_bridge_port *, int, struct bridge_vlan_info *, bool *, struct netlink_ext_ack *);

File net/bridge/br_netlink_tunnel.c:
148:	int br_fill_vlan_tunnel_info(struct sk_buff *, struct net_bridge_vlan_group *);
76:	int br_get_vlan_tunnel_info_size(struct net_bridge_vlan_group *);
219:	int br_parse_vlan_tunnel_info(struct nlattr *, struct vtunnel_info *);
283:	int br_process_vlan_tunnel_info(const struct net_bridge *, const struct net_bridge_port *, int, struct vtunnel_info *, struct vtunnel_info *, bool *);
196:	int br_vlan_tunnel_info(const struct net_bridge_port *, int, u16, u32, bool *);
29:	bool vlan_tunid_inrange(const struct net_bridge_vlan *, const struct net_bridge_vlan *);
90:	static int br_fill_vlan_tinfo(struct sk_buff *, u16, __be64, u16);

File net/bridge/br_nf_core.c:
72:	void br_netfilter_rtable_init(struct net_bridge *);
88:	void br_nf_core_fini(void);
83:	int br_nf_core_init(void);
35:	static u32 *fake_cow_metrics(struct dst_entry *, unsigned long);
47:	static unsigned int fake_mtu(const struct dst_entry *);
40:	static struct neighbour *fake_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
30:	static void fake_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
24:	static void fake_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);

File net/bridge/br_private.h:
1073:	static bool br_multicast_is_router(struct net_bridge_mcast *, struct sk_buff *);
675:	static bool br_vlan_valid_range(const struct bridge_vlan_info *, const struct bridge_vlan_info *, struct netlink_ext_ack *);

File net/bridge/br_stp.c:
690:	void __br_set_forward_delay(struct net_bridge *, unsigned long);
662:	void __br_set_topology_change(struct net_bridge *, unsigned char);
604:	int __set_ageing_time(struct net_device *, unsigned long);
418:	void br_become_designated_port(struct net_bridge_port *);
195:	void br_become_root_bridge(struct net_bridge *);
393:	void br_config_bpdu_generation(struct net_bridge *);
411:	void br_configuration_update(struct net_bridge *);
648:	clock_t br_get_ageing_time(const struct net_device *);
88:	struct net_bridge_port *br_get_port(struct net_bridge *, u16);
73:	u8 br_port_get_stp_state(const struct net_device *);
470:	void br_port_state_selection(struct net_bridge *);
519:	void br_received_config_bpdu(struct net_bridge_port *, const struct br_config_bpdu *);
558:	void br_received_tcn_bpdu(struct net_bridge_port *);
629:	int br_set_ageing_time(struct net_bridge *, clock_t);
697:	int br_set_forward_delay(struct net_bridge *, unsigned long);
572:	int br_set_hello_time(struct net_bridge *, unsigned long);
587:	int br_set_max_age(struct net_bridge *, unsigned long);
29:	void br_set_state(struct net_bridge_port *, unsigned int);
370:	void br_topology_change_detection(struct net_bridge *);
210:	void br_transmit_config(struct net_bridge_port *);
275:	void br_transmit_tcn(struct net_bridge *);
447:	static void br_make_forwarding(struct net_bridge_port *);

File net/bridge/br_stp_bpdu.c:
79:	void br_send_config_bpdu(struct net_bridge_port *, struct br_config_bpdu *);
126:	void br_send_tcn_bpdu(struct net_bridge_port *);
147:	void br_stp_rcv(const struct stp_proto *, struct sk_buff *, struct net_device *);
35:	static void br_send_bpdu(struct net_bridge_port *, const unsigned char *, int);
29:	static int br_send_bpdu_finish(struct net *, struct sock *, struct sk_buff *);

File net/bridge/br_stp_if.c:
33:	void br_init_port(struct net_bridge_port *);
345:	ssize_t br_show_bridge_id(char *, const struct bridge_id *);
222:	void br_stp_change_bridge_id(struct net_bridge *, const unsigned char *);
69:	void br_stp_disable_bridge(struct net_bridge *);
99:	void br_stp_disable_port(struct net_bridge_port *);
49:	void br_stp_enable_bridge(struct net_bridge *);
91:	void br_stp_enable_port(struct net_bridge_port *);
256:	bool br_stp_recalculate_bridge_id(struct net_bridge *);
282:	void br_stp_set_bridge_priority(struct net_bridge *, u16);
199:	int br_stp_set_enabled(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
332:	int br_stp_set_path_cost(struct net_bridge_port *, unsigned long);
309:	int br_stp_set_port_priority(struct net_bridge_port *, unsigned long);

File net/bridge/br_stp_timer.c:
149:	void br_stp_port_timer_init(struct net_bridge_port *);
141:	void br_stp_timer_init(struct net_bridge *);
157:	unsigned long br_timer_value(const struct timer_list *);
79:	static void br_forward_delay_timer_expired(struct timer_list *);
30:	static void br_hello_timer_expired(struct timer_list *);
128:	static void br_hold_timer_expired(struct timer_list *);
46:	static void br_message_age_timer_expired(struct timer_list *);
103:	static void br_tcn_timer_expired(struct timer_list *);
117:	static void br_topology_change_timer_expired(struct timer_list *);

File net/bridge/br_switchdev.c:
145:	void br_switchdev_fdb_notify(struct net_bridge *, const struct net_bridge_fdb_entry *, int);
32:	void br_switchdev_frame_set_offload_fwd_mark(struct sk_buff *);
24:	bool br_switchdev_frame_uses_tx_fwd_offload(struct sk_buff *);
607:	void br_switchdev_mdb_notify(struct net_device *, struct net_bridge_mdb_entry *, struct net_bridge_port_group *, int);
781:	int br_switchdev_port_offload(struct net_bridge_port *, struct net_device *, const void *, struct notifier_block *, struct notifier_block *, bool, struct netlink_ext_ack *);
811:	void br_switchdev_port_unoffload(struct net_bridge_port *, const void *, struct notifier_block *, struct notifier_block *);
167:	int br_switchdev_port_vlan_add(struct net_device *, u16, u16, bool, struct netlink_ext_ack *);
181:	int br_switchdev_port_vlan_del(struct net_device *, u16);
78:	int br_switchdev_set_port_flag(struct net_bridge_port *, unsigned long, unsigned long, struct netlink_ext_ack *);
64:	bool nbp_switchdev_allowed_egress(const struct net_bridge_port *, const struct sk_buff *);
57:	void nbp_switchdev_frame_mark(const struct net_bridge_port *, struct sk_buff *);
38:	void nbp_switchdev_frame_mark_tx_fwd_offload(const struct net_bridge_port *, struct sk_buff *);
50:	void nbp_switchdev_frame_mark_tx_fwd_to_hwdom(const struct net_bridge_port *, struct sk_buff *);
305:	static int br_switchdev_fdb_replay(const struct net_device *, const void *, bool, struct notifier_block *);
490:	static void br_switchdev_mdb_complete(struct net_device *, int, void *);
646:	static int br_switchdev_mdb_replay(struct net_device *, struct net_device *, const void *, bool, struct notifier_block *, struct netlink_ext_ack *);
437:	static int br_switchdev_vlan_replay(struct net_device *, const void *, bool, struct notifier_block *, struct netlink_ext_ack *);

File net/bridge/br_sysfs_br.c:
1043:	int br_sysfs_addbr(struct net_device *);
1080:	void br_sysfs_delbr(struct net_device *);
128:	static ssize_t ageing_time_show(struct device *, struct device_attribute *, char *);
141:	static ssize_t ageing_time_store(struct device *, struct device_attribute *, const char *, size_t);
1004:	static ssize_t brforward_read(struct file *, struct kobject *, struct bin_attribute *, char *, loff_t, size_t);
228:	static ssize_t bridge_id_show(struct device *, struct device_attribute *, char *);
875:	static ssize_t default_pvid_show(struct device *, struct device_attribute *, char *);
883:	static ssize_t default_pvid_store(struct device *, struct device_attribute *, const char *, size_t);
355:	static ssize_t flush_store(struct device *, struct device_attribute *, const char *, size_t);
66:	static ssize_t forward_delay_show(struct device *, struct device_attribute *, char *);
79:	static ssize_t forward_delay_store(struct device *, struct device_attribute *, const char *, size_t);
290:	static ssize_t gc_timer_show(struct device *, struct device_attribute *, char *);
298:	static ssize_t group_addr_show(struct device *, struct device_attribute *, char *);
305:	static ssize_t group_addr_store(struct device *, struct device_attribute *, const char *, size_t);
171:	static ssize_t group_fwd_mask_show(struct device *, struct device_attribute *, char *);
190:	static ssize_t group_fwd_mask_store(struct device *, struct device_attribute *, const char *, size_t);
470:	static ssize_t hash_elasticity_show(struct device *, struct device_attribute *, char *);
485:	static ssize_t hash_elasticity_store(struct device *, struct device_attribute *, const char *, size_t);
493:	static ssize_t hash_max_show(struct device *, struct device_attribute *, char *);
507:	static ssize_t hash_max_store(struct device *, struct device_attribute *, const char *, size_t);
87:	static ssize_t hello_time_show(struct device *, struct device_attribute *, char *);
100:	static ssize_t hello_time_store(struct device *, struct device_attribute *, const char *, size_t);
265:	static ssize_t hello_timer_show(struct device *, struct device_attribute *, char *);
108:	static ssize_t max_age_show(struct device *, struct device_attribute *, char *);
121:	static ssize_t max_age_store(struct device *, struct device_attribute *, const char *, size_t);
514:	static ssize_t multicast_igmp_version_show(struct device *, struct device_attribute *, char *);
529:	static ssize_t multicast_igmp_version_store(struct device *, struct device_attribute *, const char *, size_t);
537:	static ssize_t multicast_last_member_count_show(struct device *, struct device_attribute *, char *);
552:	static ssize_t multicast_last_member_count_store(struct device *, struct device_attribute *, const char *, size_t);
582:	static ssize_t multicast_last_member_interval_show(struct device *, struct device_attribute *, char *);
597:	static ssize_t multicast_last_member_interval_store(struct device *, struct device_attribute *, const char *, size_t);
605:	static ssize_t multicast_membership_interval_show(struct device *, struct device_attribute *, char *);
620:	static ssize_t multicast_membership_interval_store(struct device *, struct device_attribute *, const char *, size_t);
751:	static ssize_t multicast_mld_version_show(struct device *, struct device_attribute *, char *);
766:	static ssize_t multicast_mld_version_store(struct device *, struct device_attribute *, const char *, size_t);
628:	static ssize_t multicast_querier_interval_show(struct device *, struct device_attribute *, char *);
644:	static ssize_t multicast_querier_interval_store(struct device *, struct device_attribute *, const char *, size_t);
448:	static ssize_t multicast_querier_show(struct device *, struct device_attribute *, char *);
462:	static ssize_t multicast_querier_store(struct device *, struct device_attribute *, const char *, size_t);
652:	static ssize_t multicast_query_interval_show(struct device *, struct device_attribute *, char *);
668:	static ssize_t multicast_query_interval_store(struct device *, struct device_attribute *, const char *, size_t);
676:	static ssize_t multicast_query_response_interval_show(struct device *, struct device_attribute *, char *);
692:	static ssize_t multicast_query_response_interval_store(struct device *, struct device_attribute *, const char *, size_t);
423:	static ssize_t multicast_query_use_ifaddr_show(struct device *, struct device_attribute *, char *);
440:	static ssize_t multicast_query_use_ifaddr_store(struct device *, struct device_attribute *, const char *, size_t);
386:	static ssize_t multicast_router_show(struct device *, struct device_attribute *, char *);
399:	static ssize_t multicast_router_store(struct device *, struct device_attribute *, const char *, size_t);
407:	static ssize_t multicast_snooping_show(struct device *, struct device_attribute *, char *);
415:	static ssize_t multicast_snooping_store(struct device *, struct device_attribute *, const char *, size_t);
560:	static ssize_t multicast_startup_query_count_show(struct device *, struct device_attribute *, char *);
574:	static ssize_t multicast_startup_query_count_store(struct device *, struct device_attribute *, const char *, size_t);
700:	static ssize_t multicast_startup_query_interval_show(struct device *, struct device_attribute *, char *);
716:	static ssize_t multicast_startup_query_interval_store(struct device *, struct device_attribute *, const char *, size_t);
724:	static ssize_t multicast_stats_enabled_show(struct device *, struct device_attribute *, char *);
741:	static ssize_t multicast_stats_enabled_store(struct device *, struct device_attribute *, const char *, size_t);
820:	static ssize_t nf_call_arptables_show(struct device *, struct device_attribute *, char *);
834:	static ssize_t nf_call_arptables_store(struct device *, struct device_attribute *, const char *, size_t);
798:	static ssize_t nf_call_ip6tables_show(struct device *, struct device_attribute *, char *);
812:	static ssize_t nf_call_ip6tables_store(struct device *, struct device_attribute *, const char *, size_t);
776:	static ssize_t nf_call_iptables_show(struct device *, struct device_attribute *, char *);
790:	static ssize_t nf_call_iptables_store(struct device *, struct device_attribute *, const char *, size_t);
363:	static ssize_t no_linklocal_learn_show(struct device *, struct device_attribute *, char *);
377:	static ssize_t no_linklocal_learn_store(struct device *, struct device_attribute *, const char *, size_t);
199:	static ssize_t priority_show(struct device *, struct device_attribute *, char *);
214:	static ssize_t priority_store(struct device *, struct device_attribute *, const char *, size_t);
221:	static ssize_t root_id_show(struct device *, struct device_attribute *, char *);
242:	static ssize_t root_path_cost_show(struct device *, struct device_attribute *, char *);
235:	static ssize_t root_port_show(struct device *, struct device_attribute *, char *);
135:	static int set_ageing_time(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
476:	static int set_elasticity(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
344:	static int set_flush(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
73:	static int set_forward_delay(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
179:	static int set_group_fwd_mask(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
500:	static int set_hash_max(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
94:	static int set_hello_time(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
545:	static int set_last_member_count(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
590:	static int set_last_member_interval(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
115:	static int set_max_age(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
613:	static int set_membership_interval(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
523:	static int set_multicast_igmp_version(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
760:	static int set_multicast_mld_version(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
456:	static int set_multicast_querier(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
393:	static int set_multicast_router(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
827:	static int set_nf_call_arptables(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
805:	static int set_nf_call_ip6tables(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
783:	static int set_nf_call_iptables(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
371:	static int set_no_linklocal_learn(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
207:	static int set_priority(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
637:	static int set_querier_interval(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
661:	static int set_query_interval(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
685:	static int set_query_response_interval(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
432:	static int set_query_use_ifaddr(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
567:	static int set_startup_query_count(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
709:	static int set_startup_query_interval(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
734:	static int set_stats_enabled(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
157:	static int set_stp_state(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
899:	static int set_vlan_stats_enabled(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
921:	static int set_vlan_stats_per_port(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
31:	static ssize_t store_bridge_parm(struct device *, const char *, size_t, int (*)(struct net_bridge *, unsigned long, struct netlink_ext_ack *));
149:	static ssize_t stp_state_show(struct device *, struct device_attribute *, char *);
163:	static ssize_t stp_state_store(struct device *, struct device_attribute *, const char *, size_t);
273:	static ssize_t tcn_timer_show(struct device *, struct device_attribute *, char *);
256:	static ssize_t topology_change_detected_show(struct device *, struct device_attribute *, char *);
249:	static ssize_t topology_change_show(struct device *, struct device_attribute *, char *);
281:	static ssize_t topology_change_timer_show(struct device *, struct device_attribute *, char *);
843:	static ssize_t vlan_filtering_show(struct device *, struct device_attribute *, char *);
851:	static ssize_t vlan_filtering_store(struct device *, struct device_attribute *, const char *, size_t);
859:	static ssize_t vlan_protocol_show(struct device *, struct device_attribute *, char *);
867:	static ssize_t vlan_protocol_store(struct device *, struct device_attribute *, const char *, size_t);
891:	static ssize_t vlan_stats_enabled_show(struct device *, struct device_attribute *, char *);
905:	static ssize_t vlan_stats_enabled_store(struct device *, struct device_attribute *, const char *, size_t);
913:	static ssize_t vlan_stats_per_port_show(struct device *, struct device_attribute *, char *);
927:	static ssize_t vlan_stats_per_port_store(struct device *, struct device_attribute *, const char *, size_t);

File net/bridge/br_sysfs_if.c:
370:	int br_sysfs_addif(struct net_bridge_port *);
392:	int br_sysfs_renameif(struct net_bridge_port *);
301:	static ssize_t brport_show(struct kobject *, struct attribute *, char *);
313:	static ssize_t brport_store(struct kobject *, struct attribute *, const char *, size_t);
200:	static ssize_t show_backup_port(struct net_bridge_port *, char *);
233:	static ssize_t show_bpdu_guard(struct net_bridge_port *, char *);
240:	static ssize_t show_broadcast_flood(struct net_bridge_port *, char *);
137:	static ssize_t show_change_ack(struct net_bridge_port *, char *);
143:	static ssize_t show_config_pending(struct net_bridge_port *, char *);
106:	static ssize_t show_designated_bridge(struct net_bridge_port *, char *);
118:	static ssize_t show_designated_cost(struct net_bridge_port *, char *);
112:	static ssize_t show_designated_port(struct net_bridge_port *, char *);
100:	static ssize_t show_designated_root(struct net_bridge_port *, char *);
162:	static ssize_t show_forward_delay_timer(struct net_bridge_port *, char *);
183:	static ssize_t show_group_fwd_mask(struct net_bridge_port *, char *);
232:	static ssize_t show_hairpin_mode(struct net_bridge_port *, char *);
169:	static ssize_t show_hold_timer(struct net_bridge_port *, char *);
242:	static ssize_t show_isolated(struct net_bridge_port *, char *);
235:	static ssize_t show_learning(struct net_bridge_port *, char *);
155:	static ssize_t show_message_age_timer(struct net_bridge_port *, char *);
258:	static ssize_t show_multicast_fast_leave(struct net_bridge_port *, char *);
239:	static ssize_t show_multicast_flood(struct net_bridge_port *, char *);
245:	static ssize_t show_multicast_router(struct net_bridge_port *, char *);
259:	static ssize_t show_multicast_to_unicast(struct net_bridge_port *, char *);
241:	static ssize_t show_neigh_suppress(struct net_bridge_port *, char *);
84:	static ssize_t show_path_cost(struct net_bridge_port *, char *);
124:	static ssize_t show_port_id(struct net_bridge_port *, char *);
130:	static ssize_t show_port_no(struct net_bridge_port *, char *);
149:	static ssize_t show_port_state(struct net_bridge_port *, char *);
92:	static ssize_t show_priority(struct net_bridge_port *, char *);
237:	static ssize_t show_proxyarp(struct net_bridge_port *, char *);
238:	static ssize_t show_proxyarp_wifi(struct net_bridge_port *, char *);
234:	static ssize_t show_root_block(struct net_bridge_port *, char *);
236:	static ssize_t show_unicast_flood(struct net_bridge_port *, char *);
214:	static int store_backup_port(struct net_bridge_port *, char *);
233:	static int store_bpdu_guard(struct net_bridge_port *, unsigned long);
240:	static int store_broadcast_flood(struct net_bridge_port *, unsigned long);
176:	static int store_flush(struct net_bridge_port *, unsigned long);
188:	static int store_group_fwd_mask(struct net_bridge_port *, unsigned long);
232:	static int store_hairpin_mode(struct net_bridge_port *, unsigned long);
242:	static int store_isolated(struct net_bridge_port *, unsigned long);
235:	static int store_learning(struct net_bridge_port *, unsigned long);
258:	static int store_multicast_fast_leave(struct net_bridge_port *, unsigned long);
239:	static int store_multicast_flood(struct net_bridge_port *, unsigned long);
250:	static int store_multicast_router(struct net_bridge_port *, unsigned long);
259:	static int store_multicast_to_unicast(struct net_bridge_port *, unsigned long);
241:	static int store_neigh_suppress(struct net_bridge_port *, unsigned long);
237:	static int store_proxyarp(struct net_bridge_port *, unsigned long);
238:	static int store_proxyarp_wifi(struct net_bridge_port *, unsigned long);
234:	static int store_root_block(struct net_bridge_port *, unsigned long);
236:	static int store_unicast_flood(struct net_bridge_port *, unsigned long);

File net/bridge/br_vlan.c:
1093:	int __br_vlan_set_default_pvid(struct net_bridge *, u16, struct netlink_ext_ack *);
936:	int __br_vlan_set_proto(struct net_bridge *, __be16, struct netlink_ext_ack *);
659:	bool br_allowed_egress(struct net_bridge_vlan_group *, const struct sk_buff *);
641:	bool br_allowed_ingress(const struct net_bridge *, struct net_bridge_vlan_group *, struct sk_buff *, u16 *, u8 *, struct net_bridge_vlan **);
473:	struct sk_buff *br_handle_vlan(struct net_bridge *, const struct net_bridge_port *, struct net_bridge_vlan_group *, struct sk_buff *);
875:	void br_recalculate_fwd_mask(struct net_bridge *);
679:	bool br_should_learn(struct net_bridge_port *, struct sk_buff *, u16 *);
770:	int br_vlan_add(struct net_bridge *, u16, u16, bool *, struct netlink_ext_ack *);
1730:	int br_vlan_bridge_event(struct net_device *, unsigned long, void *);
1942:	bool br_vlan_can_enter_range(const struct net_bridge_vlan *, const struct net_bridge_vlan *);
815:	int br_vlan_delete(struct net_bridge *, u16);
918:	bool br_vlan_enabled(const struct net_device *);
1470:	int br_vlan_fill_forward_path_mode(struct net_bridge *, struct net_bridge_port *, struct net_device_path *);
1443:	void br_vlan_fill_forward_path_pvid(struct net_bridge *, struct net_device_path_ctx *, struct net_device_path *);
885:	int br_vlan_filter_toggle(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
848:	struct net_bridge_vlan *br_vlan_find(struct net_bridge_vlan_group *, u16);
835:	void br_vlan_flush(struct net_bridge *);
1498:	int br_vlan_get_info(const struct net_device *, u16, struct bridge_vlan_info *);
1526:	int br_vlan_get_info_rcu(const struct net_device *, u16, struct bridge_vlan_info *);
926:	int br_vlan_get_proto(const struct net_device *, u16 *);
1406:	int br_vlan_get_pvid(const struct net_device *, u16 *);
1425:	int br_vlan_get_pvid_rcu(const struct net_device *, u16 *);
1379:	void br_vlan_get_stats(const struct net_bridge_vlan *, struct pcpu_sw_netstats *);
1218:	int br_vlan_init(struct net_bridge *);
1870:	void br_vlan_notify(const struct net_bridge *, const struct net_bridge_port *, u16, u16, int);
1768:	void br_vlan_port_event(struct net_bridge_port *, unsigned long);
2295:	void br_vlan_rtnl_init(void);
2305:	void br_vlan_rtnl_uninit(void);
1195:	int br_vlan_set_default_pvid(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
1009:	int br_vlan_set_proto(struct net_bridge *, unsigned long, struct netlink_ext_ack *);
1018:	int br_vlan_set_stats(struct net_bridge *, unsigned long);
1032:	int br_vlan_set_stats_per_port(struct net_bridge *, unsigned long);
1306:	int nbp_vlan_add(struct net_bridge_port *, u16, u16, bool *, struct netlink_ext_ack *);
1351:	int nbp_vlan_delete(struct net_bridge_port *, u16);
1366:	void nbp_vlan_flush(struct net_bridge_port *);
1248:	int nbp_vlan_init(struct net_bridge_port *, struct netlink_ext_ack *);
258:	static int __vlan_add(struct net_bridge_vlan *, u16, struct netlink_ext_ack *);
383:	static int __vlan_del(struct net_bridge_vlan *);
439:	static void __vlan_flush(const struct net_bridge *, const struct net_bridge_port *, struct net_bridge_vlan_group *);
187:	static void br_master_vlan_rcu_free(struct callback_head *);
13:	static int br_vlan_cmp(struct rhashtable_compare_arg *, const void *);
1950:	static int br_vlan_dump_dev(const struct net_device *, struct sk_buff *, struct netlink_callback *, u32);
1817:	static bool br_vlan_fill_vids(struct sk_buff *, u16, u16, const struct net_bridge_vlan *, u16, bool);
1559:	static int br_vlan_is_bind_vlan_dev_fn(struct net_device *, struct netdev_nested_priv *);
1689:	static int br_vlan_link_state_change_fn(struct net_device *, struct netdev_nested_priv *);
32:	static struct net_bridge_vlan *br_vlan_lookup(struct rhashtable *, u16);
1582:	static int br_vlan_match_bind_vlan_dev_fn(struct net_device *, struct netdev_nested_priv *);
198:	static void br_vlan_put_master(struct net_bridge_vlan *);
2075:	static int br_vlan_rtm_dump(struct sk_buff *, struct netlink_callback *);
2241:	static int br_vlan_rtm_process(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1620:	static void br_vlan_set_vlan_dev_state(const struct net_bridge *, struct net_device *);
216:	static void nbp_vlan_rcu_free(struct callback_head *);

File net/bridge/br_vlan_options.c:
295:	bool br_vlan_global_opts_can_enter_range(const struct net_bridge_vlan *, const struct net_bridge_vlan *);
306:	bool br_vlan_global_opts_fill(struct sk_buff *, u16, u16, const struct net_bridge_vlan *);
40:	bool br_vlan_opts_eq_range(const struct net_bridge_vlan *, const struct net_bridge_vlan *);
51:	bool br_vlan_opts_fill(struct sk_buff *, const struct net_bridge_vlan *);
66:	size_t br_vlan_opts_nl_size(void);
220:	int br_vlan_process_options(const struct net_bridge *, const struct net_bridge_port *, struct net_bridge_vlan *, struct net_bridge_vlan *, struct nlattr **, struct netlink_ext_ack *);
603:	int br_vlan_rtm_process_global_options(struct net_device *, const struct nlattr *, int, struct netlink_ext_ack *);
426:	static void br_vlan_global_opts_notify(const struct net_bridge *, u16, u16);

File net/bridge/br_vlan_tunnel.c:
185:	int br_handle_egress_vlan_tunnel(struct sk_buff *, struct net_bridge_vlan *);
161:	void br_handle_ingress_vlan_tunnel(struct sk_buff *, struct net_bridge_port *, struct net_bridge_vlan_group *);
97:	int nbp_vlan_tunnel_info_add(const struct net_bridge_port *, u16, u32);
116:	int nbp_vlan_tunnel_info_delete(const struct net_bridge_port *, u16);
141:	void nbp_vlan_tunnel_info_flush(struct net_bridge_port *);
156:	void vlan_tunnel_deinit(struct net_bridge_vlan_group *);
53:	void vlan_tunnel_info_del(struct net_bridge_vlan_group *, struct net_bridge_vlan *);
151:	int vlan_tunnel_init(struct net_bridge_vlan_group *);
19:	static int br_vlan_tunid_cmp(struct rhashtable_compare_arg *, const void *);

File net/can/af_can.c:
733:	int can_proto_register(const struct can_proto *);
769:	void can_proto_unregister(const struct can_proto *);
441:	int can_rx_register(struct net *, struct net_device *, canid_t, canid_t, void (*)(struct sk_buff *, void *), void *, char *, struct sock *);
510:	void can_rx_unregister(struct net *, struct net_device *, canid_t, canid_t, void (*)(struct sk_buff *, void *), void *);
199:	int can_send(struct sk_buff *, int);
89:	void can_sock_destruct(struct sock *);
114:	static int can_create(struct net *, struct socket *, int, int);
901:	static void can_exit(void);
861:	static int can_init(void);
820:	static void can_pernet_exit(struct net *);
784:	static int can_pernet_init(struct net *);
676:	static int can_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
576:	static int can_rcv_filter(struct can_dev_rcv_lists *, struct sk_buff *);
641:	static void can_receive(struct sk_buff *, struct net_device *);
488:	static void can_rx_delete_receiver(struct callback_head *);
691:	static int canfd_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
706:	static int canxl_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);

File net/can/bcm.c:
272:	static void bcm_can_tx(struct bcm_op *);
1581:	static int bcm_connect(struct socket *, struct sockaddr *, int, int);
765:	static int bcm_delete_rx_op(struct list_head *, struct bcm_msg_head *, int);
816:	static int bcm_delete_tx_op(struct list_head *, struct bcm_msg_head *, int);
728:	static void bcm_free_op_rcu(struct callback_head *);
1476:	static int bcm_init(struct sock *);
1776:	static void bcm_module_exit(void);
1747:	static int bcm_module_init(void);
1450:	static int bcm_notifier(struct notifier_block *, unsigned long, void *);
193:	static int bcm_proc_show(struct seq_file *, void *);
836:	static int bcm_read_op(struct list_head *, struct bcm_msg_head *, int);
1645:	static int bcm_recvmsg(struct socket *, struct msghdr *, size_t, int);
1499:	static int bcm_release(struct socket *);
510:	static void bcm_rx_cmp_to_index(struct bcm_op *, unsigned int, const struct canfd_frame *);
642:	static void bcm_rx_handler(struct sk_buff *, void *);
1034:	static int bcm_rx_setup(struct bcm_msg_head *, struct msghdr *, int, struct sock *);
602:	static int bcm_rx_thr_flush(struct bcm_op *);
625:	static enum hrtimer_restart bcm_rx_thr_handler(struct hrtimer *);
559:	static enum hrtimer_restart bcm_rx_timeout_handler(struct hrtimer *);
466:	static void bcm_rx_update_and_send(struct bcm_op *, struct canfd_frame *, const struct canfd_frame *);
319:	static void bcm_send_to_user(struct bcm_op *, struct bcm_msg_head *, struct canfd_frame *, int);
1290:	static int bcm_sendmsg(struct socket *, struct msghdr *, size_t);
1679:	static int bcm_sock_no_ioctlcmd(struct socket *, unsigned int, unsigned long);
1245:	static int bcm_tx_send(struct msghdr *, int, struct sock *, int);
859:	static int bcm_tx_setup(struct bcm_msg_head *, struct msghdr *, int, struct sock *);
401:	static enum hrtimer_restart bcm_tx_timeout_handler(struct hrtimer *);
1729:	static void canbcm_pernet_exit(struct net *);
1719:	static int canbcm_pernet_init(struct net *);

File net/can/gw.c:
457:	static void can_can_gw_rcv(struct sk_buff *, void *);
1246:	static void cangw_pernet_exit_batch(struct list_head *);
1240:	static int cangw_pernet_init(struct net *);
1056:	static int cgw_create_job(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
429:	static void cgw_csum_crc8_neg(struct canfd_frame *, struct cgw_csum_crc8 *);
402:	static void cgw_csum_crc8_pos(struct canfd_frame *, struct cgw_csum_crc8 *);
364:	static void cgw_csum_crc8_rel(struct canfd_frame *, struct cgw_csum_crc8 *);
353:	static void cgw_csum_xor_neg(struct canfd_frame *, struct cgw_csum_xor *);
342:	static void cgw_csum_xor_pos(struct canfd_frame *, struct cgw_csum_xor *);
320:	static void cgw_csum_xor_rel(struct canfd_frame *, struct cgw_csum_xor *);
755:	static int cgw_dump_jobs(struct sk_buff *, struct netlink_callback *);
580:	static void cgw_job_free_rcu(struct callback_head *);
1316:	static void cgw_module_exit(void);
1261:	static int cgw_module_init(void);
587:	static int cgw_notifier(struct notifier_block *, unsigned long, void *);
800:	static int cgw_parse_attr(struct nlmsghdr *, struct cf_mod *, u8, void *, u8 *);
567:	static int cgw_register_filter(struct net *, struct cgw_job *);
1154:	static void cgw_remove_all_jobs(struct net *);
1168:	static int cgw_remove_job(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
237:	static void mod_and_ccdlc(struct canfd_frame *, struct cf_mod *);
159:	static void mod_and_data(struct canfd_frame *, struct cf_mod *);
173:	static void mod_and_fddata(struct canfd_frame *, struct cf_mod *);
158:	static void mod_and_flags(struct canfd_frame *, struct cf_mod *);
156:	static void mod_and_id(struct canfd_frame *, struct cf_mod *);
157:	static void mod_and_len(struct canfd_frame *, struct cf_mod *);
244:	static void mod_or_ccdlc(struct canfd_frame *, struct cf_mod *);
163:	static void mod_or_data(struct canfd_frame *, struct cf_mod *);
181:	static void mod_or_fddata(struct canfd_frame *, struct cf_mod *);
162:	static void mod_or_flags(struct canfd_frame *, struct cf_mod *);
160:	static void mod_or_id(struct canfd_frame *, struct cf_mod *);
161:	static void mod_or_len(struct canfd_frame *, struct cf_mod *);
258:	static void mod_set_ccdlc(struct canfd_frame *, struct cf_mod *);
171:	static void mod_set_data(struct canfd_frame *, struct cf_mod *);
197:	static void mod_set_fddata(struct canfd_frame *, struct cf_mod *);
170:	static void mod_set_flags(struct canfd_frame *, struct cf_mod *);
168:	static void mod_set_id(struct canfd_frame *, struct cf_mod *);
169:	static void mod_set_len(struct canfd_frame *, struct cf_mod *);
251:	static void mod_xor_ccdlc(struct canfd_frame *, struct cf_mod *);
167:	static void mod_xor_data(struct canfd_frame *, struct cf_mod *);
189:	static void mod_xor_fddata(struct canfd_frame *, struct cf_mod *);
166:	static void mod_xor_flags(struct canfd_frame *, struct cf_mod *);
164:	static void mod_xor_id(struct canfd_frame *, struct cf_mod *);
165:	static void mod_xor_len(struct canfd_frame *, struct cf_mod *);

File net/can/proc.c:
430:	void can_init_proc(struct net *);
468:	void can_remove_proc(struct net *);
115:	void can_stat_update(struct timer_list *);
394:	static int can_rcvlist_eff_proc_show(struct seq_file *, void *);
305:	static int can_rcvlist_proc_show(struct seq_file *, void *);
361:	static int can_rcvlist_sff_proc_show(struct seq_file *, void *);
272:	static int can_reset_stats_proc_show(struct seq_file *, void *);
210:	static int can_stats_proc_show(struct seq_file *, void *);

File net/can/raw.c:
420:	static int raw_bind(struct socket *, struct sockaddr *, int);
245:	static void raw_disable_allfilters(struct net *, struct net_device *, struct sock *);
223:	static void raw_disable_filters(struct net *, struct net_device *, struct sock *, struct can_filter *, int);
255:	static int raw_enable_allfilters(struct net *, struct net_device *, struct sock *);
187:	static int raw_enable_filters(struct net *, struct net_device *, struct sock *, struct can_filter *, int);
500:	static int raw_getname(struct socket *, struct sockaddr *, int);
707:	static int raw_getsockopt(struct socket *, int, int, char *, int *);
334:	static int raw_init(struct sock *);
1008:	static void raw_module_exit(void);
985:	static int raw_module_init(void);
311:	static int raw_notifier(struct notifier_block *, unsigned long, void *);
122:	static void raw_rcv(struct sk_buff *, void *);
897:	static int raw_recvmsg(struct socket *, struct msghdr *, size_t, int);
367:	static int raw_release(struct socket *);
816:	static int raw_sendmsg(struct socket *, struct msghdr *, size_t);
517:	static int raw_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
939:	static int raw_sock_no_ioctlcmd(struct socket *, unsigned int, unsigned long);

File net/core/bpf_sk_storage.c:
800:	int bpf_iter_bpf_sk_storage_map(struct bpf_iter_meta *, struct bpf_map *, struct sock *, void *);
160:	int bpf_sk_storage_clone(const struct sock *, struct sock *);
264:	u64 bpf_sk_storage_delete(u64, u64, u64, u64, u64);
405:	u64 bpf_sk_storage_delete_tracing(u64, u64, u64, u64, u64);
490:	struct bpf_sk_storage_diag *bpf_sk_storage_diag_alloc(const struct nlattr *);
462:	void bpf_sk_storage_diag_free(struct bpf_sk_storage_diag *);
636:	int bpf_sk_storage_diag_put(struct bpf_sk_storage_diag *, struct sock *, struct sk_buff *, int, unsigned int *);
49:	void bpf_sk_storage_free(struct sock *);
230:	u64 bpf_sk_storage_get(u64, u64, u64, u64, u64);
394:	u64 bpf_sk_storage_get_tracing(u64, u64, u64, u64, u64);
123:	static int bpf_fd_sk_storage_delete_elem(struct bpf_map *, void *);
86:	static void *bpf_fd_sk_storage_lookup_elem(struct bpf_map *, void *);
103:	static int bpf_fd_sk_storage_update_elem(struct bpf_map *, void *, void *, u64);
861:	static int bpf_iter_attach_map(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
891:	static void bpf_iter_detach_map(struct bpf_iter_aux_info *);
854:	static void bpf_iter_fini_sk_storage_map(void *);
844:	static int bpf_iter_init_sk_storage_map(void *, struct bpf_iter_aux_info *);
281:	static int bpf_sk_storage_charge(struct bpf_local_storage_map *, void *, u32);
75:	static struct bpf_map *bpf_sk_storage_map_alloc(union bpf_attr *);
70:	static void bpf_sk_storage_map_free(struct bpf_map *);
926:	static int bpf_sk_storage_map_iter_init(void);
710:	static struct bpf_local_storage_elem *bpf_sk_storage_map_seq_find_next(struct bpf_iter_seq_sk_storage_map_info *, struct bpf_local_storage_elem *);
783:	static void *bpf_sk_storage_map_seq_next(struct seq_file *, void *, loff_t *);
830:	static int bpf_sk_storage_map_seq_show(struct seq_file *, void *);
770:	static void *bpf_sk_storage_map_seq_start(struct seq_file *, loff_t *);
835:	static void bpf_sk_storage_map_seq_stop(struct seq_file *, void *);
306:	static struct bpf_local_storage **bpf_sk_storage_ptr(void *);
357:	static bool bpf_sk_storage_tracing_allowed(const struct bpf_prog *);
297:	static void bpf_sk_storage_uncharge(struct bpf_local_storage_map *, void *, u32);
546:	static int diag_get(struct bpf_local_storage_data *, struct sk_buff *);
80:	static int notsupp_get_next_key(struct bpf_map *, void *, void *);

File net/core/datagram.c:
345:	int __sk_queue_drop_skb(struct sock *, struct sk_buff_head *, struct sk_buff *, unsigned int, void (*)(struct sock *, struct sk_buff *));
326:	void __skb_free_datagram_locked(struct sock *, struct sk_buff *, int);
285:	struct sk_buff *__skb_recv_datagram(struct sock *, struct sk_buff_head *, unsigned int, int *, int *);
240:	struct sk_buff *__skb_try_recv_datagram(struct sock *, struct sk_buff_head *, unsigned int, int *, int *, struct sk_buff **);
165:	struct sk_buff *__skb_try_recv_from_queue(struct sock *, struct sk_buff_head *, unsigned int, int *, int *, struct sk_buff **);
86:	int __skb_wait_for_more_packets(struct sock *, struct sk_buff_head *, int *, long *, const struct sk_buff *);
613:	int __zerocopy_sg_from_iter(struct msghdr *, struct sock *, struct sk_buff *, struct iov_iter *, size_t);
797:	__poll_t datagram_poll(struct file *, struct socket *, poll_table *);
748:	int skb_copy_and_csum_datagram_msg(struct sk_buff *, int, struct msghdr *);
501:	int skb_copy_and_hash_datagram_iter(const struct sk_buff *, int, struct iov_iter *, int, struct ahash_request *);
541:	int skb_copy_datagram_from_iter(struct sk_buff *, int, struct iov_iter *, int);
523:	int skb_copy_datagram_iter(const struct sk_buff *, int, struct iov_iter *, int);
320:	void skb_free_datagram(struct sock *, struct sk_buff *);
391:	int skb_kill_datagram(struct sock *, struct sk_buff *, unsigned int);
310:	struct sk_buff *skb_recv_datagram(struct sock *, unsigned int, int *);
699:	int zerocopy_sg_from_iter(struct sk_buff *, struct iov_iter *);
406:	static int __skb_datagram_iter(const struct sk_buff *, int, struct iov_iter *, int, bool, size_t (*)(const void *, size_t, void *, struct iov_iter *), void *);
73:	static int receiver_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
510:	static size_t simple_copy_to_iter(const void *, size_t, void *, struct iov_iter *);

File net/core/dev.c:
8492:	int __dev_change_flags(struct net_device *, unsigned int, struct netlink_ext_ack *);
10934:	int __dev_change_net_namespace(struct net_device *, struct net *, const char *, int);
4281:	int __dev_direct_xmit(struct sk_buff *, u16);
2140:	int __dev_forward_skb(struct net_device *, struct sk_buff *);
969:	struct net_device *__dev_get_by_flags(struct net *, unsigned short, unsigned short);
799:	struct net_device *__dev_get_by_index(struct net *, int);
733:	struct net_device *__dev_get_by_name(struct net *, const char *);
3138:	void __dev_kfree_skb_any(struct sk_buff *, enum skb_free_reason);
3116:	void __dev_kfree_skb_irq(struct sk_buff *, enum skb_free_reason);
8558:	void __dev_notify_flags(struct net_device *, unsigned int, unsigned int, u32, const struct nlmsghdr *);
4155:	int __dev_queue_xmit(struct sk_buff *, struct net_device *);
581:	void __dev_remove_pack(struct packet_type *);
8612:	int __dev_set_mtu(struct net_device *, int);
8426:	void __dev_set_rx_mode(struct net_device *);
5961:	void __napi_schedule(struct napi_struct *);
6013:	void __napi_schedule_irqoff(struct napi_struct *);
1337:	void __netdev_notify_peers(struct net_device *);
9679:	int __netdev_update_features(struct net_device *);
6452:	void __netif_napi_del(struct napi_struct *);
4960:	int __netif_rx(struct sk_buff *);
3075:	void __netif_schedule(struct Qdisc *);
2534:	int __netif_set_xps_queue(struct net_device *, const unsigned long *, u16, enum xps_map_type);
3370:	struct sk_buff *__skb_gso_segment(struct sk_buff *, netdev_features_t, bool);
10556:	struct net_device *alloc_netdev_mqs(int, const char *, unsigned char, void (*)(struct net_device *), unsigned int, unsigned int);
4718:	u32 bpf_prog_run_generic_xdp(struct sk_buff *, struct xdp_buff *, struct bpf_prog *);
9406:	int bpf_xdp_link_attach(const union bpf_attr *, struct bpf_prog *);
1994:	int call_netdevice_notifiers(unsigned long, struct net_device *);
558:	void dev_add_pack(struct packet_type *);
1121:	int dev_alloc_name(struct net_device *, const char *);
8846:	int dev_change_carrier(struct net_device *, bool);
8596:	int dev_change_flags(struct net_device *, unsigned int, struct netlink_ext_ack *);
1153:	int dev_change_name(struct net_device *, const char *);
8963:	int dev_change_proto_down(struct net_device *, bool);
8984:	void dev_change_proto_down_reason(struct net_device *, unsigned long, u32);
8706:	int dev_change_tx_queue_len(struct net_device *, unsigned long);
9469:	int dev_change_xdp_fd(struct net_device *, struct netlink_ext_ack *, int, int, u32);
1546:	void dev_close(struct net_device *);
1517:	void dev_close_many(struct list_head *, bool);
1567:	void dev_disable_lro(struct net_device *);
10450:	void dev_fetch_sw_netstats(struct rtnl_link_stats64 *, const struct pcpu_sw_netstats *);
681:	int dev_fill_forward_path(const struct net_device *, const u8 *, struct net_device_path_stack *);
654:	int dev_fill_metadata_dst(struct net_device *, struct sk_buff *);
2164:	int dev_forward_skb(struct net_device *, struct sk_buff *);
2170:	int dev_forward_skb_nomtu(struct net_device *, struct sk_buff *);
1278:	int dev_get_alias(const struct net_device *, char *, size_t);
848:	struct net_device *dev_get_by_index(struct net *, int);
823:	struct net_device *dev_get_by_index_rcu(struct net *, int);
775:	struct net_device *dev_get_by_name(struct net *, const char *);
754:	struct net_device *dev_get_by_name_rcu(struct net *, const char *);
870:	struct net_device *dev_get_by_napi_id(unsigned int);
8467:	unsigned int dev_get_flags(const struct net_device *);
636:	int dev_get_iflink(const struct net_device *);
8811:	int dev_get_mac_address(struct sockaddr *, struct net *, char *);
8864:	int dev_get_phys_port_id(struct net_device *, struct netdev_phys_item_id *);
8882:	int dev_get_phys_port_name(struct net_device *, char *, size_t);
8904:	int dev_get_port_parent_id(struct net_device *, struct netdev_phys_item_id *, bool);
10410:	struct rtnl_link_stats64 *dev_get_stats(struct net_device *, struct rtnl_link_stats64 *);
10485:	void dev_get_tstats64(struct net_device *, struct rtnl_link_stats64 *);
928:	struct net_device *dev_getbyhwaddr_rcu(struct net *, unsigned short, const char *);
942:	struct net_device *dev_getfirstbyhwtype(struct net *, unsigned short);
3589:	struct sk_buff *dev_hard_start_xmit(struct sk_buff *, struct net_device *, struct netdev_queue *, int *);
10492:	struct netdev_queue *dev_ingress_queue_create(struct net_device *);
3916:	int dev_loopback_xmit(struct net *, struct sock *, struct sk_buff *);
2221:	bool dev_nit_active(struct net_device *);
1446:	int dev_open(struct net_device *, struct netlink_ext_ack *);
4072:	u16 dev_pick_tx_cpu_id(struct net_device *, struct sk_buff *, struct net_device *);
4065:	u16 dev_pick_tx_zero(struct net_device *, struct sk_buff *, struct net_device *);
8749:	int dev_pre_changeaddr_notify(struct net_device *, const char *, struct netlink_ext_ack *);
2232:	void dev_queue_xmit_nit(struct sk_buff *, struct net_device *);
613:	void dev_remove_pack(struct packet_type *);
1241:	int dev_set_alias(struct net_device *, const char *, size_t);
8414:	int dev_set_allmulti(struct net_device *, int);
8738:	void dev_set_group(struct net_device *, int);
8772:	int dev_set_mac_address(struct net_device *, struct sockaddr *, struct netlink_ext_ack *);
8799:	int dev_set_mac_address_user(struct net_device *, struct sockaddr *, struct netlink_ext_ack *);
8688:	int dev_set_mtu(struct net_device *, int);
8649:	int dev_set_mtu_ext(struct net_device *, int, struct netlink_ext_ack *);
8356:	int dev_set_promiscuity(struct net_device *, int);
8454:	void dev_set_rx_mode(struct net_device *);
6312:	int dev_set_threaded(struct net_device *, bool);
995:	bool dev_valid_name(const char *);
8625:	int dev_validate_mtu(struct net_device *, int, struct netlink_ext_ack *);
9047:	u8 dev_xdp_prog_count(struct net_device *);
9059:	u32 dev_xdp_prog_id(struct net_device *, enum bpf_xdp_mode);
4890:	int do_xdp_generic(struct bpf_prog *, struct sk_buff *);
10686:	void free_netdev(struct net_device *);
4865:	void generic_xdp_tx(struct sk_buff *, struct bpf_prog *);
10120:	int init_dummy_netdev(struct net_device *);
2121:	bool is_skb_forwardable(const struct net_device *, const struct sk_buff *);
1872:	void move_netdevice_notifier_net(struct net *, struct net *, struct notifier_block *);
6172:	void napi_busy_loop(unsigned int, bool (*)(void *, unsigned long), void *, bool, u16);
6022:	bool napi_complete_done(struct napi_struct *, int);
6393:	void napi_disable(struct napi_struct *);
6424:	void napi_enable(struct napi_struct *);
5980:	bool napi_schedule_prep(struct napi_struct *);
2047:	void net_dec_egress_queue(void);
2031:	void net_dec_ingress_queue(void);
2090:	void net_disable_timestamp(void);
2073:	void net_enable_timestamp(void);
2041:	void net_inc_egress_queue(void);
2025:	void net_inc_ingress_queue(void);
7844:	void netdev_adjacent_change_abort(struct net_device *, struct net_device *, struct net_device *);
7824:	void netdev_adjacent_change_commit(struct net_device *, struct net_device *, struct net_device *);
7796:	int netdev_adjacent_change_prepare(struct net_device *, struct net_device *, struct net_device *, struct netlink_ext_ack *);
6842:	void *netdev_adjacent_get_private(struct list_head *);
8227:	void netdev_adjacent_rename_links(struct net_device *, char *);
11270:	void netdev_alert(const struct net_device *, const char *, ...);
2822:	int netdev_bind_sb_channel_queue(struct net_device *, struct net_device *, u8, u16, u16);
7871:	void netdev_bonding_info_change(struct net_device *, struct netdev_bonding_info *);
9796:	void netdev_change_features(struct net_device *);
1600:	const char *netdev_cmd_to_name(enum netdev_cmd);
4106:	struct netdev_queue *netdev_core_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
10385:	struct net_device_core_stats *netdev_core_stats_alloc(struct net_device *);
11271:	void netdev_crit(const struct net_device *, const char *, ...);
11200:	const char *netdev_drivername(const struct net_device *);
11269:	void netdev_emerg(const struct net_device *, const char *, ...);
11272:	void netdev_err(const struct net_device *, const char *, ...);
1298:	void netdev_features_change(struct net_device *);
10536:	void netdev_freemem(struct net_device *);
891:	int netdev_get_name(struct net *, char *, int);
8132:	struct net_device *netdev_get_xmit_slave(struct net_device *, struct sk_buff *, bool);
6780:	bool netdev_has_any_upper_dev(struct net_device *);
6737:	bool netdev_has_upper_dev(struct net_device *, struct net_device *);
6761:	bool netdev_has_upper_dev_all_rcu(struct net_device *, struct net_device *);
11137:	netdev_features_t netdev_increment_features(netdev_features_t, netdev_features_t, netdev_features_t);
11275:	void netdev_info(const struct net_device *, const char *, ...);
5172:	bool netdev_is_rx_handler_busy(struct net_device *);
8252:	void *netdev_lower_dev_get_private(struct net_device *, struct net_device *);
7376:	void *netdev_lower_get_first_private_rcu(struct net_device *);
7088:	void *netdev_lower_get_next(struct net_device *, struct list_head **);
7033:	void *netdev_lower_get_next_private(struct net_device *, struct list_head **);
7059:	void *netdev_lower_get_next_private_rcu(struct net_device *, struct list_head **);
8276:	void netdev_lower_state_changed(struct net_device *, void *);
6795:	struct net_device *netdev_master_upper_dev_get(struct net_device *);
7395:	struct net_device *netdev_master_upper_dev_get_rcu(struct net_device *);
7702:	int netdev_master_upper_dev_link(struct net_device *, struct net_device *, void *, void *, struct netlink_ext_ack *);
321:	bool netdev_name_in_use(struct net *, const char *);
327:	int netdev_name_node_alt_create(struct net_device *, const char *);
353:	int netdev_name_node_alt_destroy(struct net_device *, const char *);
7231:	struct net_device *netdev_next_lower_dev_rcu(struct net_device *, struct list_head **);
11274:	void netdev_notice(const struct net_device *, const char *, ...);
1355:	void netdev_notify_peers(struct net_device *);
7948:	int netdev_offload_xstats_disable(struct net_device *, enum netdev_offload_xstats_type);
7916:	int netdev_offload_xstats_enable(struct net_device *, enum netdev_offload_xstats_type, struct netlink_ext_ack *);
7985:	bool netdev_offload_xstats_enabled(const struct net_device *, enum netdev_offload_xstats_type);
8073:	int netdev_offload_xstats_get(struct net_device *, enum netdev_offload_xstats_type, struct rtnl_hw_stats64 *, bool *, struct netlink_ext_ack *);
8105:	void netdev_offload_xstats_push_delta(struct net_device *, enum netdev_offload_xstats_type, const struct rtnl_hw_stats64 *);
8090:	void netdev_offload_xstats_report_delta(struct netdev_notifier_offload_xstats_rd *, const struct rtnl_hw_stats64 *);
8099:	void netdev_offload_xstats_report_used(struct netdev_notifier_offload_xstats_ru *);
4079:	u16 netdev_pick_tx(struct net_device *, struct sk_buff *, struct net_device *);
8944:	bool netdev_port_same_parent_id(struct net_device *, struct net_device *);
11235:	void netdev_printk(const char *, const struct net_device *, const char *, ...);
10179:	int netdev_refcnt_read(const struct net_device *);
2761:	void netdev_reset_tc(struct net_device *);
10300:	void netdev_run_todo(void);
3424:	void netdev_rx_csum_fault(struct net_device *, struct sk_buff *);
5193:	int netdev_rx_handler_register(struct net_device *, rx_handler_func_t *, void *);
5219:	void netdev_rx_handler_unregister(struct net_device *);
10512:	void netdev_set_default_ethtool_ops(struct net_device *, const struct ethtool_ops *);
2789:	int netdev_set_num_tc(struct net_device *, u8);
2848:	int netdev_set_sb_channel(struct net_device *, u16);
2775:	int netdev_set_tc_queue(struct net_device *, u8, u16, u16);
8162:	struct net_device *netdev_sk_get_lowest_dev(struct net_device *, struct sock *);
1312:	void netdev_state_change(struct net_device *);
10369:	void netdev_stats_to_stats64(struct rtnl_link_stats64 *, const struct net_device_stats *);
10527:	void netdev_sw_irq_coalesce_default_on(struct net_device *);
2336:	int netdev_txq_to_tc(struct net_device *, unsigned int);
2804:	void netdev_unbind_sb_channel(struct net_device *, struct net_device *);
9779:	void netdev_update_features(struct net_device *);
7674:	int netdev_upper_dev_link(struct net_device *, struct net_device *, struct netlink_ext_ack *);
7757:	void netdev_upper_dev_unlink(struct net_device *, struct net_device *);
6860:	struct net_device *netdev_upper_get_next_dev_rcu(struct net_device *, struct list_head **);
7135:	int netdev_walk_all_lower_dev(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
7320:	int netdev_walk_all_lower_dev_rcu(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
6961:	int netdev_walk_all_upper_dev_rcu(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
11273:	void netdev_warn(const struct net_device *, const char *, ...);
3988:	void netdev_xmit_skip_txqueue(bool);
3169:	void netif_device_attach(struct net_device *);
3154:	void netif_device_detach(struct net_device *);
3042:	int netif_get_num_default_rss_queues(void);
3029:	void netif_inherit_tso_max(struct net_device *, const struct net_device *);
6356:	void netif_napi_add_weight(struct net_device *, struct napi_struct *, int (*)(struct napi_struct *, int), int);
5735:	int netif_receive_skb(struct sk_buff *);
5502:	int netif_receive_skb_core(struct sk_buff *);
5758:	void netif_receive_skb_list(struct list_head *);
5687:	void netif_receive_skb_list_internal(struct list_head *);
4992:	int netif_rx(struct sk_buff *);
3091:	void netif_schedule_queue(struct netdev_queue *);
2955:	int netif_set_real_num_queues(struct net_device *, unsigned int, unsigned int);
2924:	int netif_set_real_num_rx_queues(struct net_device *, unsigned int);
2872:	int netif_set_real_num_tx_queues(struct net_device *, unsigned int);
3016:	void netif_set_tso_max_segs(struct net_device *, unsigned int);
2999:	void netif_set_tso_max_size(struct net_device *, unsigned int);
2736:	int netif_set_xps_queue(struct net_device *, const struct cpumask *, u16);
3541:	netdev_features_t netif_skb_features(struct sk_buff *);
9812:	void netif_stacked_transfer_operstate(const struct net_device *, struct net_device *);
9920:	void netif_tx_stop_all_queues(struct net_device *);
3103:	void netif_tx_wake_queue(struct netdev_queue *);
3489:	netdev_features_t passthru_features_check(struct sk_buff *, struct net_device *, netdev_features_t);
10167:	int register_netdev(struct net_device *);
9941:	int register_netdevice(struct net_device *);
1705:	int register_netdevice_notifier(struct notifier_block *);
1880:	int register_netdevice_notifier_dev_net(struct net_device *, struct notifier_block *, struct netdev_net_notifier *);
1825:	int register_netdevice_notifier_net(struct net *, struct notifier_block *);
4540:	bool rps_may_expire_flow(struct net_device *, u16, u32, u16);
3241:	int skb_checksum_help(struct sk_buff *);
3288:	int skb_crc32c_csum_help(struct sk_buff *);
3626:	int skb_csum_hwoffload_help(struct sk_buff *, const netdev_features_t);
3328:	__be16 skb_network_protocol(struct sk_buff *, int *);
10743:	void synchronize_net(void);
10910:	void unregister_netdev(struct net_device *);
10893:	void unregister_netdevice_many(struct list_head *);
10781:	void unregister_netdevice_many_notify(struct list_head *, u32, const struct nlmsghdr *);
1752:	int unregister_netdevice_notifier(struct notifier_block *);
1897:	int unregister_netdevice_notifier_dev_net(struct net_device *, struct notifier_block *, struct netdev_net_notifier *);
1852:	int unregister_netdevice_notifier_net(struct net *, struct notifier_block *);
10766:	void unregister_netdevice_queue(struct net_device *, struct list_head *);
3703:	struct sk_buff *validate_xmit_skb_list(struct sk_buff *, struct net_device *, bool *);
1464:	static void __dev_close_many(struct list_head *);
2127:	static int __dev_forward_skb2(struct net_device *, struct sk_buff *, bool);
1384:	static int __dev_open(struct net_device *, struct netlink_ext_ack *);
8370:	static int __dev_set_allmulti(struct net_device *, int, bool);
8298:	static int __dev_set_promiscuity(struct net_device *, int, bool);
1864:	static void __move_netdevice_notifier_net(struct net *, struct net *, struct notifier_block *);
6471:	static int __napi_poll(struct napi_struct *, bool *);
7438:	static int __netdev_adjacent_dev_insert(struct net_device *, struct net_device *, struct list_head *, void *, bool);
7500:	static void __netdev_adjacent_dev_remove(struct net_device *, struct net_device *, u16, struct list_head *);
7583:	static void __netdev_adjacent_dev_unlink_neighbour(struct net_device *, struct net_device *);
11216:	static void __netdev_printk(const char *, const struct net_device *, struct va_format *);
7303:	static int __netdev_update_lower_level(struct net_device *, struct netdev_nested_priv *);
7286:	static int __netdev_update_upper_level(struct net_device *, struct netdev_nested_priv *);
7591:	static int __netdev_upper_dev_link(struct net_device *, struct net_device *, bool, void *, void *, struct netdev_nested_priv *, struct netlink_ext_ack *);
7717:	static void __netdev_upper_dev_unlink(struct net_device *, struct net_device *, struct netdev_nested_priv *);
7182:	static int __netdev_walk_all_lower_dev(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
6912:	static int __netdev_walk_all_upper_dev(struct net_device *, int (*)(struct net_device *, struct netdev_nested_priv *), struct netdev_nested_priv *);
5576:	static int __netif_receive_skb(struct sk_buff *);
5270:	static int __netif_receive_skb_core(struct sk_buff **, bool, struct packet_type **);
5534:	static void __netif_receive_skb_list_core(struct list_head *, bool);
9313:	static void bpf_xdp_link_dealloc(struct bpf_link *);
9307:	static int bpf_xdp_link_detach(struct bpf_link *);
9334:	static int bpf_xdp_link_fill_link_info(const struct bpf_link *, struct bpf_link_info *);
9290:	static void bpf_xdp_link_release(struct bpf_link *);
9320:	static void bpf_xdp_link_show_fdinfo(const struct bpf_link *, struct seq_file *);
9349:	static int bpf_xdp_link_update(struct bpf_link *, struct bpf_prog *, struct bpf_prog *);
6127:	static void busy_poll_stop(struct napi_struct *, void *, bool, u16);
1929:	static int call_netdevice_notifiers_info(unsigned long, struct netdev_notifier_info *);
2009:	static int call_netdevice_notifiers_mtu(unsigned long, struct net_device *, u32);
1661:	static int call_netdevice_register_net_notifiers(struct notifier_block *, struct net *);
2428:	static void clean_xps_maps(struct net_device *, enum xps_map_type, u16, u16);
11323:	static void default_device_exit_batch(struct list_head *);
2185:	static void deliver_ptype_list_skb(struct sk_buff *, struct packet_type **, struct net_device *, __be16, struct list_head *);
1093:	static int dev_alloc_name_ns(struct net *, struct net_device *, const char *);
11061:	static int dev_cpu_dead(unsigned int);
1127:	static int dev_get_valid_name(struct net *, struct net_device *, const char *);
9513:	static int dev_new_index(struct net *);
9145:	static int dev_xdp_attach(struct net_device *, struct netlink_ext_ack *, struct bpf_xdp_link *, struct bpf_prog *, struct bpf_prog *, u32);
9080:	static int dev_xdp_install(struct net_device *, enum bpf_xdp_mode, bpf_op_t, struct netlink_ext_ack *, u32, struct bpf_prog *);
3417:	static void do_netdev_rx_csum_fault(struct net_device *, struct sk_buff *);
4653:	static int enqueue_to_backlog(struct sk_buff *, int, unsigned int *);
5776:	static void flush_backlog(struct work_struct *);
5631:	static int generic_xdp_install(struct net_device *, struct netdev_bpf *);
4432:	static int get_rps_cpu(struct net_device *, struct sk_buff *, struct rps_dev_flow **);
381:	static void list_netdevice(struct net_device *);
6590:	static int napi_threaded_poll(void *);
6283:	static enum hrtimer_restart napi_watchdog(struct hrtimer *);
11367:	static int net_dev_init(void);
6638:	static void net_rx_action(struct softirq_action *);
5008:	static void net_tx_action(struct softirq_action *);
11277:	static void netdev_exit(struct net *);
11169:	static int netdev_init(struct net *);
4920:	static int netif_rx_internal(struct sk_buff *);
2059:	static void netstamp_clear(struct work_struct *);
5904:	static int process_backlog(struct napi_struct *, int);
4568:	static void rps_trigger_softirq(void *);
4383:	static struct rps_dev_flow *set_rps_cpu(struct net_device *, struct sk_buff *, struct rps_dev_flow *, u16);
3216:	static void skb_warn_bad_offload(const struct sk_buff *);
4579:	static void trigger_rx_softirq(void *);
400:	static void unlist_netdevice(struct net_device *, bool);
3648:	static struct sk_buff *validate_xmit_skb(struct sk_buff *, struct net_device *, bool *);

File net/core/dev_addr_lists.c:
495:	void __hw_addr_init(struct netdev_hw_addr_list *);
369:	int __hw_addr_ref_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *, int), int (*)(struct net_device *, const unsigned char *, int));
428:	void __hw_addr_ref_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *, int));
269:	int __hw_addr_sync(struct netdev_hw_addr_list *, struct netdev_hw_addr_list *, int);
314:	int __hw_addr_sync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *), int (*)(struct net_device *, const unsigned char *));
288:	void __hw_addr_unsync(struct netdev_hw_addr_list *, struct netdev_hw_addr_list *, int);
462:	void __hw_addr_unsync_dev(struct netdev_hw_addr_list *, struct net_device *, int (*)(struct net_device *, const unsigned char *));
598:	int dev_addr_add(struct net_device *, const unsigned char *, unsigned char);
511:	void dev_addr_check(struct net_device *);
626:	int dev_addr_del(struct net_device *, const unsigned char *, unsigned char);
530:	void dev_addr_flush(struct net_device *);
548:	int dev_addr_init(struct net_device *);
572:	void dev_addr_mod(struct net_device *, unsigned int, const void *, size_t);
883:	int dev_mc_add(struct net_device *, const unsigned char *);
846:	int dev_mc_add_excl(struct net_device *, const unsigned char *);
896:	int dev_mc_add_global(struct net_device *, const unsigned char *);
924:	int dev_mc_del(struct net_device *, const unsigned char *);
938:	int dev_mc_del_global(struct net_device *, const unsigned char *);
1032:	void dev_mc_flush(struct net_device *);
1046:	void dev_mc_init(struct net_device *);
956:	int dev_mc_sync(struct net_device *, struct net_device *);
986:	int dev_mc_sync_multiple(struct net_device *, struct net_device *);
1011:	void dev_mc_unsync(struct net_device *, struct net_device *);
684:	int dev_uc_add(struct net_device *, const unsigned char *);
661:	int dev_uc_add_excl(struct net_device *, const unsigned char *);
706:	int dev_uc_del(struct net_device *, const unsigned char *);
817:	void dev_uc_flush(struct net_device *);
831:	void dev_uc_init(struct net_device *);
733:	int dev_uc_sync(struct net_device *, struct net_device *);
763:	int dev_uc_sync_multiple(struct net_device *, struct net_device *);
788:	void dev_uc_unsync(struct net_device *, struct net_device *);
73:	static int __hw_addr_add_ex(struct netdev_hw_addr_list *, const unsigned char *, int, unsigned char, bool, bool, int, bool);
192:	static int __hw_addr_del_ex(struct netdev_hw_addr_list *, const unsigned char *, int, unsigned char, bool, bool);
245:	static int __hw_addr_sync_multiple(struct netdev_hw_addr_list *, struct netdev_hw_addr_list *, int);

File net/core/dev_ioctl.c:
37:	int dev_ifconf(struct net *, struct ifconf *);
473:	int dev_ioctl(struct net *, unsigned int, struct ifreq *, void *, bool *);
438:	void dev_load(struct net *, const char *);
312:	static int dev_ifsioc(struct net *, struct ifreq *, void *, unsigned int);

File net/core/dst.c:
227:	void __dst_destroy_metrics_generic(struct dst_entry *, unsigned long);
78:	void *dst_alloc(struct dst_ops *, struct net_device *, int, int, unsigned short);
238:	struct dst_entry *dst_blackhole_check(struct dst_entry *, u32);
243:	u32 *dst_blackhole_cow_metrics(struct dst_entry *, unsigned long);
268:	unsigned int dst_blackhole_mtu(const struct dst_entry *);
248:	struct neighbour *dst_blackhole_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
262:	void dst_blackhole_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
255:	void dst_blackhole_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);
197:	u32 *dst_cow_metrics_generic(struct dst_entry *, unsigned long);
102:	struct dst_entry *dst_destroy(struct dst_entry *);
152:	void dst_dev_put(struct dst_entry *);
30:	int dst_discard_out(struct net *, struct sock *, struct sk_buff *);
47:	void dst_init(struct dst_entry *, struct dst_ops *, struct net_device *, int, int, unsigned short);
167:	void dst_release(struct dst_entry *);
182:	void dst_release_immediate(struct dst_entry *);
298:	struct metadata_dst *metadata_dst_alloc(u8, enum metadata_type, gfp_t);
326:	struct metadata_dst *metadata_dst_alloc_percpu(u8, enum metadata_type, gfp_t);
313:	void metadata_dst_free(struct metadata_dst *);
343:	void metadata_dst_free_percpu(struct metadata_dst *);
136:	static void dst_destroy_rcu(struct callback_head *);

File net/core/dst_cache.c:
152:	void dst_cache_destroy(struct dst_cache *);
63:	struct dst_entry *dst_cache_get(struct dst_cache *);
72:	struct rtable *dst_cache_get_ip4(struct dst_cache *, __be32 *);
120:	struct dst_entry *dst_cache_get_ip6(struct dst_cache *, struct in6_addr *);
140:	int dst_cache_init(struct dst_cache *, gfp_t);
166:	void dst_cache_reset_now(struct dst_cache *);
90:	void dst_cache_set_ip4(struct dst_cache *, struct dst_entry *, __be32);
105:	void dst_cache_set_ip6(struct dst_cache *, struct dst_entry *, const struct in6_addr *);
38:	static struct dst_entry *dst_cache_per_cpu_get(struct dst_cache *, struct dst_cache_pcpu *);

File net/core/failover.c:
242:	struct failover *failover_register(struct net_device *, struct failover_ops *);
104:	int failover_slave_unregister(struct net_device *);
278:	void failover_unregister(struct failover *);
186:	static int failover_event(struct notifier_block *, unsigned long, void *);
308:	static void failover_exit(void);
299:	static int failover_init(void);
46:	static int failover_slave_register(struct net_device *);

File net/core/fib_notifier.c:
18:	int call_fib_notifier(struct notifier_block *, enum fib_event_type, struct fib_notifier_info *);
29:	int call_fib_notifiers(struct net *, enum fib_event_type, struct fib_notifier_info *);
143:	struct fib_notifier_ops *fib_notifier_ops_register(const struct fib_notifier_ops *, struct net *);
164:	void fib_notifier_ops_unregister(struct fib_notifier_ops *);
99:	int register_fib_notifier(struct net *, struct notifier_block *, void (*)(struct notifier_block *), struct netlink_ext_ack *);
121:	int unregister_fib_notifier(struct net *, struct notifier_block *);
194:	static int fib_notifier_init(void);
180:	static void fib_notifier_net_exit(struct net *);
171:	static int fib_notifier_net_init(struct net *);

File net/core/filter.c:
5593:	u64 bpf_bind(u64, u64, u64, u64, u64);
4156:	void bpf_clear_redirect_map(struct bpf_map *);
2409:	u64 bpf_clone_redirect(u64, u64, u64, u64, u64);
1992:	u64 bpf_csum_diff(u64, u64, u64, u64, u64);
2051:	u64 bpf_csum_level(u64, u64, u64, u64, u64);
2031:	u64 bpf_csum_update(u64, u64, u64, u64, u64);
1754:	u64 bpf_flow_dissector_load_bytes(u64, u64, u64, u64, u64);
3044:	u64 bpf_get_cgroup_classid(u64, u64, u64, u64, u64);
3068:	u64 bpf_get_hash_recalc(u64, u64, u64, u64, u64);
6956:	u64 bpf_get_listener_sock(u64, u64, u64, u64, u64);
5005:	u64 bpf_get_netns_cookie_sk_msg(u64, u64, u64, u64, u64);
4969:	u64 bpf_get_netns_cookie_sock(u64, u64, u64, u64, u64);
4981:	u64 bpf_get_netns_cookie_sock_addr(u64, u64, u64, u64, u64);
4993:	u64 bpf_get_netns_cookie_sock_ops(u64, u64, u64, u64, u64);
3056:	u64 bpf_get_route_realm(u64, u64, u64, u64, u64);
4902:	u64 bpf_get_socket_cookie(u64, u64, u64, u64, u64);
4926:	u64 bpf_get_socket_cookie_sock(u64, u64, u64, u64, u64);
4914:	u64 bpf_get_socket_cookie_sock_addr(u64, u64, u64, u64, u64);
4950:	u64 bpf_get_socket_cookie_sock_ops(u64, u64, u64, u64, u64);
4938:	u64 bpf_get_socket_ptr_cookie(u64, u64, u64, u64, u64);
5017:	u64 bpf_get_socket_uid(u64, u64, u64, u64, u64);
7592:	bool bpf_helper_changes_pkt_data(void *);
1895:	u64 bpf_l3_csum_replace(u64, u64, u64, u64, u64);
1939:	u64 bpf_l4_csum_replace(u64, u64, u64, u64, u64);
6191:	u64 bpf_lwt_in_push_encap(u64, u64, u64, u64, u64);
6209:	u64 bpf_lwt_xmit_push_encap(u64, u64, u64, u64, u64);
2557:	u64 bpf_msg_apply_bytes(u64, u64, u64, u64, u64);
2571:	u64 bpf_msg_cork_bytes(u64, u64, u64, u64, u64);
2876:	u64 bpf_msg_pop_data(u64, u64, u64, u64, u64);
2585:	u64 bpf_msg_pull_data(u64, u64, u64, u64, u64);
2711:	u64 bpf_msg_push_data(u64, u64, u64, u64, u64);
11374:	void bpf_prog_change_xdp(struct bpf_prog *, struct bpf_prog *);
1361:	int bpf_prog_create(struct bpf_prog **, struct sock_fprog_kern *);
1406:	int bpf_prog_create_from_user(struct bpf_prog **, struct sock_fprog *, bpf_aux_classic_check_t, bool);
1449:	void bpf_prog_destroy(struct bpf_prog *);
2487:	u64 bpf_redirect(u64, u64, u64, u64, u64);
2529:	u64 bpf_redirect_neigh(u64, u64, u64, u64, u64);
2508:	u64 bpf_redirect_peer(u64, u64, u64, u64, u64);
10908:	struct sock *bpf_run_sk_reuseport(struct sock_reuseport *, struct sock *, struct bpf_prog *, struct sk_buff *, struct sock *, u32);
3101:	u64 bpf_set_hash(u64, u64, u64, u64, u64);
3085:	u64 bpf_set_hash_invalid(u64, u64, u64, u64, u64);
4839:	u64 bpf_sk_ancestor_cgroup_id(u64, u64, u64, u64, u64);
7189:	u64 bpf_sk_assign(u64, u64, u64, u64, u64);
4827:	u64 bpf_sk_cgroup_id(u64, u64, u64, u64, u64);
1855:	u64 bpf_sk_fullsock(u64, u64, u64, u64, u64);
5359:	u64 bpf_sk_getsockopt(u64, u64, u64, u64, u64);
11164:	u64 bpf_sk_lookup_assign(u64, u64, u64, u64, u64);
6620:	u64 bpf_sk_lookup_tcp(u64, u64, u64, u64, u64);
6639:	u64 bpf_sk_lookup_udp(u64, u64, u64, u64, u64);
6658:	u64 bpf_sk_release(u64, u64, u64, u64, u64);
5342:	u64 bpf_sk_setsockopt(u64, u64, u64, u64, u64);
3580:	u64 bpf_skb_adjust_room(u64, u64, u64, u64, u64);
4813:	u64 bpf_skb_ancestor_cgroup_id(u64, u64, u64, u64, u64);
4783:	u64 bpf_skb_cgroup_id(u64, u64, u64, u64, u64);
3769:	u64 bpf_skb_change_head(u64, u64, u64, u64, u64);
3311:	u64 bpf_skb_change_proto(u64, u64, u64, u64, u64);
3705:	u64 bpf_skb_change_tail(u64, u64, u64, u64, u64);
3350:	u64 bpf_skb_change_type(u64, u64, u64, u64, u64);
6042:	u64 bpf_skb_check_mtu(u64, u64, u64, u64, u64);
6973:	u64 bpf_skb_ecn_set_ce(u64, u64, u64, u64, u64);
4454:	u64 bpf_skb_event_output(u64, u64, u64, u64, u64);
5975:	u64 bpf_skb_fib_lookup(u64, u64, u64, u64, u64);
168:	u64 bpf_skb_get_nlattr(u64, u64, u64, u64, u64);
188:	u64 bpf_skb_get_nlattr_nest(u64, u64, u64, u64, u64);
163:	u64 bpf_skb_get_pay_offset(u64, u64, u64, u64, u64);
4498:	u64 bpf_skb_get_tunnel_key(u64, u64, u64, u64, u64);
4577:	u64 bpf_skb_get_tunnel_opt(u64, u64, u64, u64, u64);
1724:	u64 bpf_skb_load_bytes(u64, u64, u64, u64, u64);
1788:	u64 bpf_skb_load_bytes_relative(u64, u64, u64, u64, u64);
239:	u64 bpf_skb_load_helper_16(u64, u64, u64, u64, u64);
259:	u64 bpf_skb_load_helper_16_no_cache(u64, u64, u64, u64, u64);
266:	u64 bpf_skb_load_helper_32(u64, u64, u64, u64, u64);
286:	u64 bpf_skb_load_helper_32_no_cache(u64, u64, u64, u64, u64);
212:	u64 bpf_skb_load_helper_8(u64, u64, u64, u64, u64);
232:	u64 bpf_skb_load_helper_8_no_cache(u64, u64, u64, u64, u64);
1833:	u64 bpf_skb_pull_data(u64, u64, u64, u64, u64);
7445:	u64 bpf_skb_set_tstamp(u64, u64, u64, u64, u64);
4613:	u64 bpf_skb_set_tunnel_key(u64, u64, u64, u64, u64);
4691:	u64 bpf_skb_set_tunnel_opt(u64, u64, u64, u64, u64);
1687:	u64 bpf_skb_store_bytes(u64, u64, u64, u64, u64);
4741:	u64 bpf_skb_under_cgroup(u64, u64, u64, u64, u64);
3145:	u64 bpf_skb_vlan_pop(u64, u64, u64, u64, u64);
3119:	u64 bpf_skb_vlan_push(u64, u64, u64, u64, u64);
6601:	u64 bpf_skc_lookup_tcp(u64, u64, u64, u64, u64);
11514:	u64 bpf_skc_to_mptcp_sock(u64, u64, u64, u64, u64);
11384:	u64 bpf_skc_to_tcp6_sock(u64, u64, u64, u64, u64);
11450:	u64 bpf_skc_to_tcp_request_sock(u64, u64, u64, u64, u64);
11405:	u64 bpf_skc_to_tcp_sock(u64, u64, u64, u64, u64);
11421:	u64 bpf_skc_to_tcp_timewait_sock(u64, u64, u64, u64, u64);
11473:	u64 bpf_skc_to_udp6_sock(u64, u64, u64, u64, u64);
11494:	u64 bpf_skc_to_unix_sock(u64, u64, u64, u64, u64);
5427:	u64 bpf_sock_addr_getsockopt(u64, u64, u64, u64, u64);
5410:	u64 bpf_sock_addr_setsockopt(u64, u64, u64, u64, u64);
6760:	u64 bpf_sock_addr_sk_lookup_tcp(u64, u64, u64, u64, u64);
6779:	u64 bpf_sock_addr_sk_lookup_udp(u64, u64, u64, u64, u64);
6741:	u64 bpf_sock_addr_skc_lookup_tcp(u64, u64, u64, u64, u64);
8487:	bool bpf_sock_common_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
9592:	u32 bpf_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
11528:	u64 bpf_sock_from_file(u64, u64, u64, u64, u64);
8499:	bool bpf_sock_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
5568:	u64 bpf_sock_ops_cb_flags_set(u64, u64, u64, u64, u64);
5529:	u64 bpf_sock_ops_getsockopt(u64, u64, u64, u64, u64);
7263:	u64 bpf_sock_ops_load_hdr_opt(u64, u64, u64, u64, u64);
7419:	u64 bpf_sock_ops_reserve_hdr_opt(u64, u64, u64, u64, u64);
5444:	u64 bpf_sock_ops_setsockopt(u64, u64, u64, u64, u64);
7341:	u64 bpf_sock_ops_store_hdr_opt(u64, u64, u64, u64, u64);
7044:	u64 bpf_tcp_check_syncookie(u64, u64, u64, u64, u64);
7120:	u64 bpf_tcp_gen_syncookie(u64, u64, u64, u64, u64);
6941:	u64 bpf_tcp_sock(u64, u64, u64, u64, u64);
6817:	u32 bpf_tcp_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
6798:	bool bpf_tcp_sock_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
5393:	u64 bpf_unlocked_sk_getsockopt(u64, u64, u64, u64, u64);
5376:	u64 bpf_unlocked_sk_setsockopt(u64, u64, u64, u64, u64);
8758:	void bpf_warn_invalid_xdp_action(struct net_device *, struct bpf_prog *, u32);
3829:	u64 bpf_xdp_adjust_head(u64, u64, u64, u64, u64);
4089:	u64 bpf_xdp_adjust_meta(u64, u64, u64, u64, u64);
4047:	u64 bpf_xdp_adjust_tail(u64, u64, u64, u64, u64);
6091:	u64 bpf_xdp_check_mtu(u64, u64, u64, u64, u64);
4862:	u64 bpf_xdp_event_output(u64, u64, u64, u64, u64);
5941:	u64 bpf_xdp_fib_lookup(u64, u64, u64, u64, u64);
3802:	u64 bpf_xdp_get_buff_len(u64, u64, u64, u64, u64);
3935:	u64 bpf_xdp_load_bytes(u64, u64, u64, u64, u64);
4401:	u64 bpf_xdp_redirect(u64, u64, u64, u64, u64);
4426:	u64 bpf_xdp_redirect_map(u64, u64, u64, u64, u64);
6718:	u64 bpf_xdp_sk_lookup_tcp(u64, u64, u64, u64, u64);
6672:	u64 bpf_xdp_sk_lookup_udp(u64, u64, u64, u64, u64);
6695:	u64 bpf_xdp_skc_lookup_tcp(u64, u64, u64, u64, u64);
7012:	u32 bpf_xdp_sock_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
6997:	bool bpf_xdp_sock_is_valid_access(int, int, enum bpf_access_type, struct bpf_insn_access_aux *);
3962:	u64 bpf_xdp_store_bytes(u64, u64, u64, u64, u64);
88:	int copy_bpf_fprog_from_user(struct sock_fprog *, sockptr_t, int);
1573:	int sk_attach_bpf(u32, struct sock *);
1528:	int sk_attach_filter(struct sock_fprog *, struct sock *);
10828:	int sk_detach_filter(struct sock *);
1230:	bool sk_filter_charge(struct sock *, struct sk_filter *);
124:	int sk_filter_trim_cap(struct sock *, struct sk_buff *, unsigned int);
1205:	void sk_filter_uncharge(struct sock *, struct sk_filter *);
10848:	int sk_get_filter(struct sock *, sockptr_t, unsigned int);
1590:	int sk_reuseport_attach_bpf(u32, struct sock *);
1546:	int sk_reuseport_attach_filter(struct sock_fprog *, struct sock *);
10979:	u64 sk_reuseport_load_bytes(u64, u64, u64, u64, u64);
10996:	u64 sk_reuseport_load_bytes_relative(u64, u64, u64, u64, u64);
1635:	void sk_reuseport_prog_free(struct bpf_prog *);
10925:	u64 sk_select_reuseport(u64, u64, u64, u64, u64);
3539:	u64 sk_skb_adjust_room(u64, u64, u64, u64, u64);
3787:	u64 sk_skb_change_head(u64, u64, u64, u64, u64);
3723:	u64 sk_skb_change_tail(u64, u64, u64, u64, u64);
1873:	u64 sk_skb_pull_data(u64, u64, u64, u64, u64);
2452:	int skb_do_redirect(struct sk_buff *);
4148:	void xdp_do_flush(void);
4366:	int xdp_do_generic_redirect(struct net_device *, struct sk_buff *, struct xdp_buff *, struct bpf_prog *);
4282:	int xdp_do_redirect(struct net_device *, struct xdp_buff *, struct bpf_prog *);
4304:	int xdp_do_redirect_frame(struct net_device *, struct xdp_buff *, struct xdp_frame *, struct bpf_prog *);
4176:	u32 xdp_master_redirect(struct xdp_buff *);
5305:	static int __bpf_getsockopt(struct sock *, int, int, char *, int);
2164:	static int __bpf_redirect(struct sk_buff *, struct net_device *, u32);
5279:	static int __bpf_setsockopt(struct sock *, int, int, char *, int);
3665:	static int __bpf_skb_change_tail(struct sk_buff *, u32, u64);
6484:	static struct sock *__bpf_skc_lookup(struct sk_buff *, struct bpf_sock_tuple *, u32, struct net *, u32, u8, u64, u64);
1482:	static struct bpf_prog *__get_filter(struct sock_fprog *, struct sock *);
1455:	static int __sk_attach_prog(struct bpf_prog *, struct sock *);
9229:	static u32 bpf_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
559:	static int bpf_convert_filter(struct sock_filter *, int, struct bpf_prog *, int *, bool *);
9161:	static struct bpf_insn *bpf_convert_tstamp_read(const struct bpf_prog *, const struct bpf_insn *, struct bpf_insn *);
9121:	static struct bpf_insn *bpf_convert_tstamp_type_read(const struct bpf_insn *, struct bpf_insn *);
9195:	static struct bpf_insn *bpf_convert_tstamp_write(const struct bpf_prog *, const struct bpf_insn *, struct bpf_insn *);
8595:	static int bpf_gen_ld_abs(const struct bpf_insn *, struct bpf_insn *);
5708:	static int bpf_ipv4_fib_lookup(struct net *, struct bpf_fib_lookup *, u32, bool);
5827:	static int bpf_ipv6_fib_lookup(struct net *, struct bpf_fib_lookup *, u32, bool);
8547:	static int bpf_noop_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
1312:	static struct bpf_prog *bpf_prepare_filter(struct bpf_prog *, bpf_aux_classic_check_t);
11547:	static const struct bpf_func_proto *bpf_sk_base_func_proto(enum bpf_func_id);
6573:	static struct sock *bpf_sk_lookup(struct sk_buff *, struct bpf_sock_tuple *, u32, u8, u64, u64);
4441:	static unsigned long bpf_skb_copy(void *, const void *, unsigned long, unsigned long);
8268:	static bool bpf_skb_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
3219:	static int bpf_skb_net_hdr_pop(struct sk_buff *, u32, u32);
5461:	static int bpf_sock_ops_get_syn(struct bpf_sock_ops_kern *, int, const u8 **);
5072:	static int bpf_sol_tcp_setsockopt(struct sock *, int, char *, int);
4853:	static unsigned long bpf_xdp_copy(void *, const void *, unsigned long, unsigned long);
3989:	static int bpf_xdp_frags_increase_tail(struct xdp_buff *, int);
4010:	static int bpf_xdp_frags_shrink_tail(struct xdp_buff *, int);
7768:	static const struct bpf_func_proto *cg_skb_func_proto(enum bpf_func_id, const struct bpf_prog *);
8360:	static bool cg_skb_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
470:	static bool convert_bpf_ld_abs(struct sock_filter *, struct bpf_insn **);
9089:	static u32 flow_dissector_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
8164:	static const struct bpf_func_proto *flow_dissector_func_proto(enum bpf_func_id, const struct bpf_prog *);
9055:	static bool flow_dissector_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
8202:	static const struct bpf_func_proto *lwt_in_func_proto(enum bpf_func_id, const struct bpf_prog *);
8404:	static bool lwt_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
8175:	static const struct bpf_func_proto *lwt_out_func_proto(enum bpf_func_id, const struct bpf_prog *);
8252:	static const struct bpf_func_proto *lwt_seg6local_func_proto(enum bpf_func_id, const struct bpf_prog *);
8213:	static const struct bpf_func_proto *lwt_xmit_func_proto(enum bpf_func_id, const struct bpf_prog *);
7746:	static const struct bpf_func_proto *sk_filter_func_proto(enum bpf_func_id, const struct bpf_prog *);
8331:	static bool sk_filter_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
1186:	static void sk_filter_release_rcu(struct callback_head *);
6434:	static struct sock *sk_lookup(struct net *, struct bpf_sock_tuple *, int, int, u8, u8);
11263:	static u32 sk_lookup_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
11203:	static const struct bpf_func_proto *sk_lookup_func_proto(enum bpf_func_id, const struct bpf_prog *);
11217:	static bool sk_lookup_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
10542:	static u32 sk_msg_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
8075:	static const struct bpf_func_proto *sk_msg_func_proto(enum bpf_func_id, const struct bpf_prog *);
9011:	static bool sk_msg_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
11103:	static u32 sk_reuseport_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
11016:	static const struct bpf_func_proto *sk_reuseport_func_proto(enum bpf_func_id, const struct bpf_prog *);
11036:	static bool sk_reuseport_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
10501:	static u32 sk_skb_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
8123:	static const struct bpf_func_proto *sk_skb_func_proto(enum bpf_func_id, const struct bpf_prog *);
8973:	static bool sk_skb_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
8967:	static int sk_skb_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
9917:	static u32 sock_addr_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7663:	static const struct bpf_func_proto *sock_addr_func_proto(enum bpf_func_id, const struct bpf_prog *);
8786:	static bool sock_addr_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
7634:	static const struct bpf_func_proto *sock_filter_func_proto(enum bpf_func_id, const struct bpf_prog *);
8536:	static bool sock_filter_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
10006:	static u32 sock_ops_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
8027:	static const struct bpf_func_proto *sock_ops_func_proto(enum bpf_func_id, const struct bpf_prog *);
8903:	static bool sock_ops_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
5035:	static int sol_socket_sockopt(struct sock *, int, char *, int *, bool);
5171:	static int sol_tcp_sockopt(struct sock *, int, char *, int *, bool);
8691:	static int tc_cls_act_btf_struct_access(struct bpf_verifier_log *, const struct bpf_reg_state *, int, int, enum bpf_access_type, u32 *, enum bpf_type_flag *);
9767:	static u32 tc_cls_act_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7817:	static const struct bpf_func_proto *tc_cls_act_func_proto(enum bpf_func_id, const struct bpf_prog *);
8636:	static bool tc_cls_act_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
8630:	static int tc_cls_act_prologue(struct bpf_insn *, bool, const struct bpf_prog *);
8768:	static int xdp_btf_struct_access(struct bpf_verifier_log *, const struct bpf_reg_state *, int, int, enum bpf_access_type, u32 *, enum bpf_type_flag *);
9791:	static u32 xdp_convert_ctx_access(enum bpf_access_type, const struct bpf_insn *, struct bpf_insn *, struct bpf_prog *, u32 *);
7952:	static const struct bpf_func_proto *xdp_func_proto(enum bpf_func_id, const struct bpf_prog *);
8721:	static bool xdp_is_valid_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);

File net/core/flow_dissector.c:
1852:	__u32 __get_hash_from_flowi6(const struct flowi6 *, struct flow_keys *);
946:	bool __skb_flow_dissect(const struct net *, const struct sk_buff *, struct flow_dissector *, void *, const void *, __be16, int, int, unsigned int);
118:	__be32 __skb_flow_get_ports(const struct sk_buff *, int, u8, const void *, int);
1759:	void __skb_get_hash(struct sk_buff *);
1735:	u32 __skb_get_hash_symmetric(const struct sk_buff *);
1781:	u32 __skb_get_poff(const struct sk_buff *, const void *, const struct flow_keys_basic *, int);
893:	u32 bpf_flow_dissect(struct bpf_prog *, struct bpf_flow_dissector *, __be16, int, int, unsigned int);
76:	int flow_dissector_bpf_prog_attach_check(struct net *, struct bpf_prog *);
1625:	__be32 flow_get_u32_dst(const struct flow_keys *);
1609:	__be32 flow_get_u32_src(const struct flow_keys *);
1689:	u32 flow_hash_from_keys(struct flow_keys *);
1715:	void make_flow_keys_digest(struct flow_keys_digest *, const struct flow_keys *);
264:	void skb_flow_dissect_ct(const struct sk_buff *, struct flow_dissector *, void *, u16 *, size_t, bool, u16);
419:	void skb_flow_dissect_hash(const struct sk_buff *, struct flow_dissector *, void *);
231:	void skb_flow_dissect_meta(const struct sk_buff *, struct flow_dissector *, void *);
310:	void skb_flow_dissect_tunnel_info(const struct sk_buff *, struct flow_dissector *, void *);
45:	void skb_flow_dissector_init(struct flow_dissector *, const struct flow_dissector_key *, unsigned int);
164:	void skb_flow_get_icmp_tci(const struct sk_buff *, struct flow_dissector_key_icmp *, const void *, int, int);
1772:	__u32 skb_get_hash_perturb(const struct sk_buff *, const siphash_key_t *);
1841:	u32 skb_get_poff(const struct sk_buff *);
1696:	static u32 ___skb_get_hash(const struct sk_buff *, struct flow_keys *, const siphash_key_t *);
1950:	static int init_default_flow_dissectors(void);

File net/core/flow_offload.c:
212:	struct flow_action_cookie *flow_action_cookie_create(void *, unsigned int, gfp_t);
227:	void flow_action_cookie_destroy(struct flow_action_cookie *);
254:	struct flow_block_cb *flow_block_cb_alloc(flow_setup_cb_t *, void *, void *, void (*)(void *));
309:	unsigned int flow_block_cb_decref(struct flow_block_cb *);
273:	void flow_block_cb_free(struct flow_block_cb *);
303:	void flow_block_cb_incref(struct flow_block_cb *);
315:	bool flow_block_cb_is_busy(flow_setup_cb_t *, void *, struct list_head *);
282:	struct flow_block_cb *flow_block_cb_lookup(struct flow_block *, flow_setup_cb_t *, void *);
297:	void *flow_block_cb_priv(struct flow_block_cb *);
330:	int flow_block_cb_setup_simple(struct flow_block_offload *, struct list_head *, flow_setup_cb_t *, void *, void *, bool);
523:	struct flow_block_cb *flow_indr_block_cb_alloc(flow_setup_cb_t *, void *, void *, void (*)(void *), struct flow_block_offload *, struct net_device *, struct Qdisc *, void *, void *, void (*)(struct flow_block_cb *));
627:	bool flow_indr_dev_exists(void);
425:	int flow_indr_dev_register(flow_indr_block_bind_cb_t *, void *);
598:	int flow_indr_dev_setup_offload(struct net_device *, struct Qdisc *, enum tc_setup_type, void *, struct flow_block_offload *, void (*)(struct flow_block_cb *));
478:	void flow_indr_dev_unregister(flow_indr_block_bind_cb_t *, void *, void (*)(void *));
10:	struct flow_rule *flow_rule_alloc(unsigned int);
100:	void flow_rule_match_arp(const struct flow_rule *, struct flow_match_arp *);
65:	void flow_rule_match_basic(const struct flow_rule *, struct flow_match_basic *);
72:	void flow_rule_match_control(const struct flow_rule *, struct flow_match_control *);
233:	void flow_rule_match_ct(const struct flow_rule *, struct flow_match_ct *);
93:	void flow_rule_match_cvlan(const struct flow_rule *, struct flow_match_vlan *);
163:	void flow_rule_match_enc_control(const struct flow_rule *, struct flow_match_control *);
184:	void flow_rule_match_enc_ip(const struct flow_rule *, struct flow_match_ip *);
170:	void flow_rule_match_enc_ipv4_addrs(const struct flow_rule *, struct flow_match_ipv4_addrs *);
177:	void flow_rule_match_enc_ipv6_addrs(const struct flow_rule *, struct flow_match_ipv6_addrs *);
198:	void flow_rule_match_enc_keyid(const struct flow_rule *, struct flow_match_enc_keyid *);
205:	void flow_rule_match_enc_opts(const struct flow_rule *, struct flow_match_enc_opts *);
191:	void flow_rule_match_enc_ports(const struct flow_rule *, struct flow_match_ports *);
79:	void flow_rule_match_eth_addrs(const struct flow_rule *, struct flow_match_eth_addrs *);
149:	void flow_rule_match_icmp(const struct flow_rule *, struct flow_match_icmp *);
121:	void flow_rule_match_ip(const struct flow_rule *, struct flow_match_ip *);
107:	void flow_rule_match_ipv4_addrs(const struct flow_rule *, struct flow_match_ipv4_addrs *);
114:	void flow_rule_match_ipv6_addrs(const struct flow_rule *, struct flow_match_ipv6_addrs *);
247:	void flow_rule_match_l2tpv3(const struct flow_rule *, struct flow_match_l2tpv3 *);
58:	void flow_rule_match_meta(const struct flow_rule *, struct flow_match_meta *);
156:	void flow_rule_match_mpls(const struct flow_rule *, struct flow_match_mpls *);
128:	void flow_rule_match_ports(const struct flow_rule *, struct flow_match_ports *);
135:	void flow_rule_match_ports_range(const struct flow_rule *, struct flow_match_ports_range *);
240:	void flow_rule_match_pppoe(const struct flow_rule *, struct flow_match_pppoe *);
142:	void flow_rule_match_tcp(const struct flow_rule *, struct flow_match_tcp *);
86:	void flow_rule_match_vlan(const struct flow_rule *, struct flow_match_vlan *);
31:	struct flow_offload_action *offload_action_alloc(unsigned int);

File net/core/gen_estimator.c:
250:	bool gen_estimator_active(struct net_rate_estimator **);
256:	bool gen_estimator_read(struct net_rate_estimator **, struct gnet_stats_rate_est64 *);
205:	void gen_kill_estimator(struct net_rate_estimator **);
130:	int gen_new_estimator(struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, struct net_rate_estimator **, spinlock_t *, bool, struct nlattr *);
233:	int gen_replace_estimator(struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, struct net_rate_estimator **, spinlock_t *, bool, struct nlattr *);
76:	static void est_timer(struct timer_list *);

File net/core/gen_stats.c:
149:	void gnet_stats_add_basic(struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, bool);
356:	void gnet_stats_add_queue(struct gnet_stats_queue *, const struct gnet_stats_queue *, const struct gnet_stats_queue *);
118:	void gnet_stats_basic_sync_init(struct gnet_stats_basic_sync *);
426:	int gnet_stats_copy_app(struct gnet_dump *, void *, int);
260:	int gnet_stats_copy_basic(struct gnet_dump *, struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, bool);
287:	int gnet_stats_copy_basic_hw(struct gnet_dump *, struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, bool);
387:	int gnet_stats_copy_queue(struct gnet_dump *, struct gnet_stats_queue *, struct gnet_stats_queue *, __u32);
308:	int gnet_stats_copy_rate_est(struct gnet_dump *, struct net_rate_estimator **);
462:	int gnet_stats_finish_copy(struct gnet_dump *);
110:	int gnet_stats_start_copy(struct sk_buff *, int, spinlock_t *, struct gnet_dump *, int);
59:	int gnet_stats_start_copy_compat(struct sk_buff *, int, int, int, spinlock_t *, struct gnet_dump *, int);
211:	static int ___gnet_stats_copy_basic(struct gnet_dump *, struct gnet_stats_basic_sync *, struct gnet_stats_basic_sync *, int, bool);

File net/core/gro.c:
792:	__sum16 __skb_gro_checksum_complete(struct sk_buff *);
29:	void dev_add_offload(struct packet_offload *);
87:	void dev_remove_offload(struct packet_offload *);
605:	struct packet_offload *gro_find_complete_by_type(__be16);
591:	struct packet_offload *gro_find_receive_by_type(__be16);
691:	struct sk_buff *napi_get_frags(struct napi_struct *);
351:	void napi_gro_flush(struct napi_struct *, bool);
775:	gro_result_t napi_gro_frags(struct napi_struct *);
646:	gro_result_t napi_gro_receive(struct napi_struct *, struct sk_buff *);
101:	struct sk_buff *skb_eth_gso_segment(struct sk_buff *, netdev_features_t, __be16);
153:	int skb_gro_receive(struct sk_buff *, struct sk_buff *);
125:	struct sk_buff *skb_mac_gso_segment(struct sk_buff *, netdev_features_t);
480:	static enum gro_result dev_gro_receive(struct napi_struct *, struct sk_buff *);
461:	static void gro_flush_oldest(struct napi_struct *, struct list_head *);
293:	static void napi_gro_complete(struct napi_struct *, struct sk_buff *);
662:	static void napi_reuse_skb(struct napi_struct *, struct sk_buff *);

File net/core/gro_cells.c:
105:	void gro_cells_destroy(struct gro_cells *);
69:	int gro_cells_init(struct gro_cells *, struct net_device *);
12:	int gro_cells_receive(struct gro_cells *, struct sk_buff *);
50:	static int gro_cell_poll(struct napi_struct *, int);
96:	static void percpu_free_defer_callback(struct callback_head *);

File net/core/link_watch.c:
283:	void linkwatch_fire_event(struct net_device *);
248:	void linkwatch_forget_dev(struct net_device *);
96:	void linkwatch_init_dev(struct net_device *);
269:	void linkwatch_run_queue(void);
190:	static void __linkwatch_run_queue(int);
162:	static void linkwatch_do_dev(struct net_device *);
275:	static void linkwatch_event(struct work_struct *);
105:	static bool linkwatch_urgent_event(struct net_device *);
66:	static void rfc2863_policy(struct net_device *);

File net/core/neighbour.c:
747:	struct neighbour *__neigh_create(struct neigh_table *, const void *, struct net_device *, bool);
1179:	int __neigh_event_send(struct neighbour *, struct sk_buff *, const bool);
3105:	void __neigh_for_each_release(struct neigh_table *, int (*)(struct neighbour *));
1503:	void __neigh_set_probe_once(struct neighbour *);
780:	struct pneigh_entry *__pneigh_lookup(struct neigh_table *, struct net *, const void *, struct net_device *);
3529:	void neigh_app_ns(struct neighbour *);
437:	int neigh_carrier_down(struct neigh_table *, struct net_device *);
416:	void neigh_changeaddr(struct neigh_table *, struct net_device *);
1586:	int neigh_connected_output(struct neighbour *, struct sk_buff *);
902:	void neigh_destroy(struct neighbour *);
1609:	int neigh_direct_output(struct neighbour *, struct sk_buff *);
1518:	struct neighbour *neigh_event_ns(struct neigh_table *, u8 *, void *, struct net_device *);
3082:	void neigh_for_each(struct neigh_table *, void (*)(struct neighbour *, void *), void *);
444:	int neigh_ifdown(struct neigh_table *, struct net_device *);
600:	struct neighbour *neigh_lookup(struct neigh_table *, const void *, struct net_device *);
620:	struct neighbour *neigh_lookup_nodev(struct neigh_table *, struct net *, const void *);
1707:	struct neigh_parms *neigh_parms_alloc(struct net_device *, struct neigh_table *);
1750:	void neigh_parms_release(struct neigh_table *, struct neigh_parms *);
3621:	int neigh_proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
3631:	int neigh_proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
3651:	int neigh_proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
112:	unsigned long neigh_rand_reach_time(unsigned long);
229:	bool neigh_remove_one(struct neighbour *, struct neigh_table *);
1551:	int neigh_resolve_output(struct neighbour *, struct sk_buff *);
3382:	void *neigh_seq_next(struct seq_file *, void *, loff_t *);
3364:	void *neigh_seq_start(struct seq_file *, loff_t *, struct neigh_table *, unsigned int);
3409:	void neigh_seq_stop(struct seq_file *, void *);
3783:	int neigh_sysctl_register(struct net_device *, struct neigh_parms *, proc_handler *);
3868:	void neigh_sysctl_unregister(struct neigh_parms *);
1831:	int neigh_table_clear(int, struct neigh_table *);
1772:	void neigh_table_init(int, struct neigh_table *);
1493:	int neigh_update(struct neighbour *, const u8 *, u8, u32, u32);
3139:	int neigh_xmit(int, struct net_device *, const void *, struct sk_buff *);
835:	int pneigh_delete(struct neigh_table *, struct net *, const void *, struct net_device *);
1665:	void pneigh_enqueue(struct neigh_table *, struct neigh_parms *, struct sk_buff *);
791:	struct pneigh_entry *pneigh_lookup(struct neigh_table *, struct net *, const void *, struct net_device *, int);
652:	static struct neighbour *___neigh_create(struct neigh_table *, const void *, struct net_device *, u32, bool, bool);
424:	static int __neigh_ifdown(struct neigh_table *, struct net_device *, bool);
3504:	static void __neigh_notify(struct neighbour *, int, int, u32);
1305:	static int __neigh_update(struct neighbour *, const u8 *, u8, u32, u32, struct netlink_ext_ack *);
1957:	static int neigh_add(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
290:	static void neigh_add_timer(struct neighbour *, unsigned long);
92:	static int neigh_blackhole(struct neighbour *, struct sk_buff *);
300:	static int neigh_del_timer(struct neighbour *);
1892:	static int neigh_delete(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2854:	static int neigh_dump_info(struct sk_buff *, struct netlink_callback *);
2559:	static int neigh_fill_info(struct sk_buff *, struct neighbour *, u32, u32, int, unsigned int);
362:	static void neigh_flush_dev(struct neigh_table *, struct net_device *, bool);
3021:	static int neigh_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
513:	static struct neigh_hash_table *neigh_hash_alloc(unsigned int);
542:	static void neigh_hash_free_rcu(struct callback_head *);
3881:	static int neigh_init(void);
1049:	static void neigh_invalidate(struct neighbour *);
1615:	static void neigh_managed_work(struct work_struct *);
959:	static void neigh_periodic_work(struct work_struct *);
3671:	static int neigh_proc_base_reachable_time(struct ctl_table *, int, void *, size_t *, loff_t *);
3605:	static int neigh_proc_dointvec_ms_jiffies_positive(struct ctl_table *, int, void *, size_t *, loff_t *);
3661:	static int neigh_proc_dointvec_unres_qlen(struct ctl_table *, int, void *, size_t *, loff_t *);
3641:	static int neigh_proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
3590:	static int neigh_proc_dointvec_zero_intmax(struct ctl_table *, int, void *, size_t *, loff_t *);
3573:	static void neigh_proc_update(struct ctl_table *, int);
1629:	static void neigh_proxy_process(struct timer_list *);
1742:	static void neigh_rcu_free_parms(struct callback_head *);
3440:	static void *neigh_stat_seq_next(struct seq_file *, void *, loff_t *);
3460:	static int neigh_stat_seq_show(struct seq_file *, void *);
3423:	static void *neigh_stat_seq_start(struct seq_file *, loff_t *);
3455:	static void neigh_stat_seq_stop(struct seq_file *, void *);
1090:	static void neigh_timer_handler(struct timer_list *);
2498:	static int neightbl_dump_info(struct sk_buff *, struct netlink_callback *);
2109:	static int neightbl_fill_parms(struct sk_buff *, struct neigh_parms *);
2308:	static int neightbl_set(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2621:	static int pneigh_fill_info(struct sk_buff *, struct pneigh_entry *, u32, u32, int, unsigned int, struct neigh_table *);
3287:	static struct pneigh_entry *pneigh_get_first(struct seq_file *);
333:	static void pneigh_queue_purge(struct sk_buff_head *, struct net *, int);

File net/core/net-procfs.c:
401:	int dev_proc_init(void);
391:	static void dev_mc_net_exit(struct net *);
383:	static int dev_mc_net_init(struct net *);
357:	static int dev_mc_seq_show(struct seq_file *, void *);
343:	static void dev_proc_net_exit(struct net *);
315:	static int dev_proc_net_init(struct net *);
65:	static void *dev_seq_next(struct seq_file *, void *, loff_t *);
105:	static int dev_seq_show(struct seq_file *, void *);
52:	static void *dev_seq_start(struct seq_file *, loff_t *);
71:	static void dev_seq_stop(struct seq_file *, void *);
235:	static void *ptype_seq_next(struct seq_file *, void *, loff_t *);
288:	static int ptype_seq_show(struct seq_file *, void *);
228:	static void *ptype_seq_start(struct seq_file *, loff_t *);
282:	static void ptype_seq_stop(struct seq_file *, void *);
142:	static void *softnet_seq_next(struct seq_file *, void *, loff_t *);
152:	static int softnet_seq_show(struct seq_file *, void *);
137:	static void *softnet_seq_start(struct seq_file *, loff_t *);
148:	static void softnet_seq_stop(struct seq_file *, void *);

File net/core/net-sysfs.c:
1103:	int net_rx_queue_update_kobjects(struct net_device *, int, int);
2033:	int netdev_change_owner(struct net_device *, const struct net *, const struct net *);
2061:	int netdev_class_create_file_ns(const struct class_attribute *, const void *);
2068:	void netdev_class_remove_file_ns(const struct class_attribute *, const void *);
2075:	int netdev_kobject_init(void);
1704:	int netdev_queue_update_kobjects(struct net_device *, int, int);
1991:	int netdev_register_kobject(struct net_device *);
1974:	void netdev_unregister_kobject(struct net_device *);
1958:	struct net_device *of_find_net_device_by_node(struct device_node *);
110:	static ssize_t addr_assign_type_show(struct device *, struct device_attribute *, char *);
111:	static ssize_t addr_len_show(struct device *, struct device_attribute *, char *);
145:	static ssize_t address_show(struct device *, struct device_attribute *, char *);
1352:	static ssize_t bql_set_hold_time(struct netdev_queue *, const char *, size_t);
1400:	static ssize_t bql_set_limit(struct netdev_queue *, const char *, size_t);
1401:	static ssize_t bql_set_limit_max(struct netdev_queue *, const char *, size_t);
1402:	static ssize_t bql_set_limit_min(struct netdev_queue *, const char *, size_t);
1344:	static ssize_t bql_show_hold_time(struct netdev_queue *, char *);
1372:	static ssize_t bql_show_inflight(struct netdev_queue *, char *);
1400:	static ssize_t bql_show_limit(struct netdev_queue *, char *);
1401:	static ssize_t bql_show_limit_max(struct netdev_queue *, char *);
1402:	static ssize_t bql_show_limit_min(struct netdev_queue *, char *);
159:	static ssize_t broadcast_show(struct device *, struct device_attribute *, char *);
322:	static ssize_t carrier_changes_show(struct device *, struct device_attribute *, char *);
344:	static ssize_t carrier_down_count_show(struct device *, struct device_attribute *, char *);
191:	static ssize_t carrier_show(struct device *, struct device_attribute *, char *);
177:	static ssize_t carrier_store(struct device *, struct device_attribute *, const char *, size_t);
334:	static ssize_t carrier_up_count_show(struct device *, struct device_attribute *, char *);
701:	static ssize_t collisions_show(struct device *, struct device_attribute *, char *);
108:	static ssize_t dev_id_show(struct device *, struct device_attribute *, char *);
109:	static ssize_t dev_port_show(struct device *, struct device_attribute *, char *);
281:	static ssize_t dormant_show(struct device *, struct device_attribute *, char *);
229:	static ssize_t duplex_show(struct device *, struct device_attribute *, char *);
378:	static ssize_t flags_show(struct device *, struct device_attribute *, char *);
373:	static ssize_t flags_store(struct device *, struct device_attribute *, const char *, size_t);
406:	static ssize_t gro_flush_timeout_show(struct device *, struct device_attribute *, char *);
397:	static ssize_t gro_flush_timeout_store(struct device *, struct device_attribute *, const char *, size_t);
481:	static ssize_t group_show(struct device *, struct device_attribute *, char *);
476:	static ssize_t group_store(struct device *, struct device_attribute *, const char *, size_t);
456:	static ssize_t ifalias_show(struct device *, struct device_attribute *, char *);
425:	static ssize_t ifalias_store(struct device *, struct device_attribute *, const char *, size_t);
112:	static ssize_t ifindex_show(struct device *, struct device_attribute *, char *);
116:	static ssize_t iflink_show(struct device *, struct device_attribute *, char *);
114:	static ssize_t link_mode_show(struct device *, struct device_attribute *, char *);
366:	static ssize_t mtu_show(struct device *, struct device_attribute *, char *);
361:	static ssize_t mtu_store(struct device *, struct device_attribute *, const char *, size_t);
700:	static ssize_t multicast_show(struct device *, struct device_attribute *, char *);
130:	static ssize_t name_assign_type_show(struct device *, struct device_attribute *, char *);
423:	static ssize_t napi_defer_hard_irqs_show(struct device *, struct device_attribute *, char *);
414:	static ssize_t napi_defer_hard_irqs_store(struct device *, struct device_attribute *, const char *, size_t);
1839:	static bool net_current_may_mount(void);
1920:	static void net_get_ownership(const struct device *, kuid_t *, kgid_t *);
1846:	static void *net_grab_current_ns(void);
1856:	static const void *net_initial_ns(void);
1913:	static const void *net_namespace(const struct device *);
1861:	static const void *net_netlink_ns(struct sock *);
1175:	static ssize_t netdev_queue_attr_show(struct kobject *, struct attribute *, char *);
1188:	static ssize_t netdev_queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
1638:	static void netdev_queue_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
1626:	static const void *netdev_queue_namespace(const struct kobject *);
1618:	static void netdev_queue_release(struct kobject *);
1900:	static void netdev_release(struct device *);
1876:	static int netdev_uevent(const struct device *, struct kobj_uevent_env *);
1939:	static int of_dev_node_match(struct device *, const void *);
303:	static ssize_t operstate_show(struct device *, struct device_attribute *, char *);
497:	static ssize_t phys_port_id_show(struct device *, struct device_attribute *, char *);
525:	static ssize_t phys_port_name_show(struct device *, struct device_attribute *, char *);
554:	static ssize_t phys_switch_id_show(struct device *, struct device_attribute *, char *);
495:	static ssize_t proto_down_show(struct device *, struct device_attribute *, char *);
489:	static ssize_t proto_down_store(struct device *, struct device_attribute *, const char *, size_t);
916:	static void rps_dev_flow_table_release(struct callback_head *);
694:	static ssize_t rx_bytes_show(struct device *, struct device_attribute *, char *);
713:	static ssize_t rx_compressed_show(struct device *, struct device_attribute *, char *);
704:	static ssize_t rx_crc_errors_show(struct device *, struct device_attribute *, char *);
698:	static ssize_t rx_dropped_show(struct device *, struct device_attribute *, char *);
696:	static ssize_t rx_errors_show(struct device *, struct device_attribute *, char *);
706:	static ssize_t rx_fifo_errors_show(struct device *, struct device_attribute *, char *);
705:	static ssize_t rx_frame_errors_show(struct device *, struct device_attribute *, char *);
702:	static ssize_t rx_length_errors_show(struct device *, struct device_attribute *, char *);
707:	static ssize_t rx_missed_errors_show(struct device *, struct device_attribute *, char *);
715:	static ssize_t rx_nohandler_show(struct device *, struct device_attribute *, char *);
703:	static ssize_t rx_over_errors_show(struct device *, struct device_attribute *, char *);
692:	static ssize_t rx_packets_show(struct device *, struct device_attribute *, char *);
782:	static ssize_t rx_queue_attr_show(struct kobject *, struct attribute *, char *);
794:	static ssize_t rx_queue_attr_store(struct kobject *, struct attribute *, const char *, size_t);
1035:	static void rx_queue_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
1023:	static const void *rx_queue_namespace(const struct kobject *);
999:	static void rx_queue_release(struct kobject *);
901:	static ssize_t show_rps_dev_flow_table_cnt(struct netdev_rx_queue *, char *);
812:	static ssize_t show_rps_map(struct netdev_rx_queue *, char *);
203:	static ssize_t speed_show(struct device *, struct device_attribute *, char *);
923:	static ssize_t store_rps_dev_flow_table_cnt(struct netdev_rx_queue *, const char *, size_t);
834:	static ssize_t store_rps_map(struct netdev_rx_queue *, const char *, size_t);
269:	static ssize_t testing_show(struct device *, struct device_attribute *, char *);
584:	static ssize_t threaded_show(struct device *, struct device_attribute *, char *);
615:	static ssize_t threaded_store(struct device *, struct device_attribute *, const char *, size_t);
1225:	static ssize_t traffic_class_show(struct netdev_queue *, char *);
708:	static ssize_t tx_aborted_errors_show(struct device *, struct device_attribute *, char *);
695:	static ssize_t tx_bytes_show(struct device *, struct device_attribute *, char *);
709:	static ssize_t tx_carrier_errors_show(struct device *, struct device_attribute *, char *);
714:	static ssize_t tx_compressed_show(struct device *, struct device_attribute *, char *);
699:	static ssize_t tx_dropped_show(struct device *, struct device_attribute *, char *);
697:	static ssize_t tx_errors_show(struct device *, struct device_attribute *, char *);
710:	static ssize_t tx_fifo_errors_show(struct device *, struct device_attribute *, char *);
711:	static ssize_t tx_heartbeat_errors_show(struct device *, struct device_attribute *, char *);
1263:	static ssize_t tx_maxrate_show(struct netdev_queue *, char *);
1269:	static ssize_t tx_maxrate_store(struct netdev_queue *, const char *, size_t);
693:	static ssize_t tx_packets_show(struct device *, struct device_attribute *, char *);
389:	static ssize_t tx_queue_len_show(struct device *, struct device_attribute *, char *);
380:	static ssize_t tx_queue_len_store(struct device *, struct device_attribute *, const char *, size_t);
1207:	static ssize_t tx_timeout_show(struct netdev_queue *, char *);
712:	static ssize_t tx_window_errors_show(struct device *, struct device_attribute *, char *);
113:	static ssize_t type_show(struct device *, struct device_attribute *, char *);
1470:	static ssize_t xps_cpus_show(struct netdev_queue *, char *);
1503:	static ssize_t xps_cpus_store(struct netdev_queue *, const char *, size_t);
1420:	static ssize_t xps_queue_show(struct net_device *, unsigned int, int, char *, enum xps_map_type);
1544:	static ssize_t xps_rxqs_show(struct netdev_queue *, char *);
1563:	static ssize_t xps_rxqs_store(struct netdev_queue *, const char *, size_t);

File net/core/net_namespace.c:
649:	void __put_net(struct net *);
456:	struct net *copy_net_ns(unsigned long, struct user_namespace *, struct net *);
664:	struct ns_common *get_net_ns(struct ns_common *);
670:	struct net *get_net_ns_by_fd(int);
290:	struct net *get_net_ns_by_id(const struct net *, int);
692:	struct net *get_net_ns_by_pid(pid_t);
448:	void net_drop_ns(void *);
640:	void net_ns_barrier(void);
510:	void net_ns_get_ownership(const struct net *, kuid_t *, kgid_t *);
1096:	void net_ns_init(void);
270:	int peernet2id(const struct net *, struct net *);
232:	int peernet2id_alloc(struct net *, struct net *, gfp_t);
285:	bool peernet_has_id(const struct net *, struct net *);
1310:	int register_pernet_device(struct pernet_operations *);
1264:	int register_pernet_subsys(struct pernet_operations *);
1331:	void unregister_pernet_device(struct pernet_operations *);
1283:	void unregister_pernet_subsys(struct pernet_operations *);
558:	static void cleanup_net(struct work_struct *);
1136:	static void free_exit_list(struct pernet_operations *, struct list_head *);
378:	static int net_defaults_init(void);
366:	static int net_defaults_init_net(struct net *);
206:	static int net_eq_idr(int, void *, void *);
722:	static void net_ns_net_exit(struct net *);
714:	static int net_ns_net_init(struct net *);
1342:	static struct ns_common *netns_get(struct task_struct *);
1366:	static int netns_install(struct nsset *, struct ns_common *);
1380:	static struct user_namespace *netns_owner(struct ns_common *);
1361:	static void netns_put(struct ns_common *);
118:	static int ops_init(const struct pernet_operations *, struct net *);
1214:	static int register_pernet_operations(struct list_head *, struct pernet_operations *);
1034:	static int rtnl_net_dumpid(struct sk_buff *, struct netlink_callback *);
972:	static int rtnl_net_dumpid_one(int, void *, void *);
819:	static int rtnl_net_fill(struct sk_buff *, struct net_fill_args *);
884:	static int rtnl_net_getid(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
740:	static int rtnl_net_newid(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1067:	static void rtnl_net_notifyid(struct net *, int, int, u32, struct nlmsghdr *, gfp_t);
310:	static int setup_net(struct net *, struct user_namespace *);

File net/core/netevent.c:
59:	int call_netevent_notifiers(unsigned long, void *);
28:	int register_netevent_notifier(struct notifier_block *);
44:	int unregister_netevent_notifier(struct notifier_block *);

File net/core/of_net.c:
161:	int of_get_ethdev_address(struct device_node *, struct net_device *);
125:	int of_get_mac_address(struct device_node *, u8 *);
60:	int of_get_mac_address_nvmem(struct device_node *, u8 *);
26:	int of_get_phy_mode(struct device_node *, phy_interface_t *);

File net/core/page_pool.c:
692:	struct page *page_pool_alloc_frag(struct page_pool *, unsigned int *, unsigned int, gfp_t);
431:	struct page *page_pool_alloc_pages(struct page_pool *, gfp_t);
203:	struct page_pool *page_pool_create(const struct page_pool_params *);
840:	void page_pool_destroy(struct page_pool *);
601:	void page_pool_put_defragged_page(struct page_pool *, struct page *, unsigned int, bool);
614:	void page_pool_put_page_bulk(struct page_pool *, void **, int);
470:	void page_pool_release_page(struct page_pool *, struct page *);
877:	bool page_pool_return_skb_page(struct page *);
862:	void page_pool_update_nid(struct page_pool *, int);
832:	void page_pool_use_xdp_mem(struct page_pool *, void (*)(void *), struct xdp_mem_info *);
345:	static struct page *__page_pool_alloc_page_order(struct page_pool *, gfp_t);
372:	static struct page *__page_pool_alloc_pages_slow(struct page_pool *, gfp_t);
226:	static struct page *page_pool_refill_alloc_cache(struct page_pool *);
797:	static int page_pool_release(struct page_pool *);
809:	static void page_pool_release_retry(struct work_struct *);
500:	static void page_pool_return_page(struct page_pool *, struct page *);

File net/core/ptp_classifier.c:
152:	void ptp_classifier_init(void);
104:	unsigned int ptp_classify_raw(const struct sk_buff *);
140:	bool ptp_msg_is_sync(struct sk_buff *, unsigned int);
110:	struct ptp_header *ptp_parse_header(struct sk_buff *, unsigned int);

File net/core/request_sock.c:
91:	void reqsk_fastopen_remove(struct sock *, struct request_sock *, bool);
34:	void reqsk_queue_alloc(struct request_sock_queue *);

File net/core/rtnetlink.c:
412:	int __rtnl_link_register(struct rtnl_link_ops *);
472:	void __rtnl_link_unregister(struct rtnl_link_ops *);
95:	void __rtnl_unlock(void);
4776:	int ndo_dflt_bridge_getlink(struct sk_buff *, u32, u32, struct net_device *, u16, u32, u32, int, u32, int (*)(struct sk_buff *, struct net_device *, u32));
4077:	int ndo_dflt_fdb_add(struct ndmsg *, struct nlattr **, struct net_device *, const unsigned char *, u16, u16);
4222:	int ndo_dflt_fdb_del(struct ndmsg *, struct nlattr **, struct net_device *, const unsigned char *, u16);
4398:	int ndo_dflt_fdb_dump(struct sk_buff *, struct netlink_callback *, struct net_device *, struct net_device *, int *);
164:	bool refcount_dec_and_rtnl_lock(refcount_t *);
3992:	void rtmsg_ifinfo(int, struct net_device *, unsigned int, gfp_t, u32, const struct nlmsghdr *);
3939:	struct sk_buff *rtmsg_ifinfo_build_skb(int, struct net_device *, unsigned int, u32, gfp_t, int *, int, u32, u32);
3999:	void rtmsg_ifinfo_newnet(int, struct net_device *, unsigned int, gfp_t, int *, int);
3968:	void rtmsg_ifinfo_send(struct sk_buff *, struct net_device *, gfp_t, u32, const struct nlmsghdr *);
6235:	void rtnetlink_init(void);
780:	int rtnetlink_put_metrics(struct sk_buff *, u32 *);
748:	int rtnetlink_send(struct sk_buff *, struct net *, u32, unsigned int, int);
600:	void rtnl_af_register(struct rtnl_af_ops *);
612:	void rtnl_af_unregister(struct rtnl_af_ops *);
3223:	int rtnl_configure_link(struct net_device *, const struct ifinfomsg *, u32, const struct nlmsghdr *);
3247:	struct net_device *rtnl_create_link(struct net *, const char *, unsigned char, const struct rtnl_link_ops *, struct nlattr **, struct netlink_ext_ack *);
3152:	int rtnl_delete_link(struct net_device *, u32, const struct nlmsghdr *);
2091:	struct net *rtnl_get_net_ns_capable(struct sock *, int);
158:	int rtnl_is_locked(void);
86:	void rtnl_kfree_skbs(struct sk_buff *, struct sk_buff *);
2264:	struct net *rtnl_link_get_net(struct net *, struct nlattr **);
436:	int rtnl_link_register(struct rtnl_link_ops *);
518:	void rtnl_link_unregister(struct rtnl_link_ops *);
73:	void rtnl_lock(void);
79:	int rtnl_lock_killable(void);
2256:	int rtnl_nla_parse_ifla(struct nlattr **, const struct nlattr *, int, struct netlink_ext_ack *);
763:	void rtnl_notify(struct sk_buff *, struct net *, u32, u32, const struct nlmsghdr *, gfp_t);
5932:	void rtnl_offload_xstats_notify(struct net_device *);
832:	int rtnl_put_cacheinfo(struct sk_buff *, struct dst_entry *, u32, long, u32);
305:	void rtnl_register(int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int);
279:	int rtnl_register_module(struct module *, int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int);
772:	void rtnl_set_sk_err(struct net *, u32, int);
152:	int rtnl_trylock(void);
755:	int rtnl_unicast(struct sk_buff *, struct net *, u32);
145:	void rtnl_unlock(void);
325:	int rtnl_unregister(int, int);
358:	void rtnl_unregister_all(int);
2632:	static int do_set_proto_down(struct net_device *, struct nlattr *, struct nlattr *, struct netlink_ext_ack *);
2690:	static int do_setlink(const struct sk_buff *, struct net_device *, struct ifinfomsg *, struct netlink_ext_ack *, struct nlattr **, int);
4116:	static int fdb_vid_parse(struct nlattr *, u16 *, struct netlink_ext_ack *);
1052:	static size_t if_nlmsg_size(const struct net_device *, u32);
5639:	static size_t if_nlmsg_stats_size(const struct net_device *, const struct rtnl_stats_dump_filters *);
1605:	static int nla_put_ifalias(struct sk_buff *, struct net_device *);
4006:	static int nlmsg_populate_fdb_fill(struct sk_buff *, struct net_device *, u8 *, u16, u32, u32, int, unsigned int, int, u16);
1579:	static int put_master_ifindex(struct sk_buff *, struct net_device *);
6162:	static int rtnetlink_bind(struct net *, int);
6174:	static int rtnetlink_event(struct notifier_block *, unsigned long, void *);
6224:	static void rtnetlink_net_exit(struct net *);
6206:	static int rtnetlink_net_init(struct net *);
6157:	static void rtnetlink_rcv(struct sk_buff *);
6035:	static int rtnetlink_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
580:	static const struct rtnl_af_ops *rtnl_af_lookup(const int);
5121:	static int rtnl_bridge_dellink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4933:	static int rtnl_bridge_getlink(struct sk_buff *, struct netlink_callback *);
5008:	static int rtnl_bridge_notify(struct net_device *);
5044:	static int rtnl_bridge_setlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3168:	static int rtnl_dellink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3852:	static int rtnl_dellinkprop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3892:	static int rtnl_dump_all(struct sk_buff *, struct netlink_callback *);
2154:	static int rtnl_dump_ifinfo(struct sk_buff *, struct netlink_callback *);
4138:	static int rtnl_fdb_add(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4253:	static int rtnl_fdb_del(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4509:	static int rtnl_fdb_dump(struct sk_buff *, struct netlink_callback *);
4672:	static int rtnl_fdb_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4050:	static void rtnl_fdb_notify(struct net_device *, u8 *, u16, int, u16);
1743:	static int rtnl_fill_devlink_port(struct sk_buff *, const struct net_device *);
1767:	static int rtnl_fill_ifinfo(struct sk_buff *, struct net_device *, struct net *, int, u32, u32, u32, unsigned int, u32, u32, int *, int, int, gfp_t);
1637:	static int rtnl_fill_link_af(struct sk_buff *, const struct net_device *, u32);
1441:	static int rtnl_fill_link_ifmap(struct sk_buff *, struct net_device *);
1615:	static int rtnl_fill_link_netnsid(struct sk_buff *, const struct net_device *, struct net *, gfp_t);
1692:	static int rtnl_fill_prop_list(struct sk_buff *, const struct net_device *);
1714:	static int rtnl_fill_proto_down(struct sk_buff *, const struct net_device *);
1241:	static int rtnl_fill_stats(struct sk_buff *, struct net_device *);
5472:	static int rtnl_fill_statsinfo(struct sk_buff *, struct net_device *, int, u32, u32, u32, unsigned int, const struct rtnl_stats_dump_filters *, int *, int *, struct netlink_ext_ack *);
1411:	static int rtnl_fill_vf(struct sk_buff *, struct net_device *, u32);
1265:	static int rtnl_fill_vfinfo(struct sk_buff *, struct net_device *, int, struct nlattr *);
3690:	static int rtnl_getlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
644:	static bool rtnl_have_link_slave_info(const struct net_device *);
722:	static int rtnl_link_fill(struct sk_buff *, const struct net_device *);
2305:	static struct net *rtnl_link_get_net_capable(const struct sk_buff *, struct net *, struct nlattr **, int);
3798:	static int rtnl_linkprop(int, struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3627:	static int rtnl_newlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3846:	static int rtnl_newlinkprop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1187:	static int rtnl_phys_port_id_fill(struct sk_buff *, struct net_device *);
1205:	static int rtnl_phys_port_name_fill(struct sk_buff *, struct net_device *);
1223:	static int rtnl_phys_switch_id_fill(struct sk_buff *, struct net_device *);
1165:	static int rtnl_port_fill(struct sk_buff *, struct net_device *, u32);
208:	static int rtnl_register_internal(struct module *, int, int, rtnl_doit_func, rtnl_dumpit_func, unsigned int);
3079:	static int rtnl_setlink(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5863:	static int rtnl_stats_dump(struct sk_buff *, struct netlink_callback *);
5811:	static int rtnl_stats_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5753:	static int rtnl_stats_get_parse(const struct nlmsghdr *, u32, struct rtnl_stats_dump_filters *, struct netlink_ext_ack *);
5967:	static int rtnl_stats_set(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1505:	static int rtnl_xdp_fill(struct sk_buff *, struct net_device *);
856:	static void set_operstate(struct net_device *, unsigned char);
2368:	static int validate_linkmsg(struct net_device *, struct nlattr **, struct netlink_ext_ack *);

File net/core/scm.c:
116:	void __scm_destroy(struct scm_cookie *);
131:	int __scm_send(struct socket *, struct msghdr *, struct scm_cookie *);
213:	int put_cmsg(struct msghdr *, int, int, int, void *);
276:	void put_cmsg_scm_timestamping(struct msghdr *, struct scm_timestamping_internal *);
262:	void put_cmsg_scm_timestamping64(struct msghdr *, struct scm_timestamping_internal *);
297:	void scm_detach_fds(struct msghdr *, struct scm_cookie *);
349:	struct scm_fp_list *scm_fp_dup(struct scm_fp_list *);

File net/core/secure_seq.c:
149:	u64 secure_ipv4_port_ephemeral(__be32, __be32, __be16);
99:	u64 secure_ipv6_port_ephemeral(const __be32 *, const __be32 *, __be16);
136:	u32 secure_tcp_seq(__be32, __be32, __be16, __be16);
121:	u32 secure_tcp_ts_off(const struct net *, __be32, __be32);
76:	u32 secure_tcpv6_seq(const __be32 *, const __be32 *, __be16, __be16);
56:	u32 secure_tcpv6_ts_off(const struct net *, const __be32 *, const __be32 *);

File net/core/skbuff.c:
2301:	int ___pskb_trim(struct sk_buff *, unsigned int);
532:	struct sk_buff *__alloc_skb(unsigned int, gfp_t, int, int);
373:	struct sk_buff *__build_skb(void *, unsigned int);
1110:	void __consume_stateless_skb(struct sk_buff *);
928:	void __kfree_skb(struct sk_buff *);
1136:	void __kfree_skb_defer(struct sk_buff *);
222:	void *__napi_alloc_frag_align(unsigned int, unsigned int);
689:	struct sk_buff *__napi_alloc_skb(struct napi_struct *, unsigned int, gfp_t);
232:	void *__netdev_alloc_frag_align(unsigned int, unsigned int);
614:	struct sk_buff *__netdev_alloc_skb(struct net_device *, unsigned int, gfp_t);
1814:	struct sk_buff *__pskb_copy_fclone(struct sk_buff *, int, gfp_t, bool);
2432:	void *__pskb_pull_tail(struct sk_buff *, int);
3054:	__wsum __skb_checksum(const struct sk_buff *, int, int, __wsum, const struct skb_checksum_ops *);
3263:	__sum16 __skb_checksum_complete(struct sk_buff *);
3237:	__sum16 __skb_checksum_complete_head(struct sk_buff *, int);
6512:	struct skb_ext *__skb_ext_alloc(gfp_t);
6643:	void __skb_ext_del(struct sk_buff *, enum skb_ext_id);
6663:	void __skb_ext_put(struct skb_ext *);
6562:	void *__skb_ext_set(struct sk_buff *, enum skb_ext_id, struct skb_ext *);
2144:	int __skb_pad(struct sk_buff *, int, bool);
5010:	void __skb_tstamp_tx(struct sk_buff *, const struct sk_buff *, struct skb_shared_hwtstamps *, struct sock *, int);
1989:	int __skb_unclone_keeptruesize(struct sk_buff *, gfp_t);
5818:	int __skb_vlan_pop(struct sk_buff *, u16 *);
5442:	void __skb_warn_lro_forwarding(const struct sk_buff *);
1562:	void __skb_zcopy_downgrade_managed(struct sk_buff *);
1274:	struct sk_buff *alloc_skb_for_msg(struct sk_buff *);
6174:	struct sk_buff *alloc_skb_with_frags(unsigned long, unsigned long, int, int *, gfp_t);
392:	struct sk_buff *build_skb(void *, unsigned int);
411:	struct sk_buff *build_skb_around(struct sk_buff *, void *, unsigned int);
960:	void kfree_skb_list_reason(struct sk_buff *, enum skb_drop_reason);
5449:	void kfree_skb_partial(struct sk_buff *, bool);
945:	void kfree_skb_reason(struct sk_buff *, enum skb_drop_reason);
1312:	int mm_account_pinned_pages(struct mmpin *, size_t);
1342:	void mm_unaccount_pinned_pages(struct mmpin *);
1508:	void msg_zerocopy_callback(struct sk_buff *, struct ubuf_info *, bool);
1520:	void msg_zerocopy_put_abort(struct ubuf_info *, bool);
1388:	struct ubuf_info *msg_zerocopy_realloc(struct sock *, size_t, struct ubuf_info *);
462:	struct sk_buff *napi_build_skb(void *, unsigned int);
1154:	void napi_consume_skb(struct sk_buff *, int);
211:	void napi_get_frags_check(struct napi_struct *);
1142:	void napi_skb_free_stolen_head(struct sk_buff *);
1878:	int pskb_expand_head(struct sk_buff *, int, int, gfp_t);
6447:	struct sk_buff *pskb_extract(struct sk_buff *, int, int, gfp_t);
2192:	void *pskb_put(struct sk_buff *, struct sk_buff *, int);
2388:	int pskb_trim_rcsum_slow(struct sk_buff *, unsigned int);
3982:	void skb_abort_seq_read(struct skb_seq_state *);
765:	void skb_add_rx_frag(struct sk_buff *, int, struct page *, int, int, unsigned int);
3608:	void skb_append(struct sk_buff *, struct sk_buff *, struct sk_buff_head *);
4033:	int skb_append_pagefrags(struct sk_buff *, struct page *, int, size_t);
6696:	void skb_attempt_defer_free(struct sk_buff *);
3138:	__wsum skb_checksum(const struct sk_buff *, int, int, __wsum);
5334:	int skb_checksum_setup(struct sk_buff *, bool);
5409:	struct sk_buff *skb_checksum_trimmed(struct sk_buff *, unsigned int, __sum16 (*)(struct sk_buff *));
1695:	struct sk_buff *skb_clone(struct sk_buff *, gfp_t);
4923:	struct sk_buff *skb_clone_sk(struct sk_buff *);
775:	void skb_coalesce_rx_frag(struct sk_buff *, int, int, unsigned int);
4987:	void skb_complete_tx_timestamp(struct sk_buff *, struct skb_shared_hwtstamps *);
5068:	void skb_complete_wifi_ack(struct sk_buff *, bool);
6476:	void skb_condense(struct sk_buff *);
1775:	struct sk_buff *skb_copy(const struct sk_buff *, gfp_t);
3152:	__wsum skb_copy_and_csum_bits(const struct sk_buff *, int, u8 *, int);
3426:	void skb_copy_and_csum_dev(const struct sk_buff *, u8 *);
2573:	int skb_copy_bits(const struct sk_buff *, int, void *, int);
2090:	struct sk_buff *skb_copy_expand(const struct sk_buff *, int, int, gfp_t);
1741:	void skb_copy_header(struct sk_buff *, const struct sk_buff *);
1607:	int skb_copy_ubufs(struct sk_buff *, gfp_t);
4744:	int skb_cow_data(struct sk_buff *, int, struct sk_buff **);
3462:	struct sk_buff *skb_dequeue(struct sk_buff_head *);
3482:	struct sk_buff *skb_dequeue_tail(struct sk_buff_head *);
978:	void skb_dump(const char *, const struct sk_buff *, bool);
5803:	int skb_ensure_writable(struct sk_buff *, unsigned int);
5929:	int skb_eth_pop(struct sk_buff *);
5956:	int skb_eth_push(struct sk_buff *, const unsigned char *, const unsigned char *);
2033:	struct sk_buff *skb_expand_head(struct sk_buff *, unsigned int);
6590:	void *skb_ext_add(struct sk_buff *, enum skb_ext_id);
4015:	unsigned int skb_find_text(struct sk_buff *, unsigned int, unsigned int, struct ts_config *);
5730:	bool skb_gso_validate_mac_len(const struct sk_buff *, unsigned int);
5715:	bool skb_gso_validate_network_len(const struct sk_buff *, unsigned int);
1725:	void skb_headers_offset_update(struct sk_buff *, int);
4585:	void skb_init(void);
1305:	struct sk_buff *skb_morph(struct sk_buff *, struct sk_buff *);
6140:	int skb_mpls_dec_ttl(struct sk_buff *);
6065:	int skb_mpls_pop(struct sk_buff *, __be16, int, bool);
6012:	int skb_mpls_push(struct sk_buff *, __be32, __be16, int, bool);
6108:	int skb_mpls_update_lse(struct sk_buff *, __be32);
5106:	bool skb_partial_csum_set(struct sk_buff *, u16, u16);
3854:	void skb_prepare_seq_read(struct sk_buff *, unsigned int, unsigned int, struct skb_seq_state *);
2252:	void *skb_pull(struct sk_buff *, unsigned int);
2269:	void *skb_pull_data(struct sk_buff *, size_t);
4063:	void *skb_pull_rcsum(struct sk_buff *, unsigned int);
2232:	void *skb_push(struct sk_buff *, unsigned int);
2211:	void *skb_put(struct sk_buff *, unsigned int);
3547:	void skb_queue_head(struct sk_buff_head *, struct sk_buff *);
3502:	void skb_queue_purge(struct sk_buff_head *);
3568:	void skb_queue_tail(struct sk_buff_head *, struct sk_buff *);
3520:	unsigned int skb_rbtree_purge(struct rb_root *);
1970:	struct sk_buff *skb_realloc_headroom(struct sk_buff *, unsigned int);
898:	void skb_release_head_state(struct sk_buff *);
5571:	void skb_scrub_packet(struct sk_buff *, bool);
4183:	struct sk_buff *skb_segment(struct sk_buff *, netdev_features_t);
4087:	struct sk_buff *skb_segment_list(struct sk_buff *, netdev_features_t, unsigned int);
2958:	int skb_send_sock(struct sock *, struct sk_buff *, int, int);
2949:	int skb_send_sock_locked(struct sock *, struct sk_buff *, int, int);
3891:	unsigned int skb_seq_read(unsigned int, const u8 **, struct skb_seq_state *);
3729:	int skb_shift(struct sk_buff *, struct sk_buff *, int);
2810:	int skb_splice_bits(struct sk_buff *, struct sock *, unsigned int, struct pipe_inode_info *, unsigned int, unsigned int);
3686:	void skb_split(struct sk_buff *, struct sk_buff *, const u32);
2976:	int skb_store_bits(struct sk_buff *, int, const void *, int);
4686:	int skb_to_sgvec(struct sk_buff *, struct scatterlist *, int, int);
4718:	int skb_to_sgvec_nomark(struct sk_buff *, struct scatterlist *, int, int);
2291:	void skb_trim(struct sk_buff *, unsigned int);
5467:	bool skb_try_coalesce(struct sk_buff *, struct sk_buff *, bool *, int *);
5060:	void skb_tstamp_tx(struct sk_buff *, struct skb_shared_hwtstamps *);
1074:	void skb_tx_error(struct sk_buff *);
3588:	void skb_unlink(struct sk_buff *, struct sk_buff_head *);
5857:	int skb_vlan_pop(struct sk_buff *);
5890:	int skb_vlan_push(struct sk_buff *, __be16, u16);
5762:	struct sk_buff *skb_vlan_untag(struct sk_buff *);
3368:	int skb_zerocopy(struct sk_buff *, struct sk_buff *, int, int);
3330:	unsigned int skb_zerocopy_headlen(const struct sk_buff *);
1532:	int skb_zerocopy_iter_stream(struct sock *, struct sk_buff *, struct msghdr *, int, struct ubuf_info *);
321:	struct sk_buff *slab_build_skb(void *);
4884:	struct sk_buff *sock_dequeue_err_skb(struct sock *);
4856:	int sock_queue_err_skb(struct sock *, struct sk_buff *);
1186:	static void __copy_skb_header(struct sk_buff *, const struct sk_buff *);
438:	static struct sk_buff *__napi_build_skb(void *, unsigned int);
1237:	static struct sk_buff *__skb_clone(struct sk_buff *, struct sk_buff *);
2758:	static bool __skb_splice_bits(struct sk_buff *, struct pipe_inode_info *, unsigned int *, unsigned int *, struct splice_pipe_desc *, struct sock *);
4603:	static int __skb_to_sgvec(struct sk_buff *, struct scatterlist *, int, int, unsigned int);
2719:	static bool __splice_segment(struct page *, unsigned int, unsigned int, unsigned int *, unsigned int *, struct splice_pipe_desc *, bool, struct sock *, struct pipe_inode_info *);
868:	static void kfree_skbmem(struct sk_buff *);
6434:	static int pskb_carve(struct sk_buff *, const u32, gfp_t);
5147:	static __sum16 *skb_checksum_setup_ip(struct sk_buff *, int, unsigned int);
124:	static void skb_over_panic(struct sk_buff *, unsigned int, void *);
3706:	static int skb_prepare_for_shift(struct sk_buff *);
826:	static void skb_release_data(struct sk_buff *, enum skb_drop_reason);
3998:	static void skb_ts_finish(struct ts_config *, struct ts_state *);
3991:	static unsigned int skb_ts_get_next_block(unsigned int, const u8 **, struct ts_config *, struct ts_state *);
129:	static void skb_under_panic(struct sk_buff *, unsigned int, void *);
1572:	static int skb_zerocopy_clone(struct sk_buff *, struct sk_buff *, gfp_t);
4837:	static void sock_rmem_free(struct sk_buff *);
2655:	static void sock_spd_release(struct splice_pipe_desc *, unsigned int);
3304:	static __wsum warn_crc32c_csum_combine(__wsum, __wsum, int, int);
3296:	static __wsum warn_crc32c_csum_update(const void *, int, __wsum);

File net/core/skmsg.c:
26:	int sk_msg_alloc(struct sock *, struct sk_msg *, int, int);
86:	int sk_msg_clone(struct sock *, struct sk_msg *, struct sk_msg *, u32, u32);
216:	int sk_msg_free(struct sock *, struct sk_msg *);
210:	int sk_msg_free_nocharge(struct sock *, struct sk_msg *);
250:	void sk_msg_free_partial(struct sock *, struct sk_msg *, u32);
256:	void sk_msg_free_partial_nocharge(struct sock *, struct sk_msg *, u32);
489:	bool sk_msg_is_readable(struct sock *);
367:	int sk_msg_memcopy_from_iter(struct sock *, struct iov_iter *, struct sk_msg *, u32);
411:	int sk_msg_recvmsg(struct sock *, struct sk_psock *, struct msghdr *, int, int);
161:	void sk_msg_return(struct sock *, struct sk_msg *, int);
137:	void sk_msg_return_zero(struct sock *, struct sk_msg *, int);
262:	void sk_msg_trim(struct sock *, struct sk_msg *, int);
310:	int sk_msg_zerocopy_from_iter(struct sock *, struct iov_iter *, struct sk_msg *, u32);
839:	void sk_psock_drop(struct sock *, struct sk_psock *);
701:	struct sk_psock *sk_psock_init(struct sock *, int);
756:	struct sk_psock_link *sk_psock_link_pop(struct sk_psock *);
870:	int sk_psock_msg_verdict(struct sock *, struct sk_psock *, struct sk_msg *);
1218:	void sk_psock_start_verdict(struct sock *, struct sk_psock *);
806:	void sk_psock_stop(struct sk_psock *);
1228:	void sk_psock_stop_verdict(struct sock *, struct sk_psock *);
959:	int sk_psock_tls_strp_read(struct sk_psock *, struct sk_buff *);
222:	static void __sk_msg_free_partial(struct sock *, struct sk_msg *, u32, bool);
176:	static int sk_msg_free_elem(struct sock *, struct sk_msg *, u32, bool);
640:	static void sk_psock_backlog(struct work_struct *);
817:	static void sk_psock_destroy(struct work_struct *);
526:	static int sk_psock_skb_ingress_enqueue(struct sk_buff *, u32, u32, struct sk_psock *, struct sock *, struct sk_msg *);
597:	static int sk_psock_skb_ingress_self(struct sk_psock *, struct sk_buff *, u32, u32);
907:	static int sk_psock_skb_redirect(struct sk_psock *, struct sk_buff *);
1209:	static void sk_psock_verdict_data_ready(struct sock *);
1176:	static int sk_psock_verdict_recv(struct sock *, struct sk_buff *);
1042:	static void sk_psock_write_space(struct sock *);

File net/core/sock.c:
2894:	void __lock_sock(struct sock *);
3500:	bool __lock_sock_fast(struct sock *);
3222:	void __receive_sock(struct file *);
2912:	void __release_sock(struct sock *);
324:	int __sk_backlog_rcv(struct sock *, struct sk_buff *);
589:	struct dst_entry *__sk_dst_check(struct sock *, u32);
2945:	void __sk_flush_backlog(struct sock *);
2987:	int __sk_mem_raise_allocated(struct sock *, int, int, int);
3119:	void __sk_mem_reclaim(struct sock *, int);
3102:	void __sk_mem_reduce_allocated(struct sock *, int);
3083:	int __sk_mem_schedule(struct sock *, int, int);
541:	int __sk_receive_skb(struct sock *, struct sk_buff *, const int, unsigned int, bool);
2755:	int __sock_cmsg_send(struct sock *, struct cmsghdr *, struct sockcm_cookie *);
476:	int __sock_queue_rcv_skb(struct sock *, struct sk_buff *);
2464:	void __sock_wfree(struct sk_buff *);
3467:	void lock_sock_nested(struct sock *, int);
3876:	int proto_register(struct proto *, int);
3934:	void proto_unregister(struct proto *);
3481:	void release_sock(struct sock *);
2086:	struct sock *sk_alloc(struct net *, int, gfp_t, struct proto *, int);
4095:	bool sk_busy_loop_end(void *, unsigned long);
179:	bool sk_capable(const struct sock *, int);
307:	void sk_clear_memalloc(struct sock *);
2235:	struct sock *sk_clone_lock(const struct sock *, const gfp_t);
3668:	void sk_common_release(struct sock *);
2169:	void sk_destruct(struct sock *);
607:	struct dst_entry *sk_dst_check(struct sock *, u32);
343:	void sk_error_report(struct sock *);
2195:	void sk_free(struct sock *);
2366:	void sk_free_unlock_clone(struct sock *);
3705:	void sk_get_meminfo(const struct sock *, u32 *);
1593:	int sk_getsockopt(struct sock *, int, int, sockptr_t, sockptr_t);
756:	bool sk_mc_loop(struct sock *);
194:	bool sk_net_capable(const struct sock *, int);
162:	bool sk_ns_capable(const struct sock *, struct user_namespace *, int);
2883:	bool sk_page_frag_refill(struct sock *, struct page_frag *);
3360:	void sk_reset_timer(struct sock *, struct timer_list *, unsigned long);
3352:	void sk_send_sigurg(struct sock *);
299:	void sk_set_memalloc(struct sock *);
3127:	int sk_set_peek_off(struct sock *, int);
1087:	int sk_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
2389:	void sk_setup_caps(struct sock *, struct dst_entry *);
3368:	void sk_stop_timer(struct sock *, struct timer_list *);
3375:	void sk_stop_timer_sync(struct sock *, struct timer_list *);
2964:	int sk_wait_data(struct sock *, long *, const struct sk_buff *);
2513:	void skb_orphan_partial(struct sk_buff *);
2849:	bool skb_page_frag_refill(unsigned int, struct page_frag *, gfp_t);
2472:	void skb_set_owner_w(struct sk_buff *, struct sock *);
2711:	struct sk_buff *sock_alloc_send_pskb(struct sock *, unsigned long, unsigned long, int, int *, int);
4105:	int sock_bind_add(struct sock *, struct sockaddr *, int);
653:	int sock_bindtoindex(struct sock *, int, bool);
2798:	int sock_cmsg_send(struct sock *, struct msghdr *, struct sockcm_cookie *);
3631:	int sock_common_getsockopt(struct socket *, int, int, char *, int *);
3641:	int sock_common_recvmsg(struct socket *, struct msghdr *, size_t, int);
3658:	int sock_common_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
390:	int sock_copy_user_timeval(struct __kernel_sock_timeval *, sockptr_t, int, bool);
3290:	void sock_def_readable(struct sock *);
2542:	void sock_efree(struct sk_buff *);
3571:	void sock_enable_timestamp(struct sock *, enum sock_flags);
832:	void sock_enable_timestamps(struct sock *);
359:	int sock_get_timeout(long, void *, bool);
1961:	int sock_getsockopt(struct socket *, int, int, char *, int *);
3532:	int sock_gettstamp(struct socket *, void *, bool, bool);
2571:	unsigned long sock_i_ino(struct sock *);
2560:	kuid_t sock_i_uid(struct sock *);
3382:	void sock_init_data(struct socket *, struct sock *);
3735:	int sock_inuse_get(struct net *);
2667:	void sock_kfree_s(struct sock *, void *, int);
2631:	void *sock_kmalloc(struct sock *, int, gfp_t);
2673:	void sock_kzfree_s(struct sock *, void *, int);
3949:	int sock_load_diag_module(int, int);
3160:	int sock_no_accept(struct socket *, struct socket *, int, bool);
3141:	int sock_no_bind(struct socket *, struct sockaddr *, int);
3147:	int sock_no_connect(struct socket *, struct sockaddr *, int, int);
3167:	int sock_no_getname(struct socket *, struct sockaddr *, int);
3174:	int sock_no_ioctl(struct socket *, unsigned int, unsigned long);
791:	void sock_no_linger(struct sock *);
3180:	int sock_no_listen(struct socket *, int);
3211:	int sock_no_mmap(struct file *, struct socket *, struct vm_area_struct *);
3204:	int sock_no_recvmsg(struct socket *, struct msghdr *, size_t, int);
3192:	int sock_no_sendmsg(struct socket *, struct msghdr *, size_t);
3198:	int sock_no_sendmsg_locked(struct sock *, struct msghdr *, size_t);
3233:	ssize_t sock_no_sendpage(struct socket *, struct page *, int, size_t, int);
3247:	ssize_t sock_no_sendpage_locked(struct sock *, struct page *, int, size_t, int);
3186:	int sock_no_shutdown(struct socket *, int);
3154:	int sock_no_socketpair(struct socket *, struct socket *);
2608:	struct sk_buff *sock_omalloc(struct sock *, unsigned long, gfp_t);
2552:	void sock_pfree(struct sk_buff *);
3723:	int sock_prot_inuse_get(struct net *, struct proto *);
511:	int sock_queue_rcv_skb_reason(struct sock *, struct sk_buff *, enum skb_drop_reason *);
3588:	int sock_recv_errqueue(struct sock *, struct msghdr *, int, int, int);
2528:	void sock_rfree(struct sk_buff *);
945:	void sock_set_keepalive(struct sock *);
992:	void sock_set_mark(struct sock *, u32);
800:	void sock_set_priority(struct sock *, u32);
976:	void sock_set_rcvbuf(struct sock *, int);
775:	void sock_set_reuseaddr(struct sock *);
783:	void sock_set_reuseport(struct sock *);
808:	void sock_set_sndtimeo(struct sock *, s64);
840:	void sock_set_timestamp(struct sock *, int, bool);
895:	int sock_set_timestamping(struct sock *, int, struct so_timestamping);
1546:	int sock_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
2426:	void sock_wfree(struct sk_buff *);
2585:	struct sk_buff *sock_wmalloc(struct sock *, unsigned long, int, gfp_t);
1076:	bool sockopt_capable(int);
1048:	void sockopt_lock_sock(struct sock *);
1070:	bool sockopt_ns_capable(struct user_namespace *, int);
1061:	void sockopt_release_sock(struct sock *);
2127:	static void __sk_destruct(struct callback_head *);
2184:	static void __sk_free(struct sock *);
984:	static void __sock_set_mark(struct sock *, u32);
1565:	static void cred_to_ucred(struct pid *, const struct cred *, struct ucred *);
1578:	static int groups_to_user(sockptr_t, const struct group_info *);
3765:	static int net_inuse_init(void);
4074:	static void proto_exit_net(struct net *);
4085:	static int proto_init(void);
4065:	static int proto_init_net(struct net *);
3980:	static void *proto_seq_next(struct seq_file *, void *, loff_t *);
4040:	static int proto_seq_show(struct seq_file *, void *);
3973:	static void *proto_seq_start(struct seq_file *, loff_t *);
3985:	static void proto_seq_stop(struct seq_file *, void *);
1554:	static const struct cred *sk_get_peer_cred(struct sock *);
3348:	static void sock_def_destruct(struct sock *);
3278:	static void sock_def_error_report(struct sock *);
3267:	static void sock_def_wakeup(struct sock *);
3303:	static void sock_def_write_space(struct sock *);
3755:	static void sock_inuse_exit_net(struct net *);
3747:	static int sock_inuse_init_net(struct net *);
2601:	static void sock_ofree(struct sk_buff *);
1000:	static void sock_release_reserved_memory(struct sock *, int);
1010:	static int sock_reserve_memory(struct sock *, int);
423:	static int sock_set_timeout(long *, sockptr_t, int, bool);

File net/core/sock_diag.c:
26:	u64 __sock_gen_cookie(struct sock *);
157:	void sock_diag_broadcast_destroy(struct sock *);
41:	int sock_diag_check_cookie(struct sock *, const __u32 *);
301:	int sock_diag_destroy(struct sock *, int);
75:	int sock_diag_put_filterinfo(bool, struct sock *, struct sk_buff *, int);
65:	int sock_diag_put_meminfo(struct sock *, struct sk_buff *, int);
185:	int sock_diag_register(const struct sock_diag_handler *);
169:	void sock_diag_register_inet_compat(int (*)(struct sk_buff *, struct nlmsghdr *));
56:	void sock_diag_save_cookie(struct sock *, __u32 *);
203:	void sock_diag_unregister(const struct sock_diag_handler *);
177:	void sock_diag_unregister_inet_compat(int (*)(struct sk_buff *, struct nlmsghdr *));
326:	static void diag_net_exit(struct net *);
313:	static int diag_net_init(struct net *);
284:	static int sock_diag_bind(struct net *, int);
125:	static void sock_diag_broadcast_destroy_work(struct work_struct *);
337:	static int sock_diag_init(void);
277:	static void sock_diag_rcv(struct sk_buff *);
248:	static int sock_diag_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);

File net/core/sock_map.c:
704:	int bpf_iter_sockmap(struct bpf_iter_meta *, struct bpf_map *, void *, struct sock *);
1256:	u64 bpf_msg_redirect_hash(u64, u64, u64, u64, u64);
664:	u64 bpf_msg_redirect_map(u64, u64, u64, u64, u64);
1230:	u64 bpf_sk_redirect_hash(u64, u64, u64, u64, u64);
638:	u64 bpf_sk_redirect_map(u64, u64, u64, u64, u64);
1208:	u64 bpf_sock_hash_update(u64, u64, u64, u64, u64);
615:	u64 bpf_sock_map_update(u64, u64, u64, u64, u64);
1488:	int sock_map_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
1609:	void sock_map_close(struct sock *, long);
1585:	void sock_map_destroy(struct sock *);
62:	int sock_map_get_from_fd(const union bpf_attr *, struct bpf_prog *);
81:	int sock_map_prog_detach(const union bpf_attr *, enum bpf_prog_type);
1563:	void sock_map_unhash(struct sock *);
549:	int sock_map_update_elem_sys(struct bpf_map *, void *, void *, u64);
1690:	static int bpf_sockmap_iter_init(void);
1074:	static struct bpf_map *sock_hash_alloc(union bpf_attr *);
845:	static u32 sock_hash_bucket_hash(const void *, u32);
919:	static int sock_hash_delete_elem(struct bpf_map *, void *);
1393:	static void sock_hash_fini_seq_private(void *);
1124:	static void sock_hash_free(struct bpf_map *);
1034:	static int sock_hash_get_next_key(struct bpf_map *, void *, void *);
1382:	static int sock_hash_init_seq_private(void *, struct bpf_iter_aux_info *);
1191:	static void *sock_hash_lookup(struct bpf_map *, void *);
1176:	static void *sock_hash_lookup_sys(struct bpf_map *, void *);
1203:	static void sock_hash_release_progs(struct bpf_map *);
1332:	static void *sock_hash_seq_next(struct seq_file *, void *, loff_t *);
1341:	static int sock_hash_seq_show(struct seq_file *, void *);
1319:	static void *sock_hash_seq_start(struct seq_file *, loff_t *);
1365:	static void sock_hash_seq_stop(struct seq_file *, void *);
969:	static int sock_hash_update_common(struct bpf_map *, void *, struct sock *, u64);
31:	static struct bpf_map *sock_map_alloc(union bpf_attr *);
440:	static int sock_map_delete_elem(struct bpf_map *, void *);
793:	static void sock_map_fini_seq_private(void *);
336:	static void sock_map_free(struct bpf_map *);
453:	static int sock_map_get_next_key(struct bpf_map *, void *, void *);
783:	static int sock_map_init_seq_private(void *, struct bpf_iter_aux_info *);
1639:	static int sock_map_iter_attach_target(struct bpf_prog *, union bpf_iter_link_info *, struct bpf_iter_aux_info *);
1670:	static void sock_map_iter_detach_target(struct bpf_iter_aux_info *);
217:	static int sock_map_link(struct bpf_map *, struct sock *);
385:	static void *sock_map_lookup(struct bpf_map *, void *);
397:	static void *sock_map_lookup_sys(struct bpf_map *, void *);
1471:	static int sock_map_prog_update(struct bpf_map *, struct bpf_prog *, struct bpf_prog *, u32);
369:	static void sock_map_release_progs(struct bpf_map *);
1553:	static void sock_map_remove_links(struct sock *, struct sk_psock *);
732:	static void *sock_map_seq_next(struct seq_file *, void *, loff_t *);
743:	static int sock_map_seq_show(struct seq_file *, void *);
719:	static void *sock_map_seq_start(struct seq_file *, loff_t *);
766:	static void sock_map_seq_stop(struct seq_file *, void *);
179:	static void sock_map_unref(struct sock *, void *);
468:	static int sock_map_update_common(struct bpf_map *, u32, struct sock *, u64);
590:	static int sock_map_update_elem(struct bpf_map *, void *, void *, u64);

File net/core/sock_reuseport.c:
321:	int reuseport_add_sock(struct sock *, struct sock *, bool);
189:	int reuseport_alloc(struct sock *, bool);
684:	int reuseport_attach_prog(struct sock *, struct bpf_prog *);
716:	int reuseport_detach_prog(struct sock *);
428:	void reuseport_detach_sock(struct sock *);
24:	void reuseport_has_conns_set(struct sock *);
621:	struct sock *reuseport_migrate_sock(struct sock *, struct sock *, struct sk_buff *);
569:	struct sock *reuseport_select_sock(struct sock *, u32, struct sk_buff *, int);
463:	void reuseport_stop_listen_sock(struct sock *);
64:	void reuseport_update_incoming_cpu(struct sock *, int);
303:	static void reuseport_free_rcu(struct callback_head *);
247:	static struct sock_reuseport *reuseport_grow(struct sock_reuseport *);
369:	static int reuseport_resurrect(struct sock *, struct sock_reuseport *, struct sock_reuseport *, bool);

File net/core/stream.c:
184:	int sk_stream_error(struct sock *, int, int);
194:	void sk_stream_kill_queues(struct sock *);
96:	void sk_stream_wait_close(struct sock *, long);
56:	int sk_stream_wait_connect(struct sock *, long *);
118:	int sk_stream_wait_memory(struct sock *, long *);
30:	void sk_stream_write_space(struct sock *);

File net/core/sysctl_net_core.c:
621:	static int fb_tunnels_only_for_init_net_sysctl_setup(char *);
118:	static int flow_limit_cpu_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
192:	static int flow_limit_table_len_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
233:	static int proc_do_dev_weight(struct ctl_table *, int, void *, size_t *, loff_t *);
251:	static int proc_do_rss_key(struct ctl_table *, int, void *, size_t *, loff_t *);
49:	static int rps_sock_flow_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
214:	static int set_default_qdisc(struct ctl_table *, int, void *, size_t *, loff_t *);
681:	static int sysctl_core_init(void);
666:	static void sysctl_core_net_exit(struct net *);
634:	static int sysctl_core_net_init(struct net *);

File net/core/tso.c:
46:	void tso_build_data(const struct sk_buff *, struct tso_t *, int);
8:	void tso_build_hdr(const struct sk_buff *, char *, struct tso_t *, int, bool);
64:	int tso_start(struct sk_buff *, struct tso_t *);

File net/core/utils.c:
118:	int in4_pton(const char *, int, u8 *, int, const char **);
184:	int in6_pton(const char *, int, u8 *, int, const char **);
50:	__be32 in_aton(const char *);
402:	bool inet_addr_is_any(struct sockaddr *);
458:	void inet_proto_csum_replace16(__sum16 *, struct sk_buff *, const __be32 *, const __be32 *, bool);
425:	void inet_proto_csum_replace4(__sum16 *, struct sk_buff *, __be32, __be32, bool);
475:	void inet_proto_csum_replace_by_diff(__sum16 *, struct sk_buff *, __wsum, bool);
369:	int inet_pton_with_scope(struct net *, __kernel_sa_family_t, const char *, const char *, struct __kernel_sockaddr_storage *);
38:	int net_ratelimit(void);
320:	static int inet6_pton(struct net *, const char *, u16, struct __kernel_sockaddr_storage *);

File net/core/xdp.c:
614:	struct sk_buff *__xdp_build_skb_from_frame(struct xdp_frame *, struct sk_buff *, struct net_device *);
533:	void __xdp_release_frame(void *, struct xdp_mem_info *);
375:	void __xdp_return(void *, struct xdp_mem_info *, bool, struct xdp_buff *);
165:	int __xdp_rxq_info_reg(struct xdp_rxq_info *, struct net_device *, u32, unsigned int, u32);
603:	int xdp_alloc_skb_bulk(void **, int, gfp_t);
547:	void xdp_attachment_setup(struct xdp_attachment_info *, struct netdev_bpf *);
670:	struct sk_buff *xdp_build_skb_from_frame(struct xdp_frame *, struct net_device *);
557:	struct xdp_frame *xdp_convert_zc_to_xdp_frame(struct xdp_buff *);
456:	void xdp_flush_frame_bulk(struct xdp_frame_bulk *);
336:	int xdp_reg_mem_model(struct xdp_mem_info *, enum xdp_mem_type, void *);
513:	void xdp_return_buff(struct xdp_buff *);
408:	void xdp_return_frame(struct xdp_frame *);
470:	void xdp_return_frame_bulk(struct xdp_frame *, struct xdp_frame_bulk *);
427:	void xdp_return_frame_rx_napi(struct xdp_frame *);
202:	bool xdp_rxq_info_is_reg(struct xdp_rxq_info *);
348:	int xdp_rxq_info_reg_mem_model(struct xdp_rxq_info *, enum xdp_mem_type, void *);
146:	void xdp_rxq_info_unreg(struct xdp_rxq_info *);
135:	void xdp_rxq_info_unreg_mem_model(struct xdp_rxq_info *);
196:	void xdp_rxq_info_unused(struct xdp_rxq_info *);
113:	void xdp_unreg_mem_model(struct xdp_mem_info *);
597:	void xdp_warn(const char *, const char *, const int);
685:	struct xdp_frame *xdpf_clone(struct xdp_frame *);
69:	static void __xdp_mem_allocator_rcu_free(struct callback_head *);
270:	static struct xdp_mem_allocator *__xdp_reg_mem_model(struct xdp_mem_info *, enum xdp_mem_type, void *);
89:	static void mem_allocator_disconnect(void *);
48:	static int xdp_mem_id_cmp(struct rhashtable_compare_arg *, const void *);
36:	static u32 xdp_mem_id_hashfn(const void *, u32, u32);

File net/devres.c:
21:	struct net_device *devm_alloc_etherdev_mqs(struct device *, int, unsigned int, unsigned int);
67:	int devm_register_netdev(struct device *, struct net_device *);
14:	static void devm_free_netdev(struct device *, void *);
42:	static void devm_unregister_netdev(struct device *, void *);
49:	static int netdev_devres_match(struct device *, void *, void *);

File net/dns_resolver/dns_key.c:
242:	static bool dns_resolver_cmp(const struct key *, const struct key_match_data *);
287:	static void dns_resolver_describe(const struct key *, struct seq_file *);
229:	static void dns_resolver_free_preparse(struct key_preparsed_payload *);
277:	static int dns_resolver_match_preparse(struct key_match_data *);
92:	static int dns_resolver_preparse(struct key_preparsed_payload *);
304:	static long dns_resolver_read(const struct key *, char *, size_t);
375:	static void exit_dns_resolver(void);
328:	static int init_dns_resolver(void);

File net/dns_resolver/dns_query.c:
74:	int dns_query(struct net *, const char *, const char *, size_t, const char *, char **, time64_t *, bool);

File net/ethernet/eth.c:
391:	struct net_device *alloc_etherdev_mqs(int, unsigned int, unsigned int);
494:	unsigned char *arch_get_platform_mac_address(void);
640:	int device_get_ethdev_address(struct device *, struct net_device *);
626:	int device_get_mac_address(struct device *, char *);
304:	void eth_commit_mac_addr_change(struct net_device *, void *);
125:	u32 eth_get_headlen(const struct net_device *, const void *, u32);
456:	int eth_gro_complete(struct sk_buff *, int);
405:	struct sk_buff *eth_gro_receive(struct list_head *, struct sk_buff *);
79:	int eth_header(struct sk_buff *, struct net_device *, unsigned short, const void *, const void *, unsigned int);
229:	int eth_header_cache(const struct neighbour *, struct hh_cache *, __be16);
261:	void eth_header_cache_update(struct hh_cache *, const struct net_device *, const unsigned char *);
213:	int eth_header_parse(const struct sk_buff *, unsigned char *);
274:	__be16 eth_header_parse_protocol(const struct sk_buff *);
322:	int eth_mac_addr(struct net_device *, void *);
499:	int eth_platform_get_mac_address(struct device *, u8 *);
287:	int eth_prepare_mac_addr_change(struct net_device *, void *);
155:	__be16 eth_type_trans(struct sk_buff *, struct net_device *);
334:	int eth_validate_addr(struct net_device *);
357:	void ether_setup(struct net_device *);
610:	int fwnode_get_mac_address(struct fwnode_handle *, char *);
547:	int nvmem_get_mac_address(struct device *, void *);
526:	int platform_get_ethdev_address(struct device *, struct net_device *);
399:	ssize_t sysfs_format_mac(char *, const unsigned char *, int);
485:	static int eth_offload_init(void);

File net/ethtool/bitset.c:
171:	int ethnl_bitset32_size(const u32 *, const u32 *, unsigned int, ethnl_string_array_t, bool);
328:	int ethnl_bitset_is_compact(const struct nlattr *, bool *);
808:	int ethnl_bitset_size(const unsigned long *, const unsigned long *, unsigned int, ethnl_string_array_t, bool);
604:	int ethnl_parse_bitset(unsigned long *, unsigned long *, unsigned int, const struct nlattr *, ethnl_string_array_t, struct netlink_ext_ack *);
816:	int ethnl_put_bitset(struct sk_buff *, int, const unsigned long *, const unsigned long *, unsigned int, ethnl_string_array_t, bool);
232:	int ethnl_put_bitset32(struct sk_buff *, int, const u32 *, const u32 *, unsigned int, ethnl_string_array_t, bool);
825:	int ethnl_update_bitset(unsigned long *, unsigned int, const struct nlattr *, ethnl_string_array_t, struct netlink_ext_ack *, bool *);
552:	int ethnl_update_bitset32(u32 *, unsigned int, const struct nlattr *, ethnl_string_array_t, struct netlink_ext_ack *, bool *);
480:	static int ethnl_compact_sanity_checks(unsigned int, const struct nlattr *, struct nlattr **, struct netlink_ext_ack *);
377:	static int ethnl_parse_bit(unsigned int *, bool *, unsigned int, const struct nlattr *, bool, ethnl_string_array_t, struct netlink_ext_ack *);

File net/ethtool/cabletest.c:
56:	int ethnl_act_cable_test(struct sk_buff *, struct genl_info *);
307:	int ethnl_act_cable_test_tdr(struct sk_buff *, struct genl_info *);
103:	int ethnl_cable_test_alloc(struct phy_device *, u8);
360:	int ethnl_cable_test_amplitude(struct phy_device *, u8, s16);
186:	int ethnl_cable_test_fault_length(struct phy_device *, u8, u32);
153:	void ethnl_cable_test_finished(struct phy_device *);
146:	void ethnl_cable_test_free(struct phy_device *);
385:	int ethnl_cable_test_pulse(struct phy_device *, u16);
163:	int ethnl_cable_test_result(struct phy_device *, u8, u8);
406:	int ethnl_cable_test_step(struct phy_device *, u32, u32, u32);
19:	static int ethnl_cable_test_started(struct phy_device *, u8);

File net/ethtool/channels.c:
112:	int ethnl_set_channels(struct sk_buff *, struct genl_info *);
57:	static int channels_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
25:	static int channels_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
44:	static int channels_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/coalesce.c:
232:	int ethnl_set_coalesce(struct sk_buff *, struct genl_info *);
127:	static int coalesce_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
60:	static int coalesce_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
119:	static bool coalesce_put_bool(struct sk_buff *, u16, u32, u32);
82:	static int coalesce_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/common.c:
508:	int __ethtool_get_link(struct net_device *);
624:	int __ethtool_get_ts_info(struct net_device *, struct ethtool_ts_info *);
464:	bool convert_legacy_settings_to_link_ksettings(struct ethtool_link_ksettings *, const struct ethtool_cmd *);
613:	int ethtool_check_ops(const struct ethtool_ops *);
582:	int ethtool_get_max_rxfh_channel(struct net_device *, u32 *);
531:	int ethtool_get_max_rxnfc_channel(struct net_device *, u64 *);
644:	int ethtool_get_phc_vclocks(struct net_device *, int **);
667:	void ethtool_params_from_link_mode(struct ethtool_link_ksettings *, enum ethtool_link_mode_bit_indices);
658:	void ethtool_set_ethtool_phy_ops(const struct ethtool_phy_ops *);

File net/ethtool/debug.c:
86:	int ethnl_set_debug(struct sk_buff *, struct genl_info *);
54:	static int debug_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int debug_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
44:	static int debug_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/eee.c:
134:	int ethnl_set_eee(struct sk_buff *, struct genl_info *);
81:	static int eee_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
27:	static int eee_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
46:	static int eee_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/eeprom.c:
209:	static void eeprom_cleanup_data(struct ethnl_reply_data *);
200:	static int eeprom_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
147:	static int eeprom_parse_request(struct ethnl_req_info *, struct nlattr **, struct netlink_ext_ack *);
104:	static int eeprom_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
192:	static int eeprom_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/features.c:
210:	int ethnl_set_features(struct sk_buff *, struct genl_info *);
86:	static int features_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
36:	static int features_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
54:	static int features_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/fec.c:
240:	int ethnl_set_fec(struct sk_buff *, struct genl_info *);
194:	static int fec_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
93:	static int fec_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
142:	static int fec_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);
72:	static void fec_stats_recalc(struct fec_stat_grp *, struct ethtool_fec_stat *);

File net/ethtool/ioctl.c:
432:	int __ethtool_get_link_ksettings(struct net_device *, struct ethtool_link_ksettings *);
3054:	int dev_ethtool(struct net *, struct ifreq *, void *);
353:	void ethtool_convert_legacy_u32_to_link_mode(unsigned long *, u32);
362:	bool ethtool_convert_link_mode_to_legacy_u32(u32 *, const unsigned long *);
2397:	int ethtool_get_module_eeprom_call(struct net_device *, struct ethtool_eeprom *, u8 *);
2360:	int ethtool_get_module_info_call(struct net_device *, struct ethtool_modinfo *);
338:	void ethtool_intersect_link_masks(struct ethtool_link_ksettings *, struct ethtool_link_ksettings *);
58:	u32 ethtool_op_get_link(struct net_device *);
64:	int ethtool_op_get_ts_info(struct net_device *, struct ethtool_ts_info *);
3127:	struct ethtool_rx_flow_rule *ethtool_rx_flow_rule_create(const struct ethtool_rx_flow_spec_input *);
3373:	void ethtool_rx_flow_rule_destroy(struct ethtool_rx_flow_rule *);
1969:	void ethtool_sprintf(u8 **, const char *, ...);
617:	int ethtool_virtdev_set_link_ksettings(struct net_device *, const struct ethtool_link_ksettings *, u32 *, u8 *);
471:	bool ethtool_virtdev_validate_cmd(const struct ethtool_link_ksettings *);
1048:	void netdev_rss_key_fill(void *, size_t);
306:	static int __ethtool_set_flags(struct net_device *, u32);
1029:	static int ethtool_copy_validate_indir(u32 *, void *, struct ethtool_rxnfc *, u32);
1517:	static int ethtool_get_any_eeprom(struct net_device *, void *, int (*)(struct net_device *, struct ethtool_eeprom *, u8 *), u32);
1779:	static int ethtool_get_channels(struct net_device *, void *);
1632:	static int ethtool_get_coalesce(struct net_device *, void *);
706:	static int ethtool_get_drvinfo(struct net_device *, struct ethtool_devlink_compat *);
2282:	static int ethtool_get_dump_data(struct net_device *, void *);
2260:	static int ethtool_get_dump_flag(struct net_device *, void *);
1457:	static int ethtool_get_eee(struct net_device *, char *);
1572:	static int ethtool_get_eeprom(struct net_device *, void *);
77:	static int ethtool_get_features(struct net_device *, void *);
2713:	static int ethtool_get_fecparam(struct net_device *, void *);
1503:	static int ethtool_get_link(struct net_device *, char *);
516:	static int ethtool_get_link_ksettings(struct net_device *, void *);
2415:	static int ethtool_get_module_eeprom(struct net_device *, void *);
2378:	static int ethtool_get_module_info(struct net_device *, void *);
244:	static int ethtool_get_one_feature(struct net_device *, char *, u32);
1855:	static int ethtool_get_pauseparam(struct net_device *, void *);
2508:	static int ethtool_get_per_queue_coalesce(struct net_device *, void *, struct ethtool_per_queue_op *);
2172:	static int ethtool_get_perm_addr(struct net_device *, void *);
2139:	static int ethtool_get_phy_stats(struct net_device *, void *);
1358:	static int ethtool_get_regs(struct net_device *, char *);
1735:	static int ethtool_get_ringparam(struct net_device *, void *);
1166:	static int ethtool_get_rxfh(struct net_device *, void *);
1056:	static int ethtool_get_rxfh_indir(struct net_device *, void *);
968:	static int ethtool_get_rxnfc(struct net_device *, u32, void *);
647:	static int ethtool_get_settings(struct net_device *, void *);
766:	static int ethtool_get_sset_info(struct net_device *, void *);
2038:	static int ethtool_get_stats(struct net_device *, void *);
1926:	static int ethtool_get_strings(struct net_device *, void *);
2345:	static int ethtool_get_ts_info(struct net_device *, void *);
2452:	static int ethtool_get_tunable(struct net_device *, void *);
2191:	static int ethtool_get_value(struct net_device *, char *, u32, u32 (*)(struct net_device *));
1420:	static int ethtool_get_wol(struct net_device *, char *);
1981:	static int ethtool_phys_id(struct net_device *, void *);
1400:	static int ethtool_reset(struct net_device *, char *);
909:	static int ethtool_rxnfc_copy_to_user(void *, const struct ethtool_rxnfc *, size_t, const u32 *);
1886:	static int ethtool_self_test(struct net_device *, char *);
1794:	static int ethtool_set_channels(struct net_device *, void *);
1707:	static int ethtool_set_coalesce(struct net_device *, void *);
2246:	static int ethtool_set_dump(struct net_device *, void *);
1478:	static int ethtool_set_eee(struct net_device *, char *);
1584:	static int ethtool_set_eeprom(struct net_device *, void *);
116:	static int ethtool_set_features(struct net_device *, void *);
2733:	static int ethtool_set_fecparam(struct net_device *, void *);
573:	static int ethtool_set_link_ksettings(struct net_device *, void *);
258:	static int ethtool_set_one_feature(struct net_device *, void *, u32);
1869:	static int ethtool_set_pauseparam(struct net_device *, void *);
2600:	static int ethtool_set_per_queue(struct net_device *, void *, u32);
2539:	static int ethtool_set_per_queue_coalesce(struct net_device *, void *, struct ethtool_per_queue_op *);
1751:	static int ethtool_set_ringparam(struct net_device *, void *);
1245:	static int ethtool_set_rxfh(struct net_device *, void *);
1104:	static int ethtool_set_rxfh_indir(struct net_device *, void *);
936:	static int ethtool_set_rxnfc(struct net_device *, u32, void *);
680:	static int ethtool_set_settings(struct net_device *, void *);
2483:	static int ethtool_set_tunable(struct net_device *, void *);
2221:	static int ethtool_set_value(struct net_device *, char *, int (*)(struct net_device *, u32));
2206:	static int ethtool_set_value_void(struct net_device *, char *, void (*)(struct net_device *, u32));
1436:	static int ethtool_set_wol(struct net_device *, char *);
2642:	static int get_phy_tunable(struct net_device *, void *);
2681:	static int set_phy_tunable(struct net_device *, void *);

File net/ethtool/linkinfo.c:
98:	int ethnl_set_linkinfo(struct sk_buff *, struct genl_info *);
56:	static int linkinfo_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int linkinfo_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
45:	static int linkinfo_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/linkmodes.c:
313:	int ethnl_set_linkmodes(struct sk_buff *, struct genl_info *);
100:	static int linkmodes_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
28:	static int linkmodes_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
60:	static int linkmodes_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/linkstate.c:
157:	static int linkstate_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
82:	static int linkstate_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
130:	static int linkstate_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/module.c:
145:	int ethnl_set_module(struct sk_buff *, struct genl_info *);
76:	static int module_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
39:	static int module_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
61:	static int module_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/netlink.c:
234:	void *ethnl_bcastmsg_put(struct sk_buff *, u8);
228:	void *ethnl_dump_put(struct sk_buff *, struct netlink_callback *, u8);
161:	int ethnl_fill_reply_header(struct sk_buff *, struct net_device *, u16);
240:	int ethnl_multicast(struct sk_buff *, struct net_device *);
33:	int ethnl_ops_begin(struct net_device *);
63:	void ethnl_ops_complete(struct net_device *);
88:	int ethnl_parse_header_dev_get(struct ethnl_req_info *, const struct nlattr *, struct net *, struct netlink_ext_ack *, bool);
198:	struct sk_buff *ethnl_reply_init(size_t, struct net_device *, u8, u16, struct genl_info *, void **);
701:	void ethtool_notify(struct net_device *, unsigned int, const void *);
352:	static int ethnl_default_doit(struct sk_buff *, struct genl_info *);
581:	static int ethnl_default_done(struct netlink_callback *);
468:	static int ethnl_default_dumpit(struct sk_buff *, struct netlink_callback *);
609:	static void ethnl_default_notify(struct net_device *, unsigned int, const void *);
526:	static int ethnl_default_start(struct netlink_callback *);
1070:	static int ethnl_init(void);
723:	static int ethnl_netdev_event(struct notifier_block *, unsigned long, void *);

File net/ethtool/pause.c:
139:	int ethnl_set_pause(struct sk_buff *, struct genl_info *);
98:	static int pause_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int pause_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
50:	static int pause_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/phc_vclocks.c:
75:	static void phc_vclocks_cleanup_data(struct ethnl_reply_data *);
57:	static int phc_vclocks_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
25:	static int phc_vclocks_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
42:	static int phc_vclocks_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/privflags.c:
142:	int ethnl_set_privflags(struct sk_buff *, struct genl_info *);
26:	static int ethnl_get_priv_flags_info(struct net_device *, unsigned int *, const char (**)[32]);
114:	static void privflags_cleanup_data(struct ethnl_reply_data *);
100:	static int privflags_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
58:	static int privflags_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
88:	static int privflags_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/pse-pd.c:
157:	int ethnl_set_pse(struct sk_buff *, struct genl_info *);
89:	static int pse_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
55:	static int pse_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
74:	static int pse_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/rings.c:
131:	int ethnl_set_rings(struct sk_buff *, struct genl_info *);
62:	static int rings_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
24:	static int rings_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
45:	static int rings_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/rss.c:
137:	static void rss_cleanup_data(struct ethnl_reply_data *);
120:	static int rss_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
32:	static int rss_parse_request(struct ethnl_req_info *, struct nlattr **, struct netlink_ext_ack *);
44:	static int rss_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
106:	static int rss_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/stats.c:
181:	static int stat_put(struct sk_buff *, u16, u64);
374:	static int stats_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
84:	static int stats_parse_request(struct ethnl_req_info *, struct nlattr **, struct netlink_ext_ack *);
106:	static int stats_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
275:	static int stats_put_ctrl_stats(struct sk_buff *, const struct stats_reply_data *);
224:	static int stats_put_mac_stats(struct sk_buff *, const struct stats_reply_data *);
215:	static int stats_put_phy_stats(struct sk_buff *, const struct stats_reply_data *);
288:	static int stats_put_rmon_hist(struct sk_buff *, u32, const u64 *, const struct ethtool_rmon_hist_range *);
325:	static int stats_put_rmon_stats(struct sk_buff *, const struct stats_reply_data *);
347:	static int stats_put_stats(struct sk_buff *, const struct stats_reply_data *, u32, u32, int (*)(struct sk_buff *, const struct stats_reply_data *));
142:	static int stats_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/strset.c:
222:	static void strset_cleanup_data(struct ethnl_reply_data *);
436:	static int strset_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
181:	static int strset_parse_request(struct ethnl_req_info *, struct nlattr **, struct netlink_ext_ack *);
275:	static int strset_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
347:	static int strset_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/tsinfo.c:
86:	static int tsinfo_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
26:	static int tsinfo_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
43:	static int tsinfo_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ethtool/tunnels.c:
165:	int ethnl_tunnel_info_doit(struct sk_buff *, struct genl_info *);
242:	int ethnl_tunnel_info_dumpit(struct sk_buff *, struct netlink_callback *);
219:	int ethnl_tunnel_info_start(struct netlink_callback *);
82:	static int ethnl_tunnel_info_fill_reply(const struct ethnl_req_info *, struct sk_buff *);

File net/ethtool/wol.c:
107:	int ethnl_set_wol(struct sk_buff *, struct genl_info *);
64:	static int wol_fill_reply(struct sk_buff *, const struct ethnl_req_info *, const struct ethnl_reply_data *);
25:	static int wol_prepare_data(const struct ethnl_req_info *, struct ethnl_reply_data *, struct genl_info *);
47:	static int wol_reply_size(const struct ethnl_req_info *, const struct ethnl_reply_data *);

File net/ipv4/af_inet.c:
460:	int __inet_bind(struct sock *, struct sockaddr *, int, u32);
613:	int __inet_stream_connect(struct socket *, struct sockaddr *, int, int, int);
739:	int inet_accept(struct socket *, struct socket *, int, bool);
435:	int inet_bind(struct socket *, struct sockaddr *, int);
1658:	int inet_ctl_sock_create(struct sock **, unsigned short, unsigned short, unsigned char, struct net *);
1588:	__be32 inet_current_timestamp(void);
557:	int inet_dgram_connect(struct socket *, struct sockaddr *, int, int);
772:	int inet_getname(struct socket *, struct sockaddr *, int);
1619:	int inet_gro_complete(struct sk_buff *, int);
1455:	struct sk_buff *inet_gro_receive(struct list_head *, struct sk_buff *);
1347:	struct sk_buff *inet_gso_segment(struct sk_buff *, netdev_features_t);
935:	int inet_ioctl(struct socket *, unsigned int, unsigned long);
193:	int inet_listen(struct socket *, int);
1608:	int inet_recv_error(struct sock *, struct msghdr *, int, int *);
851:	int inet_recvmsg(struct socket *, struct msghdr *, size_t, int);
1169:	void inet_register_protosw(struct inet_protosw *);
404:	int inet_release(struct socket *);
807:	int inet_send_prepare(struct sock *);
820:	int inet_sendmsg(struct socket *, struct msghdr *, size_t);
832:	ssize_t inet_sendpage(struct socket *, struct page *, int, size_t, int);
869:	int inet_shutdown(struct socket *, int);
1286:	int inet_sk_rebuild_header(struct sock *);
1334:	void inet_sk_set_state(struct sock *, int);
1341:	void inet_sk_state_store(struct sock *, int);
132:	void inet_sock_destruct(struct sock *);
723:	int inet_stream_connect(struct socket *, struct sockaddr *, int, int);
1216:	void inet_unregister_protosw(struct inet_protosw *);
1679:	unsigned long snmp_fold_field(void *, int);
245:	static int inet_create(struct net *, struct socket *, int, int);
1931:	static int inet_init(void);
1827:	static int inet_init_net(struct net *);
1651:	static int ipip_gro_complete(struct sk_buff *, int);
1569:	static struct sk_buff *ipip_gro_receive(struct list_head *, struct sk_buff *);
1446:	static struct sk_buff *ipip_gso_segment(struct sk_buff *, netdev_features_t);
1802:	static void ipv4_mib_exit_net(struct net *);
1749:	static int ipv4_mib_init_net(struct net *);
1907:	static int ipv4_offload_init(void);
2061:	static int ipv4_proc_init(void);

File net/ipv4/arp.c:
544:	struct sk_buff *arp_create(int, int, __be32, struct net_device *, __be32, const unsigned char *, const unsigned char *, const unsigned char *);
1313:	void arp_ifdown(struct net_device *);
1462:	void arp_init(void);
1140:	int arp_invalidate(struct net_device *, __be32, bool);
1205:	int arp_ioctl(struct net *, unsigned int, void *);
187:	int arp_mc_map(__be32, u8 *, struct net_device *, int);
323:	void arp_send(int, int, __be32, struct net_device *, __be32, const unsigned char *, const unsigned char *, const unsigned char *);
659:	void arp_xmit(struct sk_buff *);
432:	static int arp_accept(struct in_device *, __be32);
223:	static int arp_constructor(struct neighbour *);
294:	static void arp_error_report(struct neighbour *, struct sk_buff *);
452:	static int arp_filter(__be32, __be32, struct net_device *);
473:	static int arp_fwd_proxy(struct in_device *, struct net_device *, struct rtable *);
211:	static u32 arp_hash(const void *, const struct net_device *, __u32 *);
396:	static int arp_ignore(struct in_device *, __be32, __be32);
668:	static bool arp_is_garp(struct net *, struct net_device *, int *, __be16, __be32, __be32, unsigned char *, unsigned char *);
954:	static int arp_is_multicast(const void *);
218:	static bool arp_key_eq(const struct neighbour *, const void *);
1452:	static void arp_net_exit(struct net *);
1444:	static int arp_net_init(struct net *);
1271:	static int arp_netdev_event(struct notifier_block *, unsigned long, void *);
698:	static int arp_process(struct net *, struct sock *, struct sk_buff *);
963:	static int arp_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
1180:	static int arp_req_delete(struct net *, struct arpreq *, struct net_device *);
1118:	static int arp_req_get(struct arpreq *, struct net_device *);
1045:	static int arp_req_set(struct net *, struct arpreq *, struct net_device *);
301:	static void arp_send_dst(int, int, __be32, struct net_device *, __be32, const unsigned char *, const unsigned char *, const unsigned char *, struct dst_entry *);
1411:	static int arp_seq_show(struct seq_file *, void *);
1428:	static void *arp_seq_start(struct seq_file *, loff_t *);
333:	static void arp_solicit(struct neighbour *, struct sk_buff *);
949:	static void parp_redo(struct sk_buff *);

File net/ipv4/datagram.c:
19:	int __ip4_datagram_connect(struct sock *, struct sockaddr *, int);
85:	int ip4_datagram_connect(struct sock *, struct sockaddr *, int);
100:	void ip4_datagram_release_cb(struct sock *);

File net/ipv4/devinet.c:
153:	struct net_device *__ip_dev_find(struct net *, __be32, bool);
2776:	void devinet_init(void);
1013:	int devinet_ioctl(struct net *, unsigned int, struct ifreq *);
245:	void in_dev_finish_destroy(struct in_device *);
335:	int inet_addr_onlink(struct in_device *, __be32, __be32);
1427:	__be32 inet_confirm_addr(struct net *, struct in_device *, __be32, __be32, int);
1251:	int inet_gifconf(struct net_device *, char *, int, int);
606:	struct in_ifaddr *inet_ifa_byprefix(struct in_device *, __be32, __be32);
184:	struct in_ifaddr *inet_lookup_ifaddr_rcu(struct net *, __be32);
2096:	void inet_netconf_notify_devconf(struct net *, int, int, int, struct ipv4_devconf *);
1305:	__be32 inet_select_addr(const struct net_device *, __be32, int);
590:	struct in_device *inetdev_by_index(struct net *, int);
1455:	int register_inetaddr_notifier(struct notifier_block *);
1467:	int register_inetaddr_validator_notifier(struct notifier_block *);
1461:	int unregister_inetaddr_notifier(struct notifier_block *);
1473:	int unregister_inetaddr_validator_notifier(struct notifier_block *);
2568:	static int __devinet_sysctl_register(struct net *, char *, int, struct ipv4_devconf *);
352:	static void __inet_del_ifa(struct in_device *, struct in_ifaddr **, int, struct nlmsghdr *, u32);
476:	static int __inet_insert_ifa(struct in_ifaddr *, struct nlmsghdr *, u32, struct netlink_ext_ack *);
698:	static void check_lifetime(struct work_struct *);
1375:	static __be32 confirm_addr_indev(struct in_device *, __be32, __be32, int);
2378:	static int devinet_conf_proc(struct ctl_table *, int, void *, size_t *, loff_t *);
2746:	static void devinet_exit_net(struct net *);
2657:	static int devinet_init_net(struct net *);
2430:	static int devinet_sysctl_forward(struct ctl_table *, int, void *, size_t *, loff_t *);
2617:	static int devinet_sysctl_register(struct in_device *);
237:	static void in_dev_free_rcu(struct callback_head *);
991:	static int inet_abc_len(__be32);
1808:	static int inet_dump_ifaddr(struct sk_buff *, struct netlink_callback *);
1654:	static int inet_fill_ifaddr(struct sk_buff *, struct in_ifaddr *, struct inet_fill_args *);
1936:	static int inet_fill_link_af(struct sk_buff *, const struct net_device *, u32);
1925:	static size_t inet_get_link_af_size(const struct net_device *, u32);
2228:	static int inet_netconf_dump_devconf(struct sk_buff *, struct netlink_callback *);
2036:	static int inet_netconf_fill_devconf(struct sk_buff *, int, struct ipv4_devconf *, u32, u32, int, unsigned int, int);
2168:	static int inet_netconf_get_devconf(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
224:	static void inet_rcu_free_ifa(struct callback_head *);
646:	static int inet_rtm_deladdr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
932:	static int inet_rtm_newaddr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
565:	static int inet_set_ifa(struct net_device *, struct in_ifaddr *);
1990:	static int inet_set_link_af(struct net_device *, const struct nlattr *, struct netlink_ext_ack *);
1960:	static int inet_validate_link_af(const struct net_device *, const struct nlattr *, struct netlink_ext_ack *);
1525:	static int inetdev_event(struct notifier_block *, unsigned long, void *);
262:	static struct in_device *inetdev_init(struct net_device *);
620:	static int ip_mc_autojoin_config(struct net *, bool, const struct in_ifaddr *);
2477:	static int ipv4_doint_and_flush(struct ctl_table *, int, void *, size_t *, loff_t *);
1641:	static int put_cacheinfo(struct sk_buff *, unsigned long, unsigned long, u32, u32);
1892:	static void rtmsg_ifa(int, struct in_ifaddr *, struct nlmsghdr *, u32);

File net/ipv4/fib_frontend.c:
1106:	void fib_add_ifaddr(struct in_ifaddr *);
271:	__be32 fib_compute_spec_dst(struct sk_buff *);
1180:	void fib_del_ifaddr(struct in_ifaddr *, struct in_ifaddr *);
184:	void fib_flush(struct net *);
680:	int fib_gw_from_via(struct fib_config *, struct nlattr *, struct netlink_ext_ack *);
309:	bool fib_info_nh_uses_dev(struct fib_info *, const struct net_device *);
1152:	void fib_modify_prefix_metric(struct in_ifaddr *, u32);
152:	int fib_unmerge(struct net *);
421:	int fib_validate_source(struct sk_buff *, __be32, __be32, u8, int, struct net_device *, struct in_device *, u32 *);
243:	unsigned int inet_addr_type(struct net *, __be32);
261:	unsigned int inet_addr_type_dev_table(struct net *, const struct net_device *, __be32);
237:	unsigned int inet_addr_type_table(struct net *, __be32, u32);
249:	unsigned int inet_dev_addr_type(struct net *, const struct net_device *, __be32);
1648:	void ip_fib_init(void);
616:	int ip_rt_ioctl(struct net *, unsigned int, struct rtentry *);
907:	int ip_valid_fib_dump_req(struct net *, const struct nlmsghdr *, struct fib_dump_filter *, struct netlink_callback *);
1419:	static void fib_disable_ip(struct net_device *, unsigned long, bool);
1429:	static int fib_inetaddr_event(struct notifier_block *, unsigned long, void *);
1625:	static void fib_net_exit(struct net *);
1631:	static void fib_net_exit_batch(struct list_head *);
1597:	static int fib_net_init(struct net *);
1460:	static int fib_netdev_event(struct notifier_block *, unsigned long, void *);
981:	static int inet_dump_fib(struct sk_buff *, struct netlink_callback *);
852:	static int inet_rtm_delroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
882:	static int inet_rtm_newroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1563:	static void ip_fib_net_exit(struct net *);
1371:	static void nl_fib_input(struct sk_buff *);
724:	static int rtm_to_fib_config(struct net *, struct sk_buff *, struct nlmsghdr *, struct fib_config *, struct netlink_ext_ack *);

File net/ipv4/fib_notifier.c:
11:	int call_fib4_notifier(struct notifier_block *, enum fib_event_type, struct fib_notifier_info *);
19:	int call_fib4_notifiers(struct net *, enum fib_event_type, struct fib_notifier_info *);
69:	void fib4_notifier_exit(struct net *);
55:	int fib4_notifier_init(struct net *);
36:	static int fib4_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
29:	static unsigned int fib4_seq_read(struct net *);

File net/ipv4/fib_semantics.c:
1700:	int fib_add_nexthop(struct sk_buff *, const struct fib_nh_common *, int, u8, u32);
1248:	int fib_check_nh(struct net *, struct fib_nh *, u32, u8, struct netlink_ext_ack *);
1380:	struct fib_info *fib_create_info(struct fib_config *, struct netlink_ext_ack *);
1773:	int fib_dump_info(struct sk_buff *, u32, u32, int, const struct fib_rt_info *, unsigned int);
1323:	__be32 fib_info_update_nhc_saddr(struct net *, struct fib_nh_common *, unsigned char);
1009:	bool fib_metrics_match(struct fib_config *, struct fib_info *);
1629:	int fib_nexthop_info(struct sk_buff *, const struct fib_nh_common *, u8, unsigned char *, bool);
583:	int fib_nh_common_init(struct net *, struct fib_nh_common *, struct nlattr *, u16, void *, gfp_t, struct netlink_ext_ack *);
213:	void fib_nh_common_release(struct fib_nh_common *);
621:	int fib_nh_init(struct net *, struct fib_nh *, struct fib_config *, int, struct netlink_ext_ack *);
876:	int fib_nh_match(struct net *, struct fib_config *, struct fib_info *, struct netlink_ext_ack *);
223:	void fib_nh_release(struct net *, struct fib_nh *);
1932:	void fib_nhc_update_mtu(struct fib_nh_common *, u32, u32);
464:	size_t fib_nlmsg_size(struct fib_info *);
261:	void fib_release_info(struct fib_info *);
1338:	__be32 fib_result_prefsrc(struct net *, struct fib_result *);
2245:	void fib_select_path(struct net *, struct fib_result *, struct flowi4 *, const struct sk_buff *);
1869:	int fib_sync_down_addr(struct net_device *, __be32);
1979:	int fib_sync_down_dev(struct net_device *, unsigned long, bool);
1960:	void fib_sync_mtu(struct net_device *, u32);
2128:	int fib_sync_up(struct net_device *, unsigned char);
250:	void free_fib_info(struct fib_info *);
441:	int ip_fib_check_default(__be32, struct net_device *);
512:	void rtmsg_fib(int, __be32, struct fib_alias *, int, u32, const struct nl_info *, unsigned int);
549:	static int fib_detect_death(struct fib_info *, int, struct fib_info **, int *, int);
408:	static struct fib_info *fib_find_info(struct fib_info *);
1272:	static void fib_info_hash_move(struct hlist_head *, struct hlist_head *, unsigned int);
356:	static unsigned int fib_info_hashfn(struct fib_info *);
1356:	static bool fib_valid_prefsrc(struct fib_config *, __be32);
233:	static void free_fib_info_rcu(struct callback_head *);

File net/ipv4/fib_trie.c:
1043:	void fib_alias_hw_flags_set(struct net *, const struct fib_rt_info *);
2258:	void fib_free_table(struct fib_table *);
2159:	void fib_info_notify_update(struct net *, struct nl_info *);
1426:	bool fib_lookup_good_nhc(const struct fib_nh_common *, int, const struct flowi4 *);
2227:	int fib_notify(struct net *, struct notifier_block *, struct netlink_ext_ack *);
3055:	void fib_proc_exit(struct net *);
3031:	int fib_proc_init(struct net *);
1711:	int fib_table_delete(struct net *, struct fib_table *, struct fib_config *, struct netlink_ext_ack *);
2350:	int fib_table_dump(struct fib_table *, struct sk_buff *, struct netlink_callback *, struct fib_dump_filter *);
2026:	int fib_table_flush(struct net *, struct fib_table *, bool);
1957:	void fib_table_flush_external(struct fib_table *);
1215:	int fib_table_insert(struct net *, struct fib_table *, struct fib_config *, struct netlink_ext_ack *);
1444:	int fib_table_lookup(struct fib_table *, const struct flowi4 *, struct fib_result *, int);
2394:	void fib_trie_init(void);
2405:	struct fib_table *fib_trie_table(u32, struct fib_table *);
1898:	struct fib_table *fib_trie_unmerge(struct fib_table *);
294:	static void __alias_free_mem(struct callback_head *);
308:	static void __node_free_rcu(struct callback_head *);
2246:	static void __trie_free_rcu(struct callback_head *);
92:	static int call_fib_entry_notifiers(struct net *, enum fib_event_type, u32, int, struct fib_alias *, struct netlink_ext_ack *);
1159:	static int fib_insert_alias(struct trie *, struct key_vector *, struct key_vector *, struct fib_alias *, struct fib_alias *, t_key);
1649:	static void fib_remove_alias(struct trie *, struct key_vector *, struct key_vector *, struct fib_alias *);
2910:	static void *fib_route_seq_next(struct seq_file *, void *, loff_t *);
2962:	static int fib_route_seq_show(struct seq_file *, void *);
2884:	static void *fib_route_seq_start(struct seq_file *, loff_t *);
2932:	static void fib_route_seq_stop(struct seq_file *, void *);
2702:	static void *fib_trie_seq_next(struct seq_file *, void *, loff_t *);
2792:	static int fib_trie_seq_show(struct seq_file *, void *);
2695:	static void *fib_trie_seq_start(struct seq_file *, loff_t *);
2742:	static void fib_trie_seq_stop(struct seq_file *, void *);
2631:	static int fib_triestat_seq_show(struct seq_file *, void *);
417:	static void put_child(struct key_vector *, unsigned long, struct key_vector *);
507:	static struct key_vector *replace(struct trie *, struct key_vector *, struct key_vector *);
847:	static struct key_vector *resize(struct trie *, struct key_vector *);
446:	static void update_children(struct key_vector *);

File net/ipv4/gre_offload.c:
235:	static int gre_gro_complete(struct sk_buff *, int);
121:	static struct sk_buff *gre_gro_receive(struct list_head *, struct sk_buff *);
15:	static struct sk_buff *gre_gso_segment(struct sk_buff *, netdev_features_t);
270:	static int gre_offload_init(void);

File net/ipv4/icmp.c:
584:	void __icmp_send(struct sk_buff *, int, int, __be32, const struct ip_options *);
1022:	bool icmp_build_probe(struct sk_buff *, struct icmphdr *);
1343:	int icmp_err(struct sk_buff *, u32);
238:	bool icmp_global_allow(void);
1476:	int icmp_init(void);
775:	void icmp_ndo_send(struct sk_buff *, int, int, __be32);
334:	void icmp_out_count(struct net *, unsigned char);
1171:	int icmp_rcv(struct sk_buff *);
1318:	void ip_icmp_error_rfc4884(const struct sk_buff *, struct sock_ee_data_rfc4884 *, int, int);
1162:	static enum skb_drop_reason icmp_discard(struct sk_buff *);
990:	static enum skb_drop_reason icmp_echo(struct sk_buff *);
344:	static int icmp_glue_bits(void *, char *, int, int, int, struct sk_buff *);
360:	static void icmp_push_reply(struct sock *, struct icmp_bxm *, struct flowi4 *, struct ipcm_cookie *, struct rtable **);
960:	static enum skb_drop_reason icmp_redirect(struct sk_buff *);
394:	static void icmp_reply(struct icmp_bxm *, struct sk_buff *);
473:	static struct rtable *icmp_route_lookup(struct net *, struct flowi4 *, struct sk_buff *, const struct iphdr *, __be32, u8, u32, int, int, struct icmp_bxm *);
1443:	static int icmp_sk_init(struct net *);
808:	static void icmp_socket_deliver(struct sk_buff *, u32);
829:	static bool icmp_tag_validation(int);
1130:	static enum skb_drop_reason icmp_timestamp(struct sk_buff *);
844:	static enum skb_drop_reason icmp_unreach(struct sk_buff *);
198:	static struct sock *icmp_xmit_lock(struct net *);
306:	static bool icmpv4_xrlim_allow(struct net *, struct rtable *, struct flowi4 *, int, int);

File net/ipv4/igmp.c:
1673:	void __ip_mc_dec_group(struct in_device *, __be32, gfp_t);
1482:	void __ip_mc_inc_group(struct in_device *, __be32, gfp_t);
3088:	int igmp_mc_init(void);
1069:	int igmp_rcv(struct sk_buff *);
2715:	int ip_check_mc_rcu(struct in_device *, __be32, __be32, u8);
1618:	int ip_mc_check_igmp(struct sk_buff *);
1803:	void ip_mc_destroy_dev(struct in_device *);
1731:	void ip_mc_down(struct in_device *);
2689:	void ip_mc_drop_socket(struct sock *);
2592:	int ip_mc_gsfget(struct sock *, struct group_filter *, sockptr_t, size_t);
1488:	void ip_mc_inc_group(struct in_device *, __be32);
1767:	void ip_mc_init_dev(struct in_device *);
2221:	int ip_mc_join_group(struct sock *, struct ip_mreqn *);
2229:	int ip_mc_join_group_ssm(struct sock *, struct ip_mreqn *, unsigned int);
2255:	int ip_mc_leave_group(struct sock *, struct ip_mreqn *);
2532:	int ip_mc_msfget(struct sock *, struct ip_msfilter *, sockptr_t, sockptr_t);
2442:	int ip_mc_msfilter(struct sock *, struct ip_msfilter *, int);
1715:	void ip_mc_remap(struct in_device *);
2641:	int ip_mc_sf_allow(struct sock *, __be32, __be32, int, int);
2303:	int ip_mc_source(int, int, struct sock *, struct ip_mreq_source *, int);
1705:	void ip_mc_unmap(struct in_device *);
1782:	void ip_mc_up(struct in_device *);
1434:	static void ____ip_mc_inc_group(struct in_device *, __be32, unsigned int, gfp_t);
1288:	static void __igmp_group_dropped(struct ip_mc_list *, gfp_t);
2169:	static int __ip_mc_join_group(struct sock *, struct ip_mreqn *, unsigned int);
457:	static struct sk_buff *add_grec(struct sk_buff *, struct ip_mc_list *, int, int, int);
432:	static struct sk_buff *add_grhead(struct sk_buff *, struct ip_mc_list *, int, struct igmpv3_grec **, unsigned int);
223:	static void igmp_gq_start_timer(struct in_device *);
796:	static void igmp_gq_timer_expire(struct timer_list *);
1332:	static void igmp_group_added(struct ip_mc_list *);
825:	static void igmp_ifc_event(struct in_device *);
805:	static void igmp_ifc_timer_expire(struct timer_list *);
2826:	static void *igmp_mc_seq_next(struct seq_file *, void *, loff_t *);
2847:	static int igmp_mc_seq_show(struct seq_file *, void *);
2819:	static void *igmp_mc_seq_start(struct seq_file *, loff_t *);
2837:	static void igmp_mc_seq_stop(struct seq_file *, void *);
2971:	static void *igmp_mcf_seq_next(struct seq_file *, void *, loff_t *);
2995:	static int igmp_mcf_seq_show(struct seq_file *, void *);
2964:	static void *igmp_mcf_seq_start(struct seq_file *, loff_t *);
2982:	static void igmp_mcf_seq_stop(struct seq_file *, void *);
3053:	static void igmp_net_exit(struct net *);
3022:	static int igmp_net_init(struct net *);
3066:	static int igmp_netdev_event(struct notifier_block *, unsigned long, void *);
723:	static int igmp_send_report(struct in_device *, struct ip_mc_list *, int);
835:	static void igmp_timer_expire(struct timer_list *);
1172:	static void igmpv3_add_delrec(struct in_device *, struct ip_mc_list *, gfp_t);
1258:	static void igmpv3_clear_delrec(struct in_device *);
1214:	static void igmpv3_del_delrec(struct in_device *, struct ip_mc_list *);
346:	static struct sk_buff *igmpv3_newpack(struct net_device *, unsigned int);
585:	static int igmpv3_send_report(struct in_device *, struct ip_mc_list *);
417:	static int igmpv3_sendpack(struct sk_buff *);
167:	static void ip_ma_put(struct ip_mc_list *);
2080:	static int ip_mc_add_src(struct in_device *, __be32 *, int, int, __be32 *, int);
1859:	static int ip_mc_del1_src(struct ip_mc_list *, int, __be32 *);
1908:	static int ip_mc_del_src(struct in_device *, __be32 *, int, int, __be32 *, int);
1824:	static struct in_device *ip_mc_find_dev(struct net *, struct ip_mreqn *);
1578:	static __sum16 ip_mc_validate_checksum(struct sk_buff *);
270:	static int is_in(struct ip_mc_list *, struct ip_sf_list *, int, int, int);
2017:	static int sf_setstate(struct ip_mc_list *);

File net/ipv4/inet_connection_sock.c:
636:	struct sock *inet_csk_accept(struct sock *, int, int *, bool);
1424:	void inet_csk_addr2sockaddr(struct sock *, struct sockaddr *);
737:	void inet_csk_clear_xmit_timers(struct sock *);
1116:	struct sock *inet_csk_clone_lock(const struct sock *, const struct request_sock *, const gfp_t);
1302:	struct sock *inet_csk_complete_hashdance(struct sock *, struct sock *, struct request_sock *, bool);
749:	void inet_csk_delete_keepalive_timer(struct sock *);
1164:	void inet_csk_destroy_sock(struct sock *);
486:	int inet_csk_get_port(struct sock *, unsigned short);
723:	void inet_csk_init_xmit_timers(struct sock *, void (*)(struct timer_list *), void (*)(struct timer_list *), void (*)(struct timer_list *));
1213:	int inet_csk_listen_start(struct sock *);
1352:	void inet_csk_listen_stop(struct sock *);
1192:	void inet_csk_prepare_forced_close(struct sock *);
1277:	struct sock *inet_csk_reqsk_queue_add(struct sock *, struct request_sock *, struct sock *);
943:	bool inet_csk_reqsk_queue_drop(struct sock *, struct request_sock *);
955:	void inet_csk_reqsk_queue_drop_and_put(struct sock *, struct request_sock *);
1088:	void inet_csk_reqsk_queue_hash_add(struct sock *, struct request_sock *, unsigned long);
755:	void inet_csk_reset_keepalive_timer(struct sock *, unsigned long);
797:	struct dst_entry *inet_csk_route_child_sock(const struct sock *, struct sock *, const struct request_sock *);
761:	struct dst_entry *inet_csk_route_req(const struct sock *, struct flowi4 *, const struct request_sock *);
431:	void inet_csk_update_fastreuse(struct inet_bind_bucket *, struct sock *);
1461:	struct dst_entry *inet_csk_update_pmtu(struct sock *, u32);
120:	void inet_get_local_port_range(struct net *, int *, int *);
111:	bool inet_rcv_saddr_any(const struct sock *);
91:	bool inet_rcv_saddr_equal(const struct sock *, const struct sock *, bool);
854:	int inet_rtx_syn_ack(const struct sock *, struct request_sock *);
263:	static bool inet_bhash2_addr_any_conflict(const struct sock *, int, int, bool, bool);
187:	static bool inet_bhash2_conflict(const struct sock *, const struct inet_bind2_bucket *, kuid_t, bool, bool, bool);
146:	static bool inet_bind_conflict(const struct sock *, struct sock *, kuid_t, bool, bool, bool);
1253:	static void inet_child_forget(struct sock *, struct request_sock *, struct sock *);
214:	static int inet_csk_bind_conflict(const struct sock *, const struct inet_bind_bucket *, const struct inet_bind2_bucket *, bool, bool);
1435:	static struct dst_entry *inet_csk_rebuild_route(struct sock *, struct flowi *);
864:	static struct request_sock *inet_reqsk_clone(struct request_sock *, struct sock *);
34:	static bool ipv6_rcv_saddr_equal(const struct in6_addr *, const struct in6_addr *, __be32, __be32, bool, bool, bool, bool);
962:	static void reqsk_timer_handler(struct timer_list *);

File net/ipv4/inet_diag.c:
787:	int inet_diag_bc_sk(const struct nlattr *, struct sock *);
1009:	void inet_diag_dump_icsk(struct inet_hashinfo *, struct sk_buff *, struct netlink_callback *, const struct inet_diag_req_v2 *);
554:	int inet_diag_dump_one_icsk(struct inet_hashinfo *, struct netlink_callback *, const struct inet_diag_req_v2 *);
510:	struct sock *inet_diag_find_one_icsk(struct net *, struct inet_hashinfo *, const struct inet_diag_req_v2 *);
122:	int inet_diag_msg_attrs_fill(struct sock *, struct sk_buff *, struct inet_diag_msg *, int, struct user_namespace *, bool);
75:	void inet_diag_msg_common_fill(struct inet_diag_msg *, struct sock *);
1411:	int inet_diag_register(const struct inet_diag_handler *);
1431:	void inet_diag_unregister(const struct inet_diag_handler *);
234:	int inet_sk_diag_fill(struct sock *, struct inet_connection_sock *, struct sk_buff *, struct netlink_callback *, const struct inet_diag_req_v2 *, u16, bool);
1165:	static int __inet_diag_dump(struct sk_buff *, struct netlink_callback *, const struct inet_diag_req_v2 *);
1201:	static int __inet_diag_dump_start(struct netlink_callback *, int);
591:	static int inet_diag_cmd_exact(int, struct sk_buff *, const struct nlmsghdr *, int, const struct inet_diag_req_v2 *);
1196:	static int inet_diag_dump(struct sk_buff *, struct netlink_callback *);
1275:	static int inet_diag_dump_compat(struct sk_buff *, struct netlink_callback *);
1253:	static int inet_diag_dump_done(struct netlink_callback *);
1243:	static int inet_diag_dump_start(struct netlink_callback *);
1248:	static int inet_diag_dump_start_compat(struct netlink_callback *);
1473:	static void inet_diag_exit(void);
1327:	static int inet_diag_handler_cmd(struct sk_buff *, struct nlmsghdr *);
1350:	static int inet_diag_handler_get_info(struct sk_buff *, struct sock *);
1444:	static int inet_diag_init(void);
1306:	static int inet_diag_rcv_msg_compat(struct sk_buff *, struct nlmsghdr *);
495:	static int sk_diag_fill(struct sock *, struct sk_buff *, struct netlink_callback *, const struct inet_diag_req_v2 *, u16, bool);

File net/ipv4/inet_fragment.c:
219:	void fqdir_exit(struct fqdir *);
187:	int fqdir_init(struct fqdir **, struct inet_frags *, struct net *);
287:	void inet_frag_destroy(struct inet_frag_queue *);
359:	struct inet_frag_queue *inet_frag_find(struct fqdir *, void *);
226:	void inet_frag_kill(struct inet_frag_queue *);
585:	struct sk_buff *inet_frag_pull_head(struct inet_frag_queue *);
383:	int inet_frag_queue_insert(struct inet_frag_queue *, struct sk_buff *, int, int);
264:	unsigned int inet_frag_rbtree_purge(struct rb_root *, enum skb_drop_reason);
516:	void inet_frag_reasm_finish(struct inet_frag_queue *, struct sk_buff *, void *, bool);
447:	void *inet_frag_reasm_prepare(struct inet_frag_queue *, struct sk_buff *, struct sk_buff *);
115:	void inet_frags_fini(struct inet_frags *);
102:	int inet_frags_init(struct inet_frags *);
151:	static void fqdir_free_fn(struct work_struct *);
177:	static void fqdir_work_fn(struct work_struct *);
253:	static void inet_frag_destroy_rcu(struct callback_head *);
209:	static int inet_frag_wq_init(void);
128:	static void inet_frags_free_cb(void *, void *);

File net/ipv4/inet_hashtables.c:
720:	int __inet_hash(struct sock *, struct sock *);
992:	int __inet_hash_connect(struct inet_timewait_death_row *, struct sock *, u64, int (*)(struct inet_timewait_death_row *, struct sock *, __u16, struct inet_timewait_sock **));
214:	int __inet_inherit_port(const struct sock *, struct sock *);
471:	struct sock *__inet_lookup_established(struct net *, struct inet_hashinfo *, const __be32, const __be16, const __be32, const u16, const int, const int);
408:	struct sock *__inet_lookup_listener(struct net *, struct inet_hashinfo *, struct sk_buff *, int, const __be32, __be16, const __be32, const unsigned short, const int, const int);
859:	struct inet_bind_hashbucket *inet_bhash2_addr_any_hashbucket(const struct sock *, const struct net *, int);
972:	void inet_bhash2_reset_saddr(struct sock *);
966:	int inet_bhash2_update_saddr(struct sock *, void *, int);
123:	struct inet_bind2_bucket *inet_bind2_bucket_create(struct kmem_cache *, struct net *, struct inet_bind_hashbucket *, unsigned short, int, const struct sock *);
139:	void inet_bind2_bucket_destroy(struct kmem_cache *, struct inet_bind2_bucket *);
846:	struct inet_bind2_bucket *inet_bind2_bucket_find(const struct inet_bind_hashbucket *, const struct net *, unsigned short, int, const struct sock *);
825:	bool inet_bind2_bucket_match_addr_any(const struct inet_bind2_bucket *, const struct net *, unsigned short, int, const struct sock *);
64:	struct inet_bind_bucket *inet_bind_bucket_create(struct kmem_cache *, struct net *, struct inet_bind_hashbucket *, const unsigned short, int);
87:	void inet_bind_bucket_destroy(struct kmem_cache *, struct inet_bind_bucket *);
95:	bool inet_bind_bucket_match(const struct inet_bind_bucket *, const struct net *, unsigned short, int);
161:	void inet_bind_hash(struct sock *, struct inet_bind_bucket *, struct inet_bind2_bucket *, unsigned short);
635:	bool inet_ehash_insert(struct sock *, struct sock *, bool *);
1209:	int inet_ehash_locks_alloc(struct inet_hashinfo *);
681:	bool inet_ehash_nolisten(struct sock *, struct sock *, bool *);
755:	int inet_hash(struct sock *);
1146:	int inet_hash_connect(struct inet_timewait_death_row *, struct sock *);
1169:	void inet_hashinfo2_init(struct inet_hashinfo *, const char *, unsigned long, int, unsigned long, unsigned long);
1194:	int inet_hashinfo2_init_mod(struct inet_hashinfo *);
1234:	struct inet_hashinfo *inet_pernet_hashinfo_alloc(struct inet_hashinfo *, unsigned int);
1270:	void inet_pernet_hashinfo_free(struct inet_hashinfo *);
206:	void inet_put_port(struct sock *);
766:	void inet_unhash(struct sock *);
465:	void sock_edemux(struct sk_buff *);
451:	void sock_gen_put(struct sock *);
888:	static int __inet_bhash2_update_saddr(struct sock *, void *, int, bool);
518:	static int __inet_check_established(struct inet_timewait_death_row *, struct sock *, __u16, struct inet_timewait_sock **);
31:	static u32 inet_ehashfn(const struct net *, const __be32, const __u16, const __be32, const __be16);
358:	static struct sock *inet_lhash2_lookup(struct net *, struct inet_listen_hashbucket *, struct sk_buff *, int, const __be32, __be16, const __be32, const unsigned short, const int, const int);

File net/ipv4/inet_timewait_sock.c:
244:	void __inet_twsk_schedule(struct inet_timewait_sock *, int, bool);
178:	struct inet_timewait_sock *inet_twsk_alloc(const struct sock *, struct inet_timewait_death_row *, const int);
29:	void inet_twsk_bind_unhash(struct inet_timewait_sock *, struct inet_hashinfo *);
236:	void inet_twsk_deschedule_put(struct inet_timewait_sock *);
76:	void inet_twsk_free(struct inet_timewait_sock *);
117:	void inet_twsk_hashdance(struct inet_timewait_sock *, struct sock *, struct inet_hashinfo *);
284:	void inet_twsk_purge(struct inet_hashinfo *, int);
87:	void inet_twsk_put(struct inet_timewait_sock *);
50:	static void inet_twsk_kill(struct inet_timewait_sock *);
171:	static void tw_timer_handler(struct timer_list *);

File net/ipv4/inetpeer.c:
179:	struct inet_peer *inet_getpeer(struct inet_peer_base *, const struct inetpeer_addr *, int);
74:	void inet_initpeers(void);
57:	void inet_peer_base_init(struct inet_peer_base *);
270:	bool inet_peer_xrlim_allow(struct inet_peer *, int);
240:	void inet_putpeer(struct inet_peer *);
293:	void inetpeer_invalidate_tree(struct inet_peer_base *);
134:	static void inetpeer_free_rcu(struct callback_head *);

File net/ipv4/ip_forward.c:
86:	int ip_forward(struct sk_buff *);
65:	static int ip_forward_finish(struct net *, struct sock *, struct sk_buff *);

File net/ipv4/ip_fragment.c:
512:	struct sk_buff *ip_check_defrag(struct net *, struct sk_buff *, u32);
483:	int ip_defrag(struct net *, struct sk_buff *, u32);
748:	void ipfrag_init(void);
96:	static void ip4_frag_free(struct inet_frag_queue *);
82:	static void ip4_frag_init(struct inet_frag_queue *, const void *);
716:	static u32 ip4_key_hashfn(const void *, u32, u32);
730:	static int ip4_obj_cmpfn(struct rhashtable_compare_arg *, const void *);
722:	static u32 ip4_obj_hashfn(const void *, u32, u32);
133:	static void ip_expire(struct timer_list *);
703:	static void ipv4_frags_exit_net(struct net *);
660:	static int ipv4_frags_init_net(struct net *);
698:	static void ipv4_frags_pre_exit_net(struct net *);

File net/ipv4/ip_input.c:
148:	bool ip_call_ra_chain(struct sk_buff *);
642:	void ip_list_rcv(struct list_head *, struct packet_type *, struct net_device *);
242:	int ip_local_deliver(struct sk_buff *);
187:	void ip_protocol_deliver_rcu(struct net *, struct sk_buff *, int);
560:	int ip_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
227:	static int ip_local_deliver_finish(struct net *, struct sock *, struct sk_buff *);
456:	static struct sk_buff *ip_rcv_core(struct sk_buff *, struct net *);
435:	static int ip_rcv_finish(struct net *, struct sock *, struct sk_buff *);
317:	static int ip_rcv_finish_core(struct net *, struct sock *, struct sk_buff *, struct net_device *, const struct sk_buff *);
633:	static void ip_sublist_rcv(struct list_head *, struct net_device *, struct net *);

File net/ipv4/ip_options.c:
241:	int __ip_options_compile(struct net *, struct ip_options *, struct sk_buff *, __be32 *);
77:	int __ip_options_echo(struct net *, struct ip_options *, struct sk_buff *, const struct ip_options *);
538:	void ip_forward_options(struct sk_buff *);
44:	void ip_options_build(struct sk_buff *, struct ip_options *, __be32, struct rtable *);
465:	int ip_options_compile(struct net *, struct ip_options *, struct sk_buff *);
195:	void ip_options_fragment(struct sk_buff *);
512:	int ip_options_get(struct net *, struct ip_options_rcu **, sockptr_t, int);
585:	int ip_options_rcv_srr(struct sk_buff *, struct net_device *);
482:	void ip_options_undo(struct ip_options *);

File net/ipv4/ip_output.c:
99:	int __ip_local_out(struct net *, struct sock *, struct sk_buff *);
1489:	struct sk_buff *__ip_make_skb(struct sock *, struct flowi4 *, struct sk_buff_head *, struct inet_cork *);
453:	int __ip_queue_xmit(struct sock *, struct sk_buff *, struct flowi *, __u8);
1322:	int ip_append_data(struct sock *, struct flowi4 *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, struct ipcm_cookie *, struct rtable **, unsigned int);
1348:	ssize_t ip_append_page(struct sock *, struct flowi4 *, struct page *, int, size_t, int);
145:	int ip_build_and_send_pkt(struct sk_buff *, const struct sock *, __be32, __be32, struct ip_options_rcu *, u8);
759:	int ip_do_fragment(struct net *, struct sock *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
1624:	void ip_flush_pending_frames(struct sock *);
641:	void ip_frag_init(struct sk_buff *, unsigned int, unsigned int, unsigned int, bool, struct ip_frag_state *);
676:	struct sk_buff *ip_frag_next(struct sk_buff *, struct ip_frag_state *);
596:	void ip_fraglist_init(struct sk_buff *, struct iphdr *, unsigned int, struct ip_fraglist_iter *);
616:	void ip_fraglist_prepare(struct sk_buff *, struct ip_fraglist_iter *);
931:	int ip_generic_getfrag(void *, char *, int, int, int, struct sk_buff *);
1753:	void ip_init(void);
120:	int ip_local_out(struct net *, struct sock *, struct sk_buff *);
1629:	struct sk_buff *ip_make_skb(struct sock *, struct flowi4 *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, struct ipcm_cookie *, struct rtable **, struct inet_cork *, unsigned int);
359:	int ip_mc_output(struct net *, struct sock *, struct sk_buff *);
421:	int ip_output(struct net *, struct sock *, struct sk_buff *);
1597:	int ip_push_pending_frames(struct sock *, struct flowi4 *);
544:	int ip_queue_xmit(struct sock *, struct sk_buff *, struct flowi *);
92:	void ip_send_check(struct iphdr *);
1582:	int ip_send_skb(struct net *, struct sk_buff *);
1680:	void ip_send_unicast_reply(struct sock *, struct sk_buff *, const struct ip_options *, __be32, __be32, const struct ip_reply_arg *, unsigned int, u64);
959:	static int __ip_append_data(struct sock *, struct flowi4 *, struct sk_buff_head *, struct inet_cork *, struct page_frag *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, int, int, unsigned int);
288:	static int __ip_finish_output(struct net *, struct sock *, struct sk_buff *);
550:	static void ip_copy_metadata(struct sk_buff *, struct sk_buff *);
309:	static int ip_finish_output(struct net *, struct sock *, struct sk_buff *);
194:	static int ip_finish_output2(struct net *, struct sock *, struct sk_buff *);
574:	static int ip_fragment(struct net *, struct sock *, struct sk_buff *, unsigned int, int (*)(struct net *, struct sock *, struct sk_buff *));
325:	static int ip_mc_finish_output(struct net *, struct sock *, struct sk_buff *);
1666:	static int ip_reply_glue_bits(void *, char *, int, int, int, struct sk_buff *);
1261:	static int ip_setup_cork(struct sock *, struct inet_cork *, struct ipcm_cookie *, struct rtable **);

File net/ipv4/ip_sockglue.c:
580:	void __ip_sock_set_tos(struct sock *, int);
1528:	int do_ip_getsockopt(struct sock *, int, int, sockptr_t, sockptr_t);
892:	int do_ip_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
171:	void ip_cmsg_recv_offset(struct msghdr *, struct sock *, struct sk_buff *, int, int);
242:	int ip_cmsg_send(struct sock *, struct msghdr *, struct ipcm_cookie *, bool);
1775:	int ip_getsockopt(struct sock *, int, int, char *, int *);
405:	void ip_icmp_error(struct sock *, struct sk_buff *, int, __be16, u32, u8 *);
438:	void ip_local_error(struct sock *, int, __be32, __be16, u32);
336:	int ip_ra_control(struct sock *, unsigned char, void (*)(struct sock *));
517:	int ip_recv_error(struct sock *, struct msghdr *, int, int *);
1425:	int ip_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
601:	void ip_sock_set_freebind(struct sock *);
617:	int ip_sock_set_mtu_discover(struct sock *, int);
628:	void ip_sock_set_pktinfo(struct sock *);
609:	void ip_sock_set_recverr(struct sock *);
593:	void ip_sock_set_tos(struct sock *, int);
1393:	void ipv4_pktinfo_prepare(const struct sock *, struct sk_buff *);
1466:	static int ip_get_mcast_msfilter(struct sock *, sockptr_t, sockptr_t, int);
845:	static int ip_mcast_join_leave(struct sock *, int, sockptr_t, int);
328:	static void ip_ra_destroy_rcu(struct callback_head *);
769:	static int ip_set_mcast_msfilter(struct sock *, sockptr_t, int);
662:	static int set_mcast_msfilter(struct sock *, int, int, int, struct __kernel_sockaddr_storage *, struct __kernel_sockaddr_storage *);

File net/ipv4/ip_tunnel.c:
979:	int __ip_tunnel_change_mtu(struct net_device *, int, bool);
543:	void ip_md_tunnel_xmit(struct sk_buff *, struct net_device *, u8, int);
1003:	int ip_tunnel_change_mtu(struct net_device *, int);
1185:	int ip_tunnel_changelink(struct net_device *, struct nlattr **, struct ip_tunnel_parm *, __u32);
862:	int ip_tunnel_ctl(struct net_device *, struct ip_tunnel_parm *, int);
1114:	void ip_tunnel_delete_nets(struct list_head *, unsigned int, struct rtnl_link_ops *);
1018:	void ip_tunnel_dellink(struct net_device *, struct list_head *);
431:	int ip_tunnel_encap_add_ops(const struct ip_tunnel_encap_ops *, unsigned int);
443:	int ip_tunnel_encap_del_ops(const struct ip_tunnel_encap_ops *, unsigned int);
461:	int ip_tunnel_encap_setup(struct ip_tunnel *, struct ip_tunnel_encap *);
1040:	int ip_tunnel_get_iflink(const struct net_device *);
1032:	struct net *ip_tunnel_get_link_net(const struct net_device *);
1223:	int ip_tunnel_init(struct net_device *);
1048:	int ip_tunnel_init_net(struct net *, unsigned int, struct rtnl_link_ops *, char *);
83:	struct ip_tunnel *ip_tunnel_lookup(struct ip_tunnel_net *, int, __be16, __be32, __be32, __be32);
1131:	int ip_tunnel_newlink(struct net_device *, struct nlattr **, struct ip_tunnel_parm *, __u32);
362:	int ip_tunnel_rcv(struct ip_tunnel *, struct sk_buff *, const struct tnl_ptk_info *, struct metadata_dst *, bool);
1276:	void ip_tunnel_setup(struct net_device *, unsigned int);
964:	int ip_tunnel_siocdevprivate(struct net_device *, struct ifreq *, void *, int);
1260:	void ip_tunnel_uninit(struct net_device *);
637:	void ip_tunnel_xmit(struct sk_buff *, struct net_device *, const struct iphdr *, u8);
232:	static struct net_device *__ip_tunnel_create(struct net *, const struct rtnl_link_ops *, struct ip_tunnel_parm *);
279:	static int ip_tunnel_bind_dev(struct net_device *);
1009:	static void ip_tunnel_dev_free(struct net_device *);
827:	static void ip_tunnel_update(struct ip_tunnel_net *, struct ip_tunnel *, struct net_device *, struct ip_tunnel_parm *, bool, __u32);
484:	static int tnl_update_pmtu(struct net_device *, struct sk_buff *, struct rtable *, __be16, const struct iphdr *, int, __be32, bool);

File net/ipv4/ip_tunnel_core.c:
92:	int __iptunnel_pull_header(struct sk_buff *, int, __be16, bool, bool);
1038:	void ip_tunnel_core_init(void);
1053:	void ip_tunnel_need_metadata(void);
1084:	bool ip_tunnel_netlink_encap_parms(struct nlattr **, struct ip_tunnel_encap *);
1118:	void ip_tunnel_netlink_parms(struct nlattr **, struct ip_tunnel_parm *);
1066:	__be16 ip_tunnel_parse_protocol(const struct sk_buff *);
1059:	void ip_tunnel_unneed_metadata(void);
156:	int iptunnel_handle_offloads(struct sk_buff *, int);
125:	struct metadata_dst *iptunnel_metadata_reply(struct metadata_dst *, gfp_t);
50:	void iptunnel_xmit(struct sock *, struct rtable *, struct sk_buff *, __be32, __be32, __u8, __u8, __u8, __be16, bool);
407:	int skb_tunnel_check_pmtu(struct sk_buff *, struct dst_entry *, int, bool);
195:	static int iptunnel_pmtud_build_icmp(struct sk_buff *, int);
288:	static int iptunnel_pmtud_build_icmpv6(struct sk_buff *, int);

File net/ipv4/ipconfig.c:
1403:	__be32 root_nfs_parse_addr(char *);
757:	static void ic_bootp_init_ext(u8 *);
985:	static int ic_bootp_recv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
820:	static void ic_bootp_send_if(struct ic_device *, unsigned long);
318:	static void ic_close_devs(void);
438:	static int ic_defaults(void);
677:	static void ic_dhcp_init_options(u8 *, struct ic_device *);
914:	static void ic_do_bootp_ext(u8 *);
1186:	static int ic_dynamic(void);
200:	static bool ic_is_init_dev(struct net_device *);
210:	static int ic_open_devs(void);
1663:	static int ic_proto_name(char *);
367:	static int ic_setup_if(void);
407:	static int ic_setup_routes(void);
1470:	static int ip_auto_config(void);
1714:	static int ip_auto_config_setup(char *);
1353:	static int ipconfig_proc_net_init(void);
1815:	static int nfsaddrs_config_setup(char *);
1395:	static int ntp_servers_open(struct inode *, struct file *);
1385:	static int ntp_servers_show(struct seq_file *, void *);
1327:	static int pnp_seq_show(struct seq_file *, void *);
1832:	static int set_carrier_timeout(char *);
1821:	static int vendor_class_identifier_setup(char *);
1434:	static int wait_for_devices(void);

File net/ipv4/metrics.c:
66:	struct dst_metrics *ip_fib_metrics_init(struct net *, struct nlattr *, int, struct netlink_ext_ack *);

File net/ipv4/netfilter.c:
20:	int ip_route_me_harder(struct net *, struct sock *, struct sk_buff *, unsigned int);
86:	int nf_ip_route(struct net *, struct dst_entry **, struct flowi *, bool);

File net/ipv4/netfilter/ip_tables.c:
36:	void *ipt_alloc_initial_table(const struct xt_table *);
225:	unsigned int ipt_do_table(void *, struct sk_buff *, const struct nf_hook_state *);
1718:	int ipt_register_table(struct net *, const struct xt_table *, const struct ipt_replace *, const struct nf_hook_ops *);
1791:	void ipt_unregister_table_exit(struct net *, const char *);
1783:	void ipt_unregister_table_pre_exit(struct net *, const char *);
1700:	static void __ipt_unregister_table(struct net *, struct xt_table *);
1645:	static int do_ipt_get_ctl(struct sock *, int, void *, int *);
1616:	static int do_ipt_set_ctl(struct sock *, int, sockptr_t, unsigned int);
1837:	static int icmp_checkentry(const struct xt_mtchk_param *);
1811:	static bool icmp_match(const struct sk_buff *, struct xt_action_param *);
1935:	static void ip_tables_fini(void);
1902:	static int ip_tables_init(void);
1892:	static void ip_tables_net_exit(struct net *);
1887:	static int ip_tables_net_init(struct net *);
94:	static unsigned int ipt_error(struct sk_buff *, const struct xt_action_param *);
662:	static int translate_table(struct net *, struct xt_table_info *, void *, const struct ipt_replace *);

File net/ipv4/netfilter/ipt_REJECT.c:
31:	static unsigned int reject_tg(struct sk_buff *, const struct xt_action_param *);
69:	static int reject_tg_check(const struct xt_tgchk_param *);
105:	static void reject_tg_exit(void);
100:	static int reject_tg_init(void);

File net/ipv4/netfilter/iptable_filter.c:
102:	static void iptable_filter_fini(void);
78:	static int iptable_filter_init(void);
67:	static void iptable_filter_net_exit(struct net *);
54:	static int iptable_filter_net_init(struct net *);
62:	static void iptable_filter_net_pre_exit(struct net *);
37:	static int iptable_filter_table_init(struct net *);

File net/ipv4/netfilter/iptable_mangle.c:
135:	static void iptable_mangle_fini(void);
73:	static unsigned int iptable_mangle_hook(void *, struct sk_buff *, const struct nf_hook_state *);
111:	static int iptable_mangle_init(void);
101:	static void iptable_mangle_net_exit(struct net *);
96:	static void iptable_mangle_net_pre_exit(struct net *);
83:	static int iptable_mangle_table_init(struct net *);

File net/ipv4/netfilter/iptable_nat.c:
163:	static void iptable_nat_exit(void);
146:	static int iptable_nat_init(void);
134:	static void iptable_nat_net_exit(struct net *);
129:	static void iptable_nat_net_pre_exit(struct net *);
106:	static int iptable_nat_table_init(struct net *);

File net/ipv4/netfilter/nf_defrag_ipv4.c:
156:	void nf_defrag_ipv4_disable(struct net *);
130:	int nf_defrag_ipv4_enable(struct net *);
107:	static void defrag4_net_exit(struct net *);
61:	static unsigned int ipv4_conntrack_defrag(void *, struct sk_buff *, const struct nf_hook_state *);
125:	static void nf_defrag_fini(void);
120:	static int nf_defrag_init(void);

File net/ipv4/netfilter/nf_reject_ipv4.c:
139:	const struct tcphdr *nf_reject_ip_tcphdr_get(struct sk_buff *, struct tcphdr *, int);
193:	void nf_reject_ip_tcphdr_put(struct sk_buff *, const struct sk_buff *, const struct tcphdr *);
168:	struct iphdr *nf_reject_iphdr_put(struct sk_buff *, const struct sk_buff *, __u8, int);
39:	struct sk_buff *nf_reject_skb_v4_tcp_reset(struct net *, struct sk_buff *, const struct net_device *, int);
74:	struct sk_buff *nf_reject_skb_v4_unreach(struct net *, struct sk_buff *, const struct net_device *, int, u8);
239:	void nf_send_reset(struct net *, struct sock *, struct sk_buff *, int);
313:	void nf_send_unreach(struct sk_buff *, int, int);
15:	static int nf_reject_iphdr_validate(struct sk_buff *);

File net/ipv4/netlink.c:
10:	int rtm_getroute_parse_ip_proto(struct nlattr *, u8 *, u8, struct netlink_ext_ack *);

File net/ipv4/nexthop.c:
1267:	int fib6_check_nexthop(struct nexthop *, struct fib6_config *, struct netlink_ext_ack *);
1348:	int fib_check_nexthop(struct nexthop *, u8, struct netlink_ext_ack *);
3668:	void nexthop_bucket_set_hw_flags(struct net *, u32, u16, bool, bool);
574:	struct nexthop *nexthop_find_by_id(struct net *, u32);
1226:	int nexthop_for_each_fib6_nh(struct nexthop *, int (*)(struct fib6_nh *, void *), void *);
505:	void nexthop_free_rcu(struct callback_head *);
3702:	void nexthop_res_grp_activity_update(struct net *, u32, u16, unsigned long *);
1208:	struct nexthop *nexthop_select_path(struct nexthop *, int);
3647:	void nexthop_set_hw_flags(struct net *, u32, bool, bool);
3614:	int register_nexthop_notifier(struct net *, struct notifier_block *, struct netlink_ext_ack *);
3631:	int unregister_nexthop_notifier(struct net *, struct notifier_block *);
325:	static int __call_nexthop_res_bucket_notifiers(struct net *, u32, u16, bool, struct nh_info *, struct nh_info *, struct netlink_ext_ack *);
1865:	static void __remove_nexthop(struct net *, struct nexthop *, struct nl_info *);
1843:	static void __remove_nexthop_fib(struct net *, struct nexthop *);
223:	static int call_nexthop_notifiers(struct net *, enum nexthop_event_type, struct nexthop *, struct netlink_ext_ack *);
1311:	static int fib6_check_nh_list(struct nexthop *, struct nexthop *, struct netlink_ext_ack *);
3767:	static int nexthop_init(void);
3737:	static void nexthop_net_exit_batch(struct list_head *);
3749:	static int nexthop_net_init(struct net *);
841:	static void nexthop_notify(int, struct nexthop *, struct nl_info *);
3594:	static int nexthops_dump(struct net *, struct notifier_block *, enum nexthop_event_type, struct netlink_ext_ack *);
693:	static int nh_fill_node(struct sk_buff *, struct nexthop *, int, u32, u32, unsigned int);
914:	static int nh_fill_res_bucket(struct sk_buff *, struct nexthop *, struct nh_res_bucket *, u16, int, u32, u32, unsigned int, struct netlink_ext_ack *);
3566:	static int nh_netdev_event(struct notifier_block *, unsigned long, void *);
203:	static int nh_notifier_info_init(struct nh_notifier_info *, const struct nexthop *);
120:	static int nh_notifier_mpath_info_init(struct nh_notifier_info *, struct nh_group *);
1556:	static void nh_res_table_upkeep(struct nh_res_table *, bool, bool);
1617:	static void nh_res_table_upkeep_dw(struct work_struct *);
2971:	static int nh_valid_get_del_req(const struct nlmsghdr *, u32 *, struct netlink_ext_ack *);
1883:	static void remove_nexthop(struct net *, struct nexthop *, struct nl_info *);
1809:	static void remove_nexthop_from_groups(struct net *, struct nexthop *, struct nl_info *);
1693:	static void replace_nexthop_grp_res(struct nh_group *, struct nh_group *);
2078:	static int replace_nexthop_single_notify(struct net *, struct nexthop *, struct nexthop *, struct nh_info *, struct nh_info *, struct netlink_ext_ack *);
2987:	static int rtm_del_nexthop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3208:	static int rtm_dump_nexthop(struct sk_buff *, struct netlink_callback *);
3409:	static int rtm_dump_nexthop_bucket(struct sk_buff *, struct netlink_callback *);
3338:	static int rtm_dump_nexthop_bucket_nh(struct sk_buff *, struct netlink_callback *, struct nexthop *, struct rtm_dump_nexthop_bucket_data *);
3014:	static int rtm_get_nexthop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
3501:	static int rtm_get_nexthop_bucket(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2928:	static int rtm_new_nexthop(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);

File net/ipv4/ping.c:
425:	int ping_bind(struct sock *, struct sockaddr *, int);
294:	void ping_close(struct sock *, long);
660:	int ping_common_sendmsg(int, struct msghdr *, size_t, void *, size_t);
499:	void ping_err(struct sk_buff *, int, u32);
83:	int ping_get_port(struct sock *, unsigned short);
620:	int ping_getfrag(void *, char *, int, int, int, struct sk_buff *);
150:	int ping_hash(struct sock *);
1204:	void ping_init(void);
262:	int ping_init_sock(struct sock *);
1197:	void ping_proc_exit(void);
1192:	int ping_proc_init(void);
971:	int ping_queue_rcv_skb(struct sock *, struct sk_buff *);
982:	enum skb_drop_reason ping_rcv(struct sk_buff *);
866:	int ping_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
1109:	void *ping_seq_next(struct seq_file *, void *, loff_t *);
1091:	void *ping_seq_start(struct seq_file *, loff_t *, sa_family_t);
1123:	void ping_seq_stop(struct seq_file *, void *);
158:	void ping_unhash(struct sock *);
1081:	static struct sock *ping_get_idx(struct seq_file *, loff_t);
176:	static struct sock *ping_lookup(struct net *, struct sk_buff *, u16);
304:	static int ping_pre_connect(struct sock *, struct sockaddr *, int);
1182:	static void ping_v4_proc_exit_net(struct net *);
1174:	static int ping_v4_proc_init_net(struct net *);
645:	static int ping_v4_push_pending_frames(struct sock *, struct pingfakehdr *, struct flowi4 *);
706:	static int ping_v4_sendmsg(struct sock *, struct msghdr *, size_t);
1151:	static int ping_v4_seq_show(struct seq_file *, void *);
1104:	static void *ping_v4_seq_start(struct seq_file *, loff_t *);

File net/ipv4/proc.c:
555:	int ip_misc_proc_init(void);
543:	static void ip_proc_exit_net(struct net *);
521:	static int ip_proc_init_net(struct net *);
468:	static int netstat_seq_show(struct seq_file *, void *);
453:	static int snmp_seq_show(struct seq_file *, void *);
51:	static int sockstat_seq_show(struct seq_file *, void *);

File net/ipv4/protocol.c:
39:	int inet_add_offload(const struct net_offload *, unsigned char);
32:	int inet_add_protocol(const struct net_protocol *, unsigned char);
59:	int inet_del_offload(const struct net_offload *, unsigned char);
46:	int inet_del_protocol(const struct net_protocol *, unsigned char);

File net/ipv4/raw.c:
903:	int raw_abort(struct sock *, int);
91:	int raw_hash_sk(struct sock *);
263:	void raw_icmp_error(struct sk_buff *, int, u32);
1101:	void raw_init(void);
194:	int raw_local_deliver(struct sk_buff *, int);
1078:	void raw_proc_exit(void);
1072:	int raw_proc_init(void);
301:	int raw_rcv(struct sock *, struct sk_buff *);
996:	void *raw_seq_next(struct seq_file *, void *, loff_t *);
988:	void *raw_seq_start(struct seq_file *, loff_t *);
1009:	void raw_seq_stop(struct seq_file *, void *);
108:	void raw_unhash_sk(struct sock *);
119:	bool raw_v4_match(struct net *, struct sock *, unsigned short, __be32, __be32, int, int);
688:	static int raw_bind(struct sock *, struct sockaddr *, int);
670:	static void raw_close(struct sock *, long);
680:	static void raw_destroy(struct sock *);
1062:	static void raw_exit_net(struct net *);
440:	static int raw_getfrag(void *, char *, int, int, int, struct sk_buff *);
849:	static int raw_getsockopt(struct sock *, int, int, char *, int *);
1053:	static int raw_init_net(struct net *);
857:	static int raw_ioctl(struct sock *, int, unsigned long);
288:	static int raw_rcv_skb(struct sock *, struct sk_buff *);
727:	static int raw_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
316:	static int raw_send_hdrinc(struct sock *, struct flowi4 *, struct msghdr *, size_t, struct rtable **, unsigned int, const struct sockcm_cookie *);
471:	static int raw_sendmsg(struct sock *, struct msghdr *, size_t);
1035:	static int raw_seq_show(struct seq_file *, void *);
829:	static int raw_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
780:	static int raw_sk_init(struct sock *);
1091:	static int raw_sysctl_init(struct net *);

File net/ipv4/route.c:
483:	void __ip_select_ident(struct net *, struct iphdr *, int);
3120:	int fib_dump_info_fnhe(struct sk_buff *, struct netlink_callback *, u32, struct fib_info *, int *, int, unsigned int);
1691:	int ip_mc_validate_source(struct sk_buff *, __be32, __be32, u8, struct net_device *, struct in_device *, u32 *);
1394:	u32 ip_mtu_from_fib_result(struct fib_result *, __be32);
2486:	int ip_route_input_noref(struct sk_buff *, __be32, __be32, u8, struct net_device *);
2870:	struct rtable *ip_route_output_flow(struct net *, struct flowi4 *, const struct sock *);
2628:	struct rtable *ip_route_output_key_hash(struct net *, struct flowi4 *, const struct sk_buff *);
2650:	struct rtable *ip_route_output_key_hash_rcu(struct net *, struct flowi4 *, struct fib_result *, const struct sk_buff *);
2889:	struct rtable *ip_route_output_tunnel(struct sk_buff *, struct net_device *, struct net *, __be32 *, const struct ip_tunnel_info *, u8, bool);
2160:	int ip_route_use_hint(struct sk_buff *, __be32, __be32, u8, struct net_device *, const struct sk_buff *);
1272:	void ip_rt_get_source(u8 *, struct sk_buff *, struct rtable *);
3704:	int ip_rt_init(void);
3447:	void ip_rt_multicast_event(struct in_device *);
874:	void ip_rt_send_redirect(struct sk_buff *);
3780:	void ip_static_sysctl_init(void);
2831:	struct dst_entry *ipv4_blackhole_route(struct net *, struct dst_entry *);
1163:	void ipv4_redirect(struct sk_buff *, struct net *, int, u8);
1179:	void ipv4_sk_redirect(struct sk_buff *, struct sock *);
1109:	void ipv4_sk_update_pmtu(struct sk_buff *, struct sock *, u32);
1073:	void ipv4_update_pmtu(struct sk_buff *, struct net *, u32, int, u8);
1507:	void rt_add_uncached_list(struct rtable *);
398:	void rt_cache_flush(struct net *);
1518:	void rt_del_uncached_list(struct rtable *);
1627:	struct rtable *rt_dst_alloc(struct net_device *, unsigned int, u16, bool);
1658:	struct rtable *rt_dst_clone(struct net_device *, struct rtable *);
1537:	void rt_flush_dev(struct net_device *);
738:	static void __ip_do_redirect(struct rtable *, struct sk_buff *, struct flowi4 *, bool);
1021:	static void __ip_rt_update_pmtu(struct rtable *, struct flowi4 *, u32);
1362:	static struct fib_nh_exception *find_exception(struct fib_nh_common *, __be32);
3280:	static int inet_rtm_getroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
823:	static void ip_do_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
941:	static int ip_error(struct sk_buff *);
2138:	static int ip_mkroute_input(struct sk_buff *, struct fib_result *, struct in_device *, __be32, __be32, u32, struct flow_keys *);
2436:	static int ip_route_input_rcu(struct sk_buff *, __be32, __be32, u8, struct net_device *, struct fib_result *);
1253:	static int ip_rt_bug(struct net *, struct sock *, struct sk_buff *);
367:	static void ip_rt_do_proc_exit(struct net *);
335:	static int ip_rt_do_proc_init(struct net *);
1057:	static void ip_rt_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);
432:	static void ipv4_confirm_neigh(const struct dst_entry *, const void *);
144:	static u32 *ipv4_cow_metrics(struct dst_entry *, unsigned long);
1312:	static unsigned int ipv4_default_advmss(const struct dst_entry *);
1195:	static struct dst_entry *ipv4_dst_check(struct dst_entry *, u32);
1529:	static void ipv4_dst_destroy(struct dst_entry *);
3686:	static void ipv4_inetpeer_exit(struct net *);
3675:	static int ipv4_inetpeer_init(struct net *);
1242:	static void ipv4_link_failure(struct sk_buff *);
1322:	static unsigned int ipv4_mtu(const struct dst_entry *);
840:	static struct dst_entry *ipv4_negative_advice(struct dst_entry *);
403:	static struct neighbour *ipv4_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
3458:	static int ipv4_sysctl_rtcache_flush(struct ctl_table *, int, void *, size_t *, loff_t *);
3650:	static int netns_ip_rt_init(struct net *);
1419:	static bool rt_bind_exception(struct rtable *, struct fib_nh_exception *, __be32, const bool);
1469:	static bool rt_cache_route(struct fib_nh_common *, struct rtable *);
204:	static void *rt_cache_seq_next(struct seq_file *, void *, loff_t *);
214:	static int rt_cache_seq_show(struct seq_file *, void *);
197:	static void *rt_cache_seq_start(struct seq_file *, loff_t *);
210:	static void rt_cache_seq_stop(struct seq_file *, void *);
247:	static void *rt_cpu_seq_next(struct seq_file *, void *, loff_t *);
267:	static int rt_cpu_seq_show(struct seq_file *, void *);
231:	static void *rt_cpu_seq_start(struct seq_file *, loff_t *);
262:	static void rt_cpu_seq_stop(struct seq_file *, void *);
2938:	static int rt_fill_info(struct net *, __be32, __be32, struct rtable *, u32, struct flowi4 *, struct sk_buff *, u32, u32, unsigned int);
3663:	static int rt_genid_init(struct net *);
1568:	static void rt_set_nexthop(struct rtable *, __be32, const struct fib_result *, struct fib_nh_exception *, struct fib_info *, u16, u32, const bool);
3634:	static void sysctl_route_net_exit(struct net *);
3596:	static int sysctl_route_net_init(struct net *);
638:	static void update_or_create_fnhe(struct fib_nh_common *, __be32, __be32, u32, bool, unsigned long);

File net/ipv4/sysctl_net_ipv4.c:
197:	static int ipv4_fwd_update_priority(struct ctl_table *, int, void *, size_t *, loff_t *);
66:	static int ipv4_local_port_range(struct ctl_table *, int, void *, size_t *, loff_t *);
162:	static int ipv4_ping_group_range(struct ctl_table *, int, void *, size_t *, loff_t *);
101:	static int ipv4_privileged_ports(struct ctl_table *, int, void *, size_t *, loff_t *);
1519:	static void ipv4_sysctl_exit_net(struct net *);
1473:	static int ipv4_sysctl_init_net(struct net *);
249:	static int proc_allowed_congestion_control(struct ctl_table *, int, void *, size_t *, loff_t *);
233:	static int proc_tcp_available_congestion_control(struct ctl_table *, int, void *, size_t *, loff_t *);
372:	static int proc_tcp_available_ulp(struct ctl_table *, int, void *, size_t *, loff_t *);
213:	static int proc_tcp_congestion_control(struct ctl_table *, int, void *, size_t *, loff_t *);
389:	static int proc_tcp_ehash_entries(struct ctl_table *, int, void *, size_t *, loff_t *);
286:	static int proc_tcp_fastopen_key(struct ctl_table *, int, void *, size_t *, loff_t *);
357:	static int proc_tfo_blackhole_detect_timeout(struct ctl_table *, int, void *, size_t *, loff_t *);
413:	static int proc_udp_hash_entries(struct ctl_table *, int, void *, size_t *, loff_t *);
1534:	static int sysctl_ipv4_init(void);

File net/ipv4/tcp.c:
2862:	void __tcp_close(struct sock *, long);
3325:	void __tcp_sock_set_cork(struct sock *, bool);
3353:	void __tcp_sock_set_nodelay(struct sock *, bool);
4061:	int do_tcp_getsockopt(struct sock *, int, int, sockptr_t, sockptr_t);
1039:	ssize_t do_tcp_sendpages(struct sock *, struct page *, int, size_t, int);
3492:	int do_tcp_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
4659:	int tcp_abort(struct sock *, int);
4389:	bool tcp_bpf_bypass_getsockopt(int, int);
2848:	bool tcp_check_oom(struct sock *, int);
1621:	void tcp_cleanup_rbuf(struct sock *, int);
3030:	void tcp_close(struct sock *, long);
3081:	int tcp_disconnect(struct sock *, int);
4632:	void tcp_done(struct sock *);
329:	void tcp_enter_memory_pressure(struct sock *);
1159:	void tcp_free_fastopen_req(struct tcp_sock *);
3829:	void tcp_get_info(struct sock *, struct tcp_info *);
3995:	struct sk_buff *tcp_get_timestamping_opt_stats(const struct sock *, const struct sk_buff *, const struct sk_buff *);
4401:	int tcp_getsockopt(struct sock *, int, int, char *, int *);
4739:	void tcp_init(void);
412:	void tcp_init_sock(struct sock *);
599:	int tcp_ioctl(struct sock *, int, unsigned long);
344:	void tcp_leave_memory_pressure(struct sock *);
645:	void tcp_mark_push(struct tcp_sock *, struct sk_buff *);
1889:	int tcp_mmap(struct file *, struct socket *, struct vm_area_struct *);
2822:	int tcp_orphan_count_sum(void);
1838:	int tcp_peek_len(struct socket *);
496:	__poll_t tcp_poll(struct file *, struct socket *, poll_table *);
699:	void tcp_push(struct sock *, int, int, int, int);
1799:	void tcp_read_done(struct sock *, size_t);
1754:	int tcp_read_skb(struct sock *, skb_read_actor_t);
1680:	int tcp_read_sock(struct sock *, read_descriptor_t *, sk_read_actor_t);
1644:	struct sk_buff *tcp_recv_skb(struct sock *, u32, u32 *);
2330:	void tcp_recv_timestamp(struct msghdr *, const struct sock *, struct scm_timestamping_internal *);
2665:	int tcp_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
928:	void tcp_remove_empty_skb(struct sock *);
912:	int tcp_send_mss(struct sock *, int *, int);
1479:	int tcp_sendmsg(struct sock *, struct msghdr *, size_t);
1167:	int tcp_sendmsg_fastopen(struct sock *, struct msghdr *, int *, size_t, struct ubuf_info *);
1214:	int tcp_sendmsg_locked(struct sock *, struct msghdr *, size_t);
1146:	int tcp_sendpage(struct sock *, struct page *, int, size_t, int);
1134:	int tcp_sendpage_locked(struct sock *, struct page *, int, size_t, int);
1845:	int tcp_set_rcvlowat(struct sock *, int);
2697:	void tcp_set_state(struct sock *, int);
3473:	int tcp_set_window_clamp(struct sock *, int);
3796:	int tcp_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
2802:	void tcp_shutdown(struct sock *, int);
656:	void tcp_skb_entail(struct sock *, struct sk_buff *);
3339:	void tcp_sock_set_cork(struct sock *, bool);
3461:	int tcp_sock_set_keepcnt(struct sock *, int);
3438:	int tcp_sock_set_keepidle(struct sock *, int);
3416:	int tcp_sock_set_keepidle_locked(struct sock *, int);
3449:	int tcp_sock_set_keepintvl(struct sock *, int);
3363:	void tcp_sock_set_nodelay(struct sock *);
3388:	void tcp_sock_set_quickack(struct sock *, int);
3396:	int tcp_sock_set_syncnt(struct sock *, int);
3408:	void tcp_sock_set_user_timeout(struct sock *, u32);
769:	ssize_t tcp_splice_read(struct socket *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
858:	struct sk_buff *tcp_stream_alloc_skb(struct sock *, int, gfp_t, bool);
1871:	void tcp_update_recv_tstamps(struct sk_buff *, struct scm_timestamping_internal *);
3065:	void tcp_write_queue_purge(struct sock *);
1571:	static void __tcp_cleanup_rbuf(struct sock *, int);
3371:	static void __tcp_sock_set_quickack(struct sock *, int);
4714:	static int set_thash_entries(char *);
1904:	static skb_frag_t *skb_advance_to_frag(struct sk_buff *, u32, u32 *);
941:	static int tcp_downgrade_zcopy_pure(struct sock *, struct sk_buff *);
3304:	static void tcp_enable_tx_delay(void);
2395:	static int tcp_inq_hint(struct sock *);
2836:	static void tcp_orphan_update(struct timer_list *);
1540:	static int tcp_peek_sndq(struct sock *, struct msghdr *, int);
2424:	static int tcp_recvmsg_locked(struct sock *, struct msghdr *, size_t, int, struct scm_timestamping_internal *, int *);
3251:	static int tcp_repair_options_est(struct sock *, sockptr_t, unsigned int);
3219:	static int tcp_repair_set_window(struct tcp_sock *, sockptr_t, int);
733:	static int tcp_splice_data_recv(read_descriptor_t *, struct sk_buff *, unsigned int, size_t);
2051:	static int tcp_zc_handle_leftover(struct tcp_zerocopy_receive *, struct sock *, struct sk_buff *, u32 *, s32, struct scm_timestamping_internal *);
2186:	static int tcp_zerocopy_receive(struct sock *, struct tcp_zerocopy_receive *, struct scm_timestamping_internal *);
2126:	static int tcp_zerocopy_vm_insert_batch(struct vm_area_struct *, struct page **, unsigned int, unsigned long *, u32 *, u32 *, struct tcp_zerocopy_receive *, u32);
2078:	static int tcp_zerocopy_vm_insert_batch_error(struct vm_area_struct *, struct page **, unsigned long, unsigned long *, u32 *, u32 *, struct tcp_zerocopy_receive *, u32, int);

File net/ipv4/tcp_bpf.c:
641:	void tcp_bpf_clone(const struct sock *, struct sock *);
138:	int tcp_bpf_sendmsg_redir(struct sock *, bool, struct sk_msg *, u32, int);
597:	int tcp_bpf_update_proto(struct sock *, struct sk_psock *, bool);
70:	static int tcp_bpf_push(struct sock *, struct sk_msg *, u32, int, bool);
238:	static int tcp_bpf_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
177:	static int tcp_bpf_recvmsg_parser(struct sock *, struct msghdr *, size_t, int, int *);
279:	static int tcp_bpf_send_verdict(struct sock *, struct sk_psock *, struct sk_msg *, int *, int);
393:	static int tcp_bpf_sendmsg(struct sock *, struct msghdr *, size_t);
481:	static int tcp_bpf_sendpage(struct sock *, struct page *, int, size_t, int);
579:	static int tcp_bpf_v4_build_proto(void);
155:	static int tcp_msg_wait_data(struct sock *, struct sk_psock *, long);

File net/ipv4/tcp_cong.c:
167:	void tcp_assign_congestion_control(struct sock *);
25:	struct tcp_congestion_ops *tcp_ca_find(const char *);
66:	struct tcp_congestion_ops *tcp_ca_find_key(u32);
133:	u32 tcp_ca_get_key_by_name(struct net *, const char *, bool *);
151:	char *tcp_ca_get_name_by_key(u32, char *);
221:	void tcp_cleanup_congestion_control(struct sock *);
420:	void tcp_cong_avoid_ai(struct tcp_sock *, u32, u32);
298:	void tcp_get_allowed_congestion_control(char *, size_t);
269:	void tcp_get_available_congestion_control(char *, size_t);
287:	void tcp_get_default_congestion_control(struct net *, char *);
187:	void tcp_init_congestion_control(struct sock *);
82:	int tcp_register_congestion_control(struct tcp_congestion_ops *);
446:	void tcp_reno_cong_avoid(struct sock *, u32, u32);
465:	u32 tcp_reno_ssthresh(struct sock *);
473:	u32 tcp_reno_undo_cwnd(struct sock *);
319:	int tcp_set_allowed_congestion_control(char *);
37:	void tcp_set_ca_state(struct sock *, const u8);
362:	int tcp_set_congestion_control(struct sock *, const char *, bool, bool);
231:	int tcp_set_default_congestion_control(struct net *, const char *);
406:	u32 tcp_slow_start(struct tcp_sock *, u32);
116:	void tcp_unregister_congestion_control(struct tcp_congestion_ops *);
261:	static int tcp_congestion_default(void);

File net/ipv4/tcp_cubic.c:
448:	static void cubictcp_acked(struct sock *, const struct ack_sample *);
324:	static void cubictcp_cong_avoid(struct sock *, u32, u32);
142:	static void cubictcp_cwnd_event(struct sock *, enum tcp_ca_event);
129:	static void cubictcp_init(struct sock *);
341:	static u32 cubictcp_recalc_ssthresh(struct sock *);
506:	static int cubictcp_register(void);
358:	static void cubictcp_state(struct sock *, u8);
546:	static void cubictcp_unregister(void);

File net/ipv4/tcp_diag.c:
181:	static void tcp_diag_dump(struct sk_buff *, struct netlink_callback *, const struct inet_diag_req_v2 *);
191:	static int tcp_diag_dump_one(struct netlink_callback *, const struct inet_diag_req_v2 *);
242:	static void tcp_diag_exit(void);
112:	static int tcp_diag_get_aux(struct sock *, bool, struct sk_buff *);
144:	static size_t tcp_diag_get_aux_size(struct sock *, bool);
18:	static void tcp_diag_get_info(struct sock *, struct inet_diag_msg *, void *);
237:	static int tcp_diag_init(void);

File net/ipv4/tcp_fastopen.c:
578:	void tcp_fastopen_active_detect_blackhole(struct sock *, bool);
489:	void tcp_fastopen_active_disable(struct sock *);
552:	void tcp_fastopen_active_disable_ofo_check(struct sock *);
512:	bool tcp_fastopen_active_should_disable(struct sock *);
169:	void tcp_fastopen_add_skb(struct sock *, struct sk_buff *);
412:	bool tcp_fastopen_cookie_check(struct sock *, u16 *, struct tcp_fastopen_cookie *);
48:	void tcp_fastopen_ctx_destroy(struct net *);
444:	bool tcp_fastopen_defer_connect(struct sock *, int *);
38:	void tcp_fastopen_destroy_cipher(struct sock *);
94:	int tcp_fastopen_get_cipher(struct net *, struct inet_connection_sock *, u64 *);
7:	void tcp_fastopen_init_key_once(struct net *);
58:	int tcp_fastopen_reset_cipher(struct net *, struct sock *, void *, void *);
345:	struct sock *tcp_try_fastopen(struct sock *, struct sk_buff *, struct request_sock *, struct tcp_fastopen_cookie *, const struct dst_entry *);
30:	static void tcp_fastopen_ctx_free(struct callback_head *);

File net/ipv4/tcp_input.c:
6798:	struct request_sock *inet_reqsk_alloc(const struct request_sock_ops *, struct sock *, bool);
5496:	void tcp_check_space(struct sock *);
2080:	void tcp_clear_retrans(struct tcp_sock *);
6922:	int tcp_conn_request(struct request_sock_ops *, const struct tcp_request_sock_ops *, struct sock *, struct sk_buff *);
2625:	void tcp_cwnd_reduction(struct sock *, int, int, int);
5003:	void tcp_data_ready(struct sock *);
2668:	void tcp_enter_cwr(struct sock *);
2137:	void tcp_enter_loss(struct sock *);
290:	void tcp_enter_quickack_mode(struct sock *, unsigned int);
2801:	void tcp_enter_recovery(struct sock *, bool);
4359:	void tcp_fin(struct sock *);
6062:	void tcp_finish_connect(struct sock *, struct sk_buff *);
6895:	u16 tcp_get_syncookie_mss(struct request_sock_ops *, const struct tcp_request_sock_ops *, struct sock *, struct tcphdr *);
960:	__u32 tcp_init_cwnd(const struct tcp_sock *, const struct dst_entry *);
6034:	void tcp_init_transfer(struct sock *, int, struct sk_buff *);
600:	void tcp_initialize_rcv_mss(struct sock *);
1085:	void tcp_mark_skb_lost(struct sock *, struct sk_buff *);
3615:	bool tcp_oow_rate_limited(struct net *, const struct sk_buff *, int, u32 *);
3990:	u16 tcp_parse_mss_option(const struct tcphdr *, u16);
4035:	void tcp_parse_options(const struct net *, const struct sk_buff *, struct tcp_options_received *, int, struct tcp_fastopen_cookie *);
5150:	void tcp_rbtree_insert(struct rb_root *, struct sk_buff *);
5845:	void tcp_rcv_established(struct sock *, struct sk_buff *);
701:	void tcp_rcv_space_adjust(struct sock *);
6453:	int tcp_rcv_state_process(struct sock *, struct sk_buff *);
3159:	void tcp_rearm_rto(struct sock *);
4312:	void tcp_reset(struct sock *, struct sk_buff *);
4951:	int tcp_send_rcvq(struct sock *, struct msghdr *, size_t);
2748:	void tcp_simple_retransmit(struct sock *);
1526:	int tcp_skb_shift(struct sk_buff *, struct sk_buff *, int, int);
3136:	void tcp_synack_rtt_meas(struct sock *, struct request_sock *);
5517:	static void __tcp_ack_snd_check(struct sock *, int);
3760:	static int tcp_ack(struct sock *, const struct sk_buff *, int);
3087:	static bool tcp_ack_update_rtt(struct sock *, const int, long, long, long, struct rate_sample *);
2040:	static void tcp_add_reno_sack(struct sock *, int, bool);
1032:	static void tcp_check_sack_reordering(struct sock *, const u32, const int);
5595:	static void tcp_check_urg(struct sock *, const struct tcphdr *);
5177:	static void tcp_collapse(struct sock *, struct sk_buff_head *, struct rb_root *, struct sk_buff *, struct sk_buff *, u32, u32);
5132:	static struct sk_buff *tcp_collapse_one(struct sock *, struct sk_buff *, struct sk_buff_head *, struct rb_root *);
5009:	static void tcp_data_queue(struct sock *, struct sk_buff *);
5508:	static void tcp_data_snd_check(struct sock *);
4711:	static void tcp_drop_reason(struct sock *, struct sk_buff *, enum skb_drop_reason);
4460:	static void tcp_dsack_extend(struct sock *, u32, u32);
370:	static void tcp_ecn_check_ce(struct sock *, const struct sk_buff *);
774:	static void tcp_event_data_recv(struct sock *, struct sk_buff *);
2953:	static void tcp_fastretrans_alert(struct sock *, const u32, int, int *, int *);
205:	static void tcp_gro_dev_warn(struct sock *, const struct sk_buff *, unsigned int);
495:	static void tcp_grow_window(struct sock *, const struct sk_buff *, bool);
2341:	static void tcp_mark_head_lost(struct sock *, int, int);
2712:	static void tcp_mtup_probe_failed(struct sock *);
2721:	static void tcp_mtup_probe_success(struct sock *);
3745:	static u32 tcp_newly_delivered(struct sock *, u32, int);
3685:	static void tcp_process_tlp_ack(struct sock *, u32, int);
5342:	static bool tcp_prune_ofo_queue(struct sock *, const struct sk_buff *);
4934:	static int tcp_queue_rcv(struct sock *, struct sk_buff *, bool *);
6092:	static bool tcp_rcv_fastopen_synack(struct sock *, struct sk_buff *, struct tcp_fastopen_cookie *);
674:	static void tcp_rcv_rtt_measure_ts(struct sock *, const struct sk_buff *);
6414:	static void tcp_rcv_synrecv_state_fastopen(struct sock *);
4533:	static void tcp_sack_compress_send_ack(struct sock *);
1345:	static u8 tcp_sacktag_one(struct sock *, struct tcp_sacktag_state *, u8, u32, u32, int, int, u64);
1682:	static struct sk_buff *tcp_sacktag_walk(struct sk_buff *, struct sock *, struct tcp_sack_block *, struct tcp_sacktag_state *, u32, u32, bool);
1809:	static int tcp_sacktag_write_queue(struct sock *, const struct sk_buff *, u32, struct tcp_sacktag_state *);
3627:	static void tcp_send_challenge_ack(struct sock *);
4482:	static void tcp_send_dupack(struct sock *, const struct sk_buff *);
1430:	static bool tcp_shifted_skb(struct sock *, struct sk_buff *, struct sk_buff *, struct tcp_sacktag_state *, unsigned int, int, int, bool);
6826:	static bool tcp_syn_flood_action(const struct sock *, const char *);
4654:	static bool tcp_try_coalesce(struct sock *, struct sk_buff *, struct sk_buff *, bool *);
4771:	static int tcp_try_rmem_schedule(struct sock *, struct sk_buff *, unsigned int);
2562:	static bool tcp_try_undo_dsack(struct sock *);
2578:	static bool tcp_try_undo_loss(struct sock *, bool);
2533:	static bool tcp_try_undo_recovery(struct sock *);
896:	static void tcp_update_pacing_rate(struct sock *);
5661:	static void tcp_urg(struct sock *, struct sk_buff *, const struct tcphdr *);
5706:	static bool tcp_validate_incoming(struct sock *, struct sk_buff *, const struct tcphdr *, int);

File net/ipv4/tcp_ipv4.c:
640:	void __tcp_v4_send_check(struct sk_buff *, __be32, __be32);
3300:	int bpf_iter_tcp(struct bpf_iter_meta *, struct sock_common *, uid_t);
2235:	void inet_sk_rx_dst_set(struct sock *, const struct sk_buff *);
3076:	void tcp4_proc_exit(void);
3071:	int tcp4_proc_init(void);
1809:	bool tcp_add_backlog(struct sock *, struct sk_buff *, enum skb_drop_reason *);
1935:	int tcp_filter(struct sock *, struct sk_buff *);
418:	void tcp_ld_RTO_revert(struct sock *, u32);
393:	void tcp_req_err(struct sock *, u32, bool);
2568:	void *tcp_seq_next(struct seq_file *, void *, loff_t *);
2545:	void *tcp_seq_start(struct seq_file *, loff_t *);
2599:	void tcp_seq_stop(struct seq_file *, void *);
3086:	bool tcp_stream_memory_free(const struct sock *, int);
109:	int tcp_twsk_unique(struct sock *, struct sock *, void *);
1529:	int tcp_v4_conn_request(struct sock *, struct sk_buff *);
200:	int tcp_v4_connect(struct sock *, struct sockaddr *, int);
2288:	void tcp_v4_destroy_sock(struct sock *);
1700:	int tcp_v4_do_rcv(struct sock *, struct sk_buff *);
1770:	int tcp_v4_early_demux(struct sk_buff *);
473:	int tcp_v4_err(struct sk_buff *, u32);
1675:	u16 tcp_v4_get_syncookie(struct sock *, struct iphdr *, struct tcphdr *, u32 *);
3372:	void tcp_v4_init(void);
347:	void tcp_v4_mtu_reduced(struct sock *);
1975:	int tcp_v4_rcv(struct sk_buff *);
650:	void tcp_v4_send_check(struct sock *, struct sk_buff *);
1549:	struct sock *tcp_v4_syn_recv_sock(const struct sock *, struct sk_buff *, struct request_sock *, struct dst_entry *, struct request_sock *, bool *);
3323:	static void bpf_iter_fini_tcp(void *);
3305:	static int bpf_iter_init_tcp(void *, struct bpf_iter_aux_info *);
3363:	static void bpf_iter_register(void);
2859:	static struct sock *bpf_iter_tcp_batch(struct seq_file *);
3339:	static const struct bpf_func_proto *bpf_iter_tcp_get_func_proto(enum bpf_func_id, const struct bpf_prog *);
2785:	static int bpf_iter_tcp_realloc_batch(struct bpf_tcp_iter_state *, unsigned int);
2922:	static void *bpf_iter_tcp_seq_next(struct seq_file *, void *, loff_t *);
2959:	static int bpf_iter_tcp_seq_show(struct seq_file *, void *);
2911:	static void *bpf_iter_tcp_seq_start(struct seq_file *, loff_t *);
3001:	static void bpf_iter_tcp_seq_stop(struct seq_file *, void *);
2432:	static void *established_get_first(struct seq_file *);
2458:	static void *established_get_next(struct seq_file *, void *);
2351:	static void *listening_get_first(struct seq_file *);
2382:	static void *listening_get_next(struct seq_file *, void *);
3061:	static void tcp4_proc_exit_net(struct net *);
3053:	static int tcp4_proc_init_net(struct net *);
2726:	static int tcp4_seq_show(struct seq_file *, void *);
2495:	static void *tcp_get_idx(struct seq_file *, loff_t);
2511:	static void *tcp_seek_last_pos(struct seq_file *);
3148:	static void tcp_sk_exit(struct net *);
3280:	static void tcp_sk_exit_batch(struct list_head *);
3185:	static int tcp_sk_init(struct net *);
1949:	static void tcp_v4_fill_cb(struct sk_buff *, const struct iphdr *, const struct tcphdr *);
96:	static u32 tcp_v4_init_seq(const struct sk_buff *);
2273:	static int tcp_v4_init_sock(struct sock *);
104:	static u32 tcp_v4_init_ts_off(const struct net *, const struct sk_buff *);
184:	static int tcp_v4_pre_connect(struct sock *, struct sockaddr *, int);
1044:	static void tcp_v4_reqsk_destructor(struct request_sock *);
963:	static void tcp_v4_reqsk_send_ack(const struct sock *, struct sk_buff *, struct request_sock *);
1491:	static struct dst_entry *tcp_v4_route_req(const struct sock *, struct sk_buff *, struct flowi *, struct request_sock *);
856:	static void tcp_v4_send_ack(const struct sock *, struct sk_buff *, u32, u32, u32, u32, u32, int, struct tcp_md5sig_key *, int, u8);
677:	static void tcp_v4_send_reset(const struct sock *, struct sk_buff *);
998:	static int tcp_v4_send_synack(const struct sock *, struct dst_entry *, struct flowi *, struct request_sock *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);
944:	static void tcp_v4_timewait_ack(struct sock *, struct sk_buff *);

File net/ipv4/tcp_metrics.c:
544:	void tcp_fastopen_cache_get(struct sock *, u16 *, struct tcp_fastopen_cookie *);
567:	void tcp_fastopen_cache_set(struct sock *, u16, struct tcp_fastopen_cookie *, bool, u16);
444:	void tcp_init_metrics(struct sock *);
1027:	void tcp_metrics_init(void);
523:	bool tcp_peer_is_proven(struct request_sock *, struct dst_entry *);
320:	void tcp_update_metrics(struct sock *);
976:	static int set_tcpmhash_entries(char *);
271:	static struct tcp_metrics_block *tcp_get_metrics(struct sock *, struct dst_entry *, bool);
622:	static int tcp_metrics_fill_info(struct sk_buff *, struct tcp_metrics_block *);
903:	static int tcp_metrics_nl_cmd_del(struct sk_buff *, struct genl_info *);
820:	static int tcp_metrics_nl_cmd_get(struct sk_buff *, struct genl_info *);
745:	static int tcp_metrics_nl_dump(struct sk_buff *, struct netlink_callback *);
1017:	static void tcp_net_metrics_exit_batch(struct list_head *);
991:	static int tcp_net_metrics_init(struct net *);

File net/ipv4/tcp_minisocks.c:
437:	void tcp_ca_openreq_child(struct sock *, const struct dst_entry *);
602:	struct sock *tcp_check_req(struct sock *, struct sk_buff *, struct request_sock *, bool, bool *);
863:	int tcp_child_process(struct sock *, struct sock *, struct sk_buff *);
487:	struct sock *tcp_create_openreq_child(const struct sock *, struct request_sock *, struct sk_buff *);
391:	void tcp_openreq_init_rwin(struct request_sock *, const struct sock *, const struct dst_entry *);
280:	void tcp_time_wait(struct sock *, int, int);
85:	enum tcp_tw_status tcp_timewait_state_process(struct inet_timewait_sock *, struct sk_buff *, const struct tcphdr *);
352:	void tcp_twsk_destructor(struct sock *);
367:	void tcp_twsk_purge(struct list_head *, int);

File net/ipv4/tcp_offload.c:
299:	int tcp_gro_complete(struct sk_buff *);
181:	struct sk_buff *tcp_gro_receive(struct list_head *, struct sk_buff *);
55:	struct sk_buff *tcp_gso_segment(struct sk_buff *, netdev_features_t);
356:	int tcpv4_offload_init(void);
333:	static int tcp4_gro_complete(struct sk_buff *, int);
320:	static struct sk_buff *tcp4_gro_receive(struct list_head *, struct sk_buff *);
30:	static struct sk_buff *tcp4_gso_segment(struct sk_buff *, netdev_features_t);

File net/ipv4/tcp_output.c:
2867:	void __tcp_push_pending_frames(struct sock *, unsigned int, int);
3141:	int __tcp_retransmit_skb(struct sock *, struct sk_buff *, int);
2946:	u32 __tcp_select_window(struct sock *);
3945:	void __tcp_send_ack(struct sock *, u32);
3372:	void sk_forced_mem_schedule(struct sock *, int);
2556:	void tcp_chrono_start(struct sock *, const enum tcp_chrono);
2569:	void tcp_chrono_stop(struct sock *, const enum tcp_chrono);
3834:	int tcp_connect(struct sock *);
1817:	unsigned int tcp_current_mss(struct sock *);
142:	void tcp_cwnd_restart(struct sock *, s32);
1527:	int tcp_fragment(struct sock *, enum tcp_queue, struct sk_buff *, u32, unsigned int, gfp_t);
3518:	struct sk_buff *tcp_make_synack(const struct sock *, struct dst_entry *, struct request_sock *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);
1731:	int tcp_mss_to_mtu(struct sock *, int);
53:	void tcp_mstamp_refresh(struct tcp_sock *);
1722:	int tcp_mtu_to_mss(struct sock *, int);
1754:	void tcp_mtup_init(struct sock *);
1184:	enum hrtimer_restart tcp_pace_kick(struct hrtimer *);
2885:	void tcp_push_one(struct sock *, unsigned int);
1078:	void tcp_release_cb(struct sock *);
3261:	int tcp_retransmit_skb(struct sock *, struct sk_buff *, int);
4116:	int tcp_rtx_synack(const struct sock *, struct request_sock *);
2730:	bool tcp_schedule_loss_probe(struct sock *, bool);
206:	void tcp_select_initial_window(const struct sock *, int, __u32, __u32 *, __u32 *, int, __u8 *, __u32);
3987:	void tcp_send_ack(struct sock *);
3440:	void tcp_send_active_reset(struct sock *, gfp_t);
3892:	void tcp_send_delayed_ack(struct sock *);
3391:	void tcp_send_fin(struct sock *);
2800:	void tcp_send_loss_probe(struct sock *);
4082:	void tcp_send_probe0(struct sock *);
3474:	int tcp_send_synack(struct sock *);
4026:	void tcp_send_window_probe(struct sock *);
3027:	void tcp_skb_collapse_tstamp(struct sk_buff *, const struct sk_buff *);
1792:	unsigned int tcp_sync_mss(struct sock *, u32);
1120:	void tcp_tasklet_init(void);
1663:	int tcp_trim_head(struct sock *, struct sk_buff *, u32);
1137:	void tcp_wfree(struct sk_buff *);
4036:	int tcp_write_wakeup(struct sock *, int);
3291:	void tcp_xmit_retransmit_queue(struct sock *);
1624:	static int __pskb_trim_head(struct sk_buff *, int);
1234:	static int __tcp_transmit_skb(struct sock *, struct sk_buff *, int, gfp_t, u32);
469:	static void bpf_skops_hdr_opt_len(struct sock *, struct sk_buff *, struct request_sock *, struct sk_buff *, enum tcp_synack_type, struct tcp_out_options *, unsigned int *);
2782:	static bool skb_still_in_host_queue(struct sock *, const struct sk_buff *);
1456:	static void tcp_adjust_pcount(struct sock *, const struct sk_buff *, int);
2302:	static bool tcp_can_coalesce_send_queue_head(struct sock *, int);
65:	static void tcp_event_new_data_sent(struct sock *, struct sk_buff *);
2064:	static int tcp_init_tso_segs(struct sk_buff *, unsigned int);
2277:	static void tcp_mtu_check_reprobe(struct sock *);
607:	static void tcp_options_write(struct tcphdr *, struct tcp_sock *, struct tcp_out_options *);
3100:	static void tcp_retrans_try_collapse(struct sock *, struct sk_buff *, int);
759:	static unsigned int tcp_syn_options(struct sock *, struct sk_buff *, struct tcp_out_options *, struct tcp_md5sig_key **);
1041:	static void tcp_tasklet_func(struct tasklet_struct *);
1026:	static void tcp_tsq_handler(struct sock *);
1008:	static void tcp_tsq_write(struct sock *);
1195:	static void tcp_update_skb_after_send(struct sock *, struct sk_buff *, u64);
2601:	static bool tcp_write_xmit(struct sock *, unsigned int, int, int, gfp_t);
4003:	static int tcp_xmit_probe_skb(struct sock *, int, int);

File net/ipv4/tcp_plb.c:
46:	void tcp_plb_check_rehash(struct sock *, struct tcp_plb_state *);
25:	void tcp_plb_update_state(const struct sock *, struct tcp_plb_state *, const int);
91:	void tcp_plb_update_state_upon_rto(struct sock *, struct tcp_plb_state *);

File net/ipv4/tcp_rate.c:
194:	void tcp_rate_check_app_limited(struct sock *);
117:	void tcp_rate_gen(struct sock *, u32, u32, bool, struct rate_sample *);
80:	void tcp_rate_skb_delivered(struct sock *, struct sk_buff *, struct rate_sample *);
40:	void tcp_rate_skb_sent(struct sock *, struct sk_buff *);

File net/ipv4/tcp_recovery.c:
217:	void tcp_newreno_mark_lost(struct sock *, bool);
118:	void tcp_rack_advance(struct tcp_sock *, u8, u32, u64);
95:	bool tcp_rack_mark_lost(struct sock *);
149:	void tcp_rack_reo_timeout(struct sock *);
32:	s32 tcp_rack_skb_timeout(struct tcp_sock *, struct sk_buff *, u32);
187:	void tcp_rack_update_reo_wnd(struct sock *, struct rate_sample *);
58:	static void tcp_rack_detect_loss(struct sock *, u32 *);

File net/ipv4/tcp_timer.c:
43:	u32 tcp_clamp_probe0_to_user_timeout(const struct sock *, u32);
290:	void tcp_delack_timer_handler(struct sock *);
780:	void tcp_init_xmit_timers(struct sock *);
446:	void tcp_retransmit_timer(struct sock *);
655:	void tcp_set_keepalive(struct sock *, int);
647:	void tcp_syn_ack_timeout(const struct request_sock *);
594:	void tcp_write_timer_handler(struct sock *);
209:	static bool retransmits_timed_out(struct sock *, unsigned int, unsigned int);
753:	static enum hrtimer_restart tcp_compressed_ack_kick(struct hrtimer *);
331:	static void tcp_delack_timer(struct timer_list *);
668:	static void tcp_keepalive_timer(struct timer_list *);
102:	static int tcp_out_of_resources(struct sock *, bool);
68:	static void tcp_write_err(struct sock *);
629:	static void tcp_write_timer(struct timer_list *);

File net/ipv4/tcp_ulp.c:
112:	void tcp_cleanup_ulp(struct sock *);
85:	void tcp_get_available_ulp(char *, size_t);
59:	int tcp_register_ulp(struct tcp_ulp_ops *);
157:	int tcp_set_ulp(struct sock *, const char *);
74:	void tcp_unregister_ulp(struct tcp_ulp_ops *);
103:	void tcp_update_ulp(struct sock *, struct proto *, void (*)(struct sock *));

File net/ipv4/tunnel4.c:
63:	int xfrm4_tunnel_deregister(struct xfrm_tunnel *, unsigned short);
31:	int xfrm4_tunnel_register(struct xfrm_tunnel *, unsigned short);
180:	static int tunnel4_err(struct sk_buff *, u32);
277:	static void tunnel4_fini(void);
239:	static int tunnel4_init(void);
95:	static int tunnel4_rcv(struct sk_buff *);
192:	static int tunnel64_err(struct sk_buff *, u32);
141:	static int tunnel64_rcv(struct sk_buff *);

File net/ipv4/udp.c:
1743:	struct sk_buff *__skb_recv_udp(struct sock *, unsigned int, int *, int *);
715:	int __udp4_lib_err(struct sk_buff *, u32, struct udp_table *);
492:	struct sock *__udp4_lib_lookup(struct net *, __be32, __be16, __be32, __be16, int, int, struct udp_table *, struct sk_buff *);
2415:	int __udp4_lib_rcv(struct sk_buff *, struct udp_table *, int);
1968:	int __udp_disconnect(struct sock *, int);
1534:	int __udp_enqueue_schedule_skb(struct sock *, struct sk_buff *);
3413:	int bpf_iter_udp(struct bpf_iter_meta *, struct udp_sock *, uid_t, int);
1638:	void skb_consume_udp(struct sock *, struct sk_buff *, int);
836:	void udp4_hwcsum(struct sk_buff *, __be32, __be32);
552:	struct sock *udp4_lib_lookup_skb(const struct sk_buff *, __be16, __be16);
3244:	void udp4_proc_exit(void);
3239:	int udp4_proc_init(void);
3131:	int udp4_seq_show(struct seq_file *, void *);
2926:	int udp_abort(struct sock *, int);
1028:	int udp_cmsg_send(struct sock *, struct msghdr *, u16 *);
2658:	void udp_destroy_sock(struct sock *);
1608:	void udp_destruct_common(struct sock *);
1996:	int udp_disconnect(struct sock *, int);
608:	void udp_encap_disable(void);
602:	void udp_encap_enable(void);
809:	int udp_err(struct sk_buff *, u32);
3295:	u32 udp_flow_hashrnd(void);
817:	void udp_flush_pending_frames(struct sock *);
2884:	int udp_getsockopt(struct sock *, int, int, char *, int *);
3468:	void udp_init(void);
1630:	int udp_init_sock(struct sock *);
1718:	int udp_ioctl(struct sock *, int, unsigned long);
237:	int udp_lib_get_port(struct sock *, unsigned short, unsigned int);
2823:	int udp_lib_getsockopt(struct sock *, int, int, char *, int *);
2036:	void udp_lib_rehash(struct sock *, u16);
2682:	int udp_lib_setsockopt(struct sock *, int, int, sockptr_t, unsigned int, int (*)(struct sock *));
2005:	void udp_lib_unhash(struct sock *);
2905:	__poll_t udp_poll(struct file *, struct socket *, poll_table *);
1955:	int udp_pre_connect(struct sock *, struct sockaddr *, int);
994:	int udp_push_pending_frames(struct sock *);
2653:	int udp_rcv(struct sk_buff *);
1813:	int udp_read_skb(struct sock *, skb_read_actor_t);
1847:	int udp_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
1052:	int udp_sendmsg(struct sock *, struct msghdr *, size_t);
1332:	int udp_sendpage(struct sock *, struct page *, int, size_t, int);
3077:	void *udp_seq_next(struct seq_file *, void *, loff_t *);
3068:	void *udp_seq_start(struct seq_file *, loff_t *);
3091:	void udp_seq_stop(struct seq_file *, void *);
878:	void udp_set_csum(bool, struct sk_buff *, __be32, __be32, int);
2813:	int udp_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
2260:	bool udp_sk_rx_dst_set(struct sock *, struct dst_entry *);
1495:	void udp_skb_destructor(struct sock *, struct sk_buff *);
3268:	void udp_table_init(struct udp_table *, const char *);
2585:	int udp_v4_early_demux(struct sk_buff *);
352:	int udp_v4_get_port(struct sock *, unsigned short);
2074:	void udp_v4_rehash(struct sock *);
1659:	static struct sk_buff *__first_packet_length(struct sock *, struct sk_buff_head *, int *);
541:	static struct sock *__udp4_lib_lookup_skb(struct sk_buff *, __be16, __be16, struct udp_table *);
2278:	static int __udp4_lib_mcast_deliver(struct net *, struct sk_buff *, struct udphdr *, __be32, __be32, struct udp_table *, int);
3435:	static void bpf_iter_fini_udp(void *);
3416:	static int bpf_iter_init_udp(void *, struct bpf_iter_aux_info *);
3460:	static void bpf_iter_register(void);
3168:	static int bpf_iter_udp_seq_show(struct seq_file *, void *);
3185:	static void bpf_iter_udp_seq_stop(struct seq_file *, void *);
1690:	static int first_packet_length(struct sock *);
420:	static struct sock *lookup_reuseport(struct net *, struct sock *, struct sk_buff *, __be32, __be16, __be32, unsigned short);
3251:	static int set_uhash_entries(char *);
437:	static struct sock *udp4_lib_lookup2(struct net *, __be32, __be16, __be32, unsigned int, int, int, struct udp_hslot *, struct sk_buff *);
3229:	static void udp4_proc_exit_net(struct net *);
3221:	static int udp4_proc_init_net(struct net *);
1624:	static void udp_destruct_sock(struct sock *);
2992:	static struct sock *udp_get_first(struct seq_file *, int);
3029:	static struct sock *udp_get_next(struct seq_file *, struct sock *);
139:	static int udp_lib_lport_inuse(struct net *, __u16, const struct udp_hslot *, unsigned long *, struct sock *, unsigned int);
175:	static int udp_lib_lport_inuse2(struct net *, __u16, struct udp_hslot *, struct sock *);
3402:	static void udp_pernet_exit(struct net *);
3394:	static int udp_pernet_init(struct net *);
2126:	static int udp_queue_rcv_one_skb(struct sock *, struct sk_buff *);
2235:	static int udp_queue_rcv_skb(struct sock *, struct sk_buff *);
1448:	static void udp_rmem_release(struct sock *, int, int, bool);
901:	static int udp_send_skb(struct sk_buff *, struct flowi4 *, struct inet_cork *);
2393:	static int udp_unicast_rcv_skb(struct sock *, struct sk_buff *, struct udphdr *);

File net/ipv4/udp_bpf.c:
138:	int udp_bpf_update_proto(struct sock *, struct sk_psock *, bool);
62:	static int udp_bpf_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
131:	static int udp_bpf_v4_build_proto(void);

File net/ipv4/udp_offload.c:
264:	struct sk_buff *__udp_gso_segment(struct sk_buff *, netdev_features_t, bool);
152:	struct sk_buff *skb_udp_tunnel_segment(struct sk_buff *, netdev_features_t, bool);
662:	int udp_gro_complete(struct sk_buff *, int, udp_lookup_t);
538:	struct sk_buff *udp_gro_receive(struct list_head *, struct sk_buff *, struct udphdr *, struct sock *);
738:	int udpv4_offload_init(void);
191:	static void __udpv4_gso_segment_csum(struct sk_buff *, __be32 *, __be32 *, __be16 *, __be16 *);
429:	static int skb_gro_receive_list(struct sk_buff *, struct sk_buff *);
700:	static int udp4_gro_complete(struct sk_buff *, int);
612:	static struct sk_buff *udp4_gro_receive(struct list_head *, struct sk_buff *);
368:	static struct sk_buff *udp4_ufo_fragment(struct sk_buff *, netdev_features_t);

File net/ipv4/udplite.c:
115:	void udplite4_register(void);
94:	static void udplite4_proc_exit_net(struct net *);
86:	static int udplite4_proc_init_net(struct net *);
33:	static int udplite_err(struct sk_buff *, u32);
28:	static int udplite_rcv(struct sk_buff *);
21:	static int udplite_sk_init(struct sock *);

File net/ipv6/addrconf.c:
3045:	int addrconf_add_ifaddr(struct net *, void *);
3194:	void addrconf_add_linklocal(struct inet6_dev *, const struct in6_addr *, u32);
7365:	void addrconf_cleanup(void);
2097:	void addrconf_dad_failure(struct sk_buff *, struct inet6_ifaddr *);
3070:	int addrconf_del_ifaddr(struct net *, void *);
7276:	int addrconf_init(void);
2172:	void addrconf_join_solict(struct net_device *, const struct in6_addr *);
2184:	void addrconf_leave_solict(struct inet6_dev *, const struct in6_addr *);
2687:	void addrconf_prefix_rcv(struct net_device *, u8 *, int, bool);
2585:	int addrconf_prefix_rcv_add_addr(struct net *, struct net_device *, const struct prefix_info *, struct inet6_dev *, const struct in6_addr *, int, u32, bool, bool, __u32, u32);
2871:	int addrconf_set_dstaddr(struct net *, void *);
4419:	void if6_proc_exit(void);
4414:	int if6_proc_init(void);
968:	void inet6_ifa_finish_destroy(struct inet6_ifaddr *);
6046:	void inet6_ifinfo_notify(int, struct inet6_dev *);
575:	void inet6_netconf_notify_devconf(struct net *, int, int, int, struct ipv6_devconf *);
1895:	int ipv6_chk_addr(struct net *, const struct in6_addr *, const struct net_device *, int);
1953:	int ipv6_chk_addr_and_flags(struct net *, const struct in6_addr *, const struct net_device *, bool, int, u32);
1966:	bool ipv6_chk_custom_prefix(const struct in6_addr *, const unsigned int, struct net_device *);
1988:	int ipv6_chk_prefix(const struct in6_addr *, struct net_device *);
4456:	int ipv6_chk_rpl_srh_loop(struct net *, const struct in6_addr *, unsigned char);
2018:	struct net_device *ipv6_dev_find(struct net *, const struct in6_addr *, struct net_device *);
1749:	int ipv6_dev_get_saddr(struct net *, const struct net_device *, const struct in6_addr *, unsigned int, struct in6_addr *);
2026:	struct inet6_ifaddr *ipv6_get_ifaddr(struct net *, const struct in6_addr *, struct net_device *, int);
1866:	int ipv6_get_lladdr(struct net_device *, struct in6_addr *, u32);
7063:	static int __addrconf_sysctl_register(struct net *, char *, struct inet6_dev *, struct ipv6_devconf *);
1913:	static struct net_device *__ipv6_chk_addr_and_flags(struct net *, const struct in6_addr *, const struct net_device *, bool, int, u32);
1655:	static int __ipv6_dev_get_saddr(struct net *, struct ipv6_saddr_dst *, struct inet6_dev *, struct ipv6_saddr_score *, int);
6142:	static void __ipv6_ifa_notify(int, struct inet6_ifaddr *);
3088:	static void add_addr(struct inet6_dev *, const struct in6_addr *, int, int, u8);
2492:	static struct inet6_dev *addrconf_add_dev(struct net_device *);
3314:	static void addrconf_addr_gen(struct inet6_dev *, bool);
4201:	static void addrconf_dad_completed(struct inet6_ifaddr *, bool, bool);
4276:	static void addrconf_dad_run(struct inet6_dev *, bool);
4058:	static void addrconf_dad_start(struct inet6_ifaddr *);
2050:	static void addrconf_dad_stop(struct inet6_ifaddr *, int);
4073:	static void addrconf_dad_work(struct work_struct *);
6535:	static void addrconf_disable_policy_idev(struct inet6_dev *, int);
7233:	static void addrconf_exit_net(struct net *);
2429:	static struct fib6_info *addrconf_get_prefix_route(const struct in6_addr *, int, const struct net_device *, u32, u32, bool);
3742:	static int addrconf_ifdown(struct net_device *, bool);
3450:	static void addrconf_init_auto_addrs(struct net_device *);
7153:	static int addrconf_init_net(struct net *);
301:	static bool addrconf_link_ready(const struct net_device *);
326:	static void addrconf_mod_dad_work(struct inet6_ifaddr *, unsigned long);
318:	static void addrconf_mod_rs_timer(struct inet6_dev *, unsigned long);
3538:	static int addrconf_notify(struct notifier_block *, unsigned long, void *);
3511:	static void addrconf_permanent_addr(struct net *, struct net_device *);
2398:	static void addrconf_prefix_route(struct in6_addr *, int, u32, struct net_device *, unsigned long, u32, gfp_t);
3916:	static void addrconf_rs_timer(struct timer_list *);
6368:	static int addrconf_sysctl_addr_gen_mode(struct ctl_table *, int, void *, size_t *, loff_t *);
6302:	static int addrconf_sysctl_disable(struct ctl_table *, int, void *, size_t *, loff_t *);
6598:	static int addrconf_sysctl_disable_policy(struct ctl_table *, int, void *, size_t *, loff_t *);
6206:	static int addrconf_sysctl_forward(struct ctl_table *, int, void *, size_t *, loff_t *);
6497:	static int addrconf_sysctl_ignore_routes_with_linkdown(struct ctl_table *, int, void *, size_t *, loff_t *);
6231:	static int addrconf_sysctl_mtu(struct ctl_table *, int, void *, size_t *, loff_t *);
6327:	static int addrconf_sysctl_proxy_ndp(struct ctl_table *, int, void *, size_t *, loff_t *);
7124:	static int addrconf_sysctl_register(struct inet6_dev *);
6430:	static int addrconf_sysctl_stable_secret(struct ctl_table *, int, void *, size_t *, loff_t *);
7143:	static void addrconf_sysctl_unregister(struct inet6_dev *);
4501:	static void addrconf_verify_rtnl(struct net *);
4624:	static void addrconf_verify_work(struct work_struct *);
1206:	static enum cleanup_prefix_rt_t check_cleanup_prefix_route(struct inet6_ifaddr *, unsigned long *);
1244:	static void cleanup_prefix_route(struct inet6_ifaddr *, unsigned long, bool, bool);
796:	static void dev_forward_change(struct inet6_dev *);
4404:	static void if6_proc_net_exit(struct net *);
4396:	static int if6_proc_net_init(struct net *);
4361:	static void *if6_seq_next(struct seq_file *, void *, loff_t *);
4376:	static int if6_seq_show(struct seq_file *, void *);
4354:	static void *if6_seq_start(struct seq_file *, loff_t *);
4370:	static void if6_seq_stop(struct seq_file *, void *);
5151:	static int in6_dump_addrs(struct inet6_dev *, struct sk_buff *, struct netlink_callback *, int, struct inet6_fill_args *);
2910:	static int inet6_addr_add(struct net *, int, struct ifa6_config *, struct netlink_ext_ack *);
3002:	static int inet6_addr_del(struct net *, int, u32, const struct in6_addr *, unsigned int);
5271:	static int inet6_dump_addr(struct sk_buff *, struct netlink_callback *, enum addr_type_t);
5365:	static int inet6_dump_ifacaddr(struct sk_buff *, struct netlink_callback *);
5350:	static int inet6_dump_ifaddr(struct sk_buff *, struct netlink_callback *);
5997:	static int inet6_dump_ifinfo(struct sk_buff *, struct netlink_callback *);
5357:	static int inet6_dump_ifmcaddr(struct sk_buff *, struct netlink_callback *);
5011:	static int inet6_fill_ifaddr(struct sk_buff *, struct inet6_ifaddr *, struct inet6_fill_args *);
5927:	static int inet6_fill_ifinfo(struct sk_buff *, struct inet6_dev *, u32, u32, int, unsigned int);
5675:	static int inet6_fill_ifla6_attrs(struct sk_buff *, struct inet6_dev *, u32);
5738:	static int inet6_fill_link_af(struct sk_buff *, const struct net_device *, u32);
5729:	static size_t inet6_get_link_af_size(const struct net_device *, u32);
708:	static int inet6_netconf_dump_devconf(struct sk_buff *, struct netlink_callback *);
522:	static int inet6_netconf_fill_devconf(struct sk_buff *, int, struct ipv6_devconf *, u32, u32, int, unsigned int, int);
645:	static int inet6_netconf_get_devconf(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4669:	static int inet6_rtm_deladdr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5418:	static int inet6_rtm_getaddr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
4855:	static int inet6_rtm_newaddr(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5898:	static int inet6_set_link_af(struct net_device *, const struct nlattr *, struct netlink_ext_ack *);
5864:	static int inet6_validate_link_af(const struct net_device *, const struct nlattr *, struct netlink_ext_ack *);
1055:	static struct inet6_ifaddr *ipv6_add_addr(struct inet6_dev *, struct ifa6_config *, bool, struct netlink_ext_ack *);
1031:	static int ipv6_add_addr_hash(struct net_device *, struct inet6_ifaddr *);
368:	static struct inet6_dev *ipv6_add_dev(struct net_device *);
1323:	static int ipv6_create_tempaddr(struct inet6_ifaddr *, bool);
1266:	static void ipv6_del_addr(struct inet6_ifaddr *);
2313:	static int ipv6_generate_eui64(u8 *, struct net_device *);
3241:	static int ipv6_generate_stable_address(struct in6_addr *, u8, const struct inet6_dev *);
1521:	static int ipv6_get_saddr_eval(struct net *, struct ipv6_saddr_score *, struct ipv6_saddr_dst *, int);
2340:	static int ipv6_inherit_eui64(u8 *, struct inet6_dev *);
991:	static void ipv6_link_dev_addr(struct inet6_dev *, struct inet6_ifaddr *);
2890:	static int ipv6_mc_config(struct sock *, bool, const struct in6_addr *, int);
2512:	static void manage_tempaddrs(struct inet6_dev *, struct inet6_ifaddr *, __u32, __u32, bool, unsigned long);
4698:	static int modify_prefix_route(struct inet6_ifaddr *, unsigned long, u32, bool);
112:	static s32 rfc3315_s14_backoff_update(s32, s32);

File net/ipv6/addrconf_core.c:
38:	int __ipv6_addr_type(const struct in6_addr *);
255:	void in6_dev_finish_destroy(struct inet6_dev *);
107:	int inet6addr_notifier_call_chain(unsigned long, void *);
126:	int inet6addr_validator_notifier_call_chain(unsigned long, void *);
95:	int register_inet6addr_notifier(struct notifier_block *);
113:	int register_inet6addr_validator_notifier(struct notifier_block *);
101:	int unregister_inet6addr_notifier(struct notifier_block *);
119:	int unregister_inet6addr_validator_notifier(struct notifier_block *);
145:	static struct fib6_table *eafnosupport_fib6_get_table(struct net *, u32);
159:	static int eafnosupport_fib6_lookup(struct net *, int, struct flowi6 *, struct fib6_result *, int);
180:	static int eafnosupport_fib6_nh_init(struct net *, struct fib6_nh *, struct fib6_config *, gfp_t, struct netlink_ext_ack *);
166:	static void eafnosupport_fib6_select_path(const struct net *, struct fib6_result *, struct flowi6 *, int, bool, const struct sk_buff *, int);
151:	static int eafnosupport_fib6_table_lookup(struct net *, struct fib6_table *, int, struct flowi6 *, struct fib6_result *, int);
188:	static int eafnosupport_ip6_del_rt(struct net *, struct fib6_info *, bool);
173:	static u32 eafnosupport_ip6_mtu_from_fib6(const struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
201:	static struct net_device *eafnosupport_ipv6_dev_find(struct net *, const struct in6_addr *, struct net_device *);
132:	static struct dst_entry *eafnosupport_ipv6_dst_lookup_flow(struct net *, const struct sock *, struct flowi6 *, const struct in6_addr *);
194:	static int eafnosupport_ipv6_fragment(struct net *, struct sock *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
140:	static int eafnosupport_ipv6_route_input(struct sk_buff *);
245:	static void in6_dev_finish_destroy_rcu(struct callback_head *);

File net/ipv6/addrlabel.c:
140:	u32 ipv6_addr_label(struct net *, const struct in6_addr *, int, int);
362:	void ipv6_addr_label_cleanup(void);
357:	int ipv6_addr_label_init(void);
634:	int ipv6_addr_label_rtnl_register(void);
372:	static bool addrlbl_ifindex_exists(struct net *, int);
242:	static int ip6addrlbl_add(struct net *, const struct in6_addr *, int, int, u32, int);
289:	static int ip6addrlbl_del(struct net *, const struct in6_addr *, int, int);
495:	static int ip6addrlbl_dump(struct sk_buff *, struct netlink_callback *);
447:	static int ip6addrlbl_fill(struct sk_buff *, struct ip6addrlbl_entry *, u32, u32, u32, int, unsigned int);
579:	static int ip6addrlbl_get(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
338:	static void ip6addrlbl_net_exit(struct net *);
307:	static int ip6addrlbl_net_init(struct net *);
384:	static int ip6addrlbl_newdel(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);

File net/ipv6/af_inet6.c:
448:	int inet6_bind(struct socket *, struct sockaddr *, int);
493:	void inet6_cleanup_sock(struct sock *);
523:	int inet6_getname(struct socket *, struct sockaddr *, int);
564:	int inet6_ioctl(struct socket *, unsigned int, unsigned long);
666:	int inet6_recvmsg(struct socket *, struct msghdr *, size_t, int);
753:	int inet6_register_protosw(struct inet_protosw *);
476:	int inet6_release(struct socket *);
650:	int inet6_sendmsg(struct socket *, struct msghdr *, size_t);
825:	int inet6_sk_rebuild_header(struct sock *);
112:	void inet6_sock_destruct(struct sock *);
810:	void inet6_unregister_protosw(struct inet_protosw *);
99:	bool ipv6_mod_enabled(void);
868:	bool ipv6_opt_accepted(const struct sock *, const struct sk_buff *, const struct inet6_skb_parm *);
286:	static int __inet6_bind(struct sock *, struct sockaddr *, int, u32);
119:	static int inet6_create(struct net *, struct socket *, int, int);
1071:	static int inet6_init(void);
1015:	static void inet6_net_exit(struct net *);
955:	static int inet6_net_init(struct net *);
1030:	static int ipv6_route_input(struct sk_buff *);

File net/ipv6/anycast.c:
345:	int __ipv6_dev_ac_dec(struct inet6_dev *, const struct in6_addr *);
284:	int __ipv6_dev_ac_inc(struct inet6_dev *, const struct in6_addr *);
186:	void __ipv6_sock_ac_close(struct sock *);
594:	void ac6_proc_exit(struct net *);
585:	int ac6_proc_init(struct net *);
390:	void ipv6_ac_destroy_dev(struct inet6_dev *);
611:	void ipv6_anycast_cleanup(void);
602:	int ipv6_anycast_init(void);
436:	bool ipv6_chk_acast_addr(struct net *, struct net_device *, const struct in6_addr *);
467:	bool ipv6_chk_acast_addr_src(struct net *, struct net_device *, const struct in6_addr *);
213:	void ipv6_sock_ac_close(struct sock *);
155:	int ipv6_sock_ac_drop(struct sock *, int, const struct in6_addr *);
63:	int ipv6_sock_ac_join(struct sock *, int, const struct in6_addr *);
547:	static void *ac6_seq_next(struct seq_file *, void *, loff_t *);
567:	static int ac6_seq_show(struct seq_file *, void *);
540:	static void *ac6_seq_start(struct seq_file *, loff_t *);
555:	static void ac6_seq_stop(struct seq_file *, void *);
245:	static void aca_free_rcu(struct callback_head *);

File net/ipv6/datagram.c:
139:	int __ip6_datagram_connect(struct sock *, struct sockaddr *, int);
1048:	void __ip6_dgram_sock_seq_show(struct seq_file *, struct sock *, __u16, __u16, int, int);
272:	int ip6_datagram_connect(struct sock *, struct sockaddr *, int);
283:	int ip6_datagram_connect_v6_only(struct sock *, struct sockaddr *, int);
71:	int ip6_datagram_dst_update(struct sock *, bool);
595:	void ip6_datagram_recv_common_ctl(struct sock *, struct msghdr *, struct sk_buff *);
751:	void ip6_datagram_recv_ctl(struct sock *, struct msghdr *, struct sk_buff *);
620:	void ip6_datagram_recv_specific_ctl(struct sock *, struct msghdr *, struct sk_buff *);
119:	void ip6_datagram_release_cb(struct sock *);
759:	int ip6_datagram_send_ctl(struct net *, struct sock *, struct msghdr *, struct flowi6 *, struct ipcm6_cookie *);
304:	void ipv6_icmp_error(struct sock *, struct sk_buff *, int, __be16, u32, u8 *);
344:	void ipv6_local_error(struct sock *, int, struct flowi6 *, u32);
384:	void ipv6_local_rxpmtu(struct sock *, struct flowi6 *, u32);
454:	int ipv6_recv_error(struct sock *, struct msghdr *, int, int *);
547:	int ipv6_recv_rxpmtu(struct sock *, struct msghdr *, int, int *);

File net/ipv6/exthdrs.c:
1349:	struct ipv6_txoptions *__ipv6_fixup_options(struct ipv6_txoptions *, struct ipv6_txoptions *);
1380:	struct in6_addr *fl6_update_dst(struct flowi6 *, const struct ipv6_txoptions *, struct in6_addr *);
1233:	struct ipv6_txoptions *ipv6_dup_options(struct sock *, struct ipv6_txoptions *);
908:	void ipv6_exthdrs_exit(void);
883:	int ipv6_exthdrs_init(void);
1063:	int ipv6_parse_hopopts(struct sk_buff *);
1225:	void ipv6_push_frag_opts(struct sk_buff *, struct ipv6_txoptions *, u8 *);
1208:	void ipv6_push_nfrag_opts(struct sk_buff *, struct ipv6_txoptions *, u8 *, struct in6_addr **, struct in6_addr *);
1293:	struct ipv6_txoptions *ipv6_renew_options(struct sock *, struct ipv6_txoptions *, int, struct ipv6_opt_hdr *);
113:	static bool ip6_parse_tlv(bool, struct sk_buff *, int);
295:	static int ipv6_destopt_rcv(struct sk_buff *);
489:	static int ipv6_rpl_srh_rcv(struct sk_buff *);
680:	static int ipv6_rthdr_rcv(struct sk_buff *);
369:	static int ipv6_srh_rcv(struct sk_buff *);

File net/ipv6/exthdrs_core.c:
13:	bool ipv6_ext_hdr(u8);
186:	int ipv6_find_hdr(const struct sk_buff *, unsigned int *, int, unsigned short *, int *);
116:	int ipv6_find_tlv(const struct sk_buff *, int, int);
72:	int ipv6_skip_exthdr(const struct sk_buff *, int, u8 *, __be16 *);

File net/ipv6/exthdrs_offload.c:
19:	int ipv6_exthdrs_offload_init(void);

File net/ipv6/fib6_notifier.c:
10:	int call_fib6_notifier(struct notifier_block *, enum fib_event_type, struct fib_notifier_info *);
18:	int call_fib6_notifiers(struct net *, enum fib_event_type, struct fib_notifier_info *);
61:	void fib6_notifier_exit(struct net *);
49:	int fib6_notifier_init(struct net *);
30:	static int fib6_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
25:	static unsigned int fib6_seq_read(struct net *);

File net/ipv6/icmp.c:
440:	void icmp6_send(struct sk_buff *, u8, u8, __u32, const struct in6_addr *, const struct inet6_skb_parm *);
1074:	void icmpv6_cleanup(void);
1115:	int icmpv6_err_convert(u8, u8, int *);
1020:	void icmpv6_flow_init(struct sock *, struct flowi6 *, u8, const struct in6_addr *, const struct in6_addr *, int);
1036:	int icmpv6_init(void);
815:	void icmpv6_notify(struct sk_buff *, u8, u8, __be32);
634:	void icmpv6_param_prob_reason(struct sk_buff *, u8, int, enum skb_drop_reason);
268:	void icmpv6_push_pending_frames(struct sock *, struct flowi6 *, struct icmp6hdr *, int);
647:	int ip6_err_gen_icmpv6_unreach(struct sk_buff *, int, int, unsigned int);
1188:	struct ctl_table *ipv6_icmp_sysctl_init(struct net *);
707:	static void icmpv6_echo_reply(struct sk_buff *);
74:	static int icmpv6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
312:	static int icmpv6_getfrag(void *, char *, int, int, int, struct sk_buff *);
866:	static int icmpv6_rcv(struct sk_buff *);
349:	static struct dst_entry *icmpv6_route_lookup(struct net *, struct sk_buff *, struct sock *, struct flowi6 *);
231:	static bool icmpv6_rt_has_prefsrc(struct sock *, u8, struct flowi6 *);
192:	static bool icmpv6_xrlim_allow(struct sock *, u8, struct flowi6 *);

File net/ipv6/inet6_connection_sock.c:
59:	void inet6_csk_addr2sockaddr(struct sock *, struct sockaddr *);
27:	struct dst_entry *inet6_csk_route_req(const struct sock *, struct flowi6 *, const struct request_sock *, u8);
142:	struct dst_entry *inet6_csk_update_pmtu(struct sock *, u32);
114:	int inet6_csk_xmit(struct sock *, struct sk_buff *, struct flowi *);
79:	static struct dst_entry *inet6_csk_route_socket(struct sock *, struct flowi6 *);

File net/ipv6/inet6_hashtables.c:
49:	struct sock *__inet6_lookup_established(struct net *, struct inet_hashinfo *, const struct in6_addr *, const __be16, const struct in6_addr *, const u16, const int, const int);
24:	u32 inet6_ehashfn(const struct net *, const struct in6_addr *, const u16, const struct in6_addr *, const __be16);
329:	int inet6_hash(struct sock *);
317:	int inet6_hash_connect(struct inet_timewait_death_row *, struct sock *);
226:	struct sock *inet6_lookup(struct net *, struct inet_hashinfo *, struct sk_buff *, int, const struct in6_addr *, const __be16, const struct in6_addr *, const __be16, const int);
184:	struct sock *inet6_lookup_listener(struct net *, struct inet_hashinfo *, struct sk_buff *, int, const struct in6_addr *, const __be16, const struct in6_addr *, const unsigned short, const int, const int);
243:	static int __inet6_check_established(struct inet_timewait_death_row *, struct sock *, const __u16, struct inet_timewait_sock **);
132:	static struct sock *inet6_lhash2_lookup(struct net *, struct inet_listen_hashbucket *, struct sk_buff *, int, const struct in6_addr *, const __be16, const struct in6_addr *, const unsigned short, const int, const int);

File net/ipv6/ioam6.c:
972:	void ioam6_exit(void);
861:	void ioam6_fill_trace_data(struct sk_buff *, struct ioam6_namespace *, struct ioam6_trace_hdr *, bool);
943:	int ioam6_init(void);
626:	struct ioam6_namespace *ioam6_namespace(struct net *, __be16);
33:	static void ioam6_free_ns(void *, void *);
41:	static void ioam6_free_sc(void *, void *);
107:	static int ioam6_genl_addns(struct sk_buff *, struct genl_info *);
312:	static int ioam6_genl_addsc(struct sk_buff *, struct genl_info *);
161:	static int ioam6_genl_delns(struct sk_buff *, struct genl_info *);
360:	static int ioam6_genl_delsc(struct sk_buff *, struct genl_info *);
274:	static int ioam6_genl_dumpns(struct sk_buff *, struct netlink_callback *);
264:	static int ioam6_genl_dumpns_done(struct netlink_callback *);
246:	static int ioam6_genl_dumpns_start(struct netlink_callback *);
460:	static int ioam6_genl_dumpsc(struct sk_buff *, struct netlink_callback *);
450:	static int ioam6_genl_dumpsc_done(struct netlink_callback *);
432:	static int ioam6_genl_dumpsc_start(struct netlink_callback *);
498:	static int ioam6_genl_ns_set_schema(struct sk_buff *, struct genl_info *);
928:	static void ioam6_net_exit(struct net *);
898:	static int ioam6_net_init(struct net *);
49:	static int ioam6_ns_cmpfn(struct rhashtable_compare_arg *, const void *);
56:	static int ioam6_sc_cmpfn(struct rhashtable_compare_arg *, const void *);

File net/ipv6/ip6_checksum.c:
65:	int udp6_csum_init(struct sk_buff *, struct udphdr *, int);
115:	void udp6_set_csum(bool, struct sk_buff *, const struct in6_addr *, const struct in6_addr *, int);

File net/ipv6/ip6_fib.c:
390:	int call_fib6_entry_notifiers(struct net *, enum fib_event_type, struct fib6_info *, struct netlink_ext_ack *);
420:	int call_fib6_entry_notifiers_replace(struct net *, struct fib6_info *);
404:	int call_fib6_multipath_entry_notifiers(struct net *, enum fib_event_type, struct fib6_info *, unsigned int, struct netlink_ext_ack *);
1374:	int fib6_add(struct fib6_node *, struct fib6_info *, struct nl_info *, struct netlink_ext_ack *);
2264:	void fib6_clean_all(struct net *, int (*)(struct fib6_info *, void *), void *);
2270:	void fib6_clean_all_skip_notify(struct net *, int (*)(struct fib6_info *, void *), void *);
1999:	int fib6_del(struct fib6_info *, struct nl_info *);
1332:	void fib6_force_start_gc(struct net *);
2478:	void fib6_gc_cleanup(void);
307:	struct fib6_table *fib6_get_table(struct net *, u32);
147:	struct fib6_info *fib6_info_alloc(gfp_t, bool);
166:	void fib6_info_destroy_rcu(struct callback_head *);
2447:	int fib6_init(void);
1707:	struct fib6_node *fib6_locate(struct fib6_node *, const struct in6_addr *, int, const struct in6_addr *, int, bool);
331:	int fib6_lookup(struct net *, int, struct flowi6 *, struct fib6_result *, int);
714:	void fib6_metric_set(struct fib6_info *, int, u32);
302:	struct fib6_table *fib6_new_table(struct net *, u32);
1617:	struct fib6_node *fib6_node_lookup(struct fib6_node *, const struct in6_addr *, const struct in6_addr *);
312:	struct dst_entry *fib6_rule_lookup(struct net *, struct flowi6 *, const struct sk_buff *, int, pol_lookup_t);
2315:	void fib6_run_gc(unsigned long, struct net *, bool);
479:	int fib6_tables_dump(struct net *, struct notifier_block *, struct netlink_ext_ack *);
345:	unsigned int fib6_tables_seq_read(struct net *);
107:	void fib6_update_sernum(struct net *, struct fib6_info *);
1360:	void fib6_update_sernum_stub(struct net *, struct fib6_info *);
1354:	void fib6_update_sernum_upto_root(struct net *, struct fib6_info *);
2243:	static void __fib6_clean_all(struct net *, int (*)(struct fib6_info *, void *), int, void *, bool);
955:	static void __fib6_drop_pcpu_from(struct fib6_nh *, const struct fib6_info *, const struct fib6_table *);
2288:	static int fib6_age(struct fib6_info *, void *);
2166:	static int fib6_clean_node(struct fib6_walker *);
566:	static int fib6_dump_done(struct netlink_callback *);
515:	static int fib6_dump_node(struct fib6_walker *);
572:	static int fib6_dump_table(struct fib6_table *, struct sk_buff *, struct netlink_callback *);
2277:	static void fib6_flush_trees(struct net *);
2343:	static void fib6_gc_timer_cb(struct timer_list *);
2420:	static void fib6_net_exit(struct net *);
2350:	static int fib6_net_init(struct net *);
993:	static int fib6_nh_drop_pcpu_from(struct fib6_nh *, void *);
457:	static int fib6_node_dump(struct fib6_walker *);
1026:	static void fib6_purge_rt(struct fib6_info *, struct fib6_node *, struct net *);
1777:	static struct fib6_node *fib6_repair_tree(struct net *, struct fib6_table *, struct fib6_node *);
2062:	static int fib6_walk_continue(struct fib6_walker *);
618:	static int inet6_dump_fib(struct sk_buff *, struct netlink_callback *);
2585:	static void *ipv6_route_seq_next(struct seq_file *, void *, loff_t *);
2671:	static int ipv6_route_seq_show(struct seq_file *, void *);
2621:	static void *ipv6_route_seq_start(struct seq_file *, loff_t *);
2689:	static void ipv6_route_seq_stop(struct seq_file *, void *);
2518:	static int ipv6_route_yield(struct fib6_walker *);
199:	static void node_free_rcu(struct callback_head *);

File net/ipv6/ip6_flowlabel.c:
259:	struct ip6_flowlabel *__fl6_sock_lookup(struct sock *, __be32);
281:	void fl6_free_socklist(struct sock *);
312:	struct ipv6_txoptions *fl6_merge_options(struct ipv6_txoptions *, struct ip6_flowlabel *, struct ipv6_txoptions *);
904:	void ip6_flowlabel_cleanup(void);
899:	int ip6_flowlabel_init(void);
724:	int ipv6_flowlabel_opt(struct sock *, sockptr_t, int);
502:	int ipv6_flowlabel_opt_get(struct sock *, struct in6_flowlabel_req *, int);
350:	static int fl6_renew(struct ip6_flowlabel *, unsigned long, unsigned long);
115:	static void fl_free(struct ip6_flowlabel *);
104:	static void fl_free_rcu(struct callback_head *);
213:	static struct ip6_flowlabel *fl_intern(struct net *, struct ip6_flowlabel *, __be32);
492:	static void fl_link(struct ipv6_pinfo *, struct ipv6_fl_socklist *, struct ip6_flowlabel *);
85:	static struct ip6_flowlabel *fl_lookup(struct net *, __be32);
126:	static void fl_release(struct ip6_flowlabel *);
148:	static void ip6_fl_gc(struct timer_list *);
888:	static void ip6_flowlabel_net_exit(struct net *);
866:	static int ip6_flowlabel_proc_init(struct net *);
816:	static void *ip6fl_seq_next(struct seq_file *, void *, loff_t *);
834:	static int ip6fl_seq_show(struct seq_file *, void *);
805:	static void *ip6fl_seq_start(struct seq_file *, loff_t *);
828:	static void ip6fl_seq_stop(struct seq_file *, void *);
468:	static int mem_check(struct sock *);

File net/ipv6/ip6_icmp.c:
52:	void icmpv6_ndo_send(struct sk_buff *, u8, u8, __u32);

File net/ipv6/ip6_input.c:
491:	int ip6_input(struct sk_buff *);
499:	int ip6_mc_input(struct sk_buff *);
362:	void ip6_protocol_deliver_rcu(struct net *, struct sk_buff *, int, bool);
69:	int ip6_rcv_finish(struct net *, struct sock *, struct sk_buff *);
323:	void ipv6_list_rcv(struct list_head *, struct packet_type *, struct net_device *);
302:	int ipv6_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
480:	static int ip6_input_finish(struct net *, struct sock *, struct sk_buff *);
148:	static struct sk_buff *ip6_rcv_core(struct sk_buff *, struct net_device *, struct net *);
314:	static void ip6_sublist_rcv(struct list_head *, struct net_device *, struct net *);

File net/ipv6/ip6_offload.c:
386:	static int ip4ip6_gro_complete(struct sk_buff *, int);
305:	static struct sk_buff *ip4ip6_gro_receive(struct list_head *, struct sk_buff *);
411:	static struct sk_buff *ip4ip6_gso_segment(struct sk_buff *, netdev_features_t);
379:	static int ip6ip6_gro_complete(struct sk_buff *, int);
420:	static struct sk_buff *ip6ip6_gso_segment(struct sk_buff *, netdev_features_t);
320:	static int ipv6_gro_complete(struct sk_buff *, int);
188:	static struct sk_buff *ipv6_gro_receive(struct list_head *, struct sk_buff *);
39:	static int ipv6_gso_pull_exthdrs(struct sk_buff *, int);
74:	static struct sk_buff *ipv6_gso_segment(struct sk_buff *, netdev_features_t);
452:	static int ipv6_offload_init(void);
372:	static int sit_gro_complete(struct sk_buff *, int);
402:	static struct sk_buff *sit_gso_segment(struct sk_buff *, netdev_features_t);
290:	static struct sk_buff *sit_ip6ip6_gro_receive(struct list_head *, struct sk_buff *);

File net/ipv6/ip6_output.c:
1903:	struct sk_buff *__ip6_make_skb(struct sock *, struct sk_buff_head *, struct inet_cork_full *, struct inet6_cork *);
1835:	int ip6_append_data(struct sock *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, size_t, int, struct ipcm6_cookie *, struct flowi6 *, struct rt6_info *, unsigned int);
234:	bool ip6_autoflowlabel(struct net *, const struct ipv6_pinfo *);
1214:	int ip6_dst_lookup(struct net *, struct sock *, struct dst_entry **, struct flowi6 *);
1234:	struct dst_entry *ip6_dst_lookup_flow(struct net *, const struct sock *, struct flowi6 *, const struct in6_addr *);
1302:	struct dst_entry *ip6_dst_lookup_tunnel(struct sk_buff *, struct net_device *, struct net *, struct socket *, struct in6_addr *, const struct ip_tunnel_info *, u8, bool);
2025:	void ip6_flush_pending_frames(struct sock *);
484:	int ip6_forward(struct sk_buff *);
747:	void ip6_frag_init(struct sk_buff *, unsigned int, unsigned int, unsigned short, int, u8 *, u8, __be32, struct ip6_frag_state *);
768:	struct sk_buff *ip6_frag_next(struct sk_buff *, struct ip6_frag_state *);
681:	int ip6_fraglist_init(struct sk_buff *, unsigned int, u8 *, u8, __be32, struct ip6_fraglist_iter *);
722:	void ip6_fraglist_prepare(struct sk_buff *, struct ip6_fraglist_iter *);
844:	int ip6_fragment(struct net *, struct sock *, struct sk_buff *, int (*)(struct net *, struct sock *, struct sk_buff *));
2032:	struct sk_buff *ip6_make_skb(struct sock *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, size_t, int, struct ipcm6_cookie *, struct rt6_info *, unsigned int, struct inet_cork_full *);
213:	int ip6_output(struct net *, struct sock *, struct sk_buff *);
1996:	int ip6_push_pending_frames(struct sock *);
1978:	int ip6_send_skb(struct sk_buff *);
1268:	struct dst_entry *ip6_sk_dst_lookup_flow(struct sock *, struct flowi6 *, const struct in6_addr *, bool);
248:	int ip6_xmit(const struct sock *, struct sk_buff *, struct flowi6 *, __u32, struct ipv6_txoptions *, int, u32);
1463:	static int __ip6_append_data(struct sock *, struct sk_buff_head *, struct inet_cork_full *, struct inet6_cork *, struct page_frag *, int (*)(void *, char *, int, int, int, struct sk_buff *), void *, size_t, int, unsigned int, struct ipcm6_cookie *);
2008:	static void __ip6_flush_pending_frames(struct sock *, struct sk_buff_head *, struct inet_cork_full *, struct inet6_cork *);
360:	static int ip6_call_ra_chain(struct sk_buff *, int);
661:	static void ip6_copy_metadata(struct sk_buff *, struct sk_buff *);
1882:	static void ip6_cork_release(struct inet_cork_full *, struct inet6_cork *);
1087:	static int ip6_dst_lookup_tail(struct net *, const struct sock *, struct dst_entry **, struct flowi6 *);
198:	static int ip6_finish_output(struct net *, struct sock *, struct sk_buff *);
59:	static int ip6_finish_output2(struct net *, struct sock *, struct sk_buff *);
447:	static int ip6_forward_finish(struct net *, struct sock *, struct sk_buff *);
1390:	static int ip6_setup_cork(struct sock *, struct inet_cork_full *, struct inet6_cork *, struct ipcm6_cookie *, struct rt6_info *);

File net/ipv6/ipv6_sockglue.c:
1136:	int do_ipv6_getsockopt(struct sock *, int, int, sockptr_t, sockptr_t);
394:	int do_ipv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
60:	int ip6_ra_control(struct sock *, int);
1490:	int ipv6_getsockopt(struct sock *, int, int, char *, int *);
1012:	int ipv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
102:	struct ipv6_txoptions *ipv6_update_options(struct sock *, struct ipv6_txoptions *);
1068:	static int ipv6_get_msfilter(struct sock *, sockptr_t, sockptr_t, int);
205:	static int ipv6_set_mcast_msfilter(struct sock *, sockptr_t, int);

File net/ipv6/mcast.c:
964:	int __ipv6_dev_mc_dec(struct inet6_dev *, const struct in6_addr *);
318:	void __ipv6_sock_mc_close(struct sock *);
3199:	void igmp6_cleanup(void);
1374:	void igmp6_event_query(struct sk_buff *);
1542:	void igmp6_event_report(struct sk_buff *);
3177:	int igmp6_init(void);
3205:	void igmp6_late_cleanup(void);
3194:	int igmp6_late_init(void);
630:	bool inet6_mc_check(struct sock *, const struct in6_addr *, const struct in6_addr *);
582:	int ip6_mc_msfget(struct sock *, struct group_filter *, sockptr_t, size_t);
488:	int ip6_mc_msfilter(struct sock *, struct group_filter *, struct __kernel_sockaddr_storage *);
361:	int ip6_mc_source(int, int, struct sock *, struct group_source_req *);
1014:	bool ipv6_chk_mcast_addr(struct net_device *, const struct in6_addr *, const struct in6_addr *);
994:	int ipv6_dev_mc_dec(struct net_device *, const struct in6_addr *);
955:	int ipv6_dev_mc_inc(struct net_device *, const struct in6_addr *);
2242:	void ipv6_mc_dad_complete(struct inet6_dev *);
2783:	void ipv6_mc_destroy_dev(struct inet6_dev *);
2712:	void ipv6_mc_down(struct inet6_dev *);
2761:	void ipv6_mc_init_dev(struct inet6_dev *);
2706:	void ipv6_mc_remap(struct inet6_dev *);
2694:	void ipv6_mc_unmap(struct inet6_dev *);
2744:	void ipv6_mc_up(struct inet6_dev *);
347:	void ipv6_sock_mc_close(struct sock *);
248:	int ipv6_sock_mc_drop(struct sock *, int, const struct in6_addr *);
233:	int ipv6_sock_mc_join(struct sock *, int, const struct in6_addr *);
239:	int ipv6_sock_mc_join_ssm(struct sock *, int, const struct in6_addr *, unsigned int);
906:	static int __ipv6_dev_mc_inc(struct net_device *, const struct in6_addr *, unsigned int);
169:	static int __ipv6_sock_mc_join(struct sock *, int, const struct in6_addr *, unsigned int);
1869:	static struct sk_buff *add_grec(struct sk_buff *, struct ifmcaddr6 *, int, int, int, int);
668:	static void igmp6_group_added(struct ifmcaddr6 *);
703:	static void igmp6_group_dropped(struct ifmcaddr6 *);
1118:	static void igmp6_group_queried(struct ifmcaddr6 *, unsigned long);
2568:	static void igmp6_join_group(struct ifmcaddr6 *);
2920:	static void *igmp6_mc_seq_next(struct seq_file *, void *, loff_t *);
2939:	static int igmp6_mc_seq_show(struct seq_file *, void *);
2913:	static void *igmp6_mc_seq_start(struct seq_file *, loff_t *);
2928:	static void igmp6_mc_seq_stop(struct seq_file *, void *);
3040:	static void *igmp6_mcf_seq_next(struct seq_file *, void *, loff_t *);
3065:	static int igmp6_mcf_seq_show(struct seq_file *, void *);
3033:	static void *igmp6_mcf_seq_start(struct seq_file *, loff_t *);
3051:	static void igmp6_mcf_seq_stop(struct seq_file *, void *);
3165:	static void igmp6_net_exit(struct net *);
3128:	static int igmp6_net_init(struct net *);
2124:	static void igmp6_send(struct in6_addr *, struct net_device *, int);
2487:	static int ip6_mc_add_src(struct inet6_dev *, const struct in6_addr *, int, int, const struct in6_addr *, int);
2274:	static int ip6_mc_del1_src(struct ifmcaddr6 *, int, const struct in6_addr *);
2317:	static int ip6_mc_del_src(struct inet6_dev *, const struct in6_addr *, int, int, const struct in6_addr *, int);
2589:	static int ip6_mc_leave_src(struct sock *, struct ipv6_mc_socklist *, struct inet6_dev *);
2831:	static int ipv6_mc_netdev_event(struct notifier_block *, unsigned long, void *);
1644:	static bool is_in(struct ifmcaddr6 *, struct ip6_sf_list *, int, int, int);
865:	static void ma_put(struct ifmcaddr6 *);
813:	static void mld_clear_delrec(struct inet6_dev *);
2256:	static void mld_dad_work(struct work_struct *);
770:	static void mld_del_delrec(struct inet6_dev *, struct ifmcaddr6 *);
2632:	static void mld_gq_work(struct work_struct *);
2666:	static void mld_ifc_event(struct inet6_dev *);
2646:	static void mld_ifc_work(struct work_struct *);
1226:	static bool mld_in_v1_mode(const struct inet6_dev *);
2675:	static void mld_mca_work(struct work_struct *);
1727:	static struct sk_buff *mld_newpack(struct inet6_dev *, unsigned int);
1507:	static void mld_query_work(struct work_struct *);
1611:	static void mld_report_work(struct work_struct *);
1780:	static void mld_sendpack(struct sk_buff *);
2418:	static int sf_setstate(struct ifmcaddr6 *);

File net/ipv6/mcast_snoop.c:
172:	int ipv6_mc_check_mld(struct sk_buff *);
129:	static __sum16 ipv6_mc_validate_checksum(struct sk_buff *);

File net/ipv6/ndisc.c:
146:	void __ndisc_fill_addr_option(struct sk_buff *, int, const void *, int, int);
2044:	void ndisc_cleanup(void);
1932:	int ndisc_ifinfo_sysctl_change(struct ctl_table *, int, void *, size_t *, loff_t *);
2006:	int ndisc_init(void);
2039:	void ndisc_late_cleanup(void);
2034:	int ndisc_late_init(void);
288:	int ndisc_mc_map(const struct in6_addr *, char *, struct net_device *, int);
602:	struct sk_buff *ndisc_ns_create(struct net_device *, const struct in6_addr *, const struct in6_addr *, u64);
219:	struct ndisc_options *ndisc_parse_options(const struct net_device *, u8 *, int, struct ndisc_options *);
1807:	int ndisc_rcv(struct sk_buff *);
520:	void ndisc_send_na(struct net_device *, const struct in6_addr *, const struct in6_addr *, bool, bool, bool, bool);
649:	void ndisc_send_ns(struct net_device *, const struct in6_addr *, const struct in6_addr *, const struct in6_addr *, u64);
1656:	void ndisc_send_redirect(struct sk_buff *, const struct in6_addr *);
669:	void ndisc_send_rs(struct net_device *, const struct in6_addr *, const struct in6_addr *);
470:	void ndisc_send_skb(struct sk_buff *, const struct in6_addr *, const struct in6_addr *);
777:	void ndisc_update(const struct net_device *, struct neighbour *, const u8 *, u8, u32, u8, struct ndisc_options *);
970:	static int accept_untracked_na(struct net_device *, struct in6_addr *);
413:	static struct sk_buff *ndisc_alloc_skb(struct net_device *, int);
400:	static bool ndisc_allow_add(const struct net_device *, struct netlink_ext_ack *);
326:	static int ndisc_constructor(struct neighbour *);
722:	static void ndisc_error_report(struct neighbour *, struct sk_buff *);
176:	static void ndisc_fill_redirect_addr_option(struct sk_buff *, void *, const u8 *);
1641:	static void ndisc_fill_redirect_hdr_option(struct sk_buff *, struct sk_buff *, int);
314:	static u32 ndisc_hash(const void *, const struct net_device *, __u32 *);
1788:	static int ndisc_is_multicast(const void *);
321:	static bool ndisc_key_eq(const struct neighbour *, const void *);
1996:	static void ndisc_net_exit(struct net *);
1971:	static int ndisc_net_init(struct net *);
1859:	static int ndisc_netdev_event(struct notifier_block *, unsigned long, void *);
989:	static void ndisc_recv_na(struct sk_buff *);
786:	static void ndisc_recv_ns(struct sk_buff *);
1129:	static void ndisc_recv_rs(struct sk_buff *);
1600:	static void ndisc_redirect_rcv(struct sk_buff *);
1231:	static void ndisc_router_discovery(struct sk_buff *);
576:	static void ndisc_send_unsol_na(struct net_device *);
734:	static void ndisc_solicit(struct neighbour *, struct sk_buff *);
374:	static int pndisc_constructor(struct pneigh_entry *);
387:	static void pndisc_destructor(struct pneigh_entry *);
762:	static int pndisc_is_router(const void *, struct net_device *);
1782:	static void pndisc_redo(struct sk_buff *);

File net/ipv6/netfilter.c:
99:	int __nf_ip6_route(struct net *, struct dst_entry **, struct flowi *, bool);
122:	int br_ip6_fragment(struct net *, struct sock *, struct sk_buff *, struct nf_bridge_frag_data *, int (*)(struct net *, struct sock *, const struct nf_bridge_frag_data *, struct sk_buff *));
23:	int ip6_route_me_harder(struct net *, struct sock *, struct sk_buff *);
270:	void ipv6_netfilter_fini(void);
261:	int ipv6_netfilter_init(void);
84:	static int nf_ip6_reroute(struct sk_buff *, const struct nf_queue_entry *);

File net/ipv6/netfilter/ip6_tables.c:
40:	void *ip6t_alloc_initial_table(const struct xt_table *);
250:	unsigned int ip6t_do_table(void *, struct sk_buff *, const struct nf_hook_state *);
1727:	int ip6t_register_table(struct net *, const struct xt_table *, const struct ip6t_replace *, const struct nf_hook_ops *);
1797:	void ip6t_unregister_table_exit(struct net *, const char *);
1789:	void ip6t_unregister_table_pre_exit(struct net *, const char *);
1709:	static void __ip6t_unregister_table(struct net *, struct xt_table *);
1654:	static int do_ip6t_get_ctl(struct sock *, int, void *, int *);
1625:	static int do_ip6t_set_ctl(struct sock *, int, sockptr_t, unsigned int);
1843:	static int icmp6_checkentry(const struct xt_mtchk_param *);
1816:	static bool icmp6_match(const struct sk_buff *, struct xt_action_param *);
1942:	static void ip6_tables_fini(void);
1909:	static int ip6_tables_init(void);
1899:	static void ip6_tables_net_exit(struct net *);
1894:	static int ip6_tables_net_init(struct net *);
120:	static unsigned int ip6t_error(struct sk_buff *, const struct xt_action_param *);
679:	static int translate_table(struct net *, struct xt_table_info *, void *, const struct ip6t_replace *);

File net/ipv6/netfilter/ip6t_REJECT.c:
35:	static unsigned int reject_tg6(struct sk_buff *, const struct xt_action_param *);
78:	static int reject_tg6_check(const struct xt_tgchk_param *);
115:	static void reject_tg6_exit(void);
110:	static int reject_tg6_init(void);

File net/ipv6/netfilter/ip6table_filter.c:
101:	static void ip6table_filter_fini(void);
77:	static int ip6table_filter_init(void);
66:	static void ip6table_filter_net_exit(struct net *);
53:	static int ip6table_filter_net_init(struct net *);
61:	static void ip6table_filter_net_pre_exit(struct net *);
36:	static int ip6table_filter_table_init(struct net *);

File net/ipv6/netfilter/ip6table_mangle.c:
128:	static void ip6table_mangle_fini(void);
67:	static unsigned int ip6table_mangle_hook(void *, struct sk_buff *, const struct nf_hook_state *);
104:	static int ip6table_mangle_init(void);
94:	static void ip6table_mangle_net_exit(struct net *);
89:	static void ip6table_mangle_net_pre_exit(struct net *);
76:	static int ip6table_mangle_table_init(struct net *);

File net/ipv6/netfilter/ip6table_nat.c:
163:	static void ip6table_nat_exit(void);
148:	static int ip6table_nat_init(void);
136:	static void ip6table_nat_net_exit(struct net *);
131:	static void ip6table_nat_net_pre_exit(struct net *);
108:	static int ip6table_nat_table_init(struct net *);

File net/ipv6/netfilter/nf_conntrack_reasm.c:
564:	void nf_ct_frag6_cleanup(void);
437:	int nf_ct_frag6_gather(struct net *, struct sk_buff *, u32);
543:	int nf_ct_frag6_init(void);
133:	static void nf_ct_frag6_expire(struct timer_list *);
312:	static int nf_ct_frag6_reasm(struct frag_queue *, struct sk_buff *, struct sk_buff *, struct net_device *);
519:	static void nf_ct_net_exit(struct net *);
493:	static int nf_ct_net_init(struct net *);
512:	static void nf_ct_net_pre_exit(struct net *);

File net/ipv6/netfilter/nf_defrag_ipv6_hooks.c:
157:	void nf_defrag_ipv6_disable(struct net *);
131:	int nf_defrag_ipv6_enable(struct net *);
90:	static void defrag6_net_exit(struct net *);
51:	static unsigned int ipv6_defrag(void *, struct sk_buff *, const struct nf_hook_state *);
125:	static void nf_defrag_fini(void);
103:	static int nf_defrag_init(void);

File net/ipv6/netfilter/nf_reject_ipv6.c:
149:	const struct tcphdr *nf_reject_ip6_tcphdr_get(struct sk_buff *, struct tcphdr *, unsigned int *, int);
221:	void nf_reject_ip6_tcphdr_put(struct sk_buff *, const struct sk_buff *, const struct tcphdr *, unsigned int);
197:	struct ipv6hdr *nf_reject_ip6hdr_put(struct sk_buff *, const struct sk_buff *, __u8, int);
59:	struct sk_buff *nf_reject_skb_v6_tcp_reset(struct net *, struct sk_buff *, const struct net_device *, int);
94:	struct sk_buff *nf_reject_skb_v6_unreach(struct net *, struct sk_buff *, const struct net_device *, int, u8);
278:	void nf_send_reset6(struct net *, struct sock *, struct sk_buff *, int);
397:	void nf_send_unreach6(struct net *, struct sk_buff *, unsigned char, unsigned int);

File net/ipv6/output_core.c:
124:	int __ip6_local_out(struct net *, struct sock *, struct sk_buff *);
104:	int ip6_dst_hoplimit(struct dst_entry *);
58:	int ip6_find_1stfragopt(struct sk_buff *, u8 **);
149:	int ip6_local_out(struct net *, struct sock *, struct sk_buff *);
29:	__be32 ipv6_proxy_select_ident(struct net *, struct sk_buff *);
47:	__be32 ipv6_select_ident(struct net *, const struct in6_addr *, const struct in6_addr *);

File net/ipv6/ping.c:
294:	void pingv6_exit(void);
274:	int pingv6_init(void);
36:	static int dummy_icmpv6_err_convert(u8, u8, int *);
32:	static void dummy_ip6_datagram_recv_ctl(struct sock *, struct msghdr *, struct sk_buff *);
42:	static int dummy_ipv6_chk_addr(struct net *, const struct in6_addr *, const struct net_device *, int);
40:	static void dummy_ipv6_icmp_error(struct sock *, struct sk_buff *, int, __be16, u32, u8 *);
27:	static int dummy_ipv6_recv_error(struct sock *, struct msghdr *, int, int *);
48:	static int ping_v6_pre_connect(struct sock *, struct sockaddr *, int);
263:	static void ping_v6_proc_exit_net(struct net *);
255:	static int ping_v6_proc_init_net(struct net *);
62:	static int ping_v6_sendmsg(struct sock *, struct msghdr *, size_t);
234:	static int ping_v6_seq_show(struct seq_file *, void *);
229:	static void *ping_v6_seq_start(struct seq_file *, loff_t *);

File net/ipv6/proc.c:
316:	void ipv6_misc_proc_exit(void);
311:	int ipv6_misc_proc_init(void);
244:	int snmp6_register_dev(struct inet6_dev *);
265:	int snmp6_unregister_dev(struct inet6_dev *);
299:	static void ipv6_proc_exit_net(struct net *);
277:	static int ipv6_proc_init_net(struct net *);
231:	static int snmp6_dev_seq_show(struct seq_file *, void *);
215:	static int snmp6_seq_show(struct seq_file *, void *);
145:	static void snmp6_seq_show_icmpv6msg(struct seq_file *, atomic_long_t *);
181:	static void snmp6_seq_show_item(struct seq_file *, void *, atomic_long_t *, const struct snmp_mib *);
34:	static int sockstat6_seq_show(struct seq_file *, void *);

File net/ipv6/protocol.c:
52:	int inet6_add_offload(const struct net_offload *, unsigned char);
28:	int inet6_add_protocol(const struct inet6_protocol *, unsigned char);
59:	int inet6_del_offload(const struct net_offload *, unsigned char);
35:	int inet6_del_protocol(const struct inet6_protocol *, unsigned char);

File net/ipv6/raw.c:
332:	void raw6_icmp_error(struct sk_buff *, int, u8, u8, int, __be32);
207:	bool raw6_local_deliver(struct sk_buff *, int);
1273:	void raw6_proc_exit(void);
1268:	int raw6_proc_init(void);
67:	bool raw_v6_match(struct net *, struct sock *, unsigned short, const struct in6_addr *, const struct in6_addr *, int, int);
1318:	void rawv6_exit(void);
1313:	int rawv6_init(void);
382:	int rawv6_rcv(struct sock *, struct sk_buff *);
1175:	static void raw6_destroy(struct sock *);
1258:	static void raw6_exit_net(struct net *);
705:	static int raw6_getfrag(void *, char *, int, int, int, struct sk_buff *);
1249:	static int raw6_init_net(struct net *);
1229:	static int raw6_seq_show(struct seq_file *, void *);
213:	static int rawv6_bind(struct sock *, struct sockaddr *, int);
1167:	static void rawv6_close(struct sock *, long);
1098:	static int rawv6_getsockopt(struct sock *, int, int, char *, int *);
1182:	static int rawv6_init_sk(struct sock *);
1121:	static int rawv6_ioctl(struct sock *, int, unsigned long);
684:	static int rawv6_probe_proto_opt(struct raw6_frag_vec *, struct flowi6 *);
505:	static int rawv6_push_pending_frames(struct sock *, struct flowi6 *, struct raw6_sock *);
356:	static int rawv6_rcv_skb(struct sock *, struct sk_buff *);
428:	static int rawv6_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
588:	static int rawv6_send_hdrinc(struct sock *, struct msghdr *, int, struct flowi6 *, struct dst_entry **, unsigned int, const struct sockcm_cookie *);
736:	static int rawv6_sendmsg(struct sock *, struct msghdr *, size_t);
1037:	static int rawv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);

File net/ipv6/reassembly.c:
611:	void ipv6_frag_exit(void);
573:	int ipv6_frag_init(void);
73:	static void ip6_frag_expire(struct timer_list *);
256:	static int ip6_frag_reasm(struct frag_queue *, struct sk_buff *, struct sk_buff *, struct net_device *);
327:	static int ipv6_frag_rcv(struct sk_buff *);
553:	static void ipv6_frags_exit_net(struct net *);
530:	static int ipv6_frags_init_net(struct net *);
548:	static void ipv6_frags_pre_exit_net(struct net *);

File net/ipv6/route.c:
4546:	struct fib6_info *addrconf_f6i_alloc(struct net *, struct inet6_dev *, const struct in6_addr *, bool, gfp_t);
6638:	int bpf_iter_ipv6_route(struct bpf_iter_meta *, struct fib6_info *);
6219:	void fib6_info_hw_flags_set(struct net *, struct fib6_info *, bool, bool, bool);
3510:	int fib6_nh_init(struct net *, struct fib6_nh *, struct fib6_config *, gfp_t, struct netlink_ext_ack *);
3638:	void fib6_nh_release(struct fib6_nh *);
3659:	void fib6_nh_release_dsts(struct fib6_nh *);
6192:	void fib6_rt_update(struct net *, struct fib6_info *, struct nl_info *);
415:	void fib6_select_path(const struct net *, struct fib6_result *, struct flowi6 *, int, bool, const struct sk_buff *, int);
2173:	int fib6_table_lookup(struct net *, struct fib6_table *, int, struct flowi6 *, struct fib6_result *, int);
3250:	struct dst_entry *icmp6_dst_alloc(struct net_device *, struct flowi6 *);
6161:	void inet6_rt_notify(int, struct fib6_info *, struct nl_info *, unsigned int);
2651:	struct dst_entry *ip6_blackhole_route(struct net *, struct dst_entry *);
3874:	int ip6_del_rt(struct net *, struct fib6_info *, bool);
341:	struct rt6_info *ip6_dst_alloc(struct net *, struct net_device *, int);
1308:	int ip6_ins_rt(struct net *, struct fib6_info *);
3217:	u32 ip6_mtu_from_fib6(const struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
209:	struct neighbour *ip6_neigh_lookup(const struct in6_addr *, struct net_device *, struct sk_buff *, const void *);
2200:	struct rt6_info *ip6_pol_route(struct net *, struct fib6_table *, int, struct flowi6 *, const struct sk_buff *, int);
3135:	void ip6_redirect(struct sk_buff *, struct net *, int, u32, kuid_t);
3156:	void ip6_redirect_no_header(struct sk_buff *, struct net *, int);
3837:	int ip6_route_add(struct fib6_config *, gfp_t, struct netlink_ext_ack *);
6774:	void ip6_route_cleanup(void);
6673:	int ip6_route_init(void);
6620:	void ip6_route_init_special_entries(void);
2557:	void ip6_route_input(struct sk_buff *);
2278:	struct dst_entry *ip6_route_input_lookup(struct net *, struct net_device *, struct flowi6 *, const struct sk_buff *, int);
1255:	struct dst_entry *ip6_route_lookup(struct net *, struct flowi6 *, const struct sk_buff *, int);
2629:	struct dst_entry *ip6_route_output_flags(struct net *, const struct sock *, struct flowi6 *, int);
2596:	struct dst_entry *ip6_route_output_flags_noref(struct net *, const struct sock *, struct flowi6 *, int);
2969:	void ip6_sk_dst_store_flow(struct sock *, struct dst_entry *, const struct flowi6 *);
3174:	void ip6_sk_redirect(struct sk_buff *, struct sock *);
2947:	void ip6_sk_update_pmtu(struct sk_buff *, struct sock *, __be32);
2926:	void ip6_update_pmtu(struct sk_buff *, struct net *, __be32, int, u32, kuid_t);
4452:	int ipv6_route_ioctl(struct net *, unsigned int, struct in6_rtmsg *);
6431:	struct ctl_table *ipv6_route_sysctl_init(struct net *);
4354:	struct fib6_info *rt6_add_dflt_router(struct net *, const struct in6_addr *, struct net_device *, unsigned int, u32);
2155:	void rt6_age_exceptions(struct fib6_info *, struct fib6_gc_args *, unsigned long);
4646:	void rt6_clean_tohost(struct net *, struct in6_addr *);
4897:	void rt6_disable_ip(struct net_device *, unsigned long);
5883:	int rt6_dump_route(struct fib6_info *, void *, unsigned int);
1773:	void rt6_flush_exceptions(struct fib6_info *);
4322:	struct fib6_info *rt6_get_dflt_router(struct net *, const struct in6_addr *, struct net_device *);
1262:	struct rt6_info *rt6_lookup(struct net *, const struct in6_addr *, const struct in6_addr *, int, const struct sk_buff *, int);
4964:	void rt6_mtu_change(struct net_device *, unsigned int);
2456:	u32 rt6_multipath_hash(const struct net *, const struct flowi6 *, const struct sk_buff *, struct flow_keys *);
4729:	void rt6_multipath_rebalance(struct fib6_info *);
4410:	void rt6_purge_dflt_routers(struct net *);
4609:	void rt6_remove_prefsrc(struct inet6_ifaddr *);
4881:	void rt6_sync_down_dev(struct net_device *, unsigned long);
4768:	void rt6_sync_up(struct net_device *, unsigned char);
138:	void rt6_uncached_list_add(struct rt6_info *);
149:	void rt6_uncached_list_del(struct rt6_info *);
785:	static void __find_rr_leaf(struct fib6_info *, struct fib6_info *, u32, struct fib6_result *, struct fib6_info **, int, int, bool *, int *);
3853:	static int __ip6_del_rt(struct fib6_info *, struct nl_info *);
3884:	static int __ip6_del_rt_siblings(struct fib6_info *, struct fib6_config *);
3037:	static struct rt6_info *__ip6_route_redirect(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
2839:	static void __ip6_rt_update_pmtu(struct dst_entry *, const struct sock *, const struct ipv6hdr *, u32, bool);
1547:	static struct rt6_exception *__rt6_find_exception_rcu(struct rt6_exception_bucket **, const struct in6_addr *, const struct in6_addr *);
1514:	static struct rt6_exception *__rt6_find_exception_spinlock(struct rt6_exception_bucket **, const struct in6_addr *, const struct in6_addr *);
495:	static int __rt6_nh_dev_match(struct fib6_nh *, void *);
4623:	static int fib6_clean_tohost(struct fib6_info *, void *);
4838:	static int fib6_ifdown(struct fib6_info *, void *);
4753:	static int fib6_ifup(struct fib6_info *, void *);
5786:	static int fib6_info_nh_uses_dev(struct fib6_nh *, void *);
2113:	static void fib6_nh_age_exceptions(const struct fib6_nh *, struct fib6_gc_args *, unsigned long);
4000:	static int fib6_nh_del_cached_rt(struct fib6_nh *, void *);
1942:	static int fib6_nh_find_match(struct fib6_nh *, void *);
1734:	static void fib6_nh_flush_exceptions(struct fib6_nh *, struct fib6_info *);
4910:	static int fib6_nh_mtu_change(struct fib6_nh *, void *);
3023:	static int fib6_nh_redirect_match(struct fib6_nh *, void *);
4591:	static int fib6_remove_prefsrc(struct fib6_info *, void *);
5472:	static int inet6_rtm_delroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
6017:	static int inet6_rtm_getroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
5496:	static int inet6_rtm_newroute(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
235:	static void ip6_confirm_neigh(const struct dst_entry *, const void *);
1176:	static struct rt6_info *ip6_create_rt_rcu(const struct fib6_result *);
3181:	static unsigned int ip6_default_advmss(const struct dst_entry *);
3979:	static int ip6_del_cached_rt(struct fib6_config *, struct fib6_info *, struct fib6_nh *);
2729:	static struct dst_entry *ip6_dst_check(struct dst_entry *, u32);
356:	static void ip6_dst_destroy(struct dst_entry *);
3287:	static int ip6_dst_gc(struct dst_ops *);
375:	static void ip6_dst_ifdown(struct dst_entry *, struct net_device *, int);
225:	static struct neighbour *ip6_dst_neigh_lookup(const struct dst_entry *, struct sk_buff *, const void *);
2782:	static void ip6_link_failure(struct sk_buff *);
3203:	static unsigned int ip6_mtu(const struct dst_entry *);
2291:	static void ip6_multipath_l3_keys(const struct sk_buff *, struct flow_keys *, struct flow_keys *);
2762:	static struct dst_entry *ip6_negative_advice(struct dst_entry *);
4520:	static int ip6_pkt_discard(struct sk_buff *);
4525:	static int ip6_pkt_discard_out(struct net *, struct sock *, struct sk_buff *);
4481:	static int ip6_pkt_drop(struct sk_buff *, u8, int);
4531:	static int ip6_pkt_prohibit(struct sk_buff *);
4536:	static int ip6_pkt_prohibit_out(struct net *, struct sock *, struct sk_buff *);
2269:	static struct rt6_info *ip6_pol_route_input(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
1202:	static struct rt6_info *ip6_pol_route_lookup(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
2587:	static struct rt6_info *ip6_pol_route_output(struct net *, struct fib6_table *, struct flowi6 *, const struct sk_buff *, int);
2986:	static bool ip6_redirect_nh_match(const struct fib6_result *, struct flowi6 *, const struct in6_addr *, struct rt6_info **);
4019:	static int ip6_route_del(struct fib6_config *, struct netlink_ext_ack *);
6272:	static int ip6_route_dev_notify(struct notifier_block *, unsigned long, void *);
3678:	static struct fib6_info *ip6_route_info_create(struct fib6_config *, gfp_t, struct netlink_ext_ack *);
6544:	static void ip6_route_net_exit(struct net *);
6572:	static void ip6_route_net_exit_late(struct net *);
6462:	static int ip6_route_net_init(struct net *);
6555:	static int ip6_route_net_init_late(struct net *);
1315:	static struct rt6_info *ip6_rt_cache_alloc(const struct fib6_result *, const struct in6_addr *, const struct in6_addr *);
1120:	static void ip6_rt_copy_init(struct rt6_info *, const struct fib6_result *);
2918:	static void ip6_rt_update_pmtu(struct dst_entry *, struct sock *, struct sk_buff *, u32, bool);
6596:	static void ipv6_inetpeer_exit(struct net *);
6585:	static int ipv6_inetpeer_init(struct net *);
6329:	static int ipv6_sysctl_rtcache_flush(struct ctl_table *, int, void *, size_t *, loff_t *);
4106:	static void rt6_do_redirect(struct dst_entry *, struct sock *, struct sk_buff *);
2824:	static void rt6_do_update_pmtu(struct rt6_info *, u32);
5602:	static int rt6_fill_node(struct net *, struct sk_buff *, struct fib6_info *, struct dst_entry *, struct in6_addr *, struct in6_addr *, int, int, u32, u32, unsigned int);
5573:	static int rt6_fill_node_nexthop(struct sk_buff *, struct nexthop *, unsigned char *);
1651:	static int rt6_insert_exception(struct rt6_info *, const struct fib6_result *);
4936:	static int rt6_mtu_change_route(struct fib6_info *, void *);
4807:	static unsigned int rt6_multipath_dead_count(const struct fib6_info *, const struct net_device *);
4824:	static void rt6_multipath_nh_flags_set(struct fib6_info *, const struct net_device *, unsigned char);
2147:	static int rt6_nh_age_exceptions(struct fib6_nh *, void *);
5831:	static int rt6_nh_dump_exceptions(struct fib6_nh *, void *);
776:	static int rt6_nh_find_match(struct fib6_nh *, void *);
1764:	static int rt6_nh_flush_exceptions(struct fib6_nh *, void *);
5516:	static int rt6_nh_nlmsg_size(struct fib6_nh *, void *);
1871:	static int rt6_nh_remove_exception_rt(struct fib6_nh *, void *);
1442:	static void rt6_remove_exception(struct rt6_exception_bucket *, struct rt6_exception *);
1883:	static int rt6_remove_exception_rt(struct rt6_info *);
709:	static int rt6_score_route(const struct fib6_nh *, u32, int, int);
6311:	static int rt6_stats_seq_show(struct seq_file *, void *);
4996:	static int rtm_to_fib6_config(struct sk_buff *, struct nlmsghdr *, struct fib6_config *, struct netlink_ext_ack *);

File net/ipv6/rpl.c:
93:	void ipv6_rpl_srh_compress(struct ipv6_rpl_sr_hdr *, const struct ipv6_rpl_sr_hdr *, const struct in6_addr *, unsigned char);
38:	void ipv6_rpl_srh_decompress(struct ipv6_rpl_sr_hdr *, const struct ipv6_rpl_sr_hdr *, const struct in6_addr *, unsigned char);
32:	size_t ipv6_rpl_srh_size(unsigned char, unsigned char, unsigned char);

File net/ipv6/seg6.c:
559:	void seg6_exit(void);
78:	struct ipv6_sr_hdr *seg6_get_srh(struct sk_buff *, int);
111:	void seg6_icmp_srh(struct sk_buff *, struct inet6_skb_parm *);
511:	int seg6_init(void);
28:	bool seg6_validate_srh(struct ipv6_sr_hdr *, int, bool);
415:	static int seg6_genl_dumphmac(struct sk_buff *, struct netlink_callback *);
410:	static int seg6_genl_dumphmac_done(struct netlink_callback *);
405:	static int seg6_genl_dumphmac_start(struct netlink_callback *);
265:	static int seg6_genl_get_tunsrc(struct sk_buff *, struct genl_info *);
236:	static int seg6_genl_set_tunsrc(struct sk_buff *, struct genl_info *);
229:	static int seg6_genl_sethmac(struct sk_buff *, struct genl_info *);
451:	static void seg6_net_exit(struct net *);
422:	static int seg6_net_init(struct net *);

File net/ipv6/sit.c:
1599:	static int ipip6_changelink(struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
1756:	static void ipip6_dellink(struct net_device *, struct list_head *);
1404:	static void ipip6_dev_free(struct net_device *);
525:	static int ipip6_err(struct sk_buff *, u32);
1689:	static int ipip6_fill_info(struct sk_buff *, const struct net_device *);
1647:	static size_t ipip6_get_size(const struct net_device *);
1551:	static int ipip6_newlink(struct net *, struct net_device *, struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
676:	static int ipip6_rcv(struct sk_buff *);
1096:	static void ipip6_tunnel_bind_dev(struct net_device *);
200:	static int ipip6_tunnel_create(struct net_device *);
1349:	static int ipip6_tunnel_ctl(struct net_device *, struct ip_tunnel_parm *, int);
422:	static int ipip6_tunnel_del_prl(struct ip_tunnel *, struct ip_tunnel_prl *);
1440:	static int ipip6_tunnel_init(struct net_device *);
228:	static struct ip_tunnel *ipip6_tunnel_locate(struct net *, struct ip_tunnel_parm *, int);
96:	static struct ip_tunnel *ipip6_tunnel_lookup(struct net *, struct net_device *, __be32, __be32, int);
1418:	static void ipip6_tunnel_setup(struct net_device *);
1366:	static int ipip6_tunnel_siocdevprivate(struct net_device *, struct ifreq *, void *, int);
510:	static void ipip6_tunnel_uninit(struct net_device *);
1136:	static void ipip6_tunnel_update(struct ip_tunnel *, struct ip_tunnel_parm *, __u32);
1479:	static int ipip6_validate(struct nlattr **, struct nlattr **, struct netlink_ext_ack *);
789:	static int ipip_rcv(struct sk_buff *);
409:	static void prl_list_destroy_rcu(struct callback_head *);
1896:	static void sit_cleanup(void);
1876:	static void sit_exit_batch_net(struct list_head *);
1909:	static int sit_init(void);
1830:	static int sit_init_net(struct net *);
1065:	static netdev_tx_t sit_tunnel_xmit(struct sk_buff *, struct net_device *);

File net/ipv6/sysctl_net_ipv6.c:
334:	int ipv6_sysctl_register(void);
353:	void ipv6_sysctl_unregister(void);
308:	static void ipv6_sysctl_net_exit(struct net *);
254:	static int ipv6_sysctl_net_init(struct net *);
49:	static int proc_rt6_multipath_hash_fields(struct ctl_table *, int, void *, size_t *, loff_t *);
33:	static int proc_rt6_multipath_hash_policy(struct ctl_table *, int, void *, size_t *, loff_t *);

File net/ipv6/tcp_ipv6.c:
2132:	void tcp6_proc_exit(struct net *);
2124:	int tcp6_proc_init(struct net *);
1838:	void tcp_v6_early_demux(struct sk_buff *);
1149:	u16 tcp_v6_get_syncookie(struct sock *, struct ipv6hdr *, struct tcphdr *, u32 *);
2260:	void tcpv6_exit(void);
2227:	int tcpv6_init(void);
103:	static void inet6_sk_rx_dst_set(struct sock *, const struct sk_buff *);
2087:	static int tcp6_seq_show(struct seq_file *, void *);
1164:	static int tcp_v6_conn_request(struct sock *, struct sk_buff *);
145:	static int tcp_v6_connect(struct sock *, struct sockaddr *, int);
1432:	static int tcp_v6_do_rcv(struct sock *, struct sk_buff *);
382:	static int tcp_v6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
1568:	static void tcp_v6_fill_cb(struct sk_buff *, const struct ipv6hdr *, const struct tcphdr *);
116:	static u32 tcp_v6_init_seq(const struct sk_buff *);
1941:	static int tcp_v6_init_sock(struct sock *);
124:	static u32 tcp_v6_init_ts_off(const struct net *, const struct sk_buff *);
356:	static void tcp_v6_mtu_reduced(struct sock *);
130:	static int tcp_v6_pre_connect(struct sock *, struct sockaddr *, int);
1592:	static int tcp_v6_rcv(struct sk_buff *);
580:	static void tcp_v6_reqsk_destructor(struct request_sock *);
1111:	static void tcp_v6_reqsk_send_ack(const struct sock *, struct sk_buff *, struct request_sock *);
808:	static struct dst_entry *tcp_v6_route_req(const struct sock *, struct sk_buff *, struct flowi *, struct request_sock *);
1883:	static void tcp_v6_send_check(struct sock *, struct sk_buff *);
978:	static void tcp_v6_send_reset(const struct sock *, struct sk_buff *);
847:	static void tcp_v6_send_response(const struct sock *, struct sk_buff *, u32, u32, u32, u32, u32, int, struct tcp_md5sig_key *, int, u8, __be32, u32, u32);
526:	static int tcp_v6_send_synack(const struct sock *, struct dst_entry *, struct flowi *, struct request_sock *, struct tcp_fastopen_cookie *, enum tcp_synack_type, struct sk_buff *);
1195:	static struct sock *tcp_v6_syn_recv_sock(const struct sock *, struct sk_buff *, struct request_sock *, struct dst_entry *, struct request_sock *, bool *);
1096:	static void tcp_v6_timewait_ack(struct sock *, struct sk_buff *);
2211:	static void tcpv6_net_exit(struct net *);
2216:	static void tcpv6_net_exit_batch(struct list_head *);
2205:	static int tcpv6_net_init(struct net *);

File net/ipv6/tcpv6_offload.c:
76:	int tcpv6_offload_init(void);
30:	static int tcp6_gro_complete(struct sk_buff *, int);
17:	static struct sk_buff *tcp6_gro_receive(struct list_head *, struct sk_buff *);
42:	static struct sk_buff *tcp6_gso_segment(struct sk_buff *, netdev_features_t);

File net/ipv6/udp.c:
575:	int __udp6_lib_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32, struct udp_table *);
235:	struct sock *__udp6_lib_lookup(struct net *, const struct in6_addr *, __be16, const struct in6_addr *, __be16, int, int, struct udp_table *, struct sk_buff *);
943:	int __udp6_lib_rcv(struct sk_buff *, struct udp_table *, int);
297:	struct sock *udp6_lib_lookup_skb(const struct sk_buff *, __be16, __be16);
1741:	void udp6_proc_exit(struct net *);
1733:	int udp6_proc_init(struct net *);
1705:	int udp6_seq_show(struct seq_file *, void *);
1090:	void udp_v6_early_demux(struct sk_buff *);
96:	int udp_v6_get_port(struct sock *, unsigned short);
108:	void udp_v6_rehash(struct sock *);
1652:	void udpv6_destroy_sock(struct sock *);
472:	void udpv6_encap_enable(void);
1811:	void udpv6_exit(void);
1689:	int udpv6_getsockopt(struct sock *, int, int, char *, int *);
1792:	int udpv6_init(void);
65:	int udpv6_init_sock(struct sock *);
340:	int udpv6_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);
1329:	int udpv6_sendmsg(struct sock *, struct msghdr *, size_t);
1679:	int udpv6_setsockopt(struct sock *, int, int, sockptr_t, unsigned int);
286:	static struct sock *__udp6_lib_lookup_skb(struct sk_buff *, __be16, __be16, struct udp_table *);
846:	static int __udp6_lib_mcast_deliver(struct net *, struct sk_buff *, const struct in6_addr *, const struct in6_addr *, struct udp_table *, int);
162:	static struct sock *lookup_reuseport(struct net *, struct sock *, struct sk_buff *, const struct in6_addr *, __be16, const struct in6_addr *, unsigned int);
181:	static struct sock *udp6_lib_lookup2(struct net *, const struct in6_addr *, __be16, const struct in6_addr *, unsigned int, int, int, struct udp_hslot *, struct sk_buff *);
915:	static void udp6_sk_rx_dst_set(struct sock *, struct dst_entry *);
927:	static int udp6_unicast_rcv_skb(struct sock *, struct sk_buff *, struct udphdr *);
1308:	static int udp_v6_push_pending_frames(struct sock *);
1223:	static int udp_v6_send_skb(struct sk_buff *, struct flowi6 *, struct inet_cork *);
59:	static void udpv6_destruct_sock(struct sock *);
689:	static int udpv6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
1152:	static int udpv6_pre_connect(struct sock *, struct sockaddr *, int);
697:	static int udpv6_queue_rcv_one_skb(struct sock *, struct sk_buff *);
786:	static int udpv6_queue_rcv_skb(struct sock *, struct sk_buff *);
1131:	static int udpv6_rcv(struct sk_buff *);

File net/ipv6/udp_offload.c:
205:	int udpv6_offload_exit(void);
200:	int udpv6_offload_init(void);
162:	static int udp6_gro_complete(struct sk_buff *, int);
128:	static struct sk_buff *udp6_gro_receive(struct list_head *, struct sk_buff *);
18:	static struct sk_buff *udp6_ufo_fragment(struct sk_buff *, netdev_features_t);

File net/ipv6/udplite.c:
130:	void udplite6_proc_exit(void);
125:	int udplite6_proc_init(void);
94:	void udplitev6_exit(void);
75:	int udplitev6_init(void);
115:	static void udplite6_proc_exit_net(struct net *);
106:	static int udplite6_proc_init_net(struct net *);
27:	static int udplitev6_err(struct sk_buff *, struct inet6_skb_parm *, u8, u8, int, __be32);
22:	static int udplitev6_rcv(struct sk_buff *);
15:	static int udplitev6_sk_init(struct sock *);

File net/llc/llc_core.c:
122:	void llc_sap_close(struct llc_sap *);
70:	struct llc_sap *llc_sap_find(unsigned char);
91:	struct llc_sap *llc_sap_open(unsigned char, int (*)(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *));
150:	static void llc_exit(void);
143:	static int llc_init(void);

File net/llc/llc_input.c:
42:	void llc_add_pack(int, void (*)(struct llc_sap *, struct sk_buff *));
155:	int llc_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
50:	void llc_remove_pack(int);
57:	void llc_set_station_handler(void (*)(struct sk_buff *));

File net/llc/llc_output.c:
58:	int llc_build_and_send_ui_pkt(struct llc_sap *, struct sk_buff *, const unsigned char *, unsigned char);
25:	int llc_mac_hdr_init(struct sk_buff *, const unsigned char *, const unsigned char *);

File net/mac80211/aead_api.c:
50:	int aead_decrypt(struct crypto_aead *, u8 *, u8 *, size_t, u8 *, size_t, u8 *);
18:	int aead_encrypt(struct crypto_aead *, u8 *, u8 *, size_t, u8 *, size_t, u8 *);
110:	void aead_key_free(struct crypto_aead *);
86:	struct crypto_aead *aead_key_setup_encrypt(const char *, const u8 *, size_t, size_t);

File net/mac80211/aes_cmac.c:
25:	void ieee80211_aes_cmac(struct crypto_shash *, const u8 *, const u8 *, size_t, u8 *);
49:	void ieee80211_aes_cmac_256(struct crypto_shash *, const u8 *, const u8 *, size_t, u8 *);
89:	void ieee80211_aes_cmac_key_free(struct crypto_shash *);
71:	struct crypto_shash *ieee80211_aes_cmac_key_setup(const u8 *, size_t);

File net/mac80211/aes_gmac.c:
17:	int ieee80211_aes_gmac(struct crypto_aead *, const u8 *, u8 *, const u8 *, size_t, u8 *);
89:	void ieee80211_aes_gmac_key_free(struct crypto_aead *);
69:	struct crypto_aead *ieee80211_aes_gmac_key_setup(const u8 *, size_t);

File net/mac80211/agg-rx.c:
253:	void ___ieee80211_start_rx_ba_session(struct sta_info *, u8, u16, u16, u16, u16, u16, bool, bool, const struct ieee80211_addba_ext_ie *);
58:	void ___ieee80211_stop_rx_ba_session(struct sta_info *, u16, u16, u16, bool);
117:	void __ieee80211_stop_rx_ba_session(struct sta_info *, u16, u16, u16, bool);
506:	void ieee80211_manage_rx_ba_offl(struct ieee80211_vif *, const u8 *, unsigned int);
461:	void ieee80211_process_addba_request(struct ieee80211_local *, struct sta_info *, struct ieee80211_mgmt *, size_t);
525:	void ieee80211_rx_ba_timer_expired(struct ieee80211_vif *, const u8 *, unsigned int);
125:	void ieee80211_stop_rx_ba_session(struct ieee80211_vif *, u16, const u8 *);
45:	static void ieee80211_free_tid_rx(struct callback_head *);
172:	static void sta_rx_agg_reorder_timer_expired(struct timer_list *);
152:	static void sta_rx_agg_session_timer_expired(struct timer_list *);

File net/mac80211/agg-tx.c:
299:	int ___ieee80211_stop_tx_ba_session(struct sta_info *, u16, enum ieee80211_agg_stop_reason);
842:	int __ieee80211_stop_tx_ba_session(struct sta_info *, u16, enum ieee80211_agg_stop_reason);
142:	void ieee80211_assign_tid_tx(struct sta_info *, int, struct tid_ampdu_tx *);
957:	void ieee80211_process_addba_resp(struct ieee80211_local *, struct sta_info *, struct ieee80211_mgmt *, size_t);
112:	void ieee80211_send_bar(struct ieee80211_vif *, u8 *, u16, u16);
775:	void ieee80211_start_tx_ba_cb(struct sta_info *, int, struct tid_ampdu_tx *);
820:	void ieee80211_start_tx_ba_cb_irqsafe(struct ieee80211_vif *, const u8 *, u16);
584:	int ieee80211_start_tx_ba_session(struct ieee80211_sta *, u16, u16);
898:	void ieee80211_stop_tx_ba_cb(struct sta_info *, int, struct tid_ampdu_tx *);
934:	void ieee80211_stop_tx_ba_cb_irqsafe(struct ieee80211_vif *, const u8 *, u16);
856:	int ieee80211_stop_tx_ba_session(struct ieee80211_sta *, u16);
490:	void ieee80211_tx_ba_session_handle_start(struct sta_info *, int);
241:	static void ieee80211_agg_splice_packets(struct ieee80211_sub_if_data *, struct tid_ampdu_tx *, u16);
211:	static void ieee80211_agg_start_txq(struct sta_info *, int, bool);
732:	static void ieee80211_agg_tx_operational(struct ieee80211_local *, struct sta_info *, u16);
452:	static void ieee80211_send_addba_with_timeout(struct sta_info *, struct tid_ampdu_tx *);
432:	static void sta_addba_resp_timer_expired(struct timer_list *);
561:	static void sta_tx_agg_session_timer_expired(struct timer_list *);

File net/mac80211/airtime.c:
628:	u32 ieee80211_calc_expected_tx_airtime(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, int, bool);
466:	u32 ieee80211_calc_rx_airtime(struct ieee80211_hw *, struct ieee80211_rx_status *, int);
605:	u32 ieee80211_calc_tx_airtime(struct ieee80211_hw *, struct ieee80211_tx_info *, int);
403:	static u32 ieee80211_get_rate_duration(struct ieee80211_hw *, struct ieee80211_rx_status *, u32 *);

File net/mac80211/cfg.c:
3052:	int __ieee80211_request_smps_mgd(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, enum ieee80211_smps_mode);
3875:	int ieee80211_attach_ack_skb(struct ieee80211_local *, struct sk_buff *, u64 *, gfp_t);
3848:	int ieee80211_channel_switch(struct wiphy *, struct net_device *, struct cfg80211_csa_settings *);
3456:	void ieee80211_channel_switch_disconnect(struct ieee80211_vif *, bool);
4601:	void ieee80211_color_change_finalize_work(struct work_struct *);
4625:	void ieee80211_color_change_finish(struct ieee80211_vif *);
3574:	void ieee80211_csa_finalize_work(struct work_struct *);
3425:	void ieee80211_csa_finish(struct ieee80211_vif *);
4293:	void ieee80211_fill_txq_stats(struct cfg80211_txq_stats *, struct txq_info *);
3862:	u64 ieee80211_mgmt_tx_cookie(struct ieee80211_local *);
4257:	void ieee80211_nan_func_match(struct ieee80211_vif *, struct cfg80211_nan_match_params *, gfp_t);
4225:	void ieee80211_nan_func_terminated(struct ieee80211_vif *, u8, enum nl80211_nan_func_term_reason, gfp_t);
4635:	void ieeee80211_obss_color_collision_notify(struct ieee80211_vif *, u64, gfp_t);
819:	void sta_set_rate_info_tx(struct sta_info *, const struct ieee80211_tx_rate *, struct rate_info *);
3339:	static struct cfg80211_beacon_data *cfg80211_beacon_dup(struct cfg80211_beacon_data *);
4405:	static void ieee80211_abort_pmsr(struct wiphy *, struct wireless_dev *, struct cfg80211_pmsr_request *);
2753:	static void ieee80211_abort_scan(struct wiphy *, struct wireless_dev *);
172:	static struct wireless_dev *ieee80211_add_iface(struct wiphy *, const char *, unsigned char, enum nl80211_iftype, struct vif_params *);
4704:	static int ieee80211_add_intf_link(struct wiphy *, struct wireless_dev *, unsigned int);
465:	static int ieee80211_add_key(struct wiphy *, struct net_device *, int, u8, bool, const u8 *, struct key_params *);
4757:	static int ieee80211_add_link_station(struct wiphy *, struct net_device *, struct link_station_parameters *);
344:	static int ieee80211_add_nan_func(struct wiphy *, struct wireless_dev *, struct cfg80211_nan_func *);
1915:	static int ieee80211_add_station(struct wiphy *, struct net_device *, const u8 *, struct station_parameters *);
4155:	static int ieee80211_add_tx_ts(struct wiphy *, struct net_device *, u8, const u8 *, u8, u16);
1087:	static int ieee80211_assign_beacon(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, struct cfg80211_beacon_data *, const struct ieee80211_csa_settings *, const struct ieee80211_color_change_settings *);
2789:	static int ieee80211_assoc(struct wiphy *, struct net_device *, struct cfg80211_assoc_request *);
2783:	static int ieee80211_auth(struct wiphy *, struct net_device *, struct cfg80211_auth_request *);
4067:	static int ieee80211_cfg_get_channel(struct wiphy *, struct wireless_dev *, unsigned int, struct cfg80211_chan_def *);
1401:	static int ieee80211_change_beacon(struct wiphy *, struct net_device *, struct cfg80211_beacon_data *);
2559:	static int ieee80211_change_bss(struct wiphy *, struct net_device *, struct bss_parameters *);
207:	static int ieee80211_change_iface(struct wiphy *, struct net_device *, enum nl80211_iftype, struct vif_params *);
2001:	static int ieee80211_change_station(struct wiphy *, struct net_device *, const u8 *, struct station_parameters *);
4648:	static int ieee80211_color_change(struct wiphy *, struct net_device *, struct cfg80211_color_change_settings *);
4550:	static void ieee80211_color_change_bss_config_notify(struct ieee80211_sub_if_data *, u8, int, u32);
4576:	static int ieee80211_color_change_finalize(struct ieee80211_sub_if_data *);
803:	static int ieee80211_config_default_beacon_key(struct wiphy *, struct net_device *, int, u8);
770:	static int ieee80211_config_default_key(struct wiphy *, struct net_device *, int, u8, bool, bool);
787:	static int ieee80211_config_default_mgmt_key(struct wiphy *, struct net_device *, int, u8);
3565:	static void ieee80211_csa_finalize(struct ieee80211_sub_if_data *);
2795:	static int ieee80211_deauth(struct wiphy *, struct net_device *, struct cfg80211_deauth_request *);
200:	static int ieee80211_del_iface(struct wiphy *, struct wireless_dev *);
4716:	static void ieee80211_del_intf_link(struct wiphy *, struct wireless_dev *, unsigned int);
637:	static int ieee80211_del_key(struct wiphy *, struct net_device *, int, u8, bool, const u8 *);
4824:	static int ieee80211_del_link_station(struct wiphy *, struct net_device *, struct link_station_del_parameters *);
399:	static void ieee80211_del_nan_func(struct wiphy *, struct wireless_dev *, u64);
1987:	static int ieee80211_del_station(struct wiphy *, struct net_device *, struct station_del_parameters *);
4181:	static int ieee80211_del_tx_ts(struct wiphy *, struct net_device *, u8, const u8 *);
2801:	static int ieee80211_disassoc(struct wiphy *, struct net_device *, struct cfg80211_disassoc_request *);
855:	static int ieee80211_dump_station(struct wiphy *, struct net_device *, int, u8 *, struct station_info *);
877:	static int ieee80211_dump_survey(struct wiphy *, struct net_device *, int, struct survey_info *);
3316:	static void ieee80211_end_cac(struct wiphy *, struct net_device *);
3953:	static int ieee80211_get_antenna(struct wiphy *, u32 *, u32 *);
4384:	static int ieee80211_get_ftm_responder_stats(struct wiphy *, struct net_device *, struct cfg80211_ftm_responder_stats *);
665:	static int ieee80211_get_key(struct wiphy *, struct net_device *, int, u8, bool, const u8 *, void *, void (*)(void *, struct key_params *));
885:	static int ieee80211_get_station(struct wiphy *, struct net_device *, const u8 *, struct station_info *);
2991:	static int ieee80211_get_tx_power(struct wiphy *, struct wireless_dev *, int *);
4342:	static int ieee80211_get_txq_stats(struct wiphy *, struct wireless_dev *, struct cfg80211_txq_stats *);
2807:	static int ieee80211_join_ibss(struct wiphy *, struct net_device *, struct cfg80211_ibss_params *);
2818:	static int ieee80211_join_ocb(struct wiphy *, struct net_device *, struct ocb_setup *);
2813:	static int ieee80211_leave_ibss(struct wiphy *, struct net_device *);
2824:	static int ieee80211_leave_ocb(struct wiphy *, struct net_device *);
4788:	static int ieee80211_mod_link_station(struct wiphy *, struct net_device *, struct link_station_parameters *);
314:	static int ieee80211_nan_change_conf(struct wiphy *, struct wireless_dev *, struct cfg80211_nan_conf *, u32);
3975:	static int ieee80211_probe_client(struct wiphy *, struct net_device *, const u8 *, u64 *);
4441:	static int ieee80211_reset_tid_config(struct wiphy *, struct net_device *, const u8 *, u8);
3009:	static void ieee80211_rfkill_poll(struct wiphy *);
2709:	static int ieee80211_scan(struct wiphy *, struct cfg80211_scan_request *);
2759:	static int ieee80211_sched_scan_start(struct wiphy *, struct net_device *, struct cfg80211_sched_scan_request *);
2772:	static int ieee80211_sched_scan_stop(struct wiphy *, struct net_device *, u64);
3943:	static int ieee80211_set_antenna(struct wiphy *, u32, u32);
4136:	static int ieee80211_set_ap_chanwidth(struct wiphy *, struct net_device *, unsigned int, struct cfg80211_chan_def *);
3215:	static int ieee80211_set_bitrate_mask(struct wiphy *, struct net_device *, unsigned int, const u8 *, const struct cfg80211_bitrate_mask *);
3158:	static int ieee80211_set_cqm_rssi_config(struct wiphy *, struct net_device *, s32, u32);
3189:	static int ieee80211_set_cqm_rssi_range_config(struct wiphy *, struct net_device *, s32, s32);
973:	static int ieee80211_set_fils_discovery(struct ieee80211_sub_if_data *, struct cfg80211_fils_discovery *, struct ieee80211_link_data *, struct ieee80211_bss_conf *);
2829:	static int ieee80211_set_mcast_rate(struct wiphy *, struct net_device *, int *);
84:	static int ieee80211_set_mon_options(struct ieee80211_sub_if_data *, struct vif_params *);
906:	static int ieee80211_set_monitor_channel(struct wiphy *, struct cfg80211_chan_def *);
4282:	static int ieee80211_set_multicast_to_unicast(struct wiphy *, struct net_device *, const bool);
422:	static int ieee80211_set_noack_map(struct wiphy *, struct net_device *, u16);
3114:	static int ieee80211_set_power_mgmt(struct wiphy *, struct net_device *, bool, int);
4111:	static int ieee80211_set_qos_map(struct wiphy *, struct net_device *, struct cfg80211_qos_map *);
4693:	static int ieee80211_set_radar_background(struct wiphy *, struct cfg80211_chan_def *);
3960:	static int ieee80211_set_rekey_data(struct wiphy *, struct net_device *, struct cfg80211_gtk_rekey_data *);
4468:	static int ieee80211_set_sar_specs(struct wiphy *, struct cfg80211_sar_specs *);
4414:	static int ieee80211_set_tid_config(struct wiphy *, struct net_device *, struct cfg80211_tid_config *);
2900:	static int ieee80211_set_tx_power(struct wiphy *, struct wireless_dev *, enum nl80211_tx_power_setting, int);
2646:	static int ieee80211_set_txq_params(struct wiphy *, struct net_device *, struct ieee80211_txq_params *);
1003:	static int ieee80211_set_unsol_bcast_probe_resp(struct ieee80211_sub_if_data *, struct cfg80211_unsol_bcast_probe_resp *, struct ieee80211_link_data *, struct ieee80211_bss_conf *);
2843:	static int ieee80211_set_wiphy_params(struct wiphy *, u32);
1216:	static int ieee80211_start_ap(struct wiphy *, struct net_device *, struct cfg80211_ap_settings *);
279:	static int ieee80211_start_nan(struct wiphy *, struct wireless_dev *, struct cfg80211_nan_conf *);
258:	static int ieee80211_start_p2p_device(struct wiphy *, struct wireless_dev *);
4395:	static int ieee80211_start_pmsr(struct wiphy *, struct wireless_dev *, struct cfg80211_pmsr_request *);
3283:	static int ieee80211_start_radar_detection(struct wiphy *, struct net_device *, struct cfg80211_chan_def *, u32);
1452:	static int ieee80211_stop_ap(struct wiphy *, struct net_device *, unsigned int);
305:	static void ieee80211_stop_nan(struct wiphy *, struct wireless_dev *);
273:	static void ieee80211_stop_p2p_device(struct wiphy *, struct wireless_dev *);
3905:	static void ieee80211_update_mgmt_frame_registrations(struct wiphy *, struct wireless_dev *, struct mgmt_frame_regs *);
1553:	static int sta_apply_auth_flags(struct ieee80211_local *, struct sta_info *, u32, u32);
1776:	static int sta_apply_parameters(struct ieee80211_local *, struct sta_info *, struct station_parameters *);
1678:	static int sta_link_apply_parameters(struct ieee80211_local *, struct sta_info *, bool, struct link_station_parameters *);

File net/mac80211/chan.c:
43:	int ieee80211_chanctx_refcount(struct ieee80211_local *, struct ieee80211_chanctx *);
555:	bool ieee80211_is_radar_required(struct ieee80211_local *);
2029:	void ieee80211_iter_chan_contexts_atomic(struct ieee80211_hw *, void (*)(struct ieee80211_hw *, struct ieee80211_chanctx_conf *, void *), void *);
1917:	int ieee80211_link_change_bandwidth(struct ieee80211_link_data *, const struct cfg80211_chan_def *, u32 *);
1030:	void ieee80211_link_copy_chanctx_to_vlans(struct ieee80211_link_data *, bool);
1991:	void ieee80211_link_release_channel(struct ieee80211_link_data *);
1078:	int ieee80211_link_reserve_chanctx(struct ieee80211_link_data *, const struct cfg80211_chan_def *, enum ieee80211_chanctx_mode, bool);
1042:	int ieee80211_link_unreserve_chanctx(struct ieee80211_link_data *);
1790:	int ieee80211_link_use_channel(struct ieee80211_link_data *, const struct cfg80211_chan_def *, enum ieee80211_chanctx_mode);
1855:	int ieee80211_link_use_reserved_context(struct ieee80211_link_data *);
2003:	void ieee80211_link_vlan_copy_chanctx(struct ieee80211_link_data *);
749:	void ieee80211_recalc_chanctx_chantype(struct ieee80211_local *, struct ieee80211_chanctx *);
450:	void ieee80211_recalc_chanctx_min_def(struct ieee80211_local *, struct ieee80211_chanctx *);
893:	void ieee80211_recalc_smps_chanctx(struct ieee80211_local *, struct ieee80211_chanctx *);
1753:	static void __ieee80211_link_release_channel(struct ieee80211_link_data *);
352:	static u32 _ieee80211_recalc_chanctx_min_def(struct ieee80211_local *, struct ieee80211_chanctx *);
622:	static struct ieee80211_chanctx *ieee80211_alloc_chanctx(struct ieee80211_local *, const struct cfg80211_chan_def *, enum ieee80211_chanctx_mode);
834:	static int ieee80211_assign_link_chanctx(struct ieee80211_link_data *, struct ieee80211_chanctx *);
393:	static void ieee80211_chan_bw_change(struct ieee80211_local *, struct ieee80211_chanctx *, bool);
467:	static void ieee80211_change_chanctx(struct ieee80211_local *, struct ieee80211_chanctx *, struct ieee80211_chanctx *, const struct cfg80211_chan_def *);
702:	static void ieee80211_del_chanctx(struct ieee80211_local *, struct ieee80211_chanctx *);
1316:	static int ieee80211_link_use_reserved_assign(struct ieee80211_link_data *);
1233:	static int ieee80211_link_use_reserved_reassign(struct ieee80211_link_data *);
678:	static struct ieee80211_chanctx *ieee80211_new_chanctx(struct ieee80211_local *, const struct cfg80211_chan_def *, enum ieee80211_chanctx_mode);
810:	static void ieee80211_recalc_radar_chanctx(struct ieee80211_local *, struct ieee80211_chanctx *);
1495:	static int ieee80211_vif_use_reserved_switch(struct ieee80211_local *);

File net/mac80211/driver-ops.c:
54:	int drv_add_interface(struct ieee80211_local *, struct ieee80211_sub_if_data *);
387:	int drv_ampdu_action(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_ampdu_params *);
280:	int drv_assign_vif_chanctx(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_bss_conf *, struct ieee80211_chanctx *);
77:	int drv_change_interface(struct ieee80211_local *, struct ieee80211_sub_if_data *, enum nl80211_iftype, bool);
499:	int drv_change_sta_links(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_sta *, u16, u16);
475:	int drv_change_vif_links(struct ieee80211_local *, struct ieee80211_sub_if_data *, u16, u16, struct ieee80211_bss_conf **);
184:	int drv_conf_tx(struct ieee80211_local *, struct ieee80211_link_data *, u16, const struct ieee80211_tx_queue_params *);
219:	u64 drv_get_tsf(struct ieee80211_local *, struct ieee80211_sub_if_data *);
412:	void drv_link_info_changed(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_bss_conf *, int, u64);
251:	void drv_offset_tsf(struct ieee80211_local *, struct ieee80211_sub_if_data *, s64);
94:	void drv_remove_interface(struct ieee80211_local *, struct ieee80211_sub_if_data *);
266:	void drv_reset_tsf(struct ieee80211_local *, struct ieee80211_sub_if_data *);
451:	int drv_set_key(struct ieee80211_local *, enum set_key_cmd, struct ieee80211_sub_if_data *, struct ieee80211_sta *, struct ieee80211_key_conf *);
236:	void drv_set_tsf(struct ieee80211_local *, struct ieee80211_sub_if_data *, u64);
164:	void drv_sta_rc_update(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_sta *, u32);
144:	int drv_sta_set_txpwr(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct sta_info *);
109:	int drv_sta_state(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct sta_info *, enum ieee80211_sta_state, enum ieee80211_sta_state);
12:	int drv_start(struct ieee80211_local *);
34:	void drv_stop(struct ieee80211_local *);
334:	int drv_switch_vif_chanctx(struct ieee80211_local *, struct ieee80211_vif_chanctx_switch *, int, enum ieee80211_chanctx_switch_mode);
308:	void drv_unassign_vif_chanctx(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_bss_conf *, struct ieee80211_chanctx *);

File net/mac80211/driver-ops.h:
1072:	static void drv_channel_switch_rx_beacon(struct ieee80211_sub_if_data *, struct ieee80211_channel_switch *);
1401:	static void drv_sta_set_4addr(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_sta *, bool);
932:	static int drv_start_ap(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_bss_conf *);
235:	static void drv_update_tkip_key(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_key_conf *, struct sta_info *, u32, u16 *);

File net/mac80211/eht.c:
11:	void ieee80211_eht_cap_ie_to_sta_eht_cap(struct ieee80211_sub_if_data *, struct ieee80211_supported_band *, const u8 *, u8, const struct ieee80211_eht_cap_elem *, u8, struct link_sta_info *);

File net/mac80211/ethtool.c:
226:	static void ieee80211_get_regs(struct net_device *, struct ethtool_regs *, void *);
221:	static int ieee80211_get_regs_len(struct net_device *);
29:	static void ieee80211_get_ringparam(struct net_device *, struct ethtool_ringparam *, struct kernel_ethtool_ringparam *, struct netlink_ext_ack *);
53:	static int ieee80211_get_sset_count(struct net_device *, int);
68:	static void ieee80211_get_stats(struct net_device *, struct ethtool_stats *, u64 *);
209:	static void ieee80211_get_strings(struct net_device *, u32, u8 *);
16:	static int ieee80211_set_ringparam(struct net_device *, struct ethtool_ringparam *, struct kernel_ethtool_ringparam *, struct netlink_ext_ack *);

File net/mac80211/fils_aead.c:
268:	int fils_decrypt_assoc_resp(struct ieee80211_sub_if_data *, u8 *, size_t *, struct ieee80211_mgd_assoc_data *);
217:	int fils_encrypt_assoc_req(struct sk_buff *, struct ieee80211_mgd_assoc_data *);
25:	static int aes_s2v(struct crypto_shash *, size_t, const u8 **, size_t *, u8 *);

File net/mac80211/he.c:
110:	void ieee80211_he_cap_ie_to_sta_he_cap(struct ieee80211_sub_if_data *, struct ieee80211_supported_band *, const u8 *, u8, const struct ieee80211_he_6ghz_capa *, struct link_sta_info *);
206:	void ieee80211_he_op_ie_to_bss_conf(struct ieee80211_vif *, const struct ieee80211_he_operation *);
218:	void ieee80211_he_spr_ie_to_bss_conf(struct ieee80211_vif *, const struct ieee80211_he_spr *);

File net/mac80211/ht.c:
45:	void ieee80211_apply_htcap_overrides(struct ieee80211_sub_if_data *, struct ieee80211_sta_ht_cap *);
353:	void ieee80211_ba_session_work(struct work_struct *);
138:	bool ieee80211_ht_cap_ie_to_sta_ht_cap(struct ieee80211_sub_if_data *, struct ieee80211_supported_band *, const struct ieee80211_ht_cap *, struct link_sta_info *);
501:	void ieee80211_process_delba(struct ieee80211_sub_if_data *, struct sta_info *, struct ieee80211_mgmt *, size_t);
587:	void ieee80211_request_smps(struct ieee80211_vif *, unsigned int, enum ieee80211_smps_mode);
459:	void ieee80211_send_delba(struct ieee80211_sub_if_data *, const u8 *, u16, u16, u16);
539:	int ieee80211_send_smps_action(struct ieee80211_sub_if_data *, enum ieee80211_smps_mode, const u8 *, const u8 *);
525:	enum nl80211_smps_mode ieee80211_smps_mode_to_smps_mode(enum ieee80211_smps_mode);
314:	void ieee80211_sta_tear_down_BA_sessions(struct sta_info *, enum ieee80211_agg_stop_reason);

File net/mac80211/ibss.c:
480:	int ieee80211_ibss_csa_beacon(struct ieee80211_sub_if_data *, struct cfg80211_csa_settings *);
526:	int ieee80211_ibss_finish_csa(struct ieee80211_sub_if_data *);
1754:	int ieee80211_ibss_join(struct ieee80211_sub_if_data *, struct cfg80211_ibss_params *);
1864:	int ieee80211_ibss_leave(struct ieee80211_sub_if_data *);
1739:	void ieee80211_ibss_notify_scan_completed(struct ieee80211_local *);
1195:	void ieee80211_ibss_rx_no_sta(struct ieee80211_sub_if_data *, const u8 *, const u8 *, u32);
1614:	void ieee80211_ibss_rx_queued_mgmt(struct ieee80211_sub_if_data *, struct sk_buff *);
1727:	void ieee80211_ibss_setup_sdata(struct ieee80211_sub_if_data *);
558:	void ieee80211_ibss_stop(struct ieee80211_sub_if_data *);
1675:	void ieee80211_ibss_work(struct ieee80211_sub_if_data *);
218:	static void __ieee80211_sta_join_ibss(struct ieee80211_sub_if_data *, const u8 *, const int, struct cfg80211_chan_def *, const u32, const u16, u64, bool);
731:	static void ieee80211_csa_connection_drop_work(struct work_struct *);
591:	static struct sta_info *ieee80211_ibss_add_sta(struct ieee80211_sub_if_data *, const u8 *, const u8 *, u32);
38:	static struct beacon_data *ieee80211_ibss_build_presp(struct ieee80211_sub_if_data *, const int, const u32, const u16, u64, struct cfg80211_chan_def *, bool *, struct cfg80211_csa_settings *);
749:	static void ieee80211_ibss_csa_mark_radar(struct ieee80211_sub_if_data *);
672:	static void ieee80211_ibss_disconnect(struct ieee80211_sub_if_data *);
565:	static struct sta_info *ieee80211_ibss_finish_sta(struct sta_info *);
766:	static bool ieee80211_ibss_process_chanswitch(struct ieee80211_sub_if_data *, struct ieee802_11_elems *, bool);
1719:	static void ieee80211_ibss_timer(struct timer_list *);
1319:	static void ieee80211_sta_create_ibss(struct ieee80211_sub_if_data *);
394:	static void ieee80211_sta_join_ibss(struct ieee80211_sub_if_data *, struct ieee80211_bss *);

File net/mac80211/iface.c:
48:	bool __ieee80211_recalc_txpower(struct ieee80211_sub_if_data *);
1102:	int ieee80211_add_virtual_monitor(struct ieee80211_local *);
1050:	void ieee80211_adjust_monitor_flags(struct ieee80211_sub_if_data *, const int);
1170:	void ieee80211_del_virtual_monitor(struct ieee80211_local *);
1208:	int ieee80211_do_open(struct wireless_dev *, bool);
142:	u32 ieee80211_idle_off(struct ieee80211_local *);
2041:	int ieee80211_if_add(struct ieee80211_local *, const char *, unsigned char, struct wireless_dev **, enum nl80211_iftype, struct vif_params *);
1882:	int ieee80211_if_change_type(struct ieee80211_sub_if_data *, enum nl80211_iftype);
2215:	void ieee80211_if_remove(struct ieee80211_sub_if_data *);
2322:	void ieee80211_iface_exit(void);
2317:	int ieee80211_iface_init(void);
147:	void ieee80211_recalc_idle(struct ieee80211_local *);
1031:	void ieee80211_recalc_offload(struct ieee80211_local *);
78:	void ieee80211_recalc_txpower(struct ieee80211_sub_if_data *, bool);
2243:	void ieee80211_remove_interfaces(struct ieee80211_local *);
2236:	void ieee80211_sdata_stop(struct ieee80211_sub_if_data *);
2335:	void ieee80211_vif_dec_num_mcast(struct ieee80211_sub_if_data *);
2327:	void ieee80211_vif_inc_num_mcast(struct ieee80211_sub_if_data *);
1682:	static void ieee80211_activate_links_work(struct work_struct *);
1909:	static void ieee80211_assign_perm_addr(struct ieee80211_local *, u8 *, enum nl80211_iftype);
254:	static int ieee80211_change_mac(struct net_device *, void *);
309:	static int ieee80211_check_concurrent_iface(struct ieee80211_sub_if_data *, enum nl80211_iftype);
444:	static void ieee80211_do_stop(struct ieee80211_sub_if_data *, bool);
811:	static void ieee80211_get_stats64(struct net_device *, struct rtnl_link_stats64 *);
1451:	static void ieee80211_if_free(struct net_device *);
1456:	static void ieee80211_if_setup(struct net_device *);
1614:	static void ieee80211_iface_work(struct work_struct *);
826:	static u16 ieee80211_monitor_select_queue(struct net_device *, struct sk_buff *, struct net_device *);
865:	static int ieee80211_netdev_fill_forward_path(struct net_device_path_ctx *, struct net_device_path *);
424:	static int ieee80211_open(struct net_device *);
1674:	static void ieee80211_recalc_smps_work(struct work_struct *);
762:	static void ieee80211_set_multicast_list(struct net_device *);
946:	static bool ieee80211_set_sdata_offload_flags(struct ieee80211_sub_if_data *);
1694:	static void ieee80211_setup_sdata(struct ieee80211_sub_if_data *, enum nl80211_iftype);
738:	static int ieee80211_stop(struct net_device *);
805:	static void ieee80211_uninit(struct net_device *);
2291:	static int netdev_notify(struct notifier_block *, unsigned long, void *);

File net/mac80211/key.c:
1192:	void ieee80211_delayed_tailroom_dec(struct work_struct *);
1101:	void ieee80211_free_key_list(struct ieee80211_local *, struct list_head *);
1112:	void ieee80211_free_keys(struct ieee80211_sub_if_data *, bool);
1160:	void ieee80211_free_sta_keys(struct ieee80211_local *, struct sta_info *);
1233:	void ieee80211_get_key_rx_seq(struct ieee80211_key_conf *, int, struct ieee80211_key_seq *);
1368:	struct ieee80211_key_conf *ieee80211_gtk_rekey_add(struct ieee80211_vif *, struct ieee80211_key_conf *);
1222:	void ieee80211_gtk_rekey_notify(struct ieee80211_vif *, const u8 *, const u8 *, gfp_t);
979:	void ieee80211_iter_keys(struct ieee80211_hw *, struct ieee80211_vif *, void (*)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *, void *), void *);
1038:	void ieee80211_iter_keys_rcu(struct ieee80211_hw *, struct ieee80211_vif *, void (*)(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_sta *, struct ieee80211_key_conf *, void *), void *);
587:	struct ieee80211_key *ieee80211_key_alloc(u32, int, size_t, const u8 *, size_t, const u8 *);
935:	void ieee80211_key_free(struct ieee80211_key *, bool);
799:	void ieee80211_key_free_unused(struct ieee80211_key *);
838:	int ieee80211_key_link(struct ieee80211_key *, struct ieee80211_link_data *, struct sta_info *);
1400:	void ieee80211_key_mic_failure(struct ieee80211_key_conf *);
1422:	void ieee80211_key_replay(struct ieee80211_key_conf *);
1449:	int ieee80211_key_switch_links(struct ieee80211_sub_if_data *, unsigned long, unsigned long);
950:	void ieee80211_reenable_keys(struct ieee80211_sub_if_data *);
1342:	void ieee80211_remove_key(struct ieee80211_key_conf *);
1082:	void ieee80211_remove_link_keys(struct ieee80211_link_data *, struct list_head *);
433:	void ieee80211_set_default_beacon_key(struct ieee80211_link_data *, int);
382:	void ieee80211_set_default_key(struct ieee80211_link_data *, int, bool, bool);
407:	void ieee80211_set_default_mgmt_key(struct ieee80211_link_data *, int);
1286:	void ieee80211_set_key_rx_seq(struct ieee80211_key_conf *, int, struct ieee80211_key_seq *);
291:	int ieee80211_set_tx_key(struct ieee80211_key *);
763:	static void __ieee80211_key_destroy(struct ieee80211_key *, bool);
355:	static void __ieee80211_set_default_key(struct ieee80211_link_data *, int, bool, bool);
273:	static int _ieee80211_set_tx_key(struct ieee80211_key *, bool);
114:	static void decrease_tailroom_need_count(struct ieee80211_sub_if_data *, int);
1060:	static void ieee80211_free_keys_iface(struct ieee80211_sub_if_data *, struct list_head *);
234:	static void ieee80211_key_disable_hw_accel(struct ieee80211_key *);
125:	static int ieee80211_key_enable_hw_accel(struct ieee80211_key *);
740:	static void ieee80211_key_free_common(struct ieee80211_key *);
441:	static int ieee80211_key_replace(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, struct sta_info *, bool, struct ieee80211_key *, struct ieee80211_key *);

File net/mac80211/led.c:
289:	const char *__ieee80211_create_tpt_led_trigger(struct ieee80211_hw *, unsigned int, const struct ieee80211_tpt_blink *, unsigned int);
222:	const char *__ieee80211_get_assoc_led_name(struct ieee80211_hw *);
214:	const char *__ieee80211_get_radio_led_name(struct ieee80211_hw *);
238:	const char *__ieee80211_get_rx_led_name(struct ieee80211_hw *);
230:	const char *__ieee80211_get_tx_led_name(struct ieee80211_hw *);
32:	void ieee80211_alloc_led_names(struct ieee80211_local *);
44:	void ieee80211_free_led_names(struct ieee80211_local *);
12:	void ieee80211_led_assoc(struct ieee80211_local *, bool);
197:	void ieee80211_led_exit(struct ieee80211_local *);
152:	void ieee80211_led_init(struct ieee80211_local *);
22:	void ieee80211_led_radio(struct ieee80211_local *, bool);
350:	void ieee80211_mod_tpt_led_trig(struct ieee80211_local *, unsigned int, unsigned int);
92:	static int ieee80211_assoc_led_activate(struct led_classdev *);
103:	static void ieee80211_assoc_led_deactivate(struct led_classdev *);
112:	static int ieee80211_radio_led_activate(struct led_classdev *);
123:	static void ieee80211_radio_led_deactivate(struct led_classdev *);
72:	static int ieee80211_rx_led_activate(struct led_classdev *);
83:	static void ieee80211_rx_led_deactivate(struct led_classdev *);
132:	static int ieee80211_tpt_led_activate(struct led_classdev *);
143:	static void ieee80211_tpt_led_deactivate(struct led_classdev *);
52:	static int ieee80211_tx_led_activate(struct led_classdev *);
63:	static void ieee80211_tx_led_deactivate(struct led_classdev *);
258:	static void tpt_trig_timer(struct timer_list *);

File net/mac80211/link.c:
20:	void ieee80211_link_init(struct ieee80211_sub_if_data *, int, struct ieee80211_link_data *, struct ieee80211_bss_conf *);
14:	void ieee80211_link_setup(struct ieee80211_link_data *);
64:	void ieee80211_link_stop(struct ieee80211_link_data *);
433:	int ieee80211_set_active_links(struct ieee80211_vif *, u16);
468:	void ieee80211_set_active_links_async(struct ieee80211_vif *, u16);
288:	void ieee80211_vif_clear_links(struct ieee80211_sub_if_data *);
276:	int ieee80211_vif_set_links(struct ieee80211_sub_if_data *, u16);
305:	static int _ieee80211_set_active_links(struct ieee80211_sub_if_data *, u16);
101:	static void ieee80211_free_links(struct ieee80211_sub_if_data *, struct link_container **);
162:	static int ieee80211_vif_update_links(struct ieee80211_sub_if_data *, struct link_container **, u16);

File net/mac80211/main.c:
622:	struct ieee80211_hw *ieee80211_alloc_hw_nm(size_t, const struct ieee80211_ops *, const char *);
210:	void ieee80211_bss_info_change_notify(struct ieee80211_sub_if_data *, u64);
36:	void ieee80211_configure_filter(struct ieee80211_local *);
1512:	void ieee80211_free_hw(struct ieee80211_hw *);
168:	int ieee80211_hw_config(struct ieee80211_local *, u32);
276:	void ieee80211_link_info_change_notify(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, u64);
931:	int ieee80211_register_hw(struct ieee80211_hw *);
293:	u32 ieee80211_reset_erp_info(struct ieee80211_sub_if_data *);
395:	void ieee80211_restart_hw(struct ieee80211_hw *);
1458:	void ieee80211_unregister_hw(struct ieee80211_hw *);
263:	void ieee80211_vif_cfg_change_notify(struct ieee80211_sub_if_data *, u64);
1567:	static void ieee80211_exit(void);
1505:	static int ieee80211_free_ack_frame(int, void *, void *);
479:	static int ieee80211_ifa6_changed(struct notifier_block *, unsigned long, void *);
421:	static int ieee80211_ifa_changed(struct notifier_block *, unsigned long, void *);
1543:	static int ieee80211_init(void);
86:	static void ieee80211_reconfig_filter(struct work_struct *);
330:	static void ieee80211_restart_work(struct work_struct *);
303:	static void ieee80211_tasklet_handler(struct tasklet_struct *);

File net/mac80211/michael.c:
53:	void michael_mic(const u8 *, struct ieee80211_hdr *, const u8 *, size_t, u8 *);

File net/mac80211/mlme.c:
3220:	struct sk_buff *ieee80211_ap_probereq_get(struct ieee80211_hw *, struct ieee80211_vif *);
3379:	void ieee80211_beacon_loss(struct ieee80211_vif *);
1710:	void ieee80211_chswitch_done(struct ieee80211_vif *, bool);
3391:	void ieee80211_connection_loss(struct ieee80211_vif *);
7427:	void ieee80211_cqm_beacon_loss_notify(struct ieee80211_vif *, gfp_t);
7414:	void ieee80211_cqm_rssi_notify(struct ieee80211_vif *, enum nl80211_cqm_rssi_threshold_event, s32, gfp_t);
2335:	void ieee80211_dfs_cac_timer_work(struct work_struct *);
7469:	void ieee80211_disable_rssi_reports(struct ieee80211_vif *);
3403:	void ieee80211_disconnect(struct ieee80211_vif *, bool);
2242:	void ieee80211_dynamic_ps_disable_work(struct work_struct *);
2259:	void ieee80211_dynamic_ps_enable_work(struct work_struct *);
2328:	void ieee80211_dynamic_ps_timer(struct timer_list *);
7455:	void ieee80211_enable_rssi_reports(struct ieee80211_vif *, int, int);
3684:	const char *ieee80211_get_reason_code_string(u16);
6956:	int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *, struct cfg80211_assoc_request *);
6652:	int ieee80211_mgd_auth(struct ieee80211_sub_if_data *, struct cfg80211_auth_request *);
6062:	void ieee80211_mgd_conn_tx_status(struct ieee80211_sub_if_data *, __le16, bool);
7283:	int ieee80211_mgd_deauth(struct ieee80211_sub_if_data *, struct cfg80211_deauth_request *);
7351:	int ieee80211_mgd_disassoc(struct ieee80211_sub_if_data *, struct cfg80211_disassoc_request *);
2449:	void ieee80211_mgd_set_link_qos_params(struct ieee80211_link_data *);
6431:	void ieee80211_mgd_setup_link(struct ieee80211_link_data *);
7381:	void ieee80211_mgd_stop(struct ieee80211_sub_if_data *);
7375:	void ieee80211_mgd_stop_link(struct ieee80211_link_data *);
6459:	void ieee80211_mlme_notify_scan_completed(struct ieee80211_local *);
2182:	void ieee80211_recalc_ps(struct ieee80211_local *);
2232:	void ieee80211_recalc_ps_vif(struct ieee80211_sub_if_data *);
1571:	void ieee80211_send_4addr_nullfunc(struct ieee80211_local *, struct ieee80211_sub_if_data *);
1541:	void ieee80211_send_nullfunc(struct ieee80211_local *, struct ieee80211_sub_if_data *, bool);
1524:	void ieee80211_send_pspoll(struct ieee80211_local *, struct ieee80211_sub_if_data *);
5930:	void ieee80211_sta_connection_lost(struct ieee80211_sub_if_data *, u8, bool);
2433:	void ieee80211_sta_handle_tspec_ac_params(struct ieee80211_sub_if_data *);
111:	void ieee80211_sta_reset_beacon_monitor(struct ieee80211_sub_if_data *);
123:	void ieee80211_sta_reset_conn_monitor(struct ieee80211_sub_if_data *);
6358:	void ieee80211_sta_restart(struct ieee80211_sub_if_data *);
5799:	void ieee80211_sta_rx_queued_ext(struct ieee80211_sub_if_data *, struct sk_buff *);
5820:	void ieee80211_sta_rx_queued_mgmt(struct ieee80211_sub_if_data *, struct sk_buff *);
6404:	void ieee80211_sta_setup_sdata(struct ieee80211_sub_if_data *);
3071:	void ieee80211_sta_tx_notify(struct ieee80211_sub_if_data *, struct ieee80211_hdr *, bool, u16);
6074:	void ieee80211_sta_work(struct ieee80211_sub_if_data *);
3282:	static void __ieee80211_disconnect(struct ieee80211_sub_if_data *);
950:	static size_t ieee80211_assoc_link_elems(struct ieee80211_sub_if_data *, struct sk_buff *, u16 *, const struct element *, const u8 *, size_t, unsigned int, struct ieee80211_link_data *, u16 *);
4890:	static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *, struct ieee80211_mgmt *, struct ieee802_11_elems *, const u8 *, unsigned int);
5942:	static int ieee80211_auth(struct ieee80211_sub_if_data *);
3511:	static void ieee80211_auth_challenge(struct ieee80211_sub_if_data *, struct ieee80211_mgmt *, size_t);
3345:	static void ieee80211_beacon_connection_loss_work(struct work_struct *);
1673:	static void ieee80211_chswitch_post_beacon(struct ieee80211_link_data *);
1731:	static void ieee80211_chswitch_timer(struct timer_list *);
1602:	static void ieee80211_chswitch_work(struct work_struct *);
408:	static int ieee80211_config_bw(struct ieee80211_link_data *, const struct ieee80211_ht_cap *, const struct ieee80211_vht_cap *, const struct ieee80211_ht_operation *, const struct ieee80211_vht_operation *, const struct ieee80211_he_operation *, const struct ieee80211_eht_operation *, const struct ieee80211_s1g_oper_ie *, const u8 *, u32 *);
3370:	static void ieee80211_csa_connection_drop_work(struct work_struct *);
3460:	static void ieee80211_destroy_assoc_data(struct ieee80211_sub_if_data *, enum assoc_status);
3419:	static void ieee80211_destroy_auth_data(struct ieee80211_sub_if_data *, bool);
146:	static ieee80211_conn_flags_t ieee80211_determine_chantype(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, ieee80211_conn_flags_t, struct ieee80211_supported_band *, struct ieee80211_channel *, u32, const struct ieee80211_ht_operation *, const struct ieee80211_vht_operation *, const struct ieee80211_he_operation *, const struct ieee80211_eht_operation *, const struct ieee80211_s1g_oper_ie *, struct cfg80211_chan_def *, bool);
4856:	static bool ieee80211_get_dtim(const struct cfg80211_bss_ies *, u8 *, u8 *);
5371:	static void ieee80211_handle_beacon_sig(struct ieee80211_link_data *, struct ieee80211_if_managed *, struct ieee80211_bss_conf *, struct ieee80211_local *, struct ieee80211_rx_status *);
2628:	static u32 ieee80211_handle_bss_capability(struct ieee80211_link_data *, u16, bool, u8);
2038:	static u32 ieee80211_handle_pwr_constr(struct ieee80211_link_data *, struct ieee80211_channel *, struct ieee80211_mgmt *, const u8 *, u8, const u8 *, const u8 *);
3541:	static bool ieee80211_mark_sta_auth(struct ieee80211_sub_if_data *);
3150:	static void ieee80211_mgd_probe_ap(struct ieee80211_sub_if_data *, bool);
3101:	static void ieee80211_mgd_probe_ap_send(struct ieee80211_sub_if_data *);
4270:	static int ieee80211_mgd_setup_link_sta(struct ieee80211_link_data *, struct sta_info *, struct link_sta_info *, struct cfg80211_bss *);
4619:	static int ieee80211_prep_channel(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, struct cfg80211_bss *, ieee80211_conn_flags_t *);
6472:	static int ieee80211_prep_connection(struct ieee80211_sub_if_data *, struct cfg80211_bss *, s8, const u8 *, bool, bool);
3887:	static int ieee80211_recalc_twt_req(struct ieee80211_sub_if_data *, struct ieee80211_supported_band *, struct ieee80211_link_data *, struct link_sta_info *, struct ieee802_11_elems *);
3264:	static void ieee80211_report_disconnect(struct ieee80211_sub_if_data *, const u8 *, size_t, bool, u16, bool);
6391:	static void ieee80211_request_smps_mgd_work(struct work_struct *);
2997:	static void ieee80211_reset_ap_probe(struct ieee80211_sub_if_data *);
5281:	static void ieee80211_rx_bss_info(struct ieee80211_link_data *, struct ieee80211_mgmt *, size_t, struct ieee80211_rx_status *);
5480:	static void ieee80211_rx_mgmt_beacon(struct ieee80211_link_data *, struct ieee80211_hdr *, size_t, struct ieee80211_rx_status *);
2810:	static void ieee80211_set_disassoc(struct ieee80211_sub_if_data *, u16, u16, bool, u8 *);
1741:	static void ieee80211_sta_abort_chanswitch(struct ieee80211_link_data *);
6218:	static void ieee80211_sta_bcn_mon_timer(struct timer_list *);
6238:	static void ieee80211_sta_conn_mon_timer(struct timer_list *);
2440:	static void ieee80211_sta_handle_tspec_ac_params_wk(struct work_struct *);
6274:	static void ieee80211_sta_monitor_work(struct work_struct *);
1768:	static void ieee80211_sta_process_chanswitch(struct ieee80211_link_data *, u64, u32, struct ieee802_11_elems *, bool);
5922:	static void ieee80211_sta_timer(struct timer_list *);
2474:	static bool ieee80211_sta_wmm_params(struct ieee80211_local *, struct ieee80211_link_data *, const u8 *, size_t, const struct ieee80211_mu_edca_param_set *);

File net/mac80211/ocb.c:
173:	int ieee80211_ocb_join(struct ieee80211_sub_if_data *, struct ocb_setup *);
206:	int ieee80211_ocb_leave(struct ieee80211_sub_if_data *);
39:	void ieee80211_ocb_rx_no_sta(struct ieee80211_sub_if_data *, const u8 *, const u8 *, u32);
163:	void ieee80211_ocb_setup_sdata(struct ieee80211_sub_if_data *);
122:	void ieee80211_ocb_work(struct ieee80211_sub_if_data *);
151:	static void ieee80211_ocb_housekeeping_timer(struct timer_list *);

File net/mac80211/offchannel.c:
757:	int ieee80211_cancel_remain_on_channel(struct wiphy *, struct wireless_dev *, u64);
766:	int ieee80211_mgmt_tx(struct wiphy *, struct wireless_dev *, struct cfg80211_mgmt_tx_params *, u64 *);
987:	int ieee80211_mgmt_tx_cancel_wait(struct wiphy *, struct wireless_dev *, u64);
133:	void ieee80211_offchannel_return(struct ieee80211_local *);
83:	void ieee80211_offchannel_stop_vifs(struct ieee80211_local *);
280:	void ieee80211_ready_on_channel(struct ieee80211_hw *);
672:	int ieee80211_remain_on_channel(struct wiphy *, struct wireless_dev *, struct ieee80211_channel *, unsigned int, u64 *);
479:	void ieee80211_remain_on_channel_expired(struct ieee80211_hw *);
1003:	void ieee80211_roc_purge(struct ieee80211_local *, struct ieee80211_sub_if_data *);
995:	void ieee80211_roc_setup(struct ieee80211_local *);
385:	void ieee80211_start_next_roc(struct ieee80211_local *);
415:	static void __ieee80211_roc_work(struct ieee80211_local *);
292:	static void _ieee80211_start_next_roc(struct ieee80211_local *);
689:	static int ieee80211_cancel_roc(struct ieee80211_local *, u64, bool);
237:	static void ieee80211_handle_roc_started(struct ieee80211_roc_work *, unsigned long);
464:	static void ieee80211_hw_roc_done(struct work_struct *);
261:	static void ieee80211_hw_roc_start(struct work_struct *);
171:	static void ieee80211_roc_notify_destroy(struct ieee80211_roc_work *);
454:	static void ieee80211_roc_work(struct work_struct *);
529:	static int ieee80211_start_roc_work(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_channel *, unsigned int, u64 *, struct sk_buff *, enum ieee80211_roc_type);

File net/mac80211/rate.c:
273:	void ieee80211_check_rate_mask(struct ieee80211_link_data *);
870:	void ieee80211_get_tx_rates(struct ieee80211_vif *, struct ieee80211_sta *, struct sk_buff *, struct ieee80211_tx_rate *, int);
975:	int ieee80211_init_rate_ctrl_alg(struct ieee80211_local *, const char *);
125:	int ieee80211_rate_control_register(const struct rate_control_ops *);
156:	void ieee80211_rate_control_unregister(const struct rate_control_ops *);
1007:	void rate_control_deinitialize(struct ieee80211_local *);
900:	void rate_control_get_rate(struct ieee80211_sub_if_data *, struct sta_info *, struct ieee80211_tx_rate_control *);
31:	void rate_control_rate_init(struct sta_info *);
94:	void rate_control_rate_update(struct ieee80211_local *, struct ieee80211_supported_band *, struct sta_info *, unsigned int, u32);
943:	int rate_control_set_rates(struct ieee80211_hw *, struct ieee80211_sta *, struct ieee80211_sta_rates *);
70:	void rate_control_tx_status(struct ieee80211_local *, struct ieee80211_tx_status *);
345:	static void __rate_control_send_low(struct ieee80211_hw *, struct ieee80211_supported_band *, struct ieee80211_sta *, struct ieee80211_tx_info *, u32);
755:	static bool rate_control_cap_mask(struct ieee80211_sub_if_data *, struct ieee80211_supported_band *, struct ieee80211_sta *, u32 *, u8 *, u16 *);
394:	static bool rate_control_send_low(struct ieee80211_sta *, struct ieee80211_tx_rate_control *);
529:	static void rate_idx_match_mask(s8 *, u16 *, struct ieee80211_supported_band *, enum nl80211_chan_width, u32, u8 *, u16 *);

File net/mac80211/rc80211_minstrel_ht.c:
500:	int minstrel_ht_get_tp_avg(struct minstrel_ht_sta *, int, int, int);
2055:	void rc80211_minstrel_exit(void);
2048:	int rc80211_minstrel_init(void);
2029:	static void init_sample_table(void);
1942:	static void *minstrel_ht_alloc(struct ieee80211_hw *);
1857:	static void *minstrel_ht_alloc_sta(void *, struct ieee80211_sta *, gfp_t);
1989:	static void minstrel_ht_free(void *);
1876:	static void minstrel_ht_free_sta(void *, struct ieee80211_sta *, void *);
1994:	static u32 minstrel_ht_get_expected_throughput(void *);
1595:	static void minstrel_ht_get_rate(void *, struct ieee80211_sta *, void *, struct ieee80211_tx_rate_control *);
804:	static int minstrel_ht_move_sample_rates(struct minstrel_ht_sta *, int, u32, u32);
1840:	static void minstrel_ht_rate_init(void *, struct ieee80211_supported_band *, struct cfg80211_chan_def *, struct ieee80211_sta *, void *);
1848:	static void minstrel_ht_rate_update(void *, struct ieee80211_supported_band *, struct cfg80211_chan_def *, struct ieee80211_sta *, void *, u32);
1227:	static bool minstrel_ht_ri_txstat_valid(struct minstrel_priv *, struct minstrel_ht_sta *, struct ieee80211_rate_status *);
1442:	static void minstrel_ht_set_rate(struct minstrel_priv *, struct minstrel_ht_sta *, struct ieee80211_sta_rates *, int, int);
538:	static void minstrel_ht_sort_best_tp_rates(struct minstrel_ht_sta *, u16, u16 *);
1282:	static void minstrel_ht_tx_status(void *, struct ieee80211_supported_band *, void *, struct ieee80211_tx_status *);
1197:	static bool minstrel_ht_txstat_valid(struct minstrel_priv *, struct minstrel_ht_sta *, struct ieee80211_tx_rate *);
1698:	static void minstrel_ht_update_caps(void *, struct ieee80211_supported_band *, struct cfg80211_chan_def *, struct ieee80211_sta *, void *);
1550:	static void minstrel_ht_update_rates(struct minstrel_priv *, struct minstrel_ht_sta *);
1059:	static void minstrel_ht_update_stats(struct minstrel_priv *, struct minstrel_ht_sta *);

File net/mac80211/rx.c:
4533:	void __ieee80211_check_fast_rx_iface(struct ieee80211_sub_if_data *);
4374:	void ieee80211_check_fast_rx(struct sta_info *);
4548:	void ieee80211_check_fast_rx_iface(struct ieee80211_sub_if_data *);
4520:	void ieee80211_clear_fast_rx(struct sta_info *);
2148:	void ieee80211_destroy_frag_cache(struct ieee80211_fragment_cache *);
2140:	void ieee80211_init_frag_cache(struct ieee80211_fragment_cache *);
2518:	bool ieee80211_is_our_addr(struct ieee80211_sub_if_data *, const u8 *, int *);
4148:	void ieee80211_mark_rx_ba_filtered_frames(struct ieee80211_sta *, u8, u16, u64, u16);
4108:	void ieee80211_release_reorder_timeout(struct sta_info *, int);
5270:	void ieee80211_rx_irqsafe(struct ieee80211_hw *, struct sk_buff *);
5116:	void ieee80211_rx_list(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct list_head *);
5240:	void ieee80211_rx_napi(struct ieee80211_hw *, struct ieee80211_sta *, struct sk_buff *, struct napi_struct *);
1613:	int ieee80211_sta_ps_transition(struct ieee80211_sta *, bool);
1634:	void ieee80211_sta_pspoll(struct ieee80211_sta *);
1648:	void ieee80211_sta_uapsd_trigger(struct ieee80211_sta *, u8);
217:	static void __ieee80211_queue_skb_to_iface(struct ieee80211_sub_if_data *, int, struct sta_info *, struct sk_buff *);
2724:	static ieee80211_rx_result __ieee80211_rx_h_amsdu(struct ieee80211_rx_data *, u8);
295:	static void ieee80211_add_rx_radiotap_header(struct ieee80211_local *, struct sk_buff *, struct ieee80211_rate *, int, bool);
42:	static struct sk_buff *ieee80211_clean_skb(struct sk_buff *, unsigned int, unsigned int);
2623:	static void ieee80211_deliver_skb(struct ieee80211_rx_data *);
2572:	static void ieee80211_deliver_skb_to_local_stack(struct sk_buff *, struct ieee80211_rx_data *);
994:	static int ieee80211_get_mmie_keyidx(struct sk_buff *);
4795:	static bool ieee80211_prepare_and_rx_handle(struct ieee80211_rx_data *, struct sk_buff *, bool);
3274:	static bool ieee80211_process_rx_twt_action(struct ieee80211_rx_data *);
237:	static void ieee80211_queue_skb_to_iface(struct ieee80211_sub_if_data *, int, struct sta_info *, struct sk_buff *);
2157:	static struct ieee80211_fragment_entry *ieee80211_reassemble_add(struct ieee80211_fragment_cache *, unsigned int, unsigned int, int, struct sk_buff **);
2182:	static struct ieee80211_fragment_entry *ieee80211_reassemble_find(struct ieee80211_fragment_cache *, unsigned int, unsigned int, int, struct ieee80211_hdr *);
1118:	static void ieee80211_release_reorder_frame(struct ieee80211_sub_if_data *, struct tid_ampdu_rx *, int, struct sk_buff_head *);
1150:	static void ieee80211_release_reorder_frames(struct ieee80211_sub_if_data *, struct tid_ampdu_rx *, u16, struct sk_buff_head *);
4557:	static void ieee80211_rx_8023(struct ieee80211_rx_data *, struct ieee80211_fast_rx *, int);
3185:	static void ieee80211_rx_check_bss_color_collision(struct ieee80211_rx_data *);
4061:	static bool ieee80211_rx_data_set_link(struct ieee80211_rx_data *, u8);
4917:	static bool ieee80211_rx_for_interface(struct ieee80211_rx_data *, struct sk_buff *, bool);
3326:	static ieee80211_rx_result ieee80211_rx_h_action(struct ieee80211_rx_data *);
3679:	static ieee80211_rx_result ieee80211_rx_h_action_post_userspace(struct ieee80211_rx_data *);
3714:	static ieee80211_rx_result ieee80211_rx_h_action_return(struct ieee80211_rx_data *);
3777:	static ieee80211_rx_result ieee80211_rx_h_ext(struct ieee80211_rx_data *);
3795:	static ieee80211_rx_result ieee80211_rx_h_mgmt(struct ieee80211_rx_data *);
3229:	static ieee80211_rx_result ieee80211_rx_h_mgmt_check(struct ieee80211_rx_data *);
3636:	static ieee80211_rx_result ieee80211_rx_h_userspace_mgmt(struct ieee80211_rx_data *);
3956:	static void ieee80211_rx_handlers(struct ieee80211_rx_data *, struct sk_buff_head *);
3921:	static void ieee80211_rx_handlers_result(struct ieee80211_rx_data *, ieee80211_rx_result);
108:	static int ieee80211_rx_radiotap_hdrlen(struct ieee80211_local *, struct ieee80211_rx_status *, struct sk_buff *);
1177:	static void ieee80211_sta_reorder_release(struct ieee80211_sub_if_data *, struct tid_ampdu_rx *, struct sk_buff_head *);
1552:	static void sta_ps_start(struct sta_info *);

File net/mac80211/s1g.c:
19:	bool ieee80211_s1g_is_twt_setup(struct sk_buff *);
149:	void ieee80211_s1g_rx_twt_action(struct ieee80211_sub_if_data *, struct sk_buff *);
11:	void ieee80211_s1g_sta_rate_init(struct sta_info *);
177:	void ieee80211_s1g_status_twt_action(struct ieee80211_sub_if_data *, struct sk_buff *);

File net/mac80211/scan.c:
1313:	int __ieee80211_request_sched_scan_start(struct ieee80211_sub_if_data *, struct cfg80211_sched_scan_request *);
144:	struct ieee80211_bss *ieee80211_bss_info_update(struct ieee80211_local *, struct ieee80211_rx_status *, struct ieee80211_mgmt *, size_t, struct ieee80211_channel *);
1178:	int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *, const u8 *, u8, struct ieee80211_channel **, unsigned int, enum nl80211_bss_scan_width);
1166:	int ieee80211_request_scan(struct ieee80211_sub_if_data *, struct cfg80211_scan_request *);
1374:	int ieee80211_request_sched_scan_start(struct ieee80211_sub_if_data *, struct cfg80211_sched_scan_request *);
1393:	int ieee80211_request_sched_scan_stop(struct ieee80211_local *);
610:	void ieee80211_run_deferred_scan(struct ieee80211_local *);
32:	void ieee80211_rx_bss_put(struct ieee80211_local *, struct ieee80211_bss *);
1252:	void ieee80211_scan_cancel(struct ieee80211_local *);
512:	void ieee80211_scan_completed(struct ieee80211_hw *, struct cfg80211_scan_info *);
255:	void ieee80211_scan_rx(struct ieee80211_local *, struct sk_buff *);
1063:	void ieee80211_scan_work(struct work_struct *);
1431:	void ieee80211_sched_scan_end(struct ieee80211_local *);
1421:	void ieee80211_sched_scan_results(struct ieee80211_hw *);
1459:	void ieee80211_sched_scan_stopped(struct ieee80211_hw *);
1450:	void ieee80211_sched_scan_stopped_work(struct work_struct *);
420:	static void __ieee80211_scan_completed(struct ieee80211_hw *, bool);
694:	static int __ieee80211_start_scan(struct ieee80211_sub_if_data *, struct cfg80211_scan_request *);
594:	static bool ieee80211_can_scan(struct ieee80211_local *, struct ieee80211_sub_if_data *);
354:	static bool ieee80211_prep_hw_scan(struct ieee80211_sub_if_data *);
241:	static bool ieee80211_scan_accept_presp(struct ieee80211_sub_if_data *, u32, const u8 *);
655:	static void ieee80211_scan_state_send_probe(struct ieee80211_local *, unsigned long *);
59:	static void ieee80211_update_bss_from_elems(struct ieee80211_local *, struct ieee80211_bss *, struct ieee802_11_elems *, struct ieee80211_rx_status *, bool);

File net/mac80211/spectmgmt.c:
22:	int ieee80211_parse_ch_switch_ie(struct ieee80211_sub_if_data *, struct ieee802_11_elems *, enum nl80211_band, u32, ieee80211_conn_flags_t, u8 *, struct ieee80211_csa_ie *);
234:	void ieee80211_process_measurement_req(struct ieee80211_sub_if_data *, struct ieee80211_mgmt *, size_t);

File net/mac80211/sta_info.c:
2146:	void __ieee80211_sta_recalc_aggregates(struct sta_info *, u16);
1333:	int __sta_info_destroy(struct sta_info *);
1426:	int __sta_info_flush(struct ieee80211_sub_if_data *, bool);
1512:	struct ieee80211_sta *ieee80211_find_sta(struct ieee80211_vif *, const u8 *);
1487:	struct ieee80211_sta *ieee80211_find_sta_by_ifaddr(struct ieee80211_hw *, const u8 *, const u8 *);
276:	struct ieee80211_sta *ieee80211_find_sta_by_link_addrs(struct ieee80211_hw *, const u8 *, const u8 *, unsigned int *);
2085:	void ieee80211_send_eosp_nullfunc(struct ieee80211_sta *, int);
2866:	int ieee80211_sta_activate_link(struct sta_info *, unsigned int);
2826:	int ieee80211_sta_allocate_link(struct sta_info *, unsigned int);
2042:	void ieee80211_sta_block_awake(struct ieee80211_hw *, struct ieee80211_sta *, bool);
2074:	void ieee80211_sta_eosp(struct ieee80211_sta *);
1458:	void ieee80211_sta_expire(struct ieee80211_sub_if_data *, unsigned long);
2859:	void ieee80211_sta_free_link(struct sta_info *, unsigned int);
2795:	unsigned long ieee80211_sta_last_active(struct sta_info *);
1992:	void ieee80211_sta_ps_deliver_poll_response(struct sta_info *);
2008:	void ieee80211_sta_ps_deliver_uapsd(struct sta_info *);
1532:	void ieee80211_sta_ps_deliver_wakeup(struct sta_info *);
2191:	void ieee80211_sta_recalc_aggregates(struct ieee80211_sta *);
2120:	void ieee80211_sta_register_airtime(struct ieee80211_sta *, u8, u32, u32);
2912:	void ieee80211_sta_remove_link(struct sta_info *, unsigned int);
2101:	void ieee80211_sta_set_buffered(struct ieee80211_sta *, u8, bool);
2818:	void ieee80211_sta_set_expected_throughput(struct ieee80211_sta *, u32);
2928:	void ieee80211_sta_set_max_amsdu_subframes(struct sta_info *, const u8 *, unsigned int);
2199:	void ieee80211_sta_update_pending_airtime(struct ieee80211_local *, struct sta_info *, u8, u16, bool);
252:	struct link_sta_info *link_sta_info_get_bss(struct ieee80211_sub_if_data *, const u8 *);
244:	struct rhlist_head *link_sta_info_hash_lookup(struct ieee80211_local *, const u8 *);
2776:	u32 sta_get_expected_throughput(struct sta_info *);
697:	struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *, const u8 *, gfp_t);
703:	struct sta_info *sta_info_alloc_with_link(struct ieee80211_sub_if_data *, const u8 *, unsigned int, const u8 *, gfp_t);
1347:	int sta_info_destroy_addr(struct ieee80211_sub_if_data *, const u8 *);
1360:	int sta_info_destroy_addr_bss(struct ieee80211_sub_if_data *, const u8 *);
395:	void sta_info_free(struct ieee80211_local *, struct sta_info *);
197:	struct sta_info *sta_info_get(struct ieee80211_sub_if_data *, const u8 *);
222:	struct sta_info *sta_info_get_bss(struct ieee80211_sub_if_data *, const u8 *);
312:	struct sta_info *sta_info_get_by_addrs(struct ieee80211_local *, const u8 *, const u8 *);
326:	struct sta_info *sta_info_get_by_idx(struct ieee80211_sub_if_data *, int);
190:	struct rhlist_head *sta_info_hash_lookup(struct ieee80211_local *, const u8 *);
1396:	int sta_info_init(struct ieee80211_local *);
947:	int sta_info_insert(struct sta_info *);
927:	int sta_info_insert_rcu(struct sta_info *);
2239:	int sta_info_move_state(struct sta_info *, enum ieee80211_sta_state);
1083:	void sta_info_recalc_tim(struct sta_info *);
1418:	void sta_info_stop(struct ieee80211_local *);
2505:	void sta_set_sinfo(struct sta_info *, struct station_info *, bool);
524:	static struct sta_info *__sta_info_alloc(struct ieee80211_sub_if_data *, const u8 *, int, const u8 *, gfp_t);
1204:	static int __sta_info_destroy_part1(struct sta_info *);
1273:	static void __sta_info_destroy_part2(struct sta_info *);
1001:	static void __sta_info_recalc_tim(struct sta_info *, bool);
181:	static void cleanup_single_sta(struct sta_info *);
782:	static void ieee80211_recalc_p2p_go_ps_allowed(struct ieee80211_sub_if_data *);
1615:	static void ieee80211_send_null_response(struct sta_info *, int, enum ieee80211_frame_release_type, bool, bool);
1802:	static void ieee80211_sta_ps_deliver_response(struct sta_info *, int, u8, enum ieee80211_frame_release_type);
447:	static void sta_deliver_ps_frames(struct work_struct *);
1374:	static void sta_info_cleanup(struct timer_list *);

File net/mac80211/sta_info.h:
776:	static void sta_info_pre_move_state(struct sta_info *, enum ieee80211_sta_state);

File net/mac80211/status.c:
1279:	void ieee80211_free_txskb(struct ieee80211_hw *, struct sk_buff *);
1289:	void ieee80211_purge_tx_queue(struct ieee80211_hw *, struct sk_buff_head *);
1271:	void ieee80211_report_low_ack(struct ieee80211_sta *, u32);
864:	void ieee80211_tx_monitor(struct ieee80211_local *, struct sk_buff *, int, int, bool, struct ieee80211_tx_status *);
1229:	void ieee80211_tx_rate_update(struct ieee80211_hw *, struct ieee80211_sta *, struct ieee80211_tx_info *);
1084:	void ieee80211_tx_status(struct ieee80211_hw *, struct sk_buff *);
1247:	void ieee80211_tx_status_8023(struct ieee80211_hw *, struct ieee80211_vif *, struct sk_buff *);
1105:	void ieee80211_tx_status_ext(struct ieee80211_hw *, struct ieee80211_tx_status *);
22:	void ieee80211_tx_status_irqsafe(struct ieee80211_hw *, struct sk_buff *);
44:	static void ieee80211_handle_filtered_frame(struct ieee80211_local *, struct sta_info *, struct sk_buff *);
698:	static void ieee80211_report_used_skb(struct ieee80211_local *, struct sk_buff *, bool, ktime_t);

File net/mac80211/tdls.c:
1938:	void ieee80211_process_tdls_channel_switch(struct ieee80211_sub_if_data *, struct sk_buff *);
1610:	void ieee80211_tdls_cancel_channel_switch(struct wiphy *, struct net_device *, const u8 *);
1559:	int ieee80211_tdls_channel_switch(struct wiphy *, struct net_device *, const u8 *, u8, struct cfg80211_chan_def *);
1988:	void ieee80211_tdls_handle_disconnect(struct ieee80211_sub_if_data *, const u8 *, u16);
1187:	int ieee80211_tdls_mgmt(struct wiphy *, struct net_device *, const u8 *, u8, u8, u16, u32, bool, const u8 *, size_t);
1342:	int ieee80211_tdls_oper(struct wiphy *, struct net_device *, const u8 *, enum nl80211_tdls_operation);
1442:	void ieee80211_tdls_oper_request(struct ieee80211_vif *, const u8 *, enum nl80211_tdls_operation, u16, gfp_t);
24:	void ieee80211_tdls_peer_del_work(struct work_struct *);
1970:	void ieee80211_teardown_tdls_peers(struct ieee80211_sub_if_data *);
1248:	static void iee80211_tdls_recalc_chanctx(struct ieee80211_sub_if_data *, struct sta_info *);
1311:	static void iee80211_tdls_recalc_ht_protection(struct ieee80211_sub_if_data *, struct sta_info *);
71:	static u8 ieee80211_tdls_add_subband(struct ieee80211_sub_if_data *, struct sk_buff *, u16, u16, u16);
861:	static struct sk_buff *ieee80211_tdls_build_mgmt_packet_data(struct ieee80211_sub_if_data *, const u8 *, u8, u8, u16, bool, const u8 *, size_t, u8, struct cfg80211_chan_def *);
1641:	static struct sk_buff *ieee80211_tdls_ch_sw_resp_tmpl_get(struct sta_info *, u32 *);
305:	static void ieee80211_tdls_chandef_vht_upgrade(struct ieee80211_sub_if_data *, struct sta_info *);
932:	static int ieee80211_tdls_prep_mgmt_packet(struct wiphy *, struct net_device *, const u8 *, u8, u8, u16, u32, bool, const u8 *, size_t, u8, struct cfg80211_chan_def *);

File net/mac80211/tkip.c:
171:	void ieee80211_get_tkip_p1k_iv(struct ieee80211_key_conf *, u32, u16 *);
196:	void ieee80211_get_tkip_p2k(struct ieee80211_key_conf *, struct sk_buff *, u8 *);
185:	void ieee80211_get_tkip_rx_p1k(struct ieee80211_key_conf *, const u8 *, u32, u16 *);
143:	u8 *ieee80211_tkip_add_iv(u8 *, struct ieee80211_key_conf *, u64);
239:	int ieee80211_tkip_decrypt_data(struct arc4_ctx *, struct ieee80211_key *, u8 *, size_t, u8 *, u8 *, int, int, u32 *, u16 *);
222:	int ieee80211_tkip_encrypt_data(struct arc4_ctx *, struct ieee80211_key *, struct sk_buff *, u8 *, size_t);
82:	static void tkip_mixing_phase1(const u8 *, struct tkip_ctx *, const u8 *, u32);
106:	static void tkip_mixing_phase2(const u8 *, struct tkip_ctx *, u16, u8 *);

File net/mac80211/tx.c:
4070:	void __ieee80211_schedule_txq(struct ieee80211_hw *, struct ieee80211_txq *, bool);
4231:	void __ieee80211_subif_start_xmit(struct sk_buff *, struct net_device *, u32, u32, u64 *);
5855:	void __ieee80211_tx_skb_tid_band(struct ieee80211_sub_if_data *, struct sk_buff *, int, int, enum nl80211_band);
5048:	bool ieee80211_beacon_cntdwn_is_complete(struct ieee80211_vif *);
5383:	struct sk_buff *ieee80211_beacon_get_template(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_mutable_offsets *, unsigned int);
5392:	struct sk_buff *ieee80211_beacon_get_tim(struct ieee80211_hw *, struct ieee80211_vif *, u16 *, u16 *, unsigned int);
5023:	void ieee80211_beacon_set_cntdwn(struct ieee80211_vif *, u8);
4997:	u8 ieee80211_beacon_update_cntdwn(struct ieee80211_vif *);
4686:	struct sk_buff *ieee80211_build_data_template(struct ieee80211_sub_if_data *, struct sk_buff *, u32);
3010:	void ieee80211_check_fast_xmit(struct sta_info *);
3247:	void ieee80211_check_fast_xmit_all(struct ieee80211_local *);
3257:	void ieee80211_check_fast_xmit_iface(struct ieee80211_sub_if_data *);
3274:	void ieee80211_clear_fast_xmit(struct sta_info *);
4728:	void ieee80211_clear_tx_pending(struct ieee80211_local *);
5675:	void ieee80211_ctstoself_get(struct ieee80211_hw *, struct ieee80211_vif *, const void *, size_t, const struct ieee80211_tx_info *, struct ieee80211_cts *);
5691:	struct sk_buff *ieee80211_get_buffered_bc(struct ieee80211_hw *, struct ieee80211_vif *);
5459:	struct sk_buff *ieee80211_get_fils_discovery_tmpl(struct ieee80211_hw *, struct ieee80211_vif *);
5488:	struct sk_buff *ieee80211_get_unsol_bcast_probe_resp_tmpl(struct ieee80211_hw *, struct ieee80211_vif *);
2470:	int ieee80211_lookup_ra_sta(struct ieee80211_sub_if_data *, struct sk_buff *, struct sta_info **);
2305:	netdev_tx_t ieee80211_monitor_start_xmit(struct sk_buff *, struct net_device *);
4008:	struct ieee80211_txq *ieee80211_next_txq(struct ieee80211_hw *, u8);
5551:	struct sk_buff *ieee80211_nullfunc_get(struct ieee80211_hw *, struct ieee80211_vif *, int, bool);
2103:	bool ieee80211_parse_tx_radiotap(struct sk_buff *, struct net_device *);
6056:	int ieee80211_probe_mesh_link(struct wiphy *, struct net_device *, const u8 *, size_t);
5621:	struct sk_buff *ieee80211_probereq_get(struct ieee80211_hw *, const u8 *, const u8 *, size_t, size_t);
5428:	struct sk_buff *ieee80211_proberesp_get(struct ieee80211_hw *, struct ieee80211_vif *);
5516:	struct sk_buff *ieee80211_pspoll_get(struct ieee80211_hw *, struct ieee80211_vif *);
5764:	int ieee80211_reserve_tid(struct ieee80211_sta *, u8);
5659:	void ieee80211_rts_get(struct ieee80211_hw *, struct ieee80211_vif *, const void *, size_t, const struct ieee80211_tx_info *, struct ieee80211_rts *);
4459:	netdev_tx_t ieee80211_subif_start_xmit(struct sk_buff *, struct net_device *);
4640:	netdev_tx_t ieee80211_subif_start_xmit_8023(struct sk_buff *, struct net_device *);
5940:	int ieee80211_tx_control_port(struct wiphy *, struct net_device *, const u8 *, size_t, const u8 *, __be16, bool, int, u64 *);
3770:	struct sk_buff *ieee80211_tx_dequeue(struct ieee80211_hw *, struct ieee80211_txq *);
4796:	void ieee80211_tx_pending(struct tasklet_struct *);
1909:	bool ieee80211_tx_prepare_skb(struct ieee80211_hw *, struct ieee80211_vif *, struct sk_buff *, int, struct ieee80211_sta **);
5912:	void ieee80211_tx_skb_tid(struct ieee80211_sub_if_data *, struct sk_buff *, int, int);
4108:	bool ieee80211_txq_airtime_check(struct ieee80211_hw *, struct ieee80211_txq *);
1521:	void ieee80211_txq_init(struct ieee80211_sub_if_data *, struct sta_info *, struct txq_info *, int);
4160:	bool ieee80211_txq_may_transmit(struct ieee80211_hw *, struct ieee80211_txq *);
1562:	void ieee80211_txq_purge(struct ieee80211_local *, struct txq_info *);
1496:	void ieee80211_txq_remove_vlan(struct ieee80211_local *, struct ieee80211_sub_if_data *);
4213:	void ieee80211_txq_schedule_start(struct ieee80211_hw *, u8);
1578:	void ieee80211_txq_set_params(struct ieee80211_local *);
1596:	int ieee80211_txq_setup_flows(struct ieee80211_local *);
1647:	void ieee80211_txq_teardown_flows(struct ieee80211_local *);
5828:	void ieee80211_unreserve_tid(struct ieee80211_sta *, u8);
2038:	void ieee80211_xmit(struct ieee80211_sub_if_data *, struct sta_info *, struct sk_buff *);
4842:	static void __ieee80211_beacon_add_tim(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, struct ps_data *, struct sk_buff *, bool);
5266:	static struct sk_buff *__ieee80211_beacon_get(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_mutable_offsets *, bool, unsigned int);
1763:	static bool __ieee80211_tx(struct ieee80211_local *, struct sk_buff_head *, struct sta_info *, bool);
1193:	static void ieee80211_aggr_check(struct ieee80211_sub_if_data *, struct sta_info *, struct sk_buff *);
3304:	static bool ieee80211_amsdu_prepare_head(struct ieee80211_sub_if_data *, struct ieee80211_fast_tx *, struct sk_buff *);
3288:	static bool ieee80211_amsdu_realloc_pad(struct ieee80211_local *, struct sk_buff *, int);
5133:	static void ieee80211_beacon_get_finish(struct ieee80211_hw *, struct ieee80211_vif *, struct ieee80211_link_data *, struct ieee80211_mutable_offsets *, struct beacon_data *, struct sk_buff *, struct ieee80211_chanctx_conf *, u16);
2594:	static struct sk_buff *ieee80211_build_hdr(struct ieee80211_sub_if_data *, struct sk_buff *, u32, struct sta_info *, u32, u64 *);
4364:	static void ieee80211_convert_to_unicast(struct sk_buff *, struct net_device *, struct sk_buff_head *);
4428:	static void ieee80211_mlo_multicast_tx(struct net_device *, struct sk_buff *);
4323:	static bool ieee80211_multicast_to_unicast(struct sk_buff *, struct net_device *);
1659:	static bool ieee80211_queue_skb(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct sta_info *, struct sk_buff *);
2001:	static int ieee80211_skb_resize(struct ieee80211_sub_if_data *, struct sk_buff *, int, enum ieee80211_encrypt);
2536:	static u16 ieee80211_store_ack_skb(struct ieee80211_local *, struct sk_buff *, u32 *, u64 *);
1950:	static bool ieee80211_tx(struct ieee80211_sub_if_data *, struct sta_info *, struct sk_buff *, bool);
4535:	static bool ieee80211_tx_8023(struct ieee80211_sub_if_data *, struct sk_buff *, struct sta_info *, bool);
1687:	static bool ieee80211_tx_frags(struct ieee80211_local *, struct ieee80211_vif *, struct sta_info *, struct sk_buff_head *, bool);
1094:	static ieee80211_tx_result ieee80211_tx_h_calculate_duration(struct ieee80211_tx_data *);
1061:	static ieee80211_tx_result ieee80211_tx_h_encrypt(struct ieee80211_tx_data *);
698:	static ieee80211_tx_result ieee80211_tx_h_rate_ctrl(struct ieee80211_tx_data *);
625:	static ieee80211_tx_result ieee80211_tx_h_select_key(struct ieee80211_tx_data *);
1221:	static ieee80211_tx_result ieee80211_tx_prepare(struct ieee80211_sub_if_data *, struct ieee80211_tx_data *, struct sta_info *, struct sk_buff *);
3597:	static struct sk_buff *ieee80211_tx_skb_fixup(struct sk_buff *, netdev_features_t);
3517:	static ieee80211_tx_result ieee80211_xmit_fast_finish(struct ieee80211_sub_if_data *, struct sta_info *, u8, struct ieee80211_key *, struct ieee80211_tx_data *);
1900:	static int invoke_tx_handlers(struct ieee80211_tx_data *);
1823:	static int invoke_tx_handlers_early(struct ieee80211_tx_data *);
1860:	static int invoke_tx_handlers_late(struct ieee80211_tx_data *);
346:	static void purge_old_ps_buffers(struct ieee80211_local *);

File net/mac80211/util.c:
687:	void __ieee80211_flush_queues(struct ieee80211_local *, struct ieee80211_sub_if_data *, unsigned int, bool);
4808:	void ieee80211_add_aid_request_ie(struct ieee80211_sub_if_data *, struct sk_buff *);
3930:	int ieee80211_add_ext_srates_ie(struct ieee80211_sub_if_data *, struct sk_buff *, bool, enum nl80211_band);
542:	void ieee80211_add_pending_skb(struct ieee80211_local *, struct sk_buff *);
564:	void ieee80211_add_pending_skbs(struct ieee80211_local *, struct sk_buff_head *);
4766:	void ieee80211_add_s1g_capab_ie(struct ieee80211_sub_if_data *, struct ieee80211_sta_s1g_cap *, struct sk_buff *);
3886:	int ieee80211_add_srates_ie(struct ieee80211_sub_if_data *, struct sk_buff *, bool, enum nl80211_band);
4818:	u8 *ieee80211_add_wmm_info_ie(u8 *, u8);
3979:	int ieee80211_ave_rssi(struct ieee80211_vif *);
2179:	int ieee80211_build_preq_ies(struct ieee80211_sub_if_data *, u8 *, size_t, struct ieee80211_scan_ies *, const u8 *, size_t, u8, u32 *, struct cfg80211_chan_def *, u32);
2223:	struct sk_buff *ieee80211_build_probe_req(struct ieee80211_sub_if_data *, const u8 *, const u8 *, u32, struct ieee80211_channel *, const u8 *, size_t, const u8 *, size_t, u32);
4017:	u64 ieee80211_calculate_rx_timestamp(struct ieee80211_local *, struct ieee80211_rx_status *, unsigned int, unsigned int);
4231:	ieee80211_conn_flags_t ieee80211_chandef_downgrade(struct cfg80211_chan_def *);
3625:	void ieee80211_chandef_eht_oper(const struct ieee80211_eht_operation *, bool, bool, struct cfg80211_chan_def *);
3676:	bool ieee80211_chandef_he_6ghz_oper(struct ieee80211_sub_if_data *, const struct ieee80211_he_operation *, const struct ieee80211_eht_operation *, struct cfg80211_chan_def *);
3475:	bool ieee80211_chandef_ht_oper(const struct ieee80211_ht_operation *, struct cfg80211_chan_def *);
3820:	bool ieee80211_chandef_s1g_oper(const struct ieee80211_s1g_oper_ie *, struct cfg80211_chan_def *);
3501:	bool ieee80211_chandef_vht_oper(struct ieee80211_hw *, u32, const struct ieee80211_vht_operation *, const struct ieee80211_ht_operation *, struct cfg80211_chan_def *);
4638:	int ieee80211_check_combinations(struct ieee80211_sub_if_data *, const struct cfg80211_chan_def *, enum ieee80211_chanctx_mode, u8);
249:	__le16 ieee80211_ctstoself_duration(struct ieee80211_hw *, struct ieee80211_vif *, size_t, const struct ieee80211_tx_info *);
4164:	void ieee80211_dfs_cac_cancel(struct ieee80211_local *);
4192:	void ieee80211_dfs_radar_detected_work(struct work_struct *);
4861:	u16 ieee80211_encode_usf(int);
712:	void ieee80211_flush_queues(struct ieee80211_local *, struct ieee80211_sub_if_data *, bool);
4955:	void ieee80211_fragment_element(struct sk_buff *, u8 *);
111:	int ieee80211_frame_duration(enum nl80211_band, size_t, int, int, int, int);
179:	__le16 ieee80211_generic_frame_duration(struct ieee80211_hw *, struct ieee80211_vif *, enum nl80211_band, size_t, struct ieee80211_rate *);
48:	u8 *ieee80211_get_bssid(struct ieee80211_hdr *, size_t, enum nl80211_iftype);
310:	void ieee80211_handle_wake_tx_queue(struct ieee80211_hw *, struct ieee80211_txq *);
2941:	void ieee80211_hw_restart_disconnect(struct ieee80211_vif *);
4912:	u8 *ieee80211_ie_build_eht_cap(u8 *, const struct ieee80211_sta_he_cap *, const struct ieee80211_sta_eht_cap *, u8 *, bool);
3196:	void ieee80211_ie_build_he_6ghz_cap(struct ieee80211_sub_if_data *, enum ieee80211_smps_mode, struct sk_buff *);
3113:	u8 *ieee80211_ie_build_he_cap(ieee80211_conn_flags_t, u8 *, const struct ieee80211_sta_he_cap *, u8 *);
3383:	u8 *ieee80211_ie_build_he_oper(u8 *, struct cfg80211_chan_def *);
3036:	u8 *ieee80211_ie_build_ht_cap(u8 *, struct ieee80211_sta_ht_cap *, u16);
3248:	u8 *ieee80211_ie_build_ht_oper(u8 *, struct ieee80211_sta_ht_cap *, const struct cfg80211_chan_def *, u16, bool);
3071:	u8 *ieee80211_ie_build_vht_cap(u8 *, struct ieee80211_sta_vht_cap *, u32);
3329:	u8 *ieee80211_ie_build_vht_oper(u8 *, struct ieee80211_sta_vht_cap *, const struct cfg80211_chan_def *);
3296:	void ieee80211_ie_build_wide_bw_cs(u8 *, const struct cfg80211_chan_def *);
4882:	u8 ieee80211_ie_len_eht_cap(struct ieee80211_sub_if_data *, u8);
3092:	u8 ieee80211_ie_len_he_cap(struct ieee80211_sub_if_data *, u8);
3026:	size_t ieee80211_ie_split_vendor(const u8 *, size_t, size_t);
790:	void ieee80211_iterate_active_interfaces_atomic(struct ieee80211_hw *, u32, void (*)(void *, u8 *, struct ieee80211_vif *), void *);
805:	void ieee80211_iterate_active_interfaces_mtx(struct ieee80211_hw *, u32, void (*)(void *, u8 *, struct ieee80211_vif *), void *);
776:	void ieee80211_iterate_interfaces(struct ieee80211_hw *, u32, void (*)(void *, u8 *, struct ieee80211_vif *), void *);
835:	void ieee80211_iterate_stations(struct ieee80211_hw *, void (*)(void *, struct ieee80211_sta *), void *);
848:	void ieee80211_iterate_stations_atomic(struct ieee80211_hw *, void (*)(void *, struct ieee80211_sta *), void *);
4734:	int ieee80211_max_num_channels(struct ieee80211_local *);
3990:	u8 ieee80211_mcs_to_chains(const struct ieee80211_mcs_info *);
3856:	int ieee80211_parse_bitrates(enum nl80211_chan_width, const struct ieee80211_supported_band *, const u8 *, int, u32 *);
4530:	int ieee80211_parse_p2p_noa(const struct ieee80211_p2p_noa_attr *, struct ieee80211_noa_data *, u32);
911:	void ieee80211_queue_delayed_work(struct ieee80211_hw *, struct delayed_work *, unsigned long);
622:	int ieee80211_queue_stopped(struct ieee80211_hw *, int);
900:	void ieee80211_queue_work(struct ieee80211_hw *, struct work_struct *);
4221:	void ieee80211_radar_detected(struct ieee80211_hw *);
4564:	void ieee80211_recalc_dtim(struct ieee80211_local *, struct ieee80211_sub_if_data *);
2980:	void ieee80211_recalc_min_chandef(struct ieee80211_sub_if_data *, int);
2953:	void ieee80211_recalc_smps(struct ieee80211_sub_if_data *, struct ieee80211_link_data *);
2480:	int ieee80211_reconfig(struct ieee80211_local *);
1675:	void ieee80211_regulatory_limit_wmm_params(struct ieee80211_sub_if_data *, struct ieee80211_tx_queue_params *, int);
2947:	void ieee80211_resume_disconnect(struct ieee80211_vif *);
206:	__le16 ieee80211_rts_duration(struct ieee80211_hw *, struct ieee80211_vif *, size_t, const struct ieee80211_tx_info *);
4330:	int ieee80211_send_action_csa(struct ieee80211_sub_if_data *, struct cfg80211_csa_settings *);
1828:	void ieee80211_send_auth(struct ieee80211_sub_if_data *, u16, u16, u16, const u8 *, size_t, const u8 *, const u8 *, const u8 *, u8, u8, u32);
1892:	void ieee80211_send_deauth_disassoc(struct ieee80211_sub_if_data *, const u8 *, const u8 *, u16, u16, bool, u8 *);
1716:	void ieee80211_set_wmm_default(struct ieee80211_link_data *, bool, bool);
4309:	bool ieee80211_smps_is_restrictive(enum ieee80211_smps_mode, enum ieee80211_smps_mode);
2273:	u32 ieee80211_sta_get_rates(struct ieee80211_sub_if_data *, struct ieee802_11_elems *, enum nl80211_band, u32 *);
2326:	void ieee80211_stop_device(struct ieee80211_local *);
534:	void ieee80211_stop_queue(struct ieee80211_hw *, int);
522:	void ieee80211_stop_queue_by_reason(struct ieee80211_hw *, int, enum queue_stop_reason, bool);
614:	void ieee80211_stop_queues(struct ieee80211_hw *);
597:	void ieee80211_stop_queues_by_reason(struct ieee80211_hw *, unsigned long, enum queue_stop_reason, bool);
718:	void ieee80211_stop_vif_queues(struct ieee80211_local *, struct ieee80211_sub_if_data *, enum queue_stop_reason);
100:	void ieee80211_tx_set_protected(struct ieee80211_tx_data *);
4833:	void ieee80211_txq_get_depth(struct ieee80211_txq *, unsigned long *, unsigned long *);
4499:	void ieee80211_update_p2p_noa(struct ieee80211_noa_data *, u32);
872:	struct wireless_dev *ieee80211_vif_to_wdev(struct ieee80211_vif *);
495:	void ieee80211_wake_queue(struct ieee80211_hw *, int);
483:	void ieee80211_wake_queue_by_reason(struct ieee80211_hw *, int, enum queue_stop_reason, bool);
656:	void ieee80211_wake_queues(struct ieee80211_hw *);
639:	void ieee80211_wake_queues_by_reason(struct ieee80211_hw *, unsigned long, enum queue_stop_reason, bool);
426:	void ieee80211_wake_txqs(struct tasklet_struct *);
727:	void ieee80211_wake_vif_queues(struct ieee80211_local *, struct ieee80211_sub_if_data *, enum queue_stop_reason);
1611:	struct ieee802_11_elems *ieee802_11_parse_elems_full(struct ieee80211_elems_parse_params *);
861:	struct ieee80211_vif *wdev_to_ieee80211_vif(struct wireless_dev *);
39:	struct ieee80211_hw *wiphy_to_ieee80211_hw(struct wiphy *);
437:	static void __ieee80211_wake_queue(struct ieee80211_hw *, int, enum queue_stop_reason, bool, unsigned long *);
736:	static void __iterate_interfaces(struct ieee80211_local *, u32, void (*)(void *, u8 *, struct ieee80211_vif *), void *);
393:	static void _ieee80211_wake_txqs(struct ieee80211_local *, unsigned long *);
1005:	static u32 _ieee802_11_parse_elems_full(struct ieee80211_elems_parse_params *, struct ieee802_11_elems *, const struct element *);
2398:	static void ieee80211_assign_chanctx(struct ieee80211_local *, struct ieee80211_sub_if_data *, struct ieee80211_link_data *);
2360:	static void ieee80211_handle_reconfig_failure(struct ieee80211_local *);
4725:	static void ieee80211_iter_max_chans(const struct ieee80211_iface_combination *, void *);

File net/mac80211/vht.c:
621:	u32 __ieee80211_vht_handle_opmode(struct ieee80211_sub_if_data *, struct link_sta_info *, u8, enum nl80211_band);
28:	void ieee80211_apply_vhtcap_overrides(struct ieee80211_sub_if_data *, struct ieee80211_sta_vht_cap *);
471:	enum ieee80211_sta_rx_bandwidth ieee80211_chan_width_to_rx_bw(enum nl80211_chan_width);
742:	void ieee80211_get_vht_mask_from_cap(__le16, u16 *);
681:	void ieee80211_process_mu_groups(struct ieee80211_sub_if_data *, struct ieee80211_link_data *, struct ieee80211_mgmt *);
415:	enum nl80211_chan_width ieee80211_sta_cap_chan_bw(struct link_sta_info *);
342:	enum ieee80211_sta_rx_bandwidth ieee80211_sta_cap_rx_bw(struct link_sta_info *);
494:	enum ieee80211_sta_rx_bandwidth ieee80211_sta_cur_vht_bw(struct link_sta_info *);
439:	enum nl80211_chan_width ieee80211_sta_rx_bw_to_chan_width(struct link_sta_info *);
532:	void ieee80211_sta_set_rx_nss(struct link_sta_info *);
707:	void ieee80211_update_mu_groups(struct ieee80211_vif *, unsigned int, const u8 *, const u8 *);
116:	void ieee80211_vht_cap_ie_to_sta_vht_cap(struct ieee80211_sub_if_data *, struct ieee80211_supported_band *, const struct ieee80211_vht_cap *, struct link_sta_info *);
725:	void ieee80211_vht_handle_opmode(struct ieee80211_sub_if_data *, struct link_sta_info *, u8, enum nl80211_band);

File net/mac80211/wep.c:
241:	ieee80211_rx_result ieee80211_crypto_wep_decrypt(struct ieee80211_rx_data *);
292:	ieee80211_tx_result ieee80211_crypto_wep_encrypt(struct ieee80211_tx_data *);
165:	int ieee80211_wep_decrypt_data(struct arc4_ctx *, u8 *, size_t, u8 *, size_t);
131:	int ieee80211_wep_encrypt(struct ieee80211_local *, struct sk_buff *, const u8 *, int, int);
108:	int ieee80211_wep_encrypt_data(struct arc4_ctx *, u8 *, size_t, u8 *, size_t);
25:	void ieee80211_wep_init(struct ieee80211_local *);
64:	static u8 *ieee80211_wep_add_iv(struct ieee80211_local *, struct sk_buff *, int, int);

File net/mac80211/wme.c:
147:	u16 ieee80211_select_queue(struct ieee80211_sub_if_data *, struct sta_info *, struct sk_buff *);
117:	u16 ieee80211_select_queue_80211(struct ieee80211_sub_if_data *, struct sk_buff *, struct ieee80211_hdr *);
191:	void ieee80211_set_qos_hdr(struct ieee80211_sub_if_data *, struct sk_buff *);

File net/mac80211/wpa.c:
962:	ieee80211_rx_result ieee80211_crypto_aes_cmac_256_decrypt(struct ieee80211_rx_data *);
869:	ieee80211_tx_result ieee80211_crypto_aes_cmac_256_encrypt(struct ieee80211_tx_data *);
912:	ieee80211_rx_result ieee80211_crypto_aes_cmac_decrypt(struct ieee80211_rx_data *);
821:	ieee80211_tx_result ieee80211_crypto_aes_cmac_encrypt(struct ieee80211_tx_data *);
1061:	ieee80211_rx_result ieee80211_crypto_aes_gmac_decrypt(struct ieee80211_rx_data *);
1012:	ieee80211_tx_result ieee80211_crypto_aes_gmac_encrypt(struct ieee80211_tx_data *);
506:	ieee80211_rx_result ieee80211_crypto_ccmp_decrypt(struct ieee80211_rx_data *, unsigned int);
489:	ieee80211_tx_result ieee80211_crypto_ccmp_encrypt(struct ieee80211_tx_data *, unsigned int);
704:	ieee80211_rx_result ieee80211_crypto_gcmp_decrypt(struct ieee80211_rx_data *);
689:	ieee80211_tx_result ieee80211_crypto_gcmp_encrypt(struct ieee80211_tx_data *);
265:	ieee80211_rx_result ieee80211_crypto_tkip_decrypt(struct ieee80211_rx_data *);
249:	ieee80211_tx_result ieee80211_crypto_tkip_encrypt(struct ieee80211_tx_data *);
95:	ieee80211_rx_result ieee80211_rx_h_michael_mic_verify(struct ieee80211_rx_data *);
30:	ieee80211_tx_result ieee80211_tx_h_michael_mic_add(struct ieee80211_tx_data *);
372:	static void ccmp_special_blocks(struct sk_buff *, u8 *, u8 *, u8 *);
584:	static void gcmp_special_blocks(struct sk_buff *, u8 *, u8 *, u8 *);

File net/netfilter/core.c:
771:	int netfilter_init(void);
693:	void nf_conntrack_destroy(struct nf_conntrack *);
679:	void nf_ct_attach(struct sk_buff *, const struct sk_buff *);
705:	bool nf_ct_get_tuple_skb(struct nf_conntrack_tuple *, const struct sk_buff *);
532:	void nf_hook_entries_delete_raw(struct nf_hook_entries **, const struct nf_hook_ops *);
185:	int nf_hook_entries_insert_raw(struct nf_hook_entries **, const struct nf_hook_ops *);
607:	int nf_hook_slow(struct sk_buff *, struct nf_hook_state *, const struct nf_hook_entries *, unsigned int);
642:	void nf_hook_slow_list(struct list_head *, struct nf_hook_state *, const struct nf_hook_entries *);
545:	int nf_register_net_hook(struct net *, const struct nf_hook_ops *);
575:	int nf_register_net_hooks(struct net *, const struct nf_hook_ops *, unsigned int);
517:	void nf_unregister_net_hook(struct net *, const struct nf_hook_ops *);
595:	void nf_unregister_net_hooks(struct net *, const struct nf_hook_ops *, unsigned int);
67:	static void __nf_hook_entries_free(struct callback_head *);
222:	static void *__nf_hook_entries_try_shrink(struct nf_hook_entries *, struct nf_hook_entries **);
384:	static int __nf_register_net_hook(struct net *, int, const struct nf_hook_ops *);
476:	static void __nf_unregister_net_hook(struct net *, int, const struct nf_hook_ops *);
91:	static unsigned int accept_all(void *, struct sk_buff *, const struct nf_hook_state *);
761:	static void netfilter_net_exit(struct net *);
737:	static int netfilter_net_init(struct net *);
104:	static struct nf_hook_entries *nf_hook_entries_grow(const struct nf_hook_entries *, const struct nf_hook_ops *);

File net/netfilter/ipvs/ip_vs_app.c:
148:	int ip_vs_app_inc_get(struct ip_vs_app *);
162:	void ip_vs_app_inc_put(struct ip_vs_app *);
611:	void ip_vs_app_net_cleanup(struct netns_ipvs *);
599:	int ip_vs_app_net_init(struct netns_ipvs *);
488:	int ip_vs_app_pkt_in(struct ip_vs_conn *, struct sk_buff *, struct ip_vs_iphdr *);
411:	int ip_vs_app_pkt_out(struct ip_vs_conn *, struct sk_buff *, struct ip_vs_iphdr *);
259:	int ip_vs_bind_app(struct ip_vs_conn *, struct ip_vs_protocol *);
269:	void ip_vs_unbind_app(struct ip_vs_conn *);
189:	struct ip_vs_app *register_ip_vs_app(struct netns_ipvs *, struct ip_vs_app *);
173:	int register_ip_vs_app_inc(struct netns_ipvs *, struct ip_vs_app *, __u16, __u16);
232:	void unregister_ip_vs_app(struct netns_ipvs *, struct ip_vs_app *);
62:	static void ip_vs_app_inc_rcu_free(struct callback_head *);
543:	static void *ip_vs_app_seq_next(struct seq_file *, void *, loff_t *);
575:	static int ip_vs_app_seq_show(struct seq_file *, void *);
533:	static void *ip_vs_app_seq_start(struct seq_file *, loff_t *);
570:	static void ip_vs_app_seq_stop(struct seq_file *, void *);

File net/netfilter/ipvs/ip_vs_conn.c:
767:	int ip_vs_check_template(struct ip_vs_conn *, struct ip_vs_dest *);
1531:	void ip_vs_conn_cleanup(void);
926:	void ip_vs_conn_expire_now(struct ip_vs_conn *);
491:	void ip_vs_conn_fill_cport(struct ip_vs_conn *, __be16);
293:	struct ip_vs_conn *ip_vs_conn_in_get(const struct ip_vs_conn_param *);
335:	struct ip_vs_conn *ip_vs_conn_in_get_proto(struct netns_ipvs *, int, const struct sk_buff *, const struct ip_vs_iphdr *);
1482:	int ip_vs_conn_init(void);
1472:	void ip_vs_conn_net_cleanup(struct netns_ipvs *);
1446:	int ip_vs_conn_net_init(struct netns_ipvs *);
941:	struct ip_vs_conn *ip_vs_conn_new(const struct ip_vs_conn_param *, int, const union nf_inet_addr *, __be16, unsigned int, struct ip_vs_dest *, __u32);
401:	struct ip_vs_conn *ip_vs_conn_out_get(const struct ip_vs_conn_param *);
452:	struct ip_vs_conn *ip_vs_conn_out_get_proto(struct netns_ipvs *, int, const struct sk_buff *, const struct ip_vs_iphdr *);
477:	void ip_vs_conn_put(struct ip_vs_conn *);
349:	struct ip_vs_conn *ip_vs_ct_in_get(const struct ip_vs_conn_param *);
1406:	void ip_vs_expire_nodest_conn_flush(struct netns_ipvs *);
1301:	void ip_vs_random_dropentry(struct netns_ipvs *);
651:	void ip_vs_try_bind_dest(struct ip_vs_conn *);
263:	static struct ip_vs_conn *__ip_vs_conn_in_get(const struct ip_vs_conn_param *);
584:	static void ip_vs_bind_dest(struct ip_vs_conn *, struct ip_vs_dest *);
847:	static void ip_vs_conn_expire(struct timer_list *);
163:	static int ip_vs_conn_hash(struct ip_vs_conn *);
143:	static unsigned int ip_vs_conn_hashkey_conn(const struct ip_vs_conn *);
812:	static void ip_vs_conn_rcu_free(struct callback_head *);
1084:	static void *ip_vs_conn_seq_next(struct seq_file *, void *, loff_t *);
1119:	static int ip_vs_conn_seq_show(struct seq_file *, void *);
1074:	static void *ip_vs_conn_seq_start(struct seq_file *, loff_t *);
1113:	static void ip_vs_conn_seq_stop(struct seq_file *, void *);
1196:	static int ip_vs_conn_sync_seq_show(struct seq_file *, void *);

File net/netfilter/ipvs/ip_vs_core.c:
692:	__sum16 ip_vs_checksum_complete(struct sk_buff *, int);
115:	void ip_vs_init_hash_table(struct list_head *, int);
585:	int ip_vs_leave(struct ip_vs_service *, struct sk_buff *, struct ip_vs_proto_data *, struct ip_vs_iphdr *);
748:	void ip_vs_nat_icmp(struct sk_buff *, struct ip_vs_protocol *, struct ip_vs_conn *, int);
1129:	struct ip_vs_conn *ip_vs_new_conn_out(struct ip_vs_service *, struct ip_vs_dest *, struct sk_buff *, const struct ip_vs_iphdr *, __be16, __be16);
90:	const char *ip_vs_proto_name(unsigned int);
2233:	int ip_vs_register_hooks(struct netns_ipvs *, unsigned int);
441:	struct ip_vs_conn *ip_vs_schedule(struct ip_vs_service *, struct sk_buff *, struct ip_vs_proto_data *, int *, struct ip_vs_iphdr *);
2262:	void ip_vs_unregister_hooks(struct netns_ipvs *, unsigned int);
2345:	static void __ip_vs_cleanup_batch(struct list_head *);
2363:	static void __ip_vs_dev_cleanup_batch(struct list_head *);
2291:	static int __ip_vs_init(struct net *);
1222:	static struct ip_vs_conn *__ip_vs_rs_conn_out(unsigned int, struct netns_ipvs *, int, struct sk_buff *, const struct ip_vs_iphdr *);
1260:	static unsigned int handle_response(int, struct sk_buff *, struct ip_vs_proto_data *, struct ip_vs_conn *, struct ip_vs_iphdr *, unsigned int);
2443:	static void ip_vs_cleanup(void);
2106:	static unsigned int ip_vs_forward_icmp(void *, struct sk_buff *, const struct nf_hook_state *);
706:	static int ip_vs_gather_frags(struct netns_ipvs *, struct sk_buff *, u_int32_t);
1913:	static unsigned int ip_vs_in_hook(void *, struct sk_buff *, const struct nf_hook_state *);
1583:	static int ip_vs_in_icmp(struct netns_ipvs *, struct sk_buff *, int *, unsigned int);
122:	static void ip_vs_in_stats(struct ip_vs_conn *, struct sk_buff *);
2394:	static int ip_vs_init(void);
1333:	static unsigned int ip_vs_out_hook(void *, struct sk_buff *, const struct nf_hook_state *);
914:	static int ip_vs_out_icmp(struct netns_ipvs *, struct sk_buff *, int *, unsigned int);
158:	static void ip_vs_out_stats(struct ip_vs_conn *, struct sk_buff *);
1545:	static int ipvs_gre_decap(struct netns_ipvs *, struct sk_buff *, unsigned int, __u16, const union nf_inet_addr *, __u8 *);
1510:	static int ipvs_udp_decap(struct netns_ipvs *, struct sk_buff *, unsigned int, __u16, const union nf_inet_addr *, __u8 *);
1052:	static int is_sctp_abort(const struct sk_buff *, int);
1064:	static int is_tcp_reset(const struct sk_buff *, int);

File net/netfilter/ipvs/ip_vs_ctl.c:
4559:	void ip_vs_control_cleanup(void);
4535:	int ip_vs_control_init(void);
4493:	void ip_vs_control_net_cleanup(struct netns_ipvs *);
4428:	int ip_vs_control_net_init(struct netns_ipvs *);
748:	void ip_vs_dest_dst_rcu_free(struct callback_head *);
726:	struct ip_vs_dest *ip_vs_find_dest(struct netns_ipvs *, int, int, const union nf_inet_addr *, __be16, const union nf_inet_addr *, __be16, __u16, __u32, __u32);
640:	struct ip_vs_dest *ip_vs_find_real_service(struct netns_ipvs *, int, __u16, const union nf_inet_addr *, __be16);
671:	struct ip_vs_dest *ip_vs_find_tunnel(struct netns_ipvs *, int, const union nf_inet_addr *, __be16);
611:	bool ip_vs_has_real_service(struct netns_ipvs *, int, __u16, const union nf_inet_addr *, __be16);
4506:	int ip_vs_register_nl_ioctl(void);
457:	struct ip_vs_service *ip_vs_service_find(struct netns_ipvs *, int, __u32, __u16, const union nf_inet_addr *, __be16);
1744:	void ip_vs_service_nets_cleanup(struct list_head *);
940:	struct ip_vs_stats *ip_vs_stats_alloc(void);
955:	void ip_vs_stats_free(struct ip_vs_stats *);
923:	int ip_vs_stats_init_alloc(struct ip_vs_stats *);
950:	void ip_vs_stats_release(struct ip_vs_stats *);
4529:	void ip_vs_unregister_nl_ioctl(void);
291:	void ip_vs_use_count_dec(void);
285:	int ip_vs_use_count_inc(void);
1253:	static void __ip_vs_del_dest(struct netns_ipvs *, struct ip_vs_dest *, bool);
2931:	static int __ip_vs_get_dest_entries(struct netns_ipvs *, const struct ip_vs_get_dests *, struct ip_vs_get_dests *);
2880:	static int __ip_vs_get_service_entries(struct netns_ipvs *, const struct ip_vs_get_services *, struct ip_vs_get_services *);
408:	static struct ip_vs_service *__ip_vs_service_find(struct netns_ipvs *, int, __u16, const union nf_inet_addr *, __be16);
436:	static struct ip_vs_service *__ip_vs_svc_fwm_find(struct netns_ipvs *, int, __u32);
967:	static void __ip_vs_update_dest(struct ip_vs_service *, struct ip_vs_dest *, struct ip_vs_dest_user_kern *, int);
230:	static void defense_work_handler(struct work_struct *);
3030:	static int do_ip_vs_get_ctl(struct sock *, int, void *, int *);
2707:	static int do_ip_vs_set_ctl(struct sock *, int, sockptr_t, unsigned int);
243:	static void est_reload_work_handler(struct work_struct *);
216:	static void expire_nodest_conn_handler(struct work_struct *);
1130:	static int ip_vs_add_dest(struct ip_vs_service *, struct ip_vs_dest_user_kern *);
1382:	static int ip_vs_add_service(struct netns_ipvs *, struct ip_vs_service_user_kern *, struct ip_vs_service **);
2858:	static void ip_vs_copy_service(struct ip_vs_service_entry *, struct ip_vs_service *);
870:	static void ip_vs_copy_stats(struct ip_vs_kstats *, struct ip_vs_stats *);
1315:	static int ip_vs_del_dest(struct ip_vs_service *, struct ip_vs_dest_user_kern *);
820:	static void ip_vs_dest_rcu_free(struct callback_head *);
1347:	static void ip_vs_dest_trash_expire(struct timer_list *);
1782:	static int ip_vs_dst_event(struct notifier_block *, unsigned long, void *);
1206:	static int ip_vs_edit_dest(struct ip_vs_service *, struct ip_vs_dest_user_kern *);
1532:	static int ip_vs_edit_service(struct ip_vs_service *, struct ip_vs_service_user_kern *);
1709:	static int ip_vs_flush(struct netns_ipvs *, bool);
3758:	static int ip_vs_genl_dump_daemon(struct sk_buff *, __u32, struct ipvs_sync_daemon_cfg *, struct netlink_callback *);
3780:	static int ip_vs_genl_dump_daemons(struct sk_buff *, struct netlink_callback *);
3616:	static int ip_vs_genl_dump_dests(struct sk_buff *, struct netlink_callback *);
3405:	static int ip_vs_genl_dump_services(struct sk_buff *, struct netlink_callback *);
3331:	static int ip_vs_genl_fill_service(struct sk_buff *, struct ip_vs_service *);
3263:	static int ip_vs_genl_fill_stats(struct sk_buff *, int, struct ip_vs_kstats *);
3293:	static int ip_vs_genl_fill_stats64(struct sk_buff *, int, struct ip_vs_kstats *);
4055:	static int ip_vs_genl_get_cmd(struct sk_buff *, struct genl_info *);
3455:	static int ip_vs_genl_parse_service(struct netns_ipvs *, struct ip_vs_service_user_kern *, struct nlattr *, bool, struct ip_vs_service **);
3926:	static int ip_vs_genl_set_cmd(struct sk_buff *, struct genl_info *);
3901:	static int ip_vs_genl_set_daemon(struct sk_buff *, struct genl_info *);
2357:	static void *ip_vs_info_seq_next(struct seq_file *, void *, loff_t *);
2412:	static int ip_vs_info_seq_show(struct seq_file *, void *);
2349:	static void *ip_vs_info_seq_start(struct seq_file *, loff_t *);
2405:	static void ip_vs_info_seq_stop(struct seq_file *, void *);
518:	static void ip_vs_service_rcu_free(struct callback_head *);
2530:	static int ip_vs_stats_percpu_show(struct seq_file *, void *);
859:	static void ip_vs_stats_rcu_free(struct callback_head *);
2498:	static int ip_vs_stats_show(struct seq_file *, void *);
1680:	static void ip_vs_unlink_service(struct ip_vs_service *, bool);
1842:	static int ip_vs_zero_all(struct netns_ipvs *);
1831:	static int ip_vs_zero_service(struct ip_vs_service *);
2002:	static int ipvs_proc_est_cpulist(struct ctl_table *, int, void *, size_t *, loff_t *);
2029:	static int ipvs_proc_est_nice(struct ctl_table *, int, void *, size_t *, loff_t *);
2059:	static int ipvs_proc_run_estimation(struct ctl_table *, int, void *, size_t *, loff_t *);
1868:	static int proc_do_defense_mode(struct ctl_table *, int, void *, size_t *, loff_t *);
1920:	static int proc_do_sync_ports(struct ctl_table *, int, void *, size_t *, loff_t *);
1895:	static int proc_do_sync_threshold(struct ctl_table *, int, void *, size_t *, loff_t *);
93:	static void update_defense_level(struct netns_ipvs *);

File net/netfilter/ipvs/ip_vs_est.c:
242:	int ip_vs_est_kthread_start(struct netns_ipvs *, struct ip_vs_est_kt_data *);
276:	void ip_vs_est_kthread_stop(struct ip_vs_est_kt_data *);
230:	void ip_vs_est_reload_start(struct netns_ipvs *);
943:	void ip_vs_estimator_net_cleanup(struct netns_ipvs *);
928:	int ip_vs_estimator_net_init(struct netns_ipvs *);
917:	void ip_vs_read_estimator(struct ip_vs_kstats *, struct ip_vs_stats *);
482:	int ip_vs_start_estimator(struct netns_ipvs *, struct ip_vs_stats *);
520:	void ip_vs_stop_estimator(struct netns_ipvs *, struct ip_vs_stats *);
898:	void ip_vs_zero_estimator(struct ip_vs_stats *);
78:	static void ip_vs_chain_estimation(struct hlist_head *);
298:	static int ip_vs_est_add_kthread(struct netns_ipvs *);
169:	static int ip_vs_estimation_kthread(void *);

File net/netfilter/ipvs/ip_vs_pe.c:
21:	struct ip_vs_pe *__ip_vs_pe_getbyname(const char *);
49:	struct ip_vs_pe *ip_vs_pe_getbyname(const char *);
66:	int register_ip_vs_pe(struct ip_vs_pe *);
98:	int unregister_ip_vs_pe(struct ip_vs_pe *);

File net/netfilter/ipvs/ip_vs_proto.c:
190:	int *ip_vs_create_timeout_table(int *, int);
158:	struct ip_vs_proto_data *ip_vs_proto_data_get(struct netns_ipvs *, unsigned short);
140:	struct ip_vs_protocol *ip_vs_proto_get(unsigned short);
374:	void ip_vs_protocol_cleanup(void);
341:	int ip_vs_protocol_init(void);
329:	void ip_vs_protocol_net_cleanup(struct netns_ipvs *);
296:	int ip_vs_protocol_net_init(struct netns_ipvs *);
175:	void ip_vs_protocol_timeout_change(struct netns_ipvs *, int);
196:	const char *ip_vs_state_name(const struct ip_vs_conn *);
280:	void ip_vs_tcpudp_debug_packet(int, struct ip_vs_protocol *, const struct sk_buff *, int, const char *);
49:	static int register_ip_vs_protocol(struct ip_vs_protocol *);

File net/netfilter/ipvs/ip_vs_sched.c:
40:	int ip_vs_bind_scheduler(struct ip_vs_service *, struct ip_vs_scheduler *);
143:	void ip_vs_scheduler_err(struct ip_vs_service *, const char *);
113:	struct ip_vs_scheduler *ip_vs_scheduler_get(const char *);
133:	void ip_vs_scheduler_put(struct ip_vs_scheduler *);
60:	void ip_vs_unbind_scheduler(struct ip_vs_service *, struct ip_vs_scheduler *);
167:	int register_ip_vs_scheduler(struct ip_vs_scheduler *);
223:	int unregister_ip_vs_scheduler(struct ip_vs_scheduler *);

File net/netfilter/ipvs/ip_vs_sync.c:
630:	void ip_vs_sync_conn(struct netns_ipvs *, struct ip_vs_conn *, int);
2040:	void ip_vs_sync_net_cleanup(struct netns_ipvs *);
2032:	int ip_vs_sync_net_init(struct netns_ipvs *);
1750:	int start_sync_thread(struct netns_ipvs *, struct ipvs_sync_daemon_cfg *, int);
1944:	int stop_sync_thread(struct netns_ipvs *, int);
842:	static void ip_vs_proc_conn(struct netns_ipvs *, struct ip_vs_conn_param *, unsigned int, unsigned int, unsigned int, unsigned int, const union nf_inet_addr *, __be16, unsigned long, __u32, struct ip_vs_sync_conn_options *);
460:	static int ip_vs_sync_conn_needed(struct netns_ipvs *, struct ip_vs_conn *, int);
1630:	static void master_wakeup_work_handler(struct work_struct *);
362:	static void sb_queue_tail(struct netns_ipvs *, struct ipvs_master_sync_state *);
1713:	static int sync_thread_backup(void *);
1661:	static int sync_thread_master(void *);

File net/netfilter/ipvs/ip_vs_xmit.c:
704:	int ip_vs_bypass_xmit(struct sk_buff *, struct ip_vs_conn *, struct ip_vs_protocol *, struct ip_vs_iphdr *);
1435:	int ip_vs_dr_xmit(struct sk_buff *, struct ip_vs_conn *, struct ip_vs_protocol *, struct ip_vs_iphdr *);
1508:	int ip_vs_icmp_xmit(struct sk_buff *, struct ip_vs_conn *, struct ip_vs_protocol *, int, unsigned int, struct ip_vs_iphdr *);
765:	int ip_vs_nat_xmit(struct sk_buff *, struct ip_vs_conn *, struct ip_vs_protocol *, struct ip_vs_iphdr *);
690:	int ip_vs_null_xmit(struct sk_buff *, struct ip_vs_conn *, struct ip_vs_protocol *, struct ip_vs_iphdr *);
1133:	int ip_vs_tunnel_xmit(struct sk_buff *, struct ip_vs_conn *, struct ip_vs_protocol *, struct ip_vs_iphdr *);
307:	static int __ip_vs_get_out_rt(struct netns_ipvs *, int, struct sk_buff *, struct ip_vs_dest *, __be32, int, __be32 *, struct ip_vs_iphdr *);
123:	static struct rtable *do_output_route4(struct net *, __be32, int, __be32 *);
634:	static int ip_vs_nat_send_or_cont(int, struct sk_buff *, struct ip_vs_conn *, int);
665:	static int ip_vs_send_or_cont(int, struct sk_buff *, struct ip_vs_conn *, int);
1096:	static void ipvs_gre_encap(struct net *, struct sk_buff *, struct ip_vs_conn *, __u8 *);
205:	static void maybe_update_pmtu(int, struct sk_buff *, int);

File net/netfilter/nf_conntrack_acct.c:
25:	void nf_conntrack_acct_pernet_init(struct net *);

File net/netfilter/nf_conntrack_core.c:
1155:	int __nf_conntrack_confirm(struct sk_buff *);
2826:	void __nf_ct_change_status(struct nf_conn *, unsigned long, unsigned long);
2812:	int __nf_ct_change_timeout(struct nf_conn *, u64);
2079:	void __nf_ct_refresh_acct(struct nf_conn *, enum ip_conntrack_info, const struct sk_buff *, u32, bool);
1664:	struct nf_conn *nf_conntrack_alloc(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *, const struct nf_conntrack_tuple *, gfp_t);
2061:	void nf_conntrack_alter_reply(struct nf_conn *, const struct nf_conntrack_tuple *);
2519:	void nf_conntrack_cleanup_end(void);
2536:	void nf_conntrack_cleanup_net(struct net *);
2544:	void nf_conntrack_cleanup_net_list(struct list_head *);
2513:	void nf_conntrack_cleanup_start(void);
817:	struct nf_conntrack_tuple_hash *nf_conntrack_find_get(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *);
1674:	void nf_conntrack_free(struct nf_conn *);
875:	int nf_conntrack_hash_check_insert(struct nf_conn *);
2599:	int nf_conntrack_hash_resize(unsigned int);
1972:	unsigned int nf_conntrack_in(struct sk_buff *, const struct nf_hook_state *);
2771:	void nf_conntrack_init_end(void);
2781:	int nf_conntrack_init_net(struct net *);
2682:	int nf_conntrack_init_start(void);
104:	void nf_conntrack_lock(spinlock_t *);
2663:	int nf_conntrack_set_hashsize(const char *, const struct kernel_param *);
1298:	int nf_conntrack_tuple_taken(const struct nf_conntrack_tuple *, const struct nf_conn *);
952:	void nf_ct_acct_add(struct nf_conn *, u32, unsigned int, unsigned int);
2578:	void *nf_ct_alloc_hashtable(unsigned int *, int);
2843:	int nf_ct_change_status_common(struct nf_conn *, unsigned int);
653:	bool nf_ct_delete(struct nf_conn *, u32, int);
581:	void nf_ct_destroy(struct nf_conntrack *);
493:	u32 nf_ct_get_id(const struct nf_conn *);
425:	bool nf_ct_get_tuplepr(const struct sk_buff *, unsigned int, u_int16_t, struct net *, struct nf_conntrack_tuple *);
441:	bool nf_ct_invert_tuple(struct nf_conntrack_tuple *, const struct nf_conntrack_tuple *);
2438:	void nf_ct_iterate_cleanup_net(int (*)(struct nf_conn *, void *), const struct nf_ct_iter_data *);
2465:	void nf_ct_iterate_destroy(int (*)(struct nf_conn *, void *), void *);
2101:	bool nf_ct_kill_acct(struct nf_conn *, enum ip_conntrack_info, const struct sk_buff *);
528:	struct nf_conn *nf_ct_tmpl_alloc(struct net *, const struct nf_conntrack_zone *, gfp_t);
560:	void nf_ct_tmpl_free(struct nf_conn *);
1610:	static struct nf_conn *__nf_conntrack_alloc(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *, const struct nf_conntrack_tuple *, gfp_t, u32);
783:	static struct nf_conntrack_tuple_hash *__nf_conntrack_find_get(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *, u32);
611:	static void __nf_ct_delete_from_lists(struct nf_conn *);
996:	static int __nf_ct_resolve_clash(struct sk_buff *, struct nf_conntrack_tuple_hash *);
1414:	static int early_drop(struct net *, unsigned int);
1460:	static void gc_worker(struct work_struct *);
408:	static int get_l4proto(const struct sk_buff *, unsigned int, u8, u8 *);
210:	static u32 hash_conntrack_raw(const struct nf_conntrack_tuple *, unsigned int, const struct net *);
1707:	static struct nf_conntrack_tuple_hash *init_conntrack(struct net *, struct nf_conn *, const struct nf_conntrack_tuple *, struct sk_buff *, unsigned int, u32);
2508:	static int kill_all(struct nf_conn *, void *);
2172:	static void nf_conntrack_attach(struct sk_buff *, const struct sk_buff *);
139:	static bool nf_conntrack_double_lock(struct net *, unsigned int, unsigned int, unsigned int);
129:	static void nf_conntrack_double_unlock(unsigned int, unsigned int);
2329:	static bool nf_conntrack_get_tuple_skb(struct nf_conntrack_tuple *, const struct sk_buff *);
1891:	static unsigned int nf_conntrack_handle_icmp(struct nf_conn *, struct sk_buff *, unsigned int, u8, const struct nf_hook_state *);
2308:	static int nf_conntrack_update(struct net *, struct sk_buff *);
724:	static void nf_ct_gc_expired(struct nf_conn *);
273:	static bool nf_ct_get_tuple(const struct sk_buff *, unsigned int, unsigned int, u_int16_t, u_int8_t, struct net *, struct nf_conntrack_tuple *);
2419:	static void nf_ct_iterate_cleanup(int (*)(struct nf_conn *, void *), const struct nf_ct_iter_data *);
1121:	static int nf_ct_resolve_clash(struct sk_buff *, struct nf_conntrack_tuple_hash *, u32);

File net/netfilter/nf_conntrack_ecache.c:
41:	struct nf_conntrack_net_ecache *nf_conn_pernet_ecache(const struct net *);
353:	void nf_conntrack_ecache_pernet_fini(struct net *);
340:	void nf_conntrack_ecache_pernet_init(struct net *);
284:	void nf_conntrack_ecache_work(struct net *, enum nf_ct_ecache_state);
165:	int nf_conntrack_eventmask_report(unsigned int, struct nf_conn *, u32, int);
261:	void nf_conntrack_register_notifier(struct net *, const struct nf_ct_event_notifier *);
275:	void nf_conntrack_unregister_notifier(struct net *);
204:	void nf_ct_deliver_cached_events(struct nf_conn *);
300:	bool nf_ct_ecache_ext_add(struct nf_conn *, u16, u16, gfp_t);
231:	void nf_ct_expect_event_report(enum ip_conntrack_expect_events, struct nf_conntrack_expect *, u32, int);
127:	static int __nf_conntrack_eventmask_report(struct nf_conntrack_ecache *, const u32, const u32, const struct nf_ct_event *);
106:	static void ecache_work(struct work_struct *);

File net/netfilter/nf_conntrack_expect.c:
131:	struct nf_conntrack_expect *__nf_ct_expect_find(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *);
740:	void nf_conntrack_expect_fini(void);
717:	int nf_conntrack_expect_init(void);
712:	void nf_conntrack_expect_pernet_fini(struct net *);
707:	int nf_conntrack_expect_pernet_init(struct net *);
298:	struct nf_conntrack_expect *nf_ct_expect_alloc(struct nf_conn *);
153:	struct nf_conntrack_expect *nf_ct_expect_find_get(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *);
312:	void nf_ct_expect_init(struct nf_conntrack_expect *, unsigned int, u_int8_t, const union nf_inet_addr *, const union nf_inet_addr *, u_int8_t, const __be16 *, const __be16 *);
510:	void nf_ct_expect_iterate_destroy(bool (*)(struct nf_conntrack_expect *, void *), void *);
534:	void nf_ct_expect_iterate_net(struct net *, bool (*)(struct nf_conntrack_expect *, void *), void *, u32, int);
378:	void nf_ct_expect_put(struct nf_conntrack_expect *);
489:	int nf_ct_expect_related_report(struct nf_conntrack_expect *, u32, int, unsigned int);
172:	struct nf_conntrack_expect *nf_ct_find_expectation(struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *);
119:	bool nf_ct_remove_expect(struct nf_conntrack_expect *);
228:	void nf_ct_remove_expectations(struct nf_conn *);
287:	void nf_ct_unexpect_related(struct nf_conntrack_expect *);
47:	void nf_ct_unlink_expect_report(struct nf_conntrack_expect *, u32, int);
109:	static bool nf_ct_exp_equal(const struct nf_conntrack_tuple *, const struct nf_conntrack_expect *, const struct nf_conntrack_zone *, const struct net *);
82:	static unsigned int nf_ct_expect_dst_hash(const struct net *, const struct nf_conntrack_tuple *);
370:	static void nf_ct_expect_free_rcu(struct callback_head *);
72:	static void nf_ct_expectation_timed_out(struct timer_list *);

File net/netfilter/nf_conntrack_extend.c:
136:	void *__nf_ct_ext_find(const struct nf_ct_ext *, u8);
92:	void *nf_ct_ext_add(struct nf_conn *, enum nf_ct_ext_id, gfp_t);
151:	void nf_ct_ext_bump_genid(void);

File net/netfilter/nf_conntrack_helper.c:
52:	struct nf_conntrack_helper *__nf_conntrack_helper_find(const char *, u16, u8);
191:	int __nf_ct_try_assign_helper(struct nf_conn *, struct nf_conn *, gfp_t);
613:	void nf_conntrack_helper_fini(void);
601:	int nf_conntrack_helper_init(void);
106:	void nf_conntrack_helper_put(struct nf_conntrack_helper *);
450:	int nf_conntrack_helper_register(struct nf_conntrack_helper *);
75:	struct nf_conntrack_helper *nf_conntrack_helper_try_module_get(const char *, u16, u8);
510:	void nf_conntrack_helper_unregister(struct nf_conntrack_helper *);
557:	int nf_conntrack_helpers_register(struct nf_conntrack_helper *, unsigned int);
577:	void nf_conntrack_helpers_unregister(struct nf_conntrack_helper *, unsigned int);
312:	int nf_ct_add_helper(struct nf_conn *, const char *, u8, u8, bool, struct nf_conntrack_helper **);
246:	int nf_ct_helper(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, u16);
357:	void nf_ct_helper_destroy(struct nf_conn *);
391:	struct nf_ct_helper_expectfn *nf_ct_helper_expectfn_find_by_name(const char *);
408:	struct nf_ct_helper_expectfn *nf_ct_helper_expectfn_find_by_symbol(const void *);
373:	void nf_ct_helper_expectfn_register(struct nf_ct_helper_expectfn *);
381:	void nf_ct_helper_expectfn_unregister(struct nf_ct_helper_expectfn *);
178:	struct nf_conn_help *nf_ct_helper_ext_add(struct nf_conn *, gfp_t);
527:	void nf_ct_helper_init(struct nf_conntrack_helper *, u16, u16, const char *, u16, u16, u32, const struct nf_conntrack_expect_policy *, u32, int (*)(struct sk_buff *, unsigned int, struct nf_conn *, enum ip_conntrack_info), int (*)(struct nlattr *, struct nf_conn *), struct module *);
424:	void nf_ct_helper_log(struct sk_buff *, const struct nf_conn *, const char *, ...);
165:	void nf_nat_helper_put(struct nf_conntrack_helper *);
585:	void nf_nat_helper_register(struct nf_conntrack_nat_helper *);
129:	int nf_nat_helper_try_module_get(const char *, u16, u8);
593:	void nf_nat_helper_unregister(struct nf_conntrack_nat_helper *);
496:	static bool expect_iter_me(struct nf_conntrack_expect *, void *);
344:	static int unhelp(struct nf_conn *, void *);

File net/netfilter/nf_conntrack_proto.c:
134:	unsigned int nf_confirm(void *, struct sk_buff *, const struct nf_hook_state *);
681:	void nf_conntrack_proto_fini(void);
658:	int nf_conntrack_proto_init(void);
689:	void nf_conntrack_proto_pernet_init(struct net *);
640:	void nf_ct_bridge_register(struct nf_ct_bridge_info *);
649:	void nf_ct_bridge_unregister(struct nf_ct_bridge_info *);
97:	const struct nf_conntrack_l4proto *nf_ct_l4proto_find(u8);
73:	void nf_ct_l4proto_log_invalid(const struct sk_buff *, const struct nf_conn *, const struct nf_hook_state *, const char *, ...);
596:	int nf_ct_netns_get(struct net *, u8);
623:	void nf_ct_netns_put(struct net *, uint8_t);
49:	void nf_l4proto_log_invalid(const struct sk_buff *, const struct nf_hook_state *, u8, const char *, ...);
268:	static int getorigdst(struct sock *, int, void *, int *);
203:	static unsigned int ipv4_conntrack_in(void *, struct sk_buff *, const struct nf_hook_state *);
210:	static unsigned int ipv4_conntrack_local(void *, struct sk_buff *, const struct nf_hook_state *);
392:	static unsigned int ipv6_conntrack_in(void *, struct sk_buff *, const struct nf_hook_state *);
399:	static unsigned int ipv6_conntrack_local(void *, struct sk_buff *, const struct nf_hook_state *);
334:	static int ipv6_getorigdst(struct sock *, int, void *, int *);
452:	static int nf_ct_netns_do_get(struct net *, u8);
576:	static int nf_ct_netns_inet_get(struct net *);
434:	static int nf_ct_tcp_fixup(struct nf_conn *, void *);

File net/netfilter/nf_conntrack_proto_dccp.c:
734:	void nf_conntrack_dccp_init_net(struct net *);
472:	int nf_conntrack_dccp_packet(struct nf_conn *, struct sk_buff *, unsigned int, enum ip_conntrack_info, const struct nf_hook_state *);
570:	static bool dccp_can_early_drop(const struct nf_conn *);
384:	static bool dccp_new(struct nf_conn *, const struct sk_buff *, const struct dccp_hdr *, const struct nf_hook_state *);

File net/netfilter/nf_conntrack_proto_generic.c:
60:	void nf_conntrack_generic_init_net(struct net *);

File net/netfilter/nf_conntrack_proto_icmp.c:
27:	bool icmp_pkt_to_tuple(const struct sk_buff *, unsigned int, struct net *, struct nf_conntrack_tuple *);
358:	void nf_conntrack_icmp_init_net(struct net *);
70:	int nf_conntrack_icmp_packet(struct nf_conn *, struct sk_buff *, enum ip_conntrack_info, const struct nf_hook_state *);
204:	int nf_conntrack_icmpv4_error(struct nf_conn *, struct sk_buff *, unsigned int, const struct nf_hook_state *);
106:	int nf_conntrack_inet_error(struct nf_conn *, struct sk_buff *, unsigned int, const struct nf_hook_state *, u8, union nf_inet_addr *);
56:	bool nf_conntrack_invert_icmp_tuple(struct nf_conntrack_tuple *, const struct nf_conntrack_tuple *);

File net/netfilter/nf_conntrack_proto_icmpv6.c:
31:	bool icmpv6_pkt_to_tuple(const struct sk_buff *, unsigned int, struct net *, struct nf_conntrack_tuple *);
182:	int nf_conntrack_icmpv6_error(struct nf_conn *, struct sk_buff *, unsigned int, const struct nf_hook_state *);
334:	void nf_conntrack_icmpv6_init_net(struct net *);
87:	int nf_conntrack_icmpv6_packet(struct nf_conn *, struct sk_buff *, enum ip_conntrack_info, const struct nf_hook_state *);
68:	bool nf_conntrack_invert_icmpv6_tuple(struct nf_conntrack_tuple *, const struct nf_conntrack_tuple *);
133:	static int nf_conntrack_icmpv6_redirect(struct nf_conn *, struct sk_buff *, unsigned int, const struct nf_hook_state *);

File net/netfilter/nf_conntrack_proto_sctp.c:
683:	void nf_conntrack_sctp_init_net(struct net *);
349:	int nf_conntrack_sctp_packet(struct nf_conn *, struct sk_buff *, unsigned int, enum ip_conntrack_info, const struct nf_hook_state *);
528:	static bool sctp_can_early_drop(const struct nf_conn *);
262:	static bool sctp_new(struct nf_conn *, const struct sk_buff *, const struct sctphdr *, unsigned int);

File net/netfilter/nf_conntrack_proto_tcp.c:
1552:	void nf_conntrack_tcp_init_net(struct net *);
925:	int nf_conntrack_tcp_packet(struct nf_conn *, struct sk_buff *, unsigned int, enum ip_conntrack_info, const struct nf_hook_state *);
720:	static void nf_tcp_handle_invalid(struct nf_conn *, enum ip_conntrack_dir, int, const struct sk_buff *, const struct nf_hook_state *);
482:	static enum nf_ct_tcp_action nf_tcp_log_invalid(const struct sk_buff *, const struct nf_conn *, const struct nf_hook_state *, const struct ip_ct_tcp_state *, enum nf_ct_tcp_action, const char *, ...);
898:	static bool tcp_can_early_drop(const struct nf_conn *);
836:	static bool tcp_new(struct nf_conn *, const struct sk_buff *, unsigned int, const struct tcphdr *);
333:	static void tcp_options(const struct sk_buff *, unsigned int, const struct tcphdr *, struct ip_ct_tcp_state *);

File net/netfilter/nf_conntrack_proto_udp.c:
267:	void nf_conntrack_udp_init_net(struct net *);
84:	int nf_conntrack_udp_packet(struct nf_conn *, struct sk_buff *, unsigned int, enum ip_conntrack_info, const struct nf_hook_state *);
181:	int nf_conntrack_udplite_packet(struct nf_conn *, struct sk_buff *, unsigned int, enum ip_conntrack_info, const struct nf_hook_state *);

File net/netfilter/nf_conntrack_seqadj.c:
164:	int nf_ct_seq_adjust(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, unsigned int);
220:	s32 nf_ct_seq_offset(const struct nf_conn *, enum ip_conntrack_dir, u32);
10:	int nf_ct_seqadj_init(struct nf_conn *, enum ip_conntrack_info, s32);
30:	int nf_ct_seqadj_set(struct nf_conn *, enum ip_conntrack_info, __be32, s32);
60:	void nf_ct_tcp_seqadj_set(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, s32);

File net/netfilter/nf_conntrack_standalone.c:
519:	u32 nf_conntrack_count(const struct net *);
534:	static int nf_conntrack_hash_sysctl(struct ctl_table *, int, void *, size_t *, loff_t *);
1188:	static void nf_conntrack_pernet_exit(struct list_head *);
1153:	static int nf_conntrack_pernet_init(struct net *);
1242:	static void nf_conntrack_standalone_fini(void);
1205:	static int nf_conntrack_standalone_init(void);

File net/netfilter/nf_log.c:
565:	int netfilter_log_init(void);
128:	int nf_log_bind_pf(struct net *, u_int8_t, const struct nf_logger *);
266:	int nf_log_buf_add(struct nf_log_buf *, const char *, ...);
301:	void nf_log_buf_close(struct nf_log_buf *);
286:	struct nf_log_buf *nf_log_buf_open(void);
205:	void nf_log_packet(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *, ...);
79:	int nf_log_register(u_int8_t, struct nf_logger *);
45:	int nf_log_set(struct net *, u_int8_t, const struct nf_logger *);
234:	void nf_log_trace(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *, ...);
144:	void nf_log_unbind_pf(struct net *, u_int8_t);
112:	void nf_log_unregister(struct nf_logger *);
63:	void nf_log_unset(struct net *, const struct nf_logger *);
154:	int nf_logger_find_get(int, enum nf_log_type);
186:	void nf_logger_put(int, enum nf_log_type);
552:	static void nf_log_net_exit(struct net *);
530:	static int nf_log_net_init(struct net *);
406:	static int nf_log_proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
328:	static void *seq_next(struct seq_file *, void *, loff_t *);
345:	static int seq_show(struct seq_file *, void *);
316:	static void *seq_start(struct seq_file *, loff_t *);
340:	static void seq_stop(struct seq_file *, void *);

File net/netfilter/nf_log_syslog.c:
60:	static void dump_arp_packet(struct nf_log_buf *, const struct nf_loginfo *, const struct sk_buff *, unsigned int);
298:	static void dump_ipv4_packet(struct net *, struct nf_log_buf *, const struct nf_loginfo *, const struct sk_buff *, unsigned int);
532:	static void dump_ipv6_packet(struct net *, struct nf_log_buf *, const struct nf_loginfo *, const struct sk_buff *, unsigned int, int);
774:	static void dump_mac_header(struct nf_log_buf *, const struct nf_loginfo *, const struct sk_buff *);
133:	static void nf_log_arp_packet(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *);
110:	static void nf_log_dump_packet_common(struct nf_log_buf *, u8, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *);
164:	static void nf_log_dump_sk_uid_gid(struct net *, struct nf_log_buf *, struct sock *);
182:	static int nf_log_dump_tcp_header(struct nf_log_buf *, const struct sk_buff *, u8, int, unsigned int, unsigned int);
263:	static int nf_log_dump_udp_header(struct nf_log_buf *, const struct sk_buff *, u8, int, unsigned int);
865:	static void nf_log_ip6_packet(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *);
830:	static void nf_log_ip_packet(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *);
926:	static void nf_log_netdev_packet(struct net *, u_int8_t, unsigned int, const struct sk_buff *, const struct net_device *, const struct net_device *, const struct nf_loginfo *, const char *);
1057:	static void nf_log_syslog_exit(void);
1014:	static int nf_log_syslog_init(void);
1000:	static void nf_log_syslog_net_exit(struct net *);
966:	static int nf_log_syslog_net_init(struct net *);

File net/netfilter/nf_nat_core.c:
566:	struct nf_conn_nat *nf_ct_nat_ext_add(struct nf_conn *);
668:	unsigned int nf_nat_alloc_null_binding(struct nf_conn *, unsigned int);
713:	unsigned int nf_nat_inet_fn(void *, struct sk_buff *, const struct nf_hook_state *);
675:	unsigned int nf_nat_packet(struct nf_conn *, enum ip_conntrack_info, unsigned int, struct sk_buff *);
991:	int nf_nat_register_fn(struct net *, u8, const struct nf_hook_ops *, const struct nf_hook_ops *, unsigned int);
580:	unsigned int nf_nat_setup_info(struct nf_conn *, const struct nf_nat_range2 *, enum nf_nat_manip_type);
1066:	void nf_nat_unregister_fn(struct net *, u8, const struct nf_hook_ops *, unsigned int);
153:	static unsigned int hash_by_src(const struct net *, const struct nf_conntrack_zone *, const struct nf_conntrack_tuple *);
245:	static int in_range(const struct nf_conntrack_tuple *, const struct nf_nat_range2 *);
1167:	static void nf_nat_cleanup(void);
804:	static void nf_nat_cleanup_conntrack(struct nf_conn *);
1128:	static int nf_nat_init(void);
814:	static int nf_nat_proto_clean(struct nf_conn *, void *);
978:	static int nfnetlink_parse_nat_setup(struct nf_conn *, enum nf_nat_manip_type, const struct nlattr *);

File net/netfilter/nf_nat_helper.c:
86:	bool __nf_nat_mangle_tcp_packet(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, unsigned int, unsigned int, unsigned int, const char *, unsigned int, bool);
202:	u16 nf_nat_exp_find_port(struct nf_conntrack_expect *, u16);
179:	void nf_nat_follow_master(struct nf_conn *, struct nf_conntrack_expect *);
136:	bool nf_nat_mangle_udp_packet(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, unsigned int, unsigned int, unsigned int, const char *, unsigned int);
25:	static void mangle_contents(struct sk_buff *, unsigned int, unsigned int, unsigned int, const char *, unsigned int);

File net/netfilter/nf_nat_masquerade.c:
312:	int nf_nat_masquerade_inet_register_notifiers(void);
353:	void nf_nat_masquerade_inet_unregister_notifiers(void);
28:	unsigned int nf_nat_masquerade_ipv4(struct sk_buff *, unsigned int, const struct nf_nat_range2 *, const struct net_device *);
241:	unsigned int nf_nat_masquerade_ipv6(struct sk_buff *, const struct nf_nat_range2 *, const struct net_device *);
139:	static int device_cmp(struct nf_conn *, void *);
169:	static int inet_cmp(struct nf_conn *, void *);
78:	static void iterate_cleanup_work(struct work_struct *);
149:	static int masq_device_event(struct notifier_block *, unsigned long, void *);
279:	static int masq_inet6_event(struct notifier_block *, unsigned long, void *);
182:	static int masq_inet_event(struct notifier_block *, unsigned long, void *);
101:	static void nf_nat_masq_schedule(struct net *, union nf_inet_addr *, int, int (*)(struct nf_conn *, void *), gfp_t);

File net/netfilter/nf_nat_proto.c:
539:	void nf_nat_csum_recalc(struct sk_buff *, u8, u8, void *, __sum16 *, int, int);
559:	int nf_nat_icmp_reply_translation(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, unsigned int);
836:	int nf_nat_icmpv6_reply_translation(struct sk_buff *, struct nf_conn *, enum ip_conntrack_info, unsigned int, unsigned int);
822:	int nf_nat_ipv4_register_fn(struct net *, const struct nf_hook_ops *);
829:	void nf_nat_ipv4_unregister_fn(struct net *, const struct nf_hook_ops *);
1061:	int nf_nat_ipv6_register_fn(struct net *, const struct nf_hook_ops *);
1068:	void nf_nat_ipv6_unregister_fn(struct net *, const struct nf_hook_ops *);
419:	unsigned int nf_nat_manip_pkt(struct sk_buff *, struct nf_conn *, enum nf_nat_manip_type, enum ip_conntrack_dir);
39:	static void __udp_manip_pkt(struct sk_buff *, unsigned int, struct udphdr *, const struct nf_conntrack_tuple *, enum nf_nat_manip_type, bool);
317:	static bool l4proto_manip_pkt(struct sk_buff *, unsigned int, unsigned int, const struct nf_conntrack_tuple *, enum nf_nat_manip_type);
755:	static unsigned int nf_nat_ipv4_local_fn(void *, struct sk_buff *, const struct nf_hook_state *);
701:	static unsigned int nf_nat_ipv4_local_in(void *, struct sk_buff *, const struct nf_hook_state *);
353:	static bool nf_nat_ipv4_manip_pkt(struct sk_buff *, unsigned int, const struct nf_conntrack_tuple *, enum nf_nat_manip_type);
718:	static unsigned int nf_nat_ipv4_out(void *, struct sk_buff *, const struct nf_hook_state *);
649:	static unsigned int nf_nat_ipv4_pre_routing(void *, struct sk_buff *, const struct nf_hook_state *);
904:	static unsigned int nf_nat_ipv6_fn(void *, struct sk_buff *, const struct nf_hook_state *);
941:	static unsigned int nf_nat_ipv6_in(void *, struct sk_buff *, const struct nf_hook_state *);
993:	static unsigned int nf_nat_ipv6_local_fn(void *, struct sk_buff *, const struct nf_hook_state *);
956:	static unsigned int nf_nat_ipv6_out(void *, struct sk_buff *, const struct nf_hook_state *);

File net/netfilter/nf_queue.c:
237:	int nf_queue(struct sk_buff *, struct nf_hook_state *, unsigned int, unsigned int);
74:	void nf_queue_entry_free(struct nf_queue_entry *);
99:	bool nf_queue_entry_get_refs(struct nf_queue_entry *);
117:	void nf_queue_nf_hook_drop(struct net *);
34:	void nf_register_queue_handler(const struct nf_queue_handler *);
299:	void nf_reinject(struct nf_queue_entry *, unsigned int);
43:	void nf_unregister_queue_handler(void);

File net/netfilter/nf_sockopt.c:
107:	int nf_getsockopt(struct sock *, u_int8_t, int, char *, int *);
25:	int nf_register_sockopt(struct nf_sockopt_ops *);
92:	int nf_setsockopt(struct sock *, u_int8_t, int, sockptr_t, unsigned int);
54:	void nf_unregister_sockopt(struct nf_sockopt_ops *);

File net/netfilter/utils.c:
123:	__sum16 nf_checksum(struct sk_buff *, unsigned int, unsigned int, u8, unsigned short);
142:	__sum16 nf_checksum_partial(struct sk_buff *, unsigned int, unsigned int, unsigned int, u8, unsigned short);
64:	__sum16 nf_ip6_checksum(struct sk_buff *, unsigned int, unsigned int, u8);
10:	__sum16 nf_ip_checksum(struct sk_buff *, unsigned int, unsigned int, u8);
201:	int nf_reroute(struct sk_buff *, struct nf_queue_entry *);
163:	int nf_route(struct net *, struct dst_entry **, struct flowi *, bool, unsigned short);

File net/netfilter/x_tables.c:
963:	unsigned int *xt_alloc_entry_offsets(unsigned int);
1184:	struct xt_table_info *xt_alloc_table_info(unsigned int);
912:	int xt_check_entry_offsets(const void *, const char *, unsigned int, unsigned int);
480:	int xt_check_match(struct xt_mtchk_param *, unsigned int, u16, bool);
463:	int xt_check_proc_name(const char *, unsigned int);
584:	int xt_check_table_hooks(const struct xt_table_info *, unsigned int);
1000:	int xt_check_target(struct xt_tgchk_param *, unsigned int, u16, bool);
1069:	void *xt_copy_counters(sockptr_t, unsigned int, struct xt_counters_info *);
1368:	struct xt_counters *xt_counters_alloc(unsigned int);
312:	int xt_data_to_user(void *, const void *, int, int, int);
980:	bool xt_find_jump_offset(const unsigned int *, unsigned int, unsigned int);
197:	struct xt_match *xt_find_match(u8, const char *, u8);
393:	int xt_find_revision(u8, const char *, u8, int, int *);
1216:	struct xt_table *xt_find_table(struct net *, u8, const char *);
1234:	struct xt_table *xt_find_table_lock(struct net *, u_int8_t, const char *);
1202:	void xt_free_table_info(struct xt_table_info *);
1732:	struct nf_hook_ops *xt_hook_ops_alloc(const struct xt_table *, nf_hookfn *);
332:	int xt_match_to_user(const struct xt_entry_match *, struct xt_entry_match *);
1921:	bool xt_percpu_counter_alloc(struct xt_percpu_counter_alloc_state *, struct xt_counters *);
1945:	void xt_percpu_counter_free(struct xt_counters *);
1879:	void xt_proto_fini(struct net *, u_int8_t);
1813:	int xt_proto_init(struct net *, u_int8_t);
139:	int xt_register_match(struct xt_match *);
162:	int xt_register_matches(struct xt_match *, unsigned int);
1450:	struct xt_table *xt_register_table(struct net *, const struct xt_table *, struct xt_table_info *, struct xt_table_info *);
89:	int xt_register_target(struct xt_target *);
112:	int xt_register_targets(struct xt_target *, unsigned int);
1761:	int xt_register_template(const struct xt_table *, int (*)(struct net *));
1384:	struct xt_table_info *xt_replace_table(struct xt_table *, unsigned int, struct xt_table_info *, int *);
228:	struct xt_match *xt_request_find_match(uint8_t, const char *, uint8_t);
1281:	struct xt_table *xt_request_find_table_lock(struct net *, u_int8_t, const char *);
275:	struct xt_target *xt_request_find_target(u8, const char *, u8);
1299:	void xt_table_unlock(struct xt_table *);
340:	int xt_target_to_user(const struct xt_entry_target *, struct xt_entry_target *);
151:	void xt_unregister_match(struct xt_match *);
182:	void xt_unregister_matches(struct xt_match *, unsigned int);
1500:	void *xt_unregister_table(struct xt_table *);
101:	void xt_unregister_target(struct xt_target *);
132:	void xt_unregister_targets(struct xt_target *, unsigned int);
1792:	void xt_unregister_template(const struct xt_table *);
417:	static char *textify_hooks(char *, size_t, unsigned int, uint8_t);
246:	static struct xt_target *xt_find_target(u8, const char *, u8);
2009:	static void xt_fini(void);
1980:	static int xt_init(void);
1654:	static void *xt_match_seq_next(struct seq_file *, void *, loff_t *);
1659:	static int xt_match_seq_show(struct seq_file *, void *);
1649:	static void *xt_match_seq_start(struct seq_file *, loff_t *);
1580:	static void *xt_mttg_seq_next(struct seq_file *, void *, loff_t *, bool);
1634:	static void xt_mttg_seq_stop(struct seq_file *, void *);
1964:	static void xt_net_exit(struct net *);
1954:	static int xt_net_init(struct net *);
293:	static int xt_obj_to_user(u16 *, u16, void *, const char *, u8 *, u8);
1530:	static void *xt_table_seq_next(struct seq_file *, void *, loff_t *);
1548:	static int xt_table_seq_show(struct seq_file *, void *);
1518:	static void *xt_table_seq_start(struct seq_file *, loff_t *);
1541:	static void xt_table_seq_stop(struct seq_file *, void *);
1688:	static void *xt_target_seq_next(struct seq_file *, void *, loff_t *);
1693:	static int xt_target_seq_show(struct seq_file *, void *);
1683:	static void *xt_target_seq_start(struct seq_file *, loff_t *);

File net/netfilter/xt_addrtype.c:
156:	static int addrtype_mt_checkentry_v1(const struct xt_mtchk_param *);
226:	static void addrtype_mt_exit(void);
220:	static int addrtype_mt_init(void);
111:	static bool addrtype_mt_v0(const struct sk_buff *, struct xt_action_param *);
129:	static bool addrtype_mt_v1(const struct sk_buff *, struct xt_action_param *);
68:	static bool match_type6(struct net *, const struct net_device *, const struct in6_addr *, u16);

File net/netfilter/xt_CHECKSUM.c:
26:	static unsigned int checksum_tg(struct sk_buff *, const struct xt_action_param *);
34:	static int checksum_tg_check(const struct xt_tgchk_param *);
81:	static void checksum_tg_exit(void);
76:	static int checksum_tg_init(void);

File net/netfilter/xt_conntrack.c:
162:	static bool conntrack_mt(const struct sk_buff *, struct xt_action_param *, u16, u16);
266:	static int conntrack_mt_check(const struct xt_mtchk_param *);
277:	static void conntrack_mt_destroy(const struct xt_mtdtor_param *);
321:	static void conntrack_mt_exit(void);
315:	static int conntrack_mt_init(void);
243:	static bool conntrack_mt_v1(const struct sk_buff *, struct xt_action_param *);
251:	static bool conntrack_mt_v2(const struct sk_buff *, struct xt_action_param *);
259:	static bool conntrack_mt_v3(const struct sk_buff *, struct xt_action_param *);

File net/netfilter/xt_ipvs.c:
49:	static bool ipvs_mt(const struct sk_buff *, struct xt_action_param *);
155:	static int ipvs_mt_check(const struct xt_mtchk_param *);
185:	static void ipvs_mt_exit(void);
180:	static int ipvs_mt_init(void);

File net/netfilter/xt_LOG.c:
29:	static unsigned int log_tg(struct sk_buff *, const struct xt_action_param *);
44:	static int log_tg_check(const struct xt_tgchk_param *);
72:	static void log_tg_destroy(const struct xt_tgdtor_param *);
105:	static void log_tg_exit(void);
100:	static int log_tg_init(void);

File net/netfilter/xt_mark.c:
35:	static bool mark_mt(const struct sk_buff *, struct xt_action_param *);
75:	static void mark_mt_exit(void);
60:	static int mark_mt_init(void);
26:	static unsigned int mark_tg(struct sk_buff *, const struct xt_action_param *);

File net/netfilter/xt_MASQUERADE.c:
35:	static unsigned int masquerade_tg(struct sk_buff *, const struct xt_action_param *);
56:	static unsigned int masquerade_tg6(struct sk_buff *, const struct xt_action_param *);
61:	static int masquerade_tg6_checkentry(const struct xt_tgchk_param *);
19:	static int masquerade_tg_check(const struct xt_tgchk_param *);
49:	static void masquerade_tg_destroy(const struct xt_tgdtor_param *);
117:	static void masquerade_tg_exit(void);
98:	static int masquerade_tg_init(void);

File net/netfilter/xt_nat.c:
69:	static unsigned int xt_dnat_target_v0(struct sk_buff *, const struct xt_action_param *);
104:	static unsigned int xt_dnat_target_v1(struct sk_buff *, const struct xt_action_param *);
137:	static unsigned int xt_dnat_target_v2(struct sk_buff *, const struct xt_action_param *);
27:	static int xt_nat_checkentry(const struct xt_tgchk_param *);
16:	static int xt_nat_checkentry_v0(const struct xt_tgchk_param *);
32:	static void xt_nat_destroy(const struct xt_tgdtor_param *);
233:	static void xt_nat_exit(void);
227:	static int xt_nat_init(void);
52:	static unsigned int xt_snat_target_v0(struct sk_buff *, const struct xt_action_param *);
85:	static unsigned int xt_snat_target_v1(struct sk_buff *, const struct xt_action_param *);
122:	static unsigned int xt_snat_target_v2(struct sk_buff *, const struct xt_action_param *);

File net/netfilter/xt_tcpudp.c:
32:	static bool tcp_find_option(u_int8_t, const struct sk_buff *, unsigned int, unsigned int, bool, bool *);
66:	static bool tcp_mt(const struct sk_buff *, struct xt_action_param *);
121:	static int tcp_mt_check(const struct xt_mtchk_param *);
226:	static void tcpudp_mt_exit(void);
221:	static int tcpudp_mt_init(void);
129:	static bool udp_mt(const struct sk_buff *, struct xt_action_param *);
156:	static int udp_mt_check(const struct xt_mtchk_param *);

File net/netlink/af_netlink.c:
2132:	int __netlink_change_ngroups(struct sock *, unsigned int);
2178:	void __netlink_clear_multicast_users(struct sock *, unsigned int);
2347:	int __netlink_dump_start(struct sock *, struct sk_buff *, const struct nlmsghdr *, struct netlink_dump_control *);
2048:	struct sock *__netlink_kernel_create(struct net *, int, struct module *, struct netlink_kernel_cfg *);
879:	bool __netlink_ns_capable(const struct netlink_skb_parms *, struct user_namespace *, int);
2188:	struct nlmsghdr *__nlmsg_put(struct sk_buff *, u32, u32, int, int, int);
2750:	int bpf_iter_netlink(struct bpf_iter_meta *, struct netlink_sock *);
154:	void do_trace_netlink_extack(const char *);
2487:	void netlink_ack(struct sk_buff *, struct nlmsghdr *, int, const struct netlink_ext_ack *);
192:	int netlink_add_tap(struct netlink_tap *);
1239:	int netlink_attachskb(struct sock *, struct sk_buff *, long *, struct sock *);
1510:	int netlink_broadcast(struct sock *, struct sk_buff *, u32, u32, gfp_t);
914:	bool netlink_capable(const struct sk_buff *, int);
2167:	int netlink_change_ngroups(struct sock *, unsigned int);
1298:	void netlink_detachskb(struct sock *, struct sk_buff *);
1188:	struct sock *netlink_getsockbyfilp(struct file *);
1384:	int netlink_has_listeners(struct sock *, unsigned int);
2123:	void netlink_kernel_release(struct sock *);
930:	bool netlink_net_capable(const struct sk_buff *, int);
898:	bool netlink_ns_capable(const struct sk_buff *, struct user_namespace *, int);
2548:	int netlink_rcv_skb(struct sk_buff *, int (*)(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *));
2814:	int netlink_register_notifier(struct notifier_block *);
237:	int netlink_remove_tap(struct netlink_tap *);
1290:	int netlink_sendskb(struct sock *, struct sk_buff *);
1600:	int netlink_set_err(struct sock *, u32, u32, int);
1403:	bool netlink_strict_get_check(struct sk_buff *);
433:	void netlink_table_grab(void);
458:	void netlink_table_ungrab(void);
1348:	int netlink_unicast(struct sock *, struct sk_buff *, u32, int);
2820:	int netlink_unregister_notifier(struct notifier_block *);
2602:	int nlmsg_notify(struct sock *, struct sk_buff *, u32, unsigned int, int, gfp_t);
316:	static void __netlink_deliver_tap(struct sk_buff *, struct netlink_tap_net *);
512:	static struct sock *__netlink_lookup(struct netlink_table *, u32, struct net *);
1279:	static int __netlink_sendskb(struct sock *, struct sk_buff *);
2653:	static void *__netlink_seq_next(struct seq_file *);
730:	static void deferred_put_nlk_sk(struct callback_head *);
2870:	static void netlink_add_usersock_entry(void);
936:	static int netlink_allowed(const struct socket *, unsigned int);
832:	static int netlink_autobind(struct socket *);
1001:	static int netlink_bind(struct socket *, struct sockaddr *, int);
494:	static int netlink_compare(struct rhashtable_compare_arg *, const void *);
1089:	static int netlink_connect(struct socket *, struct sockaddr *, int, int);
672:	static int netlink_create(struct net *, struct socket *, int, int);
2036:	static void netlink_data_ready(struct sock *);
2233:	static int netlink_dump(struct sock *);
1136:	static int netlink_getname(struct socket *, struct sockaddr *, int);
1740:	static int netlink_getsockopt(struct socket *, int, int, char *, int *);
2895:	static u32 netlink_hash(const void *, u32, u32);
572:	static int netlink_insert(struct sock *, u32);
1160:	static int netlink_ioctl(struct socket *, unsigned int, unsigned long);
466:	static void netlink_lock_table(void);
2863:	static void netlink_net_exit(struct net *);
2853:	static int netlink_net_init(struct net *);
2940:	static int netlink_proto_init(void);
954:	static int netlink_realloc_groups(struct sock *);
1949:	static int netlink_recvmsg(struct socket *, struct msghdr *, size_t, int);
750:	static int netlink_release(struct socket *);
1860:	static int netlink_sendmsg(struct socket *, struct msghdr *, size_t);
2700:	static void *netlink_seq_next(struct seq_file *, void *, loff_t *);
2764:	static int netlink_seq_show(struct seq_file *, void *);
2683:	static void *netlink_seq_start(struct seq_file *, loff_t *);
2780:	static void netlink_seq_stop(struct seq_file *, void *);
1639:	static int netlink_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
374:	static void netlink_skb_destructor(struct sk_buff *);
396:	static void netlink_sock_destruct(struct sock *);
419:	static void netlink_sock_destruct_work(struct work_struct *);
248:	static int netlink_tap_init_net(struct net *);
1304:	static struct sk_buff *netlink_trim(struct sk_buff *, gfp_t);
987:	static void netlink_undo_bind(int, unsigned long, struct sock *);
478:	static void netlink_unlock_table(void);
1623:	static void netlink_update_socket_mc(struct netlink_sock *, unsigned int, int);

File net/netlink/genetlink.c:
31:	void genl_lock(void);
1802:	void genl_notify(const struct genl_family *, struct sk_buff *, struct genl_info *, u32, gfp_t);
629:	int genl_register_family(struct genl_family *);
37:	void genl_unlock(void);
698:	int genl_unregister_family(const struct genl_family *);
1790:	int genlmsg_multicast_allns(const struct genl_family *, struct sk_buff *, u32, unsigned int, gfp_t);
733:	void *genlmsg_put(struct sk_buff *, u32, u32, const struct genl_family *, int, u8);
1210:	static int ctrl_dumpfamily(struct sk_buff *, struct netlink_callback *);
1561:	static int ctrl_dumppolicy(struct sk_buff *, struct netlink_callback *);
1617:	static int ctrl_dumppolicy_done(struct netlink_callback *);
1508:	static int ctrl_dumppolicy_put_op(struct sk_buff *, struct netlink_callback *, struct genl_split_ops *, struct genl_split_ops *);
1389:	static int ctrl_dumppolicy_start(struct netlink_callback *);
1086:	static int ctrl_fill_info(const struct genl_family *, u32, u32, u32, struct sk_buff *, u8);
1284:	static int ctrl_getfamily(struct sk_buff *, struct genl_info *);
1671:	static int genl_bind(struct net *, int);
1331:	static int genl_ctrl_event(int, const struct genl_family *, const struct genl_multicast_group *, int);
764:	static struct nlattr **genl_family_rcv_msg_attrs_parse(const struct genl_family *, struct nlmsghdr *, struct netlink_ext_ack *, const struct genl_split_ops *, int, enum genl_validate_flags);
287:	static int genl_get_cmd(u32, u8, const struct genl_family *, struct genl_split_ops *);
1733:	static int genl_init(void);
863:	static int genl_lock_done(struct netlink_callback *);
852:	static int genl_lock_dumpit(struct sk_buff *, struct netlink_callback *);
335:	static bool genl_op_iter_next(struct genl_op_iter *);
879:	static int genl_parallel_done(struct netlink_callback *);
1722:	static void genl_pernet_exit(struct net *);
1702:	static int genl_pernet_init(struct net *);
1073:	static void genl_rcv(struct sk_buff *);
1052:	static int genl_rcv_msg(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
807:	static int genl_start(struct netlink_callback *);

File net/netlink/policy.c:
126:	int netlink_policy_dump_add_policy(struct netlink_policy_dump_state **, const struct nla_policy *, unsigned int);
209:	int netlink_policy_dump_attr_size_estimate(const struct nla_policy *);
476:	void netlink_policy_dump_free(struct netlink_policy_dump_state *);
81:	int netlink_policy_dump_get_policy_idx(struct netlink_policy_dump_state *, const struct nla_policy *, unsigned int);
204:	bool netlink_policy_dump_loop(struct netlink_policy_dump_state *);
421:	int netlink_policy_dump_write(struct sk_buff *, struct netlink_policy_dump_state *);
407:	int netlink_policy_dump_write_attr(struct sk_buff *, const struct nla_policy *, int);
251:	static int __netlink_policy_dump_write_attr(struct netlink_policy_dump_state *, struct sk_buff *, const struct nla_policy *, int);

File net/packet/af_packet.c:
1516:	static void __fanout_link(struct sock *, struct packet_sock *);
428:	static int __packet_get_status(const struct packet_sock *, void *);
1273:	static int __packet_rcv_has_room(const struct packet_sock *, const struct sk_buff *);
402:	static void __packet_set_status(struct packet_sock *, void *, int);
338:	static void __register_prot_hook(struct sock *);
365:	static void __unregister_prot_hook(struct sock *, bool);
1681:	static int fanout_add(struct sock *, struct fanout_args *);
1392:	static unsigned int fanout_demux_rollover(struct packet_fanout *, struct sk_buff *, unsigned int, bool, unsigned int);
1629:	static int fanout_set_data(struct packet_sock *, sockptr_t, unsigned int);
4293:	static void free_pg_vec(struct pgv *, unsigned int, unsigned int);
1550:	static bool match_fanout_group(struct packet_type *, struct sock *);
247:	static struct sk_buff *nf_hook_direct_egress(struct sk_buff *);
3297:	static int packet_bind(struct socket *, struct sockaddr *, int);
3276:	static int packet_bind_spkt(struct socket *, struct sockaddr *, int);
3325:	static int packet_create(struct net *, struct socket *, int, int);
273:	static int packet_direct_xmit(struct sk_buff *);
3185:	static int packet_do_bind(struct sock *, const char *, int, __be16);
4725:	static void packet_exit(void);
3573:	static int packet_getname(struct socket *, struct sockaddr *, int);
3553:	static int packet_getname_spkt(struct socket *, struct sockaddr *, int);
4018:	static int packet_getsockopt(struct socket *, int, int, char *, int *);
1173:	static void packet_increment_rx_head(struct packet_sock *, struct packet_ring_buffer *);
4733:	static int packet_init(void);
4191:	static int packet_ioctl(struct socket *, unsigned int, unsigned long);
3650:	static int packet_mc_add(struct sock *, struct packet_mreq_max *);
3705:	static int packet_mc_drop(struct sock *, struct packet_mreq_max *);
4278:	static void packet_mm_close(struct vm_area_struct *);
4268:	static void packet_mm_open(struct vm_area_struct *);
4528:	static int packet_mmap(struct file *, struct socket *, struct vm_area_struct *);
4713:	static void packet_net_exit(struct net *);
4699:	static int packet_net_init(struct net *);
4140:	static int packet_notifier(struct notifier_block *, unsigned long, void *);
1926:	static void packet_parse_headers(struct sk_buff *, struct socket *);
4239:	static __poll_t packet_poll(struct file *, struct socket *, poll_table *);
2121:	static int packet_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
1459:	static int packet_rcv_fanout(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
1860:	static int packet_rcv_spkt(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);
3405:	static int packet_recvmsg(struct socket *, struct msghdr *, size_t, int);
3112:	static int packet_release(struct socket *);
3093:	static int packet_sendmsg(struct socket *, struct msghdr *, size_t);
1952:	static int packet_sendmsg_spkt(struct socket *, struct msghdr *, size_t);
4653:	static void *packet_seq_next(struct seq_file *, void *, loff_t *);
4665:	static int packet_seq_show(struct seq_file *, void *);
4644:	static void *packet_seq_start(struct seq_file *, loff_t *);
4659:	static void packet_seq_stop(struct seq_file *, void *);
4361:	static int packet_set_ring(struct sock *, union tpacket_req_u *, int, int);
3753:	static int packet_setsockopt(struct socket *, int, int, sockptr_t, unsigned int);
1327:	static void packet_sock_destruct(struct sock *);
924:	static void *prb_dispatch_next_block(struct tpacket_kbdq_core *, struct packet_sock *);
949:	static void prb_retire_current_block(struct tpacket_kbdq_core *, struct packet_sock *, unsigned int);
679:	static void prb_retire_rx_blk_timer_expired(struct timer_list *);
2079:	static unsigned int run_filter(struct sk_buff *, const struct sock *, unsigned int);
2515:	static void tpacket_destruct_skb(struct sk_buff *);
452:	static __u32 tpacket_get_timestamp(struct sk_buff *, struct timespec64 *, unsigned int);
2237:	static int tpacket_rcv(struct sk_buff *, struct net_device *, struct packet_type *, struct net_device *);

File net/qrtr/af_qrtr.c:
431:	int qrtr_endpoint_post(struct qrtr_endpoint *, const void *, size_t);
576:	int qrtr_endpoint_register(struct qrtr_endpoint *, unsigned int);
611:	void qrtr_endpoint_unregister(struct qrtr_endpoint *);
770:	static int __qrtr_bind(struct socket *, const struct sockaddr_qrtr *, int);
870:	static int qrtr_bcast_enqueue(struct qrtr_node *, struct sk_buff *, int, struct sockaddr_qrtr *, struct sockaddr_qrtr *);
818:	static int qrtr_bind(struct socket *, struct sockaddr *, int);
1078:	static int qrtr_connect(struct socket *, struct sockaddr *, int, int);
1252:	static int qrtr_create(struct net *, struct socket *, int, int);
1109:	static int qrtr_getname(struct socket *, struct sockaddr *, int);
1136:	static int qrtr_ioctl(struct socket *, unsigned int, unsigned long);
839:	static int qrtr_local_enqueue(struct qrtr_node *, struct sk_buff *, int, struct sockaddr_qrtr *, struct sockaddr_qrtr *);
409:	static void qrtr_node_assign(struct qrtr_node *, unsigned int);
338:	static int qrtr_node_enqueue(struct qrtr_node *, struct sk_buff *, int, struct sockaddr_qrtr *, struct sockaddr_qrtr *);
391:	static struct qrtr_node *qrtr_node_lookup(unsigned int);
207:	static void qrtr_node_release(struct qrtr_node *);
658:	static struct qrtr_sock *qrtr_port_lookup(int);
675:	static void qrtr_port_put(struct qrtr_sock *);
681:	static void qrtr_port_remove(struct qrtr_sock *);
1310:	static void qrtr_proto_fini(void);
1284:	static int qrtr_proto_init(void);
1022:	static int qrtr_recvmsg(struct socket *, struct msghdr *, size_t, int);
1196:	static int qrtr_release(struct socket *);
891:	static int qrtr_sendmsg(struct socket *, struct msghdr *, size_t);
219:	static void qrtr_tx_resume(struct qrtr_node *, struct sk_buff *);

File net/qrtr/mhi.c:
21:	static void qcom_mhi_qrtr_dl_callback(struct mhi_device *, struct mhi_result *);
132:	static void qcom_mhi_qrtr_driver_exit(void);
132:	static int qcom_mhi_qrtr_driver_init(void);
75:	static int qcom_mhi_qrtr_probe(struct mhi_device *, const struct mhi_device_id *);
106:	static void qcom_mhi_qrtr_remove(struct mhi_device *);
48:	static int qcom_mhi_qrtr_send(struct qrtr_endpoint *, struct sk_buff *);
37:	static void qcom_mhi_qrtr_ul_callback(struct mhi_device *, struct mhi_result *);

File net/qrtr/ns.c:
761:	int qrtr_ns_init(void);
815:	void qrtr_ns_remove(void);
756:	static void qrtr_ns_data_ready(struct sock *);
664:	static void qrtr_ns_worker(struct work_struct *);
276:	static int server_del(struct qrtr_node *, unsigned int);

File net/qrtr/tun.c:
167:	static void qrtr_tun_exit(void);
156:	static int qrtr_tun_init(void);
31:	static int qrtr_tun_open(struct inode *, struct file *);
114:	static __poll_t qrtr_tun_poll(struct file *, poll_table *);
59:	static ssize_t qrtr_tun_read_iter(struct kiocb *, struct iov_iter *);
127:	static int qrtr_tun_release(struct inode *, struct file *);
19:	static int qrtr_tun_send(struct qrtr_endpoint *, struct sk_buff *);
85:	static ssize_t qrtr_tun_write_iter(struct kiocb *, struct iov_iter *);

File net/rfkill/core.c:
963:	struct rfkill *rfkill_alloc(const char *, struct device *, const enum rfkill_type, const struct rfkill_ops *, void *);
937:	bool rfkill_blocked(struct rfkill *);
1140:	void rfkill_destroy(struct rfkill *);
442:	void rfkill_epo(void);
667:	enum rfkill_type rfkill_find_type(const char *);
523:	bool rfkill_get_global_sw_state(const enum rfkill_type);
145:	const char *rfkill_get_led_trigger_name(struct rfkill *);
606:	void rfkill_init_sw_state(struct rfkill *, bool);
511:	bool rfkill_is_epo_lock_active(void);
861:	void rfkill_pause_polling(struct rfkill *);
1046:	int rfkill_register(struct rfkill *);
492:	void rfkill_remove_epo_lock(void);
471:	void rfkill_restore_states(void);
873:	void rfkill_resume_polling(struct rfkill *);
529:	bool rfkill_set_hw_state_reason(struct rfkill *, bool, unsigned long);
151:	void rfkill_set_led_trigger_name(struct rfkill *, const char *);
620:	void rfkill_set_states(struct rfkill *, bool, bool);
579:	bool rfkill_set_sw_state(struct rfkill *, bool);
950:	bool rfkill_soft_blocked(struct rfkill *);
420:	void rfkill_switch_all(enum rfkill_type, bool);
1116:	void rfkill_unregister(struct rfkill *);
397:	static void __rfkill_switch_all(const enum rfkill_type, bool);
761:	static ssize_t hard_block_reasons_show(struct device *, struct device_attribute *, char *);
719:	static ssize_t hard_show(struct device *, struct device_attribute *, char *);
701:	static ssize_t index_show(struct device *, struct device_attribute *, char *);
683:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
710:	static ssize_t persistent_show(struct device *, struct device_attribute *, char *);
835:	static int rfkill_dev_uevent(const struct device *, struct kobj_uevent_env *);
1432:	static void rfkill_exit(void);
1331:	static long rfkill_fop_ioctl(struct file *, unsigned int, unsigned long);
1147:	static int rfkill_fop_open(struct inode *, struct file *);
1195:	static __poll_t rfkill_fop_poll(struct file *, poll_table *);
1210:	static ssize_t rfkill_fop_read(struct file *, char *, size_t, loff_t *);
1307:	static int rfkill_fop_release(struct inode *, struct file *);
1253:	static ssize_t rfkill_fop_write(struct file *, const char *, size_t, loff_t *);
223:	static void rfkill_global_led_trigger_unregister(void);
176:	static void rfkill_global_led_trigger_worker(struct work_struct *);
1393:	static int rfkill_init(void);
134:	static int rfkill_led_trigger_activate(struct led_classdev *);
1004:	static void rfkill_poll(struct work_struct *);
828:	static void rfkill_release(struct device *);
275:	static void rfkill_send_events(struct rfkill *, enum rfkill_operation);
312:	static void rfkill_set_block(struct rfkill *, bool);
1033:	static void rfkill_sync_work(struct work_struct *);
1022:	static void rfkill_uevent_work(struct work_struct *);
728:	static ssize_t soft_show(struct device *, struct device_attribute *, char *);
736:	static ssize_t soft_store(struct device *, struct device_attribute *, const char *, size_t);
781:	static ssize_t state_show(struct device *, struct device_attribute *, char *);
789:	static ssize_t state_store(struct device *, struct device_attribute *, const char *, size_t);
692:	static ssize_t type_show(struct device *, struct device_attribute *, char *);

File net/rfkill/input.c:
339:	void rfkill_handler_exit(void);
317:	int rfkill_handler_init(void);
218:	static int rfkill_connect(struct input_handler *, struct input_dev *, const struct input_device_id *);
267:	static void rfkill_disconnect(struct input_handle *);
193:	static void rfkill_event(struct input_handle *, unsigned int, unsigned int, int);
94:	static void rfkill_op_handler(struct work_struct *);
153:	static void rfkill_schedule_global_op(enum rfkill_sched_op);
250:	static void rfkill_start(struct input_handle *);

File net/sched/act_api.c:
1302:	struct tc_action_ops *tc_action_load_ops(struct nlattr *, bool, bool, struct netlink_ext_ack *);
70:	int tcf_action_check_ctrlact(int, struct tcf_proto *, struct tcf_chain **, struct netlink_ext_ack *);
1533:	int tcf_action_copy_stats(struct sk_buff *, struct tc_action *, int);
1120:	int tcf_action_destroy(struct tc_action **, int);
1212:	int tcf_action_dump(struct sk_buff *, struct tc_action **, int, int, bool);
1168:	int tcf_action_dump_1(struct sk_buff *, struct tc_action *, int, int);
1162:	int tcf_action_dump_old(struct sk_buff *, struct tc_action *, int, int);
1058:	int tcf_action_exec(struct sk_buff *, struct tc_action **, int, struct tcf_result *);
1432:	int tcf_action_init(struct net *, struct tcf_proto *, struct nlattr *, struct nlattr *, struct tc_action **, int *, size_t *, u32, u32, struct netlink_ext_ack *);
1363:	struct tc_action *tcf_action_init_1(struct net *, struct tcf_proto *, struct nlattr *, struct nlattr *, struct tc_action_ops *, int *, u32, struct netlink_ext_ack *);
1818:	int tcf_action_reoffload_cb(flow_indr_block_bind_cb_t *, void *, bool);
106:	struct tcf_chain *tcf_action_set_ctrlact(struct tc_action *, int, struct tcf_chain *);
305:	int tcf_action_update_hw_stats(struct tc_action *);
1512:	void tcf_action_update_stats(struct tc_action *, u64, u64, u64, bool);
33:	int tcf_dev_queue_xmit(struct sk_buff *, int (*)(struct sk_buff *));
640:	int tcf_generic_walker(struct tc_action_net *, struct sk_buff *, struct netlink_callback *, int, const struct tc_action_ops *, struct netlink_ext_ack *);
826:	int tcf_idr_check_alloc(struct tc_action_net *, u32 *, struct tc_action **, int);
809:	void tcf_idr_cleanup(struct tc_action_net *, u32);
738:	int tcf_idr_create(struct tc_action_net *, u32, struct nlattr *, struct tc_action **, const struct tc_action_ops *, int, bool, u32);
796:	int tcf_idr_create_from_flags(struct tc_action_net *, u32, struct nlattr *, struct tc_action **, const struct tc_action_ops *, int, u32);
1282:	void tcf_idr_insert_many(struct tc_action **);
427:	int tcf_idr_release(struct tc_action *, bool);
659:	int tcf_idr_search(struct tc_action_net *, struct tc_action **, u32);
873:	void tcf_idrinfo_destroy(const struct tc_action_ops *, struct tcf_idrinfo *);
949:	int tcf_register_action(struct tc_action_ops *, struct pernet_operations *);
994:	int tcf_unregister_action(struct tc_action_ops *, struct pernet_operations *);
380:	static int __tcf_action_put(struct tc_action *, bool);
2175:	static int tc_action_init(void);
2013:	static int tc_ctl_action(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2087:	static int tc_dump_action(struct sk_buff *, struct netlink_callback *);
1909:	static int tca_action_gd(struct net *, struct nlattr *, struct nlmsghdr *, u32, int, struct netlink_ext_ack *);
1583:	static int tca_get_fill(struct sk_buff *, struct tc_action **, u32, u32, u16, int, int, int);
370:	static void tcf_action_cleanup(struct tc_action *);
485:	static int tcf_action_dump_terse(struct sk_buff *, struct tc_action *, bool);
250:	static int tcf_action_offload_add_ex(struct tc_action *, struct netlink_ext_ack *, flow_indr_block_bind_cb_t *, void *);
336:	static int tcf_action_offload_del_ex(struct tc_action *, flow_indr_block_bind_cb_t *, void *);
52:	static void tcf_free_cookie_rcu(struct callback_head *);

File net/sched/act_gact.c:
334:	static void gact_cleanup_module(void);
307:	static void gact_exit_net(struct list_head *);
323:	static int gact_init_module(void);
300:	static int gact_init_net(struct net *);
149:	static int tcf_gact_act(struct sk_buff *, const struct tc_action *, struct tcf_result *);
185:	static int tcf_gact_dump(struct sk_buff *, struct tc_action *, int, int);
226:	static size_t tcf_gact_get_fill_size(const struct tc_action *);
53:	static int tcf_gact_init(struct net *, struct nlattr *, struct nlattr *, struct tc_action **, struct tcf_proto *, u32, struct netlink_ext_ack *);
239:	static int tcf_gact_offload_act_setup(struct tc_action *, void *, u32 *, bool, struct netlink_ext_ack *);
173:	static void tcf_gact_stats_update(struct tc_action *, u64, u64, u64, u64, bool);

File net/sched/act_gate.c:
470:	static int dumping_entry(struct sk_buff *, struct tcfg_gate_entry *);
671:	static void gate_cleanup_module(void);
654:	static void gate_exit_net(struct list_head *);
35:	static void gate_get_start_time(struct tcf_gate *, ktime_t *);
666:	static int gate_init_module(void);
647:	static int gate_init_net(struct net *);
276:	static void gate_setup_timer(struct tcf_gate *, u64, enum tk_offsets, s32, bool);
68:	static enum hrtimer_restart gate_timer_func(struct hrtimer *);
231:	static int parse_gate_list(struct nlattr *, struct tcf_gate_params *, struct netlink_ext_ack *);
117:	static int tcf_gate_act(struct sk_buff *, const struct tc_action *, struct tcf_result *);
460:	static void tcf_gate_cleanup(struct tc_action *);
501:	static int tcf_gate_dump(struct sk_buff *, struct tc_action *, int, int);
584:	static void tcf_gate_entry_destructor(void *);
579:	static size_t tcf_gate_get_fill_size(const struct tc_action *);
297:	static int tcf_gate_init(struct net *, struct nlattr *, struct nlattr *, struct tc_action **, struct tcf_proto *, u32, struct netlink_ext_ack *);
605:	static int tcf_gate_offload_act_setup(struct tc_action *, void *, u32 *, bool, struct netlink_ext_ack *);
569:	static void tcf_gate_stats_update(struct tc_action *, u64, u64, u64, u64, bool);

File net/sched/act_mirred.c:
539:	static void mirred_cleanup_module(void);
376:	static int mirred_device_event(struct notifier_block *, unsigned long, void *);
509:	static void mirred_exit_net(struct list_head *);
525:	static int mirred_init_module(void);
502:	static int mirred_init_net(struct net *);
221:	static int tcf_mirred_act(struct sk_buff *, const struct tc_action *, struct tcf_result *);
406:	static void tcf_mirred_dev_put(void *);
340:	static int tcf_mirred_dump(struct sk_buff *, struct tc_action *, int, int);
414:	static struct net_device *tcf_mirred_get_dev(const struct tc_action *, tc_action_priv_destructor *);
431:	static size_t tcf_mirred_get_fill_size(const struct tc_action *);
92:	static int tcf_mirred_init(struct net *, struct nlattr *, struct nlattr *, struct tc_action **, struct tcf_proto *, u32, struct netlink_ext_ack *);
445:	static int tcf_mirred_offload_act_setup(struct tc_action *, void *, u32 *, bool, struct netlink_ext_ack *);
72:	static void tcf_mirred_release(struct tc_action *);
330:	static void tcf_stats_update(struct tc_action *, u64, u64, u64, u64, bool);

File net/sched/cls_api.c:
178:	int register_tcf_proto_ops(struct tcf_proto_ops *);
3501:	void tc_cleanup_offload_action(struct flow_action *);
3532:	int tc_setup_action(struct flow_action *, struct tc_action **, struct netlink_ext_ack *);
3320:	int tc_setup_cb_add(struct tcf_block *, struct tcf_proto *, enum tc_setup_type, void *, bool, u32 *, unsigned int *, bool);
3285:	int tc_setup_cb_call(struct tcf_block *, enum tc_setup_type, void *, bool, bool);
3424:	int tc_setup_cb_destroy(struct tcf_block *, struct tcf_proto *, enum tc_setup_type, void *, bool, u32 *, unsigned int *, bool);
3458:	int tc_setup_cb_reoffload(struct tcf_block *, struct tcf_proto *, bool, flow_setup_cb_t *, enum tc_setup_type, void *, void *, u32 *, unsigned int *);
3370:	int tc_setup_cb_replace(struct tcf_block *, struct tcf_proto *, enum tc_setup_type, void *, bool, u32 *, unsigned int *, u32 *, unsigned int *, bool);
3581:	int tc_setup_offload_action(struct flow_action *, const struct tcf_exts *, struct netlink_ext_ack *);
63:	void tc_skb_ext_tc_disable(void);
57:	void tc_skb_ext_tc_enable(void);
1378:	int tcf_block_get(struct tcf_block **, struct tcf_proto **, struct Qdisc *, struct netlink_ext_ack *);
1320:	int tcf_block_get_ext(struct tcf_block **, struct Qdisc *, struct tcf_block_ext_info *, struct netlink_ext_ack *);
1278:	void tcf_block_netif_keep_dst(struct tcf_block *);
1407:	void tcf_block_put(struct tcf_block *);
1395:	void tcf_block_put_ext(struct tcf_block *, struct Qdisc *, struct tcf_block_ext_info *);
539:	struct tcf_chain *tcf_chain_get_by_act(struct tcf_block *, u32);
604:	void tcf_chain_put_by_act(struct tcf_chain *);
1600:	int tcf_classify(struct sk_buff *, const struct tcf_block *, const struct tcf_proto *, struct tcf_result *, bool);
3119:	void tcf_exts_change(struct tcf_exts *, struct tcf_exts *);
3043:	void tcf_exts_destroy(struct tcf_exts *);
3140:	int tcf_exts_dump(struct sk_buff *, struct tcf_exts *);
3207:	int tcf_exts_dump_stats(struct sk_buff *, struct tcf_exts *);
3596:	unsigned int tcf_exts_num_actions(struct tcf_exts *);
3181:	int tcf_exts_terse_dump(struct sk_buff *, struct tcf_exts *);
3110:	int tcf_exts_validate(struct net *, struct tcf_proto *, struct nlattr **, struct nlattr *, struct tcf_exts *, u32, struct netlink_ext_ack *);
3055:	int tcf_exts_validate_ex(struct net *, struct tcf_proto *, struct nlattr **, struct nlattr *, struct tcf_exts *, u32, u32, struct netlink_ext_ack *);
961:	struct tcf_chain *tcf_get_next_chain(struct tcf_block *, struct tcf_chain *);
1014:	struct tcf_proto *tcf_get_next_proto(struct tcf_chain *, struct tcf_proto *);
3650:	void tcf_qevent_destroy(struct tcf_qevent *, struct Qdisc *);
3713:	int tcf_qevent_dump(struct sk_buff *, int, struct tcf_qevent *);
3680:	struct sk_buff *tcf_qevent_handle(struct tcf_qevent *, struct Qdisc *, struct sk_buff *, struct sk_buff **, int *);
3626:	int tcf_qevent_init(struct tcf_qevent *, struct Qdisc *, enum flow_block_binder_type, struct nlattr *, struct netlink_ext_ack *);
3657:	int tcf_qevent_validate_change(struct tcf_qevent *, struct nlattr *, struct netlink_ext_ack *);
223:	bool tcf_queue_work(struct rcu_work *, work_func_t);
198:	void unregister_tcf_proto_ops(struct tcf_proto_ops *);
1139:	static struct tcf_block *__tcf_block_find(struct net *, struct Qdisc *, unsigned long, int, u32, struct netlink_ext_ack *);
1176:	static void __tcf_block_put(struct tcf_block *, struct Qdisc *, struct tcf_block_ext_info *, bool);
493:	static struct tcf_chain *__tcf_chain_get(struct tcf_block *, u32, bool, bool);
552:	static void __tcf_chain_put(struct tcf_chain *, bool, bool);
973:	static struct tcf_proto *__tcf_get_next_proto(struct tcf_chain *, struct tcf_proto *);
1044:	static int __tcf_qdisc_find(struct net *, struct Qdisc **, u32 *, int, bool, struct netlink_ext_ack *);
663:	static void tc_block_indr_cleanup(struct flow_block_cb *);
2666:	static int tc_chain_fill_node(const struct tcf_proto_ops *, void *, u32, struct net *, struct sk_buff *, struct tcf_block *, u32, u32, u16, int);
2818:	static int tc_ctl_chain(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2196:	static int tc_del_tfilter(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
2950:	static int tc_dump_chain(struct sk_buff *, struct netlink_callback *);
2562:	static int tc_dump_tfilter(struct sk_buff *, struct netlink_callback *);
3745:	static int tc_filter_init(void);
2353:	static int tc_get_tfilter(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1962:	static int tc_new_tfilter(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
689:	static int tcf_block_offload_cmd(struct tcf_block *, struct net_device *, struct Qdisc *, struct tcf_block_ext_info *, enum flow_block_command, struct netlink_ext_ack *);
1419:	static int tcf_block_playback_offloads(struct tcf_block *, flow_setup_cb_t *, void *, bool, bool, struct netlink_ext_ack *);
915:	static struct tcf_block *tcf_block_refcnt_get(struct net *, u32);
1521:	static int tcf_block_setup(struct tcf_block *, struct flow_block_offload *);
824:	static void tcf_chain0_head_change_cb_del(struct tcf_block *, struct tcf_block_ext_info *);
615:	static void tcf_chain_flush(struct tcf_chain *, bool);
1371:	static void tcf_chain_head_change_dflt(struct tcf_proto *, void *);
1742:	static void tcf_chain_tp_delete_empty(struct tcf_chain *, struct tcf_proto *, bool, struct netlink_ext_ack *);
1783:	static struct tcf_proto *tcf_chain_tp_find(struct tcf_chain *, struct tcf_chain_info *, u32, u32, bool);
1708:	static struct tcf_proto *tcf_chain_tp_insert_unique(struct tcf_chain *, struct tcf_proto *, u32, u32, bool);
1686:	static void tcf_chain_tp_remove(struct tcf_chain *, struct tcf_chain_info *, struct tcf_proto *);
1816:	static int tcf_fill_node(struct net *, struct sk_buff *, struct tcf_proto *, struct tcf_block *, struct Qdisc *, u32, void *, u32, u32, u16, int, bool, bool);
3731:	static void tcf_net_exit(struct net *);
3722:	static int tcf_net_init(struct net *);
2485:	static int tcf_node_dump(struct tcf_proto *, void *, struct tcf_walker *);
270:	static struct tcf_proto *tcf_proto_create(const char *, u32, u32, struct tcf_chain *, bool, struct netlink_ext_ack *);
324:	static void tcf_proto_put(struct tcf_proto *, bool, struct netlink_ext_ack *);
76:	static void tcf_proto_signal_destroying(struct tcf_chain *, struct tcf_proto *);
1899:	static int tfilter_del_notify(struct net *, struct sk_buff *, struct nlmsghdr *, struct tcf_proto *, struct tcf_block *, struct Qdisc *, u32, void *, bool, bool *, bool, struct netlink_ext_ack *);
1870:	static int tfilter_notify(struct net *, struct sk_buff *, struct nlmsghdr *, struct tcf_proto *, struct tcf_block *, struct Qdisc *, u32, void *, int, bool, bool);
1938:	static void tfilter_notify_chain(struct net *, struct sk_buff *, struct tcf_block *, struct Qdisc *, u32, struct nlmsghdr *, struct tcf_chain *, int);

File net/sched/cls_basic.c:
89:	static void __basic_delete_filter(struct basic_filter *);
261:	static void basic_bind_class(void *, u32, unsigned long, void *, unsigned long);
172:	static int basic_change(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long, u32, struct nlattr **, void **, u32, struct netlink_ext_ack *);
40:	static int basic_classify(struct sk_buff *, const struct tcf_proto *, struct tcf_result *);
127:	static int basic_delete(struct tcf_proto *, void *, bool *, bool, struct netlink_ext_ack *);
98:	static void basic_delete_filter_work(struct work_struct *);
108:	static void basic_destroy(struct tcf_proto *, bool, struct netlink_ext_ack *);
269:	static int basic_dump(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool);
62:	static void *basic_get(struct tcf_proto *, u32);
76:	static int basic_init(struct tcf_proto *);
249:	static void basic_walk(struct tcf_proto *, struct tcf_walker *, bool);
337:	static void exit_basic(void);
332:	static int init_basic(void);

File net/sched/cls_flower.c:
537:	static int __fl_delete(struct tcf_proto *, struct cls_fl_filter *, bool *, bool, struct netlink_ext_ack *);
255:	static struct cls_fl_filter *__fl_lookup(struct fl_flow_mask *, struct fl_flow_key *);
513:	static void __fl_put(struct cls_fl_filter *);
3453:	static void cls_fl_exit(void);
3448:	static int cls_fl_init(void);
3405:	static void fl_bind_class(void *, u32, unsigned long, void *, unsigned long);
2145:	static int fl_change(struct net *, struct sk_buff *, struct tcf_proto *, unsigned long, u32, struct nlattr **, void **, u32, struct netlink_ext_ack *);
2034:	static int fl_check_assign_mask(struct cls_fl_head *, struct cls_fl_filter *, struct cls_fl_filter *, struct fl_flow_mask *);
309:	static int fl_classify(struct sk_buff *, const struct tcf_proto *, struct tcf_result *);
2339:	static int fl_delete(struct tcf_proto *, void *, bool *, bool, struct netlink_ext_ack *);
3413:	static bool fl_delete_empty(struct tcf_proto *);
578:	static void fl_destroy(struct tcf_proto *, bool, struct netlink_ext_ack *);
423:	static void fl_destroy_filter_work(struct work_struct *);
567:	static void fl_destroy_sleepable(struct work_struct *);
3280:	static int fl_dump(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool);
3050:	static int fl_dump_key(struct sk_buff *, struct net *, struct fl_flow_key *, struct fl_flow_key *);
2958:	static int fl_dump_key_ct(struct sk_buff *, struct flow_dissector_key_ct *, struct flow_dissector_key_ct *);
3037:	static int fl_dump_key_enc_opt(struct sk_buff *, struct flow_dissector_key_enc_opts *, struct flow_dissector_key_enc_opts *);
2813:	static int fl_dump_key_flags(struct sk_buff *, u32, u32);
2762:	static int fl_dump_key_ip(struct sk_buff *, bool, struct flow_dissector_key_ip *, struct flow_dissector_key_ip *);
2992:	static int fl_dump_key_options(struct sk_buff *, int, struct flow_dissector_key_enc_opts *);
2606:	static int fl_dump_key_port_range(struct sk_buff *, struct fl_flow_key *, struct fl_flow_key *);
2587:	static int fl_dump_key_val(struct sk_buff *, void *, int, void *, int, int);
2778:	static int fl_dump_key_vlan(struct sk_buff *, int, int, struct flow_dissector_key_vlan *, struct flow_dissector_key_vlan *);
606:	static void *fl_get(struct tcf_proto *, u32);
2123:	static int fl_ht_insert_unique(struct cls_fl_filter *, struct cls_fl_filter *, bool *);
2471:	static void fl_hw_add(struct tcf_proto *, void *);
2483:	static void fl_hw_del(struct tcf_proto *, void *);
431:	static void fl_hw_destroy_filter(struct tcf_proto *, struct cls_fl_filter *, bool, struct netlink_ext_ack *);
446:	static int fl_hw_replace_filter(struct tcf_proto *, struct cls_fl_filter *, bool, struct netlink_ext_ack *);
491:	static void fl_hw_update_stats(struct tcf_proto *, struct cls_fl_filter *, bool);
347:	static int fl_init(struct tcf_proto *);
1924:	static void fl_init_dissector(struct flow_dissector *, struct fl_flow_key *);
374:	static void fl_mask_free_work(struct work_struct *);
283:	static struct cls_fl_filter *fl_mask_lookup(struct fl_flow_mask *, struct fl_flow_key *);
390:	static bool fl_mask_put(struct cls_fl_head *, struct fl_flow_mask *);
599:	static void fl_put(struct tcf_proto *, void *);
2409:	static int fl_reoffload(struct tcf_proto *, bool, flow_setup_cb_t *, void *, struct netlink_ext_ack *);
1262:	static int fl_set_erspan_opt(const struct nlattr *, struct fl_flow_key *, int, int, struct netlink_ext_ack *);
1140:	static int fl_set_geneve_opt(const struct nlattr *, struct fl_flow_key *, int, int, struct netlink_ext_ack *);
1327:	static int fl_set_gtp_opt(const struct nlattr *, struct fl_flow_key *, int, int, struct netlink_ext_ack *);
1652:	static int fl_set_key(struct net *, struct nlattr **, struct fl_flow_key *, struct fl_flow_key *, struct netlink_ext_ack *);
903:	static int fl_set_key_mpls_opts(const struct nlattr *, struct flow_dissector_key_mpls *, struct flow_dissector_key_mpls *, struct netlink_ext_ack *);
1225:	static int fl_set_vxlan_opt(const struct nlattr *, struct fl_flow_key *, int, int, struct netlink_ext_ack *);
3338:	static int fl_terse_dump(struct net *, struct tcf_proto *, void *, struct sk_buff *, struct tcmsg *, bool);
2534:	static void *fl_tmplt_create(struct net *, struct tcf_chain *, struct nlattr **, struct netlink_ext_ack *);
2579:	static void fl_tmplt_destroy(void *);
3380:	static int fl_tmplt_dump(struct sk_buff *, struct net *, void *);
382:	static void fl_uninit_mask_free_work(struct work_struct *);
2354:	static void fl_walk(struct tcf_proto *, struct tcf_walker *, bool);

File net/sched/sch_api.c:
568:	void __qdisc_calculate_pkt_len(struct sk_buff *, const struct qdisc_size_table *);
727:	void qdisc_class_hash_destroy(struct Qdisc_class_hash *);
677:	void qdisc_class_hash_grow(struct Qdisc *, struct Qdisc_class_hash *);
713:	int qdisc_class_hash_init(struct Qdisc_class_hash *);
733:	void qdisc_class_hash_insert(struct Qdisc_class_hash *, struct Qdisc_class_common *);
745:	void qdisc_class_hash_remove(struct Qdisc_class_hash *, struct Qdisc_class_common *);
196:	void qdisc_get_default(char *, size_t);
411:	struct qdisc_rate_table *qdisc_get_rtab(struct tc_ratespec *, struct nlattr *, struct netlink_ext_ack *);
280:	void qdisc_hash_add(struct Qdisc *, bool);
291:	void qdisc_hash_del(struct Qdisc *);
300:	struct Qdisc *qdisc_lookup(struct net_device *, u32);
318:	struct Qdisc *qdisc_lookup_rcu(struct net_device *, u32);
822:	int qdisc_offload_dump_helper(struct Qdisc *, enum tc_setup_type, void *);
843:	void qdisc_offload_graft_helper(struct net_device *, struct Qdisc *, struct Qdisc *, struct Qdisc *, enum tc_setup_type, void *, struct netlink_ext_ack *);
872:	void qdisc_offload_query_caps(struct net_device *, enum tc_setup_type, void *, size_t);
448:	void qdisc_put_rtab(struct qdisc_rate_table *);
539:	void qdisc_put_stab(struct qdisc_size_table *);
219:	int qdisc_set_default(const char *);
773:	void qdisc_tree_reduce_backlog(struct Qdisc *, int, int);
597:	void qdisc_warn_nonwc(const char *, struct Qdisc *);
657:	void qdisc_watchdog_cancel(struct qdisc_watchdog *);
628:	void qdisc_watchdog_init(struct qdisc_watchdog *, struct Qdisc *);
619:	void qdisc_watchdog_init_clockid(struct qdisc_watchdog *, struct Qdisc *, clockid_t);
634:	void qdisc_watchdog_schedule_range_ns(struct qdisc_watchdog *, u64, u64);
131:	int register_qdisc(struct Qdisc_ops *);
175:	void unregister_qdisc(struct Qdisc_ops *);
387:	static __u8 __detect_linklayer(struct tc_ratespec *, __u32 *);
1394:	static int check_loop(struct Qdisc *, struct Qdisc *, int);
1410:	static int check_loop_fn(struct Qdisc *, unsigned long, struct qdisc_walker *);
2284:	static int pktsched_init(void);
2262:	static void psched_net_exit(struct net *);
2251:	static int psched_net_init(struct net *);
2241:	static int psched_show(struct seq_file *, void *);
2136:	static int qdisc_class_dump(struct Qdisc *, unsigned long, struct qdisc_walker *);
1189:	static struct Qdisc *qdisc_create(struct net_device *, struct netdev_queue *, u32, u32, struct nlattr **, int *, struct netlink_ext_ack *);
474:	static struct qdisc_size_table *qdisc_get_stab(struct nlattr *, struct netlink_ext_ack *);
1056:	static int qdisc_graft(struct net_device *, struct Qdisc *, struct sk_buff *, struct nlmsghdr *, u32, struct Qdisc *, struct Qdisc *, struct netlink_ext_ack *);
992:	static int qdisc_notify(struct net *, struct sk_buff *, struct nlmsghdr *, u32, struct Qdisc *, struct Qdisc *);
607:	static enum hrtimer_restart qdisc_watchdog(struct hrtimer *);
1942:	static int tc_bind_class_walker(struct Qdisc *, unsigned long, struct qdisc_walker *);
1997:	static int tc_ctl_tclass(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1753:	static int tc_dump_qdisc(struct sk_buff *, struct netlink_callback *);
1699:	static int tc_dump_qdisc_root(struct Qdisc *, struct sk_buff *, struct netlink_callback *, int *, int, bool, bool);
2206:	static int tc_dump_tclass(struct sk_buff *, struct netlink_callback *);
2175:	static int tc_dump_tclass_root(struct Qdisc *, struct sk_buff *, struct tcmsg *, struct netlink_callback *, int *, int, bool);
904:	static int tc_fill_qdisc(struct sk_buff *, struct Qdisc *, u32, u32, u32, u16, int);
1812:	static int tc_fill_tclass(struct sk_buff *, struct Qdisc *, unsigned long, u32, u32, u16, int);
1440:	static int tc_get_qdisc(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1521:	static int tc_modify_qdisc(struct sk_buff *, struct nlmsghdr *, struct netlink_ext_ack *);
1921:	static int tcf_node_bind(struct tcf_proto *, void *, struct tcf_walker *);
1878:	static int tclass_del_notify(struct net *, const struct Qdisc_class_ops *, struct sk_buff *, struct nlmsghdr *, struct Qdisc *, unsigned long, struct netlink_ext_ack *);
1858:	static int tclass_notify(struct net *, struct sk_buff *, struct nlmsghdr *, struct Qdisc *, unsigned long, int);

File net/sched/sch_blackhole.c:
23:	static struct sk_buff *blackhole_dequeue(struct Qdisc *);
16:	static int blackhole_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
37:	static int blackhole_init(void);

File net/sched/sch_cbs.c:
361:	static int cbs_change(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
239:	static struct sk_buff *cbs_dequeue(struct Qdisc *);
231:	static struct sk_buff *cbs_dequeue_offload(struct Qdisc *);
176:	static struct sk_buff *cbs_dequeue_soft(struct Qdisc *);
433:	static void cbs_destroy(struct Qdisc *);
332:	static int cbs_dev_notifier(struct notifier_block *, unsigned long, void *);
452:	static int cbs_dump(struct Qdisc *, struct sk_buff *);
478:	static int cbs_dump_class(struct Qdisc *, unsigned long, struct sk_buff *, struct tcmsg *);
131:	static int cbs_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
105:	static int cbs_enqueue_offload(struct sk_buff *, struct Qdisc *, struct sk_buff **);
114:	static int cbs_enqueue_soft(struct sk_buff *, struct Qdisc *, struct sk_buff **);
515:	static unsigned long cbs_find(struct Qdisc *, u32);
492:	static int cbs_graft(struct Qdisc *, unsigned long, struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *);
401:	static int cbs_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
508:	static struct Qdisc *cbs_leaf(struct Qdisc *, unsigned long);
569:	static void cbs_module_exit(void);
554:	static int cbs_module_init(void);
520:	static void cbs_walk(struct Qdisc *, struct qdisc_walker *);

File net/sched/sch_etf.c:
253:	static struct sk_buff *etf_dequeue_timesortedlist(struct Qdisc *);
448:	static void etf_destroy(struct Qdisc *);
460:	static int etf_dump(struct Qdisc *, struct sk_buff *);
162:	static int etf_enqueue_timesortedlist(struct sk_buff *, struct Qdisc *, struct sk_buff **);
343:	static int etf_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
509:	static void etf_module_exit(void);
504:	static int etf_module_init(void);
108:	static struct sk_buff *etf_peek_timesortedlist(struct Qdisc *);
433:	static void etf_reset(struct Qdisc *);
231:	static void timesortedlist_remove(struct Qdisc *, struct sk_buff *);

File net/sched/sch_fifo.c:
252:	struct Qdisc *fifo_create_dflt(struct Qdisc *, struct Qdisc_ops *, unsigned int, struct netlink_ext_ack *);
227:	int fifo_set_limit(struct Qdisc *, unsigned int);
19:	static int bfifo_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
150:	static void fifo_destroy(struct Qdisc *);
167:	static int fifo_dump(struct Qdisc *, struct sk_buff *);
178:	static int fifo_hd_dump(struct Qdisc *, struct sk_buff *);
144:	static int fifo_hd_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
131:	static int fifo_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
28:	static int pfifo_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
37:	static int pfifo_tail_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);

File net/sched/sch_frag.c:
140:	int sch_frag_xmit_hook(struct sk_buff *, int (*)(struct sk_buff *));
74:	static unsigned int sch_frag_dst_get_mtu(const struct dst_entry *);
23:	static int sch_frag_xmit(struct net *, struct sock *, struct sk_buff *);

File net/sched/sch_generic.c:
543:	void __netdev_watchdog_up(struct net_device *);
410:	void __qdisc_run(struct Qdisc *);
1218:	void dev_activate(struct net_device *);
1369:	void dev_deactivate(struct net_device *);
1329:	void dev_deactivate_many(struct list_head *);
1103:	struct Qdisc *dev_graft_qdisc(struct netdev_queue *, struct Qdisc *);
1455:	void dev_init_scheduler(struct net_device *);
1390:	void dev_qdisc_change_real_num_tx(struct net_device *, unsigned int);
1423:	int dev_qdisc_change_tx_queue_len(struct net_device *);
1465:	void dev_shutdown(struct net_device *);
428:	unsigned long dev_trans_start(struct net_device *);
1577:	void mini_qdisc_pair_block_init(struct mini_Qdisc_pair *, struct tcf_block *);
1585:	void mini_qdisc_pair_init(struct mini_Qdisc_pair *, struct Qdisc *, struct mini_Qdisc **);
1538:	void mini_qdisc_pair_swap(struct mini_Qdisc_pair *, struct tcf_proto *);
1399:	void mq_change_real_num_tx(struct Qdisc *, unsigned int);
613:	void netif_carrier_event(struct net_device *);
594:	void netif_carrier_off(struct net_device *);
575:	void netif_carrier_on(struct net_device *);
465:	void netif_tx_lock(struct net_device *);
488:	void netif_tx_unlock(struct net_device *);
1531:	void psched_ppscfg_precompute(struct psched_pktrate *, u64);
1518:	void psched_ratecfg_precompute(struct psched_ratecfg *, const struct tc_ratespec *, u64);
922:	struct Qdisc *qdisc_alloc(struct netdev_queue *, const struct Qdisc_ops *, struct netlink_ext_ack *);
984:	struct Qdisc *qdisc_create_dflt(struct netdev_queue *, const struct Qdisc_ops *, unsigned int, struct netlink_ext_ack *);
1032:	void qdisc_free(struct Qdisc *);
1073:	void qdisc_put(struct Qdisc *);
1091:	void qdisc_put_unlocked(struct Qdisc *);
1015:	void qdisc_reset(struct Qdisc *);
314:	bool sch_direct_xmit(struct sk_buff *, struct Qdisc *, struct net_device *, struct netdev_queue *, spinlock_t *, bool);
1268:	static void dev_reset_queue(struct net_device *, struct netdev_queue *, void *);
495:	static void dev_watchdog(struct timer_list *);
444:	static void netif_freeze_queues(struct net_device *);
472:	static void netif_unfreeze_queues(struct net_device *);
635:	static struct sk_buff *noop_dequeue(struct Qdisc *);
628:	static int noop_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
677:	static int noqueue_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
887:	static int pfifo_fast_change_tx_queue_len(struct Qdisc *, unsigned int);
743:	static struct sk_buff *pfifo_fast_dequeue(struct Qdisc *);
867:	static void pfifo_fast_destroy(struct Qdisc *);
829:	static int pfifo_fast_dump(struct Qdisc *, struct sk_buff *);
721:	static int pfifo_fast_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
842:	static int pfifo_fast_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
784:	static struct sk_buff *pfifo_fast_peek(struct Qdisc *);
799:	static void pfifo_fast_reset(struct Qdisc *);
1049:	static void qdisc_destroy(struct Qdisc *);
1042:	static void qdisc_free_cb(struct callback_head *);

File net/sched/sch_ingress.c:
166:	static unsigned long clsact_bind_filter(struct Qdisc *, unsigned long, u32);
55:	static void clsact_chain_head_change(struct tcf_proto *, void *);
247:	static void clsact_destroy(struct Qdisc *);
208:	static u32 clsact_egress_block_get(struct Qdisc *);
194:	static void clsact_egress_block_set(struct Qdisc *, u32);
155:	static unsigned long clsact_find(struct Qdisc *, u32);
201:	static u32 clsact_ingress_block_get(struct Qdisc *);
187:	static void clsact_ingress_block_set(struct Qdisc *, u32);
215:	static int clsact_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
172:	static struct tcf_block *clsact_tcf_block(struct Qdisc *, unsigned long, struct netlink_ext_ack *);
33:	static unsigned long ingress_bind_filter(struct Qdisc *, unsigned long, u32);
100:	static void ingress_destroy(struct Qdisc *);
108:	static int ingress_dump(struct Qdisc *, struct sk_buff *);
28:	static unsigned long ingress_find(struct Qdisc *, u32);
69:	static u32 ingress_ingress_block_get(struct Qdisc *);
62:	static void ingress_ingress_block_set(struct Qdisc *, u32);
76:	static int ingress_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
23:	static struct Qdisc *ingress_leaf(struct Qdisc *, unsigned long);
297:	static void ingress_module_exit(void);
283:	static int ingress_module_init(void);
47:	static struct tcf_block *ingress_tcf_block(struct Qdisc *, unsigned long, struct netlink_ext_ack *);
39:	static void ingress_unbind_filter(struct Qdisc *, unsigned long);
43:	static void ingress_walk(struct Qdisc *, struct qdisc_walker *);

File net/sched/sch_mq.c:
106:	static void mq_attach(struct Qdisc *);
52:	static void mq_destroy(struct Qdisc *);
128:	static int mq_dump(struct Qdisc *, struct sk_buff *);
217:	static int mq_dump_class(struct Qdisc *, unsigned long, struct sk_buff *, struct tcmsg *);
228:	static int mq_dump_class_stats(struct Qdisc *, unsigned long, struct gnet_dump *);
208:	static unsigned long mq_find(struct Qdisc *, u32);
175:	static int mq_graft(struct Qdisc *, unsigned long, struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *);
67:	static int mq_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
201:	static struct Qdisc *mq_leaf(struct Qdisc *, unsigned long);
169:	static struct netdev_queue *mq_select_queue(struct Qdisc *, struct tcmsg *);
240:	static void mq_walk(struct Qdisc *, struct qdisc_walker *);

File net/sched/sch_mqprio.c:
289:	static void mqprio_attach(struct Qdisc *);
30:	static void mqprio_destroy(struct Qdisc *);
383:	static int mqprio_dump(struct Qdisc *, struct sk_buff *);
474:	static int mqprio_dump_class(struct Qdisc *, unsigned long, struct sk_buff *, struct tcmsg *);
494:	static int mqprio_dump_class_stats(struct Qdisc *, unsigned long, struct gnet_dump *);
455:	static unsigned long mqprio_find(struct Qdisc *, u32);
320:	static int mqprio_graft(struct Qdisc *, unsigned long, struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *);
133:	static int mqprio_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
445:	static struct Qdisc *mqprio_leaf(struct Qdisc *, unsigned long);
614:	static void mqprio_module_exit(void);
609:	static int mqprio_module_init(void);
581:	static struct netdev_queue *mqprio_select_queue(struct Qdisc *, struct tcmsg *);
550:	static void mqprio_walk(struct Qdisc *, struct qdisc_walker *);
119:	static int parse_attr(struct nlattr **, int, struct nlattr *, const struct nla_policy *, int);

File net/sched/sch_taprio.c:
1149:	void taprio_offload_free(struct tc_taprio_qopt_offload *);
1135:	struct tc_taprio_qopt_offload *taprio_offload_get(struct tc_taprio_qopt_offload *);
691:	static enum hrtimer_restart advance_sched(struct hrtimer *);
1914:	static int dump_schedule(struct sk_buff *, const struct sched_gate_list *);
187:	static struct sched_entry *find_entry_to_transmit(struct sk_buff *, struct Qdisc *, struct sched_gate_list *, struct sched_gate_list *, ktime_t, ktime_t *, ktime_t *, bool);
1813:	static void taprio_attach(struct Qdisc *);
1533:	static int taprio_change(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
557:	static struct sk_buff *taprio_dequeue(struct Qdisc *);
1711:	static void taprio_destroy(struct Qdisc *);
1087:	static int taprio_dev_notifier(struct notifier_block *, unsigned long, void *);
1284:	static int taprio_disable_offload(struct net_device *, struct taprio_sched *, struct netlink_ext_ack *);
1977:	static int taprio_dump(struct Qdisc *, struct sk_buff *);
2065:	static int taprio_dump_class(struct Qdisc *, unsigned long, struct sk_buff *, struct tcmsg *);
2077:	static int taprio_dump_class_stats(struct Qdisc *, unsigned long, struct gnet_dump *);
1228:	static int taprio_enable_offload(struct net_device *, struct taprio_sched *, struct sched_gate_list *, struct netlink_ext_ack *);
448:	static int taprio_enqueue(struct sk_buff *, struct Qdisc *, struct sk_buff **);
416:	static int taprio_enqueue_one(struct sk_buff *, struct Qdisc *, struct Qdisc *, struct sk_buff **);
2056:	static unsigned long taprio_find(struct Qdisc *, u32);
117:	static void taprio_free_sched_cb(struct callback_head *);
988:	static int taprio_get_start_time(struct Qdisc *, struct sched_gate_list *, ktime_t *);
1854:	static int taprio_graft(struct Qdisc *, unsigned long, struct Qdisc *, struct Qdisc **, struct netlink_ext_ack *);
1748:	static int taprio_init(struct Qdisc *, struct nlattr *, struct netlink_ext_ack *);
2046:	static struct Qdisc *taprio_leaf(struct Qdisc *, unsigned long);
2152:	static void taprio_module_exit(void);
2142:	static int taprio_module_init(void);
1175:	static void taprio_offload_config_changed(struct taprio_sched *);
1325:	static int taprio_parse_clockid(struct Qdisc *, struct nlattr **, struct netlink_ext_ack *);
503:	static struct sk_buff *taprio_peek(struct Qdisc *);
1696:	static void taprio_reset(struct Qdisc *);
2106:	static struct netdev_queue *taprio_select_queue(struct Qdisc *, struct tcmsg *);
1063:	static void taprio_set_picos_per_byte(struct net_device *, struct taprio_sched *);
1041:	static void taprio_start_sched(struct Qdisc *, ktime_t, struct sched_gate_list *);
2091:	static void taprio_walk(struct Qdisc *, struct qdisc_walker *);

File net/socket.c:
1941:	long __arm64_sys_accept(const struct pt_regs *);
1935:	long __arm64_sys_accept4(const struct pt_regs *);
1785:	long __arm64_sys_bind(const struct pt_regs *);
2000:	long __arm64_sys_connect(const struct pt_regs *);
2074:	long __arm64_sys_getpeername(const struct pt_regs *);
2038:	long __arm64_sys_getsockname(const struct pt_regs *);
2302:	long __arm64_sys_getsockopt(const struct pt_regs *);
1817:	long __arm64_sys_listen(const struct pt_regs *);
2194:	long __arm64_sys_recv(const struct pt_regs *);
2183:	long __arm64_sys_recvfrom(const struct pt_regs *);
2926:	long __arm64_sys_recvmmsg(const struct pt_regs *);
2774:	long __arm64_sys_recvmsg(const struct pt_regs *);
2136:	long __arm64_sys_send(const struct pt_regs *);
2642:	long __arm64_sys_sendmmsg(const struct pt_regs *);
2566:	long __arm64_sys_sendmsg(const struct pt_regs *);
2125:	long __arm64_sys_sendto(const struct pt_regs *);
2254:	long __arm64_sys_setsockopt(const struct pt_regs *);
2336:	long __arm64_sys_shutdown(const struct pt_regs *);
1647:	long __arm64_sys_socket(const struct pt_regs *);
1748:	long __arm64_sys_socketpair(const struct pt_regs *);
2353:	int __copy_msghdr(struct msghdr *, struct user_msghdr *, struct sockaddr **);
1444:	int __sock_create(struct net *, int, int, int, struct socket **, int);
979:	void __sock_recv_cmsgs(struct msghdr *, struct sock *, struct sk_buff *);
856:	void __sock_recv_timestamp(struct msghdr *, struct sock *, struct sk_buff *);
947:	void __sock_recv_wifi_status(struct msghdr *, struct sock *, struct sk_buff *);
682:	void __sock_tx_timestamp(__u16, __u8 *);
1919:	int __sys_accept4(int, struct sockaddr *, int *, int);
1762:	int __sys_bind(int, struct sockaddr *, int);
1982:	int __sys_connect(int, struct sockaddr *, int);
1959:	int __sys_connect_file(struct file *, struct __kernel_sockaddr_storage *, int, int);
2049:	int __sys_getpeername(int, struct sockaddr *, int *);
2011:	int __sys_getsockname(int, struct sockaddr *, int *);
2267:	int __sys_getsockopt(int, int, int, char *, int *);
1796:	int __sys_listen(int, int);
2147:	int __sys_recvfrom(int, void *, size_t, unsigned int, struct sockaddr *, int *);
2895:	int __sys_recvmmsg(int, struct mmsghdr *, unsigned int, unsigned int, struct __kernel_timespec *, struct old_timespec32 *);
2753:	long __sys_recvmsg(int, struct user_msghdr *, unsigned int, bool);
2746:	long __sys_recvmsg_sock(struct socket *, struct msghdr *, struct user_msghdr *, struct sockaddr *, unsigned int);
2575:	int __sys_sendmmsg(int, struct mmsghdr *, unsigned int, unsigned int, bool);
2545:	long __sys_sendmsg(int, struct user_msghdr *, unsigned int, bool);
2539:	long __sys_sendmsg_sock(struct socket *, struct msghdr *, unsigned int);
2085:	int __sys_sendto(int, void *, size_t, unsigned int, struct sockaddr *, int);
2209:	int __sys_setsockopt(int, int, int, char *, int);
2323:	int __sys_shutdown(int, int);
2312:	int __sys_shutdown_sock(struct socket *, int);
1631:	int __sys_socket(int, int, int);
1610:	struct file *__sys_socket_file(int, int, int);
1656:	int __sys_socketpair(int, int, int, int *);
1133:	int br_ioctl_call(struct net *, struct net_bridge *, unsigned int, struct ifreq *, void *);
1123:	void brioctl_set(int (*)(struct net *, struct net_bridge *, unsigned int, struct ifreq *, void *));
1822:	struct file *do_accept(struct file *, unsigned int, struct sockaddr *, int *, int);
3222:	int get_user_ifreq(struct ifreq *, void **, void *);
3463:	int kernel_accept(struct socket *, struct socket **, int);
3432:	int kernel_bind(struct socket *, struct sockaddr *, int);
3501:	int kernel_connect(struct socket *, struct sockaddr *, int, int);
3532:	int kernel_getpeername(struct socket *, struct sockaddr *);
3517:	int kernel_getsockname(struct socket *, struct sockaddr *);
3446:	int kernel_listen(struct socket *, int);
1033:	int kernel_recvmsg(struct socket *, struct msghdr *, struct kvec *, size_t, size_t, int);
750:	int kernel_sendmsg(struct socket *, struct msghdr *, struct kvec *, size_t, size_t);
771:	int kernel_sendmsg_locked(struct sock *, struct msghdr *, struct kvec *, size_t, size_t);
3549:	int kernel_sendpage(struct socket *, struct page *, int, size_t, int);
3573:	int kernel_sendpage_locked(struct sock *, struct page *, int, size_t, int);
3610:	u32 kernel_sock_ip_overhead(struct sock *);
3594:	int kernel_sock_shutdown(struct socket *, enum sock_shutdown_cmd);
243:	int move_addr_to_kernel(void *, int, struct __kernel_sockaddr_storage *);
3247:	int put_user_ifreq(struct ifreq *, void *);
2648:	int recvmsg_copy_msghdr(struct msghdr *, struct user_msghdr *, unsigned int, struct sockaddr **, struct iovec **);
2495:	int sendmsg_copy_msghdr(struct msghdr *, struct user_msghdr *, unsigned int, struct iovec **);
622:	struct socket *sock_alloc(void);
456:	struct file *sock_alloc_file(struct socket *, int, const char *);
1564:	int sock_create(int, int, int, struct socket **);
1582:	int sock_create_kern(struct net *, int, int, int, struct socket **);
1305:	int sock_create_lite(int, int, int, struct socket **);
504:	struct socket *sock_from_file(struct file *);
3149:	bool sock_is_registered(int);
1009:	int sock_recvmsg(struct socket *, struct msghdr *, int);
3098:	int sock_register(const struct net_proto_family *);
676:	void sock_release(struct socket *);
729:	int sock_sendmsg(struct socket *, struct msghdr *);
3135:	void sock_unregister(int);
1403:	int sock_wake_async(struct socket_wq *, int, int);
3206:	void socket_seq_show(struct seq_file *);
526:	struct socket *sockfd_lookup(int, int *);
1152:	void vlan_ioctl_set(int (*)(struct net *, void *));
2669:	static int ____sys_recvmsg(struct socket *, struct msghdr *, struct user_msghdr *, struct sockaddr *, unsigned int, int);
2420:	static int ____sys_sendmsg(struct socket *, struct msghdr *, unsigned int, struct used_address *, unsigned int);
2399:	static int copy_msghdr_from_user(struct msghdr *, struct user_msghdr *, struct sockaddr **, struct iovec **);
2784:	static int do_recvmmsg(int, struct mmsghdr *, unsigned int, unsigned int, struct timespec64 *);
328:	static void init_once(void *);
271:	static int move_addr_to_user(struct __kernel_sockaddr_storage *, int, void *, int *);
300:	static struct inode *sock_alloc_inode(struct super_block *);
1363:	static int sock_close(struct inode *, struct file *);
1380:	static int sock_fasync(int, struct file *, int);
320:	static void sock_free_inode(struct inode *);
3154:	static int sock_init(void);
1196:	static long sock_ioctl(struct file *, unsigned int, unsigned long);
1356:	static int sock_mmap(struct file *, struct vm_area_struct *);
1336:	static __poll_t sock_poll(struct file *, poll_table *);
1069:	static ssize_t sock_read_iter(struct kiocb *, struct iov_iter *);
1042:	static ssize_t sock_sendpage(struct file *, struct page *, int, size_t, loff_t *, int);
135:	static void sock_show_fdinfo(struct seq_file *, struct file *);
1057:	static ssize_t sock_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
1091:	static ssize_t sock_write_iter(struct kiocb *, struct iov_iter *);
356:	static char *sockfs_dname(struct dentry *, char *, int);
408:	static int sockfs_init_fs_context(struct fs_context *);
564:	static ssize_t sockfs_listxattr(struct dentry *, char *, size_t);
387:	static int sockfs_security_xattr_set(const struct xattr_handler *, struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
592:	static int sockfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
366:	static int sockfs_xattr_get(const struct xattr_handler *, struct dentry *, struct inode *, const char *, void *, size_t);

File net/sunrpc/addr.c:
129:	size_t rpc_ntop(const struct sockaddr *, char *, const size_t);
244:	size_t rpc_pton(struct net *, const char *, const size_t, struct sockaddr *, const size_t);
265:	char *rpc_sockaddr2uaddr(const struct sockaddr *, gfp_t);
310:	size_t rpc_uaddr2sockaddr(struct net *, const char *, const size_t, struct sockaddr *, const size_t);
28:	static size_t rpc_ntop6_noscopeid(const struct sockaddr *, char *, const int);

File net/sunrpc/auth.c:
687:	void put_rpccred(struct rpc_cred *);
52:	const struct cred *rpc_machine_cred(void);
777:	int rpcauth_checkverf(struct rpc_task *, struct xdr_stream *);
381:	void rpcauth_clear_credcache(struct rpc_cred_cache *);
225:	struct rpc_auth *rpcauth_create(const struct rpc_auth_create_args *, struct rpc_clnt *);
410:	void rpcauth_destroy_credcache(struct rpc_auth *);
205:	int rpcauth_get_gssinfo(rpc_authflavor_t, struct rpcsec_gss_info *);
180:	rpc_authflavor_t rpcauth_get_pseudoflavor(rpc_authflavor_t, struct rpcsec_gss_info *);
595:	void rpcauth_init_cred(struct rpc_cred *, const struct auth_cred *, struct rpc_auth *, const struct rpc_credops *);
291:	int rpcauth_init_credcache(struct rpc_auth *);
870:	int rpcauth_init_module(void);
847:	void rpcauth_invalcred(struct rpc_task *);
517:	struct rpc_cred *rpcauth_lookup_credcache(struct rpc_auth *, struct auth_cred *, int, gfp_t);
581:	struct rpc_cred *rpcauth_lookupcred(struct rpc_auth *, int);
727:	int rpcauth_marshcred(struct rpc_task *, struct xdr_stream *);
826:	int rpcauth_refreshcred(struct rpc_task *);
109:	int rpcauth_register(const struct rpc_authops *);
250:	void rpcauth_release(struct rpc_auth *);
887:	void rpcauth_remove_module(void);
315:	char *rpcauth_stringify_acceptor(struct rpc_cred *);
124:	int rpcauth_unregister(const struct rpc_authops *);
808:	int rpcauth_unwrap_resp(struct rpc_task *, struct xdr_stream *);
792:	int rpcauth_unwrap_resp_decode(struct rpc_task *, struct xdr_stream *);
856:	int rpcauth_uptodatecred(struct rpc_task *);
760:	int rpcauth_wrap_req(struct rpc_task *, struct xdr_stream *);
742:	int rpcauth_wrap_req_encode(struct rpc_task *, struct xdr_stream *);
816:	bool rpcauth_xmit_need_reencode(struct rpc_task *);
79:	static int param_get_hashtbl_sz(char *, const struct kernel_param *);
59:	static int param_set_hashtbl_sz(const char *, const struct kernel_param *);
461:	static unsigned long rpcauth_cache_do_shrink(int);
492:	static unsigned long rpcauth_cache_shrink_count(struct shrinker *, struct shrink_control *);
478:	static unsigned long rpcauth_cache_shrink_scan(struct shrinker *, struct shrink_control *);
367:	static void rpcauth_lru_remove(struct rpc_cred *);

File net/sunrpc/auth_gss/auth_gss.c:
335:	static void __gss_unhash_msg(struct gss_upcall_msg *);
2257:	static void exit_rpcsec_gss(void);
1156:	static struct gss_auth *gss_auth_find_or_add_hashed(const struct rpc_auth_create_args *, struct rpc_clnt *, struct gss_auth *);
1213:	static struct rpc_auth *gss_create(const struct rpc_auth_create_args *, struct rpc_clnt *);
1366:	static struct rpc_cred *gss_create_cred(struct rpc_auth *, struct auth_cred *, int, gfp_t);
1391:	static int gss_cred_init(struct rpc_auth *, struct rpc_cred *);
117:	static void gss_cred_set_ctx(struct rpc_cred *, struct gss_cl_ctx *);
1126:	static void gss_destroy(struct rpc_auth *);
1342:	static void gss_destroy_cred(struct rpc_cred *);
1327:	static void gss_destroy_nullcred(struct rpc_cred *);
161:	static const void *gss_fill_context(const void *, const void *, struct gss_cl_ctx *, struct gss_api_mech *);
690:	static struct gss_upcall_msg *gss_find_downcall(struct rpc_pipe *, kuid_t);
1320:	static void gss_free_cred_callback(struct callback_head *);
1301:	static void gss_free_ctx_callback(struct callback_head *);
98:	static struct gss_cl_ctx *gss_get_ctx(struct gss_cl_ctx *);
1350:	static int gss_hash_cred(struct auth_cred *, unsigned int);
1463:	static int gss_key_timeout(struct rpc_cred *);
1358:	static struct rpc_cred *gss_lookup_cred(struct rpc_auth *, struct auth_cred *, int);
1518:	static int gss_marshal(struct rpc_task *, struct xdr_stream *);
1480:	static int gss_match(struct auth_cred *, struct rpc_cred *, int);
949:	static struct rpc_pipe_dir_object *gss_pipe_alloc_pdo(void *);
882:	static int gss_pipe_dentry_create(struct dentry *, struct rpc_pipe_dir_object *);
870:	static void gss_pipe_dentry_destroy(struct dentry *, struct rpc_pipe_dir_object *);
856:	static void gss_pipe_destroy_msg(struct rpc_pipe_msg *);
707:	static ssize_t gss_pipe_downcall(struct file *, const char *, size_t);
1001:	static void gss_pipe_free(struct gss_pipe *);
934:	static int gss_pipe_match_pdo(struct rpc_pipe_dir_object *, void *);
796:	static int gss_pipe_open(struct inode *, int);
820:	static int gss_pipe_open_v0(struct inode *);
825:	static int gss_pipe_open_v1(struct inode *);
831:	static void gss_pipe_release(struct inode *);
1120:	static void gss_put_auth(struct gss_auth *);
105:	static void gss_put_ctx(struct gss_cl_ctx *);
1635:	static int gss_refresh(struct rpc_task *);
1659:	static int gss_refresh_null(struct rpc_task *);
283:	static void gss_release_msg(struct gss_upcall_msg *);
546:	static struct gss_upcall_msg *gss_setup_upcall(struct gss_auth *, struct rpc_cred *);
1404:	static char *gss_stringify_acceptor(struct rpc_cred *);
344:	static void gss_unhash_msg(struct gss_upcall_msg *);
2128:	static int gss_unwrap_resp(struct rpc_task *, struct xdr_stream *);
1965:	static int gss_unwrap_resp_integ(struct rpc_task *, struct rpc_cred *, struct gss_cl_ctx *, struct rpc_rqst *, struct xdr_stream *);
2037:	static int gss_unwrap_resp_priv(struct rpc_task *, struct rpc_cred *, struct gss_cl_ctx *, struct rpc_rqst *, struct xdr_stream *);
375:	static void gss_upcall_callback(struct rpc_task *);
1932:	static void gss_update_rslack(struct rpc_task *, struct rpc_cred *, unsigned int, unsigned int);
403:	static ssize_t gss_v0_upcall(struct file *, struct rpc_pipe_msg *, char *, size_t);
488:	static ssize_t gss_v1_upcall(struct file *, struct rpc_pipe_msg *, char *, size_t);
1665:	static int gss_validate(struct rpc_task *, struct xdr_stream *);
1890:	static int gss_wrap_req(struct rpc_task *, struct xdr_stream *);
1723:	static int gss_wrap_req_integ(struct rpc_cred *, struct gss_cl_ctx *, struct rpc_task *, struct xdr_stream *);
1816:	static int gss_wrap_req_priv(struct rpc_cred *, struct gss_cl_ctx *, struct rpc_task *, struct xdr_stream *);
2091:	static bool gss_xmit_need_reencode(struct rpc_task *);
2234:	static int init_rpcsec_gss(void);
1768:	static void priv_release_snd_buf(struct rpc_rqst *);
2221:	static void rpcsec_gss_exit_net(struct net *);
2216:	static int rpcsec_gss_init_net(struct net *);

File net/sunrpc/auth_gss/auth_gss_internal.h:
26:	static const void *simple_get_netobj(const void *, const void *, struct xdr_netobj *);

File net/sunrpc/auth_gss/gss_generic_token.c:
160:	void g_make_token_header(struct xdr_netobj *, int, unsigned char **);
147:	int g_token_size(struct xdr_netobj *, unsigned int);
180:	u32 g_verify_token_header(struct xdr_netobj *, int *, unsigned char **, int);

File net/sunrpc/auth_gss/gss_mech_switch.c:
433:	u32 gss_delete_sec_context(struct gss_ctx **);
370:	u32 gss_get_mic(struct gss_ctx *, struct xdr_buf *, struct xdr_netobj *);
353:	int gss_import_sec_context(const void *, size_t, struct gss_api_mech *, struct gss_ctx **, time64_t *, gfp_t);
280:	int gss_mech_flavor2info(rpc_authflavor_t, struct rpcsec_gss_info *);
124:	struct gss_api_mech *gss_mech_get(struct gss_api_mech *);
161:	struct gss_api_mech *gss_mech_get_by_OID(struct rpcsec_gss_oid *);
149:	struct gss_api_mech *gss_mech_get_by_name(const char *);
215:	struct gss_api_mech *gss_mech_get_by_pseudoflavor(u32);
257:	rpc_authflavor_t gss_mech_info2flavor(struct rpcsec_gss_info *);
343:	void gss_mech_put(struct gss_api_mech *);
94:	int gss_mech_register(struct gss_api_mech *);
114:	void gss_mech_unregister(struct gss_api_mech *);
319:	bool gss_pseudoflavor_to_datatouch(struct gss_api_mech *, u32);
306:	u32 gss_pseudoflavor_to_service(struct gss_api_mech *, u32);
331:	char *gss_service_to_auth_domain_name(struct gss_api_mech *, u32);
236:	rpc_authflavor_t gss_svc_to_pseudoflavor(struct gss_api_mech *, u32, u32);
418:	u32 gss_unwrap(struct gss_ctx *, int, int, struct xdr_buf *);
383:	u32 gss_verify_mic(struct gss_ctx *, struct xdr_buf *, struct xdr_netobj *);
408:	u32 gss_wrap(struct gss_ctx *, int, struct xdr_buf *, struct page **);

File net/sunrpc/auth_gss/gss_rpc_upcall.c:
147:	void clear_gssp_clnt(struct sunrpc_net *);
271:	int gssp_accept_sec_context_upcall(struct net *, struct gssp_upcall_data *);
371:	void gssp_free_upcall_data(struct gssp_upcall_data *);
124:	void init_gssp_clnt(struct sunrpc_net *);
130:	int set_gssp_clnt(struct net *);

File net/sunrpc/auth_gss/gss_rpc_xdr.c:
779:	int gssx_dec_accept_sec_context(struct rpc_rqst *, struct xdr_stream *, void *);
722:	void gssx_enc_accept_sec_context(struct rpc_rqst *, struct xdr_stream *, const void *);
135:	static int dummy_dec_opt_array(struct xdr_stream *, struct gssx_option_array *);
62:	static int gssx_dec_buffer(struct xdr_stream *, gssx_buffer *);
481:	static int gssx_dec_name(struct xdr_stream *, struct gssx_name *);
229:	static int gssx_dec_option_array(struct xdr_stream *, struct gssx_option_array *);
689:	static int gssx_enc_cb(struct xdr_stream *, struct gssx_cb *);
440:	static int gssx_enc_name(struct xdr_stream *, struct gssx_name *);

File net/sunrpc/auth_gss/svcauth_gss.c:
2017:	int gss_svc_init(void);
1987:	int gss_svc_init_net(struct net *);
2023:	void gss_svc_shutdown(void);
2009:	void gss_svc_shutdown_net(struct net *);
849:	u32 svcauth_gss_flavor(struct auth_domain *);
859:	struct auth_domain *svcauth_gss_register_pseudoflavor(u32, char *);
656:	static bool gss_check_seq_num(const struct svc_rqst *, struct rsc *, u32);
1142:	static void gss_free_in_token_pages(struct gssp_in_token *);
626:	static struct rsc *gss_svc_searchbyctx(struct cache_detail *, struct xdr_netobj *);
740:	static int gss_verify_header(struct svc_rqst *, struct rsc *, __be32 *, struct rpc_gss_wire_cred *);
1075:	static int gss_write_init_verf(struct cache_detail *, struct svc_rqst *, struct xdr_netobj *, int *);
796:	static int gss_write_verf(struct svc_rqst *, struct gss_ctx *, u32);
1475:	static ssize_t read_gssp(struct file *, char *, size_t, loff_t *);
451:	static struct cache_head *rsc_alloc(void);
381:	static void rsc_free(struct rsc *);
389:	static void rsc_free_rcu(struct callback_head *);
423:	static void rsc_init(struct cache_head *, struct cache_head *);
414:	static int rsc_match(struct cache_head *, struct cache_head *);
465:	static int rsc_parse(struct cache_detail *, char *, int);
397:	static void rsc_put(struct kref *);
460:	static int rsc_upcall(struct cache_detail *, struct cache_head *);
199:	static struct cache_head *rsi_alloc(void);
118:	static void rsi_free_rcu(struct callback_head *);
161:	static void rsi_init(struct cache_head *, struct cache_head *);
139:	static int rsi_match(struct cache_head *, struct cache_head *);
226:	static int rsi_parse(struct cache_detail *, char *, int);
126:	static void rsi_put(struct kref *);
213:	static void rsi_request(struct cache_detail *, struct cache_head *, char **, int *);
208:	static int rsi_upcall(struct cache_detail *, struct cache_head *);
334:	static struct rsi *rsi_update(struct cache_detail *, struct rsi *, struct rsi *);
1423:	static int set_gss_proxy(struct net *, int);
1547:	static int svcauth_gss_accept(struct svc_rqst *);
1913:	static void svcauth_gss_domain_release(struct auth_domain *);
1903:	static void svcauth_gss_domain_release_rcu(struct callback_head *);
1249:	static int svcauth_gss_legacy_init(struct svc_rqst *, struct rpc_gss_wire_cred *);
1361:	static int svcauth_gss_proxy_init(struct svc_rqst *, struct rpc_gss_wire_cred *);
1844:	static int svcauth_gss_release(struct svc_rqst *);
1045:	static int svcauth_gss_set_client(struct svc_rqst *);
913:	static int unwrap_integ_data(struct svc_rqst *, struct xdr_buf *, u32, struct gss_ctx *);
987:	static int unwrap_priv_data(struct svc_rqst *, struct xdr_buf *, u32, struct gss_ctx *);
437:	static void update_rsc(struct cache_head *, struct cache_head *);
180:	static void update_rsi(struct cache_head *, struct cache_head *);
1435:	static bool use_gss_proxy(struct net *);
1447:	static ssize_t write_gssp(struct file *, const char *, size_t, loff_t *);

File net/sunrpc/auth_null.c:
22:	static struct rpc_auth *nul_create(const struct rpc_auth_create_args *, struct rpc_clnt *);
29:	static void nul_destroy(struct rpc_auth *);
46:	static void nul_destroy_cred(struct rpc_cred *);
37:	static struct rpc_cred *nul_lookup_cred(struct rpc_auth *, struct auth_cred *, int);
63:	static int nul_marshal(struct rpc_task *, struct xdr_stream *);
54:	static int nul_match(struct auth_cred *, struct rpc_cred *, int);
83:	static int nul_refresh(struct rpc_task *);
90:	static int nul_validate(struct rpc_task *, struct xdr_stream *);

File net/sunrpc/auth_unix.c:
209:	void rpc_destroy_authunix(void);
203:	int rpc_init_authunix(void);
29:	static struct rpc_auth *unx_create(const struct rpc_auth_create_args *, struct rpc_clnt *);
36:	static void unx_destroy(struct rpc_auth *);
71:	static void unx_destroy_cred(struct rpc_cred *);
62:	static void unx_free_cred_callback(struct callback_head *);
43:	static struct rpc_cred *unx_lookup_cred(struct rpc_auth *, struct auth_cred *, int);
111:	static int unx_marshal(struct rpc_task *, struct xdr_stream *);
80:	static int unx_match(struct auth_cred *, struct rpc_cred *, int);
166:	static int unx_refresh(struct rpc_task *);
173:	static int unx_validate(struct rpc_task *, struct xdr_stream *);

File net/sunrpc/backchannel_rqst.c:
22:	unsigned int xprt_bc_max_slots(struct rpc_xprt *);
357:	void xprt_complete_bc_request(struct rpc_rqst *, uint32_t);
203:	void xprt_destroy_backchannel(struct rpc_xprt *, unsigned int);
210:	void xprt_destroy_bc(struct rpc_xprt *, unsigned int);
268:	void xprt_free_bc_request(struct rpc_rqst *);
275:	void xprt_free_bc_rqst(struct rpc_rqst *);
325:	struct rpc_rqst *xprt_lookup_bc_request(struct rpc_xprt *, __be32);
124:	int xprt_setup_backchannel(struct rpc_xprt *, unsigned int);
132:	int xprt_setup_bc(struct rpc_xprt *, unsigned int);
75:	static struct rpc_rqst *xprt_alloc_bc_req(struct rpc_xprt *);

File net/sunrpc/cache.c:
298:	int cache_check(struct cache_detail *, struct cache_head *, struct cache_req *);
756:	void cache_clean_deferred(void *);
1740:	struct cache_detail *cache_create_net(const struct cache_detail *, struct net *);
1763:	void cache_destroy_net(struct cache_detail *, struct net *);
522:	void cache_flush(void);
1716:	void cache_initialize(void);
531:	void cache_purge(struct cache_detail *);
1721:	int cache_register_net(struct cache_detail *, struct net *);
1409:	void *cache_seq_next_rcu(struct seq_file *, void *, loff_t *);
1401:	void *cache_seq_start_rcu(struct seq_file *, loff_t *);
1415:	void cache_seq_stop_rcu(struct seq_file *, void *);
1733:	void cache_unregister_net(struct cache_detail *, struct net *);
1123:	void qword_add(char **, int *, char *);
1146:	void qword_addhex(char **, int *, char *, int);
1278:	int qword_get(char **, char *, int);
146:	struct cache_head *sunrpc_cache_lookup_rcu(struct cache_detail *, struct cache_head *, int);
1246:	int sunrpc_cache_pipe_upcall(struct cache_detail *, struct cache_head *);
1254:	int sunrpc_cache_pipe_upcall_timeout(struct cache_detail *, struct cache_head *);
1887:	int sunrpc_cache_register_pipefs(struct dentry *, const char *, umode_t, struct cache_detail *);
1908:	void sunrpc_cache_unhash(struct cache_detail *, struct cache_head *);
1899:	void sunrpc_cache_unregister_pipefs(struct cache_detail *);
202:	struct cache_head *sunrpc_cache_update(struct cache_detail *, struct cache_head *, struct cache_head *, int);
403:	void sunrpc_destroy_cache_detail(struct cache_detail *);
385:	void sunrpc_init_cache_detail(struct cache_detail *);
1422:	static int c_show(struct seq_file *, void *);
426:	static int cache_clean(void);
174:	static void cache_fresh_unlocked(struct cache_head *, struct cache_detail *);
1793:	static long cache_ioctl_pipefs(struct file *, unsigned int, unsigned long);
1575:	static long cache_ioctl_procfs(struct file *, unsigned int, unsigned long);
1022:	static int cache_open(struct inode *, struct file *, struct cache_detail *);
1802:	static int cache_open_pipefs(struct inode *, struct file *);
1584:	static int cache_open_procfs(struct inode *, struct file *);
1786:	static __poll_t cache_poll_pipefs(struct file *, poll_table *);
1568:	static __poll_t cache_poll_procfs(struct file *, poll_table *);
826:	static ssize_t cache_read(struct file *, char *, size_t, loff_t *, struct cache_detail *);
1770:	static ssize_t cache_read_pipefs(struct file *, char *, size_t, loff_t *);
1552:	static ssize_t cache_read_procfs(struct file *, char *, size_t, loff_t *);
1049:	static int cache_release(struct inode *, struct file *, struct cache_detail *);
1809:	static int cache_release_pipefs(struct inode *, struct file *);
1591:	static int cache_release_procfs(struct inode *, struct file *);
627:	static void cache_restart_thread(struct cache_deferred_req *, int);
731:	static void cache_revisit_request(struct cache_head *);
946:	static ssize_t cache_write(struct file *, const char *, size_t, loff_t *, struct cache_detail *);
1778:	static ssize_t cache_write_pipefs(struct file *, const char *, size_t, loff_t *);
1560:	static ssize_t cache_write_procfs(struct file *, const char *, size_t, loff_t *);
1827:	static int content_open_pipefs(struct inode *, struct file *);
1608:	static int content_open_procfs(struct inode *, struct file *);
1834:	static int content_release_pipefs(struct inode *, struct file *);
1615:	static int content_release_procfs(struct inode *, struct file *);
501:	static void do_cache_clean(struct work_struct *);
1848:	static int open_flush_pipefs(struct inode *, struct file *);
1629:	static int open_flush_procfs(struct inode *, struct file *);
1862:	static ssize_t read_flush_pipefs(struct file *, char *, size_t, loff_t *);
1643:	static ssize_t read_flush_procfs(struct file *, char *, size_t, loff_t *);
1855:	static int release_flush_pipefs(struct inode *, struct file *);
1636:	static int release_flush_procfs(struct inode *, struct file *);
1509:	static ssize_t write_flush(struct file *, const char *, size_t, loff_t *, struct cache_detail *);
1870:	static ssize_t write_flush_pipefs(struct file *, const char *, size_t, loff_t *);
1651:	static ssize_t write_flush_procfs(struct file *, const char *, size_t, loff_t *);

File net/sunrpc/clnt.c:
1034:	struct rpc_clnt *rpc_bind_new_program(struct rpc_clnt *, const struct rpc_program *, u32);
1266:	int rpc_call_async(struct rpc_clnt *, const struct rpc_message *, int, const struct rpc_call_ops *, void *);
2821:	struct rpc_task *rpc_call_null(struct rpc_clnt *, struct rpc_cred *, int);
1346:	void rpc_call_start(struct rpc_task *);
1230:	int rpc_call_sync(struct rpc_clnt *, const struct rpc_message *, int);
886:	unsigned long rpc_cancel_tasks(struct rpc_clnt *, int, bool (*)(const struct rpc_task *, const void *), const void *);
339:	void rpc_cleanup_clids(void);
255:	int rpc_clients_notifier_register(void);
260:	void rpc_clients_notifier_unregister(void);
3020:	int rpc_clnt_add_xprt(struct rpc_clnt *, struct xprt_create *, int (*)(struct rpc_clnt *, struct rpc_xprt_switch *, struct rpc_xprt *, void *), void *);
921:	void rpc_clnt_disconnect(struct rpc_clnt *);
828:	int rpc_clnt_iterate_for_each_xprt(struct rpc_clnt *, int (*)(struct rpc_clnt *, struct rpc_xprt *, void *), void *);
3177:	void rpc_clnt_manage_trunked_xprts(struct rpc_clnt *);
3113:	void rpc_clnt_probe_trunked_xprts(struct rpc_clnt *, struct rpc_add_xprt_test *);
2977:	int rpc_clnt_setup_test_and_add_xprt(struct rpc_clnt *, struct rpc_xprt_switch *, struct rpc_xprt *, void *);
2897:	int rpc_clnt_test_and_add_xprt(struct rpc_clnt *, struct rpc_xprt_switch *, struct rpc_xprt *, void *);
3225:	void rpc_clnt_xprt_set_online(struct rpc_clnt *, struct rpc_xprt *);
3235:	void rpc_clnt_xprt_switch_add_xprt(struct rpc_clnt *, struct rpc_xprt *);
3261:	bool rpc_clnt_xprt_switch_has_addr(struct rpc_clnt *, const struct sockaddr *);
3217:	void rpc_clnt_xprt_switch_put(struct rpc_clnt *);
3248:	void rpc_clnt_xprt_switch_remove_xprt(struct rpc_clnt *, struct rpc_xprt *);
669:	struct rpc_clnt *rpc_clone_client(struct rpc_clnt *);
691:	struct rpc_clnt *rpc_clone_client_set_auth(struct rpc_clnt *, rpc_authflavor_t);
524:	struct rpc_clnt *rpc_create(struct rpc_create_args *);
1635:	void rpc_force_rebind(struct rpc_clnt *);
857:	void rpc_killall_tasks(struct rpc_clnt *);
1525:	int rpc_localaddr(struct rpc_clnt *, struct sockaddr *, size_t);
1604:	size_t rpc_max_bc_payload(struct rpc_clnt *);
1589:	size_t rpc_max_payload(struct rpc_clnt *);
1569:	struct net *rpc_net_ns(struct rpc_clnt *);
1617:	unsigned int rpc_num_bc_slots(struct rpc_clnt *);
1360:	size_t rpc_peeraddr(struct rpc_clnt *, struct sockaddr *, size_t);
1387:	const char *rpc_peeraddr2str(struct rpc_clnt *, enum rpc_display_format_t);
1334:	void rpc_prepare_reply_pages(struct rpc_rqst *, struct page **, unsigned int, unsigned int, unsigned int);
1679:	const char *rpc_proc_name(const struct rpc_task *);
1012:	void rpc_release_client(struct rpc_clnt *);
1659:	int rpc_restart_call(struct rpc_task *);
1670:	int rpc_restart_call_prepare(struct rpc_task *);
1294:	struct rpc_task *rpc_run_bc_task(struct rpc_rqst *);
1201:	struct rpc_task *rpc_run_task(const struct rpc_task_setup *);
3203:	void rpc_set_connect_timeout(struct rpc_clnt *, unsigned long, unsigned long);
1552:	void rpc_setbufsize(struct rpc_clnt *, unsigned int, unsigned int);
931:	void rpc_shutdown_client(struct rpc_clnt *);
719:	int rpc_switch_client_transport(struct rpc_clnt *, struct xprt_create *, const struct rpc_timeout *);
1062:	struct rpc_xprt *rpc_task_get_xprt(struct rpc_clnt *, struct rpc_xprt *);
1105:	void rpc_task_release_client(struct rpc_task *);
1091:	void rpc_task_release_transport(struct rpc_task *);
621:	static struct rpc_clnt *__rpc_clone_client(struct rpc_create_args *, struct rpc_clnt *);
1844:	static void call_allocate(struct rpc_task *);
2326:	static void call_bc_encode(struct rpc_task *);
2337:	static void call_bc_transmit(struct rpc_task *);
2350:	static void call_bc_transmit_status(struct rpc_task *);
2000:	static void call_bind(struct rpc_task *);
2025:	static void call_bind_status(struct rpc_task *);
2108:	static void call_connect(struct rpc_task *);
2138:	static void call_connect_status(struct rpc_task *);
2547:	static void call_decode(struct rpc_task *);
1934:	static void call_encode(struct rpc_task *);
1791:	static void call_refresh(struct rpc_task *);
1803:	static void call_refreshresult(struct rpc_task *);
1732:	static void call_reserve(struct rpc_task *);
1745:	static void call_reserveresult(struct rpc_task *);
1780:	static void call_retry_reserve(struct rpc_task *);
1713:	static void call_start(struct rpc_task *);
2409:	static void call_status(struct rpc_task *);
2234:	static void call_transmit(struct rpc_task *);
2259:	static void call_transmit_status(struct rpc_task *);
2867:	static void rpc_cb_add_xprt_done(struct rpc_task *, void *);
2875:	static void rpc_cb_add_xprt_release(void *);
2485:	static void rpc_check_timeout(struct rpc_task *);
291:	static int rpc_client_register(struct rpc_clnt *, rpc_authflavor_t, const char *);
913:	static int rpc_clnt_disconnect_xprt(struct rpc_clnt *, struct rpc_xprt *, void *);
265:	static struct rpc_xprt *rpc_clnt_set_transport(struct rpc_clnt *, struct rpc_xprt *, const struct rpc_timeout *);
456:	static struct rpc_clnt *rpc_create_xprt(struct rpc_create_args *, struct rpc_xprt *);
2644:	static int rpc_decode_header(struct rpc_task *, struct xdr_stream *);
1189:	static void rpc_default_callback(struct rpc_task *, void *);
950:	static void rpc_free_client_work(struct work_struct *);
360:	static struct rpc_clnt *rpc_new_client(const struct rpc_create_args *, struct rpc_xprt_switch *, struct rpc_xprt *, struct rpc_clnt *);
2788:	static void rpc_null_call_prepare(struct rpc_task *, void *);
235:	static int rpc_pipefs_event(struct notifier_block *, unsigned long, void *);
119:	static struct dentry *rpc_setup_pipedir_sb(struct super_block *, struct rpc_clnt *);
1139:	static void rpc_task_set_transport(struct rpc_task *, struct rpc_clnt *);
3137:	static int rpc_xprt_offline(struct rpc_clnt *, struct rpc_xprt *, void *);
3189:	static int rpc_xprt_set_connect_timeout(struct rpc_clnt *, struct rpc_xprt *, void *);
2772:	static int rpcproc_decode_null(struct rpc_rqst *, struct xdr_stream *, void *);
2767:	static void rpcproc_encode_null(struct rpc_rqst *, struct xdr_stream *, const void *);

File net/sunrpc/rpc_pipe.c:
1411:	bool gssd_running(struct net *);
1486:	int register_rpc_pipefs(void);
920:	int rpc_add_pipe_dir_object(struct net *, struct rpc_pipe_dir_head *, struct rpc_pipe_dir_object *);
1110:	struct dentry *rpc_create_cache_dir(struct dentry *, const char *, umode_t, struct cache_detail *);
1050:	struct dentry *rpc_create_client_dir(struct dentry *, const char *, struct rpc_clnt *);
1191:	struct dentry *rpc_d_lookup_sb(const struct super_block *, const unsigned char *);
558:	void rpc_destroy_pipe_data(struct rpc_pipe *);
969:	struct rpc_pipe_dir_object *rpc_find_or_alloc_pipe_dir_object(struct net *, struct rpc_pipe_dir_head *, int (*)(struct rpc_pipe_dir_object *, void *), struct rpc_pipe_dir_object *(*)(void *), void *);
1225:	struct super_block *rpc_get_sb_net(const struct net *);
865:	void rpc_init_pipe_dir_head(struct rpc_pipe_dir_head *);
878:	void rpc_init_pipe_dir_object(struct rpc_pipe_dir_object *, const struct rpc_pipe_dir_object_ops *, void *);
564:	struct rpc_pipe *rpc_mkpipe_data(const struct rpc_pipe_ops *, int);
803:	struct dentry *rpc_mkpipe_dentry(struct dentry *, const char *, void *, struct rpc_pipe *);
104:	ssize_t rpc_pipe_generic_upcall(struct file *, struct rpc_pipe_msg *, char *, size_t);
1212:	void rpc_pipefs_exit_net(struct net *);
1199:	int rpc_pipefs_init_net(struct net *);
52:	int rpc_pipefs_notifier_register(struct notifier_block *);
58:	void rpc_pipefs_notifier_unregister(struct notifier_block *);
1237:	void rpc_put_sb_net(const struct net *);
135:	int rpc_queue_upcall(struct rpc_pipe *, struct rpc_pipe_msg *);
1117:	void rpc_remove_cache_dir(struct dentry *);
1069:	int rpc_remove_client_dir(struct rpc_clnt *);
945:	void rpc_remove_pipe_dir_object(struct net *, struct rpc_pipe_dir_head *, struct rpc_pipe_dir_object *);
845:	int rpc_unlink(struct dentry *);
1512:	void unregister_rpc_pipefs(void);
488:	static int __rpc_create_common(struct inode *, struct dentry *, umode_t, const struct file_operations *, void *);
650:	static void __rpc_depopulate(struct dentry *, const struct rpc_filelist *, int, int);
597:	static int __rpc_rmdir(struct inode *, struct dentry *);
623:	static int __rpc_rmpipe(struct inode *, struct dentry *);
610:	static int __rpc_unlink(struct inode *, struct dentry *);
1254:	static ssize_t dummy_downcall(struct file *, const char *, size_t);
1476:	static void init_once(void *);
197:	static struct inode *rpc_alloc_inode(struct super_block *);
1098:	static int rpc_cachedir_populate(struct dentry *, void *);
1027:	static int rpc_clntdir_populate(struct dentry *, void *);
1279:	static int rpc_dummy_info_open(struct inode *, struct file *);
1270:	static int rpc_dummy_info_show(struct seq_file *, void *);
1359:	static int rpc_fill_super(struct super_block *, struct fs_context *);
207:	static void rpc_free_inode(struct inode *);
1425:	static void rpc_fs_free_fc(struct fs_context *);
1420:	static int rpc_fs_get_tree(struct fs_context *);
415:	static int rpc_info_open(struct inode *, struct file *);
439:	static int rpc_info_release(struct inode *, struct file *);
1436:	static int rpc_init_fs_context(struct fs_context *);
1444:	static void rpc_kill_sb(struct super_block *);
736:	static struct dentry *rpc_mkdir_populate(struct dentry *, const char *, umode_t, void *, int (*)(struct dentry *, void *), void *);
357:	static long rpc_pipe_ioctl(struct file *, unsigned int, unsigned long);
213:	static int rpc_pipe_open(struct inode *, struct file *);
339:	static __poll_t rpc_pipe_poll(struct file *, struct poll_table_struct *);
281:	static ssize_t rpc_pipe_read(struct file *, char *, size_t, loff_t *);
240:	static int rpc_pipe_release(struct inode *, struct file *);
325:	static ssize_t rpc_pipe_write(struct file *, const char *, size_t, loff_t *);
693:	static int rpc_populate(struct dentry *, const struct rpc_filelist *, int, int, void *);
398:	static int rpc_show_info(struct seq_file *, void *);
83:	static void rpc_timeout_upcall_queue(struct work_struct *);

File net/sunrpc/rpcb_clnt.c:
323:	int rpcb_create_local(struct net *);
646:	void rpcb_getport_async(struct rpc_task *);
177:	void rpcb_put_local(struct net *);
431:	int rpcb_register(struct net *, u32, u32, int, unsigned short);
565:	int rpcb_v4_register(struct net *, const u32, const u32, const struct sockaddr *, const char *);
597:	static struct rpc_task *rpcb_call_async(struct rpc_clnt *, struct rpcbind_args *, const struct rpc_procinfo *);
885:	static int rpcb_dec_getaddr(struct rpc_rqst *, struct xdr_stream *, void *);
818:	static int rpcb_dec_getport(struct rpc_rqst *, struct xdr_stream *, void *);
839:	static int rpcb_dec_set(struct rpc_rqst *, struct xdr_stream *, void *);
870:	static void rpcb_enc_getaddr(struct rpc_rqst *, struct xdr_stream *, const void *);
805:	static void rpcb_enc_mapping(struct rpc_rqst *, struct xdr_stream *, const void *);
768:	static void rpcb_getport_done(struct rpc_task *, void *);
153:	static void rpcb_map_release(void *);

File net/sunrpc/sched.c:
800:	void rpc_delay(struct rpc_task *, unsigned long);
1318:	void rpc_destroy_mempool(void);
271:	void rpc_destroy_wait_queue(struct rpc_wait_queue *);
1017:	void rpc_execute(struct rpc_task *);
884:	void rpc_exit(struct rpc_task *, int);
837:	void rpc_exit_task(struct rpc_task *);
1086:	void rpc_free(struct rpc_task *);
1329:	int rpc_init_mempool(void);
259:	void rpc_init_priority_wait_queue(struct rpc_wait_queue *, const char *);
265:	void rpc_init_wait_queue(struct rpc_wait_queue *, const char *);
1055:	int rpc_malloc(struct rpc_task *);
1144:	struct rpc_task *rpc_new_task(const struct rpc_task_setup *);
809:	void rpc_prepare_task(struct rpc_task *);
1231:	void rpc_put_task(struct rpc_task *);
1237:	void rpc_put_task_async(struct rpc_task *);
892:	void rpc_release_calldata(const struct rpc_call_ops *, void *);
856:	void rpc_signal_task(struct rpc_task *);
447:	void rpc_sleep_on(struct rpc_wait_queue *, struct rpc_task *, rpc_action);
481:	void rpc_sleep_on_priority(struct rpc_wait_queue *, struct rpc_task *, int);
465:	void rpc_sleep_on_priority_timeout(struct rpc_wait_queue *, struct rpc_task *, unsigned long, int);
430:	void rpc_sleep_on_timeout(struct rpc_wait_queue *, struct rpc_task *, rpc_action, unsigned long);
60:	gfp_t rpc_task_gfp_mask(void);
68:	bool rpc_task_set_rpc_status(struct rpc_task *, int);
76:	unsigned long rpc_task_timeout(const struct rpc_task *);
873:	void rpc_task_try_cancel(struct rpc_task *, int);
343:	int rpc_wait_for_completion_task(struct rpc_task *);
725:	void rpc_wake_up(struct rpc_wait_queue *);
681:	struct rpc_task *rpc_wake_up_first(struct rpc_wait_queue *, bool (*)(struct rpc_task *, void *), void *);
662:	struct rpc_task *rpc_wake_up_first_on_wq(struct workqueue_struct *, struct rpc_wait_queue *, bool (*)(struct rpc_task *, void *), void *);
696:	struct rpc_task *rpc_wake_up_next(struct rpc_wait_queue *);
556:	void rpc_wake_up_queued_task(struct rpc_wait_queue *, struct rpc_task *);
590:	void rpc_wake_up_queued_task_set_status(struct rpc_wait_queue *, struct rpc_task *, int);
757:	void rpc_wake_up_status(struct rpc_wait_queue *, int);
1270:	void rpciod_down(void);
1265:	int rpciod_up(void);
791:	static void __rpc_atrun(struct rpc_task *);
910:	static void __rpc_execute(struct rpc_task *);
765:	static void __rpc_queue_timer_fn(struct work_struct *);
391:	static void __rpc_sleep_on_priority(struct rpc_wait_queue *, struct rpc_task *, unsigned char);
400:	static void __rpc_sleep_on_priority_timeout(struct rpc_wait_queue *, struct rpc_task *, unsigned long, unsigned char);
1194:	static void rpc_async_release(struct work_struct *);
1030:	static void rpc_async_schedule(struct work_struct *);
1223:	static void rpc_do_put_task(struct rpc_task *, struct workqueue_struct *);
566:	static bool rpc_task_action_set_status(struct rpc_task *, void *);
277:	static int rpc_wait_bit_killable(struct wait_bit_key *, int);
688:	static bool rpc_wake_up_next_func(struct rpc_task *, void *);
527:	static struct rpc_task *rpc_wake_up_task_on_wq_queue_action_locked(struct workqueue_struct *, struct rpc_wait_queue *, struct rpc_task *, bool (*)(struct rpc_task *, void *), void *);

File net/sunrpc/socklib.c:
170:	int csum_partial_copy_to_xdr(struct xdr_buf *, struct sk_buff *);
264:	int xprt_sock_sendmsg(struct socket *, struct msghdr *, struct xdr_buf *, unsigned int, rpc_fraghdr, unsigned int *);
90:	static ssize_t xdr_partial_copy_from_skb(struct xdr_buf *, unsigned int, struct xdr_skb_reader *, xdr_skb_read_actor);
66:	static size_t xdr_skb_read_and_csum_bits(struct xdr_skb_reader *, void *, size_t);
47:	static size_t xdr_skb_read_bits(struct xdr_skb_reader *, void *, size_t);

File net/sunrpc/stats.c:
119:	struct rpc_iostats *rpc_alloc_iostats(struct rpc_clnt *);
250:	void rpc_clnt_show_stats(struct seq_file *, struct rpc_clnt *);
195:	void rpc_count_iostats(const struct rpc_task *, struct rpc_iostats *);
149:	void rpc_count_iostats_metrics(const struct rpc_task *, struct rpc_iostats *);
138:	void rpc_free_iostats(struct rpc_iostats *);
339:	void rpc_proc_exit(struct net *);
326:	int rpc_proc_init(struct net *);
293:	struct proc_dir_entry *rpc_proc_register(struct net *, struct rpc_stat *);
300:	void rpc_proc_unregister(struct net *, const char *);
310:	struct proc_dir_entry *svc_proc_register(struct net *, struct svc_stat *, const struct proc_ops *);
317:	void svc_proc_unregister(struct net *, const char *);
82:	void svc_seq_show(struct seq_file *, const struct svc_stat *);
242:	static int do_print_stats(struct rpc_clnt *, struct rpc_xprt *, void *);
67:	static int rpc_proc_open(struct inode *, struct file *);
37:	static int rpc_proc_show(struct seq_file *, void *);

File net/sunrpc/sunrpc_syms.c:
132:	static void cleanup_sunrpc(void);
88:	static int init_sunrpc(void);
69:	static void sunrpc_exit_net(struct net *);
33:	static int sunrpc_init_net(struct net *);

File net/sunrpc/svc.c:
1481:	int bc_svc_process(struct svc_serv *, struct rpc_rqst *, struct svc_rqst *);
429:	int svc_bind(struct svc_serv *, struct net *);
528:	struct svc_serv *svc_create(struct svc_program *, unsigned int, int (*)(void *));
543:	struct svc_serv *svc_create_pooled(struct svc_program *, unsigned int, int (*)(void *));
565:	void svc_destroy(struct kref *);
1596:	int svc_encode_result_payload(struct svc_rqst *, unsigned int, unsigned int);
861:	void svc_exit_thread(struct svc_rqst *);
1655:	char *svc_fill_symlink_pathname(struct svc_rqst *, struct kvec *, void *, size_t);
1611:	unsigned int svc_fill_write_vector(struct svc_rqst *, struct xdr_buf *);
1172:	__be32 svc_generic_init_request(struct svc_rqst *, const struct svc_program *, struct svc_process_info *);
1021:	int svc_generic_rpcbind_set(struct net *, const struct svc_program *, u32, int, unsigned short, unsigned short);
1562:	u32 svc_max_payload(const struct svc_rqst *);
370:	struct svc_pool *svc_pool_for_cpu(struct svc_serv *);
1579:	const char *svc_proc_name(const struct svc_rqst *);
1431:	int svc_process(struct svc_rqst *);
1063:	int svc_register(const struct svc_serv *, struct net *, const int, const unsigned short, const unsigned short);
405:	void svc_rpcb_cleanup(struct svc_serv *, struct net *);
391:	int svc_rpcb_setup(struct svc_serv *, struct net *);
1009:	int svc_rpcbind_set_version(struct net *, const struct svc_program *, u32, int, unsigned short, unsigned short);
632:	struct svc_rqst *svc_rqst_alloc(struct svc_serv *, struct svc_pool *, int);
848:	void svc_rqst_free(struct svc_rqst *);
830:	void svc_rqst_replace_page(struct svc_rqst *, struct page *);
804:	int svc_set_num_threads(struct svc_serv *, struct svc_pool *, int);
456:	static struct svc_serv *__svc_create(struct svc_program *, unsigned int, int, int (*)(void *));
105:	static int param_get_pool_mode(char *, const struct kernel_param *);
75:	static int param_set_pool_mode(const char *, const struct kernel_param *);
1228:	static int svc_process_common(struct svc_rqst *, struct kvec *, struct kvec *);
1124:	static void svc_unregister(const struct svc_serv *, struct net *);

File net/sunrpc/svc_xprt.c:
279:	void svc_add_new_perm_xprt(struct svc_serv *, struct svc_xprt *);
995:	void svc_age_temp_xprts_now(struct svc_serv *, struct sockaddr *);
909:	void svc_drop(struct svc_rqst *);
1309:	struct svc_xprt *svc_find_xprt(struct svc_serv *, const char *, struct net *, const sa_family_t, const unsigned short);
1461:	int svc_pool_stats_open(struct svc_serv *, struct file *);
601:	int svc_port_is_privileged(struct sockaddr *);
378:	char *svc_print_addr(struct svc_rqst *, char *, size_t);
120:	int svc_print_xprts(char *, int);
859:	int svc_recv(struct svc_rqst *, long);
77:	int svc_reg_xprt_class(struct svc_xprt_class *);
522:	void svc_reserve(struct svc_rqst *, int);
919:	int svc_send(struct svc_rqst *);
99:	void svc_unreg_xprt_class(struct svc_xprt_class *);
575:	void svc_wake_up(struct svc_serv *);
1073:	void svc_xprt_close(struct svc_xprt *);
357:	void svc_xprt_copy_addrs(struct svc_rqst *, struct svc_xprt *);
338:	int svc_xprt_create(struct svc_serv *, const char *, struct net *, const int, const unsigned short, int, const struct cred *);
150:	void svc_xprt_deferred_close(struct svc_xprt *);
1156:	void svc_xprt_destroy_all(struct svc_serv *, struct net *);
447:	void svc_xprt_enqueue(struct svc_xprt *);
186:	void svc_xprt_init(struct net *, struct svc_xprt_class *, struct svc_xprt *, struct svc_serv *);
1364:	int svc_xprt_names(struct svc_serv *, char *, const int);
176:	void svc_xprt_put(struct svc_xprt *);
261:	void svc_xprt_received(struct svc_xprt *);
288:	static int _svc_xprt_create(struct svc_serv *, const char *, struct net *, const int, const unsigned short, int, const struct cred *);
952:	static void svc_age_temp_xprts(struct timer_list *);
1205:	static struct cache_deferred_req *svc_defer(struct cache_req *);
1250:	static int svc_deferred_recv(struct svc_rqst *);
1041:	static void svc_delete_xprt(struct svc_xprt *);
1411:	static void *svc_pool_stats_next(struct seq_file *, void *, loff_t *);
1435:	static int svc_pool_stats_show(struct seq_file *, void *);
1399:	static void *svc_pool_stats_start(struct seq_file *, loff_t *);
1431:	static void svc_pool_stats_stop(struct seq_file *, void *);
1173:	static void svc_revisit(struct cache_deferred_req *, int);
537:	static void svc_xprt_release(struct svc_rqst *);

File net/sunrpc/svcauth.c:
225:	void auth_domain_cleanup(void);
192:	struct auth_domain *auth_domain_find(char *);
169:	struct auth_domain *auth_domain_lookup(char *, struct auth_domain *);
162:	void auth_domain_put(struct auth_domain *);
115:	int svc_auth_register(rpc_authflavor_t, struct auth_ops *);
130:	void svc_auth_unregister(rpc_authflavor_t);
64:	int svc_authenticate(struct svc_rqst *);
100:	int svc_authorise(struct svc_rqst *);
89:	int svc_set_client(struct svc_rqst *);

File net/sunrpc/svcauth_unix.c:
951:	int ip_map_cache_create(struct net *);
969:	void ip_map_cache_destroy(struct net *);
386:	void svcauth_unix_info_release(struct svc_xprt *);
327:	void svcauth_unix_purge(struct net *);
659:	int svcauth_unix_set_client(struct svc_rqst *);
56:	struct auth_domain *unix_domain_find(char *);
590:	int unix_gid_cache_create(struct net *);
608:	void unix_gid_cache_destroy(struct net *);
307:	static int __ip_map_update(struct cache_detail *, struct ip_map *, struct unix_domain *, time64_t);
143:	static struct cache_head *ip_map_alloc(void);
127:	static void ip_map_init(struct cache_head *, struct cache_head *);
120:	static int ip_map_match(struct cache_head *, struct cache_head *);
177:	static int ip_map_parse(struct cache_detail *, char *, int);
105:	static void ip_map_put(struct kref *);
157:	static void ip_map_request(struct cache_detail *, struct cache_head *, char **, int *);
259:	static int ip_map_show(struct seq_file *, struct cache_detail *, struct cache_head *);
152:	static int ip_map_upcall(struct cache_detail *, struct cache_head *);
733:	static int svcauth_null_accept(struct svc_rqst *);
769:	static int svcauth_null_release(struct svc_rqst *);
793:	static int svcauth_tls_accept(struct svc_rqst *);
852:	static int svcauth_unix_accept(struct svc_rqst *);
51:	static void svcauth_unix_domain_release(struct auth_domain *);
42:	static void svcauth_unix_domain_release_rcu(struct callback_head *);
911:	static int svcauth_unix_release(struct svc_rqst *);
449:	static struct cache_head *unix_gid_alloc(void);
435:	static void unix_gid_init(struct cache_head *, struct cache_head *);
619:	static struct unix_gid *unix_gid_lookup(struct cache_detail *, kuid_t);
429:	static int unix_gid_match(struct cache_head *, struct cache_head *);
477:	static int unix_gid_parse(struct cache_detail *, char *, int);
419:	static void unix_gid_put(struct kref *);
463:	static void unix_gid_request(struct cache_detail *, struct cache_head *, char **, int *);
548:	static int unix_gid_show(struct seq_file *, struct cache_detail *, struct cache_head *);
458:	static int unix_gid_upcall(struct cache_detail *, struct cache_head *);
441:	static void unix_gid_update(struct cache_head *, struct cache_head *);
135:	static void update(struct cache_head *, struct cache_head *);

File net/sunrpc/svcsock.c:
1367:	int svc_addsock(struct svc_serv *, const int, char *, const size_t, const struct cred *);
1339:	bool svc_alien_sock(struct net *, int);
1230:	void svc_cleanup_xprt_sock(void);
1224:	void svc_init_xprt_sock(void);
1272:	void svc_sock_update_bufs(struct svc_serv *);
1413:	static struct svc_xprt *svc_create_socket(struct svc_serv *, int, struct net *, struct sockaddr *, int, int);
309:	static void svc_data_ready(struct sock *);
1290:	static struct svc_sock *svc_setup_socket(struct svc_serv *, struct socket *, int);
1491:	static void svc_sock_detach(struct svc_xprt *);
1523:	static void svc_sock_free(struct svc_xprt *);
175:	static int svc_sock_result_payload(struct svc_rqst *, unsigned int, unsigned int);
298:	static void svc_sock_secure_port(struct svc_rqst *);
734:	static struct svc_xprt *svc_tcp_accept(struct svc_xprt *);
1194:	static struct svc_xprt *svc_tcp_create(struct svc_serv *, struct net *, struct sockaddr *, int, int);
339:	static int svc_tcp_has_wspace(struct svc_xprt *);
348:	static void svc_tcp_kill_temp_xprt(struct svc_xprt *);
686:	static void svc_tcp_listen_data_ready(struct sock *);
972:	static int svc_tcp_recvfrom(struct svc_rqst *);
118:	static void svc_tcp_release_rqst(struct svc_rqst *);
1152:	static int svc_tcp_sendto(struct svc_rqst *);
1508:	static void svc_tcp_sock_detach(struct svc_xprt *);
717:	static void svc_tcp_state_change(struct sock *);
611:	static struct svc_xprt *svc_udp_accept(struct svc_xprt *);
621:	static struct svc_xprt *svc_udp_create(struct svc_serv *, struct net *, struct sockaddr *, int, int);
593:	static int svc_udp_has_wspace(struct svc_xprt *);
617:	static void svc_udp_kill_temp_xprt(struct svc_xprt *);
420:	static int svc_udp_recvfrom(struct svc_rqst *);
127:	static void svc_udp_release_rqst(struct svc_rqst *);
543:	static int svc_udp_sendto(struct svc_rqst *);
326:	static void svc_write_space(struct sock *);

File net/sunrpc/sysfs.c:
589:	void rpc_sysfs_client_destroy(struct rpc_clnt *);
516:	void rpc_sysfs_client_setup(struct rpc_clnt *, struct rpc_xprt_switch *, struct net *);
450:	void rpc_sysfs_exit(void);
337:	int rpc_sysfs_init(void);
616:	void rpc_sysfs_xprt_destroy(struct rpc_xprt *);
569:	void rpc_sysfs_xprt_setup(struct rpc_xprt_switch *, struct rpc_xprt *, gfp_t);
604:	void rpc_sysfs_xprt_switch_destroy(struct rpc_xprt_switch *);
545:	void rpc_sysfs_xprt_switch_setup(struct rpc_xprt_switch *, struct rpc_xprt *, gfp_t);
17:	static void free_xprt_addr(struct callback_head *);
384:	static const void *rpc_sysfs_client_namespace(const struct kobject *);
360:	static void rpc_sysfs_client_release(struct kobject *);
34:	static const struct kobj_ns_type_operations *rpc_sysfs_object_child_ns_type(const struct kobject *);
28:	static void rpc_sysfs_object_release(struct kobject *);
89:	static ssize_t rpc_sysfs_xprt_dstaddr_show(struct kobject *, struct kobj_attribute *, char *);
228:	static ssize_t rpc_sysfs_xprt_dstaddr_store(struct kobject *, struct kobj_attribute *, const char *, size_t);
132:	static ssize_t rpc_sysfs_xprt_info_show(struct kobject *, struct kobj_attribute *, char *);
394:	static const void *rpc_sysfs_xprt_namespace(const struct kobject *);
376:	static void rpc_sysfs_xprt_release(struct kobject *);
106:	static ssize_t rpc_sysfs_xprt_srcaddr_show(struct kobject *, struct kobj_attribute *, char *);
286:	static ssize_t rpc_sysfs_xprt_state_change(struct kobject *, struct kobj_attribute *, const char *, size_t);
165:	static ssize_t rpc_sysfs_xprt_state_show(struct kobject *, struct kobj_attribute *, char *);
209:	static ssize_t rpc_sysfs_xprt_switch_info_show(struct kobject *, struct kobj_attribute *, char *);
389:	static const void *rpc_sysfs_xprt_switch_namespace(const struct kobject *);
368:	static void rpc_sysfs_xprt_switch_release(struct kobject *);

File net/sunrpc/timer.c:
110:	unsigned long rpc_calc_rto(struct rpc_rtt *, unsigned int);
35:	void rpc_init_rtt(struct rpc_rtt *, unsigned long);
61:	void rpc_update_rtt(struct rpc_rtt *, unsigned int, long);

File net/sunrpc/xdr.c:
984:	void __xdr_commit_encode(struct xdr_stream *);
393:	void _copy_from_pages(char *, struct page **, size_t, size_t);
1814:	int read_bytes_from_xdr_buf(const struct xdr_buf *, unsigned int, void *, unsigned int);
1846:	int write_bytes_to_xdr_buf(const struct xdr_buf *, unsigned int, void *, unsigned int);
144:	int xdr_alloc_bvec(struct xdr_buf *, gfp_t);
1583:	void xdr_buf_from_iov(const struct kvec *, struct xdr_buf *);
136:	size_t xdr_buf_pagecount(const struct xdr_buf *);
1606:	int xdr_buf_subsegment(const struct xdr_buf *, struct xdr_buf *, unsigned int, unsigned int);
1765:	void xdr_buf_trim(struct xdr_buf *, unsigned int);
2075:	int xdr_decode_array2(const struct xdr_buf *, unsigned int, struct xdr_array2_desc *);
41:	__be32 *xdr_decode_netobj(__be32 *, struct xdr_netobj *);
106:	__be32 *xdr_decode_string_inplace(__be32 *, char **, unsigned int *, unsigned int);
1860:	int xdr_decode_word(const struct xdr_buf *, unsigned int, u32 *);
2085:	int xdr_encode_array2(const struct xdr_buf *, unsigned int, struct xdr_array2_desc *);
29:	__be32 *xdr_encode_netobj(__be32 *, const struct xdr_netobj *);
91:	__be32 *xdr_encode_opaque(__be32 *, const void *, unsigned int);
67:	__be32 *xdr_encode_opaque_fixed(__be32 *, const void *, unsigned int);
99:	__be32 *xdr_encode_string(__be32 *, const char *);
1873:	int xdr_encode_word(const struct xdr_buf *, unsigned int, u32);
1569:	void xdr_enter_page(struct xdr_stream *, unsigned int);
162:	void xdr_free_bvec(struct xdr_buf *);
1358:	void xdr_init_decode(struct xdr_stream *, struct xdr_buf *, __be32 *, struct rpc_rqst *);
1382:	void xdr_init_decode_pages(struct xdr_stream *, struct xdr_buf *, struct page **, unsigned int);
922:	void xdr_init_encode(struct xdr_stream *, struct xdr_buf *, __be32 *, struct rpc_rqst *);
957:	void xdr_init_encode_pages(struct xdr_stream *, struct xdr_buf *, struct page **, struct rpc_rqst *);
1443:	__be32 *xdr_inline_decode(struct xdr_stream *, size_t);
178:	void xdr_inline_pages(struct xdr_buf *, unsigned int, struct page **, unsigned int, unsigned int);
899:	unsigned int xdr_page_pos(const struct xdr_stream *);
2096:	int xdr_process_buf(const struct xdr_buf *, unsigned int, unsigned int, int (*)(struct scatterlist *, void *), void *);
1512:	unsigned int xdr_read_pages(struct xdr_stream *, unsigned int);
1059:	__be32 *xdr_reserve_space(struct xdr_stream *, size_t);
1093:	int xdr_reserve_space_vec(struct xdr_stream *, struct kvec *, size_t);
1207:	int xdr_restrict_buflen(struct xdr_stream *, int);
1540:	void xdr_set_pagelen(struct xdr_stream *, unsigned int);
867:	void xdr_shift_buf(struct xdr_buf *, size_t);
2174:	ssize_t xdr_stream_decode_opaque(struct xdr_stream *, void *, size_t);
2200:	ssize_t xdr_stream_decode_opaque_dup(struct xdr_stream *, void **, size_t, gfp_t);
2229:	ssize_t xdr_stream_decode_string(struct xdr_stream *, char *, size_t);
2258:	ssize_t xdr_stream_decode_string_dup(struct xdr_stream *, char **, size_t, gfp_t);
1711:	unsigned int xdr_stream_move_subsegment(struct xdr_stream *, unsigned int, unsigned int, unsigned int);
877:	unsigned int xdr_stream_pos(const struct xdr_stream *);
1669:	bool xdr_stream_subsegment(struct xdr_stream *, struct xdr_buf *, unsigned int);
1738:	unsigned int xdr_stream_zero(struct xdr_stream *, unsigned int, unsigned int);
126:	void xdr_terminate_string(const struct xdr_buf *, const u32);
1145:	void xdr_truncate_encode(struct xdr_stream *, size_t);
1235:	void xdr_write_pages(struct xdr_stream *, struct page **, unsigned int, unsigned int);
346:	static void _copy_to_pages(struct page **, size_t, const char *, size_t);
1476:	static unsigned int xdr_align_pages(struct xdr_stream *, unsigned int);
656:	static void xdr_buf_head_shift_right(const struct xdr_buf *, unsigned int, unsigned int, unsigned int);
640:	static void xdr_buf_pages_shift_right(const struct xdr_buf *, unsigned int, unsigned int, unsigned int);
675:	static void xdr_buf_tail_copy_left(const struct xdr_buf *, unsigned int, unsigned int, unsigned int);
509:	static void xdr_buf_try_expand(struct xdr_buf *, unsigned int);
1001:	static __be32 *xdr_get_next_encode_buffer(struct xdr_stream *, size_t);
1342:	static bool xdr_set_next_buffer(struct xdr_stream *);
1321:	static void xdr_set_page(struct xdr_stream *, unsigned int, unsigned int);
1882:	static int xdr_xcode_array2(const struct xdr_buf *, unsigned int, struct xdr_array2_desc *, int);

File net/sunrpc/xprt.c:
1647:	void xprt_add_backlog(struct rpc_xprt *, struct rpc_task *);
562:	void xprt_adjust_cwnd(struct rpc_xprt *, struct rpc_task *, int);
697:	int xprt_adjust_timeout(struct rpc_rqst *);
1804:	struct rpc_xprt *xprt_alloc(struct net *, size_t, unsigned int, unsigned int);
1720:	void xprt_alloc_slot(struct rpc_xprt *, struct rpc_task *);
1782:	void xprt_cleanup_ids(void);
1214:	void xprt_complete_rqst(struct rpc_task *, int);
823:	void xprt_conditional_disconnect(struct rpc_xprt *, unsigned int);
920:	void xprt_connect(struct rpc_task *);
2038:	struct rpc_xprt *xprt_create_transport(struct xprt_create *);
2180:	void xprt_delete_locked(struct rpc_xprt *, struct rpc_xprt_switch *);
753:	void xprt_disconnect_done(struct rpc_xprt *);
1514:	void xprt_end_transmit(struct rpc_task *);
233:	int xprt_find_transport_ident(const char *);
785:	void xprt_force_disconnect(struct rpc_xprt *);
1838:	void xprt_free(struct rpc_xprt *);
1758:	void xprt_free_slot(struct rpc_xprt *, struct rpc_rqst *);
2142:	struct rpc_xprt *xprt_get(struct rpc_xprt *);
1986:	void xprt_init_bc_request(struct rpc_rqst *, struct rpc_task *);
878:	bool xprt_lock_connect(struct rpc_xprt *, struct rpc_task *, void *);
1063:	struct rpc_rqst *xprt_lookup_rqst(struct rpc_xprt *, __be32);
1095:	void xprt_pin_rqst(struct rpc_rqst *);
1495:	bool xprt_prepare_transmit(struct rpc_task *);
2155:	void xprt_put(struct rpc_xprt *);
977:	void xprt_reconnect_backoff(struct rpc_xprt *, unsigned long);
960:	unsigned long xprt_reconnect_delay(const struct rpc_xprt *);
102:	int xprt_register_transport(struct xprt_class *);
1949:	void xprt_release(struct rpc_task *);
518:	void xprt_release_rqst_cong(struct rpc_task *);
447:	void xprt_release_write(struct rpc_xprt *, struct rpc_task *);
419:	void xprt_release_xprt(struct rpc_xprt *, struct rpc_task *);
437:	void xprt_release_xprt_cong(struct rpc_xprt *, struct rpc_task *);
1436:	void xprt_request_dequeue_xprt(struct rpc_task *);
1143:	int xprt_request_enqueue_receive(struct rpc_task *);
1337:	void xprt_request_enqueue_transmit(struct rpc_task *);
499:	bool xprt_request_get_cong(struct rpc_xprt *, struct rpc_rqst *);
1485:	bool xprt_request_need_retransmit(struct rpc_task *);
1297:	void xprt_request_wait_receive(struct rpc_task *);
1910:	void xprt_reserve(struct rpc_task *);
265:	int xprt_reserve_xprt(struct rpc_xprt *, struct rpc_task *);
329:	int xprt_reserve_xprt_cong(struct rpc_xprt *, struct rpc_task *);
1932:	void xprt_retry_reserve(struct rpc_task *);
2162:	void xprt_set_offline_locked(struct rpc_xprt *, struct rpc_xprt_switch *);
2171:	void xprt_set_online_locked(struct rpc_xprt *, struct rpc_xprt_switch *);
1608:	void xprt_transmit(struct rpc_task *);
898:	void xprt_unlock_connect(struct rpc_xprt *, void *);
1107:	void xprt_unpin_rqst(struct rpc_rqst *);
134:	int xprt_unregister_transport(struct xprt_class *);
1192:	void xprt_update_rtt(struct rpc_task *);
609:	void xprt_wait_for_buffer_space(struct rpc_xprt *);
1258:	void xprt_wait_for_reply_request_def(struct rpc_task *);
1274:	void xprt_wait_for_reply_request_rtt(struct rpc_task *);
592:	void xprt_wake_pending_tasks(struct rpc_xprt *, int);
1666:	bool xprt_wake_up_backlog(struct rpc_xprt *, struct rpc_rqst *);
633:	bool xprt_write_space(struct rpc_xprt *);
376:	static bool __xprt_lock_write_func(struct rpc_task *, void *);
384:	static void __xprt_lock_write_next(struct rpc_xprt *);
397:	static void __xprt_lock_write_next_cong(struct rpc_xprt *);
1654:	static bool __xprt_set_rq(struct rpc_task *, void *);
732:	static void xprt_autoclose(struct work_struct *);
1641:	static void xprt_complete_request_init(struct rpc_task *);
2108:	static void xprt_destroy(struct rpc_xprt *);
2079:	static void xprt_destroy_cb(struct work_struct *);
852:	static void xprt_init_autodisconnect(struct timer_list *);
1391:	static void xprt_request_dequeue_transmit_locked(struct rpc_task *);
1872:	static void xprt_request_init(struct rpc_task *);
769:	static void xprt_schedule_autoclose_locked(struct rpc_xprt *);
1233:	static void xprt_timer(struct rpc_task *);

File net/sunrpc/xprtmultipath.c:
52:	void rpc_xprt_switch_add_xprt(struct rpc_xprt_switch *, struct rpc_xprt *);
339:	bool rpc_xprt_switch_has_addr(struct rpc_xprt_switch *, const struct sockaddr *);
86:	void rpc_xprt_switch_remove_xprt(struct rpc_xprt_switch *, struct rpc_xprt *, bool);
209:	void rpc_xprt_switch_set_roundrobin(struct rpc_xprt_switch *);
558:	void xprt_iter_destroy(struct rpc_xprt_iter *);
616:	struct rpc_xprt *xprt_iter_get_next(struct rpc_xprt_iter *);
599:	struct rpc_xprt *xprt_iter_get_xprt(struct rpc_xprt_iter *);
509:	void xprt_iter_init(struct rpc_xprt_iter *, struct rpc_xprt_switch *);
523:	void xprt_iter_init_listall(struct rpc_xprt_iter *, struct rpc_xprt_switch *);
529:	void xprt_iter_init_listoffline(struct rpc_xprt_iter *, struct rpc_xprt_switch *);
484:	void xprt_iter_rewind(struct rpc_xprt_iter *);
542:	struct rpc_xprt_switch *xprt_iter_xchg_switch(struct rpc_xprt_iter *, struct rpc_xprt_switch *);
571:	struct rpc_xprt *xprt_iter_xprt(struct rpc_xprt_iter *);
97:	void xprt_multipath_cleanup_ids(void);
127:	struct rpc_xprt_switch *xprt_switch_alloc(struct rpc_xprt *, gfp_t);
184:	struct rpc_xprt_switch *xprt_switch_get(struct rpc_xprt_switch *);
197:	void xprt_switch_put(struct rpc_xprt_switch *);
318:	static struct rpc_xprt *xprt_iter_current_entry(struct rpc_xprt_iter *);
332:	static struct rpc_xprt *xprt_iter_current_entry_offline(struct rpc_xprt_iter *);
229:	static void xprt_iter_default_rewind(struct rpc_xprt_iter *);
266:	static struct rpc_xprt *xprt_iter_first_entry(struct rpc_xprt_iter *);
464:	static struct rpc_xprt *xprt_iter_next_entry_all(struct rpc_xprt_iter *);
471:	static struct rpc_xprt *xprt_iter_next_entry_offline(struct rpc_xprt_iter *);
443:	static struct rpc_xprt *xprt_iter_next_entry_roundrobin(struct rpc_xprt_iter *);
224:	static void xprt_iter_no_rewind(struct rpc_xprt_iter *);

File net/sunrpc/xprtsock.c:
3191:	void cleanup_socket_xprt(void);
3174:	int init_socket_xprt(void);
2643:	static void bc_close(struct rpc_xprt *);
2653:	static void bc_destroy(struct rpc_xprt *);
2568:	static void bc_free(struct rpc_task *);
2540:	static int bc_malloc(struct rpc_task *);
2612:	static int bc_send_request(struct rpc_rqst *);
3238:	static int param_set_max_slot_table_size(const char *, const struct kernel_param *);
3204:	static int param_set_portnr(const char *, const struct kernel_param *);
3222:	static int param_set_slot_table_size(const char *, const struct kernel_param *);
1236:	static void xs_close(struct rpc_xprt *);
2382:	static void xs_connect(struct rpc_xprt *, struct rpc_task *);
1832:	static struct socket *xs_create_sock(struct rpc_xprt *, struct sock_xprt *, int, int, int, bool);
1377:	static void xs_data_ready(struct sock *);
1264:	static void xs_destroy(struct rpc_xprt *);
2067:	static void xs_disable_swap(struct rpc_xprt *);
1828:	static void xs_dummy_setup_socket(struct work_struct *);
2061:	static int xs_enable_swap(struct rpc_xprt *);
2440:	static void xs_error_handle(struct work_struct *);
1158:	static void xs_error_report(struct sock *);
289:	static void xs_format_common_peer_ports(struct rpc_xprt *);
301:	static void xs_format_peer_addresses(struct rpc_xprt *, const char *, const char *);
1246:	static void xs_inject_disconnect(struct rpc_xprt *);
1964:	static void xs_local_connect(struct rpc_xprt *, struct rpc_task *);
2457:	static void xs_local_print_stats(struct rpc_xprt *, struct seq_file *);
1768:	static void xs_local_rpcbind(struct rpc_task *);
862:	static int xs_local_send_request(struct rpc_rqst *);
1773:	static void xs_local_set_port(struct rpc_xprt *, unsigned short);
1420:	static void xs_local_state_change(struct sock *);
502:	static ssize_t xs_read_stream_request(struct sock_xprt *, struct msghdr *, int, struct rpc_rqst *);
1179:	static void xs_reset_transport(struct sock_xprt *);
1650:	static void xs_set_port(struct rpc_xprt *, unsigned short);
3057:	static struct rpc_xprt *xs_setup_bc_tcp(struct xprt_create *);
2836:	static struct rpc_xprt *xs_setup_local(struct xprt_create *);
2980:	static struct rpc_xprt *xs_setup_tcp(struct xprt_create *);
2903:	static struct rpc_xprt *xs_setup_udp(struct xprt_create *);
1684:	static int xs_sock_srcaddr(struct rpc_xprt *, char *, size_t);
1673:	static unsigned short xs_sock_srcport(struct rpc_xprt *);
736:	static void xs_stream_data_receive_workfn(struct work_struct *);
809:	static int xs_stream_nospace(struct rpc_rqst *, bool);
825:	static int xs_stream_prepare_request(struct rpc_rqst *, struct xdr_buf *);
1409:	static size_t xs_tcp_bc_maxpayload(struct rpc_xprt *);
2510:	static void xs_tcp_print_stats(struct rpc_xprt *, struct seq_file *);
1019:	static int xs_tcp_send_request(struct rpc_rqst *);
2195:	static void xs_tcp_set_connect_timeout(struct rpc_xprt *, unsigned long, unsigned long);
2169:	static void xs_tcp_set_socket_timeouts(struct rpc_xprt *, struct socket *);
2286:	static void xs_tcp_setup_socket(struct work_struct *);
2143:	static void xs_tcp_shutdown(struct rpc_xprt *);
1440:	static void xs_tcp_state_change(struct sock *);
1554:	static void xs_tcp_write_space(struct sock *);
1362:	static void xs_udp_data_receive_workfn(struct work_struct *);
2486:	static void xs_udp_print_stats(struct rpc_xprt *, struct seq_file *);
933:	static int xs_udp_send_request(struct rpc_rqst *);
1585:	static void xs_udp_set_buffer_size(struct rpc_xprt *, size_t, size_t);
2103:	static void xs_udp_setup_socket(struct work_struct *);
1606:	static void xs_udp_timer(struct rpc_xprt *, struct rpc_task *);
1537:	static void xs_udp_write_space(struct sock *);
1509:	static void xs_write_space(struct sock *);

File net/switchdev/switchdev.c:
371:	int call_switchdev_blocking_notifiers(unsigned long, struct net_device *, struct switchdev_notifier_info *, struct netlink_ext_ack *);
345:	int call_switchdev_notifiers(unsigned long, struct net_device *, struct switchdev_notifier_info *, struct netlink_ext_ack *);
355:	int register_switchdev_blocking_notifier(struct notifier_block *);
319:	int register_switchdev_notifier(struct notifier_block *);
818:	int switchdev_bridge_port_offload(struct net_device *, struct net_device *, const void *, struct notifier_block *, struct notifier_block *, bool, struct netlink_ext_ack *);
845:	void switchdev_bridge_port_unoffload(struct net_device *, const void *, struct notifier_block *, struct notifier_block *);
59:	void switchdev_deferred_process(void);
514:	int switchdev_handle_fdb_event_to_device(struct net_device *, unsigned long, const struct switchdev_notifier_fdb_info *, bool (*)(const struct net_device *), bool (*)(const struct net_device *, const struct net_device *), int (*)(struct net_device *, struct net_device *, unsigned long, const void *, const struct switchdev_notifier_fdb_info *));
801:	int switchdev_handle_port_attr_set(struct net_device *, struct switchdev_notifier_port_attr_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_attr *, struct netlink_ext_ack *));
610:	int switchdev_handle_port_obj_add(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_obj *, struct netlink_ext_ack *));
631:	int switchdev_handle_port_obj_add_foreign(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), bool (*)(const struct net_device *, const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_obj *, struct netlink_ext_ack *));
721:	int switchdev_handle_port_obj_del(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_obj *));
741:	int switchdev_handle_port_obj_del_foreign(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), bool (*)(const struct net_device *, const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_obj *));
168:	int switchdev_port_attr_set(struct net_device *, const struct switchdev_attr *, struct netlink_ext_ack *);
251:	int switchdev_port_obj_add(struct net_device *, const struct switchdev_obj *, struct netlink_ext_ack *);
300:	int switchdev_port_obj_del(struct net_device *, const struct switchdev_obj *);
363:	int unregister_switchdev_blocking_notifier(struct notifier_block *);
331:	int unregister_switchdev_notifier(struct notifier_block *);
453:	static int __switchdev_handle_fdb_event_to_device(struct net_device *, struct net_device *, unsigned long, const struct switchdev_notifier_fdb_info *, bool (*)(const struct net_device *), bool (*)(const struct net_device *, const struct net_device *), int (*)(struct net_device *, struct net_device *, unsigned long, const void *, const struct switchdev_notifier_fdb_info *));
759:	static int __switchdev_handle_port_attr_set(struct net_device *, struct switchdev_notifier_port_attr_info *, bool (*)(const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_attr *, struct netlink_ext_ack *));
535:	static int __switchdev_handle_port_obj_add(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), bool (*)(const struct net_device *, const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_obj *, struct netlink_ext_ack *));
650:	static int __switchdev_handle_port_obj_del(struct net_device *, struct switchdev_notifier_port_obj_info *, bool (*)(const struct net_device *), bool (*)(const struct net_device *, const struct net_device *), int (*)(struct net_device *, const void *, const struct switchdev_obj *));
82:	static int switchdev_deferred_enqueue(struct net_device *, const void *, size_t, switchdev_deferred_func_t *);
73:	static void switchdev_deferred_process_work(struct work_struct *);
390:	static int switchdev_lower_dev_walk(struct net_device *, struct netdev_nested_priv *);
137:	static void switchdev_port_attr_set_deferred(struct net_device *, const void *);
218:	static void switchdev_port_obj_add_deferred(struct net_device *, const void *);
270:	static void switchdev_port_obj_del_deferred(struct net_device *, const void *);

File net/sysctl_net.c:
96:	int net_sysctl_init(void);
163:	struct ctl_table_header *register_net_sysctl(struct net *, const char *, struct ctl_table *);
173:	void unregister_net_sysctl_table(struct ctl_table_header *);
36:	static int is_seen(struct ctl_table_set *);
31:	static struct ctl_table_set *net_ctl_header_lookup(struct ctl_table_root *);
42:	static int net_ctl_permissions(struct ctl_table_header *, struct ctl_table *);
56:	static void net_ctl_set_ownership(struct ctl_table_header *, struct ctl_table *, kuid_t *, kgid_t *);
85:	static void sysctl_net_exit(struct net *);
79:	static int sysctl_net_init(struct net *);

File net/unix/af_unix.c:
2424:	int __unix_dgram_recvmsg(struct sock *, struct msghdr *, size_t, int);
2923:	int __unix_stream_recvmsg(struct sock *, struct msghdr *, size_t, int);
3657:	int bpf_iter_unix(struct bpf_iter_meta *, struct unix_sock *, uid_t);
3038:	long unix_inq_len(struct sock *);
3062:	long unix_outq_len(struct sock *);
237:	struct sock *unix_peer_get(struct sock *);
315:	static void __unix_set_addr_hash(struct net *, struct sock *, struct unix_address *, unsigned int);
3764:	static void af_unix_exit(void);
3728:	static int af_unix_init(void);
3680:	static void bpf_iter_fini_unix(void *);
3662:	static int bpf_iter_init_unix(void *, struct bpf_iter_aux_info *);
3720:	static void bpf_iter_register(void);
3470:	static struct sock *bpf_iter_unix_batch(struct seq_file *, loff_t *);
3696:	static const struct bpf_func_proto *bpf_iter_unix_get_func_proto(enum bpf_func_id, const struct bpf_prog *);
3452:	static int bpf_iter_unix_realloc_batch(struct bpf_unix_iter_state *, unsigned int);
3516:	static void *bpf_iter_unix_seq_next(struct seq_file *, void *, loff_t *);
3538:	static int bpf_iter_unix_seq_show(struct seq_file *, void *);
3505:	static void *bpf_iter_unix_seq_start(struct seq_file *, loff_t *);
3566:	static void bpf_iter_unix_seq_stop(struct seq_file *, void *);
690:	static void copy_peercred(struct sock *, struct sock *);
674:	static void init_peercred(struct sock *);
1830:	static void maybe_add_creds(struct sk_buff *, const struct socket *, const struct sock *);
2107:	static int queue_oob(struct socket *, struct msghdr *, struct sock *);
1676:	static int unix_accept(struct socket *, struct socket *, int, bool);
1124:	static int unix_autobind(struct sock *);
1299:	static int unix_bind(struct socket *, struct sockaddr *, int);
909:	static void unix_close(struct sock *, long);
995:	static int unix_create(struct net *, struct socket *, int, int);
944:	static struct sock *unix_create1(struct net *, struct socket *, int, int);
1346:	static int unix_dgram_connect(struct socket *, struct sockaddr *, int, int);
548:	static void unix_dgram_disconnected(struct sock *, struct sock *);
489:	static void unix_dgram_peer_wake_disconnect_wakeup(struct sock *, struct sock *);
503:	static int unix_dgram_peer_wake_me(struct sock *, struct sock *);
431:	static int unix_dgram_peer_wake_relay(wait_queue_entry_t *, unsigned int, int, void *);
3193:	static __poll_t unix_dgram_poll(struct file *, struct socket *, poll_table *);
2531:	static int unix_dgram_recvmsg(struct socket *, struct msghdr *, size_t, int);
1890:	static int unix_dgram_sendmsg(struct socket *, struct msghdr *, size_t);
1110:	static struct sock *unix_find_other(struct net *, struct sockaddr_un *, int, int);
1722:	static int unix_getname(struct socket *, struct sockaddr *, int);
339:	static void unix_insert_bsd_socket(struct sock *);
3104:	static int unix_ioctl(struct socket *, unsigned int, unsigned long);
714:	static int unix_listen(struct socket *, int);
3643:	static void unix_net_exit(struct net *);
3599:	static int unix_net_init(struct net *);
3152:	static __poll_t unix_poll(struct file *, struct socket *, poll_table *);
2545:	static int unix_read_skb(struct sock *, skb_read_actor_t);
1033:	static int unix_release(struct socket *);
591:	static void unix_release_sock(struct sock *, int);
1801:	static int unix_scm_to_skb(struct scm_cookie *, struct sk_buff *, bool);
3323:	static void *unix_seq_next(struct seq_file *, void *, loff_t *);
3341:	static int unix_seq_show(struct seq_file *, void *);
3315:	static void *unix_seq_start(struct seq_file *, loff_t *);
3333:	static void unix_seq_stop(struct seq_file *, void *);
2403:	static int unix_seqpacket_recvmsg(struct socket *, struct msghdr *, size_t, int);
2384:	static int unix_seqpacket_sendmsg(struct socket *, struct msghdr *, size_t);
775:	static int unix_set_peek_off(struct sock *, int);
807:	static void unix_show_fdinfo(struct seq_file *, struct socket *);
2989:	static int unix_shutdown(struct socket *, int);
566:	static void unix_sock_destructor(struct sock *);
1648:	static int unix_socketpair(struct socket *, struct socket *);
1321:	static void unix_state_double_lock(struct sock *, struct sock *);
1455:	static int unix_stream_connect(struct socket *, struct sockaddr *, int, int);
2912:	static int unix_stream_read_actor(struct sk_buff *, int, int, struct unix_stream_read_state *);
2698:	static int unix_stream_read_generic(struct unix_stream_read_state *, bool);
2690:	static int unix_stream_read_skb(struct sock *, skb_read_actor_t);
2621:	static int unix_stream_recv_urg(struct unix_stream_read_state *);
2937:	static int unix_stream_recvmsg(struct socket *, struct msghdr *, size_t, int);
2153:	static int unix_stream_sendmsg(struct socket *, struct msghdr *, size_t);
2268:	static ssize_t unix_stream_sendpage(struct socket *, struct page *, int, size_t, int);
2958:	static int unix_stream_splice_actor(struct sk_buff *, int, int, struct unix_stream_read_state *);
2967:	static ssize_t unix_stream_splice_read(struct socket *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
159:	static void unix_table_double_lock(struct net *, unsigned int, unsigned int);
174:	static void unix_table_double_unlock(struct net *, unsigned int, unsigned int);
916:	static void unix_unhash(struct sock *);
1433:	static long unix_wait_for_peer(struct sock *, long);
529:	static void unix_write_space(struct sock *);

File net/unix/garbage.c:
205:	void unix_gc(void);
191:	void wait_for_unix_gc(void);
167:	static void dec_inflight(struct unix_sock *);
172:	static void inc_inflight(struct unix_sock *);
177:	static void inc_inflight_move_tail(struct unix_sock *);
133:	static void scan_children(struct sock *, void (*)(struct unix_sock *), struct sk_buff_head *);
91:	static void scan_inflight(struct sock *, void (*)(struct unix_sock *), struct sk_buff_head *);

File net/unix/scm.c:
106:	int unix_attach_fds(struct scm_cookie *, struct sk_buff *);
140:	void unix_destruct_scm(struct sk_buff *);
128:	void unix_detach_fds(struct scm_cookie *, struct sk_buff *);
24:	struct sock *unix_get_socket(struct file *);
48:	void unix_inflight(struct user_struct *, struct file *);
70:	void unix_notinflight(struct user_struct *, struct file *);

File net/unix/sysctl_net_unix.c:
25:	int unix_sysctl_register(struct net *);
52:	void unix_sysctl_unregister(struct net *);

File net/unix/unix_bpf.c:
170:	void unix_bpf_build_proto(void);
141:	int unix_dgram_bpf_update_proto(struct sock *, struct sk_psock *, bool);
157:	int unix_stream_bpf_update_proto(struct sock *, struct sk_psock *, bool);
41:	static int __unix_recvmsg(struct sock *, struct msghdr *, size_t, int);
50:	static int unix_bpf_recvmsg(struct sock *, struct msghdr *, size_t, int, int *);

File net/wireless/ap.c:
55:	int __cfg80211_stop_ap(struct cfg80211_registered_device *, struct net_device *, int, bool);
76:	int cfg80211_stop_ap(struct cfg80211_registered_device *, struct net_device *, int, bool);
14:	static int ___cfg80211_stop_ap(struct cfg80211_registered_device *, struct net_device *, unsigned int, bool);

File net/wireless/chan.c:
1402:	bool cfg80211_any_usable_channels(struct wiphy *, unsigned long, u32);
816:	bool cfg80211_any_wiphy_oper_chan(struct wiphy *, struct ieee80211_channel *);
712:	bool cfg80211_beaconing_iface_active(struct wireless_dev *);
377:	const struct cfg80211_chan_def *cfg80211_chandef_compatible(const struct cfg80211_chan_def *, const struct cfg80211_chan_def *);
23:	void cfg80211_chandef_create(struct cfg80211_chan_def *, struct ieee80211_channel *, enum nl80211_channel_type);
942:	unsigned int cfg80211_chandef_dfs_cac_time(struct wiphy *, const struct cfg80211_chan_def *);
539:	int cfg80211_chandef_dfs_required(struct wiphy *, const struct cfg80211_chan_def *, enum nl80211_iftype);
633:	bool cfg80211_chandef_dfs_usable(struct wiphy *, const struct cfg80211_chan_def *);
1041:	bool cfg80211_chandef_usable(struct wiphy *, const struct cfg80211_chan_def *, u32);
199:	bool cfg80211_chandef_valid(const struct cfg80211_chan_def *);
674:	bool cfg80211_is_sub_chan(struct cfg80211_chan_def *, struct ieee80211_channel *, bool);
1361:	bool cfg80211_reg_can_beacon(struct wiphy *, struct cfg80211_chan_def *, enum nl80211_iftype);
1369:	bool cfg80211_reg_can_beacon_relax(struct wiphy *, struct cfg80211_chan_def *, enum nl80211_iftype);
467:	void cfg80211_set_dfs_state(struct wiphy *, const struct cfg80211_chan_def *, enum nl80211_dfs_state);
1391:	int cfg80211_set_monitor_channel(struct cfg80211_registered_device *, struct cfg80211_chan_def *);
752:	bool cfg80211_wdev_on_sub_chan(struct wireless_dev *, struct ieee80211_channel *, bool);
1433:	struct cfg80211_chan_def *wdev_chandef(struct wireless_dev *, unsigned int);
1335:	static bool _cfg80211_reg_can_beacon(struct wiphy *, struct cfg80211_chan_def *, enum nl80211_iftype, bool);
59:	static bool cfg80211_edmg_chandef_valid(const struct cfg80211_chan_def *);
323:	static void chandef_primary_freqs(const struct cfg80211_chan_def *, u32 *, u32 *, u32 *);

File net/wireless/core.c:
1231:	void __cfg80211_leave(struct cfg80211_registered_device *, struct wireless_dev *);
1133:	void cfg80211_cqm_config_free(struct wireless_dev *);
332:	void cfg80211_destroy_ifaces(struct cfg80211_registered_device *);
1092:	void cfg80211_dev_free(struct cfg80211_registered_device *);
126:	int cfg80211_dev_rename(struct cfg80211_registered_device *, char *);
1321:	void cfg80211_init_wdev(struct wireless_dev *);
1291:	void cfg80211_leave(struct cfg80211_registered_device *, struct wireless_dev *);
57:	struct cfg80211_registered_device *cfg80211_rdev_by_wiphy_idx(int);
1379:	int cfg80211_register_netdevice(struct net_device *);
1352:	void cfg80211_register_wdev(struct cfg80211_registered_device *, struct wireless_dev *);
264:	void cfg80211_shutdown_all_interfaces(struct wiphy *);
1299:	void cfg80211_stop_iface(struct wiphy *, struct wireless_dev *, gfp_t);
247:	void cfg80211_stop_nan(struct cfg80211_registered_device *, struct wireless_dev *);
222:	void cfg80211_stop_p2p_device(struct cfg80211_registered_device *, struct wireless_dev *);
155:	int cfg80211_switch_netns(struct cfg80211_registered_device *, struct net *);
1211:	void cfg80211_unregister_wdev(struct wireless_dev *);
1221:	void cfg80211_update_iface_num(struct cfg80211_registered_device *, enum nl80211_iftype, int);
73:	int get_wiphy_idx(struct wiphy *);
1117:	void wiphy_free(struct wiphy *);
80:	struct wiphy *wiphy_idx_to_wiphy(int);
413:	struct wiphy *wiphy_new_nm(const struct cfg80211_ops *, int, const char *);
656:	int wiphy_register(struct wiphy *);
1123:	void wiphy_rfkill_set_hw_state_reason(struct wiphy *, bool, enum rfkill_hard_block_reasons);
1019:	void wiphy_rfkill_start_polling(struct wiphy *);
1030:	void wiphy_unregister(struct wiphy *);
1139:	static void _cfg80211_unregister_wdev(struct wireless_dev *, bool);
351:	static void cfg80211_destroy_iface_wk(struct work_struct *);
92:	static int cfg80211_dev_check_name(struct cfg80211_registered_device *, const char *);
320:	static void cfg80211_event_work(struct work_struct *);
1617:	static void cfg80211_exit(void);
1567:	static int cfg80211_init(void);
1411:	static int cfg80211_netdev_notifier_call(struct notifier_block *, unsigned long, void *);
1551:	static void cfg80211_pernet_exit(struct net *);
395:	static void cfg80211_propagate_cac_done_wk(struct work_struct *);
379:	static void cfg80211_propagate_radar_detect_wk(struct work_struct *);
311:	static void cfg80211_rfkill_block_work(struct work_struct *);
215:	static void cfg80211_rfkill_poll(struct rfkill *, void *);
297:	static int cfg80211_rfkill_set_block(void *, bool);
363:	static void cfg80211_sched_scan_stop_wk(struct work_struct *);

File net/wireless/core.h:
187:	static void cfg80211_hold_bss(struct cfg80211_internal_bss *);
197:	static void cfg80211_unhold_bss(struct cfg80211_internal_bss *);

File net/wireless/ethtool.c:
7:	void cfg80211_get_drvinfo(struct net_device *, struct ethtool_drvinfo *);

File net/wireless/ibss.c:
19:	void __cfg80211_ibss_joined(struct net_device *, const u8 *, struct ieee80211_channel *);
88:	int __cfg80211_join_ibss(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_ibss_params *, struct cfg80211_cached_keys *);
200:	int __cfg80211_leave_ibss(struct cfg80211_registered_device *, struct net_device *, bool);
191:	void cfg80211_clear_ibss(struct net_device *, bool);
60:	void cfg80211_ibss_joined(struct net_device *, const u8 *, struct ieee80211_channel *, gfp_t);
222:	int cfg80211_leave_ibss(struct cfg80211_registered_device *, struct net_device *, bool);
155:	static void __cfg80211_clear_ibss(struct net_device *, bool);

File net/wireless/mesh.c:
102:	int __cfg80211_join_mesh(struct cfg80211_registered_device *, struct net_device *, struct mesh_setup *, const struct mesh_config *);
260:	int __cfg80211_leave_mesh(struct cfg80211_registered_device *, struct net_device *);
291:	int cfg80211_leave_mesh(struct cfg80211_registered_device *, struct net_device *);
225:	int cfg80211_set_mesh_channel(struct cfg80211_registered_device *, struct wireless_dev *, struct cfg80211_chan_def *);

File net/wireless/mlme.c:
943:	void __cfg80211_radar_event(struct wiphy *, struct cfg80211_chan_def *, bool, gfp_t);
181:	void cfg80211_assoc_failure(struct net_device *, struct cfg80211_assoc_failure *);
168:	void cfg80211_auth_timeout(struct net_device *, const u8 *);
1085:	void cfg80211_background_cac_abort(struct wiphy *);
1075:	void cfg80211_background_cac_abort_wk(struct work_struct *);
1064:	void cfg80211_background_cac_done_wk(struct work_struct *);
969:	void cfg80211_cac_event(struct net_device *, const struct cfg80211_chan_def *, enum nl80211_radar_event, gfp_t);
861:	void cfg80211_dfs_channels_update_work(struct work_struct *);
505:	void cfg80211_mgmt_registrations_update_wk(struct work_struct *);
231:	void cfg80211_michael_mic_failure(struct net_device *, const u8 *, enum nl80211_key_type, int, const u8 *, gfp_t);
322:	int cfg80211_mlme_assoc(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_assoc_request *);
259:	int cfg80211_mlme_auth(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_auth_request *);
369:	int cfg80211_mlme_deauth(struct cfg80211_registered_device *, struct net_device *, const u8 *, const u8 *, int, u16, bool);
398:	int cfg80211_mlme_disassoc(struct cfg80211_registered_device *, struct net_device *, const u8 *, const u8 *, int, u16, bool);
430:	void cfg80211_mlme_down(struct cfg80211_registered_device *, struct net_device *);
676:	int cfg80211_mlme_mgmt_tx(struct cfg80211_registered_device *, struct wireless_dev *, struct cfg80211_mgmt_tx_params *, u64 *);
648:	void cfg80211_mlme_purge_registrations(struct wireless_dev *);
519:	int cfg80211_mlme_register_mgmt(struct wireless_dev *, u32, u16, const u8 *, int, bool, struct netlink_ext_ack *);
618:	void cfg80211_mlme_unregister_socket(struct wireless_dev *, u32);
288:	void cfg80211_oper_and_ht_capa(struct ieee80211_ht_cap *, const struct ieee80211_ht_cap *);
305:	void cfg80211_oper_and_vht_capa(struct ieee80211_vht_cap *, const struct ieee80211_vht_cap *);
24:	void cfg80211_rx_assoc_resp(struct net_device *, struct cfg80211_rx_assoc_resp *);
798:	bool cfg80211_rx_mgmt_ext(struct wireless_dev *, struct cfg80211_rx_info *);
147:	void cfg80211_rx_mlme_mgmt(struct net_device *, const u8 *, size_t);
855:	void cfg80211_sched_dfs_chan_update(struct cfg80211_registered_device *);
1094:	int cfg80211_start_background_radar_detection(struct cfg80211_registered_device *, struct wireless_dev *, struct cfg80211_chan_def *);
1135:	void cfg80211_stop_background_radar_detection(struct wireless_dev *);
211:	void cfg80211_tx_mlme_mgmt(struct net_device *, const u8 *, size_t, bool);
1014:	static void __cfg80211_background_cac_event(struct cfg80211_registered_device *, struct wireless_dev *, const struct cfg80211_chan_def *, enum nl80211_radar_event);
464:	static void cfg80211_mgmt_registrations_update(struct wireless_dev *);
107:	static void cfg80211_process_deauth(struct wireless_dev *, const u8 *, size_t, bool);
126:	static void cfg80211_process_disassoc(struct wireless_dev *, const u8 *, size_t, bool);

File net/wireless/nl80211.c:
11368:	struct sk_buff *__cfg80211_alloc_event_skb(struct wiphy *, struct wireless_dev *, enum nl80211_commands, enum nl80211_attrs, unsigned int, int, int, gfp_t);
14953:	struct sk_buff *__cfg80211_alloc_reply_skb(struct wiphy *, enum nl80211_commands, enum nl80211_attrs, int);
11401:	void __cfg80211_send_event_skb(struct sk_buff *, gfp_t);
18238:	void cfg80211_assoc_comeback(struct net_device *, const u8 *, u32);
19064:	int cfg80211_bss_color_notify(struct net_device *, gfp_t, enum nl80211_commands, u8, u64);
19001:	void cfg80211_ch_switch_notify(struct net_device *, struct cfg80211_chan_def *, unsigned int);
19044:	void cfg80211_ch_switch_started_notify(struct net_device *, struct cfg80211_chan_def *, unsigned int, u8, bool);
6633:	int cfg80211_check_station_change(struct wiphy *, struct station_parameters *, enum cfg80211_station_type);
18370:	void cfg80211_conn_failed(struct net_device *, const u8 *, enum nl80211_connect_failed_reason, gfp_t);
18588:	void cfg80211_control_port_tx_status(struct wireless_dev *, u64, const u8 *, size_t, bool, gfp_t);
18820:	void cfg80211_cqm_beacon_loss_notify(struct net_device *, gfp_t);
18798:	void cfg80211_cqm_pktloss_notify(struct net_device *, const u8 *, u32, gfp_t);
18727:	void cfg80211_cqm_rssi_notify(struct net_device *, enum nl80211_cqm_rssi_threshold_event, s32, gfp_t);
18771:	void cfg80211_cqm_txe_notify(struct net_device *, const u8 *, u32, u32, u32, gfp_t);
19627:	void cfg80211_crit_proto_stopped(struct wireless_dev *, gfp_t);
18340:	void cfg80211_del_sta_sinfo(struct net_device *, const u8 *, struct station_info *, gfp_t);
19694:	int cfg80211_external_auth_request(struct net_device *, struct cfg80211_external_auth_params *, gfp_t);
19582:	void cfg80211_ft_event(struct net_device *, struct cfg80211_ft_event_params *);
18882:	void cfg80211_gtk_rekey_notify(struct net_device *, const u8 *, const u8 *, gfp_t);
18604:	void cfg80211_mgmt_tx_status_ext(struct wireless_dev *, struct cfg80211_tx_status *, gfp_t);
14492:	void cfg80211_nan_func_terminated(struct wireless_dev *, u8, enum nl80211_nan_func_term_reason, u64, gfp_t);
14412:	void cfg80211_nan_match(struct wireless_dev *, struct cfg80211_nan_match_params *, gfp_t);
18316:	void cfg80211_new_sta(struct net_device *, const u8 *, struct station_info *, gfp_t);
18056:	void cfg80211_notify_new_peer_candidate(struct net_device *, const u8 *, const u8 *, u8, int, gfp_t);
18939:	void cfg80211_pmksa_candidate_notify(struct net_device *, int, const u8 *, bool, gfp_t);
19212:	void cfg80211_probe_status(struct net_device *, const u8 *, u64, bool, s32, bool, gfp_t);
13606:	void cfg80211_rdev_free_coalesce(struct cfg80211_registered_device *);
18276:	void cfg80211_ready_on_channel(struct wireless_dev *, u64, struct ieee80211_channel *, unsigned int, gfp_t);
18290:	void cfg80211_remain_on_channel_expired(struct wireless_dev *, u64, struct ieee80211_channel *, gfp_t);
19255:	void cfg80211_report_obss_beacon_khz(struct wiphy *, const u8 *, size_t, int, int);
18663:	bool cfg80211_rx_control_port(struct net_device *, struct sk_buff *, bool);
18441:	bool cfg80211_rx_spurious_frame(struct net_device *, const u8 *, gfp_t);
18461:	bool cfg80211_rx_unexpected_4addr_frame(struct net_device *, const u8 *, gfp_t);
17653:	void cfg80211_rx_unprot_mlme_mgmt(struct net_device *, const u8 *, size_t);
19157:	void cfg80211_sta_opmode_change_notify(struct net_device *, const u8 *, struct sta_opmode_info *, gfp_t);
19476:	void cfg80211_tdls_oper_request(struct net_device *, const u8 *, enum nl80211_tdls_operation, u16, gfp_t);
18303:	void cfg80211_tx_mgmt_expired(struct wireless_dev *, u64, struct ieee80211_channel *, gfp_t);
19735:	void cfg80211_update_owe_info_event(struct net_device *, struct cfg80211_update_owe_info *, gfp_t);
14990:	unsigned int cfg80211_vendor_cmd_get_sender(struct wiphy *);
14970:	int cfg80211_vendor_cmd_reply(struct sk_buff *);
17435:	struct sk_buff *nl80211_build_scan_msg(struct cfg80211_registered_device *, struct wireless_dev *, bool);
17533:	void nl80211_common_reg_change_event(enum nl80211_commands, struct regulatory_request *);
19795:	void nl80211_exit(void);
19777:	int nl80211_init(void);
18100:	void nl80211_michael_mic_failure(struct cfg80211_registered_device *, struct net_device *, const u8 *, enum nl80211_key_type, int, const u8 *, gfp_t);
17278:	void nl80211_notify_iface(struct cfg80211_registered_device *, struct wireless_dev *, enum nl80211_commands);
17256:	void nl80211_notify_wiphy(struct cfg80211_registered_device *, enum nl80211_commands);
3176:	int nl80211_parse_chandef(struct cfg80211_registered_device *, struct genl_info *, struct cfg80211_chan_def *);
8759:	int nl80211_parse_random_mac(struct nlattr **, u8 *, u8 *);
6195:	bool nl80211_put_sta_rate(struct sk_buff *, struct rate_info *, int);
19110:	void nl80211_radar_notify(struct cfg80211_registered_device *, const struct cfg80211_chan_def *, enum nl80211_radar_event, struct net_device *, gfp_t);
19664:	void nl80211_send_ap_stopped(struct wireless_dev *);
17726:	void nl80211_send_assoc_timeout(struct cfg80211_registered_device *, struct net_device *, const u8 *, gfp_t);
17718:	void nl80211_send_auth_timeout(struct cfg80211_registered_device *, struct net_device *, const u8 *, gfp_t);
18137:	void nl80211_send_beacon_hint_event(struct wiphy *, struct ieee80211_channel *, struct ieee80211_channel *);
17734:	void nl80211_send_connect_result(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_connect_resp_params *, gfp_t);
17635:	void nl80211_send_deauth(struct cfg80211_registered_device *, struct net_device *, const u8 *, size_t, bool, gfp_t);
17644:	void nl80211_send_disassoc(struct cfg80211_registered_device *, struct net_device *, const u8 *, size_t, bool, gfp_t);
17988:	void nl80211_send_disconnected(struct cfg80211_registered_device *, struct net_device *, u16, const u8 *, size_t, bool);
18024:	void nl80211_send_ibss_bssid(struct cfg80211_registered_device *, struct net_device *, const u8 *, gfp_t);
18483:	int nl80211_send_mgmt(struct cfg80211_registered_device *, struct wireless_dev *, u32, struct cfg80211_rx_info *, gfp_t);
17951:	void nl80211_send_port_authorized(struct cfg80211_registered_device *, struct net_device *, const u8 *, const u8 *, u8);
17847:	void nl80211_send_roamed(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_roam_info *, gfp_t);
17625:	void nl80211_send_rx_assoc(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_rx_assoc_resp *);
17616:	void nl80211_send_rx_auth(struct cfg80211_registered_device *, struct net_device *, const u8 *, size_t, gfp_t);
17455:	void nl80211_send_scan_msg(struct cfg80211_registered_device *, struct sk_buff *);
17416:	void nl80211_send_scan_start(struct cfg80211_registered_device *, struct wireless_dev *);
17465:	void nl80211_send_sched_scan(struct cfg80211_sched_scan_request *, u32);
1042:	void *nl80211hdr_put(struct sk_buff *, u32, u32, int, u8);
11310:	static struct sk_buff *__cfg80211_alloc_vendor_skb(struct cfg80211_registered_device *, struct wireless_dev *, int, u32, u32, enum nl80211_commands, enum nl80211_attrs, const struct nl80211_vendor_cmd_info *, gfp_t);
140:	static struct cfg80211_registered_device *__cfg80211_rdev_from_attrs(struct net *, struct nlattr **);
67:	static struct wireless_dev *__cfg80211_wdev_from_attrs(struct cfg80211_registered_device *, struct net *, struct nlattr **);
3301:	static int __nl80211_set_channel(struct cfg80211_registered_device *, struct net_device *, struct genl_info *, int);
18405:	static bool __nl80211_unexpected_frame(struct net_device *, u8, const u8 *, gfp_t);
12564:	static int cfg80211_cqm_rssi_update(struct cfg80211_registered_device *, struct net_device *);
8796:	static bool cfg80211_off_channel_oper_allowed(struct wireless_dev *, struct ieee80211_channel *);
18675:	static struct sk_buff *cfg80211_prepare_cqm(struct net_device *, const char *, gfp_t);
4388:	static void get_key_callback(void *, struct key_params *);
6790:	static struct net_device *get_vlan(struct genl_info *, struct cfg80211_registered_device *);
14062:	static int handle_nan_filter(struct nlattr *, struct cfg80211_nan_func *, bool);
5008:	static void he_build_mcs_mask(u16, u16 *);
9172:	static int nl80211_abort_scan(struct sk_buff *, struct genl_info *);
2027:	static int nl80211_add_commands_unsplit(struct cfg80211_registered_device *, struct sk_buff *);
15865:	static int nl80211_add_link(struct sk_buff *, struct genl_info *);
16022:	static int nl80211_add_link_station(struct sk_buff *, struct genl_info *);
15927:	static int nl80211_add_mod_link_station(struct sk_buff *, struct genl_info *, bool);
15051:	static int nl80211_add_tx_ts(struct sk_buff *, struct genl_info *);
10701:	static struct cfg80211_bss *nl80211_assoc_bss(struct cfg80211_registered_device *, const u8 *, int, struct nlattr **, const u8 **);
10735:	static int nl80211_associate(struct sk_buff *, struct genl_info *);
10420:	static int nl80211_authenticate(struct sk_buff *, struct genl_info *);
5653:	static int nl80211_calculate_ap_params(struct cfg80211_ap_settings *);
12189:	static int nl80211_cancel_remain_on_channel(struct sk_buff *, struct genl_info *);
18951:	static void nl80211_ch_switch_notify(struct cfg80211_registered_device *, struct net_device *, unsigned int, struct cfg80211_chan_def *, gfp_t, enum nl80211_commands, u8, bool);
9870:	static int nl80211_channel_switch(struct sk_buff *, struct genl_info *);
8850:	static int nl80211_check_scan_flags(struct wiphy *, struct wireless_dev *, void *, struct nlattr **, bool);
15740:	static int nl80211_color_change(struct sk_buff *, struct genl_info *);
11567:	static int nl80211_connect(struct sk_buff *, struct genl_info *);
14600:	static int nl80211_crit_protocol_start(struct sk_buff *, struct genl_info *);
14639:	static int nl80211_crit_protocol_stop(struct sk_buff *, struct genl_info *);
10579:	static int nl80211_crypto_settings(struct cfg80211_registered_device *, struct genl_info *, struct cfg80211_crypto_settings *, int);
10986:	static int nl80211_deauthenticate(struct sk_buff *, struct genl_info *);
4297:	static int nl80211_del_interface(struct sk_buff *, struct genl_info *);
4722:	static int nl80211_del_key(struct sk_buff *, struct genl_info *);
7667:	static int nl80211_del_mpath(struct sk_buff *, struct genl_info *);
15295:	static int nl80211_del_pmk(struct sk_buff *, struct genl_info *);
7405:	static int nl80211_del_station(struct sk_buff *, struct genl_info *);
15109:	static int nl80211_del_tx_ts(struct sk_buff *, struct genl_info *);
11034:	static int nl80211_disassociate(struct sk_buff *, struct genl_info *);
11898:	static int nl80211_disconnect(struct sk_buff *, struct genl_info *);
3900:	static int nl80211_dump_interface(struct sk_buff *, struct netlink_callback *);
7525:	static int nl80211_dump_mpath(struct sk_buff *, struct netlink_callback *);
7725:	static int nl80211_dump_mpp(struct sk_buff *, struct netlink_callback *);
10218:	static int nl80211_dump_scan(struct sk_buff *, struct netlink_callback *);
6540:	static int nl80211_dump_station(struct sk_buff *, struct netlink_callback *);
10345:	static int nl80211_dump_survey(struct sk_buff *, struct netlink_callback *);
3023:	static int nl80211_dump_wiphy(struct sk_buff *, struct netlink_callback *);
3096:	static int nl80211_dump_wiphy_done(struct netlink_callback *);
2975:	static int nl80211_dump_wiphy_parse(struct sk_buff *, struct netlink_callback *, struct nl80211_dump_wiphy_state *);
15322:	static int nl80211_external_auth(struct sk_buff *, struct genl_info *);
12025:	static int nl80211_flush_pmksa(struct sk_buff *, struct genl_info *);
18534:	static void nl80211_frame_tx_status(struct wireless_dev *, struct cfg80211_tx_status *, gfp_t, enum nl80211_commands);
13577:	static int nl80211_get_coalesce(struct sk_buff *, struct genl_info *);
15438:	static int nl80211_get_ftm_responder_stats(struct sk_buff *, struct genl_info *);
3975:	static int nl80211_get_interface(struct sk_buff *, struct genl_info *);
4429:	static int nl80211_get_key(struct sk_buff *, struct genl_info *);
7903:	static int nl80211_get_mesh_config(struct sk_buff *, struct genl_info *);
7577:	static int nl80211_get_mpath(struct sk_buff *, struct genl_info *);
7685:	static int nl80211_get_mpp(struct sk_buff *, struct genl_info *);
12489:	static int nl80211_get_power_save(struct sk_buff *, struct genl_info *);
14552:	static int nl80211_get_protocol_features(struct sk_buff *, struct genl_info *);
8376:	static int nl80211_get_reg_do(struct sk_buff *, struct genl_info *);
8488:	static int nl80211_get_reg_dump(struct sk_buff *, struct netlink_callback *);
6594:	static int nl80211_get_station(struct sk_buff *, struct genl_info *);
3102:	static int nl80211_get_wiphy(struct sk_buff *, struct genl_info *);
11110:	static int nl80211_join_ibss(struct sk_buff *, struct genl_info *);
12763:	static int nl80211_join_mesh(struct sk_buff *, struct genl_info *);
12741:	static int nl80211_join_ocb(struct sk_buff *, struct genl_info *);
11268:	static int nl80211_leave_ibss(struct sk_buff *, struct genl_info *);
12886:	static int nl80211_leave_mesh(struct sk_buff *, struct genl_info *);
12755:	static int nl80211_leave_ocb(struct sk_buff *, struct genl_info *);
16028:	static int nl80211_modify_link_station(struct sk_buff *, struct genl_info *);
1085:	static int nl80211_msg_put_channel(struct sk_buff *, struct wiphy *, struct ieee80211_channel *, bool);
1049:	static int nl80211_msg_put_wmm_rules(struct sk_buff *, const struct ieee80211_reg_rule *);
14109:	static int nl80211_nan_add_func(struct sk_buff *, struct genl_info *);
14370:	static int nl80211_nan_change_config(struct sk_buff *, struct genl_info *);
14347:	static int nl80211_nan_del_func(struct sk_buff *, struct genl_info *);
19517:	static int nl80211_netlink_notify(struct notifier_block *, unsigned long, void *);
4282:	static int nl80211_new_interface(struct sk_buff *, struct genl_info *);
4651:	static int nl80211_new_key(struct sk_buff *, struct genl_info *);
7642:	static int nl80211_new_mpath(struct sk_buff *, struct genl_info *);
7122:	static int nl80211_new_station(struct sk_buff *, struct genl_info *);
9816:	static int nl80211_notify_radar_detection(struct sk_buff *, struct genl_info *);
5421:	static int nl80211_parse_beacon(struct cfg80211_registered_device *, struct nlattr **, struct cfg80211_beacon_data *);
1450:	static struct cfg80211_cached_keys *nl80211_parse_connkeys(struct cfg80211_registered_device *, struct genl_info *, bool *);
5569:	static int nl80211_parse_fils_discovery(struct cfg80211_registered_device *, struct nlattr *, struct cfg80211_ap_settings *);
5525:	static int nl80211_parse_he_obss_pd(struct nlattr *, struct ieee80211_he_obss_pd *);
1389:	static int nl80211_parse_key(struct genl_info *, struct key_parse *);
1280:	static int nl80211_parse_key_new(struct genl_info *, struct nlattr *, struct key_parse *);
5307:	static int nl80211_parse_mbssid_config(struct wiphy *, struct net_device *, struct nlattr *, struct cfg80211_mbssid_config *, u8);
11083:	static bool nl80211_parse_mcast_rate(struct cfg80211_registered_device *, int *, int);
8081:	static int nl80211_parse_mesh_config(struct genl_info *, struct mesh_config *, u32 *);
4025:	static int nl80211_parse_mon_options(struct cfg80211_registered_device *, enum nl80211_iftype, struct genl_info *, struct vif_params *);
9276:	static int nl80211_parse_sched_scan_per_band_rssi(struct wiphy *, struct cfg80211_match_set *, struct nlattr *, s32);
9191:	static int nl80211_parse_sched_scan_plans(struct wiphy *, int, struct cfg80211_sched_scan_request *, struct nlattr **);
6827:	static int nl80211_parse_sta_wme(struct genl_info *, struct station_parameters *);
5084:	static int nl80211_parse_tx_bitrate_mask(struct genl_info *, struct nlattr **, enum nl80211_attrs, struct cfg80211_bitrate_mask *, struct net_device *, bool, unsigned int);
5600:	static int nl80211_parse_unsol_bcast_probe_resp(struct cfg80211_registered_device *, struct nlattr *, struct cfg80211_ap_settings *);
16248:	static void nl80211_post_doit(const struct genl_split_ops *, struct sk_buff *, struct genl_info *);
16146:	static int nl80211_pre_doit(const struct genl_split_ops *, struct sk_buff *, struct genl_info *);
17361:	static int nl80211_prep_scan_msg(struct sk_buff *, struct cfg80211_registered_device *, struct wireless_dev *, u32, u32, int, u32);
968:	static int nl80211_prepare_wdev_dump(struct netlink_callback *, struct cfg80211_registered_device **, struct wireless_dev **, struct nlattr **);
13857:	static int nl80211_probe_client(struct sk_buff *, struct genl_info *);
15536:	static int nl80211_probe_mesh_link(struct sk_buff *, struct genl_info *);
1598:	static int nl80211_put_iface_combinations(struct wiphy *, struct sk_buff *, bool);
2198:	static int nl80211_put_iftype_akm_suites(struct cfg80211_registered_device *, struct sk_buff *);
1575:	static int nl80211_put_iftypes(struct sk_buff *, u32, u16);
2329:	static int nl80211_put_mbssid_support(struct wiphy *, struct sk_buff *);
8315:	static int nl80211_put_regdom(const struct ieee80211_regdomain *, struct sk_buff *);
2280:	static int nl80211_put_sar_specs(struct cfg80211_registered_device *, struct sk_buff *);
6299:	static bool nl80211_put_signal(struct sk_buff *, u8, s8 *, int);
2238:	static int nl80211_put_tid_config_support(struct cfg80211_registered_device *, struct sk_buff *);
1206:	static bool nl80211_put_txq_stats(struct sk_buff *, struct cfg80211_txq_stats *, int);
13911:	static int nl80211_register_beacons(struct sk_buff *, struct genl_info *);
12233:	static int nl80211_register_mgmt(struct sk_buff *, struct genl_info *);
13840:	static int nl80211_register_unexpected_frame(struct sk_buff *, struct genl_info *);
7898:	static int nl80211_reload_regdb(struct sk_buff *, struct genl_info *);
12098:	static int nl80211_remain_on_channel(struct sk_buff *, struct genl_info *);
15902:	static int nl80211_remove_link(struct sk_buff *, struct genl_info *);
16034:	static int nl80211_remove_link_station(struct sk_buff *, struct genl_info *);
7853:	static int nl80211_req_set_reg(struct sk_buff *, struct genl_info *);
1865:	static int nl80211_send_band_rateinfo(struct sk_buff *, struct ieee80211_supported_band *, bool);
3736:	static int nl80211_send_chandef(struct sk_buff *, const struct cfg80211_chan_def *);
1772:	static int nl80211_send_coalesce(struct sk_buff *, struct cfg80211_registered_device *);
3769:	static int nl80211_send_iface(struct sk_buff *, u32, u32, int, struct cfg80211_registered_device *, struct wireless_dev *, enum nl80211_commands);
1959:	static int nl80211_send_mgmt_stypes(struct sk_buff *, const struct ieee80211_txrx_stypes *);
17563:	static void nl80211_send_mlme_event(struct cfg80211_registered_device *, struct net_device *, const u8 *, size_t, enum nl80211_commands, gfp_t, int, const u8 *, size_t, bool);
17685:	static void nl80211_send_mlme_timeout(struct cfg80211_registered_device *, struct net_device *, int, const u8 *, gfp_t);
7465:	static int nl80211_send_mpath(struct sk_buff *, u32, u32, int, struct net_device *, u8 *, u8 *, struct mpath_info *);
2155:	static int nl80211_send_pmsr_capa(struct cfg80211_registered_device *, struct sk_buff *);
8452:	static int nl80211_send_regdom(struct sk_buff *, struct netlink_callback *, u32, int, struct wiphy *, const struct ieee80211_regdomain *);
18193:	static void nl80211_send_remain_on_chan_event(int, struct cfg80211_registered_device *, struct wireless_dev *, u64, struct ieee80211_channel *, unsigned int, gfp_t);
6325:	static int nl80211_send_station(struct sk_buff *, u32, u32, u32, int, struct cfg80211_registered_device *, struct net_device *, const u8 *, struct station_info *);
2365:	static int nl80211_send_wiphy(struct cfg80211_registered_device *, enum nl80211_commands, struct sk_buff *, u32, u32, int, struct nl80211_dump_wiphy_state *);
6068:	static int nl80211_set_beacon(struct sk_buff *, struct genl_info *);
7777:	static int nl80211_set_bss(struct sk_buff *, struct genl_info *);
3368:	static int nl80211_set_channel(struct sk_buff *, struct genl_info *);
13717:	static int nl80211_set_coalesce(struct sk_buff *, struct genl_info *);
12698:	static int nl80211_set_cqm(struct sk_buff *, struct genl_info *);
15842:	static int nl80211_set_fils_aad(struct sk_buff *, struct genl_info *);
4114:	static int nl80211_set_interface(struct sk_buff *, struct genl_info *);
4526:	static int nl80211_set_key(struct sk_buff *, struct genl_info *);
4852:	static int nl80211_set_mac_acl(struct sk_buff *, struct genl_info *);
11282:	static int nl80211_set_mcast_rate(struct sk_buff *, struct genl_info *);
7617:	static int nl80211_set_mpath(struct sk_buff *, struct genl_info *);
15224:	static int nl80211_set_multicast_to_unicast(struct sk_buff *, struct genl_info *);
4333:	static int nl80211_set_noack_map(struct sk_buff *, struct genl_info *);
15246:	static int nl80211_set_pmk(struct sk_buff *, struct genl_info *);
12459:	static int nl80211_set_power_save(struct sk_buff *, struct genl_info *);
15001:	static int nl80211_set_qos_map(struct sk_buff *, struct genl_info *);
8581:	static int nl80211_set_reg(struct sk_buff *, struct genl_info *);
13785:	static int nl80211_set_rekey_data(struct sk_buff *, struct genl_info *);
16321:	static int nl80211_set_sar_specs(struct sk_buff *, struct genl_info *);
6961:	static int nl80211_set_station(struct sk_buff *, struct genl_info *);
15680:	static int nl80211_set_tid_config(struct sk_buff *, struct genl_info *);
12207:	static int nl80211_set_tx_bitrate_mask(struct sk_buff *, struct genl_info *);
3382:	static int nl80211_set_wiphy(struct sk_buff *, struct genl_info *);
11958:	static int nl80211_setdel_pmksa(struct sk_buff *, struct genl_info *);
5773:	static int nl80211_start_ap(struct sk_buff *, struct genl_info *);
13989:	static int nl80211_start_nan(struct sk_buff *, struct genl_info *);
13945:	static int nl80211_start_p2p_device(struct sk_buff *, struct genl_info *);
9734:	static int nl80211_start_radar_detection(struct sk_buff *, struct genl_info *);
9655:	static int nl80211_start_sched_scan(struct sk_buff *, struct genl_info *);
6100:	static int nl80211_stop_ap(struct sk_buff *, struct genl_info *);
14033:	static int nl80211_stop_nan(struct sk_buff *, struct genl_info *);
13973:	static int nl80211_stop_p2p_device(struct sk_buff *, struct genl_info *);
9708:	static int nl80211_stop_sched_scan(struct sk_buff *, struct genl_info *);
15191:	static int nl80211_tdls_cancel_channel_switch(struct sk_buff *, struct genl_info *);
15131:	static int nl80211_tdls_channel_switch(struct sk_buff *, struct genl_info *);
12040:	static int nl80211_tdls_mgmt(struct sk_buff *, struct genl_info *);
12077:	static int nl80211_tdls_oper(struct sk_buff *, struct genl_info *);
8927:	static int nl80211_trigger_scan(struct sk_buff *, struct genl_info *);
15364:	static int nl80211_tx_control_port(struct sk_buff *, struct genl_info *);
12279:	static int nl80211_tx_mgmt(struct sk_buff *, struct genl_info *);
12428:	static int nl80211_tx_mgmt_cancel_wait(struct sk_buff *, struct genl_info *);
11817:	static int nl80211_update_connect_params(struct sk_buff *, struct genl_info *);
14579:	static int nl80211_update_ft_ies(struct sk_buff *, struct genl_info *);
8283:	static int nl80211_update_mesh_config(struct sk_buff *, struct genl_info *);
15511:	static int nl80211_update_owe_info(struct sk_buff *, struct genl_info *);
4350:	static int nl80211_validate_key_link_id(struct genl_info *, struct wireless_dev *, int, bool);
14655:	static int nl80211_vendor_check_policy(const struct wiphy_vendor_command *, struct nlattr *, struct netlink_ext_ack *);
14677:	static int nl80211_vendor_cmd(struct sk_buff *, struct genl_info *);
14868:	static int nl80211_vendor_cmd_dump(struct sk_buff *, struct netlink_callback *);
11927:	static int nl80211_wiphy_netns(struct sk_buff *, struct genl_info *);
4808:	static struct cfg80211_acl_data *parse_acl_data(struct wiphy *, struct genl_info *);
6118:	static int parse_station_flags(struct genl_info *, enum nl80211_iftype, struct station_parameters *);
225:	static int validate_beacon_head(const struct nlattr *, struct netlink_ext_ack *);
5233:	static int validate_beacon_tx_rate(struct cfg80211_registered_device *, enum nl80211_band, struct cfg80211_bitrate_mask *);
288:	static int validate_he_capa(const struct nlattr *, struct netlink_ext_ack *);
270:	static int validate_ie_attr(const struct nlattr *, struct netlink_ext_ack *);
10563:	static int validate_pae_over_nl80211(struct cfg80211_registered_device *, struct genl_info *);
8662:	static int validate_scan_freqs(struct nlattr *);
4954:	static void vht_build_mcs_mask(u16, u16 *);

File net/wireless/ocb.c:
18:	int __cfg80211_join_ocb(struct cfg80211_registered_device *, struct net_device *, struct ocb_setup *);
57:	int __cfg80211_leave_ocb(struct cfg80211_registered_device *, struct net_device *);
43:	int cfg80211_join_ocb(struct cfg80211_registered_device *, struct net_device *, struct ocb_setup *);
78:	int cfg80211_leave_ocb(struct cfg80211_registered_device *, struct net_device *);

File net/wireless/of.c:
74:	void wiphy_read_of_freq_limits(struct wiphy *);

File net/wireless/pmsr.c:
342:	void cfg80211_pmsr_complete(struct wireless_dev *, struct cfg80211_pmsr_request *, gfp_t);
621:	void cfg80211_pmsr_free_wk(struct work_struct *);
549:	void cfg80211_pmsr_report(struct wireless_dev *, struct cfg80211_pmsr_request *, struct cfg80211_pmsr_result *, gfp_t);
631:	void cfg80211_pmsr_wdev_down(struct wireless_dev *);
649:	void cfg80211_release_pmsr(struct wireless_dev *, u32);
260:	int nl80211_pmsr_start(struct sk_buff *, struct genl_info *);
598:	static void cfg80211_pmsr_process_abort(struct wireless_dev *);
395:	static int nl80211_pmsr_send_ftm_res(struct sk_buff *, struct cfg80211_pmsr_result *);

File net/wireless/radiotap.c:
97:	int ieee80211_radiotap_iterator_init(struct ieee80211_radiotap_iterator *, struct ieee80211_radiotap_header *, int, const struct ieee80211_radiotap_vendor_namespaces *);
212:	int ieee80211_radiotap_iterator_next(struct ieee80211_radiotap_iterator *);

File net/wireless/reg.c:
4162:	int cfg80211_get_unii(int);
1687:	const struct ieee80211_reg_rule *freq_reg_info(struct wiphy *, u32);
148:	const struct ieee80211_regdomain *get_wiphy_regdom(struct wiphy *);
367:	bool is_world_regdom(const char *);
2952:	bool reg_dfs_domain_same(struct wiphy *, struct wiphy *);
171:	enum nl80211_dfs_regions reg_get_dfs_region(struct wiphy *);
1246:	unsigned int reg_get_max_bandwidth(const struct ieee80211_regdomain *, const struct ieee80211_reg_rule *);
1696:	const char *reg_initiator_name(enum nl80211_reg_initiator);
1170:	bool reg_is_valid_request(const char *);
2087:	bool reg_last_request_cell_base(void);
940:	int reg_query_regdb_wmm(char *, int, struct ieee80211_reg_rule *);
1107:	int reg_reload_regdb(void);
3772:	bool reg_supported_dfs_region(enum nl80211_dfs_regions);
4368:	void regulatory_exit(void);
3337:	int regulatory_hint(struct wiphy *, const char *);
3365:	void regulatory_hint_country_ie(struct wiphy *, enum nl80211_band, const u8 *, u8);
3621:	void regulatory_hint_disconnect(void);
3674:	int regulatory_hint_found_beacon(struct wiphy *, struct ieee80211_channel *, gfp_t);
3292:	int regulatory_hint_indoor(bool, u32);
3263:	int regulatory_hint_user(const char *, enum nl80211_user_reg_hint_type);
4203:	bool regulatory_indoor_allowed(void);
4350:	int regulatory_init(void);
3319:	void regulatory_netlink_notify(u32);
4208:	bool regulatory_pre_cac_allowed(struct wiphy *);
4265:	void regulatory_propagate_dfs_state(struct wiphy *, struct cfg80211_chan_def *, enum nl80211_dfs_state, enum nl80211_radar_event);
4077:	int regulatory_set_wiphy_regd(struct wiphy *, struct ieee80211_regdomain *);
4090:	int regulatory_set_wiphy_regd_sync(struct wiphy *, struct ieee80211_regdomain *);
3969:	int set_regdom(const struct ieee80211_regdomain *, enum ieee80211_regd_source);
2636:	void wiphy_apply_custom_regulatory(struct wiphy *, const struct ieee80211_regdomain *);
4134:	void wiphy_regulatory_deregister(struct wiphy *);
4108:	void wiphy_regulatory_register(struct wiphy *);
4041:	static int __regulatory_set_wiphy_regd(struct wiphy *, struct ieee80211_regdomain *);
535:	static void crda_timeout_work(struct work_struct *);
2616:	static void handle_band_custom(struct wiphy *, struct ieee80211_supported_band *, const struct ieee80211_regdomain *);
786:	static int load_builtin_regdb_keys(void);
742:	static void load_keys_from_buffer(const u8 *, unsigned int);
3720:	static void print_rd_rules(const struct ieee80211_regdomain *);
1019:	static int query_regdb(const char *);
2488:	static void reg_check_chans_work(struct work_struct *);
3035:	static void reg_process_hint(struct regulatory_request *);
2355:	static void reg_process_ht_flags(struct wiphy *);
3168:	static void reg_process_self_managed_hint(struct wiphy *);
3204:	static void reg_process_self_managed_hints(void);
1159:	static bool reg_query_database(struct regulatory_request *);
483:	static void reg_regdb_apply(struct work_struct *);
1714:	static uint32_t reg_rule_to_chan_bw_flags(const struct ieee80211_regdomain *, const struct ieee80211_reg_rule *, const struct ieee80211_channel *);
1372:	static int reg_rules_intersect(const struct ieee80211_regdomain *, const struct ieee80211_regdomain *, const struct ieee80211_reg_rule *, const struct ieee80211_reg_rule *, struct ieee80211_reg_rule *);
3219:	static void reg_todo(struct work_struct *);
1039:	static void regdb_fw_cb(const struct firmware *, void *);
1535:	static struct ieee80211_regdomain *regdom_intersect(const struct ieee80211_regdomain *, const struct ieee80211_regdomain *);
3244:	static int regulatory_hint_core(const char *);
4300:	static int regulatory_init_db(void);
321:	static void reset_regdomains(bool, const struct ieee80211_regdomain *);
3498:	static void restore_regulatory_settings(bool, bool);
879:	static void set_wmm_rule(const struct fwdb_header *, const struct fwdb_country *, const struct fwdb_rule *, struct ieee80211_reg_rule *);
850:	static bool valid_regdb(const u8 *, unsigned int);
661:	static bool valid_wmm(struct fwdb_wmm_rule *);
3021:	static void wiphy_all_share_dfs_chan_state(struct wiphy *);
2514:	static void wiphy_update_regulatory(struct wiphy *, enum nl80211_reg_initiator);

File net/wireless/scan.c:
932:	void ___cfg80211_scan_done(struct cfg80211_registered_device *, bool);
1003:	void __cfg80211_scan_done(struct work_struct *);
1188:	int __cfg80211_stop_sched_scan(struct cfg80211_registered_device *, u64, bool);
1042:	void cfg80211_add_sched_scan_req(struct cfg80211_registered_device *, struct cfg80211_sched_scan_request *);
1203:	void cfg80211_bss_age(struct cfg80211_registered_device *, unsigned long);
1215:	void cfg80211_bss_expire(struct cfg80211_registered_device *);
1220:	void cfg80211_bss_flush(struct wiphy *);
2624:	void cfg80211_bss_iter(struct wiphy *, struct cfg80211_chan_def *, void (*)(struct wiphy *, struct cfg80211_bss *, void *), void *);
1707:	struct cfg80211_internal_bss *cfg80211_bss_update(struct cfg80211_registered_device *, struct cfg80211_internal_bss *, bool, unsigned long);
1231:	const struct element *cfg80211_find_elem_match(u8, const u8 *, unsigned int, const u8 *, unsigned int, unsigned int);
1247:	const struct element *cfg80211_find_vendor_elem(unsigned int, int, const u8 *, unsigned int);
1428:	struct cfg80211_bss *cfg80211_get_bss(struct wiphy *, struct ieee80211_channel *, const u8 *, const u8 *, size_t, enum ieee80211_bss_type, enum ieee80211_privacy);
1812:	int cfg80211_get_ies_channel_number(const u8 *, size_t, enum nl80211_band, enum cfg80211_bss_frame_type);
2242:	struct cfg80211_bss *cfg80211_inform_bss_data(struct wiphy *, struct cfg80211_inform_bss *, enum cfg80211_bss_frame_type, const u8 *, u64, u16, u16, const u8 *, size_t, gfp_t);
2513:	struct cfg80211_bss *cfg80211_inform_bss_frame_data(struct wiphy *, struct cfg80211_inform_bss *, struct ieee80211_mgmt *, size_t, gfp_t);
212:	bool cfg80211_is_element_inherited(const struct element *, const struct element *);
2093:	size_t cfg80211_merge_profile(const u8 *, size_t, const struct element *, const struct element *, u8 *, size_t);
2581:	void cfg80211_put_bss(struct wiphy *, struct cfg80211_bss *);
2568:	void cfg80211_ref_bss(struct wiphy *, struct cfg80211_bss *);
897:	int cfg80211_scan(struct cfg80211_registered_device *);
1015:	void cfg80211_scan_done(struct cfg80211_scan_request *, struct cfg80211_scan_info *);
1080:	int cfg80211_sched_scan_req_possible(struct cfg80211_registered_device *, bool);
1131:	void cfg80211_sched_scan_results(struct wiphy *, u64);
1105:	void cfg80211_sched_scan_results_wk(struct work_struct *);
1161:	void cfg80211_sched_scan_stopped(struct wiphy *, u64);
1149:	void cfg80211_sched_scan_stopped_locked(struct wiphy *, u64);
1169:	int cfg80211_stop_sched_scan_req(struct cfg80211_registered_device *, struct cfg80211_sched_scan_request *, bool);
2594:	void cfg80211_unlink_bss(struct wiphy *, struct cfg80211_bss *);
2646:	void cfg80211_update_assoc_bss_entry(struct wireless_dev *, unsigned int, struct ieee80211_channel *);
182:	static bool __cfg80211_unlink_bss(struct cfg80211_registered_device *, struct cfg80211_internal_bss *);
154:	static void bss_ref_put(struct cfg80211_registered_device *, struct cfg80211_internal_bss *);
1936:	static struct cfg80211_bss *cfg80211_inform_single_bss_data(struct wiphy *, struct cfg80211_inform_bss *, enum cfg80211_bss_frame_type, const u8 *, u64, u16, u16, const u8 *, size_t, struct cfg80211_non_tx_bss *, gfp_t);
2122:	static void cfg80211_parse_mbssid_data(struct wiphy *, struct cfg80211_inform_bss *, enum cfg80211_bss_frame_type, const u8 *, u64, u16, const u8 *, size_t, struct cfg80211_non_tx_bss *, gfp_t);
730:	static int cfg80211_scan_6ghz(struct cfg80211_registered_device *);
1627:	static bool cfg80211_update_known_bss(struct cfg80211_registered_device *, struct cfg80211_internal_bss *, struct cfg80211_internal_bss *, bool);
1280:	static int cmp_bss(struct cfg80211_bss *, struct cfg80211_bss *, enum bss_compare_mode);

File net/wireless/sme.c:
721:	void __cfg80211_connect_result(struct net_device *, struct cfg80211_connect_resp_params *, bool);
1303:	void __cfg80211_disconnected(struct net_device *, const u8 *, size_t, u16, bool);
1254:	void __cfg80211_port_authorized(struct wireless_dev *, const u8 *, const u8 *, u8);
1044:	void __cfg80211_roamed(struct wireless_dev *, struct cfg80211_roam_info *);
1534:	void cfg80211_autodisconnect_wk(struct work_struct *);
244:	void cfg80211_conn_work(struct work_struct *);
1394:	int cfg80211_connect(struct cfg80211_registered_device *, struct net_device *, struct cfg80211_connect_params *, struct cfg80211_cached_keys *, const u8 *);
935:	void cfg80211_connect_done(struct net_device *, struct cfg80211_connect_resp_params *, gfp_t);
1499:	int cfg80211_disconnect(struct cfg80211_registered_device *, struct net_device *, u16, bool);
1364:	void cfg80211_disconnected(struct net_device *, u16, const u8 *, size_t, bool, gfp_t);
1271:	void cfg80211_port_authorized(struct net_device *, const u8 *, const u8 *, u8, gfp_t);
1132:	void cfg80211_roamed(struct net_device *, struct cfg80211_roam_info *, gfp_t);
463:	void cfg80211_sme_abandon_assoc(struct wireless_dev *);
452:	void cfg80211_sme_assoc_timeout(struct wireless_dev *);
430:	void cfg80211_sme_auth_timeout(struct wireless_dev *);
425:	void cfg80211_sme_deauth(struct wireless_dev *);
441:	void cfg80211_sme_disassoc(struct wireless_dev *);
396:	bool cfg80211_sme_rx_assoc_resp(struct wireless_dev *, u16);
345:	void cfg80211_sme_rx_auth(struct wireless_dev *, const u8 *, size_t);
336:	void cfg80211_sme_scan_done(struct net_device *);
145:	static int cfg80211_conn_do_work(struct wireless_dev *, enum nl80211_timeout_reason *);
64:	static int cfg80211_conn_scan(struct wireless_dev *);
702:	static void cfg80211_connect_result_release_bsses(struct wireless_dev *, struct cfg80211_connect_resp_params *);
474:	static void cfg80211_wdev_release_bsses(struct wireless_dev *);
691:	static void disconnect_work(struct work_struct *);

File net/wireless/sysfs.c:
173:	void wiphy_sysfs_exit(void);
168:	int wiphy_sysfs_init(void);
38:	static ssize_t address_mask_show(struct device *, struct device_attribute *, char *);
50:	static ssize_t addresses_show(struct device *, struct device_attribute *, char *);
36:	static ssize_t index_show(struct device *, struct device_attribute *, char *);
37:	static ssize_t macaddress_show(struct device *, struct device_attribute *, char *);
40:	static ssize_t name_show(struct device *, struct device_attribute *, char *);
78:	static void wiphy_dev_release(struct device *);
151:	static const void *wiphy_namespace(const struct device *);

File net/wireless/util.c:
1572:	u32 cfg80211_calculate_bitrate(struct rate_info *);
1017:	int cfg80211_change_iface(struct cfg80211_registered_device *, struct net_device *, enum nl80211_iftype, struct vif_params *);
2135:	int cfg80211_check_combinations(struct wiphy *, struct iface_combination_params *);
838:	unsigned int cfg80211_classify8021d(struct sk_buff *, struct cfg80211_qos_map *);
2244:	bool cfg80211_does_bw_fit_range(const struct ieee80211_freq_range *, u32, u32);
2222:	void cfg80211_free_nan_func(struct cfg80211_nan_func *);
2501:	const struct wiphy_iftype_ext_capab *cfg80211_get_iftype_ext_capa(struct wiphy *, enum nl80211_iftype);
1593:	int cfg80211_get_p2p_attr(const u8 *, unsigned int, enum ieee80211_p2p_attr_id, u8 *, unsigned int);
2202:	int cfg80211_get_station(struct net_device *, const u8 *, struct station_info *);
2434:	bool cfg80211_iftype_allowed(struct wiphy *, enum nl80211_iftype, bool, u8);
2018:	int cfg80211_iter_combinations(struct wiphy *, struct iface_combination_params *, void (*)(const struct ieee80211_iface_combination *, void *), void *);
1007:	void cfg80211_process_rdev_events(struct cfg80211_registered_device *);
956:	void cfg80211_process_wdev_events(struct wireless_dev *);
2457:	void cfg80211_remove_link(struct wireless_dev *, unsigned int);
2480:	void cfg80211_remove_links(struct wireless_dev *);
2492:	int cfg80211_remove_virtual_intf(struct cfg80211_registered_device *, struct wireless_dev *);
2293:	void cfg80211_send_layer2_update(struct net_device *, const u8 *);
2259:	int cfg80211_sinfo_alloc_tid_stats(struct station_info *, gfp_t);
268:	bool cfg80211_supported_cipher_suite(struct wiphy *, u32);
928:	void cfg80211_upload_connect_keys(struct wireless_dev *);
296:	bool cfg80211_valid_key_idx(struct cfg80211_registered_device *, int, bool);
2001:	int cfg80211_validate_beacon_int(struct cfg80211_registered_device *, enum nl80211_iftype, u32);
319:	int cfg80211_validate_key_settings(struct cfg80211_registered_device *, struct key_params *, int, bool, const u8 *);
751:	void ieee80211_amsdu_to_8023s(struct sk_buff *, struct sk_buff_head *, const u8 *, enum nl80211_iftype, const unsigned int, const u8 *, const u8 *);
916:	const struct element *ieee80211_bss_get_elem(struct cfg80211_bss *, u8);
1813:	bool ieee80211_chandef_to_operating_class(struct cfg80211_chan_def *, u8 *);
75:	u32 ieee80211_channel_to_freq_khz(int, enum nl80211_band);
545:	int ieee80211_data_to_8023_exthdr(struct sk_buff *, struct ethhdr *, const u8 *, enum nl80211_iftype, u8, bool);
142:	int ieee80211_freq_khz_to_channel(u32);
168:	struct ieee80211_channel *ieee80211_get_channel_khz(struct wiphy *, u32);
509:	unsigned int ieee80211_get_hdrlen_from_skb(const struct sk_buff *);
539:	unsigned int ieee80211_get_mesh_hdrlen(struct ieee80211s_hdr *);
2189:	unsigned int ieee80211_get_num_supported_channels(struct wiphy *);
2151:	int ieee80211_get_ratemask(struct ieee80211_supported_band *, const u8 *, unsigned int, u32 *);
28:	const struct ieee80211_rate *ieee80211_get_response_rate(struct ieee80211_supported_band *, u32, int);
2327:	int ieee80211_get_vht_max_nss(struct ieee80211_vht_cap *, enum ieee80211_vht_chanwidth, int, bool, unsigned int);
463:	unsigned int ieee80211_hdrlen(__le16);
1738:	size_t ieee80211_ie_split_ric(const u8 *, size_t, const u8 *, int, const u8 *, int, size_t);
46:	u32 ieee80211_mandatory_rates(struct ieee80211_supported_band *, enum nl80211_bss_scan_width);
1786:	bool ieee80211_operating_class_to_band(u8, enum nl80211_band *);
116:	enum nl80211_chan_width ieee80211_s1g_channel_width(const struct ieee80211_channel *);
259:	void ieee80211_set_bitrate_flags(struct wiphy *);
1441:	static u32 cfg80211_calculate_bitrate_eht(struct rate_info *);
1358:	static u32 cfg80211_calculate_bitrate_he(struct rate_info *);
2128:	static void cfg80211_iter_sum_ifcombs(const struct ieee80211_iface_combination *, void *);

File security/commoncap.c:
890:	int cap_bprm_creds_from_file(struct linux_binprm *, struct file *);
66:	int cap_capable(const struct cred *, struct user_namespace *, int, unsigned int);
200:	int cap_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
242:	int cap_capset(struct cred *, const struct cred *, const kernel_cap_t *, const kernel_cap_t *, const kernel_cap_t *);
529:	int cap_convert_nscap(struct user_namespace *, struct dentry *, const void **, size_t);
380:	int cap_inode_getsecurity(struct user_namespace *, struct inode *, const char *, void **, bool);
321:	int cap_inode_killpriv(struct user_namespace *, struct dentry *);
296:	int cap_inode_need_killpriv(struct dentry *);
1035:	int cap_inode_removexattr(struct user_namespace *, struct dentry *, const char *);
994:	int cap_inode_setxattr(struct dentry *, const char *, const void *, size_t, int);
1426:	int cap_mmap_addr(unsigned long);
1440:	int cap_mmap_file(struct file *, unsigned long, unsigned long, unsigned long);
134:	int cap_ptrace_access_check(struct task_struct *, unsigned int);
171:	int cap_ptrace_traceme(struct task_struct *);
112:	int cap_settime(const struct timespec64 *, const struct timezone *);
1128:	int cap_task_fix_setuid(struct cred *, const struct cred *, int);
1270:	int cap_task_prctl(int, unsigned long, unsigned long, unsigned long, unsigned long);
1215:	int cap_task_setioprio(struct task_struct *, int);
1230:	int cap_task_setnice(struct task_struct *, int);
1200:	int cap_task_setscheduler(struct task_struct *);
1405:	int cap_vm_enough_memory(struct mm_struct *, long);
641:	int get_vfs_caps_from_disk(struct user_namespace *, const struct dentry *, struct cpu_vfs_cap_data *);
331:	static bool rootid_owns_currentns(vfsuid_t);

File security/device_cgroup.c:
861:	int devcgroup_check_permission(short, u32, u32, short);
784:	static ssize_t devcgroup_access_write(struct kernfs_open_file *, char *, size_t, loff_t);
222:	static struct cgroup_subsys_state *devcgroup_css_alloc(struct cgroup_subsys_state *);
235:	static void devcgroup_css_free(struct cgroup_subsys_state *);
209:	static void devcgroup_offline(struct cgroup_subsys_state *);
188:	static int devcgroup_online(struct cgroup_subsys_state *);
281:	static int devcgroup_seq_show(struct seq_file *, void *);
462:	static int parent_has_perm(struct dev_cgroup *, struct dev_exception_item *);

File security/keys/gc.c:
99:	void key_gc_keytype(struct key_type *);
51:	void key_schedule_gc(time64_t);
72:	void key_schedule_gc_links(void);
173:	static void key_garbage_collector(struct work_struct *);
82:	static void key_gc_timer_func(struct timer_list *);
122:	static void key_gc_unused_keys(struct list_head *);

File security/keys/key.c:
1121:	int generic_key_instantiate(struct key *, struct key_preparsed_payload *);
225:	struct key *key_alloc(struct key_type *, const char *, kuid_t, kgid_t, const struct cred *, key_perm_t, unsigned long, struct key_restriction *);
816:	key_ref_t key_create_or_update(key_ref_t, const char *, const char *, const void *, size_t, key_perm_t, unsigned long);
1201:	void key_init(void);
498:	int key_instantiate_and_link(struct key *, const void *, size_t, struct key *, struct key *);
1094:	void key_invalidate(struct key *);
661:	struct key *key_lookup(key_serial_t);
372:	int key_payload_reserve(struct key *, size_t);
647:	void key_put(struct key *);
574:	int key_reject_and_link(struct key *, unsigned int, unsigned int, struct key *, struct key *);
1058:	void key_revoke(struct key *);
723:	void key_set_timeout(struct key *, unsigned int);
703:	struct key_type *key_type_lookup(const char *);
743:	void key_type_put(struct key_type *);
1003:	int key_update(key_ref_t, const void *, size_t);
51:	struct key_user *key_user_lookup(kuid_t);
120:	void key_user_put(struct key_user *);
1151:	int register_key_type(struct key_type *);
1187:	void unregister_key_type(struct key_type *);
424:	static int __key_instantiate_and_link(struct key *, struct key_preparsed_payload *, struct key *, struct key *, struct assoc_array_edit **);
754:	static key_ref_t __key_update(key_ref_t, struct key_preparsed_payload *);

File security/keys/keyctl.c:
74:	long __arm64_sys_add_key(const struct pt_regs *);
1869:	long __arm64_sys_keyctl(const struct pt_regs *);
167:	long __arm64_sys_request_key(const struct pt_regs *);
1511:	long keyctl_assume_authority(key_serial_t);
1849:	long keyctl_capabilities(unsigned char *, size_t);
949:	long keyctl_chown_key(key_serial_t, uid_t, gid_t);
644:	long keyctl_describe_key(key_serial_t, char *, size_t);
258:	long keyctl_get_keyring_ID(key_serial_t, int);
1556:	long keyctl_get_security(key_serial_t, char *, size_t);
1244:	long keyctl_instantiate_key(key_serial_t, const void *, size_t, key_serial_t);
1274:	long keyctl_instantiate_key_iov(key_serial_t, const struct iovec *, unsigned int, key_serial_t);
420:	long keyctl_invalidate_key(key_serial_t);
288:	long keyctl_join_session_keyring(const char *);
467:	long keyctl_keyring_clear(key_serial_t);
515:	long keyctl_keyring_link(key_serial_t, key_serial_t);
595:	long keyctl_keyring_move(key_serial_t, key_serial_t, key_serial_t, unsigned int);
716:	long keyctl_keyring_search(key_serial_t, const char *, const char *, key_serial_t);
552:	long keyctl_keyring_unlink(key_serial_t, key_serial_t);
1310:	long keyctl_negate_key(key_serial_t, unsigned int, key_serial_t);
825:	long keyctl_read_key(key_serial_t, char *, size_t);
1330:	long keyctl_reject_key(key_serial_t, unsigned int, unsigned int, key_serial_t);
1724:	long keyctl_restrict_keyring(key_serial_t, const char *, const char *);
379:	long keyctl_revoke_key(key_serial_t);
1621:	long keyctl_session_to_parent(void);
1388:	long keyctl_set_reqkey_keyring(int);
1452:	long keyctl_set_timeout(key_serial_t, unsigned int);
1067:	long keyctl_setperm_key(key_serial_t, key_perm_t);
325:	long keyctl_update_key(key_serial_t, const void *, size_t);
1144:	static int keyctl_change_reqkey_auth(struct key *);
1167:	static long keyctl_instantiate_key_common(key_serial_t, struct iov_iter *, key_serial_t);

File security/keys/keyctl_pkey.c:
212:	long keyctl_pkey_e_d_s(int, const struct keyctl_pkey_params *, const char *, const void *, void *);
169:	long keyctl_pkey_query(key_serial_t, const char *, struct keyctl_pkey_query *);
288:	long keyctl_pkey_verify(const struct keyctl_pkey_params *, const char *, const void *, const void *);
78:	static int keyctl_pkey_params_get(key_serial_t, const char *, struct kernel_pkey_params *);
113:	static int keyctl_pkey_params_get_2(const struct keyctl_pkey_params *, const char *, int, struct kernel_pkey_params *);

File security/keys/keyring.c:
1367:	void __key_link(struct key *, struct key *, struct assoc_array_edit **);
1292:	int __key_link_begin(struct key *, const struct keyring_index_key *, struct assoc_array_edit **);
1350:	int __key_link_check_live_key(struct key *, struct key *);
1382:	void __key_link_end(struct key *, const struct keyring_index_key *, struct assoc_array_edit *);
1236:	int __key_link_lock(struct key *, const struct keyring_index_key *);
1258:	int __key_move_lock(struct key *, struct key *, const struct keyring_index_key *);
1098:	key_ref_t find_key_to_update(key_ref_t, const struct keyring_index_key *);
1141:	struct key *find_keyring_by_name(const char *, bool);
565:	bool key_default_cmp(const struct key *, const struct key_match_data *);
57:	void key_free_user_ns(struct user_namespace *);
1435:	int key_link(struct key *, struct key *);
1590:	int key_move(struct key *, struct key *, struct key *, unsigned int);
238:	bool key_put_tag(struct key_tag *);
256:	void key_remove_domain(struct key_tag *);
214:	void key_set_index_key(struct keyring_index_key *);
1545:	int key_unlink(struct key *, struct key *);
517:	struct key *keyring_alloc(const char *, kuid_t, kgid_t, const struct cred *, key_perm_t, unsigned long, struct key_restriction *, struct key *);
1647:	int keyring_clear(struct key *);
1716:	void keyring_gc(struct key *, time64_t);
1021:	int keyring_restrict(key_ref_t, const char *, const char *);
1761:	void keyring_restriction_gc(struct key *, struct key_type *);
937:	key_ref_t keyring_search(key_ref_t, struct key_type *, const char *, bool);
899:	key_ref_t keyring_search_rcu(key_ref_t, struct keyring_search_context *);
554:	int restrict_link_reject(struct key *, const struct key_type *, const union key_payload *, struct key *);
309:	static bool keyring_compare_object(const void *, const void *);
437:	static void keyring_describe(const struct key *, struct seq_file *);
412:	static void keyring_destroy(struct key *);
1189:	static int keyring_detect_cycle_iterator(const void *, void *);
325:	static int keyring_diff_objects(const void *, const void *);
387:	static void keyring_free_object(void *);
131:	static void keyring_free_preparse(struct key_preparsed_payload *);
1701:	static int keyring_gc_check_iterator(const void *, void *);
1690:	static bool keyring_gc_select_iterator(void *, void *);
268:	static unsigned long keyring_get_key_chunk(const void *, int);
303:	static unsigned long keyring_get_object_key_chunk(const void *, int);
140:	static int keyring_instantiate(struct key *, struct key_preparsed_payload *);
123:	static int keyring_preparse(struct key_preparsed_payload *);
481:	static long keyring_read(const struct key *, char *, size_t);
458:	static int keyring_read_iterator(const void *, void *);
1678:	static void keyring_revoke(struct key *);
574:	static int keyring_search_iterator(const void *, void *);
663:	static bool search_nested_keyrings(struct key *, struct keyring_search_context *);

File security/keys/permission.c:
26:	int key_task_permission(const key_ref_t, const struct cred *, enum key_need_perm);
102:	int key_validate(const struct key *);

File security/keys/proc.c:
43:	static int key_proc_init(void);
291:	static void *proc_key_users_next(struct seq_file *, void *, loff_t *);
303:	static int proc_key_users_show(struct seq_file *, void *);
274:	static void *proc_key_users_start(struct seq_file *, loff_t *);
297:	static void proc_key_users_stop(struct seq_file *, void *);
135:	static void *proc_keys_next(struct seq_file *, void *, loff_t *);
153:	static int proc_keys_show(struct seq_file *, void *);
112:	static void *proc_keys_start(struct seq_file *, loff_t *);
147:	static void proc_keys_stop(struct seq_file *, void *);

File security/keys/process_keys.c:
185:	struct key *get_user_session_keyring_rcu(const struct cred *);
268:	int install_process_keyring_to_cred(struct cred *);
317:	int install_session_keyring_to_cred(struct cred *, struct key *);
221:	int install_thread_keyring_to_cred(struct cred *);
837:	long join_session_keyring(const char *);
911:	void key_change_session_keyring(struct callback_head *);
390:	void key_fsgid_changed(struct cred *);
377:	void key_fsuid_changed(struct cred *);
74:	int look_up_user_keyrings(struct key **, struct key **);
611:	key_ref_t lookup_user_key(key_serial_t, unsigned long, enum key_need_perm);
587:	bool lookup_user_key_possessed(const struct key *, const struct key_match_data *);
422:	key_ref_t search_cred_keyrings_rcu(struct keyring_search_context *);
539:	key_ref_t search_process_keyrings_rcu(struct keyring_search_context *);
960:	static int init_root_keyring(void);

File security/keys/request_key.c:
56:	void complete_request_key(struct key *, int);
558:	struct key *request_key_and_link(struct key_type *, const char *, struct key_tag *, const void *, size_t, void *, struct key *, unsigned long);
766:	struct key *request_key_rcu(struct key_type *, const char *, struct key_tag *);
690:	struct key *request_key_tag(struct key_type *, const char *, struct key_tag *, const char *);
730:	struct key *request_key_with_auxdata(struct key_type *, const char *, struct key_tag *, const void *, size_t, void *);
660:	int wait_for_key_construction(struct key *, bool);
115:	static int call_sbin_request_key(struct key *, void *);
87:	static void umh_keys_cleanup(struct subprocess_info *);
77:	static int umh_keys_init(struct subprocess_info *, struct cred *);

File security/keys/request_key_auth.c:
246:	struct key *key_get_instantiation_authkey(key_serial_t);
161:	struct key *request_key_auth_new(struct key *, const char *, const void *, size_t, struct key *);
106:	static void free_request_key_auth(struct request_key_auth *);
64:	static void request_key_auth_describe(const struct key *, struct seq_file *);
146:	static void request_key_auth_destroy(struct key *);
47:	static void request_key_auth_free_preparse(struct key_preparsed_payload *);
54:	static int request_key_auth_instantiate(struct key *, struct key_preparsed_payload *);
42:	static int request_key_auth_preparse(struct key_preparsed_payload *);
121:	static void request_key_auth_rcu_disposal(struct callback_head *);
82:	static long request_key_auth_read(const struct key *, char *, size_t);
134:	static void request_key_auth_revoke(struct key *);

File security/keys/user_defined.c:
158:	void user_describe(const struct key *, struct seq_file *);
146:	void user_destroy(struct key *);
83:	void user_free_preparse(struct key_preparsed_payload *);
59:	int user_preparse(struct key_preparsed_payload *);
171:	long user_read(const struct key *, char *, size_t);
128:	void user_revoke(struct key *);
101:	int user_update(struct key *, struct key_preparsed_payload *);
193:	static int logon_vet_description(const char *);
89:	static void user_free_payload_rcu(struct callback_head *);

File security/min_addr.c:
32:	int mmap_min_addr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
47:	static int init_mmap_min_addr(void);

File tools/lib/bpf/relo_core.c:
146:	int __bpf_core_types_are_compat(const struct btf *, __u32, const struct btf *, __u32, int);
1544:	int __bpf_core_types_match(const struct btf *, __u32, const struct btf *, __u32, bool, int);
1280:	int bpf_core_calc_relo_insn(const char *, const struct bpf_core_relo *, int, const struct btf *, struct bpf_core_cand_list *, struct bpf_core_spec *, struct bpf_core_relo_res *);
1156:	int bpf_core_format_spec(char *, size_t, const struct bpf_core_spec *);
263:	int bpf_core_parse_spec(const char *, const struct btf *, const struct bpf_core_relo *, struct bpf_core_spec *);
1024:	int bpf_core_patch_insn(const char *, struct bpf_insn *, int, const struct bpf_core_relo *, int, const struct bpf_core_relo_res *);
678:	static int bpf_core_calc_field_relo(const char *, const struct bpf_core_relo *, const struct bpf_core_spec *, __u64 *, __u32 *, __u32 *, bool *);
879:	static int bpf_core_calc_relo(const char *, const struct bpf_core_relo *, int, const struct bpf_core_spec *, const struct bpf_core_spec *, struct bpf_core_relo_res *);
1479:	static int bpf_core_composites_match(const struct btf *, const struct btf_type *, const struct btf *, const struct btf_type *, bool, int);
481:	static int bpf_core_match_member(const struct btf *, const struct bpf_core_accessor *, const struct btf *, __u32, struct bpf_core_spec *, __u32 *);
32:	static s64 btf__resolve_size(const struct btf *, u32);
71:	static bool is_flex_arr(const struct btf *, const struct bpf_core_accessor *, const struct btf_array *);

Non-debugging symbols:
0xffff800008010260  __entry_text_start
0xffff800008010260  __softirqentry_text_end
0xffff800008da7e38  __CortexA53843419_FFFF80000816B004
0xffff800008da7e40  __CortexA53843419_FFFF80000895B004
0xffff800008da7e48  __CortexA53843419_FFFF800008A86004
0xffff800008dbb630  __kprobes_text_end
0xffff800008dbb630  __kprobes_text_start
0xffff800008dbb630  __lock_text_end
0xffff800008dbd7e0  __idmap_text_end
0xffff800008dc0000  _etext
0xffff800009177000  __entry_tramp_text_end
0xffff800009178000  idmap_pg_dir
0xffff800009179000  tramp_pg_dir
0xffff80000917a000  reserved_pg_dir
0xffff80000917b000  swapper_pg_dir
0xffff8000091cd724  __exittext_end
