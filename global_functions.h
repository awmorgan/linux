File arch/arm64/kernel/alternative.c:
295:	void alt_cb_patch_nops(struct alt_instr *, __le32 *, __le32 *, int);
40:	bool alternative_is_applied(u16);
255:	void apply_alternatives_all(void);
269:	void apply_boot_alternatives(void);
File arch/arm64/kernel/cacheinfo.c:
20:	int cache_line_size(void);
46:	int init_cache_level(unsigned int);
85:	int populate_cache_leaves(unsigned int);
File arch/arm64/kernel/cpu_ops.c:
115:	const struct cpu_operations *get_cpu_ops(int);
99:	int init_cpu_ops(int);
File arch/arm64/kernel/cpufeature.c:
1339:	u64 __read_sysreg_by_encoding(u32);
3478:	enum mitigation_state arm64_get_meltdown_state(void);
3207:	void check_local_cpu_capabilities(void);
3276:	unsigned long cpu_get_elf_hwcap(void);
3286:	unsigned long cpu_get_elf_hwcap2(void);
1892:	bool cpu_has_amu_feat(int);
3270:	bool cpu_have_feature(unsigned int);
3265:	void cpu_set_feature(unsigned int);
3489:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
3449:	int do_emulate_mrs(struct pt_regs *, u32, u32);
136:	void dump_cpu_features(void);
759:	struct arm64_ftr_reg *get_arm64_ftr_reg(u32);
1897:	int get_cpu_with_amu_feat(void);
986:	void init_cpu_features(struct cpuinfo_arm64 *);
1597:	bool kaslr_requires_kpti(void);
1322:	u64 read_sanitised_ftr_reg(u32);
3303:	void setup_cpu_features(void);
1453:	const struct cpumask *system_32bit_el0_cpumask(void);
3235:	bool this_cpu_has_cap(unsigned int);
3462:	bool try_emulate_mrs(struct pt_regs *, u32);
1189:	void update_cpu_features(int, struct cpuinfo_arm64 *, struct cpuinfo_arm64 *);
File arch/arm64/kernel/cpuinfo.c:
456:	void cpuinfo_store_boot_cpu(void);
449:	void cpuinfo_store_cpu(void);
File arch/arm64/kernel/debug-monitors.c:
342:	int aarch32_break_handler(struct pt_regs *);
28:	u8 debug_monitors_arch(void);
381:	void debug_traps_init(void);
101:	void disable_debug_monitors(enum dbg_active_el);
80:	void enable_debug_monitors(enum dbg_active_el);
434:	int kernel_active_single_step(void);
426:	void kernel_disable_single_step(void);
417:	void kernel_enable_single_step(struct pt_regs *);
292:	void register_kernel_break_hook(struct break_hook *);
189:	void register_kernel_step_hook(struct step_hook *);
282:	void register_user_break_hook(struct break_hook *);
179:	void register_user_step_hook(struct step_hook *);
297:	void unregister_kernel_break_hook(struct break_hook *);
194:	void unregister_kernel_step_hook(struct step_hook *);
287:	void unregister_user_break_hook(struct break_hook *);
184:	void unregister_user_step_hook(struct step_hook *);
451:	void user_disable_single_step(struct task_struct *);
442:	void user_enable_single_step(struct task_struct *);
401:	void user_fastforward_single_step(struct task_struct *);
407:	void user_regs_reset_single_step(struct user_pt_regs *, struct task_struct *);
390:	void user_rewind_single_step(struct task_struct *);
File arch/arm64/kernel/elfcore.c:
115:	size_t elf_core_extra_data_size(struct coredump_params *);
78:	Elf64_Half elf_core_extra_phdrs(struct coredump_params *);
127:	int elf_core_write_extra_data(struct coredump_params *);
90:	int elf_core_write_extra_phdrs(struct coredump_params *, loff_t);
File arch/arm64/kernel/entry-common.c:
147:	void asm_exit_to_user_mode(struct pt_regs *);
839:	void el0t_32_error_handler(struct pt_regs *);
838:	void el0t_32_fiq_handler(struct pt_regs *);
837:	void el0t_32_irq_handler(struct pt_regs *);
836:	void el0t_32_sync_handler(struct pt_regs *);
755:	void el0t_64_error_handler(struct pt_regs *);
737:	void el0t_64_fiq_handler(struct pt_regs *);
727:	void el0t_64_irq_handler(struct pt_regs *);
649:	void el0t_64_sync_handler(struct pt_regs *);
499:	void el1h_64_error_handler(struct pt_regs *);
494:	void el1h_64_fiq_handler(struct pt_regs *);
489:	void el1h_64_irq_handler(struct pt_regs *);
420:	void el1h_64_sync_handler(struct pt_regs *);
359:	void el1t_64_error_handler(struct pt_regs *);
358:	void el1t_64_fiq_handler(struct pt_regs *);
357:	void el1t_64_irq_handler(struct pt_regs *);
356:	void el1t_64_sync_handler(struct pt_regs *);
File arch/arm64/kernel/fpsimd.c:
1516:	void do_fpsimd_acc(unsigned long, struct pt_regs *);
1525:	void do_fpsimd_exc(unsigned long, struct pt_regs *);
1472:	void do_sme_acc(unsigned long, struct pt_regs *);
1430:	void do_sve_acc(unsigned long, struct pt_regs *);
1305:	void fa64_kernel_enable(const struct arm64_cpu_capabilities *);
1741:	void fpsimd_bind_state_to_cpu(struct cpu_fp_state *);
1820:	void fpsimd_flush_task_state(struct task_struct *);
1609:	void fpsimd_flush_thread(void);
784:	void fpsimd_force_sync_to_sve(struct task_struct *);
1680:	void fpsimd_kvm_prepare(void);
1655:	void fpsimd_preserve_current_state(void);
1249:	void fpsimd_release_task(struct task_struct *);
1757:	void fpsimd_restore_current_state(void);
1861:	void fpsimd_save_and_flush_cpu_state(void);
1670:	void fpsimd_signal_preserve_current_state(void);
797:	void fpsimd_sync_to_sve(struct task_struct *);
1547:	void fpsimd_thread_switch(struct task_struct *);
1790:	void fpsimd_update_current_state(const struct user_fpsimd_state *);
1891:	void kernel_neon_begin(void);
1917:	void kernel_neon_end(void);
1319:	u64 read_smcr_features(void);
1160:	u64 read_zcr_features(void);
1268:	void sme_alloc(struct task_struct *);
995:	int sme_get_current_vl(void);
1286:	void sme_kernel_enable(const struct arm64_cpu_capabilities *);
976:	int sme_set_current_vl(unsigned long);
1343:	void sme_setup(void);
761:	void sve_alloc(struct task_struct *, bool);
966:	int sve_get_current_vl(void);
1147:	void sve_kernel_enable(const struct arm64_cpu_capabilities *);
947:	int sve_set_current_vl(unsigned long);
1180:	void sve_setup(void);
739:	size_t sve_state_size(const struct task_struct *);
830:	void sve_sync_from_fpsimd_zeropad(struct task_struct *);
812:	void sve_sync_to_fpsimd(struct task_struct *);
276:	unsigned int task_get_vl(const struct task_struct *, enum vec_type);
287:	unsigned int task_get_vl_onexec(const struct task_struct *, enum vec_type);
281:	void task_set_vl(struct task_struct *, enum vec_type, unsigned long);
293:	void task_set_vl_onexec(struct task_struct *, enum vec_type, unsigned long);
1039:	void vec_init_vq_map(enum vec_type);
845:	int vec_set_vector_length(struct task_struct *, enum vec_type, unsigned long, unsigned long);
1051:	void vec_update_vq_map(enum vec_type);
1066:	int vec_verify_vq_map(enum vec_type);
File arch/arm64/kernel/hw_breakpoint.c:
351:	int arch_bp_generic_fields(struct arch_hw_breakpoint_ctrl, int *, int *, int *);
335:	int arch_check_bp_in_kernelspace(struct arch_hw_breakpoint *);
288:	int arch_install_hw_breakpoint(struct perf_event *);
293:	void arch_uninstall_hw_breakpoint(struct perf_event *);
507:	int hw_breakpoint_arch_parse(struct perf_event *, const struct perf_event_attr *, struct arch_hw_breakpoint *);
1027:	int hw_breakpoint_exceptions_notify(struct notifier_block *, unsigned long, void *);
1020:	void hw_breakpoint_pmu_read(struct perf_event *);
42:	int hw_breakpoint_slots(int);
909:	void hw_breakpoint_thread_switch(struct task_struct *);
851:	int reinstall_suspended_bps(struct pt_regs *);
File arch/arm64/kernel/idle.c:
38:	void arch_cpu_idle(void);
23:	void cpu_do_idle(void);
File arch/arm64/kernel/idreg-override.c:
300:	void init_feature_override(u64);
File arch/arm64/kernel/io.c:
15:	void __memcpy_fromio(void *, const volatile void *, size_t);
43:	void __memcpy_toio(volatile void *, const void *, size_t);
71:	void __memset_io(volatile void *, int, size_t);
File arch/arm64/kernel/irq.c:
83:	void do_softirq_own_stack(void);
122:	void init_IRQ(void);
112:	int set_handle_fiq(void (*)(struct pt_regs *));
102:	int set_handle_irq(void (*)(struct pt_regs *));
File arch/arm64/kernel/jump_label.c:
13:	void arch_jump_label_transform(struct jump_entry *, enum jump_label_type);
File arch/arm64/kernel/mte.c:
395:	long get_mte_ctrl(struct task_struct *);
81:	int memcmp_pages(struct page *, struct page *);
292:	void mte_cpu_setup(void);
607:	size_t mte_probe_user_range(const char *, size_t);
521:	int mte_ptrace_copy_tags(struct task_struct *, long, unsigned long, unsigned long);
335:	void mte_suspend_enter(void);
351:	void mte_suspend_exit(void);
57:	void mte_sync_tags(pte_t, pte_t);
257:	void mte_thread_init_user(void);
270:	void mte_thread_switch(struct task_struct *);
359:	long set_mte_ctrl(struct task_struct *, unsigned long);
File arch/arm64/kernel/paravirt.c:
156:	int pv_time_init(void);
File arch/arm64/kernel/patching.c:
136:	int aarch64_insn_patch_text(void **, u32 *, int);
91:	int aarch64_insn_patch_text_nosync(void *, u32);
57:	int aarch64_insn_read(void *, u32 *);
86:	int aarch64_insn_write(void *, u32);
File arch/arm64/kernel/perf_callchain.c:
141:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
102:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
152:	unsigned long perf_instruction_pointer(struct pt_regs *);
160:	unsigned long perf_misc_flags(struct pt_regs *);
File arch/arm64/kernel/perf_regs.c:
101:	void perf_get_regs_user(struct perf_regs *, struct pt_regs *);
93:	u64 perf_reg_abi(struct task_struct *);
80:	int perf_reg_validate(u64);
30:	u64 perf_reg_value(struct pt_regs *, int);
File arch/arm64/kernel/pointer_auth.c:
93:	int ptrauth_get_enabled_keys(struct task_struct *);
11:	int ptrauth_prctl_reset_keys(struct task_struct *, unsigned long);
67:	int ptrauth_set_enabled_keys(struct task_struct *, unsigned long, unsigned long);
File arch/arm64/kernel/process.c:
576:	unsigned long __get_wchan(struct task_struct *);
200:	void __show_regs(struct pt_regs *);
522:	struct task_struct *__switch_to(struct task_struct *, struct task_struct *);
593:	unsigned long arch_align_stack(unsigned long);
72:	void arch_cpu_idle_dead(void);
287:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
740:	int arch_elf_adjust_prot(int, const struct arch_elf_state *, bool, bool);
282:	void arch_release_task_struct(struct task_struct *);
625:	void arch_setup_new_exec(void);
344:	int copy_thread(struct task_struct *, const struct kernel_clone_args *);
274:	void flush_thread(void);
694:	long get_tagged_addr_ctrl(struct task_struct *);
97:	void machine_halt(void);
110:	void machine_power_off(void);
126:	void machine_restart(char *);
87:	void machine_shutdown(void);
664:	long set_tagged_addr_ctrl(struct task_struct *, unsigned long);
243:	void show_regs(struct pt_regs *);
418:	void tls_preserve_current_state(void);
506:	void update_sctlr_el1(u64);
File arch/arm64/kernel/proton-pack.c:
795:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
751:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
819:	enum mitigation_state arm64_get_spectre_bhb_state(void);
215:	enum mitigation_state arm64_get_spectre_v2_state(void);
461:	enum mitigation_state arm64_get_spectre_v4_state(void);
446:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
61:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
124:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
202:	bool has_spectre_v2(const struct arm64_cpu_capabilities *, int);
325:	bool has_spectre_v3a(const struct arm64_cpu_capabilities *, int);
511:	bool has_spectre_v4(const struct arm64_cpu_capabilities *, int);
945:	bool is_spectre_bhb_affected(const struct arm64_cpu_capabilities *, int);
588:	void smccc_patch_fw_mitigation_conduit(struct alt_instr *, __le32 *, __le32 *, int);
993:	void spectre_bhb_enable_mitigation(const struct arm64_cpu_capabilities *);
836:	u8 spectre_bhb_loop_affected(int);
1136:	void spectre_bhb_patch_clearbhb(struct alt_instr *, __le32 *, __le32 *, int);
1078:	void spectre_bhb_patch_fw_mitigation_enabled(struct alt_instr *, __le32 *, __le32 *, int);
1089:	void spectre_bhb_patch_loop_iter(struct alt_instr *, __le32 *, __le32 *, int);
1067:	void spectre_bhb_patch_loop_mitigation_enable(struct alt_instr *, __le32 *, __le32 *, int);
1110:	void spectre_bhb_patch_wa3(struct alt_instr *, __le32 *, __le32 *, int);
305:	void spectre_v2_enable_mitigation(const struct arm64_cpu_capabilities *);
337:	void spectre_v3a_enable_mitigation(const struct arm64_cpu_capabilities *);
631:	void spectre_v4_enable_mitigation(const struct arm64_cpu_capabilities *);
654:	void spectre_v4_enable_task_mitigation(struct task_struct *);
568:	void spectre_v4_patch_fw_mitigation_enable(struct alt_instr *, __le32 *, __le32 *, int);
524:	bool try_emulate_el1_ssbs(struct pt_regs *, u32);
1150:	void unpriv_ebpf_notify(int);
File arch/arm64/kernel/ptrace.c:
2057:	long arch_ptrace(struct task_struct *, long, unsigned long, unsigned long);
206:	void flush_ptrace_hw_breakpoint(struct task_struct *);
155:	void ptrace_disable(struct task_struct *);
226:	void ptrace_hw_copy_thread(struct task_struct *);
136:	unsigned long regs_get_kernel_stack_nth(struct pt_regs *, unsigned int);
102:	int regs_query_register_offset(const char *);
2118:	int syscall_trace_enter(struct pt_regs *);
2141:	void syscall_trace_exit(struct pt_regs *);
2040:	const struct user_regset_view *task_user_regset_view(struct task_struct *);
2226:	int valid_user_regs(struct user_pt_regs *, struct task_struct *);
File arch/arm64/kernel/return_address.c:
35:	void *return_address(unsigned int);
File arch/arm64/kernel/setup.c:
97:	bool arch_match_cpu_phys_id(int, u64);
287:	u64 cpu_logical_map(unsigned int);
175:	void early_fdt_map(u64);
170:	void *get_early_fdt_ptr(void);
292:	void setup_arch(char **);
88:	void smp_setup_processor_id(void);
File arch/arm64/kernel/signal.c:
680:	long __arm64_sys_rt_sigreturn(const struct pt_regs *);
1113:	void do_notify_resume(struct pt_regs *, unsigned long);
1155:	void minsigstksz_setup(void);
File arch/arm64/kernel/smp.c:
339:	void __cpu_die(unsigned int);
293:	int __cpu_disable(void);
113:	int __cpu_up(unsigned int, struct task_struct *);
813:	void arch_irq_work_raise(void);
795:	void arch_send_call_function_ipi_mask(const struct cpumask *);
800:	void arch_send_call_function_single_ipi(int);
779:	int arch_show_interrupts(struct seq_file *, int);
364:	void cpu_die(void);
401:	void cpu_die_early(void);
1093:	bool cpus_are_stuck_in_kernel(void);
833:	void panic_smp_self_stop(void);
196:	void secondary_start_kernel(void);
956:	void set_smp_ipi_range(int, int);
436:	void smp_cpus_done(unsigned int);
686:	void smp_init_cpus(void);
445:	void smp_prepare_boot_cpu(void);
719:	void smp_prepare_cpus(unsigned int);
980:	void smp_send_reschedule(int);
1003:	void smp_send_stop(void);
986:	void tick_broadcast(const struct cpumask *);
File arch/arm64/kernel/stacktrace.c:
198:	void arch_stack_walk(stack_trace_consume_fn, void *, struct task_struct *, struct pt_regs *);
143:	void dump_backtrace(struct pt_regs *, struct task_struct *, const char *);
163:	void show_stack(struct task_struct *, unsigned long *, const char *);
File arch/arm64/kernel/sys.c:
31:	long __arm64_sys_arm64_personality(const struct pt_regs *);
21:	long __arm64_sys_mmap(const struct pt_regs *);
41:	long __arm64_sys_ni_syscall(const struct pt_regs *);
File arch/arm64/kernel/syscall.c:
194:	void do_el0_svc(struct pt_regs *);
File arch/arm64/kernel/time.c:
45:	unsigned long profile_pc(struct pt_regs *);
55:	void time_init(void);
File arch/arm64/kernel/topology.c:
90:	void update_freq_counters_refs(void);
File arch/arm64/kernel/traps.c:
265:	void arm64_force_sig_fault(int, int, unsigned long, const char *);
275:	void arm64_force_sig_mceerr(int, unsigned long, short, const char *);
282:	void arm64_force_sig_ptrace_errno_trap(int, unsigned long, const char *);
906:	bool arm64_is_fatal_ras_serror(struct pt_regs *, unsigned long);
289:	void arm64_notify_die(const char *, struct pt_regs *, int, int, unsigned long, unsigned long);
439:	void arm64_notify_segfault(unsigned long);
891:	void arm64_serror_panic(struct pt_regs *, unsigned long);
359:	void arm64_skip_faulting_instruction(struct pt_regs *, unsigned long);
845:	void bad_el0_sync(struct pt_regs *, int, unsigned long);
210:	void die(const char *, struct pt_regs *, long);
488:	void do_el0_bti(struct pt_regs *);
498:	void do_el0_fpac(struct pt_regs *, unsigned long);
772:	void do_el0_sys(unsigned long, struct pt_regs *);
453:	void do_el0_undef(struct pt_regs *, unsigned long);
493:	void do_el1_bti(struct pt_regs *, unsigned long);
503:	void do_el1_fpac(struct pt_regs *, unsigned long);
474:	void do_el1_undef(struct pt_regs *, unsigned long);
938:	void do_serror(struct pt_regs *, unsigned long);
1084:	int early_brk64(unsigned long, unsigned long, struct pt_regs *);
836:	const char *esr_get_class_string(unsigned long);
407:	void force_signal_inject(int, int, unsigned long, unsigned long);
947:	int is_valid_bugaddr(unsigned long);
1098:	void trap_init(void);
File arch/arm64/kernel/vdso.c:
120:	struct vdso_data *arch_get_vdso_data(void *);
441:	int arch_setup_additional_pages(struct linux_binprm *, int);
132:	int vdso_join_timens(struct task_struct *, struct time_namespace *);
File arch/arm64/lib/csum.c:
132:	__sum16 csum_ipv6_magic(const struct in6_addr *, const struct in6_addr *, __u32, __u8, __wsum);
21:	unsigned int do_csum(const unsigned char *, int);
File arch/arm64/lib/delay.c:
53:	void __const_udelay(unsigned long);
26:	void __delay(unsigned long);
65:	void __ndelay(unsigned long);
59:	void __udelay(unsigned long);
File arch/arm64/lib/insn.c:
1282:	u32 aarch32_insn_extract_reg_num(u32, int);
1274:	bool aarch32_insn_is_wide(u32);
1295:	u32 aarch32_insn_mcr_extract_crm(u32);
1289:	u32 aarch32_insn_mcr_extract_opc2(u32);
1206:	s32 aarch64_get_branch_offset(u32);
1253:	s32 aarch64_insn_adrp_get_offset(u32);
1259:	u32 aarch64_insn_adrp_set_offset(u32, s32);
88:	u64 aarch64_insn_decode_immediate(enum aarch64_insn_imm_type, u32);
146:	u32 aarch64_insn_decode_register(enum aarch64_insn_register_type, u32);
112:	u32 aarch64_insn_encode_immediate(enum aarch64_insn_imm_type, u32, u64);
1269:	u32 aarch64_insn_extract_system_reg(u32);
724:	u32 aarch64_insn_gen_add_sub_imm(enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_adsb_type);
895:	u32 aarch64_insn_gen_add_sub_shifted_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_adsb_type);
1172:	u32 aarch64_insn_gen_adr(unsigned long, unsigned long, enum aarch64_insn_register, enum aarch64_insn_adr_type);
608:	u32 aarch64_insn_gen_atomic_ld_op(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_mem_atomic_op, enum aarch64_insn_mem_order_type);
785:	u32 aarch64_insn_gen_bitfield(enum aarch64_insn_register, enum aarch64_insn_register, int, int, enum aarch64_insn_variant, enum aarch64_insn_bitfield_type);
261:	u32 aarch64_insn_gen_branch_imm(unsigned long, unsigned long, enum aarch64_insn_branch_type);
353:	u32 aarch64_insn_gen_branch_reg(enum aarch64_insn_register, enum aarch64_insn_branch_type);
690:	u32 aarch64_insn_gen_cas(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_mem_order_type);
292:	u32 aarch64_insn_gen_comp_branch_imm(unsigned long, unsigned long, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_branch_type);
333:	u32 aarch64_insn_gen_cond_branch_imm(unsigned long, unsigned long, enum aarch64_insn_condition);
953:	u32 aarch64_insn_gen_data1(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data1_type);
996:	u32 aarch64_insn_gen_data2(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data2_type);
1046:	u32 aarch64_insn_gen_data3(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant, enum aarch64_insn_data3_type);
1468:	u32 aarch64_insn_gen_dmb(enum aarch64_insn_mb_type);
1436:	u32 aarch64_insn_gen_extr(enum aarch64_insn_variant, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, u8);
451:	u32 aarch64_insn_gen_load_literal(unsigned long, unsigned long, enum aarch64_insn_register, bool);
537:	u32 aarch64_insn_gen_load_store_ex(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
407:	u32 aarch64_insn_gen_load_store_imm(enum aarch64_insn_register, enum aarch64_insn_register, unsigned int, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
473:	u32 aarch64_insn_gen_load_store_pair(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_ldst_type);
376:	u32 aarch64_insn_gen_load_store_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_size_type, enum aarch64_insn_ldst_type);
1405:	u32 aarch64_insn_gen_logical_immediate(enum aarch64_insn_logic_type, enum aarch64_insn_variant, enum aarch64_insn_register, enum aarch64_insn_register, u64);
1089:	u32 aarch64_insn_gen_logical_shifted_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_register, int, enum aarch64_insn_variant, enum aarch64_insn_logic_type);
1163:	u32 aarch64_insn_gen_move_reg(enum aarch64_insn_register, enum aarch64_insn_register, enum aarch64_insn_variant);
840:	u32 aarch64_insn_gen_movewide(enum aarch64_insn_register, int, int, enum aarch64_insn_variant, enum aarch64_insn_movewide_type);
1234:	u32 aarch64_set_branch_offset(u32, s32);
File arch/arm64/mm/context.c:
273:	unsigned long arm64_mm_context_get(struct mm_struct *);
319:	void arm64_mm_context_put(struct mm_struct *);
215:	void check_and_switch_context(struct mm_struct *);
349:	void cpu_do_switch_mm(phys_addr_t, struct mm_struct *);
339:	void post_ttbr_update_workaround(void);
64:	void verify_cpu_asid_bits(void);
File arch/arm64/mm/copypage.c:
17:	void copy_highpage(struct page *, struct page *);
34:	void copy_user_highpage(struct page *, struct page *, unsigned long, struct vm_area_struct *);
File arch/arm64/mm/dma-mapping.c:
35:	void arch_dma_prep_coherent(struct page *, size_t);
64:	void arch_setup_dma_ops(struct device *, u64, u64, const struct iommu_ops *, bool);
24:	void arch_sync_dma_for_cpu(phys_addr_t, size_t, enum dma_data_direction);
16:	void arch_sync_dma_for_device(phys_addr_t, size_t, enum dma_data_direction);
File arch/arm64/mm/extable.c:
59:	bool fixup_exception(struct pt_regs *);
File arch/arm64/mm/fault.c:
928:	struct page *alloc_zeroed_user_highpage_movable(struct vm_area_struct *, unsigned long);
906:	void do_debug_exception(unsigned long, unsigned long, struct pt_regs *);
826:	void do_mem_abort(unsigned long, unsigned long, struct pt_regs *);
846:	void do_sp_pc_abort(unsigned long, unsigned long, struct pt_regs *);
872:	void hook_debug_fault_code(int, int (*)(unsigned long, unsigned long, struct pt_regs *), int, int, const char *);
198:	int ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
944:	void tag_clear_highpage(struct page *);
File arch/arm64/mm/flush.c:
51:	void __sync_icache_dcache(pte_t);
43:	void copy_to_user_page(struct vm_area_struct *, struct page *, unsigned long, void *, const void *, unsigned long);
76:	void flush_dcache_page(struct page *);
17:	void sync_icache_aliases(unsigned long, unsigned long);
File arch/arm64/mm/hugetlbpage.c:
76:	bool arch_hugetlb_migration_supported(struct hstate *);
558:	bool arch_hugetlb_valid_size(unsigned long);
396:	pte_t arch_make_huge_pte(pte_t, unsigned int, vm_flags_t);
39:	void arm64_hugetlb_cma_reserve(void);
287:	pte_t *huge_pte_alloc(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long);
412:	void huge_pte_clear(struct mm_struct *, unsigned long, pte_t *, unsigned long);
332:	pte_t *huge_pte_offset(struct mm_struct *, unsigned long, unsigned long);
531:	pte_t huge_ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
151:	pte_t huge_ptep_get(pte_t *);
424:	pte_t huge_ptep_get_and_clear(struct mm_struct *, unsigned long, pte_t *);
578:	void huge_ptep_modify_prot_commit(struct vm_area_struct *, unsigned long, pte_t *, pte_t, pte_t);
563:	pte_t huge_ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
468:	int huge_ptep_set_access_flags(struct vm_area_struct *, unsigned long, pte_t *, pte_t, int);
504:	void huge_ptep_set_wrprotect(struct mm_struct *, unsigned long, pte_t *);
374:	unsigned long hugetlb_mask_last_page(struct hstate *);
89:	int pmd_huge(pmd_t);
94:	int pud_huge(pud_t);
251:	void set_huge_pte_at(struct mm_struct *, unsigned long, pte_t *, pte_t);
File arch/arm64/mm/init.c:
285:	void arm64_memblock_init(void);
417:	void bootmem_init(void);
516:	void dump_mem_limit(void);
503:	void free_initmem(void);
471:	void mem_init(void);
256:	int pfn_is_map_memory(unsigned long);
File arch/arm64/mm/ioremap.c:
29:	bool arch_memremap_can_ram_remap(resource_size_t, size_t, unsigned long);
24:	void early_ioremap_init(void);
6:	bool ioremap_allowed(phys_addr_t, size_t, unsigned long);
File arch/arm64/mm/mmap.c:
60:	int valid_mmap_phys_addr_range(unsigned long, size_t);
41:	int valid_phys_addr_range(phys_addr_t, size_t);
80:	pgprot_t vm_get_page_prot(unsigned long);
File arch/arm64/mm/mmu.c:
1264:	void __set_fixmap(enum fixed_addresses, phys_addr_t, pgprot_t);
461:	void create_pgd_mapping(struct mm_struct *, phys_addr_t, unsigned long, phys_addr_t, pgprot_t, bool);
1207:	void early_fixmap_init(void);
1282:	void *fixmap_remap_fdt(phys_addr_t, int *, pgprot_t);
499:	void mark_linear_text_alias_ro(void);
609:	void mark_rodata_ro(void);
794:	void paging_init(void);
97:	pgprot_t phys_mem_access_prot(struct file *, unsigned long, unsigned long, pgprot_t);
1371:	int pmd_clear_huge(pmd_t *);
1379:	int pmd_free_pte_page(pmd_t *, unsigned long);
1349:	int pmd_set_huge(pmd_t *, phys_addr_t, pgprot_t);
1649:	void ptep_modify_prot_commit(struct vm_area_struct *, unsigned long, pte_t *, pte_t, pte_t);
1634:	pte_t ptep_modify_prot_start(struct vm_area_struct *, unsigned long, pte_t *);
1363:	int pud_clear_huge(pud_t *);
1398:	int pud_free_pmd_page(pud_t *, unsigned long);
1335:	int pud_set_huge(pud_t *, phys_addr_t, pgprot_t);
81:	void set_swapper_pgd(pgd_t *, pgd_t);
1146:	int vmemmap_check_pmd(pmd_t *, int, unsigned long, unsigned long);
1153:	int vmemmap_populate(unsigned long, unsigned long, int, struct vmem_altmap *);
1140:	void vmemmap_set_pmd(pmd_t *, void *, int, unsigned long, unsigned long);
File arch/arm64/mm/mteswap.c:
12:	void *mte_allocate_tag_storage(void);
18:	void mte_free_tag_storage(char *);
62:	void mte_invalidate_tags(int, unsigned long);
70:	void mte_invalidate_tags_area(int);
49:	void mte_restore_tags(swp_entry_t, struct page *);
23:	int mte_save_tags(struct page *);
File arch/arm64/mm/pageattr.c:
22:	bool can_set_direct_map(void);
211:	bool kernel_page_present(struct page *);
178:	int set_direct_map_default_noflush(struct page *);
163:	int set_direct_map_invalid_noflush(struct page *);
137:	int set_memory_nx(unsigned long, int);
123:	int set_memory_ro(unsigned long, int);
130:	int set_memory_rw(unsigned long, int);
151:	int set_memory_valid(unsigned long, int, int);
144:	int set_memory_x(unsigned long, int);
File arch/arm64/mm/pgd.c:
20:	pgd_t *pgd_alloc(struct mm_struct *);
30:	void pgd_free(struct mm_struct *, pgd_t *);
38:	void pgtable_cache_init(void);
File block/badblocks.c:
431:	void ack_all_badblocks(struct badblocks *);
53:	int badblocks_check(struct badblocks *, sector_t, int, sector_t *, int *);
330:	int badblocks_clear(struct badblocks *, sector_t, int);
591:	void badblocks_exit(struct badblocks *);
573:	int badblocks_init(struct badblocks *, int);
162:	int badblocks_set(struct badblocks *, sector_t, int, int);
465:	ssize_t badblocks_show(struct badblocks *, char *, int);
515:	ssize_t badblocks_store(struct badblocks *, const char *, size_t, int);
579:	int devm_init_badblocks(struct device *, struct badblocks *);
File block/bdev.c:
43:	struct block_device *I_BDEV(struct inode *);
1001:	int __invalidate_device(struct block_device *, bool);
650:	void bd_abort_claiming(struct block_device *, void *);
573:	int bd_prepare_to_claim(struct block_device *, void *);
508:	void bdev_add(struct block_device *, dev_t);
480:	struct block_device *bdev_alloc(struct gendisk *, u8);
462:	void bdev_cache_init(void);
323:	int bdev_read_page(struct block_device *, sector_t, struct page *);
1081:	void bdev_statx_dioalign(struct inode *, struct kstat *);
360:	int bdev_write_page(struct block_device *, sector_t, struct page *, struct writeback_control *);
786:	struct block_device *blkdev_get_by_dev(dev_t, fmode_t, void *);
876:	struct block_device *blkdev_get_by_path(const char *, fmode_t, void *);
736:	struct block_device *blkdev_get_no_open(dev_t);
897:	void blkdev_put(struct block_device *, fmode_t);
760:	void blkdev_put_no_open(struct block_device *);
238:	int freeze_bdev(struct block_device *);
214:	int fsync_bdev(struct block_device *);
80:	void invalidate_bdev(struct block_device *);
972:	int lookup_bdev(const char *, dev_t *);
516:	long nr_blockdev_pages(void);
172:	int sb_min_blocksize(struct super_block *, int);
159:	int sb_set_blocksize(struct super_block *, int);
138:	int set_blocksize(struct block_device *, int);
1022:	void sync_bdevs(bool);
194:	int sync_blockdev(struct block_device *);
182:	int sync_blockdev_nowait(struct block_device *);
202:	int sync_blockdev_range(struct block_device *, loff_t, loff_t);
276:	int thaw_bdev(struct block_device *);
96:	int truncate_bdev_range(struct block_device *, fmode_t, loff_t, loff_t);
File block/bio-integrity.c:
346:	bool __bio_integrity_endio(struct bio *);
123:	int bio_integrity_add_page(struct bio *, struct page *, unsigned int, unsigned int);
371:	void bio_integrity_advance(struct bio *, unsigned int);
48:	struct bio_integrity_payload *bio_integrity_alloc(struct bio *, gfp_t, unsigned int);
404:	int bio_integrity_clone(struct bio *, struct bio *, gfp_t);
101:	void bio_integrity_free(struct bio *);
449:	void bio_integrity_init(void);
199:	bool bio_integrity_prep(struct bio *);
387:	void bio_integrity_trim(struct bio *);
425:	int bioset_integrity_create(struct bio_set *, int);
443:	void bioset_integrity_free(struct bio_set *);
20:	void blk_flush_integrity(void);
File block/bio.c:
1108:	void __bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
1394:	void __bio_advance(struct bio *, unsigned int);
1171:	void __bio_release_pages(struct bio *, bool);
1163:	bool bio_add_folio(struct bio *, struct folio *, size_t, size_t);
1001:	int bio_add_hw_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int, unsigned int, bool *);
1135:	int bio_add_page(struct bio *, struct page *, unsigned int, unsigned int);
1056:	int bio_add_pc_page(struct request_queue *, struct bio *, struct page *, unsigned int, unsigned int);
1081:	int bio_add_zone_append_page(struct bio *, struct page *, unsigned int, unsigned int);
493:	struct bio *bio_alloc_bioset(struct block_device *, unsigned short, blk_opf_t, gfp_t, struct bio_set *);
845:	struct bio *bio_alloc_clone(struct block_device *, struct bio *, gfp_t, struct bio_set *);
339:	void bio_chain(struct bio *, struct bio *);
1529:	void bio_check_pages_dirty(struct bio *);
1433:	void bio_copy_data(struct bio *, struct bio *);
1404:	void bio_copy_data_iter(struct bio *, struct bvec_iter *, struct bio *, struct bvec_iter *);
1583:	void bio_endio(struct bio *);
1442:	void bio_free_pages(struct bio *);
247:	void bio_init(struct bio *, struct block_device *, struct bio_vec *, unsigned short, blk_opf_t);
876:	int bio_init_clone(struct block_device *, struct bio *, struct bio *, gfp_t);
1184:	void bio_iov_bvec_set(struct bio *, struct iov_iter *);
1336:	int bio_iov_iter_get_pages(struct bio *, struct iov_iter *);
600:	struct bio *bio_kmalloc(unsigned short, gfp_t);
798:	void bio_put(struct bio *);
301:	void bio_reset(struct bio *, struct block_device *, blk_opf_t);
1481:	void bio_set_pages_dirty(struct bio *);
1633:	struct bio *bio_split(struct bio *, int, gfp_t, struct bio_set *);
1672:	void bio_trim(struct bio *, sector_t, sector_t);
215:	void bio_uninit(struct bio *);
1707:	void bioset_exit(struct bio_set *);
1745:	int bioset_init(struct bio_set *, unsigned int, unsigned int, int);
1694:	int biovec_init_pool(mempool_t *, int);
349:	struct bio *blk_next_bio(struct bio *, struct block_device *, unsigned int, blk_opf_t, gfp_t);
184:	struct bio_vec *bvec_alloc(mempool_t *, unsigned short *, gfp_t);
164:	void bvec_free(mempool_t *, struct bio_vec *, unsigned short);
682:	void guard_bio_eod(struct bio *);
1370:	int submit_bio_wait(struct bio *);
610:	void zero_fill_bio(struct bio *);
File block/blk-cgroup.c:
1657:	bool __blkcg_punt_bio_submit(struct bio *);
616:	u64 __blkg_prfill_u64(struct seq_file *, struct blkg_policy_data *, u64);
1959:	void bio_associate_blkg(struct bio *);
1935:	void bio_associate_blkg_from_css(struct bio *, struct cgroup_subsys_state *);
215:	struct cgroup_subsys_state *bio_blkcg_css(struct bio *);
1981:	void bio_clone_blkg_association(struct bio *, struct bio *);
1997:	void blk_cgroup_bio_start(struct bio *);
2040:	bool blk_cgroup_congested(void);
1395:	int blkcg_activate_policy(struct request_queue *, const struct blkcg_policy *);
1885:	void blkcg_add_delay(struct blkcg_gq *, u64, u64);
639:	struct block_device *blkcg_conf_open_bdev(char **);
1502:	void blkcg_deactivate_policy(struct request_queue *, const struct blkcg_policy *);
1323:	void blkcg_exit_disk(struct gendisk *);
1048:	struct list_head *blkcg_get_cgwb_list(struct cgroup_subsys_state *);
1268:	int blkcg_init_disk(struct gendisk *);
1805:	void blkcg_maybe_throttle_current(void);
1124:	void blkcg_pin_online(struct cgroup_subsys_state *);
1556:	int blkcg_policy_register(struct blkcg_policy *);
1630:	void blkcg_policy_unregister(struct blkcg_policy *);
585:	void blkcg_print_blkgs(struct seq_file *, struct blkcg *, u64 (*)(struct seq_file *, struct blkg_policy_data *, int), const struct blkcg_policy *, int, bool);
1855:	void blkcg_schedule_throttle(struct gendisk *, bool);
1138:	void blkcg_unpin_online(struct cgroup_subsys_state *);
807:	void blkg_conf_finish(struct blkg_conf_ctx *);
678:	int blkg_conf_prep(struct blkcg *, const struct blkcg_policy *, char *, struct blkg_conf_ctx *);
560:	const char *blkg_dev_name(struct blkcg_gq *);
File block/blk-core.c:
340:	int __bio_queue_enter(struct request_queue *, struct bio *);
1132:	void __blk_flush_plug(struct blk_plug *, bool);
972:	void bdev_end_io_acct(struct block_device *, enum req_op, unsigned long);
942:	unsigned long bdev_start_io_acct(struct block_device *, unsigned int, enum req_op, unsigned long);
987:	void bio_end_io_acct_remapped(struct bio *, unsigned long, struct block_device *);
854:	int bio_poll(struct bio *, struct io_comp_batch *, unsigned int);
965:	unsigned long bio_start_io_acct(struct bio *);
398:	struct request_queue *blk_alloc_queue(int);
1107:	struct blk_plug_cb *blk_check_plugged(blk_plug_cb_fn, void *, int);
244:	void blk_clear_pm_only(struct request_queue *);
1179:	int blk_dev_init(void);
1158:	void blk_finish_plug(struct blk_plug *);
465:	bool blk_get_queue(struct request_queue *);
1167:	void blk_io_schedule(void);
1013:	int blk_lld_busy(struct request_queue *);
137:	const char *blk_op_str(enum req_op);
287:	void blk_put_queue(struct request_queue *);
313:	int blk_queue_enter(struct request_queue *, blk_mq_req_flags_t);
374:	void blk_queue_exit(struct request_queue *);
90:	void blk_queue_flag_clear(unsigned int, struct request_queue *);
79:	void blk_queue_flag_set(unsigned int, struct request_queue *);
104:	bool blk_queue_flag_test_and_set(unsigned int, struct request_queue *);
294:	void blk_queue_start_drain(struct request_queue *);
238:	void blk_set_pm_only(struct request_queue *);
1084:	void blk_start_plug(struct blk_plug *);
1035:	void blk_start_plug_nr_ios(struct blk_plug *, unsigned short);
190:	int blk_status_to_errno(blk_status_t);
200:	const char *blk_status_to_str(blk_status_t);
227:	void blk_sync_queue(struct request_queue *);
177:	blk_status_t errno_to_blk_status(int);
891:	int iocb_bio_iopoll(struct kiocb *, struct io_comp_batch *, unsigned int);
1028:	int kblockd_mod_delayed_work_on(int, struct delayed_work *, unsigned long);
1022:	int kblockd_schedule_work(struct work_struct *);
826:	void submit_bio(struct bio *);
710:	void submit_bio_noacct(struct bio *);
685:	void submit_bio_noacct_nocheck(struct bio *);
927:	void update_io_ticks(struct block_device *, unsigned long, bool);
File block/blk-flush.c:
471:	struct blk_flush_queue *blk_alloc_flush_queue(int, int, gfp_t);
500:	void blk_free_flush_queue(struct blk_flush_queue *);
393:	void blk_insert_flush(struct request *);
528:	void blk_mq_hctx_set_fq_lock_class(struct blk_mq_hw_ctx *, struct lock_class_key *);
462:	int blkdev_issue_flush(struct block_device *);
275:	bool is_flush_rq(struct request *);
File block/blk-ia-ranges.c:
264:	struct blk_independent_access_ranges *disk_alloc_independent_access_ranges(struct gendisk *, int);
108:	int disk_register_independent_access_ranges(struct gendisk *);
287:	void disk_set_independent_access_ranges(struct gendisk *, struct blk_independent_access_ranges *);
152:	void disk_unregister_independent_access_ranges(struct gendisk *);
File block/blk-integrity.c:
441:	int blk_integrity_add(struct gendisk *);
121:	int blk_integrity_compare(struct gendisk *, struct gendisk *);
452:	void blk_integrity_del(struct gendisk *);
187:	bool blk_integrity_merge_bio(struct request_queue *, struct request *, struct bio *);
164:	bool blk_integrity_merge_rq(struct request_queue *, struct request *, struct request *);
397:	void blk_integrity_register(struct gendisk *, struct blk_integrity *);
427:	void blk_integrity_unregister(struct gendisk *);
27:	int blk_rq_count_integrity_sg(struct request_queue *, struct bio *);
68:	int blk_rq_map_integrity_sg(struct request_queue *, struct bio *, struct scatterlist *);
File block/blk-ioc.c:
300:	int __copy_io(unsigned long, struct task_struct *);
218:	void exit_io_context(struct task_struct *);
209:	void put_io_context(struct io_context *);
255:	int set_task_ioprio(struct task_struct *, int);
File block/blk-lib.c:
38:	int __blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t, struct bio **);
218:	int __blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, struct bio **, unsigned int);
97:	int blkdev_issue_discard(struct block_device *, sector_t, sector_t, gfp_t);
303:	int blkdev_issue_secure_erase(struct block_device *, sector_t, sector_t, gfp_t);
252:	int blkdev_issue_zeroout(struct block_device *, sector_t, sector_t, gfp_t, unsigned int);
File block/blk-map.c:
531:	int blk_rq_append_bio(struct request *, struct bio *);
777:	int blk_rq_map_kern(struct request_queue *, struct request *, void *, unsigned int, gfp_t);
681:	int blk_rq_map_user(struct request_queue *, struct request *, struct rq_map_data *, void *, unsigned long, gfp_t);
696:	int blk_rq_map_user_io(struct request *, struct rq_map_data *, void *, unsigned long, gfp_t, bool, int, bool, int);
626:	int blk_rq_map_user_iov(struct request_queue *, struct request *, struct rq_map_data *, const struct iov_iter *, gfp_t);
741:	int blk_rq_unmap_user(struct bio *);
File block/blk-merge.c:
353:	struct bio *__bio_split_to_limits(struct bio *, const struct queue_limits *, unsigned int *);
566:	int __blk_rq_map_sg(struct request_queue *, struct request *, struct scatterlist *, struct scatterlist **);
400:	struct bio *bio_split_to_limits(struct bio *);
1076:	bool blk_attempt_plug_merge(struct request_queue *, struct bio *, unsigned int);
891:	bool blk_attempt_req_merge(struct request_queue *, struct request *, struct request *);
1108:	bool blk_bio_list_merge(struct request_queue *, struct list_head *, struct bio *, unsigned int);
1133:	bool blk_mq_sched_try_merge(struct request_queue *, struct bio *, unsigned int, struct request **);
411:	unsigned int blk_recalc_rq_segments(struct request *);
897:	bool blk_rq_merge_ok(struct request *, struct bio *);
739:	void blk_rq_set_mixed_merge(struct request *);
927:	enum elv_merge blk_try_merge(struct request *, struct bio *);
642:	int ll_back_merge_fn(struct request *, struct bio *, unsigned int);
File block/blk-mq-cpumap.c:
84:	int blk_mq_hw_queue_to_node(struct blk_mq_queue_map *, unsigned int);
35:	void blk_mq_map_queues(struct blk_mq_queue_map *);
File block/blk-mq-sched.c:
34:	void __blk_mq_sched_restart(struct blk_mq_hw_ctx *);
642:	void blk_mq_exit_sched(struct request_queue *, struct elevator_queue *);
559:	int blk_mq_init_sched(struct request_queue *, struct elevator_type *);
345:	bool blk_mq_sched_bio_merge(struct request_queue *, struct bio *, unsigned int);
325:	void blk_mq_sched_dispatch_requests(struct blk_mq_hw_ctx *);
625:	void blk_mq_sched_free_rqs(struct request_queue *);
408:	void blk_mq_sched_insert_request(struct request *, bool, bool, bool);
461:	void blk_mq_sched_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *, bool);
25:	void blk_mq_sched_mark_restart_hctx(struct blk_mq_hw_ctx *);
381:	bool blk_mq_sched_try_insert_merge(struct request_queue *, struct request *, struct list_head *);
File block/blk-mq-sysfs.c:
213:	void blk_mq_hctx_kobj_init(struct blk_mq_hw_ctx *);
218:	void blk_mq_sysfs_deinit(struct request_queue *);
230:	void blk_mq_sysfs_init(struct request_queue *);
245:	int blk_mq_sysfs_register(struct gendisk *);
315:	int blk_mq_sysfs_register_hctxs(struct request_queue *);
282:	void blk_mq_sysfs_unregister(struct gendisk *);
299:	void blk_mq_sysfs_unregister_hctxs(struct request_queue *);
File block/blk-mq-tag.c:
40:	void __blk_mq_tag_busy(struct blk_mq_hw_ctx *);
75:	void __blk_mq_tag_idle(struct blk_mq_hw_ctx *);
410:	void blk_mq_all_tag_iter(struct blk_mq_tags *, busy_tag_iter_fn *, void *);
587:	void blk_mq_free_tags(struct blk_mq_tags *);
126:	unsigned int blk_mq_get_tag(struct blk_mq_alloc_data *);
111:	unsigned long blk_mq_get_tags(struct blk_mq_alloc_data *, int, unsigned int *);
539:	int blk_mq_init_bitmaps(struct sbitmap_queue *, struct sbitmap_queue *, unsigned int, unsigned int, int, int);
559:	struct blk_mq_tags *blk_mq_init_tags(unsigned int, unsigned int, int, int);
218:	void blk_mq_put_tag(struct blk_mq_tags *, struct blk_mq_ctx *, unsigned int);
231:	void blk_mq_put_tags(struct blk_mq_tags *, int *, int);
489:	void blk_mq_queue_tag_busy_iter(struct request_queue *, busy_tag_iter_fn *, void *);
646:	void blk_mq_tag_resize_shared_tags(struct blk_mq_tag_set *, unsigned int);
594:	int blk_mq_tag_update_depth(struct blk_mq_hw_ctx *, struct blk_mq_tags **, unsigned int, bool);
653:	void blk_mq_tag_update_sched_shared_tags(struct request_queue *);
64:	void blk_mq_tag_wakeup_all(struct blk_mq_tags *, bool);
429:	void blk_mq_tagset_busy_iter(struct blk_mq_tag_set *, busy_tag_iter_fn *, void *);
461:	void blk_mq_tagset_wait_completed_request(struct blk_mq_tag_set *);
671:	u32 blk_mq_unique_tag(struct request *);
File block/blk-mq-virtio.c:
24:	void blk_mq_virtio_map_queues(struct blk_mq_queue_map *, struct virtio_device *, int);
File block/blk-mq.c:
4095:	struct gendisk *__blk_mq_alloc_disk(struct blk_mq_tag_set *, void *, struct lock_class_key *);
1036:	void __blk_mq_end_request(struct request *, blk_status_t);
1784:	bool __blk_mq_get_driver_tag(struct blk_mq_hw_ctx *, struct request *);
2493:	void __blk_mq_insert_request(struct blk_mq_hw_ctx *, struct request *, bool);
220:	void __blk_mq_unfreeze_queue(struct request_queue *, bool);
758:	void blk_dump_rq_flags(struct request *, char *);
1385:	blk_status_t blk_execute_rq(struct request *, bool);
1322:	void blk_execute_rq_nowait(struct request *, bool);
197:	void blk_freeze_queue(struct request_queue *);
164:	void blk_freeze_queue_start(struct request_queue *);
1484:	void blk_mq_add_to_requeue_list(struct request *, bool, bool);
4116:	struct gendisk *blk_mq_alloc_disk_for_queue(struct request_queue *, struct lock_class_key *);
3760:	struct blk_mq_tags *blk_mq_alloc_map_and_rqs(struct blk_mq_tag_set *, unsigned int, unsigned int);
603:	struct request *blk_mq_alloc_request(struct request_queue *, blk_opf_t, blk_mq_req_flags_t);
636:	struct request *blk_mq_alloc_request_hctx(struct request_queue *, blk_opf_t, blk_mq_req_flags_t, unsigned int);
4525:	int blk_mq_alloc_sq_tag_set(struct blk_mq_tag_set *, const struct blk_mq_ops *, unsigned int, unsigned int);
4424:	int blk_mq_alloc_tag_set(struct blk_mq_tag_set *);
4945:	void blk_mq_cancel_work_sync(struct request_queue *);
1233:	void blk_mq_complete_request(struct request *);
1200:	bool blk_mq_complete_request_remote(struct request *);
1515:	void blk_mq_delay_kick_requeue_list(struct request_queue *, unsigned long);
2266:	void blk_mq_delay_run_hw_queue(struct blk_mq_hw_ctx *, unsigned long);
2356:	void blk_mq_delay_run_hw_queues(struct request_queue *, unsigned long);
1745:	struct request *blk_mq_dequeue_from_ctx(struct blk_mq_hw_ctx *, struct blk_mq_ctx *);
4078:	void blk_mq_destroy_queue(struct request_queue *);
2007:	bool blk_mq_dispatch_rq_list(struct blk_mq_hw_ctx *, struct list_head *, unsigned int);
1051:	void blk_mq_end_request(struct request *, blk_status_t);
1077:	void blk_mq_end_request_batch(struct io_comp_batch *);
4281:	void blk_mq_exit_queue(struct request_queue *);
1709:	void blk_mq_flush_busy_ctxs(struct blk_mq_hw_ctx *, struct list_head *);
2761:	void blk_mq_flush_plug_list(struct blk_plug *, bool);
3795:	void blk_mq_free_map_and_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
750:	void blk_mq_free_plug_rqs(struct blk_plug *);
727:	void blk_mq_free_request(struct request *);
3266:	void blk_mq_free_rq_map(struct blk_mq_tags *);
3225:	void blk_mq_free_rqs(struct blk_mq_tag_set *, struct blk_mq_tags *, unsigned int);
4540:	void blk_mq_free_tag_set(struct blk_mq_tag_set *);
210:	void blk_mq_freeze_queue(struct request_queue *);
178:	void blk_mq_freeze_queue_wait(struct request_queue *);
184:	int blk_mq_freeze_queue_wait_timeout(struct request_queue *, unsigned long);
144:	unsigned int blk_mq_in_flight(struct request_queue *, struct block_device *);
154:	void blk_mq_in_flight_rw(struct request_queue *, struct block_device *, unsigned int *);
4218:	int blk_mq_init_allocated_queue(struct blk_mq_tag_set *, struct request_queue *);
4062:	struct request_queue *blk_mq_init_queue(struct blk_mq_tag_set *);
2529:	void blk_mq_insert_requests(struct blk_mq_hw_ctx *, struct blk_mq_ctx *, struct list_head *);
1509:	void blk_mq_kick_requeue_list(struct request_queue *);
4928:	int blk_mq_poll(struct request_queue *, blk_qc_t, struct io_comp_batch *, unsigned int);
1590:	void blk_mq_put_rq_ref(struct request *);
1540:	bool blk_mq_queue_inflight(struct request_queue *);
282:	void blk_mq_quiesce_queue(struct request_queue *);
244:	void blk_mq_quiesce_queue_nowait(struct request_queue *);
318:	void blk_mq_quiesce_tagset(struct blk_mq_tag_set *);
4021:	void blk_mq_release(struct request_queue *);
2513:	void blk_mq_request_bypass_insert(struct request *, bool, bool);
1436:	void blk_mq_requeue_request(struct request *, bool);
4939:	unsigned int blk_mq_rq_cpu(struct request *);
2281:	void blk_mq_run_hw_queue(struct blk_mq_hw_ctx *, bool);
2328:	void blk_mq_run_hw_queues(struct request_queue *, bool);
2423:	void blk_mq_start_hw_queue(struct blk_mq_hw_ctx *);
2431:	void blk_mq_start_hw_queues(struct request_queue *);
1248:	void blk_mq_start_request(struct request *);
2441:	void blk_mq_start_stopped_hw_queue(struct blk_mq_hw_ctx *, bool);
2451:	void blk_mq_start_stopped_hw_queues(struct request_queue *, bool);
2396:	void blk_mq_stop_hw_queue(struct blk_mq_hw_ctx *);
2413:	void blk_mq_stop_hw_queues(struct request_queue *);
2948:	void blk_mq_submit_bio(struct bio *);
2804:	void blk_mq_try_issue_list_directly(struct blk_mq_hw_ctx *, struct list_head *);
234:	void blk_mq_unfreeze_queue(struct request_queue *);
298:	void blk_mq_unquiesce_queue(struct request_queue *);
332:	void blk_mq_unquiesce_tagset(struct blk_mq_tag_set *);
4762:	void blk_mq_update_nr_hw_queues(struct blk_mq_tag_set *, int);
4566:	int blk_mq_update_nr_requests(struct request_queue *, unsigned int);
264:	void blk_mq_wait_quiesce_done(struct blk_mq_tag_set *);
345:	void blk_mq_wake_waiters(struct request_queue *);
355:	void blk_rq_init(struct request_queue *, struct request *);
1355:	bool blk_rq_is_poll(struct request *);
3163:	void blk_steal_bios(struct bio_list *, struct request *);
891:	bool blk_update_request(struct request *, blk_status_t, unsigned int);
File block/blk-rq-qos.c:
26:	void __rq_qos_cleanup(struct rq_qos *, struct bio *);
35:	void __rq_qos_done(struct rq_qos *, struct request *);
89:	void __rq_qos_done_bio(struct rq_qos *, struct bio *);
44:	void __rq_qos_issue(struct rq_qos *, struct request *);
80:	void __rq_qos_merge(struct rq_qos *, struct request *, struct bio *);
98:	void __rq_qos_queue_depth_changed(struct rq_qos *);
53:	void __rq_qos_requeue(struct rq_qos *, struct request *);
62:	void __rq_qos_throttle(struct rq_qos *, struct bio *);
71:	void __rq_qos_track(struct rq_qos *, struct request *, struct bio *);
110:	bool rq_depth_calc_max_depth(struct rq_depth *);
177:	bool rq_depth_scale_down(struct rq_depth *, bool);
158:	bool rq_depth_scale_up(struct rq_depth *);
289:	void rq_qos_exit(struct request_queue *);
243:	void rq_qos_wait(struct rq_wait *, void *, acquire_inflight_cb_t *, cleanup_cb_t *);
21:	bool rq_wait_inc_below(struct rq_wait *, unsigned int);
File block/blk-settings.c:
955:	int bdev_alignment_offset(struct block_device *);
968:	unsigned int bdev_discard_alignment(struct block_device *);
410:	void blk_limits_io_min(struct queue_limits *, unsigned int);
455:	void blk_limits_io_opt(struct queue_limits *, unsigned int);
377:	void blk_queue_alignment_offset(struct request_queue *, unsigned int);
97:	void blk_queue_bounce_limit(struct request_queue *, enum blk_bounce);
863:	bool blk_queue_can_use_dma_map_merging(struct request_queue *, struct device *);
161:	void blk_queue_chunk_sectors(struct request_queue *, unsigned int);
775:	void blk_queue_dma_alignment(struct request_queue *, int);
436:	void blk_queue_io_min(struct request_queue *, unsigned int);
474:	void blk_queue_io_opt(struct request_queue *, unsigned int);
303:	void blk_queue_logical_block_size(struct request_queue *, unsigned int);
172:	void blk_queue_max_discard_sectors(struct request_queue *, unsigned int);
262:	void blk_queue_max_discard_segments(struct request_queue *, unsigned short);
122:	void blk_queue_max_hw_sectors(struct request_queue *, unsigned int);
185:	void blk_queue_max_secure_erase_sectors(struct request_queue *, unsigned int);
278:	void blk_queue_max_segment_size(struct request_queue *, unsigned int);
241:	void blk_queue_max_segments(struct request_queue *, unsigned short);
198:	void blk_queue_max_write_zeroes_sectors(struct request_queue *, unsigned int);
210:	void blk_queue_max_zone_append_sectors(struct request_queue *, unsigned int);
332:	void blk_queue_physical_block_size(struct request_queue *, unsigned int);
849:	void blk_queue_required_elevator_features(struct request_queue *, unsigned int);
21:	void blk_queue_rq_timeout(struct request_queue *, unsigned int);
733:	void blk_queue_segment_boundary(struct request_queue *, unsigned long);
795:	void blk_queue_update_dma_alignment(struct request_queue *, int);
721:	void blk_queue_update_dma_pad(struct request_queue *, unsigned int);
750:	void blk_queue_virt_boundary(struct request_queue *, unsigned long);
825:	void blk_queue_write_cache(struct request_queue *, bool, bool);
353:	void blk_queue_zone_write_granularity(struct request_queue *, unsigned int);
34:	void blk_set_default_limits(struct queue_limits *);
810:	void blk_set_queue_depth(struct request_queue *, unsigned int);
71:	void blk_set_stacking_limits(struct queue_limits *);
547:	int blk_stack_limits(struct queue_limits *, struct queue_limits *, sector_t);
909:	void disk_set_zoned(struct gendisk *, enum blk_zoned_model);
697:	void disk_stack_limits(struct gendisk *, struct block_device *, sector_t);
385:	void disk_update_readahead(struct gendisk *);
File block/blk-stat.c:
209:	struct blk_queue_stats *blk_alloc_queue_stats(void);
224:	void blk_free_queue_stats(struct blk_queue_stats *);
43:	void blk_rq_stat_add(struct blk_rq_stat *, u64);
21:	void blk_rq_stat_init(struct blk_rq_stat *);
29:	void blk_rq_stat_sum(struct blk_rq_stat *, struct blk_rq_stat *);
51:	void blk_stat_add(struct request *, u64);
136:	void blk_stat_add_callback(struct request_queue *, struct blk_stat_callback *);
103:	struct blk_stat_callback *blk_stat_alloc_callback(void (*)(struct blk_stat_callback *), int (*)(const struct request *), unsigned int, void *);
187:	void blk_stat_disable_accounting(struct request_queue *);
198:	void blk_stat_enable_accounting(struct request_queue *);
181:	void blk_stat_free_callback(struct blk_stat_callback *);
157:	void blk_stat_remove_callback(struct request_queue *, struct blk_stat_callback *);
234:	bool blk_stats_alloc_enable(struct request_queue *);
File block/blk-sysfs.c:
781:	int blk_register_queue(struct gendisk *);
866:	void blk_unregister_queue(struct gendisk *);
File block/blk-timeout.c:
79:	void blk_abort_request(struct request *);
128:	void blk_add_timer(struct request *);
109:	unsigned long blk_rq_timeout(unsigned long);
File block/bsg-lib.c:
189:	void bsg_job_done(struct bsg_job *, int, unsigned int);
175:	int bsg_job_get(struct bsg_job *);
169:	void bsg_job_put(struct bsg_job *);
320:	void bsg_remove_queue(struct request_queue *);
361:	struct request_queue *bsg_setup_queue(struct device *, const char *, bsg_job_fn *, bsg_timeout_fn *, int);
File block/bsg.c:
187:	struct bsg_device *bsg_register_queue(struct request_queue *, struct device *, const char *, bsg_sg_io_fn *);
176:	void bsg_unregister_queue(struct bsg_device *);
File block/disk-events.c:
275:	bool bdev_check_media_change(struct block_device *);
472:	void disk_add_events(struct gendisk *);
447:	int disk_alloc_events(struct gendisk *);
73:	void disk_block_events(struct gendisk *);
488:	void disk_del_events(struct gendisk *);
151:	void disk_flush_events(struct gendisk *, unsigned int);
303:	bool disk_force_media_change(struct gendisk *, unsigned int);
499:	void disk_release_events(struct gendisk *);
133:	void disk_unblock_events(struct gendisk *);
File block/elevator.c:
131:	struct elevator_queue *elevator_alloc(struct request_queue *, struct elevator_type *);
694:	void elevator_disable(struct request_queue *);
159:	void elevator_exit(struct request_queue *);
609:	void elevator_init_mq(struct request_queue *);
657:	int elevator_switch(struct request_queue *, struct elevator_type *);
332:	bool elv_attempt_insert_merge(struct request_queue *, struct request *, struct list_head *);
74:	bool elv_bio_merge_ok(struct request *, struct bio *);
406:	struct request *elv_former_request(struct request_queue *, struct request *);
761:	ssize_t elv_iosched_show(struct request_queue *, char *);
745:	ssize_t elv_iosched_store(struct request_queue *, const char *, size_t);
396:	struct request *elv_latter_request(struct request_queue *, struct request *);
276:	enum elv_merge elv_merge(struct request_queue *, struct request **, struct bio *);
384:	void elv_merge_requests(struct request_queue *, struct request *, struct request *);
370:	void elv_merged_request(struct request_queue *, struct request *, enum elv_merge);
227:	void elv_rb_add(struct rb_root *, struct request *);
248:	void elv_rb_del(struct rb_root *, struct request *);
256:	struct request *elv_rb_find(struct rb_root *, sector_t);
790:	struct request *elv_rb_former_request(struct request_queue *, struct request *);
802:	struct request *elv_rb_latter_request(struct request_queue *, struct request *);
500:	int elv_register(struct elevator_type *);
463:	int elv_register_queue(struct request_queue *, bool);
186:	void elv_rqhash_add(struct request_queue *, struct request *);
179:	void elv_rqhash_del(struct request_queue *, struct request *);
202:	struct request *elv_rqhash_find(struct request_queue *, sector_t);
196:	void elv_rqhash_reposition(struct request_queue *, struct request *);
536:	void elv_unregister(struct elevator_type *);
488:	void elv_unregister_queue(struct request_queue *);
File block/genhd.c:
1359:	struct gendisk *__alloc_disk_node(struct request_queue *, int, struct lock_class_key *);
1418:	struct gendisk *__blk_alloc_disk(int, struct lock_class_key *);
218:	int __register_blkdev(unsigned int, const char *, void (*)(dev_t));
311:	int blk_alloc_ext_minor(void);
321:	void blk_free_ext_minor(unsigned int);
1330:	dev_t blk_lookup_devt(const char *, int);
559:	void blk_mark_disk_dead(struct gendisk *);
725:	void blk_request_module(dev_t);
180:	void blkdev_show(struct seq_file *, off_t);
590:	void del_gendisk(struct gendisk *);
390:	int device_add_disk(struct device *, struct gendisk *, const struct attribute_group **);
359:	int disk_scan_partitions(struct gendisk *, fmode_t, void *);
338:	void disk_uevent(struct gendisk *, enum kobject_action);
1489:	void inc_diskseq(struct gendisk *);
689:	void invalidate_disk(struct gendisk *);
1316:	dev_t part_devt(struct gendisk *, u8);
1001:	ssize_t part_inflight_show(struct device *, struct device_attribute *, char *);
946:	ssize_t part_size_show(struct device *, struct device_attribute *, char *);
952:	ssize_t part_stat_show(struct device *, struct device_attribute *, char *);
751:	void printk_all_partitions(void);
1450:	void put_disk(struct gendisk *);
58:	void set_capacity(struct gendisk *, sector_t);
73:	bool set_capacity_and_notify(struct gendisk *, sector_t);
1476:	void set_disk_ro(struct gendisk *, bool);
287:	void unregister_blkdev(unsigned int, const char *);
File block/ioctl.c:
560:	long blkdev_ioctl(struct file *, unsigned int, unsigned long);
File block/ioprio.c:
209:	long __arm64_sys_ioprio_get(const struct pt_regs *);
68:	long __arm64_sys_ioprio_set(const struct pt_regs *);
148:	int __get_task_ioprio(struct task_struct *);
33:	int ioprio_check_cap(int);
File block/partitions/core.c:
444:	int bdev_add_partition(struct gendisk *, int, sector_t, sector_t);
469:	int bdev_del_partition(struct gendisk *, int);
655:	int bdev_disk_changed(struct gendisk *, bool);
490:	int bdev_resize_partition(struct gendisk *, int, sector_t, sector_t);
530:	void blk_drop_partitions(struct gendisk *);
707:	void *read_part_sector(struct parsed_partitions *, sector_t, Sector *);
File block/partitions/efi.c:
713:	int efi_partition(struct parsed_partitions *);
File block/partitions/msdos.c:
581:	int msdos_partition(struct parsed_partitions *);
File crypto/acompress.c:
120:	struct acomp_req *acomp_request_alloc(struct crypto_acomp *);
133:	void acomp_request_free(struct acomp_req *);
105:	struct crypto_acomp *crypto_alloc_acomp(const char *, u32, u32);
112:	struct crypto_acomp *crypto_alloc_acomp_node(const char *, u32, u32, int);
150:	int crypto_register_acomp(struct acomp_alg *);
168:	int crypto_register_acomps(struct acomp_alg *, int);
162:	void crypto_unregister_acomp(struct acomp_alg *);
188:	void crypto_unregister_acomps(struct acomp_alg *, int);
File crypto/aead.c:
286:	int aead_register_instance(struct crypto_template *, struct aead_instance *);
100:	int crypto_aead_decrypt(struct aead_request *);
83:	int crypto_aead_encrypt(struct aead_request *);
64:	int crypto_aead_setauthsize(struct crypto_aead *, unsigned int);
43:	int crypto_aead_setkey(struct crypto_aead *, const u8 *, unsigned int);
214:	struct crypto_aead *crypto_alloc_aead(const char *, u32, u32);
205:	int crypto_grab_aead(struct crypto_aead_spawn *, struct crypto_instance *, const char *, u32, u32);
238:	int crypto_register_aead(struct aead_alg *);
257:	int crypto_register_aeads(struct aead_alg *, int);
251:	void crypto_unregister_aead(struct aead_alg *);
277:	void crypto_unregister_aeads(struct aead_alg *, int);
File crypto/aes_generic.c:
1136:	int crypto_aes_set_key(struct crypto_tfm *, const u8 *, unsigned int);
File crypto/ahash.c:
632:	int ahash_register_instance(struct crypto_template *, struct ahash_instance *);
368:	int crypto_ahash_digest(struct ahash_request *);
340:	int crypto_ahash_final(struct ahash_request *);
354:	int crypto_ahash_finup(struct ahash_request *);
172:	int crypto_ahash_setkey(struct crypto_ahash *, const u8 *, unsigned int);
555:	struct crypto_ahash *crypto_alloc_ahash(const char *, u32, u32);
546:	int crypto_grab_ahash(struct crypto_ahash_spawn *, struct crypto_instance *, const char *, u32, u32);
562:	int crypto_has_ahash(const char *, u32, u32);
648:	bool crypto_hash_alg_has_setkey(struct hash_alg_common *);
79:	int crypto_hash_walk_done(struct crypto_hash_walk *, int);
119:	int crypto_hash_walk_first(struct ahash_request *, struct crypto_hash_walk *);
584:	int crypto_register_ahash(struct ahash_alg *);
603:	int crypto_register_ahashes(struct ahash_alg *, int);
597:	void crypto_unregister_ahash(struct ahash_alg *);
623:	void crypto_unregister_ahashes(struct ahash_alg *, int);
File crypto/akcipher.c:
155:	int akcipher_register_instance(struct crypto_template *, struct akcipher_instance *);
102:	struct crypto_akcipher *crypto_alloc_akcipher(const char *, u32, u32);
93:	int crypto_grab_akcipher(struct crypto_akcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
129:	int crypto_register_akcipher(struct akcipher_alg *);
149:	void crypto_unregister_akcipher(struct akcipher_alg *);
File crypto/algapi.c:
1019:	unsigned int crypto_alg_extsize(struct crypto_alg *);
362:	void crypto_alg_tested(const char *, int);
896:	const char *crypto_attr_alg_name(struct rtattr *);
880:	int crypto_check_attr_type(struct rtattr **, u32, u32 *);
969:	struct crypto_async_request *crypto_dequeue_request(struct crypto_queue *);
747:	void crypto_drop_spawn(struct crypto_spawn *);
938:	int crypto_enqueue_request(struct crypto_queue *, struct crypto_async_request *);
961:	void crypto_enqueue_request_head(struct crypto_queue *, struct crypto_async_request *);
846:	struct crypto_attr_type *crypto_get_attr_type(struct rtattr **);
711:	int crypto_grab_spawn(struct crypto_spawn *, struct crypto_instance *, const char *, u32, u32);
1001:	void crypto_inc(u8 *, unsigned int);
929:	void crypto_init_queue(struct crypto_queue *, unsigned int);
914:	int crypto_inst_setname(struct crypto_instance *, const char *, struct crypto_alg *);
630:	struct crypto_template *crypto_lookup_template(const char *);
442:	int crypto_register_alg(struct crypto_alg *);
504:	int crypto_register_algs(struct crypto_alg *, int);
637:	int crypto_register_instance(struct crypto_template *, struct crypto_instance *);
834:	int crypto_register_notifier(struct notifier_block *);
533:	int crypto_register_template(struct crypto_template *);
555:	int crypto_register_templates(struct crypto_template *, int);
430:	void crypto_remove_final(struct list_head *);
145:	void crypto_remove_spawns(struct crypto_alg *, struct list_head *, struct crypto_alg *);
787:	struct crypto_tfm *crypto_spawn_tfm(struct crypto_spawn *, u32, u32);
813:	void *crypto_spawn_tfm2(struct crypto_spawn *);
1026:	int crypto_type_has_alg(const char *, const struct crypto_type *, u32, u32);
484:	void crypto_unregister_alg(struct crypto_alg *);
524:	void crypto_unregister_algs(struct crypto_alg *, int);
696:	void crypto_unregister_instance(struct crypto_instance *);
840:	int crypto_unregister_notifier(struct notifier_block *);
573:	void crypto_unregister_template(struct crypto_template *);
602:	void crypto_unregister_templates(struct crypto_template *, int);
File crypto/api.c:
398:	struct crypto_tfm *__crypto_alloc_tfm(struct crypto_alg *, u32, u32);
315:	struct crypto_alg *crypto_alg_mod_lookup(const char *, u32, u32);
456:	struct crypto_tfm *crypto_alloc_base(const char *, u32, u32);
571:	void *crypto_alloc_tfm_node(const char *, const struct crypto_type *, u32, u32, int);
490:	void *crypto_create_tfm_node(struct crypto_alg *, const struct crypto_type *, int);
615:	void crypto_destroy_tfm(void *, struct crypto_tfm *);
533:	struct crypto_alg *crypto_find_alg(const char *, const struct crypto_type *, u32, u32);
632:	int crypto_has_alg(const char *, u32, u32);
106:	struct crypto_larval *crypto_larval_alloc(const char *, u32, u32);
155:	void crypto_larval_kill(struct crypto_alg *);
41:	struct crypto_alg *crypto_mod_get(struct crypto_alg *);
47:	void crypto_mod_put(struct crypto_alg *);
301:	int crypto_probing_notify(unsigned long, void *);
646:	void crypto_req_done(struct crypto_async_request *, int);
390:	void crypto_shoot_alg(struct crypto_alg *);
167:	void crypto_wait_for_test(struct crypto_larval *);
File crypto/authenc.c:
46:	int crypto_authenc_extractkeys(struct crypto_authenc_keys *, const u8 *, unsigned int);
File crypto/cipher.c:
87:	void crypto_cipher_decrypt_one(struct crypto_cipher *, u8 *, const u8 *);
80:	void crypto_cipher_encrypt_one(struct crypto_cipher *, u8 *, const u8 *);
43:	int crypto_cipher_setkey(struct crypto_cipher *, const u8 *, unsigned int);
File crypto/compress.c:
12:	int crypto_comp_compress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);
23:	int crypto_comp_decompress(struct crypto_comp *, const u8 *, unsigned int, u8 *, unsigned int *);
File crypto/crct10dif_common.c:
70:	__u16 crc_t10dif_generic(__u16, const unsigned char *, size_t);
File crypto/crypto_null.c:
153:	struct crypto_sync_skcipher *crypto_get_default_null_skcipher(void);
177:	void crypto_put_default_null_skcipher(void);
File crypto/geniv.c:
153:	void aead_exit_geniv(struct crypto_aead *);
41:	struct aead_instance *aead_geniv_alloc(struct crypto_template *, struct rtattr **);
109:	int aead_init_geniv(struct crypto_aead *);
File crypto/kpp.c:
92:	struct crypto_kpp *crypto_alloc_kpp(const char *, u32, u32);
98:	int crypto_grab_kpp(struct crypto_kpp_spawn *, struct crypto_instance *, const char *, u32, u32);
107:	int crypto_has_kpp(const char *, u32, u32);
122:	int crypto_register_kpp(struct kpp_alg *);
131:	void crypto_unregister_kpp(struct kpp_alg *);
137:	int kpp_register_instance(struct crypto_template *, struct kpp_instance *);
File crypto/proc.c:
97:	void crypto_exit_proc(void);
92:	void crypto_init_proc(void);
File crypto/rng.c:
110:	struct crypto_rng *crypto_alloc_rng(const char *, u32, u32);
116:	int crypto_get_default_rng(void);
147:	void crypto_put_default_rng(void);
177:	int crypto_register_rng(struct rng_alg *);
198:	int crypto_register_rngs(struct rng_alg *, int);
31:	int crypto_rng_reset(struct crypto_rng *, const u8 *, unsigned int);
192:	void crypto_unregister_rng(struct rng_alg *);
218:	void crypto_unregister_rngs(struct rng_alg *, int);
File crypto/scatterwalk.c:
26:	void scatterwalk_copychunks(void *, struct scatter_walk *, size_t, int);
72:	struct scatterlist *scatterwalk_ffwd(struct scatterlist *, struct scatterlist *, unsigned int);
55:	void scatterwalk_map_and_copy(void *, struct scatterlist *, unsigned int, unsigned int, int);
File crypto/scompress.c:
213:	struct acomp_req *crypto_acomp_scomp_alloc_ctx(struct acomp_req *);
232:	void crypto_acomp_scomp_free_ctx(struct acomp_req *);
186:	int crypto_init_scomp_ops_async(struct crypto_tfm *);
257:	int crypto_register_scomp(struct scomp_alg *);
275:	int crypto_register_scomps(struct scomp_alg *, int);
269:	void crypto_unregister_scomp(struct scomp_alg *);
295:	void crypto_unregister_scomps(struct scomp_alg *, int);
File crypto/sha1_generic.c:
55:	int crypto_sha1_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
42:	int crypto_sha1_update(struct shash_desc *, const u8 *, unsigned int);
File crypto/sha256_generic.c:
53:	int crypto_sha256_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
36:	int crypto_sha256_update(struct shash_desc *, const u8 *, unsigned int);
File crypto/sha3_generic.c:
213:	int crypto_sha3_final(struct shash_desc *, u8 *);
161:	int crypto_sha3_init(struct shash_desc *);
175:	int crypto_sha3_update(struct shash_desc *, const u8 *, unsigned int);
File crypto/sha512_generic.c:
170:	int crypto_sha512_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
157:	int crypto_sha512_update(struct shash_desc *, const u8 *, unsigned int);
File crypto/shash.c:
507:	struct crypto_shash *crypto_alloc_shash(const char *, u32, u32);
498:	int crypto_grab_shash(struct crypto_shash_spawn *, struct crypto_instance *, const char *, u32, u32);
514:	int crypto_has_shash(const char *, u32, u32);
367:	int crypto_init_shash_ops_async(struct crypto_tfm *);
554:	int crypto_register_shash(struct shash_alg *);
573:	int crypto_register_shashes(struct shash_alg *, int);
194:	int crypto_shash_digest(struct shash_desc *, const u8 *, unsigned int, u8 *);
153:	int crypto_shash_final(struct shash_desc *, u8 *);
173:	int crypto_shash_finup(struct shash_desc *, const u8 *, unsigned int, u8 *);
59:	int crypto_shash_setkey(struct crypto_shash *, const u8 *, unsigned int);
211:	int crypto_shash_tfm_digest(struct crypto_shash *, const u8 *, unsigned int, u8 *);
111:	int crypto_shash_update(struct shash_desc *, const u8 *, unsigned int);
567:	void crypto_unregister_shash(struct shash_alg *);
593:	void crypto_unregister_shashes(struct shash_alg *, int);
311:	int shash_ahash_digest(struct ahash_request *, struct shash_desc *);
280:	int shash_ahash_finup(struct ahash_request *, struct shash_desc *);
257:	int shash_ahash_update(struct ahash_request *, struct shash_desc *);
618:	void shash_free_singlespawn_instance(struct shash_instance *);
25:	int shash_no_setkey(struct crypto_shash *, const u8 *, unsigned int);
602:	int shash_register_instance(struct crypto_template *, struct shash_instance *);
File crypto/skcipher.c:
753:	struct crypto_skcipher *crypto_alloc_skcipher(const char *, u32, u32);
760:	struct crypto_sync_skcipher *crypto_alloc_sync_skcipher(const char *, u32, u32);
744:	int crypto_grab_skcipher(struct crypto_skcipher_spawn *, struct crypto_instance *, const char *, u32, u32);
784:	int crypto_has_skcipher(const char *, u32, u32);
810:	int crypto_register_skcipher(struct skcipher_alg *);
829:	int crypto_register_skciphers(struct skcipher_alg *, int);
636:	int crypto_skcipher_decrypt(struct skcipher_request *);
619:	int crypto_skcipher_encrypt(struct skcipher_request *);
594:	int crypto_skcipher_setkey(struct crypto_skcipher *, const u8 *, unsigned int);
823:	void crypto_unregister_skcipher(struct skcipher_alg *);
849:	void crypto_unregister_skciphers(struct skcipher_alg *, int);
929:	struct skcipher_instance *skcipher_alloc_instance_simple(struct crypto_template *, struct rtattr **);
858:	int skcipher_register_instance(struct crypto_template *, struct skcipher_instance *);
556:	int skcipher_walk_aead_decrypt(struct skcipher_walk *, struct aead_request *, bool);
547:	int skcipher_walk_aead_encrypt(struct skcipher_walk *, struct aead_request *, bool);
494:	int skcipher_walk_async(struct skcipher_walk *, struct skcipher_request *);
182:	void skcipher_walk_complete(struct skcipher_walk *, int);
105:	int skcipher_walk_done(struct skcipher_walk *, int);
477:	int skcipher_walk_virt(struct skcipher_walk *, struct skcipher_request *, bool);
File crypto/sm3.c:
215:	void sm3_final(struct sm3_state *, u8 *);
178:	void sm3_update(struct sm3_state *, const u8 *, unsigned int);
File crypto/sm4.c:
160:	void sm4_crypt_block(const u32 *, u8 *, const u8 *);
119:	int sm4_expandkey(struct sm4_ctx *, const u8 *, unsigned int);
File crypto/testmgr.c:
63:	int alg_test(const char *, const char *, u32, u32);
File drivers/amba/bus.c:
546:	int amba_device_add(struct amba_device *, struct resource *);
598:	struct amba_device *amba_device_alloc(const char *, resource_size_t, size_t);
637:	void amba_device_put(struct amba_device *);
624:	int amba_device_register(struct amba_device *, struct resource *);
654:	void amba_device_unregister(struct amba_device *);
502:	int amba_driver_register(struct amba_driver *);
521:	void amba_driver_unregister(struct amba_driver *);
688:	void amba_release_regions(struct amba_device *);
665:	int amba_request_regions(struct amba_device *, const char *);
File drivers/base/arch_numa.c:
335:	int __node_distance(int, int);
467:	void arch_numa_init(void);
126:	void early_map_cpu_to_node(unsigned int, int);
77:	void numa_add_cpu(unsigned int);
201:	int numa_add_memblk(int, u64, u64);
87:	void numa_clear_node(unsigned int);
255:	void numa_free_distance(void);
82:	void numa_remove_cpu(unsigned int);
308:	void numa_set_distance(int, int, int);
121:	void numa_store_cpu_info(unsigned int);
157:	void setup_per_cpu_areas(void);
File drivers/base/arch_topology.c:
719:	const struct cpumask *cpu_clustergroup_mask(int);
692:	const struct cpumask *cpu_coregroup_mask(int);
826:	void init_cpu_topology(void);
820:	int parse_acpi_topology(void);
804:	void remove_cpu_topology(unsigned int);
788:	void reset_cpu_topology(void);
845:	void store_cpu_topology(unsigned int);
90:	void topology_clear_scale_freq_source(enum scale_freq_source, const struct cpumask *);
271:	void topology_normalize_cpu_scale(void);
297:	bool topology_parse_cpu_capacity(struct device_node *, int);
36:	bool topology_scale_freq_invariant(void);
119:	void topology_scale_freq_tick(void);
156:	void topology_set_cpu_scale(unsigned int, unsigned long);
130:	void topology_set_freq_scale(const struct cpumask *, unsigned long, unsigned long);
59:	void topology_set_scale_freq_source(struct scale_freq_data *, const struct cpumask *);
244:	int topology_update_cpu_topology(void);
177:	void topology_update_thermal_pressure(const struct cpumask *, unsigned long);
732:	void update_siblings_masks(unsigned int);
File drivers/base/attribute_container.c:
417:	int attribute_container_add_attrs(struct device *);
452:	int attribute_container_add_class_device(struct device *);
472:	int attribute_container_add_class_device_adapter(struct attribute_container *, struct device *, struct device *);
141:	void attribute_container_add_device(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
514:	void attribute_container_class_device_del(struct device *);
54:	struct attribute_container *attribute_container_classdev_to_container(struct device *);
353:	void attribute_container_device_trigger(struct device *, int (*)(struct attribute_container *, struct device *, struct device *));
297:	int attribute_container_device_trigger_safe(struct device *, int (*)(struct attribute_container *, struct device *, struct device *), int (*)(struct attribute_container *, struct device *, struct device *));
530:	struct device *attribute_container_find_class_device(struct attribute_container *, struct device *);
73:	int attribute_container_register(struct attribute_container *);
486:	void attribute_container_remove_attrs(struct device *);
206:	void attribute_container_remove_device(struct device *, void (*)(struct attribute_container *, struct device *, struct device *));
394:	void attribute_container_trigger(struct device *, int (*)(struct attribute_container *, struct device *));
93:	int attribute_container_unregister(struct attribute_container *);
File drivers/base/bus.c:
441:	int bus_add_device(struct device *);
590:	int bus_add_driver(struct device_driver *);
131:	int bus_create_file(struct bus_type *, struct bus_attribute *);
322:	struct device *bus_find_device(struct bus_type *, struct device *, const void *, int (*)(struct device *, const void *));
288:	int bus_for_each_dev(struct bus_type *, struct device *, void *, int (*)(struct device *, void *));
414:	int bus_for_each_drv(struct bus_type *, struct device_driver *, void *, int (*)(struct device_driver *, void *));
900:	struct klist *bus_get_device_klist(struct bus_type *);
894:	struct kset *bus_get_kset(struct bus_type *);
478:	void bus_probe_device(struct device *);
783:	int bus_register(struct bus_type *);
882:	int bus_register_notifier(struct bus_type *, struct notifier_block *);
506:	void bus_remove_device(struct device *);
666:	void bus_remove_driver(struct device_driver *);
143:	void bus_remove_file(struct bus_type *, struct bus_attribute *);
707:	int bus_rescan_devices(struct bus_type *);
933:	void bus_sort_breadthfirst(struct bus_type *, int (*)(const struct device *, const struct device *));
868:	void bus_unregister(struct bus_type *);
888:	int bus_unregister_notifier(struct bus_type *, struct notifier_block *);
1169:	int buses_init(void);
722:	int device_reprobe(struct device *);
1015:	void subsys_dev_iter_exit(struct subsys_dev_iter *);
968:	void subsys_dev_iter_init(struct subsys_dev_iter *, struct bus_type *, struct device *, const struct device_type *);
992:	struct device *subsys_dev_iter_next(struct subsys_dev_iter *);
352:	struct device *subsys_find_device_by_id(struct bus_type *, unsigned int, struct device *);
1021:	int subsys_interface_register(struct subsys_interface *);
1048:	void subsys_interface_unregister(struct subsys_interface *);
1138:	int subsys_system_register(struct bus_type *, const struct attribute_group **);
1156:	int subsys_virtual_register(struct bus_type *, const struct attribute_group **);
File drivers/base/cacheinfo.c:
592:	const struct attribute_group *cache_get_priv_group(struct cacheinfo *);
236:	int cache_setup_acpi(unsigned int);
345:	int detect_cache_attributes(unsigned int);
31:	struct cpu_cacheinfo *get_cpu_cacheinfo(unsigned int);
335:	int init_cache_level(unsigned int);
67:	bool last_level_cache_is_shared(unsigned int, unsigned int);
54:	bool last_level_cache_is_valid(unsigned int);
340:	int populate_cache_leaves(unsigned int);
File drivers/base/class.c:
231:	struct class *__class_create(struct module *, const char *, struct lock_class_key *);
153:	int __class_register(struct class *, struct lock_class_key *);
536:	int class_compat_create_link(struct class_compat *, struct device *, struct device *);
502:	struct class_compat *class_compat_register(const char *);
569:	void class_compat_remove_link(struct class_compat *, struct device *, struct device *);
522:	void class_compat_unregister(struct class_compat *);
88:	int class_create_file_ns(struct class *, const struct class_attribute *, const void *);
266:	void class_destroy(struct class *);
333:	void class_dev_iter_exit(struct class_dev_iter *);
286:	void class_dev_iter_init(struct class_dev_iter *, struct class *, struct device *, const struct device_type *);
310:	struct device *class_dev_iter_next(struct class_dev_iter *);
404:	struct device *class_find_device(struct class *, struct device *, const void *, int (*)(struct device *, const void *));
357:	int class_for_each_device(struct class *, struct device *, void *, int (*)(struct device *, void *));
432:	int class_interface_register(struct class_interface *);
458:	void class_interface_unregister(struct class_interface *);
101:	void class_remove_file_ns(struct class *, const struct class_attribute *, const void *);
204:	void class_unregister(struct class *);
578:	int classes_init(void);
480:	ssize_t show_class_attr_string(struct class *, struct class_attribute *, char *);
File drivers/base/component.c:
787:	int component_add(struct device *, const struct component_ops *);
762:	int component_add_typed(struct device *, const struct component_ops *, int);
677:	int component_bind_all(struct device *, void *);
323:	int component_compare_dev(struct device *, void *);
338:	int component_compare_dev_name(struct device *, void *);
296:	int component_compare_of(struct device *, void *);
802:	void component_del(struct device *, const struct component_ops *);
512:	int component_master_add_with_match(struct device *, const struct component_master_ops *, struct component_match *);
557:	void component_master_del(struct device *, const struct component_master_ops *);
445:	void component_match_add_release(struct device *, struct component_match **, void (*)(struct device *, void *), int (*)(struct device *, void *), void *);
472:	void component_match_add_typed(struct device *, struct component_match **, int (*)(struct device *, int, void *), void *);
309:	void component_release_of(struct device *, void *);
594:	void component_unbind_all(struct device *, void *);
File drivers/base/container.c:
34:	void container_dev_init(void);
File drivers/base/core.c:
4061:	struct device *__root_device_register(const char *, struct module *);
4762:	void _dev_alert(const struct device *, const char *, ...);
4763:	void _dev_crit(const struct device *, const char *, ...);
4761:	void _dev_emerg(const struct device *, const char *, ...);
4764:	void _dev_err(const struct device *, const char *, ...);
4767:	void _dev_info(const struct device *, const char *, ...);
4766:	void _dev_notice(const struct device *, const char *, ...);
4727:	void _dev_printk(const char *, const struct device *, const char *, ...);
4765:	void _dev_warn(const struct device *, const char *, ...);
2173:	const char *dev_driver_string(const struct device *);
4803:	int dev_err_probe(const struct device *, int, const char *, ...);
4702:	int dev_printk_emit(int, const struct device *, const char *, ...);
3261:	int dev_set_name(struct device *, const char *, ...);
4691:	int dev_vprintk_emit(int, const struct device *, const char *, va_list);
3360:	int device_add(struct device *);
2571:	int device_add_groups(struct device *, const struct attribute_group **);
4508:	int device_change_owner(struct device *, kuid_t, kgid_t);
4191:	struct device *device_create(struct class *, struct device *, dev_t, void *, const char *, ...);
2879:	int device_create_bin_file(struct device *, const struct bin_attribute *);
2825:	int device_create_file(struct device *, const struct device_attribute *);
4232:	struct device *device_create_with_groups(struct class *, struct device *, dev_t, void *, const struct attribute_group **, const char *, ...);
3621:	void device_del(struct device *);
4257:	void device_destroy(struct class *, dev_t);
3911:	struct device *device_find_any_child(struct device *);
3851:	struct device *device_find_child(struct device *, void *, int (*)(struct device *, void *));
3879:	struct device *device_find_child_by_name(struct device *, const char *);
3786:	int device_for_each_child(struct device *, void *, int (*)(struct device *, void *));
3816:	int device_for_each_child_reverse(struct device *, void *, int (*)(struct device *, void *));
3742:	const char *device_get_devnode(struct device *, umode_t *, kuid_t *, kgid_t *, const char **);
2938:	void device_initialize(struct device *);
283:	int device_is_dependent(struct device *, void *);
698:	struct device_link *device_link_add(struct device *, struct device *, u32);
928:	void device_link_del(struct device_link *);
944:	void device_link_remove(void *, struct device *);
1493:	bool device_links_busy(struct device *);
1003:	int device_links_check_suppliers(struct device *);
1259:	void device_links_driver_bound(struct device *);
1448:	void device_links_driver_cleanup(struct device *);
1227:	void device_links_force_bind(struct device *);
1411:	void device_links_no_driver(struct device *);
198:	int device_links_read_lock(void);
208:	int device_links_read_lock_held(void);
203:	void device_links_read_unlock(int);
1145:	void device_links_supplier_sync_state_pause(void);
1152:	void device_links_supplier_sync_state_resume(void);
1533:	void device_links_unbind_consumers(struct device *);
4939:	int device_match_acpi_dev(struct device *, const void *);
4945:	int device_match_acpi_handle(struct device *, const void *);
4951:	int device_match_any(struct device *, const void *);
4933:	int device_match_devt(struct device *, const void *);
4927:	int device_match_fwnode(struct device *, const void *);
4915:	int device_match_name(struct device *, const void *);
4921:	int device_match_of_node(struct device *, const void *);
4367:	int device_move(struct device *, struct device *, enum dpm_order);
3965:	int device_offline(struct device *);
4003:	int device_online(struct device *);
393:	void device_pm_move_to_tail(struct device *);
3557:	int device_register(struct device *);
2894:	void device_remove_bin_file(struct device *, const struct bin_attribute *);
2849:	void device_remove_file(struct device *, const struct device_attribute *);
2864:	bool device_remove_file_self(struct device *, const struct device_attribute *);
2577:	void device_remove_groups(struct device *, const struct attribute_group **);
4308:	int device_rename(struct device *, const char *);
4908:	void device_set_node(struct device *, struct fwnode_handle *);
4900:	void device_set_of_node_from_dev(struct device *, const struct device *);
2291:	ssize_t device_show_bool(struct device *, struct device_attribute *, char *);
2269:	ssize_t device_show_int(struct device *, struct device_attribute *, char *);
2240:	ssize_t device_show_ulong(struct device *, struct device_attribute *, char *);
4573:	void device_shutdown(void);
2279:	ssize_t device_store_bool(struct device *, struct device_attribute *, const char *, size_t);
2249:	ssize_t device_store_int(struct device *, struct device_attribute *, const char *, size_t);
2223:	ssize_t device_store_ulong(struct device *, struct device_attribute *, const char *, size_t);
3695:	void device_unregister(struct device *);
3917:	int devices_init(void);
2810:	void devices_kset_move_last(struct device *);
2617:	int devm_device_add_group(struct device *, const struct attribute_group *);
2652:	int devm_device_add_groups(struct device *, const struct attribute_group **);
1694:	void fw_devlink_drivers_done(void);
1636:	u32 fw_devlink_get_flags(void);
1646:	bool fw_devlink_is_strict(void);
168:	void fw_devlink_purge_absent_suppliers(struct fwnode_handle *);
77:	int fwnode_link_add(struct fwnode_handle *, struct fwnode_handle *);
162:	void fwnode_links_purge(struct fwnode_handle *);
3572:	struct device *get_device(struct device *);
3590:	bool kill_device(struct device *);
2112:	void lock_device_hotplug(void);
2122:	int lock_device_hotplug_sysfs(void);
3582:	void put_device(struct device *);
4108:	void root_device_unregister(struct device *);
4844:	void set_primary_fwnode(struct device *, struct fwnode_handle *);
4880:	void set_secondary_fwnode(struct device *, struct fwnode_handle *);
2117:	void unlock_device_hotplug(void);
2964:	struct kobject *virtual_device_parent(struct device *);
1736:	void wait_for_init_devices_probe(void);
File drivers/base/cpu.c:
622:	void cpu_dev_init(void);
440:	struct device *cpu_device_create(struct device *, void *, const struct attribute_group **, const char *, ...);
487:	bool cpu_is_hotpluggable(unsigned int);
555:	ssize_t cpu_show_itlb_multihit(struct device *, struct device_attribute *, char *);
536:	ssize_t cpu_show_l1tf(struct device *, struct device_attribute *, char *);
542:	ssize_t cpu_show_mds(struct device *, struct device_attribute *, char *);
512:	ssize_t cpu_show_meltdown(struct device *, struct device_attribute *, char *);
567:	ssize_t cpu_show_mmio_stale_data(struct device *, struct device_attribute *, char *);
573:	ssize_t cpu_show_retbleed(struct device *, struct device_attribute *, char *);
530:	ssize_t cpu_show_spec_store_bypass(struct device *, struct device_attribute *, char *);
518:	ssize_t cpu_show_spectre_v1(struct device *, struct device_attribute *, char *);
524:	ssize_t cpu_show_spectre_v2(struct device *, struct device_attribute *, char *);
561:	ssize_t cpu_show_srbds(struct device *, struct device_attribute *, char *);
548:	ssize_t cpu_show_tsx_async_abort(struct device *, struct device_attribute *, char *);
391:	struct device *get_cpu_device(unsigned int);
359:	int register_cpu(struct cpu *, int);
75:	void unregister_cpu(struct cpu *);
File drivers/base/dd.c:
323:	void deferred_probe_extend_timeout(void);
1049:	int device_attach(struct device *);
496:	int device_bind_driver(struct device *);
203:	void device_block_probing(void);
1100:	int device_driver_attach(struct device_driver *, struct device *);
1313:	void device_driver_detach(struct device *);
1055:	void device_initial_probe(struct device *);
388:	bool device_is_bound(struct device *);
1295:	void device_release_driver(struct device *);
1272:	void device_release_driver_internal(struct device *, struct device_driver *, struct device *);
227:	void device_set_deferred_probe_reason(const struct device *, struct va_format *);
216:	void device_unblock_probing(void);
1209:	int driver_attach(struct device_driver *);
132:	void driver_deferred_probe_add(struct device *);
290:	int driver_deferred_probe_check_state(struct device *);
145:	void driver_deferred_probe_del(struct device *);
175:	void driver_deferred_probe_trigger(void);
1322:	void driver_detach(struct device_driver *);
732:	int driver_probe_done(void);
746:	void wait_for_device_probe(void);
File drivers/base/devcoredump.c:
323:	void dev_coredumpm(struct device *, struct module *, void *, size_t, gfp_t, ssize_t (*)(char *, loff_t, size_t, void *, size_t), void (*)(void *));
407:	void dev_coredumpsg(struct device *, struct scatterlist *, size_t, gfp_t);
256:	void dev_coredumpv(struct device *, void *, size_t, gfp_t);
File drivers/base/devres.c:
1191:	void *__devm_alloc_percpu(struct device *, size_t, size_t);
162:	void *__devres_alloc_node(dr_release_t, size_t, gfp_t, int, const char *);
733:	int devm_add_action(struct device *, void (*)(void *), void *);
1155:	void devm_free_pages(struct device *, unsigned long);
1222:	void devm_free_percpu(struct device *, void *);
1121:	unsigned long devm_get_free_pages(struct device *, gfp_t, unsigned int);
1030:	char *devm_kasprintf(struct device *, gfp_t, const char *, ...);
1050:	void devm_kfree(struct device *, const void *);
820:	void *devm_kmalloc(struct device *, size_t, gfp_t);
1076:	void *devm_kmemdup(struct device *, const void *, size_t, gfp_t);
858:	void *devm_krealloc(struct device *, void *, size_t, gfp_t);
949:	char *devm_kstrdup(struct device *, const char *, gfp_t);
978:	const char *devm_kstrdup_const(struct device *, const char *, gfp_t);
998:	char *devm_kvasprintf(struct device *, gfp_t, const char *, va_list);
781:	void devm_release_action(struct device *, void (*)(void *), void *);
759:	void devm_remove_action(struct device *, void (*)(void *), void *);
243:	void devres_add(struct device *, void *);
609:	void devres_close_group(struct device *, void *);
390:	int devres_destroy(struct device *, dr_release_t, dr_match_t, void *);
286:	void *devres_find(struct device *, dr_release_t, dr_match_t, void *);
190:	void devres_for_each_res(struct device *, dr_release_t, dr_match_t, void *, void (*)(struct device *, void *, void *), void *);
223:	void devres_free(void *);
316:	void *devres_get(struct device *, void *, dr_match_t, void *);
552:	void *devres_open_group(struct device *, void *, gfp_t);
420:	int devres_release(struct device *, dr_release_t, dr_match_t, void *);
517:	int devres_release_all(struct device *);
668:	int devres_release_group(struct device *, void *);
352:	void *devres_remove(struct device *, dr_release_t, dr_match_t, void *);
635:	void devres_remove_group(struct device *, void *);
File drivers/base/devtmpfs.c:
121:	int devtmpfs_create_node(struct device *);
148:	int devtmpfs_delete_node(struct device *);
456:	int devtmpfs_init(void);
367:	int devtmpfs_mount(void);
File drivers/base/driver.c:
202:	int driver_add_groups(struct device_driver *, const struct attribute_group **);
176:	int driver_create_file(struct device_driver *, const struct driver_attribute *);
290:	struct device_driver *driver_find(const char *, struct bus_type *);
151:	struct device *driver_find_device(struct device_driver *, struct device *, const void *, int (*)(struct device *, const void *));
117:	int driver_for_each_device(struct device_driver *, struct device *, void *, int (*)(struct device *, void *));
222:	int driver_register(struct device_driver *);
194:	void driver_remove_file(struct device_driver *, const struct driver_attribute *);
208:	void driver_remove_groups(struct device_driver *, const struct attribute_group **);
48:	int driver_set_override(struct device *, const char **, const char *, size_t);
267:	void driver_unregister(struct device_driver *);
File drivers/base/firmware.c:
20:	int firmware_init(void);
File drivers/base/firmware_loader/builtin/main.c:
95:	bool firmware_is_builtin(const struct firmware *);
47:	bool firmware_request_builtin(struct firmware *, const char *);
86:	bool firmware_request_builtin_buf(struct firmware *, const char *, void *, size_t);
File drivers/base/firmware_loader/fallback.c:
220:	int firmware_fallback_sysfs(struct firmware *, const char *, struct device *, u32, int);
24:	void fw_fallback_set_cache_timeout(void);
31:	void fw_fallback_set_default_timeout(void);
49:	void kill_pending_fw_fallback_reqs(bool);
File drivers/base/firmware_loader/fallback_table.c:
51:	int register_firmware_config_sysctl(void);
62:	void unregister_firmware_config_sysctl(void);
File drivers/base/firmware_loader/main.c:
167:	int alloc_lookup_fw_priv(const char *, struct firmware_cache *, struct fw_priv **, void *, size_t, size_t, u32);
681:	int assign_fw(struct firmware *, struct device *);
998:	int firmware_request_cache(struct device *, const char *);
923:	int firmware_request_nowarn(const struct firmware **, const char *, struct device *);
972:	int firmware_request_platform(const struct firmware **, const char *, struct device *);
224:	void free_fw_priv(struct fw_priv *);
238:	void fw_free_paged_buf(struct fw_priv *);
257:	int fw_grow_paged_buf(struct fw_priv *, int);
233:	bool fw_is_paged_buf(struct fw_priv *);
290:	int fw_map_paged_buf(struct fw_priv *);
97:	void fw_state_init(struct fw_priv *);
1077:	void release_firmware(const struct firmware *);
896:	int request_firmware(const struct firmware **, const char *, struct device *);
948:	int request_firmware_direct(const struct firmware **, const char *, struct device *);
1026:	int request_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t);
1139:	int request_firmware_nowait(struct module *, bool, const char *, struct device *, gfp_t, void *, void (*)(const struct firmware *, void *));
1055:	int request_partial_firmware_into_buf(const struct firmware **, const char *, struct device *, void *, size_t, size_t);
File drivers/base/firmware_loader/sysfs.c:
15:	void __fw_load_abort(struct fw_priv *);
396:	struct fw_sysfs *fw_create_instance(struct firmware *, const char *, struct device *, u32);
111:	int register_sysfs_loader(void);
120:	void unregister_sysfs_loader(void);
File drivers/base/init.c:
21:	void driver_init(void);
File drivers/base/map.c:
95:	struct kobject *kobj_lookup(struct kobj_map *, dev_t, int *);
32:	int kobj_map(struct kobj_map *, dev_t, unsigned long, struct module *, kobj_probe_t *, int (*)(dev_t, void *), void *);
135:	struct kobj_map *kobj_map_init(kobj_probe_t *, struct mutex *);
68:	void kobj_unmap(struct kobj_map *, dev_t, unsigned long);
File drivers/base/node.c:
858:	int __register_one_node(int);
946:	void node_dev_init(void);
645:	int register_cpu_under_node(unsigned int, unsigned int);
681:	int register_memory_node_under_compute_node(unsigned int, unsigned int, unsigned int);
718:	int unregister_cpu_under_node(unsigned int, unsigned int);
631:	void unregister_node(struct node *);
881:	void unregister_one_node(int);
File drivers/base/platform-msi.c:
269:	struct irq_domain *__platform_msi_create_device_domain(struct device *, unsigned int, bool, irq_write_msi_msg_t, const struct irq_domain_ops *, void *);
122:	struct irq_domain *platform_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
344:	int platform_msi_device_domain_alloc(struct irq_domain *, unsigned int, unsigned int);
321:	void platform_msi_device_domain_free(struct irq_domain *, unsigned int, unsigned int);
207:	int platform_msi_domain_alloc_irqs(struct device *, unsigned int, irq_write_msi_msg_t);
228:	void platform_msi_domain_free_irqs(struct device *);
243:	void *platform_msi_get_host_data(struct irq_domain *);
File drivers/base/platform.c:
972:	struct platform_device *__platform_create_bundle(struct platform_driver *, int (*)(struct platform_device *), struct resource *, unsigned int, const void *, size_t, struct module *);
906:	int __platform_driver_probe(struct platform_driver *, int (*)(struct platform_device *), struct module *);
861:	int __platform_driver_register(struct platform_driver *, struct module *);
1027:	int __platform_register_drivers(struct platform_driver * const *, unsigned int, struct module *);
99:	void *devm_platform_get_and_ioremap_resource(struct platform_device *, unsigned int, struct resource **);
334:	int devm_platform_get_irqs_affinity(struct platform_device *, struct irq_affinity *, unsigned int, unsigned int, int **);
122:	void *devm_platform_ioremap_resource(struct platform_device *, unsigned int);
142:	void *devm_platform_ioremap_resource_byname(struct platform_device *, const char *);
1509:	void early_platform_cleanup(void);
503:	int platform_add_devices(struct platform_device **, int);
1511:	int platform_bus_init(void);
656:	int platform_device_add(struct platform_device *);
632:	int platform_device_add_data(struct platform_device *, const void *, size_t);
604:	int platform_device_add_resources(struct platform_device *, const struct resource *, unsigned int);
576:	struct platform_device *platform_device_alloc(const char *, int);
746:	void platform_device_del(struct platform_device *);
548:	void platform_device_put(struct platform_device *);
775:	int platform_device_register(struct platform_device *);
806:	struct platform_device *platform_device_register_full(const struct platform_device_info *);
791:	void platform_device_unregister(struct platform_device *);
875:	void platform_driver_unregister(struct platform_driver *);
1501:	struct device *platform_find_device_by_driver(struct device *, const struct device_driver *);
259:	int platform_get_irq(struct platform_device *, unsigned int);
469:	int platform_get_irq_byname(struct platform_device *, const char *);
491:	int platform_get_irq_byname_optional(struct platform_device *, const char *);
171:	int platform_get_irq_optional(struct platform_device *, unsigned int);
70:	struct resource *platform_get_mem_or_io(struct platform_device *, unsigned int);
55:	struct resource *platform_get_resource(struct platform_device *, unsigned int, unsigned int);
419:	struct resource *platform_get_resource_byname(struct platform_device *, unsigned int, const char *);
278:	int platform_irq_count(struct platform_device *);
1065:	void platform_unregister_drivers(struct platform_driver * const *, unsigned int);
File drivers/base/power/clock_ops.c:
796:	void pm_clk_add_notifier(struct bus_type *, struct pm_clk_notifier_block *);
File drivers/base/property.c:
20:	struct fwnode_handle *__dev_fwnode(struct device *);
27:	const struct fwnode_handle *__dev_fwnode_const(const struct device *);
875:	bool device_dma_supported(const struct device *);
863:	unsigned int device_get_child_node_count(const struct device *);
881:	enum dev_dma_attr device_get_dma_attr(const struct device *);
1217:	const void *device_get_match_data(const struct device *);
804:	struct fwnode_handle *device_get_named_child_node(const struct device *, const char *);
767:	struct fwnode_handle *device_get_next_child_node(const struct device *, struct fwnode_handle *);
926:	int device_get_phy_mode(struct device *);
245:	int device_property_match_string(struct device *, const char *, const char *);
41:	bool device_property_present(struct device *, const char *);
223:	int device_property_read_string(struct device *, const char *, const char **);
201:	int device_property_read_string_array(struct device *, const char *, const char **, size_t);
117:	int device_property_read_u16_array(struct device *, const char *, u16 *, size_t);
145:	int device_property_read_u32_array(struct device *, const char *, u32 *, size_t);
173:	int device_property_read_u64_array(struct device *, const char *, u64 *, size_t);
89:	int device_property_read_u8_array(struct device *, const char *, u8 *, size_t);
1299:	void *fwnode_connection_find_match(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t);
1336:	int fwnode_connection_find_matches(const struct fwnode_handle *, const char *, void *, devcon_match_fn_t, void **, unsigned int);
656:	unsigned int fwnode_count_parents(const struct fwnode_handle *);
847:	bool fwnode_device_is_available(const struct fwnode_handle *);
553:	struct fwnode_handle *fwnode_find_reference(const struct fwnode_handle *, const char *, unsigned int);
572:	const char *fwnode_get_name(const struct fwnode_handle *);
585:	const char *fwnode_get_name_prefix(const struct fwnode_handle *);
792:	struct fwnode_handle *fwnode_get_named_child_node(const struct fwnode_handle *, const char *);
744:	struct fwnode_handle *fwnode_get_next_available_child_node(const struct fwnode_handle *, struct fwnode_handle *);
730:	struct fwnode_handle *fwnode_get_next_child_node(const struct fwnode_handle *, struct fwnode_handle *);
614:	struct fwnode_handle *fwnode_get_next_parent(struct fwnode_handle *);
635:	struct device *fwnode_get_next_parent_dev(struct fwnode_handle *);
680:	struct fwnode_handle *fwnode_get_nth_parent(struct fwnode_handle *, unsigned int);
597:	struct fwnode_handle *fwnode_get_parent(const struct fwnode_handle *);
898:	int fwnode_get_phy_mode(struct fwnode_handle *);
1128:	struct fwnode_handle *fwnode_graph_get_endpoint_by_id(const struct fwnode_handle *, u32, u32, unsigned long);
1183:	unsigned int fwnode_graph_get_endpoint_count(struct fwnode_handle *, unsigned long);
997:	struct fwnode_handle *fwnode_graph_get_next_endpoint(const struct fwnode_handle *, struct fwnode_handle *);
1036:	struct fwnode_handle *fwnode_graph_get_port_parent(const struct fwnode_handle *);
1089:	struct fwnode_handle *fwnode_graph_get_remote_endpoint(const struct fwnode_handle *);
1076:	struct fwnode_handle *fwnode_graph_get_remote_port(const struct fwnode_handle *);
1056:	struct fwnode_handle *fwnode_graph_get_remote_port_parent(const struct fwnode_handle *);
1208:	int fwnode_graph_parse_endpoint(const struct fwnode_handle *, struct fwnode_endpoint *);
817:	struct fwnode_handle *fwnode_handle_get(struct fwnode_handle *);
834:	void fwnode_handle_put(struct fwnode_handle *);
939:	void *fwnode_iomap(struct fwnode_handle *, int);
953:	int fwnode_irq_get(const struct fwnode_handle *, unsigned int);
973:	int fwnode_irq_get_byname(const struct fwnode_handle *, const char *);
705:	bool fwnode_is_ancestor_of(struct fwnode_handle *, struct fwnode_handle *);
519:	int fwnode_property_get_reference_args(const struct fwnode_handle *, const char *, const char *, unsigned int, unsigned int, struct fwnode_reference_args *);
466:	int fwnode_property_match_string(const struct fwnode_handle *, const char *, const char *);
52:	bool fwnode_property_present(const struct fwnode_handle *, const char *);
442:	int fwnode_property_read_string(const struct fwnode_handle *, const char *, const char **);
408:	int fwnode_property_read_string_array(const struct fwnode_handle *, const char *, const char **, size_t);
321:	int fwnode_property_read_u16_array(const struct fwnode_handle *, const char *, u16 *, size_t);
350:	int fwnode_property_read_u32_array(const struct fwnode_handle *, const char *, u32 *, size_t);
379:	int fwnode_property_read_u64_array(const struct fwnode_handle *, const char *, u64 *, size_t);
292:	int fwnode_property_read_u8_array(const struct fwnode_handle *, const char *, u8 *, size_t);
File drivers/base/regmap/regcache.c:
545:	void regcache_cache_bypass(struct regmap *, bool);
501:	void regcache_cache_only(struct regmap *, bool);
469:	int regcache_drop_region(struct regmap *, unsigned int, unsigned int);
212:	void regcache_exit(struct regmap *);
601:	unsigned int regcache_get_val(struct regmap *, const void *, unsigned int);
115:	int regcache_init(struct regmap *, const struct regmap_config *);
650:	int regcache_lookup_reg(struct regmap *, unsigned int);
525:	void regcache_mark_dirty(struct regmap *);
239:	int regcache_read(struct regmap *, unsigned int, unsigned int *);
555:	bool regcache_set_val(struct regmap *, void *, unsigned int, unsigned int);
345:	int regcache_sync(struct regmap *);
781:	int regcache_sync_block(struct regmap *, void *, unsigned long *, unsigned int, unsigned int, unsigned int);
414:	int regcache_sync_region(struct regmap *, unsigned int, unsigned int);
270:	int regcache_write(struct regmap *, unsigned int, unsigned int);
File drivers/base/regmap/regmap-i2c.c:
384:	struct regmap *__devm_regmap_init_i2c(struct i2c_client *, const struct regmap_config *, struct lock_class_key *, const char *);
369:	struct regmap *__regmap_init_i2c(struct i2c_client *, const struct regmap_config *, struct lock_class_key *, const char *);
File drivers/base/regmap/regmap-irq.c:
1248:	int devm_regmap_add_irq_chip(struct device *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1203:	int devm_regmap_add_irq_chip_fwnode(struct device *, struct fwnode_handle *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1268:	void devm_regmap_del_irq_chip(struct device *, int, struct regmap_irq_chip_data *);
1108:	int regmap_add_irq_chip(struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
723:	int regmap_add_irq_chip_fwnode(struct fwnode_handle *, struct regmap *, int, int, int, const struct regmap_irq_chip *, struct regmap_irq_chip_data **);
1125:	void regmap_del_irq_chip(int, struct regmap_irq_chip_data *);
1289:	int regmap_irq_chip_get_base(struct regmap_irq_chip_data *);
1324:	struct irq_domain *regmap_irq_get_domain(struct regmap_irq_chip_data *);
630:	unsigned int regmap_irq_get_irq_reg_linear(struct regmap_irq_chip_data *, unsigned int, int);
1304:	int regmap_irq_get_virq(struct regmap_irq_chip_data *, int);
663:	int regmap_irq_set_type_config_simple(unsigned int **, unsigned int, const struct regmap_irq *, int);
File drivers/base/regmap/regmap-mmio.c:
596:	struct regmap *__devm_regmap_init_mmio_clk(struct device *, const char *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
579:	struct regmap *__regmap_init_mmio_clk(struct device *, const char *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
614:	int regmap_mmio_attach_clk(struct regmap *, struct clk *);
625:	void regmap_mmio_detach_clk(struct regmap *);
File drivers/base/regmap/regmap.c:
1267:	struct regmap *__devm_regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
718:	struct regmap *__regmap_init(struct device *, const struct regmap_bus *, void *, const struct regmap_config *, struct lock_class_key *, const char *);
2058:	int _regmap_raw_write(struct regmap *, unsigned int, const void *, size_t, bool);
1970:	int _regmap_write(struct regmap *, unsigned int, unsigned int);
1592:	struct regmap *dev_get_regmap(struct device *, const char *);
1318:	struct regmap_field *devm_regmap_field_alloc(struct device *, struct regmap *, struct reg_field);
1381:	int devm_regmap_field_bulk_alloc(struct device *, struct regmap *, struct regmap_field **, const struct reg_field *, int);
1426:	void devm_regmap_field_bulk_free(struct device *, struct regmap_field *);
1444:	void devm_regmap_field_free(struct device *, struct regmap_field *);
3361:	int regmap_async_complete(struct regmap *);
3320:	void regmap_async_complete_cb(struct regmap_async *, int);
627:	int regmap_attach_dev(struct device *, struct regmap *, const struct regmap_config *);
3154:	int regmap_bulk_read(struct regmap *, unsigned int, void *, size_t);
2391:	int regmap_bulk_write(struct regmap *, unsigned int, const void *, size_t);
104:	bool regmap_cached(struct regmap *, unsigned int);
1883:	bool regmap_can_raw_write(struct regmap *);
74:	bool regmap_check_range_table(struct regmap *, unsigned int, const struct regmap_access_table *);
1535:	void regmap_exit(struct regmap *);
1461:	struct regmap_field *regmap_field_alloc(struct regmap *, struct reg_field);
1346:	int regmap_field_bulk_alloc(struct regmap *, struct regmap_field **, const struct reg_field *, int);
1409:	void regmap_field_bulk_free(struct regmap_field *);
1481:	void regmap_field_free(struct regmap_field *);
3094:	int regmap_field_read(struct regmap_field *, unsigned int *);
2334:	int regmap_field_test_bits(struct regmap_field *, unsigned int);
2312:	int regmap_field_update_bits_base(struct regmap_field *, unsigned int, unsigned int, bool *, bool, bool);
3120:	int regmap_fields_read(struct regmap_field *, unsigned int, unsigned int *);
2361:	int regmap_fields_update_bits_base(struct regmap_field *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
1610:	struct device *regmap_get_device(struct regmap *);
3469:	int regmap_get_max_register(struct regmap *);
1894:	size_t regmap_get_raw_read_max(struct regmap *);
1905:	size_t regmap_get_raw_write_max(struct regmap *);
3483:	int regmap_get_reg_stride(struct regmap *);
3452:	int regmap_get_val_bytes(struct regmap *);
679:	enum regmap_endian regmap_get_val_endian(struct device *, const struct regmap_bus *, const struct regmap_config *);
3496:	bool regmap_might_sleep(struct regmap *);
2704:	int regmap_multi_reg_write(struct regmap *, const struct reg_sequence *, int);
2737:	int regmap_multi_reg_write_bypassed(struct regmap *, const struct reg_sequence *, int);
3028:	int regmap_noinc_read(struct regmap *, unsigned int, void *, size_t);
2246:	int regmap_noinc_write(struct regmap *, unsigned int, const void *, size_t);
3502:	int regmap_parse_val(struct regmap *, const void *, unsigned int *);
164:	bool regmap_precious(struct regmap *, unsigned int);
2934:	int regmap_raw_read(struct regmap *, unsigned int, void *, size_t);
2112:	int regmap_raw_write(struct regmap *, unsigned int, const void *, size_t);
2781:	int regmap_raw_write_async(struct regmap *, unsigned int, const void *, size_t);
2906:	int regmap_read(struct regmap *, unsigned int, unsigned int *);
127:	bool regmap_readable(struct regmap *, unsigned int);
189:	bool regmap_readable_noinc(struct regmap *, unsigned int);
60:	bool regmap_reg_in_ranges(unsigned int, const struct regmap_range *, unsigned int);
3402:	int regmap_register_patch(struct regmap *, const struct reg_sequence *, int);
1501:	int regmap_reinit_cache(struct regmap *, const struct regmap_config *);
3308:	int regmap_test_bits(struct regmap *, unsigned int, unsigned int);
3277:	int regmap_update_bits_base(struct regmap *, unsigned int, unsigned int, unsigned int, bool *, bool, bool);
147:	bool regmap_volatile(struct regmap *, unsigned int);
2010:	int regmap_write(struct regmap *, unsigned int, unsigned int);
2037:	int regmap_write_async(struct regmap *, unsigned int, unsigned int);
90:	bool regmap_writeable(struct regmap *, unsigned int);
178:	bool regmap_writeable_noinc(struct regmap *, unsigned int);
File drivers/base/soc.c:
241:	const struct soc_device_attribute *soc_device_match(const struct soc_device_attribute *);
114:	struct soc_device *soc_device_register(struct soc_device_attribute *);
40:	struct device *soc_device_to_device(struct soc_device *);
172:	void soc_device_unregister(struct soc_device *);
File drivers/base/swnode.c:
1023:	int device_add_software_node(struct device *, const struct software_node *);
1096:	int device_create_managed_software_node(struct device *, const struct property_entry *, const struct software_node *);
1064:	void device_remove_software_node(struct device *);
975:	struct fwnode_handle *fwnode_create_software_node(const struct property_entry *, const struct fwnode_handle *);
1003:	void fwnode_remove_software_node(struct fwnode_handle *);
39:	bool is_software_node(const struct fwnode_handle *);
312:	struct property_entry *property_entries_dup(const struct property_entry *);
349:	void property_entries_free(const struct property_entry *);
693:	const struct software_node *software_node_find_by_name(const struct software_node *, const char *);
98:	struct fwnode_handle *software_node_fwnode(const struct software_node *);
1120:	void software_node_notify(struct device *);
1142:	void software_node_notify_remove(struct device *);
946:	int software_node_register(const struct software_node *);
893:	int software_node_register_node_group(const struct software_node **);
832:	int software_node_register_nodes(const struct software_node *);
964:	void software_node_unregister(const struct software_node *);
926:	void software_node_unregister_node_group(const struct software_node **);
871:	void software_node_unregister_nodes(const struct software_node *);
90:	const struct software_node *to_software_node(const struct fwnode_handle *);
File drivers/base/syscore.c:
21:	void register_syscore_ops(struct syscore_ops *);
114:	void syscore_shutdown(void);
33:	void unregister_syscore_ops(struct syscore_ops *);
File drivers/base/transport_class.c:
91:	int anon_transport_class_register(struct anon_transport_class *);
113:	void anon_transport_class_unregister(struct anon_transport_class *);
179:	int transport_add_device(struct device *);
51:	int transport_class_register(struct transport_class *);
65:	void transport_class_unregister(struct transport_class *);
212:	void transport_configure_device(struct device *);
280:	void transport_destroy_device(struct device *);
251:	void transport_remove_device(struct device *);
148:	void transport_setup_device(struct device *);
File drivers/char/hw_random/core.c:
647:	int devm_hwrng_register(struct device *, struct hwrng *);
668:	void devm_hwrng_unregister(struct device *, struct hwrng *);
674:	long hwrng_msleep(struct hwrng *, unsigned int);
536:	int hwrng_register(struct hwrng *);
596:	void hwrng_unregister(struct hwrng *);
File drivers/char/ipmi/ipmi_msghandler.c:
1776:	unsigned char ipmb_checksum(unsigned char *, int);
3550:	int ipmi_add_smi(struct module *, const struct ipmi_smi_handlers *, void *, struct device *, unsigned char);
903:	unsigned int ipmi_addr_length(int);
653:	const char *ipmi_addr_src_to_str(enum ipmi_addr_src);
5136:	struct ipmi_smi_msg *ipmi_alloc_smi_msg(void);
1204:	int ipmi_create_user(unsigned int, const struct ipmi_user_hndl *, void *, struct ipmi_user **);
1401:	int ipmi_destroy_user(struct ipmi_user *);
5171:	void ipmi_free_recv_msg(struct ipmi_recv_msg *);
1521:	int ipmi_get_maintenance_mode(struct ipmi_user *);
1499:	int ipmi_get_my_LUN(struct ipmi_user *, unsigned int, unsigned char *);
1455:	int ipmi_get_my_address(struct ipmi_user *, unsigned int, unsigned char *);
1292:	int ipmi_get_smi_info(int, struct ipmi_smi_info *);
1411:	int ipmi_get_version(struct ipmi_user *, unsigned char *, unsigned char *);
3503:	void ipmi_poll_interface(struct ipmi_user *);
1685:	int ipmi_register_for_cmd(struct ipmi_user *, unsigned char, unsigned char, unsigned int);
2409:	int ipmi_request_settime(struct ipmi_user *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, int, int, unsigned int);
2448:	int ipmi_request_supply_msgs(struct ipmi_user *, struct ipmi_addr *, long, struct kernel_ipmi_msg *, void *, void *, struct ipmi_recv_msg *, int);
1588:	int ipmi_set_gets_events(struct ipmi_user *, bool);
1546:	int ipmi_set_maintenance_mode(struct ipmi_user *, int);
1477:	int ipmi_set_my_LUN(struct ipmi_user *, unsigned int, unsigned char);
1433:	int ipmi_set_my_address(struct ipmi_user *, unsigned int, unsigned char);
4861:	void ipmi_smi_msg_received(struct ipmi_smi *, struct ipmi_smi_msg *);
4896:	void ipmi_smi_watchdog_pretimeout(struct ipmi_smi *);
739:	int ipmi_smi_watcher_register(struct ipmi_smi_watcher *);
773:	int ipmi_smi_watcher_unregister(struct ipmi_smi_watcher *);
1730:	int ipmi_unregister_for_cmd(struct ipmi_user *, unsigned char, unsigned char, unsigned int);
3761:	void ipmi_unregister_smi(struct ipmi_smi *);
854:	int ipmi_validate_addr(struct ipmi_addr *, int);
File drivers/char/ipmi/ipmi_plat_data.c:
11:	struct platform_device *ipmi_platform_add(const char *, unsigned int, struct ipmi_plat_data *);
File drivers/char/ipmi/ipmi_si_hardcode.c:
93:	void ipmi_hardcode_init(void);
127:	void ipmi_si_hardcode_exit(void);
136:	int ipmi_si_hardcode_match(int, unsigned long);
File drivers/char/ipmi/ipmi_si_hotmod.c:
234:	void ipmi_si_hotmod_exit(void);
File drivers/char/ipmi/ipmi_si_intf.c:
1236:	void ipmi_irq_finish_setup(struct si_sm_io *);
1244:	void ipmi_irq_start_cleanup(struct si_sm_io *);
1867:	int ipmi_si_add_smi(struct si_sm_io *);
1117:	irqreturn_t ipmi_si_irq_handler(int, void *);
2253:	struct device *ipmi_si_remove_by_data(int, enum si_type, unsigned long);
2239:	void ipmi_si_remove_by_dev(struct device *);
1257:	int ipmi_std_irq_setup(struct si_sm_io *);
File drivers/char/ipmi/ipmi_si_mem_io.c:
76:	int ipmi_si_mem_setup(struct si_sm_io *);
File drivers/char/ipmi/ipmi_si_platform.c:
427:	void ipmi_remove_platform_device_by_name(char *);
458:	void ipmi_si_platform_init(void);
467:	void ipmi_si_platform_shutdown(void);
File drivers/char/ipmi/ipmi_si_port_io.c:
63:	int ipmi_si_port_setup(struct si_sm_io *);
File drivers/char/mem.c:
271:	int phys_mem_access_prot_allowed(struct file *, unsigned long, unsigned long, pgprot_t *);
File drivers/char/misc.c:
259:	void misc_deregister(struct miscdevice *);
197:	int misc_register(struct miscdevice *);
File drivers/char/random.c:
1364:	long __arm64_sys_getrandom(const struct pt_regs *);
535:	u32 __get_random_u32_below(u32);
952:	void add_bootloader_randomness(const void *, size_t);
917:	void add_device_randomness(const void *, size_t);
1209:	void add_disk_randomness(struct gendisk *);
934:	void add_hwgenerator_randomness(const void *, size_t, size_t, bool);
1193:	void add_input_randomness(unsigned int, unsigned int, unsigned int);
1088:	void add_interrupt_randomness(int);
152:	int execute_with_initialized_rng(struct notifier_block *);
414:	void get_random_bytes(void *, size_t);
531:	u16 get_random_u16(void);
532:	u32 get_random_u32(void);
533:	u64 get_random_u64(void);
530:	u8 get_random_u8(void);
1218:	void rand_initialize_disk(struct gendisk *);
882:	void random_init(void);
841:	void random_init_early(const char *);
1034:	int random_online_cpu(unsigned int);
575:	int random_prepare_cpu(unsigned int);
108:	bool rng_is_initialized(void);
132:	int wait_for_random_bytes(void);
File drivers/char/tpm/eventlog/common.c:
103:	void tpm_bios_log_setup(struct tpm_chip *);
169:	void tpm_bios_log_teardown(struct tpm_chip *);
File drivers/char/tpm/eventlog/of.c:
20:	int tpm_read_log_of(struct tpm_chip *);
File drivers/char/tpm/tpm-chip.c:
313:	struct tpm_chip *tpm_chip_alloc(struct device *, const struct tpm_class_ops *);
562:	int tpm_chip_register(struct tpm_chip *);
100:	int tpm_chip_start(struct tpm_chip *);
133:	void tpm_chip_stop(struct tpm_chip *);
625:	void tpm_chip_unregister(struct tpm_chip *);
196:	struct tpm_chip *tpm_default_chip(void);
235:	struct tpm_chip *tpm_find_get_ops(struct tpm_chip *);
184:	void tpm_put_ops(struct tpm_chip *);
152:	int tpm_try_get_ops(struct tpm_chip *);
388:	struct tpm_chip *tpmm_chip_alloc(struct device *, const struct tpm_class_ops *);
File drivers/char/tpm/tpm-dev-common.c:
110:	void tpm_common_open(struct file *, struct tpm_chip *, struct file_priv *, struct tpm_space *);
237:	__poll_t tpm_common_poll(struct file *, poll_table *);
125:	ssize_t tpm_common_read(struct file *, char *, size_t, loff_t *);
262:	void tpm_common_release(struct file *, struct file_priv *);
165:	ssize_t tpm_common_write(struct file *, const char *, size_t, loff_t *);
278:	void tpm_dev_common_exit(void);
271:	int tpm_dev_common_init(void);
File drivers/char/tpm/tpm-interface.c:
370:	int tpm_auto_startup(struct tpm_chip *);
52:	unsigned long tpm_calc_ordinal_duration(struct tpm_chip *, u32);
444:	int tpm_get_random(struct tpm_chip *, u8 *, size_t);
239:	int tpm_get_timeouts(struct tpm_chip *);
260:	int tpm_is_tpm2(struct tpm_chip *);
314:	int tpm_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
284:	int tpm_pcr_read(struct tpm_chip *, u32, struct tpm_digest *);
425:	int tpm_pm_resume(struct device *);
389:	int tpm_pm_suspend(struct device *);
353:	int tpm_send(struct tpm_chip *, void *, size_t);
153:	ssize_t tpm_transmit(struct tpm_chip *, u8 *, size_t);
213:	ssize_t tpm_transmit_cmd(struct tpm_chip *, struct tpm_buf *, size_t, const char *);
File drivers/char/tpm/tpm-sysfs.c:
477:	void tpm_sysfs_add_device(struct tpm_chip *);
File drivers/char/tpm/tpm1-cmd.c:
704:	int tpm1_auto_startup(struct tpm_chip *);
291:	unsigned long tpm1_calc_ordinal_duration(struct tpm_chip *, u32);
642:	int tpm1_do_selftest(struct tpm_chip *);
800:	int tpm1_get_pcr_allocation(struct tpm_chip *);
530:	int tpm1_get_random(struct tpm_chip *, u8 *, size_t);
342:	int tpm1_get_timeouts(struct tpm_chip *);
482:	ssize_t tpm1_getcap(struct tpm_chip *, u32, cap_t *, const char *, size_t);
463:	int tpm1_pcr_extend(struct tpm_chip *, u32, const u8 *, const char *);
584:	int tpm1_pcr_read(struct tpm_chip *, u32, u8 *);
742:	int tpm1_pm_suspend(struct tpm_chip *, u32);
File drivers/char/tpm/tpm2-cmd.c:
732:	int tpm2_auto_startup(struct tpm_chip *);
128:	unsigned long tpm2_calc_ordinal_duration(struct tpm_chip *, u32);
778:	int tpm2_find_cc(struct tpm_chip *, u32);
348:	void tpm2_flush_context(struct tpm_chip *, u32);
627:	int tpm2_get_cc_attrs_tbl(struct tpm_chip *);
548:	ssize_t tpm2_get_pcr_allocation(struct tpm_chip *);
288:	int tpm2_get_random(struct tpm_chip *, u8 *, size_t);
25:	int tpm2_get_timeouts(struct tpm_chip *);
386:	ssize_t tpm2_get_tpm_pt(struct tpm_chip *, u32, u32 *, const char *);
235:	int tpm2_pcr_extend(struct tpm_chip *, u32, struct tpm_digest *);
161:	int tpm2_pcr_read(struct tpm_chip *, u32, struct tpm_digest *, u16 *);
492:	int tpm2_probe(struct tpm_chip *);
429:	void tpm2_shutdown(struct tpm_chip *, u16);
File drivers/char/tpm/tpm2-space.c:
534:	int tpm2_commit_space(struct tpm_chip *, struct tpm_space *, void *, size_t *);
59:	void tpm2_del_space(struct tpm_chip *, struct tpm_space *);
164:	void tpm2_flush_space(struct tpm_chip *);
41:	int tpm2_init_space(struct tpm_space *, unsigned int);
300:	int tpm2_prepare_space(struct tpm_chip *, struct tpm_space *, u8 *, size_t);
603:	int tpm_devs_add(struct tpm_chip *);
593:	void tpm_devs_remove(struct tpm_chip *);
File drivers/char/tpm/tpm_tis_core.c:
940:	int tpm_tis_core_init(struct device *, struct tpm_tis_data *, int, const struct tpm_tis_phy_ops *, acpi_handle);
850:	void tpm_tis_remove(struct tpm_chip *);
File drivers/char/virtio_console.c:
1212:	int virtio_cons_early_init(int (*)(u32, const char *, int));
File drivers/clk/clk-bulk.c:
211:	void clk_bulk_disable(int, const struct clk_bulk_data *);
227:	int clk_bulk_enable(int, const struct clk_bulk_data *);
114:	int clk_bulk_get(struct device *, int, struct clk_bulk_data *);
139:	int clk_bulk_get_all(struct device *, struct clk_bulk_data **);
121:	int clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
176:	int clk_bulk_prepare(int, const struct clk_bulk_data *);
72:	void clk_bulk_put(int, struct clk_bulk_data *);
128:	void clk_bulk_put_all(int, struct clk_bulk_data *);
161:	void clk_bulk_unprepare(int, const struct clk_bulk_data *);
File drivers/clk/clk-composite.c:
351:	struct clk_hw *clk_hw_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
365:	struct clk_hw *clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
431:	void clk_hw_unregister_composite(struct clk_hw *);
380:	struct clk *clk_register_composite(struct device *, const char *, const char * const *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
398:	struct clk *clk_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
416:	void clk_unregister_composite(struct clk *);
476:	struct clk_hw *devm_clk_hw_register_composite_pdata(struct device *, const char *, const struct clk_parent_data *, int, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, struct clk_hw *, const struct clk_ops *, unsigned long);
File drivers/clk/clk-conf.c:
131:	int of_clk_set_defaults(struct device_node *, bool);
File drivers/clk/clk-devres.c:
140:	int devm_clk_bulk_get(struct device *, int, struct clk_bulk_data *);
161:	int devm_clk_bulk_get_all(struct device *, struct clk_bulk_data **);
147:	int devm_clk_bulk_get_optional(struct device *, int, struct clk_bulk_data *);
63:	struct clk *devm_clk_get(struct device *, const char *);
75:	struct clk *devm_clk_get_enabled(struct device *, const char *);
82:	struct clk *devm_clk_get_optional(struct device *, const char *);
95:	struct clk *devm_clk_get_optional_enabled(struct device *, const char *);
88:	struct clk *devm_clk_get_optional_prepared(struct device *, const char *);
69:	struct clk *devm_clk_get_prepared(struct device *, const char *);
195:	void devm_clk_put(struct device *, struct clk *);
205:	struct clk *devm_get_clk_from_child(struct device *, struct device_node *, const char *);
File drivers/clk/clk-divider.c:
537:	struct clk_hw *__clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
663:	struct clk_hw *__devm_clk_hw_register_divider(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
647:	void clk_hw_unregister_divider(struct clk_hw *);
610:	struct clk *clk_register_divider_table(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, const struct clk_div_table *, spinlock_t *);
627:	void clk_unregister_divider(struct clk *);
346:	int divider_determine_rate(struct clk_hw *, struct clk_rate_request *, const struct clk_div_table *, u8, unsigned long);
470:	int divider_get_val(unsigned long, unsigned long, const struct clk_div_table *, u8, unsigned long);
130:	unsigned long divider_recalc_rate(struct clk_hw *, unsigned long, unsigned int, const struct clk_div_table *, unsigned long, unsigned long);
361:	int divider_ro_determine_rate(struct clk_hw *, struct clk_rate_request *, const struct clk_div_table *, u8, unsigned long, unsigned int);
406:	long divider_ro_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long, unsigned int);
384:	long divider_round_rate_parent(struct clk_hw *, struct clk_hw *, unsigned long, unsigned long *, const struct clk_div_table *, u8, unsigned long);
File drivers/clk/clk-fixed-factor.c:
191:	struct clk_hw *clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
181:	struct clk_hw *clk_hw_register_fixed_factor_parent_hw(struct device *, const char *, const struct clk_hw *, unsigned long, unsigned int, unsigned int);
227:	void clk_hw_unregister_fixed_factor(struct clk_hw *);
200:	struct clk *clk_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
214:	void clk_unregister_fixed_factor(struct clk *);
238:	struct clk_hw *devm_clk_hw_register_fixed_factor(struct device *, const char *, const char *, unsigned long, unsigned int, unsigned int);
150:	struct clk_hw *devm_clk_hw_register_fixed_factor_index(struct device *, const char *, unsigned int, unsigned long, unsigned int, unsigned int);
172:	struct clk_hw *devm_clk_hw_register_fixed_factor_parent_hw(struct device *, const char *, const struct clk_hw *, unsigned long, unsigned int, unsigned int);
293:	void of_fixed_factor_clk_setup(struct device_node *);
File drivers/clk/clk-fixed-rate.c:
64:	struct clk_hw *__clk_hw_register_fixed_rate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, unsigned long, unsigned long, unsigned long, bool);
148:	void clk_hw_unregister_fixed_rate(struct clk_hw *);
121:	struct clk *clk_register_fixed_rate(struct device *, const char *, const char *, unsigned long, unsigned long);
135:	void clk_unregister_fixed_rate(struct clk *);
193:	void of_fixed_clk_setup(struct device_node *);
File drivers/clk/clk-fractional-divider.c:
116:	void clk_fractional_divider_general_approximation(struct clk_hw *, unsigned long, unsigned long *, unsigned long *, unsigned long *);
240:	struct clk_hw *clk_hw_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
298:	void clk_hw_unregister_fractional_divider(struct clk_hw *);
282:	struct clk *clk_register_fractional_divider(struct device *, const char *, const char *, unsigned long, void *, u8, u8, u8, u8, u8, spinlock_t *);
File drivers/clk/clk-gate.c:
127:	struct clk_hw *__clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
232:	struct clk_hw *__devm_clk_hw_register_gate(struct device *, struct device_node *, const char *, const char *, const struct clk_hw *, const struct clk_parent_data *, unsigned long, void *, u8, u8, spinlock_t *);
103:	int clk_gate_is_enabled(struct clk_hw *);
216:	void clk_hw_unregister_gate(struct clk_hw *);
185:	struct clk *clk_register_gate(struct device *, const char *, const char *, unsigned long, void *, u8, u8, spinlock_t *);
200:	void clk_unregister_gate(struct clk *);
File drivers/clk/clk-mux.c:
149:	struct clk_hw *__clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
215:	struct clk_hw *__devm_clk_hw_register_mux(struct device *, struct device_node *, const char *, u8, const char * const *, const struct clk_hw **, const struct clk_parent_data *, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
276:	void clk_hw_unregister_mux(struct clk_hw *);
70:	unsigned int clk_mux_index_to_val(const u32 *, unsigned int, u8);
43:	int clk_mux_val_to_index(struct clk_hw *, const u32 *, unsigned int, unsigned int);
244:	struct clk *clk_register_mux_table(struct device *, const char *, const char * const *, u8, unsigned long, void *, u8, u32, u8, const u32 *, spinlock_t *);
260:	void clk_unregister_mux(struct clk *);
File drivers/clk/clk.c:
1590:	int __clk_determine_rate(struct clk_hw *, struct clk_rate_request *);
462:	unsigned int __clk_get_enable_count(struct clk *);
269:	struct clk_hw *__clk_get_hw(struct clk *);
257:	const char *__clk_get_name(const struct clk *);
521:	bool __clk_is_enabled(struct clk *);
672:	struct clk *__clk_lookup(const char *);
750:	int __clk_mux_determine_rate(struct clk_hw *, struct clk_rate_request *);
757:	int __clk_mux_determine_rate_closest(struct clk_hw *, struct clk_rate_request *);
4518:	void __clk_put(struct clk *);
1089:	void clk_disable(struct clk *);
1254:	int clk_enable(struct clk *);
1156:	void clk_gate_restore_context(struct clk_hw *);
1760:	long clk_get_accuracy(struct clk *);
2650:	struct clk *clk_get_parent(struct clk *);
2920:	int clk_get_phase(struct clk *);
1846:	unsigned long clk_get_rate(struct clk *);
3092:	int clk_get_scaled_duty_cycle(struct clk *, unsigned int);
2702:	bool clk_has_parent(const struct clk *, const struct clk *);
3954:	struct clk *clk_hw_create_clk(struct device *, struct clk_hw *, const char *, const char *);
1526:	void clk_hw_forward_rate_request(const struct clk_hw *, const struct clk_rate_request *, const struct clk_hw *, struct clk_rate_request *, unsigned long);
3991:	struct clk *clk_hw_get_clk(struct clk_hw *, const char *);
497:	unsigned long clk_hw_get_flags(const struct clk_hw *);
263:	const char *clk_hw_get_name(const struct clk_hw *);
275:	unsigned int clk_hw_get_num_parents(const struct clk_hw *);
281:	struct clk_hw *clk_hw_get_parent(const struct clk_hw *);
452:	struct clk_hw *clk_hw_get_parent_by_index(const struct clk_hw *, unsigned int);
1911:	int clk_hw_get_parent_index(struct clk_hw *);
483:	unsigned long clk_hw_get_rate(const struct clk_hw *);
706:	void clk_hw_get_rate_range(struct clk_hw *, unsigned long *, unsigned long *);
1504:	void clk_hw_init_rate_request(const struct clk_hw *, struct clk_rate_request *, unsigned long);
515:	bool clk_hw_is_enabled(const struct clk_hw *);
503:	bool clk_hw_is_prepared(const struct clk_hw *);
509:	bool clk_hw_rate_is_protected(const struct clk_hw *);
4229:	int clk_hw_register(struct device *, struct clk_hw *);
2684:	void clk_hw_reparent(struct clk_hw *, struct clk_hw *);
1616:	unsigned long clk_hw_round_rate(struct clk_hw *, unsigned long);
2777:	int clk_hw_set_parent(struct clk_hw *, struct clk_hw *);
731:	void clk_hw_set_rate_range(struct clk_hw *, unsigned long, unsigned long);
4394:	void clk_hw_unregister(struct clk_hw *);
1278:	bool clk_is_enabled_when_prepared(struct clk *);
3112:	bool clk_is_match(const struct clk *, const struct clk *);
586:	int clk_mux_determine_rate_flags(struct clk_hw *, struct clk_rate_request *, unsigned long);
4577:	int clk_notifier_register(struct clk *, struct notifier_block *);
4625:	int clk_notifier_unregister(struct clk *, struct notifier_block *);
1032:	int clk_prepare(struct clk *);
886:	int clk_rate_exclusive_get(struct clk *);
820:	void clk_rate_exclusive_put(struct clk *);
4213:	struct clk *clk_register(struct device *, struct clk_hw *);
1229:	void clk_restore_context(void);
1644:	long clk_round_rate(struct clk *, unsigned long);
1202:	int clk_save_context(void);
3036:	int clk_set_duty_cycle(struct clk *, unsigned int, unsigned int);
2633:	int clk_set_max_rate(struct clk *, unsigned long);
2615:	int clk_set_min_rate(struct clk *, unsigned long);
2800:	int clk_set_parent(struct clk *, struct clk *);
2869:	int clk_set_phase(struct clk *, int);
2441:	int clk_set_rate(struct clk *, unsigned long);
2484:	int clk_set_rate_exclusive(struct clk *, unsigned long);
2591:	int clk_set_rate_range(struct clk *, unsigned long, unsigned long);
951:	void clk_unprepare(struct clk *);
4332:	void clk_unregister(struct clk *);
4486:	struct clk *devm_clk_hw_get_clk(struct device *, struct clk_hw *, const char *);
4450:	int devm_clk_hw_register(struct device *, struct clk_hw *);
4669:	int devm_clk_notifier_register(struct device *, struct clk *, struct notifier_block *);
4420:	struct clk *devm_clk_register(struct device *, struct clk_hw *);
4893:	int devm_of_clk_add_hw_provider(struct device *, struct clk_hw *(*)(struct of_phandle_args *, void *), void *);
4819:	int of_clk_add_hw_provider(struct device_node *, struct clk_hw *(*)(struct of_phandle_args *, void *), void *);
4777:	int of_clk_add_provider(struct device_node *, struct clk *(*)(struct of_phandle_args *, void *), void *);
4923:	void of_clk_del_provider(struct device_node *);
5279:	int of_clk_detect_critical(struct device_node *, int, unsigned long *);
5097:	struct clk *of_clk_get(struct device_node *, int);
5112:	struct clk *of_clk_get_by_name(struct device_node *, const char *);
5063:	struct clk *of_clk_get_from_provider(struct of_phandle_args *);
5071:	struct clk_hw *of_clk_get_hw(struct device_node *, int, const char *);
5127:	unsigned int of_clk_get_parent_count(const struct device_node *);
5139:	const char *of_clk_get_parent_name(const struct device_node *, int);
4755:	struct clk_hw *of_clk_hw_onecell_get(struct of_phandle_args *, void *);
4247:	int of_clk_hw_register(struct device_node *, struct clk_hw *);
4734:	struct clk_hw *of_clk_hw_simple_get(struct of_phandle_args *, void *);
5304:	void of_clk_init(const struct of_device_id *);
5208:	int of_clk_parent_fill(struct device_node *, const char **, unsigned int);
4740:	struct clk *of_clk_src_onecell_get(struct of_phandle_args *, void *);
4727:	struct clk *of_clk_src_simple_get(struct of_phandle_args *, void *);
File drivers/clk/clkdev.c:
239:	int clk_add_alias(const char *, const char *, const char *, struct device *);
72:	struct clk_hw *clk_find_hw(const char *, const char *);
100:	struct clk *clk_get(struct device *, const char *);
94:	struct clk *clk_get_sys(const char *, const char *);
340:	int clk_hw_register_clkdev(struct clk_hw *, const char *, const char *);
115:	void clk_put(struct clk *);
313:	int clk_register_clkdev(struct clk *, const char *, const char *);
128:	void clkdev_add(struct clk_lookup *);
136:	void clkdev_add_table(struct clk_lookup *, size_t);
202:	struct clk_lookup *clkdev_create(struct clk *, const char *, const char *, ...);
259:	void clkdev_drop(struct clk_lookup *);
225:	struct clk_lookup *clkdev_hw_create(struct clk_hw *, const char *, const char *, ...);
369:	int devm_clk_hw_register_clkdev(struct device *, struct clk_hw *, const char *, const char *);
File drivers/clocksource/arm_arch_timer.c:
1053:	bool arch_timer_evtstrm_available(void);
1070:	struct arch_timer_kvm_info *arch_timer_get_kvm_info(void);
1048:	u32 arch_timer_get_rate(void);
1754:	int kvm_arch_ptp_get_crosststamp(u64 *, struct timespec64 *, struct clocksource **);
File drivers/clocksource/timer-of.c:
220:	void timer_of_cleanup(struct timer_of *);
168:	int timer_of_init(struct device_node *, struct timer_of *);
File drivers/clocksource/timer-probe.c:
16:	void timer_probe(void);
File drivers/clocksource/timer-ti-dm.c:
719:	u32 omap_dm_timer_modify_idlect_mask(__u32);
File drivers/dma-buf/dma-buf.c:
980:	struct dma_buf_attachment *dma_buf_attach(struct dma_buf *, struct device *);
1396:	int dma_buf_begin_cpu_access(struct dma_buf *, enum dma_data_direction);
1006:	void dma_buf_detach(struct dma_buf *, struct dma_buf_attachment *);
894:	struct dma_buf_attachment *dma_buf_dynamic_attach(struct dma_buf *, struct device *, const struct dma_buf_attach_ops *, void *);
1432:	int dma_buf_end_cpu_access(struct dma_buf *, enum dma_data_direction);
613:	struct dma_buf *dma_buf_export(const struct dma_buf_export_info *);
705:	int dma_buf_fd(struct dma_buf *, int);
730:	struct dma_buf *dma_buf_get(int);
1103:	struct sg_table *dma_buf_map_attachment(struct dma_buf_attachment *, enum dma_data_direction);
1180:	struct sg_table *dma_buf_map_attachment_unlocked(struct dma_buf_attachment *, enum dma_data_direction);
1463:	int dma_buf_mmap(struct dma_buf *, struct vm_area_struct *, unsigned long);
1263:	void dma_buf_move_notify(struct dma_buf *);
1045:	int dma_buf_pin(struct dma_buf_attachment *);
758:	void dma_buf_put(struct dma_buf *);
1208:	void dma_buf_unmap_attachment(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
1240:	void dma_buf_unmap_attachment_unlocked(struct dma_buf_attachment *, struct sg_table *, enum dma_data_direction);
1069:	void dma_buf_unpin(struct dma_buf_attachment *);
1512:	int dma_buf_vmap(struct dma_buf *, struct iosys_map *);
1559:	int dma_buf_vmap_unlocked(struct dma_buf *, struct iosys_map *);
1581:	void dma_buf_vunmap(struct dma_buf *, struct iosys_map *);
1605:	void dma_buf_vunmap_unlocked(struct dma_buf *, struct iosys_map *);
File drivers/dma-buf/dma-fence-array.c:
154:	struct dma_fence_array *dma_fence_array_create(int, struct dma_fence **, u64, unsigned int, bool);
225:	struct dma_fence *dma_fence_array_first(struct dma_fence *);
243:	struct dma_fence *dma_fence_array_next(struct dma_fence *, unsigned int);
208:	bool dma_fence_match_context(struct dma_fence *, u64);
File drivers/dma-buf/dma-fence-chain.c:
90:	int dma_fence_chain_find_seqno(struct dma_fence **, uint64_t);
229:	void dma_fence_chain_init(struct dma_fence_chain *, struct dma_fence *, struct dma_fence *, uint64_t);
39:	struct dma_fence *dma_fence_chain_walk(struct dma_fence *);
File drivers/dma-buf/dma-fence-unwrap.c:
63:	struct dma_fence *__dma_fence_unwrap_merge(unsigned int, struct dma_fence **, struct dma_fence_unwrap *);
33:	struct dma_fence *dma_fence_unwrap_first(struct dma_fence *, struct dma_fence_unwrap *);
48:	struct dma_fence *dma_fence_unwrap_next(struct dma_fence_unwrap *);
File drivers/dma-buf/dma-fence.c:
642:	int dma_fence_add_callback(struct dma_fence *, struct dma_fence_cb *, dma_fence_func_t);
156:	struct dma_fence *dma_fence_allocate_private_stub(void);
186:	u64 dma_fence_context_alloc(unsigned int);
760:	long dma_fence_default_wait(struct dma_fence *, bool, long);
922:	void dma_fence_describe(struct dma_fence *, struct seq_file *);
610:	void dma_fence_enable_sw_signaling(struct dma_fence *);
572:	void dma_fence_free(struct dma_fence *);
684:	int dma_fence_get_status(struct dma_fence *);
131:	struct dma_fence *dma_fence_get_stub(void);
947:	void dma_fence_init(struct dma_fence *, const struct dma_fence_ops *, spinlock_t *, u64, u64);
530:	void dma_fence_release(struct kref *);
716:	bool dma_fence_remove_callback(struct dma_fence *, struct dma_fence_cb *);
460:	int dma_fence_signal(struct dma_fence *);
441:	int dma_fence_signal_locked(struct dma_fence *);
409:	int dma_fence_signal_timestamp(struct dma_fence *, ktime_t);
366:	int dma_fence_signal_timestamp_locked(struct dma_fence *, ktime_t);
847:	long dma_fence_wait_any_timeout(struct dma_fence **, uint32_t, bool, long, uint32_t *);
500:	long dma_fence_wait_timeout(struct dma_fence *, bool, long);
File drivers/dma-buf/dma-resv.c:
280:	void dma_resv_add_fence(struct dma_resv *, struct dma_fence *, enum dma_resv_usage);
513:	int dma_resv_copy_fences(struct dma_resv *, struct dma_resv *);
724:	void dma_resv_describe(struct dma_resv *, struct seq_file *);
150:	void dma_resv_fini(struct dma_resv *);
561:	int dma_resv_get_fences(struct dma_resv *, enum dma_resv_usage, unsigned int *, struct dma_fence ***);
614:	int dma_resv_get_singleton(struct dma_resv *, enum dma_resv_usage, struct dma_fence **);
138:	void dma_resv_init(struct dma_resv *);
463:	struct dma_fence *dma_resv_iter_first(struct dma_resv_iter *);
412:	struct dma_fence *dma_resv_iter_first_unlocked(struct dma_resv_iter *);
485:	struct dma_fence *dma_resv_iter_next(struct dma_resv_iter *);
435:	struct dma_fence *dma_resv_iter_next_unlocked(struct dma_resv_iter *);
335:	void dma_resv_replace_fences(struct dma_resv *, uint64_t, struct dma_fence *, enum dma_resv_usage);
182:	int dma_resv_reserve_fences(struct dma_resv *, unsigned int);
701:	bool dma_resv_test_signaled(struct dma_resv *, enum dma_resv_usage);
665:	long dma_resv_wait_timeout(struct dma_resv *, enum dma_resv_usage, bool, unsigned long);
File drivers/dma-buf/sync_file.c:
65:	struct sync_file *sync_file_create(struct dma_fence *);
103:	struct dma_fence *sync_file_get_fence(int);
132:	char *sync_file_get_name(struct sync_file *, char *, int);
File drivers/extcon/devres.c:
65:	struct extcon_dev *devm_extcon_dev_allocate(struct device *, const unsigned int *);
97:	void devm_extcon_dev_free(struct device *, struct extcon_dev *);
118:	int devm_extcon_dev_register(struct device *, struct extcon_dev *);
148:	void devm_extcon_dev_unregister(struct device *, struct extcon_dev *);
172:	int devm_extcon_register_notifier(struct device *, struct extcon_dev *, unsigned int, struct notifier_block *);
228:	int devm_extcon_register_notifier_all(struct device *, struct extcon_dev *, struct notifier_block *);
206:	void devm_extcon_unregister_notifier(struct device *, struct extcon_dev *, unsigned int, struct notifier_block *);
260:	void devm_extcon_unregister_notifier_all(struct device *, struct extcon_dev *, struct notifier_block *);
File drivers/extcon/extcon.c:
1045:	struct extcon_dev *extcon_dev_allocate(const unsigned int *);
1066:	void extcon_dev_free(struct extcon_dev *);
1086:	int extcon_dev_register(struct extcon_dev *);
1298:	void extcon_dev_unregister(struct extcon_dev *);
1346:	struct extcon_dev *extcon_find_edev_by_node(struct device_node *);
1368:	struct extcon_dev *extcon_get_edev_by_phandle(struct device *, int);
1415:	const char *extcon_get_edev_name(struct extcon_dev *);
871:	struct extcon_dev *extcon_get_extcon_dev(const char *);
614:	int extcon_get_property(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value *);
784:	int extcon_get_property_capability(struct extcon_dev *, unsigned int, unsigned int);
500:	int extcon_get_state(struct extcon_dev *, const unsigned int);
903:	int extcon_register_notifier(struct extcon_dev *, unsigned int, struct notifier_block *);
965:	int extcon_register_notifier_all(struct extcon_dev *, struct notifier_block *);
693:	int extcon_set_property(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value);
818:	int extcon_set_property_capability(struct extcon_dev *, unsigned int, unsigned int);
761:	int extcon_set_property_sync(struct extcon_dev *, unsigned int, unsigned int, union extcon_property_value);
533:	int extcon_set_state(struct extcon_dev *, unsigned int, bool);
588:	int extcon_set_state_sync(struct extcon_dev *, unsigned int, bool);
419:	int extcon_sync(struct extcon_dev *, unsigned int);
932:	int extcon_unregister_notifier(struct extcon_dev *, unsigned int, struct notifier_block *);
989:	int extcon_unregister_notifier_all(struct extcon_dev *, struct notifier_block *);
File drivers/firmware/arm_scmi/base.c:
428:	int scmi_base_register(void);
428:	void scmi_base_unregister(void);
File drivers/firmware/arm_scmi/bus.c:
301:	void scmi_bus_exit(void);
290:	int scmi_bus_init(void);
63:	struct scmi_device *scmi_child_dev_find(struct device *, int, const char *);
168:	struct scmi_device *scmi_device_create(struct device_node *, struct device *, int, const char *);
211:	void scmi_device_destroy(struct scmi_device *);
219:	void scmi_device_link_add(struct device *, struct device *);
130:	int scmi_driver_register(struct scmi_driver *, struct module *, const char *);
155:	void scmi_driver_unregister(struct scmi_driver *);
79:	const struct scmi_protocol *scmi_protocol_get(int);
94:	void scmi_protocol_put(int);
235:	int scmi_protocol_register(const struct scmi_protocol *);
265:	void scmi_protocol_unregister(const struct scmi_protocol *);
228:	void scmi_set_handle(struct scmi_device *);
File drivers/firmware/arm_scmi/clock.c:
619:	int scmi_clock_register(void);
619:	void scmi_clock_unregister(void);
File drivers/firmware/arm_scmi/driver.c:
2484:	void scmi_free_channel(struct scmi_chan_info *, struct idr *, int);
1850:	struct scmi_handle *scmi_handle_get(struct device *);
1881:	int scmi_handle_put(const struct scmi_handle *);
207:	void *scmi_notification_instance_data_get(const struct scmi_handle *);
197:	void scmi_notification_instance_data_set(const struct scmi_handle *, void *);
1611:	int scmi_protocol_acquire(const struct scmi_handle *, u8);
2190:	int scmi_protocol_device_request(const struct scmi_device_id *);
2321:	void scmi_protocol_device_unrequest(const struct scmi_device_id *);
1624:	void scmi_protocol_release(const struct scmi_handle *, u8);
1473:	struct scmi_revision_info *scmi_revision_area_get(const struct scmi_protocol_handle *);
741:	void scmi_rx_callback(struct scmi_chan_info *, u32, void *);
1656:	void scmi_setup_protocol_implemented(const struct scmi_protocol_handle *, u8 *);
File drivers/firmware/arm_scmi/notify.c:
839:	void scmi_deregister_protocol_events(const struct scmi_handle *, u8);
1699:	void scmi_notification_exit(struct scmi_handle *);
1646:	int scmi_notification_init(struct scmi_handle *);
578:	int scmi_notify(const struct scmi_handle *, u8, u8, const void *, size_t, ktime_t);
748:	int scmi_register_protocol_events(const struct scmi_handle *, u8, const struct scmi_protocol_handle *, const struct scmi_protocol_events *);
File drivers/firmware/arm_scmi/perf.c:
854:	int scmi_perf_register(void);
854:	void scmi_perf_unregister(void);
File drivers/firmware/arm_scmi/power.c:
342:	int scmi_power_register(void);
342:	void scmi_power_unregister(void);
File drivers/firmware/arm_scmi/powercap.c:
866:	int scmi_powercap_register(void);
866:	void scmi_powercap_unregister(void);
File drivers/firmware/arm_scmi/reset.c:
356:	int scmi_reset_register(void);
356:	void scmi_reset_unregister(void);
File drivers/firmware/arm_scmi/sensors.c:
1152:	int scmi_sensors_register(void);
1152:	void scmi_sensors_unregister(void);
File drivers/firmware/arm_scmi/shmem.c:
106:	void shmem_clear_channel(struct scmi_shared_mem *);
94:	void shmem_fetch_notification(struct scmi_shared_mem *, size_t, struct scmi_xfer *);
81:	void shmem_fetch_response(struct scmi_shared_mem *, struct scmi_xfer *);
111:	bool shmem_poll_done(struct scmi_shared_mem *, struct scmi_xfer *);
76:	u32 shmem_read_header(struct scmi_shared_mem *);
35:	void shmem_tx_prepare(struct scmi_shared_mem *, struct scmi_xfer *, struct scmi_chan_info *);
File drivers/firmware/arm_scmi/system.c:
158:	int scmi_system_register(void);
158:	void scmi_system_unregister(void);
File drivers/firmware/arm_scmi/voltage.c:
445:	int scmi_voltage_register(void);
445:	void scmi_voltage_unregister(void);
File drivers/firmware/psci/psci.c:
65:	struct psci_0_1_function_ids get_psci_0_1_function_ids(void);
732:	int psci_dt_init(void);
88:	bool psci_has_osi_support(void);
102:	bool psci_power_state_is_valid(u32);
158:	int psci_set_osi_mode(bool);
54:	bool psci_tos_resident_on(int);
File drivers/firmware/smccc/kvm_guest.c:
44:	bool kvm_arm_hyp_service_available(u32);
15:	void kvm_init_hyp_services(void);
File drivers/firmware/smccc/smccc.c:
32:	enum arm_smccc_conduit arm_smccc_1_1_get_conduit(void);
41:	u32 arm_smccc_get_version(void);
21:	void arm_smccc_version_init(u32, enum arm_smccc_conduit);
File drivers/firmware/ti_sci.c:
3058:	const struct ti_sci_handle *devm_ti_sci_get_by_phandle(struct device *, const char *);
2976:	const struct ti_sci_handle *devm_ti_sci_get_handle(struct device *);
3227:	struct ti_sci_resource *devm_ti_sci_get_of_resource(const struct ti_sci_handle *, struct device *, u32, char *);
3265:	struct ti_sci_resource *devm_ti_sci_get_resource(const struct ti_sci_handle *, struct device *, u32, u32);
3010:	const struct ti_sci_handle *ti_sci_get_by_phandle(struct device_node *, const char *);
3086:	u16 ti_sci_get_free_resource(struct ti_sci_resource *);
2887:	const struct ti_sci_handle *ti_sci_get_handle(struct device *);
3144:	u32 ti_sci_get_num_resources(struct ti_sci_resource *);
2935:	int ti_sci_put_handle(const struct ti_sci_handle *);
3118:	void ti_sci_release_resource(struct ti_sci_resource *, u16);
File drivers/hid/hid-core.c:
2858:	int __hid_register_driver(struct hid_driver *, struct module *, const char *);
1926:	int __hid_request(struct hid_device *, struct hid_report *, enum hid_class_request);
2702:	int hid_add_device(struct hid_device *);
1859:	u8 *hid_alloc_report_buf(struct hid_report *, gfp_t);
2774:	struct hid_device *hid_allocate_device(void);
2890:	int hid_check_keys_pressed(struct hid_device *);
2547:	bool hid_compare_device_paths(struct hid_device *, struct hid_device *, char);
2148:	int hid_connect(struct hid_device *, unsigned int);
2820:	void hid_destroy_device(struct hid_device *);
2251:	void hid_disconnect(struct hid_device *);
1380:	__u32 hid_field_extract(const struct hid_device *, u8 *, unsigned int, unsigned int);
2343:	void hid_hw_close(struct hid_device *);
2315:	int hid_hw_open(struct hid_device *);
2404:	int hid_hw_output_report(struct hid_device *, __u8 *, size_t);
2383:	int hid_hw_raw_request(struct hid_device *, unsigned char, __u8 *, size_t, enum hid_report_type, enum hid_class_request);
2359:	void hid_hw_request(struct hid_device *, struct hid_report *, enum hid_class_request);
2273:	int hid_hw_start(struct hid_device *, unsigned int);
2300:	void hid_hw_stop(struct hid_device *);
2025:	int hid_input_report(struct hid_device *, enum hid_report_type, u8 *, u32, int);
2511:	const struct hid_device_id *hid_match_device(struct hid_device *, struct hid_driver *);
2086:	const struct hid_device_id *hid_match_id(const struct hid_device *, const struct hid_device_id *);
2077:	bool hid_match_one_id(const struct hid_device *, const struct hid_device_id *);
1195:	int hid_open_report(struct hid_device *);
1843:	void hid_output_report(struct hid_report *, __u8 *);
942:	int hid_parse_report(struct hid_device *, __u8 *, unsigned int);
57:	struct hid_report *hid_register_report(struct hid_device *, enum hid_report_type, unsigned int, unsigned int);
1960:	int hid_report_raw_event(struct hid_device *, enum hid_report_type, u8 *, u32, int);
1878:	int hid_set_field(struct hid_field *, unsigned int, __s32);
1158:	void hid_setup_resolution_multiplier(struct hid_device *);
1329:	s32 hid_snto32(__u32, unsigned int);
2881:	void hid_unregister_driver(struct hid_driver *);
969:	struct hid_report *hid_validate_values(struct hid_device *, enum hid_report_type, unsigned int, unsigned int, unsigned int);
File drivers/hid/hid-input.c:
246:	__s32 hidinput_calc_abs_res(const struct hid_field *, __u16);
2194:	int hidinput_connect(struct hid_device *, unsigned int);
1707:	unsigned int hidinput_count_leds(struct hid_device *);
2297:	void hidinput_disconnect(struct hid_device *);
1687:	struct hid_field *hidinput_get_led_field(struct hid_device *);
1454:	void hidinput_hid_event(struct hid_device *, struct hid_field *, struct hid_usage *, __s32);
1658:	void hidinput_report_event(struct hid_device *, struct hid_report *);
File drivers/hid/hid-quirks.c:
959:	bool hid_ignore(struct hid_device *);
1266:	unsigned long hid_lookup_quirk(const struct hid_device *);
1220:	void hid_quirks_exit(__u16);
1181:	int hid_quirks_init(char **, __u16, int);
File drivers/i2c/busses/i2c-designware-common.c:
442:	void __i2c_dw_disable(struct dw_i2c_dev *);
503:	int i2c_dw_acquire_lock(struct dw_i2c_dev *);
317:	void i2c_dw_adjust_bus_speed(struct dw_i2c_dev *);
468:	unsigned long i2c_dw_clk_rate(struct dw_i2c_dev *);
612:	void i2c_dw_disable(struct dw_i2c_dev *);
605:	u32 i2c_dw_func(struct i2c_adapter *);
549:	int i2c_dw_handle_tx_abort(struct dw_i2c_dev *);
126:	int i2c_dw_init_regmap(struct dw_i2c_dev *);
479:	int i2c_dw_prepare_clk(struct dw_i2c_dev *, bool);
519:	void i2c_dw_release_lock(struct dw_i2c_dev *);
335:	u32 i2c_dw_scl_hcnt(u32, u32, u32, int, int);
375:	u32 i2c_dw_scl_lcnt(u32, u32, u32, int);
572:	int i2c_dw_set_fifo_size(struct dw_i2c_dev *);
392:	int i2c_dw_set_sda_hold(struct dw_i2c_dev *);
191:	int i2c_dw_validate_speed(struct dw_i2c_dev *);
528:	int i2c_dw_wait_bus_not_busy(struct dw_i2c_dev *);
File drivers/i2c/busses/i2c-designware-master.c:
780:	void i2c_dw_configure_master(struct dw_i2c_dev *);
864:	int i2c_dw_probe_master(struct dw_i2c_dev *);
File drivers/i2c/i2c-boardinfo.c:
51:	int i2c_register_board_info(int, const struct i2c_board_info *, unsigned int);
File drivers/i2c/i2c-core-base.c:
2074:	int __i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
1752:	int devm_i2c_add_adapter(struct device *, struct i2c_adapter *);
1075:	struct i2c_client *devm_i2c_new_dummy_device(struct device *, struct i2c_adapter *, u16);
1145:	unsigned int i2c_adapter_depth(struct i2c_adapter *);
1559:	int i2c_add_adapter(struct i2c_adapter *);
1608:	int i2c_add_numbered_adapter(struct i2c_adapter *);
747:	int i2c_check_7bit_addr_validity_strict(unsigned short);
2245:	const struct i2c_device_id *i2c_client_get_device_id(const struct i2c_client *);
1917:	void i2c_clients_command(struct i2c_adapter *, unsigned int, void *);
1663:	void i2c_del_adapter(struct i2c_adapter *);
1886:	void i2c_del_driver(struct i2c_driver *);
874:	int i2c_dev_irq_from_resources(const struct resource *, unsigned int);
1821:	int i2c_for_each_dev(void *, int (*)(struct device *, void *));
80:	const char *i2c_freq_mode_string(u32);
200:	int i2c_generic_scl_recovery(struct i2c_adapter *);
2453:	struct i2c_adapter *i2c_get_adapter(int);
2215:	int i2c_get_device_id(const struct i2c_client *, struct i2c_device_identity *);
2496:	u8 *i2c_get_dma_safe_msg_buf(struct i2c_msg *, unsigned int);
1410:	int i2c_handle_smbus_host_notify(struct i2c_adapter *, unsigned short);
101:	const struct i2c_device_id *i2c_match_id(const struct i2c_device_id *, const struct i2c_client *);
1116:	struct i2c_client *i2c_new_ancillary_device(struct i2c_client *, const char *, u16);
917:	struct i2c_client *i2c_new_client_device(struct i2c_adapter *, const struct i2c_board_info *);
1050:	struct i2c_client *i2c_new_dummy_device(struct i2c_adapter *, u16);
2412:	struct i2c_client *i2c_new_scanned_device(struct i2c_adapter *, struct i2c_board_info *, const unsigned short *, int (*)(struct i2c_adapter *, unsigned short));
1792:	void i2c_parse_fw_timings(struct device *, struct i2c_timings *, bool);
2404:	int i2c_probe_func_quick_read(struct i2c_adapter *, unsigned short);
2473:	void i2c_put_adapter(struct i2c_adapter *);
2524:	void i2c_put_dma_safe_msg_buf(u8 *, struct i2c_msg *, bool);
271:	int i2c_recover_bus(struct i2c_adapter *);
1845:	int i2c_register_driver(struct module *, struct i2c_driver *);
2141:	int i2c_transfer(struct i2c_adapter *, struct i2c_msg *, int);
2187:	int i2c_transfer_buffer_flags(const struct i2c_client *, char *, int, u16);
69:	int i2c_transfer_trace_reg(void);
75:	void i2c_transfer_trace_unreg(void);
998:	void i2c_unregister_device(struct i2c_client *);
1307:	struct i2c_adapter *i2c_verify_adapter(struct device *);
703:	struct i2c_client *i2c_verify_client(struct device *);
File drivers/i2c/i2c-core-of.c:
212:	const struct of_device_id *i2c_of_match_device(const struct of_device_id *, struct i2c_client *);
146:	struct i2c_adapter *of_find_i2c_adapter_by_node(struct device_node *);
128:	struct i2c_client *of_find_i2c_device_by_node(struct device_node *);
165:	struct i2c_adapter *of_get_i2c_adapter_by_node(struct device_node *);
22:	int of_i2c_get_board_info(struct device *, struct device_node *, struct i2c_board_info *);
85:	void of_i2c_register_devices(struct i2c_adapter *);
File drivers/i2c/i2c-core-slave.c:
109:	bool i2c_detect_slave_mode(struct device *);
85:	int i2c_slave_event(struct i2c_client *, enum i2c_slave_event, u8 *);
20:	int i2c_slave_register(struct i2c_client *, i2c_slave_cb_t);
60:	int i2c_slave_unregister(struct i2c_client *);
File drivers/i2c/i2c-core-smbus.c:
553:	s32 __i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
693:	struct i2c_client *i2c_new_smbus_alert_device(struct i2c_adapter *, struct i2c_smbus_alert_setup *);
49:	u8 i2c_smbus_pec(u8, u8 *, size_t);
224:	s32 i2c_smbus_read_block_data(const struct i2c_client *, u8, u8 *);
102:	s32 i2c_smbus_read_byte(const struct i2c_client *);
137:	s32 i2c_smbus_read_byte_data(const struct i2c_client *, u8);
267:	s32 i2c_smbus_read_i2c_block_data(const struct i2c_client *, u8, u8, u8 *);
640:	s32 i2c_smbus_read_i2c_block_data_or_emulated(const struct i2c_client *, u8, u8, u8 *);
177:	s32 i2c_smbus_read_word_data(const struct i2c_client *, u8);
251:	s32 i2c_smbus_write_block_data(const struct i2c_client *, u8, u8, const u8 *);
122:	s32 i2c_smbus_write_byte(const struct i2c_client *, u8);
158:	s32 i2c_smbus_write_byte_data(const struct i2c_client *, u8, u8);
287:	s32 i2c_smbus_write_i2c_block_data(const struct i2c_client *, u8, u8, const u8 *);
198:	s32 i2c_smbus_write_word_data(const struct i2c_client *, u8, u16);
535:	s32 i2c_smbus_xfer(struct i2c_adapter *, u16, unsigned short, char, u8, int, union i2c_smbus_data *);
File drivers/i2c/i2c-mux.c:
283:	int i2c_mux_add_adapter(struct i2c_mux_core *, u32, u32, unsigned int);
239:	struct i2c_mux_core *i2c_mux_alloc(struct i2c_adapter *, struct device *, int, int, u32, int (*)(struct i2c_mux_core *, u32), int (*)(struct i2c_mux_core *, u32));
441:	void i2c_mux_del_adapters(struct i2c_mux_core *);
213:	struct i2c_adapter *i2c_root_adapter(struct device *);
File drivers/input/ff-core.c:
302:	int input_ff_create(struct input_dev *, unsigned int);
362:	void input_ff_destroy(struct input_dev *);
208:	int input_ff_erase(struct input_dev *, int, struct file *);
258:	int input_ff_event(struct input_dev *, unsigned int, unsigned int, int);
233:	int input_ff_flush(struct input_dev *, struct file *);
89:	int input_ff_upload(struct input_dev *, struct ff_effect *, struct file *);
File drivers/input/ff-memless.c:
507:	int input_ff_create_memless(struct input_dev *, void *, int (*)(struct input_dev *, void *, struct ff_effect *));
File drivers/input/input-compat.c:
99:	int input_event_from_user(const char *, struct input_event *);
108:	int input_event_to_user(char *, const struct input_event *);
117:	int input_ff_effect_from_user(const char *, size_t, struct ff_effect *);
File drivers/input/input-mt.c:
480:	int input_mt_assign_slots(struct input_dev *, int *, const struct input_mt_pos *, int, int);
111:	void input_mt_destroy_slots(struct input_dev *);
280:	void input_mt_drop_unused(struct input_dev *);
515:	int input_mt_get_slot_by_key(struct input_dev *, int);
39:	int input_mt_init_slots(struct input_dev *, unsigned int, unsigned int);
303:	void input_mt_release_slots(struct input_dev *);
175:	void input_mt_report_finger_count(struct input_dev *, int);
196:	void input_mt_report_pointer_emulation(struct input_dev *, bool);
135:	bool input_mt_report_slot_state(struct input_dev *, unsigned int, bool);
330:	void input_mt_sync_frame(struct input_dev *);
File drivers/input/input-poller.c:
46:	void input_dev_poller_finalize(struct input_dev_poller *);
54:	void input_dev_poller_start(struct input_dev_poller *);
63:	void input_dev_poller_stop(struct input_dev_poller *);
126:	int input_get_poll_interval(struct input_dev *);
119:	void input_set_max_poll_interval(struct input_dev *, unsigned int);
112:	void input_set_min_poll_interval(struct input_dev *, unsigned int);
105:	void input_set_poll_interval(struct input_dev *, unsigned int);
68:	int input_setup_polling(struct input_dev *, void (*)(struct input_dev *));
File drivers/input/input.c:
2002:	struct input_dev *devm_input_allocate_device(struct device *);
477:	void input_alloc_absinfo(struct input_dev *);
1937:	struct input_dev *input_allocate_device(void);
697:	void input_close_device(struct input_handle *);
528:	void input_copy_abs(struct input_dev *, unsigned int, const struct input_dev *, unsigned int);
2290:	bool input_device_enabled(struct input_dev *);
2282:	void input_enable_softrepeat(struct input_dev *, int, int);
424:	void input_event(struct input_dev *, unsigned int, unsigned int, int);
673:	int input_flush_device(struct input_handle *, struct file *);
2042:	void input_free_device(struct input_dev *);
2654:	void input_free_minor(unsigned int);
931:	int input_get_keycode(struct input_dev *, struct input_keymap_entry *);
2624:	int input_get_new_minor(int, unsigned int, bool);
2084:	ktime_t *input_get_timestamp(struct input_dev *);
560:	int input_grab_device(struct input_handle *);
391:	void input_handle_event(struct input_dev *, unsigned int, unsigned int, int);
2515:	int input_handler_for_each_handle(struct input_handler *, void *, int (*)(struct input_handle *, void *));
449:	void input_inject_event(struct input_handle *, unsigned int, unsigned int, int);
1001:	bool input_match_device_id(const struct input_dev *, const struct input_device_id *);
626:	int input_open_device(struct input_handle *);
2321:	int input_register_device(struct input_dev *);
2546:	int input_register_handle(struct input_handle *);
2455:	int input_register_handler(struct input_handler *);
609:	void input_release_device(struct input_handle *);
1758:	void input_reset_device(struct input_dev *);
789:	int input_scancode_to_scalar(const struct input_keymap_entry *, unsigned int *);
495:	void input_set_abs_params(struct input_dev *, unsigned int, int, int, int, int);
2104:	void input_set_capability(struct input_dev *, unsigned int, unsigned int);
952:	int input_set_keycode(struct input_dev *, const struct input_keymap_entry *);
2069:	void input_set_timestamp(struct input_dev *, ktime_t);
2428:	void input_unregister_device(struct input_dev *);
2596:	void input_unregister_handle(struct input_handle *);
2485:	void input_unregister_handler(struct input_handler *);
File drivers/input/matrix-keymap.c:
150:	int matrix_keypad_build_keymap(const struct matrix_keymap_data *, const char *, unsigned int, unsigned int, unsigned short *, struct input_dev *);
52:	int matrix_keypad_parse_properties(struct device *, unsigned int *, unsigned int *);
File drivers/input/mouse/alps.c:
3173:	int alps_detect(struct psmouse *, bool);
3038:	int alps_init(struct psmouse *);
File drivers/input/mouse/byd.c:
435:	int byd_detect(struct psmouse *, bool);
464:	int byd_init(struct psmouse *);
File drivers/input/mouse/cypress_ps2.c:
201:	int cypress_detect(struct psmouse *, bool);
658:	int cypress_init(struct psmouse *);
File drivers/input/mouse/focaltech.c:
35:	int focaltech_detect(struct psmouse *, bool);
406:	int focaltech_init(struct psmouse *);
File drivers/input/mouse/logips2pp.c:
357:	int ps2pp_detect(struct psmouse *, bool);
File drivers/input/mouse/psmouse-base.c:
1298:	int psmouse_activate(struct psmouse *);
1806:	ssize_t psmouse_attr_set_helper(struct device *, struct device_attribute *, const char *, size_t);
1792:	ssize_t psmouse_attr_show_helper(struct device *, struct device_attribute *, char *);
1314:	int psmouse_deactivate(struct psmouse *);
513:	bool psmouse_matches_pnp_id(struct psmouse *, const char * const *);
147:	psmouse_ret_t psmouse_process_byte(struct psmouse *);
237:	void psmouse_queue_work(struct psmouse *, struct delayed_work *, unsigned long);
119:	void psmouse_report_standard_buttons(struct input_dev *, u8);
126:	void psmouse_report_standard_motion(struct input_dev *, u8 *);
137:	void psmouse_report_standard_packet(struct input_dev *, u8 *);
433:	int psmouse_reset(struct psmouse *);
451:	void psmouse_set_resolution(struct psmouse *, unsigned int);
259:	void psmouse_set_state(struct psmouse *, enum psmouse_state);
File drivers/input/mouse/psmouse-smbus.c:
218:	void psmouse_smbus_cleanup(struct psmouse *);
234:	int psmouse_smbus_init(struct psmouse *, const struct i2c_board_info *, const void *, size_t, bool, bool);
324:	void psmouse_smbus_module_exit(void);
306:	int psmouse_smbus_module_init(void);
File drivers/input/mouse/synaptics.c:
96:	int synaptics_detect(struct psmouse *, bool);
1858:	int synaptics_init(struct psmouse *);
1679:	int synaptics_init_absolute(struct psmouse *);
1684:	int synaptics_init_relative(struct psmouse *);
1819:	int synaptics_init_smbus(struct psmouse *);
1549:	void synaptics_module_init(void);
118:	void synaptics_reset(struct psmouse *);
File drivers/input/mouse/trackpoint.c:
396:	int trackpoint_detect(struct psmouse *, bool);
File drivers/input/serio/libps2.c:
227:	int __ps2_command(struct ps2dev *, u8 *, unsigned int);
102:	void ps2_begin_command(struct ps2dev *);
483:	void ps2_cmd_aborted(struct ps2dev *);
330:	int ps2_command(struct ps2dev *, u8 *, unsigned int);
123:	void ps2_drain(struct ps2dev *, size_t, unsigned int);
110:	void ps2_end_command(struct ps2dev *);
393:	bool ps2_handle_ack(struct ps2dev *, u8);
463:	bool ps2_handle_response(struct ps2dev *, u8);
379:	void ps2_init(struct ps2dev *, struct serio *);
150:	bool ps2_is_keyboard_id(u8);
87:	int ps2_sendbyte(struct ps2dev *, u8, unsigned int);
350:	int ps2_sliced_command(struct ps2dev *, u8);
File drivers/input/serio/serio.c:
810:	int __serio_register_driver(struct serio_driver *, struct module *, const char *);
692:	void __serio_register_port(struct serio *, struct module *);
980:	void serio_close(struct serio *);
989:	irqreturn_t serio_interrupt(struct serio *, unsigned char, unsigned int);
967:	int serio_open(struct serio *, struct serio_driver *);
682:	void serio_reconnect(struct serio *);
676:	void serio_rescan(struct serio *);
714:	void serio_unregister_child_port(struct serio *);
849:	void serio_unregister_driver(struct serio_driver *);
702:	void serio_unregister_port(struct serio *);
File drivers/input/touchscreen.c:
65:	void touchscreen_parse_properties(struct input_dev *, bool, struct touchscreen_properties *);
195:	void touchscreen_report_pos(struct input_dev *, const struct touchscreen_properties *, unsigned int, unsigned int, bool);
173:	void touchscreen_set_mt_pos(struct input_mt_pos *, const struct touchscreen_properties *, unsigned int, unsigned int);
File drivers/input/vivaldi-fmap.c:
19:	ssize_t vivaldi_function_row_physmap_show(const struct vivaldi_data *, char *);
File drivers/irqchip/irq-gic-common.c:
41:	int gic_configure_irq(unsigned int, unsigned int, void *, void (*)(void));
120:	void gic_cpu_config(void *, int, void (*)(void));
87:	void gic_dist_config(void *, int, void (*)(void));
15:	void gic_enable_of_quirks(const struct device_node *, const struct gic_quirk *, void *);
27:	void gic_enable_quirks(u32, const struct gic_quirk *, void *);
File drivers/irqchip/irq-gic-v3-its-platform-msi.c:
41:	int iort_pmsi_get_dev_id(struct device *, u32 *);
File drivers/irqchip/irq-gic-v3-its.c:
5219:	int its_cpu_init(void);
5548:	int its_init(struct fwnode_handle *, struct rdists *, struct irq_domain *);
5525:	int its_lpi_memreserve_init(void);
File drivers/irqchip/irq-gic-v3-mbi.c:
262:	int mbi_init(struct fwnode_handle *, struct irq_domain *);
File drivers/irqchip/irq-gic-v4.c:
93:	bool gic_cpuif_has_vsgi(void);
159:	int its_alloc_vcpu_irqs(struct its_vm *);
286:	int its_commit_vpe(struct its_vpe *);
223:	void its_free_vcpu_irqs(struct its_vm *);
335:	int its_get_vlpi(int, struct its_vlpi_map *);
378:	int its_init_v4(struct irq_domain *, const struct irq_domain_ops *, const struct irq_domain_ops *);
303:	int its_invall_vpe(struct its_vpe *);
236:	int its_make_vpe_non_resident(struct its_vpe *, bool);
263:	int its_make_vpe_resident(struct its_vpe *, bool, bool);
312:	int its_map_vlpi(int, struct its_vlpi_map *);
353:	int its_prop_update_vlpi(int, u8, bool);
365:	int its_prop_update_vsgi(int, u8, bool);
347:	int its_unmap_vlpi(int);
File drivers/irqchip/irq-gic.c:
411:	void gic_cascade_irq(unsigned int, unsigned int);
530:	int gic_cpu_if_down(unsigned int);
1302:	void gic_init(void *, void *);
1520:	int gic_of_init(struct device_node *, struct device_node *);
1468:	int gic_of_init_child(struct device *, struct gic_chip_data **, int);
File drivers/irqchip/irq-partition-percpu.c:
194:	struct partition_desc *partition_create_desc(struct fwnode_handle *, struct partition_affinity *, int, int, const struct irq_domain_ops *);
235:	struct irq_domain *partition_get_domain(struct partition_desc *);
174:	int partition_translate_id(struct partition_desc *, void *);
File drivers/irqchip/irqchip.c:
29:	void irqchip_init(void);
35:	int platform_irqchip_probe(struct platform_device *);
File drivers/mailbox/mailbox.c:
586:	int devm_mbox_controller_register(struct device *, struct mbox_controller *);
620:	void devm_mbox_controller_unregister(struct device *, struct mbox_controller *);
158:	void mbox_chan_received_data(struct mbox_chan *, void *);
176:	void mbox_chan_txdone(struct mbox_chan *, int);
223:	bool mbox_client_peek_data(struct mbox_chan *);
197:	void mbox_client_txdone(struct mbox_chan *, int);
484:	int mbox_controller_register(struct mbox_controller *);
536:	void mbox_controller_unregister(struct mbox_controller *);
305:	int mbox_flush(struct mbox_chan *, unsigned long);
444:	void mbox_free_channel(struct mbox_chan *);
337:	struct mbox_chan *mbox_request_channel(struct mbox_client *, int);
408:	struct mbox_chan *mbox_request_channel_byname(struct mbox_client *, const char *);
256:	int mbox_send_message(struct mbox_chan *, void *);
File drivers/mfd/axp20x.c:
949:	int axp20x_device_probe(struct axp20x_dev *);
1016:	void axp20x_device_remove(struct axp20x_dev *);
841:	int axp20x_match_device(struct axp20x_dev *);
File drivers/mfd/mfd-core.c:
437:	int devm_mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
342:	int mfd_add_devices(struct device *, int, const struct mfd_cell *, int, struct resource *, int, struct irq_domain *);
49:	int mfd_cell_disable(struct platform_device *);
36:	int mfd_cell_enable(struct platform_device *);
407:	void mfd_remove_devices(struct device *);
399:	void mfd_remove_devices_late(struct device *);
File drivers/mfd/mt6358-irq.c:
228:	int mt6358_irq_init(struct mt6397_chip *);
File drivers/mfd/mt6397-irq.c:
160:	int mt6397_irq_init(struct mt6397_chip *);
File drivers/mfd/sec-irq.c:
438:	int sec_irq_init(struct sec_pmic_dev *);
File drivers/mfd/syscon.c:
176:	struct regmap *device_node_to_regmap(struct device_node *);
182:	struct regmap *syscon_node_to_regmap(struct device_node *);
191:	struct regmap *syscon_regmap_lookup_by_compatible(const char *);
207:	struct regmap *syscon_regmap_lookup_by_phandle(struct device_node *, const char *);
228:	struct regmap *syscon_regmap_lookup_by_phandle_args(struct device_node *, const char *, int, unsigned int *);
262:	struct regmap *syscon_regmap_lookup_by_phandle_optional(struct device_node *, const char *);
File drivers/mfd/wm8994-irq.c:
255:	void wm8994_irq_exit(struct wm8994 *);
180:	int wm8994_irq_init(struct wm8994 *);
File drivers/mux/core.c:
237:	struct mux_chip *devm_mux_chip_alloc(struct device *, unsigned int, size_t);
276:	int devm_mux_chip_register(struct device *, struct mux_chip *);
654:	struct mux_control *devm_mux_control_get(struct device *, const char *);
729:	struct mux_state *devm_mux_state_get(struct device *, const char *);
94:	struct mux_chip *mux_chip_alloc(struct device *, unsigned int, size_t);
211:	void mux_chip_free(struct mux_chip *);
165:	int mux_chip_register(struct mux_chip *);
199:	void mux_chip_unregister(struct mux_chip *);
480:	int mux_control_deselect(struct mux_control *);
621:	struct mux_control *mux_control_get(struct device *, const char *);
633:	void mux_control_put(struct mux_control *);
368:	int mux_control_select_delay(struct mux_control *, unsigned int, unsigned int);
305:	unsigned int mux_control_states(struct mux_control *);
428:	int mux_control_try_select_delay(struct mux_control *, unsigned int, unsigned int);
506:	int mux_state_deselect(struct mux_state *);
406:	int mux_state_select_delay(struct mux_state *, unsigned int);
462:	int mux_state_try_select_delay(struct mux_state *, unsigned int);
File drivers/nvmem/core.c:
1314:	struct nvmem_cell *devm_nvmem_cell_get(struct device *, const char *);
1351:	void devm_nvmem_cell_put(struct device *, struct nvmem_cell *);
1105:	struct nvmem_device *devm_nvmem_device_get(struct device *, const char *);
1073:	void devm_nvmem_device_put(struct device *, struct nvmem_device *);
926:	struct nvmem_device *devm_nvmem_register(struct device *, const struct nvmem_config *);
1900:	void nvmem_add_cell_lookups(struct nvmem_cell_lookup *, size_t);
1873:	void nvmem_add_cell_table(struct nvmem_cell_table *);
1281:	struct nvmem_cell *nvmem_cell_get(struct device *, const char *);
1367:	void nvmem_cell_put(struct nvmem_cell *);
1450:	void *nvmem_cell_read(struct nvmem_cell *, size_t *);
1621:	int nvmem_cell_read_u16(struct device *, const char *, u16 *);
1636:	int nvmem_cell_read_u32(struct device *, const char *, u32 *);
1651:	int nvmem_cell_read_u64(struct device *, const char *, u64 *);
1606:	int nvmem_cell_read_u8(struct device *, const char *, u8 *);
1699:	int nvmem_cell_read_variable_le_u32(struct device *, const char *, u32 *);
1730:	int nvmem_cell_read_variable_le_u64(struct device *, const char *, u64 *);
1562:	int nvmem_cell_write(struct nvmem_cell *, void *, size_t);
1918:	void nvmem_del_cell_lookups(struct nvmem_cell_lookup *, size_t);
1886:	void nvmem_del_cell_table(struct nvmem_cell_table *);
1936:	const char *nvmem_dev_name(struct nvmem_device *);
1762:	ssize_t nvmem_device_cell_read(struct nvmem_device *, struct nvmem_cell_info *, void *);
1793:	int nvmem_device_cell_write(struct nvmem_device *, struct nvmem_cell_info *, void *);
1044:	struct nvmem_device *nvmem_device_find(void *, int (*)(struct device *, const void *));
1019:	struct nvmem_device *nvmem_device_get(struct device *, const char *);
1089:	void nvmem_device_put(struct nvmem_device *);
1821:	int nvmem_device_read(struct nvmem_device *, unsigned int, size_t, void *);
1849:	int nvmem_device_write(struct nvmem_device *, unsigned int, size_t, void *);
752:	struct nvmem_device *nvmem_register(const struct nvmem_config *);
559:	int nvmem_register_notifier(struct notifier_block *);
903:	void nvmem_unregister(struct nvmem_device *);
572:	int nvmem_unregister_notifier(struct notifier_block *);
1224:	struct nvmem_cell *of_nvmem_cell_get(struct device_node *, const char *);
989:	struct nvmem_device *of_nvmem_device_get(struct device_node *, const char *);
File drivers/of/address.c:
629:	const __be32 *__of_get_address(struct device_node *, int, int, u64 *, unsigned int *);
583:	struct device_node *__of_get_dma_parent(const struct device_node *);
846:	int of_address_to_resource(struct device_node *, int, struct resource *);
1019:	phys_addr_t of_dma_get_max_cpu_address(struct device_node *);
933:	int of_dma_get_range(struct device_node *, const struct bus_dma_region **);
1062:	bool of_dma_is_coherent(struct device_node *);
888:	void *of_io_request_and_map(struct device_node *, int, const char *);
860:	void *of_iomap(struct device_node *, int);
198:	int of_pci_address_to_resource(struct device_node *, int, struct resource *);
703:	int of_pci_dma_range_parser_init(struct of_pci_range_parser *, struct device_node *);
696:	int of_pci_range_parser_init(struct of_pci_range_parser *, struct device_node *);
711:	struct of_pci_range *of_pci_range_parser_one(struct of_pci_range_parser *, struct of_pci_range *);
224:	int of_pci_range_to_resource(struct of_pci_range *, struct device_node *, struct resource *);
566:	u64 of_translate_address(struct device_node *, const __be32 *);
612:	u64 of_translate_dma_address(struct device_node *, const __be32 *);
File drivers/of/base.c:
1720:	int __of_add_property(struct device_node *, struct property *);
225:	struct device_node *__of_find_all_nodes(struct device_node *);
925:	struct device_node *__of_find_node_by_full_path(struct device_node *, const char *);
907:	struct device_node *__of_find_node_by_path(struct device_node *, const char *);
268:	const void *__of_get_property(const struct device_node *, const char *, int *);
1423:	int __of_parse_phandle_with_args(const struct device_node *, const char *, const char *, int, int, struct of_phandle_args *);
151:	void __of_phandle_cache_inv_entry(phandle);
1766:	int __of_remove_property(struct device_node *, struct property *);
1821:	int __of_update_property(struct device_node *, struct property *, struct property **);
367:	bool arch_find_n_match_cpu_physical_id(struct device_node *, int, unsigned int *);
325:	bool arch_match_cpu_phys_id(int, u64);
1743:	int of_add_property(struct device_node *, struct property *);
2004:	int of_alias_get_highest_id(const char *);
1976:	int of_alias_get_id(struct device_node *, const char *);
1903:	void of_alias_scan(void *(*)(u64, u64));
89:	int of_bus_n_addr_cells(struct device_node *);
110:	int of_bus_n_size_cells(struct device_node *);
2034:	bool of_console_check(struct device_node *, char *, int);
166:	void of_core_init(void);
1678:	int of_count_phandle_with_args(const struct device_node *, const char *, const char *);
422:	int of_cpu_node_to_id(struct device_node *);
564:	int of_device_compatible_match(const struct device_node *, const char * const *);
640:	bool of_device_is_available(const struct device_node *);
687:	bool of_device_is_big_endian(const struct device_node *);
547:	int of_device_is_compatible(const struct device_node *, const char *);
250:	struct device_node *of_find_all_nodes(struct device_node *);
1077:	struct device_node *of_find_compatible_node(struct device_node *, const char *, const char *);
2086:	int of_find_last_cache_level(unsigned int);
1184:	struct device_node *of_find_matching_node_and_match(struct device_node *, const struct of_device_id *, const struct of_device_id **);
2055:	struct device_node *of_find_next_cache_node(const struct device_node *);
1019:	struct device_node *of_find_node_by_name(struct device_node *, const char *);
1244:	struct device_node *of_find_node_by_phandle(phandle);
1047:	struct device_node *of_find_node_by_type(struct device_node *, const char *);
961:	struct device_node *of_find_node_opts_by_path(const char *, const char **);
1106:	struct device_node *of_find_node_with_property(struct device_node *, const char *);
210:	struct property *of_find_property(const struct device_node *, const char *, int *);
895:	struct device_node *of_get_child_by_name(const struct device_node *, const char *);
870:	struct device_node *of_get_compatible_child(const struct device_node *, const char *);
297:	u64 of_get_cpu_hwid(struct device_node *, unsigned int);
402:	struct device_node *of_get_cpu_node(int, unsigned int *);
455:	struct device_node *of_get_cpu_state_node(struct device_node *, int);
794:	struct device_node *of_get_next_available_child(const struct device_node *, struct device_node *);
773:	struct device_node *of_get_next_child(const struct device_node *, struct device_node *);
828:	struct device_node *of_get_next_cpu_node(struct device_node *);
731:	struct device_node *of_get_next_parent(struct device_node *);
705:	struct device_node *of_get_parent(const struct device_node *);
280:	const void *of_get_property(const struct device_node *, const char *, int *);
590:	int of_machine_is_compatible(const char *);
2122:	int of_map_id(struct device_node *, u32, const char *, const char *, struct device_node **, u32 *);
1158:	const struct of_device_id *of_match_node(const struct of_device_id *, const struct device_node *);
1223:	int of_modalias_node(struct device_node *, char *, int);
101:	int of_n_addr_cells(struct device_node *);
122:	int of_n_size_cells(struct device_node *);
58:	bool of_node_name_eq(const struct device_node *, const char *);
73:	bool of_node_name_prefix(const struct device_node *, const char *);
132:	int of_node_to_nid(struct device_node *);
1521:	int of_parse_phandle_with_args_map(const struct device_node *, const char *, const char *, int, struct of_phandle_args *);
1406:	int of_phandle_iterator_args(struct of_phandle_iterator *, uint32_t *, int);
1288:	int of_phandle_iterator_init(struct of_phandle_iterator *, const struct device_node *, const char *, const char *, int);
1321:	int of_phandle_iterator_next(struct of_phandle_iterator *);
1276:	void of_print_phandle_args(const char *, const struct of_phandle_args *);
1795:	int of_remove_property(struct device_node *, struct property *);
1856:	int of_update_property(struct device_node *, struct property *);
File drivers/of/device.c:
37:	int of_device_add(struct platform_device *);
239:	const void *of_device_get_match_data(const struct device *);
319:	ssize_t of_device_modalias(struct device *, char *, ssize_t);
226:	int of_device_register(struct platform_device *);
290:	int of_device_request_module(struct device *);
338:	void of_device_uevent(const struct device *, struct kobj_uevent_env *);
375:	int of_device_uevent_modalias(struct device *, struct kobj_uevent_env *);
233:	void of_device_unregister(struct platform_device *);
114:	int of_dma_configure_id(struct device *, struct device_node *, bool, const u32 *);
28:	const struct of_device_id *of_match_device(const struct of_device_id *, const struct device *);
File drivers/of/fdt.c:
365:	void *__unflatten_device_tree(const void *, struct device_node *, struct device_node **, void *(*)(u64, u64), bool);
1085:	u64 dt_mem_next_cell(int, const __be32 **);
1218:	void early_init_dt_add_memory_arch(u64, u64);
977:	void early_init_dt_check_for_usable_mem_range(void);
1307:	bool early_init_dt_scan(void *);
1151:	int early_init_dt_scan_chosen(char *);
1009:	int early_init_dt_scan_chosen_stdout(void);
1096:	int early_init_dt_scan_memory(void);
1288:	void early_init_dt_scan_nodes(void);
1060:	int early_init_dt_scan_root(void);
1271:	bool early_init_dt_verify(void *);
654:	void early_init_fdt_reserve_self(void);
630:	void early_init_fdt_scan_reserved_mem(void);
43:	void of_fdt_limit_memory(int);
454:	void *of_fdt_unflatten_tree(const unsigned long *, struct device_node *, struct device_node **);
827:	const char *of_flat_dt_get_machine_name(void);
794:	int of_flat_dt_is_compatible(unsigned long, const char *);
847:	const void *of_flat_dt_match_machine(const void *, const void *(*)(const char * const **));
822:	uint32_t of_get_flat_dt_phandle(unsigned long);
751:	const void *of_get_flat_dt_prop(unsigned long, const char *, int *);
740:	unsigned long of_get_flat_dt_root(void);
732:	int of_get_flat_dt_subnode_by_name(unsigned long, const char *);
673:	int of_scan_flat_dt(int (*)(unsigned long, const char *, int, void *), void *);
703:	int of_scan_flat_dt_subnodes(unsigned long, int (*)(unsigned long, const char *, void *), void *);
1349:	void unflatten_and_copy_device_tree(void);
1327:	void unflatten_device_tree(void);
File drivers/of/fdt_address.c:
246:	u64 of_flat_dt_translate_address(unsigned long);
File drivers/of/irq.c:
36:	unsigned int irq_of_parse_and_map(struct device_node *, int);
476:	int of_irq_count(struct device_node *);
54:	struct device_node *of_irq_find_parent(struct device_node *);
430:	int of_irq_get(struct device_node *, int);
457:	int of_irq_get_byname(struct device_node *, const char *);
522:	void of_irq_init(const struct of_device_id *);
329:	int of_irq_parse_one(struct device_node *, int, struct of_phandle_args *);
113:	int of_irq_parse_raw(const __be32 *, struct of_phandle_args *);
392:	int of_irq_to_resource(struct device_node *, int, struct resource *);
495:	int of_irq_to_resource_table(struct device_node *, struct resource *, int);
740:	void of_msi_configure(struct device *, struct device_node *);
698:	struct irq_domain *of_msi_get_domain(struct device *, struct device_node *, enum irq_domain_bus_token);
678:	struct irq_domain *of_msi_map_get_device_domain(struct device *, u32, u32);
662:	u32 of_msi_map_id(struct device *, struct device_node *, u32);
File drivers/of/kobj.c:
63:	int __of_add_property_sysfs(struct device_node *, struct property *);
115:	int __of_attach_node_sysfs(struct device_node *);
149:	void __of_detach_node_sysfs(struct device_node *);
96:	void __of_remove_property_sysfs(struct device_node *, struct property *);
87:	void __of_sysfs_remove_bin_file(struct device_node *, struct property *);
103:	void __of_update_property_sysfs(struct device_node *, struct property *, struct property *);
14:	int of_node_is_attached(const struct device_node *);
File drivers/of/of_numa.c:
140:	int of_node_to_nid(struct device_node *);
177:	int of_numa_init(void);
File drivers/of/of_reserved_mem.c:
252:	void fdt_init_reserved_mem(void);
60:	void fdt_reserved_mem_save_node(unsigned long, const char *, phys_addr_t, phys_addr_t);
329:	int of_reserved_mem_device_init_by_idx(struct device *, struct device_node *, int);
386:	int of_reserved_mem_device_init_by_name(struct device *, struct device_node *, const char *);
403:	void of_reserved_mem_device_release(struct device *);
433:	struct reserved_mem *of_reserved_mem_lookup(struct device_node *);
File drivers/of/platform.c:
714:	void devm_of_platform_depopulate(struct device *);
668:	int devm_of_platform_populate(struct device *);
112:	struct platform_device *of_device_alloc(struct device_node *, const char *, struct device *);
48:	struct platform_device *of_find_device_by_node(struct device_node *);
413:	int of_platform_bus_probe(struct device_node *, const struct of_device_id *, struct device *);
496:	int of_platform_default_populate(struct device_node *, const struct of_dev_auxdata *, struct device *);
645:	void of_platform_depopulate(struct device *);
210:	struct platform_device *of_platform_device_create(struct device_node *, const char *, struct device *);
612:	int of_platform_device_destroy(struct device *, void *);
464:	int of_platform_populate(struct device_node *, const struct of_device_id *, const struct of_dev_auxdata *, struct device *);
File drivers/of/property.c:
711:	struct device_node *of_graph_get_endpoint_by_regs(const struct device_node *, int, int);
814:	int of_graph_get_endpoint_count(const struct device_node *);
642:	struct device_node *of_graph_get_next_endpoint(const struct device_node *, struct device_node *);
610:	struct device_node *of_graph_get_port_by_id(struct device_node *, u32);
749:	struct device_node *of_graph_get_port_parent(struct device_node *);
735:	struct device_node *of_graph_get_remote_endpoint(const struct device_node *);
835:	struct device_node *of_graph_get_remote_node(const struct device_node *, u32, u32);
802:	struct device_node *of_graph_get_remote_port(const struct device_node *);
779:	struct device_node *of_graph_get_remote_port_parent(const struct device_node *);
41:	bool of_graph_is_present(const struct device_node *);
578:	int of_graph_parse_endpoint(const struct device_node *, struct of_endpoint *);
553:	const char *of_prop_next_string(struct property *, const char *);
530:	const __be32 *of_prop_next_u32(struct property *, const __be32 *, u32 *);
71:	int of_property_count_elems_of_size(const struct device_node *, const char *, int);
464:	int of_property_match_string(const struct device_node *, const char *, const char *);
440:	int of_property_read_string(const struct device_node *, const char *, const char **);
503:	int of_property_read_string_helper(const struct device_node *, const char *, const char **, size_t, int);
144:	int of_property_read_u32_index(const struct device_node *, const char *, u32, u32 *);
356:	int of_property_read_u64(const struct device_node *, const char *, u64 *);
178:	int of_property_read_u64_index(const struct device_node *, const char *, u32, u64 *);
268:	int of_property_read_variable_u16_array(const struct device_node *, const char *, u16 *, size_t, size_t);
315:	int of_property_read_variable_u32_array(const struct device_node *, const char *, u32 *, size_t, size_t);
393:	int of_property_read_variable_u64_array(const struct device_node *, const char *, u64 *, size_t, size_t);
218:	int of_property_read_variable_u8_array(const struct device_node *, const char *, u8 *, size_t, size_t);
File drivers/pci/of.c:
619:	int of_pci_get_max_link_speed(struct device_node *);
647:	u32 of_pci_get_slot_power_limit(struct device_node *, u8 *, u8 *);
File drivers/phy/phy-core.c:
1145:	struct phy_provider *__devm_of_phy_provider_register(struct device *, struct device_node *, struct module *, struct phy *(*)(struct device *, struct of_phandle_args *));
1082:	struct phy_provider *__of_phy_provider_register(struct device *, struct device_node *, struct module *, struct phy *(*)(struct device *, struct of_phandle_args *));
854:	struct phy *devm_of_phy_get(struct device *, struct device_node *, const char *);
894:	struct phy *devm_of_phy_get_by_index(struct device *, struct device_node *, int);
1196:	void devm_of_phy_provider_unregister(struct device *, struct phy_provider *);
1013:	struct phy *devm_phy_create(struct device *, struct device_node *, const struct phy_ops *);
1055:	void devm_phy_destroy(struct device *, struct phy *);
800:	struct phy *devm_phy_get(struct device *, const char *);
833:	struct phy *devm_phy_optional_get(struct device *, const char *);
679:	void devm_phy_put(struct device *, struct phy *);
615:	struct phy *of_phy_get(struct device_node *, const char *);
1175:	void of_phy_provider_unregister(struct phy_provider *);
642:	void of_phy_put(struct phy *);
701:	struct phy *of_phy_simple_xlate(struct device *, struct of_phandle_args *);
475:	int phy_calibrate(struct phy *);
501:	int phy_configure(struct phy *, union phy_configure_opts *);
937:	struct phy *phy_create(struct device *, struct device_node *, const struct phy_ops *);
64:	int phy_create_lookup(struct phy *, const char *, const char *);
1040:	void phy_destroy(struct phy *);
283:	int phy_exit(struct phy *);
732:	struct phy *phy_get(struct device *, const char *);
243:	int phy_init(struct phy *);
779:	struct phy *phy_optional_get(struct device *, const char *);
208:	void phy_pm_runtime_allow(struct phy *);
220:	void phy_pm_runtime_forbid(struct phy *);
148:	int phy_pm_runtime_get(struct phy *);
166:	int phy_pm_runtime_get_sync(struct phy *);
184:	int phy_pm_runtime_put(struct phy *);
196:	int phy_pm_runtime_put_sync(struct phy *);
370:	int phy_power_off(struct phy *);
320:	int phy_power_on(struct phy *);
664:	void phy_put(struct device *, struct phy *);
96:	void phy_remove_lookup(struct phy *, const char *, const char *);
444:	int phy_reset(struct phy *);
414:	int phy_set_media(struct phy *, enum phy_media);
397:	int phy_set_mode_ext(struct phy *, enum phy_mode, int);
429:	int phy_set_speed(struct phy *, int);
535:	int phy_validate(struct phy *, enum phy_mode, int, union phy_configure_opts *);
File drivers/power/reset/reboot-mode.c:
146:	int devm_reboot_mode_register(struct device *, struct reboot_mode_driver *);
184:	void devm_reboot_mode_unregister(struct device *, struct reboot_mode_driver *);
62:	int reboot_mode_register(struct reboot_mode_driver *);
121:	int reboot_mode_unregister(struct reboot_mode_driver *);
File drivers/power/supply/bq27xxx_battery.c:
2085:	int bq27xxx_battery_setup(struct bq27xxx_device_info *);
2128:	void bq27xxx_battery_teardown(struct bq27xxx_device_info *);
1764:	void bq27xxx_battery_update(struct bq27xxx_device_info *);
File drivers/power/supply/power_supply_core.c:
545:	struct power_supply *devm_power_supply_get_by_phandle(struct device *, const char *);
1470:	struct power_supply *devm_power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1506:	struct power_supply *devm_power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
328:	int power_supply_am_i_supplied(struct power_supply *);
1013:	int power_supply_batinfo_ocv2cap(struct power_supply_battery_info *, int, int);
1027:	bool power_supply_battery_bti_in_range(struct power_supply_battery_info *, int);
116:	void power_supply_changed(struct power_supply *);
1085:	void power_supply_external_power_changed(struct power_supply *);
986:	struct power_supply_battery_ocv_table *power_supply_find_ocv2cap_table(struct power_supply_battery_info *, int, int *);
569:	int power_supply_get_battery_info(struct power_supply *, struct power_supply_battery_info **);
455:	struct power_supply *power_supply_get_by_name(const char *);
504:	struct power_supply *power_supply_get_by_phandle(struct device_node *, const char *);
1550:	void *power_supply_get_drvdata(struct power_supply *);
939:	struct power_supply_maintenance_charge_table *power_supply_get_maintenance_charging_setting(struct power_supply_battery_info *, int);
1049:	int power_supply_get_property(struct power_supply *, enum power_supply_property, union power_supply_propval *);
397:	int power_supply_get_property_from_supplier(struct power_supply *, enum power_supply_property, union power_supply_propval *);
360:	int power_supply_is_system_supplied(void);
960:	int power_supply_ocv2cap_simple(struct power_supply_battery_ocv_table *, int, int);
1095:	int power_supply_powers(struct power_supply *, struct device *);
1074:	int power_supply_property_is_writeable(struct power_supply *, enum power_supply_property);
477:	void power_supply_put(struct power_supply *);
818:	void power_supply_put_battery_info(struct power_supply *, struct power_supply_battery_info *);
1108:	int power_supply_reg_notifier(struct notifier_block *);
1417:	struct power_supply *power_supply_register(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
1440:	struct power_supply *power_supply_register_no_ws(struct device *, const struct power_supply_desc *, const struct power_supply_config *);
423:	int power_supply_set_battery_charged(struct power_supply *);
1063:	int power_supply_set_property(struct power_supply *, enum power_supply_property, const union power_supply_propval *);
849:	int power_supply_temp2resist_simple(struct power_supply_resistance_temp_table *, int, int);
1114:	void power_supply_unreg_notifier(struct notifier_block *);
1534:	void power_supply_unregister(struct power_supply *);
887:	int power_supply_vbat2ri(struct power_supply_battery_info *, int, bool);
File drivers/power/supply/power_supply_sysfs.c:
532:	int power_supply_charge_behaviour_parse(unsigned int, const char *);
497:	ssize_t power_supply_charge_behaviour_show(struct device *, unsigned int, enum power_supply_charge_behaviour, char *);
404:	void power_supply_init_attrs(struct device_type *);
461:	int power_supply_uevent(const struct device *, struct kobj_uevent_env *);
File drivers/ras/ras.c:
24:	void log_arm_hw_error(struct cper_sec_proc_arm *);
17:	void log_non_standard_event(const guid_t *, const guid_t *, const char *, const u8, const u8 *, const u32);
File drivers/remoteproc/remoteproc_core.c:
2331:	int devm_rproc_add(struct device *, struct rproc *);
2602:	struct rproc *devm_rproc_alloc(struct device *, const char *, const struct rproc_ops *, const char *, int);
2268:	int rproc_add(struct rproc *);
890:	void rproc_add_carveout(struct rproc *, struct rproc_mem_entry *);
436:	void rproc_add_rvdev(struct rproc *, struct rproc_vdev *);
2631:	void rproc_add_subdev(struct rproc *, struct rproc_subdev *);
2442:	struct rproc *rproc_alloc(struct device *, const char *, const struct rproc_ops *, const char *, int);
325:	int rproc_alloc_vring(struct rproc_vdev *, int);
1907:	int rproc_boot(struct rproc *);
193:	void *rproc_da_to_va(struct rproc *, u64, size_t, bool *);
2555:	int rproc_del(struct rproc *);
2052:	int rproc_detach(struct rproc *);
252:	struct rproc_mem_entry *rproc_find_carveout_by_name(struct rproc *, const char *, ...);
2518:	void rproc_free(struct rproc *);
410:	void rproc_free_vring(struct rproc_vring *);
2654:	struct rproc *rproc_get_by_child(struct device *);
2111:	struct rproc *rproc_get_by_phandle(phandle);
914:	struct rproc_mem_entry *rproc_mem_entry_init(struct device *, void *, dma_addr_t, size_t, u32, int (*)(struct rproc *, struct rproc_mem_entry *), int (*)(struct rproc *, struct rproc_mem_entry *), const char *, ...);
996:	int rproc_of_parse_firmware(struct device *, int, const char **);
960:	struct rproc_mem_entry *rproc_of_resm_mem_entry_init(struct device *, u32, size_t, u32, const char *, ...);
386:	int rproc_parse_vring(struct rproc_vdev *, struct fw_rsc_vdev *, int);
2533:	void rproc_put(struct rproc *);
442:	void rproc_remove_rvdev(struct rproc_vdev *);
2642:	void rproc_remove_subdev(struct rproc *, struct rproc_subdev *);
2676:	void rproc_report_crash(struct rproc *, enum rproc_crash_type);
1219:	void rproc_resource_cleanup(struct rproc *);
2166:	int rproc_set_firmware(struct rproc *, const char *);
1987:	int rproc_shutdown(struct rproc *);
1830:	int rproc_trigger_recovery(struct rproc *);
146:	phys_addr_t rproc_va_to_pa(void *);
File drivers/remoteproc/remoteproc_coredump.c:
234:	void rproc_coredump(struct rproc *);
78:	int rproc_coredump_add_custom_segment(struct rproc *, dma_addr_t, size_t, void (*)(struct rproc *, struct rproc_dump_segment *, void *, size_t, size_t), void *);
47:	int rproc_coredump_add_segment(struct rproc *, dma_addr_t, size_t);
26:	void rproc_coredump_cleanup(struct rproc *);
113:	int rproc_coredump_set_elf_info(struct rproc *, u8, u16);
343:	void rproc_coredump_using_sections(struct rproc *);
File drivers/remoteproc/remoteproc_debugfs.c:
398:	void rproc_create_debug_dir(struct rproc *);
386:	struct dentry *rproc_create_trace_file(const char *, struct rproc *, struct rproc_debug_trace *);
393:	void rproc_delete_debug_dir(struct rproc *);
427:	void rproc_exit_debugfs(void);
421:	void rproc_init_debugfs(void);
381:	void rproc_remove_trace_file(struct dentry *);
File drivers/remoteproc/remoteproc_elf_loader.c:
372:	struct resource_table *rproc_elf_find_loaded_rsc_table(struct rproc *, const struct firmware *);
128:	u64 rproc_elf_get_boot_addr(struct rproc *, const struct firmware *);
326:	int rproc_elf_load_rsc_table(struct rproc *, const struct firmware *);
160:	int rproc_elf_load_segments(struct rproc *, const struct firmware *);
37:	int rproc_elf_sanity_check(struct rproc *, const struct firmware *);
File drivers/remoteproc/remoteproc_sysfs.c:
272:	void rproc_exit_sysfs(void);
262:	int rproc_init_sysfs(void);
File drivers/remoteproc/remoteproc_virtio.c:
89:	irqreturn_t rproc_vq_interrupt(struct rproc *, int);
File drivers/soc/ti/k3-ringacc.c:
1463:	struct k3_ringacc *k3_ringacc_dmarings_init(struct platform_device *, struct k3_ringacc_init_data *);
633:	u32 k3_ringacc_get_ring_id(struct k3_ring *);
651:	int k3_ringacc_get_ring_irq_num(struct k3_ring *);
642:	u32 k3_ringacc_get_tisci_dev_id(struct k3_ring *);
332:	struct k3_ring *k3_ringacc_request_ring(struct k3_ringacc *, int, u32);
428:	int k3_ringacc_request_rings_pair(struct k3_ringacc *, int, int, struct k3_ring **, struct k3_ring **);
776:	int k3_ringacc_ring_cfg(struct k3_ring *, struct k3_ring_cfg *);
577:	int k3_ringacc_ring_free(struct k3_ring *);
889:	u32 k3_ringacc_ring_get_free(struct k3_ring *);
901:	u32 k3_ringacc_ring_get_occ(struct k3_ring *);
880:	u32 k3_ringacc_ring_get_size(struct k3_ring *);
910:	u32 k3_ringacc_ring_is_full(struct k3_ring *);
1228:	int k3_ringacc_ring_pop(struct k3_ring *, void *);
1251:	int k3_ringacc_ring_pop_tail(struct k3_ring *, void *);
1188:	int k3_ringacc_ring_push(struct k3_ring *, void *);
1208:	int k3_ringacc_ring_push_head(struct k3_ring *, void *);
473:	void k3_ringacc_ring_reset(struct k3_ring *);
502:	void k3_ringacc_ring_reset_dma(struct k3_ring *, u32);
1274:	struct k3_ringacc *of_k3_ringacc_get_by_phandle(struct device_node *, const char *);
File drivers/soc/ti/ti_sci_inta_msi.c:
47:	struct irq_domain *ti_sci_inta_msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
92:	int ti_sci_inta_msi_domain_alloc_irqs(struct device *, struct ti_sci_resource *);
File drivers/thermal/thermal_core.c:
409:	void __thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
1030:	struct thermal_cooling_device *devm_thermal_of_cooling_device_register(struct device *, struct device_node *, char *, void *, const struct thermal_cooling_device_ops *);
529:	int for_each_thermal_cooling_device(int (*)(struct thermal_cooling_device *, void *), void *);
512:	int for_each_thermal_governor(int (*)(struct thermal_governor *, void *), void *);
546:	int for_each_thermal_zone(int (*)(struct thermal_zone_device *, void *), void *);
224:	int thermal_build_list_of_policies(char *);
975:	struct thermal_cooling_device *thermal_cooling_device_register(const char *, void *, const struct thermal_cooling_device_ops *);
1072:	void thermal_cooling_device_unregister(struct thermal_cooling_device *);
998:	struct thermal_cooling_device *thermal_of_cooling_device_register(struct device_node *, const char *, void *, const struct thermal_cooling_device_ops *);
117:	int thermal_register_governor(struct thermal_governor *);
171:	void thermal_unregister_governor(struct thermal_governor *);
611:	int thermal_zone_bind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *, unsigned long, unsigned long, unsigned int);
317:	void thermal_zone_device_critical(struct thermal_zone_device *);
481:	int thermal_zone_device_disable(struct thermal_zone_device *);
475:	int thermal_zone_device_enable(struct thermal_zone_device *);
487:	int thermal_zone_device_is_enabled(struct thermal_zone_device *);
1352:	struct thermal_zone_device *thermal_zone_device_register(const char *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
1195:	struct thermal_zone_device *thermal_zone_device_register_with_trips(const char *, struct thermal_trip *, int, int, void *, struct thermal_zone_device_ops *, struct thermal_zone_params *, int, int);
197:	int thermal_zone_device_set_policy(struct thermal_zone_device *, char *);
1367:	void thermal_zone_device_unregister(struct thermal_zone_device *);
494:	void thermal_zone_device_update(struct thermal_zone_device *, enum thermal_notify_event);
563:	struct thermal_zone_device *thermal_zone_get_by_id(int);
1439:	struct thermal_zone_device *thermal_zone_get_zone_by_name(const char *);
731:	int thermal_zone_unbind_cooling_device(struct thermal_zone_device *, int, struct thermal_cooling_device *);
File drivers/thermal/thermal_helpers.c:
221:	void __thermal_cdev_update(struct thermal_cooling_device *);
81:	int __thermal_zone_get_temp(struct thermal_zone_device *, int *);
165:	void __thermal_zone_set_trips(struct thermal_zone_device *);
44:	struct thermal_instance *get_thermal_instance(struct thermal_zone_device *, struct thermal_cooling_device *, int);
26:	int get_tz_trend(struct thermal_zone_device *, int);
248:	void thermal_cdev_update(struct thermal_cooling_device *);
280:	int thermal_zone_get_offset(struct thermal_zone_device *);
265:	int thermal_zone_get_slope(struct thermal_zone_device *);
124:	int thermal_zone_get_temp(struct thermal_zone_device *, int *);
File drivers/thermal/thermal_of.c:
697:	struct thermal_zone_device *devm_thermal_of_zone_register(struct device *, int, void *, const struct thermal_zone_device_ops *);
733:	void devm_thermal_of_zone_unregister(struct device *, struct thermal_zone_device *);
32:	int of_thermal_get_ntrips(struct thermal_zone_device *);
68:	const struct thermal_trip *of_thermal_get_trip_points(struct thermal_zone_device *);
48:	bool of_thermal_is_trip_valid(struct thermal_zone_device *, int);
587:	struct thermal_zone_device *thermal_of_zone_register(struct device_node *, int, void *, const struct thermal_zone_device_ops *);
553:	void thermal_of_zone_unregister(struct thermal_zone_device *);
File drivers/thermal/thermal_sysfs.c:
924:	void thermal_cooling_device_destroy_sysfs(struct thermal_cooling_device *);
918:	void thermal_cooling_device_setup_sysfs(struct thermal_cooling_device *);
587:	int thermal_zone_create_device_groups(struct thermal_zone_device *, int);
619:	void thermal_zone_destroy_device_groups(struct thermal_zone_device *);
931:	ssize_t trip_point_show(struct device *, struct device_attribute *, char *);
942:	ssize_t weight_show(struct device *, struct device_attribute *, char *);
951:	ssize_t weight_store(struct device *, struct device_attribute *, const char *, size_t);
File drivers/tty/hvc/hvc_console.c:
778:	void __hvc_resize(struct hvc_struct *, struct winsize);
911:	struct hvc_struct *hvc_alloc(uint32_t, int, const struct hv_ops *, int);
285:	int hvc_instantiate(uint32_t, int, const struct hv_ops *);
313:	void hvc_kick(void);
762:	int hvc_poll(struct hvc_struct *);
979:	int hvc_remove(struct hvc_struct *);
File drivers/tty/n_tty.c:
2512:	void n_tty_inherit_ops(struct tty_ldisc_ops *);
2519:	void n_tty_init(void);
File drivers/tty/pty.c:
602:	int ptm_open_peer(struct file *, struct tty_struct *, int);
File drivers/tty/serdev/core.c:
839:	int __serdev_device_driver_register(struct serdev_device_driver *, struct module *);
193:	int devm_serdev_device_open(struct device *, struct serdev_device *);
770:	int serdev_controller_add(struct serdev_controller *);
476:	struct serdev_controller *serdev_controller_alloc(struct device *, size_t);
820:	void serdev_controller_remove(struct serdev_controller *);
102:	int serdev_device_add(struct serdev_device *);
447:	struct serdev_device *serdev_device_alloc(struct serdev_controller *);
175:	void serdev_device_close(struct serdev_device *);
386:	int serdev_device_get_tiocm(struct serdev_device *);
147:	int serdev_device_open(struct serdev_device *);
138:	void serdev_device_remove(struct serdev_device *);
340:	unsigned int serdev_device_set_baudrate(struct serdev_device *, unsigned int);
352:	void serdev_device_set_flow_control(struct serdev_device *, bool);
363:	int serdev_device_set_parity(struct serdev_device *, enum serdev_parity);
397:	int serdev_device_set_tiocm(struct serdev_device *, int, int);
375:	void serdev_device_wait_until_sent(struct serdev_device *, long);
270:	int serdev_device_write(struct serdev_device *, const unsigned char *, size_t, long);
236:	int serdev_device_write_buf(struct serdev_device *, const unsigned char *, size_t);
318:	void serdev_device_write_flush(struct serdev_device *);
329:	int serdev_device_write_room(struct serdev_device *);
215:	void serdev_device_write_wakeup(struct serdev_device *);
File drivers/tty/serdev/serdev-ttyport.c:
264:	struct device *serdev_tty_port_register(struct tty_port *, struct device *, struct tty_driver *, int);
304:	int serdev_tty_port_unregister(struct tty_port *);
File drivers/tty/serial/8250/8250_core.c:
713:	int early_serial_setup(struct uart_port *);
407:	struct uart_8250_port *serial8250_get_port(int);
982:	int serial8250_register_8250_port(const struct uart_8250_port *);
779:	void serial8250_resume_port(int);
416:	void serial8250_set_isa_configurator(void (*)(int, struct uart_port *, u32 *));
755:	void serial8250_suspend_port(int);
1141:	void serial8250_unregister_port(int);
File drivers/tty/serial/8250/8250_dwlib.c:
95:	void dw8250_do_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
242:	void dw8250_setup_port(struct uart_port *);
File drivers/tty/serial/8250/8250_early.c:
155:	int early_serial8250_setup(struct earlycon_device *, const char *);
File drivers/tty/serial/8250/8250_fsl.c:
26:	int fsl8250_handle_irq(struct uart_port *);
File drivers/tty/serial/8250/8250_port.c:
556:	void serial8250_clear_and_reinit_fifos(struct uart_8250_port *);
3508:	int serial8250_console_exit(struct uart_port *);
3482:	int serial8250_console_setup(struct uart_port *, char *, bool);
3380:	void serial8250_console_write(struct uart_8250_port *, const char *, unsigned int);
2015:	unsigned int serial8250_do_get_mctrl(struct uart_port *);
2925:	void serial8250_do_pm(struct uart_port *, unsigned int, unsigned int);
2628:	void serial8250_do_set_divisor(struct uart_port *, unsigned int, unsigned int, unsigned int);
2898:	void serial8250_do_set_ldisc(struct uart_port *, struct ktermios *);
2040:	void serial8250_do_set_mctrl(struct uart_port *, unsigned int);
2751:	void serial8250_do_set_termios(struct uart_port *, struct ktermios *, const struct ktermios *);
2466:	void serial8250_do_shutdown(struct uart_port *);
2177:	int serial8250_do_startup(struct uart_port *);
669:	int serial8250_em485_config(struct uart_port *, struct ktermios *, struct serial_rs485 *);
639:	void serial8250_em485_destroy(struct uart_8250_port *);
1598:	void serial8250_em485_start_tx(struct uart_8250_port *);
1437:	void serial8250_em485_stop_tx(struct uart_8250_port *);
1914:	int serial8250_handle_irq(struct uart_port *, unsigned int);
3267:	void serial8250_init_port(struct uart_8250_port *);
1871:	unsigned int serial8250_modem_status(struct uart_8250_port *);
1725:	void serial8250_read_char(struct uart_8250_port *, u16);
563:	void serial8250_rpm_get(struct uart_8250_port *);
698:	void serial8250_rpm_get_tx(struct uart_8250_port *);
571:	void serial8250_rpm_put(struct uart_8250_port *);
712:	void serial8250_rpm_put_tx(struct uart_8250_port *);
1794:	u16 serial8250_rx_chars(struct uart_8250_port *, u16);
3279:	void serial8250_set_defaults(struct uart_8250_port *);
1811:	void serial8250_tx_chars(struct uart_8250_port *);
2699:	void serial8250_update_uartclk(struct uart_port *, unsigned int);
File drivers/tty/serial/earlycon.c:
246:	int of_setup_earlycon(const struct earlycon_id *, unsigned long, const char *);
176:	int setup_earlycon(char *);
File drivers/tty/serial/serial_core.c:
3053:	int uart_add_one_port(struct uart_driver *, struct uart_port *);
2811:	struct tty_driver *uart_console_device(struct console *, int *);
2075:	void uart_console_write(struct uart_port *, const char *, unsigned int, void (*)(struct uart_port *, unsigned char));
377:	unsigned int uart_get_baud_rate(struct uart_port *, struct ktermios *, const struct ktermios *, unsigned int, unsigned int);
2100:	struct uart_port *uart_get_console(struct uart_port *, int, struct console *);
472:	unsigned int uart_get_divisor(struct uart_port *, unsigned int);
3412:	int uart_get_rs485_mode(struct uart_port *);
3300:	void uart_handle_cts_change(struct uart_port *, unsigned int);
3265:	void uart_handle_dcd_change(struct uart_port *, unsigned int);
3336:	void uart_insert_char(struct uart_port *, unsigned int, unsigned int, unsigned int, unsigned int);
3233:	bool uart_match_port(const struct uart_port *, const struct uart_port *);
2135:	int uart_parse_earlycon(char *, unsigned char *, resource_size_t *, char **);
2190:	void uart_parse_options(const char *, int *, int *, int *, int *);
2725:	int uart_register_driver(struct uart_driver *);
3155:	int uart_remove_one_port(struct uart_driver *, struct uart_port *);
2392:	int uart_resume_port(struct uart_driver *, struct uart_port *);
2220:	int uart_set_options(struct uart_port *, struct console *, int, int, int, int);
2315:	int uart_suspend_port(struct uart_driver *, struct uart_port *);
2796:	void uart_unregister_driver(struct uart_driver *);
344:	void uart_update_timeout(struct uart_port *, unsigned int, unsigned int);
111:	void uart_write_wakeup(struct uart_port *);
665:	void uart_xchar_out(struct uart_port *, int);
File drivers/tty/tty_baudrate.c:
211:	void tty_encode_baud_rate(struct tty_struct *, speed_t, speed_t);
58:	speed_t tty_termios_baud_rate(const struct ktermios *);
129:	void tty_termios_encode_baud_rate(struct ktermios *, speed_t, speed_t);
88:	speed_t tty_termios_input_baud_rate(const struct ktermios *);
File drivers/tty/tty_buffer.c:
393:	int __tty_insert_flip_char(struct tty_port *, unsigned char, char);
690:	bool tty_buffer_cancel_work(struct tty_port *);
222:	void tty_buffer_flush(struct tty_struct *, struct tty_ldisc *);
695:	void tty_buffer_flush_work(struct tty_port *);
120:	void tty_buffer_free_all(struct tty_port *);
646:	void tty_buffer_init(struct tty_port *);
52:	void tty_buffer_lock_exclusive(struct tty_port *);
301:	int tty_buffer_request_room(struct tty_port *, size_t);
685:	bool tty_buffer_restart_work(struct tty_port *);
670:	int tty_buffer_set_limit(struct tty_port *, int);
680:	void tty_buffer_set_lock_subclass(struct tty_port *);
94:	unsigned int tty_buffer_space_avail(struct tty_port *);
69:	void tty_buffer_unlock_exclusive(struct tty_port *);
599:	void tty_flip_buffer_push(struct tty_port *);
622:	int tty_insert_flip_string_and_push_buffer(struct tty_port *, const unsigned char *, size_t);
319:	int tty_insert_flip_string_fixed_flag(struct tty_port *, const unsigned char *, char, size_t);
358:	int tty_insert_flip_string_flags(struct tty_port *, const unsigned char *, const char *, size_t);
453:	int tty_ldisc_receive_buf(struct tty_ldisc *, const unsigned char *, const char *, int);
424:	int tty_prepare_flip_string(struct tty_port *, unsigned char **, size_t);
File drivers/tty/tty_io.c:
2999:	void __do_SAK(struct tty_struct *);
783:	void __start_tty(struct tty_struct *);
750:	void __stop_tty(struct tty_struct *);
3313:	struct tty_driver *__tty_alloc_driver(unsigned int, struct module *, unsigned long);
3084:	struct tty_struct *alloc_tty_struct(struct tty_driver *, int);
3589:	void console_sysfs_notify(void);
3058:	void do_SAK(struct tty_struct *);
1113:	ssize_t redirected_tty_write(struct kiocb *, struct iov_iter *);
804:	void start_tty(struct tty_struct *);
773:	void stop_tty(struct tty_struct *);
195:	void tty_add_file(struct tty_struct *, struct file *);
181:	int tty_alloc_file(struct file *);
3496:	void tty_default_fops(struct file_operations *);
336:	int tty_dev_name_to_number(const char *, dev_t *);
3490:	dev_t tty_devnum(struct tty_struct *);
2325:	int tty_do_resize(struct tty_struct *, struct winsize *);
3403:	void tty_driver_kref_put(struct tty_driver *);
251:	const char *tty_driver_name(const struct tty_struct *);
214:	void tty_free_file(struct file *);
2569:	int tty_get_icount(struct tty_struct *, struct serial_icounter_struct *);
683:	void tty_hangup(struct tty_struct *);
744:	int tty_hung_up_p(struct file *);
3637:	int tty_init(void);
1390:	struct tty_struct *tty_init_dev(struct tty_driver *, int);
1247:	void tty_init_termios(struct tty_struct *);
2651:	long tty_ioctl(struct file *, unsigned int, unsigned long);
1652:	void tty_kclose(struct tty_struct *);
1998:	struct tty_struct *tty_kopen_exclusive(dev_t);
2013:	struct tty_struct *tty_kopen_shared(dev_t);
1560:	void tty_kref_put(struct tty_struct *);
243:	const char *tty_name(const struct tty_struct *);
3136:	int tty_put_char(struct tty_struct *, unsigned char);
3181:	struct device *tty_register_device(struct tty_driver *, unsigned int, struct device *);
3213:	struct device *tty_register_device_attr(struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
3415:	int tty_register_driver(struct tty_driver *);
1721:	int tty_release(struct inode *, struct file *);
1682:	void tty_release_struct(struct tty_struct *, int);
1468:	void tty_save_termios(struct tty_struct *);
1145:	int tty_send_xchar(struct tty_struct *, char);
1277:	int tty_standard_install(struct tty_driver *, struct tty_struct *);
3293:	void tty_unregister_device(struct tty_driver *, unsigned int);
3480:	void tty_unregister_driver(struct tty_driver *);
698:	void tty_vhangup(struct tty_struct *);
711:	void tty_vhangup_self(void);
732:	void tty_vhangup_session(struct tty_struct *);
516:	void tty_wakeup(struct tty_struct *);
1058:	void tty_write_message(struct tty_struct *, char *);
File drivers/tty/tty_ioctl.c:
402:	int kernel_termios_to_user_termio(struct termio *, struct ktermios *);
422:	int kernel_termios_to_user_termios(struct termios2 *, struct ktermios *);
432:	int kernel_termios_to_user_termios_1(struct termios *, struct ktermios *);
934:	int n_tty_ioctl_helper(struct tty_struct *, unsigned int, unsigned long);
58:	unsigned int tty_chars_in_buffer(struct tty_struct *);
93:	void tty_driver_flush_buffer(struct tty_struct *);
290:	unsigned char tty_get_char_size(unsigned int);
315:	unsigned char tty_get_frame_size(unsigned int);
763:	int tty_mode_ioctl(struct tty_struct *, unsigned int, unsigned long);
919:	int tty_perform_flush(struct tty_struct *, unsigned long);
341:	int tty_set_termios(struct tty_struct *, struct ktermios *);
253:	void tty_termios_copy_hw(struct ktermios *, const struct ktermios *);
273:	int tty_termios_hw_change(const struct ktermios *, const struct ktermios *);
137:	int tty_throttle_safe(struct tty_struct *);
113:	void tty_unthrottle(struct tty_struct *);
168:	int tty_unthrottle_safe(struct tty_struct *);
198:	void tty_wait_until_sent(struct tty_struct *, long);
77:	unsigned int tty_write_room(struct tty_struct *);
382:	int user_termio_to_kernel_termios(struct ktermios *, struct termio *);
417:	int user_termios_to_kernel_termios(struct ktermios *, struct termios2 *);
427:	int user_termios_to_kernel_termios_1(struct ktermios *, struct termios *);
File drivers/tty/tty_jobctrl.c:
33:	int __tty_check_change(struct tty_struct *, int);
265:	void disassociate_ctty(int);
160:	struct tty_struct *get_current_tty(void);
333:	void no_tty(void);
75:	void proc_clear_tty(struct task_struct *);
175:	void session_clear_tty(struct pid *);
69:	int tty_check_change(struct tty_struct *);
416:	struct pid *tty_get_pgrp(struct tty_struct *);
567:	long tty_jobctrl_ioctl(struct tty_struct *, struct tty_struct *, struct file *, unsigned int, unsigned long);
132:	void tty_open_proc_set_tty(struct file *, struct tty_struct *);
196:	int tty_signal_session_leader(struct tty_struct *, int);
File drivers/tty/tty_ldisc.c:
813:	void tty_ldisc_deinit(struct tty_struct *);
280:	void tty_ldisc_deref(struct tty_ldisc *);
385:	void tty_ldisc_flush(struct tty_struct *);
685:	void tty_ldisc_hangup(struct tty_struct *, bool);
796:	int tty_ldisc_init(struct tty_struct *);
305:	int tty_ldisc_lock(struct tty_struct *, unsigned long);
260:	struct tty_ldisc *tty_ldisc_ref(struct tty_struct *);
240:	struct tty_ldisc *tty_ldisc_ref_wait(struct tty_struct *);
642:	int tty_ldisc_reinit(struct tty_struct *, int);
766:	void tty_ldisc_release(struct tty_struct *);
738:	int tty_ldisc_setup(struct tty_struct *, struct tty_struct *);
321:	void tty_ldisc_unlock(struct tty_struct *);
58:	int tty_register_ldisc(struct tty_ldisc_ops *);
520:	int tty_set_ldisc(struct tty_struct *, int);
84:	void tty_unregister_ldisc(struct tty_ldisc_ops *);
File drivers/tty/tty_ldsem.c:
57:	void __init_ldsem(struct ld_semaphore *, const char *, struct lock_class_key *);
337:	int ldsem_down_read(struct ld_semaphore *, long);
346:	int ldsem_down_read_trylock(struct ld_semaphore *);
363:	int ldsem_down_write(struct ld_semaphore *, long);
372:	int ldsem_down_write_trylock(struct ld_semaphore *);
389:	void ldsem_up_read(struct ld_semaphore *);
403:	void ldsem_up_write(struct ld_semaphore *);
File drivers/tty/tty_mutex.c:
15:	void tty_lock(struct tty_struct *);
22:	int tty_lock_interruptible(struct tty_struct *);
40:	void tty_lock_slave(struct tty_struct *);
52:	void tty_set_lock_subclass(struct tty_struct *);
33:	void tty_unlock(struct tty_struct *);
46:	void tty_unlock_slave(struct tty_struct *);
File drivers/tty/tty_port.c:
245:	int tty_port_alloc_xmit_buf(struct tty_port *);
510:	int tty_port_block_til_ready(struct tty_port *, struct tty_struct *, struct file *);
447:	int tty_port_carrier_raised(struct tty_port *);
715:	void tty_port_close(struct tty_port *, struct tty_struct *, struct file *);
681:	void tty_port_close_end(struct tty_port *, struct tty_struct *);
625:	int tty_port_close_start(struct tty_port *, struct tty_struct *, struct file *);
279:	void tty_port_destroy(struct tty_port *);
261:	void tty_port_free_xmit_buf(struct tty_port *);
394:	void tty_port_hangup(struct tty_port *);
92:	void tty_port_init(struct tty_port *);
738:	int tty_port_install(struct tty_port *, struct tty_driver *, struct tty_struct *);
119:	void tty_port_link_device(struct tty_port *, struct tty_driver *, unsigned int);
478:	void tty_port_lower_dtr_rts(struct tty_port *);
765:	int tty_port_open(struct tty_port *, struct tty_struct *, struct file *);
308:	void tty_port_put(struct tty_port *);
463:	void tty_port_raise_dtr_rts(struct tty_port *);
139:	struct device *tty_port_register_device(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
160:	struct device *tty_port_register_device_attr(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
183:	struct device *tty_port_register_device_attr_serdev(struct tty_port *, struct tty_driver *, unsigned int, struct device *, void *, const struct attribute_group **);
213:	struct device *tty_port_register_device_serdev(struct tty_port *, struct tty_driver *, unsigned int, struct device *);
322:	struct tty_struct *tty_port_tty_get(struct tty_port *);
419:	void tty_port_tty_hangup(struct tty_port *, bool);
342:	void tty_port_tty_set(struct tty_port *, struct tty_struct *);
433:	void tty_port_tty_wakeup(struct tty_port *);
232:	void tty_port_unregister_device(struct tty_port *, struct tty_driver *, unsigned int);
File drivers/tty/vt/consolemap.c:
572:	int con_clear_unimap(struct vc_data *);
763:	int con_copy_unimap(struct vc_data *, struct vc_data *);
453:	void con_free_unimap(struct vc_data *);
402:	int con_get_trans_new(ushort *);
371:	int con_get_trans_old(unsigned char *);
785:	int con_get_unimap(struct vc_data *, ushort, ushort *, struct unipair *);
706:	int con_set_default_unimap(struct vc_data *);
388:	int con_set_trans_new(ushort *);
352:	int con_set_trans_old(unsigned char *);
638:	int con_set_unimap(struct vc_data *, ushort, struct unipair *);
908:	void console_map_init(void);
847:	u32 conv_8bit_to_uni(unsigned char);
853:	int conv_uni_to_8bit(u32);
863:	int conv_uni_to_pc(struct vc_data *, long);
300:	u16 inverse_translate(const struct vc_data *, u16, bool);
287:	unsigned short *set_translate(enum translation_map, struct vc_data *);
File drivers/tty/vt/keyboard.c:
1653:	int kbd_init(void);
312:	int kbd_rate(struct kbd_repeat *);
276:	void kd_mksound(unsigned int, unsigned int);
163:	int register_keyboard_notifier(struct notifier_block *);
1150:	void setledstate(struct kbd_struct *, unsigned int);
169:	int unregister_keyboard_notifier(struct notifier_block *);
2283:	void vt_clr_kbd_mode_bit(unsigned int, int);
1691:	int vt_do_diacrit(unsigned int, void *, int);
1901:	int vt_do_kbkeycode_ioctl(int, struct kbkeycode *, int);
2060:	int vt_do_kdgkb_ioctl(int, struct kbsentry *, int);
2178:	int vt_do_kdgkbmeta(unsigned int);
2154:	int vt_do_kdgkbmode(unsigned int);
2022:	int vt_do_kdsk_ioctl(int, struct kbentry *, int, unsigned int);
1880:	int vt_do_kdskbmeta(unsigned int, unsigned int);
1840:	int vt_do_kdskbmode(unsigned int, unsigned int);
2112:	int vt_do_kdskled(unsigned int, int, unsigned long, int);
2249:	int vt_get_kbd_mode_bit(unsigned int, int);
1181:	int vt_get_leds(unsigned int, int);
2206:	int vt_get_shift_state(void);
1222:	void vt_kbd_con_start(unsigned int);
1239:	void vt_kbd_con_stop(unsigned int);
2219:	void vt_reset_keyboard(unsigned int);
2191:	void vt_reset_unicode(unsigned int);
2264:	void vt_set_kbd_mode_bit(unsigned int, int);
1203:	void vt_set_led_state(unsigned int, int);
414:	void vt_set_leds_compute_shiftstate(void);
File drivers/tty/vt/selection.c:
81:	void clear_selection(void);
375:	int paste_selection(struct tty_struct *);
119:	int sel_loadlut(char *);
354:	int set_selection_kernel(struct tiocl_selection *, struct tty_struct *);
178:	int set_selection_user(const struct tiocl_selection *, struct tty_struct *);
91:	bool vc_is_sel(struct vc_data *);
File drivers/tty/vt/vc_screen.c:
802:	int vcs_init(void);
785:	void vcs_make_sysfs(int);
795:	void vcs_remove_sysfs(int);
File drivers/tty/vt/vt.c:
973:	void clear_buffer_attributes(struct vc_data *);
805:	void complement_pos(struct vc_data *, int);
4029:	int con_debug_enter(struct vc_data *);
4085:	int con_debug_leave(void);
4709:	int con_font_op(struct vc_data *, struct console_font_op *);
4544:	int con_get_cmap(unsigned char *);
3986:	int con_is_bound(const struct consw *);
4009:	bool con_is_visible(const struct vc_data *);
4515:	int con_set_cmap(unsigned char *);
4344:	void do_blank_screen(int);
4260:	int do_take_over_console(const struct consw *, int, int, int);
3732:	int do_unbind_con_driver(const struct consw *, int, int, int);
4405:	void do_unblank_screen(int);
4183:	int do_unregister_con_driver(const struct consw *);
4758:	void getconsxy(const struct vc_data *, unsigned char *);
4284:	void give_up_console(const struct consw *);
756:	void invert_screen(struct vc_data *, int, int, bool);
1865:	void mouse_report(struct tty_struct *, int, int, int);
1876:	int mouse_reporting(void);
4470:	void poke_blanked_console(void);
4765:	void putconsxy(struct vc_data *, unsigned char * const);
984:	void redraw_screen(struct vc_data *, int);
249:	int register_vt_notifier(struct notifier_block *);
4563:	void reset_palette(struct vc_data *);
310:	void schedule_console_callback(void);
4730:	u16 screen_glyph(const struct vc_data *, int);
4741:	u32 screen_glyph_unicode(const struct vc_data *, int);
4752:	unsigned short *screen_pos(const struct vc_data *, int, bool);
1489:	void scrollback(struct vc_data *);
1494:	void scrollfront(struct vc_data *, int);
3013:	int set_console(int);
3184:	int tioclinux(struct tty_struct *, unsigned long);
255:	int unregister_vt_notifier(struct notifier_block *);
688:	void update_region(struct vc_data *, unsigned long, int);
1108:	int vc_allocate(unsigned int);
1048:	int vc_cons_allocated(unsigned int);
1388:	struct vc_data *vc_deallocate(unsigned int);
1360:	int vc_resize(struct vc_data *, unsigned int, unsigned int);
4793:	void vc_scrolldelta_helper(struct vc_data *, int, unsigned int, void *, unsigned int);
501:	int vc_uniscr_check(struct vc_data *);
547:	void vc_uniscr_copy_line(const struct vc_data *, void *, bool, unsigned int, unsigned int, unsigned int);
4772:	u16 vcs_scr_readw(const struct vc_data *, const u16 *);
4788:	void vcs_scr_updated(struct vc_data *);
4779:	void vcs_scr_writew(struct vc_data *, u16, u16 *);
3062:	int vt_kmsg_redirect(int);
3587:	int vty_init(const struct file_operations *);
File drivers/tty/vt/vt_ioctl.c:
1203:	void change_console(struct vc_data *);
1317:	void pm_set_vt_switch(int);
963:	void reset_vc(struct vc_data *);
978:	void vc_SAK(struct work_struct *);
111:	void vt_event_post(unsigned int, unsigned int, unsigned int);
736:	int vt_ioctl(struct tty_struct *, unsigned int, unsigned long);
1274:	int vt_move_to_console(unsigned int, int);
217:	int vt_waitactive(int);
File drivers/usb/cdns3/core.c:
297:	int cdns_hw_role_switch(struct cdns *);
427:	int cdns_init(struct cdns *);
497:	int cdns_remove(struct cdns *);
File drivers/usb/cdns3/drd.c:
106:	void cdns_clear_vbus(struct cdns *);
475:	int cdns_drd_exit(struct cdns *);
260:	void cdns_drd_gadget_off(struct cdns *);
228:	int cdns_drd_gadget_on(struct cdns *);
207:	void cdns_drd_host_off(struct cdns *);
178:	int cdns_drd_host_on(struct cdns *);
384:	int cdns_drd_init(struct cdns *);
309:	int cdns_drd_update_mode(struct cdns *);
86:	int cdns_get_id(struct cdns *);
96:	int cdns_get_vbus(struct cdns *);
142:	bool cdns_is_device(struct cdns *);
132:	bool cdns_is_host(struct cdns *);
484:	bool cdns_power_is_lost(struct cdns *);
119:	void cdns_set_vbus(struct cdns *);
File drivers/usb/cdns3/host.c:
127:	int cdns_host_init(struct cdns *);
File drivers/usb/common/common.c:
276:	enum usb_dr_mode of_usb_get_dr_mode_by_phy(struct device_node *, int);
328:	bool of_usb_host_tpl_support(struct device_node *);
342:	int of_usb_update_otg_caps(struct device_node *, struct usb_otg_caps *);
231:	unsigned int usb_decode_interval(const struct usb_endpoint_descriptor *, enum usb_device_speed);
34:	const char *usb_ep_type_string(int);
190:	enum usb_dr_mode usb_get_dr_mode(struct device *);
107:	enum usb_device_speed usb_get_maximum_speed(struct device *);
134:	enum usb_ssp_rate usb_get_maximum_ssp_rate(struct device *);
210:	enum usb_dr_mode usb_get_role_switch_default_mode(struct device *);
400:	struct device *usb_of_get_companion_dev(struct device *);
43:	const char *usb_otg_state_string(enum usb_otg_state);
91:	const char *usb_speed_string(enum usb_device_speed);
154:	const char *usb_state_string(enum usb_device_state);
File drivers/usb/core/buffer.c:
115:	void *hcd_buffer_alloc(struct usb_bus *, size_t, gfp_t, dma_addr_t *);
65:	int hcd_buffer_create(struct usb_hcd *);
97:	void hcd_buffer_destroy(struct usb_hcd *);
144:	void hcd_buffer_free(struct usb_bus *, size_t, void *, dma_addr_t);
33:	void usb_init_pool_max(void);
File drivers/usb/core/config.c:
825:	void usb_destroy_configuration(struct usb_device *);
978:	int usb_get_bos_descriptor(struct usb_device *);
861:	int usb_get_configuration(struct usb_device *);
959:	void usb_release_bos_descriptor(struct usb_device *);
484:	void usb_release_interface_cache(struct kref *);
File drivers/usb/core/devio.c:
2906:	void usb_devio_cleanup(void);
2880:	int usb_devio_init(void);
748:	void usbfs_notify_resume(struct usb_device *);
743:	void usbfs_notify_suspend(struct usb_device *);
File drivers/usb/core/driver.c:
1096:	void usb_deregister(struct usb_driver *);
1018:	void usb_deregister_device_driver(struct usb_device_driver *);
824:	const struct usb_device_id *usb_device_match_id(struct usb_device *, const struct usb_device_id *);
839:	bool usb_driver_applicable(struct usb_device *, struct usb_device_driver *);
535:	int usb_driver_claim_interface(struct usb_driver *, struct usb_interface *, void *);
609:	void usb_driver_release_interface(struct usb_driver *, struct usb_interface *);
1113:	void usb_forced_unbind_intf(struct usb_interface *);
638:	int usb_match_device(struct usb_device *, const struct usb_device_id *);
802:	const struct usb_device_id *usb_match_id(struct usb_interface *, const struct usb_device_id *);
709:	int usb_match_one_id(struct usb_interface *, const struct usb_device_id *);
674:	int usb_match_one_id_intf(struct usb_device *, struct usb_host_interface *, const struct usb_device_id *);
975:	int usb_register_device_driver(struct usb_device_driver *, struct module *);
1043:	int usb_register_driver(struct usb_driver *, struct module *, const char *);
114:	ssize_t usb_show_dynids(struct usb_dynids *, char *);
42:	ssize_t usb_store_new_id(struct usb_dynids *, const struct usb_device_id *, struct device_driver *, const char *, size_t);
1200:	void usb_unbind_and_rebind_marked_interfaces(struct usb_device *);
File drivers/usb/core/endpoint.c:
149:	int usb_create_ep_devs(struct device *, struct usb_host_endpoint *, struct usb_device *);
183:	void usb_remove_ep_devs(struct usb_host_endpoint *);
File drivers/usb/core/file.c:
230:	void usb_deregister_dev(struct usb_interface *, struct usb_class_driver *);
132:	void usb_major_cleanup(void);
120:	int usb_major_init(void);
156:	int usb_register_dev(struct usb_interface *, struct usb_class_driver *);
File drivers/usb/core/generic.c:
56:	int usb_choose_configuration(struct usb_device *);
253:	void usb_generic_driver_disconnect(struct usb_device *);
226:	int usb_generic_driver_probe(struct usb_device *);
File drivers/usb/core/hcd.c:
2567:	struct usb_hcd *__usb_create_hcd(const struct hc_driver *, struct device *, struct device *, const char *, struct usb_hcd *);
2811:	int usb_add_hcd(struct usb_hcd *, unsigned int, unsigned long);
2036:	int usb_alloc_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, unsigned int, gfp_t);
1094:	long usb_calc_bus_time(int, int, int, int);
2668:	struct usb_hcd *usb_create_hcd(const struct hc_driver *, struct device *, const char *);
2645:	struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *, struct device *, const char *, struct usb_hcd *);
2086:	int usb_free_streams(struct usb_interface *, struct usb_host_endpoint **, unsigned int, gfp_t);
2702:	struct usb_hcd *usb_get_hcd(struct usb_hcd *);
2515:	void usb_hc_died(struct usb_hcd *);
1862:	int usb_hcd_alloc_bandwidth(struct usb_device *, struct usb_host_config *, struct usb_host_interface *, struct usb_host_interface *);
1211:	int usb_hcd_check_unlink_urb(struct usb_hcd *, struct urb *, int);
1984:	void usb_hcd_disable_endpoint(struct usb_device *, struct usb_host_endpoint *);
1068:	void usb_hcd_end_port_resume(struct usb_bus *, int);
2725:	int usb_hcd_find_raw_port_number(struct usb_hcd *, int);
1783:	void usb_hcd_flush_endpoint(struct usb_device *, struct usb_host_endpoint *);
2129:	int usb_hcd_get_frame_number(struct usb_device *);
1744:	void usb_hcd_giveback_urb(struct usb_hcd *, struct urb *, int);
2474:	irqreturn_t usb_hcd_irq(int, void *);
2717:	int usb_hcd_is_primary_hcd(struct usb_hcd *);
1153:	int usb_hcd_link_urb_to_ep(struct usb_hcd *, struct urb *);
1407:	int usb_hcd_map_urb_for_dma(struct usb_hcd *, struct urb *, gfp_t);
3100:	void usb_hcd_platform_shutdown(struct platform_device *);
752:	void usb_hcd_poll_rh_status(struct usb_hcd *);
2003:	void usb_hcd_reset_endpoint(struct usb_device *, struct usb_host_endpoint *);
3112:	int usb_hcd_setup_local_mem(struct usb_hcd *, phys_addr_t, dma_addr_t, size_t);
1046:	void usb_hcd_start_port_resume(struct usb_bus *, int);
1529:	int usb_hcd_submit_urb(struct urb *, gfp_t);
2120:	void usb_hcd_synchronize_unlinks(struct usb_device *);
1611:	int usb_hcd_unlink_urb(struct urb *, int);
1244:	void usb_hcd_unlink_urb_from_ep(struct usb_hcd *, struct urb *);
1360:	void usb_hcd_unmap_urb_for_dma(struct usb_hcd *, struct urb *);
1332:	void usb_hcd_unmap_urb_setup_for_dma(struct usb_hcd *, struct urb *);
2710:	void usb_put_hcd(struct usb_hcd *);
3032:	void usb_remove_hcd(struct usb_hcd *);
File drivers/usb/core/hub.c:
4582:	int hub_port_debounce(struct usb_hub *, int, bool);
2644:	int usb_authorize_device(struct usb_device *);
431:	int usb_clear_port_feature(struct usb_device *, int, int);
2629:	int usb_deauthorize_device(struct usb_device *);
2011:	bool usb_device_is_owned(struct usb_device *);
148:	int usb_device_supports_lpm(struct usb_device *);
4485:	int usb_disable_lpm(struct usb_device *);
4503:	int usb_disable_ltm(struct usb_device *);
2208:	void usb_disconnect(struct usb_device **);
4491:	void usb_enable_lpm(struct usb_device *);
4509:	void usb_enable_ltm(struct usb_device *);
4625:	void usb_ep0_reinit(struct usb_device *);
6285:	void usb_hub_adjust_deviceremovable(struct usb_device *, struct usb_hub_descriptor *);
1966:	int usb_hub_claim_port(struct usb_device *, unsigned int, struct usb_dev_state *);
5918:	void usb_hub_cleanup(void);
869:	int usb_hub_clear_tt_buffer(struct urb *);
6274:	struct usb_device *usb_hub_find_child(struct usb_device *, int);
5893:	int usb_hub_init(void);
620:	int usb_hub_port_status(struct usb_hub *, int, u16 *, u16 *);
1998:	void usb_hub_release_all_ports(struct usb_device *, struct usb_dev_state *);
1982:	int usb_hub_release_port(struct usb_device *, unsigned int, struct usb_dev_state *);
835:	int usb_hub_set_port_power(struct usb_device *, struct usb_hub *, int, bool);
141:	struct usb_hub *usb_hub_to_struct_hub(struct usb_device *);
684:	void usb_kick_hub_wq(struct usb_device *);
2523:	int usb_new_device(struct usb_device *);
4560:	int usb_port_disable(struct usb_device *);
3130:	int usb_port_is_power_on(struct usb_hub *, unsigned int);
6254:	void usb_queue_reset_device(struct usb_interface *);
999:	int usb_remove_device(struct usb_device *);
6131:	int usb_reset_device(struct usb_device *);
2056:	void usb_set_device_state(struct usb_device *, enum usb_device_state);
4494:	int usb_unlocked_disable_lpm(struct usb_device *);
4500:	void usb_unlocked_enable_lpm(struct usb_device *);
700:	void usb_wakeup_notification(struct usb_device *, unsigned int);
File drivers/usb/core/message.c:
2285:	int cdc_parse_cdc_header(struct usb_cdc_parsed_header *, struct usb_interface *, u8 *, int);
1811:	void usb_authorize_interface(struct usb_interface *);
363:	int usb_bulk_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1018:	char *usb_cache_string(struct usb_device *, int);
1209:	int usb_clear_halt(struct usb_device *, int);
136:	int usb_control_msg(struct usb_device *, unsigned int, __u8, __u8, __u16, __u16, void *, __u16, int);
263:	int usb_control_msg_recv(struct usb_device *, __u8, __u8, __u8, __u16, __u16, void *, __u16, int, gfp_t);
198:	int usb_control_msg_send(struct usb_device *, __u8, __u8, __u8, __u16, __u16, const void *, __u16, int, gfp_t);
1789:	void usb_deauthorize_interface(struct usb_interface *);
1394:	void usb_disable_device(struct usb_device *, int);
1284:	void usb_disable_endpoint(struct usb_device *, unsigned int, bool);
1343:	void usb_disable_interface(struct usb_device *, struct usb_interface *, bool);
2249:	int usb_driver_set_configuration(struct usb_device *, int);
1455:	void usb_enable_endpoint(struct usb_device *, struct usb_host_endpoint *, bool);
1479:	void usb_enable_interface(struct usb_device *, struct usb_interface *, bool);
780:	int usb_get_descriptor(struct usb_device *, unsigned char, unsigned char, void *, int);
1061:	int usb_get_device_descriptor(struct usb_device *, unsigned int);
1128:	int usb_get_status(struct usb_device *, int, int, int, void *);
324:	int usb_interrupt_msg(struct usb_device *, unsigned int, void *, int, int *, int);
1693:	int usb_reset_configuration(struct usb_device *);
1319:	void usb_reset_endpoint(struct usb_device *, unsigned int);
1958:	int usb_set_configuration(struct usb_device *, int);
1528:	int usb_set_interface(struct usb_device *, int, int);
1086:	int usb_set_isoch_delay(struct usb_device *);
720:	void usb_sg_cancel(struct usb_sg_request *);
501:	int usb_sg_init(struct usb_sg_request *, struct usb_device *, unsigned int, unsigned int, struct scatterlist *, int, size_t, gfp_t);
650:	void usb_sg_wait(struct usb_sg_request *);
967:	int usb_string(struct usb_device *, int, char *, size_t);
File drivers/usb/core/notify.c:
60:	void usb_notify_add_bus(struct usb_bus *);
49:	void usb_notify_add_device(struct usb_device *);
65:	void usb_notify_remove_bus(struct usb_bus *);
54:	void usb_notify_remove_device(struct usb_device *);
29:	void usb_register_notify(struct notifier_block *);
42:	void usb_unregister_notify(struct notifier_block *);
File drivers/usb/core/of.c:
25:	struct device_node *usb_of_get_device_node(struct usb_device *, int);
92:	struct device_node *usb_of_get_interface_node(struct usb_device *, u8, u8);
57:	bool usb_of_has_combined_node(struct usb_device *);
File drivers/usb/core/phy.c:
49:	struct usb_phy_roothub *usb_phy_roothub_alloc(struct device *);
154:	int usb_phy_roothub_calibrate(struct usb_phy_roothub *);
105:	int usb_phy_roothub_exit(struct usb_phy_roothub *);
78:	int usb_phy_roothub_init(struct usb_phy_roothub *);
202:	void usb_phy_roothub_power_off(struct usb_phy_roothub *);
175:	int usb_phy_roothub_power_on(struct usb_phy_roothub *);
227:	int usb_phy_roothub_resume(struct device *, struct usb_phy_roothub *);
126:	int usb_phy_roothub_set_mode(struct usb_phy_roothub *, enum phy_mode);
214:	int usb_phy_roothub_suspend(struct device *, struct usb_phy_roothub *);
File drivers/usb/core/port.c:
669:	int usb_hub_create_port_device(struct usb_hub *, int);
759:	void usb_hub_remove_port_device(struct usb_hub *, int);
File drivers/usb/core/quirks.c:
709:	void usb_detect_interface_quirks(struct usb_device *);
681:	void usb_detect_quirks(struct usb_device *);
579:	bool usb_endpoint_is_ignored(struct usb_device *, struct usb_host_interface *, struct usb_endpoint_descriptor *);
722:	void usb_release_quirk_list(void);
File drivers/usb/core/sysfs.c:
1021:	int usb_create_sysfs_dev_files(struct usb_device *);
1241:	void usb_create_sysfs_intf_files(struct usb_interface *);
1050:	void usb_remove_sysfs_dev_files(struct usb_device *);
1258:	void usb_remove_sysfs_intf_files(struct usb_interface *);
File drivers/usb/core/urb.c:
71:	struct urb *usb_alloc_urb(int, gfp_t);
1048:	int usb_anchor_empty(struct usb_anchor *);
953:	void usb_anchor_resume_wakeups(struct usb_anchor *);
939:	void usb_anchor_suspend_wakeups(struct usb_anchor *);
127:	void usb_anchor_urb(struct urb *, struct usb_anchor *);
803:	void usb_block_urb(struct urb *);
94:	void usb_free_urb(struct urb *);
993:	struct urb *usb_get_from_anchor(struct usb_anchor *);
111:	struct urb *usb_get_urb(struct urb *);
44:	void usb_init_urb(struct urb *);
823:	void usb_kill_anchored_urbs(struct usb_anchor *);
714:	void usb_kill_urb(struct urb *);
204:	int usb_pipe_type_check(struct usb_device *, unsigned int);
861:	void usb_poison_anchored_urbs(struct usb_anchor *);
761:	void usb_poison_urb(struct urb *);
1020:	void usb_scuttle_anchored_urbs(struct usb_anchor *);
368:	int usb_submit_urb(struct urb *, gfp_t);
165:	void usb_unanchor_urb(struct urb *);
920:	void usb_unlink_anchored_urbs(struct usb_anchor *);
675:	int usb_unlink_urb(struct urb *);
895:	void usb_unpoison_anchored_urbs(struct usb_anchor *);
782:	void usb_unpoison_urb(struct urb *);
225:	int usb_urb_ep_type_check(const struct urb *);
974:	int usb_wait_anchor_empty_timeout(struct usb_anchor *, unsigned int);
File drivers/usb/core/usb.c:
880:	int __usb_get_extra_descriptor(char *, unsigned int, unsigned char, void **, size_t);
932:	void *usb_alloc_coherent(struct usb_device *, size_t, gfp_t, dma_addr_t *);
574:	struct usb_device *usb_alloc_dev(struct usb_device *, struct usb_bus *, unsigned int);
307:	struct usb_host_interface *usb_altnum_to_altsetting(const struct usb_interface *, unsigned int);
58:	int usb_disabled(void);
220:	struct usb_host_interface *usb_find_alt_setting(struct usb_host_config *, unsigned int, unsigned int);
134:	int usb_find_common_endpoints(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
180:	int usb_find_common_endpoints_reverse(struct usb_host_interface *, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **, struct usb_endpoint_descriptor **);
351:	struct usb_interface *usb_find_interface(struct usb_driver *, int);
393:	int usb_for_each_dev(void *, int (*)(struct usb_device *, void *));
952:	void usb_free_coherent(struct usb_device *, size_t, void *, dma_addr_t);
868:	int usb_get_current_frame_number(struct usb_device *);
698:	struct usb_device *usb_get_dev(struct usb_device *);
736:	struct usb_interface *usb_get_intf(struct usb_interface *);
271:	struct usb_interface *usb_ifnum_to_if(const struct usb_device *, unsigned int);
773:	struct device *usb_intf_get_dma_device(struct usb_interface *);
821:	int usb_lock_device_for_reset(struct usb_device *, const struct usb_interface *);
713:	void usb_put_dev(struct usb_device *);
752:	void usb_put_intf(struct usb_interface *);
File drivers/usb/host/xhci-dbg.c:
22:	void xhci_dbg_trace(struct xhci_hcd *, void (*)(struct va_format *), const char *, ...);
13:	char *xhci_get_slot_state(struct xhci_hcd *, struct xhci_container_ctx *);
File drivers/usb/host/xhci-ext-caps.c:
84:	int xhci_ext_cap_init(struct xhci_hcd *);
File drivers/usb/host/xhci-hub.c:
460:	int xhci_find_slot_id_by_port(struct usb_hcd *, struct xhci_hcd *, u16);
655:	struct xhci_hub *xhci_get_rhub(struct usb_hcd *);
1196:	int xhci_hub_control(struct usb_hcd *, u16, u16, u16, char *, u16);
1635:	int xhci_hub_status_data(struct usb_hcd *, char *);
444:	u32 xhci_port_state_to_neutral(u32);
562:	void xhci_ring_device(struct xhci_hcd *, int);
783:	void xhci_set_link_state(struct xhci_hcd *, struct xhci_port *, u32);
827:	void xhci_test_and_clear_bit(struct xhci_hcd *, struct xhci_port *, u32);
File drivers/usb/host/xhci-mem.c:
1733:	struct xhci_command *xhci_alloc_command(struct xhci_hcd *, bool, gfp_t);
1759:	struct xhci_command *xhci_alloc_command_with_ctx(struct xhci_hcd *, bool, gfp_t);
468:	struct xhci_container_ctx *xhci_alloc_container_ctx(struct xhci_hcd *, int, gfp_t);
1792:	int xhci_alloc_erst(struct xhci_hcd *, struct xhci_ring *, struct xhci_erst *, gfp_t);
603:	struct xhci_stream_info *xhci_alloc_stream_info(struct xhci_hcd *, unsigned int, unsigned int, unsigned int, gfp_t);
820:	int xhci_alloc_tt_info(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_tt *, gfp_t);
964:	int xhci_alloc_virt_device(struct xhci_hcd *, int, struct usb_device *, gfp_t);
1534:	void xhci_clear_endpoint_bw_info(struct xhci_bw_info *);
1037:	void xhci_copy_ep0_dequeue_into_input_ctx(struct xhci_hcd *, struct usb_device *);
584:	struct xhci_ring *xhci_dma_to_transfer_ring(struct xhci_virt_ep *, u64);
1602:	void xhci_endpoint_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *, unsigned int);
1416:	int xhci_endpoint_init(struct xhci_hcd *, struct xhci_virt_device *, struct usb_device *, struct usb_host_endpoint *, gfp_t);
1515:	void xhci_endpoint_zero(struct xhci_hcd *, struct xhci_virt_device *, struct usb_host_endpoint *);
1783:	void xhci_free_command(struct xhci_hcd *, struct xhci_command *);
494:	void xhci_free_container_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
411:	void xhci_free_endpoint_ring(struct xhci_hcd *, struct xhci_virt_device *, unsigned int);
1822:	void xhci_free_erst(struct xhci_hcd *, struct xhci_erst *);
758:	void xhci_free_stream_info(struct xhci_hcd *, struct xhci_stream_info *);
865:	void xhci_free_virt_device(struct xhci_hcd *, int);
522:	struct xhci_ep_ctx *xhci_get_ep_ctx(struct xhci_hcd *, struct xhci_container_ctx *, unsigned int);
503:	struct xhci_input_control_ctx *xhci_get_input_control_ctx(struct xhci_container_ctx *);
512:	struct xhci_slot_ctx *xhci_get_slot_ctx(struct xhci_hcd *, struct xhci_container_ctx *);
296:	void xhci_initialize_ring_info(struct xhci_ring *, unsigned int);
1835:	void xhci_mem_cleanup(struct xhci_hcd *);
2378:	int xhci_mem_init(struct xhci_hcd *, gfp_t);
371:	struct xhci_ring *xhci_ring_alloc(struct xhci_hcd *, unsigned int, unsigned int, enum xhci_ring_type, unsigned int, gfp_t);
423:	int xhci_ring_expansion(struct xhci_hcd *, struct xhci_ring *, unsigned int, gfp_t);
280:	void xhci_ring_free(struct xhci_hcd *, struct xhci_ring *);
1088:	int xhci_setup_addressable_virt_dev(struct xhci_hcd *, struct usb_device *);
745:	void xhci_setup_no_streams_ep_input_ctx(struct xhci_ep_ctx *, struct xhci_virt_ep *);
721:	void xhci_setup_streams_ep_input_ctx(struct xhci_hcd *, struct xhci_ep_ctx *, struct xhci_stream_info *);
1628:	void xhci_slot_copy(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_container_ctx *);
1544:	void xhci_update_bw_info(struct xhci_hcd *, struct xhci_container_ctx *, struct xhci_input_control_ctx *, struct xhci_virt_device *);
1778:	void xhci_urb_free_priv(struct urb_priv *);
File drivers/usb/host/xhci-ring.c:
3281:	unsigned int count_trbs(u64, u64);
158:	void inc_deq(struct xhci_hcd *, struct xhci_ring *);
2020:	struct xhci_segment *trb_in_td(struct xhci_hcd *, struct xhci_segment *, union xhci_trb *, union xhci_trb *, dma_addr_t, bool);
1555:	void xhci_cleanup_command_queue(struct xhci_hcd *);
1563:	void xhci_handle_command_timeout(struct work_struct *);
1220:	void xhci_hc_died(struct xhci_hcd *);
3015:	irqreturn_t xhci_irq(struct usb_hcd *);
2124:	int xhci_is_vendor_info_code(struct xhci_hcd *, unsigned int);
3103:	irqreturn_t xhci_msi_irq(int, void *);
4305:	int xhci_queue_address_device(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, enum xhci_setup_dev);
3519:	int xhci_queue_bulk_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4330:	int xhci_queue_configure_endpoint(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3680:	int xhci_queue_ctrl_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4341:	int xhci_queue_evaluate_context(struct xhci_hcd *, struct xhci_command *, dma_addr_t, u32, bool);
3391:	int xhci_queue_intr_tx(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4170:	int xhci_queue_isoc_tx_prepare(struct xhci_hcd *, gfp_t, struct urb *, int, unsigned int);
4321:	int xhci_queue_reset_device(struct xhci_hcd *, struct xhci_command *, u32);
4366:	int xhci_queue_reset_ep(struct xhci_hcd *, struct xhci_command *, int, unsigned int, enum xhci_ep_reset_type);
4297:	int xhci_queue_slot_control(struct xhci_hcd *, struct xhci_command *, u32, u32);
4354:	int xhci_queue_stop_endpoint(struct xhci_hcd *, struct xhci_command *, int, unsigned int, int);
4314:	int xhci_queue_vendor_command(struct xhci_hcd *, struct xhci_command *, u32, u32, u32, u32);
301:	void xhci_ring_cmd_db(struct xhci_hcd *);
478:	void xhci_ring_doorbell_for_active_rings(struct xhci_hcd *, unsigned int, unsigned int);
426:	void xhci_ring_ep_doorbell(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
69:	dma_addr_t xhci_trb_virt_to_dma(struct xhci_segment *, union xhci_trb *);
529:	struct xhci_ring *xhci_triad_to_transfer_ring(struct xhci_hcd *, unsigned int, unsigned int, unsigned int);
File drivers/usb/host/xhci.c:
2003:	int xhci_add_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
4082:	int xhci_alloc_dev(struct usb_hcd *, struct usb_device *);
3039:	int xhci_check_bandwidth(struct usb_hcd *, struct usb_device *);
4011:	int xhci_disable_slot(struct xhci_hcd *, u32);
1920:	int xhci_drop_endpoint(struct usb_hcd *, struct usb_device *, struct usb_host_endpoint *);
4371:	int xhci_find_raw_port_number(struct usb_hcd *, int);
3770:	void xhci_free_device_endpoint_resources(struct xhci_hcd *, struct xhci_virt_device *, bool);
5295:	int xhci_gen_setup(struct usb_hcd *, xhci_get_quirks_t);
1477:	unsigned int xhci_get_endpoint_index(struct usb_endpoint_descriptor *);
110:	int xhci_halt(struct xhci_hcd *);
68:	int xhci_handshake(void *, u32, u32, u64);
5497:	void xhci_init_driver(struct hc_driver *, const struct xhci_driver_overrides *);
1514:	unsigned int xhci_last_valid_endpoint(u32);
86:	void xhci_quiesce(struct xhci_hcd *);
170:	int xhci_reset(struct xhci_hcd *, u64);
3138:	void xhci_reset_bandwidth(struct usb_hcd *, struct usb_device *);
662:	int xhci_run(struct usb_hcd *);
793:	void xhci_shutdown(struct usb_hcd *);
133:	int xhci_start(struct xhci_hcd *);
5135:	int xhci_update_hub_device(struct usb_hcd *, struct usb_device *, struct usb_tt *, gfp_t);
2806:	void xhci_update_tt_active_eps(struct xhci_hcd *, struct xhci_virt_device *, int);
File drivers/usb/phy/of.c:
28:	enum usb_phy_interface of_usb_get_phy_mode(struct device_node *);
File drivers/usb/phy/phy-generic.c:
135:	int usb_gen_phy_init(struct usb_phy *);
157:	void usb_gen_phy_shutdown(struct usb_phy *);
206:	int usb_phy_gen_create_phy(struct device *, struct usb_phy_generic *);
33:	struct platform_device *usb_phy_generic_register(void);
40:	void usb_phy_generic_unregister(struct platform_device *);
File drivers/usb/phy/phy-ulpi.c:
282:	struct usb_phy *devm_otg_ulpi_create(struct device *, struct usb_phy_io_ops *, unsigned int);
259:	struct usb_phy *otg_ulpi_create(struct usb_phy_io_ops *, unsigned int);
File drivers/usb/phy/phy.c:
464:	struct usb_phy *devm_usb_get_phy(struct device *, enum usb_phy_type);
535:	struct usb_phy *devm_usb_get_phy_by_node(struct device *, struct device_node *, struct notifier_block *);
594:	struct usb_phy *devm_usb_get_phy_by_phandle(struct device *, const char *, u8);
627:	void devm_usb_put_phy(struct device *, struct usb_phy *);
664:	int usb_add_phy(struct usb_phy *, enum usb_phy_type);
715:	int usb_add_phy_dev(struct usb_phy *);
493:	struct usb_phy *usb_get_phy(enum usb_phy_type);
280:	void usb_phy_get_charger_current(struct usb_phy *, unsigned int *, unsigned int *);
231:	void usb_phy_set_charger_current(struct usb_phy *, unsigned int);
317:	void usb_phy_set_charger_state(struct usb_phy *, enum usb_charger_state);
766:	void usb_phy_set_event(struct usb_phy *, unsigned long);
644:	void usb_put_phy(struct usb_phy *);
748:	void usb_remove_phy(struct usb_phy *);
File drivers/usb/roles/class.c:
149:	struct usb_role_switch *fwnode_usb_role_switch_get(struct fwnode_handle *);
220:	const char *usb_role_string(enum usb_role);
187:	struct usb_role_switch *usb_role_switch_find_by_fwnode(const struct fwnode_handle *);
126:	struct usb_role_switch *usb_role_switch_get(struct device *);
388:	void *usb_role_switch_get_drvdata(struct usb_role_switch *);
70:	enum usb_role usb_role_switch_get_role(struct usb_role_switch *);
170:	void usb_role_switch_put(struct usb_role_switch *);
318:	struct usb_role_switch *usb_role_switch_register(struct device *, const struct usb_role_switch_desc *);
378:	void usb_role_switch_set_drvdata(struct usb_role_switch *, void *);
42:	int usb_role_switch_set_role(struct usb_role_switch *, enum usb_role);
366:	void usb_role_switch_unregister(struct usb_role_switch *);
File drivers/virtio/virtio.c:
473:	bool is_virtio_device(struct device *);
418:	int register_virtio_device(struct virtio_device *);
352:	int register_virtio_driver(struct virtio_driver *);
479:	void unregister_virtio_device(struct virtio_device *);
361:	void unregister_virtio_driver(struct virtio_driver *);
163:	void virtio_add_status(struct virtio_device *, unsigned int);
106:	void virtio_check_driver_offered_feature(const struct virtio_device *, unsigned int);
136:	void virtio_config_changed(struct virtio_device *);
220:	void virtio_reset_device(struct virtio_device *);
File drivers/virtio/virtio_anchor.c:
5:	bool virtio_require_restricted_mem_acc(struct virtio_device *);
File drivers/virtio/virtio_ring.c:
2803:	void __virtio_unbreak_device(struct virtio_device *);
2748:	void __virtqueue_break(struct virtqueue *);
2760:	void __virtqueue_unbreak(struct virtqueue *);
2781:	void virtio_break_device(struct virtio_device *);
288:	size_t virtio_max_dma_size(struct virtio_device *);
2170:	int virtqueue_add_inbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
2193:	int virtqueue_add_inbuf_ctx(struct virtqueue *, struct scatterlist *, unsigned int, void *, void *, gfp_t);
2148:	int virtqueue_add_outbuf(struct virtqueue *, struct scatterlist *, unsigned int, void *, gfp_t);
2114:	int virtqueue_add_sgs(struct virtqueue *, struct scatterlist **, unsigned int, unsigned int, void *, gfp_t);
2423:	void *virtqueue_detach_unused_buf(struct virtqueue *);
2308:	void virtqueue_disable_cb(struct virtqueue *);
2382:	bool virtqueue_enable_cb(struct virtqueue *);
2403:	bool virtqueue_enable_cb_delayed(struct virtqueue *);
2337:	unsigned int virtqueue_enable_cb_prepare(struct virtqueue *);
2831:	dma_addr_t virtqueue_get_avail_addr(struct virtqueue *);
2294:	void *virtqueue_get_buf(struct virtqueue *, unsigned int *);
2284:	void *virtqueue_get_buf_ctx(struct virtqueue *, unsigned int *, void **);
2818:	dma_addr_t virtqueue_get_desc_addr(struct virtqueue *);
2845:	dma_addr_t virtqueue_get_used_addr(struct virtqueue *);
2860:	const struct vring *virtqueue_get_vring(struct virtqueue *);
2736:	unsigned int virtqueue_get_vring_size(struct virtqueue *);
2769:	bool virtqueue_is_broken(struct virtqueue *);
2259:	bool virtqueue_kick(struct virtqueue *);
2214:	bool virtqueue_kick_prepare(struct virtqueue *);
2231:	bool virtqueue_notify(struct virtqueue *);
2358:	bool virtqueue_poll(struct virtqueue *, unsigned int);
2584:	int virtqueue_resize(struct virtqueue *, u32, void (*)(struct virtqueue *, void *));
2536:	struct virtqueue *vring_create_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, bool, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2688:	void vring_del_virtqueue(struct virtqueue *);
2445:	irqreturn_t vring_interrupt(int, void *);
2630:	struct virtqueue *vring_new_virtqueue(unsigned int, unsigned int, unsigned int, struct virtio_device *, bool, bool, void *, bool (*)(struct virtqueue *), void (*)(struct virtqueue *), const char *);
2703:	void vring_transport_features(struct virtio_device *);
File fs/aio.c:
2142:	long __arm64_sys_io_cancel(const struct pt_regs *);
1404:	long __arm64_sys_io_destroy(const struct pt_regs *);
2218:	long __arm64_sys_io_getevents(const struct pt_regs *);
2243:	long __arm64_sys_io_pgetevents(const struct pt_regs *);
1335:	long __arm64_sys_io_setup(const struct pt_regs *);
2048:	long __arm64_sys_io_submit(const struct pt_regs *);
886:	void exit_aio(struct mm_struct *);
588:	void kiocb_set_cancel_fn(struct kiocb *, kiocb_cancel_fn *);
File fs/anon_inodes.c:
226:	int anon_inode_getfd(const char *, const struct file_operations *, void *, int);
249:	int anon_inode_getfd_secure(const char *, const struct file_operations *, void *, int, const struct inode *);
143:	struct file *anon_inode_getfile(const char *, const struct file_operations *, void *, int);
171:	struct file *anon_inode_getfile_secure(const char *, const struct file_operations *, void *, int, const struct inode *);
File fs/attr.c:
247:	int inode_newsize_ok(const struct inode *, loff_t);
325:	int may_setattr(struct user_namespace *, struct inode *, unsigned int);
380:	int notify_change(struct user_namespace *, struct dentry *, struct iattr *, struct inode **);
302:	void setattr_copy(struct user_namespace *, struct inode *, const struct iattr *);
164:	int setattr_prepare(struct user_namespace *, struct dentry *, struct iattr *);
36:	int setattr_should_drop_sgid(struct user_namespace *, const struct inode *);
66:	int setattr_should_drop_suidgid(struct user_namespace *, struct inode *);
File fs/bad_inode.c:
246:	void iget_failed(struct inode *);
233:	bool is_bad_inode(struct inode *);
207:	void make_bad_inode(struct inode *);
File fs/buffer.c:
1153:	void __bforget(struct buffer_head *);
2964:	int __bh_read(struct buffer_head *, blk_opf_t, bool);
2992:	void __bh_read_batch(int, struct buffer_head **, blk_opf_t, bool);
2038:	int __block_write_begin(struct page *, loff_t, unsigned int, get_block_t *);
1953:	int __block_write_begin_int(struct folio *, loff_t, unsigned int, get_block_t *, const struct iomap *);
1694:	int __block_write_full_page(struct inode *, struct page *, get_block_t *, struct writeback_control *, bh_end_io_t *);
1364:	struct buffer_head *__bread_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
1341:	void __breadahead(struct block_device *, sector_t, unsigned int);
1139:	void __brelse(struct buffer_head *);
1301:	struct buffer_head *__find_get_block(struct block_device *, sector_t, unsigned int);
1326:	struct buffer_head *__getblk_gfp(struct block_device *, sector_t, unsigned int, gfp_t);
67:	void __lock_buffer(struct buffer_head *);
2729:	int __sync_dirty_buffer(struct buffer_head *, blk_opf_t);
120:	void __wait_on_buffer(struct buffer_head *);
2897:	struct buffer_head *alloc_buffer_head(gfp_t);
811:	struct buffer_head *alloc_page_buffers(struct page *, unsigned long, bool);
2944:	int bh_uptodate_or_lock(struct buffer_head *);
2460:	int block_commit_write(struct page *, unsigned int, unsigned int);
616:	bool block_dirty_folio(struct address_space *, struct folio *);
1483:	void block_invalidate_folio(struct folio *, size_t, size_t);
2196:	bool block_is_partially_uptodate(struct folio *, size_t, size_t);
2486:	int block_page_mkwrite(struct vm_area_struct *, struct vm_fault *, get_block_t *);
2239:	int block_read_full_folio(struct folio *, get_block_t *);
2525:	int block_truncate_page(struct address_space *, loff_t, get_block_t *);
2091:	int block_write_begin(struct address_space *, loff_t, unsigned int, struct page **, get_block_t *);
2114:	int block_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
2602:	int block_write_full_page(struct page *, get_block_t *, struct writeback_control *);
86:	void buffer_check_dirty_writeback(struct folio *, bool *, bool *);
3021:	void buffer_init(void);
1588:	void clean_bdev_aliases(struct block_device *, sector_t, sector_t);
2436:	int cont_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **, get_block_t *, loff_t *);
1538:	void create_empty_buffers(struct page *, unsigned long, unsigned long);
524:	void emergency_thaw_bdev(struct super_block *);
342:	void end_buffer_async_write(struct buffer_head *, int);
157:	void end_buffer_read_sync(struct buffer_head *, int);
164:	void end_buffer_write_sync(struct buffer_head *, int);
2912:	void free_buffer_head(struct buffer_head *);
2635:	sector_t generic_block_bmap(struct address_space *, sector_t, get_block_t *);
2335:	int generic_cont_expand_simple(struct inode *, loff_t);
2150:	int generic_write_end(struct file *, struct address_space *, loff_t, unsigned int, unsigned int, struct page *, void *);
1397:	bool has_bh_in_lru(int, void *);
484:	int inode_has_buffers(struct inode *);
1410:	void invalidate_bh_lrus(void);
1420:	void invalidate_bh_lrus_cpu(void);
758:	void invalidate_inode_buffers(struct inode *);
418:	void mark_buffer_async_write(struct buffer_head *);
1079:	void mark_buffer_dirty(struct buffer_head *);
570:	void mark_buffer_dirty_inode(struct buffer_head *, struct inode *);
1114:	void mark_buffer_write_io_error(struct buffer_head *);
1861:	void page_zero_new_buffers(struct page *, unsigned int, unsigned int);
779:	int remove_inode_buffers(struct inode *);
1430:	void set_bh_page(struct buffer_head *, struct page *, unsigned long);
2705:	void submit_bh(blk_opf_t, struct buffer_head *);
2756:	int sync_dirty_buffer(struct buffer_head *);
541:	int sync_mapping_buffers(struct address_space *);
60:	void touch_buffer(struct buffer_head *);
2815:	bool try_to_free_buffers(struct folio *);
73:	void unlock_buffer(struct buffer_head *);
559:	void write_boundary_block(struct block_device *, sector_t, unsigned int);
2711:	void write_dirty_buffer(struct buffer_head *, blk_opf_t);
File fs/char_dev.c:
268:	int __register_chrdev(unsigned int, unsigned int, unsigned int, const char *, const struct file_operations *);
335:	void __unregister_chrdev(unsigned int, unsigned int, unsigned int, const char *);
236:	int alloc_chrdev_region(dev_t *, unsigned int, unsigned int, const char *);
426:	void cd_forget(struct inode *);
479:	int cdev_add(struct cdev *, dev_t, unsigned int);
640:	struct cdev *cdev_alloc(void);
601:	void cdev_del(struct cdev *);
544:	int cdev_device_add(struct cdev *, struct device *);
578:	void cdev_device_del(struct cdev *, struct device *);
658:	void cdev_init(struct cdev *, const struct file_operations *);
361:	void cdev_put(struct cdev *);
515:	void cdev_set_parent(struct cdev *, struct kobject *);
674:	void chrdev_init(void);
51:	void chrdev_show(struct seq_file *, off_t);
200:	int register_chrdev_region(dev_t, unsigned int, const char *);
311:	void unregister_chrdev_region(dev_t, unsigned int);
File fs/configfs/dir.c:
362:	int configfs_create_link(struct configfs_dirent *, struct dentry *, struct dentry *, char *);
1108:	int configfs_depend_item(struct configfs_subsystem *, struct config_item *);
1190:	int configfs_depend_item_unlocked(struct configfs_subsystem *, struct config_item *);
351:	int configfs_dirent_is_ready(struct configfs_dirent *);
242:	int configfs_make_dirent(struct configfs_dirent *, struct dentry *, void *, umode_t, int, struct configfs_fragment *);
1817:	struct config_group *configfs_register_default_group(struct config_group *, const char *, const struct config_item_type *);
1728:	int configfs_register_group(struct config_group *, struct config_group *);
1849:	int configfs_register_subsystem(struct configfs_subsystem *);
709:	void configfs_remove_default_groups(struct config_group *);
1158:	void configfs_undepend_item(struct config_item *);
1842:	void configfs_unregister_default_group(struct config_group *);
1773:	void configfs_unregister_group(struct config_group *);
1909:	void configfs_unregister_subsystem(struct configfs_subsystem *);
178:	struct configfs_fragment *get_fragment(struct configfs_fragment *);
172:	void put_fragment(struct configfs_fragment *);
File fs/configfs/file.c:
468:	int configfs_create_bin_file(struct config_item *, const struct configfs_bin_attribute *);
447:	int configfs_create_file(struct config_item *, const struct configfs_attribute *);
File fs/configfs/inode.c:
157:	struct inode *configfs_create(struct dentry *, umode_t);
205:	void configfs_drop_dentry(struct configfs_dirent *, struct dentry *);
183:	const unsigned char *configfs_get_name(struct configfs_dirent *);
221:	void configfs_hash_and_remove(struct dentry *, const char *);
105:	struct inode *configfs_new_inode(umode_t, struct configfs_dirent *, struct super_block *);
35:	int configfs_setattr(struct user_namespace *, struct dentry *, struct iattr *);
File fs/configfs/item.c:
174:	struct config_item *config_group_find_item(struct config_group *, const char *);
157:	void config_group_init(struct config_group *);
92:	void config_group_init_type_name(struct config_group *, const char *, const struct config_item_type *);
101:	struct config_item *config_item_get(struct config_item *);
109:	struct config_item *config_item_get_unless_zero(struct config_item *);
82:	void config_item_init_type_name(struct config_item *, const char *, const struct config_item_type *);
146:	void config_item_put(struct config_item *);
49:	int config_item_set_name(struct config_item *, const char *, ...);
File fs/configfs/mount.c:
50:	int configfs_is_root(struct config_item *);
122:	struct dentry *configfs_pin_fs(void);
129:	void configfs_release_fs(void);
File fs/configfs/symlink.c:
140:	int configfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
220:	int configfs_unlink(struct inode *, struct dentry *);
File fs/coredump.c:
517:	void do_coredump(const kernel_siginfo_t *);
927:	int dump_align(struct coredump_params *, int);
841:	int dump_emit(struct coredump_params *, const void *, int);
858:	void dump_skip(struct coredump_params *, size_t);
852:	void dump_skip_to(struct coredump_params *, unsigned long);
898:	int dump_user_range(struct coredump_params *, unsigned long, unsigned long);
940:	void validate_coredump_safety(void);
File fs/d_path.c:
411:	long __arm64_sys_getcwd(const struct pt_regs *);
214:	char *__d_path(const struct path *, const struct path *, char *, int);
226:	char *d_absolute_path(const struct path *, char *, int);
264:	char *d_path(const struct path *, char *, int);
370:	char *dentry_path(const struct dentry *, char *, int);
361:	char *dentry_path_raw(const struct dentry *, char *, int);
300:	char *dynamic_dname(char *, int, const char *, ...);
317:	char *simple_dname(struct dentry *, char *, int);
File fs/dcache.c:
504:	void __d_drop(struct dentry *);
2453:	struct dentry *__d_lookup(const struct dentry *, const struct qstr *);
2344:	struct dentry *__d_lookup_rcu(const struct dentry *, const struct qstr *, unsigned int *);
2765:	void __d_lookup_unhash_wake(struct dentry *);
2811:	void d_add(struct dentry *, struct inode *);
2213:	struct dentry *d_add_ci(struct dentry *, struct inode *, struct qstr *);
1847:	struct dentry *d_alloc(struct dentry *, const struct qstr *);
1866:	struct dentry *d_alloc_anon(struct super_block *);
1872:	struct dentry *d_alloc_cursor(struct dentry *);
1905:	struct dentry *d_alloc_name(struct dentry *, const char *);
2631:	struct dentry *d_alloc_parallel(struct dentry *, const struct qstr *, wait_queue_head_t *);
1897:	struct dentry *d_alloc_pseudo(struct super_block *, const struct qstr *);
3064:	struct dentry *d_ancestor(struct dentry *, struct dentry *);
2554:	void d_delete(struct dentry *);
532:	void d_drop(struct dentry *);
2832:	struct dentry *d_exact_alias(struct dentry *, struct inode *);
3042:	void d_exchange(struct dentry *, struct dentry *);
1060:	struct dentry *d_find_alias(struct inode *);
1077:	struct dentry *d_find_alias_rcu(struct inode *);
1016:	struct dentry *d_find_any_alias(struct inode *);
3245:	void d_genocide(struct dentry *);
2516:	struct dentry *d_hash_and_lookup(struct dentry *, struct qstr *);
2030:	void d_instantiate(struct dentry *, struct inode *);
2119:	struct dentry *d_instantiate_anon(struct dentry *, struct inode *);
2048:	void d_instantiate_new(struct dentry *, struct inode *);
1722:	void d_invalidate(struct dentry *);
2423:	struct dentry *d_lookup(const struct dentry *, const struct qstr *);
2064:	struct dentry *d_make_root(struct inode *);
691:	void d_mark_dontcache(struct inode *);
3029:	void d_move(struct dentry *, struct dentry *);
2170:	struct dentry *d_obtain_alias(struct inode *);
2191:	struct dentry *d_obtain_root(struct inode *);
1102:	void d_prune_aliases(struct inode *);
2590:	void d_rehash(struct dentry *);
2259:	bool d_same_name(const struct dentry *, const struct dentry *, const struct qstr *);
1915:	void d_set_d_op(struct dentry *, const struct dentry_operations *);
1953:	void d_set_fallthru(struct dentry *);
1501:	int d_set_mounted(struct dentry *);
3136:	struct dentry *d_splice_alias(struct inode *, struct dentry *);
3252:	void d_tmpfile(struct file *, struct inode *);
956:	struct dentry *dget_parent(struct dentry *);
894:	void dput(struct dentry *);
932:	void dput_to_list(struct dentry *, struct list_head *);
3203:	bool is_subdir(struct dentry *, struct dentry *);
1481:	int path_has_submounts(const struct path *);
1275:	long prune_dcache_sb(struct super_block *, struct shrink_control *);
328:	void release_dentry_name_snapshot(struct name_snapshot *);
1691:	void shrink_dcache_for_umount(struct super_block *);
1619:	void shrink_dcache_parent(struct dentry *);
1314:	void shrink_dcache_sb(struct super_block *);
1177:	void shrink_dentry_list(struct list_head *);
313:	void take_dentry_name_snapshot(struct name_snapshot *, struct dentry *);
3344:	void vfs_caches_init(void);
3333:	void vfs_caches_init_early(void);
File fs/devpts/inode.c:
199:	struct pts_fs_info *devpts_acquire(struct file *);
605:	void *devpts_get_priv(struct dentry *);
547:	void devpts_kill_index(struct pts_fs_info *, int);
168:	struct vfsmount *devpts_mntget(struct file *, struct pts_fs_info *);
530:	int devpts_new_index(struct pts_fs_info *);
618:	void devpts_pty_kill(struct dentry *);
562:	struct dentry *devpts_pty_new(struct pts_fs_info *, int, void *);
231:	void devpts_release(struct pts_fs_info *);
File fs/direct-io.c:
1122:	ssize_t __blockdev_direct_IO(struct kiocb *, struct inode *, struct block_device *, struct iov_iter *, get_block_t *, dio_iodone_t *, dio_submit_t *, int);
567:	int sb_init_dio_done_wq(struct super_block *);
File fs/drop_caches.c:
50:	int drop_caches_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
File fs/eventfd.c:
463:	long __arm64_sys_eventfd(const struct pt_regs *);
458:	long __arm64_sys_eventfd2(const struct pt_regs *);
188:	void eventfd_ctx_do_read(struct eventfd_ctx *, __u64 *);
380:	struct eventfd_ctx *eventfd_ctx_fdget(int);
401:	struct eventfd_ctx *eventfd_ctx_fileget(struct file *);
115:	void eventfd_ctx_put(struct eventfd_ctx *);
210:	int eventfd_ctx_remove_wait_queue(struct eventfd_ctx *, wait_queue_entry_t *, __u64 *);
355:	struct file *eventfd_fget(int);
88:	__u64 eventfd_signal(struct eventfd_ctx *, __u64);
46:	__u64 eventfd_signal_mask(struct eventfd_ctx *, __u64, unsigned int);
File fs/eventpoll.c:
2037:	long __arm64_sys_epoll_create(const struct pt_regs *);
2032:	long __arm64_sys_epoll_create1(const struct pt_regs *);
2207:	long __arm64_sys_epoll_ctl(const struct pt_regs *);
2299:	long __arm64_sys_epoll_pwait(const struct pt_regs *);
2310:	long __arm64_sys_epoll_pwait2(const struct pt_regs *);
2265:	long __arm64_sys_epoll_wait(const struct pt_regs *);
2057:	int do_epoll_ctl(int, int, int, struct epoll_event *, bool);
905:	void eventpoll_release_file(struct file *);
File fs/exec.c:
2101:	long __arm64_sys_execve(const struct pt_regs *);
2109:	long __arm64_sys_execveat(const struct pt_regs *);
1212:	char *__get_task_comm(char *, size_t, struct task_struct *);
85:	void __register_binfmt(struct linux_binfmt *, int);
1227:	void __set_task_comm(struct task_struct *, const char *, bool);
1242:	int begin_new_exec(struct linux_binprm *);
1541:	int bprm_change_interp(const char *, struct linux_binprm *);
613:	int copy_string_kernel(const char *, struct linux_binprm *);
1456:	void finalize_exec(struct linux_binprm *);
1965:	int kernel_execve(const char *, const char * const *, const char * const *);
947:	struct file *open_exec(const char *);
109:	bool path_noexec(const struct path *);
1673:	int remove_arg_zero(struct linux_binprm *);
2077:	void set_binfmt(struct linux_binfmt *);
2093:	void set_dumpable(struct mm_struct *, int);
746:	int setup_arg_pages(struct linux_binprm *, unsigned long, int);
1436:	void setup_new_exec(struct linux_binprm *);
95:	void unregister_binfmt(struct linux_binfmt *);
1414:	void would_dump(struct linux_binprm *, struct file *);
File fs/exportfs/expfs.c:
568:	struct dentry *exportfs_decode_fh(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
420:	struct dentry *exportfs_decode_fh_raw(struct vfsmount *, struct fid *, int, int, int (*)(void *, struct dentry *), void *);
396:	int exportfs_encode_fh(struct dentry *, struct fid *, int *, int);
384:	int exportfs_encode_inode_fh(struct inode *, struct fid *, int *, struct inode *);
File fs/fat/cache.c:
358:	int fat_bmap(struct inode *, sector_t, sector_t *, unsigned long *, int, bool);
57:	void fat_cache_destroy(void);
46:	int fat_cache_init(void);
204:	void fat_cache_inval_inode(struct inode *);
225:	int fat_get_cluster(struct inode *, int, int *, int *);
310:	int fat_get_mapped_cluster(struct inode *, sector_t, sector_t, unsigned long *, sector_t *);
File fs/fat/dir.c:
1281:	int fat_add_entries(struct inode *, void *, int, struct fat_slot_info *);
1133:	int fat_alloc_new_dir(struct inode *, struct timespec64 *);
905:	int fat_dir_empty(struct inode *);
890:	int fat_get_dotdot_entry(struct inode *, struct buffer_head **, struct msdos_dir_entry **);
1029:	int fat_remove_entries(struct inode *, struct fat_slot_info *);
951:	int fat_scan(struct inode *, const unsigned char *, struct fat_slot_info *);
975:	int fat_scan_logstart(struct inode *, int, struct fat_slot_info *);
463:	int fat_search_long(struct inode *, const unsigned char *, int, struct fat_slot_info *);
930:	int fat_subdirs(struct inode *);
File fs/fat/fatent.c:
466:	int fat_alloc_clusters(struct inode *, int *, int);
716:	int fat_count_free_clusters(struct super_block *);
289:	void fat_ent_access_init(struct super_block *);
349:	int fat_ent_read(struct inode *, struct fat_entry *, int);
410:	int fat_ent_write(struct inode *, struct fat_entry *, int, int);
554:	int fat_free_clusters(struct inode *, int);
762:	int fat_trim_fs(struct inode *, struct fstrim_range *);
File fs/fat/file.c:
186:	int fat_file_fsync(struct file *, loff_t, loff_t, int);
156:	long fat_generic_ioctl(struct file *, unsigned int, unsigned long);
398:	int fat_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
480:	int fat_setattr(struct user_namespace *, struct dentry *, struct iattr *);
379:	void fat_truncate_blocks(struct inode *, loff_t);
File fs/fat/inode.c:
104:	int fat_add_cluster(struct inode *);
401:	void fat_attach(struct inode *, loff_t);
334:	int fat_block_truncate_page(struct inode *, loff_t);
588:	struct inode *fat_build_inode(struct super_block *, struct msdos_dir_entry *, loff_t);
430:	void fat_detach(struct inode *);
512:	int fat_fill_inode(struct inode *, struct msdos_dir_entry *);
1599:	int fat_fill_super(struct super_block *, void *, int, int, void (*)(struct super_block *));
1927:	int fat_flush_inodes(struct super_block *, struct inode *, struct inode *);
446:	struct inode *fat_iget(struct super_block *, loff_t);
919:	int fat_sync_inode(struct inode *);
File fs/fat/misc.c:
21:	void __fat_fs_error(struct super_block *, int, const char *, ...);
54:	void _fat_msg(struct super_block *, const char *, const char *, ...);
107:	int fat_chain_add(struct inode *, int, int);
68:	int fat_clusters_flush(struct super_block *);
364:	int fat_sync_bhs(struct buffer_head **, int);
204:	void fat_time_fat2unix(struct msdos_sb_info *, struct timespec64 *, __le16, __le16, u8);
243:	void fat_time_unix2fat(struct msdos_sb_info *, struct timespec64 *, __le16 *, __le16 *, u8 *);
287:	struct timespec64 fat_truncate_atime(const struct msdos_sb_info *, const struct timespec64 *);
304:	struct timespec64 fat_truncate_mtime(const struct msdos_sb_info *, const struct timespec64 *);
314:	int fat_truncate_time(struct inode *, struct timespec64 *, int);
341:	int fat_update_time(struct inode *, struct timespec64 *, int);
File fs/fcntl.c:
439:	long __arm64_sys_fcntl(const struct pt_regs *);
106:	void __f_setown(struct file *, struct pid *, enum pid_type, int);
145:	void f_delown(struct file *);
150:	pid_t f_getown(struct file *);
114:	int f_setown(struct file *, unsigned long, int);
888:	struct fasync_struct *fasync_alloc(void);
898:	void fasync_free(struct fasync_struct *);
973:	int fasync_helper(int, struct file *, int, struct fasync_struct **);
910:	struct fasync_struct *fasync_insert_entry(int, struct file *, struct fasync_struct **, struct fasync_struct *);
862:	int fasync_remove_entry(struct file *, struct fasync_struct **);
1010:	void kill_fasync(struct fasync_struct **, int, int);
771:	void send_sigio(struct fown_struct *, int, int);
809:	int send_sigurg(struct fown_struct *);
File fs/fhandle.c:
93:	long __arm64_sys_name_to_handle_at(const struct pt_regs *);
256:	long __arm64_sys_open_by_handle_at(const struct pt_regs *);
File fs/file.c:
1269:	long __arm64_sys_dup(const struct pt_regs *);
1254:	long __arm64_sys_dup2(const struct pt_regs *);
1249:	long __arm64_sys_dup3(const struct pt_regs *);
796:	struct file *__close_fd_get_file(unsigned int);
729:	int __close_range(unsigned int, unsigned int, unsigned int);
1052:	void __f_unlock_pos(struct file *);
1027:	unsigned long __fdget(unsigned int);
1038:	unsigned long __fdget_pos(unsigned int);
1033:	unsigned long __fdget_raw(unsigned int);
557:	int __get_unused_fd_flags(unsigned int, unsigned long);
1169:	int __receive_fd(struct file *, int *, unsigned int);
653:	int close_fd(unsigned int);
805:	struct file *close_fd_get_file(unsigned int);
817:	void do_close_on_exec(struct files_struct *);
316:	struct files_struct *dup_fd(struct files_struct *, unsigned int, int *);
456:	void exit_files(struct task_struct *);
1284:	int f_dupfd(unsigned int, struct file *, unsigned int);
602:	void fd_install(unsigned int, struct file *);
924:	struct file *fget(unsigned int);
930:	struct file *fget_raw(unsigned int);
936:	struct file *fget_task(struct task_struct *, unsigned int);
1076:	bool get_close_on_exec(unsigned int);
562:	int get_unused_fd_flags(unsigned int);
1298:	int iterate_fd(struct files_struct *, unsigned int, int (*)(const void *, struct file *, unsigned int), const void *);
444:	void put_files_struct(struct files_struct *);
576:	void put_unused_fd(unsigned int);
1209:	int receive_fd(struct file *, unsigned int);
1195:	int receive_fd_replace(int, struct file *, unsigned int);
1132:	int replace_fd(unsigned int, struct file *, unsigned int);
1063:	void set_close_on_exec(unsigned int, int);
948:	struct file *task_lookup_fd_rcu(struct task_struct *, unsigned int);
963:	struct file *task_lookup_next_fd_rcu(struct task_struct *, unsigned int *);
File fs/file_table.c:
398:	void __fput_sync(struct file *);
170:	struct file *alloc_empty_file(int, const struct cred *);
207:	struct file *alloc_empty_file_noaccount(int, const struct cred *);
281:	struct file *alloc_file_clone(struct file *, int, const struct file_operations *);
254:	struct file *alloc_file_pseudo(struct inode *, struct vfsmount *, const char *, int, const struct file_operations *);
410:	void files_init(void);
421:	void files_maxfiles_init(void);
361:	void flush_delayed_fput(void);
369:	void fput(struct file *);
73:	unsigned long get_max_files(void);
File fs/filesystems.c:
191:	long __arm64_sys_sysfs(const struct pt_regs *);
38:	struct file_system_type *get_filesystem(struct file_system_type *);
273:	struct file_system_type *get_fs_type(const char *);
212:	int list_bdev_fs_names(char *, size_t);
44:	void put_filesystem(struct file_system_type *);
72:	int register_filesystem(struct file_system_type *);
108:	int unregister_filesystem(struct file_system_type *);
File fs/fs-writeback.c:
240:	void __inode_attach_wb(struct inode *, struct page *);
2387:	void __mark_inode_dirty(struct inode *, int);
1016:	int cgroup_writeback_by_id(u64, int, enum wb_reason, struct wb_completion *);
1097:	void cgroup_writeback_umount(void);
624:	bool cleanup_offline_cgwb(struct bdi_writeback *);
2349:	int dirtytime_interval_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1235:	void inode_io_list_del(struct inode *);
1481:	void inode_wait_for_writeback(struct inode *);
1272:	void sb_clear_inode_writeback(struct inode *);
1254:	void sb_mark_inode_writeback(struct inode *);
2768:	int sync_inode_metadata(struct inode *, int);
2699:	void sync_inodes_sb(struct super_block *);
2682:	void try_to_writeback_inodes_sb(struct super_block *, enum wb_reason);
2293:	void wakeup_flusher_threads(enum wb_reason);
2282:	void wakeup_flusher_threads_bdi(struct backing_dev_info *, enum wb_reason);
1222:	void wb_start_background_writeback(struct bdi_writeback *);
189:	void wb_wait_for_completion(struct wb_completion *);
2229:	void wb_workfn(struct work_struct *);
859:	void wbc_account_cgroup_owner(struct writeback_control *, struct page *, size_t);
693:	void wbc_attach_and_unlock_inode(struct writeback_control *, struct inode *);
763:	void wbc_detach_inode(struct writeback_control *);
2742:	int write_inode_now(struct inode *, int);
2669:	void writeback_inodes_sb(struct super_block *, enum wb_reason);
2652:	void writeback_inodes_sb_nr(struct super_block *, unsigned long, enum wb_reason);
File fs/fs_context.c:
325:	void fc_drop_locked(struct fs_context *);
699:	int finish_clean_context(struct fs_context *);
301:	struct fs_context *fs_context_for_mount(struct file_system_type *, unsigned int);
309:	struct fs_context *fs_context_for_reconfigure(struct dentry *, unsigned int, unsigned int);
318:	struct fs_context *fs_context_for_submount(struct file_system_type *, struct dentry *);
201:	int generic_parse_monolithic(struct fs_context *, void *);
385:	void logfc(struct fc_log *, const char *, char, const char *, ...);
659:	int parse_monolithic_mount_data(struct fs_context *, void *);
457:	void put_fs_context(struct fs_context *);
683:	void vfs_clean_context(struct fs_context *);
339:	struct fs_context *vfs_dup_fs_context(struct fs_context *);
127:	int vfs_parse_fs_param(struct fs_context *, struct fs_parameter *);
94:	int vfs_parse_fs_param_source(struct fs_context *, struct fs_parameter *);
166:	int vfs_parse_fs_string(struct fs_context *, const char *, const char *, size_t);
File fs/fs_parser.c:
103:	int __fs_parse(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
144:	int fs_lookup_param(struct fs_context *, struct fs_parameter *, bool, unsigned int, struct path *);
279:	int fs_param_is_blob(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
311:	int fs_param_is_blockdev(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
197:	int fs_param_is_bool(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
253:	int fs_param_is_enum(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
288:	int fs_param_is_fd(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
318:	int fs_param_is_path(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
227:	int fs_param_is_s32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
269:	int fs_param_is_string(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
213:	int fs_param_is_u32(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
240:	int fs_param_is_u64(struct p_log *, const struct fs_parameter_spec *, struct fs_parameter *, struct fs_parse_result *);
41:	int lookup_constant(const struct constant_table *, const char *, int);
File fs/fs_pin.c:
85:	void group_pin_kill(struct hlist_head *);
71:	void mnt_pin_kill(struct mount *);
22:	void pin_insert(struct fs_pin *, struct vfsmount *);
30:	void pin_kill(struct fs_pin *);
10:	void pin_remove(struct fs_pin *);
File fs/fs_struct.c:
58:	void chroot_fs_refs(const struct path *, const struct path *);
112:	struct fs_struct *copy_fs_struct(struct fs_struct *);
156:	int current_umask(void);
95:	void exit_fs(struct task_struct *);
88:	void free_fs_struct(struct fs_struct *);
34:	void set_fs_pwd(struct fs_struct *, const struct path *);
15:	void set_fs_root(struct fs_struct *, const struct path *);
133:	int unshare_fs_struct(void);
File fs/fs_types.c:
37:	unsigned char fs_ftype_to_dtype(unsigned int);
101:	unsigned char fs_umode_to_dtype(umode_t);
77:	unsigned char fs_umode_to_ftype(umode_t);
File fs/fsopen.c:
314:	long __arm64_sys_fsconfig(const struct pt_regs *);
115:	long __arm64_sys_fsopen(const struct pt_regs *);
158:	long __arm64_sys_fspick(const struct pt_regs *);
File fs/hugetlbfs/inode.c:
235:	unsigned long generic_hugetlb_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1576:	struct file *hugetlb_file_setup(const char *, size_t, vm_flags_t, int, int);
File fs/init.c:
44:	int init_chdir(const char *);
100:	int init_chmod(const char *, umode_t);
82:	int init_chown(const char *, uid_t, gid_t, int);
59:	int init_chroot(const char *);
260:	int init_dup(struct file *);
113:	int init_eaccess(const char *);
166:	int init_link(const char *, const char *);
223:	int init_mkdir(const char *, umode_t);
141:	int init_mknod(const char *, umode_t, unsigned int);
16:	int init_mount(const char *, const char *, const char *, unsigned long, void *);
242:	int init_rmdir(const char *);
126:	int init_stat(const char *, struct kstat *, int);
201:	int init_symlink(const char *, const char *);
30:	int init_umount(const char *, int);
218:	int init_unlink(const char *);
247:	int init_utimes(char *, struct timespec64 *);
File fs/inode.c:
280:	void __destroy_inode(struct inode *);
440:	void __iget(struct inode *);
526:	void __insert_inode_hash(struct inode *, unsigned long);
544:	void __remove_inode_hash(struct inode *);
404:	void address_space_init_once(struct address_space *);
1885:	bool atime_needs_update(const struct path *, struct inode *);
1793:	int bmap(struct inode *, sector_t *);
603:	void clear_inode(struct inode *);
345:	void clear_nlink(struct inode *);
2444:	struct timespec64 current_time(struct inode *);
1956:	int dentry_needs_remove_privs(struct user_namespace *, struct dentry *);
1093:	void discard_new_inode(struct inode *);
328:	void drop_nlink(struct inode *);
554:	void dump_mapping(const struct address_space *);
711:	void evict_inodes(struct super_block *);
2144:	int file_modified(struct file *);
2023:	int file_remove_privs(struct file *);
2078:	int file_update_time(struct file *);
1608:	struct inode *find_inode_by_ino_rcu(struct super_block *, unsigned long);
1522:	struct inode *find_inode_nowait(struct super_block *, unsigned long, int (*)(struct inode *, unsigned long, void *), void *);
1570:	struct inode *find_inode_rcu(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
238:	void free_inode_nonrcu(struct inode *);
1691:	int generic_delete_inode(struct inode *);
1838:	int generic_update_time(struct inode *, struct timespec64 *, int);
982:	unsigned int get_next_ino(void);
93:	long get_nr_dirty_inodes(void);
1234:	struct inode *iget5_locked(struct super_block *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
1267:	struct inode *iget_locked(struct super_block *, unsigned long);
1386:	struct inode *igrab(struct inode *);
448:	void ihold(struct inode *);
1477:	struct inode *ilookup(struct super_block *, unsigned long);
1452:	struct inode *ilookup5(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
1421:	struct inode *ilookup5_nowait(struct super_block *, unsigned long, int (*)(struct inode *, void *), void *);
2471:	bool in_group_or_capable(struct user_namespace *, const struct inode *, vfsgid_t);
384:	void inc_nlink(struct inode *);
2260:	void init_special_inode(struct inode *, umode_t, dev_t);
476:	void inode_add_lru(struct inode *);
2366:	void inode_dio_wait(struct inode *);
2234:	void inode_init(void);
156:	int inode_init_always(struct super_block *, struct inode *);
2214:	void inode_init_early(void);
416:	void inode_init_once(struct inode *);
2293:	void inode_init_owner(struct user_namespace *, struct inode *, const struct inode *, umode_t);
1161:	struct inode *inode_insert5(struct inode *, unsigned long, int (*)(struct inode *, void *), int (*)(struct inode *, void *), void *);
2167:	int inode_needs_sync(struct inode *);
2397:	void inode_nohighmem(struct inode *);
2323:	bool inode_owner_or_capable(struct user_namespace *, const struct inode *);
491:	void inode_sb_list_add(struct inode *);
2389:	void inode_set_flags(struct inode *, unsigned int, unsigned int);
1868:	int inode_update_time(struct inode *, struct timespec64 *, int);
1627:	int insert_inode_locked(struct inode *);
1674:	int insert_inode_locked4(struct inode *, unsigned long, int (*)(struct inode *, void *), void *);
761:	int invalidate_inodes(struct super_block *, bool);
1759:	void iput(struct inode *);
1361:	ino_t iunique(struct super_block *, ino_t);
2161:	int kiocb_modified(struct kiocb *);
1115:	void lock_two_nondirectories(struct inode *, struct inode *);
2495:	umode_t mode_strip_sgid(struct user_namespace *, const struct inode *, umode_t);
1040:	struct inode *new_inode(struct super_block *);
1016:	struct inode *new_inode_pseudo(struct super_block *);
889:	long prune_icache_sb(struct super_block *, struct shrink_control *);
362:	void set_nlink(struct inode *, unsigned int);
2412:	struct timespec64 timestamp_truncate(struct timespec64, struct inode *);
1920:	void touch_atime(const struct path *);
1081:	void unlock_new_inode(struct inode *);
1132:	void unlock_two_nondirectories(struct inode *, struct inode *);
File fs/ioctl.c:
856:	long __arm64_sys_ioctl(const struct pt_regs *);
543:	int copy_fsxattr_to_user(const struct fileattr *, struct fsxattr *);
115:	int fiemap_fill_next_extent(struct fiemap_extent_info *, u64, u64, u64, u32);
167:	int fiemap_prep(struct inode *, struct fiemap_extent_info *, u64, u64 *, u32);
494:	void fileattr_fill_flags(struct fileattr *, u32);
464:	void fileattr_fill_xflags(struct fileattr *, u32);
525:	int vfs_fileattr_get(struct dentry *, struct fileattr *);
668:	int vfs_fileattr_set(struct user_namespace *, struct dentry *, struct fileattr *);
44:	long vfs_ioctl(struct file *, unsigned int, unsigned long);
File fs/kernel_read_file.c:
35:	ssize_t kernel_read_file(struct file *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
174:	ssize_t kernel_read_file_from_fd(int, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
127:	ssize_t kernel_read_file_from_path(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
147:	ssize_t kernel_read_file_from_path_initns(const char *, loff_t, void **, size_t, size_t *, enum kernel_read_file_id);
File fs/kernfs/dir.c:
1369:	void kernfs_activate(struct kernfs_node *);
746:	int kernfs_add_one(struct kernfs_node *);
1514:	void kernfs_break_active_protection(struct kernfs_node *);
1023:	struct kernfs_node *kernfs_create_dir_ns(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, void *, const void *);
1057:	struct kernfs_node *kernfs_create_empty_dir(struct kernfs_node *, const char *);
934:	struct kernfs_root *kernfs_create_root(struct kernfs_syscall_ops *, unsigned int, void *);
989:	void kernfs_destroy_root(struct kernfs_root *);
696:	struct kernfs_node *kernfs_find_and_get_node_by_id(struct kernfs_root *, u64);
885:	struct kernfs_node *kernfs_find_and_get_ns(struct kernfs_node *, const char *, const void *);
522:	void kernfs_get(struct kernfs_node *);
433:	struct kernfs_node *kernfs_get_active(struct kernfs_node *);
295:	struct kernfs_node *kernfs_get_parent(struct kernfs_node *);
197:	int kernfs_name(struct kernfs_node *, char *, size_t);
669:	struct kernfs_node *kernfs_new_node(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, unsigned int);
593:	struct kernfs_node *kernfs_node_from_dentry(struct dentry *);
224:	int kernfs_path_from_node(struct kernfs_node *, struct kernfs_node *, char *, size_t);
537:	void kernfs_put(struct kernfs_node *);
453:	void kernfs_put_active(struct kernfs_node *);
1486:	void kernfs_remove(struct kernfs_node *);
1644:	int kernfs_remove_by_name_ns(struct kernfs_node *, const char *, const void *);
1582:	bool kernfs_remove_self(struct kernfs_node *);
1683:	int kernfs_rename_ns(struct kernfs_node *, struct kernfs_node *, const char *, const void *);
1006:	struct kernfs_node *kernfs_root_to_node(struct kernfs_root *);
1395:	void kernfs_show(struct kernfs_node *, bool);
1538:	void kernfs_unbreak_active_protection(struct kernfs_node *);
911:	struct kernfs_node *kernfs_walk_and_get_ns(struct kernfs_node *, const char *, const void *);
243:	void pr_cont_kernfs_name(struct kernfs_node *);
261:	void pr_cont_kernfs_path(struct kernfs_node *);
File fs/kernfs/file.c:
1033:	struct kernfs_node *__kernfs_create_file(struct kernfs_node *, const char *, umode_t, kuid_t, kgid_t, loff_t, const struct kernfs_ops *, void *, const void *, struct lock_class_key *);
832:	void kernfs_drain_open_files(struct kernfs_node *);
876:	__poll_t kernfs_generic_poll(struct kernfs_open_file *, poll_table *);
975:	void kernfs_notify(struct kernfs_node *);
813:	bool kernfs_should_drain_open_files(struct kernfs_node *);
File fs/kernfs/inode.c:
68:	int __kernfs_setattr(struct kernfs_node *, const struct iattr *);
266:	void kernfs_evict_inode(struct inode *);
248:	struct inode *kernfs_get_inode(struct super_block *, struct kernfs_node *);
184:	int kernfs_iop_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
139:	ssize_t kernfs_iop_listxattr(struct dentry *, char *, size_t);
275:	int kernfs_iop_permission(struct user_namespace *, struct inode *, int);
110:	int kernfs_iop_setattr(struct user_namespace *, struct dentry *, struct iattr *);
99:	int kernfs_setattr(struct kernfs_node *, const struct iattr *);
296:	int kernfs_xattr_get(struct kernfs_node *, const char *, void *, size_t);
306:	int kernfs_xattr_set(struct kernfs_node *, const char *, const void *, size_t, int);
File fs/kernfs/mount.c:
363:	void kernfs_free_fs_context(struct fs_context *);
321:	int kernfs_get_tree(struct fs_context *);
411:	void kernfs_init(void);
378:	void kernfs_kill_sb(struct super_block *);
198:	struct dentry *kernfs_node_dentry(struct kernfs_node *, struct super_block *);
159:	struct kernfs_root *kernfs_root_from_sb(struct super_block *);
303:	const void *kernfs_super_ns(struct super_block *);
File fs/kernfs/symlink.c:
25:	struct kernfs_node *kernfs_create_link(struct kernfs_node *, const char *, struct kernfs_node *);
File fs/libfs.c:
1125:	int __generic_file_fsync(struct file *, loff_t, loff_t, int);
1237:	struct inode *alloc_anon_inode(struct super_block *);
55:	int always_delete_dentry(const struct dentry *);
89:	int dcache_dir_close(struct inode *, struct file *);
138:	loff_t dcache_dir_lseek(struct file *, loff_t, int);
81:	int dcache_dir_open(struct inode *, struct file *);
189:	int dcache_readdir(struct file *, struct dir_context *);
1189:	int generic_check_addressable(unsigned int, u64);
1060:	struct dentry *generic_fh_to_dentry(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1093:	struct dentry *generic_fh_to_parent(struct super_block *, struct fid *, int, int, struct inode *(*)(struct super_block *, u64, u32));
1167:	int generic_file_fsync(struct file *, loff_t, loff_t, int);
226:	ssize_t generic_read_dir(struct file *, char *, size_t, loff_t *);
1512:	void generic_set_encrypted_ci_d_ops(struct dentry *);
370:	struct pseudo_fs_context *init_pseudo(struct fs_context *, unsigned long);
1558:	bool inode_maybe_inc_iversion(struct inode *, bool);
1382:	bool is_empty_dir_inode(struct inode *);
1231:	void kfree_link(void *);
1366:	void make_empty_dir_inode(struct inode *);
827:	ssize_t memory_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
1218:	ssize_t noop_direct_IO(struct kiocb *, struct iov_iter *);
1212:	int noop_fsync(struct file *, loff_t, loff_t, int);
930:	int simple_attr_open(struct inode *, struct file *, int (*)(void *, u64 *), int (*)(void *, u64), const char *);
960:	ssize_t simple_attr_read(struct file *, char *, size_t, loff_t *);
952:	int simple_attr_release(struct inode *, struct file *);
1034:	ssize_t simple_attr_write(struct file *, const char *, size_t, loff_t *);
1041:	ssize_t simple_attr_write_signed(struct file *, const char *, size_t, loff_t *);
408:	int simple_empty(struct dentry *);
644:	int simple_fill_super(struct super_block *, unsigned long, const struct tree_descr *);
1298:	const char *simple_get_link(struct dentry *, struct inode *, struct delayed_call *);
31:	int simple_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
395:	int simple_link(struct dentry *, struct inode *, struct dentry *);
70:	struct dentry *simple_lookup(struct inode *, struct dentry *, unsigned int);
1277:	int simple_nosetlease(struct file *, long, struct file_lock **, void **);
387:	int simple_open(struct inode *, struct file *);
710:	int simple_pin_fs(struct file_system_type *, struct vfsmount **, int *);
757:	ssize_t simple_read_from_buffer(void *, size_t, loff_t *, const void *, size_t);
269:	void simple_recursive_removal(struct dentry *, void (*)(struct dentry *));
731:	void simple_release_fs(struct vfsmount **, int *);
476:	int simple_rename(struct user_namespace *, struct inode *, struct dentry *, struct inode *, struct dentry *, unsigned int);
452:	int simple_rename_exchange(struct inode *, struct dentry *, struct inode *, struct dentry *);
440:	int simple_rmdir(struct inode *, struct dentry *);
525:	int simple_setattr(struct user_namespace *, struct dentry *, struct iattr *);
42:	int simple_statfs(struct dentry *, struct kstatfs *);
867:	char *simple_transaction_get(struct file *, const char *, size_t);
899:	ssize_t simple_transaction_read(struct file *, char *, size_t, loff_t *);
909:	int simple_transaction_release(struct inode *, struct file *);
852:	void simple_transaction_set(struct file *, size_t);
429:	int simple_unlink(struct inode *, struct dentry *);
552:	int simple_write_begin(struct file *, struct address_space *, loff_t, unsigned int, struct page **, void **);
792:	ssize_t simple_write_to_buffer(void *, size_t, loff_t *, const void *, size_t);
File fs/locks.c:
2084:	long __arm64_sys_flock(const struct pt_regs *);
1471:	int __break_lease(struct inode *, unsigned int, unsigned int);
1629:	int fcntl_getlease(struct file *);
2224:	int fcntl_getlk(struct file *, unsigned int, struct flock *);
2014:	int fcntl_setlease(unsigned int, struct file *, long);
2349:	int fcntl_setlk(unsigned int, struct file *, unsigned int, struct flock *);
1861:	int generic_setlease(struct file *, long, struct file_lock **, void **);
1585:	void lease_get_mtime(struct inode *, struct timespec64 *);
1373:	int lease_modify(struct file_lock *, int, struct list_head *);
1914:	int lease_register_notifier(struct notifier_block *);
1920:	void lease_unregister_notifier(struct notifier_block *);
268:	struct file_lock *locks_alloc_lock(void);
361:	void locks_copy_conflock(struct file_lock *, struct file_lock *);
380:	void locks_copy_lock(struct file_lock *, struct file_lock *);
694:	int locks_delete_block(struct file_lock *);
332:	void locks_free_lock(struct file_lock *);
248:	void locks_free_lock_context(struct inode *);
351:	void locks_init_lock(struct file_lock *);
2052:	int locks_lock_inode_wait(struct inode *, struct file_lock *);
312:	bool locks_owner_has_blockers(struct file_lock_context *, fl_owner_t);
279:	void locks_release_private(struct file_lock *);
2635:	void locks_remove_file(struct file *);
2554:	void locks_remove_posix(struct file *, fl_owner_t);
1330:	int posix_lock_file(struct file *, struct file_lock *, struct file_lock *);
886:	void posix_test_lock(struct file *, struct file_lock *);
2861:	void show_fd_locks(struct seq_file *, struct file *, struct files_struct *);
2666:	int vfs_cancel_lock(struct file *, struct file_lock *);
2682:	bool vfs_inode_has_locks(struct inode *);
2297:	int vfs_lock_file(struct file *, unsigned int, struct file_lock *, struct file_lock *);
1968:	int vfs_setlease(struct file *, long, struct file_lock **, void **);
2147:	int vfs_test_lock(struct file *, struct file_lock *);
File fs/mpage.c:
443:	void clean_page_buffers(struct page *);
371:	int mpage_read_folio(struct folio *, get_block_t *);
349:	void mpage_readahead(struct readahead_control *, get_block_t *);
654:	int mpage_writepages(struct address_space *, struct writeback_control *, get_block_t *);
File fs/namei.c:
4632:	long __arm64_sys_link(const struct pt_regs *);
4625:	long __arm64_sys_linkat(const struct pt_regs *);
4079:	long __arm64_sys_mkdir(const struct pt_regs *);
4074:	long __arm64_sys_mkdirat(const struct pt_regs *);
3996:	long __arm64_sys_mknod(const struct pt_regs *);
3990:	long __arm64_sys_mknodat(const struct pt_regs *);
4974:	long __arm64_sys_rename(const struct pt_regs *);
4967:	long __arm64_sys_renameat(const struct pt_regs *);
4960:	long __arm64_sys_renameat2(const struct pt_regs *);
4199:	long __arm64_sys_rmdir(const struct pt_regs *);
4450:	long __arm64_sys_symlink(const struct pt_regs *);
4444:	long __arm64_sys_symlinkat(const struct pt_regs *);
4366:	long __arm64_sys_unlink(const struct pt_regs *);
4356:	long __arm64_sys_unlinkat(const struct pt_regs *);
2883:	int __check_sticky(struct user_namespace *, struct inode *, struct inode *);
3750:	struct file *do_file_open_root(const struct path *, const char *, const struct open_flags *);
3733:	struct file *do_filp_open(int, struct filename *, const struct open_flags *);
4553:	int do_linkat(int, struct filename *, int, struct filename *, int);
4043:	int do_mkdirat(int, struct filename *, umode_t);
4818:	int do_renameat2(int, struct filename *, int, struct filename *, unsigned int);
4139:	int do_rmdir(int, struct filename *);
4408:	int do_symlinkat(struct filename *, int, struct filename *);
4280:	int do_unlinkat(int, struct filename *);
3854:	void done_path_create(struct path *, struct dentry *);
2495:	int filename_lookup(int, struct filename *, unsigned int, struct path *, struct path *);
1461:	int follow_down(struct path *);
1440:	int follow_down_one(struct path *);
1267:	int follow_up(struct path *);
2108:	unsigned int full_name_hash(const void *, const char *, unsigned int);
396:	int generic_permission(struct user_namespace *, struct inode *, int);
216:	struct filename *getname(const char *);
129:	struct filename *getname_flags(const char *, int, int *);
222:	struct filename *getname_kernel(const char *);
208:	struct filename *getname_uflags(const char *, int);
2129:	u64 hashlen_string(const void *, const char *);
500:	int inode_permission(struct user_namespace *, struct inode *, int);
2590:	int kern_path(const char *, unsigned int, struct path *);
3843:	struct dentry *kern_path_create(int, const char *, struct path *, unsigned int);
2581:	struct dentry *kern_path_locked(const char *, struct path *);
2985:	struct dentry *lock_rename(struct dentry *, struct dentry *);
2727:	struct dentry *lookup_one(struct user_namespace *, const char *, struct dentry *, int);
2698:	struct dentry *lookup_one_len(const char *, struct dentry *, int);
2823:	struct dentry *lookup_one_len_unlocked(const char *, struct dentry *, int);
2797:	struct dentry *lookup_one_positive_unlocked(struct user_namespace *, const char *, struct dentry *, int);
2758:	struct dentry *lookup_one_unlocked(struct user_namespace *, const char *, struct dentry *, int);
2838:	struct dentry *lookup_positive_unlocked(const char *, struct dentry *, int);
1181:	int may_linkat(struct user_namespace *, const struct path *);
3143:	bool may_open_dev(const struct path *);
989:	int nd_jump_link(const struct path *);
5062:	const char *page_get_link(struct dentry *, struct inode *, struct delayed_call *);
5091:	void page_put_link(void *);
5097:	int page_readlink(struct dentry *, char *, int);
5108:	int page_symlink(struct inode *, const char *, int);
543:	void path_get(const struct path *);
2846:	int path_pts(struct path *);
556:	void path_put(const struct path *);
257:	void putname(struct filename *);
4980:	int readlink_copy(char *, int, const char *);
2672:	struct dentry *try_lookup_one_len(const char *, struct dentry *, int);
3016:	void unlock_rename(struct dentry *, struct dentry *);
2872:	int user_path_at_empty(int, const char *, unsigned int, struct path *, int *);
3863:	struct dentry *user_path_create(int, const char *, struct path *, unsigned int);
3101:	int vfs_create(struct user_namespace *, struct inode *, struct dentry *, umode_t, bool);
5047:	const char *vfs_get_link(struct dentry *, struct delayed_call *);
4481:	int vfs_link(struct dentry *, struct user_namespace *, struct inode *, struct dentry *, struct inode **);
4016:	int vfs_mkdir(struct user_namespace *, struct inode *, struct dentry *, umode_t);
3890:	int vfs_mknod(struct user_namespace *, struct inode *, struct dentry *, umode_t, dev_t);
3122:	int vfs_mkobj(struct dentry *, umode_t, int (*)(struct dentry *, umode_t, void *), void *);
2609:	int vfs_path_lookup(struct dentry *, struct vfsmount *, const char *, unsigned int, struct path *);
5005:	int vfs_readlink(struct dentry *, char *, int);
4682:	int vfs_rename(struct renamedata *);
4098:	int vfs_rmdir(struct user_namespace *, struct inode *, struct dentry *);
4386:	int vfs_symlink(struct user_namespace *, struct inode *, struct dentry *, const char *);
3638:	struct file *vfs_tmpfile_open(struct user_namespace *, const struct path *, umode_t, int, const struct cred *);
4229:	int vfs_unlink(struct user_namespace *, struct inode *, struct dentry *, struct inode **);
File fs/namespace.c:
3742:	long __arm64_sys_fsmount(const struct pt_regs *);
3674:	long __arm64_sys_mount(const struct pt_regs *);
4437:	long __arm64_sys_mount_setattr(const struct pt_regs *);
3871:	long __arm64_sys_move_mount(const struct pt_regs *);
2609:	long __arm64_sys_open_tree(const struct pt_regs *);
3974:	long __arm64_sys_pivot_root(const struct pt_regs *);
1933:	long __arm64_sys_umount(const struct pt_regs *);
1839:	void __detach_mounts(struct dentry *);
852:	bool __is_local_mountpoint(struct dentry *);
734:	int __legitimize_mnt(struct vfsmount *, unsigned int);
779:	struct mount *__lookup_mnt(struct vfsmount *, struct dentry *);
568:	void __mnt_drop_write(struct vfsmount *);
590:	void __mnt_drop_write_file(struct file *);
384:	bool __mnt_is_readonly(struct vfsmount *);
449:	int __mnt_want_write(struct vfsmount *);
525:	int __mnt_want_write_file(struct file *);
2116:	struct vfsmount *clone_private_mount(const struct path *);
2047:	struct vfsmount *collect_mounts(const struct path *);
3557:	struct mnt_namespace *copy_mnt_ns(unsigned long, struct mnt_namespace *, struct user_namespace *, struct fs_struct *);
1980:	struct mount *copy_tree(struct mount *, struct dentry *, int);
2217:	int count_mounts(struct mnt_namespace *, struct mount *);
4602:	bool current_chrooted(void);
2065:	void dissolve_on_fput(struct vfsmount *);
3479:	long do_mount(const char *, const char *, const char *, unsigned long, void *);
2083:	void drop_collected_mounts(struct vfsmount *);
1147:	struct vfsmount *fc_mount(struct fs_context *);
3153:	int finish_automount(struct vfsmount *, const struct path *);
1962:	struct ns_common *from_mnt_ns(struct mnt_namespace *);
3929:	bool is_path_reachable(struct mount *, struct dentry *, const struct path *);
2148:	int iterate_mounts(int (*)(struct vfsmount *, void *), void *, struct vfsmount *);
4558:	struct vfsmount *kern_mount(struct file_system_type *);
4573:	void kern_unmount(struct vfsmount *);
4584:	void kern_unmount_array(struct vfsmount **, unsigned int);
806:	struct vfsmount *lookup_mnt(const struct path *);
3243:	void mark_mounts_for_expiry(struct list_head *);
1868:	bool may_mount(void);
1571:	int may_umount(struct vfsmount *);
1534:	int may_umount_tree(struct vfsmount *);
1045:	void mnt_change_mountpoint(struct mount *, struct mountpoint *, struct mount *);
1430:	struct vfsmount *mnt_clone_internal(const struct path *);
1516:	void mnt_cursor_del(struct mnt_namespace *, struct mount *);
583:	void mnt_drop_write(struct vfsmount *);
596:	void mnt_drop_write_file(struct file *);
197:	int mnt_get_count(struct mount *);
227:	struct user_namespace *mnt_idmap_owner(const struct mnt_idmap *);
4515:	void mnt_init(void);
4718:	bool mnt_may_suid(struct vfsmount *);
174:	void mnt_release_group_id(struct mount *);
3228:	void mnt_set_expiry(struct vfsmount *, struct list_head *);
1015:	void mnt_set_mountpoint(struct mount *, struct mountpoint *, struct mount *);
247:	struct user_namespace *mnt_user_ns(const struct vfsmount *);
504:	int mnt_want_write(struct vfsmount *);
548:	int mnt_want_write_file(struct file *);
1392:	struct vfsmount *mntget(struct vfsmount *);
1380:	void mntput(struct vfsmount *);
3637:	struct dentry *mount_subtree(struct vfsmount *, const char *);
4597:	bool our_mnt(struct vfsmount *);
1411:	bool path_is_mountpoint(const struct path *);
3939:	bool path_is_under(const struct path *, const struct path *);
3400:	int path_mount(const char *, struct path *, const char *, unsigned long, void *);
1900:	int path_umount(struct path *, int);
4550:	void put_mnt_ns(struct mnt_namespace *);
685:	int sb_prepare_remount_readonly(struct super_block *);
1120:	struct vfsmount *vfs_create_mount(struct fs_context *);
1158:	struct vfsmount *vfs_kern_mount(struct file_system_type *, int, const char *, void *);
1189:	struct vfsmount *vfs_submount(const struct dentry *, struct file_system_type *, const char *, void *);
File fs/nls/nls_base.c:
235:	int __register_nls(struct nls_table *, struct module *);
291:	struct nls_table *load_nls(char *);
532:	struct nls_table *load_nls_default(void);
296:	void unload_nls(struct nls_table *);
258:	int unregister_nls(struct nls_table *);
186:	int utf16s_to_utf8s(const wchar_t *, int, enum utf16_endian, u8 *, int);
86:	int utf32_to_utf8(unicode_t, u8 *, int);
55:	int utf8_to_utf32(const u8 *, int, unicode_t *);
132:	int utf8s_to_utf16s(const u8 *, int, enum utf16_endian, wchar_t *, int);
File fs/nsfs.c:
217:	int ns_get_name(char *, size_t, struct task_struct *, const struct proc_ns_operations *);
136:	int ns_get_path(struct path *, struct task_struct *, const struct proc_ns_operations *);
109:	int ns_get_path_cb(struct path *, ns_get_path_helper_t *, void *);
263:	bool ns_match(const struct ns_common *, dev_t, ino_t);
300:	void nsfs_init(void);
147:	int open_related_ns(struct ns_common *, struct ns_common *(*)(struct ns_common *));
237:	struct file *proc_ns_fget(int);
232:	bool proc_ns_file(const struct file *);
File fs/open.c:
503:	long __arm64_sys_access(const struct pt_regs *);
508:	long __arm64_sys_chdir(const struct pt_regs *);
661:	long __arm64_sys_chmod(const struct pt_regs *);
785:	long __arm64_sys_chown(const struct pt_regs *);
556:	long __arm64_sys_chroot(const struct pt_regs *);
1437:	long __arm64_sys_close(const struct pt_regs *);
1462:	long __arm64_sys_close_range(const struct pt_regs *);
1396:	long __arm64_sys_creat(const struct pt_regs *);
492:	long __arm64_sys_faccessat(const struct pt_regs *);
497:	long __arm64_sys_faccessat2(const struct pt_regs *);
352:	long __arm64_sys_fallocate(const struct pt_regs *);
534:	long __arm64_sys_fchdir(const struct pt_regs *);
625:	long __arm64_sys_fchmod(const struct pt_regs *);
655:	long __arm64_sys_fchmodat(const struct pt_regs *);
821:	long __arm64_sys_fchown(const struct pt_regs *);
779:	long __arm64_sys_fchownat(const struct pt_regs *);
202:	long __arm64_sys_ftruncate(const struct pt_regs *);
790:	long __arm64_sys_lchown(const struct pt_regs *);
1330:	long __arm64_sys_open(const struct pt_regs *);
1337:	long __arm64_sys_openat(const struct pt_regs *);
1345:	long __arm64_sys_openat2(const struct pt_regs *);
144:	long __arm64_sys_truncate(const struct pt_regs *);
1472:	long __arm64_sys_vhangup(const struct pt_regs *);
1118:	int build_open_flags(const struct open_how *, struct open_flags *);
1102:	struct open_how build_open_how(int, umode_t);
589:	int chmod_common(const struct path *, umode_t);
702:	int chown_common(const struct path *, uid_t, gid_t);
1056:	struct file *dentry_create(const struct path *, int, umode_t, const struct cred *);
1016:	struct file *dentry_open(const struct path *, int, const struct cred *);
747:	int do_fchownat(int, const char *, uid_t, gid_t, int);
156:	long do_sys_ftruncate(unsigned int, loff_t, int);
1323:	long do_sys_open(int, const char *, int, umode_t);
122:	long do_sys_truncate(const char *, loff_t);
39:	int do_truncate(struct user_namespace *, struct dentry *, loff_t, unsigned int, struct file *);
1248:	struct file *file_open_name(struct filename *, int, umode_t);
1282:	struct file *file_open_root(const struct path *, const char *, int, umode_t);
998:	char *file_path(struct file *, char *, int);
1410:	int filp_close(struct file *, fl_owner_t);
1269:	struct file *filp_open(const char *, int, umode_t);
991:	int finish_no_open(struct file *, struct dentry *);
967:	int finish_open(struct file *, struct dentry *, int (*)(struct inode *, struct file *));
1487:	int generic_file_open(struct inode *, struct file *);
340:	int ksys_fallocate(int, int, loff_t, loff_t);
809:	int ksys_fchown(unsigned int, uid_t, gid_t);
1502:	int nonseekable_open(struct inode *, struct file *);
1081:	struct file *open_with_fake_path(const struct path *, int, struct inode *, const struct cred *);
1520:	int stream_open(struct inode *, struct file *);
243:	int vfs_fallocate(struct file *, int, loff_t, loff_t);
619:	int vfs_fchmod(struct file *, umode_t);
796:	int vfs_fchown(struct file *, uid_t, gid_t);
1010:	int vfs_open(const struct path *, struct file *);
70:	long vfs_truncate(const struct path *, loff_t);
File fs/pipe.c:
1031:	long __arm64_sys_pipe(const struct pt_regs *);
1026:	long __arm64_sys_pipe2(const struct pt_regs *);
757:	unsigned long account_pipe_buffers(struct user_struct *, unsigned long, unsigned long);
782:	struct pipe_inode_info *alloc_pipe_info(void);
911:	int create_pipe_files(struct file **, int);
989:	int do_pipe_flags(int *, int);
830:	void free_pipe_info(struct pipe_inode_info *);
193:	bool generic_pipe_buf_get(struct pipe_inode_info *, struct pipe_buffer *);
207:	void generic_pipe_buf_release(struct pipe_inode_info *, struct pipe_buffer *);
165:	bool generic_pipe_buf_try_steal(struct pipe_inode_info *, struct pipe_buffer *);
1372:	struct pipe_inode_info *get_pipe_info(struct file *, bool);
111:	void pipe_double_lock(struct pipe_inode_info *, struct pipe_inode_info *);
1385:	long pipe_fcntl(struct file *, unsigned int, unsigned long);
777:	bool pipe_is_unprivileged_user(void);
85:	void pipe_lock(struct pipe_inode_info *);
1253:	int pipe_resize_ring(struct pipe_inode_info *, unsigned int);
94:	void pipe_unlock(struct pipe_inode_info *);
1045:	void pipe_wait_readable(struct pipe_inode_info *);
1052:	void pipe_wait_writable(struct pipe_inode_info *);
1234:	unsigned int round_pipe_size(unsigned long);
770:	bool too_many_pipe_buffers_hard(unsigned long);
763:	bool too_many_pipe_buffers_soft(unsigned long);
File fs/pnode.c:
122:	void change_mnt_propagation(struct mount *, int);
60:	int get_dominating_id(struct mount *, const struct path *);
288:	int propagate_mnt(struct mount *, struct mountpoint *, struct mount *, struct hlist_head *);
369:	int propagate_mount_busy(struct mount *, int);
412:	void propagate_mount_unlock(struct mount *);
535:	int propagate_umount(struct list_head *);
File fs/posix_acl.c:
574:	int __posix_acl_chmod(struct posix_acl **, gfp_t, umode_t);
556:	int __posix_acl_create(struct posix_acl **, gfp_t, umode_t *);
1253:	ssize_t do_get_acl(struct mnt_idmap *, struct dentry *, const char *, void *, size_t);
1232:	int do_set_acl(struct mnt_idmap *, struct dentry *, const char *, const void *, size_t);
107:	void forget_all_cached_acls(struct inode *);
101:	void forget_cached_acl(struct inode *, int);
46:	struct posix_acl *get_cached_acl(struct inode *, int);
65:	struct posix_acl *get_cached_acl_rcu(struct inode *, int);
182:	struct posix_acl *get_inode_acl(struct inode *, int);
203:	struct posix_acl *posix_acl_alloc(int, gfp_t);
605:	int posix_acl_chmod(struct user_namespace *, struct dentry *, umode_t);
218:	struct posix_acl *posix_acl_clone(const struct posix_acl *, gfp_t);
634:	int posix_acl_create(struct inode *, umode_t *, struct posix_acl **, struct posix_acl **);
306:	int posix_acl_equiv_mode(const struct posix_acl *, umode_t *);
352:	struct posix_acl *posix_acl_from_mode(umode_t, gfp_t);
774:	struct posix_acl *posix_acl_from_xattr(struct user_namespace *, const void *, size_t);
192:	void posix_acl_init(struct posix_acl *, int);
375:	int posix_acl_permission(struct user_namespace *, struct inode *, const struct posix_acl *, int);
834:	int posix_acl_to_xattr(struct user_namespace *, const struct posix_acl *, void *, size_t);
706:	int posix_acl_update_mode(struct user_namespace *, struct inode *, umode_t *, struct posix_acl **);
237:	int posix_acl_valid(struct user_namespace *, const struct posix_acl *);
81:	void set_cached_acl(struct inode *, int, struct posix_acl *);
937:	int set_posix_acl(struct user_namespace *, struct dentry *, int, struct posix_acl *);
1001:	int simple_acl_create(struct inode *, struct inode *);
981:	int simple_set_acl(struct user_namespace *, struct dentry *, struct posix_acl *, int);
1133:	struct posix_acl *vfs_get_acl(struct user_namespace *, struct dentry *, const char *);
1177:	int vfs_remove_acl(struct user_namespace *, struct dentry *, const char *);
1054:	int vfs_set_acl(struct user_namespace *, struct dentry *, const char *, struct posix_acl *);
File fs/proc/array.c:
664:	int proc_pid_statm(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
431:	int proc_pid_status(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
98:	void proc_task_name(struct seq_file *, struct task_struct *, bool);
658:	int proc_tgid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
652:	int proc_tid_stat(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
224:	void render_sigset_t(struct seq_file *, const char *, sigset_t *);
File fs/proc/base.c:
904:	loff_t mem_lseek(struct file *, loff_t, int);
2034:	int pid_delete_dentry(const struct dentry *);
1962:	int pid_getattr(struct user_namespace *, const struct path *, struct kstat *, u32, unsigned int);
1995:	void pid_update_inode(struct task_struct *, struct inode *);
2063:	bool proc_fill_cache(struct file *, struct dir_context *, const char *, unsigned int, instantiate_t *, struct task_struct *, const void *);
3407:	void proc_flush_pid(struct pid *);
796:	struct mm_struct *proc_mem_open(struct inode *, unsigned int);
1875:	void proc_pid_evict_inode(struct proc_inode *);
3433:	struct dentry *proc_pid_lookup(struct dentry *, unsigned int);
1888:	struct inode *proc_pid_make_inode(struct super_block *, struct task_struct *, umode_t);
3502:	int proc_pid_readdir(struct file *, struct dir_context *);
688:	int proc_setattr(struct user_namespace *, struct dentry *, struct iattr *);
3923:	void set_proc_pid_nlink(void);
1817:	void task_dump_owner(struct task_struct *, umode_t, kuid_t *, kgid_t *);
3366:	struct pid *tgid_pidfd_to_pid(const struct file *);
File fs/proc/fd.c:
328:	int proc_fd_permission(struct user_namespace *, struct inode *, int);
File fs/proc/generic.c:
482:	struct proc_dir_entry *_proc_mkdir(const char *, umode_t, struct proc_dir_entry *, void *, bool);
37:	void pde_free(struct proc_dir_entry *);
675:	void pde_put(struct proc_dir_entry *);
202:	int proc_alloc_inum(unsigned int *);
582:	struct proc_dir_entry *proc_create(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *);
567:	struct proc_dir_entry *proc_create_data(const char *, umode_t, struct proc_dir_entry *, const struct proc_ops *, void *);
525:	struct proc_dir_entry *proc_create_mount_point(const char *);
541:	struct proc_dir_entry *proc_create_reg(const char *, umode_t, struct proc_dir_entry **, void *);
616:	struct proc_dir_entry *proc_create_seq_private(const char *, umode_t, struct proc_dir_entry *, const struct seq_operations *, unsigned int, void *);
647:	struct proc_dir_entry *proc_create_single_data(const char *, umode_t, struct proc_dir_entry *, int (*)(struct seq_file *, void *), void *);
215:	void proc_free_inum(unsigned int);
783:	void *proc_get_parent_data(const struct inode *);
264:	struct dentry *proc_lookup(struct inode *, struct dentry *, unsigned int);
244:	struct dentry *proc_lookup_de(struct inode *, struct dentry *, struct proc_dir_entry *);
518:	struct proc_dir_entry *proc_mkdir(const char *, struct proc_dir_entry *);
504:	struct proc_dir_entry *proc_mkdir_data(const char *, umode_t, struct proc_dir_entry *, void *);
511:	struct proc_dir_entry *proc_mkdir_mode(const char *, umode_t, struct proc_dir_entry *);
325:	int proc_readdir(struct file *, struct dir_context *);
284:	int proc_readdir_de(struct file *, struct dir_context *, struct proc_dir_entry *);
367:	struct proc_dir_entry *proc_register(struct proc_dir_entry *, struct proc_dir_entry *);
790:	void proc_remove(struct proc_dir_entry *);
662:	void proc_set_size(struct proc_dir_entry *, loff_t);
668:	void proc_set_user(struct proc_dir_entry *, kuid_t, kgid_t);
802:	ssize_t proc_simple_write(struct file *, const char *, size_t, loff_t *);
459:	struct proc_dir_entry *proc_symlink(const char *, struct proc_dir_entry *, const char *);
686:	void remove_proc_entry(const char *, struct proc_dir_entry *);
725:	int remove_proc_subtree(const char *, struct proc_dir_entry *);
File fs/proc/inode.c:
261:	void proc_entry_rundown(struct proc_dir_entry *);
652:	struct inode *proc_get_inode(struct super_block *, struct proc_dir_entry *);
93:	void proc_init_kmemcache(void);
111:	void proc_invalidate_siblings_dcache(struct hlist_head *, spinlock_t *);
File fs/proc/meminfo.c:
22:	void arch_report_meminfo(struct seq_file *);
File fs/proc/page.c:
110:	u64 stable_page_flags(struct page *);
File fs/proc/proc_sysctl.c:
1653:	int __register_sysctl_base(struct ctl_table *);
1426:	void __register_sysctl_init(const char *, struct ctl_table *, const char *);
1557:	struct ctl_table_header *__register_sysctl_paths(struct ctl_table_set *, const struct ctl_path *, struct ctl_table *);
1322:	struct ctl_table_header *__register_sysctl_table(struct ctl_table_set *, const char *, struct ctl_table *);
1909:	void do_sysctl_args(void);
496:	void proc_sys_evict_inode(struct inode *, struct ctl_table_header *);
1766:	int proc_sys_init(void);
67:	void proc_sys_poll_notify(struct ctl_table_poll *);
1399:	struct ctl_table_header *register_sysctl(const char *, struct ctl_table *);
45:	struct ctl_table_header *register_sysctl_mount_point(const char *);
1628:	struct ctl_table_header *register_sysctl_paths(const struct ctl_path *, struct ctl_table *);
1645:	struct ctl_table_header *register_sysctl_table(struct ctl_table *);
1761:	void retire_sysctl_set(struct ctl_table_set *);
1752:	void setup_sysctl_set(struct ctl_table_set *, struct ctl_table_root *, int (*)(struct ctl_table_set *));
1722:	void unregister_sysctl_table(struct ctl_table_header *);
File fs/proc/proc_tty.c:
163:	void proc_tty_init(void);
131:	void proc_tty_register_driver(struct tty_driver *);
147:	void proc_tty_unregister_driver(struct tty_driver *);
File fs/proc/root.c:
285:	void proc_root_init(void);
File fs/proc/self.c:
70:	void proc_self_init(void);
36:	int proc_setup_self(struct super_block *);
File fs/proc/stat.c:
49:	u64 get_idle_time(struct kernel_cpustat *, int);
File fs/proc/task_mmu.c:
30:	void task_mem(struct seq_file *, struct mm_struct *);
87:	unsigned long task_statm(struct mm_struct *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
82:	unsigned long task_vsize(struct mm_struct *);
File fs/proc/thread_self.c:
36:	int proc_setup_thread_self(struct super_block *);
70:	void proc_thread_self_init(void);
File fs/proc/util.c:
4:	unsigned int name_to_int(const struct qstr *);
File fs/ramfs/inode.c:
57:	struct inode *ramfs_get_inode(struct super_block *, const struct inode *, umode_t, dev_t);
267:	int ramfs_init_fs_context(struct fs_context *);
File fs/read_write.c:
1559:	long __arm64_sys_copy_file_range(const struct pt_regs *);
311:	long __arm64_sys_lseek(const struct pt_regs *);
672:	long __arm64_sys_pread64(const struct pt_regs *);
1053:	long __arm64_sys_preadv(const struct pt_regs *);
1061:	long __arm64_sys_preadv2(const struct pt_regs *);
706:	long __arm64_sys_pwrite64(const struct pt_regs *);
1073:	long __arm64_sys_pwritev(const struct pt_regs *);
1081:	long __arm64_sys_pwritev2(const struct pt_regs *);
621:	long __arm64_sys_read(const struct pt_regs *);
1041:	long __arm64_sys_readv(const struct pt_regs *);
1290:	long __arm64_sys_sendfile(const struct pt_regs *);
1309:	long __arm64_sys_sendfile64(const struct pt_regs *);
646:	long __arm64_sys_write(const struct pt_regs *);
1047:	long __arm64_sys_writev(const struct pt_regs *);
404:	ssize_t __kernel_read(struct file *, void *, size_t, loff_t *);
529:	ssize_t __kernel_write(struct file *, const void *, size_t, loff_t *);
499:	ssize_t __kernel_write_iter(struct file *, struct iov_iter *, loff_t *);
230:	loff_t default_llseek(struct file *, loff_t, int);
162:	loff_t fixed_size_llseek(struct file *, loff_t, int, loff_t);
1387:	ssize_t generic_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
144:	loff_t generic_file_llseek(struct file *, loff_t, int);
86:	loff_t generic_file_llseek_size(struct file *, loff_t, int, loff_t, loff_t);
1704:	int generic_file_rw_checks(struct file *, struct file *);
1630:	int generic_write_check_limits(struct file *, loff_t, loff_t *);
1686:	ssize_t generic_write_checks(struct kiocb *, struct iov_iter *);
1656:	int generic_write_checks_count(struct kiocb *, loff_t *);
439:	ssize_t kernel_read(struct file *, void *, size_t, loff_t *);
548:	ssize_t kernel_write(struct file *, const void *, size_t, loff_t *);
652:	ssize_t ksys_pread64(unsigned int, char *, size_t, loff_t);
686:	ssize_t ksys_pwrite64(unsigned int, const char *, size_t, loff_t);
602:	ssize_t ksys_read(unsigned int, char *, size_t);
626:	ssize_t ksys_write(unsigned int, const char *, size_t);
181:	loff_t no_seek_end_llseek(struct file *, loff_t, int);
201:	loff_t no_seek_end_llseek_size(struct file *, loff_t, int, loff_t);
224:	loff_t noop_llseek(struct file *, loff_t, int);
355:	int rw_verify_area(int, struct file *, const loff_t *, size_t);
1476:	ssize_t vfs_copy_file_range(struct file *, loff_t, struct file *, loff_t, size_t, unsigned int);
805:	ssize_t vfs_iocb_iter_read(struct file *, struct kiocb *, struct iov_iter *);
869:	ssize_t vfs_iocb_iter_write(struct file *, struct kiocb *, struct iov_iter *);
833:	ssize_t vfs_iter_read(struct file *, struct iov_iter *, loff_t *, rwf_t);
897:	ssize_t vfs_iter_write(struct file *, struct iov_iter *, loff_t *, rwf_t);
285:	loff_t vfs_llseek(struct file *, loff_t, int);
450:	ssize_t vfs_read(struct file *, char *, size_t, loff_t *);
54:	loff_t vfs_setpos(struct file *, loff_t, loff_t);
564:	ssize_t vfs_write(struct file *, const char *, size_t, loff_t *);
File fs/readdir.c:
271:	long __arm64_sys_getdents(const struct pt_regs *);
354:	long __arm64_sys_getdents64(const struct pt_regs *);
40:	int iterate_dir(struct file *, struct dir_context *);
File fs/remap_range.c:
268:	int __generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int, const struct iomap_ops *);
367:	loff_t do_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
358:	int generic_remap_file_range_prep(struct file *, loff_t, struct file *, loff_t, loff_t *, unsigned int);
404:	loff_t vfs_clone_file_range(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
491:	int vfs_dedupe_file_range(struct file *, struct file_dedupe_range *);
436:	loff_t vfs_dedupe_file_range_one(struct file *, loff_t, struct file *, loff_t, loff_t, unsigned int);
File fs/select.c:
1068:	long __arm64_sys_poll(const struct pt_regs *);
1101:	long __arm64_sys_ppoll(const struct pt_regs *);
795:	long __arm64_sys_pselect6(const struct pt_regs *);
726:	long __arm64_sys_select(const struct pt_regs *);
625:	int core_sys_select(int, fd_set *, fd_set *, fd_set *, struct timespec64 *);
139:	void poll_freewait(struct poll_wqueues *);
122:	void poll_initwait(struct poll_wqueues *);
274:	int poll_select_set_timeout(struct timespec64 *, time64_t, long);
76:	u64 select_estimate_accuracy(struct timespec64 *);
File fs/seq_file.c:
630:	void *__seq_open_private(struct file *, const struct seq_operations *, int);
440:	char *mangle_path(char *, const char *, const char *);
412:	void seq_bprintf(struct seq_file *, const char *, const u32 *);
537:	int seq_dentry(struct seq_file *, struct dentry *, const char *);
374:	void seq_escape_mem(struct seq_file *, const char *, size_t, unsigned int, const char *);
1147:	void seq_file_init(void);
498:	int seq_file_path(struct seq_file *, struct file *, const char *);
864:	void seq_hex_dump(struct seq_file *, const char *, int, int, int, const void *, size_t, bool);
1009:	struct hlist_node *seq_hlist_next(void *, struct hlist_head *, loff_t *);
1126:	struct hlist_node *seq_hlist_next_percpu(void *, struct hlist_head *, int *, loff_t *);
1079:	struct hlist_node *seq_hlist_next_rcu(void *, struct hlist_head *, loff_t *);
973:	struct hlist_node *seq_hlist_start(struct hlist_head *, loff_t);
992:	struct hlist_node *seq_hlist_start_head(struct hlist_head *, loff_t);
1057:	struct hlist_node *seq_hlist_start_head_rcu(struct hlist_head *, loff_t);
1102:	struct hlist_node *seq_hlist_start_percpu(struct hlist_head *, int *, loff_t);
1033:	struct hlist_node *seq_hlist_start_rcu(struct hlist_head *, loff_t);
924:	struct list_head *seq_list_next(void *, struct list_head *, loff_t *);
955:	struct list_head *seq_list_next_rcu(void *, struct list_head *, loff_t *);
903:	struct list_head *seq_list_start(struct list_head *, loff_t);
915:	struct list_head *seq_list_start_head(struct list_head *, loff_t);
946:	struct list_head *seq_list_start_head_rcu(struct list_head *, loff_t);
934:	struct list_head *seq_list_start_rcu(struct list_head *, loff_t);
308:	loff_t seq_lseek(struct file *, loff_t, int);
57:	int seq_open(struct file *, const struct seq_operations *);
656:	int seq_open_private(struct file *, const struct seq_operations *, int);
847:	void seq_pad(struct seq_file *, char);
470:	int seq_path(struct seq_file *, const struct path *, const char *);
507:	int seq_path_root(struct seq_file *, const struct path *, const struct path *, const char *);
401:	void seq_printf(struct seq_file *, const char *, ...);
783:	void seq_put_decimal_ll(struct seq_file *, const char *, long long);
730:	void seq_put_decimal_ull(struct seq_file *, const char *, unsigned long long);
698:	void seq_put_decimal_ull_width(struct seq_file *, const char *, unsigned long long, unsigned int);
749:	void seq_put_hex_ll(struct seq_file *, const char *, unsigned long long, unsigned int);
663:	void seq_putc(struct seq_file *, char);
672:	void seq_puts(struct seq_file *, const char *);
151:	ssize_t seq_read(struct file *, char *, size_t, loff_t *);
171:	ssize_t seq_read_iter(struct kiocb *, struct iov_iter *);
352:	int seq_release(struct inode *, struct file *);
620:	int seq_release_private(struct inode *, struct file *);
386:	void seq_vprintf(struct seq_file *, const char *, va_list);
830:	int seq_write(struct seq_file *, const void *, size_t);
572:	int single_open(struct file *, int (*)(struct seq_file *, void *), void *);
593:	int single_open_size(struct file *, int (*)(struct seq_file *, void *), void *, size_t);
611:	int single_release(struct inode *, struct file *);
557:	void *single_start(struct seq_file *, loff_t *);
File fs/signalfd.c:
314:	long __arm64_sys_signalfd(const struct pt_regs *);
302:	long __arm64_sys_signalfd4(const struct pt_regs *);
36:	void signalfd_cleanup(struct sighand_struct *);
File fs/splice.c:
1328:	long __arm64_sys_splice(const struct pt_regs *);
1694:	long __arm64_sys_tee(const struct pt_regs *);
1292:	long __arm64_sys_vmsplice(const struct pt_regs *);
549:	ssize_t __splice_from_pipe(struct pipe_inode_info *, struct splice_desc *, splice_actor *);
230:	ssize_t add_to_pipe(struct pipe_inode_info *, struct pipe_buffer *);
1023:	long do_splice(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
951:	long do_splice_direct(struct file *, loff_t *, struct file *, loff_t *, size_t, unsigned int);
1661:	long do_tee(struct file *, struct file *, size_t, unsigned int);
298:	ssize_t generic_file_splice_read(struct file *, loff_t *, struct pipe_inode_info *, size_t, unsigned int);
740:	ssize_t generic_splice_sendpage(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
615:	ssize_t iter_file_splice_write(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int);
809:	ssize_t splice_direct_to_actor(struct file *, struct splice_desc *, splice_direct_actor *);
1003:	long splice_file_to_pipe(struct file *, struct pipe_inode_info *, loff_t *, size_t, unsigned int);
581:	ssize_t splice_from_pipe(struct pipe_inode_info *, struct file *, loff_t *, size_t, unsigned int, splice_actor *);
256:	int splice_grow_spd(const struct pipe_inode_info *, struct splice_pipe_desc *);
276:	void splice_shrink_spd(struct splice_pipe_desc *);
182:	ssize_t splice_to_pipe(struct pipe_inode_info *, struct splice_pipe_desc *);
File fs/stack.c:
63:	void fsstack_copy_attr_all(struct inode *, const struct inode *);
11:	void fsstack_copy_inode_size(struct inode *, struct inode *);
File fs/stat.c:
447:	long __arm64_sys_newfstat(const struct pt_regs *);
434:	long __arm64_sys_newfstatat(const struct pt_regs *);
420:	long __arm64_sys_newlstat(const struct pt_regs *);
409:	long __arm64_sys_newstat(const struct pt_regs *);
501:	long __arm64_sys_readlink(const struct pt_regs *);
495:	long __arm64_sys_readlinkat(const struct pt_regs *);
664:	long __arm64_sys_statx(const struct pt_regs *);
767:	void __inode_add_bytes(struct inode *, loff_t);
788:	void __inode_sub_bytes(struct inode *, loff_t);
635:	int do_statx(int, struct filename *, unsigned int, unsigned int, struct statx *);
74:	void generic_fill_statx_attr(struct inode *, struct kstat *);
44:	void generic_fillattr(struct user_namespace *, struct inode *, struct kstat *);
191:	int getname_statx_lookup_flags(int);
779:	void inode_add_bytes(struct inode *, loff_t);
810:	loff_t inode_get_bytes(struct inode *);
822:	void inode_set_bytes(struct inode *, loff_t);
801:	void inode_sub_bytes(struct inode *, loff_t);
178:	int vfs_fstat(int, struct kstat *);
262:	int vfs_fstatat(int, const char *, struct kstat *, int);
156:	int vfs_getattr(const struct path *, struct kstat *, u32, unsigned int);
97:	int vfs_getattr_nosec(const struct path *, struct kstat *, u32, unsigned int);
File fs/statfs.c:
213:	long __arm64_sys_fstatfs(const struct pt_regs *);
222:	long __arm64_sys_fstatfs64(const struct pt_regs *);
192:	long __arm64_sys_statfs(const struct pt_regs *);
201:	long __arm64_sys_statfs64(const struct pt_regs *);
248:	long __arm64_sys_ustat(const struct pt_regs *);
115:	int fd_statfs(int, struct kstatfs *);
97:	int user_statfs(const char *, struct kstatfs *);
72:	int vfs_get_fsid(struct dentry *, __kernel_fsid_t *);
86:	int vfs_statfs(const struct path *, struct kstatfs *);
File fs/super.c:
327:	void deactivate_locked_super(struct super_block *);
359:	void deactivate_super(struct super_block *);
666:	void drop_super(struct super_block *);
674:	void drop_super_exclusive(struct super_block *);
993:	void emergency_remount(void);
1027:	void emergency_thaw_all(void);
1071:	void free_anon_bdev(dev_t);
1650:	int freeze_super(struct super_block *);
468:	void generic_shutdown_super(struct super_block *);
818:	struct super_block *get_active_super(struct block_device *);
1051:	int get_anon_bdev(dev_t *);
780:	struct super_block *get_super(struct block_device *);
1215:	int get_tree_bdev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1177:	int get_tree_keyed(struct fs_context *, int (*)(struct super_block *, struct fs_context *), void *);
1153:	int get_tree_nodev(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1161:	int get_tree_single(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
1169:	int get_tree_single_reconf(struct fs_context *, int (*)(struct super_block *, struct fs_context *));
711:	void iterate_supers(void (*)(struct super_block *, void *), void *);
746:	void iterate_supers_type(struct file_system_type *, void (*)(struct super_block *, void *), void *);
1083:	void kill_anon_super(struct super_block *);
1380:	void kill_block_super(struct super_block *);
1091:	void kill_litter_super(struct super_block *);
1303:	struct dentry *mount_bdev(struct file_system_type *, int, const char *, void *, int (*)(struct super_block *, void *, int));
515:	bool mount_capable(struct fs_context *);
1395:	struct dentry *mount_nodev(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
1445:	struct dentry *mount_single(struct file_system_type *, int, void *, int (*)(struct super_block *, void *, int));
308:	void put_super(struct super_block *);
1415:	int reconfigure_single(struct super_block *, int, void *);
880:	int reconfigure_super(struct fs_context *);
441:	void retire_super(struct super_block *);
1077:	int set_anon_super(struct super_block *, void *);
1099:	int set_anon_super_fc(struct super_block *, struct fs_context *);
606:	struct super_block *sget(struct file_system_type *, int (*)(struct super_block *, void *), int (*)(struct super_block *, void *), int, void *);
541:	struct super_block *sget_fc(struct fs_context *, int (*)(struct super_block *, struct fs_context *), int (*)(struct super_block *, struct fs_context *));
1566:	int super_setup_bdi(struct super_block *);
1537:	int super_setup_bdi_name(struct super_block *, char *, ...);
1761:	int thaw_super(struct super_block *);
413:	bool trylock_super(struct super_block *);
841:	struct super_block *user_get_super(dev_t, bool);
1478:	int vfs_get_tree(struct fs_context *);
File fs/sync.c:
223:	long __arm64_sys_fdatasync(const struct pt_regs *);
218:	long __arm64_sys_fsync(const struct pt_regs *);
111:	long __arm64_sys_sync(const struct pt_regs *);
370:	long __arm64_sys_sync_file_range(const struct pt_regs *);
387:	long __arm64_sys_sync_file_range2(const struct pt_regs *);
149:	long __arm64_sys_syncfs(const struct pt_regs *);
135:	void emergency_sync(void);
97:	void ksys_sync(void);
355:	int ksys_sync_file_range(int, loff_t, loff_t, unsigned int);
228:	int sync_file_range(struct file *, loff_t, loff_t, unsigned int);
30:	int sync_filesystem(struct super_block *);
200:	int vfs_fsync(struct file *, int);
180:	int vfs_fsync_range(struct file *, loff_t, loff_t, int);
File fs/sysfs/dir.c:
40:	int sysfs_create_dir_ns(struct kobject *, const void *);
134:	int sysfs_create_mount_point(struct kobject *, const char *);
117:	int sysfs_move_dir_ns(struct kobject *, struct kobject *, const void *);
79:	void sysfs_remove_dir(struct kobject *);
155:	void sysfs_remove_mount_point(struct kobject *, const char *);
105:	int sysfs_rename_dir_ns(struct kobject *, const char *, const void *);
21:	void sysfs_warn_dup(struct kernfs_node *, const char *);
File fs/sysfs/file.c:
304:	int sysfs_add_bin_file_mode_ns(struct kernfs_node *, const struct bin_attribute *, umode_t, kuid_t, kgid_t, const void *);
254:	int sysfs_add_file_mode_ns(struct kernfs_node *, const struct attribute *, umode_t, kuid_t, kgid_t, const void *);
379:	int sysfs_add_file_to_group(struct kobject *, const struct attribute *, const char *);
444:	struct kernfs_node *sysfs_break_active_protection(struct kobject *, const struct attribute *);
691:	int sysfs_change_owner(struct kobject *, kuid_t, kgid_t);
413:	int sysfs_chmod_file(struct kobject *, const struct attribute *, umode_t);
558:	int sysfs_create_bin_file(struct kobject *, const struct bin_attribute *);
345:	int sysfs_create_file_ns(struct kobject *, const struct attribute *, const void *);
359:	int sysfs_create_files(struct kobject *, const struct attribute * const *);
729:	int sysfs_emit(char *, const char *, ...);
757:	int sysfs_emit_at(char *, int, const char *, ...);
649:	int sysfs_file_change_owner(struct kobject *, const char *, kuid_t, kgid_t);
610:	int sysfs_link_change_owner(struct kobject *, struct kobject *, const char *, kuid_t, kgid_t);
180:	void sysfs_notify(struct kobject *, const char *, const char *);
578:	void sysfs_remove_bin_file(struct kobject *, const struct bin_attribute *);
534:	void sysfs_remove_file_from_group(struct kobject *, const struct attribute *, const char *);
486:	void sysfs_remove_file_ns(struct kobject *, const struct attribute *, const void *);
502:	bool sysfs_remove_file_self(struct kobject *, const struct attribute *);
519:	void sysfs_remove_files(struct kobject *, const struct attribute * const *);
468:	void sysfs_unbreak_active_protection(struct kernfs_node *);
File fs/sysfs/group.c:
426:	int compat_only_sysfs_link_entry_to_kobj(struct kobject *, struct kobject *, const char *, const char *);
381:	int sysfs_add_link_to_group(struct kobject *, const char *, struct kobject *, const char *);
171:	int sysfs_create_group(struct kobject *, const struct attribute_group *);
211:	int sysfs_create_groups(struct kobject *, const struct attribute_group **);
516:	int sysfs_group_change_owner(struct kobject *, const struct attribute_group *, kuid_t, kgid_t);
559:	int sysfs_groups_change_owner(struct kobject *, const struct attribute_group **, kuid_t, kgid_t);
325:	int sysfs_merge_group(struct kobject *, const struct attribute_group *);
269:	void sysfs_remove_group(struct kobject *, const struct attribute_group *);
304:	void sysfs_remove_groups(struct kobject *, const struct attribute_group **);
404:	void sysfs_remove_link_from_group(struct kobject *, const char *, const char *);
359:	void sysfs_unmerge_group(struct kobject *, const struct attribute_group *);
254:	int sysfs_update_group(struct kobject *, const struct attribute_group *);
229:	int sysfs_update_groups(struct kobject *, const struct attribute_group **);
File fs/sysfs/mount.c:
97:	int sysfs_init(void);
File fs/sysfs/symlink.c:
89:	int sysfs_create_link(struct kobject *, struct kobject *, const char *);
105:	int sysfs_create_link_nowarn(struct kobject *, struct kobject *, const char *);
61:	int sysfs_create_link_sd(struct kernfs_node *, struct kobject *, const char *);
121:	void sysfs_delete_link(struct kobject *, struct kobject *, const char *);
143:	void sysfs_remove_link(struct kobject *, const char *);
166:	int sysfs_rename_link_ns(struct kobject *, struct kobject *, const char *, const char *, const void *);
File fs/timerfd.c:
406:	long __arm64_sys_timerfd_create(const struct pt_regs *);
576:	long __arm64_sys_timerfd_gettime(const struct pt_regs *);
558:	long __arm64_sys_timerfd_settime(const struct pt_regs *);
97:	void timerfd_clock_was_set(void);
129:	void timerfd_resume(void);
File fs/utimes.c:
147:	long __arm64_sys_utimensat(const struct pt_regs *);
139:	long do_utimes(int, const char *, struct timespec64 *, int);
19:	int vfs_utimes(const struct path *, struct timespec64 *);
File fs/xattr.c:
788:	long __arm64_sys_fgetxattr(const struct pt_regs *);
865:	long __arm64_sys_flistxattr(const struct pt_regs *);
934:	long __arm64_sys_fremovexattr(const struct pt_regs *);
676:	long __arm64_sys_fsetxattr(const struct pt_regs *);
776:	long __arm64_sys_getxattr(const struct pt_regs *);
782:	long __arm64_sys_lgetxattr(const struct pt_regs *);
853:	long __arm64_sys_listxattr(const struct pt_regs *);
859:	long __arm64_sys_llistxattr(const struct pt_regs *);
928:	long __arm64_sys_lremovexattr(const struct pt_regs *);
669:	long __arm64_sys_lsetxattr(const struct pt_regs *);
922:	long __arm64_sys_removexattr(const struct pt_regs *);
662:	long __arm64_sys_setxattr(const struct pt_regs *);
412:	ssize_t __vfs_getxattr(struct dentry *, struct inode *, const char *, void *, size_t);
483:	int __vfs_removexattr(struct user_namespace *, struct dentry *, const char *);
513:	int __vfs_removexattr_locked(struct user_namespace *, struct dentry *, const char *, struct inode **);
186:	int __vfs_setxattr(struct user_namespace *, struct dentry *, struct inode *, const char *, const void *, size_t, int);
277:	int __vfs_setxattr_locked(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int, struct inode **);
224:	int __vfs_setxattr_noperm(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int);
700:	ssize_t do_getxattr(struct mnt_idmap *, struct dentry *, struct xattr_ctx *);
601:	int do_setxattr(struct mnt_idmap *, struct dentry *, struct xattr_ctx *);
957:	ssize_t generic_listxattr(struct dentry *, char *, size_t);
97:	int may_write_xattr(struct user_namespace *, struct inode *);
572:	int setxattr_copy(const char *, struct xattr_ctx *);
1349:	void simple_xattr_add(struct simple_xattrs *, struct simple_xattr *);
1038:	struct simple_xattr *simple_xattr_alloc(const void *, size_t);
1109:	int simple_xattr_get(struct simple_xattrs *, const char *, void *, size_t);
1281:	ssize_t simple_xattr_list(struct inode *, struct simple_xattrs *, char *, size_t);
1158:	int simple_xattr_set(struct simple_xattrs *, const char *, const void *, size_t, int, ssize_t *);
1376:	void simple_xattrs_free(struct simple_xattrs *);
1363:	void simple_xattrs_init(struct simple_xattrs *);
430:	ssize_t vfs_getxattr(struct user_namespace *, struct dentry *, const char *, void *, size_t);
377:	int vfs_getxattr_alloc(struct user_namespace *, struct dentry *, const char *, char **, size_t, gfp_t);
463:	ssize_t vfs_listxattr(struct dentry *, char *, size_t);
545:	int vfs_removexattr(struct user_namespace *, struct dentry *, const char *);
306:	int vfs_setxattr(struct user_namespace *, struct dentry *, const char *, const void *, size_t, int);
1005:	const char *xattr_full_name(const struct xattr_handler *, const char *);
162:	int xattr_supported_namespace(struct inode *, const char *);
File init/calibrate.c:
275:	void calibrate_delay(void);
261:	unsigned long calibrate_delay_is_known(void);
271:	void calibration_delay_done(void);
File init/do_mounts.c:
666:	void init_rootfs(void);
394:	void mount_block_root(char *, int);
566:	void mount_root(void);
277:	dev_t name_to_dev_t(const char *);
600:	void prepare_namespace(void);
File init/do_mounts_initrd.c:
136:	bool initrd_load(void);
File init/initramfs.c:
629:	void free_initrd_mem(unsigned long, unsigned long);
584:	void reserve_initrd_mem(void);
737:	void wait_for_initramfs(void);
File init/main.c:
892:	void arch_call_rest_init(void);
775:	void arch_post_acpi_subsys_init(void);
1589:	void console_on_rootfs(void);
1296:	int do_one_initcall(initcall_t);
1508:	void free_initmem(void);
787:	void mem_encrypt_init(void);
754:	void parse_early_options(char *);
761:	void parse_early_param(void);
791:	void pgtable_cache_init(void);
789:	void poking_init(void);
686:	void rest_init(void);
777:	void smp_setup_processor_id(void);
940:	void start_kernel(void);
782:	void thread_stack_cache_init(void);
793:	void trap_init(void);
File io_uring/advise.c:
78:	int io_fadvise(struct io_kiocb *, unsigned int);
65:	int io_fadvise_prep(struct io_kiocb *, const struct io_uring_sqe *);
48:	int io_madvise(struct io_kiocb *, unsigned int);
31:	int io_madvise_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/cancel.c:
201:	void init_hash_table(struct io_hash_table *, unsigned int);
165:	int io_async_cancel(struct io_kiocb *, unsigned int);
108:	int io_async_cancel_prep(struct io_kiocb *, const struct io_uring_sqe *);
233:	int io_sync_cancel(struct io_ring_ctx *, void *);
81:	int io_try_cancel(struct io_uring_task *, struct io_cancel_data *, unsigned int);
File io_uring/epoll.c:
50:	int io_epoll_ctl(struct io_kiocb *, unsigned int);
24:	int io_epoll_ctl_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/fdinfo.c:
209:	void io_uring_show_fdinfo(struct seq_file *, struct file *);
File io_uring/filetable.c:
107:	int __io_fixed_fd_install(struct io_ring_ctx *, struct file *, unsigned int);
36:	bool io_alloc_file_tables(struct io_file_table *, unsigned int);
131:	int io_fixed_fd_install(struct io_kiocb *, unsigned int, struct file *, unsigned int);
146:	int io_fixed_fd_remove(struct io_ring_ctx *, unsigned int);
52:	void io_free_file_tables(struct io_file_table *);
176:	int io_register_file_alloc_range(struct io_ring_ctx *, struct io_uring_file_index_range *);
File io_uring/fs.c:
287:	void io_link_cleanup(struct io_kiocb *);
271:	int io_linkat(struct io_kiocb *, unsigned int);
241:	int io_linkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
176:	int io_mkdirat(struct io_kiocb *, unsigned int);
191:	void io_mkdirat_cleanup(struct io_kiocb *);
154:	int io_mkdirat_prep(struct io_kiocb *, const struct io_uring_sqe *);
80:	int io_renameat(struct io_kiocb *, unsigned int);
96:	void io_renameat_cleanup(struct io_kiocb *);
50:	int io_renameat_prep(struct io_kiocb *, const struct io_uring_sqe *);
226:	int io_symlinkat(struct io_kiocb *, unsigned int);
198:	int io_symlinkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
129:	int io_unlinkat(struct io_kiocb *, unsigned int);
147:	void io_unlinkat_cleanup(struct io_kiocb *);
104:	int io_unlinkat_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/io-wq.c:
1072:	enum io_wq_cancel io_wq_cancel_cb(struct io_wq *, work_cancel_fn *, void *, bool);
1343:	int io_wq_cpu_affinity(struct io_wq *, struct cpumask *);
1135:	struct io_wq *io_wq_create(unsigned int, struct io_wq_data *);
956:	void io_wq_enqueue(struct io_wq *, struct io_wq_work *);
1219:	void io_wq_exit_start(struct io_wq *);
967:	void io_wq_hash_work(struct io_wq_work *, void *);
1364:	int io_wq_max_workers(struct io_wq *, int *);
1290:	void io_wq_put_and_exit(struct io_wq *);
668:	void io_wq_worker_running(struct task_struct *);
686:	void io_wq_worker_sleeping(struct task_struct *);
File io_uring/io_uring.c:
3275:	long __arm64_sys_io_uring_enter(const struct pt_regs *);
4174:	long __arm64_sys_io_uring_register(const struct pt_regs *);
3730:	long __arm64_sys_io_uring_setup(const struct pt_regs *);
1022:	bool __io_alloc_req_refill(struct io_ring_ctx *);
573:	void __io_commit_cqring_flush(struct io_ring_ctx *);
783:	struct io_uring_cqe *__io_get_cqe(struct io_ring_ctx *, bool);
696:	void __io_put_task(struct task_struct *, int);
1262:	void __io_req_task_work_add(struct io_kiocb *, bool);
1299:	int __io_run_local_work(struct io_ring_ctx *, bool *);
3155:	void __io_uring_cancel(bool);
1709:	bool io_alloc_async_data(struct io_kiocb *);
893:	bool io_aux_cqe(struct io_ring_ctx *, bool, u64, s32, u32, bool);
621:	void io_cq_unlock_post(struct io_ring_ctx *);
1954:	struct file *io_file_get_fixed(struct io_kiocb *, int, unsigned int);
1697:	unsigned int io_file_get_flags(struct file *);
1977:	struct file *io_file_get_normal(struct io_kiocb *, int);
1395:	void io_free_batch_list(struct io_ring_ctx *, struct io_wq_work_node *);
1073:	void io_free_req(struct io_kiocb *);
3424:	bool io_is_uring_fops(struct file *);
201:	bool io_match_task_safe(struct io_kiocb *, struct task_struct *, bool);
1874:	int io_poll_issue(struct io_kiocb *, bool *);
888:	bool io_post_aux_cqe(struct io_ring_ctx *, u64, s32, u32);
453:	void io_queue_iowq(struct io_kiocb *, bool *);
1387:	void io_queue_next(struct io_kiocb *);
963:	void io_req_complete_post(struct io_kiocb *, unsigned int);
767:	bool io_req_cqe_overflow(struct io_kiocb *);
980:	void io_req_defer_failed(struct io_kiocb *, s32);
1720:	int io_req_prep_async(struct io_kiocb *);
1595:	void io_req_task_complete(struct io_kiocb *, bool *);
1381:	void io_req_task_queue(struct io_kiocb *);
1374:	void io_req_task_queue_fail(struct io_kiocb *, int);
1364:	void io_req_task_submit(struct io_kiocb *, bool *);
1341:	int io_run_local_work(struct io_ring_ctx *);
2459:	int io_run_task_work_sig(struct io_ring_ctx *);
2364:	int io_submit_sqes(struct io_ring_ctx *, unsigned int);
706:	void io_task_refs_refill(struct io_uring_task *);
3082:	void io_uring_cancel_generic(bool, struct io_sq_data *);
156:	struct sock *io_uring_get_socket(struct file *);
1881:	struct io_wq_work *io_wq_free_work(struct io_wq_work *);
1889:	void io_wq_submit_work(struct io_wq_work *);
1185:	void tctx_task_work(struct callback_head *);
File io_uring/kbuf.c:
77:	unsigned int __io_put_kbuf(struct io_kiocb *, unsigned int);
171:	void *io_buffer_select(struct io_kiocb *, size_t *, unsigned int);
246:	void io_destroy_buffers(struct io_ring_ctx *);
50:	void io_kbuf_recycle_legacy(struct io_kiocb *, unsigned int);
421:	int io_provide_buffers(struct io_kiocb *, unsigned int);
316:	int io_provide_buffers_prep(struct io_kiocb *, const struct io_uring_sqe *);
466:	int io_register_pbuf_ring(struct io_ring_ctx *, void *);
292:	int io_remove_buffers(struct io_kiocb *, unsigned int);
273:	int io_remove_buffers_prep(struct io_kiocb *, const struct io_uring_sqe *);
525:	int io_unregister_pbuf_ring(struct io_ring_ctx *, void *);
File io_uring/msg_ring.c:
250:	int io_msg_ring(struct io_kiocb *, unsigned int);
50:	void io_msg_ring_cleanup(struct io_kiocb *);
230:	int io_msg_ring_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/nop.c:
21:	int io_nop(struct io_kiocb *, unsigned int);
13:	int io_nop_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/notif.c:
65:	struct io_kiocb *io_alloc_notif(struct io_ring_ctx *);
51:	void io_notif_set_extended(struct io_kiocb *);
File io_uring/opdef.c:
536:	const char *io_uring_get_opcode(u8);
543:	void io_uring_optable_init(void);
File io_uring/openclose.c:
176:	int __io_close_fixed(struct io_ring_ctx *, unsigned int, unsigned int);
212:	int io_close(struct io_kiocb *, unsigned int);
195:	int io_close_prep(struct io_kiocb *, const struct io_uring_sqe *);
168:	void io_open_cleanup(struct io_kiocb *);
163:	int io_openat(struct io_kiocb *, unsigned int);
96:	int io_openat2(struct io_kiocb *, unsigned int);
77:	int io_openat2_prep(struct io_kiocb *, const struct io_uring_sqe *);
67:	int io_openat_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/poll.c:
1029:	void io_apoll_cache_free(struct io_cache_entry *);
679:	int io_arm_poll_handler(struct io_kiocb *, unsigned int);
936:	int io_poll_add(struct io_kiocb *, unsigned int);
919:	int io_poll_add_prep(struct io_kiocb *, const struct io_uring_sqe *);
857:	int io_poll_cancel(struct io_ring_ctx *, struct io_cancel_data *, unsigned int);
959:	int io_poll_remove(struct io_kiocb *, unsigned int);
758:	bool io_poll_remove_all(struct io_ring_ctx *, struct task_struct *, bool);
889:	int io_poll_remove_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/rsrc.c:
45:	int __io_account_mem(struct user_struct *, unsigned long);
829:	int __io_scm_file_account(struct io_ring_ctx *, struct file *);
1038:	void __io_sqe_buffers_unregister(struct io_ring_ctx *);
773:	void __io_sqe_files_unregister(struct io_ring_ctx *);
727:	int io_files_update(struct io_kiocb *, unsigned int);
671:	int io_files_update_prep(struct io_kiocb *, const struct io_uring_sqe *);
1324:	int io_import_fixed(int, struct iov_iter *, struct io_mapped_ubuf *, u64, size_t);
1140:	struct page **io_pin_pages(unsigned long, unsigned long, int *);
756:	int io_queue_rsrc_removal(struct io_rsrc_data *, unsigned int, struct io_rsrc_node *, void *);
610:	int io_register_files_update(struct io_ring_ctx *, void *, unsigned int);
639:	int io_register_rsrc(struct io_ring_ctx *, void *, unsigned int, unsigned int);
625:	int io_register_rsrc_update(struct io_ring_ctx *, void *, unsigned int, unsigned int);
221:	void io_rsrc_node_destroy(struct io_rsrc_node *);
283:	void io_rsrc_node_switch(struct io_ring_ctx *, struct io_rsrc_data *);
311:	int io_rsrc_node_switch_start(struct io_ring_ctx *);
207:	void io_rsrc_put_tw(struct callback_head *);
189:	void io_rsrc_put_work(struct work_struct *);
36:	void io_rsrc_refs_drop(struct io_ring_ctx *);
154:	void io_rsrc_refs_refill(struct io_ring_ctx *);
1265:	int io_sqe_buffers_register(struct io_ring_ctx *, void *, unsigned int, u64 *);
1051:	int io_sqe_buffers_unregister(struct io_ring_ctx *);
952:	int io_sqe_files_register(struct io_ring_ctx *, void *, unsigned int, u64 *);
802:	int io_sqe_files_unregister(struct io_ring_ctx *);
215:	void io_wait_rsrc_data(struct io_rsrc_data *);
File io_uring/rw.c:
999:	int io_do_iopoll(struct io_ring_ctx *, bool);
76:	int io_prep_rw(struct io_kiocb *, const struct io_uring_sqe *);
702:	int io_read(struct io_kiocb *, unsigned int);
555:	int io_readv_prep_async(struct io_kiocb *);
125:	void io_readv_writev_cleanup(struct io_kiocb *);
991:	void io_rw_fail(struct io_kiocb *);
850:	int io_write(struct io_kiocb *, unsigned int);
560:	int io_writev_prep_async(struct io_kiocb *);
File io_uring/splice.c:
88:	int io_splice(struct io_kiocb *, unsigned int);
79:	int io_splice_prep(struct io_kiocb *, const struct io_uring_sqe *);
47:	int io_tee(struct io_kiocb *, unsigned int);
40:	int io_tee_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/sqpoll.c:
67:	void io_put_sq_data(struct io_sq_data *);
333:	int io_sq_offload_create(struct io_ring_ctx *, struct io_uring_params *);
87:	void io_sq_thread_finish(struct io_ring_ctx *);
42:	void io_sq_thread_park(struct io_sq_data *);
54:	void io_sq_thread_stop(struct io_sq_data *);
27:	void io_sq_thread_unpark(struct io_sq_data *);
315:	int io_sqpoll_wait_sq(struct io_ring_ctx *);
File io_uring/statx.c:
54:	int io_statx(struct io_kiocb *, unsigned int);
67:	void io_statx_cleanup(struct io_kiocb *);
23:	int io_statx_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/sync.c:
97:	int io_fallocate(struct io_kiocb *, unsigned int);
84:	int io_fallocate_prep(struct io_kiocb *, const struct io_uring_sqe *);
68:	int io_fsync(struct io_kiocb *, unsigned int);
52:	int io_fsync_prep(struct io_kiocb *, const struct io_uring_sqe *);
25:	int io_sfr_prep(struct io_kiocb *, const struct io_uring_sqe *);
38:	int io_sync_file_range(struct io_kiocb *, unsigned int);
File io_uring/tctx.c:
94:	int __io_uring_add_tctx_node(struct io_ring_ctx *);
136:	int __io_uring_add_tctx_node_from_submit(struct io_ring_ctx *);
47:	void __io_uring_free(struct task_struct *);
244:	int io_ringfd_register(struct io_ring_ctx *, void *, unsigned int);
303:	int io_ringfd_unregister(struct io_ring_ctx *, void *, unsigned int);
60:	int io_uring_alloc_task_context(struct task_struct *, struct io_ring_ctx *);
178:	void io_uring_clean_tctx(struct io_uring_task *);
155:	void io_uring_del_tctx_node(unsigned long);
198:	void io_uring_unreg_ringfd(void);
File io_uring/timeout.c:
178:	struct io_kiocb *__io_disarm_linked_timeout(struct io_kiocb *, struct io_kiocb *);
152:	void io_disarm_next(struct io_kiocb *);
71:	void io_flush_timeouts(struct io_ring_ctx *);
619:	bool io_kill_timeouts(struct io_ring_ctx *, struct task_struct *, bool);
521:	int io_link_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *);
577:	void io_queue_linked_timeout(struct io_kiocb *);
526:	int io_timeout(struct io_kiocb *, unsigned int);
253:	int io_timeout_cancel(struct io_ring_ctx *, struct io_cancel_data *);
516:	int io_timeout_prep(struct io_kiocb *, const struct io_uring_sqe *);
429:	int io_timeout_remove(struct io_kiocb *, unsigned int);
389:	int io_timeout_remove_prep(struct io_kiocb *, const struct io_uring_sqe *);
File io_uring/uring_cmd.c:
104:	int io_uring_cmd(struct io_kiocb *, unsigned int);
22:	void io_uring_cmd_complete_in_task(struct io_uring_cmd *, void (*)(struct io_uring_cmd *));
45:	void io_uring_cmd_done(struct io_uring_cmd *, ssize_t, ssize_t);
151:	int io_uring_cmd_import_fixed(u64, unsigned long, int, struct iov_iter *, void *);
77:	int io_uring_cmd_prep(struct io_kiocb *, const struct io_uring_sqe *);
63:	int io_uring_cmd_prep_async(struct io_kiocb *);
File io_uring/xattr.c:
107:	int io_fgetxattr(struct io_kiocb *, unsigned int);
81:	int io_fgetxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
221:	int io_fsetxattr(struct io_kiocb *, unsigned int);
201:	int io_fsetxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
123:	int io_getxattr(struct io_kiocb *, unsigned int);
86:	int io_getxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
233:	int io_setxattr(struct io_kiocb *, unsigned int);
180:	int io_setxattr_prep(struct io_kiocb *, const struct io_uring_sqe *);
25:	void io_xattr_cleanup(struct io_kiocb *);
File ipc/ipc_sysctl.c:
273:	void retire_ipc_sysctls(struct ipc_namespace *);
214:	bool setup_ipc_sysctls(struct ipc_namespace *);
File ipc/msg.c:
640:	long __arm64_sys_msgctl(const struct pt_regs *);
315:	long __arm64_sys_msgget(const struct pt_regs *);
1270:	long __arm64_sys_msgrcv(const struct pt_regs *);
971:	long __arm64_sys_msgsnd(const struct pt_regs *);
298:	long ksys_msgget(key_t, int);
1264:	long ksys_msgrcv(int, struct msgbuf *, size_t, long, int);
961:	long ksys_msgsnd(int, struct msgbuf *, size_t, int);
1330:	void msg_exit_ns(struct ipc_namespace *);
1369:	void msg_init(void);
1306:	int msg_init_ns(struct ipc_namespace *);
File ipc/msgutil.c:
145:	struct msg_msg *copy_msg(struct msg_msg *, struct msg_msg *);
169:	void free_msg(struct msg_msg *);
84:	struct msg_msg *load_msg(const void *, size_t);
150:	int store_msg(void *, struct msg_msg *, size_t);
File ipc/namespace.c:
92:	struct ipc_namespace *copy_ipcs(unsigned long, struct user_namespace *, struct ipc_namespace *);
108:	void free_ipcs(struct ipc_namespace *, struct ipc_ids *, void (*)(struct ipc_namespace *, struct kern_ipc_perm *));
181:	void put_ipc_ns(struct ipc_namespace *);
File ipc/sem.c:
1705:	long __arm64_sys_semctl(const struct pt_regs *);
624:	long __arm64_sys_semget(const struct pt_regs *);
2298:	long __arm64_sys_semop(const struct pt_regs *);
2270:	long __arm64_sys_semtimedop(const struct pt_regs *);
1985:	long __do_semtimedop(int, struct sembuf *, unsigned int, const struct timespec64 *, struct ipc_namespace *);
2308:	int copy_semundo(unsigned long, struct task_struct *);
2337:	void exit_sem(struct task_struct *);
602:	long ksys_semget(key_t, int, int);
2258:	long ksys_semtimedop(int, struct sembuf *, unsigned int, const struct __kernel_timespec *);
260:	void sem_exit_ns(struct ipc_namespace *);
268:	void sem_init(void);
249:	void sem_init_ns(struct ipc_namespace *);
File ipc/shm.c:
1696:	long __arm64_sys_shmat(const struct pt_regs *);
1299:	long __arm64_sys_shmctl(const struct pt_regs *);
1837:	long __arm64_sys_shmdt(const struct pt_regs *);
850:	long __arm64_sys_shmget(const struct pt_regs *);
1522:	long do_shmat(int, char *, int, ulong *, unsigned long);
439:	void exit_shm(struct task_struct *);
681:	bool is_file_shm_hugepages(struct file *);
1731:	long ksys_shmdt(char *);
831:	long ksys_shmget(key_t, size_t, int);
430:	void shm_destroy_orphaned(struct ipc_namespace *);
139:	void shm_exit_ns(struct ipc_namespace *);
155:	void shm_init(void);
108:	void shm_init_ns(struct ipc_namespace *);
File ipc/util.c:
606:	void ipc64_perm_to_ipc_perm(struct ipc64_perm *, struct ipc_perm *);
278:	int ipc_addid(struct ipc_ids *, struct kern_ipc_perm *, int);
115:	void ipc_init_ids(struct ipc_ids *);
138:	void ipc_init_proc_interface(const char *, const char *, int, int (*)(struct seq_file *, void *));
650:	struct kern_ipc_perm *ipc_obtain_object_check(struct ipc_ids *, int);
627:	struct kern_ipc_perm *ipc_obtain_object_idr(struct ipc_ids *, int);
528:	bool ipc_rcu_getref(struct kern_ipc_perm *);
533:	void ipc_rcu_putref(struct kern_ipc_perm *, void (*)(struct callback_head *));
497:	void ipc_rmid(struct ipc_ids *, struct kern_ipc_perm *);
779:	struct pid_namespace *ipc_seq_pid_ns(struct seq_file *);
522:	void ipc_set_key_private(struct ipc_ids *, struct kern_ipc_perm *);
687:	int ipc_update_perm(struct ipc64_perm *, struct kern_ipc_perm *);
722:	struct kern_ipc_perm *ipcctl_obtain_check(struct ipc_namespace *, struct ipc_ids *, int, int, struct ipc64_perm *, int);
673:	int ipcget(struct ipc_namespace *, struct ipc_ids *, const struct ipc_ops *, struct ipc_params *);
553:	int ipcperms(struct ipc_namespace *, struct kern_ipc_perm *, short);
587:	void kernel_to_ipc64_perm(struct kern_ipc_perm *, struct ipc64_perm *);
File kernel/acct.c:
292:	long __arm64_sys_acct(const struct pt_regs *);
553:	void acct_collect(long, int);
316:	void acct_exit_ns(struct pid_namespace *);
608:	void acct_process(void);
File kernel/async.c:
228:	async_cookie_t async_schedule_node(async_func_t, void *, int);
165:	async_cookie_t async_schedule_node_domain(async_func_t, void *, int, struct async_domain *);
288:	void async_synchronize_cookie(async_cookie_t);
267:	void async_synchronize_cookie_domain(async_cookie_t, struct async_domain *);
239:	void async_synchronize_full(void);
252:	void async_synchronize_full_domain(struct async_domain *);
299:	bool current_is_async(void);
File kernel/bpf/arraymap.c:
52:	int array_map_alloc_check(union bpf_attr *);
798:	int bpf_fd_array_map_lookup_elem(struct bpf_map *, void *, u32 *);
818:	int bpf_fd_array_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
263:	int bpf_percpu_array_copy(struct bpf_map *, void *, void *);
349:	int bpf_percpu_array_update(struct bpf_map *, void *, void *, u64);
File kernel/bpf/bpf_cgrp_storage.c:
198:	u64 bpf_cgrp_storage_delete(u64, u64, u64, u64, u64);
46:	void bpf_cgrp_storage_free(struct cgroup *);
168:	u64 bpf_cgrp_storage_get(u64, u64, u64, u64, u64);
File kernel/bpf/bpf_iter.c:
728:	u64 bpf_for_each_map_elem(u64, u64, u64, u64, u64);
373:	const struct bpf_func_proto *bpf_iter_get_func_proto(enum bpf_func_id, const struct bpf_prog *);
672:	struct bpf_prog *bpf_iter_get_info(struct bpf_iter_meta *, bool);
507:	int bpf_iter_link_attach(const union bpf_attr *, bpfptr_t, struct bpf_prog *);
636:	int bpf_iter_new_fd(struct bpf_link *);
339:	bool bpf_iter_prog_supported(struct bpf_prog *);
296:	int bpf_iter_reg_target(const struct bpf_iter_reg *);
695:	int bpf_iter_run_prog(struct bpf_prog *, void *);
314:	void bpf_iter_unreg_target(const struct bpf_iter_reg *);
502:	bool bpf_link_is_iter(struct bpf_link *);
744:	u64 bpf_loop(u64, u64, u64, u64, u64);
File kernel/bpf/bpf_local_storage.c:
302:	int bpf_local_storage_alloc(void *, struct bpf_local_storage_map *, struct bpf_local_storage_elem *, gfp_t);
87:	void bpf_local_storage_free_rcu(struct callback_head *);
247:	struct bpf_local_storage_data *bpf_local_storage_lookup(struct bpf_local_storage *, struct bpf_local_storage_map *, bool);
640:	struct bpf_map *bpf_local_storage_map_alloc(union bpf_attr *, struct bpf_local_storage_cache *);
536:	int bpf_local_storage_map_alloc_check(union bpf_attr *);
589:	int bpf_local_storage_map_check_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
653:	void bpf_local_storage_map_free(struct bpf_map *, struct bpf_local_storage_cache *, int *);
606:	bool bpf_local_storage_unlink_nolock(struct bpf_local_storage *);
372:	struct bpf_local_storage_data *bpf_local_storage_update(void *, struct bpf_local_storage_map *, void *, u64, gfp_t);
65:	struct bpf_local_storage_elem *bpf_selem_alloc(struct bpf_local_storage_map *, void *, void *, bool, gfp_t);
223:	void bpf_selem_link_map(struct bpf_local_storage_map *, struct bpf_local_storage_elem *);
198:	void bpf_selem_link_storage_nolock(struct bpf_local_storage *, struct bpf_local_storage_elem *);
235:	void bpf_selem_unlink(struct bpf_local_storage_elem *, bool);
205:	void bpf_selem_unlink_map(struct bpf_local_storage_elem *);
File kernel/bpf/bpf_lru_list.c:
689:	void bpf_lru_destroy(struct bpf_lru *);
646:	int bpf_lru_init(struct bpf_lru *, bool, u32, del_from_htab_func, void *);
494:	struct bpf_lru_node *bpf_lru_pop_free(struct bpf_lru *, u32);
608:	void bpf_lru_populate(struct bpf_lru *, void *, u32, u32, u32);
551:	void bpf_lru_push_free(struct bpf_lru *, struct bpf_lru_node *);
File kernel/bpf/bpf_task_storage.c:
293:	u64 bpf_task_storage_delete(u64, u64, u64, u64, u64);
272:	u64 bpf_task_storage_delete_recur(u64, u64, u64, u64, u64);
72:	void bpf_task_storage_free(struct task_struct *);
256:	u64 bpf_task_storage_get(u64, u64, u64, u64, u64);
237:	u64 bpf_task_storage_get_recur(u64, u64, u64, u64, u64);
File kernel/bpf/btf.c:
7417:	u64 bpf_btf_find_by_name_kind(u64, u64, u64, u64, u64);
8145:	int bpf_core_apply(struct bpf_core_ctx *, const struct bpf_core_relo *, int, void *);
7838:	size_t bpf_core_essential_name_len(const char *);
7814:	int bpf_core_types_are_compat(const struct btf *, __u32, const struct btf *, __u32);
7823:	int bpf_core_types_match(const struct btf *, u32, const struct btf *, u32);
5776:	struct btf *bpf_prog_get_target_btf(const struct bpf_prog *);
3722:	int btf_check_and_fixup_fields(const struct btf *, struct btf_record *);
6756:	int btf_check_subprog_arg_match(struct bpf_verifier_env *, int, struct bpf_reg_state *);
6799:	int btf_check_subprog_call(struct bpf_verifier_env *, int, struct bpf_reg_state *);
6624:	int btf_check_type_match(struct bpf_verifier_log *, const struct bpf_prog *, struct btf *, const struct btf_type *);
5842:	bool btf_ctx_access(int, int, enum bpf_access_type, const struct bpf_prog *, struct bpf_insn_access_aux *);
6436:	int btf_distill_func_proto(struct bpf_verifier_log *, struct btf *, const struct btf_type *, const char *, struct btf_func_model *);
512:	s32 btf_find_by_name_kind(const struct btf *, const char *, u8);
7661:	s32 btf_find_dtor_kfunc(struct btf *, u32);
5337:	struct btf_struct_meta *btf_find_struct_meta(const struct btf *, u32);
1679:	void btf_get(struct btf *);
7094:	struct btf *btf_get_by_fd(int);
7176:	int btf_get_fd_by_id(u32);
7116:	int btf_get_info_by_fd(const struct btf *, const union bpf_attr *, union bpf_attr *);
5537:	const struct btf_member *btf_get_prog_ctx_type(struct bpf_verifier_log *, const struct btf *, const struct btf_type *, enum bpf_prog_type, int);
7202:	bool btf_is_kernel(const struct btf *);
7207:	bool btf_is_module(const struct btf *);
7597:	u32 *btf_kfunc_id_set_contains(const struct btf *, enum bpf_prog_type, u32);
7612:	u32 *btf_kfunc_is_modify_return(const struct btf *, u32);
844:	bool btf_member_is_reg_int(const struct btf *, const struct btf_type *, const struct btf_member *, u32, u32);
800:	const char *btf_name_by_offset(const struct btf *, u32);
7063:	int btf_new_fd(const union bpf_attr *, bpfptr_t);
500:	u32 btf_nr_types(const struct btf *);
7197:	u32 btf_obj_id(const struct btf *);
3809:	struct btf_field_offs *btf_parse_field_offs(struct btf_record *);
3639:	struct btf_record *btf_parse_fields(const struct btf *, const struct btf_type *, u32, u32);
5632:	struct btf *btf_parse_vmlinux(void);
6837:	int btf_prepare_func_args(struct bpf_verifier_env *, int, struct bpf_reg_state *);
1684:	void btf_put(struct btf *);
1914:	const struct btf_type *btf_resolve_size(const struct btf *, const struct btf_type *, u32 *);
6286:	int btf_struct_access(struct bpf_verifier_log *, const struct bpf_reg_state *, int, int, enum bpf_access_type, u32 *, enum bpf_type_flag *);
6374:	bool btf_struct_ids_match(struct bpf_verifier_log *, const struct btf *, u32, int, const struct btf *, u32, bool);
7357:	struct module *btf_try_get_module(const struct btf *);
805:	const struct btf_type *btf_type_by_id(const struct btf *, u32);
1944:	const struct btf_type *btf_type_id_size(const struct btf *, u32 *, u32 *);
463:	bool btf_type_is_void(const struct btf_type *);
604:	const struct btf_type *btf_type_resolve_func_ptr(const struct btf *, u32, u32 *);
592:	const struct btf_type *btf_type_resolve_ptr(const struct btf *, u32, u32 *);
6979:	void btf_type_seq_show(const struct btf *, u32, void *, struct seq_file *);
6965:	int btf_type_seq_show_flags(const struct btf *, u32, void *, struct seq_file *, u64);
576:	const struct btf_type *btf_type_skip_modifiers(const struct btf *, u32, u32 *);
7015:	int btf_type_snprintf_show(const struct btf *, u32, void *, char *, int, u64);
319:	const char *btf_type_str(const struct btf_type *);
6364:	bool btf_types_are_same(const struct btf *, u32, const struct btf *, u32);
5609:	int get_kern_ctx_btf_id(struct bpf_verifier_log *, enum bpf_prog_type);
7655:	int register_btf_fmodret_id_set(const struct btf_kfunc_id_set *);
7716:	int register_btf_id_dtor_kfuncs(const struct btf_id_dtor_kfunc *, u32, struct module *);
7644:	int register_btf_kfunc_id_set(enum bpf_prog_type, const struct btf_kfunc_id_set *);
File kernel/bpf/cgroup.c:
1520:	int __cgroup_bpf_check_dev_permission(short, u32, u32, short, enum cgroup_bpf_attach_type);
1437:	int __cgroup_bpf_run_filter_sk(struct sock *, enum cgroup_bpf_attach_type);
1356:	int __cgroup_bpf_run_filter_skb(struct sock *, struct sk_buff *, enum cgroup_bpf_attach_type);
1462:	int __cgroup_bpf_run_filter_sock_addr(struct sock *, struct sockaddr *, enum cgroup_bpf_attach_type, void *, u32 *);
1509:	int __cgroup_bpf_run_filter_sock_ops(struct sock *, struct bpf_sock_ops_kern *, enum cgroup_bpf_attach_type);
1681:	int __cgroup_bpf_run_filter_sysctl(struct ctl_table_header *, struct ctl_table *, int, char **, size_t *, loff_t *, enum cgroup_bpf_attach_type);
110:	unsigned int __cgroup_bpf_run_lsm_current(const void *, const struct bpf_insn *);
66:	unsigned int __cgroup_bpf_run_lsm_sock(const void *, const struct bpf_insn *);
88:	unsigned int __cgroup_bpf_run_lsm_socket(const void *, const struct bpf_insn *);
1540:	u64 bpf_get_local_storage(u64, u64, u64, u64, u64);
1571:	u64 bpf_get_retval(u64, u64, u64, u64, u64);
1585:	u64 bpf_set_retval(u64, u64, u64, u64, u64);
2071:	u64 bpf_sysctl_get_current_value(u64, u64, u64, u64, u64);
2014:	u64 bpf_sysctl_get_name(u64, u64, u64, u64, u64);
2086:	u64 bpf_sysctl_get_new_value(u64, u64, u64, u64, u64);
2106:	u64 bpf_sysctl_set_new_value(u64, u64, u64, u64, u64);
461:	int cgroup_bpf_inherit(struct cgroup *);
1273:	int cgroup_bpf_link_attach(const union bpf_attr *, struct bpf_prog *);
192:	void cgroup_bpf_offline(struct cgroup *);
1129:	int cgroup_bpf_prog_attach(const union bpf_attr *, enum bpf_prog_type, struct bpf_prog *);
1158:	int cgroup_bpf_prog_detach(const union bpf_attr *, enum bpf_prog_type);
1317:	int cgroup_bpf_prog_query(const union bpf_attr *, union bpf_attr *);
2481:	const struct bpf_func_proto *cgroup_common_func_proto(enum bpf_func_id, const struct bpf_prog *);
2523:	const struct bpf_func_proto *cgroup_current_func_proto(enum bpf_func_id, const struct bpf_prog *);
File kernel/bpf/cgroup_iter.c:
272:	int bpf_iter_cgroup(struct bpf_iter_meta *, struct cgroup *);
File kernel/bpf/core.c:
1465:	u64 __bpf_call_base(u64, u64, u64, u64, u64);
2519:	void __bpf_free_used_btfs(struct bpf_prog_aux *, struct btf_mod_pair *, u32);
2499:	void __bpf_free_used_maps(struct bpf_prog_aux *, struct bpf_map **, u32);
264:	void __bpf_prog_free(struct bpf_prog *);
2742:	void *bpf_arch_text_copy(void *, void *, size_t);
2747:	int bpf_arch_text_invalidate(void *, size_t);
2736:	int bpf_arch_text_poke(void *, enum bpf_text_poke_type, void *, void *);
2665:	u64 bpf_event_output(struct bpf_map *, u64, void *, u64, void *, u64, bpf_ctx_copy_t);
2617:	u64 bpf_get_raw_cpu_id(u64, u64, u64, u64, u64);
2654:	const struct bpf_func_proto *bpf_get_trace_printk_proto(void);
2659:	const struct bpf_func_proto *bpf_get_trace_vprintk_proto(void);
2698:	bool bpf_helper_changes_pkt_data(void *);
2686:	struct bpf_prog *bpf_int_jit_compile(struct bpf_prog *);
71:	void *bpf_internal_load_pointer_neg_helper(const struct sk_buff *, int, unsigned int);
2694:	void bpf_jit_compile(struct bpf_prog *);
2711:	bool bpf_jit_needs_zext(void);
2722:	bool bpf_jit_supports_kfunc_call(void);
2717:	bool bpf_jit_supports_subprog_tailcalls(void);
1608:	bool bpf_opcode_in_insntable(u8);
2069:	void bpf_patch_call_args(struct bpf_insn *, u32);
453:	struct bpf_prog *bpf_patch_insn_single(struct bpf_prog *, u32, const struct bpf_insn *, u32);
1630:	u64 bpf_probe_read_kernel(void *, u32, const void *);
127:	struct bpf_prog *bpf_prog_alloc(unsigned int, gfp_t);
155:	int bpf_prog_alloc_jited_linfo(struct bpf_prog *);
88:	struct bpf_prog *bpf_prog_alloc_no_stats(unsigned int, gfp_t);
2235:	struct bpf_prog_array *bpf_prog_array_alloc(u32, gfp_t);
2408:	int bpf_prog_array_copy(struct bpf_prog_array *, struct bpf_prog *, struct bpf_prog *, u64, struct bpf_prog_array **);
2479:	int bpf_prog_array_copy_info(struct bpf_prog_array *, u32 *, u32, u32 *);
2315:	int bpf_prog_array_copy_to_user(struct bpf_prog_array *, __u32 *, u32);
2341:	void bpf_prog_array_delete_safe(struct bpf_prog_array *, struct bpf_prog *);
2368:	int bpf_prog_array_delete_safe_at(struct bpf_prog_array *, int);
2246:	void bpf_prog_array_free(struct bpf_prog_array *);
2267:	void bpf_prog_array_free_sleepable(struct bpf_prog_array *);
2285:	bool bpf_prog_array_is_empty(struct bpf_prog_array *);
2274:	int bpf_prog_array_length(struct bpf_prog_array *);
2388:	int bpf_prog_array_update_at(struct bpf_prog_array *, int, struct bpf_prog *);
277:	int bpf_prog_calc_tag(struct bpf_prog *);
205:	void bpf_prog_fill_jited_linfo(struct bpf_prog *, const u32 *);
2580:	void bpf_prog_free(struct bpf_prog *);
169:	void bpf_prog_jit_attempt_done(struct bpf_prog *);
534:	void bpf_prog_kallsyms_del_all(struct bpf_prog *);
2090:	bool bpf_prog_map_compatible(struct bpf_map *, const struct bpf_prog *);
234:	struct bpf_prog *bpf_prog_realloc(struct bpf_prog *, unsigned int, gfp_t);
2163:	struct bpf_prog *bpf_prog_select_runtime(struct bpf_prog *, int *);
514:	int bpf_remove_insns(struct bpf_prog *, u32, u32);
2594:	void bpf_user_rnd_init_once(void);
2599:	u64 bpf_user_rnd_u32(u64, u64, u64, u64, u64);
2730:	int skb_copy_bits(const struct sk_buff *, int, void *, int);
File kernel/bpf/disasm.c:
54:	const char *func_id_name(int);
131:	void print_bpf_insn(const struct bpf_insn_cbs *, const struct bpf_insn *, bool);
File kernel/bpf/hashtab.c:
2419:	int bpf_fd_htab_map_lookup_elem(struct bpf_map *, void *, u32 *);
2439:	int bpf_fd_htab_map_update_elem(struct bpf_map *, struct file *, void *, void *, u64);
2273:	int bpf_percpu_hash_copy(struct bpf_map *, void *, void *);
2305:	int bpf_percpu_hash_update(struct bpf_map *, void *, void *, u64);
File kernel/bpf/helpers.c:
1585:	const struct bpf_func_proto *bpf_base_func_proto(enum bpf_func_id);
787:	void bpf_bprintf_cleanup(void);
809:	int bpf_bprintf_prepare(char *, u32, const u64 *, u32 **, u32);
2024:	void *bpf_cast_to_kern_ctx(void *);
1933:	struct cgroup *bpf_cgroup_acquire(struct cgroup *);
1992:	struct cgroup *bpf_cgroup_ancestor(struct cgroup *, int);
1945:	struct cgroup *bpf_cgroup_kptr_get(struct cgroup **);
1977:	void bpf_cgroup_release(struct cgroup *);
648:	u64 bpf_copy_from_user(u64, u64, u64, u64, u64);
671:	u64 bpf_copy_from_user_task(u64, u64, u64, u64, u64);
1422:	int bpf_dynptr_check_size(u32);
1550:	u64 bpf_dynptr_data(u64, u64, u64, u64, u64);
1451:	u64 bpf_dynptr_from_mem(u64, u64, u64, u64, u64);
1417:	u32 bpf_dynptr_get_size(const struct bpf_dynptr_kern *);
1427:	void bpf_dynptr_init(struct bpf_dynptr_kern *, void *, enum bpf_dynptr_type, u32, u32);
1486:	u64 bpf_dynptr_read(u64, u64, u64, u64, u64);
1436:	void bpf_dynptr_set_null(struct bpf_dynptr_kern *);
1518:	u64 bpf_dynptr_write(u64, u64, u64, u64, u64);
628:	u64 bpf_event_output_data(u64, u64, u64, u64, u64);
414:	u64 bpf_get_current_ancestor_cgroup_id(u64, u64, u64, u64, u64);
395:	u64 bpf_get_current_cgroup_id(u64, u64, u64, u64, u64);
252:	u64 bpf_get_current_comm(u64, u64, u64, u64, u64);
216:	u64 bpf_get_current_pid_tgid(u64, u64, u64, u64, u64);
232:	u64 bpf_get_current_uid_gid(u64, u64, u64, u64, u64);
579:	u64 bpf_get_ns_current_pid_tgid(u64, u64, u64, u64, u64);
158:	u64 bpf_get_numa_node_id(u64, u64, u64, u64, u64);
147:	u64 bpf_get_smp_processor_id(u64, u64, u64, u64, u64);
383:	u64 bpf_jiffies64(u64, u64, u64, u64, u64);
1378:	u64 bpf_kptr_xchg(u64, u64, u64, u64, u64);
181:	u64 bpf_ktime_get_boot_ns(u64, u64, u64, u64, u64);
193:	u64 bpf_ktime_get_coarse_ns(u64, u64, u64, u64, u64);
169:	u64 bpf_ktime_get_ns(u64, u64, u64, u64, u64);
204:	u64 bpf_ktime_get_tai_ns(u64, u64, u64, u64, u64);
1723:	void bpf_list_head_free(const struct btf_field *, void *, struct bpf_spin_lock *);
1831:	struct bpf_list_node *bpf_list_pop_back(struct bpf_list_head *);
1826:	struct bpf_list_node *bpf_list_pop_front(struct bpf_list_head *);
1808:	void bpf_list_push_back(struct bpf_list_head *, struct bpf_list_node *);
1803:	void bpf_list_push_front(struct bpf_list_head *, struct bpf_list_node *);
69:	u64 bpf_map_delete_elem(u64, u64, u64, u64, u64);
36:	u64 bpf_map_lookup_elem(u64, u64, u64, u64, u64);
125:	u64 bpf_map_lookup_percpu_elem(u64, u64, u64, u64, u64);
112:	u64 bpf_map_peek_elem(u64, u64, u64, u64, u64);
99:	u64 bpf_map_pop_elem(u64, u64, u64, u64, u64);
84:	u64 bpf_map_push_elem(u64, u64, u64, u64, u64);
51:	u64 bpf_map_update_elem(u64, u64, u64, u64, u64);
1782:	void bpf_obj_drop_impl(void *, void *);
1768:	void *bpf_obj_new_impl(u64, void *);
705:	u64 bpf_per_cpu_ptr(u64, u64, u64, u64, u64);
2034:	void bpf_rcu_read_lock(void);
2039:	void bpf_rcu_read_unlock(void);
2029:	void *bpf_rdonly_cast(void *, u32);
1028:	u64 bpf_snprintf(u64, u64, u64, u64, u64);
330:	u64 bpf_spin_lock(u64, u64, u64, u64, u64);
353:	u64 bpf_spin_unlock(u64, u64, u64, u64, u64);
565:	u64 bpf_strncmp(u64, u64, u64, u64, u64);
512:	u64 bpf_strtol(u64, u64, u64, u64, u64);
537:	u64 bpf_strtoul(u64, u64, u64, u64, u64);
1842:	struct task_struct *bpf_task_acquire(struct task_struct *);
1853:	struct task_struct *bpf_task_acquire_not_zero(struct task_struct *);
2011:	struct task_struct *bpf_task_from_pid(s32);
1905:	struct task_struct *bpf_task_kptr_get(struct task_struct **);
1918:	void bpf_task_release(struct task_struct *);
721:	u64 bpf_this_cpu_ptr(u64, u64, u64, u64, u64);
1293:	u64 bpf_timer_cancel(u64, u64, u64, u64, u64);
1334:	void bpf_timer_cancel_and_free(void *);
1139:	u64 bpf_timer_init(u64, u64, u64, u64, u64);
1199:	u64 bpf_timer_set_callback(u64, u64, u64, u64, u64);
1252:	u64 bpf_timer_start(u64, u64, u64, u64, u64);
367:	void copy_map_value_locked(struct bpf_map *, void *, void *, bool);
File kernel/bpf/inode.c:
530:	int bpf_obj_get_user(const char *, int);
481:	int bpf_obj_pin_user(u32, const char *);
586:	struct bpf_prog *bpf_prog_get_type_path(const char *, enum bpf_prog_type);
File kernel/bpf/link_iter.c:
42:	int bpf_iter_bpf_link(struct bpf_iter_meta *, struct bpf_link *);
File kernel/bpf/local_storage.c:
492:	struct bpf_cgroup_storage *bpf_cgroup_storage_alloc(struct bpf_prog *, enum bpf_cgroup_storage_type);
463:	int bpf_cgroup_storage_assign(struct bpf_prog_aux *, struct bpf_map *);
551:	void bpf_cgroup_storage_free(struct bpf_cgroup_storage *);
567:	void bpf_cgroup_storage_link(struct bpf_cgroup_storage *, struct cgroup *, enum bpf_attach_type);
588:	void bpf_cgroup_storage_unlink(struct bpf_cgroup_storage *);
182:	int bpf_percpu_cgroup_storage_copy(struct bpf_map *, void *, void *);
211:	int bpf_percpu_cgroup_storage_update(struct bpf_map *, void *, void *, u64);
67:	struct bpf_cgroup_storage *cgroup_storage_lookup(struct bpf_cgroup_storage_map *, void *, bool);
File kernel/bpf/map_in_map.c:
119:	void *bpf_map_fd_get_ptr(struct bpf_map *, struct file *, int);
141:	void bpf_map_fd_put_ptr(void *);
149:	u32 bpf_map_fd_sys_lookup_elem(void *);
10:	struct bpf_map *bpf_map_meta_alloc(int);
108:	bool bpf_map_meta_equal(const struct bpf_map *, const struct bpf_map *);
100:	void bpf_map_meta_free(struct bpf_map *);
File kernel/bpf/map_iter.c:
42:	int bpf_iter_bpf_map(struct bpf_iter_meta *, struct bpf_map *);
165:	int bpf_iter_bpf_map_elem(struct bpf_iter_meta *, struct bpf_map *, void *, void *);
158:	int bpf_iter_map_fill_link_info(const struct bpf_iter_aux_info *, struct bpf_link_info *);
152:	void bpf_iter_map_show_fdinfo(const struct bpf_iter_aux_info *, struct seq_file *);
File kernel/bpf/memalloc.c:
633:	void *bpf_mem_alloc(struct bpf_mem_alloc *, size_t);
517:	void bpf_mem_alloc_destroy(struct bpf_mem_alloc *);
377:	int bpf_mem_alloc_init(struct bpf_mem_alloc *, int, bool);
663:	void *bpf_mem_cache_alloc(struct bpf_mem_alloc *);
671:	void bpf_mem_cache_free(struct bpf_mem_alloc *, void *);
649:	void bpf_mem_free(struct bpf_mem_alloc *, void *);
File kernel/bpf/percpu_freelist.c:
184:	struct pcpu_freelist_node *__pcpu_freelist_pop(struct pcpu_freelist *);
80:	void __pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);
25:	void pcpu_freelist_destroy(struct pcpu_freelist *);
6:	int pcpu_freelist_init(struct pcpu_freelist *);
191:	struct pcpu_freelist_node *pcpu_freelist_pop(struct pcpu_freelist *);
99:	void pcpu_freelist_populate(struct pcpu_freelist *, void *, u32, u32);
89:	void pcpu_freelist_push(struct pcpu_freelist *, struct pcpu_freelist_node *);
File kernel/bpf/prog_iter.c:
42:	int bpf_iter_bpf_prog(struct bpf_iter_meta *, struct bpf_prog *);
File kernel/bpf/ringbuf.c:
497:	u64 bpf_ringbuf_discard(u64, u64, u64, u64, u64);
624:	u64 bpf_ringbuf_discard_dynptr(u64, u64, u64, u64, u64);
510:	u64 bpf_ringbuf_output(u64, u64, u64, u64, u64);
538:	u64 bpf_ringbuf_query(u64, u64, u64, u64, u64);
437:	u64 bpf_ringbuf_reserve(u64, u64, u64, u64, u64);
565:	u64 bpf_ringbuf_reserve_dynptr(u64, u64, u64, u64, u64);
484:	u64 bpf_ringbuf_submit(u64, u64, u64, u64, u64);
605:	u64 bpf_ringbuf_submit_dynptr(u64, u64, u64, u64, u64);
712:	u64 bpf_user_ringbuf_drain(u64, u64, u64, u64, u64);
File kernel/bpf/stackmap.c:
455:	u64 bpf_get_stack(u64, u64, u64, u64, u64);
499:	u64 bpf_get_stack_pe(u64, u64, u64, u64, u64);
283:	u64 bpf_get_stackid(u64, u64, u64, u64, u64);
331:	u64 bpf_get_stackid_pe(u64, u64, u64, u64, u64);
471:	u64 bpf_get_task_stack(u64, u64, u64, u64, u64);
569:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
File kernel/bpf/syscall.c:
5071:	long __arm64_sys_bpf(const struct pt_regs *);
1217:	struct bpf_map *__bpf_map_get(struct fd);
80:	int bpf_check_uarg_tail_zero(bpfptr_t, size_t, size_t);
934:	int bpf_get_file_flag(int);
5189:	u64 bpf_kallsyms_lookup_name(u64, u64, u64, u64, u64);
4710:	struct bpf_link *bpf_link_by_id(u32);
2708:	void bpf_link_cleanup(struct bpf_link_primer *);
4732:	struct bpf_link *bpf_link_get_curr_or_next(u32 *);
2881:	struct bpf_link *bpf_link_get_from_fd(u32);
2716:	void bpf_link_inc(struct bpf_link *);
2681:	void bpf_link_init(struct bpf_link *, enum bpf_link_type, const struct bpf_link_ops *, struct bpf_prog *);
2876:	int bpf_link_new_fd(struct bpf_link *);
2834:	int bpf_link_prime(struct bpf_link *, struct bpf_link_primer *);
2744:	void bpf_link_put(struct bpf_link *);
2864:	int bpf_link_settle(struct bpf_link_primer *);
473:	void *bpf_map_alloc_percpu(const struct bpf_map *, size_t, size_t, gfp_t);
337:	void *bpf_map_area_alloc(u64, int);
347:	void bpf_map_area_free(void *);
342:	void *bpf_map_area_mmapable_alloc(u64, int);
393:	void bpf_map_free_id(struct bpf_map *, bool);
551:	void bpf_map_free_record(struct bpf_map *);
1242:	struct bpf_map *bpf_map_get(u32);
3668:	struct bpf_map *bpf_map_get_curr_or_next(u32 *);
1258:	struct bpf_map *bpf_map_get_with_uref(u32);
1229:	void bpf_map_inc(struct bpf_map *);
1287:	struct bpf_map *bpf_map_inc_not_zero(struct bpf_map *);
1235:	void bpf_map_inc_with_uref(struct bpf_map *);
364:	void bpf_map_init_from_attr(struct bpf_map *, union bpf_attr *);
444:	void *bpf_map_kmalloc_node(const struct bpf_map *, size_t, gfp_t, int);
459:	void *bpf_map_kzalloc(const struct bpf_map *, size_t, gfp_t);
922:	int bpf_map_new_fd(struct bpf_map *, int);
725:	void bpf_map_put(struct bpf_map *);
731:	void bpf_map_put_with_uref(struct bpf_map *);
149:	bool bpf_map_write_active(const struct bpf_map *);
638:	void bpf_obj_free_fields(const struct btf_record *, void *);
631:	void bpf_obj_free_timer(const struct btf_record *, void *);
956:	int bpf_obj_name_cpy(char *, const char *, unsigned int);
2202:	void bpf_prog_add(struct bpf_prog *, int);
3708:	struct bpf_prog *bpf_prog_by_id(u32);
2004:	void bpf_prog_free_id(struct bpf_prog *);
2274:	struct bpf_prog *bpf_prog_get(u32);
3687:	struct bpf_prog *bpf_prog_get_curr_or_next(u32 *);
2239:	bool bpf_prog_get_ok(struct bpf_prog *, enum bpf_prog_type *, bool);
2279:	struct bpf_prog *bpf_prog_get_type_dev(u32, enum bpf_prog_type, bool);
2219:	void bpf_prog_inc(struct bpf_prog *);
2100:	void bpf_prog_inc_misses_counter(struct bpf_prog *);
2226:	struct bpf_prog *bpf_prog_inc_not_zero(struct bpf_prog *);
2178:	int bpf_prog_new_fd(struct bpf_prog *);
2080:	void bpf_prog_put(struct bpf_prog *);
2208:	void bpf_prog_sub(struct bpf_prog *, int);
1297:	int bpf_stackmap_copy(struct bpf_map *, void *, void *);
5088:	u64 bpf_sys_bpf(u64, u64, u64, u64, u64);
5172:	u64 bpf_sys_close(u64, u64, u64, u64, u64);
557:	struct btf_record *btf_record_dup(const struct btf_record *);
602:	bool btf_record_equal(const struct btf_record *, const struct btf_record *);
509:	struct btf_field *btf_record_find(const struct btf_record *, u32, enum btf_field_type);
522:	void btf_record_free(struct btf_record *);
1577:	int generic_map_delete_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1690:	int generic_map_lookup_batch(struct bpf_map *, const union bpf_attr *, union bpf_attr *);
1631:	int generic_map_update_batch(struct bpf_map *, struct file *, const union bpf_attr *, union bpf_attr *);
5115:	int kern_sys_bpf(int, union bpf_attr *, unsigned int);
977:	int map_check_no_btf(const struct bpf_map *, const struct btf *, const struct btf_type *, const struct btf_type *);
5167:	const struct bpf_func_proto *tracing_prog_func_proto(enum bpf_func_id, const struct bpf_prog *);
5272:	void unpriv_ebpf_notify(int);
File kernel/bpf/task_iter.c:
780:	u64 bpf_find_vma(u64, u64, u64, u64, u64);
194:	int bpf_iter_task(struct bpf_iter_meta *, struct task_struct *);
368:	int bpf_iter_task_file(struct bpf_iter_meta *, struct task_struct *, u32, struct file *);
632:	int bpf_iter_task_vma(struct bpf_iter_meta *, struct task_struct *, struct vm_area_struct *);
File kernel/bpf/tnum.c:
62:	struct tnum tnum_add(struct tnum, struct tnum);
86:	struct tnum tnum_and(struct tnum, struct tnum);
47:	struct tnum tnum_arshift(struct tnum, u8, u8);
153:	struct tnum tnum_cast(struct tnum, u8);
206:	struct tnum tnum_clear_subreg(struct tnum);
16:	struct tnum tnum_const(u64);
211:	struct tnum tnum_const_subreg(struct tnum, u32);
167:	bool tnum_in(struct tnum, struct tnum);
144:	struct tnum tnum_intersect(struct tnum, struct tnum);
160:	bool tnum_is_aligned(struct tnum, u64);
37:	struct tnum tnum_lshift(struct tnum, u8);
122:	struct tnum tnum_mul(struct tnum, struct tnum);
96:	struct tnum tnum_or(struct tnum, struct tnum);
21:	struct tnum tnum_range(u64, u64);
42:	struct tnum tnum_rshift(struct tnum, u8);
181:	int tnum_sbin(char *, size_t, struct tnum);
175:	int tnum_strn(char *, size_t, struct tnum);
74:	struct tnum tnum_sub(struct tnum, struct tnum);
201:	struct tnum tnum_subreg(struct tnum);
105:	struct tnum tnum_xor(struct tnum, struct tnum);
File kernel/bpf/verifier.c:
16846:	int bpf_check(struct bpf_prog **, union bpf_attr *, bpfptr_t);
16495:	int bpf_check_attach_target(struct bpf_verifier_log *, const struct bpf_prog *, const struct bpf_prog *, u32, struct bpf_attach_target_info *);
2058:	void bpf_free_kfunc_btf_tab(struct bpf_kfunc_btf_tab *);
16835:	struct btf *bpf_get_btf_vmlinux(void);
2231:	const struct btf_func_model *bpf_jit_find_kfunc_model(const struct bpf_prog *, const struct bpf_insn *);
362:	void bpf_log(struct bpf_verifier_log *, const char *, ...);
2225:	bool bpf_prog_has_kfunc_call(const struct bpf_prog *);
335:	void bpf_verifier_log_write(struct bpf_verifier_env *, const char *, ...);
294:	void bpf_verifier_vlog(struct bpf_verifier_log *, const char *, va_list);
6297:	int check_func_arg_reg_off(struct bpf_verifier_env *, const struct bpf_reg_state *, int, enum bpf_arg_type);
5668:	int check_mem_reg(struct bpf_verifier_env *, struct bpf_reg_state *, u32, u32);
3938:	int check_ptr_off_reg(struct bpf_verifier_env *, const struct bpf_reg_state *, int);
7254:	int map_set_for_each_callback_args(struct bpf_verifier_env *, struct bpf_func_state *, struct bpf_func_state *);
3171:	int mark_chain_precision(struct bpf_verifier_env *, int);
5944:	int process_dynptr_func(struct bpf_verifier_env *, int, enum bpf_arg_type, struct bpf_call_arg_meta *);
File kernel/capability.c:
148:	long __arm64_sys_capget(const struct pt_regs *);
222:	long __arm64_sys_capset(const struct pt_regs *);
448:	bool capable(int);
505:	bool capable_wrt_inode_uidgid(struct user_namespace *, const struct inode *, int);
467:	bool file_ns_capable(const struct file *, struct user_namespace *, int);
316:	bool has_capability(struct task_struct *, int);
359:	bool has_capability_noaudit(struct task_struct *, int);
294:	bool has_ns_capability(struct task_struct *, struct user_namespace *, int);
335:	bool has_ns_capability_noaudit(struct task_struct *, struct user_namespace *, int);
395:	bool ns_capable(struct user_namespace *, int);
413:	bool ns_capable_noaudit(struct user_namespace *, int);
432:	bool ns_capable_setid(struct user_namespace *, int);
488:	bool privileged_wrt_inode_uidgid(struct user_namespace *, struct user_namespace *, const struct inode *);
523:	bool ptracer_capable(struct task_struct *, struct user_namespace *);
File kernel/cgroup/cgroup-v1.c:
751:	void cgroup1_check_for_release(struct cgroup *);
1234:	int cgroup1_get_tree(struct fs_context *);
921:	int cgroup1_parse_param(struct fs_context *, struct fs_parameter *);
196:	void cgroup1_pidlist_destroy_all(struct cgroup *);
1070:	int cgroup1_reconfigure(struct fs_context *);
781:	void cgroup1_release_agent(struct work_struct *);
44:	bool cgroup1_ssid_disabled(int);
56:	int cgroup_attach_task_all(struct task_struct *, struct task_struct *);
94:	int cgroup_transfer_tasks(struct cgroup *, struct cgroup *);
699:	int cgroupstats_build(struct cgroupstats *, struct dentry *);
668:	int proc_cgroupstats_show(struct seq_file *, void *);
File kernel/cgroup/cgroup.c:
629:	int __cgroup_task_count(const struct cgroup *);
4430:	int cgroup_add_dfl_cftypes(struct cgroup_subsys *, struct cftype *);
4447:	int cgroup_add_legacy_cftypes(struct cgroup_subsys *, struct cftype *);
2433:	void cgroup_attach_lock(bool);
2888:	int cgroup_attach_task(struct cgroup *, struct task_struct *, bool);
2444:	void cgroup_attach_unlock(bool);
6510:	int cgroup_can_fork(struct task_struct *, struct kernel_clone_args *);
6549:	void cgroup_cancel_fork(struct task_struct *, struct kernel_clone_args *);
2149:	int cgroup_do_get_tree(struct fs_context *);
562:	struct cgroup_subsys_state *cgroup_e_css(struct cgroup *, struct cgroup_subsys *);
6662:	void cgroup_exit(struct task_struct *);
1317:	void cgroup_favor_dynmods(struct cgroup_root *, bool);
4462:	void cgroup_file_notify(struct cgroup_file *);
4486:	void cgroup_file_show(struct cgroup_file *, bool);
6312:	void cgroup_fork(struct task_struct *);
6704:	void cgroup_free(struct task_struct *);
1352:	void cgroup_free_root(struct cgroup_root *);
592:	struct cgroup_subsys_state *cgroup_get_e_css(struct cgroup *, struct cgroup_subsys *);
6875:	struct cgroup *cgroup_get_from_fd(int);
6191:	struct cgroup *cgroup_get_from_id(u64);
6816:	struct cgroup *cgroup_get_from_path(const char *);
6060:	int cgroup_init(void);
6023:	int cgroup_init_early(void);
398:	bool cgroup_is_thread_root(struct cgroup *);
359:	bool cgroup_is_threaded(struct cgroup *);
1651:	struct cgroup *cgroup_kn_lock_live(struct kernfs_node *, bool);
1619:	void cgroup_kn_unlock(struct kernfs_node *);
3105:	void cgroup_lock_and_drain_offline(struct cgroup *);
2858:	int cgroup_migrate(struct task_struct *, bool, struct cgroup_mgctx *);
2744:	void cgroup_migrate_add_src(struct css_set *, struct cgroup *, struct cgroup_mgctx *);
2699:	void cgroup_migrate_finish(struct cgroup_mgctx *);
2791:	int cgroup_migrate_prepare_dst(struct cgroup_mgctx *);
2668:	int cgroup_migrate_vet_dst(struct cgroup *);
5710:	int cgroup_mkdir(struct kernfs_node *, const char *, umode_t);
318:	bool cgroup_on_dfl(const struct cgroup *);
6912:	int cgroup_parse_float(const char *, unsigned int, s64 *);
6174:	void cgroup_path_from_kernfs_id(u64, char *, size_t);
2354:	int cgroup_path_ns(struct cgroup *, char *, size_t, struct cgroup_namespace *);
2346:	int cgroup_path_ns_locked(struct cgroup *, char *, size_t, struct cgroup_namespace *);
6570:	void cgroup_post_fork(struct task_struct *, struct kernel_clone_args *);
2977:	void cgroup_procs_write_finish(struct task_struct *, bool);
2920:	struct task_struct *cgroup_procs_write_start(char *, bool, bool *);
3886:	bool cgroup_psi_enabled(void);
6689:	void cgroup_release(struct task_struct *);
4367:	int cgroup_rm_cftypes(struct cftype *);
5940:	int cgroup_rmdir(struct kernfs_node *);
1310:	struct cgroup_root *cgroup_root_from_kf(struct kernfs_root *);
2046:	int cgroup_setup_root(struct cgroup_root *, u16);
1887:	int cgroup_show_path(struct seq_file *, struct kernfs_node *, struct kernfs_root *);
6938:	void cgroup_sk_alloc(struct sock_cgroup_data *);
6966:	void cgroup_sk_clone(struct sock_cgroup_data *);
6979:	void cgroup_sk_free(struct sock_cgroup_data *);
265:	bool cgroup_ssid_enabled(int);
646:	int cgroup_task_count(const struct cgroup *);
2497:	struct task_struct *cgroup_taskset_first(struct cgroup_taskset *, struct cgroup_subsys_state **);
2514:	struct task_struct *cgroup_taskset_next(struct cgroup_taskset *, struct cgroup_subsys_state **);
6856:	struct cgroup *cgroup_v1v2_get_from_fd(int);
6801:	struct cgroup_subsys_state *css_from_id(int, struct cgroup_subsys *);
4714:	bool css_has_online_children(struct cgroup_subsys_state *);
4518:	struct cgroup_subsys_state *css_next_child(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4682:	struct cgroup_subsys_state *css_next_descendant_post(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4587:	struct cgroup_subsys_state *css_next_descendant_pre(struct cgroup_subsys_state *, struct cgroup_subsys_state *);
4629:	struct cgroup_subsys_state *css_rightmost_descendant(struct cgroup_subsys_state *);
4973:	void css_task_iter_end(struct css_task_iter *);
4942:	struct task_struct *css_task_iter_next(struct css_task_iter *);
4912:	void css_task_iter_start(struct cgroup_subsys_state *, unsigned int, struct css_task_iter *);
6762:	struct cgroup_subsys_state *css_tryget_online_from_dir(struct dentry *, struct cgroup_subsys *);
6743:	void enable_debug_cgroup(void);
2026:	void init_cgroup_root(struct cgroup_fs_context *);
657:	struct cgroup_subsys_state *of_css(struct kernfs_open_file *);
6232:	int proc_cgroup_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
961:	void put_css_set_locked(struct css_set *);
1787:	int rebind_subsystems(struct cgroup_root *, u16);
1486:	struct cgroup *task_cgroup_from_root(struct task_struct *, struct cgroup_root *);
2384:	int task_cgroup_path(struct task_struct *, char *, size_t);
File kernel/cgroup/cpuset.c:
4025:	void __cpuset_memory_pressure_bump(void);
3875:	bool __cpuset_node_allowed(int, gfp_t);
3702:	void cpuset_cpus_allowed(struct task_struct *, struct cpumask *);
3748:	bool cpuset_cpus_allowed_fallback(struct task_struct *);
3399:	void cpuset_force_rebuild(void);
3287:	int cpuset_init(void);
3782:	void cpuset_init_current_mems_allowed(void);
3673:	void cpuset_init_smp(void);
3941:	int cpuset_mem_spread_node(void);
3797:	nodemask_t cpuset_mems_allowed(struct task_struct *);
3972:	int cpuset_mems_allowed_intersects(const struct task_struct *, const struct task_struct *);
3817:	int cpuset_nodemask_valid_mems_allowed(nodemask_t *);
3984:	void cpuset_print_current_mems_allowed(void);
408:	void cpuset_read_lock(void);
413:	void cpuset_read_unlock(void);
3950:	int cpuset_slab_spread_node(void);
4073:	void cpuset_task_status_allowed(struct seq_file *, struct task_struct *);
3641:	void cpuset_update_active_cpus(void);
3651:	void cpuset_wait_for_hotplug(void);
2121:	bool current_cpuset_is_being_rebound(void);
4042:	int proc_cpuset_show(struct seq_file *, struct pid_namespace *, struct pid *, struct task_struct *);
1196:	void rebuild_sched_domains(void);
File kernel/cgroup/freezer.c:
107:	void cgroup_enter_frozen(void);
260:	void cgroup_freeze(struct cgroup *, bool);
222:	void cgroup_freezer_migrate_task(struct task_struct *, struct cgroup *, struct cgroup *);
131:	void cgroup_leave_frozen(bool);
52:	void cgroup_update_frozen(struct cgroup *);
File kernel/cgroup/legacy_freezer.c:
65:	bool cgroup_freezing(struct task_struct *);
File kernel/cgroup/namespace.c:
50:	struct cgroup_namespace *copy_cgroup_ns(unsigned long, struct user_namespace *, struct cgroup_namespace *);
40:	void free_cgroup_ns(struct cgroup_namespace *);
File kernel/cgroup/rstat.c:
409:	void __cgroup_account_cputime(struct cgroup *, u64);
419:	void __cgroup_account_cputime_field(struct cgroup *, enum cpu_usage_stat, u64);
166:	void bpf_rstat_flush(struct cgroup *, struct cgroup *, int);
490:	void cgroup_base_stat_cputime_show(struct seq_file *);
325:	void cgroup_rstat_boot(void);
306:	void cgroup_rstat_exit(struct cgroup *);
234:	void cgroup_rstat_flush(struct cgroup *);
267:	void cgroup_rstat_flush_hold(struct cgroup *);
249:	void cgroup_rstat_flush_irqsafe(struct cgroup *);
278:	void cgroup_rstat_flush_release(void);
284:	int cgroup_rstat_init(struct cgroup *);
29:	void cgroup_rstat_updated(struct cgroup *, int);
File kernel/context_tracking.c:
317:	void ct_idle_enter(void);
333:	void ct_idle_exit(void);
365:	void ct_irq_enter(void);
402:	void ct_irq_enter_irqson(void);
390:	void ct_irq_exit(void);
417:	void ct_irq_exit_irqson(void);
258:	void ct_nmi_enter(void);
204:	void ct_nmi_exit(void);
File kernel/cpu.c:
2231:	void __cpuhp_remove_state(enum cpuhp_state, bool);
2193:	void __cpuhp_remove_state_cpuslocked(enum cpuhp_state, bool);
2129:	int __cpuhp_setup_state(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
2070:	int __cpuhp_setup_state_cpuslocked(enum cpuhp_state, const char *, bool, int (*)(unsigned int), int (*)(unsigned int), bool);
2040:	int __cpuhp_state_add_instance(enum cpuhp_state, struct hlist_node *, bool);
1995:	int __cpuhp_state_add_instance_cpuslocked(enum cpuhp_state, struct hlist_node *, bool);
2145:	int __cpuhp_state_remove_instance(enum cpuhp_state, struct hlist_node *, bool);
1468:	int add_cpu(unsigned int);
413:	void arch_smt_update(void);
2711:	void boot_cpu_hotplug_init(void);
2693:	void boot_cpu_init(void);
1490:	int bringup_hibernate_cpu(unsigned int);
1505:	void bringup_nonboot_cpus(unsigned int);
997:	void clear_tasks_mm_cpumask(int);
1251:	int cpu_device_down(struct device *);
1463:	int cpu_device_up(struct device *);
374:	void cpu_hotplug_disable(void);
389:	void cpu_hotplug_enable(void);
288:	void cpu_maps_update_begin(void);
293:	void cpu_maps_update_done(void);
2757:	bool cpu_mitigations_auto_nosmt(void);
2750:	bool cpu_mitigations_off(void);
1340:	void cpuhp_online_idle(enum cpuhp_state);
1114:	void cpuhp_report_idle_dead(void);
927:	void cpuhp_threads_init(void);
308:	void cpus_read_lock(void);
314:	int cpus_read_trylock(void);
320:	void cpus_read_unlock(void);
326:	void cpus_write_lock(void);
331:	void cpus_write_unlock(void);
2664:	void init_cpu_online(const struct cpumask *);
2659:	void init_cpu_possible(const struct cpumask *);
2654:	void init_cpu_present(const struct cpumask *);
336:	void lockdep_assert_cpus_held(void);
1321:	void notify_cpu_starting(unsigned int);
1256:	int remove_cpu(unsigned int);
2669:	void set_cpu_online(unsigned int, bool);
1268:	void smp_shutdown_nonboot_cpus(unsigned int);
File kernel/cred.c:
135:	void __put_cred(struct cred *);
533:	void abort_creds(struct cred *);
447:	int commit_creds(struct cred *);
340:	int copy_creds(struct task_struct *, unsigned long);
216:	struct cred *cred_alloc_blank(void);
626:	int cred_fscmp(const struct cred *, const struct cred *);
689:	void cred_init(void);
160:	void exit_creds(struct task_struct *);
196:	const struct cred *get_task_cred(struct task_struct *);
554:	const struct cred *override_creds(const struct cred *);
252:	struct cred *prepare_creds(void);
307:	struct cred *prepare_exec_creds(void);
712:	struct cred *prepare_kernel_cred(struct task_struct *);
595:	void revert_creds(const struct cred *);
812:	int set_create_files_as(struct cred *, struct inode *);
666:	int set_cred_ucounts(struct cred *);
774:	int set_security_override(struct cred *, u32);
790:	int set_security_override_from_ctx(struct cred *, const char *);
File kernel/dma/coherent.c:
185:	int dma_alloc_from_dev_coherent(struct device *, ssize_t, dma_addr_t *, void **);
117:	int dma_declare_coherent_memory(struct device *, phys_addr_t, dma_addr_t, size_t);
269:	int dma_mmap_from_dev_coherent(struct device *, struct vm_area_struct *, void *, size_t, int *);
133:	void dma_release_coherent_memory(struct device *);
225:	int dma_release_from_dev_coherent(struct device *, int, void *);
File kernel/dma/contiguous.c:
304:	struct page *dma_alloc_contiguous(struct device *, size_t, gfp_t);
257:	struct page *dma_alloc_from_contiguous(struct device *, size_t, unsigned int, bool);
206:	void dma_contiguous_early_fixup(phys_addr_t, unsigned long);
167:	void dma_contiguous_reserve(phys_addr_t);
227:	int dma_contiguous_reserve_area(phys_addr_t, phys_addr_t, phys_addr_t, struct cma **, bool);
347:	void dma_free_contiguous(struct device *, struct page *, size_t);
276:	bool dma_release_from_contiguous(struct device *, struct page *, int);
File kernel/dma/direct.c:
208:	void *dma_direct_alloc(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
367:	struct page *dma_direct_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
549:	bool dma_direct_can_mmap(struct device *);
322:	void dma_direct_free(struct device *, size_t, void *, dma_addr_t, unsigned long);
391:	void dma_direct_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
39:	u64 dma_direct_get_required_mask(struct device *);
536:	int dma_direct_get_sgtable(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
520:	dma_addr_t dma_direct_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
476:	int dma_direct_map_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
602:	size_t dma_direct_max_mapping_size(struct device *);
555:	int dma_direct_mmap(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
611:	bool dma_direct_need_sync(struct device *, dma_addr_t);
633:	int dma_direct_set_offset(struct device *, phys_addr_t, dma_addr_t, u64);
579:	int dma_direct_supported(struct device *, u64);
432:	void dma_direct_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
409:	void dma_direct_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
460:	void dma_direct_unmap_sg(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
File kernel/dma/mapping.c:
493:	void *dma_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
642:	struct sg_table *dma_alloc_noncontiguous(struct device *, size_t, enum dma_data_direction, gfp_t, unsigned long);
574:	struct page *dma_alloc_pages(struct device *, size_t, dma_addr_t *, enum dma_data_direction, gfp_t);
434:	bool dma_can_mmap(struct device *);
527:	void dma_free_attrs(struct device *, size_t, void *, dma_addr_t, unsigned long);
675:	void dma_free_noncontiguous(struct device *, size_t, struct sg_table *, enum dma_data_direction);
597:	void dma_free_pages(struct device *, size_t, struct page *, dma_addr_t, enum dma_data_direction);
834:	unsigned long dma_get_merge_boundary(struct device *);
472:	u64 dma_get_required_mask(struct device *);
395:	int dma_get_sgtable_attrs(struct device *, struct sg_table *, void *, dma_addr_t, size_t, unsigned long);
143:	dma_addr_t dma_map_page_attrs(struct device *, struct page *, size_t, size_t, enum dma_data_direction, unsigned long);
295:	dma_addr_t dma_map_resource(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
227:	unsigned int dma_map_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
266:	int dma_map_sgtable(struct device *, struct sg_table *, enum dma_data_direction, unsigned long);
798:	size_t dma_max_mapping_size(struct device *);
457:	int dma_mmap_attrs(struct device *, struct vm_area_struct *, void *, dma_addr_t, size_t, unsigned long);
709:	int dma_mmap_noncontiguous(struct device *, struct vm_area_struct *, size_t, struct sg_table *);
605:	int dma_mmap_pages(struct device *, struct vm_area_struct *, size_t, struct page *);
824:	bool dma_need_sync(struct device *, dma_addr_t);
812:	size_t dma_opt_mapping_size(struct device *);
741:	bool dma_pci_p2pdma_supported(struct device *);
415:	pgprot_t dma_pgprot(struct device *, pgprot_t, unsigned long);
782:	int dma_set_coherent_mask(struct device *, u64);
765:	int dma_set_mask(struct device *, u64);
356:	void dma_sync_sg_for_cpu(struct device *, struct scatterlist *, int, enum dma_data_direction);
370:	void dma_sync_sg_for_device(struct device *, struct scatterlist *, int, enum dma_data_direction);
328:	void dma_sync_single_for_cpu(struct device *, dma_addr_t, size_t, enum dma_data_direction);
342:	void dma_sync_single_for_device(struct device *, dma_addr_t, size_t, enum dma_data_direction);
167:	void dma_unmap_page_attrs(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
316:	void dma_unmap_resource(struct device *, dma_addr_t, size_t, enum dma_data_direction, unsigned long);
279:	void dma_unmap_sg_attrs(struct device *, struct scatterlist *, int, enum dma_data_direction, unsigned long);
688:	void *dma_vmap_noncontiguous(struct device *, size_t, struct sg_table *);
700:	void dma_vunmap_noncontiguous(struct device *, void *);
85:	void *dmam_alloc_attrs(struct device *, size_t, dma_addr_t *, gfp_t, unsigned long);
61:	void dmam_free_coherent(struct device *, size_t, void *, dma_addr_t);
File kernel/dma/pool.c:
265:	struct page *dma_alloc_from_pool(struct device *, size_t, void **, gfp_t, bool (*)(struct device *, phys_addr_t, size_t));
283:	bool dma_free_from_pool(struct device *, void *, size_t);
File kernel/dma/remap.c:
38:	void *dma_common_contiguous_remap(struct page *, size_t, pgprot_t, const void *);
9:	struct page **dma_common_find_pages(void *);
60:	void dma_common_free_remap(void *, size_t);
22:	void *dma_common_pages_remap(struct page **, size_t, pgprot_t, const void *);
File kernel/dma/swiotlb.c:
927:	bool is_swiotlb_active(struct device *);
172:	void swiotlb_adjust_size(unsigned long);
480:	void swiotlb_exit(void);
393:	void swiotlb_init(bool, unsigned int);
403:	int swiotlb_init_late(size_t, gfp_t, int (*)(void *, unsigned long));
338:	void swiotlb_init_remap(bool, unsigned int, int (*)(void *, unsigned long));
882:	dma_addr_t swiotlb_map(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
911:	size_t swiotlb_max_mapping_size(struct device *);
159:	unsigned int swiotlb_max_segment(void);
189:	void swiotlb_print_info(void);
167:	unsigned long swiotlb_size_or_default(void);
869:	void swiotlb_sync_single_for_cpu(struct device *, phys_addr_t, size_t, enum dma_data_direction);
860:	void swiotlb_sync_single_for_device(struct device *, phys_addr_t, size_t, enum dma_data_direction);
741:	phys_addr_t swiotlb_tbl_map_single(struct device *, phys_addr_t, size_t, size_t, unsigned int, enum dma_data_direction, unsigned long);
846:	void swiotlb_tbl_unmap_single(struct device *, phys_addr_t, size_t, enum dma_data_direction, unsigned long);
246:	void swiotlb_update_mem_attributes(void);
File kernel/events/callchain.c:
108:	int get_callchain_buffers(int);
152:	struct perf_callchain_entry *get_callchain_entry(int *);
180:	struct perf_callchain_entry *get_perf_callchain(struct pt_regs *, u32, bool, bool, u32, bool, bool);
38:	void perf_callchain_kernel(struct perf_callchain_entry_ctx *, struct pt_regs *);
43:	void perf_callchain_user(struct perf_callchain_entry_ctx *, struct pt_regs *);
232:	int perf_event_max_stack_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void put_callchain_buffers(void);
174:	void put_callchain_entry(int);
File kernel/events/core.c:
9761:	void ___perf_sw_event(u32, u64, struct pt_regs *, u64);
12296:	long __arm64_sys_perf_event_open(const struct pt_regs *);
3977:	void __perf_event_task_sched_in(struct task_struct *, struct task_struct *);
3623:	void __perf_event_task_sched_out(struct task_struct *, struct task_struct *);
9772:	void __perf_sw_event(u32, u64, struct pt_regs *, u64);
6021:	void arch_perf_update_userpage(struct perf_event *, struct perf_event_mmap_page *, u64);
10499:	void perf_bp_event(struct perf_event *, void *);
7535:	struct perf_callchain_entry *perf_callchain(struct perf_event *, struct pt_regs *);
183:	struct perf_event_context *perf_cpu_task_ctx(void);
476:	int perf_cpu_time_max_percent_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
7105:	void perf_event__output_id_sample(struct perf_event *, struct perf_output_handle *, struct perf_sample_data *);
9434:	int perf_event_account_interrupt(struct perf_event *);
3088:	void perf_event_addr_filters_sync(struct perf_event *);
13161:	const struct perf_event_attr *perf_event_attrs(struct perf_event *);
8847:	void perf_event_aux_event(struct perf_event *, unsigned long, unsigned long, u64);
9201:	void perf_event_bpf_event(struct bpf_prog *, enum perf_bpf_event_type, u16);
8237:	void perf_event_comm(struct task_struct *, bool);
12700:	struct perf_event *perf_event_create_kernel_counter(struct perf_event_attr *, int, struct task_struct *, perf_overflow_handler_t, void *);
13134:	void perf_event_delayed_put(struct task_struct *);
2456:	void perf_event_disable(struct perf_event *);
2466:	void perf_event_disable_inatomic(struct perf_event *);
2447:	void perf_event_disable_local(struct perf_event *);
2988:	void perf_event_enable(struct perf_event *);
7955:	void perf_event_exec(void);
13588:	int perf_event_exit_cpu(unsigned int);
13031:	void perf_event_exit_task(struct task_struct *);
8157:	void perf_event_fork(struct task_struct *);
10493:	void perf_event_free_bpf_prog(struct perf_event *);
13088:	void perf_event_free_task(struct task_struct *);
13139:	struct file *perf_event_get(unsigned int);
7073:	void perf_event_header__init_id(struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
13614:	void perf_event_init(void);
13568:	int perf_event_init_cpu(unsigned int);
13472:	int perf_event_init_task(struct task_struct *, u64);
9327:	void perf_event_itrace_started(struct perf_event *);
9088:	void perf_event_ksymbol(u16, u64, u32, bool, const char *);
8812:	void perf_event_mmap(struct vm_area_struct *);
8334:	void perf_event_namespaces(struct task_struct *);
7797:	int perf_event_output(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7789:	void perf_event_output_backward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
7781:	void perf_event_output_forward(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
9531:	int perf_event_overflow(struct perf_event *, struct perf_sample_data *, struct pt_regs *);
5650:	u64 perf_event_pause(struct perf_event *, bool);
5766:	int perf_event_period(struct perf_event *, u64);
576:	void perf_event_print_debug(void);
4526:	int perf_event_read_local(struct perf_event *, u64 *, u64 *, u64 *);
5426:	u64 perf_event_read_value(struct perf_event *, u64 *, u64 *);
3121:	int perf_event_refresh(struct perf_event *, int);
5279:	int perf_event_release_kernel(struct perf_event *);
10487:	int perf_event_set_bpf_prog(struct perf_event *, struct bpf_prog *, u64);
13642:	ssize_t perf_event_sysfs_show(struct device *, struct device_attribute *, char *);
5972:	int perf_event_task_disable(void);
5956:	int perf_event_task_enable(void);
4291:	void perf_event_task_tick(void);
9295:	void perf_event_text_poke(const void *, const void *, size_t, const void *, size_t);
6031:	void perf_event_update_userpage(struct perf_event *);
6622:	void perf_event_wakeup(struct perf_event *);
13153:	const struct perf_event *perf_get_event(struct file *);
8884:	void perf_log_lost_samples(struct perf_event *, u64);
7227:	void perf_output_sample(struct perf_output_handle *, struct perf_event_header *, struct perf_sample_data *, struct perf_event *);
1132:	void perf_pmu_disable(struct pmu *);
1139:	void perf_pmu_enable(struct pmu *);
12861:	void perf_pmu_migrate_context(struct pmu *, int, int);
11389:	int perf_pmu_register(struct pmu *, const char *, int);
2705:	void perf_pmu_resched(struct pmu *);
11497:	void perf_pmu_unregister(struct pmu *);
7552:	void perf_prepare_sample(struct perf_event_header *, struct perf_sample_data *, struct perf_event *, struct pt_regs *);
452:	int perf_proc_update_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9368:	void perf_report_aux_output_id(struct perf_event *, u64);
519:	void perf_sample_event_took(u64);
3543:	void perf_sched_cb_dec(struct pmu *);
3555:	void perf_sched_cb_inc(struct pmu *);
9746:	int perf_swevent_get_recursion_context(void);
9754:	void perf_swevent_put_recursion_context(int);
9560:	u64 perf_swevent_set_period(struct perf_event *);
6194:	struct perf_buffer *ring_buffer_get(struct perf_event *);
6212:	void ring_buffer_put(struct perf_buffer *);
File kernel/events/hw_breakpoint.c:
531:	void arch_release_bp_slot(struct perf_event *);
526:	int arch_reserve_bp_slot(struct perf_event *);
538:	void arch_unregister_hw_breakpoint(struct perf_event *);
704:	int dbg_release_bp_slot(struct perf_event *);
689:	int dbg_reserve_bp_slot(struct perf_event *);
923:	bool hw_breakpoint_is_used(void);
1034:	int init_hw_breakpoint(void);
825:	int modify_user_hw_breakpoint(struct perf_event *, struct perf_event_attr *);
789:	int modify_user_hw_breakpoint_check(struct perf_event *, struct perf_event_attr *, bool);
741:	int register_perf_hw_breakpoint(struct perf_event *);
769:	struct perf_event *register_user_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *, struct task_struct *);
870:	struct perf_event **register_wide_hw_breakpoint(struct perf_event_attr *, perf_overflow_handler_t, void *);
644:	void release_bp_slot(struct perf_event *);
623:	int reserve_bp_slot(struct perf_event *);
853:	void unregister_hw_breakpoint(struct perf_event *);
907:	void unregister_wide_hw_breakpoint(struct perf_event **);
File kernel/events/ring_buffer.c:
364:	void *perf_aux_output_begin(struct perf_output_handle *, struct perf_event *);
480:	void perf_aux_output_end(struct perf_output_handle *, unsigned long);
337:	void perf_aux_output_flag(struct perf_output_handle *, u64);
538:	int perf_aux_output_skip(struct perf_output_handle *, unsigned long);
560:	void *perf_get_aux(struct perf_output_handle *);
947:	struct page *perf_mmap_to_page(struct perf_buffer *, unsigned long);
281:	int perf_output_begin(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
274:	int perf_output_begin_backward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
267:	int perf_output_begin_forward(struct perf_output_handle *, struct perf_sample_data *, struct perf_event *, unsigned int);
290:	unsigned int perf_output_copy(struct perf_output_handle *, const void *, unsigned int);
573:	long perf_output_copy_aux(struct perf_output_handle *, struct perf_output_handle *, unsigned long, unsigned long);
302:	void perf_output_end(struct perf_output_handle *);
296:	unsigned int perf_output_skip(struct perf_output_handle *, unsigned int);
808:	struct perf_buffer *rb_alloc(int, long, int, int);
670:	int rb_alloc_aux(struct perf_buffer *, struct perf_event *, unsigned long, int, long, int);
854:	void rb_free(struct perf_buffer *);
763:	void rb_free_aux(struct perf_buffer *);
File kernel/exec_domain.c:
38:	long __arm64_sys_personality(const struct pt_regs *);
File kernel/exit.c:
977:	long __arm64_sys_exit(const struct pt_regs *);
1021:	long __arm64_sys_exit_group(const struct pt_regs *);
1792:	long __arm64_sys_wait4(const struct pt_regs *);
1700:	long __arm64_sys_waitid(const struct pt_regs *);
1527:	void __wake_up_parent(struct task_struct *, struct task_struct *);
1901:	void abort(void);
805:	void do_exit(long);
987:	void do_group_exit(int);
344:	int is_current_pgrp_orphaned(void);
1776:	int kernel_wait(pid_t, int *);
1733:	long kernel_wait4(pid_t, int *, int, struct rusage *);
922:	void make_task_dead(int);
442:	void mm_update_next_owner(struct mm_struct *);
228:	void put_task_struct_rcu_user(struct task_struct *);
288:	int rcuwait_wake_up(struct rcuwait *);
238:	void release_task(struct task_struct *);
234:	void release_thread(struct task_struct *);
1886:	bool thread_group_exited(struct pid *);
File kernel/extable.c:
77:	int __kernel_text_address(unsigned long);
66:	int core_kernel_text(unsigned long);
163:	int func_ptr_is_kernel_text(void *);
94:	int kernel_text_address(unsigned long);
54:	const struct exception_table_entry *search_exception_tables(unsigned long);
47:	const struct exception_table_entry *search_kernel_exception_table(unsigned long);
36:	void sort_main_extable(void);
File kernel/fork.c:
2790:	long __arm64_sys_clone(const struct pt_regs *);
2964:	long __arm64_sys_clone3(const struct pt_regs *);
1788:	long __arm64_sys_set_tid_address(const struct pt_regs *);
3271:	long __arm64_sys_unshare(const struct pt_regs *);
1679:	void __cleanup_sighand(struct sighand_struct *);
788:	void __mmdrop(struct mm_struct *);
843:	void __put_task_struct(struct task_struct *);
957:	int arch_dup_task_struct(struct task_struct *, struct task_struct *);
162:	void arch_release_task_struct(struct task_struct *);
862:	void arch_task_cache_init(void);
2616:	struct task_struct *create_io_thread(int (*)(void *), void *, int);
1517:	void exec_mm_release(struct task_struct *, struct mm_struct *);
1511:	void exit_mm_release(struct task_struct *, struct mm_struct *);
506:	void exit_task_stack_account(struct task_struct *);
2590:	struct task_struct *fork_idle(int);
910:	void fork_init(void);
536:	void free_task(struct task_struct *);
1352:	struct file *get_mm_exe_file(struct mm_struct *);
1371:	struct file *get_task_exe_file(struct task_struct *);
1395:	struct mm_struct *get_task_mm(struct task_struct *);
2640:	pid_t kernel_clone(struct kernel_clone_args *);
2730:	pid_t kernel_thread(int (*)(void *), void *, unsigned long);
3152:	int ksys_unshare(unsigned long);
1412:	struct mm_struct *mm_access(struct task_struct *, unsigned int);
1187:	struct mm_struct *mm_alloc(void);
3028:	void mm_cache_init(void);
1224:	void mmput(struct mm_struct *);
1242:	void mmput_async(struct mm_struct *);
151:	int nr_processes(void);
1843:	struct pid *pidfd_pid(const struct file *);
3047:	void proc_caches_init(void);
529:	void put_task_stack(struct task_struct *);
1300:	int replace_mm_exe_file(struct mm_struct *, struct file *);
1263:	int set_mm_exe_file(struct mm_struct *, struct file *);
964:	void set_task_stack_end_magic(struct task_struct *);
3300:	int sysctl_max_threads(struct ctl_table *, int, void *, size_t *, loff_t *);
3128:	int unshare_fd(unsigned long, unsigned int, struct files_struct **);
3282:	int unshare_files(void);
2747:	pid_t user_mode_thread(int (*)(void *), void *, unsigned long);
454:	struct vm_area_struct *vm_area_alloc(struct mm_struct *);
464:	struct vm_area_struct *vm_area_dup(struct vm_area_struct *);
482:	void vm_area_free(struct vm_area_struct *);
2984:	void walk_process_tree(struct task_struct *, proc_visitor, void *);
File kernel/freezer.c:
62:	bool __refrigerator(bool);
194:	void __thaw_task(struct task_struct *);
153:	bool freeze_task(struct task_struct *);
38:	bool freezing_slow_path(struct task_struct *);
56:	bool frozen(struct task_struct *);
220:	bool set_freezable(void);
File kernel/futex/core.c:
543:	void __futex_queue(struct futex_q *, struct futex_hash_bucket *);
499:	void __futex_unqueue(struct futex_q *);
409:	int fault_in_user_writeable(u32 *);
440:	int futex_cmpxchg_value_locked(u32 *, u32 *, u32, u32);
1098:	void futex_exec_release(struct task_struct *);
1050:	void futex_exit_recursive(struct task_struct *);
1116:	void futex_exit_release(struct task_struct *);
451:	int futex_get_value_locked(u32 *, u32 *);
115:	struct futex_hash_bucket *futex_hash(union futex_key *);
513:	struct futex_hash_bucket *futex_q_lock(struct futex_q *);
536:	void futex_q_unlock(struct futex_hash_bucket *);
135:	struct hrtimer_sleeper *futex_setup_timer(ktime_t *, struct hrtimer_sleeper *, int, u64);
429:	struct futex_q *futex_top_waiter(struct futex_hash_bucket *, union futex_key *);
573:	int futex_unqueue(struct futex_q *);
620:	void futex_unqueue_pi(struct futex_q *);
220:	int get_futex_key(u32 *, bool, union futex_key *, enum futex_access);
469:	void wait_for_owner_exiting(int, struct task_struct *);
File kernel/futex/pi.c:
884:	int fixup_pi_owner(u32 *, struct futex_q *, int);
930:	int futex_lock_pi(u32 *, unsigned int, ktime_t *, int);
514:	int futex_lock_pi_atomic(u32 *, struct futex_hash_bucket *, union futex_key *, struct futex_pi_state **, struct task_struct *, struct task_struct **, int);
1100:	int futex_unlock_pi(u32 *, unsigned int);
68:	void get_pi_state(struct futex_pi_state *);
77:	void put_pi_state(struct futex_pi_state *);
12:	int refill_pi_state_cache(void);
File kernel/futex/requeue.c:
364:	int futex_requeue(u32 *, unsigned int, u32 *, int, int, u32 *, int);
762:	int futex_wait_requeue_pi(u32 *, unsigned int, u32, ktime_t *, u32, u32 *);
File kernel/futex/syscalls.c:
164:	long __arm64_sys_futex(const struct pt_regs *);
246:	long __arm64_sys_futex_waitv(const struct pt_regs *);
49:	long __arm64_sys_get_robust_list(const struct pt_regs *);
29:	long __arm64_sys_set_robust_list(const struct pt_regs *);
85:	long do_futex(u32 *, int, u32, ktime_t *, u32 *, u32, u32);
File kernel/futex/waitwake.c:
632:	int futex_wait(u32 *, unsigned int, u32, ktime_t *, u32);
524:	int futex_wait_multiple(struct futex_vector *, unsigned int, struct hrtimer_sleeper *);
328:	void futex_wait_queue(struct futex_hash_bucket *, struct futex_q *, struct hrtimer_sleeper *);
577:	int futex_wait_setup(u32 *, u32, unsigned int, struct futex_q *, struct futex_hash_bucket **);
143:	int futex_wake(u32 *, unsigned int, int, u32);
115:	void futex_wake_mark(struct wake_q_head *, struct futex_q *);
238:	int futex_wake_op(u32 *, unsigned int, u32 *, int, int, int);
File kernel/groups.c:
161:	long __arm64_sys_getgroups(const struct pt_regs *);
198:	long __arm64_sys_setgroups(const struct pt_regs *);
15:	struct group_info *groups_alloc(int);
29:	void groups_free(struct group_info *);
92:	int groups_search(const struct group_info *, kgid_t);
84:	void groups_sort(struct group_info *);
239:	int in_egroup_p(kgid_t);
227:	int in_group_p(kgid_t);
185:	bool may_setgroups(void);
134:	int set_current_groups(struct group_info *);
118:	void set_groups(struct cred *, struct group_info *);
File kernel/iomem.c:
139:	void *devm_memremap(struct device *, resource_size_t, size_t, unsigned long);
162:	void devm_memunmap(struct device *, void *);
71:	void *memremap(resource_size_t, size_t, unsigned long);
122:	void memunmap(void *);
File kernel/irq/affinity.c:
497:	unsigned int irq_calc_affinity_vectors(unsigned int, unsigned int, const struct irq_affinity *);
417:	struct irq_affinity_desc *irq_create_affinity_masks(unsigned int, struct irq_affinity *);
File kernel/irq/autoprobe.c:
117:	unsigned int probe_irq_mask(unsigned long);
157:	int probe_irq_off(unsigned long);
30:	unsigned long probe_irq_on(void);
File kernel/irq/chip.c:
1046:	void __irq_set_handler(unsigned int, irq_flow_handler_t, int, const char *);
775:	void handle_edge_irq(struct irq_desc *);
689:	void handle_fasteoi_irq(struct irq_desc *);
739:	void handle_fasteoi_nmi(struct irq_desc *);
630:	void handle_level_irq(struct irq_desc *);
460:	void handle_nested_irq(unsigned int);
955:	void handle_percpu_devid_fasteoi_nmi(struct irq_desc *);
912:	void handle_percpu_devid_irq(struct irq_desc *);
882:	void handle_percpu_irq(struct irq_desc *);
540:	void handle_simple_irq(struct irq_desc *);
575:	void handle_untracked_irq(struct irq_desc *);
288:	int irq_activate(struct irq_desc *);
297:	int irq_activate_and_startup(struct irq_desc *, bool);
1370:	void irq_chip_ack_parent(struct irq_data *);
1548:	int irq_chip_compose_msi_msg(struct irq_data *, struct msi_msg *);
1356:	void irq_chip_disable_parent(struct irq_data *);
1341:	void irq_chip_enable_parent(struct irq_data *);
1414:	void irq_chip_eoi_parent(struct irq_data *);
1323:	int irq_chip_get_parent_state(struct irq_data *, enum irqchip_irq_state, bool *);
1392:	void irq_chip_mask_ack_parent(struct irq_data *);
1381:	void irq_chip_mask_parent(struct irq_data *);
1579:	int irq_chip_pm_get(struct irq_data *);
1598:	int irq_chip_pm_put(struct irq_data *);
1530:	void irq_chip_release_resources_parent(struct irq_data *);
1514:	int irq_chip_request_resources_parent(struct irq_data *);
1465:	int irq_chip_retrigger_hierarchy(struct irq_data *);
1429:	int irq_chip_set_affinity_parent(struct irq_data *, const struct cpumask *, bool);
1301:	int irq_chip_set_parent_state(struct irq_data *, enum irqchip_irq_state, bool);
1447:	int irq_chip_set_type_parent(struct irq_data *, unsigned int);
1480:	int irq_chip_set_vcpu_affinity_parent(struct irq_data *, void *);
1496:	int irq_chip_set_wake_parent(struct irq_data *, unsigned int);
1403:	void irq_chip_unmask_parent(struct irq_data *);
385:	void irq_disable(struct irq_desc *);
334:	void irq_enable(struct irq_desc *);
155:	struct irq_data *irq_get_irq_data(unsigned int);
1086:	void irq_modify_status(unsigned int, unsigned long, unsigned long);
399:	void irq_percpu_disable(struct irq_desc *, unsigned int);
390:	void irq_percpu_enable(struct irq_desc *, unsigned int);
1061:	void irq_set_chained_handler_and_data(unsigned int, irq_flow_handler_t, void *);
41:	int irq_set_chip(unsigned int, const struct irq_chip *);
1078:	void irq_set_chip_and_handler_name(unsigned int, const struct irq_chip *, irq_flow_handler_t, const char *);
142:	int irq_set_chip_data(unsigned int, void *);
87:	int irq_set_handler_data(unsigned int, void *);
65:	int irq_set_irq_type(unsigned int, unsigned int);
130:	int irq_set_msi_desc(unsigned int, struct msi_desc *);
108:	int irq_set_msi_desc_off(unsigned int, unsigned int, struct msi_desc *);
306:	void irq_shutdown(struct irq_desc *);
322:	void irq_shutdown_and_deactivate(struct irq_desc *);
254:	int irq_startup(struct irq_desc *, bool, bool);
420:	void mask_irq(struct irq_desc *);
431:	void unmask_irq(struct irq_desc *);
442:	void unmask_threaded_irq(struct irq_desc *);
File kernel/irq/cpuhotplug.c:
218:	int irq_affinity_online_cpu(unsigned int);
155:	void irq_migrate_all_off_this_cpu(void);
File kernel/irq/devres.c:
178:	int __devm_irq_alloc_descs(struct device *, int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
139:	void devm_free_irq(struct device *, unsigned int, void *);
99:	int devm_request_any_context_irq(struct device *, unsigned int, irq_handler_t, unsigned long, const char *, void *);
51:	int devm_request_threaded_irq(struct device *, unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
File kernel/irq/handle.c:
139:	irqreturn_t __handle_irq_event_percpu(struct irq_desc *);
61:	void __irq_wake_thread(struct irq_desc *, struct irqaction *);
33:	void handle_bad_irq(struct irq_desc *);
202:	irqreturn_t handle_irq_event(struct irq_desc *);
189:	irqreturn_t handle_irq_event_percpu(struct irq_desc *);
46:	irqreturn_t no_action(int, void *);
File kernel/irq/ipi.c:
265:	int __ipi_send_mask(struct irq_desc *, const struct cpumask *);
223:	int __ipi_send_single(struct irq_desc *, unsigned int);
163:	irq_hw_number_t ipi_get_hwirq(unsigned int, unsigned int);
330:	int ipi_send_mask(unsigned int, const struct cpumask *);
309:	int ipi_send_single(unsigned int, unsigned int);
115:	int irq_destroy_ipi(unsigned int, const struct cpumask *);
23:	int irq_reserve_ipi(struct irq_domain *, const struct cpumask *);
File kernel/irq/irqdesc.c:
790:	int __irq_alloc_descs(int, unsigned int, unsigned int, int, struct module *, const struct irq_affinity_desc *);
843:	struct irq_desc *__irq_get_desc_lock(unsigned int, unsigned long *, bool, unsigned int);
866:	void __irq_put_desc_unlock(struct irq_desc *, unsigned long, bool);
525:	int early_irq_init(void);
705:	int generic_handle_domain_irq(struct irq_domain *, unsigned int);
723:	int generic_handle_domain_irq_safe(struct irq_domain *, unsigned int);
746:	int generic_handle_domain_nmi(struct irq_domain *, unsigned int);
664:	int generic_handle_irq(unsigned int);
681:	int generic_handle_irq_safe(unsigned int);
640:	int handle_irq_desc(struct irq_desc *);
760:	void irq_free_descs(unsigned int, unsigned int);
837:	unsigned int irq_get_next_irq(unsigned int);
904:	int irq_get_percpu_devid_partition(unsigned int, struct cpumask *);
382:	void irq_lock_sparse(void);
899:	int irq_set_percpu_devid(unsigned int);
874:	int irq_set_percpu_devid_partition(unsigned int, const struct cpumask *);
354:	struct irq_desc *irq_to_desc(unsigned int);
387:	void irq_unlock_sparse(void);
918:	void kstat_incr_irq_this_cpu(unsigned int);
932:	unsigned int kstat_irqs_cpu(unsigned int, int);
973:	unsigned int kstat_irqs_usr(unsigned int);
File kernel/irq/irqdomain.c:
139:	struct irq_domain *__irq_domain_add(struct fwnode_handle *, unsigned int, irq_hw_number_t, int, const struct irq_domain_ops *, void *);
73:	struct fwnode_handle *__irq_domain_alloc_fwnode(unsigned int, int, const char *, phys_addr_t *);
1451:	int __irq_domain_alloc_irqs(struct irq_domain *, int, unsigned int, int, void *, bool, const struct irq_affinity_desc *);
895:	struct irq_desc *__irq_resolve_mapping(struct irq_domain *, irq_hw_number_t, unsigned int *);
760:	unsigned int irq_create_fwspec_mapping(struct irq_fwspec *);
682:	unsigned int irq_create_mapping_affinity(struct irq_domain *, irq_hw_number_t, const struct irq_affinity_desc *);
851:	unsigned int irq_create_of_mapping(struct of_phandle_args *);
866:	void irq_dispose_mapping(unsigned int);
1785:	int irq_domain_activate_irq(struct irq_data *, bool);
368:	struct irq_domain *irq_domain_add_legacy(struct device_node *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
1044:	int irq_domain_alloc_descs(int, unsigned int, irq_hw_number_t, int, const struct irq_affinity_desc *);
1417:	int irq_domain_alloc_irqs_hierarchy(struct irq_domain *, unsigned int, unsigned int, void *);
1716:	int irq_domain_alloc_irqs_parent(struct irq_domain *, unsigned int, unsigned int, void *);
562:	int irq_domain_associate(struct irq_domain *, unsigned int, irq_hw_number_t);
612:	void irq_domain_associate_many(struct irq_domain *, unsigned int, irq_hw_number_t, int);
446:	bool irq_domain_check_msi_remap(void);
1095:	struct irq_domain *irq_domain_create_hierarchy(struct irq_domain *, unsigned int, unsigned int, struct fwnode_handle *, const struct irq_domain_ops *, void *);
380:	struct irq_domain *irq_domain_create_legacy(struct fwnode_handle *, unsigned int, unsigned int, irq_hw_number_t, const struct irq_domain_ops *, void *);
325:	struct irq_domain *irq_domain_create_simple(struct fwnode_handle *, unsigned int, unsigned int, const struct irq_domain_ops *, void *);
1804:	void irq_domain_deactivate_irq(struct irq_data *);
1209:	int irq_domain_disconnect_hierarchy(struct irq_domain *, unsigned int);
113:	void irq_domain_free_fwnode(struct fwnode_handle *);
1690:	void irq_domain_free_irqs(unsigned int, unsigned int);
1369:	void irq_domain_free_irqs_common(struct irq_domain *, unsigned int, unsigned int);
1734:	void irq_domain_free_irqs_parent(struct irq_domain *, unsigned int, unsigned int);
1390:	void irq_domain_free_irqs_top(struct irq_domain *, unsigned int, unsigned int);
1301:	struct irq_data *irq_domain_get_irq_data(struct irq_domain *, unsigned int);
1824:	bool irq_domain_hierarchical_is_msi_remap(struct irq_domain *);
1624:	int irq_domain_pop_irq(struct irq_domain *, int);
1542:	int irq_domain_push_irq(struct irq_domain *, int, void *);
248:	void irq_domain_remove(struct irq_domain *);
1071:	void irq_domain_reset_irq_data(struct irq_data *);
1323:	int irq_domain_set_hwirq_and_chip(struct irq_domain *, unsigned int, irq_hw_number_t, const struct irq_chip *, void *);
1352:	void irq_domain_set_info(struct irq_domain *, unsigned int, irq_hw_number_t, const struct irq_chip *, void *, irq_flow_handler_t, void *, const char *);
1010:	int irq_domain_translate_onecell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
1031:	int irq_domain_translate_twocell(struct irq_domain *, struct irq_fwspec *, unsigned long *, unsigned int *);
275:	void irq_domain_update_bus_token(struct irq_domain *, enum irq_domain_bus_token);
944:	int irq_domain_xlate_onecell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
985:	int irq_domain_xlate_onetwocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, unsigned long *, unsigned int *);
963:	int irq_domain_xlate_twocell(struct irq_domain *, struct device_node *, const u32 *, unsigned int, irq_hw_number_t *, unsigned int *);
402:	struct irq_domain *irq_find_matching_fwspec(struct irq_fwspec *, enum irq_domain_bus_token);
490:	struct irq_domain *irq_get_default_host(void);
473:	void irq_set_default_host(struct irq_domain *);
747:	void of_phandle_args_to_fwspec(struct device_node *, const u32 *, unsigned int, struct irq_fwspec *);
File kernel/irq/manage.c:
681:	void __disable_irq(struct irq_desc *);
776:	void __enable_irq(struct irq_desc *);
496:	int __irq_apply_affinity_hint(unsigned int, const struct cpumask *, bool);
2789:	int __irq_get_irqchip_state(struct irq_data *, enum irqchip_irq_state, bool *);
946:	int __irq_set_trigger(struct irq_desc *, unsigned long);
2592:	int __request_percpu_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
928:	int can_request_irq(unsigned int, unsigned long);
752:	bool disable_hardirq(unsigned int);
728:	void disable_irq(unsigned int);
710:	void disable_irq_nosync(unsigned int);
771:	void disable_nmi_nosync(unsigned int);
2430:	void disable_percpu_irq(unsigned int);
2444:	void disable_percpu_nmi(unsigned int);
815:	void enable_irq(unsigned int);
841:	void enable_nmi(unsigned int);
2366:	void enable_percpu_irq(unsigned int, unsigned int);
2400:	void enable_percpu_nmi(unsigned int, unsigned int);
2018:	const void *free_irq(unsigned int, void *);
2070:	const void *free_nmi(unsigned int, void *);
2522:	void free_percpu_irq(unsigned int, void *);
2535:	void free_percpu_nmi(unsigned int, void *);
159:	int irq_can_set_affinity(unsigned int);
171:	bool irq_can_set_affinity_usr(unsigned int);
2922:	bool irq_check_status_bit(unsigned int, unsigned int);
212:	int irq_do_set_affinity(struct irq_data *, const struct cpumask *, bool);
490:	int irq_force_affinity(unsigned int, const struct cpumask *);
2826:	int irq_get_irqchip_state(unsigned int, enum irqchip_irq_state, bool *);
2904:	bool irq_has_action(unsigned int);
2412:	bool irq_percpu_is_enabled(unsigned int);
473:	int irq_set_affinity(unsigned int, const struct cpumask *);
347:	int irq_set_affinity_locked(struct irq_data *, const struct cpumask *, bool);
549:	int irq_set_affinity_notifier(unsigned int, struct irq_affinity_notify *);
879:	int irq_set_irq_wake(unsigned int, unsigned int);
2859:	int irq_set_irqchip_state(unsigned int, enum irqchip_irq_state, bool);
1002:	int irq_set_parent(int, int);
188:	void irq_set_thread_affinity(struct irq_desc *);
650:	int irq_set_vcpu_affinity(unsigned int, void *);
589:	int irq_setup_affinity(struct irq_desc *);
395:	int irq_update_affinity_desc(unsigned int, struct irq_affinity_desc *);
1337:	void irq_wake_thread(unsigned int, void *);
2726:	int prepare_percpu_nmi(unsigned int);
2502:	void remove_percpu_irq(unsigned int, struct irqaction *);
2246:	int request_any_context_irq(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2296:	int request_nmi(unsigned int, irq_handler_t, unsigned long, const char *, void *);
2658:	int request_percpu_nmi(unsigned int, irq_handler_t, const char *, void *);
2138:	int request_threaded_irq(unsigned int, irq_handler_t, irq_handler_t, unsigned long, const char *, void *);
2555:	int setup_percpu_irq(unsigned int, struct irqaction *);
98:	bool synchronize_hardirq(unsigned int);
126:	void synchronize_irq(unsigned int);
2769:	void teardown_percpu_nmi(unsigned int);
File kernel/irq/msi.c:
256:	void __get_cached_msi_msg(struct msi_desc *, struct msi_msg *);
261:	void get_cached_msi_msg(unsigned int, struct msi_msg *);
945:	bool msi_create_device_irq_domain(struct device *, unsigned int, const struct msi_domain_template *, unsigned int, void *, void *);
850:	struct irq_domain *msi_create_irq_domain(struct fwnode_handle *, struct msi_domain_info *, struct irq_domain *);
1448:	struct msi_map msi_domain_alloc_irq_at(struct device *, unsigned int, unsigned int, const struct irq_affinity_desc *, union msi_instance_cookie *);
1411:	int msi_domain_alloc_irqs_all_locked(struct device *, unsigned int, int);
1386:	int msi_domain_alloc_irqs_range(struct device *, unsigned int, unsigned int, unsigned int);
1363:	int msi_domain_alloc_irqs_range_locked(struct device *, unsigned int, unsigned int, unsigned int);
376:	struct msi_desc *msi_domain_first_desc(struct device *, unsigned int, enum msi_desc_filter);
1613:	void msi_domain_free_irqs_all(struct device *, unsigned int);
1600:	void msi_domain_free_irqs_all_locked(struct device *, unsigned int);
1581:	void msi_domain_free_irqs_range(struct device *, unsigned int, unsigned int, unsigned int);
1561:	void msi_domain_free_irqs_range_locked(struct device *, unsigned int, unsigned int, unsigned int);
209:	void msi_domain_free_msi_descs_range(struct device *, unsigned int, unsigned int, unsigned int);
431:	unsigned int msi_domain_get_virq(struct device *, unsigned int, unsigned int);
132:	int msi_domain_insert_msi_desc(struct device *, unsigned int, struct msi_desc *);
1073:	int msi_domain_populate_irqs(struct irq_domain *, struct device *, int, int, msi_alloc_info_t *);
1064:	int msi_domain_prepare_irqs(struct irq_domain *, struct device *, int, msi_alloc_info_t *);
647:	int msi_domain_set_affinity(struct irq_data *, const struct cpumask *, bool);
1626:	struct msi_domain_info *msi_get_domain_info(struct irq_domain *);
332:	void msi_lock_descs(struct device *);
1047:	bool msi_match_device_irq_domain(struct device *, unsigned int, enum irq_domain_bus_token);
405:	struct msi_desc *msi_next_desc(struct device *, unsigned int, enum msi_desc_filter);
884:	bool msi_parent_init_dev_msi_info(struct device *, struct irq_domain *, struct irq_domain *, struct msi_domain_info *);
1014:	void msi_remove_device_irq_domain(struct device *, unsigned int);
292:	int msi_setup_device_data(struct device *);
342:	void msi_unlock_descs(struct device *);
File kernel/irq/proc.c:
451:	int arch_show_interrupts(struct seq_file *, int);
430:	void init_irq_proc(void);
319:	void register_handler_proc(unsigned int, struct irqaction *);
338:	void register_irq_proc(unsigned int, struct irq_desc *);
460:	int show_interrupts(struct seq_file *, void *);
417:	void unregister_handler_proc(unsigned int, struct irqaction *);
393:	void unregister_irq_proc(unsigned int, struct irq_desc *);
File kernel/irq/resend.c:
106:	int check_irq_resend(struct irq_desc *, bool);
File kernel/irq/spurious.c:
36:	bool irq_wait_for_poll(struct irq_desc *);
436:	int noirqdebug_setup(char *);
272:	void note_interrupt(struct irq_desc *, irqreturn_t);
File kernel/irq_work.c:
70:	void arch_irq_work_raise(void);
174:	bool irq_work_needs_cpu(void);
106:	bool irq_work_queue(struct irq_work *);
127:	bool irq_work_queue_on(struct irq_work *, int);
249:	void irq_work_run(void);
191:	void irq_work_single(void *);
276:	void irq_work_sync(struct irq_work *);
259:	void irq_work_tick(void);
File kernel/jump_label.c:
487:	void jump_label_init(void);
25:	void jump_label_lock(void);
790:	int jump_label_text_reserved(void *, void *);
30:	void jump_label_unlock(void);
287:	void jump_label_update_timeout(struct work_struct *);
File kernel/kallsyms.c:
663:	int arch_get_kallsym(unsigned int, unsigned long *, char *, char *);
932:	int bpf_iter_ksym(struct bpf_iter_meta *, struct kallsym_iter *);
453:	const char *kallsyms_lookup(unsigned long, unsigned long *, unsigned long *, char **, char *);
271:	unsigned long kallsyms_lookup_name(const char *);
391:	int kallsyms_lookup_size_offset(unsigned long, unsigned long *, unsigned long *);
310:	int kallsyms_on_each_match_symbol(int (*)(void *, unsigned long), const char *, void *);
291:	int kallsyms_on_each_symbol(int (*)(void *, const char *, struct module *, unsigned long), void *);
983:	bool kallsyms_show_value(const struct cred *);
149:	unsigned long kallsyms_sym_address(int);
488:	int lookup_symbol_attrs(unsigned long, unsigned long *, unsigned long *, char *, char *);
462:	int lookup_symbol_name(unsigned long, char *);
622:	int sprint_backtrace(char *, unsigned long);
642:	int sprint_backtrace_build_id(char *, unsigned long);
568:	int sprint_symbol(char *, unsigned long);
585:	int sprint_symbol_build_id(char *, unsigned long);
602:	int sprint_symbol_no_offset(char *, unsigned long);
File kernel/kthread.c:
756:	void __kthread_init_worker(struct kthread_worker *, const char *, struct lock_class_key *);
161:	bool __kthread_should_park(struct task_struct *);
129:	void free_kthread_struct(struct task_struct *);
98:	void get_kthread_comm(char *, size_t, struct task_struct *);
1488:	void kthread_associate_blkcg(struct cgroup_subsys_state *);
554:	void kthread_bind(struct task_struct *, unsigned int);
540:	void kthread_bind_mask(struct task_struct *, const struct cpumask *);
1514:	struct cgroup_subsys_state *kthread_blkcg(void);
1353:	bool kthread_cancel_delayed_work_sync(struct kthread_delayed_work *);
1338:	bool kthread_cancel_work_sync(struct kthread_work *);
321:	void kthread_complete_and_exit(struct completion *, long);
570:	struct task_struct *kthread_create_on_cpu(int (*)(void *), void *, unsigned int, const char *);
503:	struct task_struct *kthread_create_on_node(int (*)(void *), void *, int, const char *, ...);
883:	struct kthread_worker *kthread_create_worker(unsigned int, const char *, ...);
932:	struct kthread_worker *kthread_create_worker_on_cpu(int, unsigned int, const char *, ...);
232:	void *kthread_data(struct task_struct *);
1019:	void kthread_delayed_work_timer_fn(struct timer_list *);
1386:	void kthread_destroy_worker(struct kthread_worker *);
302:	void kthread_exit(long);
1129:	void kthread_flush_work(struct kthread_work *);
1366:	void kthread_flush_worker(struct kthread_worker *);
193:	bool kthread_freezable_should_stop(bool *);
215:	void *kthread_func(struct task_struct *);
604:	bool kthread_is_per_cpu(struct task_struct *);
1238:	bool kthread_mod_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
652:	int kthread_park(struct task_struct *);
286:	void kthread_parkme(void);
247:	void *kthread_probe_data(struct task_struct *);
1091:	bool kthread_queue_delayed_work(struct kthread_worker *, struct kthread_delayed_work *, unsigned long);
995:	bool kthread_queue_work(struct kthread_worker *, struct kthread_work *);
587:	void kthread_set_per_cpu(struct task_struct *, int);
178:	bool kthread_should_park(void);
155:	bool kthread_should_stop(void);
696:	int kthread_stop(struct task_struct *);
621:	void kthread_unpark(struct task_struct *);
1450:	void kthread_unuse_mm(struct mm_struct *);
1405:	void kthread_use_mm(struct mm_struct *);
783:	int kthread_worker_fn(void *);
718:	int kthreadd(void *);
110:	bool set_kthread_struct(struct task_struct *);
382:	int tsk_fork_get_node(struct task_struct *);
File kernel/locking/mutex.c:
46:	void __mutex_init(struct mutex *, const char *, struct lock_class_key *);
1136:	int atomic_dec_and_mutex_lock(atomic_t *, struct mutex *);
89:	bool mutex_is_locked(struct mutex *);
281:	void mutex_lock(struct mutex *);
977:	int mutex_lock_interruptible(struct mutex *);
1022:	void mutex_lock_io(struct mutex *);
1001:	int mutex_lock_killable(struct mutex *);
1081:	int mutex_trylock(struct mutex *);
537:	void mutex_unlock(struct mutex *);
1097:	int ww_mutex_lock(struct ww_mutex *, struct ww_acquire_ctx *);
1112:	int ww_mutex_lock_interruptible(struct ww_mutex *, struct ww_acquire_ctx *);
770:	int ww_mutex_trylock(struct ww_mutex *, struct ww_acquire_ctx *);
558:	void ww_mutex_unlock(struct ww_mutex *);
File kernel/locking/osq_lock.c:
90:	bool osq_lock(struct optimistic_spin_queue *);
207:	void osq_unlock(struct optimistic_spin_queue *);
File kernel/locking/percpu-rwsem.c:
167:	bool __percpu_down_read(struct percpu_rw_semaphore *, bool);
14:	int __percpu_init_rwsem(struct percpu_rw_semaphore *, const char *, struct lock_class_key *);
224:	void percpu_down_write(struct percpu_rw_semaphore *);
33:	void percpu_free_rwsem(struct percpu_rw_semaphore *);
195:	bool percpu_is_read_locked(struct percpu_rw_semaphore *);
254:	void percpu_up_write(struct percpu_rw_semaphore *);
File kernel/locking/qrwlock.c:
21:	void queued_read_lock_slowpath(struct qrwlock *);
66:	void queued_write_lock_slowpath(struct qrwlock *);
File kernel/locking/qspinlock.c:
316:	void queued_spin_lock_slowpath(struct qspinlock *, u32);
File kernel/locking/rtmutex_api.c:
153:	int __rt_mutex_futex_trylock(struct rt_mutex_base *);
165:	bool __rt_mutex_futex_unlock(struct rt_mutex_base *, struct rt_wake_q_head *);
213:	void __rt_mutex_init(struct rt_mutex *, const char *, struct lock_class_key *);
292:	int __rt_mutex_start_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
453:	void rt_mutex_adjust_pi(struct task_struct *);
37:	void rt_mutex_base_init(struct rt_mutex_base *);
411:	bool rt_mutex_cleanup_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *);
148:	int rt_mutex_futex_trylock(struct rt_mutex_base *);
188:	void rt_mutex_futex_unlock(struct rt_mutex_base *);
236:	void rt_mutex_init_proxy_locked(struct rt_mutex_base *, struct task_struct *);
69:	void rt_mutex_lock(struct rt_mutex *);
85:	int rt_mutex_lock_interruptible(struct rt_mutex *);
100:	int rt_mutex_lock_killable(struct rt_mutex *);
479:	void rt_mutex_postunlock(struct rt_wake_q_head *);
267:	void rt_mutex_proxy_unlock(struct rt_mutex_base *);
339:	int rt_mutex_start_proxy_lock(struct rt_mutex_base *, struct rt_mutex_waiter *, struct task_struct *);
118:	int rt_mutex_trylock(struct rt_mutex *);
138:	void rt_mutex_unlock(struct rt_mutex *);
371:	int rt_mutex_wait_proxy_lock(struct rt_mutex_base *, struct hrtimer_sleeper *, struct rt_mutex_waiter *);
File kernel/locking/rwsem.c:
313:	void __init_rwsem(struct rw_semaphore *, const char *, struct lock_class_key *);
1506:	void down_read(struct rw_semaphore *);
1515:	int down_read_interruptible(struct rw_semaphore *);
1529:	int down_read_killable(struct rw_semaphore *);
1546:	int down_read_trylock(struct rw_semaphore *);
1559:	void down_write(struct rw_semaphore *);
1570:	int down_write_killable(struct rw_semaphore *);
1588:	int down_write_trylock(struct rw_semaphore *);
1622:	void downgrade_write(struct rw_semaphore *);
1602:	void up_read(struct rw_semaphore *);
1612:	void up_write(struct rw_semaphore *);
File kernel/locking/semaphore.c:
54:	void down(struct semaphore *);
77:	int down_interruptible(struct semaphore *);
104:	int down_killable(struct semaphore *);
159:	int down_timeout(struct semaphore *, long);
134:	int down_trylock(struct semaphore *);
183:	void up(struct semaphore *);
File kernel/locking/spinlock.c:
226:	void _raw_read_lock(rwlock_t *);
250:	void _raw_read_lock_bh(rwlock_t *);
242:	void _raw_read_lock_irq(rwlock_t *);
234:	unsigned long _raw_read_lock_irqsave(rwlock_t *);
218:	int _raw_read_trylock(rwlock_t *);
258:	void _raw_read_unlock(rwlock_t *);
282:	void _raw_read_unlock_bh(rwlock_t *);
274:	void _raw_read_unlock_irq(rwlock_t *);
266:	void _raw_read_unlock_irqrestore(rwlock_t *, unsigned long);
152:	void _raw_spin_lock(raw_spinlock_t *);
176:	void _raw_spin_lock_bh(raw_spinlock_t *);
168:	void _raw_spin_lock_irq(raw_spinlock_t *);
160:	unsigned long _raw_spin_lock_irqsave(raw_spinlock_t *);
136:	int _raw_spin_trylock(raw_spinlock_t *);
144:	int _raw_spin_trylock_bh(raw_spinlock_t *);
184:	void _raw_spin_unlock(raw_spinlock_t *);
208:	void _raw_spin_unlock_bh(raw_spinlock_t *);
200:	void _raw_spin_unlock_irq(raw_spinlock_t *);
192:	void _raw_spin_unlock_irqrestore(raw_spinlock_t *, unsigned long);
298:	void _raw_write_lock(rwlock_t *);
332:	void _raw_write_lock_bh(rwlock_t *);
324:	void _raw_write_lock_irq(rwlock_t *);
316:	unsigned long _raw_write_lock_irqsave(rwlock_t *);
308:	void _raw_write_lock_nested(rwlock_t *, int);
290:	int _raw_write_trylock(rwlock_t *);
340:	void _raw_write_unlock(rwlock_t *);
364:	void _raw_write_unlock_bh(rwlock_t *);
356:	void _raw_write_unlock_irq(rwlock_t *);
348:	void _raw_write_unlock_irqrestore(rwlock_t *, unsigned long);
407:	int in_lock_functions(unsigned long);
File kernel/notifier.c:
219:	int atomic_notifier_call_chain(struct atomic_notifier_head *, unsigned long, void *);
241:	bool atomic_notifier_call_chain_is_empty(struct atomic_notifier_head *);
143:	int atomic_notifier_chain_register(struct atomic_notifier_head *, struct notifier_block *);
166:	int atomic_notifier_chain_register_unique_prio(struct atomic_notifier_head *, struct notifier_block *);
188:	int atomic_notifier_chain_unregister(struct atomic_notifier_head *, struct notifier_block *);
370:	int blocking_notifier_call_chain(struct blocking_notifier_head *, unsigned long, void *);
335:	int blocking_notifier_call_chain_robust(struct blocking_notifier_head *, unsigned long, unsigned long, void *);
281:	int blocking_notifier_chain_register(struct blocking_notifier_head *, struct notifier_block *);
298:	int blocking_notifier_chain_register_unique_prio(struct blocking_notifier_head *, struct notifier_block *);
315:	int blocking_notifier_chain_unregister(struct blocking_notifier_head *, struct notifier_block *);
580:	int notify_die(enum die_val, const char *, struct pt_regs *, long, int, int);
452:	int raw_notifier_call_chain(struct raw_notifier_head *, unsigned long, void *);
428:	int raw_notifier_call_chain_robust(struct raw_notifier_head *, unsigned long, unsigned long, void *);
404:	int raw_notifier_chain_register(struct raw_notifier_head *, struct notifier_block *);
421:	int raw_notifier_chain_unregister(struct raw_notifier_head *, struct notifier_block *);
597:	int register_die_notifier(struct notifier_block *);
567:	void srcu_init_notifier_head(struct srcu_notifier_head *);
542:	int srcu_notifier_call_chain(struct srcu_notifier_head *, unsigned long, void *);
475:	int srcu_notifier_chain_register(struct srcu_notifier_head *, struct notifier_block *);
505:	int srcu_notifier_chain_unregister(struct srcu_notifier_head *, struct notifier_block *);
603:	int unregister_die_notifier(struct notifier_block *);
File kernel/nsproxy.c:
546:	long __arm64_sys_setns(const struct pt_regs *);
151:	int copy_namespaces(unsigned long, struct task_struct *);
259:	int exec_task_namespaces(void);
254:	void exit_task_namespaces(struct task_struct *);
190:	void free_nsproxy(struct nsproxy *);
588:	int nsproxy_cache_init(void);
239:	void switch_task_namespaces(struct task_struct *, struct nsproxy *);
213:	int unshare_nsproxy_namespaces(unsigned long, struct nsproxy **, struct cred *, struct fs_struct *);
File kernel/panic.c:
743:	void __stack_chk_fail(void);
643:	void __warn(const char *, int, void *, unsigned int, struct pt_regs *, struct warn_args *);
699:	void __warn_printk(const char *, ...);
525:	void add_taint(unsigned int, enum lockdep_ok);
233:	void check_panic_on_warn(const char *);
164:	void crash_smp_send_stop(void);
512:	unsigned long get_taint(void);
192:	void nmi_panic(struct pt_regs *, const char *);
153:	void nmi_panic_self_stop(struct pt_regs *);
611:	void oops_enter(void);
631:	void oops_exit(void);
592:	bool oops_may_print(void);
254:	void panic(const char *, ...);
143:	void panic_smp_self_stop(void);
483:	const char *print_tainted(void);
506:	int test_taint(unsigned int);
File kernel/params.c:
855:	ssize_t __modver_version_show(struct module_attribute *, struct module_kobject *, char *);
752:	void destroy_params(const struct kernel_param *, unsigned int);
602:	void kernel_param_lock(struct module *);
607:	void kernel_param_unlock(struct module *);
293:	void param_free_charp(void *);
317:	int param_get_bool(char *, const struct kernel_param *);
236:	int param_get_byte(char *, const struct kernel_param *);
287:	int param_get_charp(char *, const struct kernel_param *);
244:	int param_get_hexint(char *, const struct kernel_param *);
239:	int param_get_int(char *, const struct kernel_param *);
377:	int param_get_invbool(char *, const struct kernel_param *);
241:	int param_get_long(char *, const struct kernel_param *);
237:	int param_get_short(char *, const struct kernel_param *);
524:	int param_get_string(char *, const struct kernel_param *);
240:	int param_get_uint(char *, const struct kernel_param *);
243:	int param_get_ullong(char *, const struct kernel_param *);
242:	int param_get_ulong(char *, const struct kernel_param *);
238:	int param_get_ushort(char *, const struct kernel_param *);
389:	int param_set_bint(const char *, const struct kernel_param *);
307:	int param_set_bool(const char *, const struct kernel_param *);
331:	int param_set_bool_enable_only(const char *, const struct kernel_param *);
236:	int param_set_byte(const char *, const struct kernel_param *);
264:	int param_set_charp(const char *, const struct kernel_param *);
510:	int param_set_copystring(const char *, const struct kernel_param *);
244:	int param_set_hexint(const char *, const struct kernel_param *);
239:	int param_set_int(const char *, const struct kernel_param *);
363:	int param_set_invbool(const char *, const struct kernel_param *);
241:	int param_set_long(const char *, const struct kernel_param *);
237:	int param_set_short(const char *, const struct kernel_param *);
240:	int param_set_uint(const char *, const struct kernel_param *);
246:	int param_set_uint_minmax(const char *, const struct kernel_param *, unsigned int, unsigned int);
243:	int param_set_ullong(const char *, const struct kernel_param *);
242:	int param_set_ulong(const char *, const struct kernel_param *);
238:	int param_set_ushort(const char *, const struct kernel_param *);
95:	bool parameq(const char *, const char *);
84:	bool parameqn(const char *, const char *, size_t);
161:	char *parse_args(const char *, char *, const struct kernel_param *, unsigned int, s16, s16, void *, int (*)(char *, char *, const char *, void *));
File kernel/pid.c:
724:	long __arm64_sys_pidfd_getfd(const struct pt_regs *);
629:	long __arm64_sys_pidfd_open(const struct pt_regs *);
492:	pid_t __task_pid_nr_ns(struct task_struct *, enum pid_type, struct pid_namespace *);
159:	struct pid *alloc_pid(struct pid_namespace *, pid_t *, size_t);
331:	void attach_pid(struct task_struct *, enum pid_type);
361:	void change_pid(struct task_struct *, enum pid_type, struct pid *);
356:	void detach_pid(struct task_struct *, enum pid_type);
302:	void disable_pid_allocation(struct pid_namespace *);
368:	void exchange_tids(struct task_struct *, struct task_struct *);
518:	struct pid *find_ge_pid(int, struct pid_namespace *);
460:	struct pid *find_get_pid(pid_t);
425:	struct task_struct *find_get_task_by_vpid(pid_t);
309:	struct pid *find_pid_ns(int, struct pid_namespace *);
413:	struct task_struct *find_task_by_pid_ns(pid_t, struct pid_namespace *);
420:	struct task_struct *find_task_by_vpid(pid_t);
315:	struct pid *find_vpid(int);
126:	void free_pid(struct pid *);
448:	struct task_struct *get_pid_task(struct pid *, enum pid_type);
438:	struct pid *get_task_pid(struct task_struct *, enum pid_type);
650:	void pid_idr_init(void);
472:	pid_t pid_nr_ns(struct pid *, struct pid_namespace *);
396:	struct task_struct *pid_task(struct pid *, enum pid_type);
486:	pid_t pid_vnr(struct pid *);
595:	int pidfd_create(struct pid *, unsigned int);
524:	struct pid *pidfd_get_pid(unsigned int, unsigned int *);
560:	struct task_struct *pidfd_get_task(int, unsigned int *);
105:	void put_pid(struct pid *);
507:	struct pid_namespace *task_active_pid_ns(struct task_struct *);
388:	void transfer_pid(struct task_struct *, struct task_struct *, enum pid_type);
File kernel/pid_namespace.c:
142:	struct pid_namespace *copy_pid_ns(unsigned long, struct user_namespace *, struct pid_namespace *);
152:	void put_pid_ns(struct pid_namespace *);
300:	int reboot_pid_ns(struct pid_namespace *, int);
166:	void zap_pid_ns_processes(struct pid_namespace *);
File kernel/power/process.c:
165:	int freeze_kernel_threads(void);
121:	int freeze_processes(void);
217:	void thaw_kernel_threads(void);
179:	void thaw_processes(void);
File kernel/power/qos.c:
433:	void freq_constraints_init(struct freq_constraints *);
615:	int freq_qos_add_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
528:	int freq_qos_add_request(struct freq_constraints *, struct freq_qos_request *, enum freq_qos_req_type, s32);
493:	int freq_qos_apply(struct freq_qos_request *, enum pm_qos_req_action, s32);
461:	s32 freq_qos_read_value(struct freq_constraints *, enum freq_qos_req_type);
648:	int freq_qos_remove_notifier(struct freq_constraints *, enum freq_qos_req_type, struct notifier_block *);
590:	int freq_qos_remove_request(struct freq_qos_request *);
564:	int freq_qos_update_request(struct freq_qos_request *, s32);
53:	s32 pm_qos_read_value(struct pm_qos_constraints *);
174:	bool pm_qos_update_flags(struct pm_qos_flags *, struct pm_qos_flags_request *, enum pm_qos_req_action, s32);
98:	int pm_qos_update_target(struct pm_qos_constraints *, struct plist_node *, enum pm_qos_req_action, int);
File kernel/printk/printk.c:
1853:	long __arm64_sys_syslog(const struct pt_regs *);
4187:	void __printk_cpu_sync_put(void);
4135:	int __printk_cpu_sync_try_get(void);
4116:	void __printk_cpu_sync_wait(void);
3809:	int __printk_ratelimit(const char *);
2374:	int _printk(const char *, ...);
3789:	int _printk_deferred(const char *, ...);
2570:	int add_preferred_console(char *, int, char *);
2998:	void console_conditional_schedule(void);
3081:	struct tty_driver *console_device(int *);
3045:	void console_flush_on_panic(enum con_flush_mode);
3500:	void console_force_preferred_locked(struct console *);
3542:	void console_init(void);
249:	void console_list_lock(void);
273:	void console_list_unlock(void);
2654:	void console_lock(void);
288:	int console_srcu_read_lock(void);
301:	void console_srcu_read_unlock(int);
3130:	void console_start(struct console *);
3113:	void console_stop(struct console *);
2674:	int console_trylock(void);
3005:	void console_unblank(void);
2938:	void console_unlock(void);
2591:	void console_verbose(void);
3765:	void defer_console_output(void);
204:	int devkmsg_sysctl_set_loglvl(struct ctl_table *, int, void *, size_t *, loff_t *);
1740:	int do_syslog(int, char *, int, int);
2688:	int is_console_locked(void);
3923:	void kmsg_dump(enum kmsg_dump_reason);
4023:	bool kmsg_dump_get_buffer(struct kmsg_dump_iter *, bool, char *, size_t, size_t *);
3965:	bool kmsg_dump_get_line(struct kmsg_dump_iter *, bool, char *, size_t, size_t *);
3898:	const char *kmsg_dump_reason_str(enum kmsg_dump_reason);
3848:	int kmsg_dump_register(struct kmsg_dumper *);
4097:	void kmsg_dump_rewind(struct kmsg_dump_iter *);
3877:	int kmsg_dump_unregister(struct kmsg_dumper *);
550:	char *log_buf_addr_get(void);
556:	u32 log_buf_len_get(void);
2145:	u16 printk_parse_prefix(const char *, int *, enum printk_info_flags *);
519:	bool printk_percpu_data_ready(void);
3824:	bool printk_timed_ratelimit(unsigned long *, unsigned int);
3774:	void printk_trigger_flush(void);
3312:	void register_console(struct console *);
2617:	void resume_console(void);
1155:	void setup_log_buf(int);
2606:	void suspend_console(void);
3483:	int unregister_console(struct console *);
2368:	int vprintk_default(const char *, va_list);
3779:	int vprintk_deferred(const char *, va_list);
2318:	int vprintk_emit(int, int, const struct dev_printk_info *, const char *, va_list);
2205:	int vprintk_store(int, int, const struct dev_printk_info *, const char *, va_list);
3760:	void wake_up_klogd(void);
File kernel/printk/printk_ringbuffer.c:
1632:	void prb_commit(struct prb_reserved_entry *);
1664:	void prb_final_commit(struct prb_reserved_entry *);
1992:	u64 prb_first_valid_seq(struct printk_ringbuffer *);
2075:	void prb_init(struct printk_ringbuffer *, char *, unsigned int, struct prb_desc *, unsigned int, struct printk_info *);
2017:	u64 prb_next_seq(struct printk_ringbuffer *);
1937:	bool prb_read_valid(struct printk_ringbuffer *, u64, struct printk_record *);
1967:	bool prb_read_valid_info(struct printk_ringbuffer *, u64, struct printk_info *, unsigned int *);
2121:	unsigned int prb_record_text_space(struct prb_reserved_entry *);
1485:	bool prb_reserve(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *);
1350:	bool prb_reserve_in_last(struct prb_reserved_entry *, struct printk_ringbuffer *, struct printk_record *, u32, unsigned int);
File kernel/printk/printk_safe.c:
18:	void __printk_safe_enter(void);
24:	void __printk_safe_exit(void);
29:	int vprintk(const char *, va_list);
File kernel/printk/sysctl.c:
82:	void printk_sysctl_init(void);
File kernel/profile.c:
461:	int create_proc_profile(void);
384:	void create_prof_cpu_mask(void);
325:	void profile_hits(int, void *, unsigned int);
100:	int profile_init(void);
57:	int profile_setup(char *);
333:	void profile_tick(int);
425:	int setup_profiling_timer(unsigned int);
File kernel/ptrace.c:
1269:	long __arm64_sys_ptrace(const struct pt_regs *);
68:	void __ptrace_link(struct task_struct *, struct task_struct *, const struct cred *);
116:	void __ptrace_unlink(struct task_struct *);
613:	void exit_ptrace(struct task_struct *, struct list_head *);
1306:	int generic_ptrace_peekdata(struct task_struct *, unsigned long, unsigned long);
1318:	int generic_ptrace_pokedata(struct task_struct *, unsigned long, unsigned long);
43:	int ptrace_access_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
359:	bool ptrace_may_access(struct task_struct *, unsigned int);
626:	int ptrace_readdata(struct task_struct *, unsigned long, char *, int);
1030:	int ptrace_request(struct task_struct *, long, unsigned long, unsigned long);
652:	int ptrace_writedata(struct task_struct *, char *, unsigned long, int);
File kernel/range.c:
12:	int add_range(struct range *, int, int, u64, u64);
29:	int add_range_with_merge(struct range *, int, int, u64, u64);
126:	int clean_sort_range(struct range *, int);
161:	void sort_range(struct range *, int);
65:	void subtract_range(struct range *, int, u64, u64);
File kernel/rcu/rcu_segcblist.c:
67:	struct callback_head *rcu_cblist_dequeue(struct rcu_cblist *);
28:	void rcu_cblist_enqueue(struct rcu_cblist *, struct callback_head *);
43:	void rcu_cblist_flush_enqueue(struct rcu_cblist *, struct rcu_cblist *, struct callback_head *);
18:	void rcu_cblist_init(struct rcu_cblist *);
537:	bool rcu_segcblist_accelerate(struct rcu_segcblist *, unsigned long);
210:	void rcu_segcblist_add_len(struct rcu_segcblist *, long);
480:	void rcu_segcblist_advance(struct rcu_segcblist *, unsigned long);
256:	void rcu_segcblist_disable(struct rcu_segcblist *);
340:	void rcu_segcblist_enqueue(struct rcu_segcblist *, struct callback_head *);
360:	bool rcu_segcblist_entrain(struct rcu_segcblist *, struct callback_head *);
385:	void rcu_segcblist_extract_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
410:	void rcu_segcblist_extract_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
298:	struct callback_head *rcu_segcblist_first_cb(struct rcu_segcblist *);
312:	struct callback_head *rcu_segcblist_first_pend_cb(struct rcu_segcblist *);
229:	void rcu_segcblist_inc_len(struct rcu_segcblist *);
237:	void rcu_segcblist_init(struct rcu_segcblist *);
432:	void rcu_segcblist_insert_count(struct rcu_segcblist *, struct rcu_cblist *);
442:	void rcu_segcblist_insert_done_cbs(struct rcu_segcblist *, struct rcu_cblist *);
465:	void rcu_segcblist_insert_pend_cbs(struct rcu_segcblist *, struct rcu_cblist *);
607:	void rcu_segcblist_merge(struct rcu_segcblist *, struct rcu_segcblist *);
98:	long rcu_segcblist_n_segment_cbs(struct rcu_segcblist *);
323:	bool rcu_segcblist_nextgp(struct rcu_segcblist *, unsigned long *);
266:	void rcu_segcblist_offload(struct rcu_segcblist *, bool);
288:	bool rcu_segcblist_pend_cbs(struct rcu_segcblist *);
278:	bool rcu_segcblist_ready_cbs(struct rcu_segcblist *);
File kernel/rcu/srcutree.c:
662:	int __srcu_read_lock(struct srcu_struct *);
678:	void __srcu_read_unlock(struct srcu_struct *, int);
1256:	void call_srcu(struct srcu_struct *, struct callback_head *, rcu_callback_t);
599:	void cleanup_srcu_struct(struct srcu_struct *);
1378:	unsigned long get_state_synchronize_srcu(struct srcu_struct *);
295:	int init_srcu_struct(struct srcu_struct *);
1428:	bool poll_state_synchronize_srcu(struct srcu_struct *, unsigned long);
1479:	void srcu_barrier(struct srcu_struct *);
1523:	unsigned long srcu_batches_completed(struct srcu_struct *);
1799:	void srcu_init(void);
1732:	void srcu_torture_stats_print(struct srcu_struct *, char *, char *);
1708:	void srcutorture_get_gp_data(enum rcutorture_type, struct srcu_struct *, int *, unsigned long *);
1397:	unsigned long start_poll_synchronize_srcu(struct srcu_struct *);
1359:	void synchronize_srcu(struct srcu_struct *);
1306:	void synchronize_srcu_expedited(struct srcu_struct *);
File kernel/rcu/sync.c:
189:	void rcu_sync_dtor(struct rcu_sync *);
121:	void rcu_sync_enter(struct rcu_sync *);
36:	void rcu_sync_enter_start(struct rcu_sync *);
168:	void rcu_sync_exit(struct rcu_sync *);
21:	void rcu_sync_init(struct rcu_sync *);
File kernel/rcu/tasks.h:
927:	void call_rcu_tasks(struct callback_head *, rcu_callback_t);
1688:	void call_rcu_tasks_trace(struct callback_head *, rcu_callback_t);
1000:	void exit_tasks_rcu_finish(void);
992:	void exit_tasks_rcu_start(void);
963:	void rcu_barrier_tasks(void);
1724:	void rcu_barrier_tasks_trace(void);
1896:	void rcu_init_tasks_generic(void);
1244:	void rcu_read_unlock_trace_special(struct task_struct *);
1275:	void rcu_tasks_trace_qs_blkd(struct task_struct *);
1226:	u8 rcu_trc_cmpxchg_need_qs(struct task_struct *, u8, u8);
984:	void show_rcu_tasks_classic_gp_kthread(void);
1772:	void show_rcu_tasks_gp_kthreads(void);
1753:	void show_rcu_tasks_trace_gp_kthread(void);
951:	void synchronize_rcu_tasks(void);
1711:	void synchronize_rcu_tasks_trace(void);
File kernel/rcu/tree.c:
2866:	void call_rcu(struct callback_head *, rcu_callback_t);
3808:	void cond_synchronize_rcu(unsigned long);
3835:	void cond_synchronize_rcu_full(struct rcu_gp_oldstate *);
3579:	void get_completed_synchronize_rcu_full(struct rcu_gp_oldstate *);
3593:	unsigned long get_state_synchronize_rcu(void);
3620:	void get_state_synchronize_rcu_full(struct rcu_gp_oldstate *);
3461:	void kfree_rcu_scheduler_running(void);
3345:	void kvfree_call_rcu(struct callback_head *, rcu_callback_t);
3730:	bool poll_state_synchronize_rcu(unsigned long);
3774:	bool poll_state_synchronize_rcu_full(struct rcu_gp_oldstate *);
3986:	void rcu_barrier(void);
4259:	void rcu_cpu_starting(unsigned int);
318:	bool rcu_dynticks_zero_in_eqs(int, int *);
512:	unsigned long rcu_exp_batches_completed(void);
2409:	void rcu_force_quiescent_state(void);
200:	int rcu_get_gp_kthreads_prio(void);
500:	unsigned long rcu_get_gp_seq(void);
1322:	void rcu_gp_set_torture_wait(int);
1288:	void rcu_gp_slow_register(atomic_t *);
1297:	void rcu_gp_slow_unregister(atomic_t *);
4799:	void rcu_init(void);
4653:	void rcu_init_geometry(void);
708:	bool rcu_is_watching(void);
344:	void rcu_momentary_dyntick_idle(void);
675:	int rcu_needs_cpu(void);
4315:	void rcu_report_dead(unsigned int);
726:	void rcu_request_urgent_qs_task(struct task_struct *);
2321:	void rcu_sched_clock_irq(int);
4520:	void rcu_scheduler_starting(void);
261:	void rcu_softirq_qs(void);
529:	void rcutorture_get_gp_data(enum rcutorture_type, int *, unsigned long *);
2164:	int rcutree_dead_cpu(unsigned int);
2098:	int rcutree_dying_cpu(unsigned int);
4354:	void rcutree_migrate_callbacks(int);
4229:	int rcutree_offline_cpu(unsigned int);
4204:	int rcutree_online_cpu(unsigned int);
4144:	int rcutree_prepare_cpu(unsigned int);
3674:	unsigned long start_poll_synchronize_rcu(void);
3697:	void start_poll_synchronize_rcu_full(struct rcu_gp_oldstate *);
3532:	void synchronize_rcu(void);
File kernel/rcu/tree_exp.h:
1074:	void cond_synchronize_rcu_expedited(unsigned long);
1101:	void cond_synchronize_rcu_expedited_full(struct rcu_gp_oldstate *);
1012:	unsigned long start_poll_synchronize_rcu_expedited(void);
1047:	void start_poll_synchronize_rcu_expedited_full(struct rcu_gp_oldstate *);
908:	void synchronize_rcu_expedited(void);
File kernel/rcu/tree_plugin.h:
398:	void __rcu_read_lock(void);
416:	void __rcu_read_unlock(void);
754:	void exit_rcu(void);
310:	void rcu_note_context_switch(bool);
598:	void rcu_preempt_deferred_qs(struct task_struct *);
File kernel/rcu/tree_stall.h:
793:	bool rcu_check_boost_fail(unsigned long, int *);
154:	void rcu_cpu_stall_reset(void);
28:	int rcu_exp_jiffies_till_stall_check(void);
965:	void rcu_fwd_progress_check(unsigned long);
89:	bool rcu_gp_might_be_stalled(void);
57:	int rcu_jiffies_till_stall_check(void);
113:	void rcu_sysrq_end(void);
107:	void rcu_sysrq_start(void);
837:	void show_rcu_gp_kthreads(void);
File kernel/rcu/update.c:
371:	void __wait_rcu_gp(bool, int, call_rcu_func_t *, struct rcu_synchronize *);
476:	void do_trace_rcu_torture_read(const char *, struct callback_head *, unsigned long, unsigned long, unsigned long);
410:	void finish_rcuwait(struct rcuwait *);
526:	unsigned long get_completed_synchronize_rcu(void);
599:	void rcu_early_boot_tests(void);
195:	void rcu_end_inkernel_boot(void);
169:	void rcu_expedite_gp(void);
156:	bool rcu_gp_is_expedited(void);
140:	bool rcu_gp_is_normal(void);
206:	bool rcu_inkernel_boot_has_ended(void);
219:	void rcu_test_sync_prims(void);
184:	void rcu_unexpedite_gp(void);
609:	void rcupdate_announce_bootup_oddness(void);
362:	void wakeme_after_rcu(struct callback_head *);
File kernel/reboot.c:
700:	long __arm64_sys_reboot(const struct pt_regs *);
798:	void ctrl_alt_del(void);
530:	int devm_register_power_off_handler(struct device *, int (*)(struct sys_off_data *), void *);
125:	int devm_register_reboot_notifier(struct device *, struct notifier_block *);
552:	int devm_register_restart_handler(struct device *, int (*)(struct sys_off_data *), void *);
502:	int devm_register_sys_off_handler(struct device *, enum sys_off_mode, int, int (*)(struct sys_off_data *), void *);
639:	void do_kernel_power_off(void);
223:	void do_kernel_restart(char *);
74:	void emergency_restart(void);
970:	void hw_protection_shutdown(const char *, int);
666:	bool kernel_can_power_off(void);
293:	void kernel_halt(void);
678:	void kernel_power_off(void);
265:	void kernel_restart(char *);
81:	void kernel_restart_prepare(char *);
228:	void migrate_to_reboot_cpu(void);
884:	void orderly_poweroff(bool);
905:	void orderly_reboot(void);
585:	int register_platform_power_off(void (*)(void));
99:	int register_reboot_notifier(struct notifier_block *);
191:	int register_restart_handler(struct notifier_block *);
389:	struct sys_off_handler *register_sys_off_handler(enum sys_off_mode, int, int (*)(struct sys_off_data *), void *);
608:	void unregister_platform_power_off(void (*)(void));
114:	int unregister_reboot_notifier(struct notifier_block *);
206:	int unregister_restart_handler(struct notifier_block *);
462:	void unregister_sys_off_handler(struct sys_off_handler *);
File kernel/regset.c:
61:	int copy_regset_to_user(struct task_struct *, const struct user_regset_view *, unsigned int, unsigned int, unsigned int, void *);
33:	int regset_get(struct task_struct *, const struct user_regset *, unsigned int, void *);
42:	int regset_get_alloc(struct task_struct *, const struct user_regset *, unsigned int, void **);
File kernel/resource.c:
1595:	void __devm_release_region(struct device *, struct resource *, resource_size_t, resource_size_t);
1570:	struct resource *__devm_request_region(struct device *, struct resource *, resource_size_t, resource_size_t, const char *);
1251:	void __release_region(struct resource *, resource_size_t, resource_size_t);
1217:	struct resource *__request_region(struct resource *, resource_size_t, resource_size_t, const char *, int);
976:	int adjust_resource(struct resource *, resource_size_t, resource_size_t);
706:	int allocate_resource(struct resource *, struct resource *, resource_size_t, resource_size_t, resource_size_t, resource_size_t, resource_size_t (*)(void *, const struct resource *, resource_size_t, resource_size_t), void *);
554:	void arch_remove_reservations(struct resource *);
1541:	void devm_release_resource(struct device *, struct resource *);
1503:	int devm_request_resource(struct device *, struct resource *, struct resource *);
853:	int insert_resource(struct resource *, struct resource *);
833:	struct resource *insert_resource_conflict(struct resource *, struct resource *);
870:	void insert_resource_expand_to_fit(struct resource *, struct resource *);
1147:	struct address_space *iomem_get_mapping(void);
1754:	bool iomem_is_exclusive(u64);
1656:	int iomem_map_sanity_check(resource_size_t, unsigned long);
750:	struct resource *lookup_resource(struct resource *, resource_size_t);
486:	int page_is_ram(unsigned long);
541:	int region_intersects(resource_size_t, size_t, unsigned long, unsigned long);
251:	void release_child_resources(struct resource *);
296:	int release_resource(struct resource *);
918:	int remove_resource(struct resource *);
282:	int request_resource(struct resource *, struct resource *);
265:	struct resource *request_resource_conflict(struct resource *, struct resource *);
1050:	void reserve_region_with_split(struct resource *, resource_size_t, resource_size_t, const char *);
1084:	resource_size_t resource_alignment(struct resource *);
1707:	bool resource_is_exclusive(struct resource *, u64, resource_size_t);
1760:	struct resource_entry *resource_list_create_entry(struct resource *, size_t);
1775:	void resource_list_free(struct list_head *);
411:	int walk_iomem_res_desc(unsigned long, unsigned long, u64, u64, void *, int (*)(struct resource *, void *));
438:	int walk_mem_res(u64, u64, void *, int (*)(struct resource *, void *));
452:	int walk_system_ram_range(unsigned long, unsigned long, void *, int (*)(unsigned long, unsigned long, void *));
425:	int walk_system_ram_res(u64, u64, void *, int (*)(struct resource *, void *));
File kernel/rseq.c:
336:	long __arm64_sys_rseq(const struct pt_regs *);
286:	void __rseq_handle_notify_resume(struct ksignal *, struct pt_regs *);
File kernel/sched/autogroup.c:
42:	void autogroup_free(struct task_group *);
33:	void autogroup_init(struct task_struct *);
285:	int autogroup_path(struct task_group *, char *, int);
231:	int proc_sched_autogroup_set_nice(struct task_struct *, int);
269:	void proc_sched_autogroup_show_task(struct task_struct *, struct seq_file *);
193:	void sched_autogroup_create_attach(struct task_struct *);
205:	void sched_autogroup_detach(struct task_struct *);
216:	void sched_autogroup_exit(struct signal_struct *);
147:	void sched_autogroup_exit_task(struct task_struct *);
211:	void sched_autogroup_fork(struct signal_struct *);
129:	bool task_wants_autogroup(struct task_struct *, struct task_group *);
File kernel/sched/clock.c:
477:	u64 running_clock(void);
62:	unsigned long long sched_clock(void);
459:	u64 sched_clock_cpu(int);
451:	void sched_clock_init(void);
File kernel/sched/completion.c:
28:	void complete(struct completion *);
57:	void complete_all(struct completion *);
327:	bool completion_done(struct completion *);
294:	bool try_wait_for_completion(struct completion *);
136:	void wait_for_completion(struct completion *);
204:	int wait_for_completion_interruptible(struct completion *);
226:	long wait_for_completion_interruptible_timeout(struct completion *, unsigned long);
169:	void wait_for_completion_io(struct completion *);
189:	unsigned long wait_for_completion_io_timeout(struct completion *, unsigned long);
242:	int wait_for_completion_killable(struct completion *);
275:	long wait_for_completion_killable_timeout(struct completion *, unsigned long);
252:	int wait_for_completion_state(struct completion *, unsigned int);
155:	unsigned long wait_for_completion_timeout(struct completion *, unsigned long);
File kernel/sched/core.c:
8881:	long __arm64_sys_sched_get_priority_max(const struct pt_regs *);
8908:	long __arm64_sys_sched_get_priority_min(const struct pt_regs *);
8390:	long __arm64_sys_sched_getaffinity(const struct pt_regs *);
8121:	long __arm64_sys_sched_getattr(const struct pt_regs *);
8040:	long __arm64_sys_sched_getparam(const struct pt_regs *);
8011:	long __arm64_sys_sched_getscheduler(const struct pt_regs *);
8973:	long __arm64_sys_sched_rr_get_interval(const struct pt_regs *);
8338:	long __arm64_sys_sched_setaffinity(const struct pt_regs *);
7968:	long __arm64_sys_sched_setattr(const struct pt_regs *);
7957:	long __arm64_sys_sched_setparam(const struct pt_regs *);
7942:	long __arm64_sys_sched_setscheduler(const struct pt_regs *);
8443:	long __arm64_sys_sched_yield(const struct pt_regs *);
8515:	int __cond_resched_lock(spinlock_t *);
8533:	int __cond_resched_rwlock_read(rwlock_t *);
8551:	int __cond_resched_rwlock_write(rwlock_t *);
606:	struct rq *__task_rq_lock(struct task_struct *, struct rq_flags *);
2083:	void activate_task(struct rq *, struct task_struct *, int);
7260:	int available_idle_cpu(int);
11361:	void call_trace_sched_update_nr_running(struct rq *, int);
7173:	int can_nice(const struct task_struct *, const int);
2174:	void check_preempt_curr(struct rq *, struct task_struct *, int);
4376:	struct task_struct *cpu_curr_snapshot(int);
3864:	bool cpus_share_cache(int, int);
9165:	int cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2090:	void deactivate_task(struct rq *, struct task_struct *, int);
6926:	int default_wake_function(wait_queue_entry_t *, unsigned int, int, void *);
8168:	int dl_task_check_affinity(struct task_struct *, const struct cpumask *);
2600:	void do_set_cpus_allowed(struct task_struct *, const struct cpumask *);
6616:	void do_task_dead(void);
588:	void double_rq_lock(struct rq *, struct rq *);
11301:	void dump_cpu_task(int);
2632:	int dup_user_cpus_ptr(struct task_struct *, struct task_struct *, int);
7303:	unsigned long effective_cpu_util(int, unsigned long, enum cpu_util_type, struct task_struct *);
3076:	void force_compatible_cpus_allowed_ptr(struct task_struct *);
1064:	int get_nohz_timer_target(void);
2030:	unsigned long get_wchan(struct task_struct *);
808:	void hrtick_start(struct rq *, u64);
7236:	int idle_cpu(int);
7277:	struct task_struct *idle_task(int);
9265:	void idle_task_exit(void);
9745:	int in_sched_functions(unsigned long);
9092:	void init_idle(struct task_struct *, int);
8863:	void io_schedule(void);
8841:	void io_schedule_finish(int);
8832:	int io_schedule_prepare(void);
8850:	long io_schedule_timeout(long);
3434:	void kick_process(struct task_struct *);
2216:	void migrate_disable(void);
2232:	void migrate_enable(void);
3276:	int migrate_swap(struct task_struct *, struct task_struct *, int, int);
9214:	int migrate_task_to(struct task_struct *, int);
5334:	unsigned long long nr_context_switches(void);
5387:	unsigned int nr_iowait(void);
5352:	unsigned int nr_iowait_cpu(int);
5305:	unsigned int nr_running(void);
5745:	void preempt_count_add(int);
5777:	void preempt_count_sub(int);
6791:	void preempt_schedule(void);
6906:	void preempt_schedule_irq(void);
6839:	void preempt_schedule_notrace(void);
2487:	int push_cpu_stop(void *);
530:	void raw_spin_rq_lock_nested(struct rq *, int);
555:	bool raw_spin_rq_trylock(struct rq *);
579:	void raw_spin_rq_unlock(struct rq *);
3125:	void relax_compatible_cpus_allowed_ptr(struct task_struct *);
2684:	void release_user_cpus_ptr(struct task_struct *);
1043:	void resched_cpu(int);
1019:	void resched_curr(struct rq *);
6974:	void rt_mutex_setprio(struct task_struct *, struct task_struct *);
4709:	void sched_cgroup_fork(struct task_struct *, struct kernel_clone_args *);
9500:	int sched_cpu_activate(unsigned int);
9545:	int sched_cpu_deactivate(unsigned int);
9683:	int sched_cpu_dying(unsigned int);
9620:	int sched_cpu_starting(unsigned int);
7391:	unsigned long sched_cpu_util(int);
9641:	int sched_cpu_wait_empty(unsigned int);
10239:	struct task_group *sched_create_group(struct task_group *);
10287:	void sched_destroy_group(struct task_group *);
5403:	void sched_exec(void);
4646:	int sched_fork(unsigned long, struct task_struct *);
8354:	long sched_getaffinity(pid_t, struct cpumask *);
9764:	void sched_init(void);
9706:	void sched_init_smp(void);
10345:	void sched_move_task(struct task_struct *);
10262:	void sched_online_group(struct task_group *, struct task_group *);
4738:	void sched_post_fork(struct task_struct *);
10293:	void sched_release_group(struct task_group *);
7825:	void sched_set_fifo(struct task_struct *);
7835:	void sched_set_fifo_low(struct task_struct *);
7842:	void sched_set_normal(struct task_struct *, int);
3568:	void sched_set_stop_task(int, struct task_struct *);
8255:	long sched_setaffinity(pid_t, const struct cpumask *);
7777:	int sched_setattr(struct task_struct *, const struct sched_attr *);
7782:	int sched_setattr_nocheck(struct task_struct *, const struct sched_attr *);
9235:	void sched_setnuma(struct task_struct *, int);
7771:	int sched_setscheduler(struct task_struct *, int, const struct sched_param *);
7801:	int sched_setscheduler_nocheck(struct task_struct *, int, const struct sched_param *);
8998:	void sched_show_task(struct task_struct *);
2025:	bool sched_task_on_rq(struct task_struct *);
3781:	void sched_ttwu_pending(void *);
6675:	void schedule(void);
6699:	void schedule_idle(void);
6738:	void schedule_preempt_disabled(void);
5216:	void schedule_tail(struct task_struct *);
5547:	void scheduler_tick(void);
3818:	void send_call_function_single_ipi(int);
2534:	void set_cpus_allowed_common(struct task_struct *, struct affinity_context *);
3014:	int set_cpus_allowed_ptr(struct task_struct *, const struct cpumask *);
4474:	void set_numabalancing_state(bool);
9435:	void set_rq_offline(struct rq *);
9420:	void set_rq_online(struct rq *);
3141:	void set_task_cpu(struct task_struct *, unsigned int);
7098:	void set_user_nice(struct task_struct *, long);
9053:	void show_state_filter(unsigned int);
5328:	bool single_task_running(void);
4324:	int task_call_func(struct task_struct *, task_call_f, void *);
9178:	int task_can_attach(struct task_struct *, const struct cpumask *);
2149:	int task_curr(const struct task_struct *);
7225:	int task_prio(const struct task_struct *);
630:	struct rq *task_rq_lock(struct task_struct *, struct rq_flags *);
5455:	unsigned long long task_sched_runtime(struct task_struct *);
1254:	int tg_nop(struct task_group *, void *);
4743:	unsigned long to_ratio(u64, u64);
728:	void update_rq_clock(struct rq *);
3329:	unsigned long wait_task_inactive(struct task_struct *, unsigned int);
962:	void wake_q_add(struct wake_q_head *, struct task_struct *);
985:	void wake_q_add_safe(struct wake_q_head *, struct task_struct *);
3844:	void wake_up_if_idle(int);
4766:	void wake_up_new_task(struct task_struct *);
1147:	void wake_up_nohz_cpu(int);
4397:	int wake_up_process(struct task_struct *);
991:	void wake_up_q(struct wake_q_head *);
4403:	int wake_up_state(struct task_struct *, unsigned int);
1223:	int walk_tg_tree_from(struct task_group *, tg_visitor, tg_visitor, void *);
8751:	void yield(void);
8773:	int yield_to(struct task_struct *, bool);
File kernel/sched/cpuacct.c:
350:	void cpuacct_account_field(struct task_struct *, int, u64);
334:	void cpuacct_charge(struct task_struct *, u64);
File kernel/sched/cpudeadline.c:
291:	void cpudl_cleanup(struct cpudl *);
173:	void cpudl_clear(struct cpudl *, int);
254:	void cpudl_clear_freecpu(struct cpudl *, int);
116:	int cpudl_find(struct cpudl *, struct task_struct *, struct cpumask *);
263:	int cpudl_init(struct cpudl *);
213:	void cpudl_set(struct cpudl *, int, u64);
244:	void cpudl_set_freecpu(struct cpudl *, int);
File kernel/sched/cpupri.c:
308:	void cpupri_cleanup(struct cpupri *);
120:	int cpupri_find(struct cpupri *, struct task_struct *, struct cpumask *);
143:	int cpupri_find_fitness(struct cpupri *, struct task_struct *, struct cpumask *, bool (*)(struct task_struct *, int));
277:	int cpupri_init(struct cpupri *);
209:	void cpupri_set(struct cpupri *, int, int);
File kernel/sched/cputime.c:
139:	void account_guest_time(struct task_struct *, u64);
515:	void account_idle_ticks(unsigned long);
218:	void account_idle_time(u64);
483:	void account_process_tick(struct task_struct *, int);
207:	void account_steal_time(u64);
164:	void account_system_index_time(struct task_struct *, u64, enum cpu_usage_stat);
184:	void account_system_time(struct task_struct *, int, u64);
117:	void account_user_time(struct task_struct *, u64);
554:	void cputime_adjust(struct task_cputime *, struct prev_cputime *, u64 *, u64 *);
28:	void disable_sched_clock_irqtime(void);
23:	void enable_sched_clock_irqtime(void);
49:	void irqtime_account_irq(struct task_struct *, unsigned int);
626:	void task_cputime_adjusted(struct task_struct *, u64 *, u64 *);
308:	void thread_group_cputime(struct task_struct *, struct task_cputime *);
638:	void thread_group_cputime_adjusted(struct task_struct *, u64 *, u64 *);
File kernel/sched/deadline.c:
2922:	bool __checkparam_dl(const struct sched_attr *);
2970:	void __dl_clear_params(struct task_struct *);
2900:	void __getparam_dl(struct task_struct *, struct sched_attr *);
2888:	void __setparam_dl(struct task_struct *, const struct sched_attr *);
2550:	void dl_add_task_root_domain(struct task_struct *);
2574:	void dl_clear_root_domain(struct root_domain *);
3024:	int dl_cpu_busy(int, struct task_struct *);
3005:	int dl_cpuset_cpumask_can_shrink(const struct cpumask *, const struct cpumask *);
2991:	bool dl_param_changed(struct task_struct *, const struct sched_attr *);
492:	void init_dl_bandwidth(struct dl_bandwidth *, u64, u64);
499:	void init_dl_bw(struct dl_bw *);
1450:	void init_dl_inactive_task_timer(struct sched_dl_entity *);
509:	void init_dl_rq(struct dl_rq *);
1215:	void init_dl_task_timer(struct sched_dl_entity *);
2541:	void init_sched_dl_class(void);
3054:	void print_dl_stats(struct seq_file *, int);
2784:	void sched_dl_do_global(void);
2732:	int sched_dl_global_validate(void);
2822:	int sched_dl_overflow(struct task_struct *, int, const struct sched_attr *);
File kernel/sched/debug.c:
438:	void dirty_sched_domain_sysctl(int);
581:	void print_cfs_rq(struct seq_file *, int, struct cfs_rq *);
693:	void print_dl_rq(struct seq_file *, int, struct dl_rq *);
921:	void print_numa_stats(struct seq_file *, int, unsigned long, unsigned long, unsigned long, unsigned long);
663:	void print_rt_rq(struct seq_file *, int, struct rt_rq *);
1065:	void proc_sched_set_task(struct task_struct *);
946:	void proc_sched_show_task(struct task_struct *, struct pid_namespace *, struct seq_file *);
1072:	void resched_latency_warn(int, u64);
848:	void sysrq_sched_debug_show(void);
394:	void update_sched_domain_debugfs(void);
File kernel/sched/fair.c:
653:	struct sched_entity *__pick_first_entity(struct cfs_rq *);
674:	struct sched_entity *__pick_last_entity(struct cfs_rq *);
6607:	void __update_idle_core(struct rq *);
12117:	int alloc_fair_sched_group(struct task_group *, struct task_group *);
146:	int arch_asym_cpu_priority(int);
12102:	void free_fair_sched_group(struct task_group *);
5937:	void init_cfs_bandwidth(struct cfs_bandwidth *);
12073:	void init_cfs_rq(struct cfs_rq *);
800:	void init_entity_runnable_average(struct sched_entity *);
3081:	void init_numa_balancing(unsigned long, struct task_struct *);
12475:	void init_sched_fair_class(void);
12203:	void init_tg_cfs_entry(struct task_group *, struct cfs_rq *, struct sched_entity *, int, struct sched_entity *);
11251:	void nohz_balance_enter_idle(int);
11217:	void nohz_balance_exit_idle(struct rq *);
11455:	void nohz_run_idle_balance(int);
12158:	void online_fair_sched_group(struct task_group *);
7700:	struct task_struct *pick_next_task_fair(struct rq *, struct task_struct *, struct rq_flags *);
844:	void post_init_entity_util_avg(struct task_struct *);
12440:	void print_cfs_stats(struct seq_file *, int);
3345:	void reweight_task(struct task_struct *, int);
12286:	int sched_group_set_idle(struct task_group *, long);
12272:	int sched_group_set_shares(struct task_group *, unsigned long);
286:	void sched_init_granularity(void);
688:	int sched_update_scaling(void);
3629:	void set_task_rq_fair(struct sched_entity *, struct cfs_rq *, struct cfs_rq *);
1568:	bool should_numa_migrate_memory(struct task_struct *, struct page *, int, int);
12451:	void show_numa_stats(struct task_struct *, struct seq_file *);
2836:	void task_numa_fault(int, int, int, int);
2800:	void task_numa_free(struct task_struct *, bool);
1256:	pid_t task_numa_group_id(struct task_struct *);
11667:	void trigger_load_balance(struct rq *);
12176:	void unregister_fair_sched_group(struct task_group *);
8923:	void update_group_capacity(struct sched_domain *, int);
10896:	void update_max_interval(void);
File kernel/sched/idle.c:
75:	void arch_cpu_idle(void);
74:	void arch_cpu_idle_dead(void);
72:	void arch_cpu_idle_enter(void);
73:	void arch_cpu_idle_exit(void);
71:	void arch_cpu_idle_prepare(void);
24:	void cpu_idle_poll_ctrl(bool);
337:	bool cpu_in_idle(unsigned long);
395:	void cpu_startup_entry(enum cpuhp_state);
86:	void default_idle_call(void);
446:	struct task_struct *pick_next_task_idle(struct rq *);
358:	void play_idle_precise(u64, u64);
17:	void sched_idle_set_state(struct cpuidle_state *);
File kernel/sched/isolation.c:
65:	void housekeeping_affine(struct task_struct *, enum hk_type);
39:	int housekeeping_any_cpu(enum hk_type);
56:	const struct cpumask *housekeeping_cpumask(enum hk_type);
33:	bool housekeeping_enabled(enum hk_type);
82:	void housekeeping_init(void);
73:	bool housekeeping_test_cpu(int, enum hk_type);
File kernel/sched/loadavg.c:
349:	void calc_global_load(void);
385:	void calc_global_load_tick(struct rq *);
78:	long calc_load_fold_active(struct rq *, long);
156:	unsigned long calc_load_n(unsigned long, unsigned long, unsigned long, unsigned int);
258:	void calc_load_nohz_remote(struct rq *);
245:	void calc_load_nohz_start(void);
263:	void calc_load_nohz_stop(void);
71:	void get_avenrun(unsigned long *, unsigned long, int);
File kernel/sched/membarrier.c:
579:	long __arm64_sys_membarrier(const struct pt_regs *);
216:	void membarrier_exec_mmap(struct mm_struct *);
232:	void membarrier_update_current_mm(struct mm_struct *);
File kernel/sched/pelt.c:
295:	int __update_load_avg_blocked_se(u64, struct sched_entity *);
320:	int __update_load_avg_cfs_rq(u64, struct cfs_rq *);
306:	int __update_load_avg_se(u64, struct cfs_rq *, struct sched_entity *);
372:	int update_dl_rq_load_avg(u64, struct rq *, int);
430:	int update_irq_load_avg(struct rq *, u64);
346:	int update_rt_rq_load_avg(u64, struct rq *, int);
File kernel/sched/rt.c:
313:	int alloc_rt_sched_group(struct task_group *, struct task_group *);
311:	void free_rt_sched_group(struct task_group *);
90:	void init_rt_bandwidth(struct rt_bandwidth *, u64, u64);
130:	void init_rt_rq(struct rt_rq *);
2513:	void init_sched_rt_class(void);
3047:	void print_rt_stats(struct seq_file *, int);
2309:	void rto_push_irq_work_func(struct irq_work *);
716:	bool sched_rt_bandwidth_account(struct rt_rq *);
309:	void unregister_rt_sched_group(struct task_group *);
File kernel/sched/swait.c:
125:	void __finish_swait(struct swait_queue_head *, struct swait_queue *);
6:	void __init_swait_queue_head(struct swait_queue_head *, const char *, struct lock_class_key *);
84:	void __prepare_to_swait(struct swait_queue_head *, struct swait_queue *);
132:	void finish_swait(struct swait_queue_head *, struct swait_queue *);
102:	long prepare_to_swait_event(struct swait_queue_head *, struct swait_queue *, int);
91:	void prepare_to_swait_exclusive(struct swait_queue_head *, struct swait_queue *, int);
61:	void swake_up_all(struct swait_queue_head *);
41:	void swake_up_all_locked(struct swait_queue_head *);
21:	void swake_up_locked(struct swait_queue_head *);
47:	void swake_up_one(struct swait_queue_head *);
File kernel/sched/topology.c:
2425:	cpumask_var_t *alloc_sched_domains(unsigned int);
1718:	bool find_numa_distance(int);
2442:	void free_sched_domains(cpumask_var_t *, unsigned int);
786:	int group_balance_cpu(struct sched_group *);
581:	void init_defrootdomain(void);
2641:	void partition_sched_domains(int, cpumask_var_t *, struct sched_domain_attr *);
2535:	void partition_sched_domains_locked(int, cpumask_var_t *, struct sched_domain_attr *);
485:	void rq_attach_root(struct rq *, struct root_domain *);
2026:	void sched_domains_numa_masks_clear(unsigned int);
2009:	void sched_domains_numa_masks_set(unsigned int);
522:	void sched_get_rd(struct root_domain *);
2454:	int sched_init_domains(const struct cpumask *);
1806:	void sched_init_numa(int);
2046:	int sched_numa_find_closest(const struct cpumask *, int);
527:	void sched_put_rd(struct root_domain *);
1993:	void sched_update_numa(int, bool);
1677:	void set_sched_topology(struct sched_domain_topology_level *);
2420:	int topology_update_cpu_topology(void);
File kernel/sched/wait.c:
8:	void __init_waitqueue_head(struct wait_queue_head *, const char *, struct lock_class_key *);
157:	int __wake_up(struct wait_queue_head *, unsigned int, int, void *);
167:	void __wake_up_locked(struct wait_queue_head *, unsigned int, int);
173:	void __wake_up_locked_key(struct wait_queue_head *, unsigned int, void *);
179:	void __wake_up_locked_key_bookmark(struct wait_queue_head *, unsigned int, void *, wait_queue_entry_t *);
228:	void __wake_up_locked_sync_key(struct wait_queue_head *, unsigned int, void *);
244:	void __wake_up_pollfree(struct wait_queue_head *);
238:	void __wake_up_sync(struct wait_queue_head *, unsigned int);
202:	void __wake_up_sync_key(struct wait_queue_head *, unsigned int, void *);
17:	void add_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
28:	void add_wait_queue_exclusive(struct wait_queue_head *, struct wait_queue_entry *);
39:	void add_wait_queue_priority(struct wait_queue_head *, struct wait_queue_entry *);
417:	int autoremove_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
348:	int do_wait_intr(wait_queue_head_t *, wait_queue_entry_t *);
365:	int do_wait_intr_irq(wait_queue_head_t *, wait_queue_entry_t *);
391:	void finish_wait(struct wait_queue_head *, struct wait_queue_entry *);
296:	void init_wait_entry(struct wait_queue_entry *, int);
264:	void prepare_to_wait(struct wait_queue_head *, struct wait_queue_entry *, int);
305:	long prepare_to_wait_event(struct wait_queue_head *, struct wait_queue_entry *, int);
279:	bool prepare_to_wait_exclusive(struct wait_queue_head *, struct wait_queue_entry *, int);
50:	void remove_wait_queue(struct wait_queue_head *, struct wait_queue_entry *);
453:	long wait_woken(struct wait_queue_entry *, unsigned int, long);
478:	int woken_wake_function(struct wait_queue_entry *, unsigned int, int, void *);
File kernel/sched/wait_bit.c:
153:	wait_queue_head_t *__var_waitqueue(void *);
41:	int __wait_on_bit(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
82:	int __wait_on_bit_lock(struct wait_queue_head *, struct wait_bit_queue_entry *, wait_bit_action_f *, unsigned int);
121:	void __wake_up_bit(struct wait_queue_head *, void *, int);
197:	int bit_wait(struct wait_bit_key *, int);
207:	int bit_wait_io(struct wait_bit_key *, int);
231:	int bit_wait_io_timeout(struct wait_bit_key *, int);
217:	int bit_wait_timeout(struct wait_bit_key *, int);
12:	struct wait_queue_head *bit_waitqueue(void *, int);
174:	void init_wait_var_entry(struct wait_bit_queue_entry *, void *, int);
58:	int out_of_line_wait_on_bit(void *, int, wait_bit_action_f *, unsigned int);
111:	int out_of_line_wait_on_bit_lock(void *, int, wait_bit_action_f *, unsigned int);
68:	int out_of_line_wait_on_bit_timeout(void *, int, wait_bit_action_f *, unsigned int, unsigned long);
245:	void wait_bit_init(void);
21:	int wake_bit_function(struct wait_queue_entry *, unsigned int, int, void *);
147:	void wake_up_bit(void *, int);
191:	void wake_up_var(void *);
File kernel/signal.c:
3772:	long __arm64_sys_kill(const struct pt_regs *);
3847:	long __arm64_sys_pidfd_send_signal(const struct pt_regs *);
2999:	long __arm64_sys_restart_syscall(const struct pt_regs *);
4411:	long __arm64_sys_rt_sigaction(const struct pt_regs *);
3214:	long __arm64_sys_rt_sigpending(const struct pt_regs *);
3142:	long __arm64_sys_rt_sigprocmask(const struct pt_regs *);
3997:	long __arm64_sys_rt_sigqueueinfo(const struct pt_regs *);
4634:	long __arm64_sys_rt_sigsuspend(const struct pt_regs *);
3628:	long __arm64_sys_rt_sigtimedwait(const struct pt_regs *);
4037:	long __arm64_sys_rt_tgsigqueueinfo(const struct pt_regs *);
4228:	long __arm64_sys_sigaltstack(const struct pt_regs *);
3953:	long __arm64_sys_tgkill(const struct pt_regs *);
3969:	long __arm64_sys_tkill(const struct pt_regs *);
1454:	int __kill_pgrp_info(int, struct kernel_siginfo *, struct pid *);
1384:	struct sighand_struct *__lock_task_sighand(struct task_struct *, unsigned long *);
4253:	int __save_altstack(stack_t *, unsigned long);
3035:	void __set_current_blocked(const sigset_t *);
4679:	const char *arch_vma_name(struct vm_area_struct *);
190:	void calculate_sigpending(void);
3366:	int copy_siginfo_from_user(kernel_siginfo_t *, const siginfo_t *);
3324:	int copy_siginfo_to_user(siginfo_t *, const kernel_siginfo_t *);
629:	int dequeue_signal(struct task_struct *, sigset_t *, kernel_siginfo_t *, enum pid_type *);
3005:	long do_no_restart_syscall(struct restart_block *);
2025:	bool do_notify_parent(struct task_struct *, int);
1289:	int do_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
4088:	int do_sigaction(int, struct k_sigaction *, struct k_sigaction *);
2942:	void exit_signals(struct task_struct *);
512:	void flush_itimer_signals(void);
539:	void flush_signal_handlers(struct task_struct *, int);
476:	void flush_signals(struct task_struct *);
461:	void flush_sigqueue(struct sigpending *);
1677:	void force_exit_sig(int);
1664:	void force_fatal_sig(int);
1650:	void force_sig(int);
1778:	int force_sig_bnderr(void *, void *, void *);
1723:	int force_sig_fault(int, int, void *);
1704:	int force_sig_fault_to_task(int, int, void *, struct task_struct *);
1874:	int force_sig_fault_trapno(int, int, void *, int);
1355:	int force_sig_info(struct kernel_siginfo *);
1749:	int force_sig_mceerr(int, void *, short);
1793:	int force_sig_pkuerr(void *, u32);
1859:	int force_sig_ptrace_errno_trap(int, void *);
1841:	int force_sig_seccomp(int, int, bool);
1696:	void force_sigsegv(int);
2627:	bool get_signal(struct ksignal *);
1434:	int group_send_sig_info(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
524:	void ignore_signals(struct task_struct *);
4065:	void kernel_sigaction(int, __sighandler_t);
1904:	int kill_pgrp(struct pid *, int, int);
1916:	int kill_pid(struct pid *, int, int);
1469:	int kill_pid_info(int, struct kernel_siginfo *, struct pid *);
1536:	int kill_pid_usb_asyncio(int, int, sigval_t, struct pid *, const struct cred *);
207:	int next_signal(struct sigpending *, sigset_t *);
2348:	int ptrace_notify(int, unsigned long);
182:	void recalc_sigpending(void);
176:	void recalc_sigpending_and_wake(struct task_struct *);
4242:	int restore_altstack(const stack_t *);
1644:	int send_sig(int, struct task_struct *, int);
1730:	int send_sig_fault(int, int, void *, struct task_struct *);
1890:	int send_sig_fault_trapno(int, int, void *, int, struct task_struct *);
1627:	int send_sig_info(int, struct kernel_siginfo *, struct task_struct *);
1763:	int send_sig_mceerr(int, void *, short, struct task_struct *);
1807:	int send_sig_perf(void *, u32, u64);
1220:	int send_signal_locked(int, struct kernel_siginfo *, struct task_struct *, enum pid_type);
1961:	int send_sigqueue(struct sigqueue *, struct pid *, enum pid_type);
3029:	void set_current_blocked(sigset_t *);
3096:	int set_user_sigmask(const sigset_t *, size_t);
4083:	void sigaction_compat_abi(struct k_sigaction *, struct k_sigaction *);
3279:	enum siginfo_layout siginfo_layout(unsigned int, int);
2902:	void signal_setup_done(int, struct ksignal *, int);
763:	void signal_wake_up_state(struct task_struct *, unsigned int);
4757:	void signals_init(void);
3059:	int sigprocmask(int, sigset_t *, sigset_t *);
1931:	struct sigqueue *sigqueue_alloc(void);
1936:	void sigqueue_free(struct sigqueue *);
336:	void task_clear_jobctl_pending(struct task_struct *, unsigned long);
312:	void task_clear_jobctl_trapping(struct task_struct *);
391:	void task_join_group_stop(struct task_struct *);
284:	bool task_set_jobctl_pending(struct task_struct *, unsigned long);
555:	bool unhandled_signal(struct task_struct *, int);
1363:	int zap_other_threads(struct task_struct *);
File kernel/smp.c:
471:	void __smp_call_single_queue(int, struct llist_node *);
1054:	void arch_disable_smp_support(void);
149:	void call_function_init(void);
699:	void flush_smp_call_function_queue(void);
542:	void generic_smp_call_function_single_interrupt(void);
1175:	void kick_all_cpus_sync(void);
1146:	void on_each_cpu_cond_mask(smp_cond_func_t, smp_call_func_t, void *, bool, const struct cpumask *);
1097:	void setup_nr_cpu_ids(void);
1030:	void smp_call_function(smp_call_func_t, void *, int);
844:	int smp_call_function_any(const struct cpumask *, smp_call_func_t, void *, int);
1008:	void smp_call_function_many(const struct cpumask *, smp_call_func_t, void *, bool);
727:	int smp_call_function_single(int, smp_call_func_t, void *, int);
807:	int smp_call_function_single_async(int, struct __call_single_data *);
1238:	int smp_call_on_cpu(unsigned int, int (*)(void *), void *, bool);
1103:	void smp_init(void);
123:	int smpcfd_dead_cpu(unsigned int);
133:	int smpcfd_dying_cpu(unsigned int);
101:	int smpcfd_prepare_cpu(unsigned int);
1189:	void wake_up_all_idle_cpus(void);
File kernel/smpboot.c:
352:	int cpu_check_up_prepare(int);
473:	bool cpu_report_death(void);
335:	int cpu_report_state(int);
415:	void cpu_set_state_online(int);
425:	bool cpu_wait_death(unsigned int, int);
30:	struct task_struct *idle_thread_get(unsigned int);
39:	void idle_thread_set_boot_cpu(void);
66:	void idle_threads_init(void);
213:	int smpboot_create_threads(unsigned int);
255:	int smpboot_park_threads(unsigned int);
289:	int smpboot_register_percpu_thread(struct smp_hotplug_thread *);
236:	int smpboot_unpark_threads(unsigned int);
318:	void smpboot_unregister_percpu_thread(struct smp_hotplug_thread *);
File kernel/softirq.c:
528:	void __do_softirq(void);
373:	void __local_bh_enable_ip(unsigned long, unsigned int);
709:	void __raise_softirq_irqoff(unsigned int);
755:	void __tasklet_hi_schedule(struct tasklet_struct *);
748:	void __tasklet_schedule(struct tasklet_struct *);
366:	void _local_bh_enable(void);
1009:	unsigned int arch_dynirq_lower_bound(unsigned int);
1004:	int arch_early_irq_init(void);
999:	int arch_probe_nr_irqs(void);
459:	void do_softirq(void);
994:	int early_irq_init(void);
621:	void irq_enter(void);
607:	void irq_enter_rcu(void);
672:	void irq_exit(void);
660:	void irq_exit_rcu(void);
716:	void open_softirq(int, void (*)(struct softirq_action *));
700:	void raise_softirq(unsigned int);
683:	void raise_softirq_irqoff(unsigned int);
906:	void softirq_init(void);
838:	void tasklet_init(struct tasklet_struct *, void (*)(unsigned long), unsigned long);
876:	void tasklet_kill(struct tasklet_struct *);
826:	void tasklet_setup(struct tasklet_struct *, void (*)(struct tasklet_struct *));
890:	void tasklet_unlock(struct tasklet_struct *);
855:	void tasklet_unlock_spin_wait(struct tasklet_struct *);
899:	void tasklet_unlock_wait(struct tasklet_struct *);
File kernel/stacktrace.c:
390:	unsigned int filter_irq_stacks(unsigned long *, unsigned int);
24:	void stack_trace_print(const unsigned long *, unsigned int, int);
112:	unsigned int stack_trace_save(unsigned long *, unsigned int, unsigned int);
164:	unsigned int stack_trace_save_regs(struct pt_regs *, unsigned long *, unsigned int, unsigned int);
136:	unsigned int stack_trace_save_tsk(struct task_struct *, unsigned long *, unsigned int, unsigned int);
47:	int stack_trace_snprint(char *, size_t, const unsigned long *, unsigned int, int);
File kernel/stop_machine.c:
52:	void print_stop_info(const char *, struct task_struct *);
635:	int stop_core_cpuslocked(unsigned int, cpu_stop_fn_t, void *);
622:	int stop_machine(cpu_stop_fn_t, void *, const struct cpumask *);
586:	int stop_machine_cpuslocked(cpu_stop_fn_t, void *, const struct cpumask *);
677:	int stop_machine_from_inactive_cpu(cpu_stop_fn_t, void *, const struct cpumask *);
526:	void stop_machine_park(int);
550:	void stop_machine_unpark(int);
197:	void stop_machine_yield(const struct cpumask *);
139:	int stop_one_cpu(unsigned int, cpu_stop_fn_t, void *);
384:	bool stop_one_cpu_nowait(unsigned int, cpu_stop_fn_t, void *, struct cpu_stop_work *);
334:	int stop_two_cpus(unsigned int, unsigned int, cpu_stop_fn_t, void *);
File kernel/sys.c:
2638:	long __arm64_sys_getcpu(const struct pt_regs *);
986:	long __arm64_sys_getegid(const struct pt_regs *);
974:	long __arm64_sys_geteuid(const struct pt_regs *);
980:	long __arm64_sys_getgid(const struct pt_regs *);
1154:	long __arm64_sys_getpgid(const struct pt_regs *);
940:	long __arm64_sys_getpid(const struct pt_regs *);
957:	long __arm64_sys_getppid(const struct pt_regs *);
281:	long __arm64_sys_getpriority(const struct pt_regs *);
818:	long __arm64_sys_getresgid(const struct pt_regs *);
735:	long __arm64_sys_getresuid(const struct pt_regs *);
1500:	long __arm64_sys_getrlimit(const struct pt_regs *);
1840:	long __arm64_sys_getrusage(const struct pt_regs *);
1168:	long __arm64_sys_getsid(const struct pt_regs *);
946:	long __arm64_sys_gettid(const struct pt_regs *);
968:	long __arm64_sys_getuid(const struct pt_regs *);
1288:	long __arm64_sys_newuname(const struct pt_regs *);
2353:	long __arm64_sys_prctl(const struct pt_regs *);
1666:	long __arm64_sys_prlimit64(const struct pt_regs *);
1410:	long __arm64_sys_setdomainname(const struct pt_regs *);
925:	long __arm64_sys_setfsgid(const struct pt_regs *);
881:	long __arm64_sys_setfsuid(const struct pt_regs *);
467:	long __arm64_sys_setgid(const struct pt_regs *);
1356:	long __arm64_sys_sethostname(const struct pt_regs *);
1055:	long __arm64_sys_setpgid(const struct pt_regs *);
211:	long __arm64_sys_setpriority(const struct pt_regs *);
421:	long __arm64_sys_setregid(const struct pt_regs *);
813:	long __arm64_sys_setresgid(const struct pt_regs *);
730:	long __arm64_sys_setresuid(const struct pt_regs *);
587:	long __arm64_sys_setreuid(const struct pt_regs *);
1713:	long __arm64_sys_setrlimit(const struct pt_regs *);
1240:	long __arm64_sys_setsid(const struct pt_regs *);
650:	long __arm64_sys_setuid(const struct pt_regs *);
2718:	long __arm64_sys_sysinfo(const struct pt_regs *);
1005:	long __arm64_sys_times(const struct pt_regs *);
1866:	long __arm64_sys_umask(const struct pt_regs *);
889:	long __sys_setfsgid(gid_t);
845:	long __sys_setfsuid(uid_t);
431:	long __sys_setgid(gid_t);
365:	long __sys_setregid(gid_t, gid_t);
757:	long __sys_setresgid(gid_t, gid_t, gid_t);
660:	long __sys_setresuid(uid_t, uid_t, uid_t);
522:	long __sys_setreuid(uid_t, uid_t);
603:	long __sys_setuid(uid_t);
2276:	int arch_prctl_spec_ctrl_get(struct task_struct *, unsigned long);
2281:	int arch_prctl_spec_ctrl_set(struct task_struct *, unsigned long, unsigned long);
1765:	void getrusage(struct task_struct *, int, struct rusage *);
1207:	int ksys_setsid(void);
File kernel/sys_ni.c:
243:	long __arm64_sys_accept(const struct pt_regs *);
304:	long __arm64_sys_accept4(const struct pt_regs *);
132:	long __arm64_sys_acct(const struct pt_regs *);
266:	long __arm64_sys_add_key(const struct pt_regs *);
424:	long __arm64_sys_adjtimex_time32(const struct pt_regs *);
241:	long __arm64_sys_bind(const struct pt_regs *);
341:	long __arm64_sys_bpf(const struct pt_regs *);
135:	long __arm64_sys_capget(const struct pt_regs *);
136:	long __arm64_sys_capset(const struct pt_regs *);
460:	long __arm64_sys_chown16(const struct pt_regs *);
442:	long __arm64_sys_clock_adjtime32(const struct pt_regs *);
433:	long __arm64_sys_clock_getres_time32(const struct pt_regs *);
432:	long __arm64_sys_clock_gettime32(const struct pt_regs *);
434:	long __arm64_sys_clock_nanosleep_time32(const struct pt_regs *);
431:	long __arm64_sys_clock_settime32(const struct pt_regs *);
144:	long __arm64_sys_clone3(const struct pt_regs *);
244:	long __arm64_sys_connect(const struct pt_regs *);
353:	long __arm64_sys_copy_file_range(const struct pt_regs *);
165:	long __arm64_sys_delete_module(const struct pt_regs *);
404:	long __arm64_sys_epoll_create(const struct pt_regs *);
67:	long __arm64_sys_epoll_create1(const struct pt_regs *);
68:	long __arm64_sys_epoll_ctl(const struct pt_regs *);
69:	long __arm64_sys_epoll_pwait(const struct pt_regs *);
71:	long __arm64_sys_epoll_pwait2(const struct pt_regs *);
414:	long __arm64_sys_epoll_wait(const struct pt_regs *);
406:	long __arm64_sys_eventfd(const struct pt_regs *);
64:	long __arm64_sys_eventfd2(const struct pt_regs *);
344:	long __arm64_sys_execveat(const struct pt_regs *);
411:	long __arm64_sys_fadvise64(const struct pt_regs *);
279:	long __arm64_sys_fadvise64_64(const struct pt_regs *);
315:	long __arm64_sys_fanotify_init(const struct pt_regs *);
316:	long __arm64_sys_fanotify_mark(const struct pt_regs *);
461:	long __arm64_sys_fchown16(const struct pt_regs *);
333:	long __arm64_sys_finit_module(const struct pt_regs *);
88:	long __arm64_sys_flock(const struct pt_regs *);
147:	long __arm64_sys_futex(const struct pt_regs *);
148:	long __arm64_sys_futex_time32(const struct pt_regs *);
153:	long __arm64_sys_futex_waitv(const struct pt_regs *);
436:	long __arm64_sys_futimesat_time32(const struct pt_regs *);
297:	long __arm64_sys_get_mempolicy(const struct pt_regs *);
151:	long __arm64_sys_get_robust_list(const struct pt_regs *);
462:	long __arm64_sys_getegid16(const struct pt_regs *);
463:	long __arm64_sys_geteuid16(const struct pt_regs *);
464:	long __arm64_sys_getgid16(const struct pt_regs *);
188:	long __arm64_sys_getgroups(const struct pt_regs *);
465:	long __arm64_sys_getgroups16(const struct pt_regs *);
246:	long __arm64_sys_getpeername(const struct pt_regs *);
184:	long __arm64_sys_getresgid(const struct pt_regs *);
466:	long __arm64_sys_getresgid16(const struct pt_regs *);
182:	long __arm64_sys_getresuid(const struct pt_regs *);
467:	long __arm64_sys_getresuid16(const struct pt_regs *);
245:	long __arm64_sys_getsockname(const struct pt_regs *);
249:	long __arm64_sys_getsockopt(const struct pt_regs *);
468:	long __arm64_sys_getuid16(const struct pt_regs *);
164:	long __arm64_sys_init_module(const struct pt_regs *);
78:	long __arm64_sys_inotify_add_watch(const struct pt_regs *);
405:	long __arm64_sys_inotify_init(const struct pt_regs *);
77:	long __arm64_sys_inotify_init1(const struct pt_regs *);
79:	long __arm64_sys_inotify_rm_watch(const struct pt_regs *);
44:	long __arm64_sys_io_cancel(const struct pt_regs *);
41:	long __arm64_sys_io_destroy(const struct pt_regs *);
46:	long __arm64_sys_io_getevents(const struct pt_regs *);
45:	long __arm64_sys_io_getevents_time32(const struct pt_regs *);
48:	long __arm64_sys_io_pgetevents(const struct pt_regs *);
47:	long __arm64_sys_io_pgetevents_time32(const struct pt_regs *);
39:	long __arm64_sys_io_setup(const struct pt_regs *);
42:	long __arm64_sys_io_submit(const struct pt_regs *);
52:	long __arm64_sys_io_uring_enter(const struct pt_regs *);
53:	long __arm64_sys_io_uring_register(const struct pt_regs *);
51:	long __arm64_sys_io_uring_setup(const struct pt_regs *);
85:	long __arm64_sys_ioprio_get(const struct pt_regs *);
84:	long __arm64_sys_ioprio_set(const struct pt_regs *);
456:	long __arm64_sys_ipc(const struct pt_regs *);
331:	long __arm64_sys_kcmp(const struct pt_regs *);
383:	long __arm64_sys_kexec_file_load(const struct pt_regs *);
160:	long __arm64_sys_kexec_load(const struct pt_regs *);
268:	long __arm64_sys_keyctl(const struct pt_regs *);
273:	long __arm64_sys_landlock_add_rule(const struct pt_regs *);
272:	long __arm64_sys_landlock_create_ruleset(const struct pt_regs *);
274:	long __arm64_sys_landlock_restrict_self(const struct pt_regs *);
469:	long __arm64_sys_lchown16(const struct pt_regs *);
242:	long __arm64_sys_listen(const struct pt_regs *);
60:	long __arm64_sys_lookup_dcookie(const struct pt_regs *);
292:	long __arm64_sys_madvise(const struct pt_regs *);
296:	long __arm64_sys_mbind(const struct pt_regs *);
349:	long __arm64_sys_membarrier(const struct pt_regs *);
338:	long __arm64_sys_memfd_create(const struct pt_regs *);
361:	long __arm64_sys_memfd_secret(const struct pt_regs *);
299:	long __arm64_sys_migrate_pages(const struct pt_regs *);
291:	long __arm64_sys_mincore(const struct pt_regs *);
287:	long __arm64_sys_mlock(const struct pt_regs *);
351:	long __arm64_sys_mlock2(const struct pt_regs *);
289:	long __arm64_sys_mlockall(const struct pt_regs *);
381:	long __arm64_sys_modify_ldt(const struct pt_regs *);
300:	long __arm64_sys_move_pages(const struct pt_regs *);
285:	long __arm64_sys_mprotect(const struct pt_regs *);
204:	long __arm64_sys_mq_getsetattr(const struct pt_regs *);
202:	long __arm64_sys_mq_notify(const struct pt_regs *);
195:	long __arm64_sys_mq_open(const struct pt_regs *);
200:	long __arm64_sys_mq_timedreceive(const struct pt_regs *);
201:	long __arm64_sys_mq_timedreceive_time32(const struct pt_regs *);
198:	long __arm64_sys_mq_timedsend(const struct pt_regs *);
199:	long __arm64_sys_mq_timedsend_time32(const struct pt_regs *);
197:	long __arm64_sys_mq_unlink(const struct pt_regs *);
263:	long __arm64_sys_mremap(const struct pt_regs *);
210:	long __arm64_sys_msgctl(const struct pt_regs *);
208:	long __arm64_sys_msgget(const struct pt_regs *);
213:	long __arm64_sys_msgrcv(const struct pt_regs *);
215:	long __arm64_sys_msgsnd(const struct pt_regs *);
286:	long __arm64_sys_msync(const struct pt_regs *);
288:	long __arm64_sys_munlock(const struct pt_regs *);
290:	long __arm64_sys_munlockall(const struct pt_regs *);
319:	long __arm64_sys_name_to_handle_at(const struct pt_regs *);
426:	long __arm64_sys_nanosleep_time32(const struct pt_regs *);
209:	long __arm64_sys_old_msgctl(const struct pt_regs *);
220:	long __arm64_sys_old_semctl(const struct pt_regs *);
230:	long __arm64_sys_old_shmctl(const struct pt_regs *);
320:	long __arm64_sys_open_by_handle_at(const struct pt_regs *);
370:	long __arm64_sys_pciconfig_iobase(const struct pt_regs *);
368:	long __arm64_sys_pciconfig_read(const struct pt_regs *);
369:	long __arm64_sys_pciconfig_write(const struct pt_regs *);
303:	long __arm64_sys_perf_event_open(const struct pt_regs *);
357:	long __arm64_sys_pkey_alloc(const struct pt_regs *);
358:	long __arm64_sys_pkey_free(const struct pt_regs *);
356:	long __arm64_sys_pkey_mprotect(const struct pt_regs *);
439:	long __arm64_sys_ppoll_time32(const struct pt_regs *);
293:	long __arm64_sys_process_madvise(const struct pt_regs *);
294:	long __arm64_sys_process_mrelease(const struct pt_regs *);
325:	long __arm64_sys_process_vm_readv(const struct pt_regs *);
327:	long __arm64_sys_process_vm_writev(const struct pt_regs *);
437:	long __arm64_sys_pselect6_time32(const struct pt_regs *);
101:	long __arm64_sys_quotactl(const struct pt_regs *);
102:	long __arm64_sys_quotactl_fd(const struct pt_regs *);
415:	long __arm64_sys_recv(const struct pt_regs *);
253:	long __arm64_sys_recvfrom(const struct pt_regs *);
305:	long __arm64_sys_recvmmsg(const struct pt_regs *);
306:	long __arm64_sys_recvmmsg_time32(const struct pt_regs *);
257:	long __arm64_sys_recvmsg(const struct pt_regs *);
295:	long __arm64_sys_remap_file_pages(const struct pt_regs *);
267:	long __arm64_sys_request_key(const struct pt_regs *);
481:	long __arm64_sys_rseq(const struct pt_regs *);
427:	long __arm64_sys_rt_sigtimedwait_time32(const struct pt_regs *);
392:	long __arm64_sys_rtas(const struct pt_regs *);
388:	long __arm64_sys_s390_ipc(const struct pt_regs *);
386:	long __arm64_sys_s390_pci_mmio_read(const struct pt_regs *);
387:	long __arm64_sys_s390_pci_mmio_write(const struct pt_regs *);
425:	long __arm64_sys_sched_rr_get_interval_time32(const struct pt_regs *);
336:	long __arm64_sys_seccomp(const struct pt_regs *);
221:	long __arm64_sys_semctl(const struct pt_regs *);
219:	long __arm64_sys_semget(const struct pt_regs *);
226:	long __arm64_sys_semop(const struct pt_regs *);
224:	long __arm64_sys_semtimedop(const struct pt_regs *);
225:	long __arm64_sys_semtimedop_time32(const struct pt_regs *);
417:	long __arm64_sys_send(const struct pt_regs *);
323:	long __arm64_sys_sendmmsg(const struct pt_regs *);
255:	long __arm64_sys_sendmsg(const struct pt_regs *);
251:	long __arm64_sys_sendto(const struct pt_regs *);
298:	long __arm64_sys_set_mempolicy(const struct pt_regs *);
301:	long __arm64_sys_set_mempolicy_home_node(const struct pt_regs *);
149:	long __arm64_sys_set_robust_list(const struct pt_regs *);
186:	long __arm64_sys_setfsgid(const struct pt_regs *);
470:	long __arm64_sys_setfsgid16(const struct pt_regs *);
185:	long __arm64_sys_setfsuid(const struct pt_regs *);
471:	long __arm64_sys_setfsuid16(const struct pt_regs *);
178:	long __arm64_sys_setgid(const struct pt_regs *);
472:	long __arm64_sys_setgid16(const struct pt_regs *);
187:	long __arm64_sys_setgroups(const struct pt_regs *);
473:	long __arm64_sys_setgroups16(const struct pt_regs *);
177:	long __arm64_sys_setregid(const struct pt_regs *);
474:	long __arm64_sys_setregid16(const struct pt_regs *);
183:	long __arm64_sys_setresgid(const struct pt_regs *);
475:	long __arm64_sys_setresgid16(const struct pt_regs *);
181:	long __arm64_sys_setresuid(const struct pt_regs *);
476:	long __arm64_sys_setresuid16(const struct pt_regs *);
179:	long __arm64_sys_setreuid(const struct pt_regs *);
477:	long __arm64_sys_setreuid16(const struct pt_regs *);
247:	long __arm64_sys_setsockopt(const struct pt_regs *);
180:	long __arm64_sys_setuid(const struct pt_regs *);
478:	long __arm64_sys_setuid16(const struct pt_regs *);
449:	long __arm64_sys_sgetmask(const struct pt_regs *);
234:	long __arm64_sys_shmat(const struct pt_regs *);
231:	long __arm64_sys_shmctl(const struct pt_regs *);
236:	long __arm64_sys_shmdt(const struct pt_regs *);
229:	long __arm64_sys_shmget(const struct pt_regs *);
252:	long __arm64_sys_shutdown(const struct pt_regs *);
407:	long __arm64_sys_signalfd(const struct pt_regs *);
113:	long __arm64_sys_signalfd4(const struct pt_regs *);
239:	long __arm64_sys_socket(const struct pt_regs *);
373:	long __arm64_sys_socketcall(const struct pt_regs *);
240:	long __arm64_sys_socketpair(const struct pt_regs *);
394:	long __arm64_sys_spu_create(const struct pt_regs *);
393:	long __arm64_sys_spu_run(const struct pt_regs *);
450:	long __arm64_sys_ssetmask(const struct pt_regs *);
422:	long __arm64_sys_stime32(const struct pt_regs *);
395:	long __arm64_sys_subpage_prot(const struct pt_regs *);
284:	long __arm64_sys_swapoff(const struct pt_regs *);
283:	long __arm64_sys_swapon(const struct pt_regs *);
453:	long __arm64_sys_sysfs(const struct pt_regs *);
170:	long __arm64_sys_syslog(const struct pt_regs *);
421:	long __arm64_sys_time32(const struct pt_regs *);
430:	long __arm64_sys_timer_gettime32(const struct pt_regs *);
429:	long __arm64_sys_timer_settime32(const struct pt_regs *);
123:	long __arm64_sys_timerfd_create(const struct pt_regs *);
126:	long __arm64_sys_timerfd_gettime(const struct pt_regs *);
127:	long __arm64_sys_timerfd_gettime32(const struct pt_regs *);
124:	long __arm64_sys_timerfd_settime(const struct pt_regs *);
125:	long __arm64_sys_timerfd_settime32(const struct pt_regs *);
418:	long __arm64_sys_uselib(const struct pt_regs *);
346:	long __arm64_sys_userfaultfd(const struct pt_regs *);
423:	long __arm64_sys_utime32(const struct pt_regs *);
441:	long __arm64_sys_utimensat_time32(const struct pt_regs *);
435:	long __arm64_sys_utimes_time32(const struct pt_regs *);
382:	long __arm64_sys_vm86(const struct pt_regs *);
380:	long __arm64_sys_vm86old(const struct pt_regs *);
20:	long sys_ni_syscall(void);
File kernel/sysctl.c:
694:	int do_proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *, int (*)(unsigned long *, unsigned int *, int, void *), void *);
1386:	int proc_do_large_bitmap(struct ctl_table *, int, void *, size_t *, loff_t *);
718:	int proc_dobool(struct ctl_table *, int, void *, size_t *, loff_t *);
738:	int proc_dointvec(struct ctl_table *, int, void *, size_t *, loff_t *);
1284:	int proc_dointvec_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
884:	int proc_dointvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1340:	int proc_dointvec_ms_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
1291:	int proc_dointvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1317:	int proc_dointvec_userhz_jiffies(struct ctl_table *, int, void *, size_t *, loff_t *);
260:	int proc_dostring(struct ctl_table *, int, void *, size_t *, loff_t *);
981:	int proc_dou8vec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
778:	int proc_douintvec(struct ctl_table *, int, void *, size_t *, loff_t *);
953:	int proc_douintvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1140:	int proc_doulongvec_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
1163:	int proc_doulongvec_ms_jiffies_minmax(struct ctl_table *, int, void *, size_t *, loff_t *);
2473:	int sysctl_init_bases(void);
File kernel/task_work.c:
42:	int task_work_add(struct task_struct *, struct callback_head *, enum task_work_notify_mode);
133:	struct callback_head *task_work_cancel(struct task_struct *, task_work_func_t);
86:	struct callback_head *task_work_cancel_match(struct task_struct *, bool (*)(struct callback_head *, void *), void *);
146:	void task_work_run(void);
File kernel/time/alarmtimer.c:
429:	int alarm_cancel(struct alarm *);
225:	ktime_t alarm_expires_remaining(const struct alarm *);
441:	u64 alarm_forward(struct alarm *, ktime_t, ktime_t);
473:	u64 alarm_forward_now(struct alarm *, ktime_t);
342:	void alarm_init(struct alarm *, enum alarmtimer_type, enum alarmtimer_restart (*)(struct alarm *, ktime_t));
385:	void alarm_restart(struct alarm *);
356:	void alarm_start(struct alarm *, ktime_t);
376:	void alarm_start_relative(struct alarm *, ktime_t);
405:	int alarm_try_to_cancel(struct alarm *);
File kernel/time/clockevents.c:
515:	int __clockevents_update_freq(struct clock_event_device *, u32);
85:	u64 clockevent_delta2ns(unsigned long, struct clock_event_device *);
504:	void clockevents_config_and_register(struct clock_event_device *, u32, unsigned long, unsigned long);
568:	void clockevents_exchange_device(struct clock_event_device *, struct clock_event_device *);
556:	void clockevents_handle_noop(struct clock_event_device *);
303:	int clockevents_program_event(struct clock_event_device *, ktime_t, bool);
443:	void clockevents_register_device(struct clock_event_device *);
602:	void clockevents_resume(void);
171:	void clockevents_shutdown(struct clock_event_device *);
590:	void clockevents_suspend(void);
147:	void clockevents_switch_state(struct clock_event_device *, enum clock_event_state);
181:	int clockevents_tick_resume(struct clock_event_device *);
428:	int clockevents_unbind_device(struct clock_event_device *, int);
540:	int clockevents_update_freq(struct clock_event_device *, u32);
632:	void tick_cleanup_dead_cpu(int);
620:	void tick_offline_cpu(unsigned int);
File kernel/time/clocksource.c:
1156:	int __clocksource_register_scale(struct clocksource *, u32, u32);
1069:	void __clocksource_update_freq_scale(struct clocksource *, u32, u32);
885:	u64 clocks_calc_max_nsecs(u32, u32, u32, u64, u64 *);
47:	void clocks_calc_mult_shift(u32 *, u32 *, u32, u32, u32);
1202:	void clocksource_change_rating(struct clocksource *, int);
675:	void clocksource_mark_unstable(struct clocksource *);
831:	void clocksource_resume(void);
744:	void clocksource_start_suspend_timing(struct clocksource *, u64);
782:	u64 clocksource_stop_suspend_timing(struct clocksource *, u64);
819:	void clocksource_suspend(void);
849:	void clocksource_touch_watchdog(void);
1260:	int clocksource_unregister(struct clocksource *);
1294:	ssize_t sysfs_get_uname(const char *, char *, size_t);
File kernel/time/hrtimer.c:
2118:	long __arm64_sys_nanosleep(const struct pt_regs *);
1457:	ktime_t __hrtimer_get_remaining(const struct hrtimer *, bool);
945:	void clock_was_set(unsigned int);
994:	void clock_was_set_delayed(void);
1604:	bool hrtimer_active(const struct hrtimer *);
1438:	int hrtimer_cancel(struct hrtimer *);
1037:	u64 hrtimer_forward(struct hrtimer *, ktime_t, ktime_t);
1479:	u64 hrtimer_get_next_event(void);
1589:	void hrtimer_init(struct hrtimer *, clockid_t, enum hrtimer_mode);
2007:	void hrtimer_init_sleeper(struct hrtimer_sleeper *, clockid_t, enum hrtimer_mode);
1781:	void hrtimer_interrupt(struct clock_event_device *);
2083:	long hrtimer_nanosleep(ktime_t, const enum hrtimer_mode, const clockid_t);
1502:	u64 hrtimer_next_event_without(const struct hrtimer *);
1894:	void hrtimer_run_queues(void);
1952:	void hrtimer_sleeper_start_expires(struct hrtimer_sleeper *, enum hrtimer_mode);
1280:	void hrtimer_start_range_ns(struct hrtimer *, ktime_t, u64, const enum hrtimer_mode);
1316:	int hrtimer_try_to_cancel(struct hrtimer *);
2217:	int hrtimers_dead_cpu(unsigned int);
2264:	void hrtimers_init(void);
2160:	int hrtimers_prepare_cpu(unsigned int);
1004:	void hrtimers_resume_local(void);
327:	ktime_t ktime_add_safe(const ktime_t, const ktime_t);
2016:	int nanosleep_copyout(struct restart_block *, struct timespec64 *);
2382:	int schedule_hrtimeout(ktime_t *, const enum hrtimer_mode);
2348:	int schedule_hrtimeout_range(ktime_t *, u64, const enum hrtimer_mode);
2278:	int schedule_hrtimeout_range_clock(ktime_t *, u64, const enum hrtimer_mode, clockid_t);
File kernel/time/itimer.c:
113:	long __arm64_sys_getitimer(const struct pt_regs *);
332:	long __arm64_sys_setitimer(const struct pt_regs *);
156:	enum hrtimer_restart it_real_fn(struct hrtimer *);
File kernel/time/jiffies.c:
71:	struct clocksource *clocksource_default_clock(void);
78:	int register_refined_jiffies(long);
File kernel/time/namespace.c:
133:	struct time_namespace *copy_time_ns(unsigned long, struct user_namespace *, struct time_namespace *);
23:	ktime_t do_timens_ktime_to_host(clockid_t, ktime_t, struct timens_offsets *);
195:	struct page *find_timens_vvar_page(struct vm_area_struct *);
247:	void free_time_ns(struct time_namespace *);
380:	int proc_timens_set_offset(struct file *, struct task_struct *, struct proc_timens_offset *, int);
365:	void proc_timens_show_offsets(struct task_struct *, struct seq_file *);
298:	void timens_commit(struct task_struct *, struct time_namespace *);
326:	void timens_on_fork(struct nsproxy *, struct task_struct *);
File kernel/time/ntp.c:
762:	int __do_adjtimex(struct __kernel_timex *, const struct timespec64 *, s32 *, struct audit_ntp_data *);
351:	void ntp_clear(void);
380:	ktime_t ntp_get_next_leap(void);
1092:	void ntp_init(void);
369:	u64 ntp_tick_length(void);
400:	int second_overflow(time64_t);
File kernel/time/posix-clock.c:
162:	int posix_clock_register(struct posix_clock *, struct device *);
182:	void posix_clock_unregister(struct posix_clock *);
File kernel/time/posix-cpu-timers.c:
1171:	void clear_posix_cputimers_work(struct task_struct *);
544:	void posix_cpu_timers_exit(struct task_struct *);
548:	void posix_cpu_timers_exit_group(struct task_struct *);
24:	void posix_cputimers_group_init(struct posix_cputimers *, u64);
1188:	void posix_cputimers_init_work(void);
1376:	void run_posix_cpu_timers(void);
1403:	void set_process_cpu_timer(struct task_struct *, unsigned int, u64 *, u64 *);
274:	void thread_group_sample_cputime(struct task_struct *, u64 *);
42:	int update_rlimit_cpu(struct task_struct *, unsigned long);
File kernel/time/posix-timers.c:
1121:	long __arm64_sys_clock_adjtime(const struct pt_regs *);
1138:	long __arm64_sys_clock_getres(const struct pt_regs *);
1091:	long __arm64_sys_clock_gettime(const struct pt_regs *);
1254:	long __arm64_sys_clock_nanosleep(const struct pt_regs *);
1076:	long __arm64_sys_clock_settime(const struct pt_regs *);
577:	long __arm64_sys_timer_create(const struct pt_regs *);
1004:	long __arm64_sys_timer_delete(const struct pt_regs *);
777:	long __arm64_sys_timer_getoverrun(const struct pt_regs *);
738:	long __arm64_sys_timer_gettime(const struct pt_regs *);
938:	long __arm64_sys_timer_settime(const struct pt_regs *);
983:	int common_timer_del(struct k_itimer *);
670:	void common_timer_get(struct k_itimer *, struct itimerspec64 *);
858:	int common_timer_set(struct k_itimer *, int, struct itimerspec64 *, struct itimerspec64 *);
1109:	int do_clock_adjtime(const clockid_t, struct __kernel_timex *);
1058:	void exit_itimers(struct task_struct *);
336:	int posix_timer_event(struct k_itimer *, int);
313:	void posixtimer_rearm(struct kernel_siginfo *);
File kernel/time/sched_clock.c:
227:	void generic_sched_clock_init(void);
83:	unsigned long long sched_clock(void);
72:	struct clock_read_data *sched_clock_read_begin(unsigned int *);
78:	int sched_clock_read_retry(unsigned int);
154:	void sched_clock_register(u64 (*)(void), int, unsigned long);
276:	void sched_clock_resume(void);
265:	int sched_clock_suspend(void);
File kernel/time/tick-broadcast-hrtimer.c:
106:	void tick_setup_hrtimer_broadcast(void);
File kernel/time/tick-broadcast.c:
958:	int __tick_broadcast_oneshot_control(enum tick_broadcast_state);
1082:	void hotplug_cpu__broadcast_tick_pull(int);
437:	void tick_broadcast_control(enum tick_broadcast_mode);
1145:	void tick_broadcast_init(void);
536:	void tick_broadcast_offline(unsigned int);
1118:	int tick_broadcast_oneshot_active(void);
1126:	bool tick_broadcast_oneshot_available(void);
1066:	void tick_broadcast_switch_to_oneshot(void);
213:	int tick_broadcast_update_freq(struct clock_event_device *, u32);
625:	int tick_check_broadcast_expired(void);
665:	void tick_check_oneshot_broadcast_this_cpu(void);
246:	int tick_device_uses_broadcast(struct clock_event_device *, int);
56:	struct tick_device *tick_get_broadcast_device(void);
61:	struct cpumask *tick_get_broadcast_mask(void);
613:	struct cpumask *tick_get_broadcast_oneshot_mask(void);
68:	const struct clock_event_device *tick_get_wakeup_device(int);
162:	void tick_install_broadcast_device(struct clock_event_device *, int);
208:	int tick_is_broadcast_device(struct clock_event_device *);
327:	int tick_receive_broadcast(void);
578:	void tick_resume_broadcast(void);
570:	bool tick_resume_check_broadcast(void);
514:	void tick_set_periodic_handler(struct clock_event_device *, int);
548:	void tick_suspend_broadcast(void);
File kernel/time/tick-common.c:
390:	int tick_broadcast_oneshot_control(enum tick_broadcast_state);
341:	void tick_check_new_device(struct clock_event_device *);
328:	bool tick_check_replacement(struct clock_event_device *, struct clock_event_device *);
63:	struct tick_device *tick_get_device(int);
107:	void tick_handle_periodic(struct clock_event_device *);
408:	void tick_handover_do_timer(void);
575:	void tick_init(void);
277:	void tick_install_replacement(struct clock_event_device *);
71:	int tick_is_oneshot_available(void);
505:	void tick_resume(void);
461:	void tick_resume_local(void);
152:	void tick_setup_periodic(struct clock_event_device *, int);
421:	void tick_shutdown(unsigned int);
491:	void tick_suspend(void);
447:	void tick_suspend_local(void);
File kernel/time/tick-oneshot.c:
124:	int tick_init_highres(void);
106:	int tick_oneshot_mode_active(void);
23:	int tick_program_event(ktime_t, int);
50:	void tick_resume_oneshot(void);
61:	void tick_setup_oneshot(struct clock_event_device *, void (*)(struct clock_event_device *), ktime_t);
73:	int tick_switch_to_oneshot(void (*)(struct clock_event_device *));
File kernel/time/tick-sched.c:
691:	u64 get_cpu_idle_time_us(int, u64 *);
732:	u64 get_cpu_iowait_time_us(int, u64 *);
1535:	void tick_cancel_sched_timer(int);
1577:	int tick_check_oneshot_change(int);
1551:	void tick_clock_notify(void);
41:	struct tick_sched *tick_get_tick_sched(int);
1452:	void tick_irq_enter(void);
1270:	unsigned long tick_nohz_get_idle_calls(void);
1258:	unsigned long tick_nohz_get_idle_calls_cpu(int);
1204:	ktime_t tick_nohz_get_next_hrtimer(void);
1219:	ktime_t tick_nohz_get_sleep_length(ktime_t *);
1147:	void tick_nohz_idle_enter(void);
1327:	void tick_nohz_idle_exit(void);
1186:	bool tick_nohz_idle_got_tick(void);
1299:	void tick_nohz_idle_restart_tick(void);
1132:	void tick_nohz_idle_retain_tick(void);
1127:	void tick_nohz_idle_stop_tick(void);
1173:	void tick_nohz_irq_exit(void);
603:	bool tick_nohz_tick_stopped(void);
610:	bool tick_nohz_tick_stopped_cpu(int);
1562:	void tick_oneshot_notify(void);
1506:	void tick_setup_sched_timer(void);
File kernel/time/time.c:
269:	long __arm64_sys_adjtimex(const struct pt_regs *);
140:	long __arm64_sys_gettimeofday(const struct pt_regs *);
199:	long __arm64_sys_settimeofday(const struct pt_regs *);
552:	unsigned long __msecs_to_jiffies(const unsigned int);
563:	unsigned long __usecs_to_jiffies(const unsigned int);
635:	unsigned long clock_t_to_jiffies(unsigned long);
169:	int do_sys_settimeofday64(const struct timespec64 *, const struct timezone *);
860:	int get_itimerspec64(struct itimerspec64 *, const struct __kernel_itimerspec *);
890:	int get_old_itimerspec32(struct itimerspec64 *, const struct old_itimerspec32 *);
842:	int get_old_timespec32(struct timespec64 *, const void *);
781:	int get_timespec64(struct timespec64 *, const struct __kernel_timespec *);
700:	u64 jiffies64_to_msecs(const u64);
690:	u64 jiffies64_to_nsecs(u64);
652:	u64 jiffies_64_to_clock_t(u64);
621:	clock_t jiffies_to_clock_t(unsigned long);
374:	unsigned int jiffies_to_msecs(const unsigned long);
605:	void jiffies_to_timespec64(const unsigned long, struct timespec64 *);
391:	unsigned int jiffies_to_usecs(const unsigned long);
431:	time64_t mktime64(const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int, const unsigned int);
452:	struct __kernel_old_timeval ns_to_kernel_old_timeval(s64);
506:	struct timespec64 ns_to_timespec64(s64);
674:	u64 nsec_to_clock_t(u64);
754:	unsigned long nsecs_to_jiffies(u64);
723:	u64 nsecs_to_jiffies64(u64);
875:	int put_itimerspec64(const struct itimerspec64 *, struct __kernel_itimerspec *);
901:	int put_old_itimerspec32(const struct itimerspec64 *, struct old_itimerspec32 *);
851:	int put_old_timespec32(const struct timespec64 *, void *);
804:	int put_timespec64(const struct timespec64 *, struct __kernel_timespec *);
478:	void set_normalized_timespec64(struct timespec64 *, time64_t, s64);
765:	struct timespec64 timespec64_add_safe(const struct timespec64, const struct timespec64);
588:	unsigned long timespec64_to_jiffies(const struct timespec64 *);
File kernel/time/timeconv.c:
47:	void time64_to_tm(time64_t, int, struct tm *);
File kernel/time/timecounter.c:
79:	u64 timecounter_cyc2time(const struct timecounter *, u64);
8:	void timecounter_init(struct timecounter *, const struct cyclecounter *, u64);
52:	u64 timecounter_read(struct timecounter *);
File kernel/time/timekeeping.c:
1044:	time64_t __ktime_get_real_seconds(void);
2422:	int do_adjtimex(struct __kernel_timex *);
1312:	int do_settimeofday64(const struct timespec64 *);
2289:	void do_timer(unsigned long);
1205:	int get_device_system_crosststamp(int (*)(ktime_t *, struct system_counterval_t *, void *), void *, struct system_time_snapshot *, struct system_device_crosststamp *);
2246:	void getboottime64(struct timespec64 *);
836:	ktime_t ktime_get(void);
532:	u64 ktime_get_boot_fast_ns(void);
2255:	void ktime_get_coarse_real_ts64(struct timespec64 *);
2268:	void ktime_get_coarse_ts64(struct timespec64 *);
900:	ktime_t ktime_get_coarse_with_offset(enum tk_offsets);
633:	void ktime_get_fast_timestamps(struct ktime_timestamps *);
490:	u64 ktime_get_mono_fast_ns(void);
943:	ktime_t ktime_get_raw(void);
502:	u64 ktime_get_raw_fast_ns(void);
1517:	void ktime_get_raw_ts64(struct timespec64 *);
581:	u64 ktime_get_real_fast_ns(void);
1020:	time64_t ktime_get_real_seconds(void);
815:	void ktime_get_real_ts64(struct timespec64 *);
856:	u32 ktime_get_resolution_ns(void);
1001:	time64_t ktime_get_seconds(void);
1055:	void ktime_get_snapshot(struct system_time_snapshot *);
549:	u64 ktime_get_tai_fast_ns(void);
969:	void ktime_get_ts64(struct timespec64 *);
2308:	ktime_t ktime_get_update_offsets_now(unsigned int *, ktime_t *, ktime_t *, ktime_t *);
879:	ktime_t ktime_get_with_offset(enum tk_offsets);
925:	ktime_t ktime_mono_to_any(ktime_t, enum tk_offsets);
679:	int pvclock_gtod_register_notifier(struct notifier_block *);
699:	int pvclock_gtod_unregister_notifier(struct notifier_block *);
2408:	unsigned long random_get_entropy_fallback(void);
1584:	void read_persistent_clock64(struct timespec64 *);
1604:	void read_persistent_wall_and_boot_offset(struct timespec64 *, struct timespec64 *);
1632:	void timekeeping_init(void);
1558:	u64 timekeeping_max_deferment(void);
1500:	int timekeeping_notify(struct clocksource *);
1777:	void timekeeping_resume(void);
1839:	int timekeeping_suspend(void);
1539:	int timekeeping_valid_for_hres(void);
1422:	void timekeeping_warp_clock(void);
2229:	void update_wall_time(void);
File kernel/time/timer.c:
358:	unsigned long __round_jiffies(unsigned long, int);
384:	unsigned long __round_jiffies_relative(unsigned long, int);
445:	unsigned long __round_jiffies_up(unsigned long, int);
461:	unsigned long __round_jiffies_up_relative(unsigned long, int);
1240:	void add_timer(struct timer_list *);
1257:	void add_timer_on(struct timer_list *, int);
1921:	u64 get_next_timer_interrupt(unsigned long, u64);
865:	void init_timer_key(struct timer_list *, void (*)(struct timer_list *), unsigned int, const char *, struct lock_class_key *);
2306:	void init_timers(void);
1188:	int mod_timer(struct timer_list *, unsigned long);
1155:	int mod_timer_pending(struct timer_list *, unsigned long);
2317:	void msleep(unsigned int);
2331:	unsigned long msleep_interruptible(unsigned int);
408:	unsigned long round_jiffies(unsigned long);
429:	unsigned long round_jiffies_relative(unsigned long);
479:	unsigned long round_jiffies_up(unsigned long);
494:	unsigned long round_jiffies_up_relative(unsigned long);
2128:	long schedule_timeout(long);
2209:	long schedule_timeout_idle(long);
2184:	long schedule_timeout_interruptible(long);
2191:	long schedule_timeout_killable(long);
2198:	long schedule_timeout_uninterruptible(long);
1977:	void timer_clear_idle(void);
1359:	int timer_delete(struct timer_list *);
1626:	int timer_delete_sync(struct timer_list *);
1214:	int timer_reduce(struct timer_list *, unsigned long);
1380:	int timer_shutdown(struct timer_list *);
1668:	int timer_shutdown_sync(struct timer_list *);
2246:	int timers_dead_cpu(unsigned int);
2230:	int timers_prepare_cpu(unsigned int);
285:	void timers_update_nohz(void);
1442:	int try_to_del_timer_sync(struct timer_list *);
2064:	void update_process_times(int);
2354:	void usleep_range_state(unsigned long, unsigned long, unsigned int);
File kernel/time/timer_list.c:
265:	void sysrq_timer_list_show(void);
File kernel/time/vsyscall.c:
72:	void update_vsyscall(struct timekeeper *);
123:	void update_vsyscall_tz(void);
145:	unsigned long vdso_update_begin(void);
163:	void vdso_update_end(unsigned long);
File kernel/trace/trace_clock.c:
57:	u64 trace_clock(void);
155:	u64 trace_clock_counter(void);
94:	u64 trace_clock_global(void);
70:	u64 trace_clock_jiffies(void);
32:	u64 trace_clock_local(void);
File kernel/ucount.c:
164:	struct ucounts *alloc_ucounts(struct user_namespace *, kuid_t);
305:	void dec_rlimit_put_ucounts(struct ucounts *, enum rlimit_type);
279:	bool dec_rlimit_ucounts(struct ucounts *, enum rlimit_type, long);
252:	void dec_ucount(struct ucounts *, enum ucount_type);
155:	struct ucounts *get_ucounts(struct ucounts *);
310:	long inc_rlimit_get_ucounts(struct ucounts *, enum rlimit_type);
262:	long inc_rlimit_ucounts(struct ucounts *, enum rlimit_type, long);
229:	struct ucounts *inc_ucount(struct user_namespace *, kuid_t, enum ucount_type);
342:	bool is_rlimit_overlimit(struct ucounts *, enum rlimit_type, unsigned long);
203:	void put_ucounts(struct ucounts *);
118:	void retire_userns_sysctls(struct user_namespace *);
94:	bool setup_userns_sysctls(struct user_namespace *);
File kernel/umh.c:
297:	int __usermodehelper_disable(enum umh_disable_depth);
283:	void __usermodehelper_set_disable_depth(enum umh_disable_depth);
480:	int call_usermodehelper(const char *, char **, char **, int);
405:	int call_usermodehelper_exec(struct subprocess_info *, int);
359:	struct subprocess_info *call_usermodehelper_setup(const char *, char **, char **, gfp_t, int (*)(struct subprocess_info *, struct cred *), void (*)(struct subprocess_info *), void *);
243:	long usermodehelper_read_lock_wait(long);
213:	int usermodehelper_read_trylock(void);
270:	void usermodehelper_read_unlock(void);
File kernel/user.c:
190:	struct user_struct *alloc_uid(kuid_t);
167:	struct user_struct *find_user(kuid_t);
178:	void free_uid(struct user_struct *);
File kernel/user_namespace.c:
225:	void __put_user_ns(struct user_namespace *);
82:	int create_user_ns(struct cred *);
1309:	bool current_in_userns(const struct user_namespace *);
495:	gid_t from_kgid(struct user_namespace *, kgid_t);
519:	gid_t from_kgid_munged(struct user_namespace *, kgid_t);
562:	projid_t from_kprojid(struct user_namespace *, kprojid_t);
587:	projid_t from_kprojid_munged(struct user_namespace *, kprojid_t);
427:	uid_t from_kuid(struct user_namespace *, kuid_t);
452:	uid_t from_kuid_munged(struct user_namespace *, kuid_t);
1300:	bool in_userns(const struct user_namespace *, const struct user_namespace *);
476:	kgid_t make_kgid(struct user_namespace *, gid_t);
543:	kprojid_t make_kprojid(struct user_namespace *, projid_t);
408:	kuid_t make_kuid(struct user_namespace *, uid_t);
1370:	struct ns_common *ns_get_owner(struct ns_common *);
1125:	ssize_t proc_gid_map_write(struct file *, const char *, size_t, loff_t *);
1142:	ssize_t proc_projid_map_write(struct file *, const char *, size_t, loff_t *);
1202:	int proc_setgroups_show(struct seq_file *, void *);
1213:	ssize_t proc_setgroups_write(struct file *, const char *, size_t, loff_t *);
1108:	ssize_t proc_uid_map_write(struct file *, const char *, size_t, loff_t *);
176:	int unshare_userns(unsigned long, struct cred **);
1280:	bool userns_may_setgroups(const struct user_namespace *);
File kernel/utsname.c:
89:	struct uts_namespace *copy_utsname(unsigned long, struct user_namespace *, struct uts_namespace *);
106:	void free_uts_ns(struct uts_namespace *);
169:	void uts_ns_init(void);
File kernel/utsname_sysctl.c:
140:	void uts_proc_notify(enum uts_proc);
File kernel/workqueue.c:
2797:	void __flush_workqueue(struct workqueue_struct *);
6130:	void __warn_flushing_systemwide_wq(void);
4287:	struct workqueue_struct *alloc_workqueue(const char *, unsigned int, int, ...);
3390:	struct workqueue_attrs *alloc_workqueue_attrs(void);
4104:	int apply_workqueue_attrs(struct workqueue_struct *, const struct workqueue_attrs *);
3284:	bool cancel_delayed_work(struct delayed_work *);
3299:	bool cancel_delayed_work_sync(struct delayed_work *);
3262:	bool cancel_work(struct work_struct *);
3194:	bool cancel_work_sync(struct work_struct *);
4549:	bool current_is_workqueue_rescuer(void);
4533:	struct work_struct *current_work(void);
1638:	void delayed_work_timer_fn(struct timer_list *);
4406:	void destroy_workqueue(struct workqueue_struct *);
2959:	void drain_workqueue(struct workqueue_struct *);
3354:	int execute_in_process_context(work_func_t, struct execute_work *);
3212:	bool flush_delayed_work(struct delayed_work *);
3230:	bool flush_rcu_work(struct rcu_work *);
3092:	bool flush_work(struct work_struct *);
3374:	void free_workqueue_attrs(struct workqueue_attrs *);
5237:	void freeze_workqueues_begin(void);
5270:	bool freeze_workqueues_busy(void);
1728:	bool mod_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
4668:	void print_worker_info(const char *, struct task_struct *);
1690:	bool queue_delayed_work_on(int, struct workqueue_struct *, struct delayed_work *, unsigned long);
1768:	bool queue_rcu_work(struct workqueue_struct *, struct rcu_work *);
1607:	bool queue_work_node(int, struct workqueue_struct *, struct work_struct *);
1536:	bool queue_work_on(int, struct workqueue_struct *, struct work_struct *);
3316:	int schedule_on_each_cpu(work_func_t);
4642:	void set_worker_desc(const char *, ...);
4893:	void show_all_workqueues(void);
4802:	void show_one_workqueue(struct workqueue_struct *);
5312:	void thaw_workqueues(void);
4609:	unsigned int work_busy(struct work_struct *);
5189:	long work_on_cpu(int, long (*)(void *), void *);
5212:	long work_on_cpu_safe(int, long (*)(void *), void *);
4574:	bool workqueue_congested(int, struct workqueue_struct *);
6076:	void workqueue_init(void);
5998:	void workqueue_init_early(void);
5145:	int workqueue_offline_cpu(unsigned int);
5118:	int workqueue_online_cpu(unsigned int);
5105:	int workqueue_prepare_cpu(unsigned int);
4503:	void workqueue_set_max_active(struct workqueue_struct *, int);
5383:	int workqueue_set_unbound_cpumask(struct cpumask *);
5723:	int workqueue_sysfs_register(struct workqueue_struct *);
4913:	void wq_worker_comm(char *, size_t, struct task_struct *);
954:	work_func_t wq_worker_last_func(struct task_struct *);
865:	void wq_worker_running(struct task_struct *);
892:	void wq_worker_sleeping(struct task_struct *);
File lib/../scripts/dtc/libfdt/fdt.c:
89:	int fdt_check_header(const void *);
223:	int fdt_check_node_offset_(const void *, int);
235:	int fdt_check_prop_offset_(const void *, int);
315:	const char *fdt_find_string_(const char *, int, const char *);
287:	int fdt_first_subnode(const void *, int);
83:	size_t fdt_header_size(const void *);
69:	size_t fdt_header_size_(uint32_t);
327:	int fdt_move(const void *, void *, int);
247:	int fdt_next_node(const void *, int, int *);
298:	int fdt_next_subnode(const void *, int);
162:	uint32_t fdt_next_tag(const void *, int, int *);
140:	const void *fdt_offset_ptr(const void *, int, unsigned int);
18:	int32_t fdt_ro_probe_(const void *);
File lib/../scripts/dtc/libfdt/fdt_ro.c:
114:	int fdt_find_max_phandle(const void *, uint32_t *);
338:	int fdt_first_property_offset(const void *, int);
142:	int fdt_generate_phandle(const void *, uint32_t *);
537:	const char *fdt_get_alias(const void *, const char *);
525:	const char *fdt_get_alias_namelen(const void *, const char *, int);
175:	int fdt_get_mem_rsv(const void *, int, uint64_t *, uint64_t *);
300:	const char *fdt_get_name(const void *, int, int *);
542:	int fdt_get_path(const void *, int, char *, int);
508:	uint32_t fdt_get_phandle(const void *, int);
443:	const struct fdt_property *fdt_get_property(const void *, int, const char *, int *);
378:	const struct fdt_property *fdt_get_property_by_offset(const void *, int, int *);
425:	const struct fdt_property *fdt_get_property_namelen(const void *, int, const char *, int, int *);
34:	const char *fdt_get_string(const void *, int, int *);
502:	const void *fdt_getprop(const void *, int, const char *, int *);
469:	const void *fdt_getprop_by_offset(const void *, int, const char **, int *);
451:	const void *fdt_getprop_namelen(const void *, int, const char *, int, int *);
348:	int fdt_next_property_offset(const void *, int);
823:	int fdt_node_check_compatible(const void *, int, const char *);
632:	int fdt_node_depth(const void *, int);
836:	int fdt_node_offset_by_compatible(const void *, int, const char *);
681:	int fdt_node_offset_by_phandle(const void *, uint32_t);
654:	int fdt_node_offset_by_prop_value(const void *, int, const char *, const void *, int);
189:	int fdt_num_mem_rsv(const void *);
644:	int fdt_parent_offset(const void *, int);
295:	int fdt_path_offset(const void *, const char *);
250:	int fdt_path_offset_namelen(const void *, const char *, int);
100:	const char *fdt_string(const void *, int);
706:	int fdt_stringlist_contains(const char *, int, const char *);
723:	int fdt_stringlist_count(const void *, int, const char *);
778:	const char *fdt_stringlist_get(const void *, int, const char *, int, int *);
748:	int fdt_stringlist_search(const void *, int, const char *, const char *);
244:	int fdt_subnode_offset(const void *, int, const char *);
225:	int fdt_subnode_offset_namelen(const void *, int, const char *, int);
594:	int fdt_supernode_atdepth_offset(const void *, int, int, int *);
File lib/../scripts/dtc/libfdt/fdt_rw.c:
155:	int fdt_add_mem_rsv(void *, uint64_t, uint64_t);
377:	int fdt_add_subnode(void *, int, const char *);
333:	int fdt_add_subnode_namelen(void *, int, const char *, int);
291:	int fdt_appendprop(void *, int, const char *, const void *, int);
172:	int fdt_del_mem_rsv(void *, int);
382:	int fdt_del_node(void *, int);
318:	int fdt_delprop(void *, int, const char *);
419:	int fdt_open_into(const void *, void *, int);
487:	int fdt_pack(void *);
235:	int fdt_set_name(void *, int, const char *);
276:	int fdt_setprop(void *, int, const char *, const void *, int);
258:	int fdt_setprop_placeholder(void *, int, const char *, int, void **);
File lib/../scripts/dtc/libfdt/fdt_wip.c:
73:	int fdt_node_end_offset_(void *, int);
83:	int fdt_nop_node(void *, int);
59:	int fdt_nop_property(void *, int, const char *);
33:	int fdt_setprop_inplace(void *, int, const char *, const void *, int);
13:	int fdt_setprop_inplace_namelen_partial(void *, int, const char *, int, uint32_t, const void *, int);
File lib/argv_split.c:
35:	void argv_free(char **);
60:	char **argv_split(gfp_t, const char *, int *);
File lib/base64.c:
73:	int base64_decode(const char *, int, u8 *);
32:	int base64_encode(const u8 *, int, char *);
File lib/bcd.c:
5:	unsigned int _bcd2bin(unsigned char);
11:	unsigned char _bin2bcd(unsigned int);
File lib/bitmap.c:
240:	bool __bitmap_and(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
278:	bool __bitmap_andnot(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
383:	void __bitmap_clear(unsigned long *, unsigned int, int);
84:	void __bitmap_complement(unsigned long *, const unsigned long *, unsigned int);
48:	bool __bitmap_equal(const unsigned long *, const unsigned long *, unsigned int);
306:	bool __bitmap_intersects(const unsigned long *, const unsigned long *, unsigned int);
256:	void __bitmap_or(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
64:	bool __bitmap_or_equal(const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
294:	void __bitmap_replace(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
362:	void __bitmap_set(unsigned long *, unsigned int, int);
148:	void __bitmap_shift_left(unsigned long *, const unsigned long *, unsigned int, unsigned int);
103:	void __bitmap_shift_right(unsigned long *, const unsigned long *, unsigned int, unsigned int);
321:	bool __bitmap_subset(const unsigned long *, const unsigned long *, unsigned int);
349:	unsigned int __bitmap_weight(const unsigned long *, unsigned int);
355:	unsigned int __bitmap_weight_and(const unsigned long *, const unsigned long *, unsigned int);
267:	void __bitmap_xor(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1386:	unsigned long *bitmap_alloc(unsigned int, gfp_t);
1399:	unsigned long *bitmap_alloc_node(unsigned int, gfp_t, int);
1355:	int bitmap_allocate_region(unsigned long *, unsigned int, int);
1051:	int bitmap_bitremap(int, const unsigned long *, const unsigned long *, int);
210:	void bitmap_cut(unsigned long *, const unsigned long *, unsigned int, unsigned int, unsigned int);
1313:	int bitmap_find_free_region(unsigned long *, unsigned int, int);
417:	unsigned long bitmap_find_next_zero_area_off(unsigned long *, unsigned long, unsigned long, unsigned int, unsigned long, unsigned long);
1209:	void bitmap_fold(unsigned long *, const unsigned long *, unsigned int, unsigned int);
1412:	void bitmap_free(const unsigned long *);
1457:	void bitmap_from_arr32(unsigned long *, const u32 *, unsigned int);
1170:	void bitmap_onto(unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
906:	int bitmap_parse(const char *, unsigned int, unsigned long *, int);
457:	int bitmap_parse_user(const char *, unsigned int, unsigned long *, int);
807:	int bitmap_parselist(const char *, unsigned long *, int);
848:	int bitmap_parselist_user(const char *, unsigned int, unsigned long *, int);
613:	int bitmap_print_bitmask_to_buf(char *, const unsigned long *, int, loff_t, size_t);
631:	int bitmap_print_list_to_buf(char *, const unsigned long *, int, loff_t, size_t);
491:	int bitmap_print_to_pagebuf(bool, char *, const unsigned long *, int);
1338:	void bitmap_release_region(unsigned long *, unsigned int, int);
1003:	void bitmap_remap(unsigned long *, const unsigned long *, const unsigned long *, const unsigned long *, unsigned int);
1480:	void bitmap_to_arr32(u32 *, const unsigned long *, unsigned int);
1393:	unsigned long *bitmap_zalloc(unsigned int, gfp_t);
1406:	unsigned long *bitmap_zalloc_node(unsigned int, gfp_t, int);
1425:	unsigned long *devm_bitmap_alloc(struct device *, unsigned int, gfp_t);
1443:	unsigned long *devm_bitmap_zalloc(struct device *, unsigned int, gfp_t);
File lib/bsearch.c:
31:	void *bsearch(const void *, const void *, size_t, size_t, cmp_func_t);
File lib/bucket_locks.c:
14:	int __alloc_bucket_spinlocks(spinlock_t **, unsigned int *, size_t, unsigned int, gfp_t, const char *, struct lock_class_key *);
50:	void free_bucket_spinlocks(spinlock_t *);
File lib/bug.c:
129:	void bug_get_file_line(struct bug_entry *, const char **, unsigned int *);
145:	struct bug_entry *find_bug(unsigned long);
220:	void generic_bug_clear_once(void);
156:	enum bug_trap_type report_bug(unsigned long, struct pt_regs *);
File lib/buildid.c:
126:	int build_id_parse(struct vm_area_struct *, unsigned char *, __u32 *);
172:	int build_id_parse_buf(const void *, unsigned char *, u32);
File lib/bust_spinlocks.c:
20:	void bust_spinlocks(int);
File lib/checksum.c:
125:	__wsum csum_partial(const void *, int, __wsum);
158:	__wsum csum_tcpudp_nofold(__be32, __be32, __u32, __u8, __wsum);
142:	__sum16 ip_compute_csum(const void *, int);
File lib/clz_ctz.c:
49:	int __clzdi2(long);
25:	int __clzsi2(int);
55:	int __ctzdi2(long);
18:	int __ctzsi2(int);
File lib/cmdline.c:
56:	int get_option(char **, int *);
107:	char *get_options(const char *, int, int *);
150:	unsigned long long memparse(const char *, char **);
227:	char *next_arg(char *, char **, char **);
203:	bool parse_option_str(const char *, const char *);
File lib/cpumask.c:
161:	unsigned int cpumask_any_and_distribute(const struct cpumask *, const struct cpumask *);
178:	unsigned int cpumask_any_distribute(const struct cpumask *);
123:	unsigned int cpumask_local_spread(unsigned int, int);
22:	unsigned int cpumask_next_wrap(int, const struct cpumask *, int, bool);
File lib/crc32.c:
199:	u32 __crc32c_le(u32, const unsigned char *, size_t);
277:	u32 __crc32c_le_shift(u32, size_t);
339:	u32 crc32_be(u32, const unsigned char *, size_t);
195:	u32 crc32_le(u32, const unsigned char *, size_t);
272:	u32 crc32_le_shift(u32, size_t);
File lib/crc8.c:
74:	u8 crc8(const u8 *, const u8 *, size_t, u8);
51:	void crc8_populate_lsb(u8 *, u8);
29:	void crc8_populate_msb(u8 *, u8);
File lib/crypto/aes.c:
309:	void aes_decrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
258:	void aes_encrypt(const struct crypto_aes_ctx *, u8 *, const u8 *);
185:	int aes_expandkey(struct crypto_aes_ctx *, const u8 *, unsigned int);
File lib/crypto/blake2s-generic.c:
44:	void blake2s_compress_generic(struct blake2s_state *, const u8 *, size_t, const u32);
File lib/crypto/blake2s.c:
48:	void blake2s_final(struct blake2s_state *, u8 *);
24:	void blake2s_update(struct blake2s_state *, const u8 *, size_t);
File lib/crypto/chacha.c:
76:	void chacha_block_generic(u32 *, u8 *, int);
103:	void hchacha_block_generic(const u32 *, u32 *, int);
File lib/crypto/memneq.c:
163:	unsigned long __crypto_memneq(const void *, const void *, size_t);
File lib/crypto/sha1.c:
130:	void sha1_init(__u32 *);
87:	void sha1_transform(__u32 *, const char *, __u32 *);
File lib/crypto/sha256.c:
193:	void sha224_final(struct sha256_state *, u8 *);
154:	void sha224_update(struct sha256_state *, const u8 *, unsigned int);
199:	void sha256(const u8 *, unsigned int, u8 *);
187:	void sha256_final(struct sha256_state *, u8 *);
122:	void sha256_update(struct sha256_state *, const u8 *, unsigned int);
File lib/crypto/utils.c:
17:	void __crypto_xor(u8 *, const u8 *, const u8 *, unsigned int);
File lib/debug_locks.c:
39:	int debug_locks_off(void);
File lib/dec_and_lock.c:
21:	int _atomic_dec_and_lock(atomic_t *, spinlock_t *);
37:	int _atomic_dec_and_lock_irqsave(atomic_t *, spinlock_t *, unsigned long *);
53:	int _atomic_dec_and_raw_lock(atomic_t *, raw_spinlock_t *);
68:	int _atomic_dec_and_raw_lock_irqsave(atomic_t *, raw_spinlock_t *, unsigned long *);
File lib/decompress.c:
63:	decompress_fn decompress_method(const unsigned char *, long, const char **);
File lib/decompress_bunzip2.c:
679:	int bunzip2(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
File lib/decompress_inflate.c:
42:	int __gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long, long *, void (*)(char *));
200:	int gunzip(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
File lib/decompress_unlz4.c:
31:	int unlz4(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));
File lib/decompress_unlzma.c:
537:	int unlzma(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
File lib/decompress_unlzo.c:
41:	long parse_header(u8 *, long *, long);
97:	int unlzo(u8 *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), u8 *, long *, void (*)(char *));
File lib/decompress_unxz.c:
251:	int unxz(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
File lib/decompress_unzstd.c:
331:	int unzstd(unsigned char *, long, long (*)(void *, unsigned long), long (*)(void *, unsigned long), unsigned char *, long *, void (*)(char *));
File lib/devmem_is_allowed.c:
20:	int devmem_is_allowed(unsigned long);
File lib/devres.c:
579:	int devm_arch_io_reserve_memtype_wc(struct device *, resource_size_t, resource_size_t);
534:	int devm_arch_phys_wc_add(struct device *, unsigned long, unsigned long);
69:	void *devm_ioremap(struct device *, resource_size_t, resource_size_t);
16:	void devm_ioremap_release(struct device *, void *);
185:	void *devm_ioremap_resource(struct device *, const struct resource *);
201:	void *devm_ioremap_resource_wc(struct device *, const struct resource *);
84:	void *devm_ioremap_uc(struct device *, resource_size_t, resource_size_t);
99:	void *devm_ioremap_wc(struct device *, resource_size_t, resource_size_t);
113:	void devm_iounmap(struct device *, void *);
237:	void *devm_of_iomap(struct device *, struct device_node *, int, resource_size_t *);
File lib/dump_stack.c:
111:	void dump_stack(void);
97:	void dump_stack_lvl(const char *);
55:	void dump_stack_print_info(const char *);
30:	void dump_stack_set_arch_desc(const char *, ...);
80:	void show_regs_print_info(const char *);
File lib/errname.c:
217:	const char *errname(int);
File lib/errseq.c:
145:	int errseq_check(errseq_t *, errseq_t);
175:	int errseq_check_and_advance(errseq_t *, errseq_t *);
123:	errseq_t errseq_sample(errseq_t *);
59:	errseq_t errseq_set(errseq_t *, int);
File lib/extable.c:
112:	const struct exception_table_entry *search_extable(const struct exception_table_entry *, const size_t, unsigned long);
63:	void sort_extable(struct exception_table_entry *, struct exception_table_entry *);
File lib/find_bit.c:
144:	unsigned long __find_nth_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
151:	unsigned long __find_nth_andnot_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
138:	unsigned long __find_nth_bit(const unsigned long *, unsigned long, unsigned long);
110:	unsigned long _find_first_and_bit(const unsigned long *, const unsigned long *, unsigned long);
99:	unsigned long _find_first_bit(const unsigned long *, unsigned long);
123:	unsigned long _find_first_zero_bit(const unsigned long *, unsigned long);
186:	unsigned long _find_last_bit(const unsigned long *, unsigned long);
159:	unsigned long _find_next_and_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
168:	unsigned long _find_next_andnot_bit(const unsigned long *, const unsigned long *, unsigned long, unsigned long);
131:	unsigned long _find_next_bit(const unsigned long *, unsigned long, unsigned long);
177:	unsigned long _find_next_zero_bit(const unsigned long *, unsigned long, unsigned long);
205:	unsigned long find_next_clump8(unsigned long *, const unsigned long *, unsigned long, unsigned long);
File lib/flex_proportions.c:
216:	void __fprop_add_percpu(struct fprop_global *, struct fprop_local_percpu *, long);
256:	void __fprop_add_percpu_max(struct fprop_global *, struct fprop_local_percpu *, int, long);
127:	void __fprop_inc_single(struct fprop_global *, struct fprop_local_single *);
224:	void fprop_fraction_percpu(struct fprop_global *, struct fprop_local_percpu *, unsigned long *, unsigned long *);
135:	void fprop_fraction_single(struct fprop_global *, struct fprop_local_single *, unsigned long *, unsigned long *);
51:	void fprop_global_destroy(struct fprop_global *);
38:	int fprop_global_init(struct fprop_global *, gfp_t);
180:	void fprop_local_destroy_percpu(struct fprop_local_percpu *);
98:	void fprop_local_destroy_single(struct fprop_local_single *);
168:	int fprop_local_init_percpu(struct fprop_local_percpu *, gfp_t);
90:	int fprop_local_init_single(struct fprop_local_single *);
64:	bool fprop_new_period(struct fprop_global *, int);
File lib/genalloc.c:
829:	struct gen_pool *devm_gen_pool_create(struct device *, int, int, const char *);
184:	int gen_pool_add_owner(struct gen_pool *, unsigned long, phys_addr_t, size_t, int, void *);
277:	unsigned long gen_pool_alloc_algo_owner(struct gen_pool *, size_t, genpool_algo_t, void *, void **);
580:	size_t gen_pool_avail(struct gen_pool *);
754:	unsigned long gen_pool_best_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
153:	struct gen_pool *gen_pool_create(int, int);
242:	void gen_pool_destroy(struct gen_pool *);
341:	void *gen_pool_dma_alloc(struct gen_pool *, size_t, dma_addr_t *);
362:	void *gen_pool_dma_alloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
395:	void *gen_pool_dma_alloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
419:	void *gen_pool_dma_zalloc(struct gen_pool *, size_t, dma_addr_t *);
440:	void *gen_pool_dma_zalloc_algo(struct gen_pool *, size_t, dma_addr_t *, genpool_algo_t, void *);
466:	void *gen_pool_dma_zalloc_align(struct gen_pool *, size_t, dma_addr_t *, int);
647:	unsigned long gen_pool_first_fit(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
666:	unsigned long gen_pool_first_fit_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
729:	unsigned long gen_pool_first_fit_order_align(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
694:	unsigned long gen_pool_fixed_alloc(unsigned long *, unsigned long, unsigned long, unsigned int, void *, struct gen_pool *, unsigned long);
531:	void gen_pool_for_each_chunk(struct gen_pool *, void (*)(struct gen_pool *, struct gen_pool_chunk *, void *), void *);
487:	void gen_pool_free_owner(struct gen_pool *, unsigned long, size_t, void **);
806:	struct gen_pool *gen_pool_get(struct device *, const char *);
553:	bool gen_pool_has_addr(struct gen_pool *, unsigned long, size_t);
622:	void gen_pool_set_algo(struct gen_pool *, genpool_algo_t, void *);
599:	size_t gen_pool_size(struct gen_pool *);
217:	phys_addr_t gen_pool_virt_to_phys(struct gen_pool *, unsigned long);
879:	struct gen_pool *of_gen_pool_get(struct device_node *, const char *, int);
File lib/generic-radix-tree.c:
230:	void __genradix_free(struct __genradix *);
162:	void *__genradix_iter_peek(struct genradix_iter *, struct __genradix *, size_t);
217:	int __genradix_prealloc(struct __genradix *, size_t, gfp_t);
54:	void *__genradix_ptr(struct __genradix *, size_t);
104:	void *__genradix_ptr_alloc(struct __genradix *, size_t, gfp_t);
File lib/glob.c:
40:	bool glob_match(const char *, const char *);
File lib/hexdump.c:
87:	char *bin2hex(char *, const void *, size_t);
63:	int hex2bin(u8 *, const char *, size_t);
127:	int hex_dump_to_buffer(const void *, size_t, int, int, char *, size_t, bool);
46:	int hex_to_bin(unsigned char);
261:	void print_hex_dump(const char *, const char *, int, int, int, const void *, size_t, bool);
File lib/hweight.c:
30:	unsigned int __sw_hweight16(unsigned int);
13:	unsigned int __sw_hweight32(unsigned int);
47:	unsigned long __sw_hweight64(__u64);
39:	unsigned int __sw_hweight8(unsigned int);
File lib/idr.c:
380:	int ida_alloc_range(struct ida *, unsigned int, unsigned int, gfp_t);
541:	void ida_destroy(struct ida *);
487:	void ida_free(struct ida *, unsigned int);
79:	int idr_alloc(struct idr *, void *, int, int, gfp_t);
117:	int idr_alloc_cyclic(struct idr *, void *, int, int, gfp_t);
33:	int idr_alloc_u32(struct idr *, void *, u32 *, unsigned long, gfp_t);
172:	void *idr_find(const struct idr *, unsigned long);
195:	int idr_for_each(const struct idr *, int (*)(int, void *, void *), void *);
264:	void *idr_get_next(struct idr *, int *);
227:	void *idr_get_next_ul(struct idr *, unsigned long *);
152:	void *idr_remove(struct idr *, unsigned long);
290:	void *idr_replace(struct idr *, void *, unsigned long);
File lib/iomap_copy.c:
42:	void __ioread32_copy(void *, const void *, size_t);
19:	void __iowrite32_copy(void *, const void *, size_t);
63:	void __iowrite64_copy(void *, const void *, size_t);
File lib/iov_iter.c:
1787:	ssize_t __import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *, bool);
627:	size_t _copy_from_iter(void *, size_t, struct iov_iter *);
643:	size_t _copy_from_iter_nocache(void *, size_t, struct iov_iter *);
521:	size_t _copy_to_iter(const void *, size_t, struct iov_iter *);
743:	size_t copy_page_from_iter(struct page *, size_t, size_t, struct iov_iter *);
809:	size_t copy_page_from_iter_atomic(struct page *, unsigned int, size_t, struct iov_iter *);
712:	size_t copy_page_to_iter(struct page *, size_t, size_t, struct iov_iter *);
1541:	size_t csum_and_copy_from_iter(void *, size_t, __wsum *, struct iov_iter *);
1562:	size_t csum_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1685:	const void *dup_iter(struct iov_iter *, struct iov_iter *, gfp_t);
352:	size_t fault_in_iov_iter_readable(const struct iov_iter *, size_t);
395:	size_t fault_in_iov_iter_writeable(const struct iov_iter *, size_t);
1596:	size_t hash_and_copy_to_iter(const void *, size_t, void *, struct iov_iter *);
1856:	ssize_t import_iovec(int, const struct iovec *, unsigned int, unsigned int, struct iovec **, struct iov_iter *);
1865:	int import_single_range(int, void *, size_t, struct iovec *, struct iov_iter *);
895:	void iov_iter_advance(struct iov_iter *, size_t);
1237:	unsigned long iov_iter_alignment(const struct iov_iter *);
1013:	void iov_iter_bvec(struct iov_iter *, unsigned int, const struct bio_vec *, unsigned long, size_t);
1084:	void iov_iter_discard(struct iov_iter *, unsigned int, size_t);
1268:	unsigned long iov_iter_gap_alignment(const struct iov_iter *);
1496:	ssize_t iov_iter_get_pages(struct iov_iter *, struct page **, size_t, unsigned int, size_t *, unsigned int);
1509:	ssize_t iov_iter_get_pages2(struct iov_iter *, struct page **, size_t, unsigned int, size_t *);
1516:	ssize_t iov_iter_get_pages_alloc(struct iov_iter *, struct page ***, size_t, size_t *, unsigned int);
1534:	ssize_t iov_iter_get_pages_alloc2(struct iov_iter *, struct page ***, size_t, size_t *);
424:	void iov_iter_init(struct iov_iter *, unsigned int, const struct iovec *, unsigned long, size_t);
1154:	bool iov_iter_is_aligned(const struct iov_iter *, unsigned int, unsigned int);
997:	void iov_iter_kvec(struct iov_iter *, unsigned int, const struct kvec *, unsigned long, size_t);
1653:	int iov_iter_npages(const struct iov_iter *, int);
1029:	void iov_iter_pipe(struct iov_iter *, unsigned int, struct pipe_inode_info *, size_t);
1892:	void iov_iter_restore(struct iov_iter *, struct iov_iter_state *);
915:	void iov_iter_revert(struct iov_iter *, size_t);
985:	size_t iov_iter_single_seg_count(const struct iov_iter *);
1060:	void iov_iter_xarray(struct iov_iter *, unsigned int, struct xarray *, loff_t, size_t);
796:	size_t iov_iter_zero(size_t, struct iov_iter *);
1752:	struct iovec *iovec_from_user(const struct iovec *, unsigned long, unsigned long, struct iovec *, bool);
File lib/is_single_threaded.c:
15:	bool current_is_single_threaded(void);
File lib/kasprintf.c:
53:	char *kasprintf(gfp_t, const char *, ...);
15:	char *kvasprintf(gfp_t, const char *, va_list);
43:	const char *kvasprintf_const(gfp_t, const char *, va_list);
File lib/kfifo.c:
24:	int __kfifo_alloc(struct __kfifo *, unsigned int, size_t, gfp_t);
562:	void __kfifo_dma_in_finish_r(struct __kfifo *, unsigned int, size_t);
356:	unsigned int __kfifo_dma_in_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
548:	unsigned int __kfifo_dma_in_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
585:	void __kfifo_dma_out_finish_r(struct __kfifo *, size_t);
369:	unsigned int __kfifo_dma_out_prepare(struct __kfifo *, struct scatterlist *, int, unsigned int);
571:	unsigned int __kfifo_dma_out_prepare_r(struct __kfifo *, struct scatterlist *, int, unsigned int, size_t);
55:	void __kfifo_free(struct __kfifo *);
210:	int __kfifo_from_user(struct __kfifo *, const void *, unsigned long, unsigned int *);
499:	int __kfifo_from_user_r(struct __kfifo *, const void *, unsigned long, unsigned int *, size_t);
113:	unsigned int __kfifo_in(struct __kfifo *, const void *, unsigned int);
438:	unsigned int __kfifo_in_r(struct __kfifo *, const void *, unsigned int, size_t);
66:	int __kfifo_init(struct __kfifo *, void *, unsigned int, size_t);
432:	unsigned int __kfifo_len_r(struct __kfifo *, size_t);
382:	unsigned int __kfifo_max_r(unsigned int, size_t);
166:	unsigned int __kfifo_out(struct __kfifo *, void *, unsigned int);
152:	unsigned int __kfifo_out_peek(struct __kfifo *, void *, unsigned int);
464:	unsigned int __kfifo_out_peek_r(struct __kfifo *, void *, unsigned int, size_t);
476:	unsigned int __kfifo_out_r(struct __kfifo *, void *, unsigned int, size_t);
490:	void __kfifo_skip_r(struct __kfifo *, size_t);
270:	int __kfifo_to_user(struct __kfifo *, void *, unsigned long, unsigned int *);
523:	int __kfifo_to_user_r(struct __kfifo *, void *, unsigned long, unsigned int *, size_t);
File lib/klist.c:
162:	void klist_add_before(struct klist_node *, struct klist_node *);
146:	void klist_add_behind(struct klist_node *, struct klist_node *);
122:	void klist_add_head(struct klist_node *, struct klist *);
134:	void klist_add_tail(struct klist_node *, struct klist *);
228:	void klist_del(struct klist_node *);
84:	void klist_init(struct klist *, void (*)(struct klist_node *), void (*)(struct klist_node *));
311:	void klist_iter_exit(struct klist_iter *);
297:	void klist_iter_init(struct klist *, struct klist_iter *);
280:	void klist_iter_init_node(struct klist *, struct klist_iter *, struct klist_node *);
375:	struct klist_node *klist_next(struct klist_iter *);
265:	int klist_node_attached(struct klist_node *);
333:	struct klist_node *klist_prev(struct klist_iter *);
238:	void klist_remove(struct klist_node *);
File lib/kobject.c:
1042:	const struct kobj_ns_type_operations *kobj_child_ns_ops(const struct kobject *);
1057:	bool kobj_ns_current_may_mount(enum kobj_ns_type);
1110:	void kobj_ns_drop(enum kobj_ns_type, void *);
1070:	void *kobj_ns_grab_current(enum kobj_ns_type);
1097:	const void *kobj_ns_initial(enum kobj_ns_type);
1084:	const void *kobj_ns_netlink(enum kobj_ns_type, struct sock *);
1052:	const struct kobj_ns_type_operations *kobj_ns_ops(const struct kobject *);
1003:	int kobj_ns_type_register(const struct kobj_ns_type_operations *);
1030:	int kobj_ns_type_registered(enum kobj_ns_type);
394:	int kobject_add(struct kobject *, struct kobject *, const char *, ...);
773:	struct kobject *kobject_create_and_add(const char *, struct kobject *);
603:	void kobject_del(struct kobject *);
620:	struct kobject *kobject_get(struct kobject *);
48:	void kobject_get_ownership(const struct kobject *, kuid_t *, kgid_t *);
139:	char *kobject_get_path(const struct kobject *, gfp_t);
633:	struct kobject *kobject_get_unless_zero(struct kobject *);
317:	void kobject_init(struct kobject *, const struct kobj_type *);
432:	int kobject_init_and_add(struct kobject *, const struct kobj_type *, struct kobject *, const char *, ...);
522:	int kobject_move(struct kobject *, struct kobject *);
28:	const void *kobject_namespace(const struct kobject *);
714:	void kobject_put(struct kobject *);
458:	int kobject_rename(struct kobject *, const char *);
292:	int kobject_set_name(struct kobject *, const char *, ...);
249:	int kobject_set_name_vargs(struct kobject *, const char *, va_list);
980:	struct kset *kset_create_and_add(const char *, const struct kset_uevent_ops *, struct kobject *);
883:	struct kobject *kset_find_obj(struct kset *, const char *);
796:	void kset_init(struct kset *);
841:	int kset_register(struct kset *);
865:	void kset_unregister(struct kset *);
File lib/kobject_uevent.c:
654:	int add_uevent_var(struct kobj_uevent_env *, const char *, ...);
192:	int kobject_synth_uevent(struct kobject *, const char *, size_t);
640:	int kobject_uevent(struct kobject *, enum kobject_action);
457:	int kobject_uevent_env(struct kobject *, enum kobject_action, char **);
File lib/kstrtox.c:
197:	int _kstrtol(const char *, unsigned int, long *);
181:	int _kstrtoul(const char *, unsigned int, unsigned long *);
91:	unsigned int _parse_integer(const char *, unsigned int, unsigned long long *);
26:	const char *_parse_integer_fixup_radix(const char *, unsigned int *);
52:	unsigned int _parse_integer_limit(const char *, unsigned int, unsigned long long *, size_t);
348:	int kstrtobool(const char *, bool *);
395:	int kstrtobool_from_user(const char *, size_t, bool *);
259:	int kstrtoint(const char *, unsigned int, int *);
427:	int kstrtoint_from_user(const char *, size_t, unsigned int, int *);
425:	int kstrtol_from_user(const char *, size_t, unsigned int, long *);
156:	int kstrtoll(const char *, unsigned int, long long *);
423:	int kstrtoll_from_user(const char *, size_t, unsigned int, long long *);
291:	int kstrtos16(const char *, unsigned int, s16 *);
429:	int kstrtos16_from_user(const char *, size_t, unsigned int, s16 *);
323:	int kstrtos8(const char *, unsigned int, s8 *);
431:	int kstrtos8_from_user(const char *, size_t, unsigned int, s8 *);
275:	int kstrtou16(const char *, unsigned int, u16 *);
428:	int kstrtou16_from_user(const char *, size_t, unsigned int, u16 *);
307:	int kstrtou8(const char *, unsigned int, u8 *);
430:	int kstrtou8_from_user(const char *, size_t, unsigned int, u8 *);
228:	int kstrtouint(const char *, unsigned int, unsigned int *);
426:	int kstrtouint_from_user(const char *, size_t, unsigned int, unsigned int *);
424:	int kstrtoul_from_user(const char *, size_t, unsigned int, unsigned long *);
132:	int kstrtoull(const char *, unsigned int, unsigned long long *);
422:	int kstrtoull_from_user(const char *, size_t, unsigned int, unsigned long long *);
File lib/list_sort.c:
185:	void list_sort(void *, struct list_head *, list_cmp_func_t);
File lib/llist.c:
26:	bool llist_add_batch(struct llist_node *, struct llist_node *, struct llist_head *);
53:	struct llist_node *llist_del_first(struct llist_head *);
75:	struct llist_node *llist_reverse_order(struct llist_node *);
File lib/lockref.c:
42:	void lockref_get(struct lockref *);
172:	int lockref_get_not_dead(struct lockref *);
61:	int lockref_get_not_zero(struct lockref *);
160:	void lockref_mark_dead(struct lockref *);
89:	int lockref_put_not_zero(struct lockref *);
137:	int lockref_put_or_lock(struct lockref *);
119:	int lockref_put_return(struct lockref *);
File lib/logic_pio.c:
128:	struct logic_pio_hwaddr *find_io_range_by_fwnode(struct fwnode_handle *);
36:	int logic_pio_register_range(struct logic_pio_hwaddr *);
173:	resource_size_t logic_pio_to_hwaddr(unsigned long);
210:	unsigned long logic_pio_trans_cpuaddr(resource_size_t);
192:	unsigned long logic_pio_trans_hwaddr(struct fwnode_handle *, resource_size_t, resource_size_t);
112:	void logic_pio_unregister_range(struct logic_pio_hwaddr *);
File lib/lz4/lz4_decompress.c:
478:	int LZ4_decompress_fast(const char *, char *, int);
640:	int LZ4_decompress_fast_continue(LZ4_streamDecode_t *, const char *, char *, int);
697:	int LZ4_decompress_fast_usingDict(const char *, char *, int, const char *, int);
460:	int LZ4_decompress_safe(const char *, char *, int, int);
587:	int LZ4_decompress_safe_continue(LZ4_streamDecode_t *, const char *, char *, int, int);
469:	int LZ4_decompress_safe_partial(const char *, char *, int, int, int);
679:	int LZ4_decompress_safe_usingDict(const char *, char *, int, int, const char *, int);
564:	int LZ4_setStreamDecode(LZ4_streamDecode_t *, const char *, int);
File lib/lzo/lzo1x_decompress_safe.c:
39:	int lzo1x_decompress_safe(const unsigned char *, size_t, unsigned char *, size_t *);
File lib/maple_tree.c:
6391:	void __mt_destroy(struct maple_tree *);
6138:	void maple_tree_init(void);
5745:	void mas_destroy(struct ma_state *);
5233:	int mas_empty_area(struct ma_state *, unsigned long, unsigned long, unsigned long);
5289:	int mas_empty_area_rev(struct ma_state *, unsigned long, unsigned long, unsigned long);
6083:	void *mas_erase(struct ma_state *);
5794:	int mas_expected_entries(struct ma_state *, unsigned long);
5994:	void *mas_find(struct ma_state *, unsigned long);
6038:	void *mas_find_rev(struct ma_state *, unsigned long);
248:	bool mas_is_err(struct ma_state *);
5855:	void *mas_next(struct ma_state *, unsigned long);
6115:	bool mas_nomem(struct ma_state *, gfp_t);
5976:	void mas_pause(struct ma_state *);
5720:	int mas_preallocate(struct ma_state *, void *, gfp_t);
5910:	void *mas_prev(struct ma_state *, unsigned long);
5639:	void *mas_store(struct ma_state *, void *);
5676:	int mas_store_gfp(struct ma_state *, void *, gfp_t);
5700:	void mas_store_prealloc(struct ma_state *, void *);
5041:	void *mas_walk(struct ma_state *);
6427:	void *mt_find(struct maple_tree *, unsigned long *, unsigned long);
6486:	void *mt_find_after(struct maple_tree *, unsigned long *, unsigned long);
5887:	void *mt_next(struct maple_tree *, unsigned long, unsigned long);
5951:	void *mt_prev(struct maple_tree *, unsigned long, unsigned long);
6291:	int mtree_alloc_range(struct maple_tree *, unsigned long *, void *, unsigned long, unsigned long, unsigned long, gfp_t);
6327:	int mtree_alloc_rrange(struct maple_tree *, unsigned long *, void *, unsigned long, unsigned long, unsigned long, gfp_t);
6409:	void mtree_destroy(struct maple_tree *);
6370:	void *mtree_erase(struct maple_tree *, unsigned long);
6284:	int mtree_insert(struct maple_tree *, unsigned long, void *, gfp_t);
6249:	int mtree_insert_range(struct maple_tree *, unsigned long, unsigned long, void *, gfp_t);
6152:	void *mtree_load(struct maple_tree *, unsigned long);
6231:	int mtree_store(struct maple_tree *, unsigned long, void *, gfp_t);
6194:	int mtree_store_range(struct maple_tree *, unsigned long, unsigned long, void *, gfp_t);
File lib/math/div64.c:
179:	u32 iter_div_u64_rem(u64, u32, u64 *);
186:	u64 mul_u64_u64_div_u64(u64, u64, u64);
File lib/math/gcd.c:
23:	unsigned long gcd(unsigned long, unsigned long);
File lib/math/int_pow.c:
19:	u64 int_pow(u64, unsigned int);
File lib/math/int_sqrt.c:
20:	unsigned long int_sqrt(unsigned long);
File lib/math/lcm.c:
8:	unsigned long lcm(unsigned long, unsigned long);
17:	unsigned long lcm_not_zero(unsigned long, unsigned long);
File lib/math/rational.c:
35:	void rational_best_approximation(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, unsigned long *);
File lib/math/reciprocal_div.c:
17:	struct reciprocal_value reciprocal_value(u32);
35:	struct reciprocal_value_adv reciprocal_value_adv(u32, u8);
File lib/memweight.c:
11:	size_t memweight(const void *, size_t);
File lib/once.c:
72:	bool __do_once_sleepable_start(bool *);
42:	bool __do_once_start(bool *, unsigned long *);
File lib/parser.c:
264:	int match_hex(substring_t *, int *);
191:	int match_int(substring_t *, int *);
248:	int match_octal(substring_t *, int *);
358:	char *match_strdup(const substring_t *);
334:	size_t match_strlcpy(char *, const substring_t *, size_t);
106:	int match_token(char *, const struct match_token *, substring_t *);
232:	int match_u64(substring_t *, u64 *);
207:	int match_uint(substring_t *, unsigned int *);
282:	bool match_wildcard(const char *, const char *);
File lib/percpu-refcount.c:
130:	void percpu_ref_exit(struct percpu_ref *);
63:	int percpu_ref_init(struct percpu_ref *, percpu_ref_func_t *, unsigned int, gfp_t);
410:	bool percpu_ref_is_zero(struct percpu_ref *);
383:	void percpu_ref_kill_and_confirm(struct percpu_ref *, percpu_ref_func_t *);
441:	void percpu_ref_reinit(struct percpu_ref *);
463:	void percpu_ref_resurrect(struct percpu_ref *);
306:	void percpu_ref_switch_to_atomic(struct percpu_ref *, percpu_ref_func_t *);
328:	void percpu_ref_switch_to_atomic_sync(struct percpu_ref *);
353:	void percpu_ref_switch_to_percpu(struct percpu_ref *);
File lib/percpu_counter.c:
238:	int __percpu_counter_compare(struct percpu_counter *, s64, s32);
158:	int __percpu_counter_init(struct percpu_counter *, s64, gfp_t, struct lock_class_key *);
141:	s64 __percpu_counter_sum(struct percpu_counter *);
82:	void percpu_counter_add_batch(struct percpu_counter *, s64, s32);
182:	void percpu_counter_destroy(struct percpu_counter *);
60:	void percpu_counter_set(struct percpu_counter *, s64);
152:	s64 percpu_counter_sum_all(struct percpu_counter *);
107:	void percpu_counter_sync(struct percpu_counter *);
File lib/plist.c:
73:	void plist_add(struct plist_node *, struct plist_head *);
112:	void plist_del(struct plist_node *, struct plist_head *);
145:	void plist_requeue(struct plist_node *, struct plist_head *);
File lib/radix-tree.c:
745:	void *__radix_tree_lookup(const struct xarray *, unsigned long, struct xa_node **, void ***);
873:	void __radix_tree_replace(struct xarray *, struct xa_node *, void **, void *);
1558:	void idr_destroy(struct idr *);
1475:	void **idr_get_free(struct xarray *, struct radix_tree_iter *, gfp_t, unsigned long);
1468:	void idr_preload(gfp_t);
1444:	void *radix_tree_delete(struct xarray *, unsigned long);
1412:	void *radix_tree_delete_item(struct xarray *, unsigned long, void *);
1261:	unsigned int radix_tree_gang_lookup(const struct xarray *, void **, unsigned long, unsigned int);
1301:	unsigned int radix_tree_gang_lookup_tag(const struct xarray *, void **, unsigned long, unsigned int, unsigned int);
1342:	unsigned int radix_tree_gang_lookup_tag_slot(const struct xarray *, void ***, unsigned long, unsigned int, unsigned int);
1593:	void radix_tree_init(void);
701:	int radix_tree_insert(struct xarray *, unsigned long, void *);
1393:	void radix_tree_iter_delete(struct xarray *, struct radix_tree_iter *, void **);
929:	void radix_tree_iter_replace(struct xarray *, const struct radix_tree_iter *, void **, void *);
1134:	void **radix_tree_iter_resume(void **, struct radix_tree_iter *);
1058:	void radix_tree_iter_tag_clear(struct xarray *, const struct radix_tree_iter *, unsigned int);
815:	void *radix_tree_lookup(const struct xarray *, unsigned long);
792:	void **radix_tree_lookup_slot(const struct xarray *, unsigned long);
376:	int radix_tree_maybe_preload(gfp_t);
1153:	void **radix_tree_next_chunk(const struct xarray *, struct radix_tree_iter *, unsigned int);
288:	void radix_tree_node_rcu_free(struct callback_head *);
363:	int radix_tree_preload(gfp_t);
912:	void radix_tree_replace_slot(struct xarray *, void **, void *);
1027:	void *radix_tree_tag_clear(struct xarray *, unsigned long, unsigned int);
1079:	int radix_tree_tag_get(const struct xarray *, unsigned long, unsigned int);
965:	void *radix_tree_tag_set(struct xarray *, unsigned long, unsigned int);
1455:	int radix_tree_tagged(const struct xarray *, unsigned int);
File lib/random32.c:
74:	void prandom_bytes_state(struct rnd_state *, void *, size_t);
110:	void prandom_seed_full_state(struct rnd_state *);
52:	u32 prandom_u32_state(struct rnd_state *);
File lib/ratelimit.c:
27:	int ___ratelimit(struct ratelimit_state *, const char *);
File lib/rbtree.c:
410:	void __rb_erase_color(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
456:	void __rb_insert_augmented(struct rb_node *, struct rb_root *, void (*)(struct rb_node *, struct rb_node *));
440:	void rb_erase(struct rb_node *, struct rb_root *);
466:	struct rb_node *rb_first(const struct rb_root *);
623:	struct rb_node *rb_first_postorder(const struct rb_root *);
434:	void rb_insert_color(struct rb_node *, struct rb_root *);
479:	struct rb_node *rb_last(const struct rb_root *);
492:	struct rb_node *rb_next(const struct rb_node *);
604:	struct rb_node *rb_next_postorder(const struct rb_node *);
524:	struct rb_node *rb_prev(const struct rb_node *);
553:	void rb_replace_node(struct rb_node *, struct rb_node *, struct rb_root *);
570:	void rb_replace_node_rcu(struct rb_node *, struct rb_node *, struct rb_root *);
File lib/refcount.c:
144:	bool refcount_dec_and_lock(refcount_t *, spinlock_t *);
172:	bool refcount_dec_and_lock_irqsave(refcount_t *, spinlock_t *, unsigned long *);
113:	bool refcount_dec_and_mutex_lock(refcount_t *, struct mutex *);
55:	bool refcount_dec_if_one(refcount_t *);
74:	bool refcount_dec_not_one(refcount_t *);
13:	void refcount_warn_saturate(refcount_t *, enum refcount_saturation_type);
File lib/rhashtable.c:
1178:	struct rhash_lock_head **__rht_bucket_nested(const struct bucket_table *, unsigned int);
1172:	void rhashtable_destroy(struct rhashtable *);
1134:	void rhashtable_free_and_destroy(struct rhashtable *, void (*)(void *, void *), void *);
1019:	int rhashtable_init(struct rhashtable *, const struct rhashtable_params *);
633:	void *rhashtable_insert_slow(struct rhashtable *, const void *, struct rhash_head *);
669:	void rhashtable_walk_enter(struct rhashtable *, struct rhashtable_iter *);
691:	void rhashtable_walk_exit(struct rhashtable_iter *);
863:	void *rhashtable_walk_next(struct rhashtable_iter *);
902:	void *rhashtable_walk_peek(struct rhashtable_iter *);
718:	int rhashtable_walk_start_check(struct rhashtable_iter *);
934:	void rhashtable_walk_stop(struct rhashtable_iter *);
1090:	int rhltable_init(struct rhltable *, const struct rhashtable_params *);
1207:	struct rhash_lock_head **rht_bucket_nested(const struct bucket_table *, unsigned int);
1218:	struct rhash_lock_head **rht_bucket_nested_insert(struct rhashtable *, struct bucket_table *, unsigned int);
File lib/sbitmap.c:
486:	int __sbitmap_queue_get(struct sbitmap_queue *);
492:	unsigned long __sbitmap_queue_get_batch(struct sbitmap_queue *, int, unsigned int *);
739:	void sbitmap_add_wait_queue(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
292:	bool sbitmap_any_bit_set(const struct sbitmap *);
353:	void sbitmap_bitmap_show(struct sbitmap *, struct seq_file *);
751:	void sbitmap_del_wait_queue(struct sbq_wait *);
773:	void sbitmap_finish_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *);
221:	int sbitmap_get(struct sbitmap *);
275:	int sbitmap_get_shallow(struct sbitmap *, unsigned long);
83:	int sbitmap_init_node(struct sbitmap *, unsigned int, int, gfp_t, int, bool, bool);
761:	void sbitmap_prepare_to_wait(struct sbitmap_queue *, struct sbq_wait_state *, struct sbq_wait *, int);
656:	void sbitmap_queue_clear(struct sbitmap_queue *, unsigned int, unsigned int);
622:	void sbitmap_queue_clear_batch(struct sbitmap_queue *, int, int *, int);
546:	int sbitmap_queue_get_shallow(struct sbitmap_queue *, unsigned int);
422:	int sbitmap_queue_init_node(struct sbitmap_queue *, unsigned int, int, bool, gfp_t, int);
555:	void sbitmap_queue_min_shallow_depth(struct sbitmap_queue *, unsigned int);
463:	void sbitmap_queue_recalculate_wake_batch(struct sbitmap_queue *, unsigned int);
479:	void sbitmap_queue_resize(struct sbitmap_queue *, unsigned int);
705:	void sbitmap_queue_show(struct sbitmap_queue *, struct seq_file *);
684:	void sbitmap_queue_wake_all(struct sbitmap_queue *);
595:	void sbitmap_queue_wake_up(struct sbitmap_queue *, int);
123:	void sbitmap_resize(struct sbitmap *, unsigned int);
331:	void sbitmap_show(struct sbitmap *, struct seq_file *);
325:	unsigned int sbitmap_weight(const struct sbitmap *);
File lib/scatterlist.c:
282:	int __sg_alloc_table(struct sg_table *, unsigned int, unsigned int, struct scatterlist *, unsigned int, gfp_t, sg_alloc_fn *);
193:	void __sg_free_table(struct sg_table *, unsigned int, unsigned int, sg_free_fn *, unsigned int);
763:	bool __sg_page_iter_dma_next(struct sg_dma_page_iter *);
739:	bool __sg_page_iter_next(struct sg_page_iter *);
722:	void __sg_page_iter_start(struct sg_page_iter *, struct scatterlist *, unsigned int, unsigned long);
451:	int sg_alloc_append_table_from_pages(struct sg_append_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, unsigned int, gfp_t);
371:	int sg_alloc_table(struct sg_table *, unsigned int, gfp_t);
575:	int sg_alloc_table_from_pages_segment(struct sg_table *, struct page **, unsigned int, unsigned int, unsigned long, unsigned int, gfp_t);
958:	size_t sg_copy_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t, bool);
1004:	size_t sg_copy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t);
1021:	size_t sg_copy_to_buffer(struct scatterlist *, unsigned int, void *, size_t);
241:	void sg_free_append_table(struct sg_append_table *);
254:	void sg_free_table(struct sg_table *);
138:	void sg_init_one(struct scatterlist *, const void *, unsigned int);
124:	void sg_init_table(struct scatterlist *, unsigned int);
101:	struct scatterlist *sg_last(struct scatterlist *, unsigned int);
883:	bool sg_miter_next(struct sg_mapping_iter *);
847:	bool sg_miter_skip(struct sg_mapping_iter *, off_t);
796:	void sg_miter_start(struct sg_mapping_iter *, struct scatterlist *, unsigned int, unsigned int);
919:	void sg_miter_stop(struct sg_mapping_iter *);
45:	int sg_nents(struct scatterlist *);
68:	int sg_nents_for_len(struct scatterlist *, u64);
23:	struct scatterlist *sg_next(struct scatterlist *);
1039:	size_t sg_pcopy_from_buffer(struct scatterlist *, unsigned int, const void *, size_t, off_t);
1057:	size_t sg_pcopy_to_buffer(struct scatterlist *, unsigned int, void *, size_t, off_t);
1073:	size_t sg_zero_buffer(struct scatterlist *, unsigned int, size_t, off_t);
662:	struct scatterlist *sgl_alloc(unsigned long long, gfp_t, unsigned int *);
608:	struct scatterlist *sgl_alloc_order(unsigned long long, unsigned int, bool, gfp_t, unsigned int *);
714:	void sgl_free(struct scatterlist *);
682:	void sgl_free_n_order(struct scatterlist *, int, int);
704:	void sgl_free_order(struct scatterlist *, int);
File lib/seq_buf.c:
114:	int seq_buf_bprintf(struct seq_buf *, const char *, const u32 *);
361:	int seq_buf_hex_dump(struct seq_buf *, const char *, int, int, int, const void *, size_t, bool);
270:	int seq_buf_path(struct seq_buf *, const struct path *, const char *);
40:	int seq_buf_print_seq(struct seq_file *, struct seq_buf *);
83:	int seq_buf_printf(struct seq_buf *, const char *, ...);
170:	int seq_buf_putc(struct seq_buf *, unsigned char);
194:	int seq_buf_putmem(struct seq_buf *, const void *, unsigned int);
222:	int seq_buf_putmem_hex(struct seq_buf *, const void *, unsigned int);
142:	int seq_buf_puts(struct seq_buf *, const char *);
311:	int seq_buf_to_user(struct seq_buf *, char *, int);
57:	int seq_buf_vprintf(struct seq_buf *, const char *, va_list);
File lib/show_mem.c:
11:	void __show_mem(unsigned int, nodemask_t *, int);
File lib/siphash.c:
279:	u32 __hsiphash_unaligned(const void *, size_t, const hsiphash_key_t *);
79:	u64 __siphash_unaligned(const void *, size_t, const siphash_key_t *);
316:	u32 hsiphash_1u32(const u32, const hsiphash_key_t *);
330:	u32 hsiphash_2u32(const u32, const u32, const hsiphash_key_t *);
348:	u32 hsiphash_3u32(const u32, const u32, const u32, const hsiphash_key_t *);
369:	u32 hsiphash_4u32(const u32, const u32, const u32, const u32, const hsiphash_key_t *);
207:	u64 siphash_1u32(const u32, const siphash_key_t *);
116:	u64 siphash_1u64(const u64, const siphash_key_t *);
133:	u64 siphash_2u64(const u64, const u64, const siphash_key_t *);
215:	u64 siphash_3u32(const u32, const u32, const u32, const siphash_key_t *);
155:	u64 siphash_3u64(const u64, const u64, const u64, const siphash_key_t *);
183:	u64 siphash_4u64(const u64, const u64, const u64, const u64, const siphash_key_t *);
File lib/smp_processor_id.c:
64:	void __this_cpu_preempt_check(const char *);
58:	unsigned int debug_smp_processor_id(void);
File lib/sort.c:
281:	void sort(void *, size_t, size_t, cmp_func_t, swap_func_t);
210:	void sort_r(void *, size_t, size_t, cmp_r_func_t, swap_r_func_t, const void *);
File lib/stackdepot.c:
419:	depot_stack_handle_t __stack_depot_save(unsigned long *, unsigned int, unsigned int, gfp_t, bool);
194:	int stack_depot_early_init(void);
364:	unsigned int stack_depot_fetch(depot_stack_handle_t, unsigned long **);
82:	unsigned int stack_depot_get_extra_bits(depot_stack_handle_t);
231:	int stack_depot_init(void);
344:	void stack_depot_print(depot_stack_handle_t);
529:	depot_stack_handle_t stack_depot_save(unsigned long *, unsigned int, gfp_t);
325:	int stack_depot_snprint(depot_stack_handle_t, char *, size_t, int);
186:	void stack_depot_want_early_init(void);
File lib/string.c:
713:	int bcmp(const void *, const void *, size_t);
838:	void *memchr_inv(const void *, int, size_t);
730:	void *memscan(void *, int, size_t);
556:	void *memset16(uint16_t *, uint16_t, size_t);
578:	void *memset32(uint32_t *, uint32_t, size_t);
600:	void *memset64(uint64_t *, uint64_t, size_t);
207:	char *stpcpy(char * restrict, const char * restrict);
65:	int strcasecmp(const char *, const char *);
216:	char *strcat(char *, const char *);
346:	char *strchrnul(const char *, int);
79:	char *strcpy(char *, const char *);
462:	__kernel_size_t strcspn(const char *, const char *);
250:	size_t strlcat(char *, const char *, size_t);
107:	size_t strlcpy(char *, const char *, size_t);
39:	int strncasecmp(const char *, const char *, size_t);
230:	char *strncat(char *, const char *, size_t);
400:	char *strnchr(const char *, size_t, int);
365:	char *strnchrnul(const char *, size_t, int);
91:	char *strncpy(char *, const char *, size_t);
777:	char *strnstr(const char *, const char *, size_t);
481:	char *strpbrk(const char *, const char *);
122:	ssize_t strscpy(char *, const char *, size_t);
508:	char *strsep(char **, const char *);
443:	__kernel_size_t strspn(const char *, const char *);
751:	char *strstr(const char *, const char *);
File lib/string_helpers.c:
963:	int __sysfs_match_string(const char * const *, size_t, const char *);
790:	char **devm_kasprintf_strarray(struct device *, const char *, size_t);
734:	char **kasprintf_strarray(gfp_t, const char *, size_t);
765:	void kfree_strarray(char **, size_t);
638:	char *kstrdup_quotable(const char *, gfp_t);
666:	char *kstrdup_quotable_cmdline(struct task_struct *, gfp_t);
699:	char *kstrdup_quotable_file(struct file *, gfp_t);
929:	int match_string(const char * const *, size_t, const char *);
1005:	void memcpy_and_pad(void *, size_t, const void *, size_t, int);
147:	int parse_int_array_user(const char *, size_t, int **);
851:	char *skip_spaces(const char *);
867:	char *strim(char *);
564:	int string_escape_mem(const char *, size_t, char *, size_t, unsigned int, const char *);
35:	void string_get_size(u64, u64, const enum string_size_units, char *, int);
313:	int string_unescape(char *, char *, size_t, unsigned int);
988:	char *strreplace(char *, char, char);
831:	ssize_t strscpy_pad(char *, const char *, size_t);
895:	bool sysfs_streq(const char *, const char *);
File lib/strncpy_from_user.c:
113:	long strncpy_from_user(char *, const char *, long);
File lib/strnlen_user.c:
92:	long strnlen_user(const char *, long);
File lib/syscall.c:
69:	int task_current_syscall(struct task_struct *, struct syscall_info *);
File lib/timerqueue.c:
35:	bool timerqueue_add(struct timerqueue_head *, struct timerqueue_node *);
53:	bool timerqueue_del(struct timerqueue_head *, struct timerqueue_node *);
73:	struct timerqueue_node *timerqueue_iterate_next(struct timerqueue_node *);
File lib/usercopy.c:
55:	int check_zeroed_user(const void *, size_t);
File lib/uuid.c:
43:	void generate_random_guid(unsigned char *);
33:	void generate_random_uuid(unsigned char *);
60:	void guid_gen(guid_t *);
123:	int guid_parse(const char *, guid_t *);
68:	void uuid_gen(uuid_t *);
88:	bool uuid_is_valid(const char *);
129:	int uuid_parse(const char *, uuid_t *);
File lib/vsprintf.c:
3389:	int bprintf(u32 *, size_t, const char *, ...);
3190:	int bstr_printf(char *, size_t, const char *, const u32 *);
2225:	int no_hash_pointers_enable(char *);
377:	int num_to_str(char *, int, unsigned long long, unsigned int);
800:	int ptr_to_hashval(const void *, unsigned long *);
2949:	int scnprintf(char *, size_t, const char *, ...);
123:	long simple_strtol(const char *, char **, unsigned int);
155:	long long simple_strtoll(const char *, char **, unsigned int);
109:	unsigned long simple_strtoul(const char *, char **, unsigned int);
95:	unsigned long long simple_strtoull(const char *, char **, unsigned int);
2925:	int snprintf(char *, size_t, const char *, ...);
2994:	int sprintf(char *, const char *, ...);
3689:	int sscanf(const char *, const char *, ...);
3031:	int vbin_printf(u32 *, size_t, const char *, va_list);
2895:	int vscnprintf(char *, size_t, const char *, va_list);
2726:	int vsnprintf(char *, size_t, const char *, va_list);
2976:	int vsprintf(char *, const char *, va_list);
3410:	int vsscanf(const char *, const char *, va_list);
File lib/xarray.c:
1812:	int __xa_alloc(struct xarray *, u32 *, void *, struct xa_limit, gfp_t);
1861:	int __xa_alloc_cyclic(struct xarray *, u32 *, void *, struct xa_limit, u32 *, gfp_t);
1918:	void __xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
1605:	void *__xa_cmpxchg(struct xarray *, unsigned long, void *, void *, gfp_t);
1494:	void *__xa_erase(struct xarray *, unsigned long);
1643:	int __xa_insert(struct xarray *, unsigned long, void *, gfp_t);
1900:	void __xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1540:	void *__xa_store(struct xarray *, unsigned long, void *, gfp_t);
1191:	void *__xas_next(struct xa_state *);
1152:	void *__xas_prev(struct xa_state *);
1988:	void xa_clear_mark(struct xarray *, unsigned long, xa_mark_t);
2181:	void xa_delete_node(struct xa_node *, xa_update_node_t);
2207:	void xa_destroy(struct xarray *);
1513:	void *xa_erase(struct xarray *, unsigned long);
2160:	unsigned int xa_extract(struct xarray *, void **, unsigned long, unsigned long, unsigned int, xa_mark_t);
2013:	void *xa_find(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
2063:	void *xa_find_after(struct xarray *, unsigned long *, unsigned long, xa_mark_t);
1940:	bool xa_get_mark(struct xarray *, unsigned long, xa_mark_t);
1761:	int xa_get_order(struct xarray *, unsigned long);
1456:	void *xa_load(struct xarray *, unsigned long);
1970:	void xa_set_mark(struct xarray *, unsigned long, xa_mark_t);
1577:	void *xa_store(struct xarray *, unsigned long, void *, gfp_t);
1718:	void *xa_store_range(struct xarray *, unsigned long, unsigned long, void *, gfp_t);
907:	void xas_clear_mark(const struct xa_state *, xa_mark_t);
706:	void xas_create_range(struct xa_state *);
270:	void xas_destroy(struct xa_state *);
1239:	void *xas_find(struct xa_state *, unsigned long);
1396:	void *xas_find_conflict(struct xa_state *);
1308:	void *xas_find_marked(struct xa_state *, unsigned long, xa_mark_t);
859:	bool xas_get_mark(const struct xa_state *, xa_mark_t);
941:	void xas_init_marks(const struct xa_state *);
233:	void *xas_load(struct xa_state *);
300:	bool xas_nomem(struct xa_state *, gfp_t);
1122:	void xas_pause(struct xa_state *);
878:	void xas_set_mark(const struct xa_state *, xa_mark_t);
1056:	void xas_split(struct xa_state *, void *, unsigned int);
1005:	void xas_split_alloc(struct xa_state *, void *, unsigned int, gfp_t);
777:	void *xas_store(struct xa_state *, void *);
File lib/xxhash.c:
102:	uint32_t xxh32(const void *, const size_t, const uint32_t);
79:	void xxh32_copy_state(struct xxh32_state *, const struct xxh32_state *);
339:	uint32_t xxh32_digest(const struct xxh32_state *);
242:	void xxh32_reset(struct xxh32_state *, const uint32_t);
270:	int xxh32_update(struct xxh32_state *, const void *, const size_t);
172:	uint64_t xxh64(const void *, const size_t, const uint64_t);
85:	void xxh64_copy_state(struct xxh64_state *, const struct xxh64_state *);
444:	uint64_t xxh64_digest(const struct xxh64_state *);
256:	void xxh64_reset(struct xxh64_state *, const uint64_t);
377:	int xxh64_update(struct xxh64_state *, const void *, const size_t);
File lib/xz/xz_dec_bcj.c:
527:	struct xz_dec_bcj *xz_dec_bcj_create(bool);
536:	enum xz_ret xz_dec_bcj_reset(struct xz_dec_bcj *, uint8_t);
417:	enum xz_ret xz_dec_bcj_run(struct xz_dec_bcj *, struct xz_dec_lzma2 *, struct xz_buf *);
File lib/xz/xz_dec_lzma2.c:
1141:	struct xz_dec_lzma2 *xz_dec_lzma2_create(enum xz_mode, uint32_t);
1201:	void xz_dec_lzma2_end(struct xz_dec_lzma2 *);
1165:	enum xz_ret xz_dec_lzma2_reset(struct xz_dec_lzma2 *, uint8_t);
964:	enum xz_ret xz_dec_lzma2_run(struct xz_dec_lzma2 *, struct xz_buf *);
File lib/xz/xz_dec_stream.c:
828:	void xz_dec_end(struct xz_dec *);
786:	struct xz_dec *xz_dec_init(enum xz_mode, uint32_t);
816:	void xz_dec_reset(struct xz_dec *);
750:	enum xz_ret xz_dec_run(struct xz_dec *, struct xz_buf *);
File lib/zlib_inflate/inffast.c:
67:	void inflate_fast(z_streamp, unsigned int);
File lib/zlib_inflate/inflate.c:
331:	int zlib_inflate(z_streamp, int);
770:	int zlib_inflateEnd(z_streamp);
785:	int zlib_inflateIncomp(z_stream *);
59:	int zlib_inflateInit2(z_streamp, int);
33:	int zlib_inflateReset(z_streamp);
28:	int zlib_inflate_workspacesize(void);
File lib/zlib_inflate/inftrees.c:
23:	int zlib_inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *);
File lib/zlib_inflate/infutil.c:
9:	int zlib_inflate_blob(void *, unsigned int, const void *, unsigned int);
File lib/zstd/common/entropy_common.c:
32:	const char *FSE_getErrorName(size_t);
31:	unsigned int FSE_isError(size_t);
236:	size_t FSE_readNCount(short *, unsigned int *, unsigned int *, const void *, size_t);
223:	size_t FSE_readNCount_bmi2(short *, unsigned int *, unsigned int *, const void *, size_t, int);
27:	unsigned int FSE_versionNumber(void);
35:	const char *HUF_getErrorName(size_t);
34:	unsigned int HUF_isError(size_t);
251:	size_t HUF_readStats(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t);
344:	size_t HUF_readStats_wksp(BYTE *, size_t, U32 *, U32 *, U32 *, const void *, size_t, void *, size_t, int);
File lib/zstd/common/error_private.c:
15:	const char *ERR_getErrorString(ERR_enum);
File lib/zstd/common/fse_decompress.c:
205:	size_t FSE_buildDTable_raw(FSE_DTable *, unsigned int);
187:	size_t FSE_buildDTable_rle(FSE_DTable *, BYTE);
176:	size_t FSE_buildDTable_wksp(FSE_DTable *, const short *, unsigned int, unsigned int, void *, size_t);
60:	FSE_DTable *FSE_createDTable(unsigned int);
294:	size_t FSE_decompress_usingDTable(void *, size_t, const void *, size_t, const FSE_DTable *);
308:	size_t FSE_decompress_wksp(void *, size_t, const void *, size_t, unsigned int, void *, size_t);
374:	size_t FSE_decompress_wksp_bmi2(void *, size_t, const void *, size_t, unsigned int, void *, size_t, int);
66:	void FSE_freeDTable(FSE_DTable *);
File lib/zstd/common/zstd_common.c:
63:	void *ZSTD_customCalloc(size_t, ZSTD_customMem);
75:	void ZSTD_customFree(void *, ZSTD_customMem);
56:	void *ZSTD_customMalloc(size_t, ZSTD_customMem);
45:	ZSTD_ErrorCode ZSTD_getErrorCode(size_t);
41:	const char *ZSTD_getErrorName(size_t);
49:	const char *ZSTD_getErrorString(ZSTD_ErrorCode);
37:	unsigned int ZSTD_isError(size_t);
25:	unsigned int ZSTD_versionNumber(void);
27:	const char *ZSTD_versionString(void);
File lib/zstd/decompress/huf_decompress.c:
759:	size_t HUF_decompress1X1_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1689:	size_t HUF_decompress1X1_DCtx_wksp_bmi2(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t, int);
749:	size_t HUF_decompress1X1_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1465:	size_t HUF_decompress1X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1455:	size_t HUF_decompress1X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1640:	size_t HUF_decompress1X_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1521:	size_t HUF_decompress1X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1671:	size_t HUF_decompress1X_usingDTable_bmi2(void *, size_t, const void *, size_t, const HUF_DTable *, int);
798:	size_t HUF_decompress4X1_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
774:	size_t HUF_decompress4X1_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1506:	size_t HUF_decompress4X2_DCtx_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1481:	size_t HUF_decompress4X2_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1614:	size_t HUF_decompress4X_hufOnly_wksp(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t);
1719:	size_t HUF_decompress4X_hufOnly_wksp_bmi2(HUF_DTable *, void *, size_t, const void *, size_t, void *, size_t, int);
1540:	size_t HUF_decompress4X_usingDTable(void *, size_t, const void *, size_t, const HUF_DTable *);
1702:	size_t HUF_decompress4X_usingDTable_bmi2(void *, size_t, const void *, size_t, const HUF_DTable *, int);
333:	size_t HUF_readDTableX1_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
338:	size_t HUF_readDTableX1_wksp_bmi2(HUF_DTable *, const void *, size_t, void *, size_t, int);
1041:	size_t HUF_readDTableX2_wksp(HUF_DTable *, const void *, size_t, void *, size_t);
1048:	size_t HUF_readDTableX2_wksp_bmi2(HUF_DTable *, const void *, size_t, void *, size_t, int);
1589:	U32 HUF_selectDecoder(size_t, size_t);
File lib/zstd/decompress/zstd_ddict.c:
43:	const void *ZSTD_DDict_dictContent(const ZSTD_DDict *);
49:	size_t ZSTD_DDict_dictSize(const ZSTD_DDict *);
55:	void ZSTD_copyDDictParameters(ZSTD_DCtx *, const ZSTD_DDict *);
167:	ZSTD_DDict *ZSTD_createDDict(const void *, size_t);
142:	ZSTD_DDict *ZSTD_createDDict_advanced(const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e, ZSTD_customMem);
177:	ZSTD_DDict *ZSTD_createDDict_byReference(const void *, size_t);
222:	size_t ZSTD_estimateDDictSize(size_t, ZSTD_dictLoadMethod_e);
209:	size_t ZSTD_freeDDict(ZSTD_DDict *);
237:	unsigned int ZSTD_getDictID_fromDDict(const ZSTD_DDict *);
184:	const ZSTD_DDict *ZSTD_initStaticDDict(void *, size_t, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
227:	size_t ZSTD_sizeof_DDict(const ZSTD_DDict *);
File lib/zstd/decompress/zstd_decompress.c:
1676:	size_t ZSTD_DCtx_getParameter(ZSTD_DCtx *, ZSTD_dParameter, int *);
1532:	size_t ZSTD_DCtx_loadDictionary(ZSTD_DCtx *, const void *, size_t);
1511:	size_t ZSTD_DCtx_loadDictionary_advanced(ZSTD_DCtx *, const void *, size_t, ZSTD_dictLoadMethod_e, ZSTD_dictContentType_e);
1527:	size_t ZSTD_DCtx_loadDictionary_byReference(ZSTD_DCtx *, const void *, size_t);
1588:	size_t ZSTD_DCtx_refDDict(ZSTD_DCtx *, const ZSTD_DDict *);
1544:	size_t ZSTD_DCtx_refPrefix(ZSTD_DCtx *, const void *, size_t);
1537:	size_t ZSTD_DCtx_refPrefix_advanced(ZSTD_DCtx *, const void *, size_t, ZSTD_dictContentType_e);
1732:	size_t ZSTD_DCtx_reset(ZSTD_DCtx *, ZSTD_ResetDirective);
1624:	size_t ZSTD_DCtx_setFormat(ZSTD_DCtx *, ZSTD_format_e);
1612:	size_t ZSTD_DCtx_setMaxWindowSize(ZSTD_DCtx *, size_t);
1699:	size_t ZSTD_DCtx_setParameter(ZSTD_DCtx *, ZSTD_dParameter, int);
1508:	size_t ZSTD_DStreamInSize(void);
1509:	size_t ZSTD_DStreamOutSize(void);
327:	void ZSTD_copyDCtx(ZSTD_DCtx *, const ZSTD_DCtx *);
295:	ZSTD_DCtx *ZSTD_createDCtx(void);
290:	ZSTD_DCtx *ZSTD_createDCtx_advanced(ZSTD_customMem);
1484:	ZSTD_DStream *ZSTD_createDStream(void);
1495:	ZSTD_DStream *ZSTD_createDStream_advanced(ZSTD_customMem);
1629:	ZSTD_bounds ZSTD_dParam_getBounds(ZSTD_dParameter);
1754:	size_t ZSTD_decodingBufferSize_min(unsigned long long, unsigned long long);
1021:	size_t ZSTD_decompress(void *, size_t, const void *, size_t);
1376:	size_t ZSTD_decompressBegin(ZSTD_DCtx *);
1413:	size_t ZSTD_decompressBegin_usingDDict(ZSTD_DCtx *, const ZSTD_DDict *);
1400:	size_t ZSTD_decompressBegin_usingDict(ZSTD_DCtx *, const void *, size_t);
758:	unsigned long long ZSTD_decompressBound(const void *, size_t);
1093:	size_t ZSTD_decompressContinue(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1015:	size_t ZSTD_decompressDCtx(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1859:	size_t ZSTD_decompressStream(ZSTD_DStream *, ZSTD_outBuffer *, ZSTD_inBuffer *);
2119:	size_t ZSTD_decompressStream_simpleArgs(ZSTD_DCtx *, void *, size_t, size_t *, const void *, size_t, size_t *);
1468:	size_t ZSTD_decompress_usingDDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const ZSTD_DDict *);
989:	size_t ZSTD_decompress_usingDict(ZSTD_DCtx *, void *, size_t, const void *, size_t, const void *, size_t);
221:	size_t ZSTD_estimateDCtxSize(void);
1766:	size_t ZSTD_estimateDStreamSize(size_t);
1774:	size_t ZSTD_estimateDStreamSize_fromFrame(const void *, size_t);
586:	unsigned long long ZSTD_findDecompressedSize(const void *, size_t);
746:	size_t ZSTD_findFrameCompressedSize(const void *, size_t);
413:	size_t ZSTD_frameHeaderSize(const void *, size_t);
309:	size_t ZSTD_freeDCtx(ZSTD_DCtx *);
1500:	size_t ZSTD_freeDStream(ZSTD_DStream *);
635:	unsigned long long ZSTD_getDecompressedSize(const void *, size_t);
1436:	unsigned int ZSTD_getDictID_fromDict(const void *, size_t);
1456:	unsigned int ZSTD_getDictID_fromFrame(const void *, size_t);
521:	unsigned long long ZSTD_getFrameContentSize(const void *, size_t);
511:	size_t ZSTD_getFrameHeader(ZSTD_frameHeader *, const void *, size_t);
425:	size_t ZSTD_getFrameHeader_advanced(ZSTD_frameHeader *, const void *, size_t, ZSTD_format_e);
1562:	size_t ZSTD_initDStream(ZSTD_DStream *);
1571:	size_t ZSTD_initDStream_usingDDict(ZSTD_DStream *, const ZSTD_DDict *);
1553:	size_t ZSTD_initDStream_usingDict(ZSTD_DStream *, const void *, size_t);
266:	ZSTD_DCtx *ZSTD_initStaticDCtx(void *, size_t);
1490:	ZSTD_DStream *ZSTD_initStaticDStream(void *, size_t);
783:	size_t ZSTD_insertBlock(ZSTD_DCtx *, const void *, size_t);
366:	unsigned int ZSTD_isFrame(const void *, size_t);
380:	unsigned int ZSTD_isSkippableFrame(const void *, size_t);
1268:	size_t ZSTD_loadDEntropy(ZSTD_entropyDTables_t *, const void * const, const size_t);
1062:	ZSTD_nextInputType_e ZSTD_nextInputType(ZSTD_DCtx *);
1042:	size_t ZSTD_nextSrcSizeToDecompress(ZSTD_DCtx *);
561:	size_t ZSTD_readSkippableFrame(void *, size_t, unsigned int *, const void *, size_t);
1581:	size_t ZSTD_resetDStream(ZSTD_DStream *);
213:	size_t ZSTD_sizeof_DCtx(const ZSTD_DCtx *);
1749:	size_t ZSTD_sizeof_DStream(const ZSTD_DStream *);
File lib/zstd/decompress/zstd_decompress_block.c:
584:	void ZSTD_buildFSETable(ZSTD_seqSymbol *, const short *, unsigned int, const U32 *, const U8 *, unsigned int, void *, size_t, int);
2052:	void ZSTD_checkContinuity(ZSTD_DCtx *, const void *, size_t);
119:	size_t ZSTD_decodeLiteralsBlock(ZSTD_DCtx *, const void *, size_t, void *, size_t, const streaming_operation);
653:	size_t ZSTD_decodeSeqHeaders(ZSTD_DCtx *, int *, const void *, size_t);
2063:	size_t ZSTD_decompressBlock(ZSTD_DCtx *, void *, size_t, const void *, size_t);
1978:	size_t ZSTD_decompressBlock_internal(ZSTD_DCtx *, void *, size_t, const void *, size_t, const int, const streaming_operation);
56:	size_t ZSTD_getcBlockSize(const void *, size_t, blockProperties_t *);
File lib/zstd/zstd_decompress_module.c:
41:	size_t zstd_dctx_workspace_bound(void);
55:	size_t zstd_decompress_dctx(zstd_dctx *, void *, size_t, const void *, size_t);
84:	size_t zstd_decompress_stream(zstd_dstream *, zstd_out_buffer *, zstd_in_buffer *);
62:	size_t zstd_dstream_workspace_bound(size_t);
91:	size_t zstd_find_frame_compressed_size(const void *, size_t);
27:	zstd_error_code zstd_get_error_code(size_t);
33:	const char *zstd_get_error_name(size_t);
97:	size_t zstd_get_frame_header(zstd_frame_header *, const void *, size_t);
47:	zstd_dctx *zstd_init_dctx(void *, size_t);
68:	zstd_dstream *zstd_init_dstream(size_t, void *, size_t);
21:	unsigned int zstd_is_error(size_t);
78:	size_t zstd_reset_dstream(zstd_dstream *);
File mm/backing-dev.c:
919:	struct backing_dev_info *bdi_alloc(int);
1116:	const char *bdi_dev_name(struct backing_dev_info *);
971:	struct backing_dev_info *bdi_get_by_id(u64);
904:	int bdi_init(struct backing_dev_info *);
1094:	void bdi_put(struct backing_dev_info *);
1022:	int bdi_register(struct backing_dev_info *, const char *, ...);
987:	int bdi_register_va(struct backing_dev_info *, const char *, va_list);
1034:	void bdi_set_owner(struct backing_dev_info *, struct device *);
1054:	void bdi_unregister(struct backing_dev_info *);
1100:	struct backing_dev_info *inode_to_bdi(struct inode *);
849:	void wb_blkcg_offline(struct cgroup_subsys_state *);
715:	struct bdi_writeback *wb_get_create(struct backing_dev_info *, struct cgroup_subsys_state *, gfp_t);
682:	struct bdi_writeback *wb_get_lookup(struct backing_dev_info *, struct cgroup_subsys_state *);
829:	void wb_memcg_offline(struct mem_cgroup *);
385:	void wb_wakeup_delayed(struct bdi_writeback *);
File mm/cma.c:
424:	struct page *cma_alloc(struct cma *, unsigned long, unsigned int, bool);
238:	int cma_declare_contiguous_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, unsigned int, bool, const char *, struct cma **, int);
576:	int cma_for_each_area(int (*)(struct cma *, void *), void *);
42:	phys_addr_t cma_get_base(const struct cma *);
52:	const char *cma_get_name(const struct cma *);
47:	unsigned long cma_get_size(const struct cma *);
173:	int cma_init_reserved_mem(phys_addr_t, phys_addr_t, unsigned int, const char *, struct cma **);
526:	bool cma_pages_valid(struct cma *, const struct page *, unsigned long);
555:	bool cma_release(struct cma *, const struct page *, unsigned long);
156:	void cma_reserve_pages_on_error(struct cma *);
File mm/compaction.c:
111:	bool PageMovable(struct page *);
135:	void __ClearPageMovable(struct page *);
127:	void __SetPageMovable(struct page *, const struct movable_operations *);
192:	void compaction_defer_reset(struct zone *, int, bool);
2722:	int compaction_proactiveness_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2777:	int compaction_register_node(struct node *);
2219:	enum compact_result compaction_suitable(struct zone *, int, unsigned int, int);
2782:	void compaction_unregister_node(struct node *);
2257:	bool compaction_zonelist_suitable(struct alloc_context *, int, int);
681:	unsigned long isolate_freepages_range(struct compact_control *, unsigned long, unsigned long);
1211:	int isolate_migratepages_range(struct compact_control *, unsigned long, unsigned long);
2997:	void kcompactd_run(int);
3015:	void kcompactd_stop(int);
377:	void reset_isolation_suitable(pg_data_t *);
2750:	int sysctl_compaction_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2569:	enum compact_result try_to_compact_pages(gfp_t, unsigned int, unsigned int, const struct alloc_context *, enum compact_priority, struct page **);
2892:	void wakeup_kcompactd(pg_data_t *, int, int);
File mm/debug.c:
127:	void dump_page(struct page *, const char *);
File mm/dmapool.c:
314:	void *dma_pool_alloc(struct dma_pool *, gfp_t, dma_addr_t *);
130:	struct dma_pool *dma_pool_create(const char *, struct device *, size_t, size_t, size_t);
267:	void dma_pool_destroy(struct dma_pool *);
404:	void dma_pool_free(struct dma_pool *, void *, dma_addr_t);
498:	struct dma_pool *dmam_pool_create(const char *, struct device *, size_t, size_t, size_t);
523:	void dmam_pool_destroy(struct dma_pool *);
File mm/early_ioremap.c:
250:	void copy_from_early_mem(void *, phys_addr_t, unsigned long);
213:	void *early_ioremap(resource_size_t, unsigned long);
42:	void early_ioremap_reset(void);
71:	void early_ioremap_setup(void);
164:	void early_iounmap(void *, unsigned long);
220:	void *early_memremap(resource_size_t, unsigned long);
35:	pgprot_t early_memremap_pgprot_adjust(resource_size_t, unsigned long, pgprot_t);
229:	void *early_memremap_ro(resource_size_t, unsigned long);
296:	void early_memunmap(void *, unsigned long);
File mm/fadvise.c:
205:	long __arm64_sys_fadvise64_64(const struct pt_regs *);
32:	int generic_fadvise(struct file *, loff_t, loff_t, int);
191:	int ksys_fadvise64_64(int, loff_t, loff_t, int);
180:	int vfs_fadvise(struct file *, loff_t, loff_t, int);
File mm/filemap.c:
840:	int __filemap_add_folio(struct address_space *, struct folio *, unsigned long, gfp_t, void **);
411:	int __filemap_fdatawrite_range(struct address_space *, loff_t, loff_t, int);
1910:	struct folio *__filemap_get_folio(struct address_space *, unsigned long, int, gfp_t);
217:	void __filemap_remove_folio(struct folio *, void *);
692:	void __filemap_set_wb_err(struct address_space *, int);
1658:	void __folio_lock(struct folio *);
1665:	int __folio_lock_killable(struct folio *);
1709:	bool __folio_lock_or_retry(struct folio *, struct mm_struct *, unsigned int);
3834:	ssize_t __generic_file_write_iter(struct kiocb *, struct iov_iter *);
318:	void delete_from_page_cache_batch(struct address_space *, struct folio_batch *);
3635:	void dio_warn_stale_pagecache(struct file *);
724:	int file_check_and_advance_wb_err(struct file *);
591:	int file_fdatawait_range(struct file *, loff_t, loff_t);
768:	int file_write_and_wait_range(struct file *, loff_t, loff_t);
928:	int filemap_add_folio(struct address_space *, struct folio *, unsigned long, gfp_t);
957:	struct folio *filemap_alloc_folio(gfp_t, unsigned int);
344:	int filemap_check_errors(struct address_space *);
3118:	vm_fault_t filemap_fault(struct vm_fault *);
614:	int filemap_fdatawait_keep_errors(struct address_space *);
545:	int filemap_fdatawait_range(struct address_space *, loff_t, loff_t);
567:	int filemap_fdatawait_range_keep_errors(struct address_space *, loff_t, loff_t);
430:	int filemap_fdatawrite(struct address_space *);
436:	int filemap_fdatawrite_range(struct address_space *, loff_t, loff_t);
378:	int filemap_fdatawrite_wbc(struct address_space *, struct writeback_control *);
452:	int filemap_flush(struct address_space *);
226:	void filemap_free_folio(struct address_space *, struct folio *);
2163:	unsigned int filemap_get_folios(struct address_space *, unsigned long *, unsigned long, struct folio_batch *);
2226:	unsigned int filemap_get_folios_contig(struct address_space *, unsigned long *, unsigned long, struct folio_batch *);
985:	void filemap_invalidate_lock_two(struct address_space *, struct address_space *);
1005:	void filemap_invalidate_unlock_two(struct address_space *, struct address_space *);
3356:	vm_fault_t filemap_map_pages(struct vm_fault *, unsigned long, unsigned long);
3433:	vm_fault_t filemap_page_mkwrite(struct vm_fault *);
470:	bool filemap_range_has_page(struct address_space *, loff_t, loff_t);
627:	bool filemap_range_has_writeback(struct address_space *, loff_t, loff_t);
2660:	ssize_t filemap_read(struct kiocb *, struct iov_iter *, ssize_t);
3958:	bool filemap_release_folio(struct folio *, gfp_t);
248:	void filemap_remove_folio(struct folio *);
665:	int filemap_write_and_wait_range(struct address_space *, loff_t, loff_t);
2052:	unsigned int find_get_entries(struct address_space *, unsigned long *, unsigned long, struct folio_batch *, unsigned long *);
2299:	unsigned int find_get_pages_range_tag(struct address_space *, unsigned long *, unsigned long, xa_mark_t, unsigned int, struct page **);
2098:	unsigned int find_lock_entries(struct address_space *, unsigned long *, unsigned long, struct folio_batch *, unsigned long *);
1476:	void folio_add_wait_queue(struct folio *, wait_queue_entry_t *);
1542:	void folio_end_private_2(struct folio *);
1593:	void folio_end_writeback(struct folio *);
1520:	void folio_unlock(struct folio *);
1439:	void folio_wait_bit(struct folio *, int);
1445:	int folio_wait_bit_killable(struct folio *, int);
1557:	void folio_wait_private_2(struct folio *);
1575:	int folio_wait_private_2_killable(struct folio *);
3653:	ssize_t generic_file_direct_write(struct kiocb *, struct iov_iter *);
3467:	int generic_file_mmap(struct file *, struct vm_area_struct *);
2790:	ssize_t generic_file_read_iter(struct kiocb *, struct iov_iter *);
3481:	int generic_file_readonly_mmap(struct file *, struct vm_area_struct *);
3923:	ssize_t generic_file_write_iter(struct kiocb *, struct iov_iter *);
3735:	ssize_t generic_perform_write(struct kiocb *, struct iov_iter *);
2902:	loff_t mapping_seek_hole_data(struct address_space *, loff_t, loff_t, int);
1373:	void migration_entry_wait_on_locked(swp_entry_t, pte_t *, spinlock_t *);
1761:	unsigned long page_cache_next_miss(struct address_space *, unsigned long, unsigned long);
1797:	unsigned long page_cache_prev_miss(struct address_space *, unsigned long, unsigned long);
1628:	void page_endio(struct page *, bool, int);
1034:	void pagecache_init(void);
3582:	struct folio *read_cache_folio(struct address_space *, unsigned long, filler_t *, struct file *);
3601:	struct page *read_cache_page(struct address_space *, unsigned long, filler_t *, struct file *);
3624:	struct page *read_cache_page_gfp(struct address_space *, unsigned long, gfp_t);
803:	void replace_page_cache_folio(struct folio *, struct folio *);
File mm/folio-compat.c:
60:	int __set_page_dirty_nobuffers(struct page *);
85:	int add_to_page_cache_lru(struct page *, struct address_space *, unsigned long, gfp_t);
66:	bool clear_page_dirty_for_io(struct page *);
24:	void end_page_writeback(struct page *);
105:	struct page *grab_cache_page_write_begin(struct address_space *, unsigned long);
115:	int isolate_lru_page(struct page *);
79:	void lru_cache_add_inactive_or_unevictable(struct page *, struct vm_area_struct *);
42:	void mark_page_accessed(struct page *);
12:	struct address_space *page_mapping(struct page *);
93:	struct page *pagecache_get_page(struct address_space *, unsigned long, int, gfp_t);
122:	void putback_lru_page(struct page *);
72:	bool redirty_page_for_writepage(struct writeback_control *, struct page *);
54:	bool set_page_dirty(struct page *);
48:	bool set_page_writeback(struct page *);
18:	void unlock_page(struct page *);
36:	void wait_for_stable_page(struct page *);
30:	void wait_on_page_writeback(struct page *);
File mm/gup.c:
1602:	int __mm_populate(unsigned long, unsigned long, int);
1817:	size_t fault_in_readable(const char *, size_t);
1783:	size_t fault_in_safe_writeable(const char *, size_t);
1748:	size_t fault_in_subpage_writeable(char *, size_t);
1708:	size_t fault_in_writeable(char *, size_t);
1555:	long faultin_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, bool, int *);
1261:	int fixup_user_fault(struct mm_struct *, unsigned long, unsigned int, bool *);
812:	struct page *follow_page(struct vm_area_struct *, unsigned long, unsigned int);
1862:	struct page *get_dump_page(unsigned long);
2215:	long get_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
3014:	int get_user_pages_fast(unsigned long, int, unsigned int, struct page **);
2969:	int get_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
2176:	long get_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
2242:	long get_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
3158:	long pin_user_pages(unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **);
3047:	int pin_user_pages_fast(unsigned long, int, unsigned int, struct page **);
3068:	int pin_user_pages_fast_only(unsigned long, int, unsigned int, struct page **);
3123:	long pin_user_pages_remote(struct mm_struct *, unsigned long, unsigned long, unsigned int, struct page **, struct vm_area_struct **, int *);
3180:	long pin_user_pages_unlocked(unsigned long, unsigned long, struct page **, unsigned int);
1485:	long populate_vma_page_range(struct vm_area_struct *, unsigned long, unsigned long, int *);
124:	struct folio *try_grab_folio(struct page *, int, unsigned int);
214:	int try_grab_page(struct page *, unsigned int);
255:	void unpin_user_page(struct page *);
380:	void unpin_user_page_range_dirty_lock(struct page *, unsigned long, bool);
425:	void unpin_user_pages(struct page **, unsigned long);
314:	void unpin_user_pages_dirty_lock(struct page **, unsigned long, bool);
File mm/huge_memory.c:
1956:	spinlock_t *__pmd_trans_huge_lock(pmd_t *, struct vm_area_struct *);
1973:	spinlock_t *__pud_trans_huge_lock(pud_t *, struct vm_area_struct *);
2281:	void __split_huge_pmd(struct vm_area_struct *, pmd_t *, unsigned long, bool, struct folio *);
2618:	bool can_split_folio(struct folio *, int *);
1823:	int change_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, pgprot_t, unsigned long);
1077:	int copy_huge_pmd(struct mm_struct *, struct mm_struct *, pmd_t *, pmd_t *, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
2817:	void deferred_split_huge_page(struct page *);
779:	vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *);
1509:	vm_fault_t do_huge_pmd_numa_page(struct vm_fault *);
1309:	vm_fault_t do_huge_pmd_wp_page(struct vm_fault *);
1032:	struct page *follow_devmap_pmd(struct vm_area_struct *, unsigned long, pmd_t *, int, struct dev_pagemap **);
1463:	struct page *follow_trans_huge_pmd(struct vm_area_struct *, unsigned long, pmd_t *, unsigned int);
2803:	void free_transhuge_page(struct page *);
1295:	void huge_pmd_set_accessed(struct vm_fault *);
74:	bool hugepage_vma_check(struct vm_area_struct *, unsigned long, bool, bool, bool);
1601:	bool madvise_free_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long, unsigned long);
554:	pmd_t maybe_pmd_mkwrite(pmd_t, struct vm_area_struct *);
190:	struct page *mm_get_huge_zero_page(struct mm_struct *);
204:	void mm_put_huge_zero_page(struct mm_struct *);
1768:	bool move_huge_pmd(struct vm_area_struct *, unsigned long, unsigned long, pmd_t *, pmd_t *);
581:	void prep_transhuge_page(struct page *);
3258:	void remove_migration_pmd(struct page_vma_mapped_walk *, struct page *);
3211:	int set_pmd_migration_entry(struct page_vma_mapped_walk *, struct page *);
282:	ssize_t single_hugepage_flag_show(struct kobject *, struct kobj_attribute *, char *, enum transparent_hugepage_flag);
290:	ssize_t single_hugepage_flag_store(struct kobject *, struct kobj_attribute *, const char *, size_t, enum transparent_hugepage_flag);
2652:	int split_huge_page_to_list(struct page *, struct list_head *);
2329:	void split_huge_pmd_address(struct vm_area_struct *, unsigned long, bool, struct folio *);
638:	unsigned long thp_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
2352:	void vma_adjust_trans_huge(struct vm_area_struct *, unsigned long, unsigned long, long);
738:	gfp_t vma_thp_gfp_mask(struct vm_area_struct *);
900:	vm_fault_t vmf_insert_pfn_pmd_prot(struct vm_fault *, pfn_t, pgprot_t, bool);
1680:	int zap_huge_pmd(struct mmu_gather *, struct vm_area_struct *, pmd_t *, unsigned long);
File mm/hugetlb.c:
2059:	int PageHeadHuge(struct page *);
2045:	int PageHuge(struct page *);
3149:	int __alloc_bootmem_huge_page(struct hstate *, int);
5364:	void __unmap_hugepage_range_final(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
7024:	void adjust_range_if_pmd_sharing_possible(struct vm_area_struct *, unsigned long *, unsigned long *);
3015:	struct page *alloc_huge_page(struct vm_area_struct *, unsigned long, int);
2477:	struct page *alloc_huge_page_nodemask(struct hstate *, int, nodemask_t *, gfp_t);
2496:	struct page *alloc_huge_page_vma(struct hstate *, struct vm_area_struct *, unsigned long);
4276:	bool arch_hugetlb_valid_size(unsigned long);
1191:	void clear_vma_resv_huge_pages(struct vm_area_struct *);
4959:	int copy_hugetlb_page_range(struct mm_struct *, struct mm_struct *, struct vm_area_struct *, struct vm_area_struct *);
2277:	int dissolve_free_huge_page(struct page *);
2354:	int dissolve_free_huge_pages(unsigned long, unsigned long);
6444:	long follow_hugetlb_page(struct mm_struct *, struct vm_area_struct *, struct page **, struct vm_area_struct **, unsigned long *, unsigned long *, long, unsigned int, int *);
1854:	void free_huge_page(struct page *);
7298:	int get_huge_page_for_hwpoison(unsigned long, int, bool *);
7279:	int get_hwpoison_huge_page(struct page *, bool *, bool);
7055:	pte_t *huge_pmd_share(struct mm_struct *, struct vm_area_struct *, unsigned long, pud_t *);
7113:	int huge_pmd_unshare(struct mm_struct *, struct vm_area_struct *, unsigned long, pte_t *);
128:	struct hugepage_subpool *hugepage_new_subpool(struct hstate *, long, long);
152:	void hugepage_put_subpool(struct hugepage_subpool *);
4281:	void hugetlb_add_hstate(unsigned int);
5667:	int hugetlb_add_to_page_cache(struct page *, struct address_space *, unsigned long);
2088:	unsigned long hugetlb_basepage_index(struct page *);
6630:	unsigned long hugetlb_change_protection(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
7456:	void hugetlb_cma_reserve(int);
1160:	void hugetlb_dup_vma_private(struct vm_area_struct *);
5982:	vm_fault_t hugetlb_fault(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned int);
5959:	u32 hugetlb_fault_mutex_hash(struct address_space *, unsigned long);
907:	void hugetlb_fix_reserve_counts(struct inode *);
6388:	struct page *hugetlb_follow_page_mask(struct vm_area_struct *, unsigned long, unsigned int);
7246:	unsigned long hugetlb_mask_last_page(struct hstate *);
4598:	int hugetlb_mempolicy_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4306:	bool hugetlb_node_alloc_supported(void);
4606:	int hugetlb_overcommit_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2075:	struct address_space *hugetlb_page_mapping_lock_write(struct page *);
4117:	void hugetlb_register_node(struct node *);
4637:	void hugetlb_report_meminfo(struct seq_file *);
4667:	int hugetlb_report_node_meminfo(char *, int, int);
4699:	void hugetlb_report_usage(struct seq_file *, struct mm_struct *);
6770:	bool hugetlb_reserve_pages(struct inode *, long, long, struct vm_area_struct *, vm_flags_t);
4683:	void hugetlb_show_meminfo_node(int);
4589:	int hugetlb_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
4706:	unsigned long hugetlb_total_pages(void);
4087:	void hugetlb_unregister_node(struct node *);
6928:	long hugetlb_unreserve_pages(struct inode *, long, long, long);
7408:	void hugetlb_unshare_all_pmds(struct vm_area_struct *);
315:	void hugetlb_vma_assert_locked(struct vm_area_struct *);
269:	void hugetlb_vma_lock_read(struct vm_area_struct *);
324:	void hugetlb_vma_lock_release(struct kref *);
287:	void hugetlb_vma_lock_write(struct vm_area_struct *);
305:	int hugetlb_vma_trylock_write(struct vm_area_struct *);
278:	void hugetlb_vma_unlock_read(struct vm_area_struct *);
296:	void hugetlb_vma_unlock_write(struct vm_area_struct *);
4922:	bool is_hugetlb_entry_migration(pte_t);
7261:	int isolate_hugetlb(struct page *, struct list_head *);
2979:	int isolate_or_dissolve_huge_page(struct page *, struct list_head *);
969:	unsigned long linear_hugepage_index(struct vm_area_struct *, unsigned long);
5171:	int move_hugetlb_page_tables(struct vm_area_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long);
7318:	void move_hugetlb_state(struct folio *, struct folio *, int);
7309:	void putback_active_hugepage(struct page *);
2818:	void restore_reserve_on_error(struct hstate *, struct vm_area_struct *, unsigned long, struct page *);
1057:	struct resv_map *resv_map_alloc(void);
1088:	void resv_map_release(struct kref *);
1843:	struct hstate *size_to_hstate(unsigned long);
5393:	void unmap_hugepage_range(struct vm_area_struct *, unsigned long, unsigned long, struct page *, zap_flags_t);
980:	unsigned long vma_kernel_pagesize(struct vm_area_struct *);
994:	unsigned long vma_mmu_pagesize(struct vm_area_struct *);
6998:	bool want_pmd_share(struct vm_area_struct *, unsigned long);
File mm/hugetlb_cgroup.c:
298:	int hugetlb_cgroup_charge_cgroup(int, unsigned long, struct hugetlb_cgroup **);
304:	int hugetlb_cgroup_charge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup **);
332:	void hugetlb_cgroup_commit_charge(int, unsigned long, struct hugetlb_cgroup *, struct page *);
341:	void hugetlb_cgroup_commit_charge_rsvd(int, unsigned long, struct hugetlb_cgroup *, struct page *);
872:	void hugetlb_cgroup_file_init(void);
891:	void hugetlb_cgroup_migrate(struct folio *, struct folio *);
415:	void hugetlb_cgroup_uncharge_cgroup(int, unsigned long, struct hugetlb_cgroup *);
421:	void hugetlb_cgroup_uncharge_cgroup_rsvd(int, unsigned long, struct hugetlb_cgroup *);
427:	void hugetlb_cgroup_uncharge_counter(struct resv_map *, unsigned long, unsigned long);
439:	void hugetlb_cgroup_uncharge_file_region(struct resv_map *, struct file_region *, unsigned long, bool);
385:	void hugetlb_cgroup_uncharge_folio(int, unsigned long, struct folio *);
391:	void hugetlb_cgroup_uncharge_folio_rsvd(int, unsigned long, struct folio *);
File mm/hugetlb_vmemmap.c:
555:	void hugetlb_vmemmap_optimize(const struct hstate *, struct page *);
459:	int hugetlb_vmemmap_restore(const struct hstate *, struct page *);
File mm/init-mm.c:
48:	void setup_initial_init_mm(void *, void *, void *, void *);
File mm/interval_tree.c:
75:	void anon_vma_interval_tree_insert(struct anon_vma_chain *, struct rb_root_cached *);
92:	struct anon_vma_chain *anon_vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
99:	struct anon_vma_chain *anon_vma_interval_tree_iter_next(struct anon_vma_chain *, unsigned long, unsigned long);
85:	void anon_vma_interval_tree_remove(struct anon_vma_chain *, struct rb_root_cached *);
23:	void vma_interval_tree_insert(struct vm_area_struct *, struct rb_root_cached *);
28:	void vma_interval_tree_insert_after(struct vm_area_struct *, struct vm_area_struct *, struct rb_root_cached *);
23:	struct vm_area_struct *vma_interval_tree_iter_first(struct rb_root_cached *, unsigned long, unsigned long);
23:	struct vm_area_struct *vma_interval_tree_iter_next(struct vm_area_struct *, unsigned long, unsigned long);
23:	void vma_interval_tree_remove(struct vm_area_struct *, struct rb_root_cached *);
File mm/ioremap.c:
14:	void *ioremap_prot(phys_addr_t, size_t, unsigned long);
51:	void iounmap(volatile void *);
File mm/khugepaged.c:
416:	void __khugepaged_enter(struct mm_struct *);
460:	void __khugepaged_exit(struct mm_struct *);
1438:	int collapse_pte_mapped_thp(struct mm_struct *, unsigned long, bool);
2596:	bool current_is_khugepaged(void);
352:	int hugepage_madvise(struct vm_area_struct *, unsigned long *, int);
406:	void khugepaged_destroy(void);
450:	void khugepaged_enter_vma(struct vm_area_struct *, unsigned long);
389:	int khugepaged_init(void);
2588:	void khugepaged_min_free_kbytes_update(void);
2628:	int madvise_collapse(struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long);
2560:	int start_stop_khugepaged(void);
File mm/list_lru.c:
559:	int __list_lru_init(struct list_lru *, bool, struct lock_class_key *, struct shrinker *);
119:	bool list_lru_add(struct list_lru *, struct list_head *);
196:	unsigned long list_lru_count_node(struct list_lru *, int);
178:	unsigned long list_lru_count_one(struct list_lru *, int, struct mem_cgroup *);
143:	bool list_lru_del(struct list_lru *, struct list_head *);
589:	void list_lru_destroy(struct list_lru *);
163:	void list_lru_isolate(struct list_lru_one *, struct list_head *);
170:	void list_lru_isolate_move(struct list_lru_one *, struct list_head *, struct list_head *);
298:	unsigned long list_lru_walk_node(struct list_lru *, int, list_lru_walk_cb, void *, unsigned long *);
268:	unsigned long list_lru_walk_one(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
284:	unsigned long list_lru_walk_one_irq(struct list_lru *, int, struct mem_cgroup *, list_lru_walk_cb, void *, unsigned long *);
472:	int memcg_list_lru_alloc(struct mem_cgroup *, struct list_lru *, gfp_t);
430:	void memcg_reparent_list_lrus(struct mem_cgroup *, struct mem_cgroup *);
File mm/maccess.c:
220:	void __copy_overflow(int, unsigned long);
23:	long copy_from_kernel_nofault(void *, const void *, size_t);
9:	bool copy_from_kernel_nofault_allowed(const void *, size_t);
113:	long copy_from_user_nofault(void *, const void *, size_t);
57:	long copy_to_kernel_nofault(void *, const void *, size_t);
137:	long copy_to_user_nofault(void *, const void *, size_t);
79:	long strncpy_from_kernel_nofault(char *, const void *, long);
171:	long strncpy_from_user_nofault(char *, const void *, long);
209:	long strnlen_user_nofault(const void *, long);
File mm/madvise.c:
1455:	long __arm64_sys_madvise(const struct pt_regs *);
1460:	long __arm64_sys_process_madvise(const struct pt_regs *);
1402:	int do_madvise(struct mm_struct *, unsigned long, size_t, int);
File mm/memblock.c:
1221:	void __next_mem_pfn_range(int *, int, unsigned long *, unsigned long *, int *);
1042:	void __next_mem_range(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
1137:	void __next_mem_range_rev(u64 *, int, enum memblock_flags, struct memblock_type *, struct memblock_type *, phys_addr_t *, phys_addr_t *, int *);
709:	int memblock_add(phys_addr_t, phys_addr_t);
687:	int memblock_add_node(phys_addr_t, phys_addr_t, int, enum memblock_flags);
1542:	void *memblock_alloc_exact_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1372:	phys_addr_t memblock_alloc_range_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
1604:	void *memblock_alloc_try_nid(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1574:	void *memblock_alloc_try_nid_raw(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t, int);
1941:	void memblock_allow_resize(void);
1722:	void memblock_cap_memory_range(phys_addr_t, phys_addr_t);
928:	int memblock_clear_hotplug(phys_addr_t, phys_addr_t);
977:	int memblock_clear_nomap(phys_addr_t, phys_addr_t);
1935:	void memblock_dump_all(void);
1674:	phys_addr_t memblock_end_of_DRAM(void);
1702:	void memblock_enforce_memory_limit(phys_addr_t);
828:	void memblock_free(void *, size_t);
2133:	void memblock_free_all(void);
1631:	void memblock_free_late(phys_addr_t, phys_addr_t);
1890:	phys_addr_t memblock_get_current_limit(void);
1799:	bool memblock_is_map_memory(phys_addr_t);
1794:	bool memblock_is_memory(phys_addr_t);
1833:	bool memblock_is_region_memory(phys_addr_t, phys_addr_t);
1855:	bool memblock_is_region_reserved(phys_addr_t, phys_addr_t);
1789:	bool memblock_is_reserved(phys_addr_t);
916:	int memblock_mark_hotplug(phys_addr_t, phys_addr_t);
940:	int memblock_mark_mirror(phys_addr_t, phys_addr_t);
965:	int memblock_mark_nomap(phys_addr_t, phys_addr_t);
1755:	void memblock_mem_limit_remove_map(phys_addr_t);
184:	bool memblock_overlaps_region(struct memblock_type *, phys_addr_t, phys_addr_t);
1441:	phys_addr_t memblock_phys_alloc_range(phys_addr_t, phys_addr_t, phys_addr_t, phys_addr_t);
1466:	phys_addr_t memblock_phys_alloc_try_nid(phys_addr_t, phys_addr_t, int);
842:	int memblock_phys_free(phys_addr_t, phys_addr_t);
1658:	phys_addr_t memblock_phys_mem_size(void);
810:	int memblock_remove(phys_addr_t, phys_addr_t);
853:	int memblock_reserve(phys_addr_t, phys_addr_t);
1663:	phys_addr_t memblock_reserved_size(void);
1808:	int memblock_search_pfn_nid(unsigned long, unsigned long *, unsigned long *);
1885:	void memblock_set_current_limit(phys_addr_t);
1264:	int memblock_set_node(phys_addr_t, phys_addr_t, struct memblock_type *, int);
1669:	phys_addr_t memblock_start_of_DRAM(void);
1860:	void memblock_trim_memory(phys_addr_t);
2117:	void reset_all_zones_managed_pages(void);
2109:	void reset_node_managed_pages(pg_data_t *);
File mm/memcontrol.c:
879:	void __count_memcg_events(struct mem_cgroup *, enum vm_event_item, unsigned long);
6921:	int __mem_cgroup_charge(struct folio *, struct mm_struct *, gfp_t);
7416:	int __mem_cgroup_try_charge_swap(struct folio *, swp_entry_t);
7096:	void __mem_cgroup_uncharge(struct folio *);
7116:	void __mem_cgroup_uncharge_list(struct list_head *);
7462:	void __mem_cgroup_uncharge_swap(swp_entry_t, unsigned int);
3118:	int __memcg_kmem_charge_page(struct page *, gfp_t, int);
3141:	void __memcg_kmem_uncharge_page(struct page *, int);
849:	void __mod_lruvec_kmem_state(void *, enum node_stat_item, int);
826:	void __mod_lruvec_page_state(struct page *, enum node_stat_item, int);
815:	void __mod_lruvec_state(struct lruvec *, enum node_stat_item, int);
765:	void __mod_memcg_lruvec_state(struct lruvec *, enum node_stat_item, int);
741:	void __mod_memcg_state(struct mem_cgroup *, int, int);
1295:	struct lruvec *folio_lruvec_lock(struct folio *);
1318:	struct lruvec *folio_lruvec_lock_irq(struct folio *);
1342:	struct lruvec *folio_lruvec_lock_irqsave(struct folio *, unsigned long *);
2092:	void folio_memcg_lock(struct folio *);
2163:	void folio_memcg_unlock(struct folio *);
1010:	struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *);
3011:	struct obj_cgroup *get_obj_cgroup_from_current(void);
3029:	struct obj_cgroup *get_obj_cgroup_from_page(struct page *);
2136:	void lock_page_memcg(struct page *);
6853:	void mem_cgroup_calculate_protection(struct mem_cgroup *, struct mem_cgroup *);
7218:	bool mem_cgroup_charge_skmem(struct mem_cgroup *, unsigned int, gfp_t);
363:	struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *);
4693:	void mem_cgroup_flush_foreign(struct bdi_writeback *);
640:	void mem_cgroup_flush_stats(void);
646:	void mem_cgroup_flush_stats_delayed(void);
5174:	struct mem_cgroup *mem_cgroup_from_id(unsigned short);
2965:	struct mem_cgroup *mem_cgroup_from_obj(void *);
2990:	struct mem_cgroup *mem_cgroup_from_slab_obj(void *);
977:	struct mem_cgroup *mem_cgroup_from_task(struct task_struct *);
1664:	unsigned long mem_cgroup_get_max(struct mem_cgroup *);
7486:	long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *);
2028:	struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *, struct mem_cgroup *);
2552:	void mem_cgroup_handle_over_high(void);
1079:	struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *, struct mem_cgroup *, struct mem_cgroup_reclaim_cookie *);
1185:	void mem_cgroup_iter_break(struct mem_cgroup *, struct mem_cgroup *);
251:	bool mem_cgroup_kmem_disabled(void);
7138:	void mem_cgroup_migrate(struct folio *, struct folio *);
1965:	bool mem_cgroup_oom_synchronize(bool);
1610:	void mem_cgroup_print_oom_context(struct mem_cgroup *, struct task_struct *);
2075:	void mem_cgroup_print_oom_group(struct mem_cgroup *);
1631:	void mem_cgroup_print_oom_meminfo(struct mem_cgroup *);
1242:	int mem_cgroup_scan_tasks(struct mem_cgroup *, int (*)(struct task_struct *, void *), void *);
1683:	unsigned long mem_cgroup_size(struct mem_cgroup *);
7180:	void mem_cgroup_sk_alloc(struct sock *);
7203:	void mem_cgroup_sk_free(struct sock *);
3518:	unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *, int, gfp_t, unsigned long *);
7499:	bool mem_cgroup_swap_full(struct folio *);
6945:	int mem_cgroup_swapin_charge_folio(struct folio *, struct mm_struct *, gfp_t, swp_entry_t);
6977:	void mem_cgroup_swapin_uncharge_swap(swp_entry_t);
7346:	void mem_cgroup_swapout(struct folio *, swp_entry_t);
4640:	void mem_cgroup_track_foreign_dirty_slowpath(struct folio *, struct bdi_writeback *);
7249:	void mem_cgroup_uncharge_skmem(struct mem_cgroup *, unsigned int);
1363:	void mem_cgroup_update_lru_size(struct lruvec *, enum lru_list, int, int);
4543:	struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *);
4571:	void mem_cgroup_wb_stats(struct bdi_writeback *, unsigned long *, unsigned long *, unsigned long *, unsigned long *);
2881:	int memcg_alloc_slab_cgroups(struct slab *, struct kmem_cache *, gfp_t, bool);
725:	unsigned long memcg_page_state(struct mem_cgroup *, int);
236:	struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *);
3156:	void mod_objcg_state(struct obj_cgroup *, struct pglist_data *, enum node_stat_item, int);
3352:	int obj_cgroup_charge(struct obj_cgroup *, gfp_t, size_t);
3396:	void obj_cgroup_uncharge(struct obj_cgroup *, size_t);
388:	ino_t page_cgroup_ino(struct page *);
3406:	void split_page_memcg(struct page *, unsigned int);
2168:	void unlock_page_memcg(struct page *);
243:	struct mem_cgroup *vmpressure_to_memcg(struct vmpressure *);
File mm/memfd.c:
266:	long __arm64_sys_memfd_create(const struct pt_regs *);
237:	long memfd_fcntl(struct file *, unsigned int, unsigned long);
File mm/memory-failure.c:
1237:	void ClearPageHWPoisonTakenOff(struct page *);
1232:	void SetPageHWPoisonTakenOff(struct page *);
1806:	int __get_huge_page_for_hwpoison(unsigned long, int, bool *);
1788:	void hugetlb_clear_page_hwpoison(struct page *);
229:	int hwpoison_filter(struct page *);
2007:	int memory_failure(unsigned long, int);
2245:	void memory_failure_queue(unsigned long, int);
2291:	void memory_failure_queue_kick(int);
77:	void num_poisoned_pages_inc(unsigned long);
83:	void num_poisoned_pages_sub(unsigned long, long);
304:	void shake_page(struct page *);
2568:	int soft_offline_page(unsigned long, int);
2336:	int unpoison_memory(unsigned long);
File mm/memory-tiers.c:
548:	struct memory_dev_type *alloc_memory_type(int);
579:	void clear_node_memory_type(int, struct memory_dev_type *);
564:	void destroy_memory_type(struct memory_dev_type *);
570:	void init_node_memory_type(int, struct memory_dev_type *);
294:	int next_demotion_node(int);
267:	void node_get_allowed_targets(pg_data_t *, nodemask_t *);
242:	bool node_is_toptier(int);
File mm/memory.c:
5502:	int __access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
1794:	pte_t *__get_locked_pte(struct mm_struct *, unsigned long, spinlock_t **);
5292:	int __pmd_alloc(struct mm_struct *, pud_t *, unsigned long);
419:	int __pte_alloc(struct mm_struct *, pmd_t *);
431:	int __pte_alloc_kernel(pmd_t *);
5269:	int __pud_alloc(struct mm_struct *, p4d_t *, unsigned long);
5588:	int access_process_vm(struct task_struct *, unsigned long, void *, int, unsigned int);
5577:	int access_remote_vm(struct mm_struct *, unsigned long, void *, int, unsigned int);
2776:	int apply_to_existing_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
2762:	int apply_to_page_range(struct mm_struct *, unsigned long, unsigned long, pte_fn_t, void *);
5727:	void clear_huge_page(struct page *, unsigned long, unsigned int);
5794:	long copy_huge_page_from_user(struct page *, const void *, unsigned int, bool);
1221:	int copy_page_range(struct vm_area_struct *, struct vm_area_struct *);
5773:	void copy_user_huge_page(struct page *, struct page *, unsigned long, struct vm_area_struct *, unsigned int);
4207:	vm_fault_t do_set_pmd(struct vm_fault *, struct page *);
4280:	void do_set_pte(struct vm_fault *, struct page *, unsigned long);
3689:	vm_fault_t do_swap_page(struct vm_fault *);
4335:	vm_fault_t finish_fault(struct vm_fault *);
3239:	vm_fault_t finish_mkwrite_fault(struct vm_fault *);
5385:	int follow_pfn(struct vm_area_struct *, unsigned long, unsigned long *);
5405:	int follow_phys(struct vm_area_struct *, unsigned long, unsigned int, unsigned long *, resource_size_t *);
5333:	int follow_pte(struct mm_struct *, unsigned long, pte_t **, spinlock_t **);
287:	void free_pgd_range(struct mmu_gather *, unsigned long, unsigned long, unsigned long, unsigned long);
349:	void free_pgtables(struct mmu_gather *, struct maple_tree *, struct vm_area_struct *, unsigned long, unsigned long);
5445:	int generic_access_phys(struct vm_area_struct *, unsigned long, void *, int, int);
5188:	vm_fault_t handle_mm_fault(struct vm_area_struct *, unsigned long, unsigned int, struct pt_regs *);
165:	void mm_trace_rss_stat(struct mm_struct *, int);
4657:	int numa_migrate_prep(struct page *, struct vm_area_struct *, unsigned long, int, int *);
393:	void pmd_install(struct mm_struct *, pmd_t *, pgtable_t *);
5609:	void print_vma_addr(char *, unsigned long);
2503:	int remap_pfn_range(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
2438:	int remap_pfn_range_notrack(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, pgprot_t);
3485:	void unmap_mapping_folio(struct folio *);
3520:	void unmap_mapping_pages(struct address_space *, unsigned long, unsigned long, bool);
3556:	void unmap_mapping_range(struct address_space *, const loff_t, const loff_t, int);
1581:	void unmap_page_range(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1665:	void unmap_vmas(struct mmu_gather *, struct maple_tree *, struct vm_area_struct *, unsigned long, unsigned long);
1998:	int vm_insert_page(struct vm_area_struct *, unsigned long, struct page *);
1939:	int vm_insert_pages(struct vm_area_struct *, unsigned long, struct page **, unsigned long *);
2534:	int vm_iomap_memory(struct vm_area_struct *, phys_addr_t, unsigned long);
2068:	int vm_map_pages(struct vm_area_struct *, struct page **, unsigned long);
2088:	int vm_map_pages_zero(struct vm_area_struct *, struct page **, unsigned long);
565:	struct page *vm_normal_page(struct vm_area_struct *, unsigned long, pte_t);
629:	struct page *vm_normal_page_pmd(struct vm_area_struct *, unsigned long, pmd_t);
2317:	vm_fault_t vmf_insert_mixed(struct vm_area_struct *, unsigned long, pfn_t);
2329:	vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *, unsigned long, pfn_t);
2310:	vm_fault_t vmf_insert_mixed_prot(struct vm_area_struct *, unsigned long, pfn_t, pgprot_t);
2217:	vm_fault_t vmf_insert_pfn(struct vm_area_struct *, unsigned long, unsigned long);
2169:	vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *, unsigned long, unsigned long, pgprot_t);
1694:	void zap_page_range(struct vm_area_struct *, unsigned long, unsigned long);
1725:	void zap_page_range_single(struct vm_area_struct *, unsigned long, unsigned long, struct zap_details *);
1761:	void zap_vma_ptes(struct vm_area_struct *, unsigned long, unsigned long);
File mm/mempolicy.c:
1718:	long __arm64_sys_get_mempolicy(const struct pt_regs *);
1559:	long __arm64_sys_mbind(const struct pt_regs *);
1680:	long __arm64_sys_migrate_pages(const struct pt_regs *);
1586:	long __arm64_sys_set_mempolicy(const struct pt_regs *);
1488:	long __arm64_sys_set_mempolicy_home_node(const struct pt_regs *);
1753:	struct mempolicy *__get_vma_policy(struct vm_area_struct *, unsigned long);
2409:	struct mempolicy *__mpol_dup(struct mempolicy *);
2433:	bool __mpol_equal(struct mempolicy *, struct mempolicy *);
308:	void __mpol_put(struct mempolicy *);
2269:	struct page *alloc_pages(gfp_t, unsigned int);
2366:	unsigned long alloc_pages_bulk_array_mempolicy(gfp_t, unsigned long, struct page **);
1823:	bool apply_policy_zone(struct mempolicy *, enum zone_type);
631:	unsigned long change_prot_numa(struct vm_area_struct *, unsigned long, unsigned long);
1103:	int do_migrate_pages(struct mm_struct *, const nodemask_t *, const nodemask_t *, int);
2295:	struct folio *folio_alloc(gfp_t, unsigned int);
161:	struct mempolicy *get_task_policy(struct task_struct *);
2018:	int huge_node(struct vm_area_struct *, unsigned long, gfp_t, struct mempolicy **, nodemask_t **);
2055:	bool init_nodemask_of_mempolicy(nodemask_t *);
2095:	bool mempolicy_in_oom_domain(struct task_struct *, const nodemask_t *);
1907:	unsigned int mempolicy_slab_node(void);
2839:	void mpol_free_shared_policy(struct shared_policy *);
2569:	int mpol_misplaced(struct page *, struct vm_area_struct *, unsigned long);
2989:	int mpol_parse_str(char *, struct mempolicy **);
2651:	void mpol_put_task_policy(struct task_struct *);
381:	void mpol_rebind_mm(struct mm_struct *, nodemask_t *);
370:	void mpol_rebind_task(struct task_struct *, const nodemask_t *);
2814:	int mpol_set_shared_policy(struct shared_policy *, struct vm_area_struct *, struct mempolicy *);
2775:	void mpol_shared_policy_init(struct shared_policy *, struct mempolicy *);
2532:	struct mempolicy *mpol_shared_policy_lookup(struct shared_policy *, unsigned long);
3123:	void mpol_to_str(char *, int, struct mempolicy *);
2958:	void numa_default_policy(void);
141:	int numa_map_to_online_node(int);
2904:	void numa_policy_init(void);
1847:	nodemask_t *policy_nodemask(gfp_t, struct mempolicy *);
2168:	struct folio *vma_alloc_folio(gfp_t, int, struct vm_area_struct *, unsigned long, bool);
2387:	int vma_dup_policy(struct vm_area_struct *, struct vm_area_struct *);
1725:	bool vma_migratable(struct vm_area_struct *);
1801:	bool vma_policy_mof(struct vm_area_struct *);
File mm/mempool.c:
380:	void *mempool_alloc(mempool_t *, gfp_t);
550:	void *mempool_alloc_pages(gfp_t, void *);
514:	void *mempool_alloc_slab(gfp_t, void *);
258:	mempool_t *mempool_create(int, mempool_alloc_t *, mempool_free_t *, void *);
266:	mempool_t *mempool_create_node(int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
175:	void mempool_destroy(mempool_t *);
156:	void mempool_exit(mempool_t *);
457:	void mempool_free(void *, mempool_t *);
557:	void mempool_free_pages(void *, void *);
522:	void mempool_free_slab(void *, void *);
233:	int mempool_init(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *);
185:	int mempool_init_node(mempool_t *, int, mempool_alloc_t *, mempool_free_t *, void *, gfp_t, int);
540:	void mempool_kfree(void *, void *);
533:	void *mempool_kmalloc(gfp_t, void *);
304:	int mempool_resize(mempool_t *, int);
File mm/migrate.c:
2094:	long __arm64_sys_move_pages(const struct pt_regs *);
302:	void __migration_entry_wait(struct mm_struct *, pte_t *, spinlock_t *);
332:	void __migration_entry_wait_huge(pte_t *, spinlock_t *);
1643:	struct page *alloc_migration_target(struct page *, unsigned long);
806:	int buffer_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
827:	int buffer_migrate_folio_norefs(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
835:	int filemap_migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
626:	void folio_migrate_copy(struct folio *, struct folio *);
535:	void folio_migrate_flags(struct folio *, struct folio *);
390:	int folio_migrate_mapping(struct address_space *, struct folio *, struct folio *, int);
61:	int isolate_movable_page(struct page *, isolate_mode_t);
668:	int migrate_folio(struct address_space *, struct folio *, struct folio *, enum migrate_mode);
637:	int migrate_folio_extra(struct address_space *, struct folio *, struct folio *, enum migrate_mode, int);
505:	int migrate_huge_page_move_mapping(struct address_space *, struct folio *, struct folio *);
2194:	int migrate_misplaced_page(struct page *, struct vm_area_struct *, int);
1425:	int migrate_pages(struct list_head *, new_page_t *, free_page_t *, unsigned long, enum migrate_mode, int, unsigned int *);
323:	void migration_entry_wait(struct mm_struct *, pmd_t *, unsigned long);
345:	void migration_entry_wait_huge(struct vm_area_struct *, pte_t *);
354:	void pmd_migration_entry_wait(struct mm_struct *, pmd_t *);
147:	void putback_movable_pages(struct list_head *);
284:	void remove_migration_ptes(struct folio *, struct folio *, bool);
File mm/mincore.c:
232:	long __arm64_sys_mincore(const struct pt_regs *);
File mm/mlock.c:
614:	long __arm64_sys_mlock(const struct pt_regs *);
619:	long __arm64_sys_mlock2(const struct pt_regs *);
697:	long __arm64_sys_mlockall(const struct pt_regs *);
632:	long __arm64_sys_munlock(const struct pt_regs *);
726:	long __arm64_sys_munlockall(const struct pt_regs *);
40:	bool can_do_mlock(void);
243:	void mlock_folio(struct folio *);
268:	void mlock_new_page(struct page *);
213:	void mlock_page_drain_local(void);
224:	void mlock_page_drain_remote(int);
290:	void munlock_page(struct page *);
234:	bool need_mlock_page_drain(int);
743:	int user_shm_lock(size_t, struct ucounts *);
771:	void user_shm_unlock(size_t, struct ucounts *);
File mm/mm_init.c:
146:	void mm_compute_batch(int);
61:	void mminit_verify_pageflags_layout(void);
23:	void mminit_verify_zonelist(void);
File mm/mmap.c:
170:	long __arm64_sys_brk(const struct pt_regs *);
1464:	long __arm64_sys_mmap_pgoff(const struct pt_regs *);
2801:	long __arm64_sys_munmap(const struct pt_regs *);
2811:	long __arm64_sys_remap_file_pages(const struct pt_regs *);
2198:	int __split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
615:	int __vma_adjust(struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *, struct vm_area_struct *);
3438:	struct vm_area_struct *_install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, const struct vm_special_mapping *);
1684:	unsigned long arch_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1750:	unsigned long arch_get_unmapped_area_topdown(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3168:	struct vm_area_struct *copy_vma(struct vm_area_struct **, unsigned long, unsigned long, unsigned long, bool *);
2480:	int do_mas_munmap(struct ma_state *, struct mm_struct *, unsigned long, size_t, struct list_head *, bool);
1239:	unsigned long do_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long *, struct list_head *);
2511:	int do_munmap(struct mm_struct *, unsigned long, size_t, struct list_head *);
3063:	void exit_mmap(struct mm_struct *);
2002:	int expand_downwards(struct vm_area_struct *, unsigned long);
2118:	int expand_stack(struct vm_area_struct *, unsigned long);
2124:	struct vm_area_struct *find_extend_vma(struct mm_struct *, unsigned long);
1140:	struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *);
1830:	struct vm_area_struct *find_vma(struct mm_struct *, unsigned long);
1811:	struct vm_area_struct *find_vma_intersection(struct mm_struct *, unsigned long, unsigned long);
1853:	struct vm_area_struct *find_vma_prev(struct mm_struct *, unsigned long, struct vm_area_struct **);
1649:	unsigned long generic_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1697:	unsigned long generic_get_unmapped_area_topdown(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
1759:	unsigned long get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
3127:	int insert_vm_struct(struct mm_struct *, struct vm_area_struct *);
3447:	int install_special_mapping(struct mm_struct *, unsigned long, unsigned long, unsigned long, struct page **);
1419:	unsigned long ksys_mmap_pgoff(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
3260:	bool may_expand_vm(struct mm_struct *, vm_flags_t, unsigned long);
1187:	int mlock_future_check(struct mm_struct *, unsigned long, unsigned long);
3621:	void mm_drop_all_locks(struct mm_struct *);
3538:	int mm_take_all_locks(struct mm_struct *);
3644:	void mmap_init(void);
2519:	unsigned long mmap_region(struct file *, unsigned long, unsigned long, vm_flags_t, unsigned long, struct list_head *);
2267:	int split_vma(struct mm_struct *, struct vm_area_struct *, unsigned long, int);
121:	void unlink_file_vma(struct vm_area_struct *);
3056:	int vm_brk(unsigned long, unsigned long);
3009:	int vm_brk_flags(unsigned long, unsigned long, unsigned long);
2795:	int vm_munmap(unsigned long, size_t);
3285:	void vm_stat_account(struct mm_struct *, vm_flags_t, long);
1624:	unsigned long vm_unmapped_area(struct vm_unmapped_area_info *);
512:	int vma_expand(struct ma_state *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct vm_area_struct *);
3421:	bool vma_is_special_mapping(const struct vm_area_struct *, const struct vm_special_mapping *);
446:	void vma_mas_remove(struct vm_area_struct *, struct ma_state *);
430:	void vma_mas_store(struct vm_area_struct *, struct ma_state *);
999:	struct vm_area_struct *vma_merge(struct mm_struct *, struct vm_area_struct *, unsigned long, unsigned long, unsigned long, struct anon_vma *, struct file *, unsigned long, struct mempolicy *, struct vm_userfaultfd_ctx, struct anon_vma_name *);
89:	void vma_set_page_prot(struct vm_area_struct *);
1501:	int vma_wants_writenotify(struct vm_area_struct *, pgprot_t);
File mm/mmap_lock.c:
81:	int trace_mmap_lock_reg(void);
119:	void trace_mmap_lock_unreg(void);
File mm/mmu_gather.c:
118:	bool __tlb_remove_page_size(struct mmu_gather *, struct encoded_page *, int);
363:	void tlb_finish_mmu(struct mmu_gather *);
296:	void tlb_flush_mmu(struct mmu_gather *);
72:	void tlb_flush_rmaps(struct mmu_gather *, struct vm_area_struct *);
335:	void tlb_gather_mmu(struct mmu_gather *, struct mm_struct *);
351:	void tlb_gather_mmu_fullmm(struct mmu_gather *, struct mm_struct *);
257:	void tlb_remove_table(struct mmu_gather *, void *);
194:	void tlb_remove_table_sync_one(void);
File mm/mmzone.c:
56:	struct zoneref *__next_zones_zonelist(struct zoneref *, enum zone_type, nodemask_t *);
13:	struct pglist_data *first_online_pgdat(void);
75:	void lruvec_init(struct lruvec *);
18:	struct pglist_data *next_online_pgdat(struct pglist_data *);
30:	struct zone *next_zone(struct zone *);
96:	int page_cpupid_xchg_last(struct page *, int);
File mm/mprotect.c:
815:	long __arm64_sys_mprotect(const struct pt_regs *);
42:	bool can_change_pte_writable(struct vm_area_struct *, unsigned long, pte_t);
510:	unsigned long change_protection(struct mmu_gather *, struct vm_area_struct *, unsigned long, unsigned long, pgprot_t, unsigned long);
557:	int mprotect_fixup(struct mmu_gather *, struct vm_area_struct *, struct vm_area_struct **, unsigned long, unsigned long, unsigned long);
File mm/mremap.c:
889:	long __arm64_sys_mremap(const struct pt_regs *);
481:	unsigned long move_page_tables(struct vm_area_struct *, unsigned long, struct vm_area_struct *, unsigned long, unsigned long, bool);
File mm/msync.c:
32:	long __arm64_sys_msync(const struct pt_regs *);
File mm/oom_kill.c:
1200:	long __arm64_sys_process_mrelease(const struct pt_regs *);
785:	void exit_oom_victim(void);
133:	struct task_struct *find_lock_task_mm(struct task_struct *);
201:	long oom_badness(struct task_struct *, unsigned long);
817:	bool oom_killer_disable(long);
796:	void oom_killer_enable(void);
1106:	bool out_of_memory(struct oom_control *);
1185:	void pagefault_out_of_memory(void);
490:	bool process_shares_mm(struct task_struct *, struct mm_struct *);
1085:	int register_oom_notifier(struct notifier_block *);
1091:	int unregister_oom_notifier(struct notifier_block *);
File mm/page-writeback.c:
2902:	void __folio_cancel_dirty(struct folio *);
3023:	bool __folio_end_writeback(struct folio *);
2720:	void __folio_mark_dirty(struct folio *, struct address_space *, int);
3068:	bool __folio_start_writeback(struct folio *, bool);
2062:	void balance_dirty_pages_ratelimited(struct address_space *);
1992:	int balance_dirty_pages_ratelimited_flags(struct address_space *, unsigned int);
779:	u64 bdi_get_max_bytes(struct backing_dev_info *);
760:	u64 bdi_get_min_bytes(struct backing_dev_info *);
784:	int bdi_set_max_bytes(struct backing_dev_info *, u64);
754:	int bdi_set_max_ratio(struct backing_dev_info *, unsigned int);
744:	int bdi_set_max_ratio_no_scale(struct backing_dev_info *, unsigned int);
765:	int bdi_set_min_bytes(struct backing_dev_info *, u64);
749:	int bdi_set_min_ratio(struct backing_dev_info *, unsigned int);
739:	int bdi_set_min_ratio_no_scale(struct backing_dev_info *, unsigned int);
798:	int bdi_set_strict_limit(struct backing_dev_info *, unsigned int);
2570:	int do_writepages(struct address_space *, struct writeback_control *);
2754:	bool filemap_dirty_folio(struct address_space *, struct folio *);
2697:	void folio_account_cleaned(struct folio *, struct bdi_writeback *);
2785:	void folio_account_redirty(struct folio *);
2939:	bool folio_clear_dirty_for_io(struct folio *);
2843:	bool folio_mark_dirty(struct folio *);
2816:	bool folio_redirty_for_writepage(struct writeback_control *, struct folio *);
3191:	void folio_wait_stable(struct folio *);
3144:	void folio_wait_writeback(struct folio *);
3166:	int folio_wait_writeback_killable(struct folio *);
2618:	int folio_write_one(struct folio *);
2552:	int generic_writepages(struct address_space *, struct writeback_control *);
441:	void global_dirty_limits(unsigned long *, unsigned long *);
2171:	void laptop_io_completion(struct backing_dev_info *);
2158:	void laptop_mode_timer_fn(struct timer_list *);
2181:	void laptop_sync_completion(void);
484:	bool node_dirty_ok(struct pglist_data *);
2650:	bool noop_dirty_folio(struct address_space *, struct folio *);
2314:	void page_writeback_init(void);
2878:	int set_page_dirty_lock(struct page *);
2341:	void tag_pages_for_writeback(struct address_space *, unsigned long, unsigned long);
888:	unsigned long wb_calc_thresh(struct bdi_writeback *, unsigned long);
640:	void wb_domain_exit(struct wb_domain *);
626:	int wb_domain_init(struct wb_domain *, gfp_t);
2077:	bool wb_over_bg_thresh(struct bdi_writeback *);
1485:	void wb_update_bandwidth(struct bdi_writeback *);
593:	void wb_writeout_inc(struct bdi_writeback *);
2394:	int write_cache_pages(struct address_space *, struct writeback_control *, writepage_t, void *);
2202:	void writeback_set_ratelimit(void);
File mm/page_alloc.c:
7458:	unsigned long __absent_pages_in_range(int, unsigned long, unsigned long);
9176:	int __alloc_contig_migrate_range(struct compact_control *, unsigned long, unsigned long);
5513:	struct page *__alloc_pages(gfp_t, unsigned int, int, nodemask_t *);
5361:	unsigned long __alloc_pages_bulk(gfp_t, int, nodemask_t *, int, struct list_head *, struct page **);
5578:	struct folio *__folio_alloc(gfp_t, unsigned int, int, nodemask_t *);
5632:	void __free_pages(struct page *, unsigned int);
1723:	void __free_pages_core(struct page *, unsigned int);
5595:	unsigned long __get_free_pages(gfp_t, unsigned int);
3602:	int __isolate_free_page(struct page *, unsigned int);
5684:	void __page_frag_cache_drain(struct page *, unsigned int);
1831:	struct page *__pageblock_pfn_to_page(unsigned long, unsigned long, struct zone *);
3654:	void __putback_isolated_page(struct page *, unsigned int, int);
6083:	void __show_free_areas(unsigned int, nodemask_t *, int);
3968:	bool __zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int, long);
7481:	unsigned long absent_pages_in_range(unsigned long, unsigned long);
8452:	void adjust_managed_page_count(struct page *, long);
9439:	struct page *alloc_contig_pages(unsigned long, gfp_t, int, nodemask_t *);
9255:	int alloc_contig_range(unsigned long, unsigned long, unsigned int, gfp_t);
9042:	void *alloc_large_system_hash(const char *, unsigned long, unsigned long, int, int, unsigned int *, unsigned int *, unsigned long, unsigned long);
5813:	void *alloc_pages_exact(size_t, gfp_t);
5838:	void *alloc_pages_exact_nid(int, size_t, gfp_t);
8261:	bool arch_has_descending_max_zone_pfns(void);
6663:	void build_all_zonelists(pg_data_t *);
8820:	void calculate_min_free_kbytes(void);
1881:	void clear_zone_contiguous(struct zone *);
806:	void destroy_large_folio(struct folio *);
3304:	void drain_all_pages(struct zone *);
3211:	void drain_local_pages(struct zone *);
3167:	void drain_zone_pages(struct zone *, struct per_cpu_pages *);
1789:	int early_pfn_to_nid(unsigned long);
6374:	int find_next_best_node(int, nodemask_t *);
2837:	int find_suitable_fallback(struct free_area *, unsigned int, int, bool, bool *);
8279:	void free_area_init(unsigned long *);
770:	void free_compound_page(struct page *);
9477:	void free_contig_range(unsigned long, unsigned long);
5642:	void free_pages(unsigned long, unsigned int);
5859:	void free_pages_exact(void *, size_t);
8463:	unsigned long free_reserved_area(void *, void *, int, const char *);
3456:	void free_unref_page(struct page *, unsigned int);
3498:	void free_unref_page_list(struct list_head *);
7342:	void get_pfn_range_for_nid(unsigned int, unsigned long *, unsigned long *);
563:	unsigned long get_pfnblock_flags_mask(const struct page *, unsigned long, unsigned long);
5606:	unsigned long get_zeroed_page(gfp_t);
4894:	bool gfp_pfmemalloc_allowed(gfp_t);
9696:	bool has_managed_dma(void);
2306:	void init_cma_reserved_pageblock(struct page *);
7309:	void init_currently_empty_zone(struct zone *, unsigned long, unsigned long);
889:	void init_mem_debugging_and_hardening(void);
8836:	int init_per_zone_wmark_min(void);
9581:	bool is_free_buddy_page(struct page *);
8956:	int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8499:	void mem_init_print_info(void);
1804:	void memblock_free_pages(struct page *, unsigned long, unsigned int);
7034:	void *memmap_alloc(phys_addr_t, phys_addr_t, phys_addr_t, int, bool);
6727:	void memmap_init_range(unsigned long, int, unsigned long, unsigned long, unsigned long, enum meminit_context, struct vmem_altmap *, int);
8859:	int min_free_kbytes_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2644:	int move_freepages_block(struct zone *, struct page *, int, int *);
7968:	unsigned long node_map_pfn_alignment(void);
5912:	unsigned long nr_free_buffer_pages(void);
6348:	int numa_zonelist_order_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8619:	void page_alloc_init(void);
2266:	void page_alloc_init_late(void);
5693:	void *page_frag_alloc_align(struct page_frag_cache *, unsigned int, gfp_t, unsigned int);
5769:	void page_frag_free(void *);
8977:	int percpu_pagelist_high_fraction_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
2466:	void post_alloc_hook(struct page *, unsigned int, gfp_t);
794:	void prep_compound_page(struct page *, unsigned int);
9673:	bool put_page_back_buddy(struct page *);
1670:	void reserve_bootmem_region(phys_addr_t, phys_addr_t);
8561:	void set_dma_reserve(unsigned long);
608:	void set_pageblock_migratetype(struct page *, int);
7651:	void set_pageblock_order(void);
582:	void set_pfnblock_flags_mask(struct page *, unsigned long, unsigned long, unsigned long);
1859:	void set_zone_contiguous(struct zone *);
7940:	void setup_nr_node_ids(void);
7264:	void setup_per_cpu_pageset(void);
8779:	void setup_per_zone_wmarks(void);
7228:	void setup_zone_pageset(struct zone *);
3933:	bool should_fail_alloc_page(gfp_t, unsigned int);
5924:	long si_mem_available(void);
5970:	void si_meminfo(struct sysinfo *);
5984:	void si_meminfo_node(struct sysinfo *, int);
1186:	int split_free_page(struct page *, unsigned int, unsigned long);
3588:	void split_page(struct page *, unsigned int);
8932:	int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
8905:	int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9636:	bool take_page_off_buddy(struct page *);
4335:	void warn_alloc(gfp_t, nodemask_t *, const char *, ...);
8875:	int watermark_scale_factor_sysctl_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
9499:	void zone_pcp_disable(struct zone *);
9506:	void zone_pcp_enable(struct zone *);
9512:	void zone_pcp_reset(struct zone *);
4032:	bool zone_watermark_ok(struct zone *, unsigned int, unsigned long, int, unsigned int);
4083:	bool zone_watermark_ok_safe(struct zone *, unsigned int, unsigned long, int);
File mm/page_counter.c:
49:	void page_counter_cancel(struct page_counter *, unsigned long);
70:	void page_counter_charge(struct page_counter *, unsigned long);
246:	int page_counter_memparse(const char *, const char *, unsigned long *);
227:	void page_counter_set_low(struct page_counter *, unsigned long);
171:	int page_counter_set_max(struct page_counter *, unsigned long);
210:	void page_counter_set_min(struct page_counter *, unsigned long);
97:	bool page_counter_try_charge(struct page_counter *, unsigned long, struct page_counter **);
153:	void page_counter_uncharge(struct page_counter *, unsigned long);
File mm/page_io.c:
527:	void __swap_read_unplug(struct swap_iocb *);
336:	int __swap_writepage(struct page *, struct writeback_control *);
80:	int generic_swapfile_activate(struct swap_info_struct *, struct file *, sector_t *);
247:	int sio_pool_init(void);
448:	int swap_readpage(struct page *, bool, struct swap_iocb **);
373:	void swap_write_unplug(struct swap_iocb *);
181:	int swap_writepage(struct page *, struct writeback_control *);
File mm/page_isolation.c:
529:	int start_isolate_page_range(unsigned long, unsigned long, int, int, gfp_t);
635:	int test_pages_isolated(unsigned long, unsigned long, int);
577:	void undo_isolate_page_range(unsigned long, unsigned long, int);
File mm/page_reporting.c:
87:	void __page_reporting_notify(void);
352:	int page_reporting_register(struct page_reporting_dev_info *);
400:	void page_reporting_unregister(struct page_reporting_dev_info *);
File mm/page_vma_mapped.c:
300:	int page_mapped_in_vma(struct page *, struct vm_area_struct *);
151:	bool page_vma_mapped_walk(struct page_vma_mapped_walk *);
File mm/pagewalk.c:
587:	int walk_page_mapping(struct address_space *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
427:	int walk_page_range(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
499:	int walk_page_range_novma(struct mm_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, pgd_t *, void *);
520:	int walk_page_range_vma(struct vm_area_struct *, unsigned long, unsigned long, const struct mm_walk_ops *, void *);
540:	int walk_page_vma(struct vm_area_struct *, const struct mm_walk_ops *, void *);
File mm/percpu.c:
1941:	void *__alloc_percpu(size_t, size_t);
1928:	void *__alloc_percpu_gfp(size_t, size_t, gfp_t);
1963:	void *__alloc_reserved_percpu(size_t, size_t);
2305:	bool __is_kernel_percpu_address(unsigned long, unsigned long *);
2254:	void free_percpu(void *);
2341:	bool is_kernel_percpu_address(unsigned long);
2428:	struct pcpu_alloc_info *pcpu_alloc_alloc_info(int, int);
3055:	int pcpu_embed_first_chunk(size_t, size_t, size_t, pcpu_fc_cpu_distance_fn_t *, pcpu_fc_cpu_to_node_fn_t *);
2463:	void pcpu_free_alloc_info(struct pcpu_alloc_info *);
3438:	unsigned long pcpu_nr_pages(void);
3250:	int pcpu_page_first_chunk(size_t, pcpu_fc_cpu_to_node_fn_t *);
3184:	void pcpu_populate_pte(unsigned long);
2579:	void pcpu_setup_first_chunk(const struct pcpu_alloc_info *, void *);
2369:	phys_addr_t per_cpu_ptr_to_phys(void *);
File mm/pgtable-generic.c:
22:	void pgd_clear_bad(pgd_t *);
162:	void pgtable_trans_huge_deposit(struct mm_struct *, pmd_t *, pgtable_t);
178:	pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *, pmd_t *);
49:	void pmd_clear_bad(pmd_t *);
121:	int pmdp_clear_flush_young(struct vm_area_struct *, unsigned long, pmd_t *);
213:	pmd_t pmdp_collapse_flush(struct vm_area_struct *, unsigned long, pmd_t *);
134:	pmd_t pmdp_huge_clear_flush(struct vm_area_struct *, unsigned long, pmd_t *);
195:	pmd_t pmdp_invalidate(struct vm_area_struct *, unsigned long, pmd_t *);
205:	pmd_t pmdp_invalidate_ad(struct vm_area_struct *, unsigned long, pmd_t *);
91:	pte_t ptep_clear_flush(struct vm_area_struct *, unsigned long, pte_t *);
37:	void pud_clear_bad(pud_t *);
File mm/process_vm_access.c:
291:	long __arm64_sys_process_vm_readv(const struct pt_regs *);
298:	long __arm64_sys_process_vm_writev(const struct pt_regs *);
File mm/readahead.c:
761:	long __arm64_sys_readahead(const struct pt_regs *);
140:	void file_ra_state_init(struct file_ra_state *, struct address_space *);
307:	void force_page_cache_ra(struct readahead_control *, unsigned long);
735:	ssize_t ksys_readahead(int, loff_t, size_t);
713:	void page_cache_async_ra(struct readahead_control *, struct folio *, unsigned long);
500:	void page_cache_ra_order(struct readahead_control *, struct file_ra_state *, unsigned int);
206:	void page_cache_ra_unbounded(struct readahead_control *, unsigned long, unsigned long);
685:	void page_cache_sync_ra(struct readahead_control *, unsigned long);
791:	void readahead_expand(struct readahead_control *, loff_t, size_t);
File mm/rmap.c:
187:	int __anon_vma_prepare(struct vm_area_struct *);
2363:	void __put_anon_vma(struct anon_vma *);
279:	int anon_vma_clone(struct vm_area_struct *, struct vm_area_struct *);
333:	int anon_vma_fork(struct vm_area_struct *, struct vm_area_struct *);
459:	void anon_vma_init(void);
492:	struct anon_vma *folio_get_anon_vma(struct folio *);
536:	struct anon_vma *folio_lock_anon_vma_read(struct folio *, struct rmap_walk_control *);
1031:	int folio_mkclean(struct folio *);
896:	int folio_referenced(struct folio *, int, struct mem_cgroup *, unsigned long *);
2543:	void hugepage_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, rmap_t);
2560:	void hugepage_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
773:	pmd_t *mm_find_pmd(struct mm_struct *, unsigned long);
1217:	void page_add_anon_rmap(struct page *, struct vm_area_struct *, unsigned long, rmap_t);
1324:	void page_add_file_rmap(struct page *, struct vm_area_struct *, bool);
1291:	void page_add_new_anon_rmap(struct page *, struct vm_area_struct *, unsigned long);
747:	unsigned long page_address_in_vma(struct page *, struct vm_area_struct *);
1121:	void page_move_anon_rmap(struct page *, struct vm_area_struct *);
1381:	void page_remove_rmap(struct page *, struct vm_area_struct *, bool);
1068:	int pfn_mkclean_range(unsigned long, unsigned long, unsigned long, struct vm_area_struct *);
2514:	void rmap_walk(struct folio *, struct rmap_walk_control *);
2525:	void rmap_walk_locked(struct folio *, struct rmap_walk_control *);
1088:	int total_compound_mapcount(struct page *);
2140:	void try_to_migrate(struct folio *, enum ttu_flags);
1812:	void try_to_unmap(struct folio *, enum ttu_flags);
395:	void unlink_anon_vmas(struct vm_area_struct *);
File mm/secretmem.c:
231:	long __arm64_sys_memfd_secret(const struct pt_regs *);
45:	bool secretmem_active(void);
137:	bool vma_is_secretmem(struct vm_area_struct *);
File mm/shmem.c:
367:	bool shmem_charge(struct inode *, long);
4259:	struct file *shmem_file_setup(const char *, loff_t, unsigned long);
4272:	struct file *shmem_file_setup_with_mnt(struct vfsmount *, const char *, loff_t, unsigned long);
2048:	int shmem_get_folio(struct inode *, unsigned long, struct folio **, enum sgp_type);
2144:	unsigned long shmem_get_unmapped_area(struct file *, unsigned long, unsigned long, unsigned long, unsigned long);
4048:	void shmem_init(void);
4020:	int shmem_init_fs_context(struct fs_context *);
471:	bool shmem_is_huge(struct vm_area_struct *, struct inode *, unsigned long, bool);
4248:	struct file *shmem_kernel_file_setup(const char *, loff_t, unsigned long);
2251:	int shmem_lock(struct file *, int, struct ucounts *);
803:	unsigned long shmem_partial_swap_usage(struct address_space *, unsigned long, unsigned long);
4321:	struct page *shmem_read_mapping_page_gfp(struct address_space *, unsigned long, gfp_t);
835:	unsigned long shmem_swap_usage(struct vm_area_struct *);
1040:	void shmem_truncate_range(struct inode *, loff_t, loff_t);
387:	void shmem_uncharge(struct inode *, long);
864:	void shmem_unlock_mapping(struct address_space *);
1283:	int shmem_unuse(unsigned int);
4283:	int shmem_zero_setup(struct vm_area_struct *);
243:	bool vma_is_anon_shmem(struct vm_area_struct *);
248:	bool vma_is_shmem(struct vm_area_struct *);
File mm/slab_common.c:
979:	void *__kmalloc(size_t, gfp_t);
973:	void *__kmalloc_node(size_t, gfp_t, int);
985:	void *__kmalloc_node_track_caller(size_t, gfp_t, int, unsigned long);
1036:	size_t __ksize(const void *);
630:	void create_boot_cache(struct kmem_cache *, const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
662:	struct kmem_cache *create_kmalloc_cache(const char *, unsigned int, slab_flags_t, unsigned int, unsigned int);
901:	void create_kmalloc_caches(slab_flags_t);
1268:	void dump_unreclaimable_slab(void);
160:	struct kmem_cache *find_mergeable(unsigned int, unsigned int, slab_flags_t, const char *, void (*)(void *));
932:	void free_large_kmalloc(struct folio *, void *);
1001:	void kfree(const void *);
1417:	void kfree_sensitive(const void *);
1085:	gfp_t kmalloc_fix_flags(gfp_t);
1128:	void *kmalloc_large(size_t, gfp_t);
1138:	void *kmalloc_large_node(size_t, gfp_t, int);
1072:	void *kmalloc_node_trace(struct kmem_cache *, gfp_t, int, size_t);
744:	size_t kmalloc_size_roundup(size_t);
726:	struct kmem_cache *kmalloc_slab(size_t, gfp_t);
1060:	void *kmalloc_trace(struct kmem_cache *, gfp_t, size_t);
392:	struct kmem_cache *kmem_cache_create(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
278:	struct kmem_cache *kmem_cache_create_usercopy(const char *, unsigned int, unsigned int, slab_flags_t, unsigned int, unsigned int, void (*)(void *));
480:	void kmem_cache_destroy(struct kmem_cache *);
517:	int kmem_cache_shrink(struct kmem_cache *);
83:	unsigned int kmem_cache_size(struct kmem_cache *);
573:	void kmem_dump_obj(void *);
539:	bool kmem_valid_obj(void *);
1389:	void *krealloc(const void *, size_t, gfp_t);
1431:	size_t ksize(const void *);
832:	void setup_kmalloc_cache_index_table(void);
1461:	int should_failslab(struct kmem_cache *, gfp_t);
525:	bool slab_is_available(void);
473:	void slab_kmem_cache_release(struct kmem_cache *);
138:	int slab_unmergeable(struct kmem_cache *);
File mm/slub.c:
5063:	struct kmem_cache *__kmem_cache_alias(const char *, unsigned int, unsigned int, slab_flags_t, void (*)(void *));
3487:	void *__kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int, size_t, unsigned long);
5086:	int __kmem_cache_create(struct kmem_cache *, slab_flags_t);
4595:	bool __kmem_cache_empty(struct kmem_cache *);
3798:	void __kmem_cache_free(struct kmem_cache *, void *, unsigned long);
4278:	void __kmem_cache_release(struct kmem_cache *);
4838:	int __kmem_cache_shrink(struct kmem_cache *);
4609:	int __kmem_cache_shutdown(struct kmem_cache *);
4625:	void __kmem_obj_info(struct kmem_obj_info *, void *, struct slab *);
223:	void *fixup_red_left(struct kmem_cache *, void *);
6474:	void get_slabinfo(struct kmem_cache *, struct slabinfo *);
3474:	void *kmem_cache_alloc(struct kmem_cache *, gfp_t);
4012:	int kmem_cache_alloc_bulk(struct kmem_cache *, gfp_t, size_t, void **);
3480:	void *kmem_cache_alloc_lru(struct kmem_cache *, struct list_lru *, gfp_t);
3495:	void *kmem_cache_alloc_node(struct kmem_cache *, gfp_t, int);
1639:	slab_flags_t kmem_cache_flags(unsigned int, slab_flags_t, const char *);
3803:	void kmem_cache_free(struct kmem_cache *, void *);
3893:	void kmem_cache_free_bulk(struct kmem_cache *, size_t, void **);
4999:	void kmem_cache_init(void);
5054:	void kmem_cache_init_late(void);
815:	void print_tracking(struct kmem_cache *, void *);
878:	void skip_orig_size_check(struct kmem_cache *, const void *);
6496:	void slabinfo_show_stats(struct seq_file *, struct kmem_cache *);
6500:	ssize_t slabinfo_write(struct file *, const char *, size_t, loff_t *);
6174:	void sysfs_slab_release(struct kmem_cache *);
6168:	void sysfs_slab_unlink(struct kmem_cache *);
5180:	long validate_slab_cache(struct kmem_cache *);
File mm/sparse-vmemmap.c:
449:	struct page *__populate_section_memmap(unsigned long, unsigned long, int, struct vmem_altmap *, struct dev_pagemap *);
199:	void pmd_init(void *);
216:	void pud_init(void *);
49:	void *vmemmap_alloc_block(unsigned long, int);
77:	void *vmemmap_alloc_block_buf(unsigned long, int, struct vmem_altmap *);
303:	int vmemmap_check_pmd(pmd_t *, int, unsigned long, unsigned long);
220:	p4d_t *vmemmap_p4d_populate(pgd_t *, unsigned long, int);
233:	pgd_t *vmemmap_pgd_populate(unsigned long, int);
187:	pmd_t *vmemmap_pmd_populate(pud_t *, unsigned long, int);
292:	int vmemmap_populate_basepages(unsigned long, unsigned long, int, struct vmem_altmap *);
309:	int vmemmap_populate_hugepages(unsigned long, unsigned long, int, struct vmem_altmap *);
144:	pte_t *vmemmap_pte_populate(pmd_t *, unsigned long, int, struct vmem_altmap *, struct page *);
203:	pud_t *vmemmap_pud_populate(p4d_t *, unsigned long, int);
298:	void vmemmap_set_pmd(pmd_t *, void *, int, unsigned long, unsigned long);
133:	void vmemmap_verify(pte_t *, int, unsigned long, unsigned long);
File mm/sparse.c:
316:	size_t mem_section_usage_size(void);
480:	void *sparse_buffer_alloc(unsigned long);
559:	void sparse_init(void);
194:	void subsection_map_init(unsigned long, unsigned long);
498:	void vmemmap_populate_print_last(void);
File mm/swap.c:
122:	void __folio_put(struct folio *);
1090:	void __pagevec_release(struct pagevec *);
720:	void deactivate_file_folio(struct folio *);
743:	void deactivate_page(struct page *);
382:	void folio_activate(struct folio *);
531:	void folio_add_lru(struct folio *);
560:	void folio_add_lru_vma(struct folio *, struct vm_area_struct *);
1110:	void folio_batch_remove_exceptionals(struct folio_batch *);
488:	void folio_mark_accessed(struct folio *);
284:	void folio_rotate_reclaimable(struct folio *);
174:	int get_kernel_pages(const struct kvec *, int, int, struct page **);
783:	void lru_add_drain(void);
937:	void lru_add_drain_all(void);
676:	void lru_add_drain_cpu(int);
806:	void lru_add_drain_cpu_zone(struct zone *);
958:	void lru_cache_disable(void);
299:	void lru_note_cost(struct lruvec *, bool, unsigned int, unsigned int);
351:	void lru_note_cost_refault(struct folio *);
766:	void mark_page_lazyfree(struct page *);
1122:	unsigned int pagevec_lookup_range_tag(struct pagevec *, struct address_space *, unsigned long *, unsigned long, xa_mark_t);
139:	void put_pages_list(struct list_head *);
994:	void release_pages(release_pages_arg, int);
1135:	void swap_setup(void);
File mm/swap_cgroup.c:
162:	unsigned short lookup_swap_cgroup_id(swp_entry_t);
97:	unsigned short swap_cgroup_cmpxchg(swp_entry_t, unsigned short, unsigned short);
126:	unsigned short swap_cgroup_record(swp_entry_t, unsigned short, unsigned int);
204:	void swap_cgroup_swapoff(int);
167:	int swap_cgroup_swapon(int, unsigned long);
File mm/swap_slots.c:
68:	void disable_swap_slots_cache_lock(void);
238:	void enable_swap_slots_cache(void);
302:	swp_entry_t folio_alloc_swap(struct folio *);
272:	void free_swap_slot(swp_entry_t);
85:	void reenable_swap_slots_cache_unlock(void);
File mm/swap_state.c:
139:	void __delete_from_swap_cache(struct folio *, swp_entry_t, void *);
409:	struct page *__read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool *);
174:	bool add_to_swap(struct folio *);
88:	int add_to_swap_cache(struct folio *, swp_entry_t, gfp_t, void **);
244:	void clear_shadow_from_swap_cache(int, unsigned long, unsigned long);
231:	void delete_from_swap_cache(struct folio *);
684:	void exit_swap_address_space(unsigned int);
382:	struct folio *filemap_get_incore_folio(struct address_space *, unsigned long);
295:	void free_page_and_swap_cache(struct page *);
306:	void free_pages_and_swap_cache(struct encoded_page **, int);
280:	void free_swap_cache(struct page *);
72:	void *get_shadow_from_swap_cache(swp_entry_t);
661:	int init_swap_address_space(unsigned int, unsigned long);
513:	struct page *read_swap_cache_async(swp_entry_t, gfp_t, struct vm_area_struct *, unsigned long, bool, struct swap_iocb **);
64:	void show_swap_cache_info(void);
325:	struct folio *swap_cache_get_folio(swp_entry_t, struct vm_area_struct *, unsigned long);
607:	struct page *swap_cluster_readahead(swp_entry_t, gfp_t, struct vm_fault *);
847:	struct page *swapin_readahead(swp_entry_t, gfp_t, struct vm_fault *);
File mm/swapfile.c:
2381:	long __arm64_sys_swapoff(const struct pt_regs *);
2976:	long __arm64_sys_swapon(const struct pt_regs *);
3631:	void __cgroup_throttle_swaprate(struct page *, gfp_t);
3394:	unsigned long __page_file_index(struct page *);
1434:	int __swap_count(swp_entry_t);
1470:	int __swp_swapcount(swp_entry_t);
3416:	int add_swap_count_continuation(swp_entry_t, gfp_t);
2179:	int add_swap_extent(struct swap_info_struct *, unsigned long, unsigned long, sector_t);
2814:	unsigned long arch_max_swapfile_size(void);
1579:	bool folio_free_swap(struct folio *);
1617:	int free_swap_and_cache(swp_entry_t);
2807:	unsigned long generic_max_swapfile_size(void);
1251:	struct swap_info_struct *get_swap_device(swp_entry_t);
1046:	int get_swap_pages(int, swp_entry_t *, int);
2370:	bool has_usable_swap(void);
3379:	struct swap_info_struct *page_swap_info(struct page *);
1335:	void put_swap_folio(struct folio *, swp_entry_t);
3246:	void si_swapinfo(struct sysinfo *);
1383:	int split_swap_cluster(swp_entry_t);
3352:	int swap_duplicate(swp_entry_t);
1323:	void swap_free(swp_entry_t);
228:	sector_t swap_page_sector(struct page *);
3340:	void swap_shmem_alloc(swp_entry_t);
1406:	void swapcache_free_entries(swp_entry_t *, int);
3388:	struct address_space *swapcache_mapping(struct folio *);
3369:	int swapcache_prepare(swp_entry_t);
3374:	struct swap_info_struct *swp_swap_info(swp_entry_t);
1487:	int swp_swapcount(swp_entry_t);
File mm/truncate.c:
154:	void folio_invalidate(struct folio *, size_t, size_t);
254:	int generic_error_remove_page(struct address_space *, struct page *);
295:	long invalidate_inode_page(struct page *);
707:	int invalidate_inode_pages2(struct address_space *);
620:	int invalidate_inode_pages2_range(struct address_space *, unsigned long, unsigned long);
556:	unsigned long invalidate_mapping_pages(struct address_space *, unsigned long, unsigned long);
498:	unsigned long invalidate_mapping_pagevec(struct address_space *, unsigned long, unsigned long, unsigned long *);
791:	void pagecache_isize_extended(struct inode *, loff_t, loff_t);
190:	int truncate_inode_folio(struct address_space *, struct folio *);
446:	void truncate_inode_pages(struct address_space *, loff_t);
461:	void truncate_inode_pages_final(struct address_space *);
330:	void truncate_inode_pages_range(struct address_space *, loff_t, loff_t);
211:	bool truncate_inode_partial_folio(struct folio *, loff_t, loff_t);
728:	void truncate_pagecache(struct inode *, loff_t);
836:	void truncate_pagecache_range(struct inode *, loff_t, loff_t);
761:	void truncate_setsize(struct inode *, loff_t);
File mm/util.c:
448:	int __account_locked_vm(struct mm_struct *, unsigned long, bool, struct task_struct *, bool);
697:	void *__vcalloc(size_t, size_t, gfp_t);
911:	int __vm_enough_memory(struct mm_struct *, long, int);
670:	void *__vmalloc_array(size_t, size_t, gfp_t);
491:	int account_locked_vm(struct mm_struct *, unsigned long, bool);
357:	unsigned long arch_mmap_rnd(void);
410:	void arch_pick_mmap_layout(struct mm_struct *, struct rlimit *);
348:	unsigned long arch_randomize_brk(struct mm_struct *);
1106:	void flush_dcache_folio(struct folio *);
720:	struct anon_vma *folio_anon_vma(struct folio *);
770:	void folio_copy(struct folio *, struct folio *);
741:	struct address_space *folio_mapping(struct folio *);
965:	int get_cmdline(struct task_struct *, char *, int);
38:	void kfree_const(const void *);
125:	void *kmemdup(const void *, size_t, gfp_t);
145:	char *kmemdup_nul(const char *, size_t, gfp_t);
52:	char *kstrdup(const char *, gfp_t);
79:	const char *kstrdup_const(const char *, gfp_t);
98:	char *kstrndup(const char *, size_t, gfp_t);
622:	void kvfree(const void *);
640:	void kvfree_sensitive(const void *, size_t);
559:	void *kvmalloc_node(size_t, gfp_t, int);
649:	void *kvrealloc(const void *, size_t, size_t, gfp_t);
1039:	void mem_dump_obj(void *);
1014:	int memcmp_pages(struct page *, struct page *);
170:	void *memdup_user(const void *, size_t);
252:	void *memdup_user_nul(const void *, size_t);
842:	int overcommit_kbytes_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
806:	int overcommit_policy_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
790:	int overcommit_ratio_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
1093:	void page_offline_begin(void);
1099:	void page_offline_end(void);
1083:	void page_offline_freeze(void);
1088:	void page_offline_thaw(void);
715:	void *page_rmapping(struct page *);
329:	unsigned long randomize_page(unsigned long, unsigned long);
299:	unsigned long randomize_stack_top(unsigned long);
220:	char *strndup_user(const char *, long);
708:	void *vcalloc(size_t, size_t);
856:	unsigned long vm_commit_limit(void);
889:	unsigned long vm_memory_committed(void);
530:	unsigned long vm_mmap(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
507:	unsigned long vm_mmap_pgoff(struct file *, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);
276:	int vma_is_stack_for_current(struct vm_area_struct *);
286:	void vma_set_file(struct vm_area_struct *, struct file *);
685:	void *vmalloc_array(size_t, size_t);
196:	void *vmemdup_user(const void *, size_t);
File mm/vmalloc.c:
2538:	struct vm_struct *__get_vm_area_caller(unsigned long, unsigned long, unsigned long, unsigned long, const void *);
3304:	void *__vmalloc(unsigned long, gfp_t);
3289:	void *__vmalloc_node(unsigned long, unsigned long, gfp_t, int, const void *);
3142:	void *__vmalloc_node_range(unsigned long, unsigned long, unsigned long, unsigned long, gfp_t, pgprot_t, unsigned long, int, const void *);
590:	int __vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
425:	void __vunmap_range_noflush(unsigned long, unsigned long);
2583:	struct vm_struct *find_vm_area(const void *);
1863:	struct vmap_area *find_vmap_area(unsigned long);
3688:	void free_vm_area(struct vm_struct *);
2557:	struct vm_struct *get_vm_area(unsigned long, unsigned long);
2565:	struct vm_struct *get_vm_area_caller(unsigned long, unsigned long, const void *);
318:	int ioremap_page_range(unsigned long, unsigned long, phys_addr_t, pgprot_t);
78:	bool is_vmalloc_addr(const void *);
645:	int is_vmalloc_or_module_addr(const void *);
4035:	void pcpu_free_vm_areas(struct vm_struct **, int);
3789:	struct vm_struct **pcpu_get_vm_areas(const unsigned long *, const size_t *, int, size_t);
1678:	int register_vmap_purge_notifier(struct notifier_block *);
3679:	int remap_vmalloc_range(struct vm_area_struct *, void *, unsigned long);
3619:	int remap_vmalloc_range_partial(struct vm_area_struct *, unsigned long, void *, unsigned long, unsigned long);
2604:	struct vm_struct *remove_vm_area(const void *);
1684:	int unregister_vmap_purge_notifier(struct notifier_block *);
2795:	void vfree(const void *);
2759:	void vfree_atomic(const void *);
2330:	void vm_area_add_early(struct vm_struct *);
2358:	void vm_area_register_early(struct vm_struct *, size_t);
2261:	void *vm_map_ram(struct page **, unsigned int, int);
2205:	void vm_unmap_aliases(void);
2219:	void vm_unmap_ram(const void *, unsigned int);
3323:	void *vmalloc(unsigned long);
3447:	void *vmalloc_32(unsigned long);
3463:	void *vmalloc_32_user(unsigned long);
4046:	bool vmalloc_dump_obj(void *);
3342:	void *vmalloc_huge(unsigned long, gfp_t);
2419:	void vmalloc_init(void);
3401:	void *vmalloc_node(unsigned long, int);
807:	unsigned long vmalloc_nr_pages(void);
665:	struct page *vmalloc_to_page(const void *);
725:	unsigned long vmalloc_to_pfn(const void *);
3379:	void *vmalloc_user(unsigned long);
2843:	void *vmap(struct page **, unsigned int, unsigned long, pgprot_t);
616:	int vmap_pages_range_noflush(unsigned long, unsigned long, pgprot_t, struct page **, unsigned int);
3537:	long vread(char *, char *, unsigned long);
2819:	void vunmap(const void *);
462:	void vunmap_range(unsigned long, unsigned long);
447:	void vunmap_range_noflush(unsigned long, unsigned long);
3363:	void *vzalloc(unsigned long);
3419:	void *vzalloc_node(unsigned long, int);
File mm/vmpressure.c:
239:	void vmpressure(gfp_t, struct mem_cgroup *, bool, unsigned long, unsigned long);
466:	void vmpressure_cleanup(struct vmpressure *);
451:	void vmpressure_init(struct vmpressure *);
327:	void vmpressure_prio(gfp_t, struct mem_cgroup *, int);
366:	int vmpressure_register_event(struct mem_cgroup *, struct eventfd_ctx *, const char *);
427:	void vmpressure_unregister_event(struct mem_cgroup *, struct eventfd_ctx *);
File mm/vmscan.c:
1211:	void __acct_reclaim_writeback(pg_data_t *, struct folio *, int);
283:	int alloc_shrinker_info(struct mem_cgroup *);
7760:	void check_move_unevictable_folios(struct folio_batch *);
7734:	void check_move_unevictable_pages(struct pagevec *);
1037:	void drop_slab(void);
2333:	int folio_isolate_lru(struct folio *);
1454:	void folio_putback_lru(struct folio *);
676:	void free_prealloced_shrinker(struct shrinker *);
269:	void free_shrinker_info(struct mem_cgroup *);
7516:	void kswapd_run(int);
7537:	void kswapd_stop(int);
6718:	unsigned long mem_cgroup_shrink_node(struct mem_cgroup *, gfp_t, bool, pg_data_t *, unsigned long *);
7687:	int node_reclaim(struct pglist_data *, gfp_t, unsigned int);
670:	int prealloc_shrinker(struct shrinker *, const char *, ...);
2129:	unsigned int reclaim_clean_pages_from_list(struct zone *, struct list_head *);
2723:	unsigned long reclaim_pages(struct list_head *);
1137:	void reclaim_throttle(pg_data_t *, enum vmscan_throttle_state);
732:	int register_shrinker(struct shrinker *, const char *, ...);
693:	void register_shrinker_prepared(struct shrinker *);
1431:	long remove_mapping(struct address_space *, struct folio *);
423:	void reparent_shrinker_deferred(struct mem_cgroup *);
352:	void set_shrinker_bit(struct mem_cgroup *, int, int);
768:	void synchronize_shrinkers(void);
6757:	unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *, unsigned long, gfp_t, unsigned int);
6672:	unsigned long try_to_free_pages(struct zonelist *, int, gfp_t, nodemask_t *);
742:	void unregister_shrinker(struct shrinker *);
7429:	void wakeup_kswapd(struct zone *, gfp_t, int, enum zone_type);
583:	unsigned long zone_reclaimable_pages(struct zone *);
File mm/vmstat.c:
538:	void __dec_node_page_state(struct page *, enum node_stat_item);
509:	void __dec_node_state(struct pglist_data *, enum node_stat_item);
532:	void __dec_zone_page_state(struct page *, enum zone_stat_item);
488:	void __dec_zone_state(struct zone *, enum zone_stat_item);
482:	void __inc_node_page_state(struct page *, enum node_stat_item);
453:	void __inc_node_state(struct pglist_data *, enum node_stat_item);
476:	void __inc_zone_page_state(struct page *, enum zone_stat_item);
432:	void __inc_zone_state(struct zone *, enum zone_stat_item);
373:	void __mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
342:	void __mod_zone_page_state(struct zone *, enum zone_stat_item, long);
130:	void all_vm_events(unsigned long *);
222:	int calculate_normal_threshold(struct zone *);
198:	int calculate_pressure_threshold(struct zone *);
892:	void cpu_vm_stats_fold(int);
681:	void dec_node_page_state(struct page *, enum node_stat_item);
608:	void dec_zone_page_state(struct page *, enum zone_stat_item);
951:	void drain_zonestat(struct zone *, struct per_cpu_zonestat *);
1115:	unsigned int extfrag_for_order(struct zone *, unsigned int);
187:	void fold_vm_numa_events(void);
1129:	int fragmentation_index(struct zone *, unsigned int);
675:	void inc_node_page_state(struct page *, enum node_stat_item);
670:	void inc_node_state(struct pglist_data *, enum node_stat_item);
602:	void inc_zone_page_state(struct page *, enum zone_stat_item);
2090:	void init_mm_internals(void);
663:	void mod_node_page_state(struct pglist_data *, enum node_stat_item, long);
595:	void mod_zone_page_state(struct zone *, enum zone_stat_item, long);
1023:	unsigned long node_page_state(struct pglist_data *, enum node_stat_item);
1012:	unsigned long node_page_state_pages(struct pglist_data *, enum node_stat_item);
1980:	void quiet_vmstat(void);
272:	void refresh_zone_stat_thresholds(void);
317:	void set_pgdat_percpu_threshold(pg_data_t *, int (*)(struct zone *));
982:	unsigned long sum_zone_node_page_state(int, enum zone_stat_item);
996:	unsigned long sum_zone_numa_event_state(int, enum numa_stat_item);
77:	int sysctl_vm_numa_stat_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
144:	void vm_events_fold_cpu(int);
1873:	int vmstat_refresh(struct ctl_table *, int, void *, size_t *, loff_t *);
File mm/workingset.c:
510:	void workingset_activation(struct folio *);
325:	void workingset_age_nonresident(struct lruvec *, unsigned long);
351:	void *workingset_eviction(struct folio *, struct mem_cgroup *);
385:	void workingset_refault(struct folio *, void *);
544:	void workingset_update_node(struct xa_node *);
File security/commoncap.c:
890:	int cap_bprm_creds_from_file(struct linux_binprm *, struct file *);
66:	int cap_capable(const struct cred *, struct user_namespace *, int, unsigned int);
200:	int cap_capget(struct task_struct *, kernel_cap_t *, kernel_cap_t *, kernel_cap_t *);
242:	int cap_capset(struct cred *, const struct cred *, const kernel_cap_t *, const kernel_cap_t *, const kernel_cap_t *);
529:	int cap_convert_nscap(struct user_namespace *, struct dentry *, const void **, size_t);
380:	int cap_inode_getsecurity(struct user_namespace *, struct inode *, const char *, void **, bool);
321:	int cap_inode_killpriv(struct user_namespace *, struct dentry *);
296:	int cap_inode_need_killpriv(struct dentry *);
1035:	int cap_inode_removexattr(struct user_namespace *, struct dentry *, const char *);
994:	int cap_inode_setxattr(struct dentry *, const char *, const void *, size_t, int);
1426:	int cap_mmap_addr(unsigned long);
1440:	int cap_mmap_file(struct file *, unsigned long, unsigned long, unsigned long);
134:	int cap_ptrace_access_check(struct task_struct *, unsigned int);
171:	int cap_ptrace_traceme(struct task_struct *);
112:	int cap_settime(const struct timespec64 *, const struct timezone *);
1128:	int cap_task_fix_setuid(struct cred *, const struct cred *, int);
1270:	int cap_task_prctl(int, unsigned long, unsigned long, unsigned long, unsigned long);
1215:	int cap_task_setioprio(struct task_struct *, int);
1230:	int cap_task_setnice(struct task_struct *, int);
1200:	int cap_task_setscheduler(struct task_struct *);
1405:	int cap_vm_enough_memory(struct mm_struct *, long);
641:	int get_vfs_caps_from_disk(struct user_namespace *, const struct dentry *, struct cpu_vfs_cap_data *);
File security/device_cgroup.c:
861:	int devcgroup_check_permission(short, u32, u32, short);
File security/min_addr.c:
32:	int mmap_min_addr_handler(struct ctl_table *, int, void *, size_t *, loff_t *);
File tools/lib/bpf/relo_core.c:
146:	int __bpf_core_types_are_compat(const struct btf *, __u32, const struct btf *, __u32, int);
1544:	int __bpf_core_types_match(const struct btf *, __u32, const struct btf *, __u32, bool, int);
1280:	int bpf_core_calc_relo_insn(const char *, const struct bpf_core_relo *, int, const struct btf *, struct bpf_core_cand_list *, struct bpf_core_spec *, struct bpf_core_relo_res *);
1156:	int bpf_core_format_spec(char *, size_t, const struct bpf_core_spec *);
263:	int bpf_core_parse_spec(const char *, const struct btf *, const struct bpf_core_relo *, struct bpf_core_spec *);
1024:	int bpf_core_patch_insn(const char *, struct bpf_insn *, int, const struct bpf_core_relo *, int, const struct bpf_core_relo_res *);
Non-debugging symbols:
0xffff8000080102b4  __entry_text_start
0xffff8000080102b4  __softirqentry_text_end
0xffff8000084f24d0  __kprobes_text_end
0xffff8000084f24d0  __kprobes_text_start
0xffff8000084f24d0  __lock_text_end
0xffff8000084f47e0  __idmap_text_end
0xffff800008500000  _etext
0xffff80000862d000  __entry_tramp_text_end
0xffff80000862e000  idmap_pg_dir
0xffff80000862f000  tramp_pg_dir
0xffff800008630000  reserved_pg_dir
0xffff800008631000  swapper_pg_dir
0xffff8000086745b4  __exittext_end
